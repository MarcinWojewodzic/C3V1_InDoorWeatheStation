
C3V1-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019704  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f38  080198c8  080198c8  000298c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a800  0801a800  00030278  2**0
                  CONTENTS
  4 .ARM          00000008  0801a800  0801a800  0002a800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a808  0801a808  00030278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a808  0801a808  0002a808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a80c  0801a80c  0002a80c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000278  20000000  0801a810  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000198a0  20000278  0801aa88  00030278  2**2
                  ALLOC
 10 ._user_heap_stack 00000e00  20019b18  0801aa88  00039b18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030278  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003146b  00000000  00000000  000302a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006c1a  00000000  00000000  00061713  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002498  00000000  00000000  00068330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002190  00000000  00000000  0006a7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000357c2  00000000  00000000  0006c958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002ff6f  00000000  00000000  000a211a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012dc77  00000000  00000000  000d2089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001ffd00  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ad74  00000000  00000000  001ffd50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000278 	.word	0x20000278
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080198ac 	.word	0x080198ac

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000027c 	.word	0x2000027c
 80001fc:	080198ac 	.word	0x080198ac

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_ldivmod>:
 8000cb8:	b97b      	cbnz	r3, 8000cda <__aeabi_ldivmod+0x22>
 8000cba:	b972      	cbnz	r2, 8000cda <__aeabi_ldivmod+0x22>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bfbe      	ittt	lt
 8000cc0:	2000      	movlt	r0, #0
 8000cc2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cc6:	e006      	blt.n	8000cd6 <__aeabi_ldivmod+0x1e>
 8000cc8:	bf08      	it	eq
 8000cca:	2800      	cmpeq	r0, #0
 8000ccc:	bf1c      	itt	ne
 8000cce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cd2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd6:	f000 b9f5 	b.w	80010c4 <__aeabi_idiv0>
 8000cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	db09      	blt.n	8000cfa <__aeabi_ldivmod+0x42>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db1a      	blt.n	8000d20 <__aeabi_ldivmod+0x68>
 8000cea:	f000 f883 	bl	8000df4 <__udivmoddi4>
 8000cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf6:	b004      	add	sp, #16
 8000cf8:	4770      	bx	lr
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db1b      	blt.n	8000d3c <__aeabi_ldivmod+0x84>
 8000d04:	f000 f876 	bl	8000df4 <__udivmoddi4>
 8000d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d10:	b004      	add	sp, #16
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	4252      	negs	r2, r2
 8000d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f865 	bl	8000df4 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4240      	negs	r0, r0
 8000d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3a:	4770      	bx	lr
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d42:	f000 f857 	bl	8000df4 <__udivmoddi4>
 8000d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d4e:	b004      	add	sp, #16
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_uldivmod>:
 8000d58:	b953      	cbnz	r3, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5a:	b94a      	cbnz	r2, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5c:	2900      	cmp	r1, #0
 8000d5e:	bf08      	it	eq
 8000d60:	2800      	cmpeq	r0, #0
 8000d62:	bf1c      	itt	ne
 8000d64:	f04f 31ff 	movne.w	r1, #4294967295
 8000d68:	f04f 30ff 	movne.w	r0, #4294967295
 8000d6c:	f000 b9aa 	b.w	80010c4 <__aeabi_idiv0>
 8000d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d78:	f000 f83c 	bl	8000df4 <__udivmoddi4>
 8000d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d84:	b004      	add	sp, #16
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_d2lz>:
 8000d88:	b538      	push	{r3, r4, r5, lr}
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	4604      	mov	r4, r0
 8000d90:	460d      	mov	r5, r1
 8000d92:	f7ff febb 	bl	8000b0c <__aeabi_dcmplt>
 8000d96:	b928      	cbnz	r0, 8000da4 <__aeabi_d2lz+0x1c>
 8000d98:	4620      	mov	r0, r4
 8000d9a:	4629      	mov	r1, r5
 8000d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000da0:	f000 b80a 	b.w	8000db8 <__aeabi_d2ulz>
 8000da4:	4620      	mov	r0, r4
 8000da6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000daa:	f000 f805 	bl	8000db8 <__aeabi_d2ulz>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	bd38      	pop	{r3, r4, r5, pc}
 8000db6:	bf00      	nop

08000db8 <__aeabi_d2ulz>:
 8000db8:	b5d0      	push	{r4, r6, r7, lr}
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <__aeabi_d2ulz+0x34>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	4606      	mov	r6, r0
 8000dc0:	460f      	mov	r7, r1
 8000dc2:	f7ff fc31 	bl	8000628 <__aeabi_dmul>
 8000dc6:	f7ff ff07 	bl	8000bd8 <__aeabi_d2uiz>
 8000dca:	4604      	mov	r4, r0
 8000dcc:	f7ff fbb2 	bl	8000534 <__aeabi_ui2d>
 8000dd0:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <__aeabi_d2ulz+0x38>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f7ff fc28 	bl	8000628 <__aeabi_dmul>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4630      	mov	r0, r6
 8000dde:	4639      	mov	r1, r7
 8000de0:	f7ff fa6a 	bl	80002b8 <__aeabi_dsub>
 8000de4:	f7ff fef8 	bl	8000bd8 <__aeabi_d2uiz>
 8000de8:	4621      	mov	r1, r4
 8000dea:	bdd0      	pop	{r4, r6, r7, pc}
 8000dec:	3df00000 	.word	0x3df00000
 8000df0:	41f00000 	.word	0x41f00000

08000df4 <__udivmoddi4>:
 8000df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df8:	9d08      	ldr	r5, [sp, #32]
 8000dfa:	4604      	mov	r4, r0
 8000dfc:	468e      	mov	lr, r1
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d14d      	bne.n	8000e9e <__udivmoddi4+0xaa>
 8000e02:	428a      	cmp	r2, r1
 8000e04:	4694      	mov	ip, r2
 8000e06:	d969      	bls.n	8000edc <__udivmoddi4+0xe8>
 8000e08:	fab2 f282 	clz	r2, r2
 8000e0c:	b152      	cbz	r2, 8000e24 <__udivmoddi4+0x30>
 8000e0e:	fa01 f302 	lsl.w	r3, r1, r2
 8000e12:	f1c2 0120 	rsb	r1, r2, #32
 8000e16:	fa20 f101 	lsr.w	r1, r0, r1
 8000e1a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1e:	ea41 0e03 	orr.w	lr, r1, r3
 8000e22:	4094      	lsls	r4, r2
 8000e24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e28:	0c21      	lsrs	r1, r4, #16
 8000e2a:	fbbe f6f8 	udiv	r6, lr, r8
 8000e2e:	fa1f f78c 	uxth.w	r7, ip
 8000e32:	fb08 e316 	mls	r3, r8, r6, lr
 8000e36:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e3a:	fb06 f107 	mul.w	r1, r6, r7
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d90a      	bls.n	8000e58 <__udivmoddi4+0x64>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e4a:	f080 811f 	bcs.w	800108c <__udivmoddi4+0x298>
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	f240 811c 	bls.w	800108c <__udivmoddi4+0x298>
 8000e54:	3e02      	subs	r6, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1a5b      	subs	r3, r3, r1
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e60:	fb08 3310 	mls	r3, r8, r0, r3
 8000e64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e68:	fb00 f707 	mul.w	r7, r0, r7
 8000e6c:	42a7      	cmp	r7, r4
 8000e6e:	d90a      	bls.n	8000e86 <__udivmoddi4+0x92>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e78:	f080 810a 	bcs.w	8001090 <__udivmoddi4+0x29c>
 8000e7c:	42a7      	cmp	r7, r4
 8000e7e:	f240 8107 	bls.w	8001090 <__udivmoddi4+0x29c>
 8000e82:	4464      	add	r4, ip
 8000e84:	3802      	subs	r0, #2
 8000e86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e8a:	1be4      	subs	r4, r4, r7
 8000e8c:	2600      	movs	r6, #0
 8000e8e:	b11d      	cbz	r5, 8000e98 <__udivmoddi4+0xa4>
 8000e90:	40d4      	lsrs	r4, r2
 8000e92:	2300      	movs	r3, #0
 8000e94:	e9c5 4300 	strd	r4, r3, [r5]
 8000e98:	4631      	mov	r1, r6
 8000e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	d909      	bls.n	8000eb6 <__udivmoddi4+0xc2>
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	f000 80ef 	beq.w	8001086 <__udivmoddi4+0x292>
 8000ea8:	2600      	movs	r6, #0
 8000eaa:	e9c5 0100 	strd	r0, r1, [r5]
 8000eae:	4630      	mov	r0, r6
 8000eb0:	4631      	mov	r1, r6
 8000eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb6:	fab3 f683 	clz	r6, r3
 8000eba:	2e00      	cmp	r6, #0
 8000ebc:	d14a      	bne.n	8000f54 <__udivmoddi4+0x160>
 8000ebe:	428b      	cmp	r3, r1
 8000ec0:	d302      	bcc.n	8000ec8 <__udivmoddi4+0xd4>
 8000ec2:	4282      	cmp	r2, r0
 8000ec4:	f200 80f9 	bhi.w	80010ba <__udivmoddi4+0x2c6>
 8000ec8:	1a84      	subs	r4, r0, r2
 8000eca:	eb61 0303 	sbc.w	r3, r1, r3
 8000ece:	2001      	movs	r0, #1
 8000ed0:	469e      	mov	lr, r3
 8000ed2:	2d00      	cmp	r5, #0
 8000ed4:	d0e0      	beq.n	8000e98 <__udivmoddi4+0xa4>
 8000ed6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eda:	e7dd      	b.n	8000e98 <__udivmoddi4+0xa4>
 8000edc:	b902      	cbnz	r2, 8000ee0 <__udivmoddi4+0xec>
 8000ede:	deff      	udf	#255	; 0xff
 8000ee0:	fab2 f282 	clz	r2, r2
 8000ee4:	2a00      	cmp	r2, #0
 8000ee6:	f040 8092 	bne.w	800100e <__udivmoddi4+0x21a>
 8000eea:	eba1 010c 	sub.w	r1, r1, ip
 8000eee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef2:	fa1f fe8c 	uxth.w	lr, ip
 8000ef6:	2601      	movs	r6, #1
 8000ef8:	0c20      	lsrs	r0, r4, #16
 8000efa:	fbb1 f3f7 	udiv	r3, r1, r7
 8000efe:	fb07 1113 	mls	r1, r7, r3, r1
 8000f02:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f06:	fb0e f003 	mul.w	r0, lr, r3
 8000f0a:	4288      	cmp	r0, r1
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x12c>
 8000f0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f12:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f16:	d202      	bcs.n	8000f1e <__udivmoddi4+0x12a>
 8000f18:	4288      	cmp	r0, r1
 8000f1a:	f200 80cb 	bhi.w	80010b4 <__udivmoddi4+0x2c0>
 8000f1e:	4643      	mov	r3, r8
 8000f20:	1a09      	subs	r1, r1, r0
 8000f22:	b2a4      	uxth	r4, r4
 8000f24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f28:	fb07 1110 	mls	r1, r7, r0, r1
 8000f2c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f30:	fb0e fe00 	mul.w	lr, lr, r0
 8000f34:	45a6      	cmp	lr, r4
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x156>
 8000f38:	eb1c 0404 	adds.w	r4, ip, r4
 8000f3c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f40:	d202      	bcs.n	8000f48 <__udivmoddi4+0x154>
 8000f42:	45a6      	cmp	lr, r4
 8000f44:	f200 80bb 	bhi.w	80010be <__udivmoddi4+0x2ca>
 8000f48:	4608      	mov	r0, r1
 8000f4a:	eba4 040e 	sub.w	r4, r4, lr
 8000f4e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f52:	e79c      	b.n	8000e8e <__udivmoddi4+0x9a>
 8000f54:	f1c6 0720 	rsb	r7, r6, #32
 8000f58:	40b3      	lsls	r3, r6
 8000f5a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f5e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f62:	fa20 f407 	lsr.w	r4, r0, r7
 8000f66:	fa01 f306 	lsl.w	r3, r1, r6
 8000f6a:	431c      	orrs	r4, r3
 8000f6c:	40f9      	lsrs	r1, r7
 8000f6e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f72:	fa00 f306 	lsl.w	r3, r0, r6
 8000f76:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f7a:	0c20      	lsrs	r0, r4, #16
 8000f7c:	fa1f fe8c 	uxth.w	lr, ip
 8000f80:	fb09 1118 	mls	r1, r9, r8, r1
 8000f84:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f88:	fb08 f00e 	mul.w	r0, r8, lr
 8000f8c:	4288      	cmp	r0, r1
 8000f8e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f92:	d90b      	bls.n	8000fac <__udivmoddi4+0x1b8>
 8000f94:	eb1c 0101 	adds.w	r1, ip, r1
 8000f98:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f9c:	f080 8088 	bcs.w	80010b0 <__udivmoddi4+0x2bc>
 8000fa0:	4288      	cmp	r0, r1
 8000fa2:	f240 8085 	bls.w	80010b0 <__udivmoddi4+0x2bc>
 8000fa6:	f1a8 0802 	sub.w	r8, r8, #2
 8000faa:	4461      	add	r1, ip
 8000fac:	1a09      	subs	r1, r1, r0
 8000fae:	b2a4      	uxth	r4, r4
 8000fb0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000fb4:	fb09 1110 	mls	r1, r9, r0, r1
 8000fb8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fbc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fc0:	458e      	cmp	lr, r1
 8000fc2:	d908      	bls.n	8000fd6 <__udivmoddi4+0x1e2>
 8000fc4:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fcc:	d26c      	bcs.n	80010a8 <__udivmoddi4+0x2b4>
 8000fce:	458e      	cmp	lr, r1
 8000fd0:	d96a      	bls.n	80010a8 <__udivmoddi4+0x2b4>
 8000fd2:	3802      	subs	r0, #2
 8000fd4:	4461      	add	r1, ip
 8000fd6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fda:	fba0 9402 	umull	r9, r4, r0, r2
 8000fde:	eba1 010e 	sub.w	r1, r1, lr
 8000fe2:	42a1      	cmp	r1, r4
 8000fe4:	46c8      	mov	r8, r9
 8000fe6:	46a6      	mov	lr, r4
 8000fe8:	d356      	bcc.n	8001098 <__udivmoddi4+0x2a4>
 8000fea:	d053      	beq.n	8001094 <__udivmoddi4+0x2a0>
 8000fec:	b15d      	cbz	r5, 8001006 <__udivmoddi4+0x212>
 8000fee:	ebb3 0208 	subs.w	r2, r3, r8
 8000ff2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ff6:	fa01 f707 	lsl.w	r7, r1, r7
 8000ffa:	fa22 f306 	lsr.w	r3, r2, r6
 8000ffe:	40f1      	lsrs	r1, r6
 8001000:	431f      	orrs	r7, r3
 8001002:	e9c5 7100 	strd	r7, r1, [r5]
 8001006:	2600      	movs	r6, #0
 8001008:	4631      	mov	r1, r6
 800100a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800100e:	f1c2 0320 	rsb	r3, r2, #32
 8001012:	40d8      	lsrs	r0, r3
 8001014:	fa0c fc02 	lsl.w	ip, ip, r2
 8001018:	fa21 f303 	lsr.w	r3, r1, r3
 800101c:	4091      	lsls	r1, r2
 800101e:	4301      	orrs	r1, r0
 8001020:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001024:	fa1f fe8c 	uxth.w	lr, ip
 8001028:	fbb3 f0f7 	udiv	r0, r3, r7
 800102c:	fb07 3610 	mls	r6, r7, r0, r3
 8001030:	0c0b      	lsrs	r3, r1, #16
 8001032:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001036:	fb00 f60e 	mul.w	r6, r0, lr
 800103a:	429e      	cmp	r6, r3
 800103c:	fa04 f402 	lsl.w	r4, r4, r2
 8001040:	d908      	bls.n	8001054 <__udivmoddi4+0x260>
 8001042:	eb1c 0303 	adds.w	r3, ip, r3
 8001046:	f100 38ff 	add.w	r8, r0, #4294967295
 800104a:	d22f      	bcs.n	80010ac <__udivmoddi4+0x2b8>
 800104c:	429e      	cmp	r6, r3
 800104e:	d92d      	bls.n	80010ac <__udivmoddi4+0x2b8>
 8001050:	3802      	subs	r0, #2
 8001052:	4463      	add	r3, ip
 8001054:	1b9b      	subs	r3, r3, r6
 8001056:	b289      	uxth	r1, r1
 8001058:	fbb3 f6f7 	udiv	r6, r3, r7
 800105c:	fb07 3316 	mls	r3, r7, r6, r3
 8001060:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001064:	fb06 f30e 	mul.w	r3, r6, lr
 8001068:	428b      	cmp	r3, r1
 800106a:	d908      	bls.n	800107e <__udivmoddi4+0x28a>
 800106c:	eb1c 0101 	adds.w	r1, ip, r1
 8001070:	f106 38ff 	add.w	r8, r6, #4294967295
 8001074:	d216      	bcs.n	80010a4 <__udivmoddi4+0x2b0>
 8001076:	428b      	cmp	r3, r1
 8001078:	d914      	bls.n	80010a4 <__udivmoddi4+0x2b0>
 800107a:	3e02      	subs	r6, #2
 800107c:	4461      	add	r1, ip
 800107e:	1ac9      	subs	r1, r1, r3
 8001080:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001084:	e738      	b.n	8000ef8 <__udivmoddi4+0x104>
 8001086:	462e      	mov	r6, r5
 8001088:	4628      	mov	r0, r5
 800108a:	e705      	b.n	8000e98 <__udivmoddi4+0xa4>
 800108c:	4606      	mov	r6, r0
 800108e:	e6e3      	b.n	8000e58 <__udivmoddi4+0x64>
 8001090:	4618      	mov	r0, r3
 8001092:	e6f8      	b.n	8000e86 <__udivmoddi4+0x92>
 8001094:	454b      	cmp	r3, r9
 8001096:	d2a9      	bcs.n	8000fec <__udivmoddi4+0x1f8>
 8001098:	ebb9 0802 	subs.w	r8, r9, r2
 800109c:	eb64 0e0c 	sbc.w	lr, r4, ip
 80010a0:	3801      	subs	r0, #1
 80010a2:	e7a3      	b.n	8000fec <__udivmoddi4+0x1f8>
 80010a4:	4646      	mov	r6, r8
 80010a6:	e7ea      	b.n	800107e <__udivmoddi4+0x28a>
 80010a8:	4620      	mov	r0, r4
 80010aa:	e794      	b.n	8000fd6 <__udivmoddi4+0x1e2>
 80010ac:	4640      	mov	r0, r8
 80010ae:	e7d1      	b.n	8001054 <__udivmoddi4+0x260>
 80010b0:	46d0      	mov	r8, sl
 80010b2:	e77b      	b.n	8000fac <__udivmoddi4+0x1b8>
 80010b4:	3b02      	subs	r3, #2
 80010b6:	4461      	add	r1, ip
 80010b8:	e732      	b.n	8000f20 <__udivmoddi4+0x12c>
 80010ba:	4630      	mov	r0, r6
 80010bc:	e709      	b.n	8000ed2 <__udivmoddi4+0xde>
 80010be:	4464      	add	r4, ip
 80010c0:	3802      	subs	r0, #2
 80010c2:	e742      	b.n	8000f4a <__udivmoddi4+0x156>

080010c4 <__aeabi_idiv0>:
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop

080010c8 <GFX_DrawPixelScreen>:

#if USING_STRINGS == 1
const uint8_t *font;
uint8_t size = 1;
static void GFX_DrawPixelScreen(uint16_t x, uint16_t y, uint8_t color, Screen_TypeDef Screen)
{
 80010c8:	b590      	push	{r4, r7, lr}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4604      	mov	r4, r0
 80010d0:	4608      	mov	r0, r1
 80010d2:	4611      	mov	r1, r2
 80010d4:	461a      	mov	r2, r3
 80010d6:	4623      	mov	r3, r4
 80010d8:	80fb      	strh	r3, [r7, #6]
 80010da:	4603      	mov	r3, r0
 80010dc:	80bb      	strh	r3, [r7, #4]
 80010de:	460b      	mov	r3, r1
 80010e0:	70fb      	strb	r3, [r7, #3]
 80010e2:	4613      	mov	r3, r2
 80010e4:	70bb      	strb	r3, [r7, #2]
   if(Screen == OLED)
 80010e6:	78bb      	ldrb	r3, [r7, #2]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d108      	bne.n	80010fe <GFX_DrawPixelScreen+0x36>
   {
      GFX_DrawPixelOled(x, y, color);
 80010ec:	88fb      	ldrh	r3, [r7, #6]
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	88ba      	ldrh	r2, [r7, #4]
 80010f2:	b2d1      	uxtb	r1, r2
 80010f4:	78fa      	ldrb	r2, [r7, #3]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f007 fa50 	bl	800859c <ssd1306_set_pixel>
   }
   else if(Screen == E_PAPIER)
   {
      GFX_DrawPixelEpapier(x, y, color);
   }
}
 80010fc:	e008      	b.n	8001110 <GFX_DrawPixelScreen+0x48>
   else if(Screen == E_PAPIER)
 80010fe:	78bb      	ldrb	r3, [r7, #2]
 8001100:	2b01      	cmp	r3, #1
 8001102:	d105      	bne.n	8001110 <GFX_DrawPixelScreen+0x48>
      GFX_DrawPixelEpapier(x, y, color);
 8001104:	78fa      	ldrb	r2, [r7, #3]
 8001106:	88b9      	ldrh	r1, [r7, #4]
 8001108:	88fb      	ldrh	r3, [r7, #6]
 800110a:	4618      	mov	r0, r3
 800110c:	f001 fd1c 	bl	8002b48 <e_papier_set_pixel>
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	bd90      	pop	{r4, r7, pc}

08001118 <GFX_SetFont>:
void GFX_SetFont(const uint8_t *font_t)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
   font = font_t;
 8001120:	4a04      	ldr	r2, [pc, #16]	; (8001134 <GFX_SetFont+0x1c>)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6013      	str	r3, [r2, #0]
}
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	20000294 	.word	0x20000294

08001138 <GFX_DrawChar>:
{
   return size;
}

void GFX_DrawChar(int x, int y, char chr, uint8_t color, uint8_t background, Screen_TypeDef Screen)
{
 8001138:	b590      	push	{r4, r7, lr}
 800113a:	b089      	sub	sp, #36	; 0x24
 800113c:	af02      	add	r7, sp, #8
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	4611      	mov	r1, r2
 8001144:	461a      	mov	r2, r3
 8001146:	460b      	mov	r3, r1
 8001148:	71fb      	strb	r3, [r7, #7]
 800114a:	4613      	mov	r3, r2
 800114c:	71bb      	strb	r3, [r7, #6]
   if(chr > 0x7E)
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	2b7e      	cmp	r3, #126	; 0x7e
 8001152:	f200 80a7 	bhi.w	80012a4 <GFX_DrawChar+0x16c>
      return; // chr > '~'

   for(uint8_t i = 0; i < font[1]; i++) // Each column (Width)
 8001156:	2300      	movs	r3, #0
 8001158:	75fb      	strb	r3, [r7, #23]
 800115a:	e09a      	b.n	8001292 <GFX_DrawChar+0x15a>
   {
      uint8_t line = (uint8_t)font[(chr - 0x20) * font[1] + i + 2]; // Takie this line, (chr-0x20) = move 20 chars back,
 800115c:	4b53      	ldr	r3, [pc, #332]	; (80012ac <GFX_DrawChar+0x174>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	3b20      	subs	r3, #32
 8001164:	4951      	ldr	r1, [pc, #324]	; (80012ac <GFX_DrawChar+0x174>)
 8001166:	6809      	ldr	r1, [r1, #0]
 8001168:	3101      	adds	r1, #1
 800116a:	7809      	ldrb	r1, [r1, #0]
 800116c:	fb03 f101 	mul.w	r1, r3, r1
 8001170:	7dfb      	ldrb	r3, [r7, #23]
 8001172:	440b      	add	r3, r1
 8001174:	3302      	adds	r3, #2
 8001176:	4413      	add	r3, r2
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	75bb      	strb	r3, [r7, #22]

      for(int8_t j = 0; j < font[0]; j++, line >>= 1) // For each pixel in column
 800117c:	2300      	movs	r3, #0
 800117e:	757b      	strb	r3, [r7, #21]
 8001180:	e07c      	b.n	800127c <GFX_DrawChar+0x144>
      {
         if(line & 1) // Check last pixel in line
 8001182:	7dbb      	ldrb	r3, [r7, #22]
 8001184:	f003 0301 	and.w	r3, r3, #1
 8001188:	2b00      	cmp	r3, #0
 800118a:	d034      	beq.n	80011f6 <GFX_DrawChar+0xbe>
         {
            if(size == 1)
 800118c:	4b48      	ldr	r3, [pc, #288]	; (80012b0 <GFX_DrawChar+0x178>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d112      	bne.n	80011ba <GFX_DrawChar+0x82>
               GFX_DrawPixelScreen(x + i, y + j, color, Screen); // Draw this pixel
 8001194:	7dfb      	ldrb	r3, [r7, #23]
 8001196:	b29a      	uxth	r2, r3
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	b29b      	uxth	r3, r3
 800119c:	4413      	add	r3, r2
 800119e:	b298      	uxth	r0, r3
 80011a0:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	4413      	add	r3, r2
 80011ac:	b299      	uxth	r1, r3
 80011ae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80011b2:	79ba      	ldrb	r2, [r7, #6]
 80011b4:	f7ff ff88 	bl	80010c8 <GFX_DrawPixelScreen>
 80011b8:	e057      	b.n	800126a <GFX_DrawChar+0x132>
            else
               GFX_DrawFillRectangle(x + i * size, y + j * size, size, size, color, Screen); // Or bigger pixel
 80011ba:	7dfb      	ldrb	r3, [r7, #23]
 80011bc:	4a3c      	ldr	r2, [pc, #240]	; (80012b0 <GFX_DrawChar+0x178>)
 80011be:	7812      	ldrb	r2, [r2, #0]
 80011c0:	fb03 f202 	mul.w	r2, r3, r2
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	18d0      	adds	r0, r2, r3
 80011c8:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80011cc:	4a38      	ldr	r2, [pc, #224]	; (80012b0 <GFX_DrawChar+0x178>)
 80011ce:	7812      	ldrb	r2, [r2, #0]
 80011d0:	fb03 f202 	mul.w	r2, r3, r2
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	18d1      	adds	r1, r2, r3
 80011d8:	4b35      	ldr	r3, [pc, #212]	; (80012b0 <GFX_DrawChar+0x178>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	b29a      	uxth	r2, r3
 80011de:	4b34      	ldr	r3, [pc, #208]	; (80012b0 <GFX_DrawChar+0x178>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	b29c      	uxth	r4, r3
 80011e4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80011e8:	9301      	str	r3, [sp, #4]
 80011ea:	79bb      	ldrb	r3, [r7, #6]
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	4623      	mov	r3, r4
 80011f0:	f000 f968 	bl	80014c4 <GFX_DrawFillRectangle>
 80011f4:	e039      	b.n	800126a <GFX_DrawChar+0x132>
         }
         else if(background == 0)
 80011f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d135      	bne.n	800126a <GFX_DrawChar+0x132>
         {
            if(size == 1)
 80011fe:	4b2c      	ldr	r3, [pc, #176]	; (80012b0 <GFX_DrawChar+0x178>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d113      	bne.n	800122e <GFX_DrawChar+0xf6>
               GFX_DrawPixelScreen(x + i, y + j, background, Screen); // Draw black BG
 8001206:	7dfb      	ldrb	r3, [r7, #23]
 8001208:	b29a      	uxth	r2, r3
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	b29b      	uxth	r3, r3
 800120e:	4413      	add	r3, r2
 8001210:	b298      	uxth	r0, r3
 8001212:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001216:	b29a      	uxth	r2, r3
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	b29b      	uxth	r3, r3
 800121c:	4413      	add	r3, r2
 800121e:	b299      	uxth	r1, r3
 8001220:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001224:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001228:	f7ff ff4e 	bl	80010c8 <GFX_DrawPixelScreen>
 800122c:	e01d      	b.n	800126a <GFX_DrawChar+0x132>
            else
               GFX_DrawFillRectangle(x + i * size, y + j * size, size, size, background, Screen); // Or bigger
 800122e:	7dfb      	ldrb	r3, [r7, #23]
 8001230:	4a1f      	ldr	r2, [pc, #124]	; (80012b0 <GFX_DrawChar+0x178>)
 8001232:	7812      	ldrb	r2, [r2, #0]
 8001234:	fb03 f202 	mul.w	r2, r3, r2
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	18d0      	adds	r0, r2, r3
 800123c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001240:	4a1b      	ldr	r2, [pc, #108]	; (80012b0 <GFX_DrawChar+0x178>)
 8001242:	7812      	ldrb	r2, [r2, #0]
 8001244:	fb03 f202 	mul.w	r2, r3, r2
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	18d1      	adds	r1, r2, r3
 800124c:	4b18      	ldr	r3, [pc, #96]	; (80012b0 <GFX_DrawChar+0x178>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	b29a      	uxth	r2, r3
 8001252:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <GFX_DrawChar+0x178>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	b29c      	uxth	r4, r3
 8001258:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800125c:	9301      	str	r3, [sp, #4]
 800125e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	4623      	mov	r3, r4
 8001266:	f000 f92d 	bl	80014c4 <GFX_DrawFillRectangle>
      for(int8_t j = 0; j < font[0]; j++, line >>= 1) // For each pixel in column
 800126a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800126e:	b2db      	uxtb	r3, r3
 8001270:	3301      	adds	r3, #1
 8001272:	b2db      	uxtb	r3, r3
 8001274:	757b      	strb	r3, [r7, #21]
 8001276:	7dbb      	ldrb	r3, [r7, #22]
 8001278:	085b      	lsrs	r3, r3, #1
 800127a:	75bb      	strb	r3, [r7, #22]
 800127c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001280:	4a0a      	ldr	r2, [pc, #40]	; (80012ac <GFX_DrawChar+0x174>)
 8001282:	6812      	ldr	r2, [r2, #0]
 8001284:	7812      	ldrb	r2, [r2, #0]
 8001286:	4293      	cmp	r3, r2
 8001288:	f6ff af7b 	blt.w	8001182 <GFX_DrawChar+0x4a>
   for(uint8_t i = 0; i < font[1]; i++) // Each column (Width)
 800128c:	7dfb      	ldrb	r3, [r7, #23]
 800128e:	3301      	adds	r3, #1
 8001290:	75fb      	strb	r3, [r7, #23]
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <GFX_DrawChar+0x174>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	3301      	adds	r3, #1
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	7dfa      	ldrb	r2, [r7, #23]
 800129c:	429a      	cmp	r2, r3
 800129e:	f4ff af5d 	bcc.w	800115c <GFX_DrawChar+0x24>
 80012a2:	e000      	b.n	80012a6 <GFX_DrawChar+0x16e>
      return; // chr > '~'
 80012a4:	bf00      	nop
         }
      }
   }
}
 80012a6:	371c      	adds	r7, #28
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd90      	pop	{r4, r7, pc}
 80012ac:	20000294 	.word	0x20000294
 80012b0:	20000000 	.word	0x20000000

080012b4 <GFX_DrawString>:

void GFX_DrawString(int x, int y, char *str, uint8_t color, uint8_t background, Screen_TypeDef Screen)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b088      	sub	sp, #32
 80012b8:	af02      	add	r7, sp, #8
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
 80012c0:	70fb      	strb	r3, [r7, #3]
   int x_tmp = x;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	617b      	str	r3, [r7, #20]

   char znak;
   znak = *str;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	74fb      	strb	r3, [r7, #19]

   while(*str++)
 80012cc:	e040      	b.n	8001350 <GFX_DrawString+0x9c>
   {
      GFX_DrawChar(x_tmp, y, znak, color, background, Screen); // Draw current char
 80012ce:	78f9      	ldrb	r1, [r7, #3]
 80012d0:	7cfa      	ldrb	r2, [r7, #19]
 80012d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80012d6:	9301      	str	r3, [sp, #4]
 80012d8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012dc:	9300      	str	r3, [sp, #0]
 80012de:	460b      	mov	r3, r1
 80012e0:	68b9      	ldr	r1, [r7, #8]
 80012e2:	6978      	ldr	r0, [r7, #20]
 80012e4:	f7ff ff28 	bl	8001138 <GFX_DrawChar>

      x_tmp += ((uint8_t)font[1] * size) + 1; // Move X drawing pointer do char width + 1 (space)
 80012e8:	4b1f      	ldr	r3, [pc, #124]	; (8001368 <GFX_DrawString+0xb4>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	3301      	adds	r3, #1
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	461a      	mov	r2, r3
 80012f2:	4b1e      	ldr	r3, [pc, #120]	; (800136c <GFX_DrawString+0xb8>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	fb02 f303 	mul.w	r3, r2, r3
 80012fa:	3301      	adds	r3, #1
 80012fc:	697a      	ldr	r2, [r7, #20]
 80012fe:	4413      	add	r3, r2
 8001300:	617b      	str	r3, [r7, #20]

      if(background == 0) // Draw black space if needed
 8001302:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d11f      	bne.n	800134a <GFX_DrawString+0x96>
      {
         for(uint8_t i = 0; i < (font[0] * size); i++)
 800130a:	2300      	movs	r3, #0
 800130c:	74bb      	strb	r3, [r7, #18]
 800130e:	e011      	b.n	8001334 <GFX_DrawString+0x80>
         {
            GFX_DrawPixelScreen(x_tmp - 1, y + i, PIXEL_BLACK, Screen);
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	b29b      	uxth	r3, r3
 8001314:	3b01      	subs	r3, #1
 8001316:	b298      	uxth	r0, r3
 8001318:	7cbb      	ldrb	r3, [r7, #18]
 800131a:	b29a      	uxth	r2, r3
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	b29b      	uxth	r3, r3
 8001320:	4413      	add	r3, r2
 8001322:	b299      	uxth	r1, r3
 8001324:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001328:	2200      	movs	r2, #0
 800132a:	f7ff fecd 	bl	80010c8 <GFX_DrawPixelScreen>
         for(uint8_t i = 0; i < (font[0] * size); i++)
 800132e:	7cbb      	ldrb	r3, [r7, #18]
 8001330:	3301      	adds	r3, #1
 8001332:	74bb      	strb	r3, [r7, #18]
 8001334:	7cba      	ldrb	r2, [r7, #18]
 8001336:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <GFX_DrawString+0xb4>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	4619      	mov	r1, r3
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <GFX_DrawString+0xb8>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	fb01 f303 	mul.w	r3, r1, r3
 8001346:	429a      	cmp	r2, r3
 8001348:	dbe2      	blt.n	8001310 <GFX_DrawString+0x5c>
         }
      }

      znak = *str; // Next char
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	74fb      	strb	r3, [r7, #19]
   while(*str++)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	1c5a      	adds	r2, r3, #1
 8001354:	607a      	str	r2, [r7, #4]
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1b8      	bne.n	80012ce <GFX_DrawString+0x1a>
   }
}
 800135c:	bf00      	nop
 800135e:	bf00      	nop
 8001360:	3718      	adds	r7, #24
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000294 	.word	0x20000294
 800136c:	20000000 	.word	0x20000000

08001370 <GFX_WriteLine>:
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, uint8_t color, Screen_TypeDef Screen)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08c      	sub	sp, #48	; 0x30
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
 800137c:	603b      	str	r3, [r7, #0]
   int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 800137e:	683a      	ldr	r2, [r7, #0]
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001388:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800138c:	6879      	ldr	r1, [r7, #4]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	1acb      	subs	r3, r1, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	bfb8      	it	lt
 8001396:	425b      	neglt	r3, r3
 8001398:	429a      	cmp	r2, r3
 800139a:	bfcc      	ite	gt
 800139c:	2301      	movgt	r3, #1
 800139e:	2300      	movle	r3, #0
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	857b      	strh	r3, [r7, #42]	; 0x2a

   if(steep)
 80013a4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d00b      	beq.n	80013c4 <GFX_WriteLine+0x54>
   {
      _swap_int(x_start, y_start);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b6:	60bb      	str	r3, [r7, #8]
      _swap_int(x_end, y_end);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	623b      	str	r3, [r7, #32]
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	6a3b      	ldr	r3, [r7, #32]
 80013c2:	603b      	str	r3, [r7, #0]
   }

   if(x_start > x_end)
 80013c4:	68fa      	ldr	r2, [r7, #12]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	dd0b      	ble.n	80013e4 <GFX_WriteLine+0x74>
   {
      _swap_int(x_start, x_end);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	61fb      	str	r3, [r7, #28]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	607b      	str	r3, [r7, #4]
      _swap_int(y_start, y_end);
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	61bb      	str	r3, [r7, #24]
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	60bb      	str	r3, [r7, #8]
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	603b      	str	r3, [r7, #0]
   }

   int16_t dx, dy;
   dx = x_end - x_start;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	b29a      	uxth	r2, r3
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	82fb      	strh	r3, [r7, #22]
   dy = abs(y_end - y_start);
 80013f2:	683a      	ldr	r2, [r7, #0]
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	bfb8      	it	lt
 80013fc:	425b      	neglt	r3, r3
 80013fe:	82bb      	strh	r3, [r7, #20]

   int16_t err = dx / 2;
 8001400:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001404:	0fda      	lsrs	r2, r3, #31
 8001406:	4413      	add	r3, r2
 8001408:	105b      	asrs	r3, r3, #1
 800140a:	85fb      	strh	r3, [r7, #46]	; 0x2e
   int16_t ystep;

   if(y_start < y_end)
 800140c:	68ba      	ldr	r2, [r7, #8]
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	429a      	cmp	r2, r3
 8001412:	da02      	bge.n	800141a <GFX_WriteLine+0xaa>
   {
      ystep = 1;
 8001414:	2301      	movs	r3, #1
 8001416:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001418:	e032      	b.n	8001480 <GFX_WriteLine+0x110>
   }
   else
   {
      ystep = -1;
 800141a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800141e:	85bb      	strh	r3, [r7, #44]	; 0x2c
   }

   for(; x_start <= x_end; x_start++)
 8001420:	e02e      	b.n	8001480 <GFX_WriteLine+0x110>
   {
      if(steep)
 8001422:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001426:	2b00      	cmp	r3, #0
 8001428:	d00a      	beq.n	8001440 <GFX_WriteLine+0xd0>
      {
         GFX_DrawPixelScreen(y_start, x_start, color, Screen);
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	b298      	uxth	r0, r3
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	b299      	uxth	r1, r3
 8001432:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001436:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800143a:	f7ff fe45 	bl	80010c8 <GFX_DrawPixelScreen>
 800143e:	e009      	b.n	8001454 <GFX_WriteLine+0xe4>
      }
      else
      {
         GFX_DrawPixelScreen(x_start, y_start, color, Screen);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	b298      	uxth	r0, r3
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	b299      	uxth	r1, r3
 8001448:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800144c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001450:	f7ff fe3a 	bl	80010c8 <GFX_DrawPixelScreen>
      }
      err -= dy;
 8001454:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001456:	8abb      	ldrh	r3, [r7, #20]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	b29b      	uxth	r3, r3
 800145c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      if(err < 0)
 800145e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001462:	2b00      	cmp	r3, #0
 8001464:	da09      	bge.n	800147a <GFX_WriteLine+0x10a>
      {
         y_start += ystep;
 8001466:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800146a:	68ba      	ldr	r2, [r7, #8]
 800146c:	4413      	add	r3, r2
 800146e:	60bb      	str	r3, [r7, #8]
         err += dx;
 8001470:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001472:	8afb      	ldrh	r3, [r7, #22]
 8001474:	4413      	add	r3, r2
 8001476:	b29b      	uxth	r3, r3
 8001478:	85fb      	strh	r3, [r7, #46]	; 0x2e
   for(; x_start <= x_end; x_start++)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	3301      	adds	r3, #1
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fa      	ldr	r2, [r7, #12]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	429a      	cmp	r2, r3
 8001486:	ddcc      	ble.n	8001422 <GFX_WriteLine+0xb2>
      }
   }
}
 8001488:	bf00      	nop
 800148a:	bf00      	nop
 800148c:	3730      	adds	r7, #48	; 0x30
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, uint8_t color, Screen_TypeDef Screen)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b086      	sub	sp, #24
 8001496:	af02      	add	r7, sp, #8
 8001498:	60f8      	str	r0, [r7, #12]
 800149a:	60b9      	str	r1, [r7, #8]
 800149c:	607a      	str	r2, [r7, #4]
 800149e:	70fb      	strb	r3, [r7, #3]
   GFX_WriteLine(x_start, y_start, x_start, y_start + h - 1, color, Screen);
 80014a0:	68ba      	ldr	r2, [r7, #8]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4413      	add	r3, r2
 80014a6:	1e5a      	subs	r2, r3, #1
 80014a8:	7e3b      	ldrb	r3, [r7, #24]
 80014aa:	9301      	str	r3, [sp, #4]
 80014ac:	78fb      	ldrb	r3, [r7, #3]
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	4613      	mov	r3, r2
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	68b9      	ldr	r1, [r7, #8]
 80014b6:	68f8      	ldr	r0, [r7, #12]
 80014b8:	f7ff ff5a 	bl	8001370 <GFX_WriteLine>
}
 80014bc:	bf00      	nop
 80014be:	3710      	adds	r7, #16
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <GFX_DrawFillRectangle>:
   GFX_DrawFastVLine(x + w - 1, y, h, color, Screen);
}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color, Screen_TypeDef Screen)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b088      	sub	sp, #32
 80014c8:	af02      	add	r7, sp, #8
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	4611      	mov	r1, r2
 80014d0:	461a      	mov	r2, r3
 80014d2:	460b      	mov	r3, r1
 80014d4:	80fb      	strh	r3, [r7, #6]
 80014d6:	4613      	mov	r3, r2
 80014d8:	80bb      	strh	r3, [r7, #4]
   for(int i = x; i < x + w; i++)
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	617b      	str	r3, [r7, #20]
 80014de:	e00d      	b.n	80014fc <GFX_DrawFillRectangle+0x38>
   {
      GFX_DrawFastVLine(i, y, h, color, Screen);
 80014e0:	88ba      	ldrh	r2, [r7, #4]
 80014e2:	f897 1020 	ldrb.w	r1, [r7, #32]
 80014e6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80014ea:	9300      	str	r3, [sp, #0]
 80014ec:	460b      	mov	r3, r1
 80014ee:	68b9      	ldr	r1, [r7, #8]
 80014f0:	6978      	ldr	r0, [r7, #20]
 80014f2:	f7ff ffce 	bl	8001492 <GFX_DrawFastVLine>
   for(int i = x; i < x + w; i++)
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	3301      	adds	r3, #1
 80014fa:	617b      	str	r3, [r7, #20]
 80014fc:	88fa      	ldrh	r2, [r7, #6]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	4413      	add	r3, r2
 8001502:	697a      	ldr	r2, [r7, #20]
 8001504:	429a      	cmp	r2, r3
 8001506:	dbeb      	blt.n	80014e0 <GFX_DrawFillRectangle+0x1c>
   }
}
 8001508:	bf00      	nop
 800150a:	bf00      	nop
 800150c:	3718      	adds	r7, #24
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <HC12_ExitCommandMode>:
void HC12_EnterCommandMode(void)
{
   HAL_GPIO_WritePin(HC12_SET_GPIO_Port, HC12_SET_Pin, 0);
}
void HC12_ExitCommandMode(void)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(HC12_SET_GPIO_Port, HC12_SET_Pin, 1);
 8001516:	2201      	movs	r2, #1
 8001518:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800151c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001520:	f008 fb80 	bl	8009c24 <HAL_GPIO_WritePin>
}
 8001524:	bf00      	nop
 8001526:	bd80      	pop	{r7, pc}

08001528 <HC12_TransmitData>:
void HC12_TransmitData(uint8_t *Data, uint32_t Length)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
   taskENTER_CRITICAL();
 8001532:	f012 f96f 	bl	8013814 <vPortEnterCritical>
   HAL_UART_Transmit(&huart1, Data, Length, 1000);
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	b29a      	uxth	r2, r3
 800153a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800153e:	6879      	ldr	r1, [r7, #4]
 8001540:	4804      	ldr	r0, [pc, #16]	; (8001554 <HC12_TransmitData+0x2c>)
 8001542:	f00c ff83 	bl	800e44c <HAL_UART_Transmit>
   taskEXIT_CRITICAL();
 8001546:	f012 f995 	bl	8013874 <vPortExitCritical>
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	200044c4 	.word	0x200044c4

08001558 <HC12_ReciveToIdleDMA>:
void HC12_ReciveToIdleDMA(uint8_t *Data, uint32_t Length)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
   HAL_UARTEx_ReceiveToIdle_DMA(&huart1, Data, Length);
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	b29b      	uxth	r3, r3
 8001566:	461a      	mov	r2, r3
 8001568:	6879      	ldr	r1, [r7, #4]
 800156a:	4803      	ldr	r0, [pc, #12]	; (8001578 <HC12_ReciveToIdleDMA+0x20>)
 800156c:	f00e fb48 	bl	800fc00 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8001570:	bf00      	nop
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	200044c4 	.word	0x200044c4

0800157c <HC12_Init>:
void HC12_Init(RFP_TypeDef *TempRfp, uint8_t *Buffer)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
   rfp      = TempRfp;
 8001586:	4a06      	ldr	r2, [pc, #24]	; (80015a0 <HC12_Init+0x24>)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6013      	str	r3, [r2, #0]
   HC12Data = Buffer;
 800158c:	4a05      	ldr	r2, [pc, #20]	; (80015a4 <HC12_Init+0x28>)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	6013      	str	r3, [r2, #0]
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	20000298 	.word	0x20000298
 80015a4:	2000029c 	.word	0x2000029c

080015a8 <MENU_ChangeState>:
                                                  { MENU_STATE_RUNNING, MENU_STATE_END, MENU_EVENT_END },
                                                  { MENU_EVENT_END, MENU_STATE_IDLE, MENU_EVENT_NOTHING } };
MenuFunctions_TypeDef StateFunction[]         = { { MENU_IdleFunction }, { MENU_ChoiseFunction }, { MENU_RunningFunction }, { MENU_EndFunction } };
Menu_TypeDef Menu                             = { 0 };
static void MENU_ChangeState(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
   for(int i = 0; i < TRANSITION_TABLE_SIZE; i++)
 80015ae:	2300      	movs	r3, #0
 80015b0:	607b      	str	r3, [r7, #4]
 80015b2:	e027      	b.n	8001604 <MENU_ChangeState+0x5c>
   {
      if(Menu.State == TransitionTable[i].Source && Menu.NewEvent == TransitionTable[i].Event)
 80015b4:	4b19      	ldr	r3, [pc, #100]	; (800161c <MENU_ChangeState+0x74>)
 80015b6:	7a19      	ldrb	r1, [r3, #8]
 80015b8:	4819      	ldr	r0, [pc, #100]	; (8001620 <MENU_ChangeState+0x78>)
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	4613      	mov	r3, r2
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	4413      	add	r3, r2
 80015c2:	4403      	add	r3, r0
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	4299      	cmp	r1, r3
 80015c8:	d119      	bne.n	80015fe <MENU_ChangeState+0x56>
 80015ca:	4b14      	ldr	r3, [pc, #80]	; (800161c <MENU_ChangeState+0x74>)
 80015cc:	7a59      	ldrb	r1, [r3, #9]
 80015ce:	4814      	ldr	r0, [pc, #80]	; (8001620 <MENU_ChangeState+0x78>)
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	4613      	mov	r3, r2
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	4413      	add	r3, r2
 80015d8:	4403      	add	r3, r0
 80015da:	3302      	adds	r3, #2
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	4299      	cmp	r1, r3
 80015e0:	d10d      	bne.n	80015fe <MENU_ChangeState+0x56>
      {
         Menu.State    = TransitionTable[i].Destination;
 80015e2:	490f      	ldr	r1, [pc, #60]	; (8001620 <MENU_ChangeState+0x78>)
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	4613      	mov	r3, r2
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	4413      	add	r3, r2
 80015ec:	440b      	add	r3, r1
 80015ee:	3301      	adds	r3, #1
 80015f0:	781a      	ldrb	r2, [r3, #0]
 80015f2:	4b0a      	ldr	r3, [pc, #40]	; (800161c <MENU_ChangeState+0x74>)
 80015f4:	721a      	strb	r2, [r3, #8]
         Menu.NewEvent = MENU_EVENT_NOTHING;
 80015f6:	4b09      	ldr	r3, [pc, #36]	; (800161c <MENU_ChangeState+0x74>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	725a      	strb	r2, [r3, #9]
         return;
 80015fc:	e008      	b.n	8001610 <MENU_ChangeState+0x68>
   for(int i = 0; i < TRANSITION_TABLE_SIZE; i++)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	3301      	adds	r3, #1
 8001602:	607b      	str	r3, [r7, #4]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2b04      	cmp	r3, #4
 8001608:	d9d4      	bls.n	80015b4 <MENU_ChangeState+0xc>
      }
   }
   Menu.NewEvent = MENU_EVENT_NOTHING;
 800160a:	4b04      	ldr	r3, [pc, #16]	; (800161c <MENU_ChangeState+0x74>)
 800160c:	2200      	movs	r2, #0
 800160e:	725a      	strb	r2, [r3, #9]
}
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	200002a0 	.word	0x200002a0
 8001620:	20000004 	.word	0x20000004

08001624 <MENU_Init>:
void MENU_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
   HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8001628:	213c      	movs	r1, #60	; 0x3c
 800162a:	4802      	ldr	r0, [pc, #8]	; (8001634 <MENU_Init+0x10>)
 800162c:	f00b fe35 	bl	800d29a <HAL_TIM_Encoder_Start>
}
 8001630:	bf00      	nop
 8001632:	bd80      	pop	{r7, pc}
 8001634:	20004478 	.word	0x20004478

08001638 <MENU_Handler>:
void MENU_Handler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
   MENU_ChangeState();
 800163c:	f7ff ffb4 	bl	80015a8 <MENU_ChangeState>
   if(StateFunction[Menu.State].MenuFunction != NULL)
 8001640:	4b08      	ldr	r3, [pc, #32]	; (8001664 <MENU_Handler+0x2c>)
 8001642:	7a1b      	ldrb	r3, [r3, #8]
 8001644:	461a      	mov	r2, r3
 8001646:	4b08      	ldr	r3, [pc, #32]	; (8001668 <MENU_Handler+0x30>)
 8001648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d006      	beq.n	800165e <MENU_Handler+0x26>
   {
      StateFunction[Menu.State].MenuFunction();
 8001650:	4b04      	ldr	r3, [pc, #16]	; (8001664 <MENU_Handler+0x2c>)
 8001652:	7a1b      	ldrb	r3, [r3, #8]
 8001654:	461a      	mov	r2, r3
 8001656:	4b04      	ldr	r3, [pc, #16]	; (8001668 <MENU_Handler+0x30>)
 8001658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800165c:	4798      	blx	r3
   }
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	200002a0 	.word	0x200002a0
 8001668:	20000014 	.word	0x20000014

0800166c <MENU_IdleFunction>:
static void MENU_IdleFunction(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
   if(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8001670:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001674:	480e      	ldr	r0, [pc, #56]	; (80016b0 <MENU_IdleFunction+0x44>)
 8001676:	f008 fabd 	bl	8009bf4 <HAL_GPIO_ReadPin>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d115      	bne.n	80016ac <MENU_IdleFunction+0x40>
   {
      osMutexAcquire(MenuMutexHandle, osWaitForever);
 8001680:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <MENU_IdleFunction+0x48>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f04f 31ff 	mov.w	r1, #4294967295
 8001688:	4618      	mov	r0, r3
 800168a:	f00e fe9f 	bl	80103cc <osMutexAcquire>
      Menu.NewEvent = MENU_EVENT_NEW;
 800168e:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <MENU_IdleFunction+0x4c>)
 8001690:	2201      	movs	r2, #1
 8001692:	725a      	strb	r2, [r3, #9]
      while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8001694:	e002      	b.n	800169c <MENU_IdleFunction+0x30>
      {
         osDelay(100);
 8001696:	2064      	movs	r0, #100	; 0x64
 8001698:	f00e fc7c 	bl	800ff94 <osDelay>
      while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 800169c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016a0:	4803      	ldr	r0, [pc, #12]	; (80016b0 <MENU_IdleFunction+0x44>)
 80016a2:	f008 faa7 	bl	8009bf4 <HAL_GPIO_ReadPin>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d0f4      	beq.n	8001696 <MENU_IdleFunction+0x2a>
      }
   }
}
 80016ac:	bf00      	nop
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	48000400 	.word	0x48000400
 80016b4:	20003e18 	.word	0x20003e18
 80016b8:	200002a0 	.word	0x200002a0

080016bc <MENU_ChoiseFunction>:
static void MENU_ChoiseFunction(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b09c      	sub	sp, #112	; 0x70
 80016c0:	af02      	add	r7, sp, #8
   char Temp[100];
   switch((TIM5->CNT / 4) % MENU_CHOISE_CNT)
 80016c2:	4b76      	ldr	r3, [pc, #472]	; (800189c <MENU_ChoiseFunction+0x1e0>)
 80016c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c6:	0899      	lsrs	r1, r3, #2
 80016c8:	4b75      	ldr	r3, [pc, #468]	; (80018a0 <MENU_ChoiseFunction+0x1e4>)
 80016ca:	fba3 2301 	umull	r2, r3, r3, r1
 80016ce:	085b      	lsrs	r3, r3, #1
 80016d0:	461a      	mov	r2, r3
 80016d2:	0052      	lsls	r2, r2, #1
 80016d4:	441a      	add	r2, r3
 80016d6:	1a8b      	subs	r3, r1, r2
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d077      	beq.n	80017cc <MENU_ChoiseFunction+0x110>
 80016dc:	2b02      	cmp	r3, #2
 80016de:	f200 80ad 	bhi.w	800183c <MENU_ChoiseFunction+0x180>
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d002      	beq.n	80016ec <MENU_ChoiseFunction+0x30>
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d038      	beq.n	800175c <MENU_ChoiseFunction+0xa0>
         osMutexRelease(ScreensDcMutexHandle);
         break;
      }
      default:
      {
         break;
 80016ea:	e0a7      	b.n	800183c <MENU_ChoiseFunction+0x180>
         osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 80016ec:	4b6d      	ldr	r3, [pc, #436]	; (80018a4 <MENU_ChoiseFunction+0x1e8>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f04f 31ff 	mov.w	r1, #4294967295
 80016f4:	4618      	mov	r0, r3
 80016f6:	f00e fe69 	bl	80103cc <osMutexAcquire>
         osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 80016fa:	4b6b      	ldr	r3, [pc, #428]	; (80018a8 <MENU_ChoiseFunction+0x1ec>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f04f 31ff 	mov.w	r1, #4294967295
 8001702:	4618      	mov	r0, r3
 8001704:	f00e fe62 	bl	80103cc <osMutexAcquire>
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8001708:	4b68      	ldr	r3, [pc, #416]	; (80018ac <MENU_ChoiseFunction+0x1f0>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f04f 31ff 	mov.w	r1, #4294967295
 8001710:	4618      	mov	r0, r3
 8001712:	f00e fe5b 	bl	80103cc <osMutexAcquire>
         ssd1306_clear();
 8001716:	f006 ffc9 	bl	80086ac <ssd1306_clear>
         sprintf(Temp, "Ustaw godzine");
 800171a:	1d3b      	adds	r3, r7, #4
 800171c:	4964      	ldr	r1, [pc, #400]	; (80018b0 <MENU_ChoiseFunction+0x1f4>)
 800171e:	4618      	mov	r0, r3
 8001720:	f006 fa4a 	bl	8007bb8 <sprintf_>
         GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8001724:	1d3a      	adds	r2, r7, #4
 8001726:	2300      	movs	r3, #0
 8001728:	9301      	str	r3, [sp, #4]
 800172a:	2300      	movs	r3, #0
 800172c:	9300      	str	r3, [sp, #0]
 800172e:	2301      	movs	r3, #1
 8001730:	2100      	movs	r1, #0
 8001732:	2000      	movs	r0, #0
 8001734:	f7ff fdbe 	bl	80012b4 <GFX_DrawString>
         ssd1306_display();
 8001738:	f006 ff8c 	bl	8008654 <ssd1306_display>
         osMutexRelease(SPI1MutexHandle);
 800173c:	4b5b      	ldr	r3, [pc, #364]	; (80018ac <MENU_ChoiseFunction+0x1f0>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4618      	mov	r0, r3
 8001742:	f00e fe8e 	bl	8010462 <osMutexRelease>
         osMutexRelease(SSD1306MutexHandle);
 8001746:	4b58      	ldr	r3, [pc, #352]	; (80018a8 <MENU_ChoiseFunction+0x1ec>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4618      	mov	r0, r3
 800174c:	f00e fe89 	bl	8010462 <osMutexRelease>
         osMutexRelease(ScreensDcMutexHandle);
 8001750:	4b54      	ldr	r3, [pc, #336]	; (80018a4 <MENU_ChoiseFunction+0x1e8>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4618      	mov	r0, r3
 8001756:	f00e fe84 	bl	8010462 <osMutexRelease>
         break;
 800175a:	e070      	b.n	800183e <MENU_ChoiseFunction+0x182>
         osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 800175c:	4b51      	ldr	r3, [pc, #324]	; (80018a4 <MENU_ChoiseFunction+0x1e8>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f04f 31ff 	mov.w	r1, #4294967295
 8001764:	4618      	mov	r0, r3
 8001766:	f00e fe31 	bl	80103cc <osMutexAcquire>
         osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 800176a:	4b4f      	ldr	r3, [pc, #316]	; (80018a8 <MENU_ChoiseFunction+0x1ec>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f04f 31ff 	mov.w	r1, #4294967295
 8001772:	4618      	mov	r0, r3
 8001774:	f00e fe2a 	bl	80103cc <osMutexAcquire>
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8001778:	4b4c      	ldr	r3, [pc, #304]	; (80018ac <MENU_ChoiseFunction+0x1f0>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f04f 31ff 	mov.w	r1, #4294967295
 8001780:	4618      	mov	r0, r3
 8001782:	f00e fe23 	bl	80103cc <osMutexAcquire>
         ssd1306_clear();
 8001786:	f006 ff91 	bl	80086ac <ssd1306_clear>
         sprintf(Temp, "Ustaw date");
 800178a:	1d3b      	adds	r3, r7, #4
 800178c:	4949      	ldr	r1, [pc, #292]	; (80018b4 <MENU_ChoiseFunction+0x1f8>)
 800178e:	4618      	mov	r0, r3
 8001790:	f006 fa12 	bl	8007bb8 <sprintf_>
         GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8001794:	1d3a      	adds	r2, r7, #4
 8001796:	2300      	movs	r3, #0
 8001798:	9301      	str	r3, [sp, #4]
 800179a:	2300      	movs	r3, #0
 800179c:	9300      	str	r3, [sp, #0]
 800179e:	2301      	movs	r3, #1
 80017a0:	2100      	movs	r1, #0
 80017a2:	2000      	movs	r0, #0
 80017a4:	f7ff fd86 	bl	80012b4 <GFX_DrawString>
         ssd1306_display();
 80017a8:	f006 ff54 	bl	8008654 <ssd1306_display>
         osMutexRelease(SPI1MutexHandle);
 80017ac:	4b3f      	ldr	r3, [pc, #252]	; (80018ac <MENU_ChoiseFunction+0x1f0>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f00e fe56 	bl	8010462 <osMutexRelease>
         osMutexRelease(SSD1306MutexHandle);
 80017b6:	4b3c      	ldr	r3, [pc, #240]	; (80018a8 <MENU_ChoiseFunction+0x1ec>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f00e fe51 	bl	8010462 <osMutexRelease>
         osMutexRelease(ScreensDcMutexHandle);
 80017c0:	4b38      	ldr	r3, [pc, #224]	; (80018a4 <MENU_ChoiseFunction+0x1e8>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f00e fe4c 	bl	8010462 <osMutexRelease>
         break;
 80017ca:	e038      	b.n	800183e <MENU_ChoiseFunction+0x182>
         osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 80017cc:	4b35      	ldr	r3, [pc, #212]	; (80018a4 <MENU_ChoiseFunction+0x1e8>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f04f 31ff 	mov.w	r1, #4294967295
 80017d4:	4618      	mov	r0, r3
 80017d6:	f00e fdf9 	bl	80103cc <osMutexAcquire>
         osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 80017da:	4b33      	ldr	r3, [pc, #204]	; (80018a8 <MENU_ChoiseFunction+0x1ec>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f04f 31ff 	mov.w	r1, #4294967295
 80017e2:	4618      	mov	r0, r3
 80017e4:	f00e fdf2 	bl	80103cc <osMutexAcquire>
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 80017e8:	4b30      	ldr	r3, [pc, #192]	; (80018ac <MENU_ChoiseFunction+0x1f0>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f04f 31ff 	mov.w	r1, #4294967295
 80017f0:	4618      	mov	r0, r3
 80017f2:	f00e fdeb 	bl	80103cc <osMutexAcquire>
         ssd1306_clear();
 80017f6:	f006 ff59 	bl	80086ac <ssd1306_clear>
         sprintf(Temp, "Wykresy");
 80017fa:	1d3b      	adds	r3, r7, #4
 80017fc:	492e      	ldr	r1, [pc, #184]	; (80018b8 <MENU_ChoiseFunction+0x1fc>)
 80017fe:	4618      	mov	r0, r3
 8001800:	f006 f9da 	bl	8007bb8 <sprintf_>
         GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8001804:	1d3a      	adds	r2, r7, #4
 8001806:	2300      	movs	r3, #0
 8001808:	9301      	str	r3, [sp, #4]
 800180a:	2300      	movs	r3, #0
 800180c:	9300      	str	r3, [sp, #0]
 800180e:	2301      	movs	r3, #1
 8001810:	2100      	movs	r1, #0
 8001812:	2000      	movs	r0, #0
 8001814:	f7ff fd4e 	bl	80012b4 <GFX_DrawString>
         ssd1306_display();
 8001818:	f006 ff1c 	bl	8008654 <ssd1306_display>
         osMutexRelease(SPI1MutexHandle);
 800181c:	4b23      	ldr	r3, [pc, #140]	; (80018ac <MENU_ChoiseFunction+0x1f0>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f00e fe1e 	bl	8010462 <osMutexRelease>
         osMutexRelease(SSD1306MutexHandle);
 8001826:	4b20      	ldr	r3, [pc, #128]	; (80018a8 <MENU_ChoiseFunction+0x1ec>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4618      	mov	r0, r3
 800182c:	f00e fe19 	bl	8010462 <osMutexRelease>
         osMutexRelease(ScreensDcMutexHandle);
 8001830:	4b1c      	ldr	r3, [pc, #112]	; (80018a4 <MENU_ChoiseFunction+0x1e8>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4618      	mov	r0, r3
 8001836:	f00e fe14 	bl	8010462 <osMutexRelease>
         break;
 800183a:	e000      	b.n	800183e <MENU_ChoiseFunction+0x182>
         break;
 800183c:	bf00      	nop
      }
   }
   if(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 800183e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001842:	481e      	ldr	r0, [pc, #120]	; (80018bc <MENU_ChoiseFunction+0x200>)
 8001844:	f008 f9d6 	bl	8009bf4 <HAL_GPIO_ReadPin>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d121      	bne.n	8001892 <MENU_ChoiseFunction+0x1d6>
   {
      Menu.NewEvent  = MENU_EVENT_CHOISE;
 800184e:	4b1c      	ldr	r3, [pc, #112]	; (80018c0 <MENU_ChoiseFunction+0x204>)
 8001850:	2202      	movs	r2, #2
 8001852:	725a      	strb	r2, [r3, #9]
      Menu.ChoiseCnt = (TIM5->CNT / 4) % MENU_CHOISE_CNT;
 8001854:	4b11      	ldr	r3, [pc, #68]	; (800189c <MENU_ChoiseFunction+0x1e0>)
 8001856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001858:	0899      	lsrs	r1, r3, #2
 800185a:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <MENU_ChoiseFunction+0x1e4>)
 800185c:	fba3 2301 	umull	r2, r3, r3, r1
 8001860:	085a      	lsrs	r2, r3, #1
 8001862:	4613      	mov	r3, r2
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	4413      	add	r3, r2
 8001868:	1aca      	subs	r2, r1, r3
 800186a:	4b15      	ldr	r3, [pc, #84]	; (80018c0 <MENU_ChoiseFunction+0x204>)
 800186c:	601a      	str	r2, [r3, #0]
      TIM5->CNT      = 0;
 800186e:	4b0b      	ldr	r3, [pc, #44]	; (800189c <MENU_ChoiseFunction+0x1e0>)
 8001870:	2200      	movs	r2, #0
 8001872:	625a      	str	r2, [r3, #36]	; 0x24
      Menu.f         = 0;
 8001874:	4b12      	ldr	r3, [pc, #72]	; (80018c0 <MENU_ChoiseFunction+0x204>)
 8001876:	2200      	movs	r2, #0
 8001878:	729a      	strb	r2, [r3, #10]
      while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 800187a:	e002      	b.n	8001882 <MENU_ChoiseFunction+0x1c6>
      {
         osDelay(100);
 800187c:	2064      	movs	r0, #100	; 0x64
 800187e:	f00e fb89 	bl	800ff94 <osDelay>
      while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8001882:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001886:	480d      	ldr	r0, [pc, #52]	; (80018bc <MENU_ChoiseFunction+0x200>)
 8001888:	f008 f9b4 	bl	8009bf4 <HAL_GPIO_ReadPin>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d0f4      	beq.n	800187c <MENU_ChoiseFunction+0x1c0>
      }
   }
}
 8001892:	bf00      	nop
 8001894:	3768      	adds	r7, #104	; 0x68
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40000c00 	.word	0x40000c00
 80018a0:	aaaaaaab 	.word	0xaaaaaaab
 80018a4:	20003e04 	.word	0x20003e04
 80018a8:	20003e08 	.word	0x20003e08
 80018ac:	20003e0c 	.word	0x20003e0c
 80018b0:	080198c8 	.word	0x080198c8
 80018b4:	080198d8 	.word	0x080198d8
 80018b8:	080198e4 	.word	0x080198e4
 80018bc:	48000400 	.word	0x48000400
 80018c0:	200002a0 	.word	0x200002a0

080018c4 <MENU_RunningFunction>:
static void MENU_RunningFunction(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b0a2      	sub	sp, #136	; 0x88
 80018c8:	af02      	add	r7, sp, #8
   char Temp[100];
   switch(Menu.ChoiseCnt)
 80018ca:	4b9c      	ldr	r3, [pc, #624]	; (8001b3c <MENU_RunningFunction+0x278>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	f000 8207 	beq.w	8001ce2 <MENU_RunningFunction+0x41e>
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	f200 823e 	bhi.w	8001d56 <MENU_RunningFunction+0x492>
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d003      	beq.n	80018e6 <MENU_RunningFunction+0x22>
 80018de:	2b01      	cmp	r3, #1
 80018e0:	f000 81c5 	beq.w	8001c6e <MENU_RunningFunction+0x3aa>
         osMutexRelease(ScreensDcMutexHandle);
         break;
      }
      default:
      {
         break;
 80018e4:	e237      	b.n	8001d56 <MENU_RunningFunction+0x492>
         HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 80018e6:	f107 0308 	add.w	r3, r7, #8
 80018ea:	2200      	movs	r2, #0
 80018ec:	4619      	mov	r1, r3
 80018ee:	4894      	ldr	r0, [pc, #592]	; (8001b40 <MENU_RunningFunction+0x27c>)
 80018f0:	f00a f9e8 	bl	800bcc4 <HAL_RTC_GetTime>
         HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 80018f4:	1d3b      	adds	r3, r7, #4
 80018f6:	2200      	movs	r2, #0
 80018f8:	4619      	mov	r1, r3
 80018fa:	4891      	ldr	r0, [pc, #580]	; (8001b40 <MENU_RunningFunction+0x27c>)
 80018fc:	f00a facc 	bl	800be98 <HAL_RTC_GetDate>
         osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8001900:	4b90      	ldr	r3, [pc, #576]	; (8001b44 <MENU_RunningFunction+0x280>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f04f 31ff 	mov.w	r1, #4294967295
 8001908:	4618      	mov	r0, r3
 800190a:	f00e fd5f 	bl	80103cc <osMutexAcquire>
         osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 800190e:	4b8e      	ldr	r3, [pc, #568]	; (8001b48 <MENU_RunningFunction+0x284>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f04f 31ff 	mov.w	r1, #4294967295
 8001916:	4618      	mov	r0, r3
 8001918:	f00e fd58 	bl	80103cc <osMutexAcquire>
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 800191c:	4b8b      	ldr	r3, [pc, #556]	; (8001b4c <MENU_RunningFunction+0x288>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f04f 31ff 	mov.w	r1, #4294967295
 8001924:	4618      	mov	r0, r3
 8001926:	f00e fd51 	bl	80103cc <osMutexAcquire>
         ssd1306_clear();
 800192a:	f006 febf 	bl	80086ac <ssd1306_clear>
         sprintf(Temp, "%d h %d m %d s", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 800192e:	7a3b      	ldrb	r3, [r7, #8]
 8001930:	461a      	mov	r2, r3
 8001932:	7a7b      	ldrb	r3, [r7, #9]
 8001934:	4619      	mov	r1, r3
 8001936:	7abb      	ldrb	r3, [r7, #10]
 8001938:	f107 001c 	add.w	r0, r7, #28
 800193c:	9300      	str	r3, [sp, #0]
 800193e:	460b      	mov	r3, r1
 8001940:	4983      	ldr	r1, [pc, #524]	; (8001b50 <MENU_RunningFunction+0x28c>)
 8001942:	f006 f939 	bl	8007bb8 <sprintf_>
         GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8001946:	f107 021c 	add.w	r2, r7, #28
 800194a:	2300      	movs	r3, #0
 800194c:	9301      	str	r3, [sp, #4]
 800194e:	2300      	movs	r3, #0
 8001950:	9300      	str	r3, [sp, #0]
 8001952:	2301      	movs	r3, #1
 8001954:	2100      	movs	r1, #0
 8001956:	2000      	movs	r0, #0
 8001958:	f7ff fcac 	bl	80012b4 <GFX_DrawString>
         ssd1306_display();
 800195c:	f006 fe7a 	bl	8008654 <ssd1306_display>
         osMutexRelease(SPI1MutexHandle);
 8001960:	4b7a      	ldr	r3, [pc, #488]	; (8001b4c <MENU_RunningFunction+0x288>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4618      	mov	r0, r3
 8001966:	f00e fd7c 	bl	8010462 <osMutexRelease>
         osMutexRelease(SSD1306MutexHandle);
 800196a:	4b77      	ldr	r3, [pc, #476]	; (8001b48 <MENU_RunningFunction+0x284>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f00e fd77 	bl	8010462 <osMutexRelease>
         osMutexRelease(ScreensDcMutexHandle);
 8001974:	4b73      	ldr	r3, [pc, #460]	; (8001b44 <MENU_RunningFunction+0x280>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4618      	mov	r0, r3
 800197a:	f00e fd72 	bl	8010462 <osMutexRelease>
         while(Menu.f == 0)
 800197e:	e170      	b.n	8001c62 <MENU_RunningFunction+0x39e>
            if(Menu.ButtonCnt == 0)
 8001980:	4b6e      	ldr	r3, [pc, #440]	; (8001b3c <MENU_RunningFunction+0x278>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d16a      	bne.n	8001a5e <MENU_RunningFunction+0x19a>
               RtcTime.Hours = (TIM5->CNT / 4) % 24;
 8001988:	4b72      	ldr	r3, [pc, #456]	; (8001b54 <MENU_RunningFunction+0x290>)
 800198a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198c:	0899      	lsrs	r1, r3, #2
 800198e:	4b72      	ldr	r3, [pc, #456]	; (8001b58 <MENU_RunningFunction+0x294>)
 8001990:	fba3 2301 	umull	r2, r3, r3, r1
 8001994:	091a      	lsrs	r2, r3, #4
 8001996:	4613      	mov	r3, r2
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	4413      	add	r3, r2
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	1aca      	subs	r2, r1, r3
 80019a0:	b2d3      	uxtb	r3, r2
 80019a2:	723b      	strb	r3, [r7, #8]
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 80019a4:	4b67      	ldr	r3, [pc, #412]	; (8001b44 <MENU_RunningFunction+0x280>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f04f 31ff 	mov.w	r1, #4294967295
 80019ac:	4618      	mov	r0, r3
 80019ae:	f00e fd0d 	bl	80103cc <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 80019b2:	4b65      	ldr	r3, [pc, #404]	; (8001b48 <MENU_RunningFunction+0x284>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f04f 31ff 	mov.w	r1, #4294967295
 80019ba:	4618      	mov	r0, r3
 80019bc:	f00e fd06 	bl	80103cc <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 80019c0:	4b62      	ldr	r3, [pc, #392]	; (8001b4c <MENU_RunningFunction+0x288>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f04f 31ff 	mov.w	r1, #4294967295
 80019c8:	4618      	mov	r0, r3
 80019ca:	f00e fcff 	bl	80103cc <osMutexAcquire>
               ssd1306_clear();
 80019ce:	f006 fe6d 	bl	80086ac <ssd1306_clear>
               sprintf(Temp, "%d h %d m %d s", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 80019d2:	7a3b      	ldrb	r3, [r7, #8]
 80019d4:	461a      	mov	r2, r3
 80019d6:	7a7b      	ldrb	r3, [r7, #9]
 80019d8:	4619      	mov	r1, r3
 80019da:	7abb      	ldrb	r3, [r7, #10]
 80019dc:	f107 001c 	add.w	r0, r7, #28
 80019e0:	9300      	str	r3, [sp, #0]
 80019e2:	460b      	mov	r3, r1
 80019e4:	495a      	ldr	r1, [pc, #360]	; (8001b50 <MENU_RunningFunction+0x28c>)
 80019e6:	f006 f8e7 	bl	8007bb8 <sprintf_>
               GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 80019ea:	f107 021c 	add.w	r2, r7, #28
 80019ee:	2300      	movs	r3, #0
 80019f0:	9301      	str	r3, [sp, #4]
 80019f2:	2300      	movs	r3, #0
 80019f4:	9300      	str	r3, [sp, #0]
 80019f6:	2301      	movs	r3, #1
 80019f8:	2100      	movs	r1, #0
 80019fa:	2000      	movs	r0, #0
 80019fc:	f7ff fc5a 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 8001a00:	f006 fe28 	bl	8008654 <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 8001a04:	4b51      	ldr	r3, [pc, #324]	; (8001b4c <MENU_RunningFunction+0x288>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f00e fd2a 	bl	8010462 <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 8001a0e:	4b4e      	ldr	r3, [pc, #312]	; (8001b48 <MENU_RunningFunction+0x284>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f00e fd25 	bl	8010462 <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 8001a18:	4b4a      	ldr	r3, [pc, #296]	; (8001b44 <MENU_RunningFunction+0x280>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f00e fd20 	bl	8010462 <osMutexRelease>
               if(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8001a22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a26:	484d      	ldr	r0, [pc, #308]	; (8001b5c <MENU_RunningFunction+0x298>)
 8001a28:	f008 f8e4 	bl	8009bf4 <HAL_GPIO_ReadPin>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	f040 8114 	bne.w	8001c5c <MENU_RunningFunction+0x398>
                  Menu.ButtonCnt++;
 8001a34:	4b41      	ldr	r3, [pc, #260]	; (8001b3c <MENU_RunningFunction+0x278>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	4a40      	ldr	r2, [pc, #256]	; (8001b3c <MENU_RunningFunction+0x278>)
 8001a3c:	6053      	str	r3, [r2, #4]
                  TIM5->CNT = 0;
 8001a3e:	4b45      	ldr	r3, [pc, #276]	; (8001b54 <MENU_RunningFunction+0x290>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	625a      	str	r2, [r3, #36]	; 0x24
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8001a44:	e002      	b.n	8001a4c <MENU_RunningFunction+0x188>
                     osDelay(100);
 8001a46:	2064      	movs	r0, #100	; 0x64
 8001a48:	f00e faa4 	bl	800ff94 <osDelay>
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8001a4c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a50:	4842      	ldr	r0, [pc, #264]	; (8001b5c <MENU_RunningFunction+0x298>)
 8001a52:	f008 f8cf 	bl	8009bf4 <HAL_GPIO_ReadPin>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d0f4      	beq.n	8001a46 <MENU_RunningFunction+0x182>
 8001a5c:	e0fe      	b.n	8001c5c <MENU_RunningFunction+0x398>
            else if(Menu.ButtonCnt == 1)
 8001a5e:	4b37      	ldr	r3, [pc, #220]	; (8001b3c <MENU_RunningFunction+0x278>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d17e      	bne.n	8001b64 <MENU_RunningFunction+0x2a0>
               RtcTime.Minutes = (TIM5->CNT / 4) % 60;
 8001a66:	4b3b      	ldr	r3, [pc, #236]	; (8001b54 <MENU_RunningFunction+0x290>)
 8001a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6a:	0899      	lsrs	r1, r3, #2
 8001a6c:	4b3c      	ldr	r3, [pc, #240]	; (8001b60 <MENU_RunningFunction+0x29c>)
 8001a6e:	fba3 2301 	umull	r2, r3, r3, r1
 8001a72:	095a      	lsrs	r2, r3, #5
 8001a74:	4613      	mov	r3, r2
 8001a76:	011b      	lsls	r3, r3, #4
 8001a78:	1a9b      	subs	r3, r3, r2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	1aca      	subs	r2, r1, r3
 8001a7e:	b2d3      	uxtb	r3, r2
 8001a80:	727b      	strb	r3, [r7, #9]
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8001a82:	4b30      	ldr	r3, [pc, #192]	; (8001b44 <MENU_RunningFunction+0x280>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f04f 31ff 	mov.w	r1, #4294967295
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f00e fc9e 	bl	80103cc <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8001a90:	4b2d      	ldr	r3, [pc, #180]	; (8001b48 <MENU_RunningFunction+0x284>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f04f 31ff 	mov.w	r1, #4294967295
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f00e fc97 	bl	80103cc <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8001a9e:	4b2b      	ldr	r3, [pc, #172]	; (8001b4c <MENU_RunningFunction+0x288>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f00e fc90 	bl	80103cc <osMutexAcquire>
               ssd1306_clear();
 8001aac:	f006 fdfe 	bl	80086ac <ssd1306_clear>
               sprintf(Temp, "%d h %d m %d s", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 8001ab0:	7a3b      	ldrb	r3, [r7, #8]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	7a7b      	ldrb	r3, [r7, #9]
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	7abb      	ldrb	r3, [r7, #10]
 8001aba:	f107 001c 	add.w	r0, r7, #28
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	4923      	ldr	r1, [pc, #140]	; (8001b50 <MENU_RunningFunction+0x28c>)
 8001ac4:	f006 f878 	bl	8007bb8 <sprintf_>
               GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8001ac8:	f107 021c 	add.w	r2, r7, #28
 8001acc:	2300      	movs	r3, #0
 8001ace:	9301      	str	r3, [sp, #4]
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	9300      	str	r3, [sp, #0]
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	2000      	movs	r0, #0
 8001ada:	f7ff fbeb 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 8001ade:	f006 fdb9 	bl	8008654 <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 8001ae2:	4b1a      	ldr	r3, [pc, #104]	; (8001b4c <MENU_RunningFunction+0x288>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f00e fcbb 	bl	8010462 <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 8001aec:	4b16      	ldr	r3, [pc, #88]	; (8001b48 <MENU_RunningFunction+0x284>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f00e fcb6 	bl	8010462 <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 8001af6:	4b13      	ldr	r3, [pc, #76]	; (8001b44 <MENU_RunningFunction+0x280>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f00e fcb1 	bl	8010462 <osMutexRelease>
               if(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8001b00:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b04:	4815      	ldr	r0, [pc, #84]	; (8001b5c <MENU_RunningFunction+0x298>)
 8001b06:	f008 f875 	bl	8009bf4 <HAL_GPIO_ReadPin>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	f040 80a5 	bne.w	8001c5c <MENU_RunningFunction+0x398>
                  Menu.ButtonCnt++;
 8001b12:	4b0a      	ldr	r3, [pc, #40]	; (8001b3c <MENU_RunningFunction+0x278>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	3301      	adds	r3, #1
 8001b18:	4a08      	ldr	r2, [pc, #32]	; (8001b3c <MENU_RunningFunction+0x278>)
 8001b1a:	6053      	str	r3, [r2, #4]
                  TIM5->CNT = 0;
 8001b1c:	4b0d      	ldr	r3, [pc, #52]	; (8001b54 <MENU_RunningFunction+0x290>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	625a      	str	r2, [r3, #36]	; 0x24
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8001b22:	e002      	b.n	8001b2a <MENU_RunningFunction+0x266>
                     osDelay(100);
 8001b24:	2064      	movs	r0, #100	; 0x64
 8001b26:	f00e fa35 	bl	800ff94 <osDelay>
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8001b2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b2e:	480b      	ldr	r0, [pc, #44]	; (8001b5c <MENU_RunningFunction+0x298>)
 8001b30:	f008 f860 	bl	8009bf4 <HAL_GPIO_ReadPin>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d0f4      	beq.n	8001b24 <MENU_RunningFunction+0x260>
 8001b3a:	e08f      	b.n	8001c5c <MENU_RunningFunction+0x398>
 8001b3c:	200002a0 	.word	0x200002a0
 8001b40:	20003f40 	.word	0x20003f40
 8001b44:	20003e04 	.word	0x20003e04
 8001b48:	20003e08 	.word	0x20003e08
 8001b4c:	20003e0c 	.word	0x20003e0c
 8001b50:	080198ec 	.word	0x080198ec
 8001b54:	40000c00 	.word	0x40000c00
 8001b58:	aaaaaaab 	.word	0xaaaaaaab
 8001b5c:	48000400 	.word	0x48000400
 8001b60:	88888889 	.word	0x88888889
               RtcTime.Seconds = (TIM5->CNT / 4) % 60;
 8001b64:	4b80      	ldr	r3, [pc, #512]	; (8001d68 <MENU_RunningFunction+0x4a4>)
 8001b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b68:	0899      	lsrs	r1, r3, #2
 8001b6a:	4b80      	ldr	r3, [pc, #512]	; (8001d6c <MENU_RunningFunction+0x4a8>)
 8001b6c:	fba3 2301 	umull	r2, r3, r3, r1
 8001b70:	095a      	lsrs	r2, r3, #5
 8001b72:	4613      	mov	r3, r2
 8001b74:	011b      	lsls	r3, r3, #4
 8001b76:	1a9b      	subs	r3, r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	1aca      	subs	r2, r1, r3
 8001b7c:	b2d3      	uxtb	r3, r2
 8001b7e:	72bb      	strb	r3, [r7, #10]
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8001b80:	4b7b      	ldr	r3, [pc, #492]	; (8001d70 <MENU_RunningFunction+0x4ac>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f04f 31ff 	mov.w	r1, #4294967295
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f00e fc1f 	bl	80103cc <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8001b8e:	4b79      	ldr	r3, [pc, #484]	; (8001d74 <MENU_RunningFunction+0x4b0>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f04f 31ff 	mov.w	r1, #4294967295
 8001b96:	4618      	mov	r0, r3
 8001b98:	f00e fc18 	bl	80103cc <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8001b9c:	4b76      	ldr	r3, [pc, #472]	; (8001d78 <MENU_RunningFunction+0x4b4>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f00e fc11 	bl	80103cc <osMutexAcquire>
               ssd1306_clear();
 8001baa:	f006 fd7f 	bl	80086ac <ssd1306_clear>
               sprintf(Temp, "%d h %d m %d s", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 8001bae:	7a3b      	ldrb	r3, [r7, #8]
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	7a7b      	ldrb	r3, [r7, #9]
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	7abb      	ldrb	r3, [r7, #10]
 8001bb8:	f107 001c 	add.w	r0, r7, #28
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	496e      	ldr	r1, [pc, #440]	; (8001d7c <MENU_RunningFunction+0x4b8>)
 8001bc2:	f005 fff9 	bl	8007bb8 <sprintf_>
               GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8001bc6:	f107 021c 	add.w	r2, r7, #28
 8001bca:	2300      	movs	r3, #0
 8001bcc:	9301      	str	r3, [sp, #4]
 8001bce:	2300      	movs	r3, #0
 8001bd0:	9300      	str	r3, [sp, #0]
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	2000      	movs	r0, #0
 8001bd8:	f7ff fb6c 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 8001bdc:	f006 fd3a 	bl	8008654 <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 8001be0:	4b65      	ldr	r3, [pc, #404]	; (8001d78 <MENU_RunningFunction+0x4b4>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f00e fc3c 	bl	8010462 <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 8001bea:	4b62      	ldr	r3, [pc, #392]	; (8001d74 <MENU_RunningFunction+0x4b0>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f00e fc37 	bl	8010462 <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 8001bf4:	4b5e      	ldr	r3, [pc, #376]	; (8001d70 <MENU_RunningFunction+0x4ac>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f00e fc32 	bl	8010462 <osMutexRelease>
               if(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8001bfe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c02:	485f      	ldr	r0, [pc, #380]	; (8001d80 <MENU_RunningFunction+0x4bc>)
 8001c04:	f007 fff6 	bl	8009bf4 <HAL_GPIO_ReadPin>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d126      	bne.n	8001c5c <MENU_RunningFunction+0x398>
                  Menu.ButtonCnt++;
 8001c0e:	4b5d      	ldr	r3, [pc, #372]	; (8001d84 <MENU_RunningFunction+0x4c0>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	3301      	adds	r3, #1
 8001c14:	4a5b      	ldr	r2, [pc, #364]	; (8001d84 <MENU_RunningFunction+0x4c0>)
 8001c16:	6053      	str	r3, [r2, #4]
                  TIM5->CNT = 0;
 8001c18:	4b53      	ldr	r3, [pc, #332]	; (8001d68 <MENU_RunningFunction+0x4a4>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	625a      	str	r2, [r3, #36]	; 0x24
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8001c1e:	e002      	b.n	8001c26 <MENU_RunningFunction+0x362>
                     osDelay(100);
 8001c20:	2064      	movs	r0, #100	; 0x64
 8001c22:	f00e f9b7 	bl	800ff94 <osDelay>
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8001c26:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c2a:	4855      	ldr	r0, [pc, #340]	; (8001d80 <MENU_RunningFunction+0x4bc>)
 8001c2c:	f007 ffe2 	bl	8009bf4 <HAL_GPIO_ReadPin>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d0f4      	beq.n	8001c20 <MENU_RunningFunction+0x35c>
                  Menu.ButtonCnt = 0;
 8001c36:	4b53      	ldr	r3, [pc, #332]	; (8001d84 <MENU_RunningFunction+0x4c0>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	605a      	str	r2, [r3, #4]
                  Menu.f         = 1;
 8001c3c:	4b51      	ldr	r3, [pc, #324]	; (8001d84 <MENU_RunningFunction+0x4c0>)
 8001c3e:	2201      	movs	r2, #1
 8001c40:	729a      	strb	r2, [r3, #10]
                  HAL_RTC_SetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 8001c42:	f107 0308 	add.w	r3, r7, #8
 8001c46:	2200      	movs	r2, #0
 8001c48:	4619      	mov	r1, r3
 8001c4a:	484f      	ldr	r0, [pc, #316]	; (8001d88 <MENU_RunningFunction+0x4c4>)
 8001c4c:	f009 ff9a 	bl	800bb84 <HAL_RTC_SetTime>
                  HAL_RTC_SetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 8001c50:	1d3b      	adds	r3, r7, #4
 8001c52:	2200      	movs	r2, #0
 8001c54:	4619      	mov	r1, r3
 8001c56:	484c      	ldr	r0, [pc, #304]	; (8001d88 <MENU_RunningFunction+0x4c4>)
 8001c58:	f00a f896 	bl	800bd88 <HAL_RTC_SetDate>
            osDelay(50);
 8001c5c:	2032      	movs	r0, #50	; 0x32
 8001c5e:	f00e f999 	bl	800ff94 <osDelay>
         while(Menu.f == 0)
 8001c62:	4b48      	ldr	r3, [pc, #288]	; (8001d84 <MENU_RunningFunction+0x4c0>)
 8001c64:	7a9b      	ldrb	r3, [r3, #10]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f43f ae8a 	beq.w	8001980 <MENU_RunningFunction+0xbc>
         break;
 8001c6c:	e074      	b.n	8001d58 <MENU_RunningFunction+0x494>
         osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8001c6e:	4b40      	ldr	r3, [pc, #256]	; (8001d70 <MENU_RunningFunction+0x4ac>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f04f 31ff 	mov.w	r1, #4294967295
 8001c76:	4618      	mov	r0, r3
 8001c78:	f00e fba8 	bl	80103cc <osMutexAcquire>
         osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8001c7c:	4b3d      	ldr	r3, [pc, #244]	; (8001d74 <MENU_RunningFunction+0x4b0>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f04f 31ff 	mov.w	r1, #4294967295
 8001c84:	4618      	mov	r0, r3
 8001c86:	f00e fba1 	bl	80103cc <osMutexAcquire>
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8001c8a:	4b3b      	ldr	r3, [pc, #236]	; (8001d78 <MENU_RunningFunction+0x4b4>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f04f 31ff 	mov.w	r1, #4294967295
 8001c92:	4618      	mov	r0, r3
 8001c94:	f00e fb9a 	bl	80103cc <osMutexAcquire>
         ssd1306_clear();
 8001c98:	f006 fd08 	bl	80086ac <ssd1306_clear>
         sprintf(Temp, "Ustaw date");
 8001c9c:	f107 031c 	add.w	r3, r7, #28
 8001ca0:	493a      	ldr	r1, [pc, #232]	; (8001d8c <MENU_RunningFunction+0x4c8>)
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f005 ff88 	bl	8007bb8 <sprintf_>
         GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8001ca8:	f107 021c 	add.w	r2, r7, #28
 8001cac:	2300      	movs	r3, #0
 8001cae:	9301      	str	r3, [sp, #4]
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	9300      	str	r3, [sp, #0]
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	2000      	movs	r0, #0
 8001cba:	f7ff fafb 	bl	80012b4 <GFX_DrawString>
         ssd1306_display();
 8001cbe:	f006 fcc9 	bl	8008654 <ssd1306_display>
         osMutexRelease(SPI1MutexHandle);
 8001cc2:	4b2d      	ldr	r3, [pc, #180]	; (8001d78 <MENU_RunningFunction+0x4b4>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f00e fbcb 	bl	8010462 <osMutexRelease>
         osMutexRelease(SSD1306MutexHandle);
 8001ccc:	4b29      	ldr	r3, [pc, #164]	; (8001d74 <MENU_RunningFunction+0x4b0>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f00e fbc6 	bl	8010462 <osMutexRelease>
         osMutexRelease(ScreensDcMutexHandle);
 8001cd6:	4b26      	ldr	r3, [pc, #152]	; (8001d70 <MENU_RunningFunction+0x4ac>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f00e fbc1 	bl	8010462 <osMutexRelease>
         break;
 8001ce0:	e03a      	b.n	8001d58 <MENU_RunningFunction+0x494>
         osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8001ce2:	4b23      	ldr	r3, [pc, #140]	; (8001d70 <MENU_RunningFunction+0x4ac>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f04f 31ff 	mov.w	r1, #4294967295
 8001cea:	4618      	mov	r0, r3
 8001cec:	f00e fb6e 	bl	80103cc <osMutexAcquire>
         osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8001cf0:	4b20      	ldr	r3, [pc, #128]	; (8001d74 <MENU_RunningFunction+0x4b0>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f00e fb67 	bl	80103cc <osMutexAcquire>
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8001cfe:	4b1e      	ldr	r3, [pc, #120]	; (8001d78 <MENU_RunningFunction+0x4b4>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f04f 31ff 	mov.w	r1, #4294967295
 8001d06:	4618      	mov	r0, r3
 8001d08:	f00e fb60 	bl	80103cc <osMutexAcquire>
         ssd1306_clear();
 8001d0c:	f006 fcce 	bl	80086ac <ssd1306_clear>
         sprintf(Temp, "Wykresy");
 8001d10:	f107 031c 	add.w	r3, r7, #28
 8001d14:	491e      	ldr	r1, [pc, #120]	; (8001d90 <MENU_RunningFunction+0x4cc>)
 8001d16:	4618      	mov	r0, r3
 8001d18:	f005 ff4e 	bl	8007bb8 <sprintf_>
         GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8001d1c:	f107 021c 	add.w	r2, r7, #28
 8001d20:	2300      	movs	r3, #0
 8001d22:	9301      	str	r3, [sp, #4]
 8001d24:	2300      	movs	r3, #0
 8001d26:	9300      	str	r3, [sp, #0]
 8001d28:	2301      	movs	r3, #1
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	2000      	movs	r0, #0
 8001d2e:	f7ff fac1 	bl	80012b4 <GFX_DrawString>
         ssd1306_display();
 8001d32:	f006 fc8f 	bl	8008654 <ssd1306_display>
         osMutexRelease(SPI1MutexHandle);
 8001d36:	4b10      	ldr	r3, [pc, #64]	; (8001d78 <MENU_RunningFunction+0x4b4>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f00e fb91 	bl	8010462 <osMutexRelease>
         osMutexRelease(SSD1306MutexHandle);
 8001d40:	4b0c      	ldr	r3, [pc, #48]	; (8001d74 <MENU_RunningFunction+0x4b0>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f00e fb8c 	bl	8010462 <osMutexRelease>
         osMutexRelease(ScreensDcMutexHandle);
 8001d4a:	4b09      	ldr	r3, [pc, #36]	; (8001d70 <MENU_RunningFunction+0x4ac>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f00e fb87 	bl	8010462 <osMutexRelease>
         break;
 8001d54:	e000      	b.n	8001d58 <MENU_RunningFunction+0x494>
         break;
 8001d56:	bf00      	nop
      }
   }
   Menu.NewEvent = MENU_EVENT_END;
 8001d58:	4b0a      	ldr	r3, [pc, #40]	; (8001d84 <MENU_RunningFunction+0x4c0>)
 8001d5a:	2203      	movs	r2, #3
 8001d5c:	725a      	strb	r2, [r3, #9]
}
 8001d5e:	bf00      	nop
 8001d60:	3780      	adds	r7, #128	; 0x80
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40000c00 	.word	0x40000c00
 8001d6c:	88888889 	.word	0x88888889
 8001d70:	20003e04 	.word	0x20003e04
 8001d74:	20003e08 	.word	0x20003e08
 8001d78:	20003e0c 	.word	0x20003e0c
 8001d7c:	080198ec 	.word	0x080198ec
 8001d80:	48000400 	.word	0x48000400
 8001d84:	200002a0 	.word	0x200002a0
 8001d88:	20003f40 	.word	0x20003f40
 8001d8c:	080198d8 	.word	0x080198d8
 8001d90:	080198e4 	.word	0x080198e4

08001d94 <MENU_EndFunction>:
static void MENU_EndFunction(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
   Menu.ButtonCnt = 0;
 8001d98:	4b0a      	ldr	r3, [pc, #40]	; (8001dc4 <MENU_EndFunction+0x30>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	605a      	str	r2, [r3, #4]
   Menu.ChoiseCnt = 0;
 8001d9e:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <MENU_EndFunction+0x30>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
   Menu.NewEvent  = MENU_EVENT_NOTHING;
 8001da4:	4b07      	ldr	r3, [pc, #28]	; (8001dc4 <MENU_EndFunction+0x30>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	725a      	strb	r2, [r3, #9]
   Menu.f         = 0;
 8001daa:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <MENU_EndFunction+0x30>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	729a      	strb	r2, [r3, #10]
   TIM5->CNT      = 0;
 8001db0:	4b05      	ldr	r3, [pc, #20]	; (8001dc8 <MENU_EndFunction+0x34>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	625a      	str	r2, [r3, #36]	; 0x24
   osMutexRelease(MenuMutexHandle);
 8001db6:	4b05      	ldr	r3, [pc, #20]	; (8001dcc <MENU_EndFunction+0x38>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f00e fb51 	bl	8010462 <osMutexRelease>
}
 8001dc0:	bf00      	nop
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	200002a0 	.word	0x200002a0
 8001dc8:	40000c00 	.word	0x40000c00
 8001dcc:	20003e18 	.word	0x20003e18

08001dd0 <BME280_CsLow>:
#include "main.h"

#include "bme280_spi.h"

void BME280_CsLow(BME280_t *bme)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
   HAL_GPIO_WritePin(bme->bme280_CsPort, bme->bme280_CsPin, 0);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6858      	ldr	r0, [r3, #4]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001de0:	2200      	movs	r2, #0
 8001de2:	4619      	mov	r1, r3
 8001de4:	f007 ff1e 	bl	8009c24 <HAL_GPIO_WritePin>
}
 8001de8:	bf00      	nop
 8001dea:	3708      	adds	r7, #8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <BME280_CsHigh>:
void BME280_CsHigh(BME280_t *bme)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
   HAL_GPIO_WritePin(bme->bme280_CsPort, bme->bme280_CsPin, 1);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6858      	ldr	r0, [r3, #4]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e00:	2201      	movs	r2, #1
 8001e02:	4619      	mov	r1, r3
 8001e04:	f007 ff0e 	bl	8009c24 <HAL_GPIO_WritePin>
}
 8001e08:	bf00      	nop
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <BME280_Read8>:
uint8_t BME280_Read8(BME280_t *bme, uint8_t addr)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	460b      	mov	r3, r1
 8001e1a:	70fb      	strb	r3, [r7, #3]
   addr |= 128;
 8001e1c:	78fb      	ldrb	r3, [r7, #3]
 8001e1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	70fb      	strb	r3, [r7, #3]
   uint8_t data;
   BME280_CsLow(bme);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff ffd2 	bl	8001dd0 <BME280_CsLow>
   HAL_SPI_Transmit(bme->bme_spi, &addr, 1, BME_MAX_TIMEOUT);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6818      	ldr	r0, [r3, #0]
 8001e30:	1cf9      	adds	r1, r7, #3
 8001e32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e36:	2201      	movs	r2, #1
 8001e38:	f00a f9f3 	bl	800c222 <HAL_SPI_Transmit>
   HAL_SPI_Receive(bme->bme_spi, &data, 1, BME_MAX_TIMEOUT);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6818      	ldr	r0, [r3, #0]
 8001e40:	f107 010f 	add.w	r1, r7, #15
 8001e44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f00a fb58 	bl	800c4fe <HAL_SPI_Receive>
   BME280_CsHigh(bme);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7ff ffce 	bl	8001df0 <BME280_CsHigh>
   return data;
 8001e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <BME280_Write8>:
void BME280_Write8(BME280_t *bme, uint8_t addr, uint8_t data)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b084      	sub	sp, #16
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
 8001e66:	460b      	mov	r3, r1
 8001e68:	70fb      	strb	r3, [r7, #3]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	70bb      	strb	r3, [r7, #2]
   BME280_CsLow(bme);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7ff ffae 	bl	8001dd0 <BME280_CsLow>
   addr &= 127;
 8001e74:	78fb      	ldrb	r3, [r7, #3]
 8001e76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e7a:	70fb      	strb	r3, [r7, #3]
   uint8_t Data_ToSend[2];
   Data_ToSend[0] = addr;
 8001e7c:	78fb      	ldrb	r3, [r7, #3]
 8001e7e:	733b      	strb	r3, [r7, #12]
   Data_ToSend[1] = data;
 8001e80:	78bb      	ldrb	r3, [r7, #2]
 8001e82:	737b      	strb	r3, [r7, #13]
   HAL_SPI_Transmit(bme->bme_spi, Data_ToSend, 2, BME_MAX_TIMEOUT);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6818      	ldr	r0, [r3, #0]
 8001e88:	f107 010c 	add.w	r1, r7, #12
 8001e8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e90:	2202      	movs	r2, #2
 8001e92:	f00a f9c6 	bl	800c222 <HAL_SPI_Transmit>
   BME280_CsHigh(bme);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f7ff ffaa 	bl	8001df0 <BME280_CsHigh>
}
 8001e9c:	bf00      	nop
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <BME280_Read16LE>:
static uint16_t BME280_Read16LE(BME280_t *bme, uint8_t address)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	460b      	mov	r3, r1
 8001eae:	70fb      	strb	r3, [r7, #3]
   uint8_t data[2];
   data[0] = BME280_Read8(bme, address);
 8001eb0:	78fb      	ldrb	r3, [r7, #3]
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f7ff ffab 	bl	8001e10 <BME280_Read8>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	733b      	strb	r3, [r7, #12]
   data[1] = BME280_Read8(bme, address + 1);
 8001ebe:	78fb      	ldrb	r3, [r7, #3]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7ff ffa2 	bl	8001e10 <BME280_Read8>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	737b      	strb	r3, [r7, #13]
   return ((data[1] << 8) | data[0]);
 8001ed0:	7b7b      	ldrb	r3, [r7, #13]
 8001ed2:	021b      	lsls	r3, r3, #8
 8001ed4:	b21a      	sxth	r2, r3
 8001ed6:	7b3b      	ldrb	r3, [r7, #12]
 8001ed8:	b21b      	sxth	r3, r3
 8001eda:	4313      	orrs	r3, r2
 8001edc:	b21b      	sxth	r3, r3
 8001ede:	b29b      	uxth	r3, r3
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3710      	adds	r7, #16
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <BME280_Read16>:
static uint16_t BME280_Read16(BME280_t *bme, uint8_t address)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	70fb      	strb	r3, [r7, #3]
   uint8_t data[2];
   data[0] = BME280_Read8(bme, address);
 8001ef4:	78fb      	ldrb	r3, [r7, #3]
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f7ff ff89 	bl	8001e10 <BME280_Read8>
 8001efe:	4603      	mov	r3, r0
 8001f00:	733b      	strb	r3, [r7, #12]
   data[1] = BME280_Read8(bme, address + 1);
 8001f02:	78fb      	ldrb	r3, [r7, #3]
 8001f04:	3301      	adds	r3, #1
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	4619      	mov	r1, r3
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f7ff ff80 	bl	8001e10 <BME280_Read8>
 8001f10:	4603      	mov	r3, r0
 8001f12:	737b      	strb	r3, [r7, #13]
   return ((data[0] << 8) | data[1]);
 8001f14:	7b3b      	ldrb	r3, [r7, #12]
 8001f16:	021b      	lsls	r3, r3, #8
 8001f18:	b21a      	sxth	r2, r3
 8001f1a:	7b7b      	ldrb	r3, [r7, #13]
 8001f1c:	b21b      	sxth	r3, r3
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	b21b      	sxth	r3, r3
 8001f22:	b29b      	uxth	r3, r3
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <BME280_Read24>:
uint32_t BME280_Read24(BME280_t *bme, uint8_t addr)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	460b      	mov	r3, r1
 8001f36:	70fb      	strb	r3, [r7, #3]
   addr |= 128;
 8001f38:	78fb      	ldrb	r3, [r7, #3]
 8001f3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	70fb      	strb	r3, [r7, #3]
   uint8_t data[3];
   BME280_CsLow(bme);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7ff ff44 	bl	8001dd0 <BME280_CsLow>
   HAL_SPI_Transmit(bme->bme_spi, &addr, 1, BME_MAX_TIMEOUT);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6818      	ldr	r0, [r3, #0]
 8001f4c:	1cf9      	adds	r1, r7, #3
 8001f4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f52:	2201      	movs	r2, #1
 8001f54:	f00a f965 	bl	800c222 <HAL_SPI_Transmit>
   HAL_SPI_Receive(bme->bme_spi, data, 3, BME_MAX_TIMEOUT);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6818      	ldr	r0, [r3, #0]
 8001f5c:	f107 010c 	add.w	r1, r7, #12
 8001f60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f64:	2203      	movs	r2, #3
 8001f66:	f00a faca 	bl	800c4fe <HAL_SPI_Receive>
   BME280_CsHigh(bme);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f7ff ff40 	bl	8001df0 <BME280_CsHigh>
   return ((data[0] << 16) | (data[1] << 8) | data[2]);
 8001f70:	7b3b      	ldrb	r3, [r7, #12]
 8001f72:	041a      	lsls	r2, r3, #16
 8001f74:	7b7b      	ldrb	r3, [r7, #13]
 8001f76:	021b      	lsls	r3, r3, #8
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	7bba      	ldrb	r2, [r7, #14]
 8001f7c:	4313      	orrs	r3, r2
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
	...

08001f88 <BME280_Read_temp>:
static float BME280_Read_temp(BME280_t *bme)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
   int32_t var1, var2;
   int32_t adc_T = BME280_Read24(bme, BME280_TEMPDATA);
 8001f90:	21fa      	movs	r1, #250	; 0xfa
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7ff ffca 	bl	8001f2c <BME280_Read24>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	617b      	str	r3, [r7, #20]
   if(adc_T == 0x800000)
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001fa2:	d102      	bne.n	8001faa <BME280_Read_temp+0x22>
      return -99;
 8001fa4:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002030 <BME280_Read_temp+0xa8>
 8001fa8:	e03b      	b.n	8002022 <BME280_Read_temp+0x9a>

   adc_T >>= 4;
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	111b      	asrs	r3, r3, #4
 8001fae:	617b      	str	r3, [r7, #20]

   var1 = ((((adc_T >> 3) - ((int32_t)bme->t1 << 1))) * ((int32_t)bme->t2)) >> 11;
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	10da      	asrs	r2, r3, #3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8001fc2:	fb02 f303 	mul.w	r3, r2, r3
 8001fc6:	12db      	asrs	r3, r3, #11
 8001fc8:	613b      	str	r3, [r7, #16]

   var2 = (((((adc_T >> 4) - ((int32_t)bme->t1)) * ((adc_T >> 4) - ((int32_t)bme->t1))) >> 12) * ((int32_t)bme->t3)) >> 14;
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	111b      	asrs	r3, r3, #4
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8001fd2:	1a9b      	subs	r3, r3, r2
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	1112      	asrs	r2, r2, #4
 8001fd8:	6879      	ldr	r1, [r7, #4]
 8001fda:	8cc9      	ldrh	r1, [r1, #38]	; 0x26
 8001fdc:	1a52      	subs	r2, r2, r1
 8001fde:	fb02 f303 	mul.w	r3, r2, r3
 8001fe2:	131b      	asrs	r3, r3, #12
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8001fea:	fb02 f303 	mul.w	r3, r2, r3
 8001fee:	139b      	asrs	r3, r3, #14
 8001ff0:	60fb      	str	r3, [r7, #12]

   bme->t_fine = var1 + var2;
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	441a      	add	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	62da      	str	r2, [r3, #44]	; 0x2c

   float T = (bme->t_fine * 5 + 128) >> 8;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002000:	4613      	mov	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	3380      	adds	r3, #128	; 0x80
 8002008:	121b      	asrs	r3, r3, #8
 800200a:	ee07 3a90 	vmov	s15, r3
 800200e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002012:	edc7 7a02 	vstr	s15, [r7, #8]
   return T / 100;
 8002016:	edd7 7a02 	vldr	s15, [r7, #8]
 800201a:	eddf 6a06 	vldr	s13, [pc, #24]	; 8002034 <BME280_Read_temp+0xac>
 800201e:	ee87 7aa6 	vdiv.f32	s14, s15, s13

   return -99;
}
 8002022:	eef0 7a47 	vmov.f32	s15, s14
 8002026:	eeb0 0a67 	vmov.f32	s0, s15
 800202a:	3718      	adds	r7, #24
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	c2c60000 	.word	0xc2c60000
 8002034:	42c80000 	.word	0x42c80000

08002038 <BME280_Read_hum>:
static float BME280_Read_hum(BME280_t *bme)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]

   int32_t adc_H = BME280_Read16(bme, BME280_HUMIDDATA);
 8002040:	21fd      	movs	r1, #253	; 0xfd
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f7ff ff50 	bl	8001ee8 <BME280_Read16>
 8002048:	4603      	mov	r3, r0
 800204a:	617b      	str	r3, [r7, #20]
   if(adc_H == 0x8000) // value in case humidity measurement was disabled
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002052:	d102      	bne.n	800205a <BME280_Read_hum+0x22>
      return -99;      // error
 8002054:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002128 <BME280_Read_hum+0xf0>
 8002058:	e05f      	b.n	800211a <BME280_Read_hum+0xe2>
   int32_t v_x1_u32r;

   v_x1_u32r = (bme->t_fine - ((int32_t)76800));
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205e:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8002062:	613b      	str	r3, [r7, #16]

   v_x1_u32r = (((((adc_H << 14) - (((int32_t)bme->h4) << 20) - (((int32_t)bme->h5) * v_x1_u32r)) + ((int32_t)16384)) >> 15)
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	039a      	lsls	r2, r3, #14
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800206e:	051b      	lsls	r3, r3, #20
 8002070:	1ad2      	subs	r2, r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8002078:	4619      	mov	r1, r3
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	fb01 f303 	mul.w	r3, r1, r3
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002086:	13db      	asrs	r3, r3, #15
                * (((((((v_x1_u32r * ((int32_t)bme->h6)) >> 10) * (((v_x1_u32r * ((int32_t)bme->h3)) >> 11) + ((int32_t)32768))) >> 10)
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	f992 200a 	ldrsb.w	r2, [r2, #10]
 800208e:	4611      	mov	r1, r2
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	fb01 f202 	mul.w	r2, r1, r2
 8002096:	1292      	asrs	r2, r2, #10
 8002098:	6879      	ldr	r1, [r7, #4]
 800209a:	7a49      	ldrb	r1, [r1, #9]
 800209c:	4608      	mov	r0, r1
 800209e:	6939      	ldr	r1, [r7, #16]
 80020a0:	fb00 f101 	mul.w	r1, r0, r1
 80020a4:	12c9      	asrs	r1, r1, #11
 80020a6:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 80020aa:	fb01 f202 	mul.w	r2, r1, r2
 80020ae:	1292      	asrs	r2, r2, #10
                     + ((int32_t)2097152))
 80020b0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
                        * ((int32_t)bme->h2)
 80020b4:	6879      	ldr	r1, [r7, #4]
 80020b6:	f9b1 1020 	ldrsh.w	r1, [r1, #32]
 80020ba:	fb01 f202 	mul.w	r2, r1, r2
                    + 8192)
 80020be:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
                   >> 14));
 80020c2:	1392      	asrs	r2, r2, #14
   v_x1_u32r = (((((adc_H << 14) - (((int32_t)bme->h4) << 20) - (((int32_t)bme->h5) * v_x1_u32r)) + ((int32_t)16384)) >> 15)
 80020c4:	fb02 f303 	mul.w	r3, r2, r3
 80020c8:	613b      	str	r3, [r7, #16]

   v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) * ((int32_t)bme->h1)) >> 4));
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	13db      	asrs	r3, r3, #15
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	13d2      	asrs	r2, r2, #15
 80020d2:	fb02 f303 	mul.w	r3, r2, r3
 80020d6:	11db      	asrs	r3, r3, #7
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	7a12      	ldrb	r2, [r2, #8]
 80020dc:	fb02 f303 	mul.w	r3, r2, r3
 80020e0:	111b      	asrs	r3, r3, #4
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	613b      	str	r3, [r7, #16]

   v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80020ee:	613b      	str	r3, [r7, #16]
   v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 80020f6:	bfa8      	it	ge
 80020f8:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 80020fc:	613b      	str	r3, [r7, #16]
   float h   = (v_x1_u32r >> 12);
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	131b      	asrs	r3, r3, #12
 8002102:	ee07 3a90 	vmov	s15, r3
 8002106:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800210a:	edc7 7a03 	vstr	s15, [r7, #12]
   return h / 1024.0;
 800210e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002112:	eddf 6a06 	vldr	s13, [pc, #24]	; 800212c <BME280_Read_hum+0xf4>
 8002116:	ee87 7aa6 	vdiv.f32	s14, s15, s13
}
 800211a:	eef0 7a47 	vmov.f32	s15, s14
 800211e:	eeb0 0a67 	vmov.f32	s0, s15
 8002122:	3718      	adds	r7, #24
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	c2c60000 	.word	0xc2c60000
 800212c:	44800000 	.word	0x44800000

08002130 <BME280_Read_press>:
static float BME280_Read_press(BME280_t *bme)
{
 8002130:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002134:	b0cc      	sub	sp, #304	; 0x130
 8002136:	af00      	add	r7, sp, #0
 8002138:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
   int64_t var1, var2, p;

   // Must be done first to get the t_fine variable set up

   int32_t adc_P = BME280_Read24(bme, BME280_PRESSUREDATA);
 800213c:	21f7      	movs	r1, #247	; 0xf7
 800213e:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8002142:	f7ff fef3 	bl	8001f2c <BME280_Read24>
 8002146:	4603      	mov	r3, r0
 8002148:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   adc_P >>= 4;
 800214c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002150:	111b      	asrs	r3, r3, #4
 8002152:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

   var1 = ((int64_t)bme->t_fine) - 128000;
 8002156:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800215a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215c:	17da      	asrs	r2, r3, #31
 800215e:	4698      	mov	r8, r3
 8002160:	4691      	mov	r9, r2
 8002162:	f5b8 33fa 	subs.w	r3, r8, #128000	; 0x1f400
 8002166:	64bb      	str	r3, [r7, #72]	; 0x48
 8002168:	f149 33ff 	adc.w	r3, r9, #4294967295
 800216c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800216e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002172:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
   var2 = var1 * var1 * (int64_t)bme->p6;
 8002176:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800217a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800217e:	fb03 f102 	mul.w	r1, r3, r2
 8002182:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8002186:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800218a:	fb02 f303 	mul.w	r3, r2, r3
 800218e:	18ca      	adds	r2, r1, r3
 8002190:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002194:	fba3 4503 	umull	r4, r5, r3, r3
 8002198:	1953      	adds	r3, r2, r5
 800219a:	461d      	mov	r5, r3
 800219c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80021a0:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80021a4:	b21b      	sxth	r3, r3
 80021a6:	17da      	asrs	r2, r3, #31
 80021a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80021ac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80021b0:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80021b4:	4603      	mov	r3, r0
 80021b6:	fb03 f205 	mul.w	r2, r3, r5
 80021ba:	460b      	mov	r3, r1
 80021bc:	fb04 f303 	mul.w	r3, r4, r3
 80021c0:	4413      	add	r3, r2
 80021c2:	4602      	mov	r2, r0
 80021c4:	fba4 ab02 	umull	sl, fp, r4, r2
 80021c8:	445b      	add	r3, fp
 80021ca:	469b      	mov	fp, r3
 80021cc:	e9c7 ab46 	strd	sl, fp, [r7, #280]	; 0x118
 80021d0:	e9c7 ab46 	strd	sl, fp, [r7, #280]	; 0x118
   var2 = var2 + ((var1 * (int64_t)bme->p5) << 17);
 80021d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80021d8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80021dc:	b21b      	sxth	r3, r3
 80021de:	17da      	asrs	r2, r3, #31
 80021e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80021e4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80021e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80021ec:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 80021f0:	462a      	mov	r2, r5
 80021f2:	fb02 f203 	mul.w	r2, r2, r3
 80021f6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80021fa:	4621      	mov	r1, r4
 80021fc:	fb01 f303 	mul.w	r3, r1, r3
 8002200:	441a      	add	r2, r3
 8002202:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002206:	4621      	mov	r1, r4
 8002208:	fba3 1301 	umull	r1, r3, r3, r1
 800220c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002210:	460b      	mov	r3, r1
 8002212:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002216:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800221a:	18d3      	adds	r3, r2, r3
 800221c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002220:	f04f 0000 	mov.w	r0, #0
 8002224:	f04f 0100 	mov.w	r1, #0
 8002228:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800222c:	462b      	mov	r3, r5
 800222e:	0459      	lsls	r1, r3, #17
 8002230:	4623      	mov	r3, r4
 8002232:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8002236:	4623      	mov	r3, r4
 8002238:	0458      	lsls	r0, r3, #17
 800223a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800223e:	1814      	adds	r4, r2, r0
 8002240:	643c      	str	r4, [r7, #64]	; 0x40
 8002242:	414b      	adcs	r3, r1
 8002244:	647b      	str	r3, [r7, #68]	; 0x44
 8002246:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800224a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
   var2 = var2 + (((int64_t)bme->p4) << 35);
 800224e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002252:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002256:	b21b      	sxth	r3, r3
 8002258:	17da      	asrs	r2, r3, #31
 800225a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800225e:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8002262:	f04f 0000 	mov.w	r0, #0
 8002266:	f04f 0100 	mov.w	r1, #0
 800226a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800226e:	00d9      	lsls	r1, r3, #3
 8002270:	2000      	movs	r0, #0
 8002272:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8002276:	1814      	adds	r4, r2, r0
 8002278:	63bc      	str	r4, [r7, #56]	; 0x38
 800227a:	414b      	adcs	r3, r1
 800227c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800227e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8002282:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
   var1 = ((var1 * var1 * (int64_t)bme->p3) >> 8) + ((var1 * (int64_t)bme->p2) << 12);
 8002286:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800228a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800228e:	fb03 f102 	mul.w	r1, r3, r2
 8002292:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8002296:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800229a:	fb02 f303 	mul.w	r3, r2, r3
 800229e:	18ca      	adds	r2, r1, r3
 80022a0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80022a4:	fba3 1303 	umull	r1, r3, r3, r3
 80022a8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80022ac:	460b      	mov	r3, r1
 80022ae:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80022b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022b6:	18d3      	adds	r3, r2, r3
 80022b8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80022bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80022c0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80022c4:	b21b      	sxth	r3, r3
 80022c6:	17da      	asrs	r2, r3, #31
 80022c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80022cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80022d0:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 80022d4:	462b      	mov	r3, r5
 80022d6:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 80022da:	4642      	mov	r2, r8
 80022dc:	fb02 f203 	mul.w	r2, r2, r3
 80022e0:	464b      	mov	r3, r9
 80022e2:	4621      	mov	r1, r4
 80022e4:	fb01 f303 	mul.w	r3, r1, r3
 80022e8:	4413      	add	r3, r2
 80022ea:	4622      	mov	r2, r4
 80022ec:	4641      	mov	r1, r8
 80022ee:	fba2 1201 	umull	r1, r2, r2, r1
 80022f2:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80022f6:	460a      	mov	r2, r1
 80022f8:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80022fc:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8002300:	4413      	add	r3, r2
 8002302:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002306:	f04f 0000 	mov.w	r0, #0
 800230a:	f04f 0100 	mov.w	r1, #0
 800230e:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8002312:	4623      	mov	r3, r4
 8002314:	0a18      	lsrs	r0, r3, #8
 8002316:	462b      	mov	r3, r5
 8002318:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800231c:	462b      	mov	r3, r5
 800231e:	1219      	asrs	r1, r3, #8
 8002320:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002324:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002328:	b21b      	sxth	r3, r3
 800232a:	17da      	asrs	r2, r3, #31
 800232c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002330:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002334:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002338:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800233c:	464a      	mov	r2, r9
 800233e:	fb02 f203 	mul.w	r2, r2, r3
 8002342:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002346:	4644      	mov	r4, r8
 8002348:	fb04 f303 	mul.w	r3, r4, r3
 800234c:	441a      	add	r2, r3
 800234e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002352:	4644      	mov	r4, r8
 8002354:	fba3 4304 	umull	r4, r3, r3, r4
 8002358:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800235c:	4623      	mov	r3, r4
 800235e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002362:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002366:	18d3      	adds	r3, r2, r3
 8002368:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800236c:	f04f 0200 	mov.w	r2, #0
 8002370:	f04f 0300 	mov.w	r3, #0
 8002374:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8002378:	464c      	mov	r4, r9
 800237a:	0323      	lsls	r3, r4, #12
 800237c:	4644      	mov	r4, r8
 800237e:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8002382:	4644      	mov	r4, r8
 8002384:	0322      	lsls	r2, r4, #12
 8002386:	1884      	adds	r4, r0, r2
 8002388:	633c      	str	r4, [r7, #48]	; 0x30
 800238a:	eb41 0303 	adc.w	r3, r1, r3
 800238e:	637b      	str	r3, [r7, #52]	; 0x34
 8002390:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002394:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
   var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)bme->p1) >> 33;
 8002398:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800239c:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 80023a0:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 80023a4:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 80023a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80023ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	2200      	movs	r2, #0
 80023b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80023b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80023ba:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 80023be:	462b      	mov	r3, r5
 80023c0:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 80023c4:	4642      	mov	r2, r8
 80023c6:	fb02 f203 	mul.w	r2, r2, r3
 80023ca:	464b      	mov	r3, r9
 80023cc:	4621      	mov	r1, r4
 80023ce:	fb01 f303 	mul.w	r3, r1, r3
 80023d2:	4413      	add	r3, r2
 80023d4:	4622      	mov	r2, r4
 80023d6:	4641      	mov	r1, r8
 80023d8:	fba2 1201 	umull	r1, r2, r2, r1
 80023dc:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80023e0:	460a      	mov	r2, r1
 80023e2:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80023e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80023ea:	4413      	add	r3, r2
 80023ec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80023f0:	f04f 0200 	mov.w	r2, #0
 80023f4:	f04f 0300 	mov.w	r3, #0
 80023f8:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80023fc:	4629      	mov	r1, r5
 80023fe:	104a      	asrs	r2, r1, #1
 8002400:	4629      	mov	r1, r5
 8002402:	17cb      	asrs	r3, r1, #31
 8002404:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

   if(var1 == 0)
 8002408:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800240c:	4313      	orrs	r3, r2
 800240e:	d102      	bne.n	8002416 <BME280_Read_press+0x2e6>
   {
      return 0; // avoid exception caused by division by zero
 8002410:	eddf 7aae 	vldr	s15, [pc, #696]	; 80026cc <BME280_Read_press+0x59c>
 8002414:	e152      	b.n	80026bc <BME280_Read_press+0x58c>
   }
   p    = 1048576 - adc_P;
 8002416:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800241a:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800241e:	17da      	asrs	r2, r3, #31
 8002420:	62bb      	str	r3, [r7, #40]	; 0x28
 8002422:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002424:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8002428:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
   p    = (((p << 31) - var2) * 3125) / var1;
 800242c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002430:	105b      	asrs	r3, r3, #1
 8002432:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002436:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800243a:	07db      	lsls	r3, r3, #31
 800243c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002440:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8002444:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8002448:	4621      	mov	r1, r4
 800244a:	1a89      	subs	r1, r1, r2
 800244c:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8002450:	4629      	mov	r1, r5
 8002452:	eb61 0303 	sbc.w	r3, r1, r3
 8002456:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800245a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800245e:	4622      	mov	r2, r4
 8002460:	462b      	mov	r3, r5
 8002462:	1891      	adds	r1, r2, r2
 8002464:	6239      	str	r1, [r7, #32]
 8002466:	415b      	adcs	r3, r3
 8002468:	627b      	str	r3, [r7, #36]	; 0x24
 800246a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800246e:	4621      	mov	r1, r4
 8002470:	1851      	adds	r1, r2, r1
 8002472:	61b9      	str	r1, [r7, #24]
 8002474:	4629      	mov	r1, r5
 8002476:	414b      	adcs	r3, r1
 8002478:	61fb      	str	r3, [r7, #28]
 800247a:	f04f 0200 	mov.w	r2, #0
 800247e:	f04f 0300 	mov.w	r3, #0
 8002482:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002486:	4649      	mov	r1, r9
 8002488:	018b      	lsls	r3, r1, #6
 800248a:	4641      	mov	r1, r8
 800248c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002490:	4641      	mov	r1, r8
 8002492:	018a      	lsls	r2, r1, #6
 8002494:	4641      	mov	r1, r8
 8002496:	1889      	adds	r1, r1, r2
 8002498:	6139      	str	r1, [r7, #16]
 800249a:	4649      	mov	r1, r9
 800249c:	eb43 0101 	adc.w	r1, r3, r1
 80024a0:	6179      	str	r1, [r7, #20]
 80024a2:	f04f 0200 	mov.w	r2, #0
 80024a6:	f04f 0300 	mov.w	r3, #0
 80024aa:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80024ae:	4649      	mov	r1, r9
 80024b0:	008b      	lsls	r3, r1, #2
 80024b2:	4641      	mov	r1, r8
 80024b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80024b8:	4641      	mov	r1, r8
 80024ba:	008a      	lsls	r2, r1, #2
 80024bc:	4610      	mov	r0, r2
 80024be:	4619      	mov	r1, r3
 80024c0:	4603      	mov	r3, r0
 80024c2:	4622      	mov	r2, r4
 80024c4:	189b      	adds	r3, r3, r2
 80024c6:	60bb      	str	r3, [r7, #8]
 80024c8:	460b      	mov	r3, r1
 80024ca:	462a      	mov	r2, r5
 80024cc:	eb42 0303 	adc.w	r3, r2, r3
 80024d0:	60fb      	str	r3, [r7, #12]
 80024d2:	f04f 0200 	mov.w	r2, #0
 80024d6:	f04f 0300 	mov.w	r3, #0
 80024da:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80024de:	4649      	mov	r1, r9
 80024e0:	008b      	lsls	r3, r1, #2
 80024e2:	4641      	mov	r1, r8
 80024e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80024e8:	4641      	mov	r1, r8
 80024ea:	008a      	lsls	r2, r1, #2
 80024ec:	4610      	mov	r0, r2
 80024ee:	4619      	mov	r1, r3
 80024f0:	4603      	mov	r3, r0
 80024f2:	4622      	mov	r2, r4
 80024f4:	189b      	adds	r3, r3, r2
 80024f6:	67bb      	str	r3, [r7, #120]	; 0x78
 80024f8:	462b      	mov	r3, r5
 80024fa:	460a      	mov	r2, r1
 80024fc:	eb42 0303 	adc.w	r3, r2, r3
 8002500:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002502:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8002506:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800250a:	f7fe fbd5 	bl	8000cb8 <__aeabi_ldivmod>
 800250e:	4602      	mov	r2, r0
 8002510:	460b      	mov	r3, r1
 8002512:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
   var1 = (((int64_t)bme->p9) * (p >> 13) * (p >> 13)) >> 25;
 8002516:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800251a:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800251e:	b21b      	sxth	r3, r3
 8002520:	17da      	asrs	r2, r3, #31
 8002522:	673b      	str	r3, [r7, #112]	; 0x70
 8002524:	677a      	str	r2, [r7, #116]	; 0x74
 8002526:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800252a:	f04f 0000 	mov.w	r0, #0
 800252e:	f04f 0100 	mov.w	r1, #0
 8002532:	0b50      	lsrs	r0, r2, #13
 8002534:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8002538:	1359      	asrs	r1, r3, #13
 800253a:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 800253e:	462b      	mov	r3, r5
 8002540:	fb00 f203 	mul.w	r2, r0, r3
 8002544:	4623      	mov	r3, r4
 8002546:	fb03 f301 	mul.w	r3, r3, r1
 800254a:	4413      	add	r3, r2
 800254c:	4622      	mov	r2, r4
 800254e:	fba2 1200 	umull	r1, r2, r2, r0
 8002552:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002556:	460a      	mov	r2, r1
 8002558:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 800255c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002560:	4413      	add	r3, r2
 8002562:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002566:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800256a:	f04f 0000 	mov.w	r0, #0
 800256e:	f04f 0100 	mov.w	r1, #0
 8002572:	0b50      	lsrs	r0, r2, #13
 8002574:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8002578:	1359      	asrs	r1, r3, #13
 800257a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800257e:	462b      	mov	r3, r5
 8002580:	fb00 f203 	mul.w	r2, r0, r3
 8002584:	4623      	mov	r3, r4
 8002586:	fb03 f301 	mul.w	r3, r3, r1
 800258a:	4413      	add	r3, r2
 800258c:	4622      	mov	r2, r4
 800258e:	fba2 1200 	umull	r1, r2, r2, r0
 8002592:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002596:	460a      	mov	r2, r1
 8002598:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 800259c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80025a0:	4413      	add	r3, r2
 80025a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80025a6:	f04f 0200 	mov.w	r2, #0
 80025aa:	f04f 0300 	mov.w	r3, #0
 80025ae:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80025b2:	4621      	mov	r1, r4
 80025b4:	0e4a      	lsrs	r2, r1, #25
 80025b6:	4629      	mov	r1, r5
 80025b8:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80025bc:	4629      	mov	r1, r5
 80025be:	164b      	asrs	r3, r1, #25
 80025c0:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
   var2 = (((int64_t)bme->p8) * p) >> 19;
 80025c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025c8:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80025cc:	b21b      	sxth	r3, r3
 80025ce:	17da      	asrs	r2, r3, #31
 80025d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80025d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80025d4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80025d8:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80025dc:	462a      	mov	r2, r5
 80025de:	fb02 f203 	mul.w	r2, r2, r3
 80025e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80025e6:	4621      	mov	r1, r4
 80025e8:	fb01 f303 	mul.w	r3, r1, r3
 80025ec:	4413      	add	r3, r2
 80025ee:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80025f2:	4621      	mov	r1, r4
 80025f4:	fba2 1201 	umull	r1, r2, r2, r1
 80025f8:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80025fc:	460a      	mov	r2, r1
 80025fe:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8002602:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002606:	4413      	add	r3, r2
 8002608:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800260c:	f04f 0200 	mov.w	r2, #0
 8002610:	f04f 0300 	mov.w	r3, #0
 8002614:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8002618:	4621      	mov	r1, r4
 800261a:	0cca      	lsrs	r2, r1, #19
 800261c:	4629      	mov	r1, r5
 800261e:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8002622:	4629      	mov	r1, r5
 8002624:	14cb      	asrs	r3, r1, #19
 8002626:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

   p = ((p + var1 + var2) >> 8) + (((int64_t)bme->p7) << 4);
 800262a:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800262e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8002632:	1884      	adds	r4, r0, r2
 8002634:	663c      	str	r4, [r7, #96]	; 0x60
 8002636:	eb41 0303 	adc.w	r3, r1, r3
 800263a:	667b      	str	r3, [r7, #100]	; 0x64
 800263c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8002640:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002644:	4621      	mov	r1, r4
 8002646:	1889      	adds	r1, r1, r2
 8002648:	65b9      	str	r1, [r7, #88]	; 0x58
 800264a:	4629      	mov	r1, r5
 800264c:	eb43 0101 	adc.w	r1, r3, r1
 8002650:	65f9      	str	r1, [r7, #92]	; 0x5c
 8002652:	f04f 0000 	mov.w	r0, #0
 8002656:	f04f 0100 	mov.w	r1, #0
 800265a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800265e:	4623      	mov	r3, r4
 8002660:	0a18      	lsrs	r0, r3, #8
 8002662:	462b      	mov	r3, r5
 8002664:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8002668:	462b      	mov	r3, r5
 800266a:	1219      	asrs	r1, r3, #8
 800266c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002670:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8002674:	b21b      	sxth	r3, r3
 8002676:	17da      	asrs	r2, r3, #31
 8002678:	653b      	str	r3, [r7, #80]	; 0x50
 800267a:	657a      	str	r2, [r7, #84]	; 0x54
 800267c:	f04f 0200 	mov.w	r2, #0
 8002680:	f04f 0300 	mov.w	r3, #0
 8002684:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002688:	464c      	mov	r4, r9
 800268a:	0123      	lsls	r3, r4, #4
 800268c:	4644      	mov	r4, r8
 800268e:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8002692:	4644      	mov	r4, r8
 8002694:	0122      	lsls	r2, r4, #4
 8002696:	1884      	adds	r4, r0, r2
 8002698:	603c      	str	r4, [r7, #0]
 800269a:	eb41 0303 	adc.w	r3, r1, r3
 800269e:	607b      	str	r3, [r7, #4]
 80026a0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80026a4:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
   return (int32_t)p / 256;
 80026a8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	da00      	bge.n	80026b2 <BME280_Read_press+0x582>
 80026b0:	33ff      	adds	r3, #255	; 0xff
 80026b2:	121b      	asrs	r3, r3, #8
 80026b4:	ee07 3a90 	vmov	s15, r3
 80026b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80026bc:	eeb0 0a67 	vmov.f32	s0, s15
 80026c0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80026c4:	46bd      	mov	sp, r7
 80026c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026ca:	bf00      	nop
 80026cc:	00000000 	.word	0x00000000

080026d0 <BME280_ReadAll>:
void BME280_ReadAll(BME280_t *bme, float *T, float *P, float *H)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
 80026dc:	603b      	str	r3, [r7, #0]
   *T = BME280_Read_temp(bme);
 80026de:	68f8      	ldr	r0, [r7, #12]
 80026e0:	f7ff fc52 	bl	8001f88 <BME280_Read_temp>
 80026e4:	eef0 7a40 	vmov.f32	s15, s0
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	edc3 7a00 	vstr	s15, [r3]
   *P = BME280_Read_press(bme) / 100;
 80026ee:	68f8      	ldr	r0, [r7, #12]
 80026f0:	f7ff fd1e 	bl	8002130 <BME280_Read_press>
 80026f4:	eeb0 7a40 	vmov.f32	s14, s0
 80026f8:	eddf 6a09 	vldr	s13, [pc, #36]	; 8002720 <BME280_ReadAll+0x50>
 80026fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	edc3 7a00 	vstr	s15, [r3]
   *H = BME280_Read_hum(bme);
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f7ff fc96 	bl	8002038 <BME280_Read_hum>
 800270c:	eef0 7a40 	vmov.f32	s15, s0
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	edc3 7a00 	vstr	s15, [r3]
}
 8002716:	bf00      	nop
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	42c80000 	.word	0x42c80000

08002724 <BME280_Init>:
void BME280_Init(BME280_t *bme, SPI_HandleTypeDef *spi, GPIO_TypeDef *CsPort, uint16_t CsPin)
{
 8002724:	b590      	push	{r4, r7, lr}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
 8002730:	807b      	strh	r3, [r7, #2]
   bme->bme_spi       = spi;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	68ba      	ldr	r2, [r7, #8]
 8002736:	601a      	str	r2, [r3, #0]
   bme->bme280_CsPort = CsPort;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	605a      	str	r2, [r3, #4]
   bme->bme280_CsPin  = CsPin;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	887a      	ldrh	r2, [r7, #2]
 8002742:	855a      	strh	r2, [r3, #42]	; 0x2a
   bme->t1            = BME280_Read16LE(bme, BME280_DIG_T1);
 8002744:	2188      	movs	r1, #136	; 0x88
 8002746:	68f8      	ldr	r0, [r7, #12]
 8002748:	f7ff fbac 	bl	8001ea4 <BME280_Read16LE>
 800274c:	4603      	mov	r3, r0
 800274e:	461a      	mov	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	84da      	strh	r2, [r3, #38]	; 0x26
   bme->t2            = BME280_Read16LE(bme, BME280_DIG_T2);
 8002754:	218a      	movs	r1, #138	; 0x8a
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f7ff fba4 	bl	8001ea4 <BME280_Read16LE>
 800275c:	4603      	mov	r3, r0
 800275e:	b21a      	sxth	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	819a      	strh	r2, [r3, #12]
   bme->t3            = BME280_Read16LE(bme, BME280_DIG_T3);
 8002764:	218c      	movs	r1, #140	; 0x8c
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f7ff fb9c 	bl	8001ea4 <BME280_Read16LE>
 800276c:	4603      	mov	r3, r0
 800276e:	b21a      	sxth	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	81da      	strh	r2, [r3, #14]

   bme->p1 = BME280_Read16LE(bme, BME280_DIG_P1);
 8002774:	218e      	movs	r1, #142	; 0x8e
 8002776:	68f8      	ldr	r0, [r7, #12]
 8002778:	f7ff fb94 	bl	8001ea4 <BME280_Read16LE>
 800277c:	4603      	mov	r3, r0
 800277e:	461a      	mov	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	851a      	strh	r2, [r3, #40]	; 0x28
   bme->p2 = BME280_Read16LE(bme, BME280_DIG_P2);
 8002784:	2190      	movs	r1, #144	; 0x90
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	f7ff fb8c 	bl	8001ea4 <BME280_Read16LE>
 800278c:	4603      	mov	r3, r0
 800278e:	b21a      	sxth	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	821a      	strh	r2, [r3, #16]
   bme->p3 = BME280_Read16LE(bme, BME280_DIG_P3);
 8002794:	2192      	movs	r1, #146	; 0x92
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f7ff fb84 	bl	8001ea4 <BME280_Read16LE>
 800279c:	4603      	mov	r3, r0
 800279e:	b21a      	sxth	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	825a      	strh	r2, [r3, #18]
   bme->p4 = BME280_Read16LE(bme, BME280_DIG_P4);
 80027a4:	2194      	movs	r1, #148	; 0x94
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f7ff fb7c 	bl	8001ea4 <BME280_Read16LE>
 80027ac:	4603      	mov	r3, r0
 80027ae:	b21a      	sxth	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	829a      	strh	r2, [r3, #20]
   bme->p5 = BME280_Read16LE(bme, BME280_DIG_P5);
 80027b4:	2196      	movs	r1, #150	; 0x96
 80027b6:	68f8      	ldr	r0, [r7, #12]
 80027b8:	f7ff fb74 	bl	8001ea4 <BME280_Read16LE>
 80027bc:	4603      	mov	r3, r0
 80027be:	b21a      	sxth	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	82da      	strh	r2, [r3, #22]
   bme->p6 = BME280_Read16LE(bme, BME280_DIG_P6);
 80027c4:	2198      	movs	r1, #152	; 0x98
 80027c6:	68f8      	ldr	r0, [r7, #12]
 80027c8:	f7ff fb6c 	bl	8001ea4 <BME280_Read16LE>
 80027cc:	4603      	mov	r3, r0
 80027ce:	b21a      	sxth	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	831a      	strh	r2, [r3, #24]
   bme->p7 = BME280_Read16LE(bme, BME280_DIG_P7);
 80027d4:	219a      	movs	r1, #154	; 0x9a
 80027d6:	68f8      	ldr	r0, [r7, #12]
 80027d8:	f7ff fb64 	bl	8001ea4 <BME280_Read16LE>
 80027dc:	4603      	mov	r3, r0
 80027de:	b21a      	sxth	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	835a      	strh	r2, [r3, #26]
   bme->p8 = BME280_Read16LE(bme, BME280_DIG_P8);
 80027e4:	219c      	movs	r1, #156	; 0x9c
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f7ff fb5c 	bl	8001ea4 <BME280_Read16LE>
 80027ec:	4603      	mov	r3, r0
 80027ee:	b21a      	sxth	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	839a      	strh	r2, [r3, #28]
   bme->p9 = BME280_Read16LE(bme, BME280_DIG_P9);
 80027f4:	219e      	movs	r1, #158	; 0x9e
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f7ff fb54 	bl	8001ea4 <BME280_Read16LE>
 80027fc:	4603      	mov	r3, r0
 80027fe:	b21a      	sxth	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	83da      	strh	r2, [r3, #30]

   bme->h1 = BME280_Read8(bme, BME280_DIG_H1);
 8002804:	21a1      	movs	r1, #161	; 0xa1
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	f7ff fb02 	bl	8001e10 <BME280_Read8>
 800280c:	4603      	mov	r3, r0
 800280e:	461a      	mov	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	721a      	strb	r2, [r3, #8]
   bme->h2 = BME280_Read16LE(bme, BME280_DIG_H2);
 8002814:	21e1      	movs	r1, #225	; 0xe1
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f7ff fb44 	bl	8001ea4 <BME280_Read16LE>
 800281c:	4603      	mov	r3, r0
 800281e:	b21a      	sxth	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	841a      	strh	r2, [r3, #32]
   bme->h3 = BME280_Read8(bme, BME280_DIG_H3);
 8002824:	21e3      	movs	r1, #227	; 0xe3
 8002826:	68f8      	ldr	r0, [r7, #12]
 8002828:	f7ff faf2 	bl	8001e10 <BME280_Read8>
 800282c:	4603      	mov	r3, r0
 800282e:	461a      	mov	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	725a      	strb	r2, [r3, #9]
   bme->h4 = ((BME280_Read8(bme, BME280_DIG_H4) << 4) | (BME280_Read8(bme, BME280_DIG_H4 + 1) & 0xF));
 8002834:	21e4      	movs	r1, #228	; 0xe4
 8002836:	68f8      	ldr	r0, [r7, #12]
 8002838:	f7ff faea 	bl	8001e10 <BME280_Read8>
 800283c:	4603      	mov	r3, r0
 800283e:	011b      	lsls	r3, r3, #4
 8002840:	b21c      	sxth	r4, r3
 8002842:	21e5      	movs	r1, #229	; 0xe5
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f7ff fae3 	bl	8001e10 <BME280_Read8>
 800284a:	4603      	mov	r3, r0
 800284c:	b21b      	sxth	r3, r3
 800284e:	f003 030f 	and.w	r3, r3, #15
 8002852:	b21b      	sxth	r3, r3
 8002854:	4323      	orrs	r3, r4
 8002856:	b21a      	sxth	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	845a      	strh	r2, [r3, #34]	; 0x22
   bme->h5 = ((BME280_Read8(bme, BME280_DIG_H5 + 1) << 4) | (BME280_Read8(bme, BME280_DIG_H5) >> 4));
 800285c:	21e6      	movs	r1, #230	; 0xe6
 800285e:	68f8      	ldr	r0, [r7, #12]
 8002860:	f7ff fad6 	bl	8001e10 <BME280_Read8>
 8002864:	4603      	mov	r3, r0
 8002866:	011b      	lsls	r3, r3, #4
 8002868:	b21c      	sxth	r4, r3
 800286a:	21e5      	movs	r1, #229	; 0xe5
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f7ff facf 	bl	8001e10 <BME280_Read8>
 8002872:	4603      	mov	r3, r0
 8002874:	091b      	lsrs	r3, r3, #4
 8002876:	b2db      	uxtb	r3, r3
 8002878:	b21b      	sxth	r3, r3
 800287a:	4323      	orrs	r3, r4
 800287c:	b21a      	sxth	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	849a      	strh	r2, [r3, #36]	; 0x24
   bme->h6 = (int8_t)BME280_Read8(bme, BME280_DIG_H6);
 8002882:	21e7      	movs	r1, #231	; 0xe7
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f7ff fac3 	bl	8001e10 <BME280_Read8>
 800288a:	4603      	mov	r3, r0
 800288c:	b25a      	sxtb	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	729a      	strb	r2, [r3, #10]
   BME280_Write8(bme, BME280_HUM_CONTROL, 0b00000100);
 8002892:	2204      	movs	r2, #4
 8002894:	21f2      	movs	r1, #242	; 0xf2
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f7ff fae1 	bl	8001e5e <BME280_Write8>
   BME280_Write8(bme, BME280_CONTROL, 0b10110111);
 800289c:	22b7      	movs	r2, #183	; 0xb7
 800289e:	21f4      	movs	r1, #244	; 0xf4
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f7ff fadc 	bl	8001e5e <BME280_Write8>
   BME280_Write8(bme, BME280_CONFIG, 0b00000000);
 80028a6:	2200      	movs	r2, #0
 80028a8:	21f5      	movs	r1, #245	; 0xf5
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f7ff fad7 	bl	8001e5e <BME280_Write8>
}
 80028b0:	bf00      	nop
 80028b2:	3714      	adds	r7, #20
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd90      	pop	{r4, r7, pc}

080028b8 <Crc>:
#include "crc.h"
#include "main.h"
int RandomNumber[] = { 131456, 215134, 31254, 4135, 516454, 642754, 71363, 85362475, 9144316, 10341957, 11345134, 11354342 };
int k              = 0;
uint32_t Crc(uint32_t PreviuseCRC, uint32_t DataLength, uint8_t *data)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b087      	sub	sp, #28
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
   PreviuseCRC ^= data[0];
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	461a      	mov	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	4053      	eors	r3, r2
 80028ce:	60fb      	str	r3, [r7, #12]
   for(uint32_t i = 1; i < DataLength; i++)
 80028d0:	2301      	movs	r3, #1
 80028d2:	617b      	str	r3, [r7, #20]
 80028d4:	e032      	b.n	800293c <Crc+0x84>
   {
      uint32_t temp = data[i];
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	4413      	add	r3, r2
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	613b      	str	r3, [r7, #16]
      if(temp == 0x00000000 )
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d115      	bne.n	8002912 <Crc+0x5a>
      {
         temp = RandomNumber[k % 12];
 80028e6:	4b1c      	ldr	r3, [pc, #112]	; (8002958 <Crc+0xa0>)
 80028e8:	6819      	ldr	r1, [r3, #0]
 80028ea:	4b1c      	ldr	r3, [pc, #112]	; (800295c <Crc+0xa4>)
 80028ec:	fb83 2301 	smull	r2, r3, r3, r1
 80028f0:	105a      	asrs	r2, r3, #1
 80028f2:	17cb      	asrs	r3, r1, #31
 80028f4:	1ad2      	subs	r2, r2, r3
 80028f6:	4613      	mov	r3, r2
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	4413      	add	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	1aca      	subs	r2, r1, r3
 8002900:	4b17      	ldr	r3, [pc, #92]	; (8002960 <Crc+0xa8>)
 8002902:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002906:	613b      	str	r3, [r7, #16]
         k++;
 8002908:	4b13      	ldr	r3, [pc, #76]	; (8002958 <Crc+0xa0>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	3301      	adds	r3, #1
 800290e:	4a12      	ldr	r2, [pc, #72]	; (8002958 <Crc+0xa0>)
 8002910:	6013      	str	r3, [r2, #0]
      }
      PreviuseCRC ^= ((uint32_t)(temp) * (256 * i));
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	fb02 f303 	mul.w	r3, r2, r3
 800291a:	021b      	lsls	r3, r3, #8
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	4053      	eors	r3, r2
 8002920:	60fb      	str	r3, [r7, #12]
      if(PreviuseCRC & 0x80000000)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2b00      	cmp	r3, #0
 8002926:	da03      	bge.n	8002930 <Crc+0x78>
      {
         PreviuseCRC ^= 0xABC245C2;
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	4b0e      	ldr	r3, [pc, #56]	; (8002964 <Crc+0xac>)
 800292c:	4053      	eors	r3, r2
 800292e:	60fb      	str	r3, [r7, #12]
      }
      PreviuseCRC <<= 1;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	60fb      	str	r3, [r7, #12]
   for(uint32_t i = 1; i < DataLength; i++)
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	3301      	adds	r3, #1
 800293a:	617b      	str	r3, [r7, #20]
 800293c:	697a      	ldr	r2, [r7, #20]
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	429a      	cmp	r2, r3
 8002942:	d3c8      	bcc.n	80028d6 <Crc+0x1e>
   }
   k = 0;
 8002944:	4b04      	ldr	r3, [pc, #16]	; (8002958 <Crc+0xa0>)
 8002946:	2200      	movs	r2, #0
 8002948:	601a      	str	r2, [r3, #0]
   return PreviuseCRC;
 800294a:	68fb      	ldr	r3, [r7, #12]
}
 800294c:	4618      	mov	r0, r3
 800294e:	371c      	adds	r7, #28
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr
 8002958:	200002ac 	.word	0x200002ac
 800295c:	2aaaaaab 	.word	0x2aaaaaab
 8002960:	20000024 	.word	0x20000024
 8002964:	abc245c2 	.word	0xabc245c2

08002968 <RepareMessage>:
CRCStatus_TypeDef RepareMessage(uint32_t OryginalCRC, uint8_t *data, uint32_t DataLength)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b088      	sub	sp, #32
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
   uint8_t temp = 1;
 8002974:	2301      	movs	r3, #1
 8002976:	75fb      	strb	r3, [r7, #23]
   for(int i = 0; i < DataLength; i++)
 8002978:	2300      	movs	r3, #0
 800297a:	61fb      	str	r3, [r7, #28]
 800297c:	e03b      	b.n	80029f6 <RepareMessage+0x8e>
   {
      for(int j = 0; j < 8; j++)
 800297e:	2300      	movs	r3, #0
 8002980:	61bb      	str	r3, [r7, #24]
 8002982:	e032      	b.n	80029ea <RepareMessage+0x82>
      {
         data[i] ^= (temp << j);
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	68ba      	ldr	r2, [r7, #8]
 8002988:	4413      	add	r3, r2
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	b25a      	sxtb	r2, r3
 800298e:	7df9      	ldrb	r1, [r7, #23]
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	fa01 f303 	lsl.w	r3, r1, r3
 8002996:	b25b      	sxtb	r3, r3
 8002998:	4053      	eors	r3, r2
 800299a:	b259      	sxtb	r1, r3
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	68ba      	ldr	r2, [r7, #8]
 80029a0:	4413      	add	r3, r2
 80029a2:	b2ca      	uxtb	r2, r1
 80029a4:	701a      	strb	r2, [r3, #0]
         if(OryginalCRC == Crc(CRC_INITIAL_VALUE, DataLength - 4, data))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	3b04      	subs	r3, #4
 80029aa:	68ba      	ldr	r2, [r7, #8]
 80029ac:	4619      	mov	r1, r3
 80029ae:	f04f 30ff 	mov.w	r0, #4294967295
 80029b2:	f7ff ff81 	bl	80028b8 <Crc>
 80029b6:	4602      	mov	r2, r0
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d101      	bne.n	80029c2 <RepareMessage+0x5a>
         {
            return CRC_OK;
 80029be:	2301      	movs	r3, #1
 80029c0:	e01e      	b.n	8002a00 <RepareMessage+0x98>
         }
         else
         {
            data[i] ^= (temp << j);
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	68ba      	ldr	r2, [r7, #8]
 80029c6:	4413      	add	r3, r2
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	b25a      	sxtb	r2, r3
 80029cc:	7df9      	ldrb	r1, [r7, #23]
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	fa01 f303 	lsl.w	r3, r1, r3
 80029d4:	b25b      	sxtb	r3, r3
 80029d6:	4053      	eors	r3, r2
 80029d8:	b259      	sxtb	r1, r3
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	68ba      	ldr	r2, [r7, #8]
 80029de:	4413      	add	r3, r2
 80029e0:	b2ca      	uxtb	r2, r1
 80029e2:	701a      	strb	r2, [r3, #0]
      for(int j = 0; j < 8; j++)
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	3301      	adds	r3, #1
 80029e8:	61bb      	str	r3, [r7, #24]
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	2b07      	cmp	r3, #7
 80029ee:	ddc9      	ble.n	8002984 <RepareMessage+0x1c>
   for(int i = 0; i < DataLength; i++)
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	3301      	adds	r3, #1
 80029f4:	61fb      	str	r3, [r7, #28]
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d8bf      	bhi.n	800297e <RepareMessage+0x16>
         }
      }
   }
   return CRC_ERROR;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3720      	adds	r7, #32
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002a0e:	4b0f      	ldr	r3, [pc, #60]	; (8002a4c <MX_DMA_Init+0x44>)
 8002a10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a12:	4a0e      	ldr	r2, [pc, #56]	; (8002a4c <MX_DMA_Init+0x44>)
 8002a14:	f043 0304 	orr.w	r3, r3, #4
 8002a18:	6493      	str	r3, [r2, #72]	; 0x48
 8002a1a:	4b0c      	ldr	r3, [pc, #48]	; (8002a4c <MX_DMA_Init+0x44>)
 8002a1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a1e:	f003 0304 	and.w	r3, r3, #4
 8002a22:	607b      	str	r3, [r7, #4]
 8002a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002a26:	4b09      	ldr	r3, [pc, #36]	; (8002a4c <MX_DMA_Init+0x44>)
 8002a28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a2a:	4a08      	ldr	r2, [pc, #32]	; (8002a4c <MX_DMA_Init+0x44>)
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	6493      	str	r3, [r2, #72]	; 0x48
 8002a32:	4b06      	ldr	r3, [pc, #24]	; (8002a4c <MX_DMA_Init+0x44>)
 8002a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	603b      	str	r3, [r7, #0]
 8002a3c:	683b      	ldr	r3, [r7, #0]

}
 8002a3e:	bf00      	nop
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	40021000 	.word	0x40021000

08002a50 <e_papier_reset>:
const unsigned char lut_bb[] = {
   0x80, 0x17, 0x00, 0x00, 0x00, 0x02, 0x90, 0x17, 0x17, 0x00, 0x00, 0x02, 0x80, 0x0A, 0x01, 0x00, 0x00, 0x01, 0x50, 0x0E, 0x0E,
   0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};
void e_papier_reset(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(EPAPIER_RST_GPIO_Port, EPAPIER_RST_Pin, 1);
 8002a54:	2201      	movs	r2, #1
 8002a56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a5a:	480d      	ldr	r0, [pc, #52]	; (8002a90 <e_papier_reset+0x40>)
 8002a5c:	f007 f8e2 	bl	8009c24 <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8002a60:	20c8      	movs	r0, #200	; 0xc8
 8002a62:	f006 fae5 	bl	8009030 <HAL_Delay>
   HAL_GPIO_WritePin(EPAPIER_RST_GPIO_Port, EPAPIER_RST_Pin, 0);
 8002a66:	2200      	movs	r2, #0
 8002a68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a6c:	4808      	ldr	r0, [pc, #32]	; (8002a90 <e_papier_reset+0x40>)
 8002a6e:	f007 f8d9 	bl	8009c24 <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8002a72:	20c8      	movs	r0, #200	; 0xc8
 8002a74:	f006 fadc 	bl	8009030 <HAL_Delay>
   HAL_GPIO_WritePin(EPAPIER_RST_GPIO_Port, EPAPIER_RST_Pin, 1);
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a7e:	4804      	ldr	r0, [pc, #16]	; (8002a90 <e_papier_reset+0x40>)
 8002a80:	f007 f8d0 	bl	8009c24 <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8002a84:	20c8      	movs	r0, #200	; 0xc8
 8002a86:	f006 fad3 	bl	8009030 <HAL_Delay>
}
 8002a8a:	bf00      	nop
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	48000400 	.word	0x48000400

08002a94 <e_papier_send_command>:
void e_papier_send_command(uint8_t command)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	71fb      	strb	r3, [r7, #7]
   HAL_GPIO_WritePin(SCREENS_DC_GPIO_Port, SCREENS_DC_Pin, 0);
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	2101      	movs	r1, #1
 8002aa2:	480c      	ldr	r0, [pc, #48]	; (8002ad4 <e_papier_send_command+0x40>)
 8002aa4:	f007 f8be 	bl	8009c24 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(EPAPIER_CS_GPIO_Port, EPAPIER_CS_Pin, 0);
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	2102      	movs	r1, #2
 8002aac:	4809      	ldr	r0, [pc, #36]	; (8002ad4 <e_papier_send_command+0x40>)
 8002aae:	f007 f8b9 	bl	8009c24 <HAL_GPIO_WritePin>
   HAL_SPI_Transmit(e_papier_spi, &command, 1, 1000);
 8002ab2:	4b09      	ldr	r3, [pc, #36]	; (8002ad8 <e_papier_send_command+0x44>)
 8002ab4:	6818      	ldr	r0, [r3, #0]
 8002ab6:	1df9      	adds	r1, r7, #7
 8002ab8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002abc:	2201      	movs	r2, #1
 8002abe:	f009 fbb0 	bl	800c222 <HAL_SPI_Transmit>
   HAL_GPIO_WritePin(EPAPIER_CS_GPIO_Port, EPAPIER_CS_Pin, 1);
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	2102      	movs	r1, #2
 8002ac6:	4803      	ldr	r0, [pc, #12]	; (8002ad4 <e_papier_send_command+0x40>)
 8002ac8:	f007 f8ac 	bl	8009c24 <HAL_GPIO_WritePin>
}
 8002acc:	bf00      	nop
 8002ace:	3708      	adds	r7, #8
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	48000400 	.word	0x48000400
 8002ad8:	200002b0 	.word	0x200002b0

08002adc <e_papier_send_data>:
void e_papier_send_data(uint8_t data)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	71fb      	strb	r3, [r7, #7]
   HAL_GPIO_WritePin(SCREENS_DC_GPIO_Port, SCREENS_DC_Pin, 1);
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	2101      	movs	r1, #1
 8002aea:	480c      	ldr	r0, [pc, #48]	; (8002b1c <e_papier_send_data+0x40>)
 8002aec:	f007 f89a 	bl	8009c24 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(EPAPIER_CS_GPIO_Port, EPAPIER_CS_Pin, 0);
 8002af0:	2200      	movs	r2, #0
 8002af2:	2102      	movs	r1, #2
 8002af4:	4809      	ldr	r0, [pc, #36]	; (8002b1c <e_papier_send_data+0x40>)
 8002af6:	f007 f895 	bl	8009c24 <HAL_GPIO_WritePin>
   HAL_SPI_Transmit(e_papier_spi, &data, 1, 1000);
 8002afa:	4b09      	ldr	r3, [pc, #36]	; (8002b20 <e_papier_send_data+0x44>)
 8002afc:	6818      	ldr	r0, [r3, #0]
 8002afe:	1df9      	adds	r1, r7, #7
 8002b00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b04:	2201      	movs	r2, #1
 8002b06:	f009 fb8c 	bl	800c222 <HAL_SPI_Transmit>
   HAL_GPIO_WritePin(EPAPIER_CS_GPIO_Port, EPAPIER_CS_Pin, 1);
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	2102      	movs	r1, #2
 8002b0e:	4803      	ldr	r0, [pc, #12]	; (8002b1c <e_papier_send_data+0x40>)
 8002b10:	f007 f888 	bl	8009c24 <HAL_GPIO_WritePin>
}
 8002b14:	bf00      	nop
 8002b16:	3708      	adds	r7, #8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	48000400 	.word	0x48000400
 8002b20:	200002b0 	.word	0x200002b0

08002b24 <e_papier_wait_until_idle>:
void e_papier_wait_until_idle(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
   while(HAL_GPIO_ReadPin(EPAPIER_BUSY_GPIO_Port, EPAPIER_BUSY_Pin) == 0)
 8002b28:	e002      	b.n	8002b30 <e_papier_wait_until_idle+0xc>
   {
      osDelay(100);
 8002b2a:	2064      	movs	r0, #100	; 0x64
 8002b2c:	f00d fa32 	bl	800ff94 <osDelay>
   while(HAL_GPIO_ReadPin(EPAPIER_BUSY_GPIO_Port, EPAPIER_BUSY_Pin) == 0)
 8002b30:	2104      	movs	r1, #4
 8002b32:	4804      	ldr	r0, [pc, #16]	; (8002b44 <e_papier_wait_until_idle+0x20>)
 8002b34:	f007 f85e 	bl	8009bf4 <HAL_GPIO_ReadPin>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d0f5      	beq.n	8002b2a <e_papier_wait_until_idle+0x6>
   }
}
 8002b3e:	bf00      	nop
 8002b40:	bf00      	nop
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	48000400 	.word	0x48000400

08002b48 <e_papier_set_pixel>:
void e_papier_set_pixel(uint16_t x, uint16_t y, color_t color)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	80fb      	strh	r3, [r7, #6]
 8002b52:	460b      	mov	r3, r1
 8002b54:	80bb      	strh	r3, [r7, #4]
 8002b56:	4613      	mov	r3, r2
 8002b58:	70fb      	strb	r3, [r7, #3]
   if(x >= EPD_WIDTH || x < 0 || y >= EPD_HEIGHT || y < 0)
 8002b5a:	88fb      	ldrh	r3, [r7, #6]
 8002b5c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002b60:	d247      	bcs.n	8002bf2 <e_papier_set_pixel+0xaa>
 8002b62:	88bb      	ldrh	r3, [r7, #4]
 8002b64:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002b68:	d243      	bcs.n	8002bf2 <e_papier_set_pixel+0xaa>
   {
      return;
   }
   if(color == WHITE)
 8002b6a:	78fb      	ldrb	r3, [r7, #3]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d120      	bne.n	8002bb2 <e_papier_set_pixel+0x6a>
   {
      BufferEpapier[x / 8 + y * EPD_WIDTH / 8] |= (0x80 > (x % 8));
 8002b70:	88fb      	ldrh	r3, [r7, #6]
 8002b72:	08db      	lsrs	r3, r3, #3
 8002b74:	b299      	uxth	r1, r3
 8002b76:	4608      	mov	r0, r1
 8002b78:	88bb      	ldrh	r3, [r7, #4]
 8002b7a:	2232      	movs	r2, #50	; 0x32
 8002b7c:	fb02 f303 	mul.w	r3, r2, r3
 8002b80:	4403      	add	r3, r0
 8002b82:	4a1f      	ldr	r2, [pc, #124]	; (8002c00 <e_papier_set_pixel+0xb8>)
 8002b84:	5cd3      	ldrb	r3, [r2, r3]
 8002b86:	b25a      	sxtb	r2, r3
 8002b88:	88fb      	ldrh	r3, [r7, #6]
 8002b8a:	f003 0307 	and.w	r3, r3, #7
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	2b7f      	cmp	r3, #127	; 0x7f
 8002b92:	bf94      	ite	ls
 8002b94:	2301      	movls	r3, #1
 8002b96:	2300      	movhi	r3, #0
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	b25b      	sxtb	r3, r3
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	b258      	sxtb	r0, r3
 8002ba0:	88bb      	ldrh	r3, [r7, #4]
 8002ba2:	2232      	movs	r2, #50	; 0x32
 8002ba4:	fb02 f303 	mul.w	r3, r2, r3
 8002ba8:	440b      	add	r3, r1
 8002baa:	b2c1      	uxtb	r1, r0
 8002bac:	4a14      	ldr	r2, [pc, #80]	; (8002c00 <e_papier_set_pixel+0xb8>)
 8002bae:	54d1      	strb	r1, [r2, r3]
 8002bb0:	e020      	b.n	8002bf4 <e_papier_set_pixel+0xac>
   }
   else
   {
      BufferEpapier[x / 8 + y * EPD_WIDTH / 8] &= ~(0x80 >> (x % 8));
 8002bb2:	88fb      	ldrh	r3, [r7, #6]
 8002bb4:	08db      	lsrs	r3, r3, #3
 8002bb6:	b298      	uxth	r0, r3
 8002bb8:	4601      	mov	r1, r0
 8002bba:	88bb      	ldrh	r3, [r7, #4]
 8002bbc:	2232      	movs	r2, #50	; 0x32
 8002bbe:	fb02 f303 	mul.w	r3, r2, r3
 8002bc2:	440b      	add	r3, r1
 8002bc4:	4a0e      	ldr	r2, [pc, #56]	; (8002c00 <e_papier_set_pixel+0xb8>)
 8002bc6:	5cd3      	ldrb	r3, [r2, r3]
 8002bc8:	b25a      	sxtb	r2, r3
 8002bca:	88fb      	ldrh	r3, [r7, #6]
 8002bcc:	f003 0307 	and.w	r3, r3, #7
 8002bd0:	2180      	movs	r1, #128	; 0x80
 8002bd2:	fa41 f303 	asr.w	r3, r1, r3
 8002bd6:	b25b      	sxtb	r3, r3
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	b25b      	sxtb	r3, r3
 8002bdc:	4013      	ands	r3, r2
 8002bde:	b259      	sxtb	r1, r3
 8002be0:	88bb      	ldrh	r3, [r7, #4]
 8002be2:	2232      	movs	r2, #50	; 0x32
 8002be4:	fb02 f303 	mul.w	r3, r2, r3
 8002be8:	4403      	add	r3, r0
 8002bea:	b2c9      	uxtb	r1, r1
 8002bec:	4a04      	ldr	r2, [pc, #16]	; (8002c00 <e_papier_set_pixel+0xb8>)
 8002bee:	54d1      	strb	r1, [r2, r3]
 8002bf0:	e000      	b.n	8002bf4 <e_papier_set_pixel+0xac>
      return;
 8002bf2:	bf00      	nop
   }
}
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	200002b4 	.word	0x200002b4

08002c04 <e_papier_set_lut>:
void e_papier_set_lut(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
   uint16_t count;
   e_papier_send_command(LUT_FOR_VCOM); // g vcom
 8002c0a:	2020      	movs	r0, #32
 8002c0c:	f7ff ff42 	bl	8002a94 <e_papier_send_command>
   for(count = 0; count < 44; count++)
 8002c10:	2300      	movs	r3, #0
 8002c12:	80fb      	strh	r3, [r7, #6]
 8002c14:	e008      	b.n	8002c28 <e_papier_set_lut+0x24>
   {
      e_papier_send_data(lut_vcom0[count]);
 8002c16:	88fb      	ldrh	r3, [r7, #6]
 8002c18:	4a2b      	ldr	r2, [pc, #172]	; (8002cc8 <e_papier_set_lut+0xc4>)
 8002c1a:	5cd3      	ldrb	r3, [r2, r3]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7ff ff5d 	bl	8002adc <e_papier_send_data>
   for(count = 0; count < 44; count++)
 8002c22:	88fb      	ldrh	r3, [r7, #6]
 8002c24:	3301      	adds	r3, #1
 8002c26:	80fb      	strh	r3, [r7, #6]
 8002c28:	88fb      	ldrh	r3, [r7, #6]
 8002c2a:	2b2b      	cmp	r3, #43	; 0x2b
 8002c2c:	d9f3      	bls.n	8002c16 <e_papier_set_lut+0x12>
   }

   e_papier_send_command(LUT_WHITE_TO_WHITE);
 8002c2e:	2021      	movs	r0, #33	; 0x21
 8002c30:	f7ff ff30 	bl	8002a94 <e_papier_send_command>
   for(count = 0; count < 42; count++)
 8002c34:	2300      	movs	r3, #0
 8002c36:	80fb      	strh	r3, [r7, #6]
 8002c38:	e008      	b.n	8002c4c <e_papier_set_lut+0x48>
   {
      e_papier_send_data(lut_ww[count]);
 8002c3a:	88fb      	ldrh	r3, [r7, #6]
 8002c3c:	4a23      	ldr	r2, [pc, #140]	; (8002ccc <e_papier_set_lut+0xc8>)
 8002c3e:	5cd3      	ldrb	r3, [r2, r3]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7ff ff4b 	bl	8002adc <e_papier_send_data>
   for(count = 0; count < 42; count++)
 8002c46:	88fb      	ldrh	r3, [r7, #6]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	80fb      	strh	r3, [r7, #6]
 8002c4c:	88fb      	ldrh	r3, [r7, #6]
 8002c4e:	2b29      	cmp	r3, #41	; 0x29
 8002c50:	d9f3      	bls.n	8002c3a <e_papier_set_lut+0x36>
   }

   e_papier_send_command(LUT_BLACK_TO_WHITE);
 8002c52:	2022      	movs	r0, #34	; 0x22
 8002c54:	f7ff ff1e 	bl	8002a94 <e_papier_send_command>
   for(count = 0; count < 42; count++)
 8002c58:	2300      	movs	r3, #0
 8002c5a:	80fb      	strh	r3, [r7, #6]
 8002c5c:	e008      	b.n	8002c70 <e_papier_set_lut+0x6c>
   {
      e_papier_send_data(lut_bw[count]);
 8002c5e:	88fb      	ldrh	r3, [r7, #6]
 8002c60:	4a1b      	ldr	r2, [pc, #108]	; (8002cd0 <e_papier_set_lut+0xcc>)
 8002c62:	5cd3      	ldrb	r3, [r2, r3]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7ff ff39 	bl	8002adc <e_papier_send_data>
   for(count = 0; count < 42; count++)
 8002c6a:	88fb      	ldrh	r3, [r7, #6]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	80fb      	strh	r3, [r7, #6]
 8002c70:	88fb      	ldrh	r3, [r7, #6]
 8002c72:	2b29      	cmp	r3, #41	; 0x29
 8002c74:	d9f3      	bls.n	8002c5e <e_papier_set_lut+0x5a>
   }

   e_papier_send_command(LUT_WHITE_TO_BLACK);
 8002c76:	2023      	movs	r0, #35	; 0x23
 8002c78:	f7ff ff0c 	bl	8002a94 <e_papier_send_command>
   for(count = 0; count < 42; count++)
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	80fb      	strh	r3, [r7, #6]
 8002c80:	e008      	b.n	8002c94 <e_papier_set_lut+0x90>
   {
      e_papier_send_data(lut_wb[count]);
 8002c82:	88fb      	ldrh	r3, [r7, #6]
 8002c84:	4a13      	ldr	r2, [pc, #76]	; (8002cd4 <e_papier_set_lut+0xd0>)
 8002c86:	5cd3      	ldrb	r3, [r2, r3]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff ff27 	bl	8002adc <e_papier_send_data>
   for(count = 0; count < 42; count++)
 8002c8e:	88fb      	ldrh	r3, [r7, #6]
 8002c90:	3301      	adds	r3, #1
 8002c92:	80fb      	strh	r3, [r7, #6]
 8002c94:	88fb      	ldrh	r3, [r7, #6]
 8002c96:	2b29      	cmp	r3, #41	; 0x29
 8002c98:	d9f3      	bls.n	8002c82 <e_papier_set_lut+0x7e>
   }

   e_papier_send_command(LUT_BLACK_TO_BLACK);
 8002c9a:	2024      	movs	r0, #36	; 0x24
 8002c9c:	f7ff fefa 	bl	8002a94 <e_papier_send_command>
   for(count = 0; count < 42; count++)
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	80fb      	strh	r3, [r7, #6]
 8002ca4:	e008      	b.n	8002cb8 <e_papier_set_lut+0xb4>
   {
      e_papier_send_data(lut_bb[count]);
 8002ca6:	88fb      	ldrh	r3, [r7, #6]
 8002ca8:	4a0b      	ldr	r2, [pc, #44]	; (8002cd8 <e_papier_set_lut+0xd4>)
 8002caa:	5cd3      	ldrb	r3, [r2, r3]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7ff ff15 	bl	8002adc <e_papier_send_data>
   for(count = 0; count < 42; count++)
 8002cb2:	88fb      	ldrh	r3, [r7, #6]
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	80fb      	strh	r3, [r7, #6]
 8002cb8:	88fb      	ldrh	r3, [r7, #6]
 8002cba:	2b29      	cmp	r3, #41	; 0x29
 8002cbc:	d9f3      	bls.n	8002ca6 <e_papier_set_lut+0xa2>
   }
}
 8002cbe:	bf00      	nop
 8002cc0:	bf00      	nop
 8002cc2:	3708      	adds	r7, #8
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	08019b98 	.word	0x08019b98
 8002ccc:	08019bc4 	.word	0x08019bc4
 8002cd0:	08019bf0 	.word	0x08019bf0
 8002cd4:	08019c1c 	.word	0x08019c1c
 8002cd8:	08019c48 	.word	0x08019c48

08002cdc <e_papier_turn_on_display>:
      }
   }
   // e_papier_wait_until_idle();
}
void e_papier_turn_on_display(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
   e_papier_send_command(DISPLAY_REFRESH);
 8002ce0:	2012      	movs	r0, #18
 8002ce2:	f7ff fed7 	bl	8002a94 <e_papier_send_command>
   e_papier_wait_until_idle();
 8002ce6:	f7ff ff1d 	bl	8002b24 <e_papier_wait_until_idle>
}
 8002cea:	bf00      	nop
 8002cec:	bd80      	pop	{r7, pc}
	...

08002cf0 <e_papier_display>:
void e_papier_display(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
   uint16_t Width, Height;
   Width  = (EPD_WIDTH % 8 == 0) ? (EPD_WIDTH / 8) : (EPD_WIDTH / 8 + 1);
 8002cf6:	2332      	movs	r3, #50	; 0x32
 8002cf8:	80fb      	strh	r3, [r7, #6]
   Height = EPD_HEIGHT;
 8002cfa:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002cfe:	80bb      	strh	r3, [r7, #4]
   taskENTER_CRITICAL();
 8002d00:	f010 fd88 	bl	8013814 <vPortEnterCritical>
   e_papier_send_command(DATA_START_TRANSMISSION_1);
 8002d04:	2010      	movs	r0, #16
 8002d06:	f7ff fec5 	bl	8002a94 <e_papier_send_command>
   for(uint16_t j = 0; j < Height; j++)
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	81fb      	strh	r3, [r7, #14]
 8002d0e:	e00f      	b.n	8002d30 <e_papier_display+0x40>
   {
      for(uint16_t i = 0; i < Width; i++)
 8002d10:	2300      	movs	r3, #0
 8002d12:	81bb      	strh	r3, [r7, #12]
 8002d14:	e005      	b.n	8002d22 <e_papier_display+0x32>
      {
         e_papier_send_data(0XFF);
 8002d16:	20ff      	movs	r0, #255	; 0xff
 8002d18:	f7ff fee0 	bl	8002adc <e_papier_send_data>
      for(uint16_t i = 0; i < Width; i++)
 8002d1c:	89bb      	ldrh	r3, [r7, #12]
 8002d1e:	3301      	adds	r3, #1
 8002d20:	81bb      	strh	r3, [r7, #12]
 8002d22:	89ba      	ldrh	r2, [r7, #12]
 8002d24:	88fb      	ldrh	r3, [r7, #6]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d3f5      	bcc.n	8002d16 <e_papier_display+0x26>
   for(uint16_t j = 0; j < Height; j++)
 8002d2a:	89fb      	ldrh	r3, [r7, #14]
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	81fb      	strh	r3, [r7, #14]
 8002d30:	89fa      	ldrh	r2, [r7, #14]
 8002d32:	88bb      	ldrh	r3, [r7, #4]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d3eb      	bcc.n	8002d10 <e_papier_display+0x20>
      }
   }
   e_papier_send_command(DATA_START_TRANSMISSION_2);
 8002d38:	2013      	movs	r0, #19
 8002d3a:	f7ff feab 	bl	8002a94 <e_papier_send_command>
   for(uint16_t j = 0; j < Height; j++)
 8002d3e:	2300      	movs	r3, #0
 8002d40:	817b      	strh	r3, [r7, #10]
 8002d42:	e017      	b.n	8002d74 <e_papier_display+0x84>
   {
      for(uint16_t i = 0; i < Width; i++)
 8002d44:	2300      	movs	r3, #0
 8002d46:	813b      	strh	r3, [r7, #8]
 8002d48:	e00d      	b.n	8002d66 <e_papier_display+0x76>
      {
         e_papier_send_data(BufferEpapier[i + j * Width]);
 8002d4a:	893a      	ldrh	r2, [r7, #8]
 8002d4c:	897b      	ldrh	r3, [r7, #10]
 8002d4e:	88f9      	ldrh	r1, [r7, #6]
 8002d50:	fb01 f303 	mul.w	r3, r1, r3
 8002d54:	4413      	add	r3, r2
 8002d56:	4a0e      	ldr	r2, [pc, #56]	; (8002d90 <e_papier_display+0xa0>)
 8002d58:	5cd3      	ldrb	r3, [r2, r3]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7ff febe 	bl	8002adc <e_papier_send_data>
      for(uint16_t i = 0; i < Width; i++)
 8002d60:	893b      	ldrh	r3, [r7, #8]
 8002d62:	3301      	adds	r3, #1
 8002d64:	813b      	strh	r3, [r7, #8]
 8002d66:	893a      	ldrh	r2, [r7, #8]
 8002d68:	88fb      	ldrh	r3, [r7, #6]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d3ed      	bcc.n	8002d4a <e_papier_display+0x5a>
   for(uint16_t j = 0; j < Height; j++)
 8002d6e:	897b      	ldrh	r3, [r7, #10]
 8002d70:	3301      	adds	r3, #1
 8002d72:	817b      	strh	r3, [r7, #10]
 8002d74:	897a      	ldrh	r2, [r7, #10]
 8002d76:	88bb      	ldrh	r3, [r7, #4]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d3e3      	bcc.n	8002d44 <e_papier_display+0x54>
      }
   }
   taskEXIT_CRITICAL();
 8002d7c:	f010 fd7a 	bl	8013874 <vPortExitCritical>
   e_papier_turn_on_display();
 8002d80:	f7ff ffac 	bl	8002cdc <e_papier_turn_on_display>
   e_papier_wait_until_idle();
 8002d84:	f7ff fece 	bl	8002b24 <e_papier_wait_until_idle>
}
 8002d88:	bf00      	nop
 8002d8a:	3710      	adds	r7, #16
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	200002b4 	.word	0x200002b4

08002d94 <e_papier_clear>:
void e_papier_clear()
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
   memset(BufferEpapier, 0xff, EPD_HEIGHT * EPD_WIDTH / 8);
 8002d98:	f643 2298 	movw	r2, #15000	; 0x3a98
 8002d9c:	21ff      	movs	r1, #255	; 0xff
 8002d9e:	4802      	ldr	r0, [pc, #8]	; (8002da8 <e_papier_clear+0x14>)
 8002da0:	f011 f87e 	bl	8013ea0 <memset>
}
 8002da4:	bf00      	nop
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	200002b4 	.word	0x200002b4

08002dac <e_papier_init>:
void e_papier_init(SPI_HandleTypeDef *spi)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
   e_papier_spi = spi;
 8002db4:	4a2c      	ldr	r2, [pc, #176]	; (8002e68 <e_papier_init+0xbc>)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6013      	str	r3, [r2, #0]
   e_papier_reset();
 8002dba:	f7ff fe49 	bl	8002a50 <e_papier_reset>

   e_papier_send_command(POWER_SETTING); // POWER SETTING
 8002dbe:	2001      	movs	r0, #1
 8002dc0:	f7ff fe68 	bl	8002a94 <e_papier_send_command>
   e_papier_send_data(0x03);
 8002dc4:	2003      	movs	r0, #3
 8002dc6:	f7ff fe89 	bl	8002adc <e_papier_send_data>
   e_papier_send_data(0x00);
 8002dca:	2000      	movs	r0, #0
 8002dcc:	f7ff fe86 	bl	8002adc <e_papier_send_data>
   e_papier_send_data(0x2b);
 8002dd0:	202b      	movs	r0, #43	; 0x2b
 8002dd2:	f7ff fe83 	bl	8002adc <e_papier_send_data>
   e_papier_send_data(0x2b);
 8002dd6:	202b      	movs	r0, #43	; 0x2b
 8002dd8:	f7ff fe80 	bl	8002adc <e_papier_send_data>

   e_papier_send_command(BOOSTER_SOFT_START); // boost soft start
 8002ddc:	2006      	movs	r0, #6
 8002dde:	f7ff fe59 	bl	8002a94 <e_papier_send_command>
   e_papier_send_data(0x17);                  // A
 8002de2:	2017      	movs	r0, #23
 8002de4:	f7ff fe7a 	bl	8002adc <e_papier_send_data>
   e_papier_send_data(0x17);                  // B
 8002de8:	2017      	movs	r0, #23
 8002dea:	f7ff fe77 	bl	8002adc <e_papier_send_data>
   e_papier_send_data(0x17);                  // C
 8002dee:	2017      	movs	r0, #23
 8002df0:	f7ff fe74 	bl	8002adc <e_papier_send_data>

   e_papier_send_command(POWER_ON);
 8002df4:	2004      	movs	r0, #4
 8002df6:	f7ff fe4d 	bl	8002a94 <e_papier_send_command>
   e_papier_wait_until_idle();
 8002dfa:	f7ff fe93 	bl	8002b24 <e_papier_wait_until_idle>

   e_papier_send_command(PANEL_SETTING); // panel setting
 8002dfe:	2000      	movs	r0, #0
 8002e00:	f7ff fe48 	bl	8002a94 <e_papier_send_command>
   e_papier_send_data(0xbf);             // KW-BF   KWR-AF	BWROTP 0f	BWOTP 1f
 8002e04:	20bf      	movs	r0, #191	; 0xbf
 8002e06:	f7ff fe69 	bl	8002adc <e_papier_send_data>
   e_papier_send_data(0x0d);
 8002e0a:	200d      	movs	r0, #13
 8002e0c:	f7ff fe66 	bl	8002adc <e_papier_send_data>

   e_papier_send_command(PLL_CONTROL); // PLL setting
 8002e10:	2030      	movs	r0, #48	; 0x30
 8002e12:	f7ff fe3f 	bl	8002a94 <e_papier_send_command>
   e_papier_send_data(0x3C);           // 3A 100HZ   29 150Hz 39 200HZ	31 171HZ
 8002e16:	203c      	movs	r0, #60	; 0x3c
 8002e18:	f7ff fe60 	bl	8002adc <e_papier_send_data>

   e_papier_send_command(0x61); // resolution setting
 8002e1c:	2061      	movs	r0, #97	; 0x61
 8002e1e:	f7ff fe39 	bl	8002a94 <e_papier_send_command>
   e_papier_send_data(0x01);
 8002e22:	2001      	movs	r0, #1
 8002e24:	f7ff fe5a 	bl	8002adc <e_papier_send_data>
   e_papier_send_data(0x90); // 128
 8002e28:	2090      	movs	r0, #144	; 0x90
 8002e2a:	f7ff fe57 	bl	8002adc <e_papier_send_data>
   e_papier_send_data(0x01); //
 8002e2e:	2001      	movs	r0, #1
 8002e30:	f7ff fe54 	bl	8002adc <e_papier_send_data>
   e_papier_send_data(0x2c);
 8002e34:	202c      	movs	r0, #44	; 0x2c
 8002e36:	f7ff fe51 	bl	8002adc <e_papier_send_data>

   e_papier_send_command(0x82); // vcom_DC setting
 8002e3a:	2082      	movs	r0, #130	; 0x82
 8002e3c:	f7ff fe2a 	bl	8002a94 <e_papier_send_command>
   e_papier_send_data(0x28);
 8002e40:	2028      	movs	r0, #40	; 0x28
 8002e42:	f7ff fe4b 	bl	8002adc <e_papier_send_data>

   e_papier_send_command(0X50); // VCOM AND DATA INTERVAL SETTING
 8002e46:	2050      	movs	r0, #80	; 0x50
 8002e48:	f7ff fe24 	bl	8002a94 <e_papier_send_command>
   e_papier_send_data(0x97);    // 97white border 77black border		VBDF 17|D7 VBDW 97 VBDB 57		VBDF F7 VBDW 77 VBDB 37  VBDR B7
 8002e4c:	2097      	movs	r0, #151	; 0x97
 8002e4e:	f7ff fe45 	bl	8002adc <e_papier_send_data>

   e_papier_set_lut();
 8002e52:	f7ff fed7 	bl	8002c04 <e_papier_set_lut>
   e_papier_clear();
 8002e56:	f7ff ff9d 	bl	8002d94 <e_papier_clear>
   e_papier_display();
 8002e5a:	f7ff ff49 	bl	8002cf0 <e_papier_display>
}
 8002e5e:	bf00      	nop
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	200002b0 	.word	0x200002b0

08002e6c <flash_CsLow>:

#include "flash_spi.h"

#include "cmsis_os.h"
void flash_CsLow(flash_t *flash)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
   HAL_GPIO_WritePin(flash->flash_CsPort, flash->flash_CsPin, 0);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68d8      	ldr	r0, [r3, #12]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	891b      	ldrh	r3, [r3, #8]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	4619      	mov	r1, r3
 8002e80:	f006 fed0 	bl	8009c24 <HAL_GPIO_WritePin>
}
 8002e84:	bf00      	nop
 8002e86:	3708      	adds	r7, #8
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <flash_CsHigh>:
void flash_CsHigh(flash_t *flash)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
   HAL_GPIO_WritePin(flash->flash_CsPort, flash->flash_CsPin, 1);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68d8      	ldr	r0, [r3, #12]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	891b      	ldrh	r3, [r3, #8]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	f006 fec0 	bl	8009c24 <HAL_GPIO_WritePin>
}
 8002ea4:	bf00      	nop
 8002ea6:	3708      	adds	r7, #8
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <flash_WriteCommand>:
void flash_WriteCommand(flash_t *flash, uint8_t *command, uint8_t size)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	71fb      	strb	r3, [r7, #7]
   HAL_SPI_Transmit(flash->flash_spi, command, size, 1000);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6818      	ldr	r0, [r3, #0]
 8002ebe:	79fb      	ldrb	r3, [r7, #7]
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ec6:	68b9      	ldr	r1, [r7, #8]
 8002ec8:	f009 f9ab 	bl	800c222 <HAL_SPI_Transmit>
}
 8002ecc:	bf00      	nop
 8002ece:	3710      	adds	r7, #16
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <flash_ReadCommand>:
void flash_ReadCommand(flash_t *flash, uint8_t *command, uint8_t size)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	71fb      	strb	r3, [r7, #7]
   HAL_SPI_Receive(flash->flash_spi, command, size, 1000);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6818      	ldr	r0, [r3, #0]
 8002ee6:	79fb      	ldrb	r3, [r7, #7]
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002eee:	68b9      	ldr	r1, [r7, #8]
 8002ef0:	f009 fb05 	bl	800c4fe <HAL_SPI_Receive>
}
 8002ef4:	bf00      	nop
 8002ef6:	3710      	adds	r7, #16
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <flash_WriteData>:
void flash_WriteData(flash_t *flash, uint8_t *data, uint32_t size)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	607a      	str	r2, [r7, #4]
   HAL_SPI_Transmit(flash->flash_spi, data, size, 1000);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6818      	ldr	r0, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	b29a      	uxth	r2, r3
 8002f10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f14:	68b9      	ldr	r1, [r7, #8]
 8002f16:	f009 f984 	bl	800c222 <HAL_SPI_Transmit>
}
 8002f1a:	bf00      	nop
 8002f1c:	3710      	adds	r7, #16
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <flash_ReadData>:
void flash_ReadData(flash_t *flash, uint8_t *data, uint32_t size)
{
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b084      	sub	sp, #16
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	60f8      	str	r0, [r7, #12]
 8002f2a:	60b9      	str	r1, [r7, #8]
 8002f2c:	607a      	str	r2, [r7, #4]
   HAL_SPI_Receive(flash->flash_spi, data, size, 1000);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6818      	ldr	r0, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f3a:	68b9      	ldr	r1, [r7, #8]
 8002f3c:	f009 fadf 	bl	800c4fe <HAL_SPI_Receive>
}
 8002f40:	bf00      	nop
 8002f42:	3710      	adds	r7, #16
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <flash_ReadSR1>:
uint8_t flash_ReadSR1(flash_t *flash)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
   flash_CsLow(flash);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f7ff ff8b 	bl	8002e6c <flash_CsLow>
   uint8_t command = READ_SR1;
 8002f56:	2305      	movs	r3, #5
 8002f58:	73fb      	strb	r3, [r7, #15]
   flash_WriteCommand(flash, &command, 1);
 8002f5a:	f107 030f 	add.w	r3, r7, #15
 8002f5e:	2201      	movs	r2, #1
 8002f60:	4619      	mov	r1, r3
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f7ff ffa2 	bl	8002eac <flash_WriteCommand>
   flash_ReadCommand(flash, &command, 1);
 8002f68:	f107 030f 	add.w	r3, r7, #15
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	4619      	mov	r1, r3
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f7ff ffaf 	bl	8002ed4 <flash_ReadCommand>
   flash_CsHigh(flash);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f7ff ff88 	bl	8002e8c <flash_CsHigh>
   return command;
 8002f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <flash_Reset>:
   flash_ReadCommand(flash, &command, 1);
   flash_CsHigh(flash);
   return command;
}
void flash_Reset(flash_t *flash)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b084      	sub	sp, #16
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
   uint8_t command = ENABLE_RESET;
 8002f8e:	2366      	movs	r3, #102	; 0x66
 8002f90:	73fb      	strb	r3, [r7, #15]
   flash_CsLow(flash);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f7ff ff6a 	bl	8002e6c <flash_CsLow>
   flash_WriteCommand(flash, &command, 1);
 8002f98:	f107 030f 	add.w	r3, r7, #15
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f7ff ff83 	bl	8002eac <flash_WriteCommand>
   flash_CsHigh(flash);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f7ff ff70 	bl	8002e8c <flash_CsHigh>
   command = RESET;
 8002fac:	2399      	movs	r3, #153	; 0x99
 8002fae:	73fb      	strb	r3, [r7, #15]
   flash_CsLow(flash);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f7ff ff5b 	bl	8002e6c <flash_CsLow>
   flash_WriteCommand(flash, &command, 1);
 8002fb6:	f107 030f 	add.w	r3, r7, #15
 8002fba:	2201      	movs	r2, #1
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f7ff ff74 	bl	8002eac <flash_WriteCommand>
   flash_CsHigh(flash);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f7ff ff61 	bl	8002e8c <flash_CsHigh>
}
 8002fca:	bf00      	nop
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <flash_SetWELBit>:
void flash_SetWELBit(flash_t *flash)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b084      	sub	sp, #16
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
   flash_CsLow(flash);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f7ff ff46 	bl	8002e6c <flash_CsLow>
   uint8_t command = WRITE_ENABLE;
 8002fe0:	2306      	movs	r3, #6
 8002fe2:	73fb      	strb	r3, [r7, #15]
   flash_WriteCommand(flash, &command, 1);
 8002fe4:	f107 030f 	add.w	r3, r7, #15
 8002fe8:	2201      	movs	r2, #1
 8002fea:	4619      	mov	r1, r3
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f7ff ff5d 	bl	8002eac <flash_WriteCommand>
   flash_CsHigh(flash);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f7ff ff4a 	bl	8002e8c <flash_CsHigh>
}
 8002ff8:	bf00      	nop
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <flash_ReadID>:
void flash_ReadID(flash_t *flash)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
   uint8_t id[3], command = JEDEC_ID;
 8003008:	239f      	movs	r3, #159	; 0x9f
 800300a:	72fb      	strb	r3, [r7, #11]
   flash_CsLow(flash);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f7ff ff2d 	bl	8002e6c <flash_CsLow>
   flash_WriteCommand(flash, &command, 1);
 8003012:	f107 030b 	add.w	r3, r7, #11
 8003016:	2201      	movs	r2, #1
 8003018:	4619      	mov	r1, r3
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f7ff ff46 	bl	8002eac <flash_WriteCommand>
   flash_ReadCommand(flash, id, 3);
 8003020:	f107 030c 	add.w	r3, r7, #12
 8003024:	2203      	movs	r2, #3
 8003026:	4619      	mov	r1, r3
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f7ff ff53 	bl	8002ed4 <flash_ReadCommand>
   flash_CsHigh(flash);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f7ff ff2c 	bl	8002e8c <flash_CsHigh>
   flash->id = ((id[0] << 16) | (id[1] << 8) | id[2]);
 8003034:	7b3b      	ldrb	r3, [r7, #12]
 8003036:	041a      	lsls	r2, r3, #16
 8003038:	7b7b      	ldrb	r3, [r7, #13]
 800303a:	021b      	lsls	r3, r3, #8
 800303c:	4313      	orrs	r3, r2
 800303e:	7bba      	ldrb	r2, [r7, #14]
 8003040:	4313      	orrs	r3, r2
 8003042:	461a      	mov	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	605a      	str	r2, [r3, #4]
}
 8003048:	bf00      	nop
 800304a:	3710      	adds	r7, #16
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <flash_WaitForEndProcess>:
void flash_WaitForEndProcess(flash_t *flash)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
   while((flash_ReadSR1(flash) & BUSY_FLAG))
 8003058:	e002      	b.n	8003060 <flash_WaitForEndProcess+0x10>
   {
      osDelay(5);
 800305a:	2005      	movs	r0, #5
 800305c:	f00c ff9a 	bl	800ff94 <osDelay>
   while((flash_ReadSR1(flash) & BUSY_FLAG))
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f7ff ff71 	bl	8002f48 <flash_ReadSR1>
 8003066:	4603      	mov	r3, r0
 8003068:	f003 0301 	and.w	r3, r3, #1
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1f4      	bne.n	800305a <flash_WaitForEndProcess+0xa>
   }
}
 8003070:	bf00      	nop
 8003072:	bf00      	nop
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <flash_SetWELBit_and_WaitForEndProcess>:
void flash_SetWELBit_and_WaitForEndProcess(flash_t *flash)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b082      	sub	sp, #8
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
   while(!(flash_ReadSR1(flash) & WEL_BIT))
 8003082:	e005      	b.n	8003090 <flash_SetWELBit_and_WaitForEndProcess+0x16>
   {
      flash_SetWELBit(flash);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f7ff ffa4 	bl	8002fd2 <flash_SetWELBit>
      osDelay(5);
 800308a:	2005      	movs	r0, #5
 800308c:	f00c ff82 	bl	800ff94 <osDelay>
   while(!(flash_ReadSR1(flash) & WEL_BIT))
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f7ff ff59 	bl	8002f48 <flash_ReadSR1>
 8003096:	4603      	mov	r3, r0
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d0f1      	beq.n	8003084 <flash_SetWELBit_and_WaitForEndProcess+0xa>
   }
}
 80030a0:	bf00      	nop
 80030a2:	bf00      	nop
 80030a4:	3708      	adds	r7, #8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <flash_ReadDataBytes>:
void flash_ReadDataBytes(flash_t *flash, uint32_t addr, uint8_t *data, uint16_t size)
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b086      	sub	sp, #24
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	60f8      	str	r0, [r7, #12]
 80030b2:	60b9      	str	r1, [r7, #8]
 80030b4:	607a      	str	r2, [r7, #4]
 80030b6:	807b      	strh	r3, [r7, #2]
   uint8_t dataToSend[4];
   flash_WaitForEndProcess(flash);
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f7ff ffc9 	bl	8003050 <flash_WaitForEndProcess>
   flash_SetWELBit_and_WaitForEndProcess(flash);
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f7ff ffdb 	bl	800307a <flash_SetWELBit_and_WaitForEndProcess>
   dataToSend[0] = READ_DATA;
 80030c4:	2303      	movs	r3, #3
 80030c6:	753b      	strb	r3, [r7, #20]
   dataToSend[1] = (addr >> 16) & 0xff;
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	0c1b      	lsrs	r3, r3, #16
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	757b      	strb	r3, [r7, #21]
   dataToSend[2] = (addr >> 8) & 0xff;
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	0a1b      	lsrs	r3, r3, #8
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	75bb      	strb	r3, [r7, #22]
   dataToSend[3] = addr & 0xff;
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	75fb      	strb	r3, [r7, #23]
   flash_CsLow(flash);
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f7ff fec4 	bl	8002e6c <flash_CsLow>
   flash_WriteCommand(flash, dataToSend, 4);
 80030e4:	f107 0314 	add.w	r3, r7, #20
 80030e8:	2204      	movs	r2, #4
 80030ea:	4619      	mov	r1, r3
 80030ec:	68f8      	ldr	r0, [r7, #12]
 80030ee:	f7ff fedd 	bl	8002eac <flash_WriteCommand>
   flash_ReadData(flash, data, size);
 80030f2:	887b      	ldrh	r3, [r7, #2]
 80030f4:	461a      	mov	r2, r3
 80030f6:	6879      	ldr	r1, [r7, #4]
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	f7ff ff12 	bl	8002f22 <flash_ReadData>
   flash_CsHigh(flash);
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	f7ff fec4 	bl	8002e8c <flash_CsHigh>
   flash_WaitForEndProcess(flash);
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f7ff ffa3 	bl	8003050 <flash_WaitForEndProcess>
   flash_WaitForEndProcess(flash);
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f7ff ffa0 	bl	8003050 <flash_WaitForEndProcess>
}
 8003110:	bf00      	nop
 8003112:	3718      	adds	r7, #24
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <flash_WritePage>:
void flash_WritePage(flash_t *flash, uint32_t page_addr, uint8_t *data, uint16_t size)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b086      	sub	sp, #24
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
 8003124:	807b      	strh	r3, [r7, #2]
   uint8_t dataToSend[4];
   flash_WaitForEndProcess(flash);
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f7ff ff92 	bl	8003050 <flash_WaitForEndProcess>
   flash_SetWELBit_and_WaitForEndProcess(flash);
 800312c:	68f8      	ldr	r0, [r7, #12]
 800312e:	f7ff ffa4 	bl	800307a <flash_SetWELBit_and_WaitForEndProcess>
   dataToSend[0] = PAGE_PROGRAM;
 8003132:	2302      	movs	r3, #2
 8003134:	753b      	strb	r3, [r7, #20]
   dataToSend[1] = (page_addr >> 16) & 0xff;
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	0c1b      	lsrs	r3, r3, #16
 800313a:	b2db      	uxtb	r3, r3
 800313c:	757b      	strb	r3, [r7, #21]
   dataToSend[2] = (page_addr >> 8) & 0xff;
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	0a1b      	lsrs	r3, r3, #8
 8003142:	b2db      	uxtb	r3, r3
 8003144:	75bb      	strb	r3, [r7, #22]
   dataToSend[3] = page_addr & 0xff;
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	b2db      	uxtb	r3, r3
 800314a:	75fb      	strb	r3, [r7, #23]
   flash_CsLow(flash);
 800314c:	68f8      	ldr	r0, [r7, #12]
 800314e:	f7ff fe8d 	bl	8002e6c <flash_CsLow>
   flash_WriteCommand(flash, dataToSend, 4);
 8003152:	f107 0314 	add.w	r3, r7, #20
 8003156:	2204      	movs	r2, #4
 8003158:	4619      	mov	r1, r3
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f7ff fea6 	bl	8002eac <flash_WriteCommand>
   flash_WriteData(flash, data, size);
 8003160:	887b      	ldrh	r3, [r7, #2]
 8003162:	461a      	mov	r2, r3
 8003164:	6879      	ldr	r1, [r7, #4]
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f7ff fec8 	bl	8002efc <flash_WriteData>
   flash_CsHigh(flash);
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	f7ff fe8d 	bl	8002e8c <flash_CsHigh>
   flash_WaitForEndProcess(flash);
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	f7ff ff6c 	bl	8003050 <flash_WaitForEndProcess>
}
 8003178:	bf00      	nop
 800317a:	3718      	adds	r7, #24
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <flash_Init>:
   flash_WriteCommand(flash, &Temp, 1);
   flash_CsHigh(flash);
   flash_WaitForEndProcess(flash);
}
void flash_Init(flash_t *flash, SPI_HandleTypeDef *spi, GPIO_TypeDef *cs_port, uint16_t cs_pin)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
 800318c:	807b      	strh	r3, [r7, #2]
   flash->flash_spi    = spi;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	68ba      	ldr	r2, [r7, #8]
 8003192:	601a      	str	r2, [r3, #0]
   flash->flash_CsPort = cs_port;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	60da      	str	r2, [r3, #12]
   flash->flash_CsPin  = cs_pin;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	887a      	ldrh	r2, [r7, #2]
 800319e:	811a      	strh	r2, [r3, #8]
   flash_Reset(flash);
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f7ff fef0 	bl	8002f86 <flash_Reset>
   flash_ReadID(flash);
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	f7ff ff2a 	bl	8003000 <flash_ReadID>
}
 80031ac:	bf00      	nop
 80031ae:	3710      	adds	r7, #16
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <fram_CsLow>:

#include "fram.h"
#include "gpio.h"
#include "spi.h"
void fram_CsLow(fram_t *fram)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
   HAL_GPIO_WritePin(fram->cs_port, fram->cs_pin, 0);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6898      	ldr	r0, [r3, #8]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	8a5b      	ldrh	r3, [r3, #18]
 80031c4:	2200      	movs	r2, #0
 80031c6:	4619      	mov	r1, r3
 80031c8:	f006 fd2c 	bl	8009c24 <HAL_GPIO_WritePin>
}
 80031cc:	bf00      	nop
 80031ce:	3708      	adds	r7, #8
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <fram_CsHigh>:
void fram_CsHigh(fram_t *fram)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
   HAL_GPIO_WritePin(fram->cs_port, fram->cs_pin, 1);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6898      	ldr	r0, [r3, #8]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	8a5b      	ldrh	r3, [r3, #18]
 80031e4:	2201      	movs	r2, #1
 80031e6:	4619      	mov	r1, r3
 80031e8:	f006 fd1c 	bl	8009c24 <HAL_GPIO_WritePin>
}
 80031ec:	bf00      	nop
 80031ee:	3708      	adds	r7, #8
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <fram_SetWELBit>:
void fram_SetWELBit(fram_t *fram)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
   uint8_t com = WREN;
 80031fc:	2306      	movs	r3, #6
 80031fe:	73fb      	strb	r3, [r7, #15]
   fram_CsLow(fram);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f7ff ffd7 	bl	80031b4 <fram_CsLow>
   HAL_SPI_Transmit(fram->fram_spi, &com, 1, 1000);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6818      	ldr	r0, [r3, #0]
 800320a:	f107 010f 	add.w	r1, r7, #15
 800320e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003212:	2201      	movs	r2, #1
 8003214:	f009 f805 	bl	800c222 <HAL_SPI_Transmit>
   fram_CsHigh(fram);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f7ff ffdb 	bl	80031d4 <fram_CsHigh>
}
 800321e:	bf00      	nop
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <fram_SetProtectedBlocs>:
void fram_SetProtectedBlocs(fram_t *fram, uint8_t blocs)
{
 8003226:	b580      	push	{r7, lr}
 8003228:	b084      	sub	sp, #16
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
 800322e:	460b      	mov	r3, r1
 8003230:	70fb      	strb	r3, [r7, #3]
   if(blocs > 3)
 8003232:	78fb      	ldrb	r3, [r7, #3]
 8003234:	2b03      	cmp	r3, #3
 8003236:	d901      	bls.n	800323c <fram_SetProtectedBlocs+0x16>
   {
      blocs = 3;
 8003238:	2303      	movs	r3, #3
 800323a:	70fb      	strb	r3, [r7, #3]
   }
   uint8_t data[2];
   data[0] = WRSR;
 800323c:	2301      	movs	r3, #1
 800323e:	733b      	strb	r3, [r7, #12]
   data[1] = (blocs << 2);
 8003240:	78fb      	ldrb	r3, [r7, #3]
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	b2db      	uxtb	r3, r3
 8003246:	737b      	strb	r3, [r7, #13]
   fram_SetWELBit(fram);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f7ff ffd3 	bl	80031f4 <fram_SetWELBit>
   fram_CsLow(fram);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f7ff ffb0 	bl	80031b4 <fram_CsLow>
   HAL_SPI_Transmit(fram->fram_spi, data, 2, 1000);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6818      	ldr	r0, [r3, #0]
 8003258:	f107 010c 	add.w	r1, r7, #12
 800325c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003260:	2202      	movs	r2, #2
 8003262:	f008 ffde 	bl	800c222 <HAL_SPI_Transmit>
   fram_CsHigh(fram);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f7ff ffb4 	bl	80031d4 <fram_CsHigh>
}
 800326c:	bf00      	nop
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <fram_Read32>:
uint32_t fram_Read32(fram_t *fram, uint32_t Address)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
   uint8_t Temp[4];
   fram_Read(fram, Address, Temp, 4);
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	b299      	uxth	r1, r3
 8003282:	f107 020c 	add.w	r2, r7, #12
 8003286:	2304      	movs	r3, #4
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f000 f8aa 	bl	80033e2 <fram_Read>
   return ((Temp[0] << 24) | (Temp[1] << 16) | (Temp[2] << 8) | Temp[3]);
 800328e:	7b3b      	ldrb	r3, [r7, #12]
 8003290:	061a      	lsls	r2, r3, #24
 8003292:	7b7b      	ldrb	r3, [r7, #13]
 8003294:	041b      	lsls	r3, r3, #16
 8003296:	431a      	orrs	r2, r3
 8003298:	7bbb      	ldrb	r3, [r7, #14]
 800329a:	021b      	lsls	r3, r3, #8
 800329c:	4313      	orrs	r3, r2
 800329e:	7bfa      	ldrb	r2, [r7, #15]
 80032a0:	4313      	orrs	r3, r2
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <fram_Write32>:
void fram_Write32(fram_t *fram, uint32_t Address, uint32_t Data)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b086      	sub	sp, #24
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	60f8      	str	r0, [r7, #12]
 80032b2:	60b9      	str	r1, [r7, #8]
 80032b4:	607a      	str	r2, [r7, #4]
   uint8_t Temp[4];
   Temp[0] = ((Data >> 24) & 0xff);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	0e1b      	lsrs	r3, r3, #24
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	753b      	strb	r3, [r7, #20]
   Temp[1] = ((Data >> 16) & 0xff);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	0c1b      	lsrs	r3, r3, #16
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	757b      	strb	r3, [r7, #21]
   Temp[2] = ((Data >> 8) & 0xff);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	0a1b      	lsrs	r3, r3, #8
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	75bb      	strb	r3, [r7, #22]
   Temp[3] = ((Data >> 0) & 0xff);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	75fb      	strb	r3, [r7, #23]
   fram_Write(fram, Address, Temp, 4);
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	b299      	uxth	r1, r3
 80032d8:	f107 0214 	add.w	r2, r7, #20
 80032dc:	2304      	movs	r3, #4
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f000 f84d 	bl	800337e <fram_Write>
}
 80032e4:	bf00      	nop
 80032e6:	3718      	adds	r7, #24
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <fram_Increment32>:
FramStatus_TypeDef fram_Increment32(fram_t *fram, uint32_t Address)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
   uint32_t Temp = 0, Confirm = 0;
 80032f6:	2300      	movs	r3, #0
 80032f8:	60fb      	str	r3, [r7, #12]
 80032fa:	2300      	movs	r3, #0
 80032fc:	60bb      	str	r3, [r7, #8]
   Temp = fram_Read32(fram, Address);
 80032fe:	6839      	ldr	r1, [r7, #0]
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f7ff ffb7 	bl	8003274 <fram_Read32>
 8003306:	60f8      	str	r0, [r7, #12]
   Temp++;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	3301      	adds	r3, #1
 800330c:	60fb      	str	r3, [r7, #12]
   fram_Write32(fram, Address, Temp);
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	6839      	ldr	r1, [r7, #0]
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f7ff ffc9 	bl	80032aa <fram_Write32>
   Confirm = fram_Read32(fram, Address);
 8003318:	6839      	ldr	r1, [r7, #0]
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f7ff ffaa 	bl	8003274 <fram_Read32>
 8003320:	60b8      	str	r0, [r7, #8]
   if(Temp == Confirm)
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	429a      	cmp	r2, r3
 8003328:	d101      	bne.n	800332e <fram_Increment32+0x42>
   {
      return FRAM_OK;
 800332a:	2301      	movs	r3, #1
 800332c:	e000      	b.n	8003330 <fram_Increment32+0x44>
   }
   else
   {
      return FRAM_ERROR;
 800332e:	2300      	movs	r3, #0
   }
}
 8003330:	4618      	mov	r0, r3
 8003332:	3710      	adds	r7, #16
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <fram_ReadSreg>:
uint8_t fram_ReadSreg(fram_t *fram)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
   fram_CsLow(fram);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f7ff ff37 	bl	80031b4 <fram_CsLow>
   uint8_t _sreg;
   uint8_t com = RDSR;
 8003346:	2305      	movs	r3, #5
 8003348:	73bb      	strb	r3, [r7, #14]
   HAL_SPI_Transmit(fram->fram_spi, &com, 1, 1000);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6818      	ldr	r0, [r3, #0]
 800334e:	f107 010e 	add.w	r1, r7, #14
 8003352:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003356:	2201      	movs	r2, #1
 8003358:	f008 ff63 	bl	800c222 <HAL_SPI_Transmit>
   HAL_SPI_Receive(fram->fram_spi, &_sreg, 1, 1000);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6818      	ldr	r0, [r3, #0]
 8003360:	f107 010f 	add.w	r1, r7, #15
 8003364:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003368:	2201      	movs	r2, #1
 800336a:	f009 f8c8 	bl	800c4fe <HAL_SPI_Receive>
   fram_CsHigh(fram);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f7ff ff30 	bl	80031d4 <fram_CsHigh>
   return _sreg;
 8003374:	7bfb      	ldrb	r3, [r7, #15]
}
 8003376:	4618      	mov	r0, r3
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <fram_Write>:
void fram_Write(fram_t *fram, uint16_t addr, uint8_t *buff, uint16_t length)
{
 800337e:	b580      	push	{r7, lr}
 8003380:	b086      	sub	sp, #24
 8003382:	af00      	add	r7, sp, #0
 8003384:	60f8      	str	r0, [r7, #12]
 8003386:	607a      	str	r2, [r7, #4]
 8003388:	461a      	mov	r2, r3
 800338a:	460b      	mov	r3, r1
 800338c:	817b      	strh	r3, [r7, #10]
 800338e:	4613      	mov	r3, r2
 8003390:	813b      	strh	r3, [r7, #8]
   fram_SetWELBit(fram);
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f7ff ff2e 	bl	80031f4 <fram_SetWELBit>
   uint8_t data[3];
   data[0] = WRITE;
 8003398:	2302      	movs	r3, #2
 800339a:	753b      	strb	r3, [r7, #20]
   data[1] = (addr & 0xf0) >> 8;
 800339c:	2300      	movs	r3, #0
 800339e:	757b      	strb	r3, [r7, #21]
   data[2] = addr & 0x0f;
 80033a0:	897b      	ldrh	r3, [r7, #10]
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	f003 030f 	and.w	r3, r3, #15
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	75bb      	strb	r3, [r7, #22]
   fram_CsLow(fram);
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f7ff ff01 	bl	80031b4 <fram_CsLow>
   HAL_SPI_Transmit(fram->fram_spi, data, 3, 1000);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6818      	ldr	r0, [r3, #0]
 80033b6:	f107 0114 	add.w	r1, r7, #20
 80033ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033be:	2203      	movs	r2, #3
 80033c0:	f008 ff2f 	bl	800c222 <HAL_SPI_Transmit>
   HAL_SPI_Transmit(fram->fram_spi, buff, length, 1000);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6818      	ldr	r0, [r3, #0]
 80033c8:	893a      	ldrh	r2, [r7, #8]
 80033ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033ce:	6879      	ldr	r1, [r7, #4]
 80033d0:	f008 ff27 	bl	800c222 <HAL_SPI_Transmit>
   fram_CsHigh(fram);
 80033d4:	68f8      	ldr	r0, [r7, #12]
 80033d6:	f7ff fefd 	bl	80031d4 <fram_CsHigh>
}
 80033da:	bf00      	nop
 80033dc:	3718      	adds	r7, #24
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <fram_Read>:
void fram_Read(fram_t *fram, uint16_t addr, uint8_t *buff, uint16_t length)
{
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b086      	sub	sp, #24
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	60f8      	str	r0, [r7, #12]
 80033ea:	607a      	str	r2, [r7, #4]
 80033ec:	461a      	mov	r2, r3
 80033ee:	460b      	mov	r3, r1
 80033f0:	817b      	strh	r3, [r7, #10]
 80033f2:	4613      	mov	r3, r2
 80033f4:	813b      	strh	r3, [r7, #8]
   fram_SetWELBit(fram);
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f7ff fefc 	bl	80031f4 <fram_SetWELBit>
   uint8_t data[3];
   data[0] = READ;
 80033fc:	2303      	movs	r3, #3
 80033fe:	753b      	strb	r3, [r7, #20]
   data[1] = (addr & 0xf0) >> 8;
 8003400:	2300      	movs	r3, #0
 8003402:	757b      	strb	r3, [r7, #21]
   data[2] = addr & 0x0f;
 8003404:	897b      	ldrh	r3, [r7, #10]
 8003406:	b2db      	uxtb	r3, r3
 8003408:	f003 030f 	and.w	r3, r3, #15
 800340c:	b2db      	uxtb	r3, r3
 800340e:	75bb      	strb	r3, [r7, #22]
   fram_CsLow(fram);
 8003410:	68f8      	ldr	r0, [r7, #12]
 8003412:	f7ff fecf 	bl	80031b4 <fram_CsLow>
   HAL_SPI_Transmit(fram->fram_spi, data, 3, 1000);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6818      	ldr	r0, [r3, #0]
 800341a:	f107 0114 	add.w	r1, r7, #20
 800341e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003422:	2203      	movs	r2, #3
 8003424:	f008 fefd 	bl	800c222 <HAL_SPI_Transmit>
   HAL_SPI_Receive(fram->fram_spi, buff, length, 1000);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6818      	ldr	r0, [r3, #0]
 800342c:	893a      	ldrh	r2, [r7, #8]
 800342e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003432:	6879      	ldr	r1, [r7, #4]
 8003434:	f009 f863 	bl	800c4fe <HAL_SPI_Receive>
   fram_CsHigh(fram);
 8003438:	68f8      	ldr	r0, [r7, #12]
 800343a:	f7ff fecb 	bl	80031d4 <fram_CsHigh>
}
 800343e:	bf00      	nop
 8003440:	3718      	adds	r7, #24
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <fram_ReadID>:
uint32_t fram_ReadID(fram_t *fram)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b084      	sub	sp, #16
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
   uint8_t com, id[4];
   com = RDID;
 800344e:	239f      	movs	r3, #159	; 0x9f
 8003450:	73fb      	strb	r3, [r7, #15]
   fram_CsLow(fram);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f7ff feae 	bl	80031b4 <fram_CsLow>
   HAL_SPI_Transmit(fram->fram_spi, &com, 1, 1000);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6818      	ldr	r0, [r3, #0]
 800345c:	f107 010f 	add.w	r1, r7, #15
 8003460:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003464:	2201      	movs	r2, #1
 8003466:	f008 fedc 	bl	800c222 <HAL_SPI_Transmit>
   HAL_SPI_Receive(fram->fram_spi, id, 4, 1000);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6818      	ldr	r0, [r3, #0]
 800346e:	f107 0108 	add.w	r1, r7, #8
 8003472:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003476:	2204      	movs	r2, #4
 8003478:	f009 f841 	bl	800c4fe <HAL_SPI_Receive>
   fram_CsHigh(fram);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f7ff fea9 	bl	80031d4 <fram_CsHigh>
   return ((id[0] << 24) | (id[1] << 16) | (id[2] << 8) | id[3]);
 8003482:	7a3b      	ldrb	r3, [r7, #8]
 8003484:	061a      	lsls	r2, r3, #24
 8003486:	7a7b      	ldrb	r3, [r7, #9]
 8003488:	041b      	lsls	r3, r3, #16
 800348a:	431a      	orrs	r2, r3
 800348c:	7abb      	ldrb	r3, [r7, #10]
 800348e:	021b      	lsls	r3, r3, #8
 8003490:	4313      	orrs	r3, r2
 8003492:	7afa      	ldrb	r2, [r7, #11]
 8003494:	4313      	orrs	r3, r2
}
 8003496:	4618      	mov	r0, r3
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <fram_Init>:
void fram_Init(fram_t *fram, SPI_HandleTypeDef *spi, GPIO_TypeDef *_hold_port, GPIO_TypeDef *_cs_port, GPIO_TypeDef *_wp_port, uint16_t _hold_pin,
               uint16_t _cs_pin, uint16_t _wp_pin)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b084      	sub	sp, #16
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	60f8      	str	r0, [r7, #12]
 80034a6:	60b9      	str	r1, [r7, #8]
 80034a8:	607a      	str	r2, [r7, #4]
 80034aa:	603b      	str	r3, [r7, #0]
   fram->fram_spi  = spi;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	601a      	str	r2, [r3, #0]
   fram->hold_port = _hold_port;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	605a      	str	r2, [r3, #4]
   fram->hold_pin  = _hold_pin;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	8bba      	ldrh	r2, [r7, #28]
 80034bc:	821a      	strh	r2, [r3, #16]
   fram->cs_port   = _cs_port;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	609a      	str	r2, [r3, #8]
   fram->cs_pin    = _cs_pin;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8c3a      	ldrh	r2, [r7, #32]
 80034c8:	825a      	strh	r2, [r3, #18]
   fram->wp_port   = _wp_port;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	60da      	str	r2, [r3, #12]
   fram->wp_pin    = _wp_pin;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80034d4:	829a      	strh	r2, [r3, #20]
   HAL_GPIO_WritePin(fram->hold_port, fram->hold_pin, 1);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6858      	ldr	r0, [r3, #4]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	8a1b      	ldrh	r3, [r3, #16]
 80034de:	2201      	movs	r2, #1
 80034e0:	4619      	mov	r1, r3
 80034e2:	f006 fb9f 	bl	8009c24 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(fram->wp_port, fram->wp_pin, 1);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	68d8      	ldr	r0, [r3, #12]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	8a9b      	ldrh	r3, [r3, #20]
 80034ee:	2201      	movs	r2, #1
 80034f0:	4619      	mov	r1, r3
 80034f2:	f006 fb97 	bl	8009c24 <HAL_GPIO_WritePin>
   fram_SetProtectedBlocs(fram, 0);
 80034f6:	2100      	movs	r1, #0
 80034f8:	68f8      	ldr	r0, [r7, #12]
 80034fa:	f7ff fe94 	bl	8003226 <fram_SetProtectedBlocs>
   fram->sreg   = fram_ReadSreg(fram);
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f7ff ff1a 	bl	8003338 <fram_ReadSreg>
 8003504:	4603      	mov	r3, r0
 8003506:	461a      	mov	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	759a      	strb	r2, [r3, #22]
   fram->framID = fram_ReadID(fram);
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f7ff ff9a 	bl	8003446 <fram_ReadID>
 8003512:	4602      	mov	r2, r0
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	619a      	str	r2, [r3, #24]
}
 8003518:	bf00      	nop
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <MX_FREERTOS_Init>:
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0
   /* USER CODE BEGIN Init */

   /* USER CODE END Init */
   /* Create the mutex(es) */
   /* creation of ScreensDcMutex */
   ScreensDcMutexHandle = osMutexNew(&ScreensDcMutex_attributes);
 8003524:	4856      	ldr	r0, [pc, #344]	; (8003680 <MX_FREERTOS_Init+0x160>)
 8003526:	f00c fecb 	bl	80102c0 <osMutexNew>
 800352a:	4603      	mov	r3, r0
 800352c:	4a55      	ldr	r2, [pc, #340]	; (8003684 <MX_FREERTOS_Init+0x164>)
 800352e:	6013      	str	r3, [r2, #0]

   /* creation of SSD1306Mutex */
   SSD1306MutexHandle = osMutexNew(&SSD1306Mutex_attributes);
 8003530:	4855      	ldr	r0, [pc, #340]	; (8003688 <MX_FREERTOS_Init+0x168>)
 8003532:	f00c fec5 	bl	80102c0 <osMutexNew>
 8003536:	4603      	mov	r3, r0
 8003538:	4a54      	ldr	r2, [pc, #336]	; (800368c <MX_FREERTOS_Init+0x16c>)
 800353a:	6013      	str	r3, [r2, #0]

   /* creation of SPI1Mutex */
   SPI1MutexHandle = osMutexNew(&SPI1Mutex_attributes);
 800353c:	4854      	ldr	r0, [pc, #336]	; (8003690 <MX_FREERTOS_Init+0x170>)
 800353e:	f00c febf 	bl	80102c0 <osMutexNew>
 8003542:	4603      	mov	r3, r0
 8003544:	4a53      	ldr	r2, [pc, #332]	; (8003694 <MX_FREERTOS_Init+0x174>)
 8003546:	6013      	str	r3, [r2, #0]

   /* creation of E_PAPIERMutex */
   E_PAPIERMutexHandle = osMutexNew(&E_PAPIERMutex_attributes);
 8003548:	4853      	ldr	r0, [pc, #332]	; (8003698 <MX_FREERTOS_Init+0x178>)
 800354a:	f00c feb9 	bl	80102c0 <osMutexNew>
 800354e:	4603      	mov	r3, r0
 8003550:	4a52      	ldr	r2, [pc, #328]	; (800369c <MX_FREERTOS_Init+0x17c>)
 8003552:	6013      	str	r3, [r2, #0]

   /* creation of BME280Mutex */
   BME280MutexHandle = osMutexNew(&BME280Mutex_attributes);
 8003554:	4852      	ldr	r0, [pc, #328]	; (80036a0 <MX_FREERTOS_Init+0x180>)
 8003556:	f00c feb3 	bl	80102c0 <osMutexNew>
 800355a:	4603      	mov	r3, r0
 800355c:	4a51      	ldr	r2, [pc, #324]	; (80036a4 <MX_FREERTOS_Init+0x184>)
 800355e:	6013      	str	r3, [r2, #0]

   /* creation of MenuMutex */
   MenuMutexHandle = osMutexNew(&MenuMutex_attributes);
 8003560:	4851      	ldr	r0, [pc, #324]	; (80036a8 <MX_FREERTOS_Init+0x188>)
 8003562:	f00c fead 	bl	80102c0 <osMutexNew>
 8003566:	4603      	mov	r3, r0
 8003568:	4a50      	ldr	r2, [pc, #320]	; (80036ac <MX_FREERTOS_Init+0x18c>)
 800356a:	6013      	str	r3, [r2, #0]
   /* add semaphores, ... */
   /* USER CODE END RTOS_SEMAPHORES */

   /* Create the timer(s) */
   /* creation of MenuTimer */
   MenuTimerHandle = osTimerNew(MenuTimerCallback, osTimerOnce, NULL, &MenuTimer_attributes);
 800356c:	4b50      	ldr	r3, [pc, #320]	; (80036b0 <MX_FREERTOS_Init+0x190>)
 800356e:	2200      	movs	r2, #0
 8003570:	2100      	movs	r1, #0
 8003572:	4850      	ldr	r0, [pc, #320]	; (80036b4 <MX_FREERTOS_Init+0x194>)
 8003574:	f00c fd3e 	bl	800fff4 <osTimerNew>
 8003578:	4603      	mov	r3, r0
 800357a:	4a4f      	ldr	r2, [pc, #316]	; (80036b8 <MX_FREERTOS_Init+0x198>)
 800357c:	6013      	str	r3, [r2, #0]
   /* start timers, add new ones, ... */
   /* USER CODE END RTOS_TIMERS */

   /* Create the queue(s) */
   /* creation of MeasurmentQueue */
   MeasurmentQueueHandle = osMessageQueueNew(16, sizeof(MV_TypeDef), &MeasurmentQueue_attributes);
 800357e:	4a4f      	ldr	r2, [pc, #316]	; (80036bc <MX_FREERTOS_Init+0x19c>)
 8003580:	2130      	movs	r1, #48	; 0x30
 8003582:	2010      	movs	r0, #16
 8003584:	f00c ffaa 	bl	80104dc <osMessageQueueNew>
 8003588:	4603      	mov	r3, r0
 800358a:	4a4d      	ldr	r2, [pc, #308]	; (80036c0 <MX_FREERTOS_Init+0x1a0>)
 800358c:	6013      	str	r3, [r2, #0]

   /* creation of MoonPhaseQueue */
   MoonPhaseQueueHandle = osMessageQueueNew(16, sizeof(double), &MoonPhaseQueue_attributes);
 800358e:	4a4d      	ldr	r2, [pc, #308]	; (80036c4 <MX_FREERTOS_Init+0x1a4>)
 8003590:	2108      	movs	r1, #8
 8003592:	2010      	movs	r0, #16
 8003594:	f00c ffa2 	bl	80104dc <osMessageQueueNew>
 8003598:	4603      	mov	r3, r0
 800359a:	4a4b      	ldr	r2, [pc, #300]	; (80036c8 <MX_FREERTOS_Init+0x1a8>)
 800359c:	6013      	str	r3, [r2, #0]

   /* creation of ChartQueue */
   ChartQueueHandle = osMessageQueueNew(16, sizeof(ChartType_TypeDef), &ChartQueue_attributes);
 800359e:	4a4b      	ldr	r2, [pc, #300]	; (80036cc <MX_FREERTOS_Init+0x1ac>)
 80035a0:	2101      	movs	r1, #1
 80035a2:	2010      	movs	r0, #16
 80035a4:	f00c ff9a 	bl	80104dc <osMessageQueueNew>
 80035a8:	4603      	mov	r3, r0
 80035aa:	4a49      	ldr	r2, [pc, #292]	; (80036d0 <MX_FREERTOS_Init+0x1b0>)
 80035ac:	6013      	str	r3, [r2, #0]

   /* creation of DataToSaveQueue */
   DataToSaveQueueHandle = osMessageQueueNew(16, sizeof(MV_TypeDef), &DataToSaveQueue_attributes);
 80035ae:	4a49      	ldr	r2, [pc, #292]	; (80036d4 <MX_FREERTOS_Init+0x1b4>)
 80035b0:	2130      	movs	r1, #48	; 0x30
 80035b2:	2010      	movs	r0, #16
 80035b4:	f00c ff92 	bl	80104dc <osMessageQueueNew>
 80035b8:	4603      	mov	r3, r0
 80035ba:	4a47      	ldr	r2, [pc, #284]	; (80036d8 <MX_FREERTOS_Init+0x1b8>)
 80035bc:	6013      	str	r3, [r2, #0]
   /* add queues, ... */
   /* USER CODE END RTOS_QUEUES */

   /* Create the thread(s) */
   /* creation of defaultTask */
   defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80035be:	4a47      	ldr	r2, [pc, #284]	; (80036dc <MX_FREERTOS_Init+0x1bc>)
 80035c0:	2100      	movs	r1, #0
 80035c2:	4847      	ldr	r0, [pc, #284]	; (80036e0 <MX_FREERTOS_Init+0x1c0>)
 80035c4:	f00c fc54 	bl	800fe70 <osThreadNew>
 80035c8:	4603      	mov	r3, r0
 80035ca:	4a46      	ldr	r2, [pc, #280]	; (80036e4 <MX_FREERTOS_Init+0x1c4>)
 80035cc:	6013      	str	r3, [r2, #0]

   /* creation of InitAndTimeTask */
   InitAndTimeTaskHandle = osThreadNew(StartInitAndTimeTask, NULL, &InitAndTimeTask_attributes);
 80035ce:	4a46      	ldr	r2, [pc, #280]	; (80036e8 <MX_FREERTOS_Init+0x1c8>)
 80035d0:	2100      	movs	r1, #0
 80035d2:	4846      	ldr	r0, [pc, #280]	; (80036ec <MX_FREERTOS_Init+0x1cc>)
 80035d4:	f00c fc4c 	bl	800fe70 <osThreadNew>
 80035d8:	4603      	mov	r3, r0
 80035da:	4a45      	ldr	r2, [pc, #276]	; (80036f0 <MX_FREERTOS_Init+0x1d0>)
 80035dc:	6013      	str	r3, [r2, #0]

   /* creation of RfpTask */
   RfpTaskHandle = osThreadNew(StartRfpTask, NULL, &RfpTask_attributes);
 80035de:	4a45      	ldr	r2, [pc, #276]	; (80036f4 <MX_FREERTOS_Init+0x1d4>)
 80035e0:	2100      	movs	r1, #0
 80035e2:	4845      	ldr	r0, [pc, #276]	; (80036f8 <MX_FREERTOS_Init+0x1d8>)
 80035e4:	f00c fc44 	bl	800fe70 <osThreadNew>
 80035e8:	4603      	mov	r3, r0
 80035ea:	4a44      	ldr	r2, [pc, #272]	; (80036fc <MX_FREERTOS_Init+0x1dc>)
 80035ec:	6013      	str	r3, [r2, #0]

   /* creation of MeasurmentTask */
   MeasurmentTaskHandle = osThreadNew(StartMeasurmentTask, NULL, &MeasurmentTask_attributes);
 80035ee:	4a44      	ldr	r2, [pc, #272]	; (8003700 <MX_FREERTOS_Init+0x1e0>)
 80035f0:	2100      	movs	r1, #0
 80035f2:	4844      	ldr	r0, [pc, #272]	; (8003704 <MX_FREERTOS_Init+0x1e4>)
 80035f4:	f00c fc3c 	bl	800fe70 <osThreadNew>
 80035f8:	4603      	mov	r3, r0
 80035fa:	4a43      	ldr	r2, [pc, #268]	; (8003708 <MX_FREERTOS_Init+0x1e8>)
 80035fc:	6013      	str	r3, [r2, #0]

   /* creation of InternalMeasurmentTask */
   InternalMeasurmentTaskHandle = osThreadNew(StartInternalMeasurmentTask, NULL, &InternalMeasurmentTask_attributes);
 80035fe:	4a43      	ldr	r2, [pc, #268]	; (800370c <MX_FREERTOS_Init+0x1ec>)
 8003600:	2100      	movs	r1, #0
 8003602:	4843      	ldr	r0, [pc, #268]	; (8003710 <MX_FREERTOS_Init+0x1f0>)
 8003604:	f00c fc34 	bl	800fe70 <osThreadNew>
 8003608:	4603      	mov	r3, r0
 800360a:	4a42      	ldr	r2, [pc, #264]	; (8003714 <MX_FREERTOS_Init+0x1f4>)
 800360c:	6013      	str	r3, [r2, #0]

   /* creation of MoonPhaseTask */
   MoonPhaseTaskHandle = osThreadNew(StartMoonPhaseTask, NULL, &MoonPhaseTask_attributes);
 800360e:	4a42      	ldr	r2, [pc, #264]	; (8003718 <MX_FREERTOS_Init+0x1f8>)
 8003610:	2100      	movs	r1, #0
 8003612:	4842      	ldr	r0, [pc, #264]	; (800371c <MX_FREERTOS_Init+0x1fc>)
 8003614:	f00c fc2c 	bl	800fe70 <osThreadNew>
 8003618:	4603      	mov	r3, r0
 800361a:	4a41      	ldr	r2, [pc, #260]	; (8003720 <MX_FREERTOS_Init+0x200>)
 800361c:	6013      	str	r3, [r2, #0]

   /* creation of E_PapierDrawingTask */
   E_PapierDrawingTaskHandle = osThreadNew(StartE_PapierDrawingTask, NULL, &E_PapierDrawingTask_attributes);
 800361e:	4a41      	ldr	r2, [pc, #260]	; (8003724 <MX_FREERTOS_Init+0x204>)
 8003620:	2100      	movs	r1, #0
 8003622:	4841      	ldr	r0, [pc, #260]	; (8003728 <MX_FREERTOS_Init+0x208>)
 8003624:	f00c fc24 	bl	800fe70 <osThreadNew>
 8003628:	4603      	mov	r3, r0
 800362a:	4a40      	ldr	r2, [pc, #256]	; (800372c <MX_FREERTOS_Init+0x20c>)
 800362c:	6013      	str	r3, [r2, #0]

   /* creation of E_PapierDisplayTask */
   E_PapierDisplayTaskHandle = osThreadNew(StartE_PapierDisplayTask, NULL, &E_PapierDisplayTask_attributes);
 800362e:	4a40      	ldr	r2, [pc, #256]	; (8003730 <MX_FREERTOS_Init+0x210>)
 8003630:	2100      	movs	r1, #0
 8003632:	4840      	ldr	r0, [pc, #256]	; (8003734 <MX_FREERTOS_Init+0x214>)
 8003634:	f00c fc1c 	bl	800fe70 <osThreadNew>
 8003638:	4603      	mov	r3, r0
 800363a:	4a3f      	ldr	r2, [pc, #252]	; (8003738 <MX_FREERTOS_Init+0x218>)
 800363c:	6013      	str	r3, [r2, #0]

   /* creation of MenuTask */
   MenuTaskHandle = osThreadNew(StartMenuTask, NULL, &MenuTask_attributes);
 800363e:	4a3f      	ldr	r2, [pc, #252]	; (800373c <MX_FREERTOS_Init+0x21c>)
 8003640:	2100      	movs	r1, #0
 8003642:	483f      	ldr	r0, [pc, #252]	; (8003740 <MX_FREERTOS_Init+0x220>)
 8003644:	f00c fc14 	bl	800fe70 <osThreadNew>
 8003648:	4603      	mov	r3, r0
 800364a:	4a3e      	ldr	r2, [pc, #248]	; (8003744 <MX_FREERTOS_Init+0x224>)
 800364c:	6013      	str	r3, [r2, #0]

   /* creation of SaveMemoryTask */
   SaveMemoryTaskHandle = osThreadNew(StartSaveMemoryTask, NULL, &SaveMemoryTask_attributes);
 800364e:	4a3e      	ldr	r2, [pc, #248]	; (8003748 <MX_FREERTOS_Init+0x228>)
 8003650:	2100      	movs	r1, #0
 8003652:	483e      	ldr	r0, [pc, #248]	; (800374c <MX_FREERTOS_Init+0x22c>)
 8003654:	f00c fc0c 	bl	800fe70 <osThreadNew>
 8003658:	4603      	mov	r3, r0
 800365a:	4a3d      	ldr	r2, [pc, #244]	; (8003750 <MX_FREERTOS_Init+0x230>)
 800365c:	6013      	str	r3, [r2, #0]

   /* creation of ChartTask */
   ChartTaskHandle = osThreadNew(StartChartTask, NULL, &ChartTask_attributes);
 800365e:	4a3d      	ldr	r2, [pc, #244]	; (8003754 <MX_FREERTOS_Init+0x234>)
 8003660:	2100      	movs	r1, #0
 8003662:	483d      	ldr	r0, [pc, #244]	; (8003758 <MX_FREERTOS_Init+0x238>)
 8003664:	f00c fc04 	bl	800fe70 <osThreadNew>
 8003668:	4603      	mov	r3, r0
 800366a:	4a3c      	ldr	r2, [pc, #240]	; (800375c <MX_FREERTOS_Init+0x23c>)
 800366c:	6013      	str	r3, [r2, #0]
   /* USER CODE BEGIN RTOS_THREADS */
   /* add threads, ... */
   /* USER CODE END RTOS_THREADS */

   /* creation of C3V1Flags */
   C3V1FlagsHandle = osEventFlagsNew(&C3V1Flags_attributes);
 800366e:	483c      	ldr	r0, [pc, #240]	; (8003760 <MX_FREERTOS_Init+0x240>)
 8003670:	f00c fd3c 	bl	80100ec <osEventFlagsNew>
 8003674:	4603      	mov	r3, r0
 8003676:	4a3b      	ldr	r2, [pc, #236]	; (8003764 <MX_FREERTOS_Init+0x244>)
 8003678:	6013      	str	r3, [r2, #0]

   /* USER CODE BEGIN RTOS_EVENTS */
   /* add events, ... */
   /* USER CODE END RTOS_EVENTS */
}
 800367a:	bf00      	nop
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	0801a050 	.word	0x0801a050
 8003684:	20003e04 	.word	0x20003e04
 8003688:	0801a060 	.word	0x0801a060
 800368c:	20003e08 	.word	0x20003e08
 8003690:	0801a070 	.word	0x0801a070
 8003694:	20003e0c 	.word	0x20003e0c
 8003698:	0801a080 	.word	0x0801a080
 800369c:	20003e10 	.word	0x20003e10
 80036a0:	0801a090 	.word	0x0801a090
 80036a4:	20003e14 	.word	0x20003e14
 80036a8:	0801a0a0 	.word	0x0801a0a0
 80036ac:	20003e18 	.word	0x20003e18
 80036b0:	0801a040 	.word	0x0801a040
 80036b4:	08004e45 	.word	0x08004e45
 80036b8:	20003e00 	.word	0x20003e00
 80036bc:	08019fe0 	.word	0x08019fe0
 80036c0:	20003df0 	.word	0x20003df0
 80036c4:	08019ff8 	.word	0x08019ff8
 80036c8:	20003df4 	.word	0x20003df4
 80036cc:	0801a010 	.word	0x0801a010
 80036d0:	20003df8 	.word	0x20003df8
 80036d4:	0801a028 	.word	0x0801a028
 80036d8:	20003dfc 	.word	0x20003dfc
 80036dc:	08019e54 	.word	0x08019e54
 80036e0:	08003769 	.word	0x08003769
 80036e4:	20003dc4 	.word	0x20003dc4
 80036e8:	08019e78 	.word	0x08019e78
 80036ec:	08003791 	.word	0x08003791
 80036f0:	20003dc8 	.word	0x20003dc8
 80036f4:	08019e9c 	.word	0x08019e9c
 80036f8:	080039bd 	.word	0x080039bd
 80036fc:	20003dcc 	.word	0x20003dcc
 8003700:	08019ec0 	.word	0x08019ec0
 8003704:	080039f1 	.word	0x080039f1
 8003708:	20003dd0 	.word	0x20003dd0
 800370c:	08019ee4 	.word	0x08019ee4
 8003710:	08003a3d 	.word	0x08003a3d
 8003714:	20003dd4 	.word	0x20003dd4
 8003718:	08019f08 	.word	0x08019f08
 800371c:	08003b21 	.word	0x08003b21
 8003720:	20003dd8 	.word	0x20003dd8
 8003724:	08019f2c 	.word	0x08019f2c
 8003728:	08003c81 	.word	0x08003c81
 800372c:	20003ddc 	.word	0x20003ddc
 8003730:	08019f50 	.word	0x08019f50
 8003734:	08004001 	.word	0x08004001
 8003738:	20003de0 	.word	0x20003de0
 800373c:	08019f74 	.word	0x08019f74
 8003740:	08004091 	.word	0x08004091
 8003744:	20003de4 	.word	0x20003de4
 8003748:	08019f98 	.word	0x08019f98
 800374c:	080040b9 	.word	0x080040b9
 8003750:	20003de8 	.word	0x20003de8
 8003754:	08019fbc 	.word	0x08019fbc
 8003758:	080048a5 	.word	0x080048a5
 800375c:	20003dec 	.word	0x20003dec
 8003760:	0801a0b0 	.word	0x0801a0b0
 8003764:	20003e1c 	.word	0x20003e1c

08003768 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN StartDefaultTask */
   /* Infinite loop */
   for(;;)
   {
      HAL_GPIO_TogglePin(HEARTBEAT_GPIO_Port, HEARTBEAT_Pin);
 8003770:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003774:	4804      	ldr	r0, [pc, #16]	; (8003788 <StartDefaultTask+0x20>)
 8003776:	f006 fa6d 	bl	8009c54 <HAL_GPIO_TogglePin>
      HAL_IWDG_Refresh(&hiwdg);
 800377a:	4804      	ldr	r0, [pc, #16]	; (800378c <StartDefaultTask+0x24>)
 800377c:	f006 fad3 	bl	8009d26 <HAL_IWDG_Refresh>
      osDelay(100);
 8003780:	2064      	movs	r0, #100	; 0x64
 8003782:	f00c fc07 	bl	800ff94 <osDelay>
      HAL_GPIO_TogglePin(HEARTBEAT_GPIO_Port, HEARTBEAT_Pin);
 8003786:	e7f3      	b.n	8003770 <StartDefaultTask+0x8>
 8003788:	48000400 	.word	0x48000400
 800378c:	20003e20 	.word	0x20003e20

08003790 <StartInitAndTimeTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartInitAndTimeTask */
void StartInitAndTimeTask(void *argument)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b0a8      	sub	sp, #160	; 0xa0
 8003794:	af04      	add	r7, sp, #16
 8003796:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN StartInitAndTimeTask */
   taskENTER_CRITICAL();
 8003798:	f010 f83c 	bl	8013814 <vPortEnterCritical>
   RFP_Init(&Rfp, RFP_IDWS);
 800379c:	2103      	movs	r1, #3
 800379e:	4875      	ldr	r0, [pc, #468]	; (8003974 <StartInitAndTimeTask+0x1e4>)
 80037a0:	f004 fa42 	bl	8007c28 <RFP_Init>
   e_papier_init(&hspi1);
 80037a4:	4874      	ldr	r0, [pc, #464]	; (8003978 <StartInitAndTimeTask+0x1e8>)
 80037a6:	f7ff fb01 	bl	8002dac <e_papier_init>
   ssd1306_init(&hspi1);
 80037aa:	4873      	ldr	r0, [pc, #460]	; (8003978 <StartInitAndTimeTask+0x1e8>)
 80037ac:	f004 ff8a 	bl	80086c4 <ssd1306_init>
   BME280_Init(&Bme, &hspi1, BME280_CS_GPIO_Port, BME280_CS_Pin);
 80037b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80037b4:	4a71      	ldr	r2, [pc, #452]	; (800397c <StartInitAndTimeTask+0x1ec>)
 80037b6:	4970      	ldr	r1, [pc, #448]	; (8003978 <StartInitAndTimeTask+0x1e8>)
 80037b8:	4871      	ldr	r0, [pc, #452]	; (8003980 <StartInitAndTimeTask+0x1f0>)
 80037ba:	f7fe ffb3 	bl	8002724 <BME280_Init>
   GFX_SetFont(font_8x5);
 80037be:	4871      	ldr	r0, [pc, #452]	; (8003984 <StartInitAndTimeTask+0x1f4>)
 80037c0:	f7fd fcaa 	bl	8001118 <GFX_SetFont>
   RFP_RegisterDataFunction(RFP_DataFunction);
 80037c4:	4870      	ldr	r0, [pc, #448]	; (8003988 <StartInitAndTimeTask+0x1f8>)
 80037c6:	f004 faaf 	bl	8007d28 <RFP_RegisterDataFunction>
   MENU_Init();
 80037ca:	f7fd ff2b 	bl	8001624 <MENU_Init>
   fram_Init(&Fram, &hspi1, FRAM_HOLD_GPIO_Port, FRAM_CS_GPIO_Port, FRAM_WP_GPIO_Port, FRAM_HOLD_Pin, FRAM_CS_Pin, FRAM_WP_Pin);
 80037ce:	2380      	movs	r3, #128	; 0x80
 80037d0:	9303      	str	r3, [sp, #12]
 80037d2:	2340      	movs	r3, #64	; 0x40
 80037d4:	9302      	str	r3, [sp, #8]
 80037d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037da:	9301      	str	r3, [sp, #4]
 80037dc:	4b67      	ldr	r3, [pc, #412]	; (800397c <StartInitAndTimeTask+0x1ec>)
 80037de:	9300      	str	r3, [sp, #0]
 80037e0:	4b66      	ldr	r3, [pc, #408]	; (800397c <StartInitAndTimeTask+0x1ec>)
 80037e2:	4a66      	ldr	r2, [pc, #408]	; (800397c <StartInitAndTimeTask+0x1ec>)
 80037e4:	4964      	ldr	r1, [pc, #400]	; (8003978 <StartInitAndTimeTask+0x1e8>)
 80037e6:	4869      	ldr	r0, [pc, #420]	; (800398c <StartInitAndTimeTask+0x1fc>)
 80037e8:	f7ff fe59 	bl	800349e <fram_Init>
   flash_Init(&Flash, &hspi1, FLASH_CS_GPIO_Port, FLASH_CS_Pin);
 80037ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037f0:	4a62      	ldr	r2, [pc, #392]	; (800397c <StartInitAndTimeTask+0x1ec>)
 80037f2:	4961      	ldr	r1, [pc, #388]	; (8003978 <StartInitAndTimeTask+0x1e8>)
 80037f4:	4866      	ldr	r0, [pc, #408]	; (8003990 <StartInitAndTimeTask+0x200>)
 80037f6:	f7ff fcc3 	bl	8003180 <flash_Init>
   // fram_Write32(&Fram, DATE_CHART_CNT_ADDR, 0);
   taskEXIT_CRITICAL();
 80037fa:	f010 f83b 	bl	8013874 <vPortExitCritical>
   osEventFlagsSet(C3V1FlagsHandle, INITIALIZE_ALL_FLAG);
 80037fe:	4b65      	ldr	r3, [pc, #404]	; (8003994 <StartInitAndTimeTask+0x204>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2102      	movs	r1, #2
 8003804:	4618      	mov	r0, r3
 8003806:	f00c fcb1 	bl	801016c <osEventFlagsSet>
   uint32_t Random;
   RTC_TimeTypeDef RtcTime;
   RTC_DateTypeDef RtcDate;
   RTC_DateTypeDef ActualRtcDate = { 0 };
 800380a:	2300      	movs	r3, #0
 800380c:	673b      	str	r3, [r7, #112]	; 0x70
   char data[100];
   /* Infinite loop */
   for(;;)
   {
      osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 800380e:	4b61      	ldr	r3, [pc, #388]	; (8003994 <StartInitAndTimeTask+0x204>)
 8003810:	6818      	ldr	r0, [r3, #0]
 8003812:	f04f 33ff 	mov.w	r3, #4294967295
 8003816:	2202      	movs	r2, #2
 8003818:	2102      	movs	r1, #2
 800381a:	f00c fceb 	bl	80101f4 <osEventFlagsWait>
      osMutexAcquire(MenuMutexHandle, osWaitForever);
 800381e:	4b5e      	ldr	r3, [pc, #376]	; (8003998 <StartInitAndTimeTask+0x208>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f04f 31ff 	mov.w	r1, #4294967295
 8003826:	4618      	mov	r0, r3
 8003828:	f00c fdd0 	bl	80103cc <osMutexAcquire>
      osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 800382c:	4b5b      	ldr	r3, [pc, #364]	; (800399c <StartInitAndTimeTask+0x20c>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f04f 31ff 	mov.w	r1, #4294967295
 8003834:	4618      	mov	r0, r3
 8003836:	f00c fdc9 	bl	80103cc <osMutexAcquire>
      osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 800383a:	4b59      	ldr	r3, [pc, #356]	; (80039a0 <StartInitAndTimeTask+0x210>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f04f 31ff 	mov.w	r1, #4294967295
 8003842:	4618      	mov	r0, r3
 8003844:	f00c fdc2 	bl	80103cc <osMutexAcquire>
      osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8003848:	4b56      	ldr	r3, [pc, #344]	; (80039a4 <StartInitAndTimeTask+0x214>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f04f 31ff 	mov.w	r1, #4294967295
 8003850:	4618      	mov	r0, r3
 8003852:	f00c fdbb 	bl	80103cc <osMutexAcquire>
      HAL_RNG_GenerateRandomNumber(&hrng, &Random);
 8003856:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800385a:	4619      	mov	r1, r3
 800385c:	4852      	ldr	r0, [pc, #328]	; (80039a8 <StartInitAndTimeTask+0x218>)
 800385e:	f008 f8b1 	bl	800b9c4 <HAL_RNG_GenerateRandomNumber>
      ssd1306_clear();
 8003862:	f004 ff23 	bl	80086ac <ssd1306_clear>
      HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 8003866:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800386a:	2200      	movs	r2, #0
 800386c:	4619      	mov	r1, r3
 800386e:	484f      	ldr	r0, [pc, #316]	; (80039ac <StartInitAndTimeTask+0x21c>)
 8003870:	f008 fa28 	bl	800bcc4 <HAL_RTC_GetTime>
      HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 8003874:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003878:	2200      	movs	r2, #0
 800387a:	4619      	mov	r1, r3
 800387c:	484b      	ldr	r0, [pc, #300]	; (80039ac <StartInitAndTimeTask+0x21c>)
 800387e:	f008 fb0b 	bl	800be98 <HAL_RTC_GetDate>
      sprintf(data, "%d h %d m %d s", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 8003882:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8003886:	461a      	mov	r2, r3
 8003888:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 800388c:	4619      	mov	r1, r3
 800388e:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8003892:	f107 000c 	add.w	r0, r7, #12
 8003896:	9300      	str	r3, [sp, #0]
 8003898:	460b      	mov	r3, r1
 800389a:	4945      	ldr	r1, [pc, #276]	; (80039b0 <StartInitAndTimeTask+0x220>)
 800389c:	f004 f98c 	bl	8007bb8 <sprintf_>
      GFX_DrawString(0, 0, data, WHITE, 0, OLED);
 80038a0:	f107 020c 	add.w	r2, r7, #12
 80038a4:	2300      	movs	r3, #0
 80038a6:	9301      	str	r3, [sp, #4]
 80038a8:	2300      	movs	r3, #0
 80038aa:	9300      	str	r3, [sp, #0]
 80038ac:	2301      	movs	r3, #1
 80038ae:	2100      	movs	r1, #0
 80038b0:	2000      	movs	r0, #0
 80038b2:	f7fd fcff 	bl	80012b4 <GFX_DrawString>
      sprintf(data, "%d : %d ; 20%d", RtcDate.Date, RtcDate.Month, RtcDate.Year);
 80038b6:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80038ba:	461a      	mov	r2, r3
 80038bc:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 80038c0:	4619      	mov	r1, r3
 80038c2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80038c6:	f107 000c 	add.w	r0, r7, #12
 80038ca:	9300      	str	r3, [sp, #0]
 80038cc:	460b      	mov	r3, r1
 80038ce:	4939      	ldr	r1, [pc, #228]	; (80039b4 <StartInitAndTimeTask+0x224>)
 80038d0:	f004 f972 	bl	8007bb8 <sprintf_>
      GFX_DrawString(0, 10, data, WHITE, 0, OLED);
 80038d4:	f107 020c 	add.w	r2, r7, #12
 80038d8:	2300      	movs	r3, #0
 80038da:	9301      	str	r3, [sp, #4]
 80038dc:	2300      	movs	r3, #0
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	2301      	movs	r3, #1
 80038e2:	210a      	movs	r1, #10
 80038e4:	2000      	movs	r0, #0
 80038e6:	f7fd fce5 	bl	80012b4 <GFX_DrawString>
      sprintf(data, "RNG %d ", Random);
 80038ea:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80038ee:	f107 030c 	add.w	r3, r7, #12
 80038f2:	4931      	ldr	r1, [pc, #196]	; (80039b8 <StartInitAndTimeTask+0x228>)
 80038f4:	4618      	mov	r0, r3
 80038f6:	f004 f95f 	bl	8007bb8 <sprintf_>
      GFX_DrawString(0, 20, data, WHITE, 0, OLED);
 80038fa:	f107 020c 	add.w	r2, r7, #12
 80038fe:	2300      	movs	r3, #0
 8003900:	9301      	str	r3, [sp, #4]
 8003902:	2300      	movs	r3, #0
 8003904:	9300      	str	r3, [sp, #0]
 8003906:	2301      	movs	r3, #1
 8003908:	2114      	movs	r1, #20
 800390a:	2000      	movs	r0, #0
 800390c:	f7fd fcd2 	bl	80012b4 <GFX_DrawString>
      ssd1306_display();
 8003910:	f004 fea0 	bl	8008654 <ssd1306_display>
      osMutexRelease(SPI1MutexHandle);
 8003914:	4b23      	ldr	r3, [pc, #140]	; (80039a4 <StartInitAndTimeTask+0x214>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4618      	mov	r0, r3
 800391a:	f00c fda2 	bl	8010462 <osMutexRelease>
      osMutexRelease(SSD1306MutexHandle);
 800391e:	4b20      	ldr	r3, [pc, #128]	; (80039a0 <StartInitAndTimeTask+0x210>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4618      	mov	r0, r3
 8003924:	f00c fd9d 	bl	8010462 <osMutexRelease>
      osMutexRelease(ScreensDcMutexHandle);
 8003928:	4b1c      	ldr	r3, [pc, #112]	; (800399c <StartInitAndTimeTask+0x20c>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4618      	mov	r0, r3
 800392e:	f00c fd98 	bl	8010462 <osMutexRelease>
      osMutexRelease(MenuMutexHandle);
 8003932:	4b19      	ldr	r3, [pc, #100]	; (8003998 <StartInitAndTimeTask+0x208>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4618      	mov	r0, r3
 8003938:	f00c fd93 	bl	8010462 <osMutexRelease>
      if(ActualRtcDate.Date != RtcDate.Date)
 800393c:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8003940:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8003944:	429a      	cmp	r2, r3
 8003946:	d00f      	beq.n	8003968 <StartInitAndTimeTask+0x1d8>
      {
         ActualRtcDate.Date = RtcDate.Date;
 8003948:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800394c:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
         osEventFlagsSet(C3V1FlagsHandle, MOON_PHASE_FLAG);
 8003950:	4b10      	ldr	r3, [pc, #64]	; (8003994 <StartInitAndTimeTask+0x204>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2110      	movs	r1, #16
 8003956:	4618      	mov	r0, r3
 8003958:	f00c fc08 	bl	801016c <osEventFlagsSet>
         osEventFlagsSet(C3V1FlagsHandle, NEW_DAY_TO_SAVE);
 800395c:	4b0d      	ldr	r3, [pc, #52]	; (8003994 <StartInitAndTimeTask+0x204>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2120      	movs	r1, #32
 8003962:	4618      	mov	r0, r3
 8003964:	f00c fc02 	bl	801016c <osEventFlagsSet>
      }
      osDelay(1000);
 8003968:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800396c:	f00c fb12 	bl	800ff94 <osDelay>
      osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 8003970:	e74d      	b.n	800380e <StartInitAndTimeTask+0x7e>
 8003972:	bf00      	nop
 8003974:	20003d4c 	.word	0x20003d4c
 8003978:	20003f74 	.word	0x20003f74
 800397c:	48000400 	.word	0x48000400
 8003980:	20003d68 	.word	0x20003d68
 8003984:	08019c74 	.word	0x08019c74
 8003988:	08004fa5 	.word	0x08004fa5
 800398c:	20003da8 	.word	0x20003da8
 8003990:	20003d98 	.word	0x20003d98
 8003994:	20003e1c 	.word	0x20003e1c
 8003998:	20003e18 	.word	0x20003e18
 800399c:	20003e04 	.word	0x20003e04
 80039a0:	20003e08 	.word	0x20003e08
 80039a4:	20003e0c 	.word	0x20003e0c
 80039a8:	20003f2c 	.word	0x20003f2c
 80039ac:	20003f40 	.word	0x20003f40
 80039b0:	08019a50 	.word	0x08019a50
 80039b4:	08019a60 	.word	0x08019a60
 80039b8:	08019a70 	.word	0x08019a70

080039bc <StartRfpTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartRfpTask */
void StartRfpTask(void *argument)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN StartRfpTask */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 80039c4:	4b08      	ldr	r3, [pc, #32]	; (80039e8 <StartRfpTask+0x2c>)
 80039c6:	6818      	ldr	r0, [r3, #0]
 80039c8:	f04f 33ff 	mov.w	r3, #4294967295
 80039cc:	2202      	movs	r2, #2
 80039ce:	2102      	movs	r1, #2
 80039d0:	f00c fc10 	bl	80101f4 <osEventFlagsWait>
   /* Infinite loop */
   for(;;)
   {
      if(Rfp.Initialize == RFP_INITIALIZE)
 80039d4:	4b05      	ldr	r3, [pc, #20]	; (80039ec <StartRfpTask+0x30>)
 80039d6:	78db      	ldrb	r3, [r3, #3]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d101      	bne.n	80039e0 <StartRfpTask+0x24>
      {
         RFP_Handle();
 80039dc:	f004 f908 	bl	8007bf0 <RFP_Handle>
      }
      osDelay(10);
 80039e0:	200a      	movs	r0, #10
 80039e2:	f00c fad7 	bl	800ff94 <osDelay>
      if(Rfp.Initialize == RFP_INITIALIZE)
 80039e6:	e7f5      	b.n	80039d4 <StartRfpTask+0x18>
 80039e8:	20003e1c 	.word	0x20003e1c
 80039ec:	20003d4c 	.word	0x20003d4c

080039f0 <StartMeasurmentTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMeasurmentTask */
void StartMeasurmentTask(void *argument)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN StartMeasurmentTask */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 80039f8:	4b0f      	ldr	r3, [pc, #60]	; (8003a38 <StartMeasurmentTask+0x48>)
 80039fa:	6818      	ldr	r0, [r3, #0]
 80039fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003a00:	2202      	movs	r2, #2
 8003a02:	2102      	movs	r1, #2
 8003a04:	f00c fbf6 	bl	80101f4 <osEventFlagsWait>
   uint32_t Time   = 10000;
 8003a08:	f242 7310 	movw	r3, #10000	; 0x2710
 8003a0c:	60fb      	str	r3, [r7, #12]
   uint8_t Command = RFP_START_MEASURMENT;
 8003a0e:	2302      	movs	r3, #2
 8003a10:	72fb      	strb	r3, [r7, #11]
   /* Infinite loop */
   for(;;)
   {
      RFP_SendData(RFP_ODWS, RFP_COMMAND, &Command, 1);
 8003a12:	f107 020b 	add.w	r2, r7, #11
 8003a16:	2301      	movs	r3, #1
 8003a18:	2101      	movs	r1, #1
 8003a1a:	2002      	movs	r0, #2
 8003a1c:	f004 f9a2 	bl	8007d64 <RFP_SendData>
      osEventFlagsWait(C3V1FlagsHandle, SEND_MEASURMENT_COMMAND_FLAG, osFlagsWaitAny, osWaitForever);
 8003a20:	4b05      	ldr	r3, [pc, #20]	; (8003a38 <StartMeasurmentTask+0x48>)
 8003a22:	6818      	ldr	r0, [r3, #0]
 8003a24:	f04f 33ff 	mov.w	r3, #4294967295
 8003a28:	2200      	movs	r2, #0
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	f00c fbe2 	bl	80101f4 <osEventFlagsWait>
      osDelay(Time);
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	f00c faaf 	bl	800ff94 <osDelay>
      RFP_SendData(RFP_ODWS, RFP_COMMAND, &Command, 1);
 8003a36:	e7ec      	b.n	8003a12 <StartMeasurmentTask+0x22>
 8003a38:	20003e1c 	.word	0x20003e1c

08003a3c <StartInternalMeasurmentTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartInternalMeasurmentTask */
void StartInternalMeasurmentTask(void *argument)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b08e      	sub	sp, #56	; 0x38
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN StartInternalMeasurmentTask */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 8003a44:	4b30      	ldr	r3, [pc, #192]	; (8003b08 <StartInternalMeasurmentTask+0xcc>)
 8003a46:	6818      	ldr	r0, [r3, #0]
 8003a48:	f04f 33ff 	mov.w	r3, #4294967295
 8003a4c:	2202      	movs	r2, #2
 8003a4e:	2102      	movs	r1, #2
 8003a50:	f00c fbd0 	bl	80101f4 <osEventFlagsWait>
   MV_TypeDef _Mv = { 0 };
 8003a54:	f107 0308 	add.w	r3, r7, #8
 8003a58:	2230      	movs	r2, #48	; 0x30
 8003a5a:	2100      	movs	r1, #0
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f010 fa1f 	bl	8013ea0 <memset>
   /* Infinite loop */
   for(;;)
   {
      osMessageQueueGet(MeasurmentQueueHandle, &_Mv, 0, osWaitForever);
 8003a62:	4b2a      	ldr	r3, [pc, #168]	; (8003b0c <StartInternalMeasurmentTask+0xd0>)
 8003a64:	6818      	ldr	r0, [r3, #0]
 8003a66:	f107 0108 	add.w	r1, r7, #8
 8003a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f00c fe08 	bl	8010684 <osMessageQueueGet>
      osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8003a74:	4b26      	ldr	r3, [pc, #152]	; (8003b10 <StartInternalMeasurmentTask+0xd4>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f04f 31ff 	mov.w	r1, #4294967295
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f00c fca5 	bl	80103cc <osMutexAcquire>
      osMutexAcquire(BME280MutexHandle, osWaitForever);
 8003a82:	4b24      	ldr	r3, [pc, #144]	; (8003b14 <StartInternalMeasurmentTask+0xd8>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f04f 31ff 	mov.w	r1, #4294967295
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f00c fc9e 	bl	80103cc <osMutexAcquire>
      BME280_ReadAll(&Bme, &_Mv.InternalTemperature, &_Mv.Pressure, &_Mv.InternalHumidity);
 8003a90:	f107 0308 	add.w	r3, r7, #8
 8003a94:	f103 000c 	add.w	r0, r3, #12
 8003a98:	f107 0308 	add.w	r3, r7, #8
 8003a9c:	f103 0210 	add.w	r2, r3, #16
 8003aa0:	f107 0308 	add.w	r3, r7, #8
 8003aa4:	f103 0108 	add.w	r1, r3, #8
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	481b      	ldr	r0, [pc, #108]	; (8003b18 <StartInternalMeasurmentTask+0xdc>)
 8003aac:	f7fe fe10 	bl	80026d0 <BME280_ReadAll>
      osMutexRelease(BME280MutexHandle);
 8003ab0:	4b18      	ldr	r3, [pc, #96]	; (8003b14 <StartInternalMeasurmentTask+0xd8>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f00c fcd4 	bl	8010462 <osMutexRelease>
      osMutexRelease(SPI1MutexHandle);
 8003aba:	4b15      	ldr	r3, [pc, #84]	; (8003b10 <StartInternalMeasurmentTask+0xd4>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f00c fccf 	bl	8010462 <osMutexRelease>
      osEventFlagsSet(C3V1FlagsHandle, SEND_MEASURMENT_COMMAND_FLAG);
 8003ac4:	4b10      	ldr	r3, [pc, #64]	; (8003b08 <StartInternalMeasurmentTask+0xcc>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2101      	movs	r1, #1
 8003aca:	4618      	mov	r0, r3
 8003acc:	f00c fb4e 	bl	801016c <osEventFlagsSet>
      osMessageQueuePut(MeasurmentQueueHandle, &_Mv, 0, osWaitForever);
 8003ad0:	4b0e      	ldr	r3, [pc, #56]	; (8003b0c <StartInternalMeasurmentTask+0xd0>)
 8003ad2:	6818      	ldr	r0, [r3, #0]
 8003ad4:	f107 0108 	add.w	r1, r7, #8
 8003ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8003adc:	2200      	movs	r2, #0
 8003ade:	f00c fd71 	bl	80105c4 <osMessageQueuePut>
      osMessageQueuePut(DataToSaveQueueHandle, &_Mv, 0, osWaitForever);
 8003ae2:	4b0e      	ldr	r3, [pc, #56]	; (8003b1c <StartInternalMeasurmentTask+0xe0>)
 8003ae4:	6818      	ldr	r0, [r3, #0]
 8003ae6:	f107 0108 	add.w	r1, r7, #8
 8003aea:	f04f 33ff 	mov.w	r3, #4294967295
 8003aee:	2200      	movs	r2, #0
 8003af0:	f00c fd68 	bl	80105c4 <osMessageQueuePut>
      osEventFlagsSet(C3V1FlagsHandle, E_PAPIER_DRAWING_FLAG);
 8003af4:	4b04      	ldr	r3, [pc, #16]	; (8003b08 <StartInternalMeasurmentTask+0xcc>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2104      	movs	r1, #4
 8003afa:	4618      	mov	r0, r3
 8003afc:	f00c fb36 	bl	801016c <osEventFlagsSet>
      osDelay(1);
 8003b00:	2001      	movs	r0, #1
 8003b02:	f00c fa47 	bl	800ff94 <osDelay>
      osMessageQueueGet(MeasurmentQueueHandle, &_Mv, 0, osWaitForever);
 8003b06:	e7ac      	b.n	8003a62 <StartInternalMeasurmentTask+0x26>
 8003b08:	20003e1c 	.word	0x20003e1c
 8003b0c:	20003df0 	.word	0x20003df0
 8003b10:	20003e0c 	.word	0x20003e0c
 8003b14:	20003e14 	.word	0x20003e14
 8003b18:	20003d68 	.word	0x20003d68
 8003b1c:	20003dfc 	.word	0x20003dfc

08003b20 <StartMoonPhaseTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMoonPhaseTask */
void StartMoonPhaseTask(void *argument)
{
 8003b20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b24:	ed2d 8b04 	vpush	{d8-d9}
 8003b28:	b08e      	sub	sp, #56	; 0x38
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN StartMoonPhaseTask */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 8003b2e:	4b51      	ldr	r3, [pc, #324]	; (8003c74 <StartMoonPhaseTask+0x154>)
 8003b30:	6818      	ldr	r0, [r3, #0]
 8003b32:	f04f 33ff 	mov.w	r3, #4294967295
 8003b36:	2202      	movs	r2, #2
 8003b38:	2102      	movs	r1, #2
 8003b3a:	f00c fb5b 	bl	80101f4 <osEventFlagsWait>
   /* Infinite loop */
   for(;;)
   {
      osEventFlagsWait(C3V1FlagsHandle, MOON_PHASE_FLAG, osFlagsWaitAny, osWaitForever);
 8003b3e:	4b4d      	ldr	r3, [pc, #308]	; (8003c74 <StartMoonPhaseTask+0x154>)
 8003b40:	6818      	ldr	r0, [r3, #0]
 8003b42:	f04f 33ff 	mov.w	r3, #4294967295
 8003b46:	2200      	movs	r2, #0
 8003b48:	2110      	movs	r1, #16
 8003b4a:	f00c fb53 	bl	80101f4 <osEventFlagsWait>
      RTC_TimeTypeDef RtcTime;
      RTC_DateTypeDef RtcDate;
      double PhaseMoon = 0.0;
 8003b4e:	f04f 0200 	mov.w	r2, #0
 8003b52:	f04f 0300 	mov.w	r3, #0
 8003b56:	e9c7 2302 	strd	r2, r3, [r7, #8]
      uint32_t Cnt     = 0;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	637b      	str	r3, [r7, #52]	; 0x34
      HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 8003b5e:	f107 0314 	add.w	r3, r7, #20
 8003b62:	2200      	movs	r2, #0
 8003b64:	4619      	mov	r1, r3
 8003b66:	4844      	ldr	r0, [pc, #272]	; (8003c78 <StartMoonPhaseTask+0x158>)
 8003b68:	f008 f8ac 	bl	800bcc4 <HAL_RTC_GetTime>
      HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 8003b6c:	f107 0310 	add.w	r3, r7, #16
 8003b70:	2200      	movs	r2, #0
 8003b72:	4619      	mov	r1, r3
 8003b74:	4840      	ldr	r0, [pc, #256]	; (8003c78 <StartMoonPhaseTask+0x158>)
 8003b76:	f008 f98f 	bl	800be98 <HAL_RTC_GetDate>
      for(int Hours = 0; Hours < 24; Hours++)
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	633b      	str	r3, [r7, #48]	; 0x30
 8003b7e:	e059      	b.n	8003c34 <StartMoonPhaseTask+0x114>
      {
         for(int Minutes = 0; Minutes < 60; Minutes++)
 8003b80:	2300      	movs	r3, #0
 8003b82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b84:	e050      	b.n	8003c28 <StartMoonPhaseTask+0x108>
         {
            for(int Seconds = 0; Seconds < 60; Seconds++)
 8003b86:	2300      	movs	r3, #0
 8003b88:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b8a:	e047      	b.n	8003c1c <StartMoonPhaseTask+0xfc>
            {
               PhaseMoon += faza((RtcDate.Year + 2000), RtcDate.Month, RtcDate.Date, Hours, Minutes, Seconds);
 8003b8c:	7cfb      	ldrb	r3, [r7, #19]
 8003b8e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7fc fcde 	bl	8000554 <__aeabi_i2d>
 8003b98:	4604      	mov	r4, r0
 8003b9a:	460d      	mov	r5, r1
 8003b9c:	7c7b      	ldrb	r3, [r7, #17]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7fc fcc8 	bl	8000534 <__aeabi_ui2d>
 8003ba4:	4680      	mov	r8, r0
 8003ba6:	4689      	mov	r9, r1
 8003ba8:	7cbb      	ldrb	r3, [r7, #18]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7fc fcc2 	bl	8000534 <__aeabi_ui2d>
 8003bb0:	4682      	mov	sl, r0
 8003bb2:	468b      	mov	fp, r1
 8003bb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bb6:	f7fc fccd 	bl	8000554 <__aeabi_i2d>
 8003bba:	ec41 0b18 	vmov	d8, r0, r1
 8003bbe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003bc0:	f7fc fcc8 	bl	8000554 <__aeabi_i2d>
 8003bc4:	ec41 0b19 	vmov	d9, r0, r1
 8003bc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bca:	f7fc fcc3 	bl	8000554 <__aeabi_i2d>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	ec43 2b15 	vmov	d5, r2, r3
 8003bd6:	eeb0 4a49 	vmov.f32	s8, s18
 8003bda:	eef0 4a69 	vmov.f32	s9, s19
 8003bde:	eeb0 3a48 	vmov.f32	s6, s16
 8003be2:	eef0 3a68 	vmov.f32	s7, s17
 8003be6:	ec4b ab12 	vmov	d2, sl, fp
 8003bea:	ec49 8b11 	vmov	d1, r8, r9
 8003bee:	ec45 4b10 	vmov	d0, r4, r5
 8003bf2:	f001 faed 	bl	80051d0 <faza>
 8003bf6:	ec51 0b10 	vmov	r0, r1, d0
 8003bfa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bfe:	f7fc fb5d 	bl	80002bc <__adddf3>
 8003c02:	4602      	mov	r2, r0
 8003c04:	460b      	mov	r3, r1
 8003c06:	e9c7 2302 	strd	r2, r3, [r7, #8]
               Cnt++;
 8003c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	637b      	str	r3, [r7, #52]	; 0x34
               osDelay(5);
 8003c10:	2005      	movs	r0, #5
 8003c12:	f00c f9bf 	bl	800ff94 <osDelay>
            for(int Seconds = 0; Seconds < 60; Seconds++)
 8003c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c18:	3301      	adds	r3, #1
 8003c1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1e:	2b3b      	cmp	r3, #59	; 0x3b
 8003c20:	ddb4      	ble.n	8003b8c <StartMoonPhaseTask+0x6c>
         for(int Minutes = 0; Minutes < 60; Minutes++)
 8003c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c24:	3301      	adds	r3, #1
 8003c26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c2a:	2b3b      	cmp	r3, #59	; 0x3b
 8003c2c:	ddab      	ble.n	8003b86 <StartMoonPhaseTask+0x66>
      for(int Hours = 0; Hours < 24; Hours++)
 8003c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c30:	3301      	adds	r3, #1
 8003c32:	633b      	str	r3, [r7, #48]	; 0x30
 8003c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c36:	2b17      	cmp	r3, #23
 8003c38:	dda2      	ble.n	8003b80 <StartMoonPhaseTask+0x60>
            }
         }
      }
      PhaseMoon /= (Cnt);
 8003c3a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c3e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003c40:	f7fc fc78 	bl	8000534 <__aeabi_ui2d>
 8003c44:	4602      	mov	r2, r0
 8003c46:	460b      	mov	r3, r1
 8003c48:	4620      	mov	r0, r4
 8003c4a:	4629      	mov	r1, r5
 8003c4c:	f7fc fe16 	bl	800087c <__aeabi_ddiv>
 8003c50:	4602      	mov	r2, r0
 8003c52:	460b      	mov	r3, r1
 8003c54:	e9c7 2302 	strd	r2, r3, [r7, #8]
      osMessageQueuePut(MoonPhaseQueueHandle, &PhaseMoon, 0, osWaitForever);
 8003c58:	4b08      	ldr	r3, [pc, #32]	; (8003c7c <StartMoonPhaseTask+0x15c>)
 8003c5a:	6818      	ldr	r0, [r3, #0]
 8003c5c:	f107 0108 	add.w	r1, r7, #8
 8003c60:	f04f 33ff 	mov.w	r3, #4294967295
 8003c64:	2200      	movs	r2, #0
 8003c66:	f00c fcad 	bl	80105c4 <osMessageQueuePut>
      osDelay(1);
 8003c6a:	2001      	movs	r0, #1
 8003c6c:	f00c f992 	bl	800ff94 <osDelay>
   {
 8003c70:	e765      	b.n	8003b3e <StartMoonPhaseTask+0x1e>
 8003c72:	bf00      	nop
 8003c74:	20003e1c 	.word	0x20003e1c
 8003c78:	20003f40 	.word	0x20003f40
 8003c7c:	20003df4 	.word	0x20003df4

08003c80 <StartE_PapierDrawingTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartE_PapierDrawingTask */
void StartE_PapierDrawingTask(void *argument)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b0b2      	sub	sp, #200	; 0xc8
 8003c84:	af02      	add	r7, sp, #8
 8003c86:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN StartE_PapierDrawingTask */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 8003c88:	4bc8      	ldr	r3, [pc, #800]	; (8003fac <StartE_PapierDrawingTask+0x32c>)
 8003c8a:	6818      	ldr	r0, [r3, #0]
 8003c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c90:	2202      	movs	r2, #2
 8003c92:	2102      	movs	r1, #2
 8003c94:	f00c faae 	bl	80101f4 <osEventFlagsWait>
   RTC_TimeTypeDef RtcTime;
   RTC_DateTypeDef RtcDate;
   MV_TypeDef _Mv    = { 0 };
 8003c98:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003c9c:	2230      	movs	r2, #48	; 0x30
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f010 f8fd 	bl	8013ea0 <memset>
   double _MoonPhase = 0;
 8003ca6:	f04f 0200 	mov.w	r2, #0
 8003caa:	f04f 0300 	mov.w	r3, #0
 8003cae:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
   /* Infinite loop */
   for(;;)
   {
      osEventFlagsWait(C3V1FlagsHandle, E_PAPIER_DRAWING_FLAG, osFlagsWaitAny, osWaitForever);
 8003cb2:	4bbe      	ldr	r3, [pc, #760]	; (8003fac <StartE_PapierDrawingTask+0x32c>)
 8003cb4:	6818      	ldr	r0, [r3, #0]
 8003cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8003cba:	2200      	movs	r2, #0
 8003cbc:	2104      	movs	r1, #4
 8003cbe:	f00c fa99 	bl	80101f4 <osEventFlagsWait>
      osMessageQueueGet(MeasurmentQueueHandle, &_Mv, 0, osWaitForever);
 8003cc2:	4bbb      	ldr	r3, [pc, #748]	; (8003fb0 <StartE_PapierDrawingTask+0x330>)
 8003cc4:	6818      	ldr	r0, [r3, #0]
 8003cc6:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8003cca:	f04f 33ff 	mov.w	r3, #4294967295
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f00c fcd8 	bl	8010684 <osMessageQueueGet>
      osMutexAcquire(E_PAPIERMutexHandle, osWaitForever);
 8003cd4:	4bb7      	ldr	r3, [pc, #732]	; (8003fb4 <StartE_PapierDrawingTask+0x334>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f04f 31ff 	mov.w	r1, #4294967295
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f00c fb75 	bl	80103cc <osMutexAcquire>
      char mes[100];
      sprintf(mes, "H %0.2f", _Mv.ExtHumidity);
 8003ce2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7fc fc47 	bl	8000578 <__aeabi_f2d>
 8003cea:	4602      	mov	r2, r0
 8003cec:	460b      	mov	r3, r1
 8003cee:	f107 000c 	add.w	r0, r7, #12
 8003cf2:	49b1      	ldr	r1, [pc, #708]	; (8003fb8 <StartE_PapierDrawingTask+0x338>)
 8003cf4:	f003 ff60 	bl	8007bb8 <sprintf_>
      GFX_DrawString(0, 0, mes, BLACK, 1, E_PAPIER);
 8003cf8:	f107 020c 	add.w	r2, r7, #12
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	9301      	str	r3, [sp, #4]
 8003d00:	2301      	movs	r3, #1
 8003d02:	9300      	str	r3, [sp, #0]
 8003d04:	2300      	movs	r3, #0
 8003d06:	2100      	movs	r1, #0
 8003d08:	2000      	movs	r0, #0
 8003d0a:	f7fd fad3 	bl	80012b4 <GFX_DrawString>
      sprintf(mes, "T %0.2f", _Mv.ExtTemperature);
 8003d0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7fc fc31 	bl	8000578 <__aeabi_f2d>
 8003d16:	4602      	mov	r2, r0
 8003d18:	460b      	mov	r3, r1
 8003d1a:	f107 000c 	add.w	r0, r7, #12
 8003d1e:	49a7      	ldr	r1, [pc, #668]	; (8003fbc <StartE_PapierDrawingTask+0x33c>)
 8003d20:	f003 ff4a 	bl	8007bb8 <sprintf_>
      GFX_DrawString(0, 10, mes, BLACK, 1, E_PAPIER);
 8003d24:	f107 020c 	add.w	r2, r7, #12
 8003d28:	2301      	movs	r3, #1
 8003d2a:	9301      	str	r3, [sp, #4]
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	9300      	str	r3, [sp, #0]
 8003d30:	2300      	movs	r3, #0
 8003d32:	210a      	movs	r1, #10
 8003d34:	2000      	movs	r0, #0
 8003d36:	f7fd fabd 	bl	80012b4 <GFX_DrawString>
      sprintf(mes, "PM1 %d", _Mv.ExtPM1);
 8003d3a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003d3e:	461a      	mov	r2, r3
 8003d40:	f107 030c 	add.w	r3, r7, #12
 8003d44:	499e      	ldr	r1, [pc, #632]	; (8003fc0 <StartE_PapierDrawingTask+0x340>)
 8003d46:	4618      	mov	r0, r3
 8003d48:	f003 ff36 	bl	8007bb8 <sprintf_>
      GFX_DrawString(0, 20, mes, BLACK, 1, E_PAPIER);
 8003d4c:	f107 020c 	add.w	r2, r7, #12
 8003d50:	2301      	movs	r3, #1
 8003d52:	9301      	str	r3, [sp, #4]
 8003d54:	2301      	movs	r3, #1
 8003d56:	9300      	str	r3, [sp, #0]
 8003d58:	2300      	movs	r3, #0
 8003d5a:	2114      	movs	r1, #20
 8003d5c:	2000      	movs	r0, #0
 8003d5e:	f7fd faa9 	bl	80012b4 <GFX_DrawString>
      sprintf(mes, "PM10 %d", _Mv.ExtPM10);
 8003d62:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8003d66:	461a      	mov	r2, r3
 8003d68:	f107 030c 	add.w	r3, r7, #12
 8003d6c:	4995      	ldr	r1, [pc, #596]	; (8003fc4 <StartE_PapierDrawingTask+0x344>)
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f003 ff22 	bl	8007bb8 <sprintf_>
      GFX_DrawString(0, 30, mes, BLACK, 1, E_PAPIER);
 8003d74:	f107 020c 	add.w	r2, r7, #12
 8003d78:	2301      	movs	r3, #1
 8003d7a:	9301      	str	r3, [sp, #4]
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	9300      	str	r3, [sp, #0]
 8003d80:	2300      	movs	r3, #0
 8003d82:	211e      	movs	r1, #30
 8003d84:	2000      	movs	r0, #0
 8003d86:	f7fd fa95 	bl	80012b4 <GFX_DrawString>
      sprintf(mes, "PM2,5 %d", _Mv.ExtPM25);
 8003d8a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8003d8e:	461a      	mov	r2, r3
 8003d90:	f107 030c 	add.w	r3, r7, #12
 8003d94:	498c      	ldr	r1, [pc, #560]	; (8003fc8 <StartE_PapierDrawingTask+0x348>)
 8003d96:	4618      	mov	r0, r3
 8003d98:	f003 ff0e 	bl	8007bb8 <sprintf_>
      GFX_DrawString(0, 40, mes, BLACK, 1, E_PAPIER);
 8003d9c:	f107 020c 	add.w	r2, r7, #12
 8003da0:	2301      	movs	r3, #1
 8003da2:	9301      	str	r3, [sp, #4]
 8003da4:	2301      	movs	r3, #1
 8003da6:	9300      	str	r3, [sp, #0]
 8003da8:	2300      	movs	r3, #0
 8003daa:	2128      	movs	r1, #40	; 0x28
 8003dac:	2000      	movs	r0, #0
 8003dae:	f7fd fa81 	bl	80012b4 <GFX_DrawString>
      sprintf(mes, "Battery Level %0.2f", _Mv.BatteryVoltage);
 8003db2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7fc fbde 	bl	8000578 <__aeabi_f2d>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	460b      	mov	r3, r1
 8003dc0:	f107 000c 	add.w	r0, r7, #12
 8003dc4:	4981      	ldr	r1, [pc, #516]	; (8003fcc <StartE_PapierDrawingTask+0x34c>)
 8003dc6:	f003 fef7 	bl	8007bb8 <sprintf_>
      GFX_DrawString(0, 50, mes, BLACK, 1, E_PAPIER);
 8003dca:	f107 020c 	add.w	r2, r7, #12
 8003dce:	2301      	movs	r3, #1
 8003dd0:	9301      	str	r3, [sp, #4]
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	2132      	movs	r1, #50	; 0x32
 8003dda:	2000      	movs	r0, #0
 8003ddc:	f7fd fa6a 	bl	80012b4 <GFX_DrawString>
      if(!(_Mv.BatteryState & 0x01))
 8003de0:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 8003de4:	f003 0301 	and.w	r3, r3, #1
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d10a      	bne.n	8003e02 <StartE_PapierDrawingTask+0x182>
      {
         GFX_DrawString(0, 60, "Battery Charging", BLACK, 1, E_PAPIER);
 8003dec:	2301      	movs	r3, #1
 8003dee:	9301      	str	r3, [sp, #4]
 8003df0:	2301      	movs	r3, #1
 8003df2:	9300      	str	r3, [sp, #0]
 8003df4:	2300      	movs	r3, #0
 8003df6:	4a76      	ldr	r2, [pc, #472]	; (8003fd0 <StartE_PapierDrawingTask+0x350>)
 8003df8:	213c      	movs	r1, #60	; 0x3c
 8003dfa:	2000      	movs	r0, #0
 8003dfc:	f7fd fa5a 	bl	80012b4 <GFX_DrawString>
 8003e00:	e009      	b.n	8003e16 <StartE_PapierDrawingTask+0x196>
      }
      else
      {
         GFX_DrawString(0, 60, "Battery No Charging", BLACK, 1, E_PAPIER);
 8003e02:	2301      	movs	r3, #1
 8003e04:	9301      	str	r3, [sp, #4]
 8003e06:	2301      	movs	r3, #1
 8003e08:	9300      	str	r3, [sp, #0]
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	4a71      	ldr	r2, [pc, #452]	; (8003fd4 <StartE_PapierDrawingTask+0x354>)
 8003e0e:	213c      	movs	r1, #60	; 0x3c
 8003e10:	2000      	movs	r0, #0
 8003e12:	f7fd fa4f 	bl	80012b4 <GFX_DrawString>
      }
      if(!(_Mv.BatteryState & 0x02))
 8003e16:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d10a      	bne.n	8003e38 <StartE_PapierDrawingTask+0x1b8>
      {
         GFX_DrawString(0, 70, "Battery Standby", BLACK, 1, E_PAPIER);
 8003e22:	2301      	movs	r3, #1
 8003e24:	9301      	str	r3, [sp, #4]
 8003e26:	2301      	movs	r3, #1
 8003e28:	9300      	str	r3, [sp, #0]
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	4a6a      	ldr	r2, [pc, #424]	; (8003fd8 <StartE_PapierDrawingTask+0x358>)
 8003e2e:	2146      	movs	r1, #70	; 0x46
 8003e30:	2000      	movs	r0, #0
 8003e32:	f7fd fa3f 	bl	80012b4 <GFX_DrawString>
 8003e36:	e009      	b.n	8003e4c <StartE_PapierDrawingTask+0x1cc>
      }
      else
      {
         GFX_DrawString(0, 70, "Battery No Standby", BLACK, 1, E_PAPIER);
 8003e38:	2301      	movs	r3, #1
 8003e3a:	9301      	str	r3, [sp, #4]
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	9300      	str	r3, [sp, #0]
 8003e40:	2300      	movs	r3, #0
 8003e42:	4a66      	ldr	r2, [pc, #408]	; (8003fdc <StartE_PapierDrawingTask+0x35c>)
 8003e44:	2146      	movs	r1, #70	; 0x46
 8003e46:	2000      	movs	r0, #0
 8003e48:	f7fd fa34 	bl	80012b4 <GFX_DrawString>
      }
      HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 8003e4c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003e50:	2200      	movs	r2, #0
 8003e52:	4619      	mov	r1, r3
 8003e54:	4862      	ldr	r0, [pc, #392]	; (8003fe0 <StartE_PapierDrawingTask+0x360>)
 8003e56:	f007 ff35 	bl	800bcc4 <HAL_RTC_GetTime>
      HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 8003e5a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8003e5e:	2200      	movs	r2, #0
 8003e60:	4619      	mov	r1, r3
 8003e62:	485f      	ldr	r0, [pc, #380]	; (8003fe0 <StartE_PapierDrawingTask+0x360>)
 8003e64:	f008 f818 	bl	800be98 <HAL_RTC_GetDate>
      sprintf(mes, "%d h %d m %d s", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 8003e68:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8003e72:	4619      	mov	r1, r3
 8003e74:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8003e78:	f107 000c 	add.w	r0, r7, #12
 8003e7c:	9300      	str	r3, [sp, #0]
 8003e7e:	460b      	mov	r3, r1
 8003e80:	4958      	ldr	r1, [pc, #352]	; (8003fe4 <StartE_PapierDrawingTask+0x364>)
 8003e82:	f003 fe99 	bl	8007bb8 <sprintf_>
      GFX_DrawString(0, 80, mes, BLACK, 1, E_PAPIER);
 8003e86:	f107 020c 	add.w	r2, r7, #12
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	9301      	str	r3, [sp, #4]
 8003e8e:	2301      	movs	r3, #1
 8003e90:	9300      	str	r3, [sp, #0]
 8003e92:	2300      	movs	r3, #0
 8003e94:	2150      	movs	r1, #80	; 0x50
 8003e96:	2000      	movs	r0, #0
 8003e98:	f7fd fa0c 	bl	80012b4 <GFX_DrawString>
      sprintf(mes, "%d : %d ; 20%d", RtcDate.Date, RtcDate.Month, RtcDate.Year);
 8003e9c:	f897 30aa 	ldrb.w	r3, [r7, #170]	; 0xaa
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8003eac:	f107 000c 	add.w	r0, r7, #12
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	494c      	ldr	r1, [pc, #304]	; (8003fe8 <StartE_PapierDrawingTask+0x368>)
 8003eb6:	f003 fe7f 	bl	8007bb8 <sprintf_>
      GFX_DrawString(0, 90, mes, BLACK, 1, E_PAPIER);
 8003eba:	f107 020c 	add.w	r2, r7, #12
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	9301      	str	r3, [sp, #4]
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	9300      	str	r3, [sp, #0]
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	215a      	movs	r1, #90	; 0x5a
 8003eca:	2000      	movs	r0, #0
 8003ecc:	f7fd f9f2 	bl	80012b4 <GFX_DrawString>
      sprintf(mes, "%Internal Temperature: %0.2f", _Mv.InternalTemperature);
 8003ed0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7fc fb4f 	bl	8000578 <__aeabi_f2d>
 8003eda:	4602      	mov	r2, r0
 8003edc:	460b      	mov	r3, r1
 8003ede:	f107 000c 	add.w	r0, r7, #12
 8003ee2:	4942      	ldr	r1, [pc, #264]	; (8003fec <StartE_PapierDrawingTask+0x36c>)
 8003ee4:	f003 fe68 	bl	8007bb8 <sprintf_>
      GFX_DrawString(0, 210, mes, BLACK, 1, E_PAPIER);
 8003ee8:	f107 020c 	add.w	r2, r7, #12
 8003eec:	2301      	movs	r3, #1
 8003eee:	9301      	str	r3, [sp, #4]
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	9300      	str	r3, [sp, #0]
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	21d2      	movs	r1, #210	; 0xd2
 8003ef8:	2000      	movs	r0, #0
 8003efa:	f7fd f9db 	bl	80012b4 <GFX_DrawString>
      sprintf(mes, "%Internal Humidity: %0.2f", _Mv.InternalHumidity);
 8003efe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7fc fb38 	bl	8000578 <__aeabi_f2d>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	f107 000c 	add.w	r0, r7, #12
 8003f10:	4937      	ldr	r1, [pc, #220]	; (8003ff0 <StartE_PapierDrawingTask+0x370>)
 8003f12:	f003 fe51 	bl	8007bb8 <sprintf_>
      GFX_DrawString(0, 200, mes, BLACK, 1, E_PAPIER);
 8003f16:	f107 020c 	add.w	r2, r7, #12
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	9301      	str	r3, [sp, #4]
 8003f1e:	2301      	movs	r3, #1
 8003f20:	9300      	str	r3, [sp, #0]
 8003f22:	2300      	movs	r3, #0
 8003f24:	21c8      	movs	r1, #200	; 0xc8
 8003f26:	2000      	movs	r0, #0
 8003f28:	f7fd f9c4 	bl	80012b4 <GFX_DrawString>
      sprintf(mes, "%Pressure: %0.2f", _Mv.Pressure);
 8003f2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f30:	4618      	mov	r0, r3
 8003f32:	f7fc fb21 	bl	8000578 <__aeabi_f2d>
 8003f36:	4602      	mov	r2, r0
 8003f38:	460b      	mov	r3, r1
 8003f3a:	f107 000c 	add.w	r0, r7, #12
 8003f3e:	492d      	ldr	r1, [pc, #180]	; (8003ff4 <StartE_PapierDrawingTask+0x374>)
 8003f40:	f003 fe3a 	bl	8007bb8 <sprintf_>
      GFX_DrawString(0, 220, mes, BLACK, 1, E_PAPIER);
 8003f44:	f107 020c 	add.w	r2, r7, #12
 8003f48:	2301      	movs	r3, #1
 8003f4a:	9301      	str	r3, [sp, #4]
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	9300      	str	r3, [sp, #0]
 8003f50:	2300      	movs	r3, #0
 8003f52:	21dc      	movs	r1, #220	; 0xdc
 8003f54:	2000      	movs	r0, #0
 8003f56:	f7fd f9ad 	bl	80012b4 <GFX_DrawString>
      osMessageQueueGet(MoonPhaseQueueHandle, &_MoonPhase, 0, 0);
 8003f5a:	4b27      	ldr	r3, [pc, #156]	; (8003ff8 <StartE_PapierDrawingTask+0x378>)
 8003f5c:	6818      	ldr	r0, [r3, #0]
 8003f5e:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8003f62:	2300      	movs	r3, #0
 8003f64:	2200      	movs	r2, #0
 8003f66:	f00c fb8d 	bl	8010684 <osMessageQueueGet>
      sprintf(mes, "Moon Phase: %0.2f%%", _MoonPhase);
 8003f6a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003f6e:	f107 000c 	add.w	r0, r7, #12
 8003f72:	4922      	ldr	r1, [pc, #136]	; (8003ffc <StartE_PapierDrawingTask+0x37c>)
 8003f74:	f003 fe20 	bl	8007bb8 <sprintf_>
      GFX_DrawString(0, 230, mes, BLACK, 1, E_PAPIER);
 8003f78:	f107 020c 	add.w	r2, r7, #12
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	9301      	str	r3, [sp, #4]
 8003f80:	2301      	movs	r3, #1
 8003f82:	9300      	str	r3, [sp, #0]
 8003f84:	2300      	movs	r3, #0
 8003f86:	21e6      	movs	r1, #230	; 0xe6
 8003f88:	2000      	movs	r0, #0
 8003f8a:	f7fd f993 	bl	80012b4 <GFX_DrawString>
      osMutexRelease(E_PAPIERMutexHandle);
 8003f8e:	4b09      	ldr	r3, [pc, #36]	; (8003fb4 <StartE_PapierDrawingTask+0x334>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4618      	mov	r0, r3
 8003f94:	f00c fa65 	bl	8010462 <osMutexRelease>
      osEventFlagsSet(C3V1FlagsHandle, E_PAPIER_DISPLAY_FLAG);
 8003f98:	4b04      	ldr	r3, [pc, #16]	; (8003fac <StartE_PapierDrawingTask+0x32c>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2108      	movs	r1, #8
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f00c f8e4 	bl	801016c <osEventFlagsSet>
      osDelay(1);
 8003fa4:	2001      	movs	r0, #1
 8003fa6:	f00b fff5 	bl	800ff94 <osDelay>
   {
 8003faa:	e682      	b.n	8003cb2 <StartE_PapierDrawingTask+0x32>
 8003fac:	20003e1c 	.word	0x20003e1c
 8003fb0:	20003df0 	.word	0x20003df0
 8003fb4:	20003e10 	.word	0x20003e10
 8003fb8:	08019a78 	.word	0x08019a78
 8003fbc:	08019a80 	.word	0x08019a80
 8003fc0:	08019a88 	.word	0x08019a88
 8003fc4:	08019a90 	.word	0x08019a90
 8003fc8:	08019a98 	.word	0x08019a98
 8003fcc:	08019aa4 	.word	0x08019aa4
 8003fd0:	08019ab8 	.word	0x08019ab8
 8003fd4:	08019acc 	.word	0x08019acc
 8003fd8:	08019ae0 	.word	0x08019ae0
 8003fdc:	08019af0 	.word	0x08019af0
 8003fe0:	20003f40 	.word	0x20003f40
 8003fe4:	08019a50 	.word	0x08019a50
 8003fe8:	08019a60 	.word	0x08019a60
 8003fec:	08019b04 	.word	0x08019b04
 8003ff0:	08019b24 	.word	0x08019b24
 8003ff4:	08019b40 	.word	0x08019b40
 8003ff8:	20003df4 	.word	0x20003df4
 8003ffc:	08019b54 	.word	0x08019b54

08004000 <StartE_PapierDisplayTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartE_PapierDisplayTask */
void StartE_PapierDisplayTask(void *argument)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN StartE_PapierDisplayTask */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 8004008:	4b1d      	ldr	r3, [pc, #116]	; (8004080 <StartE_PapierDisplayTask+0x80>)
 800400a:	6818      	ldr	r0, [r3, #0]
 800400c:	f04f 33ff 	mov.w	r3, #4294967295
 8004010:	2202      	movs	r2, #2
 8004012:	2102      	movs	r1, #2
 8004014:	f00c f8ee 	bl	80101f4 <osEventFlagsWait>
   /* Infinite loop */
   for(;;)
   {
      osEventFlagsWait(C3V1FlagsHandle, E_PAPIER_DISPLAY_FLAG, osFlagsWaitAny, osWaitForever);
 8004018:	4b19      	ldr	r3, [pc, #100]	; (8004080 <StartE_PapierDisplayTask+0x80>)
 800401a:	6818      	ldr	r0, [r3, #0]
 800401c:	f04f 33ff 	mov.w	r3, #4294967295
 8004020:	2200      	movs	r2, #0
 8004022:	2108      	movs	r1, #8
 8004024:	f00c f8e6 	bl	80101f4 <osEventFlagsWait>
      osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8004028:	4b16      	ldr	r3, [pc, #88]	; (8004084 <StartE_PapierDisplayTask+0x84>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f04f 31ff 	mov.w	r1, #4294967295
 8004030:	4618      	mov	r0, r3
 8004032:	f00c f9cb 	bl	80103cc <osMutexAcquire>
      osMutexAcquire(E_PAPIERMutexHandle, osWaitForever);
 8004036:	4b14      	ldr	r3, [pc, #80]	; (8004088 <StartE_PapierDisplayTask+0x88>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f04f 31ff 	mov.w	r1, #4294967295
 800403e:	4618      	mov	r0, r3
 8004040:	f00c f9c4 	bl	80103cc <osMutexAcquire>
      osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8004044:	4b11      	ldr	r3, [pc, #68]	; (800408c <StartE_PapierDisplayTask+0x8c>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f04f 31ff 	mov.w	r1, #4294967295
 800404c:	4618      	mov	r0, r3
 800404e:	f00c f9bd 	bl	80103cc <osMutexAcquire>
      e_papier_display();
 8004052:	f7fe fe4d 	bl	8002cf0 <e_papier_display>
      e_papier_clear();
 8004056:	f7fe fe9d 	bl	8002d94 <e_papier_clear>
      osMutexRelease(SPI1MutexHandle);
 800405a:	4b0c      	ldr	r3, [pc, #48]	; (800408c <StartE_PapierDisplayTask+0x8c>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4618      	mov	r0, r3
 8004060:	f00c f9ff 	bl	8010462 <osMutexRelease>
      osMutexRelease(E_PAPIERMutexHandle);
 8004064:	4b08      	ldr	r3, [pc, #32]	; (8004088 <StartE_PapierDisplayTask+0x88>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4618      	mov	r0, r3
 800406a:	f00c f9fa 	bl	8010462 <osMutexRelease>
      osMutexRelease(ScreensDcMutexHandle);
 800406e:	4b05      	ldr	r3, [pc, #20]	; (8004084 <StartE_PapierDisplayTask+0x84>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4618      	mov	r0, r3
 8004074:	f00c f9f5 	bl	8010462 <osMutexRelease>
      osDelay(1);
 8004078:	2001      	movs	r0, #1
 800407a:	f00b ff8b 	bl	800ff94 <osDelay>
      osEventFlagsWait(C3V1FlagsHandle, E_PAPIER_DISPLAY_FLAG, osFlagsWaitAny, osWaitForever);
 800407e:	e7cb      	b.n	8004018 <StartE_PapierDisplayTask+0x18>
 8004080:	20003e1c 	.word	0x20003e1c
 8004084:	20003e04 	.word	0x20003e04
 8004088:	20003e10 	.word	0x20003e10
 800408c:	20003e0c 	.word	0x20003e0c

08004090 <StartMenuTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMenuTask */
void StartMenuTask(void *argument)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN StartMenuTask */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 8004098:	4b06      	ldr	r3, [pc, #24]	; (80040b4 <StartMenuTask+0x24>)
 800409a:	6818      	ldr	r0, [r3, #0]
 800409c:	f04f 33ff 	mov.w	r3, #4294967295
 80040a0:	2202      	movs	r2, #2
 80040a2:	2102      	movs	r1, #2
 80040a4:	f00c f8a6 	bl	80101f4 <osEventFlagsWait>
   /* Infinite loop */
   for(;;)
   {
      MENU_Handler();
 80040a8:	f7fd fac6 	bl	8001638 <MENU_Handler>
      osDelay(10);
 80040ac:	200a      	movs	r0, #10
 80040ae:	f00b ff71 	bl	800ff94 <osDelay>
      MENU_Handler();
 80040b2:	e7f9      	b.n	80040a8 <StartMenuTask+0x18>
 80040b4:	20003e1c 	.word	0x20003e1c

080040b8 <StartSaveMemoryTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartSaveMemoryTask */
void StartSaveMemoryTask(void *argument)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	f5ad 7d1e 	sub.w	sp, sp, #632	; 0x278
 80040be:	af00      	add	r7, sp, #0
 80040c0:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80040c4:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80040c8:	6018      	str	r0, [r3, #0]
   /* USER CODE BEGIN StartSaveMemoryTask */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 80040ca:	4b83      	ldr	r3, [pc, #524]	; (80042d8 <StartSaveMemoryTask+0x220>)
 80040cc:	6818      	ldr	r0, [r3, #0]
 80040ce:	f04f 33ff 	mov.w	r3, #4294967295
 80040d2:	2202      	movs	r2, #2
 80040d4:	2102      	movs	r1, #2
 80040d6:	f00c f88d 	bl	80101f4 <osEventFlagsWait>
   osEventFlagsWait(C3V1FlagsHandle, NEW_DAY_TO_SAVE, osFlagsWaitAny, osWaitForever);
 80040da:	4b7f      	ldr	r3, [pc, #508]	; (80042d8 <StartSaveMemoryTask+0x220>)
 80040dc:	6818      	ldr	r0, [r3, #0]
 80040de:	f04f 33ff 	mov.w	r3, #4294967295
 80040e2:	2200      	movs	r2, #0
 80040e4:	2120      	movs	r1, #32
 80040e6:	f00c f885 	bl	80101f4 <osEventFlagsWait>
   PageVariable_TypeDef Pv             = { 0 };
 80040ea:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80040ee:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80040f2:	4618      	mov	r0, r3
 80040f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040f8:	461a      	mov	r2, r3
 80040fa:	2100      	movs	r1, #0
 80040fc:	f00f fed0 	bl	8013ea0 <memset>
   MV_TypeDef _Mv                      = { 0 };
 8004100:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8004104:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004108:	4618      	mov	r0, r3
 800410a:	2330      	movs	r3, #48	; 0x30
 800410c:	461a      	mov	r2, r3
 800410e:	2100      	movs	r1, #0
 8004110:	f00f fec6 	bl	8013ea0 <memset>
   uint32_t Cnt                        = 0;
 8004114:	2300      	movs	r3, #0
 8004116:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
   RTC_TimeTypeDef RtcTime             = { 0 };
 800411a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800411e:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8004122:	461a      	mov	r2, r3
 8004124:	2300      	movs	r3, #0
 8004126:	6013      	str	r3, [r2, #0]
 8004128:	6053      	str	r3, [r2, #4]
 800412a:	6093      	str	r3, [r2, #8]
 800412c:	60d3      	str	r3, [r2, #12]
 800412e:	6113      	str	r3, [r2, #16]
   RTC_DateTypeDef RtcDate             = { 0 };
 8004130:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8004134:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004138:	2200      	movs	r2, #0
 800413a:	601a      	str	r2, [r3, #0]
   PageVariable_TypeDef ConfirmPv      = { 0 };
 800413c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8004140:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004144:	4618      	mov	r0, r3
 8004146:	f44f 7380 	mov.w	r3, #256	; 0x100
 800414a:	461a      	mov	r2, r3
 800414c:	2100      	movs	r1, #0
 800414e:	f00f fea7 	bl	8013ea0 <memset>
   FramDateChart_TypeDef FramDateChart = { 0 };
 8004152:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8004156:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800415a:	461a      	mov	r2, r3
 800415c:	2300      	movs	r3, #0
 800415e:	6013      	str	r3, [r2, #0]
 8004160:	6053      	str	r3, [r2, #4]
 8004162:	6093      	str	r3, [r2, #8]
 8004164:	60d3      	str	r3, [r2, #12]
   uint8_t FramDataChartExistFlag      = 0;
 8004166:	2300      	movs	r3, #0
 8004168:	f887 3273 	strb.w	r3, [r7, #627]	; 0x273
   osMutexAcquire(SPI1MutexHandle, osWaitForever);
 800416c:	4b5b      	ldr	r3, [pc, #364]	; (80042dc <StartSaveMemoryTask+0x224>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f04f 31ff 	mov.w	r1, #4294967295
 8004174:	4618      	mov	r0, r3
 8004176:	f00c f929 	bl	80103cc <osMutexAcquire>
   uint32_t PageCnt          = fram_Read32(&Fram, LAST_PAGE_NUMBER_ADDR);
 800417a:	2100      	movs	r1, #0
 800417c:	4858      	ldr	r0, [pc, #352]	; (80042e0 <StartSaveMemoryTask+0x228>)
 800417e:	f7ff f879 	bl	8003274 <fram_Read32>
 8004182:	f8c7 026c 	str.w	r0, [r7, #620]	; 0x26c
   uint32_t FramDateChartCnt = fram_Read32(&Fram, DATE_CHART_CNT_ADDR);
 8004186:	2104      	movs	r1, #4
 8004188:	4855      	ldr	r0, [pc, #340]	; (80042e0 <StartSaveMemoryTask+0x228>)
 800418a:	f7ff f873 	bl	8003274 <fram_Read32>
 800418e:	f8c7 0264 	str.w	r0, [r7, #612]	; 0x264
   osMutexRelease(SPI1MutexHandle);
 8004192:	4b52      	ldr	r3, [pc, #328]	; (80042dc <StartSaveMemoryTask+0x224>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4618      	mov	r0, r3
 8004198:	f00c f963 	bl	8010462 <osMutexRelease>
   HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 800419c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80041a0:	2200      	movs	r2, #0
 80041a2:	4619      	mov	r1, r3
 80041a4:	484f      	ldr	r0, [pc, #316]	; (80042e4 <StartSaveMemoryTask+0x22c>)
 80041a6:	f007 fd8d 	bl	800bcc4 <HAL_RTC_GetTime>
   HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 80041aa:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80041ae:	2200      	movs	r2, #0
 80041b0:	4619      	mov	r1, r3
 80041b2:	484c      	ldr	r0, [pc, #304]	; (80042e4 <StartSaveMemoryTask+0x22c>)
 80041b4:	f007 fe70 	bl	800be98 <HAL_RTC_GetDate>
   if(FramDateChartCnt == 0)
 80041b8:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d149      	bne.n	8004254 <StartSaveMemoryTask+0x19c>
   {
      FramDateChart.Date           = RtcDate.Date;
 80041c0:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80041c4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80041c8:	789a      	ldrb	r2, [r3, #2]
 80041ca:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80041ce:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80041d2:	701a      	strb	r2, [r3, #0]
      FramDateChart.Month          = RtcDate.Month;
 80041d4:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80041d8:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80041dc:	785a      	ldrb	r2, [r3, #1]
 80041de:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80041e2:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80041e6:	705a      	strb	r2, [r3, #1]
      FramDateChart.Year           = RtcDate.Year;
 80041e8:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80041ec:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80041f0:	78da      	ldrb	r2, [r3, #3]
 80041f2:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80041f6:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80041fa:	709a      	strb	r2, [r3, #2]
      FramDateChart.StartFlashPage = PageCnt;
 80041fc:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8004200:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8004204:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 8004208:	605a      	str	r2, [r3, #4]
      FramDateChart.Length         = 0;
 800420a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800420e:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8004212:	2200      	movs	r2, #0
 8004214:	721a      	strb	r2, [r3, #8]
      FramDateChart.Crc            = CRC_INITIAL_VALUE;
 8004216:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800421a:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800421e:	f04f 32ff 	mov.w	r2, #4294967295
 8004222:	60da      	str	r2, [r3, #12]
      osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8004224:	4b2d      	ldr	r3, [pc, #180]	; (80042dc <StartSaveMemoryTask+0x224>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f04f 31ff 	mov.w	r1, #4294967295
 800422c:	4618      	mov	r0, r3
 800422e:	f00c f8cd 	bl	80103cc <osMutexAcquire>
      fram_Write(&Fram, DATE_CHART_ADDR_START, &FramDateChart, sizeof(FramDateChart_TypeDef));
 8004232:	f107 020c 	add.w	r2, r7, #12
 8004236:	2310      	movs	r3, #16
 8004238:	2108      	movs	r1, #8
 800423a:	4829      	ldr	r0, [pc, #164]	; (80042e0 <StartSaveMemoryTask+0x228>)
 800423c:	f7ff f89f 	bl	800337e <fram_Write>
      fram_Increment32(&Fram, DATE_CHART_CNT_ADDR);
 8004240:	2104      	movs	r1, #4
 8004242:	4827      	ldr	r0, [pc, #156]	; (80042e0 <StartSaveMemoryTask+0x228>)
 8004244:	f7ff f852 	bl	80032ec <fram_Increment32>
      osMutexRelease(SPI1MutexHandle);
 8004248:	4b24      	ldr	r3, [pc, #144]	; (80042dc <StartSaveMemoryTask+0x224>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4618      	mov	r0, r3
 800424e:	f00c f908 	bl	8010462 <osMutexRelease>
 8004252:	e0ab      	b.n	80043ac <StartSaveMemoryTask+0x2f4>
   }
   else
   {
      for(int i = DATE_CHART_ADDR_START; i < DATE_CHART_ADDR_END; i += sizeof(FramDateChart_TypeDef))
 8004254:	2308      	movs	r3, #8
 8004256:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 800425a:	e04a      	b.n	80042f2 <StartSaveMemoryTask+0x23a>
      {
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 800425c:	4b1f      	ldr	r3, [pc, #124]	; (80042dc <StartSaveMemoryTask+0x224>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f04f 31ff 	mov.w	r1, #4294967295
 8004264:	4618      	mov	r0, r3
 8004266:	f00c f8b1 	bl	80103cc <osMutexAcquire>
         fram_Read(&Fram, i, &FramDateChart, sizeof(FramDateChart_TypeDef));
 800426a:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 800426e:	b299      	uxth	r1, r3
 8004270:	f107 020c 	add.w	r2, r7, #12
 8004274:	2310      	movs	r3, #16
 8004276:	481a      	ldr	r0, [pc, #104]	; (80042e0 <StartSaveMemoryTask+0x228>)
 8004278:	f7ff f8b3 	bl	80033e2 <fram_Read>
         osMutexRelease(SPI1MutexHandle);
 800427c:	4b17      	ldr	r3, [pc, #92]	; (80042dc <StartSaveMemoryTask+0x224>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4618      	mov	r0, r3
 8004282:	f00c f8ee 	bl	8010462 <osMutexRelease>
         if(FramDateChart.Date == RtcDate.Date && FramDateChart.Month == RtcDate.Month && FramDateChart.Year == RtcDate.Year)
 8004286:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800428a:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800428e:	781a      	ldrb	r2, [r3, #0]
 8004290:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8004294:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004298:	789b      	ldrb	r3, [r3, #2]
 800429a:	429a      	cmp	r2, r3
 800429c:	d124      	bne.n	80042e8 <StartSaveMemoryTask+0x230>
 800429e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80042a2:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80042a6:	785a      	ldrb	r2, [r3, #1]
 80042a8:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80042ac:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80042b0:	785b      	ldrb	r3, [r3, #1]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d118      	bne.n	80042e8 <StartSaveMemoryTask+0x230>
 80042b6:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80042ba:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80042be:	789a      	ldrb	r2, [r3, #2]
 80042c0:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80042c4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80042c8:	78db      	ldrb	r3, [r3, #3]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d10c      	bne.n	80042e8 <StartSaveMemoryTask+0x230>
         {
            FramDataChartExistFlag = 1;
 80042ce:	2301      	movs	r3, #1
 80042d0:	f887 3273 	strb.w	r3, [r7, #627]	; 0x273
            break;
 80042d4:	e013      	b.n	80042fe <StartSaveMemoryTask+0x246>
 80042d6:	bf00      	nop
 80042d8:	20003e1c 	.word	0x20003e1c
 80042dc:	20003e0c 	.word	0x20003e0c
 80042e0:	20003da8 	.word	0x20003da8
 80042e4:	20003f40 	.word	0x20003f40
      for(int i = DATE_CHART_ADDR_START; i < DATE_CHART_ADDR_END; i += sizeof(FramDateChart_TypeDef))
 80042e8:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 80042ec:	3310      	adds	r3, #16
 80042ee:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 80042f2:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 80042f6:	f241 7277 	movw	r2, #6007	; 0x1777
 80042fa:	4293      	cmp	r3, r2
 80042fc:	ddae      	ble.n	800425c <StartSaveMemoryTask+0x1a4>
         }
      }
      if(FramDataChartExistFlag == 0)
 80042fe:	f897 3273 	ldrb.w	r3, [r7, #627]	; 0x273
 8004302:	2b00      	cmp	r3, #0
 8004304:	d152      	bne.n	80043ac <StartSaveMemoryTask+0x2f4>
      {
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8004306:	4b9b      	ldr	r3, [pc, #620]	; (8004574 <StartSaveMemoryTask+0x4bc>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f04f 31ff 	mov.w	r1, #4294967295
 800430e:	4618      	mov	r0, r3
 8004310:	f00c f85c 	bl	80103cc <osMutexAcquire>
         fram_Increment32(&Fram, DATE_CHART_CNT_ADDR);
 8004314:	2104      	movs	r1, #4
 8004316:	4898      	ldr	r0, [pc, #608]	; (8004578 <StartSaveMemoryTask+0x4c0>)
 8004318:	f7fe ffe8 	bl	80032ec <fram_Increment32>
         FramDateChart.Date           = RtcDate.Date;
 800431c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8004320:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004324:	789a      	ldrb	r2, [r3, #2]
 8004326:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800432a:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800432e:	701a      	strb	r2, [r3, #0]
         FramDateChart.Month          = RtcDate.Month;
 8004330:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8004334:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004338:	785a      	ldrb	r2, [r3, #1]
 800433a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800433e:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8004342:	705a      	strb	r2, [r3, #1]
         FramDateChart.Year           = RtcDate.Year;
 8004344:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8004348:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800434c:	78da      	ldrb	r2, [r3, #3]
 800434e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8004352:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8004356:	709a      	strb	r2, [r3, #2]
         FramDateChart.StartFlashPage = PageCnt;
 8004358:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800435c:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8004360:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 8004364:	605a      	str	r2, [r3, #4]
         FramDateChart.Length         = 0;
 8004366:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800436a:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800436e:	2200      	movs	r2, #0
 8004370:	721a      	strb	r2, [r3, #8]
         FramDateChart.Crc            = CRC_INITIAL_VALUE;
 8004372:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8004376:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800437a:	f04f 32ff 	mov.w	r2, #4294967295
 800437e:	60da      	str	r2, [r3, #12]
         FramDateChartCnt             = fram_Read32(&Fram, DATE_CHART_CNT_ADDR);
 8004380:	2104      	movs	r1, #4
 8004382:	487d      	ldr	r0, [pc, #500]	; (8004578 <StartSaveMemoryTask+0x4c0>)
 8004384:	f7fe ff76 	bl	8003274 <fram_Read32>
 8004388:	f8c7 0264 	str.w	r0, [r7, #612]	; 0x264
         fram_Write(&Fram, DATE_CHART_ADDR_START * FramDateChartCnt, &FramDateChart, sizeof(FramDateChart_TypeDef));
 800438c:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8004390:	b29b      	uxth	r3, r3
 8004392:	00db      	lsls	r3, r3, #3
 8004394:	b299      	uxth	r1, r3
 8004396:	f107 020c 	add.w	r2, r7, #12
 800439a:	2310      	movs	r3, #16
 800439c:	4876      	ldr	r0, [pc, #472]	; (8004578 <StartSaveMemoryTask+0x4c0>)
 800439e:	f7fe ffee 	bl	800337e <fram_Write>
         osMutexRelease(SPI1MutexHandle);
 80043a2:	4b74      	ldr	r3, [pc, #464]	; (8004574 <StartSaveMemoryTask+0x4bc>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4618      	mov	r0, r3
 80043a8:	f00c f85b 	bl	8010462 <osMutexRelease>
      }
   }
   /* Infinite loop */
   for(;;)
   {
      osMessageQueueGet(DataToSaveQueueHandle, &_Mv, 0, osWaitForever);
 80043ac:	4b73      	ldr	r3, [pc, #460]	; (800457c <StartSaveMemoryTask+0x4c4>)
 80043ae:	6818      	ldr	r0, [r3, #0]
 80043b0:	f507 719a 	add.w	r1, r7, #308	; 0x134
 80043b4:	f04f 33ff 	mov.w	r3, #4294967295
 80043b8:	2200      	movs	r2, #0
 80043ba:	f00c f963 	bl	8010684 <osMessageQueueGet>
      HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 80043be:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80043c2:	2200      	movs	r2, #0
 80043c4:	4619      	mov	r1, r3
 80043c6:	486e      	ldr	r0, [pc, #440]	; (8004580 <StartSaveMemoryTask+0x4c8>)
 80043c8:	f007 fc7c 	bl	800bcc4 <HAL_RTC_GetTime>
      HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 80043cc:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80043d0:	2200      	movs	r2, #0
 80043d2:	4619      	mov	r1, r3
 80043d4:	486a      	ldr	r0, [pc, #424]	; (8004580 <StartSaveMemoryTask+0x4c8>)
 80043d6:	f007 fd5f 	bl	800be98 <HAL_RTC_GetDate>
      if(osEventFlagsWait(C3V1FlagsHandle, NEW_DAY_TO_SAVE, osFlagsWaitAny, 1) != osFlagsErrorTimeout)
 80043da:	4b6a      	ldr	r3, [pc, #424]	; (8004584 <StartSaveMemoryTask+0x4cc>)
 80043dc:	6818      	ldr	r0, [r3, #0]
 80043de:	2301      	movs	r3, #1
 80043e0:	2200      	movs	r2, #0
 80043e2:	2120      	movs	r1, #32
 80043e4:	f00b ff06 	bl	80101f4 <osEventFlagsWait>
 80043e8:	4603      	mov	r3, r0
 80043ea:	f113 0f02 	cmn.w	r3, #2
 80043ee:	f000 80cd 	beq.w	800458c <StartSaveMemoryTask+0x4d4>
      {
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 80043f2:	4b60      	ldr	r3, [pc, #384]	; (8004574 <StartSaveMemoryTask+0x4bc>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f04f 31ff 	mov.w	r1, #4294967295
 80043fa:	4618      	mov	r0, r3
 80043fc:	f00b ffe6 	bl	80103cc <osMutexAcquire>
         PageCnt = fram_Read32(&Fram, LAST_PAGE_NUMBER_ADDR);
 8004400:	2100      	movs	r1, #0
 8004402:	485d      	ldr	r0, [pc, #372]	; (8004578 <StartSaveMemoryTask+0x4c0>)
 8004404:	f7fe ff36 	bl	8003274 <fram_Read32>
 8004408:	f8c7 026c 	str.w	r0, [r7, #620]	; 0x26c
         flash_WritePage(&Flash, PageCnt, &Pv, 256);
 800440c:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8004410:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004414:	f8d7 126c 	ldr.w	r1, [r7, #620]	; 0x26c
 8004418:	485b      	ldr	r0, [pc, #364]	; (8004588 <StartSaveMemoryTask+0x4d0>)
 800441a:	f7fe fe7d 	bl	8003118 <flash_WritePage>
         flash_ReadDataBytes(&Flash, PageCnt, &ConfirmPv, 256);
 800441e:	f107 021c 	add.w	r2, r7, #28
 8004422:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004426:	f8d7 126c 	ldr.w	r1, [r7, #620]	; 0x26c
 800442a:	4857      	ldr	r0, [pc, #348]	; (8004588 <StartSaveMemoryTask+0x4d0>)
 800442c:	f7fe fe3d 	bl	80030aa <flash_ReadDataBytes>
         if(Pv.PageCRC == ConfirmPv.PageCRC)
 8004430:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8004434:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004438:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 800443c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8004440:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004444:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8004448:	429a      	cmp	r2, r3
 800444a:	d142      	bne.n	80044d2 <StartSaveMemoryTask+0x41a>
         {
            fram_Increment32(&Fram, LAST_PAGE_NUMBER_ADDR);
 800444c:	2100      	movs	r1, #0
 800444e:	484a      	ldr	r0, [pc, #296]	; (8004578 <StartSaveMemoryTask+0x4c0>)
 8004450:	f7fe ff4c 	bl	80032ec <fram_Increment32>
            PageCnt = fram_Read32(&Fram, LAST_PAGE_NUMBER_ADDR);
 8004454:	2100      	movs	r1, #0
 8004456:	4848      	ldr	r0, [pc, #288]	; (8004578 <StartSaveMemoryTask+0x4c0>)
 8004458:	f7fe ff0c 	bl	8003274 <fram_Read32>
 800445c:	f8c7 026c 	str.w	r0, [r7, #620]	; 0x26c
            FramDateChart.Length++;
 8004460:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8004464:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8004468:	7a1b      	ldrb	r3, [r3, #8]
 800446a:	3301      	adds	r3, #1
 800446c:	b2da      	uxtb	r2, r3
 800446e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8004472:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8004476:	721a      	strb	r2, [r3, #8]
            FramDateChart.Crc = Crc(FramDateChart.Crc, 256, &Pv);
 8004478:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800447c:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8004486:	f44f 7180 	mov.w	r1, #256	; 0x100
 800448a:	4618      	mov	r0, r3
 800448c:	f7fe fa14 	bl	80028b8 <Crc>
 8004490:	4602      	mov	r2, r0
 8004492:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8004496:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800449a:	60da      	str	r2, [r3, #12]
            FramDateChartCnt  = fram_Read32(&Fram, DATE_CHART_CNT_ADDR);
 800449c:	2104      	movs	r1, #4
 800449e:	4836      	ldr	r0, [pc, #216]	; (8004578 <StartSaveMemoryTask+0x4c0>)
 80044a0:	f7fe fee8 	bl	8003274 <fram_Read32>
 80044a4:	f8c7 0264 	str.w	r0, [r7, #612]	; 0x264
            fram_Write(&Fram, DATE_CHART_ADDR_START * FramDateChartCnt, &FramDateChart, sizeof(FramDateChart_TypeDef));
 80044a8:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	00db      	lsls	r3, r3, #3
 80044b0:	b299      	uxth	r1, r3
 80044b2:	f107 020c 	add.w	r2, r7, #12
 80044b6:	2310      	movs	r3, #16
 80044b8:	482f      	ldr	r0, [pc, #188]	; (8004578 <StartSaveMemoryTask+0x4c0>)
 80044ba:	f7fe ff60 	bl	800337e <fram_Write>
            Memory_ClearBuffer(&ConfirmPv);
 80044be:	f107 031c 	add.w	r3, r7, #28
 80044c2:	4618      	mov	r0, r3
 80044c4:	f000 fcc8 	bl	8004e58 <Memory_ClearBuffer>
            Memory_ClearBuffer(&Pv);
 80044c8:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 80044cc:	4618      	mov	r0, r3
 80044ce:	f000 fcc3 	bl	8004e58 <Memory_ClearBuffer>
         }
         fram_Increment32(&Fram, DATE_CHART_CNT_ADDR);
 80044d2:	2104      	movs	r1, #4
 80044d4:	4828      	ldr	r0, [pc, #160]	; (8004578 <StartSaveMemoryTask+0x4c0>)
 80044d6:	f7fe ff09 	bl	80032ec <fram_Increment32>
         FramDateChart.Date           = RtcDate.Date;
 80044da:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80044de:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80044e2:	789a      	ldrb	r2, [r3, #2]
 80044e4:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80044e8:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80044ec:	701a      	strb	r2, [r3, #0]
         FramDateChart.Month          = RtcDate.Month;
 80044ee:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80044f2:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80044f6:	785a      	ldrb	r2, [r3, #1]
 80044f8:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80044fc:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8004500:	705a      	strb	r2, [r3, #1]
         FramDateChart.Year           = RtcDate.Year;
 8004502:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8004506:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800450a:	78da      	ldrb	r2, [r3, #3]
 800450c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8004510:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8004514:	709a      	strb	r2, [r3, #2]
         FramDateChart.StartFlashPage = PageCnt;
 8004516:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800451a:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800451e:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 8004522:	605a      	str	r2, [r3, #4]
         FramDateChart.Length         = 0;
 8004524:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8004528:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800452c:	2200      	movs	r2, #0
 800452e:	721a      	strb	r2, [r3, #8]
         FramDateChart.Crc            = CRC_INITIAL_VALUE;
 8004530:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8004534:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8004538:	f04f 32ff 	mov.w	r2, #4294967295
 800453c:	60da      	str	r2, [r3, #12]
         FramDateChartCnt             = fram_Read32(&Fram, DATE_CHART_CNT_ADDR);
 800453e:	2104      	movs	r1, #4
 8004540:	480d      	ldr	r0, [pc, #52]	; (8004578 <StartSaveMemoryTask+0x4c0>)
 8004542:	f7fe fe97 	bl	8003274 <fram_Read32>
 8004546:	f8c7 0264 	str.w	r0, [r7, #612]	; 0x264
         fram_Write(&Fram, DATE_CHART_ADDR_START * FramDateChartCnt, &FramDateChart, sizeof(FramDateChart_TypeDef));
 800454a:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 800454e:	b29b      	uxth	r3, r3
 8004550:	00db      	lsls	r3, r3, #3
 8004552:	b299      	uxth	r1, r3
 8004554:	f107 020c 	add.w	r2, r7, #12
 8004558:	2310      	movs	r3, #16
 800455a:	4807      	ldr	r0, [pc, #28]	; (8004578 <StartSaveMemoryTask+0x4c0>)
 800455c:	f7fe ff0f 	bl	800337e <fram_Write>
         Cnt = 0;
 8004560:	2300      	movs	r3, #0
 8004562:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
         osMutexRelease(SPI1MutexHandle);
 8004566:	4b03      	ldr	r3, [pc, #12]	; (8004574 <StartSaveMemoryTask+0x4bc>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4618      	mov	r0, r3
 800456c:	f00b ff79 	bl	8010462 <osMutexRelease>
 8004570:	e00c      	b.n	800458c <StartSaveMemoryTask+0x4d4>
 8004572:	bf00      	nop
 8004574:	20003e0c 	.word	0x20003e0c
 8004578:	20003da8 	.word	0x20003da8
 800457c:	20003dfc 	.word	0x20003dfc
 8004580:	20003f40 	.word	0x20003f40
 8004584:	20003e1c 	.word	0x20003e1c
 8004588:	20003d98 	.word	0x20003d98
      }
      Pv.Record[Cnt].ExternalHumidity    = _Mv.ExtHumidity;
 800458c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8004590:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004594:	6859      	ldr	r1, [r3, #4]
 8004596:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800459a:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 800459e:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 80045a2:	4613      	mov	r3, r2
 80045a4:	00db      	lsls	r3, r3, #3
 80045a6:	1a9b      	subs	r3, r3, r2
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	4403      	add	r3, r0
 80045ac:	3318      	adds	r3, #24
 80045ae:	6019      	str	r1, [r3, #0]
      Pv.Record[Cnt].ExternalPM1         = _Mv.ExtPM1;
 80045b0:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80045b4:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80045b8:	8a98      	ldrh	r0, [r3, #20]
 80045ba:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80045be:	f5a3 718a 	sub.w	r1, r3, #276	; 0x114
 80045c2:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 80045c6:	4613      	mov	r3, r2
 80045c8:	00db      	lsls	r3, r3, #3
 80045ca:	1a9b      	subs	r3, r3, r2
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	440b      	add	r3, r1
 80045d0:	330a      	adds	r3, #10
 80045d2:	4602      	mov	r2, r0
 80045d4:	801a      	strh	r2, [r3, #0]
      Pv.Record[Cnt].ExternalPM10        = _Mv.ExtPM10;
 80045d6:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80045da:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80045de:	8b18      	ldrh	r0, [r3, #24]
 80045e0:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80045e4:	f5a3 718a 	sub.w	r1, r3, #276	; 0x114
 80045e8:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 80045ec:	4613      	mov	r3, r2
 80045ee:	00db      	lsls	r3, r3, #3
 80045f0:	1a9b      	subs	r3, r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	440b      	add	r3, r1
 80045f6:	330e      	adds	r3, #14
 80045f8:	4602      	mov	r2, r0
 80045fa:	801a      	strh	r2, [r3, #0]
      Pv.Record[Cnt].ExternalPM25        = _Mv.ExtPM25;
 80045fc:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8004600:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004604:	8ad8      	ldrh	r0, [r3, #22]
 8004606:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800460a:	f5a3 718a 	sub.w	r1, r3, #276	; 0x114
 800460e:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8004612:	4613      	mov	r3, r2
 8004614:	00db      	lsls	r3, r3, #3
 8004616:	1a9b      	subs	r3, r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	440b      	add	r3, r1
 800461c:	330c      	adds	r3, #12
 800461e:	4602      	mov	r2, r0
 8004620:	801a      	strh	r2, [r3, #0]
      Pv.Record[Cnt].ExternalTemperature = _Mv.ExtTemperature;
 8004622:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8004626:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800462a:	6819      	ldr	r1, [r3, #0]
 800462c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8004630:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8004634:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8004638:	4613      	mov	r3, r2
 800463a:	00db      	lsls	r3, r3, #3
 800463c:	1a9b      	subs	r3, r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	4403      	add	r3, r0
 8004642:	3314      	adds	r3, #20
 8004644:	6019      	str	r1, [r3, #0]
      Pv.Record[Cnt].Hour                = RtcTime.Hours;
 8004646:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800464a:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800464e:	7818      	ldrb	r0, [r3, #0]
 8004650:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8004654:	f5a3 718a 	sub.w	r1, r3, #276	; 0x114
 8004658:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 800465c:	4613      	mov	r3, r2
 800465e:	00db      	lsls	r3, r3, #3
 8004660:	1a9b      	subs	r3, r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	440b      	add	r3, r1
 8004666:	3303      	adds	r3, #3
 8004668:	4602      	mov	r2, r0
 800466a:	701a      	strb	r2, [r3, #0]
      Pv.Record[Cnt].InternalPM1         = _Mv.InternalPM1;
 800466c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8004670:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004674:	8b58      	ldrh	r0, [r3, #26]
 8004676:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800467a:	f5a3 718a 	sub.w	r1, r3, #276	; 0x114
 800467e:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8004682:	4613      	mov	r3, r2
 8004684:	00db      	lsls	r3, r3, #3
 8004686:	1a9b      	subs	r3, r3, r2
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	440b      	add	r3, r1
 800468c:	3304      	adds	r3, #4
 800468e:	4602      	mov	r2, r0
 8004690:	801a      	strh	r2, [r3, #0]
      Pv.Record[Cnt].InternalPM10        = _Mv.InternalPM10;
 8004692:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8004696:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800469a:	8bd8      	ldrh	r0, [r3, #30]
 800469c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80046a0:	f5a3 718a 	sub.w	r1, r3, #276	; 0x114
 80046a4:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 80046a8:	4613      	mov	r3, r2
 80046aa:	00db      	lsls	r3, r3, #3
 80046ac:	1a9b      	subs	r3, r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	440b      	add	r3, r1
 80046b2:	3308      	adds	r3, #8
 80046b4:	4602      	mov	r2, r0
 80046b6:	801a      	strh	r2, [r3, #0]
      Pv.Record[Cnt].InternalPM25        = _Mv.InternalPM25;
 80046b8:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80046bc:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80046c0:	8b98      	ldrh	r0, [r3, #28]
 80046c2:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80046c6:	f5a3 718a 	sub.w	r1, r3, #276	; 0x114
 80046ca:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 80046ce:	4613      	mov	r3, r2
 80046d0:	00db      	lsls	r3, r3, #3
 80046d2:	1a9b      	subs	r3, r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	440b      	add	r3, r1
 80046d8:	3306      	adds	r3, #6
 80046da:	4602      	mov	r2, r0
 80046dc:	801a      	strh	r2, [r3, #0]
      Pv.Record[Cnt].Minute              = RtcTime.Minutes;
 80046de:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80046e2:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80046e6:	7858      	ldrb	r0, [r3, #1]
 80046e8:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80046ec:	f5a3 718a 	sub.w	r1, r3, #276	; 0x114
 80046f0:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 80046f4:	4613      	mov	r3, r2
 80046f6:	00db      	lsls	r3, r3, #3
 80046f8:	1a9b      	subs	r3, r3, r2
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	440b      	add	r3, r1
 80046fe:	3302      	adds	r3, #2
 8004700:	4602      	mov	r2, r0
 8004702:	701a      	strb	r2, [r3, #0]
      Pv.Record[Cnt].Pressure            = _Mv.Pressure;
 8004704:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8004708:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800470c:	6919      	ldr	r1, [r3, #16]
 800470e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8004712:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8004716:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 800471a:	4613      	mov	r3, r2
 800471c:	00db      	lsls	r3, r3, #3
 800471e:	1a9b      	subs	r3, r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	4403      	add	r3, r0
 8004724:	3310      	adds	r3, #16
 8004726:	6019      	str	r1, [r3, #0]
      Pv.Record[Cnt].Reserved            = Cnt;
 8004728:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 800472c:	b2d8      	uxtb	r0, r3
 800472e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8004732:	f5a3 718a 	sub.w	r1, r3, #276	; 0x114
 8004736:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 800473a:	4613      	mov	r3, r2
 800473c:	00db      	lsls	r3, r3, #3
 800473e:	1a9b      	subs	r3, r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	440b      	add	r3, r1
 8004744:	4602      	mov	r2, r0
 8004746:	701a      	strb	r2, [r3, #0]
      Pv.Record[Cnt].Second              = RtcTime.Seconds;
 8004748:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800474c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8004750:	7898      	ldrb	r0, [r3, #2]
 8004752:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8004756:	f5a3 718a 	sub.w	r1, r3, #276	; 0x114
 800475a:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 800475e:	4613      	mov	r3, r2
 8004760:	00db      	lsls	r3, r3, #3
 8004762:	1a9b      	subs	r3, r3, r2
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	440b      	add	r3, r1
 8004768:	3301      	adds	r3, #1
 800476a:	4602      	mov	r2, r0
 800476c:	701a      	strb	r2, [r3, #0]
      Cnt++;
 800476e:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8004772:	3301      	adds	r3, #1
 8004774:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
      if(Cnt == 9)
 8004778:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 800477c:	2b09      	cmp	r3, #9
 800477e:	f040 8087 	bne.w	8004890 <StartSaveMemoryTask+0x7d8>
      {
         Cnt        = 0;
 8004782:	2300      	movs	r3, #0
 8004784:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
         Pv.PageCRC = Crc(CRC_INITIAL_VALUE, 252, &Pv);
 8004788:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800478c:	461a      	mov	r2, r3
 800478e:	21fc      	movs	r1, #252	; 0xfc
 8004790:	f04f 30ff 	mov.w	r0, #4294967295
 8004794:	f7fe f890 	bl	80028b8 <Crc>
 8004798:	4602      	mov	r2, r0
 800479a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800479e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80047a2:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 80047a6:	4b3c      	ldr	r3, [pc, #240]	; (8004898 <StartSaveMemoryTask+0x7e0>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f04f 31ff 	mov.w	r1, #4294967295
 80047ae:	4618      	mov	r0, r3
 80047b0:	f00b fe0c 	bl	80103cc <osMutexAcquire>
         PageCnt = fram_Read32(&Fram, LAST_PAGE_NUMBER_ADDR);
 80047b4:	2100      	movs	r1, #0
 80047b6:	4839      	ldr	r0, [pc, #228]	; (800489c <StartSaveMemoryTask+0x7e4>)
 80047b8:	f7fe fd5c 	bl	8003274 <fram_Read32>
 80047bc:	f8c7 026c 	str.w	r0, [r7, #620]	; 0x26c
         flash_WritePage(&Flash, PageCnt, &Pv, 256);
 80047c0:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 80047c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80047c8:	f8d7 126c 	ldr.w	r1, [r7, #620]	; 0x26c
 80047cc:	4834      	ldr	r0, [pc, #208]	; (80048a0 <StartSaveMemoryTask+0x7e8>)
 80047ce:	f7fe fca3 	bl	8003118 <flash_WritePage>
         flash_ReadDataBytes(&Flash, PageCnt, &ConfirmPv, 256);
 80047d2:	f107 021c 	add.w	r2, r7, #28
 80047d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80047da:	f8d7 126c 	ldr.w	r1, [r7, #620]	; 0x26c
 80047de:	4830      	ldr	r0, [pc, #192]	; (80048a0 <StartSaveMemoryTask+0x7e8>)
 80047e0:	f7fe fc63 	bl	80030aa <flash_ReadDataBytes>
         if(Pv.PageCRC == ConfirmPv.PageCRC)
 80047e4:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80047e8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80047ec:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 80047f0:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80047f4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80047f8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d142      	bne.n	8004886 <StartSaveMemoryTask+0x7ce>
         {
            fram_Increment32(&Fram, LAST_PAGE_NUMBER_ADDR);
 8004800:	2100      	movs	r1, #0
 8004802:	4826      	ldr	r0, [pc, #152]	; (800489c <StartSaveMemoryTask+0x7e4>)
 8004804:	f7fe fd72 	bl	80032ec <fram_Increment32>
            PageCnt = fram_Read32(&Fram, LAST_PAGE_NUMBER_ADDR);
 8004808:	2100      	movs	r1, #0
 800480a:	4824      	ldr	r0, [pc, #144]	; (800489c <StartSaveMemoryTask+0x7e4>)
 800480c:	f7fe fd32 	bl	8003274 <fram_Read32>
 8004810:	f8c7 026c 	str.w	r0, [r7, #620]	; 0x26c
            FramDateChart.Length++;
 8004814:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8004818:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800481c:	7a1b      	ldrb	r3, [r3, #8]
 800481e:	3301      	adds	r3, #1
 8004820:	b2da      	uxtb	r2, r3
 8004822:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8004826:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800482a:	721a      	strb	r2, [r3, #8]
            FramDateChart.Crc = Crc(FramDateChart.Crc, 256, &Pv);
 800482c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8004830:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 800483a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800483e:	4618      	mov	r0, r3
 8004840:	f7fe f83a 	bl	80028b8 <Crc>
 8004844:	4602      	mov	r2, r0
 8004846:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800484a:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800484e:	60da      	str	r2, [r3, #12]
            FramDateChartCnt  = fram_Read32(&Fram, DATE_CHART_CNT_ADDR);
 8004850:	2104      	movs	r1, #4
 8004852:	4812      	ldr	r0, [pc, #72]	; (800489c <StartSaveMemoryTask+0x7e4>)
 8004854:	f7fe fd0e 	bl	8003274 <fram_Read32>
 8004858:	f8c7 0264 	str.w	r0, [r7, #612]	; 0x264
            fram_Write(&Fram, DATE_CHART_ADDR_START * FramDateChartCnt, &FramDateChart, sizeof(FramDateChart_TypeDef));
 800485c:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8004860:	b29b      	uxth	r3, r3
 8004862:	00db      	lsls	r3, r3, #3
 8004864:	b299      	uxth	r1, r3
 8004866:	f107 020c 	add.w	r2, r7, #12
 800486a:	2310      	movs	r3, #16
 800486c:	480b      	ldr	r0, [pc, #44]	; (800489c <StartSaveMemoryTask+0x7e4>)
 800486e:	f7fe fd86 	bl	800337e <fram_Write>
            Memory_ClearBuffer(&ConfirmPv);
 8004872:	f107 031c 	add.w	r3, r7, #28
 8004876:	4618      	mov	r0, r3
 8004878:	f000 faee 	bl	8004e58 <Memory_ClearBuffer>
            Memory_ClearBuffer(&Pv);
 800487c:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8004880:	4618      	mov	r0, r3
 8004882:	f000 fae9 	bl	8004e58 <Memory_ClearBuffer>
         }
         osMutexRelease(SPI1MutexHandle);
 8004886:	4b04      	ldr	r3, [pc, #16]	; (8004898 <StartSaveMemoryTask+0x7e0>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4618      	mov	r0, r3
 800488c:	f00b fde9 	bl	8010462 <osMutexRelease>
      }
      osDelay(1);
 8004890:	2001      	movs	r0, #1
 8004892:	f00b fb7f 	bl	800ff94 <osDelay>
      osMessageQueueGet(DataToSaveQueueHandle, &_Mv, 0, osWaitForever);
 8004896:	e589      	b.n	80043ac <StartSaveMemoryTask+0x2f4>
 8004898:	20003e0c 	.word	0x20003e0c
 800489c:	20003da8 	.word	0x20003da8
 80048a0:	20003d98 	.word	0x20003d98

080048a4 <StartChartTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartChartTask */
void StartChartTask(void *argument)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	f5ad 6d2b 	sub.w	sp, sp, #2736	; 0xab0
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80048b0:	f6a3 23ac 	subw	r3, r3, #2732	; 0xaac
 80048b4:	6018      	str	r0, [r3, #0]
   /* USER CODE BEGIN StartChartTask */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 80048b6:	4bc8      	ldr	r3, [pc, #800]	; (8004bd8 <StartChartTask+0x334>)
 80048b8:	6818      	ldr	r0, [r3, #0]
 80048ba:	f04f 33ff 	mov.w	r3, #4294967295
 80048be:	2202      	movs	r2, #2
 80048c0:	2102      	movs	r1, #2
 80048c2:	f00b fc97 	bl	80101f4 <osEventFlagsWait>
   float FloatingPointType[400];
   uint16_t IntegerType[400];
   ChartDateAndType_TypeDef Cda        = { 0 };
 80048c6:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80048ca:	f6a3 1394 	subw	r3, r3, #2452	; 0x994
 80048ce:	2200      	movs	r2, #0
 80048d0:	601a      	str	r2, [r3, #0]
 80048d2:	809a      	strh	r2, [r3, #4]
   uint8_t FramDataChartExistFlag      = 0;
 80048d4:	2300      	movs	r3, #0
 80048d6:	f887 3aaf 	strb.w	r3, [r7, #2735]	; 0xaaf
   FramDateChart_TypeDef FramDateChart = { 0 };
 80048da:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80048de:	f6a3 13a4 	subw	r3, r3, #2468	; 0x9a4
 80048e2:	461a      	mov	r2, r3
 80048e4:	2300      	movs	r3, #0
 80048e6:	6013      	str	r3, [r2, #0]
 80048e8:	6053      	str	r3, [r2, #4]
 80048ea:	6093      	str	r3, [r2, #8]
 80048ec:	60d3      	str	r3, [r2, #12]
   PageVariable_TypeDef Pv             = { 0 };
 80048ee:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80048f2:	f6a3 23a4 	subw	r3, r3, #2724	; 0xaa4
 80048f6:	4618      	mov	r0, r3
 80048f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80048fc:	461a      	mov	r2, r3
 80048fe:	2100      	movs	r1, #0
 8004900:	f00f face 	bl	8013ea0 <memset>
   /* Infinite loop */
   for(;;)
   {
      osMessageQueueGet(ChartQueueHandle, &Cda, 0, osWaitForever);
 8004904:	4bb5      	ldr	r3, [pc, #724]	; (8004bdc <StartChartTask+0x338>)
 8004906:	6818      	ldr	r0, [r3, #0]
 8004908:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 800490c:	f04f 33ff 	mov.w	r3, #4294967295
 8004910:	2200      	movs	r2, #0
 8004912:	f00b feb7 	bl	8010684 <osMessageQueueGet>
      if(Cda.ChartType == PRESSURE || Cda.ChartType == EXTERNAL_TEMPERATURE || Cda.ChartType == EXTERNAL_HUMIDITY)
 8004916:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800491a:	f6a3 1394 	subw	r3, r3, #2452	; 0x994
 800491e:	791b      	ldrb	r3, [r3, #4]
 8004920:	2b06      	cmp	r3, #6
 8004922:	d00e      	beq.n	8004942 <StartChartTask+0x9e>
 8004924:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004928:	f6a3 1394 	subw	r3, r3, #2452	; 0x994
 800492c:	791b      	ldrb	r3, [r3, #4]
 800492e:	2b07      	cmp	r3, #7
 8004930:	d007      	beq.n	8004942 <StartChartTask+0x9e>
 8004932:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004936:	f6a3 1394 	subw	r3, r3, #2452	; 0x994
 800493a:	791b      	ldrb	r3, [r3, #4]
 800493c:	2b08      	cmp	r3, #8
 800493e:	f040 8108 	bne.w	8004b52 <StartChartTask+0x2ae>
      {
         for(int i = DATE_CHART_ADDR_START; i < DATE_CHART_ADDR_END; i += sizeof(FramDateChart_TypeDef))
 8004942:	2308      	movs	r3, #8
 8004944:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
 8004948:	e042      	b.n	80049d0 <StartChartTask+0x12c>
         {
            osMutexAcquire(SPI1MutexHandle, osWaitForever);
 800494a:	4ba5      	ldr	r3, [pc, #660]	; (8004be0 <StartChartTask+0x33c>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f04f 31ff 	mov.w	r1, #4294967295
 8004952:	4618      	mov	r0, r3
 8004954:	f00b fd3a 	bl	80103cc <osMutexAcquire>
            fram_Read(&Fram, i, &FramDateChart, sizeof(FramDateChart_TypeDef));
 8004958:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 800495c:	b299      	uxth	r1, r3
 800495e:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8004962:	2310      	movs	r3, #16
 8004964:	489f      	ldr	r0, [pc, #636]	; (8004be4 <StartChartTask+0x340>)
 8004966:	f7fe fd3c 	bl	80033e2 <fram_Read>
            osMutexRelease(SPI1MutexHandle);
 800496a:	4b9d      	ldr	r3, [pc, #628]	; (8004be0 <StartChartTask+0x33c>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4618      	mov	r0, r3
 8004970:	f00b fd77 	bl	8010462 <osMutexRelease>
            if(FramDateChart.Date == Cda.Date && FramDateChart.Month == Cda.Month && FramDateChart.Year == Cda.Year)
 8004974:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004978:	f6a3 13a4 	subw	r3, r3, #2468	; 0x9a4
 800497c:	781a      	ldrb	r2, [r3, #0]
 800497e:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004982:	f6a3 1394 	subw	r3, r3, #2452	; 0x994
 8004986:	78db      	ldrb	r3, [r3, #3]
 8004988:	429a      	cmp	r2, r3
 800498a:	d11c      	bne.n	80049c6 <StartChartTask+0x122>
 800498c:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004990:	f6a3 13a4 	subw	r3, r3, #2468	; 0x9a4
 8004994:	785a      	ldrb	r2, [r3, #1]
 8004996:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800499a:	f6a3 1394 	subw	r3, r3, #2452	; 0x994
 800499e:	789b      	ldrb	r3, [r3, #2]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d110      	bne.n	80049c6 <StartChartTask+0x122>
 80049a4:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80049a8:	f6a3 13a4 	subw	r3, r3, #2468	; 0x9a4
 80049ac:	789b      	ldrb	r3, [r3, #2]
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80049b4:	f6a3 1394 	subw	r3, r3, #2452	; 0x994
 80049b8:	881b      	ldrh	r3, [r3, #0]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d103      	bne.n	80049c6 <StartChartTask+0x122>
            {
               FramDataChartExistFlag = 1;
 80049be:	2301      	movs	r3, #1
 80049c0:	f887 3aaf 	strb.w	r3, [r7, #2735]	; 0xaaf
               break;
 80049c4:	e00a      	b.n	80049dc <StartChartTask+0x138>
         for(int i = DATE_CHART_ADDR_START; i < DATE_CHART_ADDR_END; i += sizeof(FramDateChart_TypeDef))
 80049c6:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 80049ca:	3310      	adds	r3, #16
 80049cc:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
 80049d0:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 80049d4:	f241 7277 	movw	r2, #6007	; 0x1777
 80049d8:	4293      	cmp	r3, r2
 80049da:	ddb6      	ble.n	800494a <StartChartTask+0xa6>
            }
         }
         if(FramDataChartExistFlag == 1)
 80049dc:	f897 3aaf 	ldrb.w	r3, [r7, #2735]	; 0xaaf
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	f040 8227 	bne.w	8004e34 <StartChartTask+0x590>
         {
            FramDataChartExistFlag = 0;
 80049e6:	2300      	movs	r3, #0
 80049e8:	f887 3aaf 	strb.w	r3, [r7, #2735]	; 0xaaf
            for(int i = 0; i < FramDateChart.Length; i++)
 80049ec:	2300      	movs	r3, #0
 80049ee:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4
 80049f2:	e0a2      	b.n	8004b3a <StartChartTask+0x296>
            {
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 80049f4:	4b7a      	ldr	r3, [pc, #488]	; (8004be0 <StartChartTask+0x33c>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f04f 31ff 	mov.w	r1, #4294967295
 80049fc:	4618      	mov	r0, r3
 80049fe:	f00b fce5 	bl	80103cc <osMutexAcquire>
               flash_ReadDataBytes(&Flash, i + FramDateChart.StartFlashPage, &Pv, 256);
 8004a02:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004a06:	f6a3 13a4 	subw	r3, r3, #2468	; 0x9a4
 8004a0a:	685a      	ldr	r2, [r3, #4]
 8004a0c:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 8004a10:	18d1      	adds	r1, r2, r3
 8004a12:	f107 020c 	add.w	r2, r7, #12
 8004a16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a1a:	4873      	ldr	r0, [pc, #460]	; (8004be8 <StartChartTask+0x344>)
 8004a1c:	f7fe fb45 	bl	80030aa <flash_ReadDataBytes>
               osMutexRelease(SPI1MutexHandle);
 8004a20:	4b6f      	ldr	r3, [pc, #444]	; (8004be0 <StartChartTask+0x33c>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4618      	mov	r0, r3
 8004a26:	f00b fd1c 	bl	8010462 <osMutexRelease>
               uint32_t TempCrc = Crc(CRC_INITIAL_VALUE, 252, &Pv);
 8004a2a:	f107 030c 	add.w	r3, r7, #12
 8004a2e:	461a      	mov	r2, r3
 8004a30:	21fc      	movs	r1, #252	; 0xfc
 8004a32:	f04f 30ff 	mov.w	r0, #4294967295
 8004a36:	f7fd ff3f 	bl	80028b8 <Crc>
 8004a3a:	f8c7 0a88 	str.w	r0, [r7, #2696]	; 0xa88
               if(TempCrc == Pv.PageCRC)
 8004a3e:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004a42:	f6a3 23a4 	subw	r3, r3, #2724	; 0xaa4
 8004a46:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8004a4a:	f8d7 2a88 	ldr.w	r2, [r7, #2696]	; 0xa88
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d16e      	bne.n	8004b30 <StartChartTask+0x28c>
               {
                  for(int j = (i * 9), k = 0; k < 9; k++)
 8004a52:	f8d7 2aa4 	ldr.w	r2, [r7, #2724]	; 0xaa4
 8004a56:	4613      	mov	r3, r2
 8004a58:	00db      	lsls	r3, r3, #3
 8004a5a:	4413      	add	r3, r2
 8004a5c:	f8c7 3a84 	str.w	r3, [r7, #2692]	; 0xa84
 8004a60:	2300      	movs	r3, #0
 8004a62:	f8c7 3aa0 	str.w	r3, [r7, #2720]	; 0xaa0
 8004a66:	e05f      	b.n	8004b28 <StartChartTask+0x284>
                  {
                     if(Cda.ChartType == PRESSURE)
 8004a68:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004a6c:	f6a3 1394 	subw	r3, r3, #2452	; 0x994
 8004a70:	791b      	ldrb	r3, [r3, #4]
 8004a72:	2b06      	cmp	r3, #6
 8004a74:	d119      	bne.n	8004aaa <StartChartTask+0x206>
                     {
                        FloatingPointType[j + k] = Pv.Record[k].Pressure;
 8004a76:	f8d7 2a84 	ldr.w	r2, [r7, #2692]	; 0xa84
 8004a7a:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 8004a7e:	18d0      	adds	r0, r2, r3
 8004a80:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004a84:	f6a3 21a4 	subw	r1, r3, #2724	; 0xaa4
 8004a88:	f8d7 2aa0 	ldr.w	r2, [r7, #2720]	; 0xaa0
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	00db      	lsls	r3, r3, #3
 8004a90:	1a9b      	subs	r3, r3, r2
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	440b      	add	r3, r1
 8004a96:	3310      	adds	r3, #16
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004a9e:	f2a3 616c 	subw	r1, r3, #1644	; 0x66c
 8004aa2:	0083      	lsls	r3, r0, #2
 8004aa4:	440b      	add	r3, r1
 8004aa6:	601a      	str	r2, [r3, #0]
 8004aa8:	e039      	b.n	8004b1e <StartChartTask+0x27a>
                     }
                     else if(Cda.ChartType == EXTERNAL_TEMPERATURE)
 8004aaa:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004aae:	f6a3 1394 	subw	r3, r3, #2452	; 0x994
 8004ab2:	791b      	ldrb	r3, [r3, #4]
 8004ab4:	2b07      	cmp	r3, #7
 8004ab6:	d119      	bne.n	8004aec <StartChartTask+0x248>
                     {
                        FloatingPointType[j + k] = Pv.Record[k].ExternalTemperature;
 8004ab8:	f8d7 2a84 	ldr.w	r2, [r7, #2692]	; 0xa84
 8004abc:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 8004ac0:	18d0      	adds	r0, r2, r3
 8004ac2:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004ac6:	f6a3 21a4 	subw	r1, r3, #2724	; 0xaa4
 8004aca:	f8d7 2aa0 	ldr.w	r2, [r7, #2720]	; 0xaa0
 8004ace:	4613      	mov	r3, r2
 8004ad0:	00db      	lsls	r3, r3, #3
 8004ad2:	1a9b      	subs	r3, r3, r2
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	440b      	add	r3, r1
 8004ad8:	3314      	adds	r3, #20
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004ae0:	f2a3 616c 	subw	r1, r3, #1644	; 0x66c
 8004ae4:	0083      	lsls	r3, r0, #2
 8004ae6:	440b      	add	r3, r1
 8004ae8:	601a      	str	r2, [r3, #0]
 8004aea:	e018      	b.n	8004b1e <StartChartTask+0x27a>
                     }
                     else
                     {
                        FloatingPointType[j + k] = Pv.Record[k].ExternalHumidity;
 8004aec:	f8d7 2a84 	ldr.w	r2, [r7, #2692]	; 0xa84
 8004af0:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 8004af4:	18d0      	adds	r0, r2, r3
 8004af6:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004afa:	f6a3 21a4 	subw	r1, r3, #2724	; 0xaa4
 8004afe:	f8d7 2aa0 	ldr.w	r2, [r7, #2720]	; 0xaa0
 8004b02:	4613      	mov	r3, r2
 8004b04:	00db      	lsls	r3, r3, #3
 8004b06:	1a9b      	subs	r3, r3, r2
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	440b      	add	r3, r1
 8004b0c:	3318      	adds	r3, #24
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004b14:	f2a3 616c 	subw	r1, r3, #1644	; 0x66c
 8004b18:	0083      	lsls	r3, r0, #2
 8004b1a:	440b      	add	r3, r1
 8004b1c:	601a      	str	r2, [r3, #0]
                  for(int j = (i * 9), k = 0; k < 9; k++)
 8004b1e:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 8004b22:	3301      	adds	r3, #1
 8004b24:	f8c7 3aa0 	str.w	r3, [r7, #2720]	; 0xaa0
 8004b28:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 8004b2c:	2b08      	cmp	r3, #8
 8004b2e:	dd9b      	ble.n	8004a68 <StartChartTask+0x1c4>
            for(int i = 0; i < FramDateChart.Length; i++)
 8004b30:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 8004b34:	3301      	adds	r3, #1
 8004b36:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4
 8004b3a:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004b3e:	f6a3 13a4 	subw	r3, r3, #2468	; 0x9a4
 8004b42:	7a1b      	ldrb	r3, [r3, #8]
 8004b44:	461a      	mov	r2, r3
 8004b46:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	f6ff af52 	blt.w	80049f4 <StartChartTask+0x150>
         if(FramDataChartExistFlag == 1)
 8004b50:	e170      	b.n	8004e34 <StartChartTask+0x590>

         // TODO wyswietlanie i obrabianie danych
      }
      else
      {
         for(int i = DATE_CHART_ADDR_START; i < DATE_CHART_ADDR_END; i += sizeof(FramDateChart_TypeDef))
 8004b52:	2308      	movs	r3, #8
 8004b54:	f8c7 3a9c 	str.w	r3, [r7, #2716]	; 0xa9c
 8004b58:	e04d      	b.n	8004bf6 <StartChartTask+0x352>
         {
            osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8004b5a:	4b21      	ldr	r3, [pc, #132]	; (8004be0 <StartChartTask+0x33c>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f04f 31ff 	mov.w	r1, #4294967295
 8004b62:	4618      	mov	r0, r3
 8004b64:	f00b fc32 	bl	80103cc <osMutexAcquire>
            fram_Read(&Fram, i, &FramDateChart, sizeof(FramDateChart_TypeDef));
 8004b68:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 8004b6c:	b299      	uxth	r1, r3
 8004b6e:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8004b72:	2310      	movs	r3, #16
 8004b74:	481b      	ldr	r0, [pc, #108]	; (8004be4 <StartChartTask+0x340>)
 8004b76:	f7fe fc34 	bl	80033e2 <fram_Read>
            osMutexRelease(SPI1MutexHandle);
 8004b7a:	4b19      	ldr	r3, [pc, #100]	; (8004be0 <StartChartTask+0x33c>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f00b fc6f 	bl	8010462 <osMutexRelease>
            if(FramDateChart.Date == Cda.Date && FramDateChart.Month == Cda.Month && FramDateChart.Year == Cda.Year)
 8004b84:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004b88:	f6a3 13a4 	subw	r3, r3, #2468	; 0x9a4
 8004b8c:	781a      	ldrb	r2, [r3, #0]
 8004b8e:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004b92:	f6a3 1394 	subw	r3, r3, #2452	; 0x994
 8004b96:	78db      	ldrb	r3, [r3, #3]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d127      	bne.n	8004bec <StartChartTask+0x348>
 8004b9c:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004ba0:	f6a3 13a4 	subw	r3, r3, #2468	; 0x9a4
 8004ba4:	785a      	ldrb	r2, [r3, #1]
 8004ba6:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004baa:	f6a3 1394 	subw	r3, r3, #2452	; 0x994
 8004bae:	789b      	ldrb	r3, [r3, #2]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d11b      	bne.n	8004bec <StartChartTask+0x348>
 8004bb4:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004bb8:	f6a3 13a4 	subw	r3, r3, #2468	; 0x9a4
 8004bbc:	789b      	ldrb	r3, [r3, #2]
 8004bbe:	b29a      	uxth	r2, r3
 8004bc0:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004bc4:	f6a3 1394 	subw	r3, r3, #2452	; 0x994
 8004bc8:	881b      	ldrh	r3, [r3, #0]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d10e      	bne.n	8004bec <StartChartTask+0x348>
            {
               FramDataChartExistFlag = 1;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	f887 3aaf 	strb.w	r3, [r7, #2735]	; 0xaaf
               break;
 8004bd4:	e015      	b.n	8004c02 <StartChartTask+0x35e>
 8004bd6:	bf00      	nop
 8004bd8:	20003e1c 	.word	0x20003e1c
 8004bdc:	20003df8 	.word	0x20003df8
 8004be0:	20003e0c 	.word	0x20003e0c
 8004be4:	20003da8 	.word	0x20003da8
 8004be8:	20003d98 	.word	0x20003d98
         for(int i = DATE_CHART_ADDR_START; i < DATE_CHART_ADDR_END; i += sizeof(FramDateChart_TypeDef))
 8004bec:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 8004bf0:	3310      	adds	r3, #16
 8004bf2:	f8c7 3a9c 	str.w	r3, [r7, #2716]	; 0xa9c
 8004bf6:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 8004bfa:	f241 7277 	movw	r2, #6007	; 0x1777
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	ddab      	ble.n	8004b5a <StartChartTask+0x2b6>
            }
         }
         if(FramDataChartExistFlag == 1)
 8004c02:	f897 3aaf 	ldrb.w	r3, [r7, #2735]	; 0xaaf
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	f040 8114 	bne.w	8004e34 <StartChartTask+0x590>
         {
            FramDataChartExistFlag = 0;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	f887 3aaf 	strb.w	r3, [r7, #2735]	; 0xaaf
            for(int i = 0; i < FramDateChart.Length; i++)
 8004c12:	2300      	movs	r3, #0
 8004c14:	f8c7 3a98 	str.w	r3, [r7, #2712]	; 0xa98
 8004c18:	e101      	b.n	8004e1e <StartChartTask+0x57a>
            {
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8004c1a:	4b88      	ldr	r3, [pc, #544]	; (8004e3c <StartChartTask+0x598>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f04f 31ff 	mov.w	r1, #4294967295
 8004c22:	4618      	mov	r0, r3
 8004c24:	f00b fbd2 	bl	80103cc <osMutexAcquire>
               flash_ReadDataBytes(&Flash, i + FramDateChart.StartFlashPage, &Pv, 256);
 8004c28:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004c2c:	f6a3 13a4 	subw	r3, r3, #2468	; 0x9a4
 8004c30:	685a      	ldr	r2, [r3, #4]
 8004c32:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 8004c36:	18d1      	adds	r1, r2, r3
 8004c38:	f107 020c 	add.w	r2, r7, #12
 8004c3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c40:	487f      	ldr	r0, [pc, #508]	; (8004e40 <StartChartTask+0x59c>)
 8004c42:	f7fe fa32 	bl	80030aa <flash_ReadDataBytes>
               osMutexRelease(SPI1MutexHandle);
 8004c46:	4b7d      	ldr	r3, [pc, #500]	; (8004e3c <StartChartTask+0x598>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f00b fc09 	bl	8010462 <osMutexRelease>
               uint32_t TempCrc = Crc(CRC_INITIAL_VALUE, 252, &Pv);
 8004c50:	f107 030c 	add.w	r3, r7, #12
 8004c54:	461a      	mov	r2, r3
 8004c56:	21fc      	movs	r1, #252	; 0xfc
 8004c58:	f04f 30ff 	mov.w	r0, #4294967295
 8004c5c:	f7fd fe2c 	bl	80028b8 <Crc>
 8004c60:	f8c7 0a90 	str.w	r0, [r7, #2704]	; 0xa90
               if(TempCrc == Pv.PageCRC)
 8004c64:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004c68:	f6a3 23a4 	subw	r3, r3, #2724	; 0xaa4
 8004c6c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8004c70:	f8d7 2a90 	ldr.w	r2, [r7, #2704]	; 0xa90
 8004c74:	429a      	cmp	r2, r3
 8004c76:	f040 80cd 	bne.w	8004e14 <StartChartTask+0x570>
               {
                  for(int j = (i * 9), k = 0; k < 9; k++)
 8004c7a:	f8d7 2a98 	ldr.w	r2, [r7, #2712]	; 0xa98
 8004c7e:	4613      	mov	r3, r2
 8004c80:	00db      	lsls	r3, r3, #3
 8004c82:	4413      	add	r3, r2
 8004c84:	f8c7 3a8c 	str.w	r3, [r7, #2700]	; 0xa8c
 8004c88:	2300      	movs	r3, #0
 8004c8a:	f8c7 3a94 	str.w	r3, [r7, #2708]	; 0xa94
 8004c8e:	e0bc      	b.n	8004e0a <StartChartTask+0x566>
                  {
                     if(Cda.ChartType == INTERNAL_PM1)
 8004c90:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004c94:	f6a3 1394 	subw	r3, r3, #2452	; 0x994
 8004c98:	791b      	ldrb	r3, [r3, #4]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d118      	bne.n	8004cd0 <StartChartTask+0x42c>
                     {
                        IntegerType[j + k] = Pv.Record[k].InternalPM1;
 8004c9e:	f8d7 2a8c 	ldr.w	r2, [r7, #2700]	; 0xa8c
 8004ca2:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 8004ca6:	18d1      	adds	r1, r2, r3
 8004ca8:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004cac:	f6a3 20a4 	subw	r0, r3, #2724	; 0xaa4
 8004cb0:	f8d7 2a94 	ldr.w	r2, [r7, #2708]	; 0xa94
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	00db      	lsls	r3, r3, #3
 8004cb8:	1a9b      	subs	r3, r3, r2
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	4403      	add	r3, r0
 8004cbe:	3304      	adds	r3, #4
 8004cc0:	881a      	ldrh	r2, [r3, #0]
 8004cc2:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004cc6:	f6a3 138c 	subw	r3, r3, #2444	; 0x98c
 8004cca:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 8004cce:	e097      	b.n	8004e00 <StartChartTask+0x55c>
                     }
                     else if(Cda.ChartType == INTERNAL_PM25)
 8004cd0:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004cd4:	f6a3 1394 	subw	r3, r3, #2452	; 0x994
 8004cd8:	791b      	ldrb	r3, [r3, #4]
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d118      	bne.n	8004d10 <StartChartTask+0x46c>
                     {
                        IntegerType[j + k] = Pv.Record[k].InternalPM25;
 8004cde:	f8d7 2a8c 	ldr.w	r2, [r7, #2700]	; 0xa8c
 8004ce2:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 8004ce6:	18d1      	adds	r1, r2, r3
 8004ce8:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004cec:	f6a3 20a4 	subw	r0, r3, #2724	; 0xaa4
 8004cf0:	f8d7 2a94 	ldr.w	r2, [r7, #2708]	; 0xa94
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	00db      	lsls	r3, r3, #3
 8004cf8:	1a9b      	subs	r3, r3, r2
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	4403      	add	r3, r0
 8004cfe:	3306      	adds	r3, #6
 8004d00:	881a      	ldrh	r2, [r3, #0]
 8004d02:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004d06:	f6a3 138c 	subw	r3, r3, #2444	; 0x98c
 8004d0a:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 8004d0e:	e077      	b.n	8004e00 <StartChartTask+0x55c>
                     }
                     else if(Cda.ChartType == INTERNAL_PM10)
 8004d10:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004d14:	f6a3 1394 	subw	r3, r3, #2452	; 0x994
 8004d18:	791b      	ldrb	r3, [r3, #4]
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d118      	bne.n	8004d50 <StartChartTask+0x4ac>
                     {
                        IntegerType[j + k] = Pv.Record[k].InternalPM10;
 8004d1e:	f8d7 2a8c 	ldr.w	r2, [r7, #2700]	; 0xa8c
 8004d22:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 8004d26:	18d1      	adds	r1, r2, r3
 8004d28:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004d2c:	f6a3 20a4 	subw	r0, r3, #2724	; 0xaa4
 8004d30:	f8d7 2a94 	ldr.w	r2, [r7, #2708]	; 0xa94
 8004d34:	4613      	mov	r3, r2
 8004d36:	00db      	lsls	r3, r3, #3
 8004d38:	1a9b      	subs	r3, r3, r2
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	4403      	add	r3, r0
 8004d3e:	3308      	adds	r3, #8
 8004d40:	881a      	ldrh	r2, [r3, #0]
 8004d42:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004d46:	f6a3 138c 	subw	r3, r3, #2444	; 0x98c
 8004d4a:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 8004d4e:	e057      	b.n	8004e00 <StartChartTask+0x55c>
                     }
                     else if(Cda.ChartType == EXTERNAL_PM1)
 8004d50:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004d54:	f6a3 1394 	subw	r3, r3, #2452	; 0x994
 8004d58:	791b      	ldrb	r3, [r3, #4]
 8004d5a:	2b03      	cmp	r3, #3
 8004d5c:	d118      	bne.n	8004d90 <StartChartTask+0x4ec>
                     {
                        IntegerType[j + k] = Pv.Record[k].ExternalPM1;
 8004d5e:	f8d7 2a8c 	ldr.w	r2, [r7, #2700]	; 0xa8c
 8004d62:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 8004d66:	18d1      	adds	r1, r2, r3
 8004d68:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004d6c:	f6a3 20a4 	subw	r0, r3, #2724	; 0xaa4
 8004d70:	f8d7 2a94 	ldr.w	r2, [r7, #2708]	; 0xa94
 8004d74:	4613      	mov	r3, r2
 8004d76:	00db      	lsls	r3, r3, #3
 8004d78:	1a9b      	subs	r3, r3, r2
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	4403      	add	r3, r0
 8004d7e:	330a      	adds	r3, #10
 8004d80:	881a      	ldrh	r2, [r3, #0]
 8004d82:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004d86:	f6a3 138c 	subw	r3, r3, #2444	; 0x98c
 8004d8a:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 8004d8e:	e037      	b.n	8004e00 <StartChartTask+0x55c>
                     }
                     else if(Cda.ChartType == EXTERNAL_PM25)
 8004d90:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004d94:	f6a3 1394 	subw	r3, r3, #2452	; 0x994
 8004d98:	791b      	ldrb	r3, [r3, #4]
 8004d9a:	2b04      	cmp	r3, #4
 8004d9c:	d118      	bne.n	8004dd0 <StartChartTask+0x52c>
                     {
                        IntegerType[j + k] = Pv.Record[k].ExternalPM25;
 8004d9e:	f8d7 2a8c 	ldr.w	r2, [r7, #2700]	; 0xa8c
 8004da2:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 8004da6:	18d1      	adds	r1, r2, r3
 8004da8:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004dac:	f6a3 20a4 	subw	r0, r3, #2724	; 0xaa4
 8004db0:	f8d7 2a94 	ldr.w	r2, [r7, #2708]	; 0xa94
 8004db4:	4613      	mov	r3, r2
 8004db6:	00db      	lsls	r3, r3, #3
 8004db8:	1a9b      	subs	r3, r3, r2
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	4403      	add	r3, r0
 8004dbe:	330c      	adds	r3, #12
 8004dc0:	881a      	ldrh	r2, [r3, #0]
 8004dc2:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004dc6:	f6a3 138c 	subw	r3, r3, #2444	; 0x98c
 8004dca:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 8004dce:	e017      	b.n	8004e00 <StartChartTask+0x55c>
                     }
                     else
                     {
                        IntegerType[j + k] = Pv.Record[k].ExternalPM10;
 8004dd0:	f8d7 2a8c 	ldr.w	r2, [r7, #2700]	; 0xa8c
 8004dd4:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 8004dd8:	18d1      	adds	r1, r2, r3
 8004dda:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004dde:	f6a3 20a4 	subw	r0, r3, #2724	; 0xaa4
 8004de2:	f8d7 2a94 	ldr.w	r2, [r7, #2708]	; 0xa94
 8004de6:	4613      	mov	r3, r2
 8004de8:	00db      	lsls	r3, r3, #3
 8004dea:	1a9b      	subs	r3, r3, r2
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	4403      	add	r3, r0
 8004df0:	330e      	adds	r3, #14
 8004df2:	881a      	ldrh	r2, [r3, #0]
 8004df4:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004df8:	f6a3 138c 	subw	r3, r3, #2444	; 0x98c
 8004dfc:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
                  for(int j = (i * 9), k = 0; k < 9; k++)
 8004e00:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 8004e04:	3301      	adds	r3, #1
 8004e06:	f8c7 3a94 	str.w	r3, [r7, #2708]	; 0xa94
 8004e0a:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 8004e0e:	2b08      	cmp	r3, #8
 8004e10:	f77f af3e 	ble.w	8004c90 <StartChartTask+0x3ec>
            for(int i = 0; i < FramDateChart.Length; i++)
 8004e14:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 8004e18:	3301      	adds	r3, #1
 8004e1a:	f8c7 3a98 	str.w	r3, [r7, #2712]	; 0xa98
 8004e1e:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004e22:	f6a3 13a4 	subw	r3, r3, #2468	; 0x9a4
 8004e26:	7a1b      	ldrb	r3, [r3, #8]
 8004e28:	461a      	mov	r2, r3
 8004e2a:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	f6ff aef3 	blt.w	8004c1a <StartChartTask+0x376>
               }
            }
         }
         // TODO Parsowanie i wyswietlanie
      }
      osDelay(1);
 8004e34:	2001      	movs	r0, #1
 8004e36:	f00b f8ad 	bl	800ff94 <osDelay>
      osMessageQueueGet(ChartQueueHandle, &Cda, 0, osWaitForever);
 8004e3a:	e563      	b.n	8004904 <StartChartTask+0x60>
 8004e3c:	20003e0c 	.word	0x20003e0c
 8004e40:	20003d98 	.word	0x20003d98

08004e44 <MenuTimerCallback>:
   /* USER CODE END StartChartTask */
}

/* MenuTimerCallback function */
void MenuTimerCallback(void *argument)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN MenuTimerCallback */

   /* USER CODE END MenuTimerCallback */
}
 8004e4c:	bf00      	nop
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <Memory_ClearBuffer>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
static void Memory_ClearBuffer(PageVariable_TypeDef *Pv)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b085      	sub	sp, #20
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
   for(int i = 0; i < 9; i++)
 8004e60:	2300      	movs	r3, #0
 8004e62:	60fb      	str	r3, [r7, #12]
 8004e64:	e08f      	b.n	8004f86 <Memory_ClearBuffer+0x12e>
   {
      Pv->Record[i].ExternalHumidity    = 0;
 8004e66:	6879      	ldr	r1, [r7, #4]
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	00db      	lsls	r3, r3, #3
 8004e6e:	1a9b      	subs	r3, r3, r2
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	440b      	add	r3, r1
 8004e74:	3318      	adds	r3, #24
 8004e76:	f04f 0200 	mov.w	r2, #0
 8004e7a:	601a      	str	r2, [r3, #0]
      Pv->Record[i].ExternalPM1         = 0;
 8004e7c:	6879      	ldr	r1, [r7, #4]
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	4613      	mov	r3, r2
 8004e82:	00db      	lsls	r3, r3, #3
 8004e84:	1a9b      	subs	r3, r3, r2
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	440b      	add	r3, r1
 8004e8a:	330a      	adds	r3, #10
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	801a      	strh	r2, [r3, #0]
      Pv->Record[i].ExternalPM10        = 0;
 8004e90:	6879      	ldr	r1, [r7, #4]
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	4613      	mov	r3, r2
 8004e96:	00db      	lsls	r3, r3, #3
 8004e98:	1a9b      	subs	r3, r3, r2
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	440b      	add	r3, r1
 8004e9e:	330e      	adds	r3, #14
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	801a      	strh	r2, [r3, #0]
      Pv->Record[i].ExternalPM25        = 0;
 8004ea4:	6879      	ldr	r1, [r7, #4]
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	00db      	lsls	r3, r3, #3
 8004eac:	1a9b      	subs	r3, r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	440b      	add	r3, r1
 8004eb2:	330c      	adds	r3, #12
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	801a      	strh	r2, [r3, #0]
      Pv->Record[i].ExternalTemperature = 0;
 8004eb8:	6879      	ldr	r1, [r7, #4]
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	00db      	lsls	r3, r3, #3
 8004ec0:	1a9b      	subs	r3, r3, r2
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	440b      	add	r3, r1
 8004ec6:	3314      	adds	r3, #20
 8004ec8:	f04f 0200 	mov.w	r2, #0
 8004ecc:	601a      	str	r2, [r3, #0]
      Pv->Record[i].Hour                = 0;
 8004ece:	6879      	ldr	r1, [r7, #4]
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	00db      	lsls	r3, r3, #3
 8004ed6:	1a9b      	subs	r3, r3, r2
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	440b      	add	r3, r1
 8004edc:	3303      	adds	r3, #3
 8004ede:	2200      	movs	r2, #0
 8004ee0:	701a      	strb	r2, [r3, #0]
      Pv->Record[i].InternalPM1         = 0;
 8004ee2:	6879      	ldr	r1, [r7, #4]
 8004ee4:	68fa      	ldr	r2, [r7, #12]
 8004ee6:	4613      	mov	r3, r2
 8004ee8:	00db      	lsls	r3, r3, #3
 8004eea:	1a9b      	subs	r3, r3, r2
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	440b      	add	r3, r1
 8004ef0:	3304      	adds	r3, #4
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	801a      	strh	r2, [r3, #0]
      Pv->Record[i].InternalPM10        = 0;
 8004ef6:	6879      	ldr	r1, [r7, #4]
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	4613      	mov	r3, r2
 8004efc:	00db      	lsls	r3, r3, #3
 8004efe:	1a9b      	subs	r3, r3, r2
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	440b      	add	r3, r1
 8004f04:	3308      	adds	r3, #8
 8004f06:	2200      	movs	r2, #0
 8004f08:	801a      	strh	r2, [r3, #0]
      Pv->Record[i].InternalPM25        = 0;
 8004f0a:	6879      	ldr	r1, [r7, #4]
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	4613      	mov	r3, r2
 8004f10:	00db      	lsls	r3, r3, #3
 8004f12:	1a9b      	subs	r3, r3, r2
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	440b      	add	r3, r1
 8004f18:	3306      	adds	r3, #6
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	801a      	strh	r2, [r3, #0]
      Pv->Record[i].Minute              = 0;
 8004f1e:	6879      	ldr	r1, [r7, #4]
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	4613      	mov	r3, r2
 8004f24:	00db      	lsls	r3, r3, #3
 8004f26:	1a9b      	subs	r3, r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	440b      	add	r3, r1
 8004f2c:	3302      	adds	r3, #2
 8004f2e:	2200      	movs	r2, #0
 8004f30:	701a      	strb	r2, [r3, #0]
      Pv->Record[i].Pressure            = 0;
 8004f32:	6879      	ldr	r1, [r7, #4]
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	4613      	mov	r3, r2
 8004f38:	00db      	lsls	r3, r3, #3
 8004f3a:	1a9b      	subs	r3, r3, r2
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	440b      	add	r3, r1
 8004f40:	3310      	adds	r3, #16
 8004f42:	f04f 0200 	mov.w	r2, #0
 8004f46:	601a      	str	r2, [r3, #0]
      Pv->Record[i].Reserved            = 0;
 8004f48:	6879      	ldr	r1, [r7, #4]
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	00db      	lsls	r3, r3, #3
 8004f50:	1a9b      	subs	r3, r3, r2
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	440b      	add	r3, r1
 8004f56:	2200      	movs	r2, #0
 8004f58:	701a      	strb	r2, [r3, #0]
      Pv->Record[i].Second              = 0;
 8004f5a:	6879      	ldr	r1, [r7, #4]
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	4613      	mov	r3, r2
 8004f60:	00db      	lsls	r3, r3, #3
 8004f62:	1a9b      	subs	r3, r3, r2
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	440b      	add	r3, r1
 8004f68:	3301      	adds	r3, #1
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	701a      	strb	r2, [r3, #0]
      Pv->Record[i].Reserved            = 0;
 8004f6e:	6879      	ldr	r1, [r7, #4]
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	4613      	mov	r3, r2
 8004f74:	00db      	lsls	r3, r3, #3
 8004f76:	1a9b      	subs	r3, r3, r2
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	440b      	add	r3, r1
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	701a      	strb	r2, [r3, #0]
   for(int i = 0; i < 9; i++)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	3301      	adds	r3, #1
 8004f84:	60fb      	str	r3, [r7, #12]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2b08      	cmp	r3, #8
 8004f8a:	f77f af6c 	ble.w	8004e66 <Memory_ClearBuffer+0xe>
   }
   Pv->PageCRC = CRC_INITIAL_VALUE;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f04f 32ff 	mov.w	r2, #4294967295
 8004f94:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
}
 8004f98:	bf00      	nop
 8004f9a:	3714      	adds	r7, #20
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <RFP_DataFunction>:
static void RFP_DataFunction(uint8_t *Data, uint32_t DataLength, uint32_t DataStart)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b092      	sub	sp, #72	; 0x48
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
   uint8_t *TempPtr;
   MV_TypeDef Mv = { 0 };
 8004fb0:	f107 0314 	add.w	r3, r7, #20
 8004fb4:	2230      	movs	r2, #48	; 0x30
 8004fb6:	2100      	movs	r1, #0
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f00e ff71 	bl	8013ea0 <memset>
   TempPtr       = &Mv.ExtHumidity;
 8004fbe:	f107 0314 	add.w	r3, r7, #20
 8004fc2:	3304      	adds	r3, #4
 8004fc4:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr      = Data[DataStart];
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4413      	add	r3, r2
 8004fcc:	781a      	ldrb	r2, [r3, #0]
 8004fce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fd0:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 8004fd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 1];
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	3301      	adds	r3, #1
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	4413      	add	r3, r2
 8004fe0:	781a      	ldrb	r2, [r3, #0]
 8004fe2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fe4:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 8004fe6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fe8:	3301      	adds	r3, #1
 8004fea:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 2];
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	3302      	adds	r3, #2
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	781a      	ldrb	r2, [r3, #0]
 8004ff6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ff8:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 8004ffa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 3];
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	3303      	adds	r3, #3
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	4413      	add	r3, r2
 8005008:	781a      	ldrb	r2, [r3, #0]
 800500a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800500c:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 800500e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005010:	3301      	adds	r3, #1
 8005012:	647b      	str	r3, [r7, #68]	; 0x44
   TempPtr  = &Mv.ExtTemperature;
 8005014:	f107 0314 	add.w	r3, r7, #20
 8005018:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 5];
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	3305      	adds	r3, #5
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	4413      	add	r3, r2
 8005022:	781a      	ldrb	r2, [r3, #0]
 8005024:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005026:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 8005028:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800502a:	3301      	adds	r3, #1
 800502c:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 6];
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	3306      	adds	r3, #6
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	4413      	add	r3, r2
 8005036:	781a      	ldrb	r2, [r3, #0]
 8005038:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800503a:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 800503c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800503e:	3301      	adds	r3, #1
 8005040:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 7];
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	3307      	adds	r3, #7
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	4413      	add	r3, r2
 800504a:	781a      	ldrb	r2, [r3, #0]
 800504c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800504e:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 8005050:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005052:	3301      	adds	r3, #1
 8005054:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 8];
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	3308      	adds	r3, #8
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	4413      	add	r3, r2
 800505e:	781a      	ldrb	r2, [r3, #0]
 8005060:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005062:	701a      	strb	r2, [r3, #0]
   TempPtr  = &Mv.BatteryVoltage;
 8005064:	f107 0314 	add.w	r3, r7, #20
 8005068:	3328      	adds	r3, #40	; 0x28
 800506a:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 13];
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	330d      	adds	r3, #13
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	4413      	add	r3, r2
 8005074:	781a      	ldrb	r2, [r3, #0]
 8005076:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005078:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 800507a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800507c:	3301      	adds	r3, #1
 800507e:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 14];
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	330e      	adds	r3, #14
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	4413      	add	r3, r2
 8005088:	781a      	ldrb	r2, [r3, #0]
 800508a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800508c:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 800508e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005090:	3301      	adds	r3, #1
 8005092:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 15];
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	330f      	adds	r3, #15
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	4413      	add	r3, r2
 800509c:	781a      	ldrb	r2, [r3, #0]
 800509e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050a0:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 80050a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050a4:	3301      	adds	r3, #1
 80050a6:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr        = Data[DataStart + 16];
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	3310      	adds	r3, #16
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	4413      	add	r3, r2
 80050b0:	781a      	ldrb	r2, [r3, #0]
 80050b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050b4:	701a      	strb	r2, [r3, #0]
   TempPtr         = NULL;
 80050b6:	2300      	movs	r3, #0
 80050b8:	647b      	str	r3, [r7, #68]	; 0x44
   Mv.ExtPM1       = (Data[22 + 3] | (Data[21 + 3] << 8));
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	3319      	adds	r3, #25
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	b21a      	sxth	r2, r3
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	3318      	adds	r3, #24
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	021b      	lsls	r3, r3, #8
 80050ca:	b21b      	sxth	r3, r3
 80050cc:	4313      	orrs	r3, r2
 80050ce:	b21b      	sxth	r3, r3
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	853b      	strh	r3, [r7, #40]	; 0x28
   Mv.ExtPM25      = (Data[28 + 3] | (Data[27 + 3] << 8));
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	331f      	adds	r3, #31
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	b21a      	sxth	r2, r3
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	331e      	adds	r3, #30
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	021b      	lsls	r3, r3, #8
 80050e4:	b21b      	sxth	r3, r3
 80050e6:	4313      	orrs	r3, r2
 80050e8:	b21b      	sxth	r3, r3
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	857b      	strh	r3, [r7, #42]	; 0x2a
   Mv.ExtPM10      = (Data[25 + 3] | (Data[24 + 3] << 8));
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	331c      	adds	r3, #28
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	b21a      	sxth	r2, r3
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	331b      	adds	r3, #27
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	021b      	lsls	r3, r3, #8
 80050fe:	b21b      	sxth	r3, r3
 8005100:	4313      	orrs	r3, r2
 8005102:	b21b      	sxth	r3, r3
 8005104:	b29b      	uxth	r3, r3
 8005106:	85bb      	strh	r3, [r7, #44]	; 0x2c
   Mv.BatteryState = Data[DataStart + 18];
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	3312      	adds	r3, #18
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	4413      	add	r3, r2
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
   osMessageQueuePut(MeasurmentQueueHandle, &Mv, 0, osWaitForever);
 8005116:	4b06      	ldr	r3, [pc, #24]	; (8005130 <RFP_DataFunction+0x18c>)
 8005118:	6818      	ldr	r0, [r3, #0]
 800511a:	f107 0114 	add.w	r1, r7, #20
 800511e:	f04f 33ff 	mov.w	r3, #4294967295
 8005122:	2200      	movs	r2, #0
 8005124:	f00b fa4e 	bl	80105c4 <osMessageQueuePut>
}
 8005128:	bf00      	nop
 800512a:	3748      	adds	r7, #72	; 0x48
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}
 8005130:	20003df0 	.word	0x20003df0

08005134 <rang>:
static double rang(double x)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b086      	sub	sp, #24
 8005138:	af00      	add	r7, sp, #0
 800513a:	ed87 0b00 	vstr	d0, [r7]
   double A, b;
   b = x / 360;
 800513e:	f04f 0200 	mov.w	r2, #0
 8005142:	4b22      	ldr	r3, [pc, #136]	; (80051cc <rang+0x98>)
 8005144:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005148:	f7fb fb98 	bl	800087c <__aeabi_ddiv>
 800514c:	4602      	mov	r2, r0
 800514e:	460b      	mov	r3, r1
 8005150:	e9c7 2302 	strd	r2, r3, [r7, #8]
   A = 360 * (b - (int)b);
 8005154:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005158:	f7fb fd16 	bl	8000b88 <__aeabi_d2iz>
 800515c:	4603      	mov	r3, r0
 800515e:	4618      	mov	r0, r3
 8005160:	f7fb f9f8 	bl	8000554 <__aeabi_i2d>
 8005164:	4602      	mov	r2, r0
 8005166:	460b      	mov	r3, r1
 8005168:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800516c:	f7fb f8a4 	bl	80002b8 <__aeabi_dsub>
 8005170:	4602      	mov	r2, r0
 8005172:	460b      	mov	r3, r1
 8005174:	4610      	mov	r0, r2
 8005176:	4619      	mov	r1, r3
 8005178:	f04f 0200 	mov.w	r2, #0
 800517c:	4b13      	ldr	r3, [pc, #76]	; (80051cc <rang+0x98>)
 800517e:	f7fb fa53 	bl	8000628 <__aeabi_dmul>
 8005182:	4602      	mov	r2, r0
 8005184:	460b      	mov	r3, r1
 8005186:	e9c7 2304 	strd	r2, r3, [r7, #16]
   if(A < 0)
 800518a:	f04f 0200 	mov.w	r2, #0
 800518e:	f04f 0300 	mov.w	r3, #0
 8005192:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005196:	f7fb fcb9 	bl	8000b0c <__aeabi_dcmplt>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d00a      	beq.n	80051b6 <rang+0x82>
      A = A + 360;
 80051a0:	f04f 0200 	mov.w	r2, #0
 80051a4:	4b09      	ldr	r3, [pc, #36]	; (80051cc <rang+0x98>)
 80051a6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80051aa:	f7fb f887 	bl	80002bc <__adddf3>
 80051ae:	4602      	mov	r2, r0
 80051b0:	460b      	mov	r3, r1
 80051b2:	e9c7 2304 	strd	r2, r3, [r7, #16]
   return A;
 80051b6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80051ba:	ec43 2b17 	vmov	d7, r2, r3
}
 80051be:	eeb0 0a47 	vmov.f32	s0, s14
 80051c2:	eef0 0a67 	vmov.f32	s1, s15
 80051c6:	3718      	adds	r7, #24
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	40768000 	.word	0x40768000

080051d0 <faza>:
static double faza(double Rok, double Miesiac, double Dzien, double godzina, double min, double sec)
{
 80051d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051d4:	b0a1      	sub	sp, #132	; 0x84
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 80051dc:	ed87 1b08 	vstr	d1, [r7, #32]
 80051e0:	ed87 2b06 	vstr	d2, [r7, #24]
 80051e4:	ed87 3b04 	vstr	d3, [r7, #16]
 80051e8:	ed87 4b02 	vstr	d4, [r7, #8]
 80051ec:	ed87 5b00 	vstr	d5, [r7]
   if(Miesiac > 2)
 80051f0:	f04f 0200 	mov.w	r2, #0
 80051f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80051f8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80051fc:	f7fb fca4 	bl	8000b48 <__aeabi_dcmpgt>
 8005200:	4603      	mov	r3, r0
 8005202:	2b00      	cmp	r3, #0
   {
      Miesiac = Miesiac;
      Rok     = Rok;
   }
   if(Miesiac <= 2)
 8005204:	f04f 0200 	mov.w	r2, #0
 8005208:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800520c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005210:	f7fb fc86 	bl	8000b20 <__aeabi_dcmple>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d015      	beq.n	8005246 <faza+0x76>
   {
      Miesiac = Miesiac + 12;
 800521a:	f04f 0200 	mov.w	r2, #0
 800521e:	4bd6      	ldr	r3, [pc, #856]	; (8005578 <faza+0x3a8>)
 8005220:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005224:	f7fb f84a 	bl	80002bc <__adddf3>
 8005228:	4602      	mov	r2, r0
 800522a:	460b      	mov	r3, r1
 800522c:	e9c7 2308 	strd	r2, r3, [r7, #32]
      Rok     = Rok - 1;
 8005230:	f04f 0200 	mov.w	r2, #0
 8005234:	4bd1      	ldr	r3, [pc, #836]	; (800557c <faza+0x3ac>)
 8005236:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800523a:	f7fb f83d 	bl	80002b8 <__aeabi_dsub>
 800523e:	4602      	mov	r2, r0
 8005240:	460b      	mov	r3, r1
 8005242:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   }
   double A, b, phi1, phi2, jdp, tzd, elm, ams, aml, asd;
   A   = (int)(Rok / 100);
 8005246:	f04f 0200 	mov.w	r2, #0
 800524a:	4bcd      	ldr	r3, [pc, #820]	; (8005580 <faza+0x3b0>)
 800524c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005250:	f7fb fb14 	bl	800087c <__aeabi_ddiv>
 8005254:	4602      	mov	r2, r0
 8005256:	460b      	mov	r3, r1
 8005258:	4610      	mov	r0, r2
 800525a:	4619      	mov	r1, r3
 800525c:	f7fb fc94 	bl	8000b88 <__aeabi_d2iz>
 8005260:	4603      	mov	r3, r0
 8005262:	4618      	mov	r0, r3
 8005264:	f7fb f976 	bl	8000554 <__aeabi_i2d>
 8005268:	4602      	mov	r2, r0
 800526a:	460b      	mov	r3, r1
 800526c:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
   b   = 2 - A + (int)(A / 4);
 8005270:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8005274:	f04f 0000 	mov.w	r0, #0
 8005278:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800527c:	f7fb f81c 	bl	80002b8 <__aeabi_dsub>
 8005280:	4602      	mov	r2, r0
 8005282:	460b      	mov	r3, r1
 8005284:	4690      	mov	r8, r2
 8005286:	4699      	mov	r9, r3
 8005288:	f04f 0200 	mov.w	r2, #0
 800528c:	4bbd      	ldr	r3, [pc, #756]	; (8005584 <faza+0x3b4>)
 800528e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8005292:	f7fb faf3 	bl	800087c <__aeabi_ddiv>
 8005296:	4602      	mov	r2, r0
 8005298:	460b      	mov	r3, r1
 800529a:	4610      	mov	r0, r2
 800529c:	4619      	mov	r1, r3
 800529e:	f7fb fc73 	bl	8000b88 <__aeabi_d2iz>
 80052a2:	4603      	mov	r3, r0
 80052a4:	4618      	mov	r0, r3
 80052a6:	f7fb f955 	bl	8000554 <__aeabi_i2d>
 80052aa:	4602      	mov	r2, r0
 80052ac:	460b      	mov	r3, r1
 80052ae:	4640      	mov	r0, r8
 80052b0:	4649      	mov	r1, r9
 80052b2:	f7fb f803 	bl	80002bc <__adddf3>
 80052b6:	4602      	mov	r2, r0
 80052b8:	460b      	mov	r3, r1
 80052ba:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
   jdp = (int)(365.25 * (Rok + 4716)) + (int)(30.6001 * (Miesiac + 1)) + Dzien + b + ((godzina + min / 60 + sec / 3600) / 24) - 1524.5;
 80052be:	a392      	add	r3, pc, #584	; (adr r3, 8005508 <faza+0x338>)
 80052c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80052c8:	f7fa fff8 	bl	80002bc <__adddf3>
 80052cc:	4602      	mov	r2, r0
 80052ce:	460b      	mov	r3, r1
 80052d0:	4610      	mov	r0, r2
 80052d2:	4619      	mov	r1, r3
 80052d4:	a38e      	add	r3, pc, #568	; (adr r3, 8005510 <faza+0x340>)
 80052d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052da:	f7fb f9a5 	bl	8000628 <__aeabi_dmul>
 80052de:	4602      	mov	r2, r0
 80052e0:	460b      	mov	r3, r1
 80052e2:	4610      	mov	r0, r2
 80052e4:	4619      	mov	r1, r3
 80052e6:	f7fb fc4f 	bl	8000b88 <__aeabi_d2iz>
 80052ea:	4606      	mov	r6, r0
 80052ec:	f04f 0200 	mov.w	r2, #0
 80052f0:	4ba2      	ldr	r3, [pc, #648]	; (800557c <faza+0x3ac>)
 80052f2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80052f6:	f7fa ffe1 	bl	80002bc <__adddf3>
 80052fa:	4602      	mov	r2, r0
 80052fc:	460b      	mov	r3, r1
 80052fe:	4610      	mov	r0, r2
 8005300:	4619      	mov	r1, r3
 8005302:	a385      	add	r3, pc, #532	; (adr r3, 8005518 <faza+0x348>)
 8005304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005308:	f7fb f98e 	bl	8000628 <__aeabi_dmul>
 800530c:	4602      	mov	r2, r0
 800530e:	460b      	mov	r3, r1
 8005310:	4610      	mov	r0, r2
 8005312:	4619      	mov	r1, r3
 8005314:	f7fb fc38 	bl	8000b88 <__aeabi_d2iz>
 8005318:	4603      	mov	r3, r0
 800531a:	4433      	add	r3, r6
 800531c:	4618      	mov	r0, r3
 800531e:	f7fb f919 	bl	8000554 <__aeabi_i2d>
 8005322:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005326:	f7fa ffc9 	bl	80002bc <__adddf3>
 800532a:	4602      	mov	r2, r0
 800532c:	460b      	mov	r3, r1
 800532e:	4610      	mov	r0, r2
 8005330:	4619      	mov	r1, r3
 8005332:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8005336:	f7fa ffc1 	bl	80002bc <__adddf3>
 800533a:	4602      	mov	r2, r0
 800533c:	460b      	mov	r3, r1
 800533e:	4690      	mov	r8, r2
 8005340:	4699      	mov	r9, r3
 8005342:	f04f 0200 	mov.w	r2, #0
 8005346:	4b90      	ldr	r3, [pc, #576]	; (8005588 <faza+0x3b8>)
 8005348:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800534c:	f7fb fa96 	bl	800087c <__aeabi_ddiv>
 8005350:	4602      	mov	r2, r0
 8005352:	460b      	mov	r3, r1
 8005354:	4610      	mov	r0, r2
 8005356:	4619      	mov	r1, r3
 8005358:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800535c:	f7fa ffae 	bl	80002bc <__adddf3>
 8005360:	4602      	mov	r2, r0
 8005362:	460b      	mov	r3, r1
 8005364:	4692      	mov	sl, r2
 8005366:	469b      	mov	fp, r3
 8005368:	a36d      	add	r3, pc, #436	; (adr r3, 8005520 <faza+0x350>)
 800536a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800536e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005372:	f7fb fa83 	bl	800087c <__aeabi_ddiv>
 8005376:	4602      	mov	r2, r0
 8005378:	460b      	mov	r3, r1
 800537a:	4650      	mov	r0, sl
 800537c:	4659      	mov	r1, fp
 800537e:	f7fa ff9d 	bl	80002bc <__adddf3>
 8005382:	4602      	mov	r2, r0
 8005384:	460b      	mov	r3, r1
 8005386:	4610      	mov	r0, r2
 8005388:	4619      	mov	r1, r3
 800538a:	f04f 0200 	mov.w	r2, #0
 800538e:	4b7f      	ldr	r3, [pc, #508]	; (800558c <faza+0x3bc>)
 8005390:	f7fb fa74 	bl	800087c <__aeabi_ddiv>
 8005394:	4602      	mov	r2, r0
 8005396:	460b      	mov	r3, r1
 8005398:	4640      	mov	r0, r8
 800539a:	4649      	mov	r1, r9
 800539c:	f7fa ff8e 	bl	80002bc <__adddf3>
 80053a0:	4602      	mov	r2, r0
 80053a2:	460b      	mov	r3, r1
 80053a4:	4610      	mov	r0, r2
 80053a6:	4619      	mov	r1, r3
 80053a8:	a35f      	add	r3, pc, #380	; (adr r3, 8005528 <faza+0x358>)
 80053aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ae:	f7fa ff83 	bl	80002b8 <__aeabi_dsub>
 80053b2:	4602      	mov	r2, r0
 80053b4:	460b      	mov	r3, r1
 80053b6:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
   jdp = jdp;
   tzd = (jdp - 2451545) / 36525;
 80053ba:	a35d      	add	r3, pc, #372	; (adr r3, 8005530 <faza+0x360>)
 80053bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80053c4:	f7fa ff78 	bl	80002b8 <__aeabi_dsub>
 80053c8:	4602      	mov	r2, r0
 80053ca:	460b      	mov	r3, r1
 80053cc:	4610      	mov	r0, r2
 80053ce:	4619      	mov	r1, r3
 80053d0:	a359      	add	r3, pc, #356	; (adr r3, 8005538 <faza+0x368>)
 80053d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d6:	f7fb fa51 	bl	800087c <__aeabi_ddiv>
 80053da:	4602      	mov	r2, r0
 80053dc:	460b      	mov	r3, r1
 80053de:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
   elm = rang(297.8502042 + 445267.1115168 * tzd - (0.00163 * tzd * tzd) + tzd * tzd * tzd / 545868 - tzd * tzd * tzd * tzd / 113065000);
 80053e2:	a357      	add	r3, pc, #348	; (adr r3, 8005540 <faza+0x370>)
 80053e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80053ec:	f7fb f91c 	bl	8000628 <__aeabi_dmul>
 80053f0:	4602      	mov	r2, r0
 80053f2:	460b      	mov	r3, r1
 80053f4:	4610      	mov	r0, r2
 80053f6:	4619      	mov	r1, r3
 80053f8:	a353      	add	r3, pc, #332	; (adr r3, 8005548 <faza+0x378>)
 80053fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053fe:	f7fa ff5d 	bl	80002bc <__adddf3>
 8005402:	4602      	mov	r2, r0
 8005404:	460b      	mov	r3, r1
 8005406:	4690      	mov	r8, r2
 8005408:	4699      	mov	r9, r3
 800540a:	a351      	add	r3, pc, #324	; (adr r3, 8005550 <faza+0x380>)
 800540c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005410:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005414:	f7fb f908 	bl	8000628 <__aeabi_dmul>
 8005418:	4602      	mov	r2, r0
 800541a:	460b      	mov	r3, r1
 800541c:	4610      	mov	r0, r2
 800541e:	4619      	mov	r1, r3
 8005420:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005424:	f7fb f900 	bl	8000628 <__aeabi_dmul>
 8005428:	4602      	mov	r2, r0
 800542a:	460b      	mov	r3, r1
 800542c:	4640      	mov	r0, r8
 800542e:	4649      	mov	r1, r9
 8005430:	f7fa ff42 	bl	80002b8 <__aeabi_dsub>
 8005434:	4602      	mov	r2, r0
 8005436:	460b      	mov	r3, r1
 8005438:	4690      	mov	r8, r2
 800543a:	4699      	mov	r9, r3
 800543c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005440:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005444:	f7fb f8f0 	bl	8000628 <__aeabi_dmul>
 8005448:	4602      	mov	r2, r0
 800544a:	460b      	mov	r3, r1
 800544c:	4610      	mov	r0, r2
 800544e:	4619      	mov	r1, r3
 8005450:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005454:	f7fb f8e8 	bl	8000628 <__aeabi_dmul>
 8005458:	4602      	mov	r2, r0
 800545a:	460b      	mov	r3, r1
 800545c:	4610      	mov	r0, r2
 800545e:	4619      	mov	r1, r3
 8005460:	a33d      	add	r3, pc, #244	; (adr r3, 8005558 <faza+0x388>)
 8005462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005466:	f7fb fa09 	bl	800087c <__aeabi_ddiv>
 800546a:	4602      	mov	r2, r0
 800546c:	460b      	mov	r3, r1
 800546e:	4640      	mov	r0, r8
 8005470:	4649      	mov	r1, r9
 8005472:	f7fa ff23 	bl	80002bc <__adddf3>
 8005476:	4602      	mov	r2, r0
 8005478:	460b      	mov	r3, r1
 800547a:	4690      	mov	r8, r2
 800547c:	4699      	mov	r9, r3
 800547e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005482:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005486:	f7fb f8cf 	bl	8000628 <__aeabi_dmul>
 800548a:	4602      	mov	r2, r0
 800548c:	460b      	mov	r3, r1
 800548e:	4610      	mov	r0, r2
 8005490:	4619      	mov	r1, r3
 8005492:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005496:	f7fb f8c7 	bl	8000628 <__aeabi_dmul>
 800549a:	4602      	mov	r2, r0
 800549c:	460b      	mov	r3, r1
 800549e:	4610      	mov	r0, r2
 80054a0:	4619      	mov	r1, r3
 80054a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80054a6:	f7fb f8bf 	bl	8000628 <__aeabi_dmul>
 80054aa:	4602      	mov	r2, r0
 80054ac:	460b      	mov	r3, r1
 80054ae:	4610      	mov	r0, r2
 80054b0:	4619      	mov	r1, r3
 80054b2:	a32b      	add	r3, pc, #172	; (adr r3, 8005560 <faza+0x390>)
 80054b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b8:	f7fb f9e0 	bl	800087c <__aeabi_ddiv>
 80054bc:	4602      	mov	r2, r0
 80054be:	460b      	mov	r3, r1
 80054c0:	4640      	mov	r0, r8
 80054c2:	4649      	mov	r1, r9
 80054c4:	f7fa fef8 	bl	80002b8 <__aeabi_dsub>
 80054c8:	4602      	mov	r2, r0
 80054ca:	460b      	mov	r3, r1
 80054cc:	ec43 2b17 	vmov	d7, r2, r3
 80054d0:	eeb0 0a47 	vmov.f32	s0, s14
 80054d4:	eef0 0a67 	vmov.f32	s1, s15
 80054d8:	f7ff fe2c 	bl	8005134 <rang>
 80054dc:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
   ams = rang(357.5291092 + 35999.0502909 * tzd - 0.0001536 * tzd * tzd + tzd * tzd * tzd / 24490000);
 80054e0:	a321      	add	r3, pc, #132	; (adr r3, 8005568 <faza+0x398>)
 80054e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80054ea:	f7fb f89d 	bl	8000628 <__aeabi_dmul>
 80054ee:	4602      	mov	r2, r0
 80054f0:	460b      	mov	r3, r1
 80054f2:	4610      	mov	r0, r2
 80054f4:	4619      	mov	r1, r3
 80054f6:	a31e      	add	r3, pc, #120	; (adr r3, 8005570 <faza+0x3a0>)
 80054f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054fc:	f7fa fede 	bl	80002bc <__adddf3>
 8005500:	e046      	b.n	8005590 <faza+0x3c0>
 8005502:	bf00      	nop
 8005504:	f3af 8000 	nop.w
 8005508:	00000000 	.word	0x00000000
 800550c:	40b26c00 	.word	0x40b26c00
 8005510:	00000000 	.word	0x00000000
 8005514:	4076d400 	.word	0x4076d400
 8005518:	27525461 	.word	0x27525461
 800551c:	403e99a0 	.word	0x403e99a0
 8005520:	00000000 	.word	0x00000000
 8005524:	40ac2000 	.word	0x40ac2000
 8005528:	00000000 	.word	0x00000000
 800552c:	4097d200 	.word	0x4097d200
 8005530:	80000000 	.word	0x80000000
 8005534:	4142b42c 	.word	0x4142b42c
 8005538:	00000000 	.word	0x00000000
 800553c:	40e1d5a0 	.word	0x40e1d5a0
 8005540:	723175c4 	.word	0x723175c4
 8005544:	411b2d4c 	.word	0x411b2d4c
 8005548:	6fb81ec0 	.word	0x6fb81ec0
 800554c:	40729d9a 	.word	0x40729d9a
 8005550:	2c5197a2 	.word	0x2c5197a2
 8005554:	3f5ab4b7 	.word	0x3f5ab4b7
 8005558:	00000000 	.word	0x00000000
 800555c:	4120a898 	.word	0x4120a898
 8005560:	a0000000 	.word	0xa0000000
 8005564:	419af4f0 	.word	0x419af4f0
 8005568:	9bfba959 	.word	0x9bfba959
 800556c:	40e193e1 	.word	0x40e193e1
 8005570:	3b356034 	.word	0x3b356034
 8005574:	40765877 	.word	0x40765877
 8005578:	40280000 	.word	0x40280000
 800557c:	3ff00000 	.word	0x3ff00000
 8005580:	40590000 	.word	0x40590000
 8005584:	40100000 	.word	0x40100000
 8005588:	404e0000 	.word	0x404e0000
 800558c:	40380000 	.word	0x40380000
 8005590:	4602      	mov	r2, r0
 8005592:	460b      	mov	r3, r1
 8005594:	4690      	mov	r8, r2
 8005596:	4699      	mov	r9, r3
 8005598:	f20f 531c 	addw	r3, pc, #1308	; 0x51c
 800559c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80055a4:	f7fb f840 	bl	8000628 <__aeabi_dmul>
 80055a8:	4602      	mov	r2, r0
 80055aa:	460b      	mov	r3, r1
 80055ac:	4610      	mov	r0, r2
 80055ae:	4619      	mov	r1, r3
 80055b0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80055b4:	f7fb f838 	bl	8000628 <__aeabi_dmul>
 80055b8:	4602      	mov	r2, r0
 80055ba:	460b      	mov	r3, r1
 80055bc:	4640      	mov	r0, r8
 80055be:	4649      	mov	r1, r9
 80055c0:	f7fa fe7a 	bl	80002b8 <__aeabi_dsub>
 80055c4:	4602      	mov	r2, r0
 80055c6:	460b      	mov	r3, r1
 80055c8:	4690      	mov	r8, r2
 80055ca:	4699      	mov	r9, r3
 80055cc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80055d0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80055d4:	f7fb f828 	bl	8000628 <__aeabi_dmul>
 80055d8:	4602      	mov	r2, r0
 80055da:	460b      	mov	r3, r1
 80055dc:	4610      	mov	r0, r2
 80055de:	4619      	mov	r1, r3
 80055e0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80055e4:	f7fb f820 	bl	8000628 <__aeabi_dmul>
 80055e8:	4602      	mov	r2, r0
 80055ea:	460b      	mov	r3, r1
 80055ec:	4610      	mov	r0, r2
 80055ee:	4619      	mov	r1, r3
 80055f0:	f20f 43cc 	addw	r3, pc, #1228	; 0x4cc
 80055f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f8:	f7fb f940 	bl	800087c <__aeabi_ddiv>
 80055fc:	4602      	mov	r2, r0
 80055fe:	460b      	mov	r3, r1
 8005600:	4640      	mov	r0, r8
 8005602:	4649      	mov	r1, r9
 8005604:	f7fa fe5a 	bl	80002bc <__adddf3>
 8005608:	4602      	mov	r2, r0
 800560a:	460b      	mov	r3, r1
 800560c:	ec43 2b17 	vmov	d7, r2, r3
 8005610:	eeb0 0a47 	vmov.f32	s0, s14
 8005614:	eef0 0a67 	vmov.f32	s1, s15
 8005618:	f7ff fd8c 	bl	8005134 <rang>
 800561c:	ed87 0b12 	vstr	d0, [r7, #72]	; 0x48
   aml = rang(134.9634114 + 477198.8676313 * tzd - 0.008997 * tzd * tzd + tzd * tzd * tzd / 69699 - tzd * tzd * tzd * tzd / 14712000);
 8005620:	f20f 43a4 	addw	r3, pc, #1188	; 0x4a4
 8005624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005628:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800562c:	f7fa fffc 	bl	8000628 <__aeabi_dmul>
 8005630:	4602      	mov	r2, r0
 8005632:	460b      	mov	r3, r1
 8005634:	4610      	mov	r0, r2
 8005636:	4619      	mov	r1, r3
 8005638:	f20f 4394 	addw	r3, pc, #1172	; 0x494
 800563c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005640:	f7fa fe3c 	bl	80002bc <__adddf3>
 8005644:	4602      	mov	r2, r0
 8005646:	460b      	mov	r3, r1
 8005648:	4690      	mov	r8, r2
 800564a:	4699      	mov	r9, r3
 800564c:	f20f 4388 	addw	r3, pc, #1160	; 0x488
 8005650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005654:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005658:	f7fa ffe6 	bl	8000628 <__aeabi_dmul>
 800565c:	4602      	mov	r2, r0
 800565e:	460b      	mov	r3, r1
 8005660:	4610      	mov	r0, r2
 8005662:	4619      	mov	r1, r3
 8005664:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005668:	f7fa ffde 	bl	8000628 <__aeabi_dmul>
 800566c:	4602      	mov	r2, r0
 800566e:	460b      	mov	r3, r1
 8005670:	4640      	mov	r0, r8
 8005672:	4649      	mov	r1, r9
 8005674:	f7fa fe20 	bl	80002b8 <__aeabi_dsub>
 8005678:	4602      	mov	r2, r0
 800567a:	460b      	mov	r3, r1
 800567c:	4690      	mov	r8, r2
 800567e:	4699      	mov	r9, r3
 8005680:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005684:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005688:	f7fa ffce 	bl	8000628 <__aeabi_dmul>
 800568c:	4602      	mov	r2, r0
 800568e:	460b      	mov	r3, r1
 8005690:	4610      	mov	r0, r2
 8005692:	4619      	mov	r1, r3
 8005694:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005698:	f7fa ffc6 	bl	8000628 <__aeabi_dmul>
 800569c:	4602      	mov	r2, r0
 800569e:	460b      	mov	r3, r1
 80056a0:	4610      	mov	r0, r2
 80056a2:	4619      	mov	r1, r3
 80056a4:	f20f 4338 	addw	r3, pc, #1080	; 0x438
 80056a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ac:	f7fb f8e6 	bl	800087c <__aeabi_ddiv>
 80056b0:	4602      	mov	r2, r0
 80056b2:	460b      	mov	r3, r1
 80056b4:	4640      	mov	r0, r8
 80056b6:	4649      	mov	r1, r9
 80056b8:	f7fa fe00 	bl	80002bc <__adddf3>
 80056bc:	4602      	mov	r2, r0
 80056be:	460b      	mov	r3, r1
 80056c0:	4690      	mov	r8, r2
 80056c2:	4699      	mov	r9, r3
 80056c4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80056c8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80056cc:	f7fa ffac 	bl	8000628 <__aeabi_dmul>
 80056d0:	4602      	mov	r2, r0
 80056d2:	460b      	mov	r3, r1
 80056d4:	4610      	mov	r0, r2
 80056d6:	4619      	mov	r1, r3
 80056d8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80056dc:	f7fa ffa4 	bl	8000628 <__aeabi_dmul>
 80056e0:	4602      	mov	r2, r0
 80056e2:	460b      	mov	r3, r1
 80056e4:	4610      	mov	r0, r2
 80056e6:	4619      	mov	r1, r3
 80056e8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80056ec:	f7fa ff9c 	bl	8000628 <__aeabi_dmul>
 80056f0:	4602      	mov	r2, r0
 80056f2:	460b      	mov	r3, r1
 80056f4:	4610      	mov	r0, r2
 80056f6:	4619      	mov	r1, r3
 80056f8:	a3fb      	add	r3, pc, #1004	; (adr r3, 8005ae8 <faza+0x918>)
 80056fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056fe:	f7fb f8bd 	bl	800087c <__aeabi_ddiv>
 8005702:	4602      	mov	r2, r0
 8005704:	460b      	mov	r3, r1
 8005706:	4640      	mov	r0, r8
 8005708:	4649      	mov	r1, r9
 800570a:	f7fa fdd5 	bl	80002b8 <__aeabi_dsub>
 800570e:	4602      	mov	r2, r0
 8005710:	460b      	mov	r3, r1
 8005712:	ec43 2b17 	vmov	d7, r2, r3
 8005716:	eeb0 0a47 	vmov.f32	s0, s14
 800571a:	eef0 0a67 	vmov.f32	s1, s15
 800571e:	f7ff fd09 	bl	8005134 <rang>
 8005722:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
   asd = 180 - elm - (6.289 * sin((M_PI / 180) * ((aml)))) + (2.1 * sin((M_PI / 180) * ((ams)))) - (1.274 * sin((M_PI / 180) * (((2 * elm) - aml))))
 8005726:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800572a:	f04f 0000 	mov.w	r0, #0
 800572e:	49e0      	ldr	r1, [pc, #896]	; (8005ab0 <faza+0x8e0>)
 8005730:	f7fa fdc2 	bl	80002b8 <__aeabi_dsub>
 8005734:	4602      	mov	r2, r0
 8005736:	460b      	mov	r3, r1
 8005738:	4690      	mov	r8, r2
 800573a:	4699      	mov	r9, r3
 800573c:	a3c0      	add	r3, pc, #768	; (adr r3, 8005a40 <faza+0x870>)
 800573e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005742:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8005746:	f7fa ff6f 	bl	8000628 <__aeabi_dmul>
 800574a:	4602      	mov	r2, r0
 800574c:	460b      	mov	r3, r1
 800574e:	ec43 2b17 	vmov	d7, r2, r3
 8005752:	eeb0 0a47 	vmov.f32	s0, s14
 8005756:	eef0 0a67 	vmov.f32	s1, s15
 800575a:	f013 f85d 	bl	8018818 <sin>
 800575e:	ec51 0b10 	vmov	r0, r1, d0
 8005762:	a3b9      	add	r3, pc, #740	; (adr r3, 8005a48 <faza+0x878>)
 8005764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005768:	f7fa ff5e 	bl	8000628 <__aeabi_dmul>
 800576c:	4602      	mov	r2, r0
 800576e:	460b      	mov	r3, r1
 8005770:	4640      	mov	r0, r8
 8005772:	4649      	mov	r1, r9
 8005774:	f7fa fda0 	bl	80002b8 <__aeabi_dsub>
 8005778:	4602      	mov	r2, r0
 800577a:	460b      	mov	r3, r1
 800577c:	4690      	mov	r8, r2
 800577e:	4699      	mov	r9, r3
 8005780:	a3af      	add	r3, pc, #700	; (adr r3, 8005a40 <faza+0x870>)
 8005782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005786:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800578a:	f7fa ff4d 	bl	8000628 <__aeabi_dmul>
 800578e:	4602      	mov	r2, r0
 8005790:	460b      	mov	r3, r1
 8005792:	ec43 2b17 	vmov	d7, r2, r3
 8005796:	eeb0 0a47 	vmov.f32	s0, s14
 800579a:	eef0 0a67 	vmov.f32	s1, s15
 800579e:	f013 f83b 	bl	8018818 <sin>
 80057a2:	ec51 0b10 	vmov	r0, r1, d0
 80057a6:	a3aa      	add	r3, pc, #680	; (adr r3, 8005a50 <faza+0x880>)
 80057a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ac:	f7fa ff3c 	bl	8000628 <__aeabi_dmul>
 80057b0:	4602      	mov	r2, r0
 80057b2:	460b      	mov	r3, r1
 80057b4:	4640      	mov	r0, r8
 80057b6:	4649      	mov	r1, r9
 80057b8:	f7fa fd80 	bl	80002bc <__adddf3>
 80057bc:	4602      	mov	r2, r0
 80057be:	460b      	mov	r3, r1
 80057c0:	4690      	mov	r8, r2
 80057c2:	4699      	mov	r9, r3
 80057c4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80057c8:	4602      	mov	r2, r0
 80057ca:	460b      	mov	r3, r1
 80057cc:	f7fa fd76 	bl	80002bc <__adddf3>
 80057d0:	4602      	mov	r2, r0
 80057d2:	460b      	mov	r3, r1
 80057d4:	4610      	mov	r0, r2
 80057d6:	4619      	mov	r1, r3
 80057d8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80057dc:	f7fa fd6c 	bl	80002b8 <__aeabi_dsub>
 80057e0:	4602      	mov	r2, r0
 80057e2:	460b      	mov	r3, r1
 80057e4:	4610      	mov	r0, r2
 80057e6:	4619      	mov	r1, r3
 80057e8:	a395      	add	r3, pc, #596	; (adr r3, 8005a40 <faza+0x870>)
 80057ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ee:	f7fa ff1b 	bl	8000628 <__aeabi_dmul>
 80057f2:	4602      	mov	r2, r0
 80057f4:	460b      	mov	r3, r1
 80057f6:	ec43 2b17 	vmov	d7, r2, r3
 80057fa:	eeb0 0a47 	vmov.f32	s0, s14
 80057fe:	eef0 0a67 	vmov.f32	s1, s15
 8005802:	f013 f809 	bl	8018818 <sin>
 8005806:	ec51 0b10 	vmov	r0, r1, d0
 800580a:	a393      	add	r3, pc, #588	; (adr r3, 8005a58 <faza+0x888>)
 800580c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005810:	f7fa ff0a 	bl	8000628 <__aeabi_dmul>
 8005814:	4602      	mov	r2, r0
 8005816:	460b      	mov	r3, r1
 8005818:	4640      	mov	r0, r8
 800581a:	4649      	mov	r1, r9
 800581c:	f7fa fd4c 	bl	80002b8 <__aeabi_dsub>
 8005820:	4602      	mov	r2, r0
 8005822:	460b      	mov	r3, r1
 8005824:	4690      	mov	r8, r2
 8005826:	4699      	mov	r9, r3
         - (0.658 * sin((M_PI / 180) * ((2 * elm)))) - (0.214 * sin((M_PI / 180) * ((2 * aml)))) - (0.11 * sin((M_PI / 180) * ((elm))));
 8005828:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800582c:	4602      	mov	r2, r0
 800582e:	460b      	mov	r3, r1
 8005830:	f7fa fd44 	bl	80002bc <__adddf3>
 8005834:	4602      	mov	r2, r0
 8005836:	460b      	mov	r3, r1
 8005838:	4610      	mov	r0, r2
 800583a:	4619      	mov	r1, r3
 800583c:	a380      	add	r3, pc, #512	; (adr r3, 8005a40 <faza+0x870>)
 800583e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005842:	f7fa fef1 	bl	8000628 <__aeabi_dmul>
 8005846:	4602      	mov	r2, r0
 8005848:	460b      	mov	r3, r1
 800584a:	ec43 2b17 	vmov	d7, r2, r3
 800584e:	eeb0 0a47 	vmov.f32	s0, s14
 8005852:	eef0 0a67 	vmov.f32	s1, s15
 8005856:	f012 ffdf 	bl	8018818 <sin>
 800585a:	ec51 0b10 	vmov	r0, r1, d0
 800585e:	a380      	add	r3, pc, #512	; (adr r3, 8005a60 <faza+0x890>)
 8005860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005864:	f7fa fee0 	bl	8000628 <__aeabi_dmul>
 8005868:	4602      	mov	r2, r0
 800586a:	460b      	mov	r3, r1
 800586c:	4640      	mov	r0, r8
 800586e:	4649      	mov	r1, r9
 8005870:	f7fa fd22 	bl	80002b8 <__aeabi_dsub>
 8005874:	4602      	mov	r2, r0
 8005876:	460b      	mov	r3, r1
 8005878:	4690      	mov	r8, r2
 800587a:	4699      	mov	r9, r3
 800587c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8005880:	4602      	mov	r2, r0
 8005882:	460b      	mov	r3, r1
 8005884:	f7fa fd1a 	bl	80002bc <__adddf3>
 8005888:	4602      	mov	r2, r0
 800588a:	460b      	mov	r3, r1
 800588c:	4610      	mov	r0, r2
 800588e:	4619      	mov	r1, r3
 8005890:	a36b      	add	r3, pc, #428	; (adr r3, 8005a40 <faza+0x870>)
 8005892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005896:	f7fa fec7 	bl	8000628 <__aeabi_dmul>
 800589a:	4602      	mov	r2, r0
 800589c:	460b      	mov	r3, r1
 800589e:	ec43 2b17 	vmov	d7, r2, r3
 80058a2:	eeb0 0a47 	vmov.f32	s0, s14
 80058a6:	eef0 0a67 	vmov.f32	s1, s15
 80058aa:	f012 ffb5 	bl	8018818 <sin>
 80058ae:	ec51 0b10 	vmov	r0, r1, d0
 80058b2:	a36d      	add	r3, pc, #436	; (adr r3, 8005a68 <faza+0x898>)
 80058b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b8:	f7fa feb6 	bl	8000628 <__aeabi_dmul>
 80058bc:	4602      	mov	r2, r0
 80058be:	460b      	mov	r3, r1
 80058c0:	4640      	mov	r0, r8
 80058c2:	4649      	mov	r1, r9
 80058c4:	f7fa fcf8 	bl	80002b8 <__aeabi_dsub>
 80058c8:	4602      	mov	r2, r0
 80058ca:	460b      	mov	r3, r1
 80058cc:	4690      	mov	r8, r2
 80058ce:	4699      	mov	r9, r3
 80058d0:	a35b      	add	r3, pc, #364	; (adr r3, 8005a40 <faza+0x870>)
 80058d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80058da:	f7fa fea5 	bl	8000628 <__aeabi_dmul>
 80058de:	4602      	mov	r2, r0
 80058e0:	460b      	mov	r3, r1
 80058e2:	ec43 2b17 	vmov	d7, r2, r3
 80058e6:	eeb0 0a47 	vmov.f32	s0, s14
 80058ea:	eef0 0a67 	vmov.f32	s1, s15
 80058ee:	f012 ff93 	bl	8018818 <sin>
 80058f2:	ec51 0b10 	vmov	r0, r1, d0
 80058f6:	a35e      	add	r3, pc, #376	; (adr r3, 8005a70 <faza+0x8a0>)
 80058f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058fc:	f7fa fe94 	bl	8000628 <__aeabi_dmul>
 8005900:	4602      	mov	r2, r0
 8005902:	460b      	mov	r3, r1
   asd = 180 - elm - (6.289 * sin((M_PI / 180) * ((aml)))) + (2.1 * sin((M_PI / 180) * ((ams)))) - (1.274 * sin((M_PI / 180) * (((2 * elm) - aml))))
 8005904:	4640      	mov	r0, r8
 8005906:	4649      	mov	r1, r9
 8005908:	f7fa fcd6 	bl	80002b8 <__aeabi_dsub>
 800590c:	4602      	mov	r2, r0
 800590e:	460b      	mov	r3, r1
 8005910:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
   phi1 = (1 + cos((M_PI / 180) * (asd))) / 2;
 8005914:	a34a      	add	r3, pc, #296	; (adr r3, 8005a40 <faza+0x870>)
 8005916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800591a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800591e:	f7fa fe83 	bl	8000628 <__aeabi_dmul>
 8005922:	4602      	mov	r2, r0
 8005924:	460b      	mov	r3, r1
 8005926:	ec43 2b17 	vmov	d7, r2, r3
 800592a:	eeb0 0a47 	vmov.f32	s0, s14
 800592e:	eef0 0a67 	vmov.f32	s1, s15
 8005932:	f012 ff1d 	bl	8018770 <cos>
 8005936:	ec51 0b10 	vmov	r0, r1, d0
 800593a:	f04f 0200 	mov.w	r2, #0
 800593e:	4b5d      	ldr	r3, [pc, #372]	; (8005ab4 <faza+0x8e4>)
 8005940:	f7fa fcbc 	bl	80002bc <__adddf3>
 8005944:	4602      	mov	r2, r0
 8005946:	460b      	mov	r3, r1
 8005948:	4610      	mov	r0, r2
 800594a:	4619      	mov	r1, r3
 800594c:	f04f 0200 	mov.w	r2, #0
 8005950:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005954:	f7fa ff92 	bl	800087c <__aeabi_ddiv>
 8005958:	4602      	mov	r2, r0
 800595a:	460b      	mov	r3, r1
 800595c:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78

   tzd = (jdp + (0.5 / 24) - 2451545) / 36525;
 8005960:	a345      	add	r3, pc, #276	; (adr r3, 8005a78 <faza+0x8a8>)
 8005962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005966:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800596a:	f7fa fca7 	bl	80002bc <__adddf3>
 800596e:	4602      	mov	r2, r0
 8005970:	460b      	mov	r3, r1
 8005972:	4610      	mov	r0, r2
 8005974:	4619      	mov	r1, r3
 8005976:	a342      	add	r3, pc, #264	; (adr r3, 8005a80 <faza+0x8b0>)
 8005978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800597c:	f7fa fc9c 	bl	80002b8 <__aeabi_dsub>
 8005980:	4602      	mov	r2, r0
 8005982:	460b      	mov	r3, r1
 8005984:	4610      	mov	r0, r2
 8005986:	4619      	mov	r1, r3
 8005988:	a33f      	add	r3, pc, #252	; (adr r3, 8005a88 <faza+0x8b8>)
 800598a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800598e:	f7fa ff75 	bl	800087c <__aeabi_ddiv>
 8005992:	4602      	mov	r2, r0
 8005994:	460b      	mov	r3, r1
 8005996:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
   elm = rang(297.8502042 + 445267.1115168 * tzd - (0.00163 * tzd * tzd) + tzd * tzd * tzd / 545868 - tzd * tzd * tzd * tzd / 113065000);
 800599a:	a33d      	add	r3, pc, #244	; (adr r3, 8005a90 <faza+0x8c0>)
 800599c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80059a4:	f7fa fe40 	bl	8000628 <__aeabi_dmul>
 80059a8:	4602      	mov	r2, r0
 80059aa:	460b      	mov	r3, r1
 80059ac:	4610      	mov	r0, r2
 80059ae:	4619      	mov	r1, r3
 80059b0:	a339      	add	r3, pc, #228	; (adr r3, 8005a98 <faza+0x8c8>)
 80059b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b6:	f7fa fc81 	bl	80002bc <__adddf3>
 80059ba:	4602      	mov	r2, r0
 80059bc:	460b      	mov	r3, r1
 80059be:	4690      	mov	r8, r2
 80059c0:	4699      	mov	r9, r3
 80059c2:	a337      	add	r3, pc, #220	; (adr r3, 8005aa0 <faza+0x8d0>)
 80059c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80059cc:	f7fa fe2c 	bl	8000628 <__aeabi_dmul>
 80059d0:	4602      	mov	r2, r0
 80059d2:	460b      	mov	r3, r1
 80059d4:	4610      	mov	r0, r2
 80059d6:	4619      	mov	r1, r3
 80059d8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80059dc:	f7fa fe24 	bl	8000628 <__aeabi_dmul>
 80059e0:	4602      	mov	r2, r0
 80059e2:	460b      	mov	r3, r1
 80059e4:	4640      	mov	r0, r8
 80059e6:	4649      	mov	r1, r9
 80059e8:	f7fa fc66 	bl	80002b8 <__aeabi_dsub>
 80059ec:	4602      	mov	r2, r0
 80059ee:	460b      	mov	r3, r1
 80059f0:	4690      	mov	r8, r2
 80059f2:	4699      	mov	r9, r3
 80059f4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80059f8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80059fc:	f7fa fe14 	bl	8000628 <__aeabi_dmul>
 8005a00:	4602      	mov	r2, r0
 8005a02:	460b      	mov	r3, r1
 8005a04:	4610      	mov	r0, r2
 8005a06:	4619      	mov	r1, r3
 8005a08:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005a0c:	f7fa fe0c 	bl	8000628 <__aeabi_dmul>
 8005a10:	4602      	mov	r2, r0
 8005a12:	460b      	mov	r3, r1
 8005a14:	4610      	mov	r0, r2
 8005a16:	4619      	mov	r1, r3
 8005a18:	a323      	add	r3, pc, #140	; (adr r3, 8005aa8 <faza+0x8d8>)
 8005a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a1e:	f7fa ff2d 	bl	800087c <__aeabi_ddiv>
 8005a22:	4602      	mov	r2, r0
 8005a24:	460b      	mov	r3, r1
 8005a26:	4640      	mov	r0, r8
 8005a28:	4649      	mov	r1, r9
 8005a2a:	f7fa fc47 	bl	80002bc <__adddf3>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	460b      	mov	r3, r1
 8005a32:	4690      	mov	r8, r2
 8005a34:	4699      	mov	r9, r3
 8005a36:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005a3a:	e059      	b.n	8005af0 <faza+0x920>
 8005a3c:	f3af 8000 	nop.w
 8005a40:	a2529d39 	.word	0xa2529d39
 8005a44:	3f91df46 	.word	0x3f91df46
 8005a48:	9db22d0e 	.word	0x9db22d0e
 8005a4c:	401927ef 	.word	0x401927ef
 8005a50:	cccccccd 	.word	0xcccccccd
 8005a54:	4000cccc 	.word	0x4000cccc
 8005a58:	d2f1a9fc 	.word	0xd2f1a9fc
 8005a5c:	3ff4624d 	.word	0x3ff4624d
 8005a60:	04189375 	.word	0x04189375
 8005a64:	3fe50e56 	.word	0x3fe50e56
 8005a68:	1cac0831 	.word	0x1cac0831
 8005a6c:	3fcb645a 	.word	0x3fcb645a
 8005a70:	c28f5c29 	.word	0xc28f5c29
 8005a74:	3fbc28f5 	.word	0x3fbc28f5
 8005a78:	55555555 	.word	0x55555555
 8005a7c:	3f955555 	.word	0x3f955555
 8005a80:	80000000 	.word	0x80000000
 8005a84:	4142b42c 	.word	0x4142b42c
 8005a88:	00000000 	.word	0x00000000
 8005a8c:	40e1d5a0 	.word	0x40e1d5a0
 8005a90:	723175c4 	.word	0x723175c4
 8005a94:	411b2d4c 	.word	0x411b2d4c
 8005a98:	6fb81ec0 	.word	0x6fb81ec0
 8005a9c:	40729d9a 	.word	0x40729d9a
 8005aa0:	2c5197a2 	.word	0x2c5197a2
 8005aa4:	3f5ab4b7 	.word	0x3f5ab4b7
 8005aa8:	00000000 	.word	0x00000000
 8005aac:	4120a898 	.word	0x4120a898
 8005ab0:	40668000 	.word	0x40668000
 8005ab4:	3ff00000 	.word	0x3ff00000
 8005ab8:	f40d8376 	.word	0xf40d8376
 8005abc:	3f2421f5 	.word	0x3f2421f5
 8005ac0:	00000000 	.word	0x00000000
 8005ac4:	41775b01 	.word	0x41775b01
 8005ac8:	787456ea 	.word	0x787456ea
 8005acc:	411d203b 	.word	0x411d203b
 8005ad0:	4424f2ff 	.word	0x4424f2ff
 8005ad4:	4060ded4 	.word	0x4060ded4
 8005ad8:	e618ce2d 	.word	0xe618ce2d
 8005adc:	3f826d04 	.word	0x3f826d04
 8005ae0:	00000000 	.word	0x00000000
 8005ae4:	40f10430 	.word	0x40f10430
 8005ae8:	00000000 	.word	0x00000000
 8005aec:	416c0f98 	.word	0x416c0f98
 8005af0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005af4:	f7fa fd98 	bl	8000628 <__aeabi_dmul>
 8005af8:	4602      	mov	r2, r0
 8005afa:	460b      	mov	r3, r1
 8005afc:	4610      	mov	r0, r2
 8005afe:	4619      	mov	r1, r3
 8005b00:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005b04:	f7fa fd90 	bl	8000628 <__aeabi_dmul>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	460b      	mov	r3, r1
 8005b0c:	4610      	mov	r0, r2
 8005b0e:	4619      	mov	r1, r3
 8005b10:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005b14:	f7fa fd88 	bl	8000628 <__aeabi_dmul>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	4610      	mov	r0, r2
 8005b1e:	4619      	mov	r1, r3
 8005b20:	f20f 43b8 	addw	r3, pc, #1208	; 0x4b8
 8005b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b28:	f7fa fea8 	bl	800087c <__aeabi_ddiv>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	460b      	mov	r3, r1
 8005b30:	4640      	mov	r0, r8
 8005b32:	4649      	mov	r1, r9
 8005b34:	f7fa fbc0 	bl	80002b8 <__aeabi_dsub>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	460b      	mov	r3, r1
 8005b3c:	ec43 2b17 	vmov	d7, r2, r3
 8005b40:	eeb0 0a47 	vmov.f32	s0, s14
 8005b44:	eef0 0a67 	vmov.f32	s1, s15
 8005b48:	f7ff faf4 	bl	8005134 <rang>
 8005b4c:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
   ams = rang(357.5291092 + 35999.0502909 * tzd - 0.0001536 * tzd * tzd + tzd * tzd * tzd / 24490000);
 8005b50:	f20f 4390 	addw	r3, pc, #1168	; 0x490
 8005b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b58:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005b5c:	f7fa fd64 	bl	8000628 <__aeabi_dmul>
 8005b60:	4602      	mov	r2, r0
 8005b62:	460b      	mov	r3, r1
 8005b64:	4610      	mov	r0, r2
 8005b66:	4619      	mov	r1, r3
 8005b68:	f20f 4380 	addw	r3, pc, #1152	; 0x480
 8005b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b70:	f7fa fba4 	bl	80002bc <__adddf3>
 8005b74:	4602      	mov	r2, r0
 8005b76:	460b      	mov	r3, r1
 8005b78:	4690      	mov	r8, r2
 8005b7a:	4699      	mov	r9, r3
 8005b7c:	f20f 4374 	addw	r3, pc, #1140	; 0x474
 8005b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b84:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005b88:	f7fa fd4e 	bl	8000628 <__aeabi_dmul>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	460b      	mov	r3, r1
 8005b90:	4610      	mov	r0, r2
 8005b92:	4619      	mov	r1, r3
 8005b94:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005b98:	f7fa fd46 	bl	8000628 <__aeabi_dmul>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	460b      	mov	r3, r1
 8005ba0:	4640      	mov	r0, r8
 8005ba2:	4649      	mov	r1, r9
 8005ba4:	f7fa fb88 	bl	80002b8 <__aeabi_dsub>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	460b      	mov	r3, r1
 8005bac:	4690      	mov	r8, r2
 8005bae:	4699      	mov	r9, r3
 8005bb0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005bb4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005bb8:	f7fa fd36 	bl	8000628 <__aeabi_dmul>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	4610      	mov	r0, r2
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005bc8:	f7fa fd2e 	bl	8000628 <__aeabi_dmul>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	460b      	mov	r3, r1
 8005bd0:	4610      	mov	r0, r2
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	f20f 4324 	addw	r3, pc, #1060	; 0x424
 8005bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bdc:	f7fa fe4e 	bl	800087c <__aeabi_ddiv>
 8005be0:	4602      	mov	r2, r0
 8005be2:	460b      	mov	r3, r1
 8005be4:	4640      	mov	r0, r8
 8005be6:	4649      	mov	r1, r9
 8005be8:	f7fa fb68 	bl	80002bc <__adddf3>
 8005bec:	4602      	mov	r2, r0
 8005bee:	460b      	mov	r3, r1
 8005bf0:	ec43 2b17 	vmov	d7, r2, r3
 8005bf4:	eeb0 0a47 	vmov.f32	s0, s14
 8005bf8:	eef0 0a67 	vmov.f32	s1, s15
 8005bfc:	f7ff fa9a 	bl	8005134 <rang>
 8005c00:	ed87 0b12 	vstr	d0, [r7, #72]	; 0x48
   aml = rang(134.9634114 + 477198.8676313 * tzd - 0.008997 * tzd * tzd + tzd * tzd * tzd / 69699 - tzd * tzd * tzd * tzd / 14712000);
 8005c04:	a3ff      	add	r3, pc, #1020	; (adr r3, 8006004 <faza+0xe34>)
 8005c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c0a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005c0e:	f7fa fd0b 	bl	8000628 <__aeabi_dmul>
 8005c12:	4602      	mov	r2, r0
 8005c14:	460b      	mov	r3, r1
 8005c16:	4610      	mov	r0, r2
 8005c18:	4619      	mov	r1, r3
 8005c1a:	a3fc      	add	r3, pc, #1008	; (adr r3, 800600c <faza+0xe3c>)
 8005c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c20:	f7fa fb4c 	bl	80002bc <__adddf3>
 8005c24:	4602      	mov	r2, r0
 8005c26:	460b      	mov	r3, r1
 8005c28:	4690      	mov	r8, r2
 8005c2a:	4699      	mov	r9, r3
 8005c2c:	a3f9      	add	r3, pc, #996	; (adr r3, 8006014 <faza+0xe44>)
 8005c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c32:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005c36:	f7fa fcf7 	bl	8000628 <__aeabi_dmul>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	4610      	mov	r0, r2
 8005c40:	4619      	mov	r1, r3
 8005c42:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005c46:	f7fa fcef 	bl	8000628 <__aeabi_dmul>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	4640      	mov	r0, r8
 8005c50:	4649      	mov	r1, r9
 8005c52:	f7fa fb31 	bl	80002b8 <__aeabi_dsub>
 8005c56:	4602      	mov	r2, r0
 8005c58:	460b      	mov	r3, r1
 8005c5a:	4690      	mov	r8, r2
 8005c5c:	4699      	mov	r9, r3
 8005c5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005c62:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005c66:	f7fa fcdf 	bl	8000628 <__aeabi_dmul>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	460b      	mov	r3, r1
 8005c6e:	4610      	mov	r0, r2
 8005c70:	4619      	mov	r1, r3
 8005c72:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005c76:	f7fa fcd7 	bl	8000628 <__aeabi_dmul>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	4610      	mov	r0, r2
 8005c80:	4619      	mov	r1, r3
 8005c82:	a3e6      	add	r3, pc, #920	; (adr r3, 800601c <faza+0xe4c>)
 8005c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c88:	f7fa fdf8 	bl	800087c <__aeabi_ddiv>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	460b      	mov	r3, r1
 8005c90:	4640      	mov	r0, r8
 8005c92:	4649      	mov	r1, r9
 8005c94:	f7fa fb12 	bl	80002bc <__adddf3>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	460b      	mov	r3, r1
 8005c9c:	4690      	mov	r8, r2
 8005c9e:	4699      	mov	r9, r3
 8005ca0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005ca4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005ca8:	f7fa fcbe 	bl	8000628 <__aeabi_dmul>
 8005cac:	4602      	mov	r2, r0
 8005cae:	460b      	mov	r3, r1
 8005cb0:	4610      	mov	r0, r2
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005cb8:	f7fa fcb6 	bl	8000628 <__aeabi_dmul>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	4610      	mov	r0, r2
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005cc8:	f7fa fcae 	bl	8000628 <__aeabi_dmul>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	460b      	mov	r3, r1
 8005cd0:	4610      	mov	r0, r2
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	a3d3      	add	r3, pc, #844	; (adr r3, 8006024 <faza+0xe54>)
 8005cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cda:	f7fa fdcf 	bl	800087c <__aeabi_ddiv>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	4640      	mov	r0, r8
 8005ce4:	4649      	mov	r1, r9
 8005ce6:	f7fa fae7 	bl	80002b8 <__aeabi_dsub>
 8005cea:	4602      	mov	r2, r0
 8005cec:	460b      	mov	r3, r1
 8005cee:	ec43 2b17 	vmov	d7, r2, r3
 8005cf2:	eeb0 0a47 	vmov.f32	s0, s14
 8005cf6:	eef0 0a67 	vmov.f32	s1, s15
 8005cfa:	f7ff fa1b 	bl	8005134 <rang>
 8005cfe:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
   asd = 180 - elm - (6.289 * sin((M_PI / 180) * ((aml)))) + (2.1 * sin((M_PI / 180) * ((ams)))) - (1.274 * sin((M_PI / 180) * (((2 * elm) - aml))))
 8005d02:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005d06:	f04f 0000 	mov.w	r0, #0
 8005d0a:	49b1      	ldr	r1, [pc, #708]	; (8005fd0 <faza+0xe00>)
 8005d0c:	f7fa fad4 	bl	80002b8 <__aeabi_dsub>
 8005d10:	4602      	mov	r2, r0
 8005d12:	460b      	mov	r3, r1
 8005d14:	4690      	mov	r8, r2
 8005d16:	4699      	mov	r9, r3
 8005d18:	a39f      	add	r3, pc, #636	; (adr r3, 8005f98 <faza+0xdc8>)
 8005d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d1e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8005d22:	f7fa fc81 	bl	8000628 <__aeabi_dmul>
 8005d26:	4602      	mov	r2, r0
 8005d28:	460b      	mov	r3, r1
 8005d2a:	ec43 2b17 	vmov	d7, r2, r3
 8005d2e:	eeb0 0a47 	vmov.f32	s0, s14
 8005d32:	eef0 0a67 	vmov.f32	s1, s15
 8005d36:	f012 fd6f 	bl	8018818 <sin>
 8005d3a:	ec51 0b10 	vmov	r0, r1, d0
 8005d3e:	a398      	add	r3, pc, #608	; (adr r3, 8005fa0 <faza+0xdd0>)
 8005d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d44:	f7fa fc70 	bl	8000628 <__aeabi_dmul>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	4640      	mov	r0, r8
 8005d4e:	4649      	mov	r1, r9
 8005d50:	f7fa fab2 	bl	80002b8 <__aeabi_dsub>
 8005d54:	4602      	mov	r2, r0
 8005d56:	460b      	mov	r3, r1
 8005d58:	4690      	mov	r8, r2
 8005d5a:	4699      	mov	r9, r3
 8005d5c:	a38e      	add	r3, pc, #568	; (adr r3, 8005f98 <faza+0xdc8>)
 8005d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d62:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005d66:	f7fa fc5f 	bl	8000628 <__aeabi_dmul>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	ec43 2b17 	vmov	d7, r2, r3
 8005d72:	eeb0 0a47 	vmov.f32	s0, s14
 8005d76:	eef0 0a67 	vmov.f32	s1, s15
 8005d7a:	f012 fd4d 	bl	8018818 <sin>
 8005d7e:	ec51 0b10 	vmov	r0, r1, d0
 8005d82:	a389      	add	r3, pc, #548	; (adr r3, 8005fa8 <faza+0xdd8>)
 8005d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d88:	f7fa fc4e 	bl	8000628 <__aeabi_dmul>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	460b      	mov	r3, r1
 8005d90:	4640      	mov	r0, r8
 8005d92:	4649      	mov	r1, r9
 8005d94:	f7fa fa92 	bl	80002bc <__adddf3>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	460b      	mov	r3, r1
 8005d9c:	4690      	mov	r8, r2
 8005d9e:	4699      	mov	r9, r3
 8005da0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005da4:	4602      	mov	r2, r0
 8005da6:	460b      	mov	r3, r1
 8005da8:	f7fa fa88 	bl	80002bc <__adddf3>
 8005dac:	4602      	mov	r2, r0
 8005dae:	460b      	mov	r3, r1
 8005db0:	4610      	mov	r0, r2
 8005db2:	4619      	mov	r1, r3
 8005db4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005db8:	f7fa fa7e 	bl	80002b8 <__aeabi_dsub>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	460b      	mov	r3, r1
 8005dc0:	4610      	mov	r0, r2
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	a374      	add	r3, pc, #464	; (adr r3, 8005f98 <faza+0xdc8>)
 8005dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dca:	f7fa fc2d 	bl	8000628 <__aeabi_dmul>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	ec43 2b17 	vmov	d7, r2, r3
 8005dd6:	eeb0 0a47 	vmov.f32	s0, s14
 8005dda:	eef0 0a67 	vmov.f32	s1, s15
 8005dde:	f012 fd1b 	bl	8018818 <sin>
 8005de2:	ec51 0b10 	vmov	r0, r1, d0
 8005de6:	a372      	add	r3, pc, #456	; (adr r3, 8005fb0 <faza+0xde0>)
 8005de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dec:	f7fa fc1c 	bl	8000628 <__aeabi_dmul>
 8005df0:	4602      	mov	r2, r0
 8005df2:	460b      	mov	r3, r1
 8005df4:	4640      	mov	r0, r8
 8005df6:	4649      	mov	r1, r9
 8005df8:	f7fa fa5e 	bl	80002b8 <__aeabi_dsub>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	460b      	mov	r3, r1
 8005e00:	4690      	mov	r8, r2
 8005e02:	4699      	mov	r9, r3
         - (0.658 * sin((M_PI / 180) * ((2 * elm)))) - (0.214 * sin((M_PI / 180) * ((2 * aml)))) - (0.11 * sin((M_PI / 180) * ((elm))));
 8005e04:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005e08:	4602      	mov	r2, r0
 8005e0a:	460b      	mov	r3, r1
 8005e0c:	f7fa fa56 	bl	80002bc <__adddf3>
 8005e10:	4602      	mov	r2, r0
 8005e12:	460b      	mov	r3, r1
 8005e14:	4610      	mov	r0, r2
 8005e16:	4619      	mov	r1, r3
 8005e18:	a35f      	add	r3, pc, #380	; (adr r3, 8005f98 <faza+0xdc8>)
 8005e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e1e:	f7fa fc03 	bl	8000628 <__aeabi_dmul>
 8005e22:	4602      	mov	r2, r0
 8005e24:	460b      	mov	r3, r1
 8005e26:	ec43 2b17 	vmov	d7, r2, r3
 8005e2a:	eeb0 0a47 	vmov.f32	s0, s14
 8005e2e:	eef0 0a67 	vmov.f32	s1, s15
 8005e32:	f012 fcf1 	bl	8018818 <sin>
 8005e36:	ec51 0b10 	vmov	r0, r1, d0
 8005e3a:	a35f      	add	r3, pc, #380	; (adr r3, 8005fb8 <faza+0xde8>)
 8005e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e40:	f7fa fbf2 	bl	8000628 <__aeabi_dmul>
 8005e44:	4602      	mov	r2, r0
 8005e46:	460b      	mov	r3, r1
 8005e48:	4640      	mov	r0, r8
 8005e4a:	4649      	mov	r1, r9
 8005e4c:	f7fa fa34 	bl	80002b8 <__aeabi_dsub>
 8005e50:	4602      	mov	r2, r0
 8005e52:	460b      	mov	r3, r1
 8005e54:	4690      	mov	r8, r2
 8005e56:	4699      	mov	r9, r3
 8005e58:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	460b      	mov	r3, r1
 8005e60:	f7fa fa2c 	bl	80002bc <__adddf3>
 8005e64:	4602      	mov	r2, r0
 8005e66:	460b      	mov	r3, r1
 8005e68:	4610      	mov	r0, r2
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	a34a      	add	r3, pc, #296	; (adr r3, 8005f98 <faza+0xdc8>)
 8005e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e72:	f7fa fbd9 	bl	8000628 <__aeabi_dmul>
 8005e76:	4602      	mov	r2, r0
 8005e78:	460b      	mov	r3, r1
 8005e7a:	ec43 2b17 	vmov	d7, r2, r3
 8005e7e:	eeb0 0a47 	vmov.f32	s0, s14
 8005e82:	eef0 0a67 	vmov.f32	s1, s15
 8005e86:	f012 fcc7 	bl	8018818 <sin>
 8005e8a:	ec51 0b10 	vmov	r0, r1, d0
 8005e8e:	a34c      	add	r3, pc, #304	; (adr r3, 8005fc0 <faza+0xdf0>)
 8005e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e94:	f7fa fbc8 	bl	8000628 <__aeabi_dmul>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	460b      	mov	r3, r1
 8005e9c:	4640      	mov	r0, r8
 8005e9e:	4649      	mov	r1, r9
 8005ea0:	f7fa fa0a 	bl	80002b8 <__aeabi_dsub>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	460b      	mov	r3, r1
 8005ea8:	4690      	mov	r8, r2
 8005eaa:	4699      	mov	r9, r3
 8005eac:	a33a      	add	r3, pc, #232	; (adr r3, 8005f98 <faza+0xdc8>)
 8005eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005eb6:	f7fa fbb7 	bl	8000628 <__aeabi_dmul>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	ec43 2b17 	vmov	d7, r2, r3
 8005ec2:	eeb0 0a47 	vmov.f32	s0, s14
 8005ec6:	eef0 0a67 	vmov.f32	s1, s15
 8005eca:	f012 fca5 	bl	8018818 <sin>
 8005ece:	ec51 0b10 	vmov	r0, r1, d0
 8005ed2:	a33d      	add	r3, pc, #244	; (adr r3, 8005fc8 <faza+0xdf8>)
 8005ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed8:	f7fa fba6 	bl	8000628 <__aeabi_dmul>
 8005edc:	4602      	mov	r2, r0
 8005ede:	460b      	mov	r3, r1
   asd = 180 - elm - (6.289 * sin((M_PI / 180) * ((aml)))) + (2.1 * sin((M_PI / 180) * ((ams)))) - (1.274 * sin((M_PI / 180) * (((2 * elm) - aml))))
 8005ee0:	4640      	mov	r0, r8
 8005ee2:	4649      	mov	r1, r9
 8005ee4:	f7fa f9e8 	bl	80002b8 <__aeabi_dsub>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	460b      	mov	r3, r1
 8005eec:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
   phi2 = (1 + cos((M_PI / 180) * (asd))) / 2;
 8005ef0:	a329      	add	r3, pc, #164	; (adr r3, 8005f98 <faza+0xdc8>)
 8005ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005efa:	f7fa fb95 	bl	8000628 <__aeabi_dmul>
 8005efe:	4602      	mov	r2, r0
 8005f00:	460b      	mov	r3, r1
 8005f02:	ec43 2b17 	vmov	d7, r2, r3
 8005f06:	eeb0 0a47 	vmov.f32	s0, s14
 8005f0a:	eef0 0a67 	vmov.f32	s1, s15
 8005f0e:	f012 fc2f 	bl	8018770 <cos>
 8005f12:	ec51 0b10 	vmov	r0, r1, d0
 8005f16:	f04f 0200 	mov.w	r2, #0
 8005f1a:	4b2e      	ldr	r3, [pc, #184]	; (8005fd4 <faza+0xe04>)
 8005f1c:	f7fa f9ce 	bl	80002bc <__adddf3>
 8005f20:	4602      	mov	r2, r0
 8005f22:	460b      	mov	r3, r1
 8005f24:	4610      	mov	r0, r2
 8005f26:	4619      	mov	r1, r3
 8005f28:	f04f 0200 	mov.w	r2, #0
 8005f2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005f30:	f7fa fca4 	bl	800087c <__aeabi_ddiv>
 8005f34:	4602      	mov	r2, r0
 8005f36:	460b      	mov	r3, r1
 8005f38:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

   if((phi2 - phi1) < 0)
 8005f3c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8005f40:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005f44:	f7fa f9b8 	bl	80002b8 <__aeabi_dsub>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	460b      	mov	r3, r1
 8005f4c:	4610      	mov	r0, r2
 8005f4e:	4619      	mov	r1, r3
 8005f50:	f04f 0200 	mov.w	r2, #0
 8005f54:	f04f 0300 	mov.w	r3, #0
 8005f58:	f7fa fdd8 	bl	8000b0c <__aeabi_dcmplt>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d005      	beq.n	8005f6e <faza+0xd9e>
   {
      phi1 = -1 * phi1;
 8005f62:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 8005f64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f66:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8005f6a:	e9c7 451e 	strd	r4, r5, [r7, #120]	; 0x78
   }
   return (100 * phi1);
 8005f6e:	f04f 0200 	mov.w	r2, #0
 8005f72:	4b19      	ldr	r3, [pc, #100]	; (8005fd8 <faza+0xe08>)
 8005f74:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8005f78:	f7fa fb56 	bl	8000628 <__aeabi_dmul>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	460b      	mov	r3, r1
 8005f80:	ec43 2b17 	vmov	d7, r2, r3
}
 8005f84:	eeb0 0a47 	vmov.f32	s0, s14
 8005f88:	eef0 0a67 	vmov.f32	s1, s15
 8005f8c:	3784      	adds	r7, #132	; 0x84
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f94:	f3af 8000 	nop.w
 8005f98:	a2529d39 	.word	0xa2529d39
 8005f9c:	3f91df46 	.word	0x3f91df46
 8005fa0:	9db22d0e 	.word	0x9db22d0e
 8005fa4:	401927ef 	.word	0x401927ef
 8005fa8:	cccccccd 	.word	0xcccccccd
 8005fac:	4000cccc 	.word	0x4000cccc
 8005fb0:	d2f1a9fc 	.word	0xd2f1a9fc
 8005fb4:	3ff4624d 	.word	0x3ff4624d
 8005fb8:	04189375 	.word	0x04189375
 8005fbc:	3fe50e56 	.word	0x3fe50e56
 8005fc0:	1cac0831 	.word	0x1cac0831
 8005fc4:	3fcb645a 	.word	0x3fcb645a
 8005fc8:	c28f5c29 	.word	0xc28f5c29
 8005fcc:	3fbc28f5 	.word	0x3fbc28f5
 8005fd0:	40668000 	.word	0x40668000
 8005fd4:	3ff00000 	.word	0x3ff00000
 8005fd8:	40590000 	.word	0x40590000
 8005fdc:	a0000000 	.word	0xa0000000
 8005fe0:	419af4f0 	.word	0x419af4f0
 8005fe4:	9bfba959 	.word	0x9bfba959
 8005fe8:	40e193e1 	.word	0x40e193e1
 8005fec:	3b356034 	.word	0x3b356034
 8005ff0:	40765877 	.word	0x40765877
 8005ff4:	f40d8376 	.word	0xf40d8376
 8005ff8:	3f2421f5 	.word	0x3f2421f5
 8005ffc:	00000000 	.word	0x00000000
 8006000:	41775b01 	.word	0x41775b01
 8006004:	787456ea 	.word	0x787456ea
 8006008:	411d203b 	.word	0x411d203b
 800600c:	4424f2ff 	.word	0x4424f2ff
 8006010:	4060ded4 	.word	0x4060ded4
 8006014:	e618ce2d 	.word	0xe618ce2d
 8006018:	3f826d04 	.word	0x3f826d04
 800601c:	00000000 	.word	0x00000000
 8006020:	40f10430 	.word	0x40f10430
 8006024:	00000000 	.word	0x00000000
 8006028:	416c0f98 	.word	0x416c0f98

0800602c <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	460b      	mov	r3, r1
 8006036:	807b      	strh	r3, [r7, #2]
   if(huart->Instance == USART1)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a05      	ldr	r2, [pc, #20]	; (8006054 <HAL_UARTEx_RxEventCallback+0x28>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d104      	bne.n	800604c <HAL_UARTEx_RxEventCallback+0x20>
   {
      Rfp.DataSize = Size;
 8006042:	887b      	ldrh	r3, [r7, #2]
 8006044:	4a04      	ldr	r2, [pc, #16]	; (8006058 <HAL_UARTEx_RxEventCallback+0x2c>)
 8006046:	6093      	str	r3, [r2, #8]
      RFP_InterruptTask();
 8006048:	f001 fe7e 	bl	8007d48 <RFP_InterruptTask>
   }
}
 800604c:	bf00      	nop
 800604e:	3708      	adds	r7, #8
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}
 8006054:	40013800 	.word	0x40013800
 8006058:	20003d4c 	.word	0x20003d4c

0800605c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b088      	sub	sp, #32
 8006060:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006062:	f107 030c 	add.w	r3, r7, #12
 8006066:	2200      	movs	r2, #0
 8006068:	601a      	str	r2, [r3, #0]
 800606a:	605a      	str	r2, [r3, #4]
 800606c:	609a      	str	r2, [r3, #8]
 800606e:	60da      	str	r2, [r3, #12]
 8006070:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006072:	4b45      	ldr	r3, [pc, #276]	; (8006188 <MX_GPIO_Init+0x12c>)
 8006074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006076:	4a44      	ldr	r2, [pc, #272]	; (8006188 <MX_GPIO_Init+0x12c>)
 8006078:	f043 0304 	orr.w	r3, r3, #4
 800607c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800607e:	4b42      	ldr	r3, [pc, #264]	; (8006188 <MX_GPIO_Init+0x12c>)
 8006080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006082:	f003 0304 	and.w	r3, r3, #4
 8006086:	60bb      	str	r3, [r7, #8]
 8006088:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800608a:	4b3f      	ldr	r3, [pc, #252]	; (8006188 <MX_GPIO_Init+0x12c>)
 800608c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800608e:	4a3e      	ldr	r2, [pc, #248]	; (8006188 <MX_GPIO_Init+0x12c>)
 8006090:	f043 0301 	orr.w	r3, r3, #1
 8006094:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006096:	4b3c      	ldr	r3, [pc, #240]	; (8006188 <MX_GPIO_Init+0x12c>)
 8006098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800609a:	f003 0301 	and.w	r3, r3, #1
 800609e:	607b      	str	r3, [r7, #4]
 80060a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80060a2:	4b39      	ldr	r3, [pc, #228]	; (8006188 <MX_GPIO_Init+0x12c>)
 80060a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060a6:	4a38      	ldr	r2, [pc, #224]	; (8006188 <MX_GPIO_Init+0x12c>)
 80060a8:	f043 0302 	orr.w	r3, r3, #2
 80060ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80060ae:	4b36      	ldr	r3, [pc, #216]	; (8006188 <MX_GPIO_Init+0x12c>)
 80060b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060b2:	f003 0302 	and.w	r3, r3, #2
 80060b6:	603b      	str	r3, [r7, #0]
 80060b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SSD1306_CS_GPIO_Port, SSD1306_CS_Pin, GPIO_PIN_SET);
 80060ba:	2201      	movs	r2, #1
 80060bc:	2110      	movs	r1, #16
 80060be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80060c2:	f003 fdaf 	bl	8009c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SCREENS_DC_Pin|EPAPIER_CS_Pin|EPAPIER_RST_Pin|SSD1306_RST_Pin
 80060c6:	2201      	movs	r2, #1
 80060c8:	f640 61c3 	movw	r1, #3779	; 0xec3
 80060cc:	482f      	ldr	r0, [pc, #188]	; (800618c <MX_GPIO_Init+0x130>)
 80060ce:	f003 fda9 	bl	8009c24 <HAL_GPIO_WritePin>
                          |FRAM_CS_Pin|FRAM_WP_Pin|FLASH_CS_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HEARTBEAT_Pin|BME280_CS_Pin|FRAM_HOLD_Pin, GPIO_PIN_RESET);
 80060d2:	2200      	movs	r2, #0
 80060d4:	f44f 5144 	mov.w	r1, #12544	; 0x3100
 80060d8:	482c      	ldr	r0, [pc, #176]	; (800618c <MX_GPIO_Init+0x130>)
 80060da:	f003 fda3 	bl	8009c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HC12_SET_GPIO_Port, HC12_SET_Pin, GPIO_PIN_RESET);
 80060de:	2200      	movs	r2, #0
 80060e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80060e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80060e8:	f003 fd9c 	bl	8009c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SSD1306_CS_Pin;
 80060ec:	2310      	movs	r3, #16
 80060ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80060f0:	2301      	movs	r3, #1
 80060f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060f4:	2300      	movs	r3, #0
 80060f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060f8:	2303      	movs	r3, #3
 80060fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SSD1306_CS_GPIO_Port, &GPIO_InitStruct);
 80060fc:	f107 030c 	add.w	r3, r7, #12
 8006100:	4619      	mov	r1, r3
 8006102:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006106:	f003 fbe3 	bl	80098d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SCREENS_DC_Pin|EPAPIER_CS_Pin|EPAPIER_RST_Pin|SSD1306_RST_Pin
 800610a:	f641 63c3 	movw	r3, #7875	; 0x1ec3
 800610e:	60fb      	str	r3, [r7, #12]
                          |HEARTBEAT_Pin|FRAM_CS_Pin|FRAM_WP_Pin|FLASH_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006110:	2301      	movs	r3, #1
 8006112:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006114:	2300      	movs	r3, #0
 8006116:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006118:	2303      	movs	r3, #3
 800611a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800611c:	f107 030c 	add.w	r3, r7, #12
 8006120:	4619      	mov	r1, r3
 8006122:	481a      	ldr	r0, [pc, #104]	; (800618c <MX_GPIO_Init+0x130>)
 8006124:	f003 fbd4 	bl	80098d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = EPAPIER_BUSY_Pin|ENCODER_SWITCH_Pin;
 8006128:	f244 0304 	movw	r3, #16388	; 0x4004
 800612c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800612e:	2300      	movs	r3, #0
 8006130:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006132:	2300      	movs	r3, #0
 8006134:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006136:	f107 030c 	add.w	r3, r7, #12
 800613a:	4619      	mov	r1, r3
 800613c:	4813      	ldr	r0, [pc, #76]	; (800618c <MX_GPIO_Init+0x130>)
 800613e:	f003 fbc7 	bl	80098d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BME280_CS_Pin|FRAM_HOLD_Pin;
 8006142:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8006146:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006148:	2301      	movs	r3, #1
 800614a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800614c:	2300      	movs	r3, #0
 800614e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006150:	2300      	movs	r3, #0
 8006152:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006154:	f107 030c 	add.w	r3, r7, #12
 8006158:	4619      	mov	r1, r3
 800615a:	480c      	ldr	r0, [pc, #48]	; (800618c <MX_GPIO_Init+0x130>)
 800615c:	f003 fbb8 	bl	80098d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HC12_SET_Pin;
 8006160:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006164:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006166:	2301      	movs	r3, #1
 8006168:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800616a:	2300      	movs	r3, #0
 800616c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800616e:	2300      	movs	r3, #0
 8006170:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HC12_SET_GPIO_Port, &GPIO_InitStruct);
 8006172:	f107 030c 	add.w	r3, r7, #12
 8006176:	4619      	mov	r1, r3
 8006178:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800617c:	f003 fba8 	bl	80098d0 <HAL_GPIO_Init>

}
 8006180:	bf00      	nop
 8006182:	3720      	adds	r7, #32
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}
 8006188:	40021000 	.word	0x40021000
 800618c:	48000400 	.word	0x48000400

08006190 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8006194:	4b0b      	ldr	r3, [pc, #44]	; (80061c4 <MX_IWDG_Init+0x34>)
 8006196:	4a0c      	ldr	r2, [pc, #48]	; (80061c8 <MX_IWDG_Init+0x38>)
 8006198:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 800619a:	4b0a      	ldr	r3, [pc, #40]	; (80061c4 <MX_IWDG_Init+0x34>)
 800619c:	2206      	movs	r2, #6
 800619e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80061a0:	4b08      	ldr	r3, [pc, #32]	; (80061c4 <MX_IWDG_Init+0x34>)
 80061a2:	f640 72ff 	movw	r2, #4095	; 0xfff
 80061a6:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 80061a8:	4b06      	ldr	r3, [pc, #24]	; (80061c4 <MX_IWDG_Init+0x34>)
 80061aa:	f640 72ff 	movw	r2, #4095	; 0xfff
 80061ae:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80061b0:	4804      	ldr	r0, [pc, #16]	; (80061c4 <MX_IWDG_Init+0x34>)
 80061b2:	f003 fd69 	bl	8009c88 <HAL_IWDG_Init>
 80061b6:	4603      	mov	r3, r0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d001      	beq.n	80061c0 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 80061bc:	f000 f8b4 	bl	8006328 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80061c0:	bf00      	nop
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	20003e20 	.word	0x20003e20
 80061c8:	40003000 	.word	0x40003000

080061cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80061d0:	f002 fef5 	bl	8008fbe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80061d4:	f000 f81e 	bl	8006214 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80061d8:	f7ff ff40 	bl	800605c <MX_GPIO_Init>
  MX_DMA_Init();
 80061dc:	f7fc fc14 	bl	8002a08 <MX_DMA_Init>
  MX_RTC_Init();
 80061e0:	f002 f8c0 	bl	8008364 <MX_RTC_Init>
  MX_RNG_Init();
 80061e4:	f002 f874 	bl	80082d0 <MX_RNG_Init>
  MX_SPI1_Init();
 80061e8:	f002 f932 	bl	8008450 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80061ec:	f002 fde4 	bl	8008db8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80061f0:	f002 fc80 	bl	8008af4 <MX_TIM2_Init>
  MX_TIM5_Init();
 80061f4:	f002 fcf4 	bl	8008be0 <MX_TIM5_Init>
  MX_IWDG_Init();
 80061f8:	f7ff ffca 	bl	8006190 <MX_IWDG_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80061fc:	f000 f86e 	bl	80062dc <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8006200:	f009 fdec 	bl	800fddc <osKernelInitialize>
  MX_FREERTOS_Init();
 8006204:	f7fd f98c 	bl	8003520 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8006208:	f009 fe0c 	bl	800fe24 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   HAL_NVIC_SystemReset();
 800620c:	f003 f82d 	bl	800926a <HAL_NVIC_SystemReset>
   while(1)
 8006210:	e7fe      	b.n	8006210 <main+0x44>
	...

08006214 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b098      	sub	sp, #96	; 0x60
 8006218:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800621a:	f107 0318 	add.w	r3, r7, #24
 800621e:	2248      	movs	r2, #72	; 0x48
 8006220:	2100      	movs	r1, #0
 8006222:	4618      	mov	r0, r3
 8006224:	f00d fe3c 	bl	8013ea0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006228:	1d3b      	adds	r3, r7, #4
 800622a:	2200      	movs	r2, #0
 800622c:	601a      	str	r2, [r3, #0]
 800622e:	605a      	str	r2, [r3, #4]
 8006230:	609a      	str	r2, [r3, #8]
 8006232:	60da      	str	r2, [r3, #12]
 8006234:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8006236:	2000      	movs	r0, #0
 8006238:	f003 fdb6 	bl	8009da8 <HAL_PWREx_ControlVoltageScaling>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d001      	beq.n	8006246 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8006242:	f000 f871 	bl	8006328 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8006246:	f003 fd7f 	bl	8009d48 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800624a:	4b23      	ldr	r3, [pc, #140]	; (80062d8 <SystemClock_Config+0xc4>)
 800624c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006250:	4a21      	ldr	r2, [pc, #132]	; (80062d8 <SystemClock_Config+0xc4>)
 8006252:	f023 0318 	bic.w	r3, r3, #24
 8006256:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 800625a:	233c      	movs	r3, #60	; 0x3c
 800625c:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800625e:	2301      	movs	r3, #1
 8006260:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8006262:	2301      	movs	r3, #1
 8006264:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8006266:	2301      	movs	r3, #1
 8006268:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800626a:	2301      	movs	r3, #1
 800626c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800626e:	2300      	movs	r3, #0
 8006270:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8006272:	2360      	movs	r3, #96	; 0x60
 8006274:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006276:	2302      	movs	r3, #2
 8006278:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800627a:	2301      	movs	r3, #1
 800627c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 800627e:	2301      	movs	r3, #1
 8006280:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 60;
 8006282:	233c      	movs	r3, #60	; 0x3c
 8006284:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006286:	2302      	movs	r3, #2
 8006288:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800628a:	2302      	movs	r3, #2
 800628c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800628e:	2302      	movs	r3, #2
 8006290:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006292:	f107 0318 	add.w	r3, r7, #24
 8006296:	4618      	mov	r0, r3
 8006298:	f003 fe2a 	bl	8009ef0 <HAL_RCC_OscConfig>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d001      	beq.n	80062a6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80062a2:	f000 f841 	bl	8006328 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80062a6:	230f      	movs	r3, #15
 80062a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80062aa:	2303      	movs	r3, #3
 80062ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80062ae:	2300      	movs	r3, #0
 80062b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80062b2:	2300      	movs	r3, #0
 80062b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80062b6:	2300      	movs	r3, #0
 80062b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80062ba:	1d3b      	adds	r3, r7, #4
 80062bc:	2105      	movs	r1, #5
 80062be:	4618      	mov	r0, r3
 80062c0:	f004 fa92 	bl	800a7e8 <HAL_RCC_ClockConfig>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d001      	beq.n	80062ce <SystemClock_Config+0xba>
  {
    Error_Handler();
 80062ca:	f000 f82d 	bl	8006328 <Error_Handler>
  }
}
 80062ce:	bf00      	nop
 80062d0:	3760      	adds	r7, #96	; 0x60
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	40021000 	.word	0x40021000

080062dc <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	af00      	add	r7, sp, #0
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80062e0:	2200      	movs	r2, #0
 80062e2:	2105      	movs	r1, #5
 80062e4:	200b      	movs	r0, #11
 80062e6:	f002 ff96 	bl	8009216 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80062ea:	200b      	movs	r0, #11
 80062ec:	f002 ffaf 	bl	800924e <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80062f0:	2200      	movs	r2, #0
 80062f2:	2105      	movs	r1, #5
 80062f4:	2025      	movs	r0, #37	; 0x25
 80062f6:	f002 ff8e 	bl	8009216 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80062fa:	2025      	movs	r0, #37	; 0x25
 80062fc:	f002 ffa7 	bl	800924e <HAL_NVIC_EnableIRQ>
}
 8006300:	bf00      	nop
 8006302:	bd80      	pop	{r7, pc}

08006304 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a04      	ldr	r2, [pc, #16]	; (8006324 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d101      	bne.n	800631a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8006316:	f002 fe6b 	bl	8008ff0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800631a:	bf00      	nop
 800631c:	3708      	adds	r7, #8
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	40014800 	.word	0x40014800

08006328 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006328:	b480      	push	{r7}
 800632a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800632c:	b672      	cpsid	i
}
 800632e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
   /* User can add his own implementation to report the HAL error return state */
   __disable_irq();
   while(1)
 8006330:	e7fe      	b.n	8006330 <Error_Handler+0x8>

08006332 <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 8006332:	b480      	push	{r7}
 8006334:	b085      	sub	sp, #20
 8006336:	af00      	add	r7, sp, #0
 8006338:	60b9      	str	r1, [r7, #8]
 800633a:	607a      	str	r2, [r7, #4]
 800633c:	603b      	str	r3, [r7, #0]
 800633e:	4603      	mov	r3, r0
 8006340:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	429a      	cmp	r2, r3
 8006348:	d204      	bcs.n	8006354 <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 800634a:	68ba      	ldr	r2, [r7, #8]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4413      	add	r3, r2
 8006350:	7bfa      	ldrb	r2, [r7, #15]
 8006352:	701a      	strb	r2, [r3, #0]
  }
}
 8006354:	bf00      	nop
 8006356:	3714      	adds	r7, #20
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8006360:	b480      	push	{r7}
 8006362:	b085      	sub	sp, #20
 8006364:	af00      	add	r7, sp, #0
 8006366:	60b9      	str	r1, [r7, #8]
 8006368:	607a      	str	r2, [r7, #4]
 800636a:	603b      	str	r3, [r7, #0]
 800636c:	4603      	mov	r3, r0
 800636e:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8006370:	bf00      	nop
 8006372:	3714      	adds	r7, #20
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 800637c:	b480      	push	{r7}
 800637e:	b085      	sub	sp, #20
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	60fb      	str	r3, [r7, #12]
 800638a:	e002      	b.n	8006392 <_strnlen_s+0x16>
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	3301      	adds	r3, #1
 8006390:	60fb      	str	r3, [r7, #12]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d004      	beq.n	80063a4 <_strnlen_s+0x28>
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	1e5a      	subs	r2, r3, #1
 800639e:	603a      	str	r2, [r7, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d1f3      	bne.n	800638c <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	1ad3      	subs	r3, r2, r3
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3714      	adds	r7, #20
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr

080063b6 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 80063b6:	b480      	push	{r7}
 80063b8:	b083      	sub	sp, #12
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	4603      	mov	r3, r0
 80063be:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 80063c0:	79fb      	ldrb	r3, [r7, #7]
 80063c2:	2b2f      	cmp	r3, #47	; 0x2f
 80063c4:	d904      	bls.n	80063d0 <_is_digit+0x1a>
 80063c6:	79fb      	ldrb	r3, [r7, #7]
 80063c8:	2b39      	cmp	r3, #57	; 0x39
 80063ca:	d801      	bhi.n	80063d0 <_is_digit+0x1a>
 80063cc:	2301      	movs	r3, #1
 80063ce:	e000      	b.n	80063d2 <_is_digit+0x1c>
 80063d0:	2300      	movs	r3, #0
 80063d2:	f003 0301 	and.w	r3, r3, #1
 80063d6:	b2db      	uxtb	r3, r3
}
 80063d8:	4618      	mov	r0, r3
 80063da:	370c      	adds	r7, #12
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr

080063e4 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b084      	sub	sp, #16
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 80063ec:	2300      	movs	r3, #0
 80063ee:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 80063f0:	e00e      	b.n	8006410 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 80063f2:	68fa      	ldr	r2, [r7, #12]
 80063f4:	4613      	mov	r3, r2
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	4413      	add	r3, r2
 80063fa:	005b      	lsls	r3, r3, #1
 80063fc:	4618      	mov	r0, r3
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	1c59      	adds	r1, r3, #1
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	6011      	str	r1, [r2, #0]
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	4403      	add	r3, r0
 800640c:	3b30      	subs	r3, #48	; 0x30
 800640e:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	4618      	mov	r0, r3
 8006418:	f7ff ffcd 	bl	80063b6 <_is_digit>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d1e7      	bne.n	80063f2 <_atoi+0xe>
  }
  return i;
 8006422:	68fb      	ldr	r3, [r7, #12]
}
 8006424:	4618      	mov	r0, r3
 8006426:	3710      	adds	r7, #16
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 800642c:	b590      	push	{r4, r7, lr}
 800642e:	b087      	sub	sp, #28
 8006430:	af00      	add	r7, sp, #0
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	60b9      	str	r1, [r7, #8]
 8006436:	607a      	str	r2, [r7, #4]
 8006438:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 800643e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006440:	f003 0302 	and.w	r3, r3, #2
 8006444:	2b00      	cmp	r3, #0
 8006446:	d125      	bne.n	8006494 <_out_rev+0x68>
 8006448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800644a:	f003 0301 	and.w	r3, r3, #1
 800644e:	2b00      	cmp	r3, #0
 8006450:	d120      	bne.n	8006494 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8006452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006454:	617b      	str	r3, [r7, #20]
 8006456:	e00a      	b.n	800646e <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	1c53      	adds	r3, r2, #1
 800645c:	607b      	str	r3, [r7, #4]
 800645e:	68fc      	ldr	r4, [r7, #12]
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	68b9      	ldr	r1, [r7, #8]
 8006464:	2020      	movs	r0, #32
 8006466:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	3301      	adds	r3, #1
 800646c:	617b      	str	r3, [r7, #20]
 800646e:	697a      	ldr	r2, [r7, #20]
 8006470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006472:	429a      	cmp	r2, r3
 8006474:	d3f0      	bcc.n	8006458 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 8006476:	e00d      	b.n	8006494 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8006478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800647a:	3b01      	subs	r3, #1
 800647c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800647e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006482:	4413      	add	r3, r2
 8006484:	7818      	ldrb	r0, [r3, #0]
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	1c53      	adds	r3, r2, #1
 800648a:	607b      	str	r3, [r7, #4]
 800648c:	68fc      	ldr	r4, [r7, #12]
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	68b9      	ldr	r1, [r7, #8]
 8006492:	47a0      	blx	r4
  while (len) {
 8006494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006496:	2b00      	cmp	r3, #0
 8006498:	d1ee      	bne.n	8006478 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 800649a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800649c:	f003 0302 	and.w	r3, r3, #2
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d00e      	beq.n	80064c2 <_out_rev+0x96>
    while (idx - start_idx < width) {
 80064a4:	e007      	b.n	80064b6 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	1c53      	adds	r3, r2, #1
 80064aa:	607b      	str	r3, [r7, #4]
 80064ac:	68fc      	ldr	r4, [r7, #12]
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	68b9      	ldr	r1, [r7, #8]
 80064b2:	2020      	movs	r0, #32
 80064b4:	47a0      	blx	r4
    while (idx - start_idx < width) {
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	1ad3      	subs	r3, r2, r3
 80064bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064be:	429a      	cmp	r2, r3
 80064c0:	d8f1      	bhi.n	80064a6 <_out_rev+0x7a>
    }
  }

  return idx;
 80064c2:	687b      	ldr	r3, [r7, #4]
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	371c      	adds	r7, #28
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd90      	pop	{r4, r7, pc}

080064cc <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b088      	sub	sp, #32
 80064d0:	af04      	add	r7, sp, #16
 80064d2:	60f8      	str	r0, [r7, #12]
 80064d4:	60b9      	str	r1, [r7, #8]
 80064d6:	607a      	str	r2, [r7, #4]
 80064d8:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 80064da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064dc:	f003 0302 	and.w	r3, r3, #2
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d136      	bne.n	8006552 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80064e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d018      	beq.n	800651c <_ntoa_format+0x50>
 80064ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ec:	f003 0301 	and.w	r3, r3, #1
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d013      	beq.n	800651c <_ntoa_format+0x50>
 80064f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d104      	bne.n	8006506 <_ntoa_format+0x3a>
 80064fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064fe:	f003 030c 	and.w	r3, r3, #12
 8006502:	2b00      	cmp	r3, #0
 8006504:	d00a      	beq.n	800651c <_ntoa_format+0x50>
      width--;
 8006506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006508:	3b01      	subs	r3, #1
 800650a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800650c:	e006      	b.n	800651c <_ntoa_format+0x50>
      buf[len++] = '0';
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	1c5a      	adds	r2, r3, #1
 8006512:	61fa      	str	r2, [r7, #28]
 8006514:	69ba      	ldr	r2, [r7, #24]
 8006516:	4413      	add	r3, r2
 8006518:	2230      	movs	r2, #48	; 0x30
 800651a:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800651c:	69fa      	ldr	r2, [r7, #28]
 800651e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006520:	429a      	cmp	r2, r3
 8006522:	d20a      	bcs.n	800653a <_ntoa_format+0x6e>
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	2b1f      	cmp	r3, #31
 8006528:	d9f1      	bls.n	800650e <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800652a:	e006      	b.n	800653a <_ntoa_format+0x6e>
      buf[len++] = '0';
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	1c5a      	adds	r2, r3, #1
 8006530:	61fa      	str	r2, [r7, #28]
 8006532:	69ba      	ldr	r2, [r7, #24]
 8006534:	4413      	add	r3, r2
 8006536:	2230      	movs	r2, #48	; 0x30
 8006538:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800653a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800653c:	f003 0301 	and.w	r3, r3, #1
 8006540:	2b00      	cmp	r3, #0
 8006542:	d006      	beq.n	8006552 <_ntoa_format+0x86>
 8006544:	69fa      	ldr	r2, [r7, #28]
 8006546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006548:	429a      	cmp	r2, r3
 800654a:	d202      	bcs.n	8006552 <_ntoa_format+0x86>
 800654c:	69fb      	ldr	r3, [r7, #28]
 800654e:	2b1f      	cmp	r3, #31
 8006550:	d9ec      	bls.n	800652c <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8006552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006554:	f003 0310 	and.w	r3, r3, #16
 8006558:	2b00      	cmp	r3, #0
 800655a:	d058      	beq.n	800660e <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 800655c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800655e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006562:	2b00      	cmp	r3, #0
 8006564:	d116      	bne.n	8006594 <_ntoa_format+0xc8>
 8006566:	69fb      	ldr	r3, [r7, #28]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d013      	beq.n	8006594 <_ntoa_format+0xc8>
 800656c:	69fa      	ldr	r2, [r7, #28]
 800656e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006570:	429a      	cmp	r2, r3
 8006572:	d003      	beq.n	800657c <_ntoa_format+0xb0>
 8006574:	69fa      	ldr	r2, [r7, #28]
 8006576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006578:	429a      	cmp	r2, r3
 800657a:	d10b      	bne.n	8006594 <_ntoa_format+0xc8>
      len--;
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	3b01      	subs	r3, #1
 8006580:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d005      	beq.n	8006594 <_ntoa_format+0xc8>
 8006588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658a:	2b10      	cmp	r3, #16
 800658c:	d102      	bne.n	8006594 <_ntoa_format+0xc8>
        len--;
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	3b01      	subs	r3, #1
 8006592:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8006594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006596:	2b10      	cmp	r3, #16
 8006598:	d10f      	bne.n	80065ba <_ntoa_format+0xee>
 800659a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659c:	f003 0320 	and.w	r3, r3, #32
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d10a      	bne.n	80065ba <_ntoa_format+0xee>
 80065a4:	69fb      	ldr	r3, [r7, #28]
 80065a6:	2b1f      	cmp	r3, #31
 80065a8:	d807      	bhi.n	80065ba <_ntoa_format+0xee>
      buf[len++] = 'x';
 80065aa:	69fb      	ldr	r3, [r7, #28]
 80065ac:	1c5a      	adds	r2, r3, #1
 80065ae:	61fa      	str	r2, [r7, #28]
 80065b0:	69ba      	ldr	r2, [r7, #24]
 80065b2:	4413      	add	r3, r2
 80065b4:	2278      	movs	r2, #120	; 0x78
 80065b6:	701a      	strb	r2, [r3, #0]
 80065b8:	e01f      	b.n	80065fa <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80065ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065bc:	2b10      	cmp	r3, #16
 80065be:	d10f      	bne.n	80065e0 <_ntoa_format+0x114>
 80065c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c2:	f003 0320 	and.w	r3, r3, #32
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00a      	beq.n	80065e0 <_ntoa_format+0x114>
 80065ca:	69fb      	ldr	r3, [r7, #28]
 80065cc:	2b1f      	cmp	r3, #31
 80065ce:	d807      	bhi.n	80065e0 <_ntoa_format+0x114>
      buf[len++] = 'X';
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	1c5a      	adds	r2, r3, #1
 80065d4:	61fa      	str	r2, [r7, #28]
 80065d6:	69ba      	ldr	r2, [r7, #24]
 80065d8:	4413      	add	r3, r2
 80065da:	2258      	movs	r2, #88	; 0x58
 80065dc:	701a      	strb	r2, [r3, #0]
 80065de:	e00c      	b.n	80065fa <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80065e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	d109      	bne.n	80065fa <_ntoa_format+0x12e>
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	2b1f      	cmp	r3, #31
 80065ea:	d806      	bhi.n	80065fa <_ntoa_format+0x12e>
      buf[len++] = 'b';
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	1c5a      	adds	r2, r3, #1
 80065f0:	61fa      	str	r2, [r7, #28]
 80065f2:	69ba      	ldr	r2, [r7, #24]
 80065f4:	4413      	add	r3, r2
 80065f6:	2262      	movs	r2, #98	; 0x62
 80065f8:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	2b1f      	cmp	r3, #31
 80065fe:	d806      	bhi.n	800660e <_ntoa_format+0x142>
      buf[len++] = '0';
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	1c5a      	adds	r2, r3, #1
 8006604:	61fa      	str	r2, [r7, #28]
 8006606:	69ba      	ldr	r2, [r7, #24]
 8006608:	4413      	add	r3, r2
 800660a:	2230      	movs	r2, #48	; 0x30
 800660c:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	2b1f      	cmp	r3, #31
 8006612:	d824      	bhi.n	800665e <_ntoa_format+0x192>
    if (negative) {
 8006614:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d007      	beq.n	800662c <_ntoa_format+0x160>
      buf[len++] = '-';
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	1c5a      	adds	r2, r3, #1
 8006620:	61fa      	str	r2, [r7, #28]
 8006622:	69ba      	ldr	r2, [r7, #24]
 8006624:	4413      	add	r3, r2
 8006626:	222d      	movs	r2, #45	; 0x2d
 8006628:	701a      	strb	r2, [r3, #0]
 800662a:	e018      	b.n	800665e <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 800662c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662e:	f003 0304 	and.w	r3, r3, #4
 8006632:	2b00      	cmp	r3, #0
 8006634:	d007      	beq.n	8006646 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	1c5a      	adds	r2, r3, #1
 800663a:	61fa      	str	r2, [r7, #28]
 800663c:	69ba      	ldr	r2, [r7, #24]
 800663e:	4413      	add	r3, r2
 8006640:	222b      	movs	r2, #43	; 0x2b
 8006642:	701a      	strb	r2, [r3, #0]
 8006644:	e00b      	b.n	800665e <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8006646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006648:	f003 0308 	and.w	r3, r3, #8
 800664c:	2b00      	cmp	r3, #0
 800664e:	d006      	beq.n	800665e <_ntoa_format+0x192>
      buf[len++] = ' ';
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	1c5a      	adds	r2, r3, #1
 8006654:	61fa      	str	r2, [r7, #28]
 8006656:	69ba      	ldr	r2, [r7, #24]
 8006658:	4413      	add	r3, r2
 800665a:	2220      	movs	r2, #32
 800665c:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800665e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006660:	9303      	str	r3, [sp, #12]
 8006662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006664:	9302      	str	r3, [sp, #8]
 8006666:	69fb      	ldr	r3, [r7, #28]
 8006668:	9301      	str	r3, [sp, #4]
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	9300      	str	r3, [sp, #0]
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	68b9      	ldr	r1, [r7, #8]
 8006674:	68f8      	ldr	r0, [r7, #12]
 8006676:	f7ff fed9 	bl	800642c <_out_rev>
 800667a:	4603      	mov	r3, r0
}
 800667c:	4618      	mov	r0, r3
 800667e:	3710      	adds	r7, #16
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}

08006684 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b096      	sub	sp, #88	; 0x58
 8006688:	af08      	add	r7, sp, #32
 800668a:	60f8      	str	r0, [r7, #12]
 800668c:	60b9      	str	r1, [r7, #8]
 800668e:	607a      	str	r2, [r7, #4]
 8006690:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8006692:	2300      	movs	r3, #0
 8006694:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8006696:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006698:	2b00      	cmp	r3, #0
 800669a:	d103      	bne.n	80066a4 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 800669c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800669e:	f023 0310 	bic.w	r3, r3, #16
 80066a2:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80066a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d002      	beq.n	80066b4 <_ntoa_long+0x30>
 80066ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d032      	beq.n	800671a <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 80066b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066b8:	fbb3 f2f2 	udiv	r2, r3, r2
 80066bc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80066be:	fb01 f202 	mul.w	r2, r1, r2
 80066c2:	1a9b      	subs	r3, r3, r2
 80066c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80066c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80066cc:	2b09      	cmp	r3, #9
 80066ce:	d804      	bhi.n	80066da <_ntoa_long+0x56>
 80066d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80066d4:	3330      	adds	r3, #48	; 0x30
 80066d6:	b2da      	uxtb	r2, r3
 80066d8:	e00d      	b.n	80066f6 <_ntoa_long+0x72>
 80066da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066dc:	f003 0320 	and.w	r3, r3, #32
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d001      	beq.n	80066e8 <_ntoa_long+0x64>
 80066e4:	2241      	movs	r2, #65	; 0x41
 80066e6:	e000      	b.n	80066ea <_ntoa_long+0x66>
 80066e8:	2261      	movs	r2, #97	; 0x61
 80066ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80066ee:	4413      	add	r3, r2
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	3b0a      	subs	r3, #10
 80066f4:	b2da      	uxtb	r2, r3
 80066f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066f8:	1c59      	adds	r1, r3, #1
 80066fa:	6379      	str	r1, [r7, #52]	; 0x34
 80066fc:	3338      	adds	r3, #56	; 0x38
 80066fe:	443b      	add	r3, r7
 8006700:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8006704:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006706:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006708:	fbb2 f3f3 	udiv	r3, r2, r3
 800670c:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800670e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006710:	2b00      	cmp	r3, #0
 8006712:	d002      	beq.n	800671a <_ntoa_long+0x96>
 8006714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006716:	2b1f      	cmp	r3, #31
 8006718:	d9cc      	bls.n	80066b4 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800671a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800671c:	9306      	str	r3, [sp, #24]
 800671e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006720:	9305      	str	r3, [sp, #20]
 8006722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006724:	9304      	str	r3, [sp, #16]
 8006726:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006728:	9303      	str	r3, [sp, #12]
 800672a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800672e:	9302      	str	r3, [sp, #8]
 8006730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006732:	9301      	str	r3, [sp, #4]
 8006734:	f107 0310 	add.w	r3, r7, #16
 8006738:	9300      	str	r3, [sp, #0]
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	68b9      	ldr	r1, [r7, #8]
 8006740:	68f8      	ldr	r0, [r7, #12]
 8006742:	f7ff fec3 	bl	80064cc <_ntoa_format>
 8006746:	4603      	mov	r3, r0
}
 8006748:	4618      	mov	r0, r3
 800674a:	3738      	adds	r7, #56	; 0x38
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}

08006750 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b096      	sub	sp, #88	; 0x58
 8006754:	af08      	add	r7, sp, #32
 8006756:	60f8      	str	r0, [r7, #12]
 8006758:	60b9      	str	r1, [r7, #8]
 800675a:	607a      	str	r2, [r7, #4]
 800675c:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800675e:	2300      	movs	r3, #0
 8006760:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8006762:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006766:	4313      	orrs	r3, r2
 8006768:	d103      	bne.n	8006772 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 800676a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800676c:	f023 0310 	bic.w	r3, r3, #16
 8006770:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8006772:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006778:	2b00      	cmp	r3, #0
 800677a:	d003      	beq.n	8006784 <_ntoa_long_long+0x34>
 800677c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006780:	4313      	orrs	r3, r2
 8006782:	d037      	beq.n	80067f4 <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 8006784:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006788:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800678c:	f7fa fae4 	bl	8000d58 <__aeabi_uldivmod>
 8006790:	4613      	mov	r3, r2
 8006792:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8006796:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800679a:	2b09      	cmp	r3, #9
 800679c:	d804      	bhi.n	80067a8 <_ntoa_long_long+0x58>
 800679e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80067a2:	3330      	adds	r3, #48	; 0x30
 80067a4:	b2da      	uxtb	r2, r3
 80067a6:	e00d      	b.n	80067c4 <_ntoa_long_long+0x74>
 80067a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067aa:	f003 0320 	and.w	r3, r3, #32
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d001      	beq.n	80067b6 <_ntoa_long_long+0x66>
 80067b2:	2241      	movs	r2, #65	; 0x41
 80067b4:	e000      	b.n	80067b8 <_ntoa_long_long+0x68>
 80067b6:	2261      	movs	r2, #97	; 0x61
 80067b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80067bc:	4413      	add	r3, r2
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	3b0a      	subs	r3, #10
 80067c2:	b2da      	uxtb	r2, r3
 80067c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067c6:	1c59      	adds	r1, r3, #1
 80067c8:	6379      	str	r1, [r7, #52]	; 0x34
 80067ca:	3338      	adds	r3, #56	; 0x38
 80067cc:	443b      	add	r3, r7
 80067ce:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 80067d2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80067d6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80067da:	f7fa fabd 	bl	8000d58 <__aeabi_uldivmod>
 80067de:	4602      	mov	r2, r0
 80067e0:	460b      	mov	r3, r1
 80067e2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80067e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80067ea:	4313      	orrs	r3, r2
 80067ec:	d002      	beq.n	80067f4 <_ntoa_long_long+0xa4>
 80067ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067f0:	2b1f      	cmp	r3, #31
 80067f2:	d9c7      	bls.n	8006784 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80067f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067f6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80067f8:	9206      	str	r2, [sp, #24]
 80067fa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80067fc:	9205      	str	r2, [sp, #20]
 80067fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006800:	9204      	str	r2, [sp, #16]
 8006802:	9303      	str	r3, [sp, #12]
 8006804:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8006808:	9302      	str	r3, [sp, #8]
 800680a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800680c:	9301      	str	r3, [sp, #4]
 800680e:	f107 0310 	add.w	r3, r7, #16
 8006812:	9300      	str	r3, [sp, #0]
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	68b9      	ldr	r1, [r7, #8]
 800681a:	68f8      	ldr	r0, [r7, #12]
 800681c:	f7ff fe56 	bl	80064cc <_ntoa_format>
 8006820:	4603      	mov	r3, r0
}
 8006822:	4618      	mov	r0, r3
 8006824:	3738      	adds	r7, #56	; 0x38
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	0000      	movs	r0, r0
 800682c:	0000      	movs	r0, r0
	...

08006830 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8006830:	b590      	push	{r4, r7, lr}
 8006832:	b09d      	sub	sp, #116	; 0x74
 8006834:	af04      	add	r7, sp, #16
 8006836:	6178      	str	r0, [r7, #20]
 8006838:	6139      	str	r1, [r7, #16]
 800683a:	60fa      	str	r2, [r7, #12]
 800683c:	60bb      	str	r3, [r7, #8]
 800683e:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8006842:	2300      	movs	r3, #0
 8006844:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 8006846:	f04f 0200 	mov.w	r2, #0
 800684a:	f04f 0300 	mov.w	r3, #0
 800684e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8006852:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006856:	e9d7 0100 	ldrd	r0, r1, [r7]
 800685a:	f7fa f94d 	bl	8000af8 <__aeabi_dcmpeq>
 800685e:	4603      	mov	r3, r0
 8006860:	2b00      	cmp	r3, #0
 8006862:	d10f      	bne.n	8006884 <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8006864:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006866:	9303      	str	r3, [sp, #12]
 8006868:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800686a:	9302      	str	r3, [sp, #8]
 800686c:	2303      	movs	r3, #3
 800686e:	9301      	str	r3, [sp, #4]
 8006870:	4ba7      	ldr	r3, [pc, #668]	; (8006b10 <_ftoa+0x2e0>)
 8006872:	9300      	str	r3, [sp, #0]
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	68fa      	ldr	r2, [r7, #12]
 8006878:	6939      	ldr	r1, [r7, #16]
 800687a:	6978      	ldr	r0, [r7, #20]
 800687c:	f7ff fdd6 	bl	800642c <_out_rev>
 8006880:	4603      	mov	r3, r0
 8006882:	e222      	b.n	8006cca <_ftoa+0x49a>
  if (value < -DBL_MAX)
 8006884:	f04f 32ff 	mov.w	r2, #4294967295
 8006888:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800688c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006890:	f7fa f93c 	bl	8000b0c <__aeabi_dcmplt>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00f      	beq.n	80068ba <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 800689a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800689c:	9303      	str	r3, [sp, #12]
 800689e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068a0:	9302      	str	r3, [sp, #8]
 80068a2:	2304      	movs	r3, #4
 80068a4:	9301      	str	r3, [sp, #4]
 80068a6:	4b9b      	ldr	r3, [pc, #620]	; (8006b14 <_ftoa+0x2e4>)
 80068a8:	9300      	str	r3, [sp, #0]
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	68fa      	ldr	r2, [r7, #12]
 80068ae:	6939      	ldr	r1, [r7, #16]
 80068b0:	6978      	ldr	r0, [r7, #20]
 80068b2:	f7ff fdbb 	bl	800642c <_out_rev>
 80068b6:	4603      	mov	r3, r0
 80068b8:	e207      	b.n	8006cca <_ftoa+0x49a>
  if (value > DBL_MAX)
 80068ba:	f04f 32ff 	mov.w	r2, #4294967295
 80068be:	4b96      	ldr	r3, [pc, #600]	; (8006b18 <_ftoa+0x2e8>)
 80068c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80068c4:	f7fa f940 	bl	8000b48 <__aeabi_dcmpgt>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d01d      	beq.n	800690a <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 80068ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068d0:	f003 0304 	and.w	r3, r3, #4
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d001      	beq.n	80068dc <_ftoa+0xac>
 80068d8:	4b90      	ldr	r3, [pc, #576]	; (8006b1c <_ftoa+0x2ec>)
 80068da:	e000      	b.n	80068de <_ftoa+0xae>
 80068dc:	4b90      	ldr	r3, [pc, #576]	; (8006b20 <_ftoa+0x2f0>)
 80068de:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80068e0:	f002 0204 	and.w	r2, r2, #4
 80068e4:	2a00      	cmp	r2, #0
 80068e6:	d001      	beq.n	80068ec <_ftoa+0xbc>
 80068e8:	2204      	movs	r2, #4
 80068ea:	e000      	b.n	80068ee <_ftoa+0xbe>
 80068ec:	2203      	movs	r2, #3
 80068ee:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80068f0:	9103      	str	r1, [sp, #12]
 80068f2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80068f4:	9102      	str	r1, [sp, #8]
 80068f6:	9201      	str	r2, [sp, #4]
 80068f8:	9300      	str	r3, [sp, #0]
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	68fa      	ldr	r2, [r7, #12]
 80068fe:	6939      	ldr	r1, [r7, #16]
 8006900:	6978      	ldr	r0, [r7, #20]
 8006902:	f7ff fd93 	bl	800642c <_out_rev>
 8006906:	4603      	mov	r3, r0
 8006908:	e1df      	b.n	8006cca <_ftoa+0x49a>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 800690a:	a37d      	add	r3, pc, #500	; (adr r3, 8006b00 <_ftoa+0x2d0>)
 800690c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006910:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006914:	f7fa f918 	bl	8000b48 <__aeabi_dcmpgt>
 8006918:	4603      	mov	r3, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d109      	bne.n	8006932 <_ftoa+0x102>
 800691e:	a37a      	add	r3, pc, #488	; (adr r3, 8006b08 <_ftoa+0x2d8>)
 8006920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006924:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006928:	f7fa f8f0 	bl	8000b0c <__aeabi_dcmplt>
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d00f      	beq.n	8006952 <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8006932:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006934:	9302      	str	r3, [sp, #8]
 8006936:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006938:	9301      	str	r3, [sp, #4]
 800693a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800693c:	9300      	str	r3, [sp, #0]
 800693e:	ed97 0b00 	vldr	d0, [r7]
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	6939      	ldr	r1, [r7, #16]
 8006948:	6978      	ldr	r0, [r7, #20]
 800694a:	f000 f9c9 	bl	8006ce0 <_etoa>
 800694e:	4603      	mov	r3, r0
 8006950:	e1bb      	b.n	8006cca <_ftoa+0x49a>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8006952:	2300      	movs	r3, #0
 8006954:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 8006958:	f04f 0200 	mov.w	r2, #0
 800695c:	f04f 0300 	mov.w	r3, #0
 8006960:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006964:	f7fa f8d2 	bl	8000b0c <__aeabi_dcmplt>
 8006968:	4603      	mov	r3, r0
 800696a:	2b00      	cmp	r3, #0
 800696c:	d00e      	beq.n	800698c <_ftoa+0x15c>
    negative = true;
 800696e:	2301      	movs	r3, #1
 8006970:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 8006974:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006978:	f04f 0000 	mov.w	r0, #0
 800697c:	f04f 0100 	mov.w	r1, #0
 8006980:	f7f9 fc9a 	bl	80002b8 <__aeabi_dsub>
 8006984:	4602      	mov	r2, r0
 8006986:	460b      	mov	r3, r1
 8006988:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 800698c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800698e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006992:	2b00      	cmp	r3, #0
 8006994:	d10d      	bne.n	80069b2 <_ftoa+0x182>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8006996:	2306      	movs	r3, #6
 8006998:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800699a:	e00a      	b.n	80069b2 <_ftoa+0x182>
    buf[len++] = '0';
 800699c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800699e:	1c5a      	adds	r2, r3, #1
 80069a0:	65fa      	str	r2, [r7, #92]	; 0x5c
 80069a2:	3360      	adds	r3, #96	; 0x60
 80069a4:	443b      	add	r3, r7
 80069a6:	2230      	movs	r2, #48	; 0x30
 80069a8:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 80069ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069ae:	3b01      	subs	r3, #1
 80069b0:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 80069b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069b4:	2b1f      	cmp	r3, #31
 80069b6:	d802      	bhi.n	80069be <_ftoa+0x18e>
 80069b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069ba:	2b09      	cmp	r3, #9
 80069bc:	d8ee      	bhi.n	800699c <_ftoa+0x16c>
  }

  int whole = (int)value;
 80069be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069c2:	f7fa f8e1 	bl	8000b88 <__aeabi_d2iz>
 80069c6:	4603      	mov	r3, r0
 80069c8:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 80069ca:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80069cc:	f7f9 fdc2 	bl	8000554 <__aeabi_i2d>
 80069d0:	4602      	mov	r2, r0
 80069d2:	460b      	mov	r3, r1
 80069d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069d8:	f7f9 fc6e 	bl	80002b8 <__aeabi_dsub>
 80069dc:	4602      	mov	r2, r0
 80069de:	460b      	mov	r3, r1
 80069e0:	4610      	mov	r0, r2
 80069e2:	4619      	mov	r1, r3
 80069e4:	4a4f      	ldr	r2, [pc, #316]	; (8006b24 <_ftoa+0x2f4>)
 80069e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069e8:	00db      	lsls	r3, r3, #3
 80069ea:	4413      	add	r3, r2
 80069ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f0:	f7f9 fe1a 	bl	8000628 <__aeabi_dmul>
 80069f4:	4602      	mov	r2, r0
 80069f6:	460b      	mov	r3, r1
 80069f8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 80069fc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006a00:	f7fa f8ea 	bl	8000bd8 <__aeabi_d2uiz>
 8006a04:	4603      	mov	r3, r0
 8006a06:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 8006a08:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006a0a:	f7f9 fd93 	bl	8000534 <__aeabi_ui2d>
 8006a0e:	4602      	mov	r2, r0
 8006a10:	460b      	mov	r3, r1
 8006a12:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006a16:	f7f9 fc4f 	bl	80002b8 <__aeabi_dsub>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	460b      	mov	r3, r1
 8006a1e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 8006a22:	f04f 0200 	mov.w	r2, #0
 8006a26:	4b40      	ldr	r3, [pc, #256]	; (8006b28 <_ftoa+0x2f8>)
 8006a28:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006a2c:	f7fa f88c 	bl	8000b48 <__aeabi_dcmpgt>
 8006a30:	4603      	mov	r3, r0
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d016      	beq.n	8006a64 <_ftoa+0x234>
    ++frac;
 8006a36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a38:	3301      	adds	r3, #1
 8006a3a:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8006a3c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006a3e:	f7f9 fd79 	bl	8000534 <__aeabi_ui2d>
 8006a42:	4a38      	ldr	r2, [pc, #224]	; (8006b24 <_ftoa+0x2f4>)
 8006a44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a46:	00db      	lsls	r3, r3, #3
 8006a48:	4413      	add	r3, r2
 8006a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a4e:	f7fa f871 	bl	8000b34 <__aeabi_dcmpge>
 8006a52:	4603      	mov	r3, r0
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d01a      	beq.n	8006a8e <_ftoa+0x25e>
      frac = 0;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 8006a5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a5e:	3301      	adds	r3, #1
 8006a60:	657b      	str	r3, [r7, #84]	; 0x54
 8006a62:	e014      	b.n	8006a8e <_ftoa+0x25e>
    }
  }
  else if (diff < 0.5) {
 8006a64:	f04f 0200 	mov.w	r2, #0
 8006a68:	4b2f      	ldr	r3, [pc, #188]	; (8006b28 <_ftoa+0x2f8>)
 8006a6a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006a6e:	f7fa f84d 	bl	8000b0c <__aeabi_dcmplt>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d10a      	bne.n	8006a8e <_ftoa+0x25e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8006a78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d004      	beq.n	8006a88 <_ftoa+0x258>
 8006a7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a80:	f003 0301 	and.w	r3, r3, #1
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d002      	beq.n	8006a8e <_ftoa+0x25e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8006a88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 8006a8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d14b      	bne.n	8006b2c <_ftoa+0x2fc>
    diff = value - (double)whole;
 8006a94:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8006a96:	f7f9 fd5d 	bl	8000554 <__aeabi_i2d>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	460b      	mov	r3, r1
 8006a9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006aa2:	f7f9 fc09 	bl	80002b8 <__aeabi_dsub>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	460b      	mov	r3, r1
 8006aaa:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8006aae:	2301      	movs	r3, #1
 8006ab0:	461c      	mov	r4, r3
 8006ab2:	f04f 0200 	mov.w	r2, #0
 8006ab6:	4b1c      	ldr	r3, [pc, #112]	; (8006b28 <_ftoa+0x2f8>)
 8006ab8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006abc:	f7fa f826 	bl	8000b0c <__aeabi_dcmplt>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d101      	bne.n	8006aca <_ftoa+0x29a>
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	461c      	mov	r4, r3
 8006aca:	b2e3      	uxtb	r3, r4
 8006acc:	f083 0301 	eor.w	r3, r3, #1
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d109      	bne.n	8006aea <_ftoa+0x2ba>
 8006ad6:	f04f 0200 	mov.w	r2, #0
 8006ada:	4b13      	ldr	r3, [pc, #76]	; (8006b28 <_ftoa+0x2f8>)
 8006adc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006ae0:	f7fa f832 	bl	8000b48 <__aeabi_dcmpgt>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d064      	beq.n	8006bb4 <_ftoa+0x384>
 8006aea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006aec:	f003 0301 	and.w	r3, r3, #1
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	f000 8081 	beq.w	8006bf8 <_ftoa+0x3c8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8006af6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006af8:	3301      	adds	r3, #1
 8006afa:	657b      	str	r3, [r7, #84]	; 0x54
 8006afc:	e07c      	b.n	8006bf8 <_ftoa+0x3c8>
 8006afe:	bf00      	nop
 8006b00:	00000000 	.word	0x00000000
 8006b04:	41cdcd65 	.word	0x41cdcd65
 8006b08:	00000000 	.word	0x00000000
 8006b0c:	c1cdcd65 	.word	0xc1cdcd65
 8006b10:	08019b68 	.word	0x08019b68
 8006b14:	08019b6c 	.word	0x08019b6c
 8006b18:	7fefffff 	.word	0x7fefffff
 8006b1c:	08019b74 	.word	0x08019b74
 8006b20:	08019b7c 	.word	0x08019b7c
 8006b24:	0801a0c0 	.word	0x0801a0c0
 8006b28:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 8006b2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8006b30:	e01f      	b.n	8006b72 <_ftoa+0x342>
      --count;
 8006b32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b34:	3b01      	subs	r3, #1
 8006b36:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 8006b38:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006b3a:	4b66      	ldr	r3, [pc, #408]	; (8006cd4 <_ftoa+0x4a4>)
 8006b3c:	fba3 2301 	umull	r2, r3, r3, r1
 8006b40:	08da      	lsrs	r2, r3, #3
 8006b42:	4613      	mov	r3, r2
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	4413      	add	r3, r2
 8006b48:	005b      	lsls	r3, r3, #1
 8006b4a:	1aca      	subs	r2, r1, r3
 8006b4c:	b2d2      	uxtb	r2, r2
 8006b4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b50:	1c59      	adds	r1, r3, #1
 8006b52:	65f9      	str	r1, [r7, #92]	; 0x5c
 8006b54:	3230      	adds	r2, #48	; 0x30
 8006b56:	b2d2      	uxtb	r2, r2
 8006b58:	3360      	adds	r3, #96	; 0x60
 8006b5a:	443b      	add	r3, r7
 8006b5c:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8006b60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b62:	4a5c      	ldr	r2, [pc, #368]	; (8006cd4 <_ftoa+0x4a4>)
 8006b64:	fba2 2303 	umull	r2, r3, r2, r3
 8006b68:	08db      	lsrs	r3, r3, #3
 8006b6a:	653b      	str	r3, [r7, #80]	; 0x50
 8006b6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d003      	beq.n	8006b7a <_ftoa+0x34a>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8006b72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b74:	2b1f      	cmp	r3, #31
 8006b76:	d9dc      	bls.n	8006b32 <_ftoa+0x302>
 8006b78:	e009      	b.n	8006b8e <_ftoa+0x35e>
        break;
 8006b7a:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8006b7c:	e007      	b.n	8006b8e <_ftoa+0x35e>
      buf[len++] = '0';
 8006b7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b80:	1c5a      	adds	r2, r3, #1
 8006b82:	65fa      	str	r2, [r7, #92]	; 0x5c
 8006b84:	3360      	adds	r3, #96	; 0x60
 8006b86:	443b      	add	r3, r7
 8006b88:	2230      	movs	r2, #48	; 0x30
 8006b8a:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8006b8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b90:	2b1f      	cmp	r3, #31
 8006b92:	d804      	bhi.n	8006b9e <_ftoa+0x36e>
 8006b94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b96:	1e5a      	subs	r2, r3, #1
 8006b98:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d1ef      	bne.n	8006b7e <_ftoa+0x34e>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8006b9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ba0:	2b1f      	cmp	r3, #31
 8006ba2:	d829      	bhi.n	8006bf8 <_ftoa+0x3c8>
      // add decimal
      buf[len++] = '.';
 8006ba4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ba6:	1c5a      	adds	r2, r3, #1
 8006ba8:	65fa      	str	r2, [r7, #92]	; 0x5c
 8006baa:	3360      	adds	r3, #96	; 0x60
 8006bac:	443b      	add	r3, r7
 8006bae:	222e      	movs	r2, #46	; 0x2e
 8006bb0:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8006bb4:	e020      	b.n	8006bf8 <_ftoa+0x3c8>
    buf[len++] = (char)(48 + (whole % 10));
 8006bb6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006bb8:	4b47      	ldr	r3, [pc, #284]	; (8006cd8 <_ftoa+0x4a8>)
 8006bba:	fb83 1302 	smull	r1, r3, r3, r2
 8006bbe:	1099      	asrs	r1, r3, #2
 8006bc0:	17d3      	asrs	r3, r2, #31
 8006bc2:	1ac9      	subs	r1, r1, r3
 8006bc4:	460b      	mov	r3, r1
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	440b      	add	r3, r1
 8006bca:	005b      	lsls	r3, r3, #1
 8006bcc:	1ad1      	subs	r1, r2, r3
 8006bce:	b2ca      	uxtb	r2, r1
 8006bd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bd2:	1c59      	adds	r1, r3, #1
 8006bd4:	65f9      	str	r1, [r7, #92]	; 0x5c
 8006bd6:	3230      	adds	r2, #48	; 0x30
 8006bd8:	b2d2      	uxtb	r2, r2
 8006bda:	3360      	adds	r3, #96	; 0x60
 8006bdc:	443b      	add	r3, r7
 8006bde:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 8006be2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006be4:	4a3c      	ldr	r2, [pc, #240]	; (8006cd8 <_ftoa+0x4a8>)
 8006be6:	fb82 1203 	smull	r1, r2, r2, r3
 8006bea:	1092      	asrs	r2, r2, #2
 8006bec:	17db      	asrs	r3, r3, #31
 8006bee:	1ad3      	subs	r3, r2, r3
 8006bf0:	657b      	str	r3, [r7, #84]	; 0x54
 8006bf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d003      	beq.n	8006c00 <_ftoa+0x3d0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8006bf8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bfa:	2b1f      	cmp	r3, #31
 8006bfc:	d9db      	bls.n	8006bb6 <_ftoa+0x386>
 8006bfe:	e000      	b.n	8006c02 <_ftoa+0x3d2>
      break;
 8006c00:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8006c02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c04:	f003 0302 	and.w	r3, r3, #2
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d123      	bne.n	8006c54 <_ftoa+0x424>
 8006c0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c0e:	f003 0301 	and.w	r3, r3, #1
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d01e      	beq.n	8006c54 <_ftoa+0x424>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8006c16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d014      	beq.n	8006c46 <_ftoa+0x416>
 8006c1c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d104      	bne.n	8006c2e <_ftoa+0x3fe>
 8006c24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c26:	f003 030c 	and.w	r3, r3, #12
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d00b      	beq.n	8006c46 <_ftoa+0x416>
      width--;
 8006c2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c30:	3b01      	subs	r3, #1
 8006c32:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8006c34:	e007      	b.n	8006c46 <_ftoa+0x416>
      buf[len++] = '0';
 8006c36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c38:	1c5a      	adds	r2, r3, #1
 8006c3a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8006c3c:	3360      	adds	r3, #96	; 0x60
 8006c3e:	443b      	add	r3, r7
 8006c40:	2230      	movs	r2, #48	; 0x30
 8006c42:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8006c46:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006c48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d202      	bcs.n	8006c54 <_ftoa+0x424>
 8006c4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c50:	2b1f      	cmp	r3, #31
 8006c52:	d9f0      	bls.n	8006c36 <_ftoa+0x406>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8006c54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c56:	2b1f      	cmp	r3, #31
 8006c58:	d827      	bhi.n	8006caa <_ftoa+0x47a>
    if (negative) {
 8006c5a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d008      	beq.n	8006c74 <_ftoa+0x444>
      buf[len++] = '-';
 8006c62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c64:	1c5a      	adds	r2, r3, #1
 8006c66:	65fa      	str	r2, [r7, #92]	; 0x5c
 8006c68:	3360      	adds	r3, #96	; 0x60
 8006c6a:	443b      	add	r3, r7
 8006c6c:	222d      	movs	r2, #45	; 0x2d
 8006c6e:	f803 2c48 	strb.w	r2, [r3, #-72]
 8006c72:	e01a      	b.n	8006caa <_ftoa+0x47a>
    }
    else if (flags & FLAGS_PLUS) {
 8006c74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c76:	f003 0304 	and.w	r3, r3, #4
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d008      	beq.n	8006c90 <_ftoa+0x460>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8006c7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c80:	1c5a      	adds	r2, r3, #1
 8006c82:	65fa      	str	r2, [r7, #92]	; 0x5c
 8006c84:	3360      	adds	r3, #96	; 0x60
 8006c86:	443b      	add	r3, r7
 8006c88:	222b      	movs	r2, #43	; 0x2b
 8006c8a:	f803 2c48 	strb.w	r2, [r3, #-72]
 8006c8e:	e00c      	b.n	8006caa <_ftoa+0x47a>
    }
    else if (flags & FLAGS_SPACE) {
 8006c90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c92:	f003 0308 	and.w	r3, r3, #8
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d007      	beq.n	8006caa <_ftoa+0x47a>
      buf[len++] = ' ';
 8006c9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c9c:	1c5a      	adds	r2, r3, #1
 8006c9e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8006ca0:	3360      	adds	r3, #96	; 0x60
 8006ca2:	443b      	add	r3, r7
 8006ca4:	2220      	movs	r2, #32
 8006ca6:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8006caa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cac:	9303      	str	r3, [sp, #12]
 8006cae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cb0:	9302      	str	r3, [sp, #8]
 8006cb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cb4:	9301      	str	r3, [sp, #4]
 8006cb6:	f107 0318 	add.w	r3, r7, #24
 8006cba:	9300      	str	r3, [sp, #0]
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	6939      	ldr	r1, [r7, #16]
 8006cc2:	6978      	ldr	r0, [r7, #20]
 8006cc4:	f7ff fbb2 	bl	800642c <_out_rev>
 8006cc8:	4603      	mov	r3, r0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3764      	adds	r7, #100	; 0x64
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd90      	pop	{r4, r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	cccccccd 	.word	0xcccccccd
 8006cd8:	66666667 	.word	0x66666667
 8006cdc:	00000000 	.word	0x00000000

08006ce0 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8006ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ce4:	b09f      	sub	sp, #124	; 0x7c
 8006ce6:	af06      	add	r7, sp, #24
 8006ce8:	6278      	str	r0, [r7, #36]	; 0x24
 8006cea:	6239      	str	r1, [r7, #32]
 8006cec:	61fa      	str	r2, [r7, #28]
 8006cee:	61bb      	str	r3, [r7, #24]
 8006cf0:	ed87 0b04 	vstr	d0, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8006cf4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006cf8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006cfc:	f7f9 fefc 	bl	8000af8 <__aeabi_dcmpeq>
 8006d00:	4603      	mov	r3, r0
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d014      	beq.n	8006d30 <_etoa+0x50>
 8006d06:	f04f 32ff 	mov.w	r2, #4294967295
 8006d0a:	4bc1      	ldr	r3, [pc, #772]	; (8007010 <_etoa+0x330>)
 8006d0c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006d10:	f7f9 ff1a 	bl	8000b48 <__aeabi_dcmpgt>
 8006d14:	4603      	mov	r3, r0
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d10a      	bne.n	8006d30 <_etoa+0x50>
 8006d1a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d1e:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8006d22:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006d26:	f7f9 fef1 	bl	8000b0c <__aeabi_dcmplt>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d012      	beq.n	8006d56 <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8006d30:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d34:	9302      	str	r3, [sp, #8]
 8006d36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d3a:	9301      	str	r3, [sp, #4]
 8006d3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d40:	9300      	str	r3, [sp, #0]
 8006d42:	ed97 0b04 	vldr	d0, [r7, #16]
 8006d46:	69bb      	ldr	r3, [r7, #24]
 8006d48:	69fa      	ldr	r2, [r7, #28]
 8006d4a:	6a39      	ldr	r1, [r7, #32]
 8006d4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006d4e:	f7ff fd6f 	bl	8006830 <_ftoa>
 8006d52:	4603      	mov	r3, r0
 8006d54:	e23f      	b.n	80071d6 <_etoa+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 8006d56:	2301      	movs	r3, #1
 8006d58:	461e      	mov	r6, r3
 8006d5a:	f04f 0200 	mov.w	r2, #0
 8006d5e:	f04f 0300 	mov.w	r3, #0
 8006d62:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006d66:	f7f9 fed1 	bl	8000b0c <__aeabi_dcmplt>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d101      	bne.n	8006d74 <_etoa+0x94>
 8006d70:	2300      	movs	r3, #0
 8006d72:	461e      	mov	r6, r3
 8006d74:	f887 6053 	strb.w	r6, [r7, #83]	; 0x53
  if (negative) {
 8006d78:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d009      	beq.n	8006d94 <_etoa+0xb4>
    value = -value;
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	603b      	str	r3, [r7, #0]
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006d8a:	607b      	str	r3, [r7, #4]
 8006d8c:	ed97 7b00 	vldr	d7, [r7]
 8006d90:	ed87 7b04 	vstr	d7, [r7, #16]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8006d94:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d102      	bne.n	8006da6 <_etoa+0xc6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8006da0:	2306      	movs	r3, #6
 8006da2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8006da6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006daa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8006dae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006db2:	f04f 0200 	mov.w	r2, #0
 8006db6:	f04f 0300 	mov.w	r3, #0
 8006dba:	0d0a      	lsrs	r2, r1, #20
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	4613      	mov	r3, r2
 8006dc0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006dc4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8006dca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006dce:	4690      	mov	r8, r2
 8006dd0:	f3c3 0913 	ubfx	r9, r3, #0, #20
 8006dd4:	4644      	mov	r4, r8
 8006dd6:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 8006dda:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006dde:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8006de2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8006de4:	f7f9 fbb6 	bl	8000554 <__aeabi_i2d>
 8006de8:	a37d      	add	r3, pc, #500	; (adr r3, 8006fe0 <_etoa+0x300>)
 8006dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dee:	f7f9 fc1b 	bl	8000628 <__aeabi_dmul>
 8006df2:	4602      	mov	r2, r0
 8006df4:	460b      	mov	r3, r1
 8006df6:	4610      	mov	r0, r2
 8006df8:	4619      	mov	r1, r3
 8006dfa:	a37b      	add	r3, pc, #492	; (adr r3, 8006fe8 <_etoa+0x308>)
 8006dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e00:	f7f9 fa5c 	bl	80002bc <__adddf3>
 8006e04:	4602      	mov	r2, r0
 8006e06:	460b      	mov	r3, r1
 8006e08:	4614      	mov	r4, r2
 8006e0a:	461d      	mov	r5, r3
 8006e0c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006e10:	f04f 0200 	mov.w	r2, #0
 8006e14:	4b7f      	ldr	r3, [pc, #508]	; (8007014 <_etoa+0x334>)
 8006e16:	f7f9 fa4f 	bl	80002b8 <__aeabi_dsub>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	4610      	mov	r0, r2
 8006e20:	4619      	mov	r1, r3
 8006e22:	a373      	add	r3, pc, #460	; (adr r3, 8006ff0 <_etoa+0x310>)
 8006e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e28:	f7f9 fbfe 	bl	8000628 <__aeabi_dmul>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	460b      	mov	r3, r1
 8006e30:	4620      	mov	r0, r4
 8006e32:	4629      	mov	r1, r5
 8006e34:	f7f9 fa42 	bl	80002bc <__adddf3>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	460b      	mov	r3, r1
 8006e3c:	4610      	mov	r0, r2
 8006e3e:	4619      	mov	r1, r3
 8006e40:	f7f9 fea2 	bl	8000b88 <__aeabi_d2iz>
 8006e44:	4603      	mov	r3, r0
 8006e46:	65fb      	str	r3, [r7, #92]	; 0x5c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8006e48:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8006e4a:	f7f9 fb83 	bl	8000554 <__aeabi_i2d>
 8006e4e:	a36a      	add	r3, pc, #424	; (adr r3, 8006ff8 <_etoa+0x318>)
 8006e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e54:	f7f9 fbe8 	bl	8000628 <__aeabi_dmul>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	460b      	mov	r3, r1
 8006e5c:	4610      	mov	r0, r2
 8006e5e:	4619      	mov	r1, r3
 8006e60:	f04f 0200 	mov.w	r2, #0
 8006e64:	4b6c      	ldr	r3, [pc, #432]	; (8007018 <_etoa+0x338>)
 8006e66:	f7f9 fa29 	bl	80002bc <__adddf3>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	4610      	mov	r0, r2
 8006e70:	4619      	mov	r1, r3
 8006e72:	f7f9 fe89 	bl	8000b88 <__aeabi_d2iz>
 8006e76:	4603      	mov	r3, r0
 8006e78:	64fb      	str	r3, [r7, #76]	; 0x4c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8006e7a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8006e7c:	f7f9 fb6a 	bl	8000554 <__aeabi_i2d>
 8006e80:	a35f      	add	r3, pc, #380	; (adr r3, 8007000 <_etoa+0x320>)
 8006e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e86:	f7f9 fbcf 	bl	8000628 <__aeabi_dmul>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	460b      	mov	r3, r1
 8006e8e:	4614      	mov	r4, r2
 8006e90:	461d      	mov	r5, r3
 8006e92:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8006e94:	f7f9 fb5e 	bl	8000554 <__aeabi_i2d>
 8006e98:	a35b      	add	r3, pc, #364	; (adr r3, 8007008 <_etoa+0x328>)
 8006e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e9e:	f7f9 fbc3 	bl	8000628 <__aeabi_dmul>
 8006ea2:	4602      	mov	r2, r0
 8006ea4:	460b      	mov	r3, r1
 8006ea6:	4620      	mov	r0, r4
 8006ea8:	4629      	mov	r1, r5
 8006eaa:	f7f9 fa05 	bl	80002b8 <__aeabi_dsub>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	460b      	mov	r3, r1
 8006eb2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  const double z2 = z * z;
 8006eb6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006eba:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006ebe:	f7f9 fbb3 	bl	8000628 <__aeabi_dmul>
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8006eca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ecc:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8006ed0:	17da      	asrs	r2, r3, #31
 8006ed2:	469a      	mov	sl, r3
 8006ed4:	4693      	mov	fp, r2
 8006ed6:	f04f 0200 	mov.w	r2, #0
 8006eda:	f04f 0300 	mov.w	r3, #0
 8006ede:	ea4f 530a 	mov.w	r3, sl, lsl #20
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8006ee8:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8006eec:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	460b      	mov	r3, r1
 8006ef4:	f7f9 f9e2 	bl	80002bc <__adddf3>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	460b      	mov	r3, r1
 8006efc:	4690      	mov	r8, r2
 8006efe:	4699      	mov	r9, r3
 8006f00:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006f04:	f04f 0000 	mov.w	r0, #0
 8006f08:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006f0c:	f7f9 f9d4 	bl	80002b8 <__aeabi_dsub>
 8006f10:	4602      	mov	r2, r0
 8006f12:	460b      	mov	r3, r1
 8006f14:	4692      	mov	sl, r2
 8006f16:	469b      	mov	fp, r3
 8006f18:	f04f 0200 	mov.w	r2, #0
 8006f1c:	4b3f      	ldr	r3, [pc, #252]	; (800701c <_etoa+0x33c>)
 8006f1e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006f22:	f7f9 fcab 	bl	800087c <__aeabi_ddiv>
 8006f26:	4602      	mov	r2, r0
 8006f28:	460b      	mov	r3, r1
 8006f2a:	4610      	mov	r0, r2
 8006f2c:	4619      	mov	r1, r3
 8006f2e:	f04f 0200 	mov.w	r2, #0
 8006f32:	4b3b      	ldr	r3, [pc, #236]	; (8007020 <_etoa+0x340>)
 8006f34:	f7f9 f9c2 	bl	80002bc <__adddf3>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	460b      	mov	r3, r1
 8006f3c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006f40:	f7f9 fc9c 	bl	800087c <__aeabi_ddiv>
 8006f44:	4602      	mov	r2, r0
 8006f46:	460b      	mov	r3, r1
 8006f48:	4610      	mov	r0, r2
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	f04f 0200 	mov.w	r2, #0
 8006f50:	4b34      	ldr	r3, [pc, #208]	; (8007024 <_etoa+0x344>)
 8006f52:	f7f9 f9b3 	bl	80002bc <__adddf3>
 8006f56:	4602      	mov	r2, r0
 8006f58:	460b      	mov	r3, r1
 8006f5a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006f5e:	f7f9 fc8d 	bl	800087c <__aeabi_ddiv>
 8006f62:	4602      	mov	r2, r0
 8006f64:	460b      	mov	r3, r1
 8006f66:	4650      	mov	r0, sl
 8006f68:	4659      	mov	r1, fp
 8006f6a:	f7f9 f9a7 	bl	80002bc <__adddf3>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	460b      	mov	r3, r1
 8006f72:	4640      	mov	r0, r8
 8006f74:	4649      	mov	r1, r9
 8006f76:	f7f9 fc81 	bl	800087c <__aeabi_ddiv>
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	4610      	mov	r0, r2
 8006f80:	4619      	mov	r1, r3
 8006f82:	f04f 0200 	mov.w	r2, #0
 8006f86:	4b28      	ldr	r3, [pc, #160]	; (8007028 <_etoa+0x348>)
 8006f88:	f7f9 f998 	bl	80002bc <__adddf3>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	460b      	mov	r3, r1
 8006f90:	4620      	mov	r0, r4
 8006f92:	4629      	mov	r1, r5
 8006f94:	f7f9 fb48 	bl	8000628 <__aeabi_dmul>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	460b      	mov	r3, r1
 8006f9c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // correct for rounding errors
  if (value < conv.F) {
 8006fa0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006fa4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006fa8:	f7f9 fdb0 	bl	8000b0c <__aeabi_dcmplt>
 8006fac:	4603      	mov	r3, r0
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d00d      	beq.n	8006fce <_etoa+0x2ee>
    expval--;
 8006fb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fb4:	3b01      	subs	r3, #1
 8006fb6:	65fb      	str	r3, [r7, #92]	; 0x5c
    conv.F /= 10;
 8006fb8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006fbc:	f04f 0200 	mov.w	r2, #0
 8006fc0:	4b17      	ldr	r3, [pc, #92]	; (8007020 <_etoa+0x340>)
 8006fc2:	f7f9 fc5b 	bl	800087c <__aeabi_ddiv>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	460b      	mov	r3, r1
 8006fca:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8006fce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fd0:	2b63      	cmp	r3, #99	; 0x63
 8006fd2:	dc2b      	bgt.n	800702c <_etoa+0x34c>
 8006fd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fd6:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8006fda:	db27      	blt.n	800702c <_etoa+0x34c>
 8006fdc:	2304      	movs	r3, #4
 8006fde:	e026      	b.n	800702e <_etoa+0x34e>
 8006fe0:	509f79fb 	.word	0x509f79fb
 8006fe4:	3fd34413 	.word	0x3fd34413
 8006fe8:	8b60c8b3 	.word	0x8b60c8b3
 8006fec:	3fc68a28 	.word	0x3fc68a28
 8006ff0:	636f4361 	.word	0x636f4361
 8006ff4:	3fd287a7 	.word	0x3fd287a7
 8006ff8:	0979a371 	.word	0x0979a371
 8006ffc:	400a934f 	.word	0x400a934f
 8007000:	bbb55516 	.word	0xbbb55516
 8007004:	40026bb1 	.word	0x40026bb1
 8007008:	fefa39ef 	.word	0xfefa39ef
 800700c:	3fe62e42 	.word	0x3fe62e42
 8007010:	7fefffff 	.word	0x7fefffff
 8007014:	3ff80000 	.word	0x3ff80000
 8007018:	3fe00000 	.word	0x3fe00000
 800701c:	402c0000 	.word	0x402c0000
 8007020:	40240000 	.word	0x40240000
 8007024:	40180000 	.word	0x40180000
 8007028:	3ff00000 	.word	0x3ff00000
 800702c:	2305      	movs	r3, #5
 800702e:	65bb      	str	r3, [r7, #88]	; 0x58

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8007030:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007034:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007038:	2b00      	cmp	r3, #0
 800703a:	d03d      	beq.n	80070b8 <_etoa+0x3d8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 800703c:	a368      	add	r3, pc, #416	; (adr r3, 80071e0 <_etoa+0x500>)
 800703e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007042:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007046:	f7f9 fd75 	bl	8000b34 <__aeabi_dcmpge>
 800704a:	4603      	mov	r3, r0
 800704c:	2b00      	cmp	r3, #0
 800704e:	d024      	beq.n	800709a <_etoa+0x3ba>
 8007050:	a365      	add	r3, pc, #404	; (adr r3, 80071e8 <_etoa+0x508>)
 8007052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007056:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800705a:	f7f9 fd57 	bl	8000b0c <__aeabi_dcmplt>
 800705e:	4603      	mov	r3, r0
 8007060:	2b00      	cmp	r3, #0
 8007062:	d01a      	beq.n	800709a <_etoa+0x3ba>
      if ((int)prec > expval) {
 8007064:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007068:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800706a:	429a      	cmp	r2, r3
 800706c:	da07      	bge.n	800707e <_etoa+0x39e>
        prec = (unsigned)((int)prec - expval - 1);
 800706e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007072:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007074:	1ad3      	subs	r3, r2, r3
 8007076:	3b01      	subs	r3, #1
 8007078:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800707c:	e002      	b.n	8007084 <_etoa+0x3a4>
      }
      else {
        prec = 0;
 800707e:	2300      	movs	r3, #0
 8007080:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8007084:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007088:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800708c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 8007090:	2300      	movs	r3, #0
 8007092:	65bb      	str	r3, [r7, #88]	; 0x58
      expval   = 0;
 8007094:	2300      	movs	r3, #0
 8007096:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007098:	e00e      	b.n	80070b8 <_etoa+0x3d8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 800709a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d00a      	beq.n	80070b8 <_etoa+0x3d8>
 80070a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80070a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d004      	beq.n	80070b8 <_etoa+0x3d8>
        --prec;
 80070ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80070b2:	3b01      	subs	r3, #1
 80070b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 80070b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80070bc:	657b      	str	r3, [r7, #84]	; 0x54
  if (width > minwidth) {
 80070be:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80070c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d904      	bls.n	80070d2 <_etoa+0x3f2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 80070c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80070ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80070cc:	1ad3      	subs	r3, r2, r3
 80070ce:	657b      	str	r3, [r7, #84]	; 0x54
 80070d0:	e001      	b.n	80070d6 <_etoa+0x3f6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 80070d2:	2300      	movs	r3, #0
 80070d4:	657b      	str	r3, [r7, #84]	; 0x54
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 80070d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80070da:	f003 0302 	and.w	r3, r3, #2
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d004      	beq.n	80070ec <_etoa+0x40c>
 80070e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d001      	beq.n	80070ec <_etoa+0x40c>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 80070e8:	2300      	movs	r3, #0
 80070ea:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // rescale the float value
  if (expval) {
 80070ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d009      	beq.n	8007106 <_etoa+0x426>
    value /= conv.F;
 80070f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80070f6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80070fa:	f7f9 fbbf 	bl	800087c <__aeabi_ddiv>
 80070fe:	4602      	mov	r2, r0
 8007100:	460b      	mov	r3, r1
 8007102:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  // output the floating part
  const size_t start_idx = idx;
 8007106:	69fb      	ldr	r3, [r7, #28]
 8007108:	637b      	str	r3, [r7, #52]	; 0x34
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 800710a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800710e:	2b00      	cmp	r3, #0
 8007110:	d006      	beq.n	8007120 <_etoa+0x440>
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	60bb      	str	r3, [r7, #8]
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800711c:	60fb      	str	r3, [r7, #12]
 800711e:	e003      	b.n	8007128 <_etoa+0x448>
 8007120:	ed97 7b04 	vldr	d7, [r7, #16]
 8007124:	ed87 7b02 	vstr	d7, [r7, #8]
 8007128:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800712c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007130:	9302      	str	r3, [sp, #8]
 8007132:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007134:	9301      	str	r3, [sp, #4]
 8007136:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800713a:	9300      	str	r3, [sp, #0]
 800713c:	ed97 0b02 	vldr	d0, [r7, #8]
 8007140:	69bb      	ldr	r3, [r7, #24]
 8007142:	69fa      	ldr	r2, [r7, #28]
 8007144:	6a39      	ldr	r1, [r7, #32]
 8007146:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007148:	f7ff fb72 	bl	8006830 <_ftoa>
 800714c:	61f8      	str	r0, [r7, #28]

  // output the exponent part
  if (minwidth) {
 800714e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007150:	2b00      	cmp	r3, #0
 8007152:	d03f      	beq.n	80071d4 <_etoa+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8007154:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007158:	f003 0320 	and.w	r3, r3, #32
 800715c:	2b00      	cmp	r3, #0
 800715e:	d001      	beq.n	8007164 <_etoa+0x484>
 8007160:	2045      	movs	r0, #69	; 0x45
 8007162:	e000      	b.n	8007166 <_etoa+0x486>
 8007164:	2065      	movs	r0, #101	; 0x65
 8007166:	69fa      	ldr	r2, [r7, #28]
 8007168:	1c53      	adds	r3, r2, #1
 800716a:	61fb      	str	r3, [r7, #28]
 800716c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800716e:	69bb      	ldr	r3, [r7, #24]
 8007170:	6a39      	ldr	r1, [r7, #32]
 8007172:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8007174:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007176:	2b00      	cmp	r3, #0
 8007178:	bfb8      	it	lt
 800717a:	425b      	neglt	r3, r3
 800717c:	4618      	mov	r0, r3
 800717e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007180:	0fdb      	lsrs	r3, r3, #31
 8007182:	b2db      	uxtb	r3, r3
 8007184:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007186:	3a01      	subs	r2, #1
 8007188:	2105      	movs	r1, #5
 800718a:	9105      	str	r1, [sp, #20]
 800718c:	9204      	str	r2, [sp, #16]
 800718e:	2200      	movs	r2, #0
 8007190:	9203      	str	r2, [sp, #12]
 8007192:	220a      	movs	r2, #10
 8007194:	9202      	str	r2, [sp, #8]
 8007196:	9301      	str	r3, [sp, #4]
 8007198:	9000      	str	r0, [sp, #0]
 800719a:	69bb      	ldr	r3, [r7, #24]
 800719c:	69fa      	ldr	r2, [r7, #28]
 800719e:	6a39      	ldr	r1, [r7, #32]
 80071a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80071a2:	f7ff fa6f 	bl	8006684 <_ntoa_long>
 80071a6:	61f8      	str	r0, [r7, #28]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 80071a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80071ac:	f003 0302 	and.w	r3, r3, #2
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d00f      	beq.n	80071d4 <_etoa+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 80071b4:	e007      	b.n	80071c6 <_etoa+0x4e6>
 80071b6:	69fa      	ldr	r2, [r7, #28]
 80071b8:	1c53      	adds	r3, r2, #1
 80071ba:	61fb      	str	r3, [r7, #28]
 80071bc:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80071be:	69bb      	ldr	r3, [r7, #24]
 80071c0:	6a39      	ldr	r1, [r7, #32]
 80071c2:	2020      	movs	r0, #32
 80071c4:	47a0      	blx	r4
 80071c6:	69fa      	ldr	r2, [r7, #28]
 80071c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ca:	1ad3      	subs	r3, r2, r3
 80071cc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d8f0      	bhi.n	80071b6 <_etoa+0x4d6>
    }
  }
  return idx;
 80071d4:	69fb      	ldr	r3, [r7, #28]
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3764      	adds	r7, #100	; 0x64
 80071da:	46bd      	mov	sp, r7
 80071dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071e0:	eb1c432d 	.word	0xeb1c432d
 80071e4:	3f1a36e2 	.word	0x3f1a36e2
 80071e8:	00000000 	.word	0x00000000
 80071ec:	412e8480 	.word	0x412e8480

080071f0 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 80071f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071f4:	b0a3      	sub	sp, #140	; 0x8c
 80071f6:	af0a      	add	r7, sp, #40	; 0x28
 80071f8:	6178      	str	r0, [r7, #20]
 80071fa:	6139      	str	r1, [r7, #16]
 80071fc:	60fa      	str	r2, [r7, #12]
 80071fe:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8007200:	2300      	movs	r3, #0
 8007202:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!buffer) {
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	2b00      	cmp	r3, #0
 8007208:	f040 84be 	bne.w	8007b88 <_vsnprintf+0x998>
    // use null output function
    out = _out_null;
 800720c:	4ba3      	ldr	r3, [pc, #652]	; (800749c <_vsnprintf+0x2ac>)
 800720e:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 8007210:	f000 bcba 	b.w	8007b88 <_vsnprintf+0x998>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	2b25      	cmp	r3, #37	; 0x25
 800721a:	d00d      	beq.n	8007238 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	7818      	ldrb	r0, [r3, #0]
 8007220:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007222:	1c53      	adds	r3, r2, #1
 8007224:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007226:	697c      	ldr	r4, [r7, #20]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6939      	ldr	r1, [r7, #16]
 800722c:	47a0      	blx	r4
      format++;
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	3301      	adds	r3, #1
 8007232:	60bb      	str	r3, [r7, #8]
      continue;
 8007234:	f000 bca8 	b.w	8007b88 <_vsnprintf+0x998>
    }
    else {
      // yes, evaluate it
      format++;
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	3301      	adds	r3, #1
 800723c:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 800723e:	2300      	movs	r3, #0
 8007240:	65fb      	str	r3, [r7, #92]	; 0x5c
    do {
      switch (*format) {
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	3b20      	subs	r3, #32
 8007248:	2b10      	cmp	r3, #16
 800724a:	d857      	bhi.n	80072fc <_vsnprintf+0x10c>
 800724c:	a201      	add	r2, pc, #4	; (adr r2, 8007254 <_vsnprintf+0x64>)
 800724e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007252:	bf00      	nop
 8007254:	080072d5 	.word	0x080072d5
 8007258:	080072fd 	.word	0x080072fd
 800725c:	080072fd 	.word	0x080072fd
 8007260:	080072e9 	.word	0x080072e9
 8007264:	080072fd 	.word	0x080072fd
 8007268:	080072fd 	.word	0x080072fd
 800726c:	080072fd 	.word	0x080072fd
 8007270:	080072fd 	.word	0x080072fd
 8007274:	080072fd 	.word	0x080072fd
 8007278:	080072fd 	.word	0x080072fd
 800727c:	080072fd 	.word	0x080072fd
 8007280:	080072c1 	.word	0x080072c1
 8007284:	080072fd 	.word	0x080072fd
 8007288:	080072ad 	.word	0x080072ad
 800728c:	080072fd 	.word	0x080072fd
 8007290:	080072fd 	.word	0x080072fd
 8007294:	08007299 	.word	0x08007299
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8007298:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800729a:	f043 0301 	orr.w	r3, r3, #1
 800729e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	3301      	adds	r3, #1
 80072a4:	60bb      	str	r3, [r7, #8]
 80072a6:	2301      	movs	r3, #1
 80072a8:	653b      	str	r3, [r7, #80]	; 0x50
 80072aa:	e02a      	b.n	8007302 <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 80072ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072ae:	f043 0302 	orr.w	r3, r3, #2
 80072b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	3301      	adds	r3, #1
 80072b8:	60bb      	str	r3, [r7, #8]
 80072ba:	2301      	movs	r3, #1
 80072bc:	653b      	str	r3, [r7, #80]	; 0x50
 80072be:	e020      	b.n	8007302 <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 80072c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072c2:	f043 0304 	orr.w	r3, r3, #4
 80072c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	3301      	adds	r3, #1
 80072cc:	60bb      	str	r3, [r7, #8]
 80072ce:	2301      	movs	r3, #1
 80072d0:	653b      	str	r3, [r7, #80]	; 0x50
 80072d2:	e016      	b.n	8007302 <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 80072d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072d6:	f043 0308 	orr.w	r3, r3, #8
 80072da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	3301      	adds	r3, #1
 80072e0:	60bb      	str	r3, [r7, #8]
 80072e2:	2301      	movs	r3, #1
 80072e4:	653b      	str	r3, [r7, #80]	; 0x50
 80072e6:	e00c      	b.n	8007302 <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 80072e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072ea:	f043 0310 	orr.w	r3, r3, #16
 80072ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	3301      	adds	r3, #1
 80072f4:	60bb      	str	r3, [r7, #8]
 80072f6:	2301      	movs	r3, #1
 80072f8:	653b      	str	r3, [r7, #80]	; 0x50
 80072fa:	e002      	b.n	8007302 <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 80072fc:	2300      	movs	r3, #0
 80072fe:	653b      	str	r3, [r7, #80]	; 0x50
 8007300:	bf00      	nop
      }
    } while (n);
 8007302:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007304:	2b00      	cmp	r3, #0
 8007306:	d19c      	bne.n	8007242 <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 8007308:	2300      	movs	r3, #0
 800730a:	65bb      	str	r3, [r7, #88]	; 0x58
    if (_is_digit(*format)) {
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	4618      	mov	r0, r3
 8007312:	f7ff f850 	bl	80063b6 <_is_digit>
 8007316:	4603      	mov	r3, r0
 8007318:	2b00      	cmp	r3, #0
 800731a:	d006      	beq.n	800732a <_vsnprintf+0x13a>
      width = _atoi(&format);
 800731c:	f107 0308 	add.w	r3, r7, #8
 8007320:	4618      	mov	r0, r3
 8007322:	f7ff f85f 	bl	80063e4 <_atoi>
 8007326:	65b8      	str	r0, [r7, #88]	; 0x58
 8007328:	e01a      	b.n	8007360 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	2b2a      	cmp	r3, #42	; 0x2a
 8007330:	d116      	bne.n	8007360 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 8007332:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007336:	1d1a      	adds	r2, r3, #4
 8007338:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	63bb      	str	r3, [r7, #56]	; 0x38
      if (w < 0) {
 8007340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007342:	2b00      	cmp	r3, #0
 8007344:	da07      	bge.n	8007356 <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 8007346:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007348:	f043 0302 	orr.w	r3, r3, #2
 800734c:	65fb      	str	r3, [r7, #92]	; 0x5c
        width = (unsigned int)-w;
 800734e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007350:	425b      	negs	r3, r3
 8007352:	65bb      	str	r3, [r7, #88]	; 0x58
 8007354:	e001      	b.n	800735a <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 8007356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007358:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      format++;
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	3301      	adds	r3, #1
 800735e:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 8007360:	2300      	movs	r3, #0
 8007362:	657b      	str	r3, [r7, #84]	; 0x54
    if (*format == '.') {
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	2b2e      	cmp	r3, #46	; 0x2e
 800736a:	d127      	bne.n	80073bc <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 800736c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800736e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007372:	65fb      	str	r3, [r7, #92]	; 0x5c
      format++;
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	3301      	adds	r3, #1
 8007378:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	4618      	mov	r0, r3
 8007380:	f7ff f819 	bl	80063b6 <_is_digit>
 8007384:	4603      	mov	r3, r0
 8007386:	2b00      	cmp	r3, #0
 8007388:	d006      	beq.n	8007398 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 800738a:	f107 0308 	add.w	r3, r7, #8
 800738e:	4618      	mov	r0, r3
 8007390:	f7ff f828 	bl	80063e4 <_atoi>
 8007394:	6578      	str	r0, [r7, #84]	; 0x54
 8007396:	e011      	b.n	80073bc <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	2b2a      	cmp	r3, #42	; 0x2a
 800739e:	d10d      	bne.n	80073bc <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 80073a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80073a4:	1d1a      	adds	r2, r3, #4
 80073a6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	637b      	str	r3, [r7, #52]	; 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 80073ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073b0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80073b4:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	3301      	adds	r3, #1
 80073ba:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	3b68      	subs	r3, #104	; 0x68
 80073c2:	2b12      	cmp	r3, #18
 80073c4:	d866      	bhi.n	8007494 <_vsnprintf+0x2a4>
 80073c6:	a201      	add	r2, pc, #4	; (adr r2, 80073cc <_vsnprintf+0x1dc>)
 80073c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073cc:	0800743f 	.word	0x0800743f
 80073d0:	08007495 	.word	0x08007495
 80073d4:	08007475 	.word	0x08007475
 80073d8:	08007495 	.word	0x08007495
 80073dc:	08007419 	.word	0x08007419
 80073e0:	08007495 	.word	0x08007495
 80073e4:	08007495 	.word	0x08007495
 80073e8:	08007495 	.word	0x08007495
 80073ec:	08007495 	.word	0x08007495
 80073f0:	08007495 	.word	0x08007495
 80073f4:	08007495 	.word	0x08007495
 80073f8:	08007495 	.word	0x08007495
 80073fc:	08007465 	.word	0x08007465
 8007400:	08007495 	.word	0x08007495
 8007404:	08007495 	.word	0x08007495
 8007408:	08007495 	.word	0x08007495
 800740c:	08007495 	.word	0x08007495
 8007410:	08007495 	.word	0x08007495
 8007414:	08007485 	.word	0x08007485
      case 'l' :
        flags |= FLAGS_LONG;
 8007418:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800741a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800741e:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	3301      	adds	r3, #1
 8007424:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	2b6c      	cmp	r3, #108	; 0x6c
 800742c:	d134      	bne.n	8007498 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 800742e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007430:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007434:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	3301      	adds	r3, #1
 800743a:	60bb      	str	r3, [r7, #8]
        }
        break;
 800743c:	e02c      	b.n	8007498 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 800743e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007444:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	3301      	adds	r3, #1
 800744a:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	2b68      	cmp	r3, #104	; 0x68
 8007452:	d125      	bne.n	80074a0 <_vsnprintf+0x2b0>
          flags |= FLAGS_CHAR;
 8007454:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007456:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800745a:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	3301      	adds	r3, #1
 8007460:	60bb      	str	r3, [r7, #8]
        }
        break;
 8007462:	e01d      	b.n	80074a0 <_vsnprintf+0x2b0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8007464:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007466:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800746a:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	3301      	adds	r3, #1
 8007470:	60bb      	str	r3, [r7, #8]
        break;
 8007472:	e016      	b.n	80074a2 <_vsnprintf+0x2b2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8007474:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007476:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800747a:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	3301      	adds	r3, #1
 8007480:	60bb      	str	r3, [r7, #8]
        break;
 8007482:	e00e      	b.n	80074a2 <_vsnprintf+0x2b2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8007484:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007486:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800748a:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	3301      	adds	r3, #1
 8007490:	60bb      	str	r3, [r7, #8]
        break;
 8007492:	e006      	b.n	80074a2 <_vsnprintf+0x2b2>
      default :
        break;
 8007494:	bf00      	nop
 8007496:	e004      	b.n	80074a2 <_vsnprintf+0x2b2>
        break;
 8007498:	bf00      	nop
 800749a:	e002      	b.n	80074a2 <_vsnprintf+0x2b2>
 800749c:	08006361 	.word	0x08006361
        break;
 80074a0:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	3b25      	subs	r3, #37	; 0x25
 80074a8:	2b53      	cmp	r3, #83	; 0x53
 80074aa:	f200 8360 	bhi.w	8007b6e <_vsnprintf+0x97e>
 80074ae:	a201      	add	r2, pc, #4	; (adr r2, 80074b4 <_vsnprintf+0x2c4>)
 80074b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074b4:	08007b57 	.word	0x08007b57
 80074b8:	08007b6f 	.word	0x08007b6f
 80074bc:	08007b6f 	.word	0x08007b6f
 80074c0:	08007b6f 	.word	0x08007b6f
 80074c4:	08007b6f 	.word	0x08007b6f
 80074c8:	08007b6f 	.word	0x08007b6f
 80074cc:	08007b6f 	.word	0x08007b6f
 80074d0:	08007b6f 	.word	0x08007b6f
 80074d4:	08007b6f 	.word	0x08007b6f
 80074d8:	08007b6f 	.word	0x08007b6f
 80074dc:	08007b6f 	.word	0x08007b6f
 80074e0:	08007b6f 	.word	0x08007b6f
 80074e4:	08007b6f 	.word	0x08007b6f
 80074e8:	08007b6f 	.word	0x08007b6f
 80074ec:	08007b6f 	.word	0x08007b6f
 80074f0:	08007b6f 	.word	0x08007b6f
 80074f4:	08007b6f 	.word	0x08007b6f
 80074f8:	08007b6f 	.word	0x08007b6f
 80074fc:	08007b6f 	.word	0x08007b6f
 8007500:	08007b6f 	.word	0x08007b6f
 8007504:	08007b6f 	.word	0x08007b6f
 8007508:	08007b6f 	.word	0x08007b6f
 800750c:	08007b6f 	.word	0x08007b6f
 8007510:	08007b6f 	.word	0x08007b6f
 8007514:	08007b6f 	.word	0x08007b6f
 8007518:	08007b6f 	.word	0x08007b6f
 800751c:	08007b6f 	.word	0x08007b6f
 8007520:	08007b6f 	.word	0x08007b6f
 8007524:	08007b6f 	.word	0x08007b6f
 8007528:	08007b6f 	.word	0x08007b6f
 800752c:	08007b6f 	.word	0x08007b6f
 8007530:	08007b6f 	.word	0x08007b6f
 8007534:	0800790b 	.word	0x0800790b
 8007538:	080078bb 	.word	0x080078bb
 800753c:	0800790b 	.word	0x0800790b
 8007540:	08007b6f 	.word	0x08007b6f
 8007544:	08007b6f 	.word	0x08007b6f
 8007548:	08007b6f 	.word	0x08007b6f
 800754c:	08007b6f 	.word	0x08007b6f
 8007550:	08007b6f 	.word	0x08007b6f
 8007554:	08007b6f 	.word	0x08007b6f
 8007558:	08007b6f 	.word	0x08007b6f
 800755c:	08007b6f 	.word	0x08007b6f
 8007560:	08007b6f 	.word	0x08007b6f
 8007564:	08007b6f 	.word	0x08007b6f
 8007568:	08007b6f 	.word	0x08007b6f
 800756c:	08007b6f 	.word	0x08007b6f
 8007570:	08007b6f 	.word	0x08007b6f
 8007574:	08007b6f 	.word	0x08007b6f
 8007578:	08007b6f 	.word	0x08007b6f
 800757c:	08007b6f 	.word	0x08007b6f
 8007580:	08007605 	.word	0x08007605
 8007584:	08007b6f 	.word	0x08007b6f
 8007588:	08007b6f 	.word	0x08007b6f
 800758c:	08007b6f 	.word	0x08007b6f
 8007590:	08007b6f 	.word	0x08007b6f
 8007594:	08007b6f 	.word	0x08007b6f
 8007598:	08007b6f 	.word	0x08007b6f
 800759c:	08007b6f 	.word	0x08007b6f
 80075a0:	08007b6f 	.word	0x08007b6f
 80075a4:	08007b6f 	.word	0x08007b6f
 80075a8:	08007605 	.word	0x08007605
 80075ac:	0800797b 	.word	0x0800797b
 80075b0:	08007605 	.word	0x08007605
 80075b4:	0800790b 	.word	0x0800790b
 80075b8:	080078bb 	.word	0x080078bb
 80075bc:	0800790b 	.word	0x0800790b
 80075c0:	08007b6f 	.word	0x08007b6f
 80075c4:	08007605 	.word	0x08007605
 80075c8:	08007b6f 	.word	0x08007b6f
 80075cc:	08007b6f 	.word	0x08007b6f
 80075d0:	08007b6f 	.word	0x08007b6f
 80075d4:	08007b6f 	.word	0x08007b6f
 80075d8:	08007b6f 	.word	0x08007b6f
 80075dc:	08007605 	.word	0x08007605
 80075e0:	08007abb 	.word	0x08007abb
 80075e4:	08007b6f 	.word	0x08007b6f
 80075e8:	08007b6f 	.word	0x08007b6f
 80075ec:	080079f3 	.word	0x080079f3
 80075f0:	08007b6f 	.word	0x08007b6f
 80075f4:	08007605 	.word	0x08007605
 80075f8:	08007b6f 	.word	0x08007b6f
 80075fc:	08007b6f 	.word	0x08007b6f
 8007600:	08007605 	.word	0x08007605
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	2b78      	cmp	r3, #120	; 0x78
 800760a:	d003      	beq.n	8007614 <_vsnprintf+0x424>
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	2b58      	cmp	r3, #88	; 0x58
 8007612:	d102      	bne.n	800761a <_vsnprintf+0x42a>
          base = 16U;
 8007614:	2310      	movs	r3, #16
 8007616:	64bb      	str	r3, [r7, #72]	; 0x48
 8007618:	e013      	b.n	8007642 <_vsnprintf+0x452>
        }
        else if (*format == 'o') {
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	2b6f      	cmp	r3, #111	; 0x6f
 8007620:	d102      	bne.n	8007628 <_vsnprintf+0x438>
          base =  8U;
 8007622:	2308      	movs	r3, #8
 8007624:	64bb      	str	r3, [r7, #72]	; 0x48
 8007626:	e00c      	b.n	8007642 <_vsnprintf+0x452>
        }
        else if (*format == 'b') {
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	2b62      	cmp	r3, #98	; 0x62
 800762e:	d102      	bne.n	8007636 <_vsnprintf+0x446>
          base =  2U;
 8007630:	2302      	movs	r3, #2
 8007632:	64bb      	str	r3, [r7, #72]	; 0x48
 8007634:	e005      	b.n	8007642 <_vsnprintf+0x452>
        }
        else {
          base = 10U;
 8007636:	230a      	movs	r3, #10
 8007638:	64bb      	str	r3, [r7, #72]	; 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 800763a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800763c:	f023 0310 	bic.w	r3, r3, #16
 8007640:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        // uppercase
        if (*format == 'X') {
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	2b58      	cmp	r3, #88	; 0x58
 8007648:	d103      	bne.n	8007652 <_vsnprintf+0x462>
          flags |= FLAGS_UPPERCASE;
 800764a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800764c:	f043 0320 	orr.w	r3, r3, #32
 8007650:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	2b69      	cmp	r3, #105	; 0x69
 8007658:	d007      	beq.n	800766a <_vsnprintf+0x47a>
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	2b64      	cmp	r3, #100	; 0x64
 8007660:	d003      	beq.n	800766a <_vsnprintf+0x47a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8007662:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007664:	f023 030c 	bic.w	r3, r3, #12
 8007668:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 800766a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800766c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007670:	2b00      	cmp	r3, #0
 8007672:	d003      	beq.n	800767c <_vsnprintf+0x48c>
          flags &= ~FLAGS_ZEROPAD;
 8007674:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007676:	f023 0301 	bic.w	r3, r3, #1
 800767a:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	2b69      	cmp	r3, #105	; 0x69
 8007682:	d004      	beq.n	800768e <_vsnprintf+0x49e>
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	2b64      	cmp	r3, #100	; 0x64
 800768a:	f040 8098 	bne.w	80077be <_vsnprintf+0x5ce>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 800768e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007690:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007694:	2b00      	cmp	r3, #0
 8007696:	d031      	beq.n	80076fc <_vsnprintf+0x50c>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8007698:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800769c:	3307      	adds	r3, #7
 800769e:	f023 0307 	bic.w	r3, r3, #7
 80076a2:	f103 0208 	add.w	r2, r3, #8
 80076a6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80076aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ae:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80076b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	da06      	bge.n	80076c8 <_vsnprintf+0x4d8>
 80076ba:	2100      	movs	r1, #0
 80076bc:	f1d2 0800 	rsbs	r8, r2, #0
 80076c0:	eb61 0903 	sbc.w	r9, r1, r3
 80076c4:	4642      	mov	r2, r8
 80076c6:	464b      	mov	r3, r9
 80076c8:	69f9      	ldr	r1, [r7, #28]
 80076ca:	0fc9      	lsrs	r1, r1, #31
 80076cc:	b2c9      	uxtb	r1, r1
 80076ce:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80076d0:	2400      	movs	r4, #0
 80076d2:	4682      	mov	sl, r0
 80076d4:	46a3      	mov	fp, r4
 80076d6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80076d8:	9008      	str	r0, [sp, #32]
 80076da:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80076dc:	9007      	str	r0, [sp, #28]
 80076de:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80076e0:	9006      	str	r0, [sp, #24]
 80076e2:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80076e6:	9102      	str	r1, [sp, #8]
 80076e8:	e9cd 2300 	strd	r2, r3, [sp]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80076f0:	6939      	ldr	r1, [r7, #16]
 80076f2:	6978      	ldr	r0, [r7, #20]
 80076f4:	f7ff f82c 	bl	8006750 <_ntoa_long_long>
 80076f8:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 80076fa:	e0da      	b.n	80078b2 <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 80076fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007702:	2b00      	cmp	r3, #0
 8007704:	d020      	beq.n	8007748 <_vsnprintf+0x558>
            const long value = va_arg(va, long);
 8007706:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800770a:	1d1a      	adds	r2, r3, #4
 800770c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8007714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007716:	2b00      	cmp	r3, #0
 8007718:	bfb8      	it	lt
 800771a:	425b      	neglt	r3, r3
 800771c:	4619      	mov	r1, r3
 800771e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007720:	0fdb      	lsrs	r3, r3, #31
 8007722:	b2db      	uxtb	r3, r3
 8007724:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007726:	9205      	str	r2, [sp, #20]
 8007728:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800772a:	9204      	str	r2, [sp, #16]
 800772c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800772e:	9203      	str	r2, [sp, #12]
 8007730:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007732:	9202      	str	r2, [sp, #8]
 8007734:	9301      	str	r3, [sp, #4]
 8007736:	9100      	str	r1, [sp, #0]
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800773c:	6939      	ldr	r1, [r7, #16]
 800773e:	6978      	ldr	r0, [r7, #20]
 8007740:	f7fe ffa0 	bl	8006684 <_ntoa_long>
 8007744:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8007746:	e0b4      	b.n	80078b2 <_vsnprintf+0x6c2>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8007748:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800774a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800774e:	2b00      	cmp	r3, #0
 8007750:	d007      	beq.n	8007762 <_vsnprintf+0x572>
 8007752:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007756:	1d1a      	adds	r2, r3, #4
 8007758:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	b2db      	uxtb	r3, r3
 8007760:	e012      	b.n	8007788 <_vsnprintf+0x598>
 8007762:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007768:	2b00      	cmp	r3, #0
 800776a:	d007      	beq.n	800777c <_vsnprintf+0x58c>
 800776c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007770:	1d1a      	adds	r2, r3, #4
 8007772:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	b21b      	sxth	r3, r3
 800777a:	e005      	b.n	8007788 <_vsnprintf+0x598>
 800777c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007780:	1d1a      	adds	r2, r3, #4
 8007782:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800778a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800778c:	2b00      	cmp	r3, #0
 800778e:	bfb8      	it	lt
 8007790:	425b      	neglt	r3, r3
 8007792:	4619      	mov	r1, r3
 8007794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007796:	0fdb      	lsrs	r3, r3, #31
 8007798:	b2db      	uxtb	r3, r3
 800779a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800779c:	9205      	str	r2, [sp, #20]
 800779e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80077a0:	9204      	str	r2, [sp, #16]
 80077a2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80077a4:	9203      	str	r2, [sp, #12]
 80077a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077a8:	9202      	str	r2, [sp, #8]
 80077aa:	9301      	str	r3, [sp, #4]
 80077ac:	9100      	str	r1, [sp, #0]
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80077b2:	6939      	ldr	r1, [r7, #16]
 80077b4:	6978      	ldr	r0, [r7, #20]
 80077b6:	f7fe ff65 	bl	8006684 <_ntoa_long>
 80077ba:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 80077bc:	e079      	b.n	80078b2 <_vsnprintf+0x6c2>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 80077be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d022      	beq.n	800780e <_vsnprintf+0x61e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 80077c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80077cc:	3307      	adds	r3, #7
 80077ce:	f023 0307 	bic.w	r3, r3, #7
 80077d2:	f103 0208 	add.w	r2, r3, #8
 80077d6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80077da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077de:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80077e0:	2000      	movs	r0, #0
 80077e2:	460d      	mov	r5, r1
 80077e4:	4606      	mov	r6, r0
 80077e6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80077e8:	9108      	str	r1, [sp, #32]
 80077ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80077ec:	9107      	str	r1, [sp, #28]
 80077ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80077f0:	9106      	str	r1, [sp, #24]
 80077f2:	e9cd 5604 	strd	r5, r6, [sp, #16]
 80077f6:	2100      	movs	r1, #0
 80077f8:	9102      	str	r1, [sp, #8]
 80077fa:	e9cd 2300 	strd	r2, r3, [sp]
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007802:	6939      	ldr	r1, [r7, #16]
 8007804:	6978      	ldr	r0, [r7, #20]
 8007806:	f7fe ffa3 	bl	8006750 <_ntoa_long_long>
 800780a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800780c:	e051      	b.n	80078b2 <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800780e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007814:	2b00      	cmp	r3, #0
 8007816:	d018      	beq.n	800784a <_vsnprintf+0x65a>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8007818:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800781c:	1d1a      	adds	r2, r3, #4
 800781e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007826:	9205      	str	r2, [sp, #20]
 8007828:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800782a:	9204      	str	r2, [sp, #16]
 800782c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800782e:	9203      	str	r2, [sp, #12]
 8007830:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007832:	9202      	str	r2, [sp, #8]
 8007834:	2200      	movs	r2, #0
 8007836:	9201      	str	r2, [sp, #4]
 8007838:	9300      	str	r3, [sp, #0]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800783e:	6939      	ldr	r1, [r7, #16]
 8007840:	6978      	ldr	r0, [r7, #20]
 8007842:	f7fe ff1f 	bl	8006684 <_ntoa_long>
 8007846:	64f8      	str	r0, [r7, #76]	; 0x4c
 8007848:	e033      	b.n	80078b2 <_vsnprintf+0x6c2>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 800784a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800784c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007850:	2b00      	cmp	r3, #0
 8007852:	d007      	beq.n	8007864 <_vsnprintf+0x674>
 8007854:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007858:	1d1a      	adds	r2, r3, #4
 800785a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	b2db      	uxtb	r3, r3
 8007862:	e012      	b.n	800788a <_vsnprintf+0x69a>
 8007864:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800786a:	2b00      	cmp	r3, #0
 800786c:	d007      	beq.n	800787e <_vsnprintf+0x68e>
 800786e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007872:	1d1a      	adds	r2, r3, #4
 8007874:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	b29b      	uxth	r3, r3
 800787c:	e005      	b.n	800788a <_vsnprintf+0x69a>
 800787e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007882:	1d1a      	adds	r2, r3, #4
 8007884:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	62fb      	str	r3, [r7, #44]	; 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 800788c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800788e:	9305      	str	r3, [sp, #20]
 8007890:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007892:	9304      	str	r3, [sp, #16]
 8007894:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007896:	9303      	str	r3, [sp, #12]
 8007898:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800789a:	9302      	str	r3, [sp, #8]
 800789c:	2300      	movs	r3, #0
 800789e:	9301      	str	r3, [sp, #4]
 80078a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a2:	9300      	str	r3, [sp, #0]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80078a8:	6939      	ldr	r1, [r7, #16]
 80078aa:	6978      	ldr	r0, [r7, #20]
 80078ac:	f7fe feea 	bl	8006684 <_ntoa_long>
 80078b0:	64f8      	str	r0, [r7, #76]	; 0x4c
          }
        }
        format++;
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	3301      	adds	r3, #1
 80078b6:	60bb      	str	r3, [r7, #8]
        break;
 80078b8:	e166      	b.n	8007b88 <_vsnprintf+0x998>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	2b46      	cmp	r3, #70	; 0x46
 80078c0:	d103      	bne.n	80078ca <_vsnprintf+0x6da>
 80078c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078c4:	f043 0320 	orr.w	r3, r3, #32
 80078c8:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 80078ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80078ce:	3307      	adds	r3, #7
 80078d0:	f023 0307 	bic.w	r3, r3, #7
 80078d4:	f103 0208 	add.w	r2, r3, #8
 80078d8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80078dc:	ed93 7b00 	vldr	d7, [r3]
 80078e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078e2:	9302      	str	r3, [sp, #8]
 80078e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80078e6:	9301      	str	r3, [sp, #4]
 80078e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078ea:	9300      	str	r3, [sp, #0]
 80078ec:	eeb0 0a47 	vmov.f32	s0, s14
 80078f0:	eef0 0a67 	vmov.f32	s1, s15
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80078f8:	6939      	ldr	r1, [r7, #16]
 80078fa:	6978      	ldr	r0, [r7, #20]
 80078fc:	f7fe ff98 	bl	8006830 <_ftoa>
 8007900:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	3301      	adds	r3, #1
 8007906:	60bb      	str	r3, [r7, #8]
        break;
 8007908:	e13e      	b.n	8007b88 <_vsnprintf+0x998>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	2b67      	cmp	r3, #103	; 0x67
 8007910:	d003      	beq.n	800791a <_vsnprintf+0x72a>
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	781b      	ldrb	r3, [r3, #0]
 8007916:	2b47      	cmp	r3, #71	; 0x47
 8007918:	d103      	bne.n	8007922 <_vsnprintf+0x732>
 800791a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800791c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007920:	65fb      	str	r3, [r7, #92]	; 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	2b45      	cmp	r3, #69	; 0x45
 8007928:	d003      	beq.n	8007932 <_vsnprintf+0x742>
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	2b47      	cmp	r3, #71	; 0x47
 8007930:	d103      	bne.n	800793a <_vsnprintf+0x74a>
 8007932:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007934:	f043 0320 	orr.w	r3, r3, #32
 8007938:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800793a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800793e:	3307      	adds	r3, #7
 8007940:	f023 0307 	bic.w	r3, r3, #7
 8007944:	f103 0208 	add.w	r2, r3, #8
 8007948:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800794c:	ed93 7b00 	vldr	d7, [r3]
 8007950:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007952:	9302      	str	r3, [sp, #8]
 8007954:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007956:	9301      	str	r3, [sp, #4]
 8007958:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800795a:	9300      	str	r3, [sp, #0]
 800795c:	eeb0 0a47 	vmov.f32	s0, s14
 8007960:	eef0 0a67 	vmov.f32	s1, s15
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007968:	6939      	ldr	r1, [r7, #16]
 800796a:	6978      	ldr	r0, [r7, #20]
 800796c:	f7ff f9b8 	bl	8006ce0 <_etoa>
 8007970:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	3301      	adds	r3, #1
 8007976:	60bb      	str	r3, [r7, #8]
        break;
 8007978:	e106      	b.n	8007b88 <_vsnprintf+0x998>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 800797a:	2301      	movs	r3, #1
 800797c:	647b      	str	r3, [r7, #68]	; 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 800797e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007980:	f003 0302 	and.w	r3, r3, #2
 8007984:	2b00      	cmp	r3, #0
 8007986:	d10e      	bne.n	80079a6 <_vsnprintf+0x7b6>
          while (l++ < width) {
 8007988:	e007      	b.n	800799a <_vsnprintf+0x7aa>
            out(' ', buffer, idx++, maxlen);
 800798a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800798c:	1c53      	adds	r3, r2, #1
 800798e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007990:	697c      	ldr	r4, [r7, #20]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	6939      	ldr	r1, [r7, #16]
 8007996:	2020      	movs	r0, #32
 8007998:	47a0      	blx	r4
          while (l++ < width) {
 800799a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800799c:	1c5a      	adds	r2, r3, #1
 800799e:	647a      	str	r2, [r7, #68]	; 0x44
 80079a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d8f1      	bhi.n	800798a <_vsnprintf+0x79a>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 80079a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80079aa:	1d1a      	adds	r2, r3, #4
 80079ac:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	b2d8      	uxtb	r0, r3
 80079b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80079b6:	1c53      	adds	r3, r2, #1
 80079b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079ba:	697c      	ldr	r4, [r7, #20]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6939      	ldr	r1, [r7, #16]
 80079c0:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 80079c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079c4:	f003 0302 	and.w	r3, r3, #2
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d00e      	beq.n	80079ea <_vsnprintf+0x7fa>
          while (l++ < width) {
 80079cc:	e007      	b.n	80079de <_vsnprintf+0x7ee>
            out(' ', buffer, idx++, maxlen);
 80079ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80079d0:	1c53      	adds	r3, r2, #1
 80079d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079d4:	697c      	ldr	r4, [r7, #20]
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	6939      	ldr	r1, [r7, #16]
 80079da:	2020      	movs	r0, #32
 80079dc:	47a0      	blx	r4
          while (l++ < width) {
 80079de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079e0:	1c5a      	adds	r2, r3, #1
 80079e2:	647a      	str	r2, [r7, #68]	; 0x44
 80079e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d8f1      	bhi.n	80079ce <_vsnprintf+0x7de>
          }
        }
        format++;
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	3301      	adds	r3, #1
 80079ee:	60bb      	str	r3, [r7, #8]
        break;
 80079f0:	e0ca      	b.n	8007b88 <_vsnprintf+0x998>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 80079f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80079f6:	1d1a      	adds	r2, r3, #4
 80079f8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	643b      	str	r3, [r7, #64]	; 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8007a00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d001      	beq.n	8007a0a <_vsnprintf+0x81a>
 8007a06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a08:	e001      	b.n	8007a0e <_vsnprintf+0x81e>
 8007a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a0e:	4619      	mov	r1, r3
 8007a10:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007a12:	f7fe fcb3 	bl	800637c <_strnlen_s>
 8007a16:	63f8      	str	r0, [r7, #60]	; 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8007a18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d005      	beq.n	8007a2e <_vsnprintf+0x83e>
          l = (l < precision ? l : precision);
 8007a22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007a24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a26:	4293      	cmp	r3, r2
 8007a28:	bf28      	it	cs
 8007a2a:	4613      	movcs	r3, r2
 8007a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 8007a2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a30:	f003 0302 	and.w	r3, r3, #2
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d11a      	bne.n	8007a6e <_vsnprintf+0x87e>
          while (l++ < width) {
 8007a38:	e007      	b.n	8007a4a <_vsnprintf+0x85a>
            out(' ', buffer, idx++, maxlen);
 8007a3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a3c:	1c53      	adds	r3, r2, #1
 8007a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a40:	697c      	ldr	r4, [r7, #20]
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	6939      	ldr	r1, [r7, #16]
 8007a46:	2020      	movs	r0, #32
 8007a48:	47a0      	blx	r4
          while (l++ < width) {
 8007a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a4c:	1c5a      	adds	r2, r3, #1
 8007a4e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007a50:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d8f1      	bhi.n	8007a3a <_vsnprintf+0x84a>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8007a56:	e00a      	b.n	8007a6e <_vsnprintf+0x87e>
          out(*(p++), buffer, idx++, maxlen);
 8007a58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a5a:	1c5a      	adds	r2, r3, #1
 8007a5c:	643a      	str	r2, [r7, #64]	; 0x40
 8007a5e:	7818      	ldrb	r0, [r3, #0]
 8007a60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a62:	1c53      	adds	r3, r2, #1
 8007a64:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a66:	697c      	ldr	r4, [r7, #20]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	6939      	ldr	r1, [r7, #16]
 8007a6c:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8007a6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a70:	781b      	ldrb	r3, [r3, #0]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d009      	beq.n	8007a8a <_vsnprintf+0x89a>
 8007a76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d0eb      	beq.n	8007a58 <_vsnprintf+0x868>
 8007a80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a82:	1e5a      	subs	r2, r3, #1
 8007a84:	657a      	str	r2, [r7, #84]	; 0x54
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d1e6      	bne.n	8007a58 <_vsnprintf+0x868>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8007a8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a8c:	f003 0302 	and.w	r3, r3, #2
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d00e      	beq.n	8007ab2 <_vsnprintf+0x8c2>
          while (l++ < width) {
 8007a94:	e007      	b.n	8007aa6 <_vsnprintf+0x8b6>
            out(' ', buffer, idx++, maxlen);
 8007a96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a98:	1c53      	adds	r3, r2, #1
 8007a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a9c:	697c      	ldr	r4, [r7, #20]
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	6939      	ldr	r1, [r7, #16]
 8007aa2:	2020      	movs	r0, #32
 8007aa4:	47a0      	blx	r4
          while (l++ < width) {
 8007aa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007aa8:	1c5a      	adds	r2, r3, #1
 8007aaa:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007aac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d8f1      	bhi.n	8007a96 <_vsnprintf+0x8a6>
          }
        }
        format++;
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	60bb      	str	r3, [r7, #8]
        break;
 8007ab8:	e066      	b.n	8007b88 <_vsnprintf+0x998>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8007aba:	2308      	movs	r3, #8
 8007abc:	65bb      	str	r3, [r7, #88]	; 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8007abe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ac0:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8007ac4:	65fb      	str	r3, [r7, #92]	; 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (is_ll) {
 8007acc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d023      	beq.n	8007b1c <_vsnprintf+0x92c>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8007ad4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007ad8:	1d1a      	adds	r2, r3, #4
 8007ada:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	603a      	str	r2, [r7, #0]
 8007ae6:	607b      	str	r3, [r7, #4]
 8007ae8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007aea:	9308      	str	r3, [sp, #32]
 8007aec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007aee:	9307      	str	r3, [sp, #28]
 8007af0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007af2:	9306      	str	r3, [sp, #24]
 8007af4:	f04f 0210 	mov.w	r2, #16
 8007af8:	f04f 0300 	mov.w	r3, #0
 8007afc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007b00:	2300      	movs	r3, #0
 8007b02:	9302      	str	r3, [sp, #8]
 8007b04:	e9d7 3400 	ldrd	r3, r4, [r7]
 8007b08:	e9cd 3400 	strd	r3, r4, [sp]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007b10:	6939      	ldr	r1, [r7, #16]
 8007b12:	6978      	ldr	r0, [r7, #20]
 8007b14:	f7fe fe1c 	bl	8006750 <_ntoa_long_long>
 8007b18:	64f8      	str	r0, [r7, #76]	; 0x4c
 8007b1a:	e018      	b.n	8007b4e <_vsnprintf+0x95e>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8007b1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007b20:	1d1a      	adds	r2, r3, #4
 8007b22:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	461a      	mov	r2, r3
 8007b2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b2c:	9305      	str	r3, [sp, #20]
 8007b2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b30:	9304      	str	r3, [sp, #16]
 8007b32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b34:	9303      	str	r3, [sp, #12]
 8007b36:	2310      	movs	r3, #16
 8007b38:	9302      	str	r3, [sp, #8]
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	9301      	str	r3, [sp, #4]
 8007b3e:	9200      	str	r2, [sp, #0]
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007b44:	6939      	ldr	r1, [r7, #16]
 8007b46:	6978      	ldr	r0, [r7, #20]
 8007b48:	f7fe fd9c 	bl	8006684 <_ntoa_long>
 8007b4c:	64f8      	str	r0, [r7, #76]	; 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	3301      	adds	r3, #1
 8007b52:	60bb      	str	r3, [r7, #8]
        break;
 8007b54:	e018      	b.n	8007b88 <_vsnprintf+0x998>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8007b56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007b58:	1c53      	adds	r3, r2, #1
 8007b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b5c:	697c      	ldr	r4, [r7, #20]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	6939      	ldr	r1, [r7, #16]
 8007b62:	2025      	movs	r0, #37	; 0x25
 8007b64:	47a0      	blx	r4
        format++;
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	3301      	adds	r3, #1
 8007b6a:	60bb      	str	r3, [r7, #8]
        break;
 8007b6c:	e00c      	b.n	8007b88 <_vsnprintf+0x998>

      default :
        out(*format, buffer, idx++, maxlen);
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	7818      	ldrb	r0, [r3, #0]
 8007b72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007b74:	1c53      	adds	r3, r2, #1
 8007b76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b78:	697c      	ldr	r4, [r7, #20]
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	6939      	ldr	r1, [r7, #16]
 8007b7e:	47a0      	blx	r4
        format++;
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	3301      	adds	r3, #1
 8007b84:	60bb      	str	r3, [r7, #8]
        break;
 8007b86:	bf00      	nop
  while (*format)
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	781b      	ldrb	r3, [r3, #0]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	f47f ab41 	bne.w	8007214 <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8007b92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d302      	bcc.n	8007ba0 <_vsnprintf+0x9b0>
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	1e5a      	subs	r2, r3, #1
 8007b9e:	e000      	b.n	8007ba2 <_vsnprintf+0x9b2>
 8007ba0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007ba2:	697c      	ldr	r4, [r7, #20]
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	6939      	ldr	r1, [r7, #16]
 8007ba8:	2000      	movs	r0, #0
 8007baa:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8007bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3764      	adds	r7, #100	; 0x64
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007bb8 <sprintf_>:
  return ret;
}


int sprintf_(char* buffer, const char* format, ...)
{
 8007bb8:	b40e      	push	{r1, r2, r3}
 8007bba:	b580      	push	{r7, lr}
 8007bbc:	b087      	sub	sp, #28
 8007bbe:	af02      	add	r7, sp, #8
 8007bc0:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, format);
 8007bc2:	f107 0320 	add.w	r3, r7, #32
 8007bc6:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	9300      	str	r3, [sp, #0]
 8007bcc:	69fb      	ldr	r3, [r7, #28]
 8007bce:	f04f 32ff 	mov.w	r2, #4294967295
 8007bd2:	6879      	ldr	r1, [r7, #4]
 8007bd4:	4805      	ldr	r0, [pc, #20]	; (8007bec <sprintf_+0x34>)
 8007bd6:	f7ff fb0b 	bl	80071f0 <_vsnprintf>
 8007bda:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3714      	adds	r7, #20
 8007be2:	46bd      	mov	sp, r7
 8007be4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007be8:	b003      	add	sp, #12
 8007bea:	4770      	bx	lr
 8007bec:	08006333 	.word	0x08006333

08007bf0 <RFP_Handle>:
        { RFP_WaitForResponseFunction }, { RFP_ParseResponseFunction } };
RFPCommandFunctions_TypeDef RfpCommandFunction[RFP_COMMAND_CNT];
RFPDataFunctions_TypeDef RfpDataFunctions;
RFPMessageFunctions_TypeDef RfpMessageFunction[RFP_MESSAGE_CNT];
void RFP_Handle(void)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	af00      	add	r7, sp, #0
   RFP_ChangeState();
 8007bf4:	f000 f856 	bl	8007ca4 <RFP_ChangeState>
   if(RfpFunction[Rfp->State].RfpFunction != NULL)
 8007bf8:	4b09      	ldr	r3, [pc, #36]	; (8007c20 <RFP_Handle+0x30>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	461a      	mov	r2, r3
 8007c00:	4b08      	ldr	r3, [pc, #32]	; (8007c24 <RFP_Handle+0x34>)
 8007c02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d007      	beq.n	8007c1a <RFP_Handle+0x2a>
   {
      RfpFunction[Rfp->State].RfpFunction();
 8007c0a:	4b05      	ldr	r3, [pc, #20]	; (8007c20 <RFP_Handle+0x30>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	461a      	mov	r2, r3
 8007c12:	4b04      	ldr	r3, [pc, #16]	; (8007c24 <RFP_Handle+0x34>)
 8007c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c18:	4798      	blx	r3
   }
}
 8007c1a:	bf00      	nop
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	20003ef8 	.word	0x20003ef8
 8007c24:	20000078 	.word	0x20000078

08007c28 <RFP_Init>:
void RFP_Init(RFP_TypeDef *RadioProtocol, RFPDeviceID_TypeDef Device)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b085      	sub	sp, #20
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	460b      	mov	r3, r1
 8007c32:	70fb      	strb	r3, [r7, #3]
   Rfp             = RadioProtocol;
 8007c34:	4a17      	ldr	r2, [pc, #92]	; (8007c94 <RFP_Init+0x6c>)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6013      	str	r3, [r2, #0]
   Rfp->Initialize = RFP_INITIALIZE;
 8007c3a:	4b16      	ldr	r3, [pc, #88]	; (8007c94 <RFP_Init+0x6c>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	2201      	movs	r2, #1
 8007c40:	70da      	strb	r2, [r3, #3]
   Rfp->DeviceType = Device;
 8007c42:	4b14      	ldr	r3, [pc, #80]	; (8007c94 <RFP_Init+0x6c>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	78fa      	ldrb	r2, [r7, #3]
 8007c48:	715a      	strb	r2, [r3, #5]
   for(int i = 0; i < RFP_COMMAND_CNT; i++)
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	60fb      	str	r3, [r7, #12]
 8007c4e:	e007      	b.n	8007c60 <RFP_Init+0x38>
   {
      RfpCommandFunction[i].RfpCommandFunction = NULL;
 8007c50:	4a11      	ldr	r2, [pc, #68]	; (8007c98 <RFP_Init+0x70>)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2100      	movs	r1, #0
 8007c56:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   for(int i = 0; i < RFP_COMMAND_CNT; i++)
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	60fb      	str	r3, [r7, #12]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2b05      	cmp	r3, #5
 8007c64:	ddf4      	ble.n	8007c50 <RFP_Init+0x28>
   }
   for(int i = 0; i < RFP_MESSAGE_CNT; i++)
 8007c66:	2300      	movs	r3, #0
 8007c68:	60bb      	str	r3, [r7, #8]
 8007c6a:	e007      	b.n	8007c7c <RFP_Init+0x54>
   {
      RfpMessageFunction[i].RfpMessageFunction = NULL;
 8007c6c:	4a0b      	ldr	r2, [pc, #44]	; (8007c9c <RFP_Init+0x74>)
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	2100      	movs	r1, #0
 8007c72:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   for(int i = 0; i < RFP_MESSAGE_CNT; i++)
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	3301      	adds	r3, #1
 8007c7a:	60bb      	str	r3, [r7, #8]
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	2b04      	cmp	r3, #4
 8007c80:	ddf4      	ble.n	8007c6c <RFP_Init+0x44>
   }
   RfpDataFunctions.RfpDataFunction = NULL;
 8007c82:	4b07      	ldr	r3, [pc, #28]	; (8007ca0 <RFP_Init+0x78>)
 8007c84:	2200      	movs	r2, #0
 8007c86:	601a      	str	r2, [r3, #0]
}
 8007c88:	bf00      	nop
 8007c8a:	3714      	adds	r7, #20
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr
 8007c94:	20003ef8 	.word	0x20003ef8
 8007c98:	20003efc 	.word	0x20003efc
 8007c9c:	20003f18 	.word	0x20003f18
 8007ca0:	20003f14 	.word	0x20003f14

08007ca4 <RFP_ChangeState>:
static void RFP_ChangeState(void)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b083      	sub	sp, #12
 8007ca8:	af00      	add	r7, sp, #0
   for(int i = 0; i < RFP_TRANSITION_TABLE_SIZE; i++)
 8007caa:	2300      	movs	r3, #0
 8007cac:	607b      	str	r3, [r7, #4]
 8007cae:	e02b      	b.n	8007d08 <RFP_ChangeState+0x64>
   {
      if(Rfp->State == RfpTransitionTable[i].Source && Rfp->NewEvent == RfpTransitionTable[i].Event)
 8007cb0:	4b1b      	ldr	r3, [pc, #108]	; (8007d20 <RFP_ChangeState+0x7c>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	7819      	ldrb	r1, [r3, #0]
 8007cb6:	481b      	ldr	r0, [pc, #108]	; (8007d24 <RFP_ChangeState+0x80>)
 8007cb8:	687a      	ldr	r2, [r7, #4]
 8007cba:	4613      	mov	r3, r2
 8007cbc:	005b      	lsls	r3, r3, #1
 8007cbe:	4413      	add	r3, r2
 8007cc0:	4403      	add	r3, r0
 8007cc2:	781b      	ldrb	r3, [r3, #0]
 8007cc4:	4299      	cmp	r1, r3
 8007cc6:	d11c      	bne.n	8007d02 <RFP_ChangeState+0x5e>
 8007cc8:	4b15      	ldr	r3, [pc, #84]	; (8007d20 <RFP_ChangeState+0x7c>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	7859      	ldrb	r1, [r3, #1]
 8007cce:	4815      	ldr	r0, [pc, #84]	; (8007d24 <RFP_ChangeState+0x80>)
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	4613      	mov	r3, r2
 8007cd4:	005b      	lsls	r3, r3, #1
 8007cd6:	4413      	add	r3, r2
 8007cd8:	4403      	add	r3, r0
 8007cda:	3302      	adds	r3, #2
 8007cdc:	781b      	ldrb	r3, [r3, #0]
 8007cde:	4299      	cmp	r1, r3
 8007ce0:	d10f      	bne.n	8007d02 <RFP_ChangeState+0x5e>
      {
         Rfp->State    = RfpTransitionTable[i].Destination;
 8007ce2:	4b0f      	ldr	r3, [pc, #60]	; (8007d20 <RFP_ChangeState+0x7c>)
 8007ce4:	6819      	ldr	r1, [r3, #0]
 8007ce6:	480f      	ldr	r0, [pc, #60]	; (8007d24 <RFP_ChangeState+0x80>)
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	4613      	mov	r3, r2
 8007cec:	005b      	lsls	r3, r3, #1
 8007cee:	4413      	add	r3, r2
 8007cf0:	4403      	add	r3, r0
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	700b      	strb	r3, [r1, #0]
         Rfp->NewEvent = RFP_EVENT_NOTHING;
 8007cf8:	4b09      	ldr	r3, [pc, #36]	; (8007d20 <RFP_ChangeState+0x7c>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	705a      	strb	r2, [r3, #1]
         return;
 8007d00:	e009      	b.n	8007d16 <RFP_ChangeState+0x72>
   for(int i = 0; i < RFP_TRANSITION_TABLE_SIZE; i++)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	3301      	adds	r3, #1
 8007d06:	607b      	str	r3, [r7, #4]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2b0b      	cmp	r3, #11
 8007d0c:	d9d0      	bls.n	8007cb0 <RFP_ChangeState+0xc>
      }
   }
   Rfp->NewEvent = RFP_EVENT_NOTHING;
 8007d0e:	4b04      	ldr	r3, [pc, #16]	; (8007d20 <RFP_ChangeState+0x7c>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	2200      	movs	r2, #0
 8007d14:	705a      	strb	r2, [r3, #1]
}
 8007d16:	370c      	adds	r7, #12
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr
 8007d20:	20003ef8 	.word	0x20003ef8
 8007d24:	20000054 	.word	0x20000054

08007d28 <RFP_RegisterDataFunction>:
void RFP_RegisterCommandFunction(RFPCommands_TypeDef Command, void (*Callback)(uint8_t *, uint32_t, uint32_t))
{
   RfpCommandFunction[Command - 1].RfpCommandFunction = Callback;
}
void RFP_RegisterDataFunction(void (*Callback)(uint8_t *, uint32_t, uint32_t))
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
   RfpDataFunctions.RfpDataFunction = Callback;
 8007d30:	4a04      	ldr	r2, [pc, #16]	; (8007d44 <RFP_RegisterDataFunction+0x1c>)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6013      	str	r3, [r2, #0]
}
 8007d36:	bf00      	nop
 8007d38:	370c      	adds	r7, #12
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr
 8007d42:	bf00      	nop
 8007d44:	20003f14 	.word	0x20003f14

08007d48 <RFP_InterruptTask>:
void RFP_RegisterMessageFunction(RFPMessage_TypeDef Message, void (*Callback)(uint8_t *, uint32_t, uint32_t))
{
   RfpMessageFunction[Message - 1].RfpMessageFunction = Callback;
}
void RFP_InterruptTask(void)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	af00      	add	r7, sp, #0
   Rfp->NewDataFlag = RFP_NEW_DATA_FLAG_SET;
 8007d4c:	4b04      	ldr	r3, [pc, #16]	; (8007d60 <RFP_InterruptTask+0x18>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	2201      	movs	r2, #1
 8007d52:	711a      	strb	r2, [r3, #4]
}
 8007d54:	bf00      	nop
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr
 8007d5e:	bf00      	nop
 8007d60:	20003ef8 	.word	0x20003ef8

08007d64 <RFP_SendData>:
void RFP_SendData(RFPDeviceID_TypeDef Destination, RFPMessageType_TypeDef Type, uint8_t *Data, uint32_t Length)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b086      	sub	sp, #24
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	60ba      	str	r2, [r7, #8]
 8007d6c:	607b      	str	r3, [r7, #4]
 8007d6e:	4603      	mov	r3, r0
 8007d70:	73fb      	strb	r3, [r7, #15]
 8007d72:	460b      	mov	r3, r1
 8007d74:	73bb      	strb	r3, [r7, #14]
   RfpDataTransmit[0] = Destination;
 8007d76:	4a27      	ldr	r2, [pc, #156]	; (8007e14 <RFP_SendData+0xb0>)
 8007d78:	7bfb      	ldrb	r3, [r7, #15]
 8007d7a:	7013      	strb	r3, [r2, #0]
   RfpDataTransmit[1] = Rfp->DeviceType;
 8007d7c:	4b26      	ldr	r3, [pc, #152]	; (8007e18 <RFP_SendData+0xb4>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	795a      	ldrb	r2, [r3, #5]
 8007d82:	4b24      	ldr	r3, [pc, #144]	; (8007e14 <RFP_SendData+0xb0>)
 8007d84:	705a      	strb	r2, [r3, #1]
   RfpDataTransmit[2] = Type;
 8007d86:	4a23      	ldr	r2, [pc, #140]	; (8007e14 <RFP_SendData+0xb0>)
 8007d88:	7bbb      	ldrb	r3, [r7, #14]
 8007d8a:	7093      	strb	r3, [r2, #2]
   for(int i = 0; i < Length; i++)
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	617b      	str	r3, [r7, #20]
 8007d90:	e00a      	b.n	8007da8 <RFP_SendData+0x44>
   {
      RfpDataTransmit[i + 3] = Data[i];
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	68ba      	ldr	r2, [r7, #8]
 8007d96:	441a      	add	r2, r3
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	3303      	adds	r3, #3
 8007d9c:	7811      	ldrb	r1, [r2, #0]
 8007d9e:	4a1d      	ldr	r2, [pc, #116]	; (8007e14 <RFP_SendData+0xb0>)
 8007da0:	54d1      	strb	r1, [r2, r3]
   for(int i = 0; i < Length; i++)
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	3301      	adds	r3, #1
 8007da6:	617b      	str	r3, [r7, #20]
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	687a      	ldr	r2, [r7, #4]
 8007dac:	429a      	cmp	r2, r3
 8007dae:	d8f0      	bhi.n	8007d92 <RFP_SendData+0x2e>
   }
   uint32_t crc                    = Crc(CRC_INITIAL_VALUE, 3 + Length, RfpDataTransmit);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	3303      	adds	r3, #3
 8007db4:	4a17      	ldr	r2, [pc, #92]	; (8007e14 <RFP_SendData+0xb0>)
 8007db6:	4619      	mov	r1, r3
 8007db8:	f04f 30ff 	mov.w	r0, #4294967295
 8007dbc:	f7fa fd7c 	bl	80028b8 <Crc>
 8007dc0:	6138      	str	r0, [r7, #16]
   RfpDataTransmit[3 + Length]     = ((crc >> 24) & 0xff);
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	0e1a      	lsrs	r2, r3, #24
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	3303      	adds	r3, #3
 8007dca:	b2d1      	uxtb	r1, r2
 8007dcc:	4a11      	ldr	r2, [pc, #68]	; (8007e14 <RFP_SendData+0xb0>)
 8007dce:	54d1      	strb	r1, [r2, r3]
   RfpDataTransmit[3 + Length + 1] = ((crc >> 16) & 0xff);
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	0c1a      	lsrs	r2, r3, #16
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	3304      	adds	r3, #4
 8007dd8:	b2d1      	uxtb	r1, r2
 8007dda:	4a0e      	ldr	r2, [pc, #56]	; (8007e14 <RFP_SendData+0xb0>)
 8007ddc:	54d1      	strb	r1, [r2, r3]
   RfpDataTransmit[3 + Length + 2] = ((crc >> 8) & 0xff);
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	0a1a      	lsrs	r2, r3, #8
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	3305      	adds	r3, #5
 8007de6:	b2d1      	uxtb	r1, r2
 8007de8:	4a0a      	ldr	r2, [pc, #40]	; (8007e14 <RFP_SendData+0xb0>)
 8007dea:	54d1      	strb	r1, [r2, r3]
   RfpDataTransmit[3 + Length + 3] = (crc & 0xff);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	3306      	adds	r3, #6
 8007df0:	693a      	ldr	r2, [r7, #16]
 8007df2:	b2d1      	uxtb	r1, r2
 8007df4:	4a07      	ldr	r2, [pc, #28]	; (8007e14 <RFP_SendData+0xb0>)
 8007df6:	54d1      	strb	r1, [r2, r3]
   Rfp->SendFlag                   = RFP_SEND_FLAG_SET;
 8007df8:	4b07      	ldr	r3, [pc, #28]	; (8007e18 <RFP_SendData+0xb4>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	745a      	strb	r2, [r3, #17]
   Rfp->DataSizeTransmit           = 3 + Length + 4;
 8007e00:	4b05      	ldr	r3, [pc, #20]	; (8007e18 <RFP_SendData+0xb4>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	3207      	adds	r2, #7
 8007e08:	60da      	str	r2, [r3, #12]
}
 8007e0a:	bf00      	nop
 8007e0c:	3718      	adds	r7, #24
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	bf00      	nop
 8007e14:	20003e94 	.word	0x20003e94
 8007e18:	20003ef8 	.word	0x20003ef8

08007e1c <RFP_SendResponseFunction>:
static void RFP_SendResponseFunction(RFPMessageType_TypeDef Response)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b084      	sub	sp, #16
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	4603      	mov	r3, r0
 8007e24:	71fb      	strb	r3, [r7, #7]
   osDelay(200);
 8007e26:	20c8      	movs	r0, #200	; 0xc8
 8007e28:	f008 f8b4 	bl	800ff94 <osDelay>
   RfpDataTransmit[0] = Rfp->SourceMessage;
 8007e2c:	4b18      	ldr	r3, [pc, #96]	; (8007e90 <RFP_SendResponseFunction+0x74>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	7c1a      	ldrb	r2, [r3, #16]
 8007e32:	4b18      	ldr	r3, [pc, #96]	; (8007e94 <RFP_SendResponseFunction+0x78>)
 8007e34:	701a      	strb	r2, [r3, #0]
   RfpDataTransmit[1] = Rfp->DeviceType;
 8007e36:	4b16      	ldr	r3, [pc, #88]	; (8007e90 <RFP_SendResponseFunction+0x74>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	795a      	ldrb	r2, [r3, #5]
 8007e3c:	4b15      	ldr	r3, [pc, #84]	; (8007e94 <RFP_SendResponseFunction+0x78>)
 8007e3e:	705a      	strb	r2, [r3, #1]
   RfpDataTransmit[2] = RFP_MESSAGE;
 8007e40:	4b14      	ldr	r3, [pc, #80]	; (8007e94 <RFP_SendResponseFunction+0x78>)
 8007e42:	2203      	movs	r2, #3
 8007e44:	709a      	strb	r2, [r3, #2]
   RfpDataTransmit[3] = Response;
 8007e46:	4a13      	ldr	r2, [pc, #76]	; (8007e94 <RFP_SendResponseFunction+0x78>)
 8007e48:	79fb      	ldrb	r3, [r7, #7]
 8007e4a:	70d3      	strb	r3, [r2, #3]
   uint32_t crc       = Crc(CRC_INITIAL_VALUE, 4, RfpDataTransmit);
 8007e4c:	4a11      	ldr	r2, [pc, #68]	; (8007e94 <RFP_SendResponseFunction+0x78>)
 8007e4e:	2104      	movs	r1, #4
 8007e50:	f04f 30ff 	mov.w	r0, #4294967295
 8007e54:	f7fa fd30 	bl	80028b8 <Crc>
 8007e58:	60f8      	str	r0, [r7, #12]
   RfpDataTransmit[4] = ((crc >> 24) & 0xff);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	0e1b      	lsrs	r3, r3, #24
 8007e5e:	b2da      	uxtb	r2, r3
 8007e60:	4b0c      	ldr	r3, [pc, #48]	; (8007e94 <RFP_SendResponseFunction+0x78>)
 8007e62:	711a      	strb	r2, [r3, #4]
   RfpDataTransmit[5] = ((crc >> 16) & 0xff);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	0c1b      	lsrs	r3, r3, #16
 8007e68:	b2da      	uxtb	r2, r3
 8007e6a:	4b0a      	ldr	r3, [pc, #40]	; (8007e94 <RFP_SendResponseFunction+0x78>)
 8007e6c:	715a      	strb	r2, [r3, #5]
   RfpDataTransmit[6] = ((crc >> 8) & 0xff);
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	0a1b      	lsrs	r3, r3, #8
 8007e72:	b2da      	uxtb	r2, r3
 8007e74:	4b07      	ldr	r3, [pc, #28]	; (8007e94 <RFP_SendResponseFunction+0x78>)
 8007e76:	719a      	strb	r2, [r3, #6]
   RfpDataTransmit[7] = (crc & 0xff);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	b2da      	uxtb	r2, r3
 8007e7c:	4b05      	ldr	r3, [pc, #20]	; (8007e94 <RFP_SendResponseFunction+0x78>)
 8007e7e:	71da      	strb	r2, [r3, #7]
   HC12_TransmitData(RfpDataTransmit, 8);
 8007e80:	2108      	movs	r1, #8
 8007e82:	4804      	ldr	r0, [pc, #16]	; (8007e94 <RFP_SendResponseFunction+0x78>)
 8007e84:	f7f9 fb50 	bl	8001528 <HC12_TransmitData>
}
 8007e88:	bf00      	nop
 8007e8a:	3710      	adds	r7, #16
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}
 8007e90:	20003ef8 	.word	0x20003ef8
 8007e94:	20003e94 	.word	0x20003e94

08007e98 <RFP_InitializeFunction>:
static void RFP_InitializeFunction(void)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	af00      	add	r7, sp, #0
   Rfp->NewEvent = RFP_EVENT_END_INITIALIZE;
 8007e9c:	4b08      	ldr	r3, [pc, #32]	; (8007ec0 <RFP_InitializeFunction+0x28>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	2202      	movs	r2, #2
 8007ea2:	705a      	strb	r2, [r3, #1]
   HC12_ExitCommandMode();
 8007ea4:	f7f9 fb35 	bl	8001512 <HC12_ExitCommandMode>
   HC12_Init(Rfp, RfpDataRecive);
 8007ea8:	4b05      	ldr	r3, [pc, #20]	; (8007ec0 <RFP_InitializeFunction+0x28>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4905      	ldr	r1, [pc, #20]	; (8007ec4 <RFP_InitializeFunction+0x2c>)
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f7f9 fb64 	bl	800157c <HC12_Init>
   HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 8007eb4:	2164      	movs	r1, #100	; 0x64
 8007eb6:	4803      	ldr	r0, [pc, #12]	; (8007ec4 <RFP_InitializeFunction+0x2c>)
 8007eb8:	f7f9 fb4e 	bl	8001558 <HC12_ReciveToIdleDMA>
}
 8007ebc:	bf00      	nop
 8007ebe:	bd80      	pop	{r7, pc}
 8007ec0:	20003ef8 	.word	0x20003ef8
 8007ec4:	20003e30 	.word	0x20003e30

08007ec8 <RFP_IdleFunction>:
static void RFP_IdleFunction(void)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	af00      	add	r7, sp, #0
   if(Rfp->NewDataFlag == RFP_NEW_DATA_FLAG_SET)
 8007ecc:	4b10      	ldr	r3, [pc, #64]	; (8007f10 <RFP_IdleFunction+0x48>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	791b      	ldrb	r3, [r3, #4]
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d108      	bne.n	8007eea <RFP_IdleFunction+0x22>
   {
      Rfp->NewDataFlag = RFP_NEW_DATA_FLAG_RESET;
 8007ed8:	4b0d      	ldr	r3, [pc, #52]	; (8007f10 <RFP_IdleFunction+0x48>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	2200      	movs	r2, #0
 8007ede:	711a      	strb	r2, [r3, #4]
      Rfp->NewEvent    = RFP_EVENT_NEW_DATA;
 8007ee0:	4b0b      	ldr	r3, [pc, #44]	; (8007f10 <RFP_IdleFunction+0x48>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	705a      	strb	r2, [r3, #1]
   {
      Rfp->SendFlag = RFP_SEND_FLAG_RESET;
      Rfp->NewEvent = RFP_EVENT_SEND;
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
   }
}
 8007ee8:	e010      	b.n	8007f0c <RFP_IdleFunction+0x44>
   else if(Rfp->SendFlag == RFP_SEND_FLAG_SET)
 8007eea:	4b09      	ldr	r3, [pc, #36]	; (8007f10 <RFP_IdleFunction+0x48>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	7c5b      	ldrb	r3, [r3, #17]
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	d10b      	bne.n	8007f0c <RFP_IdleFunction+0x44>
      Rfp->SendFlag = RFP_SEND_FLAG_RESET;
 8007ef4:	4b06      	ldr	r3, [pc, #24]	; (8007f10 <RFP_IdleFunction+0x48>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	745a      	strb	r2, [r3, #17]
      Rfp->NewEvent = RFP_EVENT_SEND;
 8007efc:	4b04      	ldr	r3, [pc, #16]	; (8007f10 <RFP_IdleFunction+0x48>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	2206      	movs	r2, #6
 8007f02:	705a      	strb	r2, [r3, #1]
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 8007f04:	2164      	movs	r1, #100	; 0x64
 8007f06:	4803      	ldr	r0, [pc, #12]	; (8007f14 <RFP_IdleFunction+0x4c>)
 8007f08:	f7f9 fb26 	bl	8001558 <HC12_ReciveToIdleDMA>
}
 8007f0c:	bf00      	nop
 8007f0e:	bd80      	pop	{r7, pc}
 8007f10:	20003ef8 	.word	0x20003ef8
 8007f14:	20003e30 	.word	0x20003e30

08007f18 <RFP_ParseFunction>:
static void RFP_ParseFunction(void)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
   uint32_t MessageCRC = 0;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	607b      	str	r3, [r7, #4]
   Rfp->SourceMessage  = RfpDataRecive[1];
 8007f22:	4b3a      	ldr	r3, [pc, #232]	; (800800c <RFP_ParseFunction+0xf4>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a3a      	ldr	r2, [pc, #232]	; (8008010 <RFP_ParseFunction+0xf8>)
 8007f28:	7852      	ldrb	r2, [r2, #1]
 8007f2a:	741a      	strb	r2, [r3, #16]
   if(RfpDataRecive[0] != Rfp->DeviceType)
 8007f2c:	4b38      	ldr	r3, [pc, #224]	; (8008010 <RFP_ParseFunction+0xf8>)
 8007f2e:	781a      	ldrb	r2, [r3, #0]
 8007f30:	4b36      	ldr	r3, [pc, #216]	; (800800c <RFP_ParseFunction+0xf4>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	795b      	ldrb	r3, [r3, #5]
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d00b      	beq.n	8007f52 <RFP_ParseFunction+0x3a>
   {
      Rfp->NewEvent = RFP_EVENT_ERROR;
 8007f3a:	4b34      	ldr	r3, [pc, #208]	; (800800c <RFP_ParseFunction+0xf4>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	2203      	movs	r2, #3
 8007f40:	705a      	strb	r2, [r3, #1]
      RFP_SendResponseFunction(RFP_ERROR);
 8007f42:	2001      	movs	r0, #1
 8007f44:	f7ff ff6a 	bl	8007e1c <RFP_SendResponseFunction>
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 8007f48:	2164      	movs	r1, #100	; 0x64
 8007f4a:	4831      	ldr	r0, [pc, #196]	; (8008010 <RFP_ParseFunction+0xf8>)
 8007f4c:	f7f9 fb04 	bl	8001558 <HC12_ReciveToIdleDMA>
               HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
            }
         }
      }
   }
}
 8007f50:	e057      	b.n	8008002 <RFP_ParseFunction+0xea>
      if(Rfp->DataSize != 0)
 8007f52:	4b2e      	ldr	r3, [pc, #184]	; (800800c <RFP_ParseFunction+0xf4>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d052      	beq.n	8008002 <RFP_ParseFunction+0xea>
         MessageCRC = (((uint32_t)RfpDataRecive[Rfp->DataSize - 4] << 24) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 3] << 16)
 8007f5c:	4b2b      	ldr	r3, [pc, #172]	; (800800c <RFP_ParseFunction+0xf4>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	3b04      	subs	r3, #4
 8007f64:	4a2a      	ldr	r2, [pc, #168]	; (8008010 <RFP_ParseFunction+0xf8>)
 8007f66:	5cd3      	ldrb	r3, [r2, r3]
 8007f68:	061a      	lsls	r2, r3, #24
 8007f6a:	4b28      	ldr	r3, [pc, #160]	; (800800c <RFP_ParseFunction+0xf4>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	3b03      	subs	r3, #3
 8007f72:	4927      	ldr	r1, [pc, #156]	; (8008010 <RFP_ParseFunction+0xf8>)
 8007f74:	5ccb      	ldrb	r3, [r1, r3]
 8007f76:	041b      	lsls	r3, r3, #16
 8007f78:	431a      	orrs	r2, r3
                       | ((uint32_t)RfpDataRecive[Rfp->DataSize - 2] << 8) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 1]));
 8007f7a:	4b24      	ldr	r3, [pc, #144]	; (800800c <RFP_ParseFunction+0xf4>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	689b      	ldr	r3, [r3, #8]
 8007f80:	3b02      	subs	r3, #2
 8007f82:	4923      	ldr	r1, [pc, #140]	; (8008010 <RFP_ParseFunction+0xf8>)
 8007f84:	5ccb      	ldrb	r3, [r1, r3]
 8007f86:	021b      	lsls	r3, r3, #8
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	4a20      	ldr	r2, [pc, #128]	; (800800c <RFP_ParseFunction+0xf4>)
 8007f8c:	6812      	ldr	r2, [r2, #0]
 8007f8e:	6892      	ldr	r2, [r2, #8]
 8007f90:	3a01      	subs	r2, #1
 8007f92:	491f      	ldr	r1, [pc, #124]	; (8008010 <RFP_ParseFunction+0xf8>)
 8007f94:	5c8a      	ldrb	r2, [r1, r2]
         MessageCRC = (((uint32_t)RfpDataRecive[Rfp->DataSize - 4] << 24) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 3] << 16)
 8007f96:	4313      	orrs	r3, r2
 8007f98:	607b      	str	r3, [r7, #4]
         if(MessageCRC == Crc(CRC_INITIAL_VALUE, Rfp->DataSize - 4, RfpDataRecive))
 8007f9a:	4b1c      	ldr	r3, [pc, #112]	; (800800c <RFP_ParseFunction+0xf4>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	689b      	ldr	r3, [r3, #8]
 8007fa0:	3b04      	subs	r3, #4
 8007fa2:	4a1b      	ldr	r2, [pc, #108]	; (8008010 <RFP_ParseFunction+0xf8>)
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	f04f 30ff 	mov.w	r0, #4294967295
 8007faa:	f7fa fc85 	bl	80028b8 <Crc>
 8007fae:	4602      	mov	r2, r0
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d107      	bne.n	8007fc6 <RFP_ParseFunction+0xae>
            Rfp->NewEvent = RFP_EVENT_DATA_OK;
 8007fb6:	4b15      	ldr	r3, [pc, #84]	; (800800c <RFP_ParseFunction+0xf4>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	2204      	movs	r2, #4
 8007fbc:	705a      	strb	r2, [r3, #1]
            RFP_SendResponseFunction(RFP_OK);
 8007fbe:	2004      	movs	r0, #4
 8007fc0:	f7ff ff2c 	bl	8007e1c <RFP_SendResponseFunction>
}
 8007fc4:	e01d      	b.n	8008002 <RFP_ParseFunction+0xea>
            if(RepareMessage(MessageCRC, RfpDataRecive, Rfp->DataSize) == CRC_OK)
 8007fc6:	4b11      	ldr	r3, [pc, #68]	; (800800c <RFP_ParseFunction+0xf4>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	689b      	ldr	r3, [r3, #8]
 8007fcc:	461a      	mov	r2, r3
 8007fce:	4910      	ldr	r1, [pc, #64]	; (8008010 <RFP_ParseFunction+0xf8>)
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f7fa fcc9 	bl	8002968 <RepareMessage>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d107      	bne.n	8007fec <RFP_ParseFunction+0xd4>
               Rfp->NewEvent = RFP_EVENT_DATA_OK;
 8007fdc:	4b0b      	ldr	r3, [pc, #44]	; (800800c <RFP_ParseFunction+0xf4>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	2204      	movs	r2, #4
 8007fe2:	705a      	strb	r2, [r3, #1]
               RFP_SendResponseFunction(RFP_OK);
 8007fe4:	2004      	movs	r0, #4
 8007fe6:	f7ff ff19 	bl	8007e1c <RFP_SendResponseFunction>
}
 8007fea:	e00a      	b.n	8008002 <RFP_ParseFunction+0xea>
               Rfp->NewEvent = RFP_EVENT_ERROR;
 8007fec:	4b07      	ldr	r3, [pc, #28]	; (800800c <RFP_ParseFunction+0xf4>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	2203      	movs	r2, #3
 8007ff2:	705a      	strb	r2, [r3, #1]
               RFP_SendResponseFunction(RFP_CRC_ERROR);
 8007ff4:	2002      	movs	r0, #2
 8007ff6:	f7ff ff11 	bl	8007e1c <RFP_SendResponseFunction>
               HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 8007ffa:	2164      	movs	r1, #100	; 0x64
 8007ffc:	4804      	ldr	r0, [pc, #16]	; (8008010 <RFP_ParseFunction+0xf8>)
 8007ffe:	f7f9 faab 	bl	8001558 <HC12_ReciveToIdleDMA>
}
 8008002:	bf00      	nop
 8008004:	3708      	adds	r7, #8
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
 800800a:	bf00      	nop
 800800c:	20003ef8 	.word	0x20003ef8
 8008010:	20003e30 	.word	0x20003e30

08008014 <RFP_RunningFunction>:
static void RFP_RunningFunction(void)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	af00      	add	r7, sp, #0
   switch(RfpDataRecive[2])
 8008018:	4b27      	ldr	r3, [pc, #156]	; (80080b8 <RFP_RunningFunction+0xa4>)
 800801a:	789b      	ldrb	r3, [r3, #2]
 800801c:	2b03      	cmp	r3, #3
 800801e:	d028      	beq.n	8008072 <RFP_RunningFunction+0x5e>
 8008020:	2b03      	cmp	r3, #3
 8008022:	dc3b      	bgt.n	800809c <RFP_RunningFunction+0x88>
 8008024:	2b01      	cmp	r3, #1
 8008026:	d002      	beq.n	800802e <RFP_RunningFunction+0x1a>
 8008028:	2b02      	cmp	r3, #2
 800802a:	d015      	beq.n	8008058 <RFP_RunningFunction+0x44>
         }
         break;
      }
      default:
      {
         break;
 800802c:	e036      	b.n	800809c <RFP_RunningFunction+0x88>
         if(RfpCommandFunction[RfpDataRecive[3] - 1].RfpCommandFunction != NULL)
 800802e:	4b22      	ldr	r3, [pc, #136]	; (80080b8 <RFP_RunningFunction+0xa4>)
 8008030:	78db      	ldrb	r3, [r3, #3]
 8008032:	3b01      	subs	r3, #1
 8008034:	4a21      	ldr	r2, [pc, #132]	; (80080bc <RFP_RunningFunction+0xa8>)
 8008036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d030      	beq.n	80080a0 <RFP_RunningFunction+0x8c>
            RfpCommandFunction[RfpDataRecive[3] - 1].RfpCommandFunction(RfpDataRecive, Rfp->DataSize, 4);
 800803e:	4b1e      	ldr	r3, [pc, #120]	; (80080b8 <RFP_RunningFunction+0xa4>)
 8008040:	78db      	ldrb	r3, [r3, #3]
 8008042:	3b01      	subs	r3, #1
 8008044:	4a1d      	ldr	r2, [pc, #116]	; (80080bc <RFP_RunningFunction+0xa8>)
 8008046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800804a:	4a1d      	ldr	r2, [pc, #116]	; (80080c0 <RFP_RunningFunction+0xac>)
 800804c:	6812      	ldr	r2, [r2, #0]
 800804e:	6891      	ldr	r1, [r2, #8]
 8008050:	2204      	movs	r2, #4
 8008052:	4819      	ldr	r0, [pc, #100]	; (80080b8 <RFP_RunningFunction+0xa4>)
 8008054:	4798      	blx	r3
         break;
 8008056:	e023      	b.n	80080a0 <RFP_RunningFunction+0x8c>
         if(RfpDataFunctions.RfpDataFunction != NULL)
 8008058:	4b1a      	ldr	r3, [pc, #104]	; (80080c4 <RFP_RunningFunction+0xb0>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d021      	beq.n	80080a4 <RFP_RunningFunction+0x90>
            RfpDataFunctions.RfpDataFunction(RfpDataRecive, Rfp->DataSize, 4);
 8008060:	4b18      	ldr	r3, [pc, #96]	; (80080c4 <RFP_RunningFunction+0xb0>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a16      	ldr	r2, [pc, #88]	; (80080c0 <RFP_RunningFunction+0xac>)
 8008066:	6812      	ldr	r2, [r2, #0]
 8008068:	6891      	ldr	r1, [r2, #8]
 800806a:	2204      	movs	r2, #4
 800806c:	4812      	ldr	r0, [pc, #72]	; (80080b8 <RFP_RunningFunction+0xa4>)
 800806e:	4798      	blx	r3
         break;
 8008070:	e018      	b.n	80080a4 <RFP_RunningFunction+0x90>
         if(RfpMessageFunction[RfpDataRecive[3] - 1].RfpMessageFunction != NULL)
 8008072:	4b11      	ldr	r3, [pc, #68]	; (80080b8 <RFP_RunningFunction+0xa4>)
 8008074:	78db      	ldrb	r3, [r3, #3]
 8008076:	3b01      	subs	r3, #1
 8008078:	4a13      	ldr	r2, [pc, #76]	; (80080c8 <RFP_RunningFunction+0xb4>)
 800807a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d012      	beq.n	80080a8 <RFP_RunningFunction+0x94>
            RfpMessageFunction[RfpDataRecive[3] - 1].RfpMessageFunction(RfpDataRecive, Rfp->DataSize, 4);
 8008082:	4b0d      	ldr	r3, [pc, #52]	; (80080b8 <RFP_RunningFunction+0xa4>)
 8008084:	78db      	ldrb	r3, [r3, #3]
 8008086:	3b01      	subs	r3, #1
 8008088:	4a0f      	ldr	r2, [pc, #60]	; (80080c8 <RFP_RunningFunction+0xb4>)
 800808a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800808e:	4a0c      	ldr	r2, [pc, #48]	; (80080c0 <RFP_RunningFunction+0xac>)
 8008090:	6812      	ldr	r2, [r2, #0]
 8008092:	6891      	ldr	r1, [r2, #8]
 8008094:	2204      	movs	r2, #4
 8008096:	4808      	ldr	r0, [pc, #32]	; (80080b8 <RFP_RunningFunction+0xa4>)
 8008098:	4798      	blx	r3
         break;
 800809a:	e005      	b.n	80080a8 <RFP_RunningFunction+0x94>
         break;
 800809c:	bf00      	nop
 800809e:	e004      	b.n	80080aa <RFP_RunningFunction+0x96>
         break;
 80080a0:	bf00      	nop
 80080a2:	e002      	b.n	80080aa <RFP_RunningFunction+0x96>
         break;
 80080a4:	bf00      	nop
 80080a6:	e000      	b.n	80080aa <RFP_RunningFunction+0x96>
         break;
 80080a8:	bf00      	nop
      }
   }
   HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 80080aa:	2164      	movs	r1, #100	; 0x64
 80080ac:	4802      	ldr	r0, [pc, #8]	; (80080b8 <RFP_RunningFunction+0xa4>)
 80080ae:	f7f9 fa53 	bl	8001558 <HC12_ReciveToIdleDMA>
}
 80080b2:	bf00      	nop
 80080b4:	bd80      	pop	{r7, pc}
 80080b6:	bf00      	nop
 80080b8:	20003e30 	.word	0x20003e30
 80080bc:	20003efc 	.word	0x20003efc
 80080c0:	20003ef8 	.word	0x20003ef8
 80080c4:	20003f14 	.word	0x20003f14
 80080c8:	20003f18 	.word	0x20003f18

080080cc <RFP_SendFunction>:
static void RFP_SendFunction(void)
{
 80080cc:	b598      	push	{r3, r4, r7, lr}
 80080ce:	af00      	add	r7, sp, #0
   if(Rfp->Cnt < 5)
 80080d0:	4b16      	ldr	r3, [pc, #88]	; (800812c <RFP_SendFunction+0x60>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	695b      	ldr	r3, [r3, #20]
 80080d6:	2b04      	cmp	r3, #4
 80080d8:	d819      	bhi.n	800810e <RFP_SendFunction+0x42>
   {
      osDelay(200);
 80080da:	20c8      	movs	r0, #200	; 0xc8
 80080dc:	f007 ff5a 	bl	800ff94 <osDelay>
      HC12_TransmitData(RfpDataTransmit, Rfp->DataSizeTransmit);
 80080e0:	4b12      	ldr	r3, [pc, #72]	; (800812c <RFP_SendFunction+0x60>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	68db      	ldr	r3, [r3, #12]
 80080e6:	4619      	mov	r1, r3
 80080e8:	4811      	ldr	r0, [pc, #68]	; (8008130 <RFP_SendFunction+0x64>)
 80080ea:	f7f9 fa1d 	bl	8001528 <HC12_TransmitData>
      Rfp->Cnt++;
 80080ee:	4b0f      	ldr	r3, [pc, #60]	; (800812c <RFP_SendFunction+0x60>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	695a      	ldr	r2, [r3, #20]
 80080f4:	3201      	adds	r2, #1
 80080f6:	615a      	str	r2, [r3, #20]
      Rfp->NewEvent = RFP_EVENT_WAIT_FOR_RESPONSE;
 80080f8:	4b0c      	ldr	r3, [pc, #48]	; (800812c <RFP_SendFunction+0x60>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	2205      	movs	r2, #5
 80080fe:	705a      	strb	r2, [r3, #1]
      Rfp->LastTick = HAL_GetTick();
 8008100:	4b0a      	ldr	r3, [pc, #40]	; (800812c <RFP_SendFunction+0x60>)
 8008102:	681c      	ldr	r4, [r3, #0]
 8008104:	f000 ff88 	bl	8009018 <HAL_GetTick>
 8008108:	4603      	mov	r3, r0
 800810a:	61a3      	str	r3, [r4, #24]
   {
      Rfp->Cnt      = 0;
      Rfp->NewEvent = RFP_EVENT_ERROR;
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
   }
}
 800810c:	e00b      	b.n	8008126 <RFP_SendFunction+0x5a>
      Rfp->Cnt      = 0;
 800810e:	4b07      	ldr	r3, [pc, #28]	; (800812c <RFP_SendFunction+0x60>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	2200      	movs	r2, #0
 8008114:	615a      	str	r2, [r3, #20]
      Rfp->NewEvent = RFP_EVENT_ERROR;
 8008116:	4b05      	ldr	r3, [pc, #20]	; (800812c <RFP_SendFunction+0x60>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	2203      	movs	r2, #3
 800811c:	705a      	strb	r2, [r3, #1]
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800811e:	2164      	movs	r1, #100	; 0x64
 8008120:	4804      	ldr	r0, [pc, #16]	; (8008134 <RFP_SendFunction+0x68>)
 8008122:	f7f9 fa19 	bl	8001558 <HC12_ReciveToIdleDMA>
}
 8008126:	bf00      	nop
 8008128:	bd98      	pop	{r3, r4, r7, pc}
 800812a:	bf00      	nop
 800812c:	20003ef8 	.word	0x20003ef8
 8008130:	20003e94 	.word	0x20003e94
 8008134:	20003e30 	.word	0x20003e30

08008138 <RFP_WaitForResponseFunction>:
static void RFP_WaitForResponseFunction(void)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	af00      	add	r7, sp, #0
   if(HAL_GetTick() - Rfp->LastTick > 2000)
 800813c:	f000 ff6c 	bl	8009018 <HAL_GetTick>
 8008140:	4602      	mov	r2, r0
 8008142:	4b0e      	ldr	r3, [pc, #56]	; (800817c <RFP_WaitForResponseFunction+0x44>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	699b      	ldr	r3, [r3, #24]
 8008148:	1ad3      	subs	r3, r2, r3
 800814a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800814e:	d904      	bls.n	800815a <RFP_WaitForResponseFunction+0x22>
   {
      Rfp->NewEvent = RFP_EVENT_ERROR;
 8008150:	4b0a      	ldr	r3, [pc, #40]	; (800817c <RFP_WaitForResponseFunction+0x44>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	2203      	movs	r2, #3
 8008156:	705a      	strb	r2, [r3, #1]
   else if(Rfp->NewDataFlag == RFP_NEW_DATA_FLAG_SET)
   {
      Rfp->NewDataFlag = RFP_NEW_DATA_FLAG_RESET;
      Rfp->NewEvent    = RFP_EVENT_NEW_DATA;
   }
}
 8008158:	e00d      	b.n	8008176 <RFP_WaitForResponseFunction+0x3e>
   else if(Rfp->NewDataFlag == RFP_NEW_DATA_FLAG_SET)
 800815a:	4b08      	ldr	r3, [pc, #32]	; (800817c <RFP_WaitForResponseFunction+0x44>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	791b      	ldrb	r3, [r3, #4]
 8008160:	b2db      	uxtb	r3, r3
 8008162:	2b01      	cmp	r3, #1
 8008164:	d107      	bne.n	8008176 <RFP_WaitForResponseFunction+0x3e>
      Rfp->NewDataFlag = RFP_NEW_DATA_FLAG_RESET;
 8008166:	4b05      	ldr	r3, [pc, #20]	; (800817c <RFP_WaitForResponseFunction+0x44>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	2200      	movs	r2, #0
 800816c:	711a      	strb	r2, [r3, #4]
      Rfp->NewEvent    = RFP_EVENT_NEW_DATA;
 800816e:	4b03      	ldr	r3, [pc, #12]	; (800817c <RFP_WaitForResponseFunction+0x44>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	2201      	movs	r2, #1
 8008174:	705a      	strb	r2, [r3, #1]
}
 8008176:	bf00      	nop
 8008178:	bd80      	pop	{r7, pc}
 800817a:	bf00      	nop
 800817c:	20003ef8 	.word	0x20003ef8

08008180 <RFP_ParseResponseFunction>:
static void RFP_ParseResponseFunction(void)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b082      	sub	sp, #8
 8008184:	af00      	add	r7, sp, #0
   uint32_t MessageCRC = (((uint32_t)RfpDataRecive[Rfp->DataSize - 4] << 24) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 3] << 16)
 8008186:	4b50      	ldr	r3, [pc, #320]	; (80082c8 <RFP_ParseResponseFunction+0x148>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	3b04      	subs	r3, #4
 800818e:	4a4f      	ldr	r2, [pc, #316]	; (80082cc <RFP_ParseResponseFunction+0x14c>)
 8008190:	5cd3      	ldrb	r3, [r2, r3]
 8008192:	061a      	lsls	r2, r3, #24
 8008194:	4b4c      	ldr	r3, [pc, #304]	; (80082c8 <RFP_ParseResponseFunction+0x148>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	689b      	ldr	r3, [r3, #8]
 800819a:	3b03      	subs	r3, #3
 800819c:	494b      	ldr	r1, [pc, #300]	; (80082cc <RFP_ParseResponseFunction+0x14c>)
 800819e:	5ccb      	ldrb	r3, [r1, r3]
 80081a0:	041b      	lsls	r3, r3, #16
 80081a2:	431a      	orrs	r2, r3
                          | ((uint32_t)RfpDataRecive[Rfp->DataSize - 2] << 8) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 1]));
 80081a4:	4b48      	ldr	r3, [pc, #288]	; (80082c8 <RFP_ParseResponseFunction+0x148>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	689b      	ldr	r3, [r3, #8]
 80081aa:	3b02      	subs	r3, #2
 80081ac:	4947      	ldr	r1, [pc, #284]	; (80082cc <RFP_ParseResponseFunction+0x14c>)
 80081ae:	5ccb      	ldrb	r3, [r1, r3]
 80081b0:	021b      	lsls	r3, r3, #8
 80081b2:	4313      	orrs	r3, r2
 80081b4:	4a44      	ldr	r2, [pc, #272]	; (80082c8 <RFP_ParseResponseFunction+0x148>)
 80081b6:	6812      	ldr	r2, [r2, #0]
 80081b8:	6892      	ldr	r2, [r2, #8]
 80081ba:	3a01      	subs	r2, #1
 80081bc:	4943      	ldr	r1, [pc, #268]	; (80082cc <RFP_ParseResponseFunction+0x14c>)
 80081be:	5c8a      	ldrb	r2, [r1, r2]
   uint32_t MessageCRC = (((uint32_t)RfpDataRecive[Rfp->DataSize - 4] << 24) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 3] << 16)
 80081c0:	4313      	orrs	r3, r2
 80081c2:	607b      	str	r3, [r7, #4]
   if(MessageCRC == Crc(CRC_INITIAL_VALUE, Rfp->DataSize - 4, RfpDataRecive))
 80081c4:	4b40      	ldr	r3, [pc, #256]	; (80082c8 <RFP_ParseResponseFunction+0x148>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	3b04      	subs	r3, #4
 80081cc:	4a3f      	ldr	r2, [pc, #252]	; (80082cc <RFP_ParseResponseFunction+0x14c>)
 80081ce:	4619      	mov	r1, r3
 80081d0:	f04f 30ff 	mov.w	r0, #4294967295
 80081d4:	f7fa fb70 	bl	80028b8 <Crc>
 80081d8:	4602      	mov	r2, r0
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	4293      	cmp	r3, r2
 80081de:	d12d      	bne.n	800823c <RFP_ParseResponseFunction+0xbc>
   {
      if(RfpDataRecive[0] == Rfp->DeviceType && RfpDataRecive[2] == RFP_MESSAGE)
 80081e0:	4b3a      	ldr	r3, [pc, #232]	; (80082cc <RFP_ParseResponseFunction+0x14c>)
 80081e2:	781a      	ldrb	r2, [r3, #0]
 80081e4:	4b38      	ldr	r3, [pc, #224]	; (80082c8 <RFP_ParseResponseFunction+0x148>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	795b      	ldrb	r3, [r3, #5]
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d11d      	bne.n	800822a <RFP_ParseResponseFunction+0xaa>
 80081ee:	4b37      	ldr	r3, [pc, #220]	; (80082cc <RFP_ParseResponseFunction+0x14c>)
 80081f0:	789b      	ldrb	r3, [r3, #2]
 80081f2:	2b03      	cmp	r3, #3
 80081f4:	d119      	bne.n	800822a <RFP_ParseResponseFunction+0xaa>
      {
         if(RfpDataRecive[3] == RFP_OK)
 80081f6:	4b35      	ldr	r3, [pc, #212]	; (80082cc <RFP_ParseResponseFunction+0x14c>)
 80081f8:	78db      	ldrb	r3, [r3, #3]
 80081fa:	2b04      	cmp	r3, #4
 80081fc:	d10c      	bne.n	8008218 <RFP_ParseResponseFunction+0x98>
         {
            Rfp->NewEvent = RFP_EVENT_DATA_OK;
 80081fe:	4b32      	ldr	r3, [pc, #200]	; (80082c8 <RFP_ParseResponseFunction+0x148>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	2204      	movs	r2, #4
 8008204:	705a      	strb	r2, [r3, #1]
            Rfp->Cnt      = 0;
 8008206:	4b30      	ldr	r3, [pc, #192]	; (80082c8 <RFP_ParseResponseFunction+0x148>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	2200      	movs	r2, #0
 800820c:	615a      	str	r2, [r3, #20]
            HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800820e:	2164      	movs	r1, #100	; 0x64
 8008210:	482e      	ldr	r0, [pc, #184]	; (80082cc <RFP_ParseResponseFunction+0x14c>)
 8008212:	f7f9 f9a1 	bl	8001558 <HC12_ReciveToIdleDMA>
         if(RfpDataRecive[3] == RFP_OK)
 8008216:	e053      	b.n	80082c0 <RFP_ParseResponseFunction+0x140>
         }
         else
         {
            Rfp->NewEvent = RFP_EVENT_ERROR;
 8008218:	4b2b      	ldr	r3, [pc, #172]	; (80082c8 <RFP_ParseResponseFunction+0x148>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	2203      	movs	r2, #3
 800821e:	705a      	strb	r2, [r3, #1]
            HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 8008220:	2164      	movs	r1, #100	; 0x64
 8008222:	482a      	ldr	r0, [pc, #168]	; (80082cc <RFP_ParseResponseFunction+0x14c>)
 8008224:	f7f9 f998 	bl	8001558 <HC12_ReciveToIdleDMA>
         if(RfpDataRecive[3] == RFP_OK)
 8008228:	e04a      	b.n	80082c0 <RFP_ParseResponseFunction+0x140>
         }
      }
      else
      {
         Rfp->NewEvent = RFP_EVENT_ERROR;
 800822a:	4b27      	ldr	r3, [pc, #156]	; (80082c8 <RFP_ParseResponseFunction+0x148>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	2203      	movs	r2, #3
 8008230:	705a      	strb	r2, [r3, #1]
         HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 8008232:	2164      	movs	r1, #100	; 0x64
 8008234:	4825      	ldr	r0, [pc, #148]	; (80082cc <RFP_ParseResponseFunction+0x14c>)
 8008236:	f7f9 f98f 	bl	8001558 <HC12_ReciveToIdleDMA>
   else
   {
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
      Rfp->NewEvent = RFP_EVENT_ERROR;
   }
}
 800823a:	e041      	b.n	80082c0 <RFP_ParseResponseFunction+0x140>
   else if(RepareMessage(MessageCRC, RfpDataRecive, Rfp->DataSize) == CRC_OK)
 800823c:	4b22      	ldr	r3, [pc, #136]	; (80082c8 <RFP_ParseResponseFunction+0x148>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	461a      	mov	r2, r3
 8008244:	4921      	ldr	r1, [pc, #132]	; (80082cc <RFP_ParseResponseFunction+0x14c>)
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f7fa fb8e 	bl	8002968 <RepareMessage>
 800824c:	4603      	mov	r3, r0
 800824e:	2b01      	cmp	r3, #1
 8008250:	d12d      	bne.n	80082ae <RFP_ParseResponseFunction+0x12e>
      if(RfpDataRecive[0] == Rfp->DeviceType && RfpDataRecive[2] == RFP_MESSAGE)
 8008252:	4b1e      	ldr	r3, [pc, #120]	; (80082cc <RFP_ParseResponseFunction+0x14c>)
 8008254:	781a      	ldrb	r2, [r3, #0]
 8008256:	4b1c      	ldr	r3, [pc, #112]	; (80082c8 <RFP_ParseResponseFunction+0x148>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	795b      	ldrb	r3, [r3, #5]
 800825c:	429a      	cmp	r2, r3
 800825e:	d11d      	bne.n	800829c <RFP_ParseResponseFunction+0x11c>
 8008260:	4b1a      	ldr	r3, [pc, #104]	; (80082cc <RFP_ParseResponseFunction+0x14c>)
 8008262:	789b      	ldrb	r3, [r3, #2]
 8008264:	2b03      	cmp	r3, #3
 8008266:	d119      	bne.n	800829c <RFP_ParseResponseFunction+0x11c>
         if(RfpDataRecive[3] == RFP_OK)
 8008268:	4b18      	ldr	r3, [pc, #96]	; (80082cc <RFP_ParseResponseFunction+0x14c>)
 800826a:	78db      	ldrb	r3, [r3, #3]
 800826c:	2b04      	cmp	r3, #4
 800826e:	d10c      	bne.n	800828a <RFP_ParseResponseFunction+0x10a>
            Rfp->NewEvent = RFP_EVENT_DATA_OK;
 8008270:	4b15      	ldr	r3, [pc, #84]	; (80082c8 <RFP_ParseResponseFunction+0x148>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	2204      	movs	r2, #4
 8008276:	705a      	strb	r2, [r3, #1]
            Rfp->Cnt      = 0;
 8008278:	4b13      	ldr	r3, [pc, #76]	; (80082c8 <RFP_ParseResponseFunction+0x148>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	2200      	movs	r2, #0
 800827e:	615a      	str	r2, [r3, #20]
            HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 8008280:	2164      	movs	r1, #100	; 0x64
 8008282:	4812      	ldr	r0, [pc, #72]	; (80082cc <RFP_ParseResponseFunction+0x14c>)
 8008284:	f7f9 f968 	bl	8001558 <HC12_ReciveToIdleDMA>
         if(RfpDataRecive[3] == RFP_OK)
 8008288:	e01a      	b.n	80082c0 <RFP_ParseResponseFunction+0x140>
            Rfp->NewEvent = RFP_EVENT_ERROR;
 800828a:	4b0f      	ldr	r3, [pc, #60]	; (80082c8 <RFP_ParseResponseFunction+0x148>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	2203      	movs	r2, #3
 8008290:	705a      	strb	r2, [r3, #1]
            HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 8008292:	2164      	movs	r1, #100	; 0x64
 8008294:	480d      	ldr	r0, [pc, #52]	; (80082cc <RFP_ParseResponseFunction+0x14c>)
 8008296:	f7f9 f95f 	bl	8001558 <HC12_ReciveToIdleDMA>
         if(RfpDataRecive[3] == RFP_OK)
 800829a:	e011      	b.n	80082c0 <RFP_ParseResponseFunction+0x140>
         Rfp->NewEvent = RFP_EVENT_ERROR;
 800829c:	4b0a      	ldr	r3, [pc, #40]	; (80082c8 <RFP_ParseResponseFunction+0x148>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	2203      	movs	r2, #3
 80082a2:	705a      	strb	r2, [r3, #1]
         HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 80082a4:	2164      	movs	r1, #100	; 0x64
 80082a6:	4809      	ldr	r0, [pc, #36]	; (80082cc <RFP_ParseResponseFunction+0x14c>)
 80082a8:	f7f9 f956 	bl	8001558 <HC12_ReciveToIdleDMA>
}
 80082ac:	e008      	b.n	80082c0 <RFP_ParseResponseFunction+0x140>
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 80082ae:	2164      	movs	r1, #100	; 0x64
 80082b0:	4806      	ldr	r0, [pc, #24]	; (80082cc <RFP_ParseResponseFunction+0x14c>)
 80082b2:	f7f9 f951 	bl	8001558 <HC12_ReciveToIdleDMA>
      Rfp->NewEvent = RFP_EVENT_ERROR;
 80082b6:	4b04      	ldr	r3, [pc, #16]	; (80082c8 <RFP_ParseResponseFunction+0x148>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	2203      	movs	r2, #3
 80082bc:	705a      	strb	r2, [r3, #1]
}
 80082be:	e7ff      	b.n	80082c0 <RFP_ParseResponseFunction+0x140>
 80082c0:	bf00      	nop
 80082c2:	3708      	adds	r7, #8
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}
 80082c8:	20003ef8 	.word	0x20003ef8
 80082cc:	20003e30 	.word	0x20003e30

080082d0 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80082d4:	4b07      	ldr	r3, [pc, #28]	; (80082f4 <MX_RNG_Init+0x24>)
 80082d6:	4a08      	ldr	r2, [pc, #32]	; (80082f8 <MX_RNG_Init+0x28>)
 80082d8:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80082da:	4b06      	ldr	r3, [pc, #24]	; (80082f4 <MX_RNG_Init+0x24>)
 80082dc:	2200      	movs	r2, #0
 80082de:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80082e0:	4804      	ldr	r0, [pc, #16]	; (80082f4 <MX_RNG_Init+0x24>)
 80082e2:	f003 fac5 	bl	800b870 <HAL_RNG_Init>
 80082e6:	4603      	mov	r3, r0
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d001      	beq.n	80082f0 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 80082ec:	f7fe f81c 	bl	8006328 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80082f0:	bf00      	nop
 80082f2:	bd80      	pop	{r7, pc}
 80082f4:	20003f2c 	.word	0x20003f2c
 80082f8:	50060800 	.word	0x50060800

080082fc <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b0aa      	sub	sp, #168	; 0xa8
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008304:	f107 0310 	add.w	r3, r7, #16
 8008308:	2298      	movs	r2, #152	; 0x98
 800830a:	2100      	movs	r1, #0
 800830c:	4618      	mov	r0, r3
 800830e:	f00b fdc7 	bl	8013ea0 <memset>
  if(rngHandle->Instance==RNG)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a11      	ldr	r2, [pc, #68]	; (800835c <HAL_RNG_MspInit+0x60>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d11b      	bne.n	8008354 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 800831c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008320:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8008322:	2300      	movs	r3, #0
 8008324:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008328:	f107 0310 	add.w	r3, r7, #16
 800832c:	4618      	mov	r0, r3
 800832e:	f002 fd4b 	bl	800adc8 <HAL_RCCEx_PeriphCLKConfig>
 8008332:	4603      	mov	r3, r0
 8008334:	2b00      	cmp	r3, #0
 8008336:	d001      	beq.n	800833c <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8008338:	f7fd fff6 	bl	8006328 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800833c:	4b08      	ldr	r3, [pc, #32]	; (8008360 <HAL_RNG_MspInit+0x64>)
 800833e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008340:	4a07      	ldr	r2, [pc, #28]	; (8008360 <HAL_RNG_MspInit+0x64>)
 8008342:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008346:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008348:	4b05      	ldr	r3, [pc, #20]	; (8008360 <HAL_RNG_MspInit+0x64>)
 800834a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800834c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008350:	60fb      	str	r3, [r7, #12]
 8008352:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8008354:	bf00      	nop
 8008356:	37a8      	adds	r7, #168	; 0xa8
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}
 800835c:	50060800 	.word	0x50060800
 8008360:	40021000 	.word	0x40021000

08008364 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b086      	sub	sp, #24
 8008368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800836a:	1d3b      	adds	r3, r7, #4
 800836c:	2200      	movs	r2, #0
 800836e:	601a      	str	r2, [r3, #0]
 8008370:	605a      	str	r2, [r3, #4]
 8008372:	609a      	str	r2, [r3, #8]
 8008374:	60da      	str	r2, [r3, #12]
 8008376:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8008378:	2300      	movs	r3, #0
 800837a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800837c:	4b13      	ldr	r3, [pc, #76]	; (80083cc <MX_RTC_Init+0x68>)
 800837e:	4a14      	ldr	r2, [pc, #80]	; (80083d0 <MX_RTC_Init+0x6c>)
 8008380:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8008382:	4b12      	ldr	r3, [pc, #72]	; (80083cc <MX_RTC_Init+0x68>)
 8008384:	2200      	movs	r2, #0
 8008386:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8008388:	4b10      	ldr	r3, [pc, #64]	; (80083cc <MX_RTC_Init+0x68>)
 800838a:	227f      	movs	r2, #127	; 0x7f
 800838c:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 800838e:	4b0f      	ldr	r3, [pc, #60]	; (80083cc <MX_RTC_Init+0x68>)
 8008390:	22ff      	movs	r2, #255	; 0xff
 8008392:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8008394:	4b0d      	ldr	r3, [pc, #52]	; (80083cc <MX_RTC_Init+0x68>)
 8008396:	2200      	movs	r2, #0
 8008398:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800839a:	4b0c      	ldr	r3, [pc, #48]	; (80083cc <MX_RTC_Init+0x68>)
 800839c:	2200      	movs	r2, #0
 800839e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80083a0:	4b0a      	ldr	r3, [pc, #40]	; (80083cc <MX_RTC_Init+0x68>)
 80083a2:	2200      	movs	r2, #0
 80083a4:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80083a6:	4b09      	ldr	r3, [pc, #36]	; (80083cc <MX_RTC_Init+0x68>)
 80083a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80083ac:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 80083ae:	4b07      	ldr	r3, [pc, #28]	; (80083cc <MX_RTC_Init+0x68>)
 80083b0:	2200      	movs	r2, #0
 80083b2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80083b4:	4805      	ldr	r0, [pc, #20]	; (80083cc <MX_RTC_Init+0x68>)
 80083b6:	f003 fb55 	bl	800ba64 <HAL_RTC_Init>
 80083ba:	4603      	mov	r3, r0
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d001      	beq.n	80083c4 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80083c0:	f7fd ffb2 	bl	8006328 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80083c4:	3718      	adds	r7, #24
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
 80083ca:	bf00      	nop
 80083cc:	20003f40 	.word	0x20003f40
 80083d0:	40002800 	.word	0x40002800

080083d4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b0aa      	sub	sp, #168	; 0xa8
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80083dc:	f107 0310 	add.w	r3, r7, #16
 80083e0:	2298      	movs	r2, #152	; 0x98
 80083e2:	2100      	movs	r1, #0
 80083e4:	4618      	mov	r0, r3
 80083e6:	f00b fd5b 	bl	8013ea0 <memset>
  if(rtcHandle->Instance==RTC)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a16      	ldr	r2, [pc, #88]	; (8008448 <HAL_RTC_MspInit+0x74>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d124      	bne.n	800843e <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80083f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80083f8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80083fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80083fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008402:	f107 0310 	add.w	r3, r7, #16
 8008406:	4618      	mov	r0, r3
 8008408:	f002 fcde 	bl	800adc8 <HAL_RCCEx_PeriphCLKConfig>
 800840c:	4603      	mov	r3, r0
 800840e:	2b00      	cmp	r3, #0
 8008410:	d001      	beq.n	8008416 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8008412:	f7fd ff89 	bl	8006328 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8008416:	4b0d      	ldr	r3, [pc, #52]	; (800844c <HAL_RTC_MspInit+0x78>)
 8008418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800841c:	4a0b      	ldr	r2, [pc, #44]	; (800844c <HAL_RTC_MspInit+0x78>)
 800841e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008422:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8008426:	4b09      	ldr	r3, [pc, #36]	; (800844c <HAL_RTC_MspInit+0x78>)
 8008428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800842a:	4a08      	ldr	r2, [pc, #32]	; (800844c <HAL_RTC_MspInit+0x78>)
 800842c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008430:	6593      	str	r3, [r2, #88]	; 0x58
 8008432:	4b06      	ldr	r3, [pc, #24]	; (800844c <HAL_RTC_MspInit+0x78>)
 8008434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008436:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800843a:	60fb      	str	r3, [r7, #12]
 800843c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800843e:	bf00      	nop
 8008440:	37a8      	adds	r7, #168	; 0xa8
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}
 8008446:	bf00      	nop
 8008448:	40002800 	.word	0x40002800
 800844c:	40021000 	.word	0x40021000

08008450 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8008454:	4b1b      	ldr	r3, [pc, #108]	; (80084c4 <MX_SPI1_Init+0x74>)
 8008456:	4a1c      	ldr	r2, [pc, #112]	; (80084c8 <MX_SPI1_Init+0x78>)
 8008458:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800845a:	4b1a      	ldr	r3, [pc, #104]	; (80084c4 <MX_SPI1_Init+0x74>)
 800845c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008460:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8008462:	4b18      	ldr	r3, [pc, #96]	; (80084c4 <MX_SPI1_Init+0x74>)
 8008464:	2200      	movs	r2, #0
 8008466:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8008468:	4b16      	ldr	r3, [pc, #88]	; (80084c4 <MX_SPI1_Init+0x74>)
 800846a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800846e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008470:	4b14      	ldr	r3, [pc, #80]	; (80084c4 <MX_SPI1_Init+0x74>)
 8008472:	2200      	movs	r2, #0
 8008474:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008476:	4b13      	ldr	r3, [pc, #76]	; (80084c4 <MX_SPI1_Init+0x74>)
 8008478:	2200      	movs	r2, #0
 800847a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800847c:	4b11      	ldr	r3, [pc, #68]	; (80084c4 <MX_SPI1_Init+0x74>)
 800847e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008482:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8008484:	4b0f      	ldr	r3, [pc, #60]	; (80084c4 <MX_SPI1_Init+0x74>)
 8008486:	2228      	movs	r2, #40	; 0x28
 8008488:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800848a:	4b0e      	ldr	r3, [pc, #56]	; (80084c4 <MX_SPI1_Init+0x74>)
 800848c:	2200      	movs	r2, #0
 800848e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8008490:	4b0c      	ldr	r3, [pc, #48]	; (80084c4 <MX_SPI1_Init+0x74>)
 8008492:	2200      	movs	r2, #0
 8008494:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008496:	4b0b      	ldr	r3, [pc, #44]	; (80084c4 <MX_SPI1_Init+0x74>)
 8008498:	2200      	movs	r2, #0
 800849a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800849c:	4b09      	ldr	r3, [pc, #36]	; (80084c4 <MX_SPI1_Init+0x74>)
 800849e:	2207      	movs	r2, #7
 80084a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80084a2:	4b08      	ldr	r3, [pc, #32]	; (80084c4 <MX_SPI1_Init+0x74>)
 80084a4:	2200      	movs	r2, #0
 80084a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80084a8:	4b06      	ldr	r3, [pc, #24]	; (80084c4 <MX_SPI1_Init+0x74>)
 80084aa:	2208      	movs	r2, #8
 80084ac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80084ae:	4805      	ldr	r0, [pc, #20]	; (80084c4 <MX_SPI1_Init+0x74>)
 80084b0:	f003 fe14 	bl	800c0dc <HAL_SPI_Init>
 80084b4:	4603      	mov	r3, r0
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d001      	beq.n	80084be <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80084ba:	f7fd ff35 	bl	8006328 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80084be:	bf00      	nop
 80084c0:	bd80      	pop	{r7, pc}
 80084c2:	bf00      	nop
 80084c4:	20003f74 	.word	0x20003f74
 80084c8:	40013000 	.word	0x40013000

080084cc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b08a      	sub	sp, #40	; 0x28
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084d4:	f107 0314 	add.w	r3, r7, #20
 80084d8:	2200      	movs	r2, #0
 80084da:	601a      	str	r2, [r3, #0]
 80084dc:	605a      	str	r2, [r3, #4]
 80084de:	609a      	str	r2, [r3, #8]
 80084e0:	60da      	str	r2, [r3, #12]
 80084e2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a17      	ldr	r2, [pc, #92]	; (8008548 <HAL_SPI_MspInit+0x7c>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d128      	bne.n	8008540 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80084ee:	4b17      	ldr	r3, [pc, #92]	; (800854c <HAL_SPI_MspInit+0x80>)
 80084f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084f2:	4a16      	ldr	r2, [pc, #88]	; (800854c <HAL_SPI_MspInit+0x80>)
 80084f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80084f8:	6613      	str	r3, [r2, #96]	; 0x60
 80084fa:	4b14      	ldr	r3, [pc, #80]	; (800854c <HAL_SPI_MspInit+0x80>)
 80084fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008502:	613b      	str	r3, [r7, #16]
 8008504:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008506:	4b11      	ldr	r3, [pc, #68]	; (800854c <HAL_SPI_MspInit+0x80>)
 8008508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800850a:	4a10      	ldr	r2, [pc, #64]	; (800854c <HAL_SPI_MspInit+0x80>)
 800850c:	f043 0301 	orr.w	r3, r3, #1
 8008510:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008512:	4b0e      	ldr	r3, [pc, #56]	; (800854c <HAL_SPI_MspInit+0x80>)
 8008514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008516:	f003 0301 	and.w	r3, r3, #1
 800851a:	60fb      	str	r3, [r7, #12]
 800851c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800851e:	23e0      	movs	r3, #224	; 0xe0
 8008520:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008522:	2302      	movs	r3, #2
 8008524:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008526:	2300      	movs	r3, #0
 8008528:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800852a:	2303      	movs	r3, #3
 800852c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800852e:	2305      	movs	r3, #5
 8008530:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008532:	f107 0314 	add.w	r3, r7, #20
 8008536:	4619      	mov	r1, r3
 8008538:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800853c:	f001 f9c8 	bl	80098d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8008540:	bf00      	nop
 8008542:	3728      	adds	r7, #40	; 0x28
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}
 8008548:	40013000 	.word	0x40013000
 800854c:	40021000 	.word	0x40021000

08008550 <ssd1306_command>:
#include "main.h"
#include "string.h"
SPI_HandleTypeDef *ssd1306_spi;
static uint8_t buffer[(SSD1306_LCDWIDTH * SSD1306_LCDHEIGHT) / 8];
static void ssd1306_command(uint8_t command)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b082      	sub	sp, #8
 8008554:	af00      	add	r7, sp, #0
 8008556:	4603      	mov	r3, r0
 8008558:	71fb      	strb	r3, [r7, #7]
   HAL_GPIO_WritePin(ssd1306_dc_GPIO_Port, ssd1306_dc_Pin, GPIO_PIN_RESET);
 800855a:	2200      	movs	r2, #0
 800855c:	2101      	movs	r1, #1
 800855e:	480d      	ldr	r0, [pc, #52]	; (8008594 <ssd1306_command+0x44>)
 8008560:	f001 fb60 	bl	8009c24 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(ssd1306_cs_GPIO_Port, ssd1306_cs_Pin, GPIO_PIN_RESET);
 8008564:	2200      	movs	r2, #0
 8008566:	2110      	movs	r1, #16
 8008568:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800856c:	f001 fb5a 	bl	8009c24 <HAL_GPIO_WritePin>
   HAL_SPI_Transmit(ssd1306_spi, &command, 1, 10);
 8008570:	4b09      	ldr	r3, [pc, #36]	; (8008598 <ssd1306_command+0x48>)
 8008572:	6818      	ldr	r0, [r3, #0]
 8008574:	1df9      	adds	r1, r7, #7
 8008576:	230a      	movs	r3, #10
 8008578:	2201      	movs	r2, #1
 800857a:	f003 fe52 	bl	800c222 <HAL_SPI_Transmit>
   HAL_GPIO_WritePin(ssd1306_cs_GPIO_Port, ssd1306_cs_Pin, GPIO_PIN_SET);
 800857e:	2201      	movs	r2, #1
 8008580:	2110      	movs	r1, #16
 8008582:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008586:	f001 fb4d 	bl	8009c24 <HAL_GPIO_WritePin>
}
 800858a:	bf00      	nop
 800858c:	3708      	adds	r7, #8
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
 8008592:	bf00      	nop
 8008594:	48000400 	.word	0x48000400
 8008598:	20003fd8 	.word	0x20003fd8

0800859c <ssd1306_set_pixel>:
//    HAL_GPIO_WritePin(ssd1306_cs_GPIO_Port, ssd1306_cs_Pin, GPIO_PIN_RESET);
//    HAL_SPI_Transmit(ssd1306_spi, &data, 1, 10);
//    HAL_GPIO_WritePin(ssd1306_cs_GPIO_Port, ssd1306_cs_Pin, GPIO_PIN_SET);
// }
void ssd1306_set_pixel(uint8_t x, uint8_t y, uint8_t color)
{
 800859c:	b480      	push	{r7}
 800859e:	b083      	sub	sp, #12
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	4603      	mov	r3, r0
 80085a4:	71fb      	strb	r3, [r7, #7]
 80085a6:	460b      	mov	r3, r1
 80085a8:	71bb      	strb	r3, [r7, #6]
 80085aa:	4613      	mov	r3, r2
 80085ac:	717b      	strb	r3, [r7, #5]
   if((x < 0) || (x >= SSD1306_LCDWIDTH) || (y < 0) || (y >= SSD1306_LCDHEIGHT))
 80085ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	db43      	blt.n	800863e <ssd1306_set_pixel+0xa2>
 80085b6:	79bb      	ldrb	r3, [r7, #6]
 80085b8:	2b3f      	cmp	r3, #63	; 0x3f
 80085ba:	d840      	bhi.n	800863e <ssd1306_set_pixel+0xa2>
   {
      return;
   }
   if(color != 0 && color != 1)
 80085bc:	797b      	ldrb	r3, [r7, #5]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d002      	beq.n	80085c8 <ssd1306_set_pixel+0x2c>
 80085c2:	797b      	ldrb	r3, [r7, #5]
 80085c4:	2b01      	cmp	r3, #1
 80085c6:	d13c      	bne.n	8008642 <ssd1306_set_pixel+0xa6>
   {
      return;
   }
   if(color == 0)
 80085c8:	797b      	ldrb	r3, [r7, #5]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d11c      	bne.n	8008608 <ssd1306_set_pixel+0x6c>
   {
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] &= ~(1 << (y & 7));
 80085ce:	79fa      	ldrb	r2, [r7, #7]
 80085d0:	79bb      	ldrb	r3, [r7, #6]
 80085d2:	08db      	lsrs	r3, r3, #3
 80085d4:	b2d8      	uxtb	r0, r3
 80085d6:	4603      	mov	r3, r0
 80085d8:	01db      	lsls	r3, r3, #7
 80085da:	4413      	add	r3, r2
 80085dc:	4a1c      	ldr	r2, [pc, #112]	; (8008650 <ssd1306_set_pixel+0xb4>)
 80085de:	5cd3      	ldrb	r3, [r2, r3]
 80085e0:	b25a      	sxtb	r2, r3
 80085e2:	79bb      	ldrb	r3, [r7, #6]
 80085e4:	f003 0307 	and.w	r3, r3, #7
 80085e8:	2101      	movs	r1, #1
 80085ea:	fa01 f303 	lsl.w	r3, r1, r3
 80085ee:	b25b      	sxtb	r3, r3
 80085f0:	43db      	mvns	r3, r3
 80085f2:	b25b      	sxtb	r3, r3
 80085f4:	4013      	ands	r3, r2
 80085f6:	b259      	sxtb	r1, r3
 80085f8:	79fa      	ldrb	r2, [r7, #7]
 80085fa:	4603      	mov	r3, r0
 80085fc:	01db      	lsls	r3, r3, #7
 80085fe:	4413      	add	r3, r2
 8008600:	b2c9      	uxtb	r1, r1
 8008602:	4a13      	ldr	r2, [pc, #76]	; (8008650 <ssd1306_set_pixel+0xb4>)
 8008604:	54d1      	strb	r1, [r2, r3]
 8008606:	e01d      	b.n	8008644 <ssd1306_set_pixel+0xa8>
   }
   else
   {
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] |= (1 << (y & 7));
 8008608:	79fa      	ldrb	r2, [r7, #7]
 800860a:	79bb      	ldrb	r3, [r7, #6]
 800860c:	08db      	lsrs	r3, r3, #3
 800860e:	b2d8      	uxtb	r0, r3
 8008610:	4603      	mov	r3, r0
 8008612:	01db      	lsls	r3, r3, #7
 8008614:	4413      	add	r3, r2
 8008616:	4a0e      	ldr	r2, [pc, #56]	; (8008650 <ssd1306_set_pixel+0xb4>)
 8008618:	5cd3      	ldrb	r3, [r2, r3]
 800861a:	b25a      	sxtb	r2, r3
 800861c:	79bb      	ldrb	r3, [r7, #6]
 800861e:	f003 0307 	and.w	r3, r3, #7
 8008622:	2101      	movs	r1, #1
 8008624:	fa01 f303 	lsl.w	r3, r1, r3
 8008628:	b25b      	sxtb	r3, r3
 800862a:	4313      	orrs	r3, r2
 800862c:	b259      	sxtb	r1, r3
 800862e:	79fa      	ldrb	r2, [r7, #7]
 8008630:	4603      	mov	r3, r0
 8008632:	01db      	lsls	r3, r3, #7
 8008634:	4413      	add	r3, r2
 8008636:	b2c9      	uxtb	r1, r1
 8008638:	4a05      	ldr	r2, [pc, #20]	; (8008650 <ssd1306_set_pixel+0xb4>)
 800863a:	54d1      	strb	r1, [r2, r3]
 800863c:	e002      	b.n	8008644 <ssd1306_set_pixel+0xa8>
      return;
 800863e:	bf00      	nop
 8008640:	e000      	b.n	8008644 <ssd1306_set_pixel+0xa8>
      return;
 8008642:	bf00      	nop
   }
}
 8008644:	370c      	adds	r7, #12
 8008646:	46bd      	mov	sp, r7
 8008648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864c:	4770      	bx	lr
 800864e:	bf00      	nop
 8008650:	20003fdc 	.word	0x20003fdc

08008654 <ssd1306_display>:
void ssd1306_display()
{
 8008654:	b580      	push	{r7, lr}
 8008656:	af00      	add	r7, sp, #0
   ssd1306_command(0x22);
 8008658:	2022      	movs	r0, #34	; 0x22
 800865a:	f7ff ff79 	bl	8008550 <ssd1306_command>
   ssd1306_command(0x00);
 800865e:	2000      	movs	r0, #0
 8008660:	f7ff ff76 	bl	8008550 <ssd1306_command>
   ssd1306_command(0x07);
 8008664:	2007      	movs	r0, #7
 8008666:	f7ff ff73 	bl	8008550 <ssd1306_command>
   HAL_GPIO_WritePin(ssd1306_dc_GPIO_Port, ssd1306_dc_Pin, GPIO_PIN_SET);
 800866a:	2201      	movs	r2, #1
 800866c:	2101      	movs	r1, #1
 800866e:	480c      	ldr	r0, [pc, #48]	; (80086a0 <ssd1306_display+0x4c>)
 8008670:	f001 fad8 	bl	8009c24 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(ssd1306_cs_GPIO_Port, ssd1306_cs_Pin, GPIO_PIN_RESET);
 8008674:	2200      	movs	r2, #0
 8008676:	2110      	movs	r1, #16
 8008678:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800867c:	f001 fad2 	bl	8009c24 <HAL_GPIO_WritePin>
   HAL_SPI_Transmit(ssd1306_spi, (uint8_t *)&buffer, (SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH / 8), 100);
 8008680:	4b08      	ldr	r3, [pc, #32]	; (80086a4 <ssd1306_display+0x50>)
 8008682:	6818      	ldr	r0, [r3, #0]
 8008684:	2364      	movs	r3, #100	; 0x64
 8008686:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800868a:	4907      	ldr	r1, [pc, #28]	; (80086a8 <ssd1306_display+0x54>)
 800868c:	f003 fdc9 	bl	800c222 <HAL_SPI_Transmit>
   HAL_GPIO_WritePin(ssd1306_cs_GPIO_Port, ssd1306_cs_Pin, GPIO_PIN_SET);
 8008690:	2201      	movs	r2, #1
 8008692:	2110      	movs	r1, #16
 8008694:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008698:	f001 fac4 	bl	8009c24 <HAL_GPIO_WritePin>
}
 800869c:	bf00      	nop
 800869e:	bd80      	pop	{r7, pc}
 80086a0:	48000400 	.word	0x48000400
 80086a4:	20003fd8 	.word	0x20003fd8
 80086a8:	20003fdc 	.word	0x20003fdc

080086ac <ssd1306_clear>:
void ssd1306_clear()
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	af00      	add	r7, sp, #0
   memset(buffer, 0x00, (SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH / 8));
 80086b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80086b4:	2100      	movs	r1, #0
 80086b6:	4802      	ldr	r0, [pc, #8]	; (80086c0 <ssd1306_clear+0x14>)
 80086b8:	f00b fbf2 	bl	8013ea0 <memset>
}
 80086bc:	bf00      	nop
 80086be:	bd80      	pop	{r7, pc}
 80086c0:	20003fdc 	.word	0x20003fdc

080086c4 <ssd1306_init>:
void ssd1306_init(SPI_HandleTypeDef *spi)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b082      	sub	sp, #8
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
   HAL_GPIO_WritePin(ssd1306_res_GPIO_Port, ssd1306_res_Pin, GPIO_PIN_RESET);
 80086cc:	2200      	movs	r2, #0
 80086ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80086d2:	4833      	ldr	r0, [pc, #204]	; (80087a0 <ssd1306_init+0xdc>)
 80086d4:	f001 faa6 	bl	8009c24 <HAL_GPIO_WritePin>
   HAL_Delay(150);
 80086d8:	2096      	movs	r0, #150	; 0x96
 80086da:	f000 fca9 	bl	8009030 <HAL_Delay>
   HAL_GPIO_WritePin(ssd1306_res_GPIO_Port, ssd1306_res_Pin, GPIO_PIN_SET);
 80086de:	2201      	movs	r2, #1
 80086e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80086e4:	482e      	ldr	r0, [pc, #184]	; (80087a0 <ssd1306_init+0xdc>)
 80086e6:	f001 fa9d 	bl	8009c24 <HAL_GPIO_WritePin>
   HAL_Delay(100);
 80086ea:	2064      	movs	r0, #100	; 0x64
 80086ec:	f000 fca0 	bl	8009030 <HAL_Delay>
   ssd1306_spi = spi;
 80086f0:	4a2c      	ldr	r2, [pc, #176]	; (80087a4 <ssd1306_init+0xe0>)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6013      	str	r3, [r2, #0]
   ssd1306_command(0xAE); // Display Off
 80086f6:	20ae      	movs	r0, #174	; 0xae
 80086f8:	f7ff ff2a 	bl	8008550 <ssd1306_command>

   ssd1306_command(0x00);
 80086fc:	2000      	movs	r0, #0
 80086fe:	f7ff ff27 	bl	8008550 <ssd1306_command>
   ssd1306_command(0x10);
 8008702:	2010      	movs	r0, #16
 8008704:	f7ff ff24 	bl	8008550 <ssd1306_command>
   ssd1306_command(0x40);
 8008708:	2040      	movs	r0, #64	; 0x40
 800870a:	f7ff ff21 	bl	8008550 <ssd1306_command>
   ssd1306_command(0x20); // Set addressing mode
 800870e:	2020      	movs	r0, #32
 8008710:	f7ff ff1e 	bl	8008550 <ssd1306_command>
   ssd1306_command(0x00); // Horizontal Addressing Mode
 8008714:	2000      	movs	r0, #0
 8008716:	f7ff ff1b 	bl	8008550 <ssd1306_command>

   ssd1306_command(0x81); // Set Contrast Control
 800871a:	2081      	movs	r0, #129	; 0x81
 800871c:	f7ff ff18 	bl	8008550 <ssd1306_command>
   ssd1306_command(0xff);
 8008720:	20ff      	movs	r0, #255	; 0xff
 8008722:	f7ff ff15 	bl	8008550 <ssd1306_command>
   ssd1306_command(0xA0 | (0x01 & 1));
 8008726:	20a1      	movs	r0, #161	; 0xa1
 8008728:	f7ff ff12 	bl	8008550 <ssd1306_command>
   ssd1306_command(0xC0 | (0x08 & (1 << 3)));
 800872c:	20c8      	movs	r0, #200	; 0xc8
 800872e:	f7ff ff0f 	bl	8008550 <ssd1306_command>

   ssd1306_command(0xA6); // Set Normal Display
 8008732:	20a6      	movs	r0, #166	; 0xa6
 8008734:	f7ff ff0c 	bl	8008550 <ssd1306_command>

   ssd1306_command(0xA8); // Select Multiplex Ratio
 8008738:	20a8      	movs	r0, #168	; 0xa8
 800873a:	f7ff ff09 	bl	8008550 <ssd1306_command>
   ssd1306_command(0x3F); // Default => 0x3F (1/64 Duty)	0x1F(1/32 Duty)
 800873e:	203f      	movs	r0, #63	; 0x3f
 8008740:	f7ff ff06 	bl	8008550 <ssd1306_command>

   ssd1306_command(0xD3); // Setting Display Offset
 8008744:	20d3      	movs	r0, #211	; 0xd3
 8008746:	f7ff ff03 	bl	8008550 <ssd1306_command>
   ssd1306_command(0x00); // 00H Reset
 800874a:	2000      	movs	r0, #0
 800874c:	f7ff ff00 	bl	8008550 <ssd1306_command>

   ssd1306_command(0xD5); // SET DISPLAY CLOCK
 8008750:	20d5      	movs	r0, #213	; 0xd5
 8008752:	f7ff fefd 	bl	8008550 <ssd1306_command>
   ssd1306_command(0x80); // 105HZ
 8008756:	2080      	movs	r0, #128	; 0x80
 8008758:	f7ff fefa 	bl	8008550 <ssd1306_command>

   ssd1306_command(0xD9); // Set Pre-Charge period
 800875c:	20d9      	movs	r0, #217	; 0xd9
 800875e:	f7ff fef7 	bl	8008550 <ssd1306_command>
   ssd1306_command(0x22);
 8008762:	2022      	movs	r0, #34	; 0x22
 8008764:	f7ff fef4 	bl	8008550 <ssd1306_command>

   ssd1306_command(0xDA); // Set COM Hardware Configuration
 8008768:	20da      	movs	r0, #218	; 0xda
 800876a:	f7ff fef1 	bl	8008550 <ssd1306_command>
   ssd1306_command(0x12); // Alternative COM Pin---See IC Spec page 34
 800876e:	2012      	movs	r0, #18
 8008770:	f7ff feee 	bl	8008550 <ssd1306_command>
                          // (0x02)=> A4=0;Sequential COM pin configuration;A5=0;Disable COM Left/Right remap

   ssd1306_command(0xDB); // Set Deselect Vcomh level
 8008774:	20db      	movs	r0, #219	; 0xdb
 8008776:	f7ff feeb 	bl	8008550 <ssd1306_command>
   ssd1306_command(0x40);
 800877a:	2040      	movs	r0, #64	; 0x40
 800877c:	f7ff fee8 	bl	8008550 <ssd1306_command>

   ssd1306_command(0x8D); // Set Charge Pump
 8008780:	208d      	movs	r0, #141	; 0x8d
 8008782:	f7ff fee5 	bl	8008550 <ssd1306_command>
   // ssd1306_command(0x10);  // Disable Charge Pump
   ssd1306_command(0x14); // Endable Charge Pump
 8008786:	2014      	movs	r0, #20
 8008788:	f7ff fee2 	bl	8008550 <ssd1306_command>

   ssd1306_command(0xA4); // Entire Display ON
 800878c:	20a4      	movs	r0, #164	; 0xa4
 800878e:	f7ff fedf 	bl	8008550 <ssd1306_command>
   ssd1306_command(SSD1306_DISPLAYON);
 8008792:	20af      	movs	r0, #175	; 0xaf
 8008794:	f7ff fedc 	bl	8008550 <ssd1306_command>
}
 8008798:	bf00      	nop
 800879a:	3708      	adds	r7, #8
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}
 80087a0:	48000400 	.word	0x48000400
 80087a4:	20003fd8 	.word	0x20003fd8

080087a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b082      	sub	sp, #8
 80087ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80087ae:	4b11      	ldr	r3, [pc, #68]	; (80087f4 <HAL_MspInit+0x4c>)
 80087b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087b2:	4a10      	ldr	r2, [pc, #64]	; (80087f4 <HAL_MspInit+0x4c>)
 80087b4:	f043 0301 	orr.w	r3, r3, #1
 80087b8:	6613      	str	r3, [r2, #96]	; 0x60
 80087ba:	4b0e      	ldr	r3, [pc, #56]	; (80087f4 <HAL_MspInit+0x4c>)
 80087bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087be:	f003 0301 	and.w	r3, r3, #1
 80087c2:	607b      	str	r3, [r7, #4]
 80087c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80087c6:	4b0b      	ldr	r3, [pc, #44]	; (80087f4 <HAL_MspInit+0x4c>)
 80087c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087ca:	4a0a      	ldr	r2, [pc, #40]	; (80087f4 <HAL_MspInit+0x4c>)
 80087cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087d0:	6593      	str	r3, [r2, #88]	; 0x58
 80087d2:	4b08      	ldr	r3, [pc, #32]	; (80087f4 <HAL_MspInit+0x4c>)
 80087d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087da:	603b      	str	r3, [r7, #0]
 80087dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80087de:	2200      	movs	r2, #0
 80087e0:	210f      	movs	r1, #15
 80087e2:	f06f 0001 	mvn.w	r0, #1
 80087e6:	f000 fd16 	bl	8009216 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80087ea:	bf00      	nop
 80087ec:	3708      	adds	r7, #8
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}
 80087f2:	bf00      	nop
 80087f4:	40021000 	.word	0x40021000

080087f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b08c      	sub	sp, #48	; 0x30
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8008800:	2300      	movs	r3, #0
 8008802:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8008806:	4b2e      	ldr	r3, [pc, #184]	; (80088c0 <HAL_InitTick+0xc8>)
 8008808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800880a:	4a2d      	ldr	r2, [pc, #180]	; (80088c0 <HAL_InitTick+0xc8>)
 800880c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008810:	6613      	str	r3, [r2, #96]	; 0x60
 8008812:	4b2b      	ldr	r3, [pc, #172]	; (80088c0 <HAL_InitTick+0xc8>)
 8008814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008816:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800881a:	60bb      	str	r3, [r7, #8]
 800881c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800881e:	f107 020c 	add.w	r2, r7, #12
 8008822:	f107 0310 	add.w	r3, r7, #16
 8008826:	4611      	mov	r1, r2
 8008828:	4618      	mov	r0, r3
 800882a:	f002 f9db 	bl	800abe4 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800882e:	f002 f9c3 	bl	800abb8 <HAL_RCC_GetPCLK2Freq>
 8008832:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8008834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008836:	4a23      	ldr	r2, [pc, #140]	; (80088c4 <HAL_InitTick+0xcc>)
 8008838:	fba2 2303 	umull	r2, r3, r2, r3
 800883c:	0c9b      	lsrs	r3, r3, #18
 800883e:	3b01      	subs	r3, #1
 8008840:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8008842:	4b21      	ldr	r3, [pc, #132]	; (80088c8 <HAL_InitTick+0xd0>)
 8008844:	4a21      	ldr	r2, [pc, #132]	; (80088cc <HAL_InitTick+0xd4>)
 8008846:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8008848:	4b1f      	ldr	r3, [pc, #124]	; (80088c8 <HAL_InitTick+0xd0>)
 800884a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800884e:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8008850:	4a1d      	ldr	r2, [pc, #116]	; (80088c8 <HAL_InitTick+0xd0>)
 8008852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008854:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8008856:	4b1c      	ldr	r3, [pc, #112]	; (80088c8 <HAL_InitTick+0xd0>)
 8008858:	2200      	movs	r2, #0
 800885a:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800885c:	4b1a      	ldr	r3, [pc, #104]	; (80088c8 <HAL_InitTick+0xd0>)
 800885e:	2200      	movs	r2, #0
 8008860:	609a      	str	r2, [r3, #8]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008862:	4b19      	ldr	r3, [pc, #100]	; (80088c8 <HAL_InitTick+0xd0>)
 8008864:	2200      	movs	r2, #0
 8008866:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim17);
 8008868:	4817      	ldr	r0, [pc, #92]	; (80088c8 <HAL_InitTick+0xd0>)
 800886a:	f004 fb47 	bl	800cefc <HAL_TIM_Base_Init>
 800886e:	4603      	mov	r3, r0
 8008870:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8008874:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008878:	2b00      	cmp	r3, #0
 800887a:	d11b      	bne.n	80088b4 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 800887c:	4812      	ldr	r0, [pc, #72]	; (80088c8 <HAL_InitTick+0xd0>)
 800887e:	f004 fb95 	bl	800cfac <HAL_TIM_Base_Start_IT>
 8008882:	4603      	mov	r3, r0
 8008884:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8008888:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800888c:	2b00      	cmp	r3, #0
 800888e:	d111      	bne.n	80088b4 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8008890:	201a      	movs	r0, #26
 8008892:	f000 fcdc 	bl	800924e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2b0f      	cmp	r3, #15
 800889a:	d808      	bhi.n	80088ae <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority, 0U);
 800889c:	2200      	movs	r2, #0
 800889e:	6879      	ldr	r1, [r7, #4]
 80088a0:	201a      	movs	r0, #26
 80088a2:	f000 fcb8 	bl	8009216 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80088a6:	4a0a      	ldr	r2, [pc, #40]	; (80088d0 <HAL_InitTick+0xd8>)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6013      	str	r3, [r2, #0]
 80088ac:	e002      	b.n	80088b4 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 80088ae:	2301      	movs	r3, #1
 80088b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80088b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3730      	adds	r7, #48	; 0x30
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}
 80088c0:	40021000 	.word	0x40021000
 80088c4:	431bde83 	.word	0x431bde83
 80088c8:	200043dc 	.word	0x200043dc
 80088cc:	40014800 	.word	0x40014800
 80088d0:	20000098 	.word	0x20000098

080088d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80088d4:	b480      	push	{r7}
 80088d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80088d8:	e7fe      	b.n	80088d8 <NMI_Handler+0x4>

080088da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80088da:	b480      	push	{r7}
 80088dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80088de:	e7fe      	b.n	80088de <HardFault_Handler+0x4>

080088e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80088e0:	b480      	push	{r7}
 80088e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80088e4:	e7fe      	b.n	80088e4 <MemManage_Handler+0x4>

080088e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80088e6:	b480      	push	{r7}
 80088e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80088ea:	e7fe      	b.n	80088ea <BusFault_Handler+0x4>

080088ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80088ec:	b480      	push	{r7}
 80088ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80088f0:	e7fe      	b.n	80088f0 <UsageFault_Handler+0x4>

080088f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80088f2:	b480      	push	{r7}
 80088f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80088f6:	bf00      	nop
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr

08008900 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8008904:	4802      	ldr	r0, [pc, #8]	; (8008910 <DMA1_Channel1_IRQHandler+0x10>)
 8008906:	f000 fe93 	bl	8009630 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800890a:	bf00      	nop
 800890c:	bd80      	pop	{r7, pc}
 800890e:	bf00      	nop
 8008910:	20004554 	.word	0x20004554

08008914 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8008918:	4802      	ldr	r0, [pc, #8]	; (8008924 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800891a:	f004 fd4c 	bl	800d3b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800891e:	bf00      	nop
 8008920:	bd80      	pop	{r7, pc}
 8008922:	bf00      	nop
 8008924:	200043dc 	.word	0x200043dc

08008928 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800892c:	4802      	ldr	r0, [pc, #8]	; (8008938 <USART1_IRQHandler+0x10>)
 800892e:	f005 fe23 	bl	800e578 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008932:	bf00      	nop
 8008934:	bd80      	pop	{r7, pc}
 8008936:	bf00      	nop
 8008938:	200044c4 	.word	0x200044c4

0800893c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800893c:	b480      	push	{r7}
 800893e:	af00      	add	r7, sp, #0
  return 1;
 8008940:	2301      	movs	r3, #1
}
 8008942:	4618      	mov	r0, r3
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr

0800894c <_kill>:

int _kill(int pid, int sig)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b082      	sub	sp, #8
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8008956:	f00b fa6b 	bl	8013e30 <__errno>
 800895a:	4603      	mov	r3, r0
 800895c:	2216      	movs	r2, #22
 800895e:	601a      	str	r2, [r3, #0]
  return -1;
 8008960:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008964:	4618      	mov	r0, r3
 8008966:	3708      	adds	r7, #8
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <_exit>:

void _exit (int status)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b082      	sub	sp, #8
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8008974:	f04f 31ff 	mov.w	r1, #4294967295
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f7ff ffe7 	bl	800894c <_kill>
  while (1) {}    /* Make sure we hang here */
 800897e:	e7fe      	b.n	800897e <_exit+0x12>

08008980 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b086      	sub	sp, #24
 8008984:	af00      	add	r7, sp, #0
 8008986:	60f8      	str	r0, [r7, #12]
 8008988:	60b9      	str	r1, [r7, #8]
 800898a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800898c:	2300      	movs	r3, #0
 800898e:	617b      	str	r3, [r7, #20]
 8008990:	e00a      	b.n	80089a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008992:	f3af 8000 	nop.w
 8008996:	4601      	mov	r1, r0
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	1c5a      	adds	r2, r3, #1
 800899c:	60ba      	str	r2, [r7, #8]
 800899e:	b2ca      	uxtb	r2, r1
 80089a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	3301      	adds	r3, #1
 80089a6:	617b      	str	r3, [r7, #20]
 80089a8:	697a      	ldr	r2, [r7, #20]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	429a      	cmp	r2, r3
 80089ae:	dbf0      	blt.n	8008992 <_read+0x12>
  }

  return len;
 80089b0:	687b      	ldr	r3, [r7, #4]
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3718      	adds	r7, #24
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}

080089ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80089ba:	b580      	push	{r7, lr}
 80089bc:	b086      	sub	sp, #24
 80089be:	af00      	add	r7, sp, #0
 80089c0:	60f8      	str	r0, [r7, #12]
 80089c2:	60b9      	str	r1, [r7, #8]
 80089c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80089c6:	2300      	movs	r3, #0
 80089c8:	617b      	str	r3, [r7, #20]
 80089ca:	e009      	b.n	80089e0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	1c5a      	adds	r2, r3, #1
 80089d0:	60ba      	str	r2, [r7, #8]
 80089d2:	781b      	ldrb	r3, [r3, #0]
 80089d4:	4618      	mov	r0, r3
 80089d6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	3301      	adds	r3, #1
 80089de:	617b      	str	r3, [r7, #20]
 80089e0:	697a      	ldr	r2, [r7, #20]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	429a      	cmp	r2, r3
 80089e6:	dbf1      	blt.n	80089cc <_write+0x12>
  }
  return len;
 80089e8:	687b      	ldr	r3, [r7, #4]
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3718      	adds	r7, #24
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}

080089f2 <_close>:

int _close(int file)
{
 80089f2:	b480      	push	{r7}
 80089f4:	b083      	sub	sp, #12
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80089fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	370c      	adds	r7, #12
 8008a02:	46bd      	mov	sp, r7
 8008a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a08:	4770      	bx	lr

08008a0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008a0a:	b480      	push	{r7}
 8008a0c:	b083      	sub	sp, #12
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	6078      	str	r0, [r7, #4]
 8008a12:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008a1a:	605a      	str	r2, [r3, #4]
  return 0;
 8008a1c:	2300      	movs	r3, #0
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	370c      	adds	r7, #12
 8008a22:	46bd      	mov	sp, r7
 8008a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a28:	4770      	bx	lr

08008a2a <_isatty>:

int _isatty(int file)
{
 8008a2a:	b480      	push	{r7}
 8008a2c:	b083      	sub	sp, #12
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8008a32:	2301      	movs	r3, #1
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	370c      	adds	r7, #12
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr

08008a40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b085      	sub	sp, #20
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	60f8      	str	r0, [r7, #12]
 8008a48:	60b9      	str	r1, [r7, #8]
 8008a4a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8008a4c:	2300      	movs	r3, #0
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3714      	adds	r7, #20
 8008a52:	46bd      	mov	sp, r7
 8008a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a58:	4770      	bx	lr
	...

08008a5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b086      	sub	sp, #24
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008a64:	4a14      	ldr	r2, [pc, #80]	; (8008ab8 <_sbrk+0x5c>)
 8008a66:	4b15      	ldr	r3, [pc, #84]	; (8008abc <_sbrk+0x60>)
 8008a68:	1ad3      	subs	r3, r2, r3
 8008a6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008a6c:	697b      	ldr	r3, [r7, #20]
 8008a6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008a70:	4b13      	ldr	r3, [pc, #76]	; (8008ac0 <_sbrk+0x64>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d102      	bne.n	8008a7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008a78:	4b11      	ldr	r3, [pc, #68]	; (8008ac0 <_sbrk+0x64>)
 8008a7a:	4a12      	ldr	r2, [pc, #72]	; (8008ac4 <_sbrk+0x68>)
 8008a7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008a7e:	4b10      	ldr	r3, [pc, #64]	; (8008ac0 <_sbrk+0x64>)
 8008a80:	681a      	ldr	r2, [r3, #0]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	4413      	add	r3, r2
 8008a86:	693a      	ldr	r2, [r7, #16]
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	d207      	bcs.n	8008a9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008a8c:	f00b f9d0 	bl	8013e30 <__errno>
 8008a90:	4603      	mov	r3, r0
 8008a92:	220c      	movs	r2, #12
 8008a94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008a96:	f04f 33ff 	mov.w	r3, #4294967295
 8008a9a:	e009      	b.n	8008ab0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008a9c:	4b08      	ldr	r3, [pc, #32]	; (8008ac0 <_sbrk+0x64>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008aa2:	4b07      	ldr	r3, [pc, #28]	; (8008ac0 <_sbrk+0x64>)
 8008aa4:	681a      	ldr	r2, [r3, #0]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	4413      	add	r3, r2
 8008aaa:	4a05      	ldr	r2, [pc, #20]	; (8008ac0 <_sbrk+0x64>)
 8008aac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008aae:	68fb      	ldr	r3, [r7, #12]
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3718      	adds	r7, #24
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}
 8008ab8:	20050000 	.word	0x20050000
 8008abc:	00000c00 	.word	0x00000c00
 8008ac0:	20004428 	.word	0x20004428
 8008ac4:	20019b18 	.word	0x20019b18

08008ac8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	af00      	add	r7, sp, #0
#if defined(USER_VECT_TAB_ADDRESS)
  /* Configure the Vector Table location -------------------------------------*/
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
 8008acc:	4b08      	ldr	r3, [pc, #32]	; (8008af0 <SystemInit+0x28>)
 8008ace:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008ad2:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8008ad4:	4b06      	ldr	r3, [pc, #24]	; (8008af0 <SystemInit+0x28>)
 8008ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ada:	4a05      	ldr	r2, [pc, #20]	; (8008af0 <SystemInit+0x28>)
 8008adc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008ae0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8008ae4:	bf00      	nop
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aec:	4770      	bx	lr
 8008aee:	bf00      	nop
 8008af0:	e000ed00 	.word	0xe000ed00

08008af4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b08e      	sub	sp, #56	; 0x38
 8008af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008afa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008afe:	2200      	movs	r2, #0
 8008b00:	601a      	str	r2, [r3, #0]
 8008b02:	605a      	str	r2, [r3, #4]
 8008b04:	609a      	str	r2, [r3, #8]
 8008b06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008b08:	f107 031c 	add.w	r3, r7, #28
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	601a      	str	r2, [r3, #0]
 8008b10:	605a      	str	r2, [r3, #4]
 8008b12:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008b14:	463b      	mov	r3, r7
 8008b16:	2200      	movs	r2, #0
 8008b18:	601a      	str	r2, [r3, #0]
 8008b1a:	605a      	str	r2, [r3, #4]
 8008b1c:	609a      	str	r2, [r3, #8]
 8008b1e:	60da      	str	r2, [r3, #12]
 8008b20:	611a      	str	r2, [r3, #16]
 8008b22:	615a      	str	r2, [r3, #20]
 8008b24:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8008b26:	4b2d      	ldr	r3, [pc, #180]	; (8008bdc <MX_TIM2_Init+0xe8>)
 8008b28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008b2c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8008b2e:	4b2b      	ldr	r3, [pc, #172]	; (8008bdc <MX_TIM2_Init+0xe8>)
 8008b30:	2200      	movs	r2, #0
 8008b32:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008b34:	4b29      	ldr	r3, [pc, #164]	; (8008bdc <MX_TIM2_Init+0xe8>)
 8008b36:	2200      	movs	r2, #0
 8008b38:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8008b3a:	4b28      	ldr	r3, [pc, #160]	; (8008bdc <MX_TIM2_Init+0xe8>)
 8008b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8008b40:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008b42:	4b26      	ldr	r3, [pc, #152]	; (8008bdc <MX_TIM2_Init+0xe8>)
 8008b44:	2200      	movs	r2, #0
 8008b46:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008b48:	4b24      	ldr	r3, [pc, #144]	; (8008bdc <MX_TIM2_Init+0xe8>)
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8008b4e:	4823      	ldr	r0, [pc, #140]	; (8008bdc <MX_TIM2_Init+0xe8>)
 8008b50:	f004 f9d4 	bl	800cefc <HAL_TIM_Base_Init>
 8008b54:	4603      	mov	r3, r0
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d001      	beq.n	8008b5e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8008b5a:	f7fd fbe5 	bl	8006328 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008b5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b62:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8008b64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008b68:	4619      	mov	r1, r3
 8008b6a:	481c      	ldr	r0, [pc, #112]	; (8008bdc <MX_TIM2_Init+0xe8>)
 8008b6c:	f004 fe56 	bl	800d81c <HAL_TIM_ConfigClockSource>
 8008b70:	4603      	mov	r3, r0
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d001      	beq.n	8008b7a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8008b76:	f7fd fbd7 	bl	8006328 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8008b7a:	4818      	ldr	r0, [pc, #96]	; (8008bdc <MX_TIM2_Init+0xe8>)
 8008b7c:	f004 fa86 	bl	800d08c <HAL_TIM_PWM_Init>
 8008b80:	4603      	mov	r3, r0
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d001      	beq.n	8008b8a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8008b86:	f7fd fbcf 	bl	8006328 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008b92:	f107 031c 	add.w	r3, r7, #28
 8008b96:	4619      	mov	r1, r3
 8008b98:	4810      	ldr	r0, [pc, #64]	; (8008bdc <MX_TIM2_Init+0xe8>)
 8008b9a:	f005 fb61 	bl	800e260 <HAL_TIMEx_MasterConfigSynchronization>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d001      	beq.n	8008ba8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8008ba4:	f7fd fbc0 	bl	8006328 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008ba8:	2360      	movs	r3, #96	; 0x60
 8008baa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8008bac:	2300      	movs	r3, #0
 8008bae:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008bb8:	463b      	mov	r3, r7
 8008bba:	2200      	movs	r2, #0
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	4807      	ldr	r0, [pc, #28]	; (8008bdc <MX_TIM2_Init+0xe8>)
 8008bc0:	f004 fd18 	bl	800d5f4 <HAL_TIM_PWM_ConfigChannel>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d001      	beq.n	8008bce <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8008bca:	f7fd fbad 	bl	8006328 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8008bce:	4803      	ldr	r0, [pc, #12]	; (8008bdc <MX_TIM2_Init+0xe8>)
 8008bd0:	f000 f8bc 	bl	8008d4c <HAL_TIM_MspPostInit>

}
 8008bd4:	bf00      	nop
 8008bd6:	3738      	adds	r7, #56	; 0x38
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}
 8008bdc:	2000442c 	.word	0x2000442c

08008be0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b08c      	sub	sp, #48	; 0x30
 8008be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8008be6:	f107 030c 	add.w	r3, r7, #12
 8008bea:	2224      	movs	r2, #36	; 0x24
 8008bec:	2100      	movs	r1, #0
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f00b f956 	bl	8013ea0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008bf4:	463b      	mov	r3, r7
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	601a      	str	r2, [r3, #0]
 8008bfa:	605a      	str	r2, [r3, #4]
 8008bfc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8008bfe:	4b21      	ldr	r3, [pc, #132]	; (8008c84 <MX_TIM5_Init+0xa4>)
 8008c00:	4a21      	ldr	r2, [pc, #132]	; (8008c88 <MX_TIM5_Init+0xa8>)
 8008c02:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8008c04:	4b1f      	ldr	r3, [pc, #124]	; (8008c84 <MX_TIM5_Init+0xa4>)
 8008c06:	2200      	movs	r2, #0
 8008c08:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008c0a:	4b1e      	ldr	r3, [pc, #120]	; (8008c84 <MX_TIM5_Init+0xa4>)
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8008c10:	4b1c      	ldr	r3, [pc, #112]	; (8008c84 <MX_TIM5_Init+0xa4>)
 8008c12:	f04f 32ff 	mov.w	r2, #4294967295
 8008c16:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008c18:	4b1a      	ldr	r3, [pc, #104]	; (8008c84 <MX_TIM5_Init+0xa4>)
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008c1e:	4b19      	ldr	r3, [pc, #100]	; (8008c84 <MX_TIM5_Init+0xa4>)
 8008c20:	2200      	movs	r2, #0
 8008c22:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8008c24:	2303      	movs	r3, #3
 8008c26:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8008c30:	2300      	movs	r3, #0
 8008c32:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8008c34:	230f      	movs	r3, #15
 8008c36:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8008c40:	2300      	movs	r3, #0
 8008c42:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8008c44:	230f      	movs	r3, #15
 8008c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8008c48:	f107 030c 	add.w	r3, r7, #12
 8008c4c:	4619      	mov	r1, r3
 8008c4e:	480d      	ldr	r0, [pc, #52]	; (8008c84 <MX_TIM5_Init+0xa4>)
 8008c50:	f004 fa7d 	bl	800d14e <HAL_TIM_Encoder_Init>
 8008c54:	4603      	mov	r3, r0
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d001      	beq.n	8008c5e <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8008c5a:	f7fd fb65 	bl	8006328 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008c62:	2300      	movs	r3, #0
 8008c64:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8008c66:	463b      	mov	r3, r7
 8008c68:	4619      	mov	r1, r3
 8008c6a:	4806      	ldr	r0, [pc, #24]	; (8008c84 <MX_TIM5_Init+0xa4>)
 8008c6c:	f005 faf8 	bl	800e260 <HAL_TIMEx_MasterConfigSynchronization>
 8008c70:	4603      	mov	r3, r0
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d001      	beq.n	8008c7a <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8008c76:	f7fd fb57 	bl	8006328 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8008c7a:	bf00      	nop
 8008c7c:	3730      	adds	r7, #48	; 0x30
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}
 8008c82:	bf00      	nop
 8008c84:	20004478 	.word	0x20004478
 8008c88:	40000c00 	.word	0x40000c00

08008c8c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b085      	sub	sp, #20
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c9c:	d10b      	bne.n	8008cb6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008c9e:	4b09      	ldr	r3, [pc, #36]	; (8008cc4 <HAL_TIM_Base_MspInit+0x38>)
 8008ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ca2:	4a08      	ldr	r2, [pc, #32]	; (8008cc4 <HAL_TIM_Base_MspInit+0x38>)
 8008ca4:	f043 0301 	orr.w	r3, r3, #1
 8008ca8:	6593      	str	r3, [r2, #88]	; 0x58
 8008caa:	4b06      	ldr	r3, [pc, #24]	; (8008cc4 <HAL_TIM_Base_MspInit+0x38>)
 8008cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cae:	f003 0301 	and.w	r3, r3, #1
 8008cb2:	60fb      	str	r3, [r7, #12]
 8008cb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8008cb6:	bf00      	nop
 8008cb8:	3714      	adds	r7, #20
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc0:	4770      	bx	lr
 8008cc2:	bf00      	nop
 8008cc4:	40021000 	.word	0x40021000

08008cc8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b08a      	sub	sp, #40	; 0x28
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008cd0:	f107 0314 	add.w	r3, r7, #20
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	601a      	str	r2, [r3, #0]
 8008cd8:	605a      	str	r2, [r3, #4]
 8008cda:	609a      	str	r2, [r3, #8]
 8008cdc:	60da      	str	r2, [r3, #12]
 8008cde:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM5)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4a17      	ldr	r2, [pc, #92]	; (8008d44 <HAL_TIM_Encoder_MspInit+0x7c>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d128      	bne.n	8008d3c <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8008cea:	4b17      	ldr	r3, [pc, #92]	; (8008d48 <HAL_TIM_Encoder_MspInit+0x80>)
 8008cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cee:	4a16      	ldr	r2, [pc, #88]	; (8008d48 <HAL_TIM_Encoder_MspInit+0x80>)
 8008cf0:	f043 0308 	orr.w	r3, r3, #8
 8008cf4:	6593      	str	r3, [r2, #88]	; 0x58
 8008cf6:	4b14      	ldr	r3, [pc, #80]	; (8008d48 <HAL_TIM_Encoder_MspInit+0x80>)
 8008cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cfa:	f003 0308 	and.w	r3, r3, #8
 8008cfe:	613b      	str	r3, [r7, #16]
 8008d00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d02:	4b11      	ldr	r3, [pc, #68]	; (8008d48 <HAL_TIM_Encoder_MspInit+0x80>)
 8008d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d06:	4a10      	ldr	r2, [pc, #64]	; (8008d48 <HAL_TIM_Encoder_MspInit+0x80>)
 8008d08:	f043 0301 	orr.w	r3, r3, #1
 8008d0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008d0e:	4b0e      	ldr	r3, [pc, #56]	; (8008d48 <HAL_TIM_Encoder_MspInit+0x80>)
 8008d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d12:	f003 0301 	and.w	r3, r3, #1
 8008d16:	60fb      	str	r3, [r7, #12]
 8008d18:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8008d1a:	2303      	movs	r3, #3
 8008d1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d1e:	2302      	movs	r3, #2
 8008d20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d22:	2300      	movs	r3, #0
 8008d24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d26:	2300      	movs	r3, #0
 8008d28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8008d2a:	2302      	movs	r3, #2
 8008d2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d2e:	f107 0314 	add.w	r3, r7, #20
 8008d32:	4619      	mov	r1, r3
 8008d34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008d38:	f000 fdca 	bl	80098d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8008d3c:	bf00      	nop
 8008d3e:	3728      	adds	r7, #40	; 0x28
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}
 8008d44:	40000c00 	.word	0x40000c00
 8008d48:	40021000 	.word	0x40021000

08008d4c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b088      	sub	sp, #32
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d54:	f107 030c 	add.w	r3, r7, #12
 8008d58:	2200      	movs	r2, #0
 8008d5a:	601a      	str	r2, [r3, #0]
 8008d5c:	605a      	str	r2, [r3, #4]
 8008d5e:	609a      	str	r2, [r3, #8]
 8008d60:	60da      	str	r2, [r3, #12]
 8008d62:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d6c:	d11d      	bne.n	8008daa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d6e:	4b11      	ldr	r3, [pc, #68]	; (8008db4 <HAL_TIM_MspPostInit+0x68>)
 8008d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d72:	4a10      	ldr	r2, [pc, #64]	; (8008db4 <HAL_TIM_MspPostInit+0x68>)
 8008d74:	f043 0301 	orr.w	r3, r3, #1
 8008d78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008d7a:	4b0e      	ldr	r3, [pc, #56]	; (8008db4 <HAL_TIM_MspPostInit+0x68>)
 8008d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d7e:	f003 0301 	and.w	r3, r3, #1
 8008d82:	60bb      	str	r3, [r7, #8]
 8008d84:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8008d86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d8a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d8c:	2302      	movs	r3, #2
 8008d8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d90:	2300      	movs	r3, #0
 8008d92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d94:	2300      	movs	r3, #0
 8008d96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8008d98:	2301      	movs	r3, #1
 8008d9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d9c:	f107 030c 	add.w	r3, r7, #12
 8008da0:	4619      	mov	r1, r3
 8008da2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008da6:	f000 fd93 	bl	80098d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8008daa:	bf00      	nop
 8008dac:	3720      	adds	r7, #32
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}
 8008db2:	bf00      	nop
 8008db4:	40021000 	.word	0x40021000

08008db8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008dbc:	4b24      	ldr	r3, [pc, #144]	; (8008e50 <MX_USART1_UART_Init+0x98>)
 8008dbe:	4a25      	ldr	r2, [pc, #148]	; (8008e54 <MX_USART1_UART_Init+0x9c>)
 8008dc0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2400;
 8008dc2:	4b23      	ldr	r3, [pc, #140]	; (8008e50 <MX_USART1_UART_Init+0x98>)
 8008dc4:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8008dc8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008dca:	4b21      	ldr	r3, [pc, #132]	; (8008e50 <MX_USART1_UART_Init+0x98>)
 8008dcc:	2200      	movs	r2, #0
 8008dce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008dd0:	4b1f      	ldr	r3, [pc, #124]	; (8008e50 <MX_USART1_UART_Init+0x98>)
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008dd6:	4b1e      	ldr	r3, [pc, #120]	; (8008e50 <MX_USART1_UART_Init+0x98>)
 8008dd8:	2200      	movs	r2, #0
 8008dda:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008ddc:	4b1c      	ldr	r3, [pc, #112]	; (8008e50 <MX_USART1_UART_Init+0x98>)
 8008dde:	220c      	movs	r2, #12
 8008de0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008de2:	4b1b      	ldr	r3, [pc, #108]	; (8008e50 <MX_USART1_UART_Init+0x98>)
 8008de4:	2200      	movs	r2, #0
 8008de6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008de8:	4b19      	ldr	r3, [pc, #100]	; (8008e50 <MX_USART1_UART_Init+0x98>)
 8008dea:	2200      	movs	r2, #0
 8008dec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008dee:	4b18      	ldr	r3, [pc, #96]	; (8008e50 <MX_USART1_UART_Init+0x98>)
 8008df0:	2200      	movs	r2, #0
 8008df2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008df4:	4b16      	ldr	r3, [pc, #88]	; (8008e50 <MX_USART1_UART_Init+0x98>)
 8008df6:	2200      	movs	r2, #0
 8008df8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8008dfa:	4b15      	ldr	r3, [pc, #84]	; (8008e50 <MX_USART1_UART_Init+0x98>)
 8008dfc:	2210      	movs	r2, #16
 8008dfe:	629a      	str	r2, [r3, #40]	; 0x28
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8008e00:	4b13      	ldr	r3, [pc, #76]	; (8008e50 <MX_USART1_UART_Init+0x98>)
 8008e02:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008e06:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008e08:	4811      	ldr	r0, [pc, #68]	; (8008e50 <MX_USART1_UART_Init+0x98>)
 8008e0a:	f005 facf 	bl	800e3ac <HAL_UART_Init>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d001      	beq.n	8008e18 <MX_USART1_UART_Init+0x60>
  {
    Error_Handler();
 8008e14:	f7fd fa88 	bl	8006328 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008e18:	2100      	movs	r1, #0
 8008e1a:	480d      	ldr	r0, [pc, #52]	; (8008e50 <MX_USART1_UART_Init+0x98>)
 8008e1c:	f006 fe74 	bl	800fb08 <HAL_UARTEx_SetTxFifoThreshold>
 8008e20:	4603      	mov	r3, r0
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d001      	beq.n	8008e2a <MX_USART1_UART_Init+0x72>
  {
    Error_Handler();
 8008e26:	f7fd fa7f 	bl	8006328 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008e2a:	2100      	movs	r1, #0
 8008e2c:	4808      	ldr	r0, [pc, #32]	; (8008e50 <MX_USART1_UART_Init+0x98>)
 8008e2e:	f006 fea9 	bl	800fb84 <HAL_UARTEx_SetRxFifoThreshold>
 8008e32:	4603      	mov	r3, r0
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d001      	beq.n	8008e3c <MX_USART1_UART_Init+0x84>
  {
    Error_Handler();
 8008e38:	f7fd fa76 	bl	8006328 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8008e3c:	4804      	ldr	r0, [pc, #16]	; (8008e50 <MX_USART1_UART_Init+0x98>)
 8008e3e:	f006 fe2a 	bl	800fa96 <HAL_UARTEx_DisableFifoMode>
 8008e42:	4603      	mov	r3, r0
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d001      	beq.n	8008e4c <MX_USART1_UART_Init+0x94>
  {
    Error_Handler();
 8008e48:	f7fd fa6e 	bl	8006328 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008e4c:	bf00      	nop
 8008e4e:	bd80      	pop	{r7, pc}
 8008e50:	200044c4 	.word	0x200044c4
 8008e54:	40013800 	.word	0x40013800

08008e58 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b0b0      	sub	sp, #192	; 0xc0
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e60:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8008e64:	2200      	movs	r2, #0
 8008e66:	601a      	str	r2, [r3, #0]
 8008e68:	605a      	str	r2, [r3, #4]
 8008e6a:	609a      	str	r2, [r3, #8]
 8008e6c:	60da      	str	r2, [r3, #12]
 8008e6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008e70:	f107 0314 	add.w	r3, r7, #20
 8008e74:	2298      	movs	r2, #152	; 0x98
 8008e76:	2100      	movs	r1, #0
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f00b f811 	bl	8013ea0 <memset>
  if(uartHandle->Instance==USART1)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4a36      	ldr	r2, [pc, #216]	; (8008f5c <HAL_UART_MspInit+0x104>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d165      	bne.n	8008f54 <HAL_UART_MspInit+0xfc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8008e88:	2301      	movs	r3, #1
 8008e8a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008e90:	f107 0314 	add.w	r3, r7, #20
 8008e94:	4618      	mov	r0, r3
 8008e96:	f001 ff97 	bl	800adc8 <HAL_RCCEx_PeriphCLKConfig>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d001      	beq.n	8008ea4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8008ea0:	f7fd fa42 	bl	8006328 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008ea4:	4b2e      	ldr	r3, [pc, #184]	; (8008f60 <HAL_UART_MspInit+0x108>)
 8008ea6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ea8:	4a2d      	ldr	r2, [pc, #180]	; (8008f60 <HAL_UART_MspInit+0x108>)
 8008eaa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008eae:	6613      	str	r3, [r2, #96]	; 0x60
 8008eb0:	4b2b      	ldr	r3, [pc, #172]	; (8008f60 <HAL_UART_MspInit+0x108>)
 8008eb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008eb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008eb8:	613b      	str	r3, [r7, #16]
 8008eba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008ebc:	4b28      	ldr	r3, [pc, #160]	; (8008f60 <HAL_UART_MspInit+0x108>)
 8008ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ec0:	4a27      	ldr	r2, [pc, #156]	; (8008f60 <HAL_UART_MspInit+0x108>)
 8008ec2:	f043 0301 	orr.w	r3, r3, #1
 8008ec6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008ec8:	4b25      	ldr	r3, [pc, #148]	; (8008f60 <HAL_UART_MspInit+0x108>)
 8008eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ecc:	f003 0301 	and.w	r3, r3, #1
 8008ed0:	60fb      	str	r3, [r7, #12]
 8008ed2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8008ed4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8008ed8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008edc:	2302      	movs	r3, #2
 8008ede:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008ee8:	2303      	movs	r3, #3
 8008eea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008eee:	2307      	movs	r3, #7
 8008ef0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ef4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8008ef8:	4619      	mov	r1, r3
 8008efa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008efe:	f000 fce7 	bl	80098d0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8008f02:	4b18      	ldr	r3, [pc, #96]	; (8008f64 <HAL_UART_MspInit+0x10c>)
 8008f04:	4a18      	ldr	r2, [pc, #96]	; (8008f68 <HAL_UART_MspInit+0x110>)
 8008f06:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8008f08:	4b16      	ldr	r3, [pc, #88]	; (8008f64 <HAL_UART_MspInit+0x10c>)
 8008f0a:	2219      	movs	r2, #25
 8008f0c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008f0e:	4b15      	ldr	r3, [pc, #84]	; (8008f64 <HAL_UART_MspInit+0x10c>)
 8008f10:	2200      	movs	r2, #0
 8008f12:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008f14:	4b13      	ldr	r3, [pc, #76]	; (8008f64 <HAL_UART_MspInit+0x10c>)
 8008f16:	2200      	movs	r2, #0
 8008f18:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008f1a:	4b12      	ldr	r3, [pc, #72]	; (8008f64 <HAL_UART_MspInit+0x10c>)
 8008f1c:	2280      	movs	r2, #128	; 0x80
 8008f1e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008f20:	4b10      	ldr	r3, [pc, #64]	; (8008f64 <HAL_UART_MspInit+0x10c>)
 8008f22:	2200      	movs	r2, #0
 8008f24:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008f26:	4b0f      	ldr	r3, [pc, #60]	; (8008f64 <HAL_UART_MspInit+0x10c>)
 8008f28:	2200      	movs	r2, #0
 8008f2a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8008f2c:	4b0d      	ldr	r3, [pc, #52]	; (8008f64 <HAL_UART_MspInit+0x10c>)
 8008f2e:	2200      	movs	r2, #0
 8008f30:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008f32:	4b0c      	ldr	r3, [pc, #48]	; (8008f64 <HAL_UART_MspInit+0x10c>)
 8008f34:	2200      	movs	r2, #0
 8008f36:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8008f38:	480a      	ldr	r0, [pc, #40]	; (8008f64 <HAL_UART_MspInit+0x10c>)
 8008f3a:	f000 f99b 	bl	8009274 <HAL_DMA_Init>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d001      	beq.n	8008f48 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8008f44:	f7fd f9f0 	bl	8006328 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	4a06      	ldr	r2, [pc, #24]	; (8008f64 <HAL_UART_MspInit+0x10c>)
 8008f4c:	67da      	str	r2, [r3, #124]	; 0x7c
 8008f4e:	4a05      	ldr	r2, [pc, #20]	; (8008f64 <HAL_UART_MspInit+0x10c>)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8008f54:	bf00      	nop
 8008f56:	37c0      	adds	r7, #192	; 0xc0
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}
 8008f5c:	40013800 	.word	0x40013800
 8008f60:	40021000 	.word	0x40021000
 8008f64:	20004554 	.word	0x20004554
 8008f68:	40020008 	.word	0x40020008

08008f6c <Reset_Handler>:
 8008f6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008fa4 <LoopForever+0x2>
 8008f70:	f7ff fdaa 	bl	8008ac8 <SystemInit>
 8008f74:	480c      	ldr	r0, [pc, #48]	; (8008fa8 <LoopForever+0x6>)
 8008f76:	490d      	ldr	r1, [pc, #52]	; (8008fac <LoopForever+0xa>)
 8008f78:	4a0d      	ldr	r2, [pc, #52]	; (8008fb0 <LoopForever+0xe>)
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	e002      	b.n	8008f84 <LoopCopyDataInit>

08008f7e <CopyDataInit>:
 8008f7e:	58d4      	ldr	r4, [r2, r3]
 8008f80:	50c4      	str	r4, [r0, r3]
 8008f82:	3304      	adds	r3, #4

08008f84 <LoopCopyDataInit>:
 8008f84:	18c4      	adds	r4, r0, r3
 8008f86:	428c      	cmp	r4, r1
 8008f88:	d3f9      	bcc.n	8008f7e <CopyDataInit>
 8008f8a:	4a0a      	ldr	r2, [pc, #40]	; (8008fb4 <LoopForever+0x12>)
 8008f8c:	4c0a      	ldr	r4, [pc, #40]	; (8008fb8 <LoopForever+0x16>)
 8008f8e:	2300      	movs	r3, #0
 8008f90:	e001      	b.n	8008f96 <LoopFillZerobss>

08008f92 <FillZerobss>:
 8008f92:	6013      	str	r3, [r2, #0]
 8008f94:	3204      	adds	r2, #4

08008f96 <LoopFillZerobss>:
 8008f96:	42a2      	cmp	r2, r4
 8008f98:	d3fb      	bcc.n	8008f92 <FillZerobss>
 8008f9a:	f00a ff4f 	bl	8013e3c <__libc_init_array>
 8008f9e:	f7fd f915 	bl	80061cc <main>

08008fa2 <LoopForever>:
 8008fa2:	e7fe      	b.n	8008fa2 <LoopForever>
 8008fa4:	20050000 	.word	0x20050000
 8008fa8:	20000000 	.word	0x20000000
 8008fac:	20000278 	.word	0x20000278
 8008fb0:	0801a810 	.word	0x0801a810
 8008fb4:	20000278 	.word	0x20000278
 8008fb8:	20019b18 	.word	0x20019b18

08008fbc <ADC1_2_IRQHandler>:
 8008fbc:	e7fe      	b.n	8008fbc <ADC1_2_IRQHandler>

08008fbe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008fbe:	b580      	push	{r7, lr}
 8008fc0:	b082      	sub	sp, #8
 8008fc2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008fc8:	2003      	movs	r0, #3
 8008fca:	f000 f919 	bl	8009200 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008fce:	2000      	movs	r0, #0
 8008fd0:	f7ff fc12 	bl	80087f8 <HAL_InitTick>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d002      	beq.n	8008fe0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8008fda:	2301      	movs	r3, #1
 8008fdc:	71fb      	strb	r3, [r7, #7]
 8008fde:	e001      	b.n	8008fe4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8008fe0:	f7ff fbe2 	bl	80087a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008fe4:	79fb      	ldrb	r3, [r7, #7]
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3708      	adds	r7, #8
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}
	...

08008ff0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008ff4:	4b06      	ldr	r3, [pc, #24]	; (8009010 <HAL_IncTick+0x20>)
 8008ff6:	781b      	ldrb	r3, [r3, #0]
 8008ff8:	461a      	mov	r2, r3
 8008ffa:	4b06      	ldr	r3, [pc, #24]	; (8009014 <HAL_IncTick+0x24>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4413      	add	r3, r2
 8009000:	4a04      	ldr	r2, [pc, #16]	; (8009014 <HAL_IncTick+0x24>)
 8009002:	6013      	str	r3, [r2, #0]
}
 8009004:	bf00      	nop
 8009006:	46bd      	mov	sp, r7
 8009008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900c:	4770      	bx	lr
 800900e:	bf00      	nop
 8009010:	2000009c 	.word	0x2000009c
 8009014:	200045b4 	.word	0x200045b4

08009018 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009018:	b480      	push	{r7}
 800901a:	af00      	add	r7, sp, #0
  return uwTick;
 800901c:	4b03      	ldr	r3, [pc, #12]	; (800902c <HAL_GetTick+0x14>)
 800901e:	681b      	ldr	r3, [r3, #0]
}
 8009020:	4618      	mov	r0, r3
 8009022:	46bd      	mov	sp, r7
 8009024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009028:	4770      	bx	lr
 800902a:	bf00      	nop
 800902c:	200045b4 	.word	0x200045b4

08009030 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b084      	sub	sp, #16
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009038:	f7ff ffee 	bl	8009018 <HAL_GetTick>
 800903c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009048:	d005      	beq.n	8009056 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800904a:	4b0a      	ldr	r3, [pc, #40]	; (8009074 <HAL_Delay+0x44>)
 800904c:	781b      	ldrb	r3, [r3, #0]
 800904e:	461a      	mov	r2, r3
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	4413      	add	r3, r2
 8009054:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009056:	bf00      	nop
 8009058:	f7ff ffde 	bl	8009018 <HAL_GetTick>
 800905c:	4602      	mov	r2, r0
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	1ad3      	subs	r3, r2, r3
 8009062:	68fa      	ldr	r2, [r7, #12]
 8009064:	429a      	cmp	r2, r3
 8009066:	d8f7      	bhi.n	8009058 <HAL_Delay+0x28>
  {
  }
}
 8009068:	bf00      	nop
 800906a:	bf00      	nop
 800906c:	3710      	adds	r7, #16
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop
 8009074:	2000009c 	.word	0x2000009c

08009078 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009078:	b480      	push	{r7}
 800907a:	b085      	sub	sp, #20
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f003 0307 	and.w	r3, r3, #7
 8009086:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009088:	4b0c      	ldr	r3, [pc, #48]	; (80090bc <__NVIC_SetPriorityGrouping+0x44>)
 800908a:	68db      	ldr	r3, [r3, #12]
 800908c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800908e:	68ba      	ldr	r2, [r7, #8]
 8009090:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009094:	4013      	ands	r3, r2
 8009096:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80090a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80090a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80090aa:	4a04      	ldr	r2, [pc, #16]	; (80090bc <__NVIC_SetPriorityGrouping+0x44>)
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	60d3      	str	r3, [r2, #12]
}
 80090b0:	bf00      	nop
 80090b2:	3714      	adds	r7, #20
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr
 80090bc:	e000ed00 	.word	0xe000ed00

080090c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80090c0:	b480      	push	{r7}
 80090c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80090c4:	4b04      	ldr	r3, [pc, #16]	; (80090d8 <__NVIC_GetPriorityGrouping+0x18>)
 80090c6:	68db      	ldr	r3, [r3, #12]
 80090c8:	0a1b      	lsrs	r3, r3, #8
 80090ca:	f003 0307 	and.w	r3, r3, #7
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	46bd      	mov	sp, r7
 80090d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d6:	4770      	bx	lr
 80090d8:	e000ed00 	.word	0xe000ed00

080090dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80090dc:	b480      	push	{r7}
 80090de:	b083      	sub	sp, #12
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	4603      	mov	r3, r0
 80090e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80090e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	db0b      	blt.n	8009106 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80090ee:	79fb      	ldrb	r3, [r7, #7]
 80090f0:	f003 021f 	and.w	r2, r3, #31
 80090f4:	4907      	ldr	r1, [pc, #28]	; (8009114 <__NVIC_EnableIRQ+0x38>)
 80090f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090fa:	095b      	lsrs	r3, r3, #5
 80090fc:	2001      	movs	r0, #1
 80090fe:	fa00 f202 	lsl.w	r2, r0, r2
 8009102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8009106:	bf00      	nop
 8009108:	370c      	adds	r7, #12
 800910a:	46bd      	mov	sp, r7
 800910c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009110:	4770      	bx	lr
 8009112:	bf00      	nop
 8009114:	e000e100 	.word	0xe000e100

08009118 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009118:	b480      	push	{r7}
 800911a:	b083      	sub	sp, #12
 800911c:	af00      	add	r7, sp, #0
 800911e:	4603      	mov	r3, r0
 8009120:	6039      	str	r1, [r7, #0]
 8009122:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009128:	2b00      	cmp	r3, #0
 800912a:	db0a      	blt.n	8009142 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	b2da      	uxtb	r2, r3
 8009130:	490c      	ldr	r1, [pc, #48]	; (8009164 <__NVIC_SetPriority+0x4c>)
 8009132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009136:	0112      	lsls	r2, r2, #4
 8009138:	b2d2      	uxtb	r2, r2
 800913a:	440b      	add	r3, r1
 800913c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009140:	e00a      	b.n	8009158 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	b2da      	uxtb	r2, r3
 8009146:	4908      	ldr	r1, [pc, #32]	; (8009168 <__NVIC_SetPriority+0x50>)
 8009148:	79fb      	ldrb	r3, [r7, #7]
 800914a:	f003 030f 	and.w	r3, r3, #15
 800914e:	3b04      	subs	r3, #4
 8009150:	0112      	lsls	r2, r2, #4
 8009152:	b2d2      	uxtb	r2, r2
 8009154:	440b      	add	r3, r1
 8009156:	761a      	strb	r2, [r3, #24]
}
 8009158:	bf00      	nop
 800915a:	370c      	adds	r7, #12
 800915c:	46bd      	mov	sp, r7
 800915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009162:	4770      	bx	lr
 8009164:	e000e100 	.word	0xe000e100
 8009168:	e000ed00 	.word	0xe000ed00

0800916c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800916c:	b480      	push	{r7}
 800916e:	b089      	sub	sp, #36	; 0x24
 8009170:	af00      	add	r7, sp, #0
 8009172:	60f8      	str	r0, [r7, #12]
 8009174:	60b9      	str	r1, [r7, #8]
 8009176:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	f003 0307 	and.w	r3, r3, #7
 800917e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009180:	69fb      	ldr	r3, [r7, #28]
 8009182:	f1c3 0307 	rsb	r3, r3, #7
 8009186:	2b04      	cmp	r3, #4
 8009188:	bf28      	it	cs
 800918a:	2304      	movcs	r3, #4
 800918c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800918e:	69fb      	ldr	r3, [r7, #28]
 8009190:	3304      	adds	r3, #4
 8009192:	2b06      	cmp	r3, #6
 8009194:	d902      	bls.n	800919c <NVIC_EncodePriority+0x30>
 8009196:	69fb      	ldr	r3, [r7, #28]
 8009198:	3b03      	subs	r3, #3
 800919a:	e000      	b.n	800919e <NVIC_EncodePriority+0x32>
 800919c:	2300      	movs	r3, #0
 800919e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80091a0:	f04f 32ff 	mov.w	r2, #4294967295
 80091a4:	69bb      	ldr	r3, [r7, #24]
 80091a6:	fa02 f303 	lsl.w	r3, r2, r3
 80091aa:	43da      	mvns	r2, r3
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	401a      	ands	r2, r3
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80091b4:	f04f 31ff 	mov.w	r1, #4294967295
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	fa01 f303 	lsl.w	r3, r1, r3
 80091be:	43d9      	mvns	r1, r3
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80091c4:	4313      	orrs	r3, r2
         );
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3724      	adds	r7, #36	; 0x24
 80091ca:	46bd      	mov	sp, r7
 80091cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d0:	4770      	bx	lr
	...

080091d4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80091d4:	b480      	push	{r7}
 80091d6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80091d8:	f3bf 8f4f 	dsb	sy
}
 80091dc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80091de:	4b06      	ldr	r3, [pc, #24]	; (80091f8 <__NVIC_SystemReset+0x24>)
 80091e0:	68db      	ldr	r3, [r3, #12]
 80091e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80091e6:	4904      	ldr	r1, [pc, #16]	; (80091f8 <__NVIC_SystemReset+0x24>)
 80091e8:	4b04      	ldr	r3, [pc, #16]	; (80091fc <__NVIC_SystemReset+0x28>)
 80091ea:	4313      	orrs	r3, r2
 80091ec:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80091ee:	f3bf 8f4f 	dsb	sy
}
 80091f2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80091f4:	bf00      	nop
 80091f6:	e7fd      	b.n	80091f4 <__NVIC_SystemReset+0x20>
 80091f8:	e000ed00 	.word	0xe000ed00
 80091fc:	05fa0004 	.word	0x05fa0004

08009200 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b082      	sub	sp, #8
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f7ff ff35 	bl	8009078 <__NVIC_SetPriorityGrouping>
}
 800920e:	bf00      	nop
 8009210:	3708      	adds	r7, #8
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}

08009216 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009216:	b580      	push	{r7, lr}
 8009218:	b086      	sub	sp, #24
 800921a:	af00      	add	r7, sp, #0
 800921c:	4603      	mov	r3, r0
 800921e:	60b9      	str	r1, [r7, #8]
 8009220:	607a      	str	r2, [r7, #4]
 8009222:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8009224:	2300      	movs	r3, #0
 8009226:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009228:	f7ff ff4a 	bl	80090c0 <__NVIC_GetPriorityGrouping>
 800922c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800922e:	687a      	ldr	r2, [r7, #4]
 8009230:	68b9      	ldr	r1, [r7, #8]
 8009232:	6978      	ldr	r0, [r7, #20]
 8009234:	f7ff ff9a 	bl	800916c <NVIC_EncodePriority>
 8009238:	4602      	mov	r2, r0
 800923a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800923e:	4611      	mov	r1, r2
 8009240:	4618      	mov	r0, r3
 8009242:	f7ff ff69 	bl	8009118 <__NVIC_SetPriority>
}
 8009246:	bf00      	nop
 8009248:	3718      	adds	r7, #24
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}

0800924e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800924e:	b580      	push	{r7, lr}
 8009250:	b082      	sub	sp, #8
 8009252:	af00      	add	r7, sp, #0
 8009254:	4603      	mov	r3, r0
 8009256:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800925c:	4618      	mov	r0, r3
 800925e:	f7ff ff3d 	bl	80090dc <__NVIC_EnableIRQ>
}
 8009262:	bf00      	nop
 8009264:	3708      	adds	r7, #8
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}

0800926a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800926a:	b580      	push	{r7, lr}
 800926c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800926e:	f7ff ffb1 	bl	80091d4 <__NVIC_SystemReset>
	...

08009274 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b084      	sub	sp, #16
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d101      	bne.n	8009286 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8009282:	2301      	movs	r3, #1
 8009284:	e08d      	b.n	80093a2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	461a      	mov	r2, r3
 800928c:	4b47      	ldr	r3, [pc, #284]	; (80093ac <HAL_DMA_Init+0x138>)
 800928e:	429a      	cmp	r2, r3
 8009290:	d80f      	bhi.n	80092b2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	461a      	mov	r2, r3
 8009298:	4b45      	ldr	r3, [pc, #276]	; (80093b0 <HAL_DMA_Init+0x13c>)
 800929a:	4413      	add	r3, r2
 800929c:	4a45      	ldr	r2, [pc, #276]	; (80093b4 <HAL_DMA_Init+0x140>)
 800929e:	fba2 2303 	umull	r2, r3, r2, r3
 80092a2:	091b      	lsrs	r3, r3, #4
 80092a4:	009a      	lsls	r2, r3, #2
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	4a42      	ldr	r2, [pc, #264]	; (80093b8 <HAL_DMA_Init+0x144>)
 80092ae:	641a      	str	r2, [r3, #64]	; 0x40
 80092b0:	e00e      	b.n	80092d0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	461a      	mov	r2, r3
 80092b8:	4b40      	ldr	r3, [pc, #256]	; (80093bc <HAL_DMA_Init+0x148>)
 80092ba:	4413      	add	r3, r2
 80092bc:	4a3d      	ldr	r2, [pc, #244]	; (80093b4 <HAL_DMA_Init+0x140>)
 80092be:	fba2 2303 	umull	r2, r3, r2, r3
 80092c2:	091b      	lsrs	r3, r3, #4
 80092c4:	009a      	lsls	r2, r3, #2
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	4a3c      	ldr	r2, [pc, #240]	; (80093c0 <HAL_DMA_Init+0x14c>)
 80092ce:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2202      	movs	r2, #2
 80092d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80092e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092ea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80092f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	691b      	ldr	r3, [r3, #16]
 80092fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009300:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	699b      	ldr	r3, [r3, #24]
 8009306:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800930c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6a1b      	ldr	r3, [r3, #32]
 8009312:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8009314:	68fa      	ldr	r2, [r7, #12]
 8009316:	4313      	orrs	r3, r2
 8009318:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	68fa      	ldr	r2, [r7, #12]
 8009320:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 fa72 	bl	800980c <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	689b      	ldr	r3, [r3, #8]
 800932c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009330:	d102      	bne.n	8009338 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2200      	movs	r2, #0
 8009336:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	685a      	ldr	r2, [r3, #4]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009340:	b2d2      	uxtb	r2, r2
 8009342:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009348:	687a      	ldr	r2, [r7, #4]
 800934a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800934c:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	685b      	ldr	r3, [r3, #4]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d010      	beq.n	8009378 <HAL_DMA_Init+0x104>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	685b      	ldr	r3, [r3, #4]
 800935a:	2b04      	cmp	r3, #4
 800935c:	d80c      	bhi.n	8009378 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f000 fa92 	bl	8009888 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009368:	2200      	movs	r2, #0
 800936a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009370:	687a      	ldr	r2, [r7, #4]
 8009372:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009374:	605a      	str	r2, [r3, #4]
 8009376:	e008      	b.n	800938a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2200      	movs	r2, #0
 800937c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2200      	movs	r2, #0
 8009382:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2200      	movs	r2, #0
 8009388:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2200      	movs	r2, #0
 800938e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2201      	movs	r2, #1
 8009394:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2200      	movs	r2, #0
 800939c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80093a0:	2300      	movs	r3, #0
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3710      	adds	r7, #16
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}
 80093aa:	bf00      	nop
 80093ac:	40020407 	.word	0x40020407
 80093b0:	bffdfff8 	.word	0xbffdfff8
 80093b4:	cccccccd 	.word	0xcccccccd
 80093b8:	40020000 	.word	0x40020000
 80093bc:	bffdfbf8 	.word	0xbffdfbf8
 80093c0:	40020400 	.word	0x40020400

080093c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b086      	sub	sp, #24
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	60f8      	str	r0, [r7, #12]
 80093cc:	60b9      	str	r1, [r7, #8]
 80093ce:	607a      	str	r2, [r7, #4]
 80093d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80093d2:	2300      	movs	r3, #0
 80093d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80093dc:	2b01      	cmp	r3, #1
 80093de:	d101      	bne.n	80093e4 <HAL_DMA_Start_IT+0x20>
 80093e0:	2302      	movs	r3, #2
 80093e2:	e066      	b.n	80094b2 <HAL_DMA_Start_IT+0xee>
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	2201      	movs	r2, #1
 80093e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80093f2:	b2db      	uxtb	r3, r3
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	d155      	bne.n	80094a4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2202      	movs	r2, #2
 80093fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2200      	movs	r2, #0
 8009404:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	681a      	ldr	r2, [r3, #0]
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f022 0201 	bic.w	r2, r2, #1
 8009414:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	687a      	ldr	r2, [r7, #4]
 800941a:	68b9      	ldr	r1, [r7, #8]
 800941c:	68f8      	ldr	r0, [r7, #12]
 800941e:	f000 f9b6 	bl	800978e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009426:	2b00      	cmp	r3, #0
 8009428:	d008      	beq.n	800943c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	681a      	ldr	r2, [r3, #0]
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f042 020e 	orr.w	r2, r2, #14
 8009438:	601a      	str	r2, [r3, #0]
 800943a:	e00f      	b.n	800945c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	681a      	ldr	r2, [r3, #0]
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f022 0204 	bic.w	r2, r2, #4
 800944a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	681a      	ldr	r2, [r3, #0]
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f042 020a 	orr.w	r2, r2, #10
 800945a:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009466:	2b00      	cmp	r3, #0
 8009468:	d007      	beq.n	800947a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800946e:	681a      	ldr	r2, [r3, #0]
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009474:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009478:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800947e:	2b00      	cmp	r3, #0
 8009480:	d007      	beq.n	8009492 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009486:	681a      	ldr	r2, [r3, #0]
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800948c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009490:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	681a      	ldr	r2, [r3, #0]
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f042 0201 	orr.w	r2, r2, #1
 80094a0:	601a      	str	r2, [r3, #0]
 80094a2:	e005      	b.n	80094b0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	2200      	movs	r2, #0
 80094a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80094ac:	2302      	movs	r3, #2
 80094ae:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80094b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3718      	adds	r7, #24
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}

080094ba <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80094ba:	b480      	push	{r7}
 80094bc:	b085      	sub	sp, #20
 80094be:	af00      	add	r7, sp, #0
 80094c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80094c2:	2300      	movs	r3, #0
 80094c4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80094cc:	b2db      	uxtb	r3, r3
 80094ce:	2b02      	cmp	r3, #2
 80094d0:	d008      	beq.n	80094e4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2204      	movs	r2, #4
 80094d6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2200      	movs	r2, #0
 80094dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80094e0:	2301      	movs	r3, #1
 80094e2:	e040      	b.n	8009566 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	681a      	ldr	r2, [r3, #0]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f022 020e 	bic.w	r2, r2, #14
 80094f2:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094f8:	681a      	ldr	r2, [r3, #0]
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009502:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	681a      	ldr	r2, [r3, #0]
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f022 0201 	bic.w	r2, r2, #1
 8009512:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009518:	f003 021c 	and.w	r2, r3, #28
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009520:	2101      	movs	r1, #1
 8009522:	fa01 f202 	lsl.w	r2, r1, r2
 8009526:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800952c:	687a      	ldr	r2, [r7, #4]
 800952e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009530:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009536:	2b00      	cmp	r3, #0
 8009538:	d00c      	beq.n	8009554 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800953e:	681a      	ldr	r2, [r3, #0]
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009544:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009548:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800954e:	687a      	ldr	r2, [r7, #4]
 8009550:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009552:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2201      	movs	r2, #1
 8009558:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2200      	movs	r2, #0
 8009560:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8009564:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8009566:	4618      	mov	r0, r3
 8009568:	3714      	adds	r7, #20
 800956a:	46bd      	mov	sp, r7
 800956c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009570:	4770      	bx	lr

08009572 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009572:	b580      	push	{r7, lr}
 8009574:	b084      	sub	sp, #16
 8009576:	af00      	add	r7, sp, #0
 8009578:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800957a:	2300      	movs	r3, #0
 800957c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009584:	b2db      	uxtb	r3, r3
 8009586:	2b02      	cmp	r3, #2
 8009588:	d005      	beq.n	8009596 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2204      	movs	r2, #4
 800958e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8009590:	2301      	movs	r3, #1
 8009592:	73fb      	strb	r3, [r7, #15]
 8009594:	e047      	b.n	8009626 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	681a      	ldr	r2, [r3, #0]
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f022 020e 	bic.w	r2, r2, #14
 80095a4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	681a      	ldr	r2, [r3, #0]
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f022 0201 	bic.w	r2, r2, #1
 80095b4:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095ba:	681a      	ldr	r2, [r3, #0]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80095c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095ca:	f003 021c 	and.w	r2, r3, #28
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095d2:	2101      	movs	r1, #1
 80095d4:	fa01 f202 	lsl.w	r2, r1, r2
 80095d8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095de:	687a      	ldr	r2, [r7, #4]
 80095e0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80095e2:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d00c      	beq.n	8009606 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095f0:	681a      	ldr	r2, [r3, #0]
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80095fa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009600:	687a      	ldr	r2, [r7, #4]
 8009602:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009604:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2201      	movs	r2, #1
 800960a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2200      	movs	r2, #0
 8009612:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800961a:	2b00      	cmp	r3, #0
 800961c:	d003      	beq.n	8009626 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	4798      	blx	r3
    }
  }
  return status;
 8009626:	7bfb      	ldrb	r3, [r7, #15]
}
 8009628:	4618      	mov	r0, r3
 800962a:	3710      	adds	r7, #16
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}

08009630 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b084      	sub	sp, #16
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800964c:	f003 031c 	and.w	r3, r3, #28
 8009650:	2204      	movs	r2, #4
 8009652:	409a      	lsls	r2, r3
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	4013      	ands	r3, r2
 8009658:	2b00      	cmp	r3, #0
 800965a:	d026      	beq.n	80096aa <HAL_DMA_IRQHandler+0x7a>
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	f003 0304 	and.w	r3, r3, #4
 8009662:	2b00      	cmp	r3, #0
 8009664:	d021      	beq.n	80096aa <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f003 0320 	and.w	r3, r3, #32
 8009670:	2b00      	cmp	r3, #0
 8009672:	d107      	bne.n	8009684 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	681a      	ldr	r2, [r3, #0]
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f022 0204 	bic.w	r2, r2, #4
 8009682:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009688:	f003 021c 	and.w	r2, r3, #28
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009690:	2104      	movs	r1, #4
 8009692:	fa01 f202 	lsl.w	r2, r1, r2
 8009696:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800969c:	2b00      	cmp	r3, #0
 800969e:	d071      	beq.n	8009784 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80096a8:	e06c      	b.n	8009784 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096ae:	f003 031c 	and.w	r3, r3, #28
 80096b2:	2202      	movs	r2, #2
 80096b4:	409a      	lsls	r2, r3
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	4013      	ands	r3, r2
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d02e      	beq.n	800971c <HAL_DMA_IRQHandler+0xec>
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	f003 0302 	and.w	r3, r3, #2
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d029      	beq.n	800971c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f003 0320 	and.w	r3, r3, #32
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d10b      	bne.n	80096ee <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	681a      	ldr	r2, [r3, #0]
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f022 020a 	bic.w	r2, r2, #10
 80096e4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2201      	movs	r2, #1
 80096ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096f2:	f003 021c 	and.w	r2, r3, #28
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096fa:	2102      	movs	r1, #2
 80096fc:	fa01 f202 	lsl.w	r2, r1, r2
 8009700:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2200      	movs	r2, #0
 8009706:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800970e:	2b00      	cmp	r3, #0
 8009710:	d038      	beq.n	8009784 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800971a:	e033      	b.n	8009784 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009720:	f003 031c 	and.w	r3, r3, #28
 8009724:	2208      	movs	r2, #8
 8009726:	409a      	lsls	r2, r3
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	4013      	ands	r3, r2
 800972c:	2b00      	cmp	r3, #0
 800972e:	d02a      	beq.n	8009786 <HAL_DMA_IRQHandler+0x156>
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	f003 0308 	and.w	r3, r3, #8
 8009736:	2b00      	cmp	r3, #0
 8009738:	d025      	beq.n	8009786 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	681a      	ldr	r2, [r3, #0]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f022 020e 	bic.w	r2, r2, #14
 8009748:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800974e:	f003 021c 	and.w	r2, r3, #28
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009756:	2101      	movs	r1, #1
 8009758:	fa01 f202 	lsl.w	r2, r1, r2
 800975c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2201      	movs	r2, #1
 8009762:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2201      	movs	r2, #1
 8009768:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2200      	movs	r2, #0
 8009770:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009778:	2b00      	cmp	r3, #0
 800977a:	d004      	beq.n	8009786 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8009784:	bf00      	nop
 8009786:	bf00      	nop
}
 8009788:	3710      	adds	r7, #16
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}

0800978e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800978e:	b480      	push	{r7}
 8009790:	b085      	sub	sp, #20
 8009792:	af00      	add	r7, sp, #0
 8009794:	60f8      	str	r0, [r7, #12]
 8009796:	60b9      	str	r1, [r7, #8]
 8009798:	607a      	str	r2, [r7, #4]
 800979a:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097a0:	68fa      	ldr	r2, [r7, #12]
 80097a2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80097a4:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d004      	beq.n	80097b8 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097b2:	68fa      	ldr	r2, [r7, #12]
 80097b4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80097b6:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097bc:	f003 021c 	and.w	r2, r3, #28
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097c4:	2101      	movs	r1, #1
 80097c6:	fa01 f202 	lsl.w	r2, r1, r2
 80097ca:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	683a      	ldr	r2, [r7, #0]
 80097d2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	689b      	ldr	r3, [r3, #8]
 80097d8:	2b10      	cmp	r3, #16
 80097da:	d108      	bne.n	80097ee <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	687a      	ldr	r2, [r7, #4]
 80097e2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	68ba      	ldr	r2, [r7, #8]
 80097ea:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80097ec:	e007      	b.n	80097fe <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	68ba      	ldr	r2, [r7, #8]
 80097f4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	687a      	ldr	r2, [r7, #4]
 80097fc:	60da      	str	r2, [r3, #12]
}
 80097fe:	bf00      	nop
 8009800:	3714      	adds	r7, #20
 8009802:	46bd      	mov	sp, r7
 8009804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009808:	4770      	bx	lr
	...

0800980c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800980c:	b480      	push	{r7}
 800980e:	b085      	sub	sp, #20
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	461a      	mov	r2, r3
 800981a:	4b17      	ldr	r3, [pc, #92]	; (8009878 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800981c:	429a      	cmp	r2, r3
 800981e:	d80a      	bhi.n	8009836 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009824:	089b      	lsrs	r3, r3, #2
 8009826:	009b      	lsls	r3, r3, #2
 8009828:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800982c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8009830:	687a      	ldr	r2, [r7, #4]
 8009832:	6493      	str	r3, [r2, #72]	; 0x48
 8009834:	e007      	b.n	8009846 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800983a:	089b      	lsrs	r3, r3, #2
 800983c:	009a      	lsls	r2, r3, #2
 800983e:	4b0f      	ldr	r3, [pc, #60]	; (800987c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8009840:	4413      	add	r3, r2
 8009842:	687a      	ldr	r2, [r7, #4]
 8009844:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	b2db      	uxtb	r3, r3
 800984c:	3b08      	subs	r3, #8
 800984e:	4a0c      	ldr	r2, [pc, #48]	; (8009880 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8009850:	fba2 2303 	umull	r2, r3, r2, r3
 8009854:	091b      	lsrs	r3, r3, #4
 8009856:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	4a0a      	ldr	r2, [pc, #40]	; (8009884 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800985c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	f003 031f 	and.w	r3, r3, #31
 8009864:	2201      	movs	r2, #1
 8009866:	409a      	lsls	r2, r3
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800986c:	bf00      	nop
 800986e:	3714      	adds	r7, #20
 8009870:	46bd      	mov	sp, r7
 8009872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009876:	4770      	bx	lr
 8009878:	40020407 	.word	0x40020407
 800987c:	4002081c 	.word	0x4002081c
 8009880:	cccccccd 	.word	0xcccccccd
 8009884:	40020880 	.word	0x40020880

08009888 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009888:	b480      	push	{r7}
 800988a:	b085      	sub	sp, #20
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	b2db      	uxtb	r3, r3
 8009896:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009898:	68fa      	ldr	r2, [r7, #12]
 800989a:	4b0b      	ldr	r3, [pc, #44]	; (80098c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800989c:	4413      	add	r3, r2
 800989e:	009b      	lsls	r3, r3, #2
 80098a0:	461a      	mov	r2, r3
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	4a08      	ldr	r2, [pc, #32]	; (80098cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80098aa:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	3b01      	subs	r3, #1
 80098b0:	f003 0303 	and.w	r3, r3, #3
 80098b4:	2201      	movs	r2, #1
 80098b6:	409a      	lsls	r2, r3
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80098bc:	bf00      	nop
 80098be:	3714      	adds	r7, #20
 80098c0:	46bd      	mov	sp, r7
 80098c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c6:	4770      	bx	lr
 80098c8:	1000823f 	.word	0x1000823f
 80098cc:	40020940 	.word	0x40020940

080098d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b087      	sub	sp, #28
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
 80098d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80098da:	2300      	movs	r3, #0
 80098dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80098de:	e166      	b.n	8009bae <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	681a      	ldr	r2, [r3, #0]
 80098e4:	2101      	movs	r1, #1
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	fa01 f303 	lsl.w	r3, r1, r3
 80098ec:	4013      	ands	r3, r2
 80098ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	f000 8158 	beq.w	8009ba8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	f003 0303 	and.w	r3, r3, #3
 8009900:	2b01      	cmp	r3, #1
 8009902:	d005      	beq.n	8009910 <HAL_GPIO_Init+0x40>
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	685b      	ldr	r3, [r3, #4]
 8009908:	f003 0303 	and.w	r3, r3, #3
 800990c:	2b02      	cmp	r3, #2
 800990e:	d130      	bne.n	8009972 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	689b      	ldr	r3, [r3, #8]
 8009914:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	005b      	lsls	r3, r3, #1
 800991a:	2203      	movs	r2, #3
 800991c:	fa02 f303 	lsl.w	r3, r2, r3
 8009920:	43db      	mvns	r3, r3
 8009922:	693a      	ldr	r2, [r7, #16]
 8009924:	4013      	ands	r3, r2
 8009926:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	68da      	ldr	r2, [r3, #12]
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	005b      	lsls	r3, r3, #1
 8009930:	fa02 f303 	lsl.w	r3, r2, r3
 8009934:	693a      	ldr	r2, [r7, #16]
 8009936:	4313      	orrs	r3, r2
 8009938:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	693a      	ldr	r2, [r7, #16]
 800993e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009946:	2201      	movs	r2, #1
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	fa02 f303 	lsl.w	r3, r2, r3
 800994e:	43db      	mvns	r3, r3
 8009950:	693a      	ldr	r2, [r7, #16]
 8009952:	4013      	ands	r3, r2
 8009954:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	091b      	lsrs	r3, r3, #4
 800995c:	f003 0201 	and.w	r2, r3, #1
 8009960:	697b      	ldr	r3, [r7, #20]
 8009962:	fa02 f303 	lsl.w	r3, r2, r3
 8009966:	693a      	ldr	r2, [r7, #16]
 8009968:	4313      	orrs	r3, r2
 800996a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	693a      	ldr	r2, [r7, #16]
 8009970:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	685b      	ldr	r3, [r3, #4]
 8009976:	f003 0303 	and.w	r3, r3, #3
 800997a:	2b03      	cmp	r3, #3
 800997c:	d017      	beq.n	80099ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	68db      	ldr	r3, [r3, #12]
 8009982:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	005b      	lsls	r3, r3, #1
 8009988:	2203      	movs	r2, #3
 800998a:	fa02 f303 	lsl.w	r3, r2, r3
 800998e:	43db      	mvns	r3, r3
 8009990:	693a      	ldr	r2, [r7, #16]
 8009992:	4013      	ands	r3, r2
 8009994:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	689a      	ldr	r2, [r3, #8]
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	005b      	lsls	r3, r3, #1
 800999e:	fa02 f303 	lsl.w	r3, r2, r3
 80099a2:	693a      	ldr	r2, [r7, #16]
 80099a4:	4313      	orrs	r3, r2
 80099a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	693a      	ldr	r2, [r7, #16]
 80099ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	685b      	ldr	r3, [r3, #4]
 80099b2:	f003 0303 	and.w	r3, r3, #3
 80099b6:	2b02      	cmp	r3, #2
 80099b8:	d123      	bne.n	8009a02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	08da      	lsrs	r2, r3, #3
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	3208      	adds	r2, #8
 80099c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	f003 0307 	and.w	r3, r3, #7
 80099ce:	009b      	lsls	r3, r3, #2
 80099d0:	220f      	movs	r2, #15
 80099d2:	fa02 f303 	lsl.w	r3, r2, r3
 80099d6:	43db      	mvns	r3, r3
 80099d8:	693a      	ldr	r2, [r7, #16]
 80099da:	4013      	ands	r3, r2
 80099dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	691a      	ldr	r2, [r3, #16]
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	f003 0307 	and.w	r3, r3, #7
 80099e8:	009b      	lsls	r3, r3, #2
 80099ea:	fa02 f303 	lsl.w	r3, r2, r3
 80099ee:	693a      	ldr	r2, [r7, #16]
 80099f0:	4313      	orrs	r3, r2
 80099f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	08da      	lsrs	r2, r3, #3
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	3208      	adds	r2, #8
 80099fc:	6939      	ldr	r1, [r7, #16]
 80099fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	005b      	lsls	r3, r3, #1
 8009a0c:	2203      	movs	r2, #3
 8009a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8009a12:	43db      	mvns	r3, r3
 8009a14:	693a      	ldr	r2, [r7, #16]
 8009a16:	4013      	ands	r3, r2
 8009a18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	685b      	ldr	r3, [r3, #4]
 8009a1e:	f003 0203 	and.w	r2, r3, #3
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	005b      	lsls	r3, r3, #1
 8009a26:	fa02 f303 	lsl.w	r3, r2, r3
 8009a2a:	693a      	ldr	r2, [r7, #16]
 8009a2c:	4313      	orrs	r3, r2
 8009a2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	693a      	ldr	r2, [r7, #16]
 8009a34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	685b      	ldr	r3, [r3, #4]
 8009a3a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	f000 80b2 	beq.w	8009ba8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009a44:	4b61      	ldr	r3, [pc, #388]	; (8009bcc <HAL_GPIO_Init+0x2fc>)
 8009a46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a48:	4a60      	ldr	r2, [pc, #384]	; (8009bcc <HAL_GPIO_Init+0x2fc>)
 8009a4a:	f043 0301 	orr.w	r3, r3, #1
 8009a4e:	6613      	str	r3, [r2, #96]	; 0x60
 8009a50:	4b5e      	ldr	r3, [pc, #376]	; (8009bcc <HAL_GPIO_Init+0x2fc>)
 8009a52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a54:	f003 0301 	and.w	r3, r3, #1
 8009a58:	60bb      	str	r3, [r7, #8]
 8009a5a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8009a5c:	4a5c      	ldr	r2, [pc, #368]	; (8009bd0 <HAL_GPIO_Init+0x300>)
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	089b      	lsrs	r3, r3, #2
 8009a62:	3302      	adds	r3, #2
 8009a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8009a6a:	697b      	ldr	r3, [r7, #20]
 8009a6c:	f003 0303 	and.w	r3, r3, #3
 8009a70:	009b      	lsls	r3, r3, #2
 8009a72:	220f      	movs	r2, #15
 8009a74:	fa02 f303 	lsl.w	r3, r2, r3
 8009a78:	43db      	mvns	r3, r3
 8009a7a:	693a      	ldr	r2, [r7, #16]
 8009a7c:	4013      	ands	r3, r2
 8009a7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8009a86:	d02b      	beq.n	8009ae0 <HAL_GPIO_Init+0x210>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	4a52      	ldr	r2, [pc, #328]	; (8009bd4 <HAL_GPIO_Init+0x304>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d025      	beq.n	8009adc <HAL_GPIO_Init+0x20c>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	4a51      	ldr	r2, [pc, #324]	; (8009bd8 <HAL_GPIO_Init+0x308>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d01f      	beq.n	8009ad8 <HAL_GPIO_Init+0x208>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	4a50      	ldr	r2, [pc, #320]	; (8009bdc <HAL_GPIO_Init+0x30c>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d019      	beq.n	8009ad4 <HAL_GPIO_Init+0x204>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	4a4f      	ldr	r2, [pc, #316]	; (8009be0 <HAL_GPIO_Init+0x310>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d013      	beq.n	8009ad0 <HAL_GPIO_Init+0x200>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	4a4e      	ldr	r2, [pc, #312]	; (8009be4 <HAL_GPIO_Init+0x314>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d00d      	beq.n	8009acc <HAL_GPIO_Init+0x1fc>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	4a4d      	ldr	r2, [pc, #308]	; (8009be8 <HAL_GPIO_Init+0x318>)
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d007      	beq.n	8009ac8 <HAL_GPIO_Init+0x1f8>
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	4a4c      	ldr	r2, [pc, #304]	; (8009bec <HAL_GPIO_Init+0x31c>)
 8009abc:	4293      	cmp	r3, r2
 8009abe:	d101      	bne.n	8009ac4 <HAL_GPIO_Init+0x1f4>
 8009ac0:	2307      	movs	r3, #7
 8009ac2:	e00e      	b.n	8009ae2 <HAL_GPIO_Init+0x212>
 8009ac4:	2308      	movs	r3, #8
 8009ac6:	e00c      	b.n	8009ae2 <HAL_GPIO_Init+0x212>
 8009ac8:	2306      	movs	r3, #6
 8009aca:	e00a      	b.n	8009ae2 <HAL_GPIO_Init+0x212>
 8009acc:	2305      	movs	r3, #5
 8009ace:	e008      	b.n	8009ae2 <HAL_GPIO_Init+0x212>
 8009ad0:	2304      	movs	r3, #4
 8009ad2:	e006      	b.n	8009ae2 <HAL_GPIO_Init+0x212>
 8009ad4:	2303      	movs	r3, #3
 8009ad6:	e004      	b.n	8009ae2 <HAL_GPIO_Init+0x212>
 8009ad8:	2302      	movs	r3, #2
 8009ada:	e002      	b.n	8009ae2 <HAL_GPIO_Init+0x212>
 8009adc:	2301      	movs	r3, #1
 8009ade:	e000      	b.n	8009ae2 <HAL_GPIO_Init+0x212>
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	697a      	ldr	r2, [r7, #20]
 8009ae4:	f002 0203 	and.w	r2, r2, #3
 8009ae8:	0092      	lsls	r2, r2, #2
 8009aea:	4093      	lsls	r3, r2
 8009aec:	693a      	ldr	r2, [r7, #16]
 8009aee:	4313      	orrs	r3, r2
 8009af0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8009af2:	4937      	ldr	r1, [pc, #220]	; (8009bd0 <HAL_GPIO_Init+0x300>)
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	089b      	lsrs	r3, r3, #2
 8009af8:	3302      	adds	r3, #2
 8009afa:	693a      	ldr	r2, [r7, #16]
 8009afc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009b00:	4b3b      	ldr	r3, [pc, #236]	; (8009bf0 <HAL_GPIO_Init+0x320>)
 8009b02:	689b      	ldr	r3, [r3, #8]
 8009b04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	43db      	mvns	r3, r3
 8009b0a:	693a      	ldr	r2, [r7, #16]
 8009b0c:	4013      	ands	r3, r2
 8009b0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	685b      	ldr	r3, [r3, #4]
 8009b14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d003      	beq.n	8009b24 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8009b1c:	693a      	ldr	r2, [r7, #16]
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	4313      	orrs	r3, r2
 8009b22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009b24:	4a32      	ldr	r2, [pc, #200]	; (8009bf0 <HAL_GPIO_Init+0x320>)
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8009b2a:	4b31      	ldr	r3, [pc, #196]	; (8009bf0 <HAL_GPIO_Init+0x320>)
 8009b2c:	68db      	ldr	r3, [r3, #12]
 8009b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	43db      	mvns	r3, r3
 8009b34:	693a      	ldr	r2, [r7, #16]
 8009b36:	4013      	ands	r3, r2
 8009b38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	685b      	ldr	r3, [r3, #4]
 8009b3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d003      	beq.n	8009b4e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8009b46:	693a      	ldr	r2, [r7, #16]
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	4313      	orrs	r3, r2
 8009b4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8009b4e:	4a28      	ldr	r2, [pc, #160]	; (8009bf0 <HAL_GPIO_Init+0x320>)
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8009b54:	4b26      	ldr	r3, [pc, #152]	; (8009bf0 <HAL_GPIO_Init+0x320>)
 8009b56:	685b      	ldr	r3, [r3, #4]
 8009b58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	43db      	mvns	r3, r3
 8009b5e:	693a      	ldr	r2, [r7, #16]
 8009b60:	4013      	ands	r3, r2
 8009b62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	685b      	ldr	r3, [r3, #4]
 8009b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d003      	beq.n	8009b78 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8009b70:	693a      	ldr	r2, [r7, #16]
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	4313      	orrs	r3, r2
 8009b76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8009b78:	4a1d      	ldr	r2, [pc, #116]	; (8009bf0 <HAL_GPIO_Init+0x320>)
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8009b7e:	4b1c      	ldr	r3, [pc, #112]	; (8009bf0 <HAL_GPIO_Init+0x320>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	43db      	mvns	r3, r3
 8009b88:	693a      	ldr	r2, [r7, #16]
 8009b8a:	4013      	ands	r3, r2
 8009b8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	685b      	ldr	r3, [r3, #4]
 8009b92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d003      	beq.n	8009ba2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8009b9a:	693a      	ldr	r2, [r7, #16]
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	4313      	orrs	r3, r2
 8009ba0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8009ba2:	4a13      	ldr	r2, [pc, #76]	; (8009bf0 <HAL_GPIO_Init+0x320>)
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	3301      	adds	r3, #1
 8009bac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	681a      	ldr	r2, [r3, #0]
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	f47f ae91 	bne.w	80098e0 <HAL_GPIO_Init+0x10>
  }
}
 8009bbe:	bf00      	nop
 8009bc0:	bf00      	nop
 8009bc2:	371c      	adds	r7, #28
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bca:	4770      	bx	lr
 8009bcc:	40021000 	.word	0x40021000
 8009bd0:	40010000 	.word	0x40010000
 8009bd4:	48000400 	.word	0x48000400
 8009bd8:	48000800 	.word	0x48000800
 8009bdc:	48000c00 	.word	0x48000c00
 8009be0:	48001000 	.word	0x48001000
 8009be4:	48001400 	.word	0x48001400
 8009be8:	48001800 	.word	0x48001800
 8009bec:	48001c00 	.word	0x48001c00
 8009bf0:	40010400 	.word	0x40010400

08009bf4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b085      	sub	sp, #20
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	460b      	mov	r3, r1
 8009bfe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	691a      	ldr	r2, [r3, #16]
 8009c04:	887b      	ldrh	r3, [r7, #2]
 8009c06:	4013      	ands	r3, r2
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d002      	beq.n	8009c12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	73fb      	strb	r3, [r7, #15]
 8009c10:	e001      	b.n	8009c16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009c12:	2300      	movs	r3, #0
 8009c14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	3714      	adds	r7, #20
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c22:	4770      	bx	lr

08009c24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b083      	sub	sp, #12
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
 8009c2c:	460b      	mov	r3, r1
 8009c2e:	807b      	strh	r3, [r7, #2]
 8009c30:	4613      	mov	r3, r2
 8009c32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009c34:	787b      	ldrb	r3, [r7, #1]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d003      	beq.n	8009c42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009c3a:	887a      	ldrh	r2, [r7, #2]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009c40:	e002      	b.n	8009c48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009c42:	887a      	ldrh	r2, [r7, #2]
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009c48:	bf00      	nop
 8009c4a:	370c      	adds	r7, #12
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c52:	4770      	bx	lr

08009c54 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009c54:	b480      	push	{r7}
 8009c56:	b085      	sub	sp, #20
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
 8009c5c:	460b      	mov	r3, r1
 8009c5e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	695b      	ldr	r3, [r3, #20]
 8009c64:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009c66:	887a      	ldrh	r2, [r7, #2]
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	4013      	ands	r3, r2
 8009c6c:	041a      	lsls	r2, r3, #16
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	43d9      	mvns	r1, r3
 8009c72:	887b      	ldrh	r3, [r7, #2]
 8009c74:	400b      	ands	r3, r1
 8009c76:	431a      	orrs	r2, r3
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	619a      	str	r2, [r3, #24]
}
 8009c7c:	bf00      	nop
 8009c7e:	3714      	adds	r7, #20
 8009c80:	46bd      	mov	sp, r7
 8009c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c86:	4770      	bx	lr

08009c88 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b084      	sub	sp, #16
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d101      	bne.n	8009c9a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8009c96:	2301      	movs	r3, #1
 8009c98:	e041      	b.n	8009d1e <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8009ca2:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f245 5255 	movw	r2, #21845	; 0x5555
 8009cac:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	687a      	ldr	r2, [r7, #4]
 8009cb4:	6852      	ldr	r2, [r2, #4]
 8009cb6:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	687a      	ldr	r2, [r7, #4]
 8009cbe:	6892      	ldr	r2, [r2, #8]
 8009cc0:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8009cc2:	f7ff f9a9 	bl	8009018 <HAL_GetTick>
 8009cc6:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8009cc8:	e00f      	b.n	8009cea <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8009cca:	f7ff f9a5 	bl	8009018 <HAL_GetTick>
 8009cce:	4602      	mov	r2, r0
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	1ad3      	subs	r3, r2, r3
 8009cd4:	2b31      	cmp	r3, #49	; 0x31
 8009cd6:	d908      	bls.n	8009cea <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	68db      	ldr	r3, [r3, #12]
 8009cde:	f003 0307 	and.w	r3, r3, #7
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d001      	beq.n	8009cea <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8009ce6:	2303      	movs	r3, #3
 8009ce8:	e019      	b.n	8009d1e <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	68db      	ldr	r3, [r3, #12]
 8009cf0:	f003 0307 	and.w	r3, r3, #7
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d1e8      	bne.n	8009cca <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	691a      	ldr	r2, [r3, #16]
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	68db      	ldr	r3, [r3, #12]
 8009d02:	429a      	cmp	r2, r3
 8009d04:	d005      	beq.n	8009d12 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	687a      	ldr	r2, [r7, #4]
 8009d0c:	68d2      	ldr	r2, [r2, #12]
 8009d0e:	611a      	str	r2, [r3, #16]
 8009d10:	e004      	b.n	8009d1c <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8009d1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009d1c:	2300      	movs	r3, #0
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3710      	adds	r7, #16
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}

08009d26 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8009d26:	b480      	push	{r7}
 8009d28:	b083      	sub	sp, #12
 8009d2a:	af00      	add	r7, sp, #0
 8009d2c:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8009d36:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009d38:	2300      	movs	r3, #0
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	370c      	adds	r7, #12
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d44:	4770      	bx	lr
	...

08009d48 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009d4c:	4b05      	ldr	r3, [pc, #20]	; (8009d64 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	4a04      	ldr	r2, [pc, #16]	; (8009d64 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009d52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d56:	6013      	str	r3, [r2, #0]
}
 8009d58:	bf00      	nop
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d60:	4770      	bx	lr
 8009d62:	bf00      	nop
 8009d64:	40007000 	.word	0x40007000

08009d68 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009d6c:	4b0d      	ldr	r3, [pc, #52]	; (8009da4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009d74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d78:	d102      	bne.n	8009d80 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8009d7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d7e:	e00b      	b.n	8009d98 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8009d80:	4b08      	ldr	r3, [pc, #32]	; (8009da4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8009d82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d8e:	d102      	bne.n	8009d96 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8009d90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d94:	e000      	b.n	8009d98 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8009d96:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da0:	4770      	bx	lr
 8009da2:	bf00      	nop
 8009da4:	40007000 	.word	0x40007000

08009da8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009da8:	b480      	push	{r7}
 8009daa:	b085      	sub	sp, #20
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d141      	bne.n	8009e3a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009db6:	4b4b      	ldr	r3, [pc, #300]	; (8009ee4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009dbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009dc2:	d131      	bne.n	8009e28 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009dc4:	4b47      	ldr	r3, [pc, #284]	; (8009ee4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009dc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009dca:	4a46      	ldr	r2, [pc, #280]	; (8009ee4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009dcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009dd0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009dd4:	4b43      	ldr	r3, [pc, #268]	; (8009ee4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009ddc:	4a41      	ldr	r2, [pc, #260]	; (8009ee4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009dde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009de2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8009de4:	4b40      	ldr	r3, [pc, #256]	; (8009ee8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	2232      	movs	r2, #50	; 0x32
 8009dea:	fb02 f303 	mul.w	r3, r2, r3
 8009dee:	4a3f      	ldr	r2, [pc, #252]	; (8009eec <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009df0:	fba2 2303 	umull	r2, r3, r2, r3
 8009df4:	0c9b      	lsrs	r3, r3, #18
 8009df6:	3301      	adds	r3, #1
 8009df8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009dfa:	e002      	b.n	8009e02 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	3b01      	subs	r3, #1
 8009e00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009e02:	4b38      	ldr	r3, [pc, #224]	; (8009ee4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009e04:	695b      	ldr	r3, [r3, #20]
 8009e06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e0e:	d102      	bne.n	8009e16 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d1f2      	bne.n	8009dfc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009e16:	4b33      	ldr	r3, [pc, #204]	; (8009ee4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009e18:	695b      	ldr	r3, [r3, #20]
 8009e1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e22:	d158      	bne.n	8009ed6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009e24:	2303      	movs	r3, #3
 8009e26:	e057      	b.n	8009ed8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009e28:	4b2e      	ldr	r3, [pc, #184]	; (8009ee4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009e2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e2e:	4a2d      	ldr	r2, [pc, #180]	; (8009ee4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009e30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8009e38:	e04d      	b.n	8009ed6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e40:	d141      	bne.n	8009ec6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009e42:	4b28      	ldr	r3, [pc, #160]	; (8009ee4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009e4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e4e:	d131      	bne.n	8009eb4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009e50:	4b24      	ldr	r3, [pc, #144]	; (8009ee4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009e52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e56:	4a23      	ldr	r2, [pc, #140]	; (8009ee4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009e60:	4b20      	ldr	r3, [pc, #128]	; (8009ee4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009e68:	4a1e      	ldr	r2, [pc, #120]	; (8009ee4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009e6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009e6e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8009e70:	4b1d      	ldr	r3, [pc, #116]	; (8009ee8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	2232      	movs	r2, #50	; 0x32
 8009e76:	fb02 f303 	mul.w	r3, r2, r3
 8009e7a:	4a1c      	ldr	r2, [pc, #112]	; (8009eec <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8009e80:	0c9b      	lsrs	r3, r3, #18
 8009e82:	3301      	adds	r3, #1
 8009e84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009e86:	e002      	b.n	8009e8e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	3b01      	subs	r3, #1
 8009e8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009e8e:	4b15      	ldr	r3, [pc, #84]	; (8009ee4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009e90:	695b      	ldr	r3, [r3, #20]
 8009e92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e9a:	d102      	bne.n	8009ea2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d1f2      	bne.n	8009e88 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009ea2:	4b10      	ldr	r3, [pc, #64]	; (8009ee4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009ea4:	695b      	ldr	r3, [r3, #20]
 8009ea6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009eaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009eae:	d112      	bne.n	8009ed6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009eb0:	2303      	movs	r3, #3
 8009eb2:	e011      	b.n	8009ed8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009eb4:	4b0b      	ldr	r3, [pc, #44]	; (8009ee4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009eb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009eba:	4a0a      	ldr	r2, [pc, #40]	; (8009ee4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009ebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ec0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8009ec4:	e007      	b.n	8009ed6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009ec6:	4b07      	ldr	r3, [pc, #28]	; (8009ee4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009ece:	4a05      	ldr	r2, [pc, #20]	; (8009ee4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009ed0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009ed4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8009ed6:	2300      	movs	r3, #0
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	3714      	adds	r7, #20
 8009edc:	46bd      	mov	sp, r7
 8009ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee2:	4770      	bx	lr
 8009ee4:	40007000 	.word	0x40007000
 8009ee8:	20000094 	.word	0x20000094
 8009eec:	431bde83 	.word	0x431bde83

08009ef0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b08a      	sub	sp, #40	; 0x28
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d102      	bne.n	8009f04 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009efe:	2301      	movs	r3, #1
 8009f00:	f000 bc68 	b.w	800a7d4 <HAL_RCC_OscConfig+0x8e4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009f04:	4b97      	ldr	r3, [pc, #604]	; (800a164 <HAL_RCC_OscConfig+0x274>)
 8009f06:	689b      	ldr	r3, [r3, #8]
 8009f08:	f003 030c 	and.w	r3, r3, #12
 8009f0c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009f0e:	4b95      	ldr	r3, [pc, #596]	; (800a164 <HAL_RCC_OscConfig+0x274>)
 8009f10:	68db      	ldr	r3, [r3, #12]
 8009f12:	f003 0303 	and.w	r3, r3, #3
 8009f16:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f003 0310 	and.w	r3, r3, #16
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	f000 80e6 	beq.w	800a0f2 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009f26:	6a3b      	ldr	r3, [r7, #32]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d007      	beq.n	8009f3c <HAL_RCC_OscConfig+0x4c>
 8009f2c:	6a3b      	ldr	r3, [r7, #32]
 8009f2e:	2b0c      	cmp	r3, #12
 8009f30:	f040 808d 	bne.w	800a04e <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8009f34:	69fb      	ldr	r3, [r7, #28]
 8009f36:	2b01      	cmp	r3, #1
 8009f38:	f040 8089 	bne.w	800a04e <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009f3c:	4b89      	ldr	r3, [pc, #548]	; (800a164 <HAL_RCC_OscConfig+0x274>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f003 0302 	and.w	r3, r3, #2
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d006      	beq.n	8009f56 <HAL_RCC_OscConfig+0x66>
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	69db      	ldr	r3, [r3, #28]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d102      	bne.n	8009f56 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8009f50:	2301      	movs	r3, #1
 8009f52:	f000 bc3f 	b.w	800a7d4 <HAL_RCC_OscConfig+0x8e4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f5a:	4b82      	ldr	r3, [pc, #520]	; (800a164 <HAL_RCC_OscConfig+0x274>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f003 0308 	and.w	r3, r3, #8
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d004      	beq.n	8009f70 <HAL_RCC_OscConfig+0x80>
 8009f66:	4b7f      	ldr	r3, [pc, #508]	; (800a164 <HAL_RCC_OscConfig+0x274>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009f6e:	e005      	b.n	8009f7c <HAL_RCC_OscConfig+0x8c>
 8009f70:	4b7c      	ldr	r3, [pc, #496]	; (800a164 <HAL_RCC_OscConfig+0x274>)
 8009f72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009f76:	091b      	lsrs	r3, r3, #4
 8009f78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	d224      	bcs.n	8009fca <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f84:	4618      	mov	r0, r3
 8009f86:	f000 fe5f 	bl	800ac48 <RCC_SetFlashLatencyFromMSIRange>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d002      	beq.n	8009f96 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8009f90:	2301      	movs	r3, #1
 8009f92:	f000 bc1f 	b.w	800a7d4 <HAL_RCC_OscConfig+0x8e4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009f96:	4b73      	ldr	r3, [pc, #460]	; (800a164 <HAL_RCC_OscConfig+0x274>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	4a72      	ldr	r2, [pc, #456]	; (800a164 <HAL_RCC_OscConfig+0x274>)
 8009f9c:	f043 0308 	orr.w	r3, r3, #8
 8009fa0:	6013      	str	r3, [r2, #0]
 8009fa2:	4b70      	ldr	r3, [pc, #448]	; (800a164 <HAL_RCC_OscConfig+0x274>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fae:	496d      	ldr	r1, [pc, #436]	; (800a164 <HAL_RCC_OscConfig+0x274>)
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009fb4:	4b6b      	ldr	r3, [pc, #428]	; (800a164 <HAL_RCC_OscConfig+0x274>)
 8009fb6:	685b      	ldr	r3, [r3, #4]
 8009fb8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	6a1b      	ldr	r3, [r3, #32]
 8009fc0:	021b      	lsls	r3, r3, #8
 8009fc2:	4968      	ldr	r1, [pc, #416]	; (800a164 <HAL_RCC_OscConfig+0x274>)
 8009fc4:	4313      	orrs	r3, r2
 8009fc6:	604b      	str	r3, [r1, #4]
 8009fc8:	e025      	b.n	800a016 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009fca:	4b66      	ldr	r3, [pc, #408]	; (800a164 <HAL_RCC_OscConfig+0x274>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	4a65      	ldr	r2, [pc, #404]	; (800a164 <HAL_RCC_OscConfig+0x274>)
 8009fd0:	f043 0308 	orr.w	r3, r3, #8
 8009fd4:	6013      	str	r3, [r2, #0]
 8009fd6:	4b63      	ldr	r3, [pc, #396]	; (800a164 <HAL_RCC_OscConfig+0x274>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe2:	4960      	ldr	r1, [pc, #384]	; (800a164 <HAL_RCC_OscConfig+0x274>)
 8009fe4:	4313      	orrs	r3, r2
 8009fe6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009fe8:	4b5e      	ldr	r3, [pc, #376]	; (800a164 <HAL_RCC_OscConfig+0x274>)
 8009fea:	685b      	ldr	r3, [r3, #4]
 8009fec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6a1b      	ldr	r3, [r3, #32]
 8009ff4:	021b      	lsls	r3, r3, #8
 8009ff6:	495b      	ldr	r1, [pc, #364]	; (800a164 <HAL_RCC_OscConfig+0x274>)
 8009ff8:	4313      	orrs	r3, r2
 8009ffa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009ffc:	6a3b      	ldr	r3, [r7, #32]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d109      	bne.n	800a016 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a006:	4618      	mov	r0, r3
 800a008:	f000 fe1e 	bl	800ac48 <RCC_SetFlashLatencyFromMSIRange>
 800a00c:	4603      	mov	r3, r0
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d001      	beq.n	800a016 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800a012:	2301      	movs	r3, #1
 800a014:	e3de      	b.n	800a7d4 <HAL_RCC_OscConfig+0x8e4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a016:	f000 fd21 	bl	800aa5c <HAL_RCC_GetSysClockFreq>
 800a01a:	4602      	mov	r2, r0
 800a01c:	4b51      	ldr	r3, [pc, #324]	; (800a164 <HAL_RCC_OscConfig+0x274>)
 800a01e:	689b      	ldr	r3, [r3, #8]
 800a020:	091b      	lsrs	r3, r3, #4
 800a022:	f003 030f 	and.w	r3, r3, #15
 800a026:	4950      	ldr	r1, [pc, #320]	; (800a168 <HAL_RCC_OscConfig+0x278>)
 800a028:	5ccb      	ldrb	r3, [r1, r3]
 800a02a:	f003 031f 	and.w	r3, r3, #31
 800a02e:	fa22 f303 	lsr.w	r3, r2, r3
 800a032:	4a4e      	ldr	r2, [pc, #312]	; (800a16c <HAL_RCC_OscConfig+0x27c>)
 800a034:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800a036:	4b4e      	ldr	r3, [pc, #312]	; (800a170 <HAL_RCC_OscConfig+0x280>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	4618      	mov	r0, r3
 800a03c:	f7fe fbdc 	bl	80087f8 <HAL_InitTick>
 800a040:	4603      	mov	r3, r0
 800a042:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 800a044:	7dfb      	ldrb	r3, [r7, #23]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d052      	beq.n	800a0f0 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800a04a:	7dfb      	ldrb	r3, [r7, #23]
 800a04c:	e3c2      	b.n	800a7d4 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	69db      	ldr	r3, [r3, #28]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d032      	beq.n	800a0bc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800a056:	4b43      	ldr	r3, [pc, #268]	; (800a164 <HAL_RCC_OscConfig+0x274>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	4a42      	ldr	r2, [pc, #264]	; (800a164 <HAL_RCC_OscConfig+0x274>)
 800a05c:	f043 0301 	orr.w	r3, r3, #1
 800a060:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a062:	f7fe ffd9 	bl	8009018 <HAL_GetTick>
 800a066:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a068:	e008      	b.n	800a07c <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a06a:	f7fe ffd5 	bl	8009018 <HAL_GetTick>
 800a06e:	4602      	mov	r2, r0
 800a070:	69bb      	ldr	r3, [r7, #24]
 800a072:	1ad3      	subs	r3, r2, r3
 800a074:	2b02      	cmp	r3, #2
 800a076:	d901      	bls.n	800a07c <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 800a078:	2303      	movs	r3, #3
 800a07a:	e3ab      	b.n	800a7d4 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a07c:	4b39      	ldr	r3, [pc, #228]	; (800a164 <HAL_RCC_OscConfig+0x274>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f003 0302 	and.w	r3, r3, #2
 800a084:	2b00      	cmp	r3, #0
 800a086:	d0f0      	beq.n	800a06a <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a088:	4b36      	ldr	r3, [pc, #216]	; (800a164 <HAL_RCC_OscConfig+0x274>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	4a35      	ldr	r2, [pc, #212]	; (800a164 <HAL_RCC_OscConfig+0x274>)
 800a08e:	f043 0308 	orr.w	r3, r3, #8
 800a092:	6013      	str	r3, [r2, #0]
 800a094:	4b33      	ldr	r3, [pc, #204]	; (800a164 <HAL_RCC_OscConfig+0x274>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0a0:	4930      	ldr	r1, [pc, #192]	; (800a164 <HAL_RCC_OscConfig+0x274>)
 800a0a2:	4313      	orrs	r3, r2
 800a0a4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a0a6:	4b2f      	ldr	r3, [pc, #188]	; (800a164 <HAL_RCC_OscConfig+0x274>)
 800a0a8:	685b      	ldr	r3, [r3, #4]
 800a0aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6a1b      	ldr	r3, [r3, #32]
 800a0b2:	021b      	lsls	r3, r3, #8
 800a0b4:	492b      	ldr	r1, [pc, #172]	; (800a164 <HAL_RCC_OscConfig+0x274>)
 800a0b6:	4313      	orrs	r3, r2
 800a0b8:	604b      	str	r3, [r1, #4]
 800a0ba:	e01a      	b.n	800a0f2 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800a0bc:	4b29      	ldr	r3, [pc, #164]	; (800a164 <HAL_RCC_OscConfig+0x274>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	4a28      	ldr	r2, [pc, #160]	; (800a164 <HAL_RCC_OscConfig+0x274>)
 800a0c2:	f023 0301 	bic.w	r3, r3, #1
 800a0c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a0c8:	f7fe ffa6 	bl	8009018 <HAL_GetTick>
 800a0cc:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a0ce:	e008      	b.n	800a0e2 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a0d0:	f7fe ffa2 	bl	8009018 <HAL_GetTick>
 800a0d4:	4602      	mov	r2, r0
 800a0d6:	69bb      	ldr	r3, [r7, #24]
 800a0d8:	1ad3      	subs	r3, r2, r3
 800a0da:	2b02      	cmp	r3, #2
 800a0dc:	d901      	bls.n	800a0e2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800a0de:	2303      	movs	r3, #3
 800a0e0:	e378      	b.n	800a7d4 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a0e2:	4b20      	ldr	r3, [pc, #128]	; (800a164 <HAL_RCC_OscConfig+0x274>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f003 0302 	and.w	r3, r3, #2
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d1f0      	bne.n	800a0d0 <HAL_RCC_OscConfig+0x1e0>
 800a0ee:	e000      	b.n	800a0f2 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a0f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f003 0301 	and.w	r3, r3, #1
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d073      	beq.n	800a1e6 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800a0fe:	6a3b      	ldr	r3, [r7, #32]
 800a100:	2b08      	cmp	r3, #8
 800a102:	d005      	beq.n	800a110 <HAL_RCC_OscConfig+0x220>
 800a104:	6a3b      	ldr	r3, [r7, #32]
 800a106:	2b0c      	cmp	r3, #12
 800a108:	d10e      	bne.n	800a128 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800a10a:	69fb      	ldr	r3, [r7, #28]
 800a10c:	2b03      	cmp	r3, #3
 800a10e:	d10b      	bne.n	800a128 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a110:	4b14      	ldr	r3, [pc, #80]	; (800a164 <HAL_RCC_OscConfig+0x274>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d063      	beq.n	800a1e4 <HAL_RCC_OscConfig+0x2f4>
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	685b      	ldr	r3, [r3, #4]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d15f      	bne.n	800a1e4 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800a124:	2301      	movs	r3, #1
 800a126:	e355      	b.n	800a7d4 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	685b      	ldr	r3, [r3, #4]
 800a12c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a130:	d106      	bne.n	800a140 <HAL_RCC_OscConfig+0x250>
 800a132:	4b0c      	ldr	r3, [pc, #48]	; (800a164 <HAL_RCC_OscConfig+0x274>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	4a0b      	ldr	r2, [pc, #44]	; (800a164 <HAL_RCC_OscConfig+0x274>)
 800a138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a13c:	6013      	str	r3, [r2, #0]
 800a13e:	e025      	b.n	800a18c <HAL_RCC_OscConfig+0x29c>
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	685b      	ldr	r3, [r3, #4]
 800a144:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a148:	d114      	bne.n	800a174 <HAL_RCC_OscConfig+0x284>
 800a14a:	4b06      	ldr	r3, [pc, #24]	; (800a164 <HAL_RCC_OscConfig+0x274>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	4a05      	ldr	r2, [pc, #20]	; (800a164 <HAL_RCC_OscConfig+0x274>)
 800a150:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a154:	6013      	str	r3, [r2, #0]
 800a156:	4b03      	ldr	r3, [pc, #12]	; (800a164 <HAL_RCC_OscConfig+0x274>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	4a02      	ldr	r2, [pc, #8]	; (800a164 <HAL_RCC_OscConfig+0x274>)
 800a15c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a160:	6013      	str	r3, [r2, #0]
 800a162:	e013      	b.n	800a18c <HAL_RCC_OscConfig+0x29c>
 800a164:	40021000 	.word	0x40021000
 800a168:	0801a110 	.word	0x0801a110
 800a16c:	20000094 	.word	0x20000094
 800a170:	20000098 	.word	0x20000098
 800a174:	4b8f      	ldr	r3, [pc, #572]	; (800a3b4 <HAL_RCC_OscConfig+0x4c4>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	4a8e      	ldr	r2, [pc, #568]	; (800a3b4 <HAL_RCC_OscConfig+0x4c4>)
 800a17a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a17e:	6013      	str	r3, [r2, #0]
 800a180:	4b8c      	ldr	r3, [pc, #560]	; (800a3b4 <HAL_RCC_OscConfig+0x4c4>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	4a8b      	ldr	r2, [pc, #556]	; (800a3b4 <HAL_RCC_OscConfig+0x4c4>)
 800a186:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a18a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	685b      	ldr	r3, [r3, #4]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d013      	beq.n	800a1bc <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a194:	f7fe ff40 	bl	8009018 <HAL_GetTick>
 800a198:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a19a:	e008      	b.n	800a1ae <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a19c:	f7fe ff3c 	bl	8009018 <HAL_GetTick>
 800a1a0:	4602      	mov	r2, r0
 800a1a2:	69bb      	ldr	r3, [r7, #24]
 800a1a4:	1ad3      	subs	r3, r2, r3
 800a1a6:	2b64      	cmp	r3, #100	; 0x64
 800a1a8:	d901      	bls.n	800a1ae <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 800a1aa:	2303      	movs	r3, #3
 800a1ac:	e312      	b.n	800a7d4 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a1ae:	4b81      	ldr	r3, [pc, #516]	; (800a3b4 <HAL_RCC_OscConfig+0x4c4>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d0f0      	beq.n	800a19c <HAL_RCC_OscConfig+0x2ac>
 800a1ba:	e014      	b.n	800a1e6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1bc:	f7fe ff2c 	bl	8009018 <HAL_GetTick>
 800a1c0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a1c2:	e008      	b.n	800a1d6 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a1c4:	f7fe ff28 	bl	8009018 <HAL_GetTick>
 800a1c8:	4602      	mov	r2, r0
 800a1ca:	69bb      	ldr	r3, [r7, #24]
 800a1cc:	1ad3      	subs	r3, r2, r3
 800a1ce:	2b64      	cmp	r3, #100	; 0x64
 800a1d0:	d901      	bls.n	800a1d6 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800a1d2:	2303      	movs	r3, #3
 800a1d4:	e2fe      	b.n	800a7d4 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a1d6:	4b77      	ldr	r3, [pc, #476]	; (800a3b4 <HAL_RCC_OscConfig+0x4c4>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d1f0      	bne.n	800a1c4 <HAL_RCC_OscConfig+0x2d4>
 800a1e2:	e000      	b.n	800a1e6 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a1e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f003 0302 	and.w	r3, r3, #2
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d060      	beq.n	800a2b4 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800a1f2:	6a3b      	ldr	r3, [r7, #32]
 800a1f4:	2b04      	cmp	r3, #4
 800a1f6:	d005      	beq.n	800a204 <HAL_RCC_OscConfig+0x314>
 800a1f8:	6a3b      	ldr	r3, [r7, #32]
 800a1fa:	2b0c      	cmp	r3, #12
 800a1fc:	d119      	bne.n	800a232 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800a1fe:	69fb      	ldr	r3, [r7, #28]
 800a200:	2b02      	cmp	r3, #2
 800a202:	d116      	bne.n	800a232 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a204:	4b6b      	ldr	r3, [pc, #428]	; (800a3b4 <HAL_RCC_OscConfig+0x4c4>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d005      	beq.n	800a21c <HAL_RCC_OscConfig+0x32c>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	68db      	ldr	r3, [r3, #12]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d101      	bne.n	800a21c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 800a218:	2301      	movs	r3, #1
 800a21a:	e2db      	b.n	800a7d4 <HAL_RCC_OscConfig+0x8e4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a21c:	4b65      	ldr	r3, [pc, #404]	; (800a3b4 <HAL_RCC_OscConfig+0x4c4>)
 800a21e:	685b      	ldr	r3, [r3, #4]
 800a220:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	691b      	ldr	r3, [r3, #16]
 800a228:	061b      	lsls	r3, r3, #24
 800a22a:	4962      	ldr	r1, [pc, #392]	; (800a3b4 <HAL_RCC_OscConfig+0x4c4>)
 800a22c:	4313      	orrs	r3, r2
 800a22e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a230:	e040      	b.n	800a2b4 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	68db      	ldr	r3, [r3, #12]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d023      	beq.n	800a282 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a23a:	4b5e      	ldr	r3, [pc, #376]	; (800a3b4 <HAL_RCC_OscConfig+0x4c4>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	4a5d      	ldr	r2, [pc, #372]	; (800a3b4 <HAL_RCC_OscConfig+0x4c4>)
 800a240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a244:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a246:	f7fe fee7 	bl	8009018 <HAL_GetTick>
 800a24a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a24c:	e008      	b.n	800a260 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a24e:	f7fe fee3 	bl	8009018 <HAL_GetTick>
 800a252:	4602      	mov	r2, r0
 800a254:	69bb      	ldr	r3, [r7, #24]
 800a256:	1ad3      	subs	r3, r2, r3
 800a258:	2b02      	cmp	r3, #2
 800a25a:	d901      	bls.n	800a260 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 800a25c:	2303      	movs	r3, #3
 800a25e:	e2b9      	b.n	800a7d4 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a260:	4b54      	ldr	r3, [pc, #336]	; (800a3b4 <HAL_RCC_OscConfig+0x4c4>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d0f0      	beq.n	800a24e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a26c:	4b51      	ldr	r3, [pc, #324]	; (800a3b4 <HAL_RCC_OscConfig+0x4c4>)
 800a26e:	685b      	ldr	r3, [r3, #4]
 800a270:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	691b      	ldr	r3, [r3, #16]
 800a278:	061b      	lsls	r3, r3, #24
 800a27a:	494e      	ldr	r1, [pc, #312]	; (800a3b4 <HAL_RCC_OscConfig+0x4c4>)
 800a27c:	4313      	orrs	r3, r2
 800a27e:	604b      	str	r3, [r1, #4]
 800a280:	e018      	b.n	800a2b4 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a282:	4b4c      	ldr	r3, [pc, #304]	; (800a3b4 <HAL_RCC_OscConfig+0x4c4>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	4a4b      	ldr	r2, [pc, #300]	; (800a3b4 <HAL_RCC_OscConfig+0x4c4>)
 800a288:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a28c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a28e:	f7fe fec3 	bl	8009018 <HAL_GetTick>
 800a292:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a294:	e008      	b.n	800a2a8 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a296:	f7fe febf 	bl	8009018 <HAL_GetTick>
 800a29a:	4602      	mov	r2, r0
 800a29c:	69bb      	ldr	r3, [r7, #24]
 800a29e:	1ad3      	subs	r3, r2, r3
 800a2a0:	2b02      	cmp	r3, #2
 800a2a2:	d901      	bls.n	800a2a8 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 800a2a4:	2303      	movs	r3, #3
 800a2a6:	e295      	b.n	800a7d4 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a2a8:	4b42      	ldr	r3, [pc, #264]	; (800a3b4 <HAL_RCC_OscConfig+0x4c4>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d1f0      	bne.n	800a296 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	f003 0308 	and.w	r3, r3, #8
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	f000 8082 	beq.w	800a3c6 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	695b      	ldr	r3, [r3, #20]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d05f      	beq.n	800a38a <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 800a2ca:	4b3a      	ldr	r3, [pc, #232]	; (800a3b4 <HAL_RCC_OscConfig+0x4c4>)
 800a2cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a2d0:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	699a      	ldr	r2, [r3, #24]
 800a2d6:	693b      	ldr	r3, [r7, #16]
 800a2d8:	f003 0310 	and.w	r3, r3, #16
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	d037      	beq.n	800a350 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	f003 0302 	and.w	r3, r3, #2
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d006      	beq.n	800a2f8 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d101      	bne.n	800a2f8 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	e26d      	b.n	800a7d4 <HAL_RCC_OscConfig+0x8e4>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	f003 0301 	and.w	r3, r3, #1
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d01b      	beq.n	800a33a <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 800a302:	4b2c      	ldr	r3, [pc, #176]	; (800a3b4 <HAL_RCC_OscConfig+0x4c4>)
 800a304:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a308:	4a2a      	ldr	r2, [pc, #168]	; (800a3b4 <HAL_RCC_OscConfig+0x4c4>)
 800a30a:	f023 0301 	bic.w	r3, r3, #1
 800a30e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a312:	f7fe fe81 	bl	8009018 <HAL_GetTick>
 800a316:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a318:	e008      	b.n	800a32c <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a31a:	f7fe fe7d 	bl	8009018 <HAL_GetTick>
 800a31e:	4602      	mov	r2, r0
 800a320:	69bb      	ldr	r3, [r7, #24]
 800a322:	1ad3      	subs	r3, r2, r3
 800a324:	2b11      	cmp	r3, #17
 800a326:	d901      	bls.n	800a32c <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 800a328:	2303      	movs	r3, #3
 800a32a:	e253      	b.n	800a7d4 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a32c:	4b21      	ldr	r3, [pc, #132]	; (800a3b4 <HAL_RCC_OscConfig+0x4c4>)
 800a32e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a332:	f003 0302 	and.w	r3, r3, #2
 800a336:	2b00      	cmp	r3, #0
 800a338:	d1ef      	bne.n	800a31a <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 800a33a:	4b1e      	ldr	r3, [pc, #120]	; (800a3b4 <HAL_RCC_OscConfig+0x4c4>)
 800a33c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a340:	f023 0210 	bic.w	r2, r3, #16
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	699b      	ldr	r3, [r3, #24]
 800a348:	491a      	ldr	r1, [pc, #104]	; (800a3b4 <HAL_RCC_OscConfig+0x4c4>)
 800a34a:	4313      	orrs	r3, r2
 800a34c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a350:	4b18      	ldr	r3, [pc, #96]	; (800a3b4 <HAL_RCC_OscConfig+0x4c4>)
 800a352:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a356:	4a17      	ldr	r2, [pc, #92]	; (800a3b4 <HAL_RCC_OscConfig+0x4c4>)
 800a358:	f043 0301 	orr.w	r3, r3, #1
 800a35c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a360:	f7fe fe5a 	bl	8009018 <HAL_GetTick>
 800a364:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a366:	e008      	b.n	800a37a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a368:	f7fe fe56 	bl	8009018 <HAL_GetTick>
 800a36c:	4602      	mov	r2, r0
 800a36e:	69bb      	ldr	r3, [r7, #24]
 800a370:	1ad3      	subs	r3, r2, r3
 800a372:	2b11      	cmp	r3, #17
 800a374:	d901      	bls.n	800a37a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800a376:	2303      	movs	r3, #3
 800a378:	e22c      	b.n	800a7d4 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a37a:	4b0e      	ldr	r3, [pc, #56]	; (800a3b4 <HAL_RCC_OscConfig+0x4c4>)
 800a37c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a380:	f003 0302 	and.w	r3, r3, #2
 800a384:	2b00      	cmp	r3, #0
 800a386:	d0ef      	beq.n	800a368 <HAL_RCC_OscConfig+0x478>
 800a388:	e01d      	b.n	800a3c6 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a38a:	4b0a      	ldr	r3, [pc, #40]	; (800a3b4 <HAL_RCC_OscConfig+0x4c4>)
 800a38c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a390:	4a08      	ldr	r2, [pc, #32]	; (800a3b4 <HAL_RCC_OscConfig+0x4c4>)
 800a392:	f023 0301 	bic.w	r3, r3, #1
 800a396:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a39a:	f7fe fe3d 	bl	8009018 <HAL_GetTick>
 800a39e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a3a0:	e00a      	b.n	800a3b8 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a3a2:	f7fe fe39 	bl	8009018 <HAL_GetTick>
 800a3a6:	4602      	mov	r2, r0
 800a3a8:	69bb      	ldr	r3, [r7, #24]
 800a3aa:	1ad3      	subs	r3, r2, r3
 800a3ac:	2b11      	cmp	r3, #17
 800a3ae:	d903      	bls.n	800a3b8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 800a3b0:	2303      	movs	r3, #3
 800a3b2:	e20f      	b.n	800a7d4 <HAL_RCC_OscConfig+0x8e4>
 800a3b4:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a3b8:	4b83      	ldr	r3, [pc, #524]	; (800a5c8 <HAL_RCC_OscConfig+0x6d8>)
 800a3ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a3be:	f003 0302 	and.w	r3, r3, #2
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d1ed      	bne.n	800a3a2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f003 0304 	and.w	r3, r3, #4
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	f000 80bd 	beq.w	800a54e <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800a3da:	4b7b      	ldr	r3, [pc, #492]	; (800a5c8 <HAL_RCC_OscConfig+0x6d8>)
 800a3dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d10e      	bne.n	800a404 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a3e6:	4b78      	ldr	r3, [pc, #480]	; (800a5c8 <HAL_RCC_OscConfig+0x6d8>)
 800a3e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3ea:	4a77      	ldr	r2, [pc, #476]	; (800a5c8 <HAL_RCC_OscConfig+0x6d8>)
 800a3ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a3f0:	6593      	str	r3, [r2, #88]	; 0x58
 800a3f2:	4b75      	ldr	r3, [pc, #468]	; (800a5c8 <HAL_RCC_OscConfig+0x6d8>)
 800a3f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a3fa:	60fb      	str	r3, [r7, #12]
 800a3fc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800a3fe:	2301      	movs	r3, #1
 800a400:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a404:	4b71      	ldr	r3, [pc, #452]	; (800a5cc <HAL_RCC_OscConfig+0x6dc>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d118      	bne.n	800a442 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a410:	4b6e      	ldr	r3, [pc, #440]	; (800a5cc <HAL_RCC_OscConfig+0x6dc>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	4a6d      	ldr	r2, [pc, #436]	; (800a5cc <HAL_RCC_OscConfig+0x6dc>)
 800a416:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a41a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a41c:	f7fe fdfc 	bl	8009018 <HAL_GetTick>
 800a420:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a422:	e008      	b.n	800a436 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a424:	f7fe fdf8 	bl	8009018 <HAL_GetTick>
 800a428:	4602      	mov	r2, r0
 800a42a:	69bb      	ldr	r3, [r7, #24]
 800a42c:	1ad3      	subs	r3, r2, r3
 800a42e:	2b02      	cmp	r3, #2
 800a430:	d901      	bls.n	800a436 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 800a432:	2303      	movs	r3, #3
 800a434:	e1ce      	b.n	800a7d4 <HAL_RCC_OscConfig+0x8e4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a436:	4b65      	ldr	r3, [pc, #404]	; (800a5cc <HAL_RCC_OscConfig+0x6dc>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d0f0      	beq.n	800a424 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	689b      	ldr	r3, [r3, #8]
 800a446:	f003 0301 	and.w	r3, r3, #1
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d02c      	beq.n	800a4a8 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800a44e:	4b5e      	ldr	r3, [pc, #376]	; (800a5c8 <HAL_RCC_OscConfig+0x6d8>)
 800a450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a454:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	689b      	ldr	r3, [r3, #8]
 800a45c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a460:	4959      	ldr	r1, [pc, #356]	; (800a5c8 <HAL_RCC_OscConfig+0x6d8>)
 800a462:	4313      	orrs	r3, r2
 800a464:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	689b      	ldr	r3, [r3, #8]
 800a46c:	f003 0304 	and.w	r3, r3, #4
 800a470:	2b00      	cmp	r3, #0
 800a472:	d010      	beq.n	800a496 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a474:	4b54      	ldr	r3, [pc, #336]	; (800a5c8 <HAL_RCC_OscConfig+0x6d8>)
 800a476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a47a:	4a53      	ldr	r2, [pc, #332]	; (800a5c8 <HAL_RCC_OscConfig+0x6d8>)
 800a47c:	f043 0304 	orr.w	r3, r3, #4
 800a480:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a484:	4b50      	ldr	r3, [pc, #320]	; (800a5c8 <HAL_RCC_OscConfig+0x6d8>)
 800a486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a48a:	4a4f      	ldr	r2, [pc, #316]	; (800a5c8 <HAL_RCC_OscConfig+0x6d8>)
 800a48c:	f043 0301 	orr.w	r3, r3, #1
 800a490:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a494:	e018      	b.n	800a4c8 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a496:	4b4c      	ldr	r3, [pc, #304]	; (800a5c8 <HAL_RCC_OscConfig+0x6d8>)
 800a498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a49c:	4a4a      	ldr	r2, [pc, #296]	; (800a5c8 <HAL_RCC_OscConfig+0x6d8>)
 800a49e:	f043 0301 	orr.w	r3, r3, #1
 800a4a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a4a6:	e00f      	b.n	800a4c8 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a4a8:	4b47      	ldr	r3, [pc, #284]	; (800a5c8 <HAL_RCC_OscConfig+0x6d8>)
 800a4aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4ae:	4a46      	ldr	r2, [pc, #280]	; (800a5c8 <HAL_RCC_OscConfig+0x6d8>)
 800a4b0:	f023 0301 	bic.w	r3, r3, #1
 800a4b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a4b8:	4b43      	ldr	r3, [pc, #268]	; (800a5c8 <HAL_RCC_OscConfig+0x6d8>)
 800a4ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4be:	4a42      	ldr	r2, [pc, #264]	; (800a5c8 <HAL_RCC_OscConfig+0x6d8>)
 800a4c0:	f023 0304 	bic.w	r3, r3, #4
 800a4c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	689b      	ldr	r3, [r3, #8]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d016      	beq.n	800a4fe <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a4d0:	f7fe fda2 	bl	8009018 <HAL_GetTick>
 800a4d4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a4d6:	e00a      	b.n	800a4ee <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a4d8:	f7fe fd9e 	bl	8009018 <HAL_GetTick>
 800a4dc:	4602      	mov	r2, r0
 800a4de:	69bb      	ldr	r3, [r7, #24]
 800a4e0:	1ad3      	subs	r3, r2, r3
 800a4e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	d901      	bls.n	800a4ee <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 800a4ea:	2303      	movs	r3, #3
 800a4ec:	e172      	b.n	800a7d4 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a4ee:	4b36      	ldr	r3, [pc, #216]	; (800a5c8 <HAL_RCC_OscConfig+0x6d8>)
 800a4f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4f4:	f003 0302 	and.w	r3, r3, #2
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d0ed      	beq.n	800a4d8 <HAL_RCC_OscConfig+0x5e8>
 800a4fc:	e01d      	b.n	800a53a <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a4fe:	f7fe fd8b 	bl	8009018 <HAL_GetTick>
 800a502:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a504:	e00a      	b.n	800a51c <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a506:	f7fe fd87 	bl	8009018 <HAL_GetTick>
 800a50a:	4602      	mov	r2, r0
 800a50c:	69bb      	ldr	r3, [r7, #24]
 800a50e:	1ad3      	subs	r3, r2, r3
 800a510:	f241 3288 	movw	r2, #5000	; 0x1388
 800a514:	4293      	cmp	r3, r2
 800a516:	d901      	bls.n	800a51c <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 800a518:	2303      	movs	r3, #3
 800a51a:	e15b      	b.n	800a7d4 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a51c:	4b2a      	ldr	r3, [pc, #168]	; (800a5c8 <HAL_RCC_OscConfig+0x6d8>)
 800a51e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a522:	f003 0302 	and.w	r3, r3, #2
 800a526:	2b00      	cmp	r3, #0
 800a528:	d1ed      	bne.n	800a506 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800a52a:	4b27      	ldr	r3, [pc, #156]	; (800a5c8 <HAL_RCC_OscConfig+0x6d8>)
 800a52c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a530:	4a25      	ldr	r2, [pc, #148]	; (800a5c8 <HAL_RCC_OscConfig+0x6d8>)
 800a532:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a536:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a53a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a53e:	2b01      	cmp	r3, #1
 800a540:	d105      	bne.n	800a54e <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a542:	4b21      	ldr	r3, [pc, #132]	; (800a5c8 <HAL_RCC_OscConfig+0x6d8>)
 800a544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a546:	4a20      	ldr	r2, [pc, #128]	; (800a5c8 <HAL_RCC_OscConfig+0x6d8>)
 800a548:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a54c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f003 0320 	and.w	r3, r3, #32
 800a556:	2b00      	cmp	r3, #0
 800a558:	d041      	beq.n	800a5de <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d01c      	beq.n	800a59c <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a562:	4b19      	ldr	r3, [pc, #100]	; (800a5c8 <HAL_RCC_OscConfig+0x6d8>)
 800a564:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a568:	4a17      	ldr	r2, [pc, #92]	; (800a5c8 <HAL_RCC_OscConfig+0x6d8>)
 800a56a:	f043 0301 	orr.w	r3, r3, #1
 800a56e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a572:	f7fe fd51 	bl	8009018 <HAL_GetTick>
 800a576:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a578:	e008      	b.n	800a58c <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a57a:	f7fe fd4d 	bl	8009018 <HAL_GetTick>
 800a57e:	4602      	mov	r2, r0
 800a580:	69bb      	ldr	r3, [r7, #24]
 800a582:	1ad3      	subs	r3, r2, r3
 800a584:	2b02      	cmp	r3, #2
 800a586:	d901      	bls.n	800a58c <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 800a588:	2303      	movs	r3, #3
 800a58a:	e123      	b.n	800a7d4 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a58c:	4b0e      	ldr	r3, [pc, #56]	; (800a5c8 <HAL_RCC_OscConfig+0x6d8>)
 800a58e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a592:	f003 0302 	and.w	r3, r3, #2
 800a596:	2b00      	cmp	r3, #0
 800a598:	d0ef      	beq.n	800a57a <HAL_RCC_OscConfig+0x68a>
 800a59a:	e020      	b.n	800a5de <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a59c:	4b0a      	ldr	r3, [pc, #40]	; (800a5c8 <HAL_RCC_OscConfig+0x6d8>)
 800a59e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a5a2:	4a09      	ldr	r2, [pc, #36]	; (800a5c8 <HAL_RCC_OscConfig+0x6d8>)
 800a5a4:	f023 0301 	bic.w	r3, r3, #1
 800a5a8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a5ac:	f7fe fd34 	bl	8009018 <HAL_GetTick>
 800a5b0:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a5b2:	e00d      	b.n	800a5d0 <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a5b4:	f7fe fd30 	bl	8009018 <HAL_GetTick>
 800a5b8:	4602      	mov	r2, r0
 800a5ba:	69bb      	ldr	r3, [r7, #24]
 800a5bc:	1ad3      	subs	r3, r2, r3
 800a5be:	2b02      	cmp	r3, #2
 800a5c0:	d906      	bls.n	800a5d0 <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 800a5c2:	2303      	movs	r3, #3
 800a5c4:	e106      	b.n	800a7d4 <HAL_RCC_OscConfig+0x8e4>
 800a5c6:	bf00      	nop
 800a5c8:	40021000 	.word	0x40021000
 800a5cc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a5d0:	4b82      	ldr	r3, [pc, #520]	; (800a7dc <HAL_RCC_OscConfig+0x8ec>)
 800a5d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a5d6:	f003 0302 	and.w	r3, r3, #2
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d1ea      	bne.n	800a5b4 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	f000 80f5 	beq.w	800a7d2 <HAL_RCC_OscConfig+0x8e2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5ec:	2b02      	cmp	r3, #2
 800a5ee:	f040 80cb 	bne.w	800a788 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800a5f2:	4b7a      	ldr	r3, [pc, #488]	; (800a7dc <HAL_RCC_OscConfig+0x8ec>)
 800a5f4:	68db      	ldr	r3, [r3, #12]
 800a5f6:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a5f8:	69fb      	ldr	r3, [r7, #28]
 800a5fa:	f003 0203 	and.w	r2, r3, #3
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a602:	429a      	cmp	r2, r3
 800a604:	d12c      	bne.n	800a660 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a606:	69fb      	ldr	r3, [r7, #28]
 800a608:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a610:	3b01      	subs	r3, #1
 800a612:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a614:	429a      	cmp	r2, r3
 800a616:	d123      	bne.n	800a660 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a618:	69fb      	ldr	r3, [r7, #28]
 800a61a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a622:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a624:	429a      	cmp	r2, r3
 800a626:	d11b      	bne.n	800a660 <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a628:	69fb      	ldr	r3, [r7, #28]
 800a62a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a632:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a634:	429a      	cmp	r2, r3
 800a636:	d113      	bne.n	800a660 <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a638:	69fb      	ldr	r3, [r7, #28]
 800a63a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a642:	085b      	lsrs	r3, r3, #1
 800a644:	3b01      	subs	r3, #1
 800a646:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a648:	429a      	cmp	r2, r3
 800a64a:	d109      	bne.n	800a660 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a64c:	69fb      	ldr	r3, [r7, #28]
 800a64e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a656:	085b      	lsrs	r3, r3, #1
 800a658:	3b01      	subs	r3, #1
 800a65a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a65c:	429a      	cmp	r2, r3
 800a65e:	d06d      	beq.n	800a73c <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a660:	6a3b      	ldr	r3, [r7, #32]
 800a662:	2b0c      	cmp	r3, #12
 800a664:	d068      	beq.n	800a738 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800a666:	4b5d      	ldr	r3, [pc, #372]	; (800a7dc <HAL_RCC_OscConfig+0x8ec>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d105      	bne.n	800a67e <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800a672:	4b5a      	ldr	r3, [pc, #360]	; (800a7dc <HAL_RCC_OscConfig+0x8ec>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d001      	beq.n	800a682 <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 800a67e:	2301      	movs	r3, #1
 800a680:	e0a8      	b.n	800a7d4 <HAL_RCC_OscConfig+0x8e4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800a682:	4b56      	ldr	r3, [pc, #344]	; (800a7dc <HAL_RCC_OscConfig+0x8ec>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	4a55      	ldr	r2, [pc, #340]	; (800a7dc <HAL_RCC_OscConfig+0x8ec>)
 800a688:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a68c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a68e:	f7fe fcc3 	bl	8009018 <HAL_GetTick>
 800a692:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a694:	e008      	b.n	800a6a8 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a696:	f7fe fcbf 	bl	8009018 <HAL_GetTick>
 800a69a:	4602      	mov	r2, r0
 800a69c:	69bb      	ldr	r3, [r7, #24]
 800a69e:	1ad3      	subs	r3, r2, r3
 800a6a0:	2b02      	cmp	r3, #2
 800a6a2:	d901      	bls.n	800a6a8 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 800a6a4:	2303      	movs	r3, #3
 800a6a6:	e095      	b.n	800a7d4 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a6a8:	4b4c      	ldr	r3, [pc, #304]	; (800a7dc <HAL_RCC_OscConfig+0x8ec>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d1f0      	bne.n	800a696 <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a6b4:	4b49      	ldr	r3, [pc, #292]	; (800a7dc <HAL_RCC_OscConfig+0x8ec>)
 800a6b6:	68da      	ldr	r2, [r3, #12]
 800a6b8:	4b49      	ldr	r3, [pc, #292]	; (800a7e0 <HAL_RCC_OscConfig+0x8f0>)
 800a6ba:	4013      	ands	r3, r2
 800a6bc:	687a      	ldr	r2, [r7, #4]
 800a6be:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800a6c0:	687a      	ldr	r2, [r7, #4]
 800a6c2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a6c4:	3a01      	subs	r2, #1
 800a6c6:	0112      	lsls	r2, r2, #4
 800a6c8:	4311      	orrs	r1, r2
 800a6ca:	687a      	ldr	r2, [r7, #4]
 800a6cc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a6ce:	0212      	lsls	r2, r2, #8
 800a6d0:	4311      	orrs	r1, r2
 800a6d2:	687a      	ldr	r2, [r7, #4]
 800a6d4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800a6d6:	0852      	lsrs	r2, r2, #1
 800a6d8:	3a01      	subs	r2, #1
 800a6da:	0552      	lsls	r2, r2, #21
 800a6dc:	4311      	orrs	r1, r2
 800a6de:	687a      	ldr	r2, [r7, #4]
 800a6e0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800a6e2:	0852      	lsrs	r2, r2, #1
 800a6e4:	3a01      	subs	r2, #1
 800a6e6:	0652      	lsls	r2, r2, #25
 800a6e8:	4311      	orrs	r1, r2
 800a6ea:	687a      	ldr	r2, [r7, #4]
 800a6ec:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800a6ee:	06d2      	lsls	r2, r2, #27
 800a6f0:	430a      	orrs	r2, r1
 800a6f2:	493a      	ldr	r1, [pc, #232]	; (800a7dc <HAL_RCC_OscConfig+0x8ec>)
 800a6f4:	4313      	orrs	r3, r2
 800a6f6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800a6f8:	4b38      	ldr	r3, [pc, #224]	; (800a7dc <HAL_RCC_OscConfig+0x8ec>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	4a37      	ldr	r2, [pc, #220]	; (800a7dc <HAL_RCC_OscConfig+0x8ec>)
 800a6fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a702:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a704:	4b35      	ldr	r3, [pc, #212]	; (800a7dc <HAL_RCC_OscConfig+0x8ec>)
 800a706:	68db      	ldr	r3, [r3, #12]
 800a708:	4a34      	ldr	r2, [pc, #208]	; (800a7dc <HAL_RCC_OscConfig+0x8ec>)
 800a70a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a70e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a710:	f7fe fc82 	bl	8009018 <HAL_GetTick>
 800a714:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a716:	e008      	b.n	800a72a <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a718:	f7fe fc7e 	bl	8009018 <HAL_GetTick>
 800a71c:	4602      	mov	r2, r0
 800a71e:	69bb      	ldr	r3, [r7, #24]
 800a720:	1ad3      	subs	r3, r2, r3
 800a722:	2b02      	cmp	r3, #2
 800a724:	d901      	bls.n	800a72a <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 800a726:	2303      	movs	r3, #3
 800a728:	e054      	b.n	800a7d4 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a72a:	4b2c      	ldr	r3, [pc, #176]	; (800a7dc <HAL_RCC_OscConfig+0x8ec>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a732:	2b00      	cmp	r3, #0
 800a734:	d0f0      	beq.n	800a718 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a736:	e04c      	b.n	800a7d2 <HAL_RCC_OscConfig+0x8e2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800a738:	2301      	movs	r3, #1
 800a73a:	e04b      	b.n	800a7d4 <HAL_RCC_OscConfig+0x8e4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a73c:	4b27      	ldr	r3, [pc, #156]	; (800a7dc <HAL_RCC_OscConfig+0x8ec>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a744:	2b00      	cmp	r3, #0
 800a746:	d144      	bne.n	800a7d2 <HAL_RCC_OscConfig+0x8e2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800a748:	4b24      	ldr	r3, [pc, #144]	; (800a7dc <HAL_RCC_OscConfig+0x8ec>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	4a23      	ldr	r2, [pc, #140]	; (800a7dc <HAL_RCC_OscConfig+0x8ec>)
 800a74e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a752:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a754:	4b21      	ldr	r3, [pc, #132]	; (800a7dc <HAL_RCC_OscConfig+0x8ec>)
 800a756:	68db      	ldr	r3, [r3, #12]
 800a758:	4a20      	ldr	r2, [pc, #128]	; (800a7dc <HAL_RCC_OscConfig+0x8ec>)
 800a75a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a75e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a760:	f7fe fc5a 	bl	8009018 <HAL_GetTick>
 800a764:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a766:	e008      	b.n	800a77a <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a768:	f7fe fc56 	bl	8009018 <HAL_GetTick>
 800a76c:	4602      	mov	r2, r0
 800a76e:	69bb      	ldr	r3, [r7, #24]
 800a770:	1ad3      	subs	r3, r2, r3
 800a772:	2b02      	cmp	r3, #2
 800a774:	d901      	bls.n	800a77a <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 800a776:	2303      	movs	r3, #3
 800a778:	e02c      	b.n	800a7d4 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a77a:	4b18      	ldr	r3, [pc, #96]	; (800a7dc <HAL_RCC_OscConfig+0x8ec>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a782:	2b00      	cmp	r3, #0
 800a784:	d0f0      	beq.n	800a768 <HAL_RCC_OscConfig+0x878>
 800a786:	e024      	b.n	800a7d2 <HAL_RCC_OscConfig+0x8e2>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a788:	6a3b      	ldr	r3, [r7, #32]
 800a78a:	2b0c      	cmp	r3, #12
 800a78c:	d01f      	beq.n	800a7ce <HAL_RCC_OscConfig+0x8de>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a78e:	4b13      	ldr	r3, [pc, #76]	; (800a7dc <HAL_RCC_OscConfig+0x8ec>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	4a12      	ldr	r2, [pc, #72]	; (800a7dc <HAL_RCC_OscConfig+0x8ec>)
 800a794:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a798:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a79a:	f7fe fc3d 	bl	8009018 <HAL_GetTick>
 800a79e:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a7a0:	e008      	b.n	800a7b4 <HAL_RCC_OscConfig+0x8c4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a7a2:	f7fe fc39 	bl	8009018 <HAL_GetTick>
 800a7a6:	4602      	mov	r2, r0
 800a7a8:	69bb      	ldr	r3, [r7, #24]
 800a7aa:	1ad3      	subs	r3, r2, r3
 800a7ac:	2b02      	cmp	r3, #2
 800a7ae:	d901      	bls.n	800a7b4 <HAL_RCC_OscConfig+0x8c4>
          {
            return HAL_TIMEOUT;
 800a7b0:	2303      	movs	r3, #3
 800a7b2:	e00f      	b.n	800a7d4 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a7b4:	4b09      	ldr	r3, [pc, #36]	; (800a7dc <HAL_RCC_OscConfig+0x8ec>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d1f0      	bne.n	800a7a2 <HAL_RCC_OscConfig+0x8b2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800a7c0:	4b06      	ldr	r3, [pc, #24]	; (800a7dc <HAL_RCC_OscConfig+0x8ec>)
 800a7c2:	68da      	ldr	r2, [r3, #12]
 800a7c4:	4905      	ldr	r1, [pc, #20]	; (800a7dc <HAL_RCC_OscConfig+0x8ec>)
 800a7c6:	4b07      	ldr	r3, [pc, #28]	; (800a7e4 <HAL_RCC_OscConfig+0x8f4>)
 800a7c8:	4013      	ands	r3, r2
 800a7ca:	60cb      	str	r3, [r1, #12]
 800a7cc:	e001      	b.n	800a7d2 <HAL_RCC_OscConfig+0x8e2>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	e000      	b.n	800a7d4 <HAL_RCC_OscConfig+0x8e4>
      }
    }
  }
  return HAL_OK;
 800a7d2:	2300      	movs	r3, #0
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	3728      	adds	r7, #40	; 0x28
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}
 800a7dc:	40021000 	.word	0x40021000
 800a7e0:	019d800c 	.word	0x019d800c
 800a7e4:	feeefffc 	.word	0xfeeefffc

0800a7e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b086      	sub	sp, #24
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
 800a7f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d101      	bne.n	800a800 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	e11d      	b.n	800aa3c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a800:	4b90      	ldr	r3, [pc, #576]	; (800aa44 <HAL_RCC_ClockConfig+0x25c>)
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f003 030f 	and.w	r3, r3, #15
 800a808:	683a      	ldr	r2, [r7, #0]
 800a80a:	429a      	cmp	r2, r3
 800a80c:	d910      	bls.n	800a830 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a80e:	4b8d      	ldr	r3, [pc, #564]	; (800aa44 <HAL_RCC_ClockConfig+0x25c>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f023 020f 	bic.w	r2, r3, #15
 800a816:	498b      	ldr	r1, [pc, #556]	; (800aa44 <HAL_RCC_ClockConfig+0x25c>)
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	4313      	orrs	r3, r2
 800a81c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a81e:	4b89      	ldr	r3, [pc, #548]	; (800aa44 <HAL_RCC_ClockConfig+0x25c>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f003 030f 	and.w	r3, r3, #15
 800a826:	683a      	ldr	r2, [r7, #0]
 800a828:	429a      	cmp	r2, r3
 800a82a:	d001      	beq.n	800a830 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a82c:	2301      	movs	r3, #1
 800a82e:	e105      	b.n	800aa3c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f003 0302 	and.w	r3, r3, #2
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d010      	beq.n	800a85e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	689a      	ldr	r2, [r3, #8]
 800a840:	4b81      	ldr	r3, [pc, #516]	; (800aa48 <HAL_RCC_ClockConfig+0x260>)
 800a842:	689b      	ldr	r3, [r3, #8]
 800a844:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a848:	429a      	cmp	r2, r3
 800a84a:	d908      	bls.n	800a85e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a84c:	4b7e      	ldr	r3, [pc, #504]	; (800aa48 <HAL_RCC_ClockConfig+0x260>)
 800a84e:	689b      	ldr	r3, [r3, #8]
 800a850:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	689b      	ldr	r3, [r3, #8]
 800a858:	497b      	ldr	r1, [pc, #492]	; (800aa48 <HAL_RCC_ClockConfig+0x260>)
 800a85a:	4313      	orrs	r3, r2
 800a85c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f003 0301 	and.w	r3, r3, #1
 800a866:	2b00      	cmp	r3, #0
 800a868:	d079      	beq.n	800a95e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	685b      	ldr	r3, [r3, #4]
 800a86e:	2b03      	cmp	r3, #3
 800a870:	d11e      	bne.n	800a8b0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a872:	4b75      	ldr	r3, [pc, #468]	; (800aa48 <HAL_RCC_ClockConfig+0x260>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d101      	bne.n	800a882 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800a87e:	2301      	movs	r3, #1
 800a880:	e0dc      	b.n	800aa3c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800a882:	f000 fa3b 	bl	800acfc <RCC_GetSysClockFreqFromPLLSource>
 800a886:	4603      	mov	r3, r0
 800a888:	4a70      	ldr	r2, [pc, #448]	; (800aa4c <HAL_RCC_ClockConfig+0x264>)
 800a88a:	4293      	cmp	r3, r2
 800a88c:	d946      	bls.n	800a91c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800a88e:	4b6e      	ldr	r3, [pc, #440]	; (800aa48 <HAL_RCC_ClockConfig+0x260>)
 800a890:	689b      	ldr	r3, [r3, #8]
 800a892:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a896:	2b00      	cmp	r3, #0
 800a898:	d140      	bne.n	800a91c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a89a:	4b6b      	ldr	r3, [pc, #428]	; (800aa48 <HAL_RCC_ClockConfig+0x260>)
 800a89c:	689b      	ldr	r3, [r3, #8]
 800a89e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a8a2:	4a69      	ldr	r2, [pc, #420]	; (800aa48 <HAL_RCC_ClockConfig+0x260>)
 800a8a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8a8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800a8aa:	2380      	movs	r3, #128	; 0x80
 800a8ac:	617b      	str	r3, [r7, #20]
 800a8ae:	e035      	b.n	800a91c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	685b      	ldr	r3, [r3, #4]
 800a8b4:	2b02      	cmp	r3, #2
 800a8b6:	d107      	bne.n	800a8c8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a8b8:	4b63      	ldr	r3, [pc, #396]	; (800aa48 <HAL_RCC_ClockConfig+0x260>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d115      	bne.n	800a8f0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	e0b9      	b.n	800aa3c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	685b      	ldr	r3, [r3, #4]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d107      	bne.n	800a8e0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a8d0:	4b5d      	ldr	r3, [pc, #372]	; (800aa48 <HAL_RCC_ClockConfig+0x260>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f003 0302 	and.w	r3, r3, #2
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d109      	bne.n	800a8f0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800a8dc:	2301      	movs	r3, #1
 800a8de:	e0ad      	b.n	800aa3c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a8e0:	4b59      	ldr	r3, [pc, #356]	; (800aa48 <HAL_RCC_ClockConfig+0x260>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d101      	bne.n	800a8f0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	e0a5      	b.n	800aa3c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800a8f0:	f000 f8b4 	bl	800aa5c <HAL_RCC_GetSysClockFreq>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	4a55      	ldr	r2, [pc, #340]	; (800aa4c <HAL_RCC_ClockConfig+0x264>)
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	d90f      	bls.n	800a91c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800a8fc:	4b52      	ldr	r3, [pc, #328]	; (800aa48 <HAL_RCC_ClockConfig+0x260>)
 800a8fe:	689b      	ldr	r3, [r3, #8]
 800a900:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a904:	2b00      	cmp	r3, #0
 800a906:	d109      	bne.n	800a91c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a908:	4b4f      	ldr	r3, [pc, #316]	; (800aa48 <HAL_RCC_ClockConfig+0x260>)
 800a90a:	689b      	ldr	r3, [r3, #8]
 800a90c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a910:	4a4d      	ldr	r2, [pc, #308]	; (800aa48 <HAL_RCC_ClockConfig+0x260>)
 800a912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a916:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800a918:	2380      	movs	r3, #128	; 0x80
 800a91a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a91c:	4b4a      	ldr	r3, [pc, #296]	; (800aa48 <HAL_RCC_ClockConfig+0x260>)
 800a91e:	689b      	ldr	r3, [r3, #8]
 800a920:	f023 0203 	bic.w	r2, r3, #3
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	685b      	ldr	r3, [r3, #4]
 800a928:	4947      	ldr	r1, [pc, #284]	; (800aa48 <HAL_RCC_ClockConfig+0x260>)
 800a92a:	4313      	orrs	r3, r2
 800a92c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a92e:	f7fe fb73 	bl	8009018 <HAL_GetTick>
 800a932:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a934:	e00a      	b.n	800a94c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a936:	f7fe fb6f 	bl	8009018 <HAL_GetTick>
 800a93a:	4602      	mov	r2, r0
 800a93c:	693b      	ldr	r3, [r7, #16]
 800a93e:	1ad3      	subs	r3, r2, r3
 800a940:	f241 3288 	movw	r2, #5000	; 0x1388
 800a944:	4293      	cmp	r3, r2
 800a946:	d901      	bls.n	800a94c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800a948:	2303      	movs	r3, #3
 800a94a:	e077      	b.n	800aa3c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a94c:	4b3e      	ldr	r3, [pc, #248]	; (800aa48 <HAL_RCC_ClockConfig+0x260>)
 800a94e:	689b      	ldr	r3, [r3, #8]
 800a950:	f003 020c 	and.w	r2, r3, #12
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	685b      	ldr	r3, [r3, #4]
 800a958:	009b      	lsls	r3, r3, #2
 800a95a:	429a      	cmp	r2, r3
 800a95c:	d1eb      	bne.n	800a936 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	2b80      	cmp	r3, #128	; 0x80
 800a962:	d105      	bne.n	800a970 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800a964:	4b38      	ldr	r3, [pc, #224]	; (800aa48 <HAL_RCC_ClockConfig+0x260>)
 800a966:	689b      	ldr	r3, [r3, #8]
 800a968:	4a37      	ldr	r2, [pc, #220]	; (800aa48 <HAL_RCC_ClockConfig+0x260>)
 800a96a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a96e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	f003 0302 	and.w	r3, r3, #2
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d010      	beq.n	800a99e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	689a      	ldr	r2, [r3, #8]
 800a980:	4b31      	ldr	r3, [pc, #196]	; (800aa48 <HAL_RCC_ClockConfig+0x260>)
 800a982:	689b      	ldr	r3, [r3, #8]
 800a984:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a988:	429a      	cmp	r2, r3
 800a98a:	d208      	bcs.n	800a99e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a98c:	4b2e      	ldr	r3, [pc, #184]	; (800aa48 <HAL_RCC_ClockConfig+0x260>)
 800a98e:	689b      	ldr	r3, [r3, #8]
 800a990:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	689b      	ldr	r3, [r3, #8]
 800a998:	492b      	ldr	r1, [pc, #172]	; (800aa48 <HAL_RCC_ClockConfig+0x260>)
 800a99a:	4313      	orrs	r3, r2
 800a99c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a99e:	4b29      	ldr	r3, [pc, #164]	; (800aa44 <HAL_RCC_ClockConfig+0x25c>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	f003 030f 	and.w	r3, r3, #15
 800a9a6:	683a      	ldr	r2, [r7, #0]
 800a9a8:	429a      	cmp	r2, r3
 800a9aa:	d210      	bcs.n	800a9ce <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a9ac:	4b25      	ldr	r3, [pc, #148]	; (800aa44 <HAL_RCC_ClockConfig+0x25c>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	f023 020f 	bic.w	r2, r3, #15
 800a9b4:	4923      	ldr	r1, [pc, #140]	; (800aa44 <HAL_RCC_ClockConfig+0x25c>)
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	4313      	orrs	r3, r2
 800a9ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a9bc:	4b21      	ldr	r3, [pc, #132]	; (800aa44 <HAL_RCC_ClockConfig+0x25c>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	f003 030f 	and.w	r3, r3, #15
 800a9c4:	683a      	ldr	r2, [r7, #0]
 800a9c6:	429a      	cmp	r2, r3
 800a9c8:	d001      	beq.n	800a9ce <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	e036      	b.n	800aa3c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	f003 0304 	and.w	r3, r3, #4
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d008      	beq.n	800a9ec <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a9da:	4b1b      	ldr	r3, [pc, #108]	; (800aa48 <HAL_RCC_ClockConfig+0x260>)
 800a9dc:	689b      	ldr	r3, [r3, #8]
 800a9de:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	68db      	ldr	r3, [r3, #12]
 800a9e6:	4918      	ldr	r1, [pc, #96]	; (800aa48 <HAL_RCC_ClockConfig+0x260>)
 800a9e8:	4313      	orrs	r3, r2
 800a9ea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f003 0308 	and.w	r3, r3, #8
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d009      	beq.n	800aa0c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a9f8:	4b13      	ldr	r3, [pc, #76]	; (800aa48 <HAL_RCC_ClockConfig+0x260>)
 800a9fa:	689b      	ldr	r3, [r3, #8]
 800a9fc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	691b      	ldr	r3, [r3, #16]
 800aa04:	00db      	lsls	r3, r3, #3
 800aa06:	4910      	ldr	r1, [pc, #64]	; (800aa48 <HAL_RCC_ClockConfig+0x260>)
 800aa08:	4313      	orrs	r3, r2
 800aa0a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800aa0c:	f000 f826 	bl	800aa5c <HAL_RCC_GetSysClockFreq>
 800aa10:	4602      	mov	r2, r0
 800aa12:	4b0d      	ldr	r3, [pc, #52]	; (800aa48 <HAL_RCC_ClockConfig+0x260>)
 800aa14:	689b      	ldr	r3, [r3, #8]
 800aa16:	091b      	lsrs	r3, r3, #4
 800aa18:	f003 030f 	and.w	r3, r3, #15
 800aa1c:	490c      	ldr	r1, [pc, #48]	; (800aa50 <HAL_RCC_ClockConfig+0x268>)
 800aa1e:	5ccb      	ldrb	r3, [r1, r3]
 800aa20:	f003 031f 	and.w	r3, r3, #31
 800aa24:	fa22 f303 	lsr.w	r3, r2, r3
 800aa28:	4a0a      	ldr	r2, [pc, #40]	; (800aa54 <HAL_RCC_ClockConfig+0x26c>)
 800aa2a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800aa2c:	4b0a      	ldr	r3, [pc, #40]	; (800aa58 <HAL_RCC_ClockConfig+0x270>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	4618      	mov	r0, r3
 800aa32:	f7fd fee1 	bl	80087f8 <HAL_InitTick>
 800aa36:	4603      	mov	r3, r0
 800aa38:	73fb      	strb	r3, [r7, #15]

  return status;
 800aa3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	3718      	adds	r7, #24
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}
 800aa44:	40022000 	.word	0x40022000
 800aa48:	40021000 	.word	0x40021000
 800aa4c:	04c4b400 	.word	0x04c4b400
 800aa50:	0801a110 	.word	0x0801a110
 800aa54:	20000094 	.word	0x20000094
 800aa58:	20000098 	.word	0x20000098

0800aa5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b089      	sub	sp, #36	; 0x24
 800aa60:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800aa62:	2300      	movs	r3, #0
 800aa64:	61fb      	str	r3, [r7, #28]
 800aa66:	2300      	movs	r3, #0
 800aa68:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aa6a:	4b3e      	ldr	r3, [pc, #248]	; (800ab64 <HAL_RCC_GetSysClockFreq+0x108>)
 800aa6c:	689b      	ldr	r3, [r3, #8]
 800aa6e:	f003 030c 	and.w	r3, r3, #12
 800aa72:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800aa74:	4b3b      	ldr	r3, [pc, #236]	; (800ab64 <HAL_RCC_GetSysClockFreq+0x108>)
 800aa76:	68db      	ldr	r3, [r3, #12]
 800aa78:	f003 0303 	and.w	r3, r3, #3
 800aa7c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d005      	beq.n	800aa90 <HAL_RCC_GetSysClockFreq+0x34>
 800aa84:	693b      	ldr	r3, [r7, #16]
 800aa86:	2b0c      	cmp	r3, #12
 800aa88:	d121      	bne.n	800aace <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	2b01      	cmp	r3, #1
 800aa8e:	d11e      	bne.n	800aace <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800aa90:	4b34      	ldr	r3, [pc, #208]	; (800ab64 <HAL_RCC_GetSysClockFreq+0x108>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	f003 0308 	and.w	r3, r3, #8
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d107      	bne.n	800aaac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800aa9c:	4b31      	ldr	r3, [pc, #196]	; (800ab64 <HAL_RCC_GetSysClockFreq+0x108>)
 800aa9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aaa2:	0a1b      	lsrs	r3, r3, #8
 800aaa4:	f003 030f 	and.w	r3, r3, #15
 800aaa8:	61fb      	str	r3, [r7, #28]
 800aaaa:	e005      	b.n	800aab8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800aaac:	4b2d      	ldr	r3, [pc, #180]	; (800ab64 <HAL_RCC_GetSysClockFreq+0x108>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	091b      	lsrs	r3, r3, #4
 800aab2:	f003 030f 	and.w	r3, r3, #15
 800aab6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800aab8:	4a2b      	ldr	r2, [pc, #172]	; (800ab68 <HAL_RCC_GetSysClockFreq+0x10c>)
 800aaba:	69fb      	ldr	r3, [r7, #28]
 800aabc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aac0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800aac2:	693b      	ldr	r3, [r7, #16]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d10d      	bne.n	800aae4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800aac8:	69fb      	ldr	r3, [r7, #28]
 800aaca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800aacc:	e00a      	b.n	800aae4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800aace:	693b      	ldr	r3, [r7, #16]
 800aad0:	2b04      	cmp	r3, #4
 800aad2:	d102      	bne.n	800aada <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800aad4:	4b25      	ldr	r3, [pc, #148]	; (800ab6c <HAL_RCC_GetSysClockFreq+0x110>)
 800aad6:	61bb      	str	r3, [r7, #24]
 800aad8:	e004      	b.n	800aae4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800aada:	693b      	ldr	r3, [r7, #16]
 800aadc:	2b08      	cmp	r3, #8
 800aade:	d101      	bne.n	800aae4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800aae0:	4b23      	ldr	r3, [pc, #140]	; (800ab70 <HAL_RCC_GetSysClockFreq+0x114>)
 800aae2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800aae4:	693b      	ldr	r3, [r7, #16]
 800aae6:	2b0c      	cmp	r3, #12
 800aae8:	d134      	bne.n	800ab54 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800aaea:	4b1e      	ldr	r3, [pc, #120]	; (800ab64 <HAL_RCC_GetSysClockFreq+0x108>)
 800aaec:	68db      	ldr	r3, [r3, #12]
 800aaee:	f003 0303 	and.w	r3, r3, #3
 800aaf2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	2b02      	cmp	r3, #2
 800aaf8:	d003      	beq.n	800ab02 <HAL_RCC_GetSysClockFreq+0xa6>
 800aafa:	68bb      	ldr	r3, [r7, #8]
 800aafc:	2b03      	cmp	r3, #3
 800aafe:	d003      	beq.n	800ab08 <HAL_RCC_GetSysClockFreq+0xac>
 800ab00:	e005      	b.n	800ab0e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800ab02:	4b1a      	ldr	r3, [pc, #104]	; (800ab6c <HAL_RCC_GetSysClockFreq+0x110>)
 800ab04:	617b      	str	r3, [r7, #20]
      break;
 800ab06:	e005      	b.n	800ab14 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800ab08:	4b19      	ldr	r3, [pc, #100]	; (800ab70 <HAL_RCC_GetSysClockFreq+0x114>)
 800ab0a:	617b      	str	r3, [r7, #20]
      break;
 800ab0c:	e002      	b.n	800ab14 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800ab0e:	69fb      	ldr	r3, [r7, #28]
 800ab10:	617b      	str	r3, [r7, #20]
      break;
 800ab12:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ab14:	4b13      	ldr	r3, [pc, #76]	; (800ab64 <HAL_RCC_GetSysClockFreq+0x108>)
 800ab16:	68db      	ldr	r3, [r3, #12]
 800ab18:	091b      	lsrs	r3, r3, #4
 800ab1a:	f003 030f 	and.w	r3, r3, #15
 800ab1e:	3301      	adds	r3, #1
 800ab20:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800ab22:	4b10      	ldr	r3, [pc, #64]	; (800ab64 <HAL_RCC_GetSysClockFreq+0x108>)
 800ab24:	68db      	ldr	r3, [r3, #12]
 800ab26:	0a1b      	lsrs	r3, r3, #8
 800ab28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab2c:	697a      	ldr	r2, [r7, #20]
 800ab2e:	fb03 f202 	mul.w	r2, r3, r2
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab38:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800ab3a:	4b0a      	ldr	r3, [pc, #40]	; (800ab64 <HAL_RCC_GetSysClockFreq+0x108>)
 800ab3c:	68db      	ldr	r3, [r3, #12]
 800ab3e:	0e5b      	lsrs	r3, r3, #25
 800ab40:	f003 0303 	and.w	r3, r3, #3
 800ab44:	3301      	adds	r3, #1
 800ab46:	005b      	lsls	r3, r3, #1
 800ab48:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800ab4a:	697a      	ldr	r2, [r7, #20]
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab52:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800ab54:	69bb      	ldr	r3, [r7, #24]
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	3724      	adds	r7, #36	; 0x24
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab60:	4770      	bx	lr
 800ab62:	bf00      	nop
 800ab64:	40021000 	.word	0x40021000
 800ab68:	0801a128 	.word	0x0801a128
 800ab6c:	00f42400 	.word	0x00f42400
 800ab70:	007a1200 	.word	0x007a1200

0800ab74 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ab74:	b480      	push	{r7}
 800ab76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ab78:	4b03      	ldr	r3, [pc, #12]	; (800ab88 <HAL_RCC_GetHCLKFreq+0x14>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab84:	4770      	bx	lr
 800ab86:	bf00      	nop
 800ab88:	20000094 	.word	0x20000094

0800ab8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800ab90:	f7ff fff0 	bl	800ab74 <HAL_RCC_GetHCLKFreq>
 800ab94:	4602      	mov	r2, r0
 800ab96:	4b06      	ldr	r3, [pc, #24]	; (800abb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ab98:	689b      	ldr	r3, [r3, #8]
 800ab9a:	0a1b      	lsrs	r3, r3, #8
 800ab9c:	f003 0307 	and.w	r3, r3, #7
 800aba0:	4904      	ldr	r1, [pc, #16]	; (800abb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800aba2:	5ccb      	ldrb	r3, [r1, r3]
 800aba4:	f003 031f 	and.w	r3, r3, #31
 800aba8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800abac:	4618      	mov	r0, r3
 800abae:	bd80      	pop	{r7, pc}
 800abb0:	40021000 	.word	0x40021000
 800abb4:	0801a120 	.word	0x0801a120

0800abb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800abbc:	f7ff ffda 	bl	800ab74 <HAL_RCC_GetHCLKFreq>
 800abc0:	4602      	mov	r2, r0
 800abc2:	4b06      	ldr	r3, [pc, #24]	; (800abdc <HAL_RCC_GetPCLK2Freq+0x24>)
 800abc4:	689b      	ldr	r3, [r3, #8]
 800abc6:	0adb      	lsrs	r3, r3, #11
 800abc8:	f003 0307 	and.w	r3, r3, #7
 800abcc:	4904      	ldr	r1, [pc, #16]	; (800abe0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800abce:	5ccb      	ldrb	r3, [r1, r3]
 800abd0:	f003 031f 	and.w	r3, r3, #31
 800abd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800abd8:	4618      	mov	r0, r3
 800abda:	bd80      	pop	{r7, pc}
 800abdc:	40021000 	.word	0x40021000
 800abe0:	0801a120 	.word	0x0801a120

0800abe4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800abe4:	b480      	push	{r7}
 800abe6:	b083      	sub	sp, #12
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
 800abec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	220f      	movs	r2, #15
 800abf2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800abf4:	4b12      	ldr	r3, [pc, #72]	; (800ac40 <HAL_RCC_GetClockConfig+0x5c>)
 800abf6:	689b      	ldr	r3, [r3, #8]
 800abf8:	f003 0203 	and.w	r2, r3, #3
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800ac00:	4b0f      	ldr	r3, [pc, #60]	; (800ac40 <HAL_RCC_GetClockConfig+0x5c>)
 800ac02:	689b      	ldr	r3, [r3, #8]
 800ac04:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800ac0c:	4b0c      	ldr	r3, [pc, #48]	; (800ac40 <HAL_RCC_GetClockConfig+0x5c>)
 800ac0e:	689b      	ldr	r3, [r3, #8]
 800ac10:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800ac18:	4b09      	ldr	r3, [pc, #36]	; (800ac40 <HAL_RCC_GetClockConfig+0x5c>)
 800ac1a:	689b      	ldr	r3, [r3, #8]
 800ac1c:	08db      	lsrs	r3, r3, #3
 800ac1e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800ac26:	4b07      	ldr	r3, [pc, #28]	; (800ac44 <HAL_RCC_GetClockConfig+0x60>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	f003 020f 	and.w	r2, r3, #15
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	601a      	str	r2, [r3, #0]
}
 800ac32:	bf00      	nop
 800ac34:	370c      	adds	r7, #12
 800ac36:	46bd      	mov	sp, r7
 800ac38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3c:	4770      	bx	lr
 800ac3e:	bf00      	nop
 800ac40:	40021000 	.word	0x40021000
 800ac44:	40022000 	.word	0x40022000

0800ac48 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b086      	sub	sp, #24
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800ac50:	2300      	movs	r3, #0
 800ac52:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800ac54:	4b27      	ldr	r3, [pc, #156]	; (800acf4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800ac56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d003      	beq.n	800ac68 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800ac60:	f7ff f882 	bl	8009d68 <HAL_PWREx_GetVoltageRange>
 800ac64:	6178      	str	r0, [r7, #20]
 800ac66:	e014      	b.n	800ac92 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800ac68:	4b22      	ldr	r3, [pc, #136]	; (800acf4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800ac6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac6c:	4a21      	ldr	r2, [pc, #132]	; (800acf4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800ac6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac72:	6593      	str	r3, [r2, #88]	; 0x58
 800ac74:	4b1f      	ldr	r3, [pc, #124]	; (800acf4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800ac76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac7c:	60fb      	str	r3, [r7, #12]
 800ac7e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800ac80:	f7ff f872 	bl	8009d68 <HAL_PWREx_GetVoltageRange>
 800ac84:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800ac86:	4b1b      	ldr	r3, [pc, #108]	; (800acf4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800ac88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac8a:	4a1a      	ldr	r2, [pc, #104]	; (800acf4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800ac8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ac90:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800ac92:	697b      	ldr	r3, [r7, #20]
 800ac94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac98:	d10b      	bne.n	800acb2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2b80      	cmp	r3, #128	; 0x80
 800ac9e:	d913      	bls.n	800acc8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2ba0      	cmp	r3, #160	; 0xa0
 800aca4:	d902      	bls.n	800acac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800aca6:	2302      	movs	r3, #2
 800aca8:	613b      	str	r3, [r7, #16]
 800acaa:	e00d      	b.n	800acc8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800acac:	2301      	movs	r3, #1
 800acae:	613b      	str	r3, [r7, #16]
 800acb0:	e00a      	b.n	800acc8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2b7f      	cmp	r3, #127	; 0x7f
 800acb6:	d902      	bls.n	800acbe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800acb8:	2302      	movs	r3, #2
 800acba:	613b      	str	r3, [r7, #16]
 800acbc:	e004      	b.n	800acc8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2b70      	cmp	r3, #112	; 0x70
 800acc2:	d101      	bne.n	800acc8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800acc4:	2301      	movs	r3, #1
 800acc6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800acc8:	4b0b      	ldr	r3, [pc, #44]	; (800acf8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f023 020f 	bic.w	r2, r3, #15
 800acd0:	4909      	ldr	r1, [pc, #36]	; (800acf8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800acd2:	693b      	ldr	r3, [r7, #16]
 800acd4:	4313      	orrs	r3, r2
 800acd6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800acd8:	4b07      	ldr	r3, [pc, #28]	; (800acf8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f003 030f 	and.w	r3, r3, #15
 800ace0:	693a      	ldr	r2, [r7, #16]
 800ace2:	429a      	cmp	r2, r3
 800ace4:	d001      	beq.n	800acea <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800ace6:	2301      	movs	r3, #1
 800ace8:	e000      	b.n	800acec <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800acea:	2300      	movs	r3, #0
}
 800acec:	4618      	mov	r0, r3
 800acee:	3718      	adds	r7, #24
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}
 800acf4:	40021000 	.word	0x40021000
 800acf8:	40022000 	.word	0x40022000

0800acfc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800acfc:	b480      	push	{r7}
 800acfe:	b087      	sub	sp, #28
 800ad00:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ad02:	4b2d      	ldr	r3, [pc, #180]	; (800adb8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800ad04:	68db      	ldr	r3, [r3, #12]
 800ad06:	f003 0303 	and.w	r3, r3, #3
 800ad0a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	2b03      	cmp	r3, #3
 800ad10:	d00b      	beq.n	800ad2a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	2b03      	cmp	r3, #3
 800ad16:	d825      	bhi.n	800ad64 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	2b01      	cmp	r3, #1
 800ad1c:	d008      	beq.n	800ad30 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	2b02      	cmp	r3, #2
 800ad22:	d11f      	bne.n	800ad64 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800ad24:	4b25      	ldr	r3, [pc, #148]	; (800adbc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800ad26:	613b      	str	r3, [r7, #16]
    break;
 800ad28:	e01f      	b.n	800ad6a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800ad2a:	4b25      	ldr	r3, [pc, #148]	; (800adc0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800ad2c:	613b      	str	r3, [r7, #16]
    break;
 800ad2e:	e01c      	b.n	800ad6a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800ad30:	4b21      	ldr	r3, [pc, #132]	; (800adb8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	f003 0308 	and.w	r3, r3, #8
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d107      	bne.n	800ad4c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800ad3c:	4b1e      	ldr	r3, [pc, #120]	; (800adb8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800ad3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ad42:	0a1b      	lsrs	r3, r3, #8
 800ad44:	f003 030f 	and.w	r3, r3, #15
 800ad48:	617b      	str	r3, [r7, #20]
 800ad4a:	e005      	b.n	800ad58 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800ad4c:	4b1a      	ldr	r3, [pc, #104]	; (800adb8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	091b      	lsrs	r3, r3, #4
 800ad52:	f003 030f 	and.w	r3, r3, #15
 800ad56:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800ad58:	4a1a      	ldr	r2, [pc, #104]	; (800adc4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800ad5a:	697b      	ldr	r3, [r7, #20]
 800ad5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad60:	613b      	str	r3, [r7, #16]
    break;
 800ad62:	e002      	b.n	800ad6a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800ad64:	2300      	movs	r3, #0
 800ad66:	613b      	str	r3, [r7, #16]
    break;
 800ad68:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ad6a:	4b13      	ldr	r3, [pc, #76]	; (800adb8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800ad6c:	68db      	ldr	r3, [r3, #12]
 800ad6e:	091b      	lsrs	r3, r3, #4
 800ad70:	f003 030f 	and.w	r3, r3, #15
 800ad74:	3301      	adds	r3, #1
 800ad76:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800ad78:	4b0f      	ldr	r3, [pc, #60]	; (800adb8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800ad7a:	68db      	ldr	r3, [r3, #12]
 800ad7c:	0a1b      	lsrs	r3, r3, #8
 800ad7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad82:	693a      	ldr	r2, [r7, #16]
 800ad84:	fb03 f202 	mul.w	r2, r3, r2
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad8e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800ad90:	4b09      	ldr	r3, [pc, #36]	; (800adb8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800ad92:	68db      	ldr	r3, [r3, #12]
 800ad94:	0e5b      	lsrs	r3, r3, #25
 800ad96:	f003 0303 	and.w	r3, r3, #3
 800ad9a:	3301      	adds	r3, #1
 800ad9c:	005b      	lsls	r3, r3, #1
 800ad9e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800ada0:	693a      	ldr	r2, [r7, #16]
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	fbb2 f3f3 	udiv	r3, r2, r3
 800ada8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800adaa:	683b      	ldr	r3, [r7, #0]
}
 800adac:	4618      	mov	r0, r3
 800adae:	371c      	adds	r7, #28
 800adb0:	46bd      	mov	sp, r7
 800adb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb6:	4770      	bx	lr
 800adb8:	40021000 	.word	0x40021000
 800adbc:	00f42400 	.word	0x00f42400
 800adc0:	007a1200 	.word	0x007a1200
 800adc4:	0801a128 	.word	0x0801a128

0800adc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b086      	sub	sp, #24
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800add0:	2300      	movs	r3, #0
 800add2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800add4:	2300      	movs	r3, #0
 800add6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d040      	beq.n	800ae66 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ade8:	2b80      	cmp	r3, #128	; 0x80
 800adea:	d02a      	beq.n	800ae42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800adec:	2b80      	cmp	r3, #128	; 0x80
 800adee:	d825      	bhi.n	800ae3c <HAL_RCCEx_PeriphCLKConfig+0x74>
 800adf0:	2b60      	cmp	r3, #96	; 0x60
 800adf2:	d026      	beq.n	800ae42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800adf4:	2b60      	cmp	r3, #96	; 0x60
 800adf6:	d821      	bhi.n	800ae3c <HAL_RCCEx_PeriphCLKConfig+0x74>
 800adf8:	2b40      	cmp	r3, #64	; 0x40
 800adfa:	d006      	beq.n	800ae0a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800adfc:	2b40      	cmp	r3, #64	; 0x40
 800adfe:	d81d      	bhi.n	800ae3c <HAL_RCCEx_PeriphCLKConfig+0x74>
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d009      	beq.n	800ae18 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800ae04:	2b20      	cmp	r3, #32
 800ae06:	d010      	beq.n	800ae2a <HAL_RCCEx_PeriphCLKConfig+0x62>
 800ae08:	e018      	b.n	800ae3c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800ae0a:	4b89      	ldr	r3, [pc, #548]	; (800b030 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ae0c:	68db      	ldr	r3, [r3, #12]
 800ae0e:	4a88      	ldr	r2, [pc, #544]	; (800b030 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ae10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ae14:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800ae16:	e015      	b.n	800ae44 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	3304      	adds	r3, #4
 800ae1c:	2100      	movs	r1, #0
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f000 fb3e 	bl	800b4a0 <RCCEx_PLLSAI1_Config>
 800ae24:	4603      	mov	r3, r0
 800ae26:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800ae28:	e00c      	b.n	800ae44 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	3320      	adds	r3, #32
 800ae2e:	2100      	movs	r1, #0
 800ae30:	4618      	mov	r0, r3
 800ae32:	f000 fc29 	bl	800b688 <RCCEx_PLLSAI2_Config>
 800ae36:	4603      	mov	r3, r0
 800ae38:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800ae3a:	e003      	b.n	800ae44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	74fb      	strb	r3, [r7, #19]
      break;
 800ae40:	e000      	b.n	800ae44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800ae42:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ae44:	7cfb      	ldrb	r3, [r7, #19]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d10b      	bne.n	800ae62 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ae4a:	4b79      	ldr	r3, [pc, #484]	; (800b030 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ae4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ae50:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae58:	4975      	ldr	r1, [pc, #468]	; (800b030 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ae5a:	4313      	orrs	r3, r2
 800ae5c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800ae60:	e001      	b.n	800ae66 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae62:	7cfb      	ldrb	r3, [r7, #19]
 800ae64:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d047      	beq.n	800af02 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae7a:	d030      	beq.n	800aede <HAL_RCCEx_PeriphCLKConfig+0x116>
 800ae7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae80:	d82a      	bhi.n	800aed8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800ae82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ae86:	d02a      	beq.n	800aede <HAL_RCCEx_PeriphCLKConfig+0x116>
 800ae88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ae8c:	d824      	bhi.n	800aed8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800ae8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae92:	d008      	beq.n	800aea6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 800ae94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae98:	d81e      	bhi.n	800aed8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d00a      	beq.n	800aeb4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800ae9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aea2:	d010      	beq.n	800aec6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800aea4:	e018      	b.n	800aed8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800aea6:	4b62      	ldr	r3, [pc, #392]	; (800b030 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800aea8:	68db      	ldr	r3, [r3, #12]
 800aeaa:	4a61      	ldr	r2, [pc, #388]	; (800b030 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800aeac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aeb0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800aeb2:	e015      	b.n	800aee0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	3304      	adds	r3, #4
 800aeb8:	2100      	movs	r1, #0
 800aeba:	4618      	mov	r0, r3
 800aebc:	f000 faf0 	bl	800b4a0 <RCCEx_PLLSAI1_Config>
 800aec0:	4603      	mov	r3, r0
 800aec2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800aec4:	e00c      	b.n	800aee0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	3320      	adds	r3, #32
 800aeca:	2100      	movs	r1, #0
 800aecc:	4618      	mov	r0, r3
 800aece:	f000 fbdb 	bl	800b688 <RCCEx_PLLSAI2_Config>
 800aed2:	4603      	mov	r3, r0
 800aed4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800aed6:	e003      	b.n	800aee0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aed8:	2301      	movs	r3, #1
 800aeda:	74fb      	strb	r3, [r7, #19]
      break;
 800aedc:	e000      	b.n	800aee0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800aede:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aee0:	7cfb      	ldrb	r3, [r7, #19]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d10b      	bne.n	800aefe <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800aee6:	4b52      	ldr	r3, [pc, #328]	; (800b030 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800aee8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800aeec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aef4:	494e      	ldr	r1, [pc, #312]	; (800b030 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800aef6:	4313      	orrs	r3, r2
 800aef8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800aefc:	e001      	b.n	800af02 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aefe:	7cfb      	ldrb	r3, [r7, #19]
 800af00:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	f000 809f 	beq.w	800b04e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800af10:	2300      	movs	r3, #0
 800af12:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800af14:	4b46      	ldr	r3, [pc, #280]	; (800b030 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800af16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d101      	bne.n	800af24 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800af20:	2301      	movs	r3, #1
 800af22:	e000      	b.n	800af26 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800af24:	2300      	movs	r3, #0
 800af26:	2b00      	cmp	r3, #0
 800af28:	d00d      	beq.n	800af46 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800af2a:	4b41      	ldr	r3, [pc, #260]	; (800b030 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800af2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af2e:	4a40      	ldr	r2, [pc, #256]	; (800b030 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800af30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af34:	6593      	str	r3, [r2, #88]	; 0x58
 800af36:	4b3e      	ldr	r3, [pc, #248]	; (800b030 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800af38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af3e:	60bb      	str	r3, [r7, #8]
 800af40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800af42:	2301      	movs	r3, #1
 800af44:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800af46:	4b3b      	ldr	r3, [pc, #236]	; (800b034 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	4a3a      	ldr	r2, [pc, #232]	; (800b034 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800af4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af50:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800af52:	f7fe f861 	bl	8009018 <HAL_GetTick>
 800af56:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800af58:	e009      	b.n	800af6e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800af5a:	f7fe f85d 	bl	8009018 <HAL_GetTick>
 800af5e:	4602      	mov	r2, r0
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	1ad3      	subs	r3, r2, r3
 800af64:	2b02      	cmp	r3, #2
 800af66:	d902      	bls.n	800af6e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800af68:	2303      	movs	r3, #3
 800af6a:	74fb      	strb	r3, [r7, #19]
        break;
 800af6c:	e005      	b.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800af6e:	4b31      	ldr	r3, [pc, #196]	; (800b034 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af76:	2b00      	cmp	r3, #0
 800af78:	d0ef      	beq.n	800af5a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800af7a:	7cfb      	ldrb	r3, [r7, #19]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d15b      	bne.n	800b038 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800af80:	4b2b      	ldr	r3, [pc, #172]	; (800b030 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800af82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af8a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800af8c:	697b      	ldr	r3, [r7, #20]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d01f      	beq.n	800afd2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800af98:	697a      	ldr	r2, [r7, #20]
 800af9a:	429a      	cmp	r2, r3
 800af9c:	d019      	beq.n	800afd2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800af9e:	4b24      	ldr	r3, [pc, #144]	; (800b030 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800afa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800afa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800afa8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800afaa:	4b21      	ldr	r3, [pc, #132]	; (800b030 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800afac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800afb0:	4a1f      	ldr	r2, [pc, #124]	; (800b030 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800afb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800afb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800afba:	4b1d      	ldr	r3, [pc, #116]	; (800b030 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800afbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800afc0:	4a1b      	ldr	r2, [pc, #108]	; (800b030 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800afc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800afc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800afca:	4a19      	ldr	r2, [pc, #100]	; (800b030 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800afcc:	697b      	ldr	r3, [r7, #20]
 800afce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800afd2:	697b      	ldr	r3, [r7, #20]
 800afd4:	f003 0301 	and.w	r3, r3, #1
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d016      	beq.n	800b00a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afdc:	f7fe f81c 	bl	8009018 <HAL_GetTick>
 800afe0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800afe2:	e00b      	b.n	800affc <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800afe4:	f7fe f818 	bl	8009018 <HAL_GetTick>
 800afe8:	4602      	mov	r2, r0
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	1ad3      	subs	r3, r2, r3
 800afee:	f241 3288 	movw	r2, #5000	; 0x1388
 800aff2:	4293      	cmp	r3, r2
 800aff4:	d902      	bls.n	800affc <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800aff6:	2303      	movs	r3, #3
 800aff8:	74fb      	strb	r3, [r7, #19]
            break;
 800affa:	e006      	b.n	800b00a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800affc:	4b0c      	ldr	r3, [pc, #48]	; (800b030 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800affe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b002:	f003 0302 	and.w	r3, r3, #2
 800b006:	2b00      	cmp	r3, #0
 800b008:	d0ec      	beq.n	800afe4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800b00a:	7cfb      	ldrb	r3, [r7, #19]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d10c      	bne.n	800b02a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b010:	4b07      	ldr	r3, [pc, #28]	; (800b030 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b016:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b020:	4903      	ldr	r1, [pc, #12]	; (800b030 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b022:	4313      	orrs	r3, r2
 800b024:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800b028:	e008      	b.n	800b03c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b02a:	7cfb      	ldrb	r3, [r7, #19]
 800b02c:	74bb      	strb	r3, [r7, #18]
 800b02e:	e005      	b.n	800b03c <HAL_RCCEx_PeriphCLKConfig+0x274>
 800b030:	40021000 	.word	0x40021000
 800b034:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b038:	7cfb      	ldrb	r3, [r7, #19]
 800b03a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b03c:	7c7b      	ldrb	r3, [r7, #17]
 800b03e:	2b01      	cmp	r3, #1
 800b040:	d105      	bne.n	800b04e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b042:	4ba0      	ldr	r3, [pc, #640]	; (800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b046:	4a9f      	ldr	r2, [pc, #636]	; (800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b048:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b04c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	f003 0301 	and.w	r3, r3, #1
 800b056:	2b00      	cmp	r3, #0
 800b058:	d00a      	beq.n	800b070 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b05a:	4b9a      	ldr	r3, [pc, #616]	; (800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b05c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b060:	f023 0203 	bic.w	r2, r3, #3
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b068:	4996      	ldr	r1, [pc, #600]	; (800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b06a:	4313      	orrs	r3, r2
 800b06c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f003 0302 	and.w	r3, r3, #2
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d00a      	beq.n	800b092 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b07c:	4b91      	ldr	r3, [pc, #580]	; (800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b07e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b082:	f023 020c 	bic.w	r2, r3, #12
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b08a:	498e      	ldr	r1, [pc, #568]	; (800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b08c:	4313      	orrs	r3, r2
 800b08e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	f003 0304 	and.w	r3, r3, #4
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d00a      	beq.n	800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b09e:	4b89      	ldr	r3, [pc, #548]	; (800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b0a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0ac:	4985      	ldr	r1, [pc, #532]	; (800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b0ae:	4313      	orrs	r3, r2
 800b0b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f003 0308 	and.w	r3, r3, #8
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d00a      	beq.n	800b0d6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b0c0:	4b80      	ldr	r3, [pc, #512]	; (800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b0c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b0ce:	497d      	ldr	r1, [pc, #500]	; (800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b0d0:	4313      	orrs	r3, r2
 800b0d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	f003 0310 	and.w	r3, r3, #16
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d00a      	beq.n	800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b0e2:	4b78      	ldr	r3, [pc, #480]	; (800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b0e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0f0:	4974      	ldr	r1, [pc, #464]	; (800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b0f2:	4313      	orrs	r3, r2
 800b0f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	f003 0320 	and.w	r3, r3, #32
 800b100:	2b00      	cmp	r3, #0
 800b102:	d00a      	beq.n	800b11a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b104:	4b6f      	ldr	r3, [pc, #444]	; (800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b10a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b112:	496c      	ldr	r1, [pc, #432]	; (800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b114:	4313      	orrs	r3, r2
 800b116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b122:	2b00      	cmp	r3, #0
 800b124:	d00a      	beq.n	800b13c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b126:	4b67      	ldr	r3, [pc, #412]	; (800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b12c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b134:	4963      	ldr	r1, [pc, #396]	; (800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b136:	4313      	orrs	r3, r2
 800b138:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b144:	2b00      	cmp	r3, #0
 800b146:	d00a      	beq.n	800b15e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b148:	4b5e      	ldr	r3, [pc, #376]	; (800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b14a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b14e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b156:	495b      	ldr	r1, [pc, #364]	; (800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b158:	4313      	orrs	r3, r2
 800b15a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b166:	2b00      	cmp	r3, #0
 800b168:	d00a      	beq.n	800b180 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b16a:	4b56      	ldr	r3, [pc, #344]	; (800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b16c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b170:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b178:	4952      	ldr	r1, [pc, #328]	; (800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b17a:	4313      	orrs	r3, r2
 800b17c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d00a      	beq.n	800b1a2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b18c:	4b4d      	ldr	r3, [pc, #308]	; (800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b18e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b192:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b19a:	494a      	ldr	r1, [pc, #296]	; (800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b19c:	4313      	orrs	r3, r2
 800b19e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d00a      	beq.n	800b1c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b1ae:	4b45      	ldr	r3, [pc, #276]	; (800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b1b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b1bc:	4941      	ldr	r1, [pc, #260]	; (800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b1be:	4313      	orrs	r3, r2
 800b1c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d00a      	beq.n	800b1e6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b1d0:	4b3c      	ldr	r3, [pc, #240]	; (800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b1d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b1d6:	f023 0203 	bic.w	r2, r3, #3
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b1de:	4939      	ldr	r1, [pc, #228]	; (800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b1e0:	4313      	orrs	r3, r2
 800b1e2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d028      	beq.n	800b244 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b1f2:	4b34      	ldr	r3, [pc, #208]	; (800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b1f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1f8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b200:	4930      	ldr	r1, [pc, #192]	; (800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b202:	4313      	orrs	r3, r2
 800b204:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b20c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b210:	d106      	bne.n	800b220 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b212:	4b2c      	ldr	r3, [pc, #176]	; (800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b214:	68db      	ldr	r3, [r3, #12]
 800b216:	4a2b      	ldr	r2, [pc, #172]	; (800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b218:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b21c:	60d3      	str	r3, [r2, #12]
 800b21e:	e011      	b.n	800b244 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b224:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b228:	d10c      	bne.n	800b244 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	3304      	adds	r3, #4
 800b22e:	2101      	movs	r1, #1
 800b230:	4618      	mov	r0, r3
 800b232:	f000 f935 	bl	800b4a0 <RCCEx_PLLSAI1_Config>
 800b236:	4603      	mov	r3, r0
 800b238:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800b23a:	7cfb      	ldrb	r3, [r7, #19]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d001      	beq.n	800b244 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800b240:	7cfb      	ldrb	r3, [r7, #19]
 800b242:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d04d      	beq.n	800b2ec <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b254:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b258:	d108      	bne.n	800b26c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800b25a:	4b1a      	ldr	r3, [pc, #104]	; (800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b25c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b260:	4a18      	ldr	r2, [pc, #96]	; (800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b262:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b266:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800b26a:	e012      	b.n	800b292 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800b26c:	4b15      	ldr	r3, [pc, #84]	; (800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b26e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b272:	4a14      	ldr	r2, [pc, #80]	; (800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b274:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b278:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800b27c:	4b11      	ldr	r3, [pc, #68]	; (800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b27e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b282:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b28a:	490e      	ldr	r1, [pc, #56]	; (800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b28c:	4313      	orrs	r3, r2
 800b28e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b296:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b29a:	d106      	bne.n	800b2aa <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b29c:	4b09      	ldr	r3, [pc, #36]	; (800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b29e:	68db      	ldr	r3, [r3, #12]
 800b2a0:	4a08      	ldr	r2, [pc, #32]	; (800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b2a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b2a6:	60d3      	str	r3, [r2, #12]
 800b2a8:	e020      	b.n	800b2ec <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b2ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b2b2:	d109      	bne.n	800b2c8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800b2b4:	4b03      	ldr	r3, [pc, #12]	; (800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b2b6:	68db      	ldr	r3, [r3, #12]
 800b2b8:	4a02      	ldr	r2, [pc, #8]	; (800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b2ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b2be:	60d3      	str	r3, [r2, #12]
 800b2c0:	e014      	b.n	800b2ec <HAL_RCCEx_PeriphCLKConfig+0x524>
 800b2c2:	bf00      	nop
 800b2c4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b2cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b2d0:	d10c      	bne.n	800b2ec <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	3304      	adds	r3, #4
 800b2d6:	2101      	movs	r1, #1
 800b2d8:	4618      	mov	r0, r3
 800b2da:	f000 f8e1 	bl	800b4a0 <RCCEx_PLLSAI1_Config>
 800b2de:	4603      	mov	r3, r0
 800b2e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b2e2:	7cfb      	ldrb	r3, [r7, #19]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d001      	beq.n	800b2ec <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800b2e8:	7cfb      	ldrb	r3, [r7, #19]
 800b2ea:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d028      	beq.n	800b34a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b2f8:	4b68      	ldr	r3, [pc, #416]	; (800b49c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b2fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b306:	4965      	ldr	r1, [pc, #404]	; (800b49c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b308:	4313      	orrs	r3, r2
 800b30a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b312:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b316:	d106      	bne.n	800b326 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b318:	4b60      	ldr	r3, [pc, #384]	; (800b49c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b31a:	68db      	ldr	r3, [r3, #12]
 800b31c:	4a5f      	ldr	r2, [pc, #380]	; (800b49c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b31e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b322:	60d3      	str	r3, [r2, #12]
 800b324:	e011      	b.n	800b34a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b32a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b32e:	d10c      	bne.n	800b34a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	3304      	adds	r3, #4
 800b334:	2101      	movs	r1, #1
 800b336:	4618      	mov	r0, r3
 800b338:	f000 f8b2 	bl	800b4a0 <RCCEx_PLLSAI1_Config>
 800b33c:	4603      	mov	r3, r0
 800b33e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b340:	7cfb      	ldrb	r3, [r7, #19]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d001      	beq.n	800b34a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800b346:	7cfb      	ldrb	r3, [r7, #19]
 800b348:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b352:	2b00      	cmp	r3, #0
 800b354:	d01e      	beq.n	800b394 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b356:	4b51      	ldr	r3, [pc, #324]	; (800b49c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b35c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b366:	494d      	ldr	r1, [pc, #308]	; (800b49c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b368:	4313      	orrs	r3, r2
 800b36a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b374:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b378:	d10c      	bne.n	800b394 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	3304      	adds	r3, #4
 800b37e:	2102      	movs	r1, #2
 800b380:	4618      	mov	r0, r3
 800b382:	f000 f88d 	bl	800b4a0 <RCCEx_PLLSAI1_Config>
 800b386:	4603      	mov	r3, r0
 800b388:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b38a:	7cfb      	ldrb	r3, [r7, #19]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d001      	beq.n	800b394 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800b390:	7cfb      	ldrb	r3, [r7, #19]
 800b392:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d00b      	beq.n	800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b3a0:	4b3e      	ldr	r3, [pc, #248]	; (800b49c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b3a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b3a6:	f023 0204 	bic.w	r2, r3, #4
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b3b0:	493a      	ldr	r1, [pc, #232]	; (800b49c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b3b2:	4313      	orrs	r3, r2
 800b3b4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d00b      	beq.n	800b3dc <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800b3c4:	4b35      	ldr	r3, [pc, #212]	; (800b49c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b3c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b3ca:	f023 0218 	bic.w	r2, r3, #24
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3d4:	4931      	ldr	r1, [pc, #196]	; (800b49c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b3d6:	4313      	orrs	r3, r2
 800b3d8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d035      	beq.n	800b454 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800b3e8:	4b2c      	ldr	r3, [pc, #176]	; (800b49c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	4a2b      	ldr	r2, [pc, #172]	; (800b49c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b3ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b3f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b3f4:	f7fd fe10 	bl	8009018 <HAL_GetTick>
 800b3f8:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b3fa:	e009      	b.n	800b410 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b3fc:	f7fd fe0c 	bl	8009018 <HAL_GetTick>
 800b400:	4602      	mov	r2, r0
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	1ad3      	subs	r3, r2, r3
 800b406:	2b02      	cmp	r3, #2
 800b408:	d902      	bls.n	800b410 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 800b40a:	2303      	movs	r3, #3
 800b40c:	74fb      	strb	r3, [r7, #19]
        break;
 800b40e:	e005      	b.n	800b41c <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b410:	4b22      	ldr	r3, [pc, #136]	; (800b49c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d1ef      	bne.n	800b3fc <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 800b41c:	7cfb      	ldrb	r3, [r7, #19]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d113      	bne.n	800b44a <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 800b422:	4b1e      	ldr	r3, [pc, #120]	; (800b49c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b424:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b428:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b432:	491a      	ldr	r1, [pc, #104]	; (800b49c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b434:	4313      	orrs	r3, r2
 800b436:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	3320      	adds	r3, #32
 800b43e:	2102      	movs	r1, #2
 800b440:	4618      	mov	r0, r3
 800b442:	f000 f921 	bl	800b688 <RCCEx_PLLSAI2_Config>
 800b446:	4603      	mov	r3, r0
 800b448:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 800b44a:	7cfb      	ldrb	r3, [r7, #19]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d001      	beq.n	800b454 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 800b450:	7cfb      	ldrb	r3, [r7, #19]
 800b452:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d017      	beq.n	800b490 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800b460:	4b0e      	ldr	r3, [pc, #56]	; (800b49c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b462:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b466:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b470:	490a      	ldr	r1, [pc, #40]	; (800b49c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b472:	4313      	orrs	r3, r2
 800b474:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b47e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b482:	d105      	bne.n	800b490 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b484:	4b05      	ldr	r3, [pc, #20]	; (800b49c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b486:	68db      	ldr	r3, [r3, #12]
 800b488:	4a04      	ldr	r2, [pc, #16]	; (800b49c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b48a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b48e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800b490:	7cbb      	ldrb	r3, [r7, #18]
}
 800b492:	4618      	mov	r0, r3
 800b494:	3718      	adds	r7, #24
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}
 800b49a:	bf00      	nop
 800b49c:	40021000 	.word	0x40021000

0800b4a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b084      	sub	sp, #16
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
 800b4a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b4ae:	4b72      	ldr	r3, [pc, #456]	; (800b678 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b4b0:	68db      	ldr	r3, [r3, #12]
 800b4b2:	f003 0303 	and.w	r3, r3, #3
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d00e      	beq.n	800b4d8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800b4ba:	4b6f      	ldr	r3, [pc, #444]	; (800b678 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b4bc:	68db      	ldr	r3, [r3, #12]
 800b4be:	f003 0203 	and.w	r2, r3, #3
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	429a      	cmp	r2, r3
 800b4c8:	d103      	bne.n	800b4d2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
       ||
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d142      	bne.n	800b558 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	73fb      	strb	r3, [r7, #15]
 800b4d6:	e03f      	b.n	800b558 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	2b03      	cmp	r3, #3
 800b4de:	d018      	beq.n	800b512 <RCCEx_PLLSAI1_Config+0x72>
 800b4e0:	2b03      	cmp	r3, #3
 800b4e2:	d825      	bhi.n	800b530 <RCCEx_PLLSAI1_Config+0x90>
 800b4e4:	2b01      	cmp	r3, #1
 800b4e6:	d002      	beq.n	800b4ee <RCCEx_PLLSAI1_Config+0x4e>
 800b4e8:	2b02      	cmp	r3, #2
 800b4ea:	d009      	beq.n	800b500 <RCCEx_PLLSAI1_Config+0x60>
 800b4ec:	e020      	b.n	800b530 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b4ee:	4b62      	ldr	r3, [pc, #392]	; (800b678 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f003 0302 	and.w	r3, r3, #2
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d11d      	bne.n	800b536 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800b4fa:	2301      	movs	r3, #1
 800b4fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b4fe:	e01a      	b.n	800b536 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b500:	4b5d      	ldr	r3, [pc, #372]	; (800b678 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d116      	bne.n	800b53a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800b50c:	2301      	movs	r3, #1
 800b50e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b510:	e013      	b.n	800b53a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b512:	4b59      	ldr	r3, [pc, #356]	; (800b678 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d10f      	bne.n	800b53e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b51e:	4b56      	ldr	r3, [pc, #344]	; (800b678 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b526:	2b00      	cmp	r3, #0
 800b528:	d109      	bne.n	800b53e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800b52a:	2301      	movs	r3, #1
 800b52c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b52e:	e006      	b.n	800b53e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800b530:	2301      	movs	r3, #1
 800b532:	73fb      	strb	r3, [r7, #15]
      break;
 800b534:	e004      	b.n	800b540 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800b536:	bf00      	nop
 800b538:	e002      	b.n	800b540 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800b53a:	bf00      	nop
 800b53c:	e000      	b.n	800b540 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800b53e:	bf00      	nop
    }

    if(status == HAL_OK)
 800b540:	7bfb      	ldrb	r3, [r7, #15]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d108      	bne.n	800b558 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800b546:	4b4c      	ldr	r3, [pc, #304]	; (800b678 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b548:	68db      	ldr	r3, [r3, #12]
 800b54a:	f023 0203 	bic.w	r2, r3, #3
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	4949      	ldr	r1, [pc, #292]	; (800b678 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b554:	4313      	orrs	r3, r2
 800b556:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800b558:	7bfb      	ldrb	r3, [r7, #15]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	f040 8086 	bne.w	800b66c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800b560:	4b45      	ldr	r3, [pc, #276]	; (800b678 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	4a44      	ldr	r2, [pc, #272]	; (800b678 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b566:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b56a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b56c:	f7fd fd54 	bl	8009018 <HAL_GetTick>
 800b570:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b572:	e009      	b.n	800b588 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b574:	f7fd fd50 	bl	8009018 <HAL_GetTick>
 800b578:	4602      	mov	r2, r0
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	1ad3      	subs	r3, r2, r3
 800b57e:	2b02      	cmp	r3, #2
 800b580:	d902      	bls.n	800b588 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800b582:	2303      	movs	r3, #3
 800b584:	73fb      	strb	r3, [r7, #15]
        break;
 800b586:	e005      	b.n	800b594 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b588:	4b3b      	ldr	r3, [pc, #236]	; (800b678 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b590:	2b00      	cmp	r3, #0
 800b592:	d1ef      	bne.n	800b574 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800b594:	7bfb      	ldrb	r3, [r7, #15]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d168      	bne.n	800b66c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d113      	bne.n	800b5c8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b5a0:	4b35      	ldr	r3, [pc, #212]	; (800b678 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b5a2:	691a      	ldr	r2, [r3, #16]
 800b5a4:	4b35      	ldr	r3, [pc, #212]	; (800b67c <RCCEx_PLLSAI1_Config+0x1dc>)
 800b5a6:	4013      	ands	r3, r2
 800b5a8:	687a      	ldr	r2, [r7, #4]
 800b5aa:	6892      	ldr	r2, [r2, #8]
 800b5ac:	0211      	lsls	r1, r2, #8
 800b5ae:	687a      	ldr	r2, [r7, #4]
 800b5b0:	68d2      	ldr	r2, [r2, #12]
 800b5b2:	06d2      	lsls	r2, r2, #27
 800b5b4:	4311      	orrs	r1, r2
 800b5b6:	687a      	ldr	r2, [r7, #4]
 800b5b8:	6852      	ldr	r2, [r2, #4]
 800b5ba:	3a01      	subs	r2, #1
 800b5bc:	0112      	lsls	r2, r2, #4
 800b5be:	430a      	orrs	r2, r1
 800b5c0:	492d      	ldr	r1, [pc, #180]	; (800b678 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b5c2:	4313      	orrs	r3, r2
 800b5c4:	610b      	str	r3, [r1, #16]
 800b5c6:	e02d      	b.n	800b624 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	2b01      	cmp	r3, #1
 800b5cc:	d115      	bne.n	800b5fa <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b5ce:	4b2a      	ldr	r3, [pc, #168]	; (800b678 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b5d0:	691a      	ldr	r2, [r3, #16]
 800b5d2:	4b2b      	ldr	r3, [pc, #172]	; (800b680 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b5d4:	4013      	ands	r3, r2
 800b5d6:	687a      	ldr	r2, [r7, #4]
 800b5d8:	6892      	ldr	r2, [r2, #8]
 800b5da:	0211      	lsls	r1, r2, #8
 800b5dc:	687a      	ldr	r2, [r7, #4]
 800b5de:	6912      	ldr	r2, [r2, #16]
 800b5e0:	0852      	lsrs	r2, r2, #1
 800b5e2:	3a01      	subs	r2, #1
 800b5e4:	0552      	lsls	r2, r2, #21
 800b5e6:	4311      	orrs	r1, r2
 800b5e8:	687a      	ldr	r2, [r7, #4]
 800b5ea:	6852      	ldr	r2, [r2, #4]
 800b5ec:	3a01      	subs	r2, #1
 800b5ee:	0112      	lsls	r2, r2, #4
 800b5f0:	430a      	orrs	r2, r1
 800b5f2:	4921      	ldr	r1, [pc, #132]	; (800b678 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b5f4:	4313      	orrs	r3, r2
 800b5f6:	610b      	str	r3, [r1, #16]
 800b5f8:	e014      	b.n	800b624 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b5fa:	4b1f      	ldr	r3, [pc, #124]	; (800b678 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b5fc:	691a      	ldr	r2, [r3, #16]
 800b5fe:	4b21      	ldr	r3, [pc, #132]	; (800b684 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b600:	4013      	ands	r3, r2
 800b602:	687a      	ldr	r2, [r7, #4]
 800b604:	6892      	ldr	r2, [r2, #8]
 800b606:	0211      	lsls	r1, r2, #8
 800b608:	687a      	ldr	r2, [r7, #4]
 800b60a:	6952      	ldr	r2, [r2, #20]
 800b60c:	0852      	lsrs	r2, r2, #1
 800b60e:	3a01      	subs	r2, #1
 800b610:	0652      	lsls	r2, r2, #25
 800b612:	4311      	orrs	r1, r2
 800b614:	687a      	ldr	r2, [r7, #4]
 800b616:	6852      	ldr	r2, [r2, #4]
 800b618:	3a01      	subs	r2, #1
 800b61a:	0112      	lsls	r2, r2, #4
 800b61c:	430a      	orrs	r2, r1
 800b61e:	4916      	ldr	r1, [pc, #88]	; (800b678 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b620:	4313      	orrs	r3, r2
 800b622:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800b624:	4b14      	ldr	r3, [pc, #80]	; (800b678 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	4a13      	ldr	r2, [pc, #76]	; (800b678 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b62a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b62e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b630:	f7fd fcf2 	bl	8009018 <HAL_GetTick>
 800b634:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b636:	e009      	b.n	800b64c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b638:	f7fd fcee 	bl	8009018 <HAL_GetTick>
 800b63c:	4602      	mov	r2, r0
 800b63e:	68bb      	ldr	r3, [r7, #8]
 800b640:	1ad3      	subs	r3, r2, r3
 800b642:	2b02      	cmp	r3, #2
 800b644:	d902      	bls.n	800b64c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800b646:	2303      	movs	r3, #3
 800b648:	73fb      	strb	r3, [r7, #15]
          break;
 800b64a:	e005      	b.n	800b658 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b64c:	4b0a      	ldr	r3, [pc, #40]	; (800b678 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b654:	2b00      	cmp	r3, #0
 800b656:	d0ef      	beq.n	800b638 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800b658:	7bfb      	ldrb	r3, [r7, #15]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d106      	bne.n	800b66c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800b65e:	4b06      	ldr	r3, [pc, #24]	; (800b678 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b660:	691a      	ldr	r2, [r3, #16]
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	699b      	ldr	r3, [r3, #24]
 800b666:	4904      	ldr	r1, [pc, #16]	; (800b678 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b668:	4313      	orrs	r3, r2
 800b66a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800b66c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b66e:	4618      	mov	r0, r3
 800b670:	3710      	adds	r7, #16
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}
 800b676:	bf00      	nop
 800b678:	40021000 	.word	0x40021000
 800b67c:	07ff800f 	.word	0x07ff800f
 800b680:	ff9f800f 	.word	0xff9f800f
 800b684:	f9ff800f 	.word	0xf9ff800f

0800b688 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b084      	sub	sp, #16
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
 800b690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b692:	2300      	movs	r3, #0
 800b694:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b696:	4b72      	ldr	r3, [pc, #456]	; (800b860 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b698:	68db      	ldr	r3, [r3, #12]
 800b69a:	f003 0303 	and.w	r3, r3, #3
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d00e      	beq.n	800b6c0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800b6a2:	4b6f      	ldr	r3, [pc, #444]	; (800b860 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b6a4:	68db      	ldr	r3, [r3, #12]
 800b6a6:	f003 0203 	and.w	r2, r3, #3
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	429a      	cmp	r2, r3
 800b6b0:	d103      	bne.n	800b6ba <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
       ||
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d142      	bne.n	800b740 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	73fb      	strb	r3, [r7, #15]
 800b6be:	e03f      	b.n	800b740 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	2b03      	cmp	r3, #3
 800b6c6:	d018      	beq.n	800b6fa <RCCEx_PLLSAI2_Config+0x72>
 800b6c8:	2b03      	cmp	r3, #3
 800b6ca:	d825      	bhi.n	800b718 <RCCEx_PLLSAI2_Config+0x90>
 800b6cc:	2b01      	cmp	r3, #1
 800b6ce:	d002      	beq.n	800b6d6 <RCCEx_PLLSAI2_Config+0x4e>
 800b6d0:	2b02      	cmp	r3, #2
 800b6d2:	d009      	beq.n	800b6e8 <RCCEx_PLLSAI2_Config+0x60>
 800b6d4:	e020      	b.n	800b718 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b6d6:	4b62      	ldr	r3, [pc, #392]	; (800b860 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	f003 0302 	and.w	r3, r3, #2
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d11d      	bne.n	800b71e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b6e6:	e01a      	b.n	800b71e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b6e8:	4b5d      	ldr	r3, [pc, #372]	; (800b860 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d116      	bne.n	800b722 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800b6f4:	2301      	movs	r3, #1
 800b6f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b6f8:	e013      	b.n	800b722 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b6fa:	4b59      	ldr	r3, [pc, #356]	; (800b860 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b702:	2b00      	cmp	r3, #0
 800b704:	d10f      	bne.n	800b726 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b706:	4b56      	ldr	r3, [pc, #344]	; (800b860 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d109      	bne.n	800b726 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800b712:	2301      	movs	r3, #1
 800b714:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b716:	e006      	b.n	800b726 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800b718:	2301      	movs	r3, #1
 800b71a:	73fb      	strb	r3, [r7, #15]
      break;
 800b71c:	e004      	b.n	800b728 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800b71e:	bf00      	nop
 800b720:	e002      	b.n	800b728 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800b722:	bf00      	nop
 800b724:	e000      	b.n	800b728 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800b726:	bf00      	nop
    }

    if(status == HAL_OK)
 800b728:	7bfb      	ldrb	r3, [r7, #15]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d108      	bne.n	800b740 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800b72e:	4b4c      	ldr	r3, [pc, #304]	; (800b860 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b730:	68db      	ldr	r3, [r3, #12]
 800b732:	f023 0203 	bic.w	r2, r3, #3
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	4949      	ldr	r1, [pc, #292]	; (800b860 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b73c:	4313      	orrs	r3, r2
 800b73e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800b740:	7bfb      	ldrb	r3, [r7, #15]
 800b742:	2b00      	cmp	r3, #0
 800b744:	f040 8086 	bne.w	800b854 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800b748:	4b45      	ldr	r3, [pc, #276]	; (800b860 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	4a44      	ldr	r2, [pc, #272]	; (800b860 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b74e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b752:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b754:	f7fd fc60 	bl	8009018 <HAL_GetTick>
 800b758:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b75a:	e009      	b.n	800b770 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b75c:	f7fd fc5c 	bl	8009018 <HAL_GetTick>
 800b760:	4602      	mov	r2, r0
 800b762:	68bb      	ldr	r3, [r7, #8]
 800b764:	1ad3      	subs	r3, r2, r3
 800b766:	2b02      	cmp	r3, #2
 800b768:	d902      	bls.n	800b770 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800b76a:	2303      	movs	r3, #3
 800b76c:	73fb      	strb	r3, [r7, #15]
        break;
 800b76e:	e005      	b.n	800b77c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b770:	4b3b      	ldr	r3, [pc, #236]	; (800b860 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d1ef      	bne.n	800b75c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800b77c:	7bfb      	ldrb	r3, [r7, #15]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d168      	bne.n	800b854 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d113      	bne.n	800b7b0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b788:	4b35      	ldr	r3, [pc, #212]	; (800b860 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b78a:	695a      	ldr	r2, [r3, #20]
 800b78c:	4b35      	ldr	r3, [pc, #212]	; (800b864 <RCCEx_PLLSAI2_Config+0x1dc>)
 800b78e:	4013      	ands	r3, r2
 800b790:	687a      	ldr	r2, [r7, #4]
 800b792:	6892      	ldr	r2, [r2, #8]
 800b794:	0211      	lsls	r1, r2, #8
 800b796:	687a      	ldr	r2, [r7, #4]
 800b798:	68d2      	ldr	r2, [r2, #12]
 800b79a:	06d2      	lsls	r2, r2, #27
 800b79c:	4311      	orrs	r1, r2
 800b79e:	687a      	ldr	r2, [r7, #4]
 800b7a0:	6852      	ldr	r2, [r2, #4]
 800b7a2:	3a01      	subs	r2, #1
 800b7a4:	0112      	lsls	r2, r2, #4
 800b7a6:	430a      	orrs	r2, r1
 800b7a8:	492d      	ldr	r1, [pc, #180]	; (800b860 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b7aa:	4313      	orrs	r3, r2
 800b7ac:	614b      	str	r3, [r1, #20]
 800b7ae:	e02d      	b.n	800b80c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	2b01      	cmp	r3, #1
 800b7b4:	d115      	bne.n	800b7e2 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b7b6:	4b2a      	ldr	r3, [pc, #168]	; (800b860 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b7b8:	695a      	ldr	r2, [r3, #20]
 800b7ba:	4b2b      	ldr	r3, [pc, #172]	; (800b868 <RCCEx_PLLSAI2_Config+0x1e0>)
 800b7bc:	4013      	ands	r3, r2
 800b7be:	687a      	ldr	r2, [r7, #4]
 800b7c0:	6892      	ldr	r2, [r2, #8]
 800b7c2:	0211      	lsls	r1, r2, #8
 800b7c4:	687a      	ldr	r2, [r7, #4]
 800b7c6:	6912      	ldr	r2, [r2, #16]
 800b7c8:	0852      	lsrs	r2, r2, #1
 800b7ca:	3a01      	subs	r2, #1
 800b7cc:	0552      	lsls	r2, r2, #21
 800b7ce:	4311      	orrs	r1, r2
 800b7d0:	687a      	ldr	r2, [r7, #4]
 800b7d2:	6852      	ldr	r2, [r2, #4]
 800b7d4:	3a01      	subs	r2, #1
 800b7d6:	0112      	lsls	r2, r2, #4
 800b7d8:	430a      	orrs	r2, r1
 800b7da:	4921      	ldr	r1, [pc, #132]	; (800b860 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b7dc:	4313      	orrs	r3, r2
 800b7de:	614b      	str	r3, [r1, #20]
 800b7e0:	e014      	b.n	800b80c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b7e2:	4b1f      	ldr	r3, [pc, #124]	; (800b860 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b7e4:	695a      	ldr	r2, [r3, #20]
 800b7e6:	4b21      	ldr	r3, [pc, #132]	; (800b86c <RCCEx_PLLSAI2_Config+0x1e4>)
 800b7e8:	4013      	ands	r3, r2
 800b7ea:	687a      	ldr	r2, [r7, #4]
 800b7ec:	6892      	ldr	r2, [r2, #8]
 800b7ee:	0211      	lsls	r1, r2, #8
 800b7f0:	687a      	ldr	r2, [r7, #4]
 800b7f2:	6952      	ldr	r2, [r2, #20]
 800b7f4:	0852      	lsrs	r2, r2, #1
 800b7f6:	3a01      	subs	r2, #1
 800b7f8:	0652      	lsls	r2, r2, #25
 800b7fa:	4311      	orrs	r1, r2
 800b7fc:	687a      	ldr	r2, [r7, #4]
 800b7fe:	6852      	ldr	r2, [r2, #4]
 800b800:	3a01      	subs	r2, #1
 800b802:	0112      	lsls	r2, r2, #4
 800b804:	430a      	orrs	r2, r1
 800b806:	4916      	ldr	r1, [pc, #88]	; (800b860 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b808:	4313      	orrs	r3, r2
 800b80a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800b80c:	4b14      	ldr	r3, [pc, #80]	; (800b860 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	4a13      	ldr	r2, [pc, #76]	; (800b860 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b812:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b816:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b818:	f7fd fbfe 	bl	8009018 <HAL_GetTick>
 800b81c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b81e:	e009      	b.n	800b834 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b820:	f7fd fbfa 	bl	8009018 <HAL_GetTick>
 800b824:	4602      	mov	r2, r0
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	1ad3      	subs	r3, r2, r3
 800b82a:	2b02      	cmp	r3, #2
 800b82c:	d902      	bls.n	800b834 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800b82e:	2303      	movs	r3, #3
 800b830:	73fb      	strb	r3, [r7, #15]
          break;
 800b832:	e005      	b.n	800b840 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b834:	4b0a      	ldr	r3, [pc, #40]	; (800b860 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d0ef      	beq.n	800b820 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800b840:	7bfb      	ldrb	r3, [r7, #15]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d106      	bne.n	800b854 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800b846:	4b06      	ldr	r3, [pc, #24]	; (800b860 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b848:	695a      	ldr	r2, [r3, #20]
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	699b      	ldr	r3, [r3, #24]
 800b84e:	4904      	ldr	r1, [pc, #16]	; (800b860 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b850:	4313      	orrs	r3, r2
 800b852:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800b854:	7bfb      	ldrb	r3, [r7, #15]
}
 800b856:	4618      	mov	r0, r3
 800b858:	3710      	adds	r7, #16
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}
 800b85e:	bf00      	nop
 800b860:	40021000 	.word	0x40021000
 800b864:	07ff800f 	.word	0x07ff800f
 800b868:	ff9f800f 	.word	0xff9f800f
 800b86c:	f9ff800f 	.word	0xf9ff800f

0800b870 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b084      	sub	sp, #16
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d101      	bne.n	800b882 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800b87e:	2301      	movs	r3, #1
 800b880:	e096      	b.n	800b9b0 <HAL_RNG_Init+0x140>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	7a5b      	ldrb	r3, [r3, #9]
 800b886:	b2db      	uxtb	r3, r3
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d105      	bne.n	800b898 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2200      	movs	r2, #0
 800b890:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	f7fc fd32 	bl	80082fc <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2202      	movs	r2, #2
 800b89c:	725a      	strb	r2, [r3, #9]

#if defined(RNG_CR_CONDRST)
  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	681a      	ldr	r2, [r3, #0]
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	f022 0204 	bic.w	r2, r2, #4
 800b8ac:	601a      	str	r2, [r3, #0]

  /* RNG CR register configuration. Set value in CR register for CONFIG 1, CONFIG 2 and CONFIG 3 values */
  cr_value = (uint32_t) (RNG_CR_CONFIG_VAL);
 800b8ae:	4b42      	ldr	r3, [pc, #264]	; (800b9b8 <HAL_RNG_Init+0x148>)
 800b8b0:	60fb      	str	r3, [r7, #12]

  /* Configuration of 
     - Clock Error Detection 
     - CONFIG1, CONFIG2, CONFIG3 fields
     when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST | RNG_CR_RNG_CONFIG1
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	681a      	ldr	r2, [r3, #0]
 800b8b8:	4b40      	ldr	r3, [pc, #256]	; (800b9bc <HAL_RNG_Init+0x14c>)
 800b8ba:	4013      	ands	r3, r2
 800b8bc:	687a      	ldr	r2, [r7, #4]
 800b8be:	6851      	ldr	r1, [r2, #4]
 800b8c0:	68fa      	ldr	r2, [r7, #12]
 800b8c2:	430a      	orrs	r2, r1
 800b8c4:	431a      	orrs	r2, r3
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800b8ce:	601a      	str	r2, [r3, #0]
                                 | RNG_CR_RNG_CONFIG2 | RNG_CR_RNG_CONFIG3,
                                 (uint32_t) (RNG_CR_CONDRST | hrng->Init.ClockErrorDetection | cr_value));

#if defined(RNG_VER_3_2) || defined(RNG_VER_3_1) || defined(RNG_VER_3_0)
  /*!< magic number must be written immediately before to RNG_HTCRG */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG_1);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	4a3a      	ldr	r2, [pc, #232]	; (800b9c0 <HAL_RNG_Init+0x150>)
 800b8d6:	611a      	str	r2, [r3, #16]
  /* for best latency and to be compliant with NIST */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	f64a 2274 	movw	r2, #43636	; 0xaa74
 800b8e0:	611a      	str	r2, [r3, #16]
#endif /* RNG_VER_3_2 || RNG_VER_3_1 || RNG_VER_3_0 */

  /* Writing bits CONDRST=0*/
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	681a      	ldr	r2, [r3, #0]
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800b8f0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b8f2:	f7fd fb91 	bl	8009018 <HAL_GetTick>
 800b8f6:	60b8      	str	r0, [r7, #8]

  /* Wait for conditioning reset process to be completed */
  while(HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800b8f8:	e016      	b.n	800b928 <HAL_RNG_Init+0xb8>
  {
    if((HAL_GetTick() - tickstart ) > RNG_TIMEOUT_VALUE)
 800b8fa:	f7fd fb8d 	bl	8009018 <HAL_GetTick>
 800b8fe:	4602      	mov	r2, r0
 800b900:	68bb      	ldr	r3, [r7, #8]
 800b902:	1ad3      	subs	r3, r2, r3
 800b904:	2b02      	cmp	r3, #2
 800b906:	d90f      	bls.n	800b928 <HAL_RNG_Init+0xb8>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b912:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b916:	d107      	bne.n	800b928 <HAL_RNG_Init+0xb8>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2201      	movs	r2, #1
 800b91c:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2202      	movs	r2, #2
 800b922:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800b924:	2301      	movs	r3, #1
 800b926:	e043      	b.n	800b9b0 <HAL_RNG_Init+0x140>
  while(HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b936:	d0e0      	beq.n	800b8fa <HAL_RNG_Init+0x8a>
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	681a      	ldr	r2, [r3, #0]
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	f042 0204 	orr.w	r2, r2, #4
 800b946:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	685b      	ldr	r3, [r3, #4]
 800b94e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b952:	2b40      	cmp	r3, #64	; 0x40
 800b954:	d104      	bne.n	800b960 <HAL_RNG_Init+0xf0>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2204      	movs	r2, #4
 800b95a:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800b95c:	2301      	movs	r3, #1
 800b95e:	e027      	b.n	800b9b0 <HAL_RNG_Init+0x140>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800b960:	f7fd fb5a 	bl	8009018 <HAL_GetTick>
 800b964:	60b8      	str	r0, [r7, #8]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800b966:	e015      	b.n	800b994 <HAL_RNG_Init+0x124>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800b968:	f7fd fb56 	bl	8009018 <HAL_GetTick>
 800b96c:	4602      	mov	r2, r0
 800b96e:	68bb      	ldr	r3, [r7, #8]
 800b970:	1ad3      	subs	r3, r2, r3
 800b972:	2b02      	cmp	r3, #2
 800b974:	d90e      	bls.n	800b994 <HAL_RNG_Init+0x124>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	685b      	ldr	r3, [r3, #4]
 800b97c:	f003 0304 	and.w	r3, r3, #4
 800b980:	2b04      	cmp	r3, #4
 800b982:	d107      	bne.n	800b994 <HAL_RNG_Init+0x124>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2204      	movs	r2, #4
 800b988:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	2202      	movs	r2, #2
 800b98e:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800b990:	2301      	movs	r3, #1
 800b992:	e00d      	b.n	800b9b0 <HAL_RNG_Init+0x140>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	685b      	ldr	r3, [r3, #4]
 800b99a:	f003 0304 	and.w	r3, r3, #4
 800b99e:	2b04      	cmp	r3, #4
 800b9a0:	d0e2      	beq.n	800b968 <HAL_RNG_Init+0xf8>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2201      	movs	r2, #1
 800b9a6:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800b9ae:	2300      	movs	r3, #0
}
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	3710      	adds	r7, #16
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bd80      	pop	{r7, pc}
 800b9b8:	00f00d00 	.word	0x00f00d00
 800b9bc:	bc0f10df 	.word	0xbc0f10df
 800b9c0:	17590abc 	.word	0x17590abc

0800b9c4 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b084      	sub	sp, #16
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
 800b9cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	7a1b      	ldrb	r3, [r3, #8]
 800b9d6:	2b01      	cmp	r3, #1
 800b9d8:	d101      	bne.n	800b9de <HAL_RNG_GenerateRandomNumber+0x1a>
 800b9da:	2302      	movs	r3, #2
 800b9dc:	e03d      	b.n	800ba5a <HAL_RNG_GenerateRandomNumber+0x96>
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2201      	movs	r2, #1
 800b9e2:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	7a5b      	ldrb	r3, [r3, #9]
 800b9e8:	b2db      	uxtb	r3, r3
 800b9ea:	2b01      	cmp	r3, #1
 800b9ec:	d12c      	bne.n	800ba48 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	2202      	movs	r2, #2
 800b9f2:	725a      	strb	r2, [r3, #9]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b9f4:	f7fd fb10 	bl	8009018 <HAL_GetTick>
 800b9f8:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800b9fa:	e011      	b.n	800ba20 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800b9fc:	f7fd fb0c 	bl	8009018 <HAL_GetTick>
 800ba00:	4602      	mov	r2, r0
 800ba02:	68bb      	ldr	r3, [r7, #8]
 800ba04:	1ad3      	subs	r3, r2, r3
 800ba06:	2b02      	cmp	r3, #2
 800ba08:	d90a      	bls.n	800ba20 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2201      	movs	r2, #1
 800ba0e:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2202      	movs	r2, #2
 800ba14:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	2200      	movs	r2, #0
 800ba1a:	721a      	strb	r2, [r3, #8]
        return HAL_ERROR;
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	e01c      	b.n	800ba5a <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	685b      	ldr	r3, [r3, #4]
 800ba26:	f003 0301 	and.w	r3, r3, #1
 800ba2a:	2b01      	cmp	r3, #1
 800ba2c:	d1e6      	bne.n	800b9fc <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	689a      	ldr	r2, [r3, #8]
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	611a      	str	r2, [r3, #16]
    *random32bit = hrng->RandomNumber;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	691a      	ldr	r2, [r3, #16]
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2201      	movs	r2, #1
 800ba44:	725a      	strb	r2, [r3, #9]
 800ba46:	e004      	b.n	800ba52 <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	2204      	movs	r2, #4
 800ba4c:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 800ba4e:	2301      	movs	r3, #1
 800ba50:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	2200      	movs	r2, #0
 800ba56:	721a      	strb	r2, [r3, #8]

  return status;
 800ba58:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	3710      	adds	r7, #16
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bd80      	pop	{r7, pc}
	...

0800ba64 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b084      	sub	sp, #16
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800ba6c:	2301      	movs	r3, #1
 800ba6e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d07f      	beq.n	800bb76 <HAL_RTC_Init+0x112>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ba7c:	b2db      	uxtb	r3, r3
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d106      	bne.n	800ba90 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2200      	movs	r2, #0
 800ba86:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800ba8a:	6878      	ldr	r0, [r7, #4]
 800ba8c:	f7fc fca2 	bl	80083d4 <HAL_RTC_MspInit>
    }
#endif /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800ba96:	605a      	str	r2, [r3, #4]
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2202      	movs	r2, #2
 800ba9c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	22ca      	movs	r2, #202	; 0xca
 800baa6:	625a      	str	r2, [r3, #36]	; 0x24
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	2253      	movs	r2, #83	; 0x53
 800baae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	f000 fa65 	bl	800bf80 <RTC_EnterInitMode>
 800bab6:	4603      	mov	r3, r0
 800bab8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800baba:	7bfb      	ldrb	r3, [r7, #15]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d15a      	bne.n	800bb76 <HAL_RTC_Init+0x112>
    {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	699b      	ldr	r3, [r3, #24]
 800bac6:	687a      	ldr	r2, [r7, #4]
 800bac8:	6812      	ldr	r2, [r2, #0]
 800baca:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800bace:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bad2:	6193      	str	r3, [r2, #24]
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	6999      	ldr	r1, [r3, #24]
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	689a      	ldr	r2, [r3, #8]
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	695b      	ldr	r3, [r3, #20]
 800bae2:	431a      	orrs	r2, r3
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	69db      	ldr	r3, [r3, #28]
 800bae8:	431a      	orrs	r2, r3
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	430a      	orrs	r2, r1
 800baf0:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	687a      	ldr	r2, [r7, #4]
 800baf8:	6912      	ldr	r2, [r2, #16]
 800bafa:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	6919      	ldr	r1, [r3, #16]
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	68db      	ldr	r3, [r3, #12]
 800bb06:	041a      	lsls	r2, r3, #16
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	430a      	orrs	r2, r1
 800bb0e:	611a      	str	r2, [r3, #16]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800bb10:	4b1b      	ldr	r3, [pc, #108]	; (800bb80 <HAL_RTC_Init+0x11c>)
 800bb12:	68db      	ldr	r3, [r3, #12]
 800bb14:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb20:	430b      	orrs	r3, r1
 800bb22:	4917      	ldr	r1, [pc, #92]	; (800bb80 <HAL_RTC_Init+0x11c>)
 800bb24:	4313      	orrs	r3, r2
 800bb26:	60cb      	str	r3, [r1, #12]
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800bb28:	6878      	ldr	r0, [r7, #4]
 800bb2a:	f000 fa5f 	bl	800bfec <RTC_ExitInitMode>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800bb32:	7bfb      	ldrb	r3, [r7, #15]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d11e      	bne.n	800bb76 <HAL_RTC_Init+0x112>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	699a      	ldr	r2, [r3, #24]
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 800bb46:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	6999      	ldr	r1, [r3, #24]
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	6a1b      	ldr	r3, [r3, #32]
 800bb56:	431a      	orrs	r2, r3
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	699b      	ldr	r3, [r3, #24]
 800bb5c:	431a      	orrs	r2, r3
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	430a      	orrs	r2, r1
 800bb64:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	22ff      	movs	r2, #255	; 0xff
 800bb6c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2201      	movs	r2, #1
 800bb72:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      }
    }
  }

  return status;
 800bb76:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb78:	4618      	mov	r0, r3
 800bb7a:	3710      	adds	r7, #16
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}
 800bb80:	40002800 	.word	0x40002800

0800bb84 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800bb84:	b590      	push	{r4, r7, lr}
 800bb86:	b087      	sub	sp, #28
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	60f8      	str	r0, [r7, #12]
 800bb8c:	60b9      	str	r1, [r7, #8]
 800bb8e:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bb96:	2b01      	cmp	r3, #1
 800bb98:	d101      	bne.n	800bb9e <HAL_RTC_SetTime+0x1a>
 800bb9a:	2302      	movs	r3, #2
 800bb9c:	e08b      	b.n	800bcb6 <HAL_RTC_SetTime+0x132>
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	2201      	movs	r2, #1
 800bba2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  hrtc->State = HAL_RTC_STATE_BUSY;
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	2202      	movs	r2, #2
 800bbaa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	22ca      	movs	r2, #202	; 0xca
 800bbb4:	625a      	str	r2, [r3, #36]	; 0x24
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	2253      	movs	r2, #83	; 0x53
 800bbbc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800bbbe:	68f8      	ldr	r0, [r7, #12]
 800bbc0:	f000 f9de 	bl	800bf80 <RTC_EnterInitMode>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800bbc8:	7cfb      	ldrb	r3, [r7, #19]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d15e      	bne.n	800bc8c <HAL_RTC_SetTime+0x108>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800bbce:	4b3c      	ldr	r3, [pc, #240]	; (800bcc0 <HAL_RTC_SetTime+0x13c>)
 800bbd0:	68db      	ldr	r3, [r3, #12]
 800bbd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bbd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bbda:	d057      	beq.n	800bc8c <HAL_RTC_SetTime+0x108>
    {
      if (Format == RTC_FORMAT_BIN)
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d125      	bne.n	800bc2e <HAL_RTC_SetTime+0xaa>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800bbe2:	4b37      	ldr	r3, [pc, #220]	; (800bcc0 <HAL_RTC_SetTime+0x13c>)
 800bbe4:	699b      	ldr	r3, [r3, #24]
 800bbe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d102      	bne.n	800bbf4 <HAL_RTC_SetTime+0x70>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800bbee:	68bb      	ldr	r3, [r7, #8]
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bbf4:	68bb      	ldr	r3, [r7, #8]
 800bbf6:	781b      	ldrb	r3, [r3, #0]
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	f000 fa35 	bl	800c068 <RTC_ByteToBcd2>
 800bbfe:	4603      	mov	r3, r0
 800bc00:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bc02:	68bb      	ldr	r3, [r7, #8]
 800bc04:	785b      	ldrb	r3, [r3, #1]
 800bc06:	4618      	mov	r0, r3
 800bc08:	f000 fa2e 	bl	800c068 <RTC_ByteToBcd2>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bc10:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800bc12:	68bb      	ldr	r3, [r7, #8]
 800bc14:	789b      	ldrb	r3, [r3, #2]
 800bc16:	4618      	mov	r0, r3
 800bc18:	f000 fa26 	bl	800c068 <RTC_ByteToBcd2>
 800bc1c:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bc1e:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800bc22:	68bb      	ldr	r3, [r7, #8]
 800bc24:	78db      	ldrb	r3, [r3, #3]
 800bc26:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bc28:	4313      	orrs	r3, r2
 800bc2a:	617b      	str	r3, [r7, #20]
 800bc2c:	e017      	b.n	800bc5e <HAL_RTC_SetTime+0xda>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800bc2e:	4b24      	ldr	r3, [pc, #144]	; (800bcc0 <HAL_RTC_SetTime+0x13c>)
 800bc30:	699b      	ldr	r3, [r3, #24]
 800bc32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d102      	bne.n	800bc40 <HAL_RTC_SetTime+0xbc>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800bc3a:	68bb      	ldr	r3, [r7, #8]
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	781b      	ldrb	r3, [r3, #0]
 800bc44:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bc46:	68bb      	ldr	r3, [r7, #8]
 800bc48:	785b      	ldrb	r3, [r3, #1]
 800bc4a:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bc4c:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800bc4e:	68ba      	ldr	r2, [r7, #8]
 800bc50:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bc52:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	78db      	ldrb	r3, [r3, #3]
 800bc58:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bc5a:	4313      	orrs	r3, r2
 800bc5c:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800bc5e:	4a18      	ldr	r2, [pc, #96]	; (800bcc0 <HAL_RTC_SetTime+0x13c>)
 800bc60:	697b      	ldr	r3, [r7, #20]
 800bc62:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800bc66:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800bc6a:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800bc6c:	4b14      	ldr	r3, [pc, #80]	; (800bcc0 <HAL_RTC_SetTime+0x13c>)
 800bc6e:	699b      	ldr	r3, [r3, #24]
 800bc70:	4a13      	ldr	r2, [pc, #76]	; (800bcc0 <HAL_RTC_SetTime+0x13c>)
 800bc72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bc76:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 800bc78:	4b11      	ldr	r3, [pc, #68]	; (800bcc0 <HAL_RTC_SetTime+0x13c>)
 800bc7a:	699a      	ldr	r2, [r3, #24]
 800bc7c:	68bb      	ldr	r3, [r7, #8]
 800bc7e:	68d9      	ldr	r1, [r3, #12]
 800bc80:	68bb      	ldr	r3, [r7, #8]
 800bc82:	691b      	ldr	r3, [r3, #16]
 800bc84:	430b      	orrs	r3, r1
 800bc86:	490e      	ldr	r1, [pc, #56]	; (800bcc0 <HAL_RTC_SetTime+0x13c>)
 800bc88:	4313      	orrs	r3, r2
 800bc8a:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 800bc8c:	68f8      	ldr	r0, [r7, #12]
 800bc8e:	f000 f9ad 	bl	800bfec <RTC_ExitInitMode>
 800bc92:	4603      	mov	r3, r0
 800bc94:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	22ff      	movs	r2, #255	; 0xff
 800bc9c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800bc9e:	7cfb      	ldrb	r3, [r7, #19]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d103      	bne.n	800bcac <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	2201      	movs	r2, #1
 800bca8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	2200      	movs	r2, #0
 800bcb0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800bcb4:	7cfb      	ldrb	r3, [r7, #19]
}
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	371c      	adds	r7, #28
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd90      	pop	{r4, r7, pc}
 800bcbe:	bf00      	nop
 800bcc0:	40002800 	.word	0x40002800

0800bcc4 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b086      	sub	sp, #24
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	60f8      	str	r0, [r7, #12]
 800bccc:	60b9      	str	r1, [r7, #8]
 800bcce:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 800bcd0:	4b2c      	ldr	r3, [pc, #176]	; (800bd84 <HAL_RTC_GetTime+0xc0>)
 800bcd2:	689a      	ldr	r2, [r3, #8]
 800bcd4:	68bb      	ldr	r3, [r7, #8]
 800bcd6:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800bcd8:	4b2a      	ldr	r3, [pc, #168]	; (800bd84 <HAL_RTC_GetTime+0xc0>)
 800bcda:	68db      	ldr	r3, [r3, #12]
 800bcdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bce0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bce4:	d049      	beq.n	800bd7a <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field*/
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 800bce6:	4b27      	ldr	r3, [pc, #156]	; (800bd84 <HAL_RTC_GetTime+0xc0>)
 800bce8:	691b      	ldr	r3, [r3, #16]
 800bcea:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800bcee:	68bb      	ldr	r3, [r7, #8]
 800bcf0:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 800bcf2:	4b24      	ldr	r3, [pc, #144]	; (800bd84 <HAL_RTC_GetTime+0xc0>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800bcfa:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800bcfe:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800bd00:	697b      	ldr	r3, [r7, #20]
 800bd02:	0c1b      	lsrs	r3, r3, #16
 800bd04:	b2db      	uxtb	r3, r3
 800bd06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bd0a:	b2da      	uxtb	r2, r3
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800bd10:	697b      	ldr	r3, [r7, #20]
 800bd12:	0a1b      	lsrs	r3, r3, #8
 800bd14:	b2db      	uxtb	r3, r3
 800bd16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd1a:	b2da      	uxtb	r2, r3
 800bd1c:	68bb      	ldr	r3, [r7, #8]
 800bd1e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800bd20:	697b      	ldr	r3, [r7, #20]
 800bd22:	b2db      	uxtb	r3, r3
 800bd24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd28:	b2da      	uxtb	r2, r3
 800bd2a:	68bb      	ldr	r3, [r7, #8]
 800bd2c:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800bd2e:	697b      	ldr	r3, [r7, #20]
 800bd30:	0d9b      	lsrs	r3, r3, #22
 800bd32:	b2db      	uxtb	r3, r3
 800bd34:	f003 0301 	and.w	r3, r3, #1
 800bd38:	b2da      	uxtb	r2, r3
 800bd3a:	68bb      	ldr	r3, [r7, #8]
 800bd3c:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d11a      	bne.n	800bd7a <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800bd44:	68bb      	ldr	r3, [r7, #8]
 800bd46:	781b      	ldrb	r3, [r3, #0]
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f000 f9ad 	bl	800c0a8 <RTC_Bcd2ToByte>
 800bd4e:	4603      	mov	r3, r0
 800bd50:	461a      	mov	r2, r3
 800bd52:	68bb      	ldr	r3, [r7, #8]
 800bd54:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800bd56:	68bb      	ldr	r3, [r7, #8]
 800bd58:	785b      	ldrb	r3, [r3, #1]
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	f000 f9a4 	bl	800c0a8 <RTC_Bcd2ToByte>
 800bd60:	4603      	mov	r3, r0
 800bd62:	461a      	mov	r2, r3
 800bd64:	68bb      	ldr	r3, [r7, #8]
 800bd66:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800bd68:	68bb      	ldr	r3, [r7, #8]
 800bd6a:	789b      	ldrb	r3, [r3, #2]
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	f000 f99b 	bl	800c0a8 <RTC_Bcd2ToByte>
 800bd72:	4603      	mov	r3, r0
 800bd74:	461a      	mov	r2, r3
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 800bd7a:	2300      	movs	r3, #0
}
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	3718      	adds	r7, #24
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}
 800bd84:	40002800 	.word	0x40002800

0800bd88 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800bd88:	b590      	push	{r4, r7, lr}
 800bd8a:	b087      	sub	sp, #28
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	60f8      	str	r0, [r7, #12]
 800bd90:	60b9      	str	r1, [r7, #8]
 800bd92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bd9a:	2b01      	cmp	r3, #1
 800bd9c:	d101      	bne.n	800bda2 <HAL_RTC_SetDate+0x1a>
 800bd9e:	2302      	movs	r3, #2
 800bda0:	e074      	b.n	800be8c <HAL_RTC_SetDate+0x104>
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	2201      	movs	r2, #1
 800bda6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  hrtc->State = HAL_RTC_STATE_BUSY;
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	2202      	movs	r2, #2
 800bdae:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d10e      	bne.n	800bdd6 <HAL_RTC_SetDate+0x4e>
 800bdb8:	68bb      	ldr	r3, [r7, #8]
 800bdba:	785b      	ldrb	r3, [r3, #1]
 800bdbc:	f003 0310 	and.w	r3, r3, #16
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d008      	beq.n	800bdd6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800bdc4:	68bb      	ldr	r3, [r7, #8]
 800bdc6:	785b      	ldrb	r3, [r3, #1]
 800bdc8:	f023 0310 	bic.w	r3, r3, #16
 800bdcc:	b2db      	uxtb	r3, r3
 800bdce:	330a      	adds	r3, #10
 800bdd0:	b2da      	uxtb	r2, r3
 800bdd2:	68bb      	ldr	r3, [r7, #8]
 800bdd4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d11c      	bne.n	800be16 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800bddc:	68bb      	ldr	r3, [r7, #8]
 800bdde:	78db      	ldrb	r3, [r3, #3]
 800bde0:	4618      	mov	r0, r3
 800bde2:	f000 f941 	bl	800c068 <RTC_ByteToBcd2>
 800bde6:	4603      	mov	r3, r0
 800bde8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800bdea:	68bb      	ldr	r3, [r7, #8]
 800bdec:	785b      	ldrb	r3, [r3, #1]
 800bdee:	4618      	mov	r0, r3
 800bdf0:	f000 f93a 	bl	800c068 <RTC_ByteToBcd2>
 800bdf4:	4603      	mov	r3, r0
 800bdf6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800bdf8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800bdfa:	68bb      	ldr	r3, [r7, #8]
 800bdfc:	789b      	ldrb	r3, [r3, #2]
 800bdfe:	4618      	mov	r0, r3
 800be00:	f000 f932 	bl	800c068 <RTC_ByteToBcd2>
 800be04:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800be06:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800be0a:	68bb      	ldr	r3, [r7, #8]
 800be0c:	781b      	ldrb	r3, [r3, #0]
 800be0e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800be10:	4313      	orrs	r3, r2
 800be12:	617b      	str	r3, [r7, #20]
 800be14:	e00e      	b.n	800be34 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800be16:	68bb      	ldr	r3, [r7, #8]
 800be18:	78db      	ldrb	r3, [r3, #3]
 800be1a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	785b      	ldrb	r3, [r3, #1]
 800be20:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800be22:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800be24:	68ba      	ldr	r2, [r7, #8]
 800be26:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800be28:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800be2a:	68bb      	ldr	r3, [r7, #8]
 800be2c:	781b      	ldrb	r3, [r3, #0]
 800be2e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800be30:	4313      	orrs	r3, r2
 800be32:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	22ca      	movs	r2, #202	; 0xca
 800be3a:	625a      	str	r2, [r3, #36]	; 0x24
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	2253      	movs	r2, #83	; 0x53
 800be42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800be44:	68f8      	ldr	r0, [r7, #12]
 800be46:	f000 f89b 	bl	800bf80 <RTC_EnterInitMode>
 800be4a:	4603      	mov	r3, r0
 800be4c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800be4e:	7cfb      	ldrb	r3, [r7, #19]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d10b      	bne.n	800be6c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800be54:	4a0f      	ldr	r2, [pc, #60]	; (800be94 <HAL_RTC_SetDate+0x10c>)
 800be56:	697b      	ldr	r3, [r7, #20]
 800be58:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800be5c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800be60:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800be62:	68f8      	ldr	r0, [r7, #12]
 800be64:	f000 f8c2 	bl	800bfec <RTC_ExitInitMode>
 800be68:	4603      	mov	r3, r0
 800be6a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	22ff      	movs	r2, #255	; 0xff
 800be72:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800be74:	7cfb      	ldrb	r3, [r7, #19]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d103      	bne.n	800be82 <HAL_RTC_SetDate+0xfa>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	2201      	movs	r2, #1
 800be7e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	2200      	movs	r2, #0
 800be86:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800be8a:	7cfb      	ldrb	r3, [r7, #19]
}
 800be8c:	4618      	mov	r0, r3
 800be8e:	371c      	adds	r7, #28
 800be90:	46bd      	mov	sp, r7
 800be92:	bd90      	pop	{r4, r7, pc}
 800be94:	40002800 	.word	0x40002800

0800be98 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b086      	sub	sp, #24
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	60f8      	str	r0, [r7, #12]
 800bea0:	60b9      	str	r1, [r7, #8]
 800bea2:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 800bea4:	4b22      	ldr	r3, [pc, #136]	; (800bf30 <HAL_RTC_GetDate+0x98>)
 800bea6:	685b      	ldr	r3, [r3, #4]
 800bea8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800beac:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800beb0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800beb2:	697b      	ldr	r3, [r7, #20]
 800beb4:	0c1b      	lsrs	r3, r3, #16
 800beb6:	b2da      	uxtb	r2, r3
 800beb8:	68bb      	ldr	r3, [r7, #8]
 800beba:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800bebc:	697b      	ldr	r3, [r7, #20]
 800bebe:	0a1b      	lsrs	r3, r3, #8
 800bec0:	b2db      	uxtb	r3, r3
 800bec2:	f003 031f 	and.w	r3, r3, #31
 800bec6:	b2da      	uxtb	r2, r3
 800bec8:	68bb      	ldr	r3, [r7, #8]
 800beca:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800becc:	697b      	ldr	r3, [r7, #20]
 800bece:	b2db      	uxtb	r3, r3
 800bed0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bed4:	b2da      	uxtb	r2, r3
 800bed6:	68bb      	ldr	r3, [r7, #8]
 800bed8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800beda:	697b      	ldr	r3, [r7, #20]
 800bedc:	0b5b      	lsrs	r3, r3, #13
 800bede:	b2db      	uxtb	r3, r3
 800bee0:	f003 0307 	and.w	r3, r3, #7
 800bee4:	b2da      	uxtb	r2, r3
 800bee6:	68bb      	ldr	r3, [r7, #8]
 800bee8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d11a      	bne.n	800bf26 <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800bef0:	68bb      	ldr	r3, [r7, #8]
 800bef2:	78db      	ldrb	r3, [r3, #3]
 800bef4:	4618      	mov	r0, r3
 800bef6:	f000 f8d7 	bl	800c0a8 <RTC_Bcd2ToByte>
 800befa:	4603      	mov	r3, r0
 800befc:	461a      	mov	r2, r3
 800befe:	68bb      	ldr	r3, [r7, #8]
 800bf00:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800bf02:	68bb      	ldr	r3, [r7, #8]
 800bf04:	785b      	ldrb	r3, [r3, #1]
 800bf06:	4618      	mov	r0, r3
 800bf08:	f000 f8ce 	bl	800c0a8 <RTC_Bcd2ToByte>
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	461a      	mov	r2, r3
 800bf10:	68bb      	ldr	r3, [r7, #8]
 800bf12:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800bf14:	68bb      	ldr	r3, [r7, #8]
 800bf16:	789b      	ldrb	r3, [r3, #2]
 800bf18:	4618      	mov	r0, r3
 800bf1a:	f000 f8c5 	bl	800c0a8 <RTC_Bcd2ToByte>
 800bf1e:	4603      	mov	r3, r0
 800bf20:	461a      	mov	r2, r3
 800bf22:	68bb      	ldr	r3, [r7, #8]
 800bf24:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800bf26:	2300      	movs	r3, #0
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	3718      	adds	r7, #24
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}
 800bf30:	40002800 	.word	0x40002800

0800bf34 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b084      	sub	sp, #16
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	68da      	ldr	r2, [r3, #12]
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800bf4a:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
#endif

  tickstart = HAL_GetTick();
 800bf4c:	f7fd f864 	bl	8009018 <HAL_GetTick>
 800bf50:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800bf52:	e009      	b.n	800bf68 <HAL_RTC_WaitForSynchro+0x34>
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800bf54:	f7fd f860 	bl	8009018 <HAL_GetTick>
 800bf58:	4602      	mov	r2, r0
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	1ad3      	subs	r3, r2, r3
 800bf5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bf62:	d901      	bls.n	800bf68 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800bf64:	2303      	movs	r3, #3
 800bf66:	e007      	b.n	800bf78 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	68db      	ldr	r3, [r3, #12]
 800bf6e:	f003 0320 	and.w	r3, r3, #32
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d0ee      	beq.n	800bf54 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800bf76:	2300      	movs	r3, #0
}
 800bf78:	4618      	mov	r0, r3
 800bf7a:	3710      	adds	r7, #16
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}

0800bf80 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b084      	sub	sp, #16
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bf88:	2300      	movs	r3, #0
 800bf8a:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	68db      	ldr	r3, [r3, #12]
 800bf92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d123      	bne.n	800bfe2 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	68da      	ldr	r2, [r3, #12]
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bfa8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800bfaa:	f7fd f835 	bl	8009018 <HAL_GetTick>
 800bfae:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800bfb0:	e00d      	b.n	800bfce <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800bfb2:	f7fd f831 	bl	8009018 <HAL_GetTick>
 800bfb6:	4602      	mov	r2, r0
 800bfb8:	68bb      	ldr	r3, [r7, #8]
 800bfba:	1ad3      	subs	r3, r2, r3
 800bfbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bfc0:	d905      	bls.n	800bfce <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 800bfc2:	2303      	movs	r3, #3
 800bfc4:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	2203      	movs	r2, #3
 800bfca:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	68db      	ldr	r3, [r3, #12]
 800bfd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d102      	bne.n	800bfe2 <RTC_EnterInitMode+0x62>
 800bfdc:	7bfb      	ldrb	r3, [r7, #15]
 800bfde:	2b03      	cmp	r3, #3
 800bfe0:	d1e7      	bne.n	800bfb2 <RTC_EnterInitMode+0x32>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800bfe2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	3710      	adds	r7, #16
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bd80      	pop	{r7, pc}

0800bfec <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b084      	sub	sp, #16
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bff4:	2300      	movs	r3, #0
 800bff6:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800bff8:	4b1a      	ldr	r3, [pc, #104]	; (800c064 <RTC_ExitInitMode+0x78>)
 800bffa:	68db      	ldr	r3, [r3, #12]
 800bffc:	4a19      	ldr	r2, [pc, #100]	; (800c064 <RTC_ExitInitMode+0x78>)
 800bffe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c002:	60d3      	str	r3, [r2, #12]
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800c004:	4b17      	ldr	r3, [pc, #92]	; (800c064 <RTC_ExitInitMode+0x78>)
 800c006:	699b      	ldr	r3, [r3, #24]
 800c008:	f003 0320 	and.w	r3, r3, #32
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d10c      	bne.n	800c02a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f7ff ff8f 	bl	800bf34 <HAL_RTC_WaitForSynchro>
 800c016:	4603      	mov	r3, r0
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d01e      	beq.n	800c05a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2203      	movs	r2, #3
 800c020:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      status = HAL_TIMEOUT;
 800c024:	2303      	movs	r3, #3
 800c026:	73fb      	strb	r3, [r7, #15]
 800c028:	e017      	b.n	800c05a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c02a:	4b0e      	ldr	r3, [pc, #56]	; (800c064 <RTC_ExitInitMode+0x78>)
 800c02c:	699b      	ldr	r3, [r3, #24]
 800c02e:	4a0d      	ldr	r2, [pc, #52]	; (800c064 <RTC_ExitInitMode+0x78>)
 800c030:	f023 0320 	bic.w	r3, r3, #32
 800c034:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	f7ff ff7c 	bl	800bf34 <HAL_RTC_WaitForSynchro>
 800c03c:	4603      	mov	r3, r0
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d005      	beq.n	800c04e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2203      	movs	r2, #3
 800c046:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      status = HAL_TIMEOUT;
 800c04a:	2303      	movs	r3, #3
 800c04c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c04e:	4b05      	ldr	r3, [pc, #20]	; (800c064 <RTC_ExitInitMode+0x78>)
 800c050:	699b      	ldr	r3, [r3, #24]
 800c052:	4a04      	ldr	r2, [pc, #16]	; (800c064 <RTC_ExitInitMode+0x78>)
 800c054:	f043 0320 	orr.w	r3, r3, #32
 800c058:	6193      	str	r3, [r2, #24]
  }

  return status;
 800c05a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c05c:	4618      	mov	r0, r3
 800c05e:	3710      	adds	r7, #16
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}
 800c064:	40002800 	.word	0x40002800

0800c068 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800c068:	b480      	push	{r7}
 800c06a:	b085      	sub	sp, #20
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	4603      	mov	r3, r0
 800c070:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800c072:	2300      	movs	r3, #0
 800c074:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800c076:	79fb      	ldrb	r3, [r7, #7]
 800c078:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800c07a:	e005      	b.n	800c088 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	3301      	adds	r3, #1
 800c080:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800c082:	7afb      	ldrb	r3, [r7, #11]
 800c084:	3b0a      	subs	r3, #10
 800c086:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800c088:	7afb      	ldrb	r3, [r7, #11]
 800c08a:	2b09      	cmp	r3, #9
 800c08c:	d8f6      	bhi.n	800c07c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	b2db      	uxtb	r3, r3
 800c092:	011b      	lsls	r3, r3, #4
 800c094:	b2da      	uxtb	r2, r3
 800c096:	7afb      	ldrb	r3, [r7, #11]
 800c098:	4313      	orrs	r3, r2
 800c09a:	b2db      	uxtb	r3, r3
}
 800c09c:	4618      	mov	r0, r3
 800c09e:	3714      	adds	r7, #20
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a6:	4770      	bx	lr

0800c0a8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800c0a8:	b480      	push	{r7}
 800c0aa:	b085      	sub	sp, #20
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	4603      	mov	r3, r0
 800c0b0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800c0b2:	79fb      	ldrb	r3, [r7, #7]
 800c0b4:	091b      	lsrs	r3, r3, #4
 800c0b6:	b2db      	uxtb	r3, r3
 800c0b8:	461a      	mov	r2, r3
 800c0ba:	0092      	lsls	r2, r2, #2
 800c0bc:	4413      	add	r3, r2
 800c0be:	005b      	lsls	r3, r3, #1
 800c0c0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800c0c2:	79fb      	ldrb	r3, [r7, #7]
 800c0c4:	f003 030f 	and.w	r3, r3, #15
 800c0c8:	b2da      	uxtb	r2, r3
 800c0ca:	7bfb      	ldrb	r3, [r7, #15]
 800c0cc:	4413      	add	r3, r2
 800c0ce:	b2db      	uxtb	r3, r3
}
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	3714      	adds	r7, #20
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0da:	4770      	bx	lr

0800c0dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b084      	sub	sp, #16
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d101      	bne.n	800c0ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c0ea:	2301      	movs	r3, #1
 800c0ec:	e095      	b.n	800c21a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d108      	bne.n	800c108 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	685b      	ldr	r3, [r3, #4]
 800c0fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c0fe:	d009      	beq.n	800c114 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	2200      	movs	r2, #0
 800c104:	61da      	str	r2, [r3, #28]
 800c106:	e005      	b.n	800c114 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	2200      	movs	r2, #0
 800c10c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	2200      	movs	r2, #0
 800c112:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2200      	movs	r2, #0
 800c118:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c120:	b2db      	uxtb	r3, r3
 800c122:	2b00      	cmp	r3, #0
 800c124:	d106      	bne.n	800c134 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	2200      	movs	r2, #0
 800c12a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c12e:	6878      	ldr	r0, [r7, #4]
 800c130:	f7fc f9cc 	bl	80084cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2202      	movs	r2, #2
 800c138:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	681a      	ldr	r2, [r3, #0]
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c14a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	68db      	ldr	r3, [r3, #12]
 800c150:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c154:	d902      	bls.n	800c15c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800c156:	2300      	movs	r3, #0
 800c158:	60fb      	str	r3, [r7, #12]
 800c15a:	e002      	b.n	800c162 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800c15c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c160:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	68db      	ldr	r3, [r3, #12]
 800c166:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800c16a:	d007      	beq.n	800c17c <HAL_SPI_Init+0xa0>
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	68db      	ldr	r3, [r3, #12]
 800c170:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c174:	d002      	beq.n	800c17c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2200      	movs	r2, #0
 800c17a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	685b      	ldr	r3, [r3, #4]
 800c180:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	689b      	ldr	r3, [r3, #8]
 800c188:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800c18c:	431a      	orrs	r2, r3
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	691b      	ldr	r3, [r3, #16]
 800c192:	f003 0302 	and.w	r3, r3, #2
 800c196:	431a      	orrs	r2, r3
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	695b      	ldr	r3, [r3, #20]
 800c19c:	f003 0301 	and.w	r3, r3, #1
 800c1a0:	431a      	orrs	r2, r3
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	699b      	ldr	r3, [r3, #24]
 800c1a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c1aa:	431a      	orrs	r2, r3
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	69db      	ldr	r3, [r3, #28]
 800c1b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c1b4:	431a      	orrs	r2, r3
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	6a1b      	ldr	r3, [r3, #32]
 800c1ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1be:	ea42 0103 	orr.w	r1, r2, r3
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1c6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	430a      	orrs	r2, r1
 800c1d0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	699b      	ldr	r3, [r3, #24]
 800c1d6:	0c1b      	lsrs	r3, r3, #16
 800c1d8:	f003 0204 	and.w	r2, r3, #4
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1e0:	f003 0310 	and.w	r3, r3, #16
 800c1e4:	431a      	orrs	r2, r3
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1ea:	f003 0308 	and.w	r3, r3, #8
 800c1ee:	431a      	orrs	r2, r3
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	68db      	ldr	r3, [r3, #12]
 800c1f4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800c1f8:	ea42 0103 	orr.w	r1, r2, r3
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	430a      	orrs	r2, r1
 800c208:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2200      	movs	r2, #0
 800c20e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2201      	movs	r2, #1
 800c214:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800c218:	2300      	movs	r3, #0
}
 800c21a:	4618      	mov	r0, r3
 800c21c:	3710      	adds	r7, #16
 800c21e:	46bd      	mov	sp, r7
 800c220:	bd80      	pop	{r7, pc}

0800c222 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c222:	b580      	push	{r7, lr}
 800c224:	b088      	sub	sp, #32
 800c226:	af00      	add	r7, sp, #0
 800c228:	60f8      	str	r0, [r7, #12]
 800c22a:	60b9      	str	r1, [r7, #8]
 800c22c:	603b      	str	r3, [r7, #0]
 800c22e:	4613      	mov	r3, r2
 800c230:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c232:	2300      	movs	r3, #0
 800c234:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c23c:	2b01      	cmp	r3, #1
 800c23e:	d101      	bne.n	800c244 <HAL_SPI_Transmit+0x22>
 800c240:	2302      	movs	r3, #2
 800c242:	e158      	b.n	800c4f6 <HAL_SPI_Transmit+0x2d4>
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	2201      	movs	r2, #1
 800c248:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c24c:	f7fc fee4 	bl	8009018 <HAL_GetTick>
 800c250:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800c252:	88fb      	ldrh	r3, [r7, #6]
 800c254:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c25c:	b2db      	uxtb	r3, r3
 800c25e:	2b01      	cmp	r3, #1
 800c260:	d002      	beq.n	800c268 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800c262:	2302      	movs	r3, #2
 800c264:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c266:	e13d      	b.n	800c4e4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800c268:	68bb      	ldr	r3, [r7, #8]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d002      	beq.n	800c274 <HAL_SPI_Transmit+0x52>
 800c26e:	88fb      	ldrh	r3, [r7, #6]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d102      	bne.n	800c27a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800c274:	2301      	movs	r3, #1
 800c276:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c278:	e134      	b.n	800c4e4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	2203      	movs	r2, #3
 800c27e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	2200      	movs	r2, #0
 800c286:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	68ba      	ldr	r2, [r7, #8]
 800c28c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	88fa      	ldrh	r2, [r7, #6]
 800c292:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	88fa      	ldrh	r2, [r7, #6]
 800c298:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	2200      	movs	r2, #0
 800c29e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	689b      	ldr	r3, [r3, #8]
 800c2c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c2c4:	d10f      	bne.n	800c2e6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	681a      	ldr	r2, [r3, #0]
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c2d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	681a      	ldr	r2, [r3, #0]
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c2e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2f0:	2b40      	cmp	r3, #64	; 0x40
 800c2f2:	d007      	beq.n	800c304 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	681a      	ldr	r2, [r3, #0]
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c302:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	68db      	ldr	r3, [r3, #12]
 800c308:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c30c:	d94b      	bls.n	800c3a6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	685b      	ldr	r3, [r3, #4]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d002      	beq.n	800c31c <HAL_SPI_Transmit+0xfa>
 800c316:	8afb      	ldrh	r3, [r7, #22]
 800c318:	2b01      	cmp	r3, #1
 800c31a:	d13e      	bne.n	800c39a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c320:	881a      	ldrh	r2, [r3, #0]
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c32c:	1c9a      	adds	r2, r3, #2
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c336:	b29b      	uxth	r3, r3
 800c338:	3b01      	subs	r3, #1
 800c33a:	b29a      	uxth	r2, r3
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800c340:	e02b      	b.n	800c39a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	689b      	ldr	r3, [r3, #8]
 800c348:	f003 0302 	and.w	r3, r3, #2
 800c34c:	2b02      	cmp	r3, #2
 800c34e:	d112      	bne.n	800c376 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c354:	881a      	ldrh	r2, [r3, #0]
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c360:	1c9a      	adds	r2, r3, #2
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c36a:	b29b      	uxth	r3, r3
 800c36c:	3b01      	subs	r3, #1
 800c36e:	b29a      	uxth	r2, r3
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c374:	e011      	b.n	800c39a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c376:	f7fc fe4f 	bl	8009018 <HAL_GetTick>
 800c37a:	4602      	mov	r2, r0
 800c37c:	69bb      	ldr	r3, [r7, #24]
 800c37e:	1ad3      	subs	r3, r2, r3
 800c380:	683a      	ldr	r2, [r7, #0]
 800c382:	429a      	cmp	r2, r3
 800c384:	d803      	bhi.n	800c38e <HAL_SPI_Transmit+0x16c>
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c38c:	d102      	bne.n	800c394 <HAL_SPI_Transmit+0x172>
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d102      	bne.n	800c39a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800c394:	2303      	movs	r3, #3
 800c396:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c398:	e0a4      	b.n	800c4e4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c39e:	b29b      	uxth	r3, r3
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d1ce      	bne.n	800c342 <HAL_SPI_Transmit+0x120>
 800c3a4:	e07c      	b.n	800c4a0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	685b      	ldr	r3, [r3, #4]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d002      	beq.n	800c3b4 <HAL_SPI_Transmit+0x192>
 800c3ae:	8afb      	ldrh	r3, [r7, #22]
 800c3b0:	2b01      	cmp	r3, #1
 800c3b2:	d170      	bne.n	800c496 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c3b8:	b29b      	uxth	r3, r3
 800c3ba:	2b01      	cmp	r3, #1
 800c3bc:	d912      	bls.n	800c3e4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3c2:	881a      	ldrh	r2, [r3, #0]
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3ce:	1c9a      	adds	r2, r3, #2
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c3d8:	b29b      	uxth	r3, r3
 800c3da:	3b02      	subs	r3, #2
 800c3dc:	b29a      	uxth	r2, r3
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c3e2:	e058      	b.n	800c496 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	330c      	adds	r3, #12
 800c3ee:	7812      	ldrb	r2, [r2, #0]
 800c3f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3f6:	1c5a      	adds	r2, r3, #1
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c400:	b29b      	uxth	r3, r3
 800c402:	3b01      	subs	r3, #1
 800c404:	b29a      	uxth	r2, r3
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800c40a:	e044      	b.n	800c496 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	689b      	ldr	r3, [r3, #8]
 800c412:	f003 0302 	and.w	r3, r3, #2
 800c416:	2b02      	cmp	r3, #2
 800c418:	d12b      	bne.n	800c472 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c41e:	b29b      	uxth	r3, r3
 800c420:	2b01      	cmp	r3, #1
 800c422:	d912      	bls.n	800c44a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c428:	881a      	ldrh	r2, [r3, #0]
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c434:	1c9a      	adds	r2, r3, #2
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c43e:	b29b      	uxth	r3, r3
 800c440:	3b02      	subs	r3, #2
 800c442:	b29a      	uxth	r2, r3
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c448:	e025      	b.n	800c496 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	330c      	adds	r3, #12
 800c454:	7812      	ldrb	r2, [r2, #0]
 800c456:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c45c:	1c5a      	adds	r2, r3, #1
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c466:	b29b      	uxth	r3, r3
 800c468:	3b01      	subs	r3, #1
 800c46a:	b29a      	uxth	r2, r3
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c470:	e011      	b.n	800c496 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c472:	f7fc fdd1 	bl	8009018 <HAL_GetTick>
 800c476:	4602      	mov	r2, r0
 800c478:	69bb      	ldr	r3, [r7, #24]
 800c47a:	1ad3      	subs	r3, r2, r3
 800c47c:	683a      	ldr	r2, [r7, #0]
 800c47e:	429a      	cmp	r2, r3
 800c480:	d803      	bhi.n	800c48a <HAL_SPI_Transmit+0x268>
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c488:	d102      	bne.n	800c490 <HAL_SPI_Transmit+0x26e>
 800c48a:	683b      	ldr	r3, [r7, #0]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d102      	bne.n	800c496 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800c490:	2303      	movs	r3, #3
 800c492:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c494:	e026      	b.n	800c4e4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c49a:	b29b      	uxth	r3, r3
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d1b5      	bne.n	800c40c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c4a0:	69ba      	ldr	r2, [r7, #24]
 800c4a2:	6839      	ldr	r1, [r7, #0]
 800c4a4:	68f8      	ldr	r0, [r7, #12]
 800c4a6:	f000 fce3 	bl	800ce70 <SPI_EndRxTxTransaction>
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d002      	beq.n	800c4b6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	2220      	movs	r2, #32
 800c4b4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	689b      	ldr	r3, [r3, #8]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d10a      	bne.n	800c4d4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c4be:	2300      	movs	r3, #0
 800c4c0:	613b      	str	r3, [r7, #16]
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	68db      	ldr	r3, [r3, #12]
 800c4c8:	613b      	str	r3, [r7, #16]
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	689b      	ldr	r3, [r3, #8]
 800c4d0:	613b      	str	r3, [r7, #16]
 800c4d2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d002      	beq.n	800c4e2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800c4dc:	2301      	movs	r3, #1
 800c4de:	77fb      	strb	r3, [r7, #31]
 800c4e0:	e000      	b.n	800c4e4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800c4e2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	2201      	movs	r2, #1
 800c4e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c4f4:	7ffb      	ldrb	r3, [r7, #31]
}
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	3720      	adds	r7, #32
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	bd80      	pop	{r7, pc}

0800c4fe <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c4fe:	b580      	push	{r7, lr}
 800c500:	b088      	sub	sp, #32
 800c502:	af02      	add	r7, sp, #8
 800c504:	60f8      	str	r0, [r7, #12]
 800c506:	60b9      	str	r1, [r7, #8]
 800c508:	603b      	str	r3, [r7, #0]
 800c50a:	4613      	mov	r3, r2
 800c50c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c50e:	2300      	movs	r3, #0
 800c510:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	685b      	ldr	r3, [r3, #4]
 800c516:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c51a:	d112      	bne.n	800c542 <HAL_SPI_Receive+0x44>
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	689b      	ldr	r3, [r3, #8]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d10e      	bne.n	800c542 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	2204      	movs	r2, #4
 800c528:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800c52c:	88fa      	ldrh	r2, [r7, #6]
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	9300      	str	r3, [sp, #0]
 800c532:	4613      	mov	r3, r2
 800c534:	68ba      	ldr	r2, [r7, #8]
 800c536:	68b9      	ldr	r1, [r7, #8]
 800c538:	68f8      	ldr	r0, [r7, #12]
 800c53a:	f000 f910 	bl	800c75e <HAL_SPI_TransmitReceive>
 800c53e:	4603      	mov	r3, r0
 800c540:	e109      	b.n	800c756 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c548:	2b01      	cmp	r3, #1
 800c54a:	d101      	bne.n	800c550 <HAL_SPI_Receive+0x52>
 800c54c:	2302      	movs	r3, #2
 800c54e:	e102      	b.n	800c756 <HAL_SPI_Receive+0x258>
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	2201      	movs	r2, #1
 800c554:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c558:	f7fc fd5e 	bl	8009018 <HAL_GetTick>
 800c55c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c564:	b2db      	uxtb	r3, r3
 800c566:	2b01      	cmp	r3, #1
 800c568:	d002      	beq.n	800c570 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800c56a:	2302      	movs	r3, #2
 800c56c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c56e:	e0e9      	b.n	800c744 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800c570:	68bb      	ldr	r3, [r7, #8]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d002      	beq.n	800c57c <HAL_SPI_Receive+0x7e>
 800c576:	88fb      	ldrh	r3, [r7, #6]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d102      	bne.n	800c582 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800c57c:	2301      	movs	r3, #1
 800c57e:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c580:	e0e0      	b.n	800c744 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	2204      	movs	r2, #4
 800c586:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	2200      	movs	r2, #0
 800c58e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	68ba      	ldr	r2, [r7, #8]
 800c594:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	88fa      	ldrh	r2, [r7, #6]
 800c59a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	88fa      	ldrh	r2, [r7, #6]
 800c5a2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	68db      	ldr	r3, [r3, #12]
 800c5c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c5cc:	d908      	bls.n	800c5e0 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	685a      	ldr	r2, [r3, #4]
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c5dc:	605a      	str	r2, [r3, #4]
 800c5de:	e007      	b.n	800c5f0 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	685a      	ldr	r2, [r3, #4]
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c5ee:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	689b      	ldr	r3, [r3, #8]
 800c5f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c5f8:	d10f      	bne.n	800c61a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	681a      	ldr	r2, [r3, #0]
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c608:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	681a      	ldr	r2, [r3, #0]
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c618:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c624:	2b40      	cmp	r3, #64	; 0x40
 800c626:	d007      	beq.n	800c638 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	681a      	ldr	r2, [r3, #0]
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c636:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	68db      	ldr	r3, [r3, #12]
 800c63c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c640:	d867      	bhi.n	800c712 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800c642:	e030      	b.n	800c6a6 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	689b      	ldr	r3, [r3, #8]
 800c64a:	f003 0301 	and.w	r3, r3, #1
 800c64e:	2b01      	cmp	r3, #1
 800c650:	d117      	bne.n	800c682 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	f103 020c 	add.w	r2, r3, #12
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c65e:	7812      	ldrb	r2, [r2, #0]
 800c660:	b2d2      	uxtb	r2, r2
 800c662:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c668:	1c5a      	adds	r2, r3, #1
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c674:	b29b      	uxth	r3, r3
 800c676:	3b01      	subs	r3, #1
 800c678:	b29a      	uxth	r2, r3
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800c680:	e011      	b.n	800c6a6 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c682:	f7fc fcc9 	bl	8009018 <HAL_GetTick>
 800c686:	4602      	mov	r2, r0
 800c688:	693b      	ldr	r3, [r7, #16]
 800c68a:	1ad3      	subs	r3, r2, r3
 800c68c:	683a      	ldr	r2, [r7, #0]
 800c68e:	429a      	cmp	r2, r3
 800c690:	d803      	bhi.n	800c69a <HAL_SPI_Receive+0x19c>
 800c692:	683b      	ldr	r3, [r7, #0]
 800c694:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c698:	d102      	bne.n	800c6a0 <HAL_SPI_Receive+0x1a2>
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d102      	bne.n	800c6a6 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800c6a0:	2303      	movs	r3, #3
 800c6a2:	75fb      	strb	r3, [r7, #23]
          goto error;
 800c6a4:	e04e      	b.n	800c744 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c6ac:	b29b      	uxth	r3, r3
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d1c8      	bne.n	800c644 <HAL_SPI_Receive+0x146>
 800c6b2:	e034      	b.n	800c71e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	689b      	ldr	r3, [r3, #8]
 800c6ba:	f003 0301 	and.w	r3, r3, #1
 800c6be:	2b01      	cmp	r3, #1
 800c6c0:	d115      	bne.n	800c6ee <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	68da      	ldr	r2, [r3, #12]
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6cc:	b292      	uxth	r2, r2
 800c6ce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6d4:	1c9a      	adds	r2, r3, #2
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c6e0:	b29b      	uxth	r3, r3
 800c6e2:	3b01      	subs	r3, #1
 800c6e4:	b29a      	uxth	r2, r3
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800c6ec:	e011      	b.n	800c712 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c6ee:	f7fc fc93 	bl	8009018 <HAL_GetTick>
 800c6f2:	4602      	mov	r2, r0
 800c6f4:	693b      	ldr	r3, [r7, #16]
 800c6f6:	1ad3      	subs	r3, r2, r3
 800c6f8:	683a      	ldr	r2, [r7, #0]
 800c6fa:	429a      	cmp	r2, r3
 800c6fc:	d803      	bhi.n	800c706 <HAL_SPI_Receive+0x208>
 800c6fe:	683b      	ldr	r3, [r7, #0]
 800c700:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c704:	d102      	bne.n	800c70c <HAL_SPI_Receive+0x20e>
 800c706:	683b      	ldr	r3, [r7, #0]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d102      	bne.n	800c712 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800c70c:	2303      	movs	r3, #3
 800c70e:	75fb      	strb	r3, [r7, #23]
          goto error;
 800c710:	e018      	b.n	800c744 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c718:	b29b      	uxth	r3, r3
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d1ca      	bne.n	800c6b4 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c71e:	693a      	ldr	r2, [r7, #16]
 800c720:	6839      	ldr	r1, [r7, #0]
 800c722:	68f8      	ldr	r0, [r7, #12]
 800c724:	f000 fb4c 	bl	800cdc0 <SPI_EndRxTransaction>
 800c728:	4603      	mov	r3, r0
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d002      	beq.n	800c734 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	2220      	movs	r2, #32
 800c732:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d002      	beq.n	800c742 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800c73c:	2301      	movs	r3, #1
 800c73e:	75fb      	strb	r3, [r7, #23]
 800c740:	e000      	b.n	800c744 <HAL_SPI_Receive+0x246>
  }

error :
 800c742:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	2201      	movs	r2, #1
 800c748:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	2200      	movs	r2, #0
 800c750:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c754:	7dfb      	ldrb	r3, [r7, #23]
}
 800c756:	4618      	mov	r0, r3
 800c758:	3718      	adds	r7, #24
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bd80      	pop	{r7, pc}

0800c75e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c75e:	b580      	push	{r7, lr}
 800c760:	b08a      	sub	sp, #40	; 0x28
 800c762:	af00      	add	r7, sp, #0
 800c764:	60f8      	str	r0, [r7, #12]
 800c766:	60b9      	str	r1, [r7, #8]
 800c768:	607a      	str	r2, [r7, #4]
 800c76a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800c76c:	2301      	movs	r3, #1
 800c76e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800c770:	2300      	movs	r3, #0
 800c772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c77c:	2b01      	cmp	r3, #1
 800c77e:	d101      	bne.n	800c784 <HAL_SPI_TransmitReceive+0x26>
 800c780:	2302      	movs	r3, #2
 800c782:	e1fb      	b.n	800cb7c <HAL_SPI_TransmitReceive+0x41e>
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	2201      	movs	r2, #1
 800c788:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c78c:	f7fc fc44 	bl	8009018 <HAL_GetTick>
 800c790:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c798:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	685b      	ldr	r3, [r3, #4]
 800c79e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800c7a0:	887b      	ldrh	r3, [r7, #2]
 800c7a2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800c7a4:	887b      	ldrh	r3, [r7, #2]
 800c7a6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c7a8:	7efb      	ldrb	r3, [r7, #27]
 800c7aa:	2b01      	cmp	r3, #1
 800c7ac:	d00e      	beq.n	800c7cc <HAL_SPI_TransmitReceive+0x6e>
 800c7ae:	697b      	ldr	r3, [r7, #20]
 800c7b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c7b4:	d106      	bne.n	800c7c4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	689b      	ldr	r3, [r3, #8]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d102      	bne.n	800c7c4 <HAL_SPI_TransmitReceive+0x66>
 800c7be:	7efb      	ldrb	r3, [r7, #27]
 800c7c0:	2b04      	cmp	r3, #4
 800c7c2:	d003      	beq.n	800c7cc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800c7c4:	2302      	movs	r3, #2
 800c7c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800c7ca:	e1cd      	b.n	800cb68 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c7cc:	68bb      	ldr	r3, [r7, #8]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d005      	beq.n	800c7de <HAL_SPI_TransmitReceive+0x80>
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d002      	beq.n	800c7de <HAL_SPI_TransmitReceive+0x80>
 800c7d8:	887b      	ldrh	r3, [r7, #2]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d103      	bne.n	800c7e6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800c7de:	2301      	movs	r3, #1
 800c7e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800c7e4:	e1c0      	b.n	800cb68 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c7ec:	b2db      	uxtb	r3, r3
 800c7ee:	2b04      	cmp	r3, #4
 800c7f0:	d003      	beq.n	800c7fa <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	2205      	movs	r2, #5
 800c7f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	687a      	ldr	r2, [r7, #4]
 800c804:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	887a      	ldrh	r2, [r7, #2]
 800c80a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	887a      	ldrh	r2, [r7, #2]
 800c812:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	68ba      	ldr	r2, [r7, #8]
 800c81a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	887a      	ldrh	r2, [r7, #2]
 800c820:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	887a      	ldrh	r2, [r7, #2]
 800c826:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	2200      	movs	r2, #0
 800c82c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	2200      	movs	r2, #0
 800c832:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	68db      	ldr	r3, [r3, #12]
 800c838:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c83c:	d802      	bhi.n	800c844 <HAL_SPI_TransmitReceive+0xe6>
 800c83e:	8a3b      	ldrh	r3, [r7, #16]
 800c840:	2b01      	cmp	r3, #1
 800c842:	d908      	bls.n	800c856 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	685a      	ldr	r2, [r3, #4]
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c852:	605a      	str	r2, [r3, #4]
 800c854:	e007      	b.n	800c866 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	685a      	ldr	r2, [r3, #4]
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c864:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c870:	2b40      	cmp	r3, #64	; 0x40
 800c872:	d007      	beq.n	800c884 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	681a      	ldr	r2, [r3, #0]
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c882:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	68db      	ldr	r3, [r3, #12]
 800c888:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c88c:	d97c      	bls.n	800c988 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	685b      	ldr	r3, [r3, #4]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d002      	beq.n	800c89c <HAL_SPI_TransmitReceive+0x13e>
 800c896:	8a7b      	ldrh	r3, [r7, #18]
 800c898:	2b01      	cmp	r3, #1
 800c89a:	d169      	bne.n	800c970 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8a0:	881a      	ldrh	r2, [r3, #0]
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8ac:	1c9a      	adds	r2, r3, #2
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c8b6:	b29b      	uxth	r3, r3
 800c8b8:	3b01      	subs	r3, #1
 800c8ba:	b29a      	uxth	r2, r3
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c8c0:	e056      	b.n	800c970 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	689b      	ldr	r3, [r3, #8]
 800c8c8:	f003 0302 	and.w	r3, r3, #2
 800c8cc:	2b02      	cmp	r3, #2
 800c8ce:	d11b      	bne.n	800c908 <HAL_SPI_TransmitReceive+0x1aa>
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c8d4:	b29b      	uxth	r3, r3
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d016      	beq.n	800c908 <HAL_SPI_TransmitReceive+0x1aa>
 800c8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8dc:	2b01      	cmp	r3, #1
 800c8de:	d113      	bne.n	800c908 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8e4:	881a      	ldrh	r2, [r3, #0]
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8f0:	1c9a      	adds	r2, r3, #2
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c8fa:	b29b      	uxth	r3, r3
 800c8fc:	3b01      	subs	r3, #1
 800c8fe:	b29a      	uxth	r2, r3
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c904:	2300      	movs	r3, #0
 800c906:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	689b      	ldr	r3, [r3, #8]
 800c90e:	f003 0301 	and.w	r3, r3, #1
 800c912:	2b01      	cmp	r3, #1
 800c914:	d11c      	bne.n	800c950 <HAL_SPI_TransmitReceive+0x1f2>
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c91c:	b29b      	uxth	r3, r3
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d016      	beq.n	800c950 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	68da      	ldr	r2, [r3, #12]
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c92c:	b292      	uxth	r2, r2
 800c92e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c934:	1c9a      	adds	r2, r3, #2
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c940:	b29b      	uxth	r3, r3
 800c942:	3b01      	subs	r3, #1
 800c944:	b29a      	uxth	r2, r3
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c94c:	2301      	movs	r3, #1
 800c94e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c950:	f7fc fb62 	bl	8009018 <HAL_GetTick>
 800c954:	4602      	mov	r2, r0
 800c956:	69fb      	ldr	r3, [r7, #28]
 800c958:	1ad3      	subs	r3, r2, r3
 800c95a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c95c:	429a      	cmp	r2, r3
 800c95e:	d807      	bhi.n	800c970 <HAL_SPI_TransmitReceive+0x212>
 800c960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c962:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c966:	d003      	beq.n	800c970 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800c968:	2303      	movs	r3, #3
 800c96a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800c96e:	e0fb      	b.n	800cb68 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c974:	b29b      	uxth	r3, r3
 800c976:	2b00      	cmp	r3, #0
 800c978:	d1a3      	bne.n	800c8c2 <HAL_SPI_TransmitReceive+0x164>
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c980:	b29b      	uxth	r3, r3
 800c982:	2b00      	cmp	r3, #0
 800c984:	d19d      	bne.n	800c8c2 <HAL_SPI_TransmitReceive+0x164>
 800c986:	e0df      	b.n	800cb48 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	685b      	ldr	r3, [r3, #4]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d003      	beq.n	800c998 <HAL_SPI_TransmitReceive+0x23a>
 800c990:	8a7b      	ldrh	r3, [r7, #18]
 800c992:	2b01      	cmp	r3, #1
 800c994:	f040 80cb 	bne.w	800cb2e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c99c:	b29b      	uxth	r3, r3
 800c99e:	2b01      	cmp	r3, #1
 800c9a0:	d912      	bls.n	800c9c8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9a6:	881a      	ldrh	r2, [r3, #0]
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9b2:	1c9a      	adds	r2, r3, #2
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c9bc:	b29b      	uxth	r3, r3
 800c9be:	3b02      	subs	r3, #2
 800c9c0:	b29a      	uxth	r2, r3
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c9c6:	e0b2      	b.n	800cb2e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	330c      	adds	r3, #12
 800c9d2:	7812      	ldrb	r2, [r2, #0]
 800c9d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9da:	1c5a      	adds	r2, r3, #1
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c9e4:	b29b      	uxth	r3, r3
 800c9e6:	3b01      	subs	r3, #1
 800c9e8:	b29a      	uxth	r2, r3
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c9ee:	e09e      	b.n	800cb2e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	689b      	ldr	r3, [r3, #8]
 800c9f6:	f003 0302 	and.w	r3, r3, #2
 800c9fa:	2b02      	cmp	r3, #2
 800c9fc:	d134      	bne.n	800ca68 <HAL_SPI_TransmitReceive+0x30a>
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ca02:	b29b      	uxth	r3, r3
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d02f      	beq.n	800ca68 <HAL_SPI_TransmitReceive+0x30a>
 800ca08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca0a:	2b01      	cmp	r3, #1
 800ca0c:	d12c      	bne.n	800ca68 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ca12:	b29b      	uxth	r3, r3
 800ca14:	2b01      	cmp	r3, #1
 800ca16:	d912      	bls.n	800ca3e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca1c:	881a      	ldrh	r2, [r3, #0]
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca28:	1c9a      	adds	r2, r3, #2
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ca32:	b29b      	uxth	r3, r3
 800ca34:	3b02      	subs	r3, #2
 800ca36:	b29a      	uxth	r2, r3
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ca3c:	e012      	b.n	800ca64 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	330c      	adds	r3, #12
 800ca48:	7812      	ldrb	r2, [r2, #0]
 800ca4a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca50:	1c5a      	adds	r2, r3, #1
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ca5a:	b29b      	uxth	r3, r3
 800ca5c:	3b01      	subs	r3, #1
 800ca5e:	b29a      	uxth	r2, r3
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ca64:	2300      	movs	r3, #0
 800ca66:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	689b      	ldr	r3, [r3, #8]
 800ca6e:	f003 0301 	and.w	r3, r3, #1
 800ca72:	2b01      	cmp	r3, #1
 800ca74:	d148      	bne.n	800cb08 <HAL_SPI_TransmitReceive+0x3aa>
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ca7c:	b29b      	uxth	r3, r3
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d042      	beq.n	800cb08 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ca88:	b29b      	uxth	r3, r3
 800ca8a:	2b01      	cmp	r3, #1
 800ca8c:	d923      	bls.n	800cad6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	68da      	ldr	r2, [r3, #12]
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca98:	b292      	uxth	r2, r2
 800ca9a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caa0:	1c9a      	adds	r2, r3, #2
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800caac:	b29b      	uxth	r3, r3
 800caae:	3b02      	subs	r3, #2
 800cab0:	b29a      	uxth	r2, r3
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cabe:	b29b      	uxth	r3, r3
 800cac0:	2b01      	cmp	r3, #1
 800cac2:	d81f      	bhi.n	800cb04 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	685a      	ldr	r2, [r3, #4]
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cad2:	605a      	str	r2, [r3, #4]
 800cad4:	e016      	b.n	800cb04 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	f103 020c 	add.w	r2, r3, #12
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cae2:	7812      	ldrb	r2, [r2, #0]
 800cae4:	b2d2      	uxtb	r2, r2
 800cae6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caec:	1c5a      	adds	r2, r3, #1
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800caf8:	b29b      	uxth	r3, r3
 800cafa:	3b01      	subs	r3, #1
 800cafc:	b29a      	uxth	r2, r3
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800cb04:	2301      	movs	r3, #1
 800cb06:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800cb08:	f7fc fa86 	bl	8009018 <HAL_GetTick>
 800cb0c:	4602      	mov	r2, r0
 800cb0e:	69fb      	ldr	r3, [r7, #28]
 800cb10:	1ad3      	subs	r3, r2, r3
 800cb12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb14:	429a      	cmp	r2, r3
 800cb16:	d803      	bhi.n	800cb20 <HAL_SPI_TransmitReceive+0x3c2>
 800cb18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb1e:	d102      	bne.n	800cb26 <HAL_SPI_TransmitReceive+0x3c8>
 800cb20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d103      	bne.n	800cb2e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800cb26:	2303      	movs	r3, #3
 800cb28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800cb2c:	e01c      	b.n	800cb68 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cb32:	b29b      	uxth	r3, r3
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	f47f af5b 	bne.w	800c9f0 <HAL_SPI_TransmitReceive+0x292>
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cb40:	b29b      	uxth	r3, r3
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	f47f af54 	bne.w	800c9f0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800cb48:	69fa      	ldr	r2, [r7, #28]
 800cb4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cb4c:	68f8      	ldr	r0, [r7, #12]
 800cb4e:	f000 f98f 	bl	800ce70 <SPI_EndRxTxTransaction>
 800cb52:	4603      	mov	r3, r0
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d006      	beq.n	800cb66 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800cb58:	2301      	movs	r3, #1
 800cb5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	2220      	movs	r2, #32
 800cb62:	661a      	str	r2, [r3, #96]	; 0x60
 800cb64:	e000      	b.n	800cb68 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800cb66:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	2201      	movs	r2, #1
 800cb6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	2200      	movs	r2, #0
 800cb74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800cb78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	3728      	adds	r7, #40	; 0x28
 800cb80:	46bd      	mov	sp, r7
 800cb82:	bd80      	pop	{r7, pc}

0800cb84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b088      	sub	sp, #32
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	60f8      	str	r0, [r7, #12]
 800cb8c:	60b9      	str	r1, [r7, #8]
 800cb8e:	603b      	str	r3, [r7, #0]
 800cb90:	4613      	mov	r3, r2
 800cb92:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800cb94:	f7fc fa40 	bl	8009018 <HAL_GetTick>
 800cb98:	4602      	mov	r2, r0
 800cb9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb9c:	1a9b      	subs	r3, r3, r2
 800cb9e:	683a      	ldr	r2, [r7, #0]
 800cba0:	4413      	add	r3, r2
 800cba2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800cba4:	f7fc fa38 	bl	8009018 <HAL_GetTick>
 800cba8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800cbaa:	4b39      	ldr	r3, [pc, #228]	; (800cc90 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	015b      	lsls	r3, r3, #5
 800cbb0:	0d1b      	lsrs	r3, r3, #20
 800cbb2:	69fa      	ldr	r2, [r7, #28]
 800cbb4:	fb02 f303 	mul.w	r3, r2, r3
 800cbb8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cbba:	e054      	b.n	800cc66 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800cbbc:	683b      	ldr	r3, [r7, #0]
 800cbbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbc2:	d050      	beq.n	800cc66 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800cbc4:	f7fc fa28 	bl	8009018 <HAL_GetTick>
 800cbc8:	4602      	mov	r2, r0
 800cbca:	69bb      	ldr	r3, [r7, #24]
 800cbcc:	1ad3      	subs	r3, r2, r3
 800cbce:	69fa      	ldr	r2, [r7, #28]
 800cbd0:	429a      	cmp	r2, r3
 800cbd2:	d902      	bls.n	800cbda <SPI_WaitFlagStateUntilTimeout+0x56>
 800cbd4:	69fb      	ldr	r3, [r7, #28]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d13d      	bne.n	800cc56 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	685a      	ldr	r2, [r3, #4]
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800cbe8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	685b      	ldr	r3, [r3, #4]
 800cbee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cbf2:	d111      	bne.n	800cc18 <SPI_WaitFlagStateUntilTimeout+0x94>
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	689b      	ldr	r3, [r3, #8]
 800cbf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cbfc:	d004      	beq.n	800cc08 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	689b      	ldr	r3, [r3, #8]
 800cc02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cc06:	d107      	bne.n	800cc18 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	681a      	ldr	r2, [r3, #0]
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cc16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cc20:	d10f      	bne.n	800cc42 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	681a      	ldr	r2, [r3, #0]
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cc30:	601a      	str	r2, [r3, #0]
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	681a      	ldr	r2, [r3, #0]
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cc40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	2201      	movs	r2, #1
 800cc46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800cc52:	2303      	movs	r3, #3
 800cc54:	e017      	b.n	800cc86 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800cc56:	697b      	ldr	r3, [r7, #20]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d101      	bne.n	800cc60 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800cc60:	697b      	ldr	r3, [r7, #20]
 800cc62:	3b01      	subs	r3, #1
 800cc64:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	689a      	ldr	r2, [r3, #8]
 800cc6c:	68bb      	ldr	r3, [r7, #8]
 800cc6e:	4013      	ands	r3, r2
 800cc70:	68ba      	ldr	r2, [r7, #8]
 800cc72:	429a      	cmp	r2, r3
 800cc74:	bf0c      	ite	eq
 800cc76:	2301      	moveq	r3, #1
 800cc78:	2300      	movne	r3, #0
 800cc7a:	b2db      	uxtb	r3, r3
 800cc7c:	461a      	mov	r2, r3
 800cc7e:	79fb      	ldrb	r3, [r7, #7]
 800cc80:	429a      	cmp	r2, r3
 800cc82:	d19b      	bne.n	800cbbc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800cc84:	2300      	movs	r3, #0
}
 800cc86:	4618      	mov	r0, r3
 800cc88:	3720      	adds	r7, #32
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bd80      	pop	{r7, pc}
 800cc8e:	bf00      	nop
 800cc90:	20000094 	.word	0x20000094

0800cc94 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b08a      	sub	sp, #40	; 0x28
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	60f8      	str	r0, [r7, #12]
 800cc9c:	60b9      	str	r1, [r7, #8]
 800cc9e:	607a      	str	r2, [r7, #4]
 800cca0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800cca2:	2300      	movs	r3, #0
 800cca4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800cca6:	f7fc f9b7 	bl	8009018 <HAL_GetTick>
 800ccaa:	4602      	mov	r2, r0
 800ccac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccae:	1a9b      	subs	r3, r3, r2
 800ccb0:	683a      	ldr	r2, [r7, #0]
 800ccb2:	4413      	add	r3, r2
 800ccb4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800ccb6:	f7fc f9af 	bl	8009018 <HAL_GetTick>
 800ccba:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	330c      	adds	r3, #12
 800ccc2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800ccc4:	4b3d      	ldr	r3, [pc, #244]	; (800cdbc <SPI_WaitFifoStateUntilTimeout+0x128>)
 800ccc6:	681a      	ldr	r2, [r3, #0]
 800ccc8:	4613      	mov	r3, r2
 800ccca:	009b      	lsls	r3, r3, #2
 800cccc:	4413      	add	r3, r2
 800ccce:	00da      	lsls	r2, r3, #3
 800ccd0:	1ad3      	subs	r3, r2, r3
 800ccd2:	0d1b      	lsrs	r3, r3, #20
 800ccd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ccd6:	fb02 f303 	mul.w	r3, r2, r3
 800ccda:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800ccdc:	e060      	b.n	800cda0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800ccde:	68bb      	ldr	r3, [r7, #8]
 800cce0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800cce4:	d107      	bne.n	800ccf6 <SPI_WaitFifoStateUntilTimeout+0x62>
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d104      	bne.n	800ccf6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800ccec:	69fb      	ldr	r3, [r7, #28]
 800ccee:	781b      	ldrb	r3, [r3, #0]
 800ccf0:	b2db      	uxtb	r3, r3
 800ccf2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800ccf4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccfc:	d050      	beq.n	800cda0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ccfe:	f7fc f98b 	bl	8009018 <HAL_GetTick>
 800cd02:	4602      	mov	r2, r0
 800cd04:	6a3b      	ldr	r3, [r7, #32]
 800cd06:	1ad3      	subs	r3, r2, r3
 800cd08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd0a:	429a      	cmp	r2, r3
 800cd0c:	d902      	bls.n	800cd14 <SPI_WaitFifoStateUntilTimeout+0x80>
 800cd0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d13d      	bne.n	800cd90 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	685a      	ldr	r2, [r3, #4]
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800cd22:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	685b      	ldr	r3, [r3, #4]
 800cd28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cd2c:	d111      	bne.n	800cd52 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	689b      	ldr	r3, [r3, #8]
 800cd32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cd36:	d004      	beq.n	800cd42 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	689b      	ldr	r3, [r3, #8]
 800cd3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cd40:	d107      	bne.n	800cd52 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	681a      	ldr	r2, [r3, #0]
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cd50:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cd5a:	d10f      	bne.n	800cd7c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	681a      	ldr	r2, [r3, #0]
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cd6a:	601a      	str	r2, [r3, #0]
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	681a      	ldr	r2, [r3, #0]
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cd7a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	2201      	movs	r2, #1
 800cd80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	2200      	movs	r2, #0
 800cd88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800cd8c:	2303      	movs	r3, #3
 800cd8e:	e010      	b.n	800cdb2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800cd90:	69bb      	ldr	r3, [r7, #24]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d101      	bne.n	800cd9a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800cd96:	2300      	movs	r3, #0
 800cd98:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800cd9a:	69bb      	ldr	r3, [r7, #24]
 800cd9c:	3b01      	subs	r3, #1
 800cd9e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	689a      	ldr	r2, [r3, #8]
 800cda6:	68bb      	ldr	r3, [r7, #8]
 800cda8:	4013      	ands	r3, r2
 800cdaa:	687a      	ldr	r2, [r7, #4]
 800cdac:	429a      	cmp	r2, r3
 800cdae:	d196      	bne.n	800ccde <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800cdb0:	2300      	movs	r3, #0
}
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	3728      	adds	r7, #40	; 0x28
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	bd80      	pop	{r7, pc}
 800cdba:	bf00      	nop
 800cdbc:	20000094 	.word	0x20000094

0800cdc0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b086      	sub	sp, #24
 800cdc4:	af02      	add	r7, sp, #8
 800cdc6:	60f8      	str	r0, [r7, #12]
 800cdc8:	60b9      	str	r1, [r7, #8]
 800cdca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	685b      	ldr	r3, [r3, #4]
 800cdd0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cdd4:	d111      	bne.n	800cdfa <SPI_EndRxTransaction+0x3a>
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	689b      	ldr	r3, [r3, #8]
 800cdda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cdde:	d004      	beq.n	800cdea <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	689b      	ldr	r3, [r3, #8]
 800cde4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cde8:	d107      	bne.n	800cdfa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	681a      	ldr	r2, [r3, #0]
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cdf8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	9300      	str	r3, [sp, #0]
 800cdfe:	68bb      	ldr	r3, [r7, #8]
 800ce00:	2200      	movs	r2, #0
 800ce02:	2180      	movs	r1, #128	; 0x80
 800ce04:	68f8      	ldr	r0, [r7, #12]
 800ce06:	f7ff febd 	bl	800cb84 <SPI_WaitFlagStateUntilTimeout>
 800ce0a:	4603      	mov	r3, r0
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d007      	beq.n	800ce20 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ce14:	f043 0220 	orr.w	r2, r3, #32
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ce1c:	2303      	movs	r3, #3
 800ce1e:	e023      	b.n	800ce68 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	685b      	ldr	r3, [r3, #4]
 800ce24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ce28:	d11d      	bne.n	800ce66 <SPI_EndRxTransaction+0xa6>
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	689b      	ldr	r3, [r3, #8]
 800ce2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ce32:	d004      	beq.n	800ce3e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	689b      	ldr	r3, [r3, #8]
 800ce38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ce3c:	d113      	bne.n	800ce66 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	9300      	str	r3, [sp, #0]
 800ce42:	68bb      	ldr	r3, [r7, #8]
 800ce44:	2200      	movs	r2, #0
 800ce46:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800ce4a:	68f8      	ldr	r0, [r7, #12]
 800ce4c:	f7ff ff22 	bl	800cc94 <SPI_WaitFifoStateUntilTimeout>
 800ce50:	4603      	mov	r3, r0
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d007      	beq.n	800ce66 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ce5a:	f043 0220 	orr.w	r2, r3, #32
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800ce62:	2303      	movs	r3, #3
 800ce64:	e000      	b.n	800ce68 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800ce66:	2300      	movs	r3, #0
}
 800ce68:	4618      	mov	r0, r3
 800ce6a:	3710      	adds	r7, #16
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	bd80      	pop	{r7, pc}

0800ce70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b086      	sub	sp, #24
 800ce74:	af02      	add	r7, sp, #8
 800ce76:	60f8      	str	r0, [r7, #12]
 800ce78:	60b9      	str	r1, [r7, #8]
 800ce7a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	9300      	str	r3, [sp, #0]
 800ce80:	68bb      	ldr	r3, [r7, #8]
 800ce82:	2200      	movs	r2, #0
 800ce84:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800ce88:	68f8      	ldr	r0, [r7, #12]
 800ce8a:	f7ff ff03 	bl	800cc94 <SPI_WaitFifoStateUntilTimeout>
 800ce8e:	4603      	mov	r3, r0
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d007      	beq.n	800cea4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ce98:	f043 0220 	orr.w	r2, r3, #32
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800cea0:	2303      	movs	r3, #3
 800cea2:	e027      	b.n	800cef4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	9300      	str	r3, [sp, #0]
 800cea8:	68bb      	ldr	r3, [r7, #8]
 800ceaa:	2200      	movs	r2, #0
 800ceac:	2180      	movs	r1, #128	; 0x80
 800ceae:	68f8      	ldr	r0, [r7, #12]
 800ceb0:	f7ff fe68 	bl	800cb84 <SPI_WaitFlagStateUntilTimeout>
 800ceb4:	4603      	mov	r3, r0
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d007      	beq.n	800ceca <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cebe:	f043 0220 	orr.w	r2, r3, #32
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800cec6:	2303      	movs	r3, #3
 800cec8:	e014      	b.n	800cef4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	9300      	str	r3, [sp, #0]
 800cece:	68bb      	ldr	r3, [r7, #8]
 800ced0:	2200      	movs	r2, #0
 800ced2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800ced6:	68f8      	ldr	r0, [r7, #12]
 800ced8:	f7ff fedc 	bl	800cc94 <SPI_WaitFifoStateUntilTimeout>
 800cedc:	4603      	mov	r3, r0
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d007      	beq.n	800cef2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cee6:	f043 0220 	orr.w	r2, r3, #32
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ceee:	2303      	movs	r3, #3
 800cef0:	e000      	b.n	800cef4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800cef2:	2300      	movs	r3, #0
}
 800cef4:	4618      	mov	r0, r3
 800cef6:	3710      	adds	r7, #16
 800cef8:	46bd      	mov	sp, r7
 800cefa:	bd80      	pop	{r7, pc}

0800cefc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b082      	sub	sp, #8
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d101      	bne.n	800cf0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cf0a:	2301      	movs	r3, #1
 800cf0c:	e049      	b.n	800cfa2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf14:	b2db      	uxtb	r3, r3
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d106      	bne.n	800cf28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cf22:	6878      	ldr	r0, [r7, #4]
 800cf24:	f7fb feb2 	bl	8008c8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2202      	movs	r2, #2
 800cf2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681a      	ldr	r2, [r3, #0]
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	3304      	adds	r3, #4
 800cf38:	4619      	mov	r1, r3
 800cf3a:	4610      	mov	r0, r2
 800cf3c:	f000 fd60 	bl	800da00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	2201      	movs	r2, #1
 800cf44:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2201      	movs	r2, #1
 800cf4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2201      	movs	r2, #1
 800cf54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	2201      	movs	r2, #1
 800cf5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	2201      	movs	r2, #1
 800cf64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	2201      	movs	r2, #1
 800cf6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2201      	movs	r2, #1
 800cf74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2201      	movs	r2, #1
 800cf7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	2201      	movs	r2, #1
 800cf84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	2201      	movs	r2, #1
 800cf8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	2201      	movs	r2, #1
 800cf94:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	2201      	movs	r2, #1
 800cf9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cfa0:	2300      	movs	r3, #0
}
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	3708      	adds	r7, #8
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	bd80      	pop	{r7, pc}
	...

0800cfac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cfac:	b480      	push	{r7}
 800cfae:	b085      	sub	sp, #20
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cfba:	b2db      	uxtb	r3, r3
 800cfbc:	2b01      	cmp	r3, #1
 800cfbe:	d001      	beq.n	800cfc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800cfc0:	2301      	movs	r3, #1
 800cfc2:	e04f      	b.n	800d064 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	2202      	movs	r2, #2
 800cfc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	68da      	ldr	r2, [r3, #12]
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	f042 0201 	orr.w	r2, r2, #1
 800cfda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	4a23      	ldr	r2, [pc, #140]	; (800d070 <HAL_TIM_Base_Start_IT+0xc4>)
 800cfe2:	4293      	cmp	r3, r2
 800cfe4:	d01d      	beq.n	800d022 <HAL_TIM_Base_Start_IT+0x76>
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cfee:	d018      	beq.n	800d022 <HAL_TIM_Base_Start_IT+0x76>
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	4a1f      	ldr	r2, [pc, #124]	; (800d074 <HAL_TIM_Base_Start_IT+0xc8>)
 800cff6:	4293      	cmp	r3, r2
 800cff8:	d013      	beq.n	800d022 <HAL_TIM_Base_Start_IT+0x76>
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	4a1e      	ldr	r2, [pc, #120]	; (800d078 <HAL_TIM_Base_Start_IT+0xcc>)
 800d000:	4293      	cmp	r3, r2
 800d002:	d00e      	beq.n	800d022 <HAL_TIM_Base_Start_IT+0x76>
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	4a1c      	ldr	r2, [pc, #112]	; (800d07c <HAL_TIM_Base_Start_IT+0xd0>)
 800d00a:	4293      	cmp	r3, r2
 800d00c:	d009      	beq.n	800d022 <HAL_TIM_Base_Start_IT+0x76>
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	4a1b      	ldr	r2, [pc, #108]	; (800d080 <HAL_TIM_Base_Start_IT+0xd4>)
 800d014:	4293      	cmp	r3, r2
 800d016:	d004      	beq.n	800d022 <HAL_TIM_Base_Start_IT+0x76>
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	4a19      	ldr	r2, [pc, #100]	; (800d084 <HAL_TIM_Base_Start_IT+0xd8>)
 800d01e:	4293      	cmp	r3, r2
 800d020:	d115      	bne.n	800d04e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	689a      	ldr	r2, [r3, #8]
 800d028:	4b17      	ldr	r3, [pc, #92]	; (800d088 <HAL_TIM_Base_Start_IT+0xdc>)
 800d02a:	4013      	ands	r3, r2
 800d02c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	2b06      	cmp	r3, #6
 800d032:	d015      	beq.n	800d060 <HAL_TIM_Base_Start_IT+0xb4>
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d03a:	d011      	beq.n	800d060 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	681a      	ldr	r2, [r3, #0]
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	f042 0201 	orr.w	r2, r2, #1
 800d04a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d04c:	e008      	b.n	800d060 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	681a      	ldr	r2, [r3, #0]
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	f042 0201 	orr.w	r2, r2, #1
 800d05c:	601a      	str	r2, [r3, #0]
 800d05e:	e000      	b.n	800d062 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d060:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d062:	2300      	movs	r3, #0
}
 800d064:	4618      	mov	r0, r3
 800d066:	3714      	adds	r7, #20
 800d068:	46bd      	mov	sp, r7
 800d06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06e:	4770      	bx	lr
 800d070:	40012c00 	.word	0x40012c00
 800d074:	40000400 	.word	0x40000400
 800d078:	40000800 	.word	0x40000800
 800d07c:	40000c00 	.word	0x40000c00
 800d080:	40013400 	.word	0x40013400
 800d084:	40014000 	.word	0x40014000
 800d088:	00010007 	.word	0x00010007

0800d08c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b082      	sub	sp, #8
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d101      	bne.n	800d09e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d09a:	2301      	movs	r3, #1
 800d09c:	e049      	b.n	800d132 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d0a4:	b2db      	uxtb	r3, r3
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d106      	bne.n	800d0b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d0b2:	6878      	ldr	r0, [r7, #4]
 800d0b4:	f000 f841 	bl	800d13a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	2202      	movs	r2, #2
 800d0bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	681a      	ldr	r2, [r3, #0]
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	3304      	adds	r3, #4
 800d0c8:	4619      	mov	r1, r3
 800d0ca:	4610      	mov	r0, r2
 800d0cc:	f000 fc98 	bl	800da00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2201      	movs	r2, #1
 800d0d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	2201      	movs	r2, #1
 800d0dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	2201      	movs	r2, #1
 800d0e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	2201      	movs	r2, #1
 800d0ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2201      	movs	r2, #1
 800d0f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	2201      	movs	r2, #1
 800d0fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	2201      	movs	r2, #1
 800d104:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	2201      	movs	r2, #1
 800d10c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	2201      	movs	r2, #1
 800d114:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	2201      	movs	r2, #1
 800d11c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	2201      	movs	r2, #1
 800d124:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	2201      	movs	r2, #1
 800d12c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d130:	2300      	movs	r3, #0
}
 800d132:	4618      	mov	r0, r3
 800d134:	3708      	adds	r7, #8
 800d136:	46bd      	mov	sp, r7
 800d138:	bd80      	pop	{r7, pc}

0800d13a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d13a:	b480      	push	{r7}
 800d13c:	b083      	sub	sp, #12
 800d13e:	af00      	add	r7, sp, #0
 800d140:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d142:	bf00      	nop
 800d144:	370c      	adds	r7, #12
 800d146:	46bd      	mov	sp, r7
 800d148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14c:	4770      	bx	lr

0800d14e <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800d14e:	b580      	push	{r7, lr}
 800d150:	b086      	sub	sp, #24
 800d152:	af00      	add	r7, sp, #0
 800d154:	6078      	str	r0, [r7, #4]
 800d156:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d101      	bne.n	800d162 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800d15e:	2301      	movs	r3, #1
 800d160:	e097      	b.n	800d292 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d168:	b2db      	uxtb	r3, r3
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d106      	bne.n	800d17c <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	2200      	movs	r2, #0
 800d172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800d176:	6878      	ldr	r0, [r7, #4]
 800d178:	f7fb fda6 	bl	8008cc8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	2202      	movs	r2, #2
 800d180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	689b      	ldr	r3, [r3, #8]
 800d18a:	687a      	ldr	r2, [r7, #4]
 800d18c:	6812      	ldr	r2, [r2, #0]
 800d18e:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800d192:	f023 0307 	bic.w	r3, r3, #7
 800d196:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	681a      	ldr	r2, [r3, #0]
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	3304      	adds	r3, #4
 800d1a0:	4619      	mov	r1, r3
 800d1a2:	4610      	mov	r0, r2
 800d1a4:	f000 fc2c 	bl	800da00 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	689b      	ldr	r3, [r3, #8]
 800d1ae:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	699b      	ldr	r3, [r3, #24]
 800d1b6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	6a1b      	ldr	r3, [r3, #32]
 800d1be:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800d1c0:	683b      	ldr	r3, [r7, #0]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	697a      	ldr	r2, [r7, #20]
 800d1c6:	4313      	orrs	r3, r2
 800d1c8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800d1ca:	693b      	ldr	r3, [r7, #16]
 800d1cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d1d0:	f023 0303 	bic.w	r3, r3, #3
 800d1d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800d1d6:	683b      	ldr	r3, [r7, #0]
 800d1d8:	689a      	ldr	r2, [r3, #8]
 800d1da:	683b      	ldr	r3, [r7, #0]
 800d1dc:	699b      	ldr	r3, [r3, #24]
 800d1de:	021b      	lsls	r3, r3, #8
 800d1e0:	4313      	orrs	r3, r2
 800d1e2:	693a      	ldr	r2, [r7, #16]
 800d1e4:	4313      	orrs	r3, r2
 800d1e6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800d1e8:	693b      	ldr	r3, [r7, #16]
 800d1ea:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800d1ee:	f023 030c 	bic.w	r3, r3, #12
 800d1f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800d1f4:	693b      	ldr	r3, [r7, #16]
 800d1f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d1fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d1fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	68da      	ldr	r2, [r3, #12]
 800d204:	683b      	ldr	r3, [r7, #0]
 800d206:	69db      	ldr	r3, [r3, #28]
 800d208:	021b      	lsls	r3, r3, #8
 800d20a:	4313      	orrs	r3, r2
 800d20c:	693a      	ldr	r2, [r7, #16]
 800d20e:	4313      	orrs	r3, r2
 800d210:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800d212:	683b      	ldr	r3, [r7, #0]
 800d214:	691b      	ldr	r3, [r3, #16]
 800d216:	011a      	lsls	r2, r3, #4
 800d218:	683b      	ldr	r3, [r7, #0]
 800d21a:	6a1b      	ldr	r3, [r3, #32]
 800d21c:	031b      	lsls	r3, r3, #12
 800d21e:	4313      	orrs	r3, r2
 800d220:	693a      	ldr	r2, [r7, #16]
 800d222:	4313      	orrs	r3, r2
 800d224:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800d22c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800d234:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800d236:	683b      	ldr	r3, [r7, #0]
 800d238:	685a      	ldr	r2, [r3, #4]
 800d23a:	683b      	ldr	r3, [r7, #0]
 800d23c:	695b      	ldr	r3, [r3, #20]
 800d23e:	011b      	lsls	r3, r3, #4
 800d240:	4313      	orrs	r3, r2
 800d242:	68fa      	ldr	r2, [r7, #12]
 800d244:	4313      	orrs	r3, r2
 800d246:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	697a      	ldr	r2, [r7, #20]
 800d24e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	693a      	ldr	r2, [r7, #16]
 800d256:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	68fa      	ldr	r2, [r7, #12]
 800d25e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	2201      	movs	r2, #1
 800d264:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	2201      	movs	r2, #1
 800d26c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	2201      	movs	r2, #1
 800d274:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	2201      	movs	r2, #1
 800d27c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	2201      	movs	r2, #1
 800d284:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	2201      	movs	r2, #1
 800d28c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d290:	2300      	movs	r3, #0
}
 800d292:	4618      	mov	r0, r3
 800d294:	3718      	adds	r7, #24
 800d296:	46bd      	mov	sp, r7
 800d298:	bd80      	pop	{r7, pc}

0800d29a <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d29a:	b580      	push	{r7, lr}
 800d29c:	b084      	sub	sp, #16
 800d29e:	af00      	add	r7, sp, #0
 800d2a0:	6078      	str	r0, [r7, #4]
 800d2a2:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d2aa:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d2b2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d2ba:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d2c2:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d110      	bne.n	800d2ec <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d2ca:	7bfb      	ldrb	r3, [r7, #15]
 800d2cc:	2b01      	cmp	r3, #1
 800d2ce:	d102      	bne.n	800d2d6 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800d2d0:	7b7b      	ldrb	r3, [r7, #13]
 800d2d2:	2b01      	cmp	r3, #1
 800d2d4:	d001      	beq.n	800d2da <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800d2d6:	2301      	movs	r3, #1
 800d2d8:	e069      	b.n	800d3ae <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	2202      	movs	r2, #2
 800d2de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	2202      	movs	r2, #2
 800d2e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d2ea:	e031      	b.n	800d350 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800d2ec:	683b      	ldr	r3, [r7, #0]
 800d2ee:	2b04      	cmp	r3, #4
 800d2f0:	d110      	bne.n	800d314 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800d2f2:	7bbb      	ldrb	r3, [r7, #14]
 800d2f4:	2b01      	cmp	r3, #1
 800d2f6:	d102      	bne.n	800d2fe <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800d2f8:	7b3b      	ldrb	r3, [r7, #12]
 800d2fa:	2b01      	cmp	r3, #1
 800d2fc:	d001      	beq.n	800d302 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800d2fe:	2301      	movs	r3, #1
 800d300:	e055      	b.n	800d3ae <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	2202      	movs	r2, #2
 800d306:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	2202      	movs	r2, #2
 800d30e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d312:	e01d      	b.n	800d350 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d314:	7bfb      	ldrb	r3, [r7, #15]
 800d316:	2b01      	cmp	r3, #1
 800d318:	d108      	bne.n	800d32c <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800d31a:	7bbb      	ldrb	r3, [r7, #14]
 800d31c:	2b01      	cmp	r3, #1
 800d31e:	d105      	bne.n	800d32c <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d320:	7b7b      	ldrb	r3, [r7, #13]
 800d322:	2b01      	cmp	r3, #1
 800d324:	d102      	bne.n	800d32c <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800d326:	7b3b      	ldrb	r3, [r7, #12]
 800d328:	2b01      	cmp	r3, #1
 800d32a:	d001      	beq.n	800d330 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800d32c:	2301      	movs	r3, #1
 800d32e:	e03e      	b.n	800d3ae <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	2202      	movs	r2, #2
 800d334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	2202      	movs	r2, #2
 800d33c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	2202      	movs	r2, #2
 800d344:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	2202      	movs	r2, #2
 800d34c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800d350:	683b      	ldr	r3, [r7, #0]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d003      	beq.n	800d35e <HAL_TIM_Encoder_Start+0xc4>
 800d356:	683b      	ldr	r3, [r7, #0]
 800d358:	2b04      	cmp	r3, #4
 800d35a:	d008      	beq.n	800d36e <HAL_TIM_Encoder_Start+0xd4>
 800d35c:	e00f      	b.n	800d37e <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	2201      	movs	r2, #1
 800d364:	2100      	movs	r1, #0
 800d366:	4618      	mov	r0, r3
 800d368:	f000 ff54 	bl	800e214 <TIM_CCxChannelCmd>
      break;
 800d36c:	e016      	b.n	800d39c <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	2201      	movs	r2, #1
 800d374:	2104      	movs	r1, #4
 800d376:	4618      	mov	r0, r3
 800d378:	f000 ff4c 	bl	800e214 <TIM_CCxChannelCmd>
      break;
 800d37c:	e00e      	b.n	800d39c <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	2201      	movs	r2, #1
 800d384:	2100      	movs	r1, #0
 800d386:	4618      	mov	r0, r3
 800d388:	f000 ff44 	bl	800e214 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	2201      	movs	r2, #1
 800d392:	2104      	movs	r1, #4
 800d394:	4618      	mov	r0, r3
 800d396:	f000 ff3d 	bl	800e214 <TIM_CCxChannelCmd>
      break;
 800d39a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	681a      	ldr	r2, [r3, #0]
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	f042 0201 	orr.w	r2, r2, #1
 800d3aa:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800d3ac:	2300      	movs	r3, #0
}
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	3710      	adds	r7, #16
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	bd80      	pop	{r7, pc}

0800d3b6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d3b6:	b580      	push	{r7, lr}
 800d3b8:	b082      	sub	sp, #8
 800d3ba:	af00      	add	r7, sp, #0
 800d3bc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	691b      	ldr	r3, [r3, #16]
 800d3c4:	f003 0302 	and.w	r3, r3, #2
 800d3c8:	2b02      	cmp	r3, #2
 800d3ca:	d122      	bne.n	800d412 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	68db      	ldr	r3, [r3, #12]
 800d3d2:	f003 0302 	and.w	r3, r3, #2
 800d3d6:	2b02      	cmp	r3, #2
 800d3d8:	d11b      	bne.n	800d412 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	f06f 0202 	mvn.w	r2, #2
 800d3e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	2201      	movs	r2, #1
 800d3e8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	699b      	ldr	r3, [r3, #24]
 800d3f0:	f003 0303 	and.w	r3, r3, #3
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d003      	beq.n	800d400 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d3f8:	6878      	ldr	r0, [r7, #4]
 800d3fa:	f000 fae2 	bl	800d9c2 <HAL_TIM_IC_CaptureCallback>
 800d3fe:	e005      	b.n	800d40c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d400:	6878      	ldr	r0, [r7, #4]
 800d402:	f000 fad4 	bl	800d9ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d406:	6878      	ldr	r0, [r7, #4]
 800d408:	f000 fae5 	bl	800d9d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	2200      	movs	r2, #0
 800d410:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	691b      	ldr	r3, [r3, #16]
 800d418:	f003 0304 	and.w	r3, r3, #4
 800d41c:	2b04      	cmp	r3, #4
 800d41e:	d122      	bne.n	800d466 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	68db      	ldr	r3, [r3, #12]
 800d426:	f003 0304 	and.w	r3, r3, #4
 800d42a:	2b04      	cmp	r3, #4
 800d42c:	d11b      	bne.n	800d466 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	f06f 0204 	mvn.w	r2, #4
 800d436:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	2202      	movs	r2, #2
 800d43c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	699b      	ldr	r3, [r3, #24]
 800d444:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d003      	beq.n	800d454 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d44c:	6878      	ldr	r0, [r7, #4]
 800d44e:	f000 fab8 	bl	800d9c2 <HAL_TIM_IC_CaptureCallback>
 800d452:	e005      	b.n	800d460 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d454:	6878      	ldr	r0, [r7, #4]
 800d456:	f000 faaa 	bl	800d9ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d45a:	6878      	ldr	r0, [r7, #4]
 800d45c:	f000 fabb 	bl	800d9d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	2200      	movs	r2, #0
 800d464:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	691b      	ldr	r3, [r3, #16]
 800d46c:	f003 0308 	and.w	r3, r3, #8
 800d470:	2b08      	cmp	r3, #8
 800d472:	d122      	bne.n	800d4ba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	68db      	ldr	r3, [r3, #12]
 800d47a:	f003 0308 	and.w	r3, r3, #8
 800d47e:	2b08      	cmp	r3, #8
 800d480:	d11b      	bne.n	800d4ba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	f06f 0208 	mvn.w	r2, #8
 800d48a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	2204      	movs	r2, #4
 800d490:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	69db      	ldr	r3, [r3, #28]
 800d498:	f003 0303 	and.w	r3, r3, #3
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d003      	beq.n	800d4a8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d4a0:	6878      	ldr	r0, [r7, #4]
 800d4a2:	f000 fa8e 	bl	800d9c2 <HAL_TIM_IC_CaptureCallback>
 800d4a6:	e005      	b.n	800d4b4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d4a8:	6878      	ldr	r0, [r7, #4]
 800d4aa:	f000 fa80 	bl	800d9ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d4ae:	6878      	ldr	r0, [r7, #4]
 800d4b0:	f000 fa91 	bl	800d9d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	691b      	ldr	r3, [r3, #16]
 800d4c0:	f003 0310 	and.w	r3, r3, #16
 800d4c4:	2b10      	cmp	r3, #16
 800d4c6:	d122      	bne.n	800d50e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	68db      	ldr	r3, [r3, #12]
 800d4ce:	f003 0310 	and.w	r3, r3, #16
 800d4d2:	2b10      	cmp	r3, #16
 800d4d4:	d11b      	bne.n	800d50e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	f06f 0210 	mvn.w	r2, #16
 800d4de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	2208      	movs	r2, #8
 800d4e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	69db      	ldr	r3, [r3, #28]
 800d4ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d003      	beq.n	800d4fc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d4f4:	6878      	ldr	r0, [r7, #4]
 800d4f6:	f000 fa64 	bl	800d9c2 <HAL_TIM_IC_CaptureCallback>
 800d4fa:	e005      	b.n	800d508 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d4fc:	6878      	ldr	r0, [r7, #4]
 800d4fe:	f000 fa56 	bl	800d9ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d502:	6878      	ldr	r0, [r7, #4]
 800d504:	f000 fa67 	bl	800d9d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	2200      	movs	r2, #0
 800d50c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	691b      	ldr	r3, [r3, #16]
 800d514:	f003 0301 	and.w	r3, r3, #1
 800d518:	2b01      	cmp	r3, #1
 800d51a:	d10e      	bne.n	800d53a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	68db      	ldr	r3, [r3, #12]
 800d522:	f003 0301 	and.w	r3, r3, #1
 800d526:	2b01      	cmp	r3, #1
 800d528:	d107      	bne.n	800d53a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	f06f 0201 	mvn.w	r2, #1
 800d532:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d534:	6878      	ldr	r0, [r7, #4]
 800d536:	f7f8 fee5 	bl	8006304 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	691b      	ldr	r3, [r3, #16]
 800d540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d544:	2b80      	cmp	r3, #128	; 0x80
 800d546:	d10e      	bne.n	800d566 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	68db      	ldr	r3, [r3, #12]
 800d54e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d552:	2b80      	cmp	r3, #128	; 0x80
 800d554:	d107      	bne.n	800d566 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d55e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d560:	6878      	ldr	r0, [r7, #4]
 800d562:	f000 ff0f 	bl	800e384 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	691b      	ldr	r3, [r3, #16]
 800d56c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d570:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d574:	d10e      	bne.n	800d594 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	68db      	ldr	r3, [r3, #12]
 800d57c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d580:	2b80      	cmp	r3, #128	; 0x80
 800d582:	d107      	bne.n	800d594 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d58c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d58e:	6878      	ldr	r0, [r7, #4]
 800d590:	f000 ff02 	bl	800e398 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	691b      	ldr	r3, [r3, #16]
 800d59a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d59e:	2b40      	cmp	r3, #64	; 0x40
 800d5a0:	d10e      	bne.n	800d5c0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	68db      	ldr	r3, [r3, #12]
 800d5a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5ac:	2b40      	cmp	r3, #64	; 0x40
 800d5ae:	d107      	bne.n	800d5c0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d5b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d5ba:	6878      	ldr	r0, [r7, #4]
 800d5bc:	f000 fa15 	bl	800d9ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	691b      	ldr	r3, [r3, #16]
 800d5c6:	f003 0320 	and.w	r3, r3, #32
 800d5ca:	2b20      	cmp	r3, #32
 800d5cc:	d10e      	bne.n	800d5ec <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	68db      	ldr	r3, [r3, #12]
 800d5d4:	f003 0320 	and.w	r3, r3, #32
 800d5d8:	2b20      	cmp	r3, #32
 800d5da:	d107      	bne.n	800d5ec <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	f06f 0220 	mvn.w	r2, #32
 800d5e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d5e6:	6878      	ldr	r0, [r7, #4]
 800d5e8:	f000 fec2 	bl	800e370 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d5ec:	bf00      	nop
 800d5ee:	3708      	adds	r7, #8
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	bd80      	pop	{r7, pc}

0800d5f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b086      	sub	sp, #24
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	60f8      	str	r0, [r7, #12]
 800d5fc:	60b9      	str	r1, [r7, #8]
 800d5fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d600:	2300      	movs	r3, #0
 800d602:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d60a:	2b01      	cmp	r3, #1
 800d60c:	d101      	bne.n	800d612 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d60e:	2302      	movs	r3, #2
 800d610:	e0ff      	b.n	800d812 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	2201      	movs	r2, #1
 800d616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	2b14      	cmp	r3, #20
 800d61e:	f200 80f0 	bhi.w	800d802 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d622:	a201      	add	r2, pc, #4	; (adr r2, 800d628 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d628:	0800d67d 	.word	0x0800d67d
 800d62c:	0800d803 	.word	0x0800d803
 800d630:	0800d803 	.word	0x0800d803
 800d634:	0800d803 	.word	0x0800d803
 800d638:	0800d6bd 	.word	0x0800d6bd
 800d63c:	0800d803 	.word	0x0800d803
 800d640:	0800d803 	.word	0x0800d803
 800d644:	0800d803 	.word	0x0800d803
 800d648:	0800d6ff 	.word	0x0800d6ff
 800d64c:	0800d803 	.word	0x0800d803
 800d650:	0800d803 	.word	0x0800d803
 800d654:	0800d803 	.word	0x0800d803
 800d658:	0800d73f 	.word	0x0800d73f
 800d65c:	0800d803 	.word	0x0800d803
 800d660:	0800d803 	.word	0x0800d803
 800d664:	0800d803 	.word	0x0800d803
 800d668:	0800d781 	.word	0x0800d781
 800d66c:	0800d803 	.word	0x0800d803
 800d670:	0800d803 	.word	0x0800d803
 800d674:	0800d803 	.word	0x0800d803
 800d678:	0800d7c1 	.word	0x0800d7c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	68b9      	ldr	r1, [r7, #8]
 800d682:	4618      	mov	r0, r3
 800d684:	f000 fa56 	bl	800db34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	699a      	ldr	r2, [r3, #24]
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	f042 0208 	orr.w	r2, r2, #8
 800d696:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	699a      	ldr	r2, [r3, #24]
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	f022 0204 	bic.w	r2, r2, #4
 800d6a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	6999      	ldr	r1, [r3, #24]
 800d6ae:	68bb      	ldr	r3, [r7, #8]
 800d6b0:	691a      	ldr	r2, [r3, #16]
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	430a      	orrs	r2, r1
 800d6b8:	619a      	str	r2, [r3, #24]
      break;
 800d6ba:	e0a5      	b.n	800d808 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	68b9      	ldr	r1, [r7, #8]
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	f000 fac6 	bl	800dc54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	699a      	ldr	r2, [r3, #24]
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d6d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	699a      	ldr	r2, [r3, #24]
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d6e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	6999      	ldr	r1, [r3, #24]
 800d6ee:	68bb      	ldr	r3, [r7, #8]
 800d6f0:	691b      	ldr	r3, [r3, #16]
 800d6f2:	021a      	lsls	r2, r3, #8
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	430a      	orrs	r2, r1
 800d6fa:	619a      	str	r2, [r3, #24]
      break;
 800d6fc:	e084      	b.n	800d808 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	68b9      	ldr	r1, [r7, #8]
 800d704:	4618      	mov	r0, r3
 800d706:	f000 fb2f 	bl	800dd68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	69da      	ldr	r2, [r3, #28]
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	f042 0208 	orr.w	r2, r2, #8
 800d718:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	69da      	ldr	r2, [r3, #28]
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	f022 0204 	bic.w	r2, r2, #4
 800d728:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	69d9      	ldr	r1, [r3, #28]
 800d730:	68bb      	ldr	r3, [r7, #8]
 800d732:	691a      	ldr	r2, [r3, #16]
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	430a      	orrs	r2, r1
 800d73a:	61da      	str	r2, [r3, #28]
      break;
 800d73c:	e064      	b.n	800d808 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	68b9      	ldr	r1, [r7, #8]
 800d744:	4618      	mov	r0, r3
 800d746:	f000 fb97 	bl	800de78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	69da      	ldr	r2, [r3, #28]
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d758:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	69da      	ldr	r2, [r3, #28]
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d768:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	69d9      	ldr	r1, [r3, #28]
 800d770:	68bb      	ldr	r3, [r7, #8]
 800d772:	691b      	ldr	r3, [r3, #16]
 800d774:	021a      	lsls	r2, r3, #8
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	430a      	orrs	r2, r1
 800d77c:	61da      	str	r2, [r3, #28]
      break;
 800d77e:	e043      	b.n	800d808 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	68b9      	ldr	r1, [r7, #8]
 800d786:	4618      	mov	r0, r3
 800d788:	f000 fbe0 	bl	800df4c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	f042 0208 	orr.w	r2, r2, #8
 800d79a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	f022 0204 	bic.w	r2, r2, #4
 800d7aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d7b2:	68bb      	ldr	r3, [r7, #8]
 800d7b4:	691a      	ldr	r2, [r3, #16]
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	430a      	orrs	r2, r1
 800d7bc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d7be:	e023      	b.n	800d808 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	68b9      	ldr	r1, [r7, #8]
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	f000 fc24 	bl	800e014 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d7da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d7ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d7f2:	68bb      	ldr	r3, [r7, #8]
 800d7f4:	691b      	ldr	r3, [r3, #16]
 800d7f6:	021a      	lsls	r2, r3, #8
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	430a      	orrs	r2, r1
 800d7fe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d800:	e002      	b.n	800d808 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d802:	2301      	movs	r3, #1
 800d804:	75fb      	strb	r3, [r7, #23]
      break;
 800d806:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	2200      	movs	r2, #0
 800d80c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d810:	7dfb      	ldrb	r3, [r7, #23]
}
 800d812:	4618      	mov	r0, r3
 800d814:	3718      	adds	r7, #24
 800d816:	46bd      	mov	sp, r7
 800d818:	bd80      	pop	{r7, pc}
 800d81a:	bf00      	nop

0800d81c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b084      	sub	sp, #16
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
 800d824:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d826:	2300      	movs	r3, #0
 800d828:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d830:	2b01      	cmp	r3, #1
 800d832:	d101      	bne.n	800d838 <HAL_TIM_ConfigClockSource+0x1c>
 800d834:	2302      	movs	r3, #2
 800d836:	e0b6      	b.n	800d9a6 <HAL_TIM_ConfigClockSource+0x18a>
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	2201      	movs	r2, #1
 800d83c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	2202      	movs	r2, #2
 800d844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	689b      	ldr	r3, [r3, #8]
 800d84e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d850:	68bb      	ldr	r3, [r7, #8]
 800d852:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d856:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800d85a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d85c:	68bb      	ldr	r3, [r7, #8]
 800d85e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d862:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	68ba      	ldr	r2, [r7, #8]
 800d86a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d86c:	683b      	ldr	r3, [r7, #0]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d874:	d03e      	beq.n	800d8f4 <HAL_TIM_ConfigClockSource+0xd8>
 800d876:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d87a:	f200 8087 	bhi.w	800d98c <HAL_TIM_ConfigClockSource+0x170>
 800d87e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d882:	f000 8086 	beq.w	800d992 <HAL_TIM_ConfigClockSource+0x176>
 800d886:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d88a:	d87f      	bhi.n	800d98c <HAL_TIM_ConfigClockSource+0x170>
 800d88c:	2b70      	cmp	r3, #112	; 0x70
 800d88e:	d01a      	beq.n	800d8c6 <HAL_TIM_ConfigClockSource+0xaa>
 800d890:	2b70      	cmp	r3, #112	; 0x70
 800d892:	d87b      	bhi.n	800d98c <HAL_TIM_ConfigClockSource+0x170>
 800d894:	2b60      	cmp	r3, #96	; 0x60
 800d896:	d050      	beq.n	800d93a <HAL_TIM_ConfigClockSource+0x11e>
 800d898:	2b60      	cmp	r3, #96	; 0x60
 800d89a:	d877      	bhi.n	800d98c <HAL_TIM_ConfigClockSource+0x170>
 800d89c:	2b50      	cmp	r3, #80	; 0x50
 800d89e:	d03c      	beq.n	800d91a <HAL_TIM_ConfigClockSource+0xfe>
 800d8a0:	2b50      	cmp	r3, #80	; 0x50
 800d8a2:	d873      	bhi.n	800d98c <HAL_TIM_ConfigClockSource+0x170>
 800d8a4:	2b40      	cmp	r3, #64	; 0x40
 800d8a6:	d058      	beq.n	800d95a <HAL_TIM_ConfigClockSource+0x13e>
 800d8a8:	2b40      	cmp	r3, #64	; 0x40
 800d8aa:	d86f      	bhi.n	800d98c <HAL_TIM_ConfigClockSource+0x170>
 800d8ac:	2b30      	cmp	r3, #48	; 0x30
 800d8ae:	d064      	beq.n	800d97a <HAL_TIM_ConfigClockSource+0x15e>
 800d8b0:	2b30      	cmp	r3, #48	; 0x30
 800d8b2:	d86b      	bhi.n	800d98c <HAL_TIM_ConfigClockSource+0x170>
 800d8b4:	2b20      	cmp	r3, #32
 800d8b6:	d060      	beq.n	800d97a <HAL_TIM_ConfigClockSource+0x15e>
 800d8b8:	2b20      	cmp	r3, #32
 800d8ba:	d867      	bhi.n	800d98c <HAL_TIM_ConfigClockSource+0x170>
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d05c      	beq.n	800d97a <HAL_TIM_ConfigClockSource+0x15e>
 800d8c0:	2b10      	cmp	r3, #16
 800d8c2:	d05a      	beq.n	800d97a <HAL_TIM_ConfigClockSource+0x15e>
 800d8c4:	e062      	b.n	800d98c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	6818      	ldr	r0, [r3, #0]
 800d8ca:	683b      	ldr	r3, [r7, #0]
 800d8cc:	6899      	ldr	r1, [r3, #8]
 800d8ce:	683b      	ldr	r3, [r7, #0]
 800d8d0:	685a      	ldr	r2, [r3, #4]
 800d8d2:	683b      	ldr	r3, [r7, #0]
 800d8d4:	68db      	ldr	r3, [r3, #12]
 800d8d6:	f000 fc7d 	bl	800e1d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	689b      	ldr	r3, [r3, #8]
 800d8e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d8e2:	68bb      	ldr	r3, [r7, #8]
 800d8e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d8e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	68ba      	ldr	r2, [r7, #8]
 800d8f0:	609a      	str	r2, [r3, #8]
      break;
 800d8f2:	e04f      	b.n	800d994 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	6818      	ldr	r0, [r3, #0]
 800d8f8:	683b      	ldr	r3, [r7, #0]
 800d8fa:	6899      	ldr	r1, [r3, #8]
 800d8fc:	683b      	ldr	r3, [r7, #0]
 800d8fe:	685a      	ldr	r2, [r3, #4]
 800d900:	683b      	ldr	r3, [r7, #0]
 800d902:	68db      	ldr	r3, [r3, #12]
 800d904:	f000 fc66 	bl	800e1d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	689a      	ldr	r2, [r3, #8]
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d916:	609a      	str	r2, [r3, #8]
      break;
 800d918:	e03c      	b.n	800d994 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	6818      	ldr	r0, [r3, #0]
 800d91e:	683b      	ldr	r3, [r7, #0]
 800d920:	6859      	ldr	r1, [r3, #4]
 800d922:	683b      	ldr	r3, [r7, #0]
 800d924:	68db      	ldr	r3, [r3, #12]
 800d926:	461a      	mov	r2, r3
 800d928:	f000 fbda 	bl	800e0e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	2150      	movs	r1, #80	; 0x50
 800d932:	4618      	mov	r0, r3
 800d934:	f000 fc33 	bl	800e19e <TIM_ITRx_SetConfig>
      break;
 800d938:	e02c      	b.n	800d994 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	6818      	ldr	r0, [r3, #0]
 800d93e:	683b      	ldr	r3, [r7, #0]
 800d940:	6859      	ldr	r1, [r3, #4]
 800d942:	683b      	ldr	r3, [r7, #0]
 800d944:	68db      	ldr	r3, [r3, #12]
 800d946:	461a      	mov	r2, r3
 800d948:	f000 fbf9 	bl	800e13e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	2160      	movs	r1, #96	; 0x60
 800d952:	4618      	mov	r0, r3
 800d954:	f000 fc23 	bl	800e19e <TIM_ITRx_SetConfig>
      break;
 800d958:	e01c      	b.n	800d994 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	6818      	ldr	r0, [r3, #0]
 800d95e:	683b      	ldr	r3, [r7, #0]
 800d960:	6859      	ldr	r1, [r3, #4]
 800d962:	683b      	ldr	r3, [r7, #0]
 800d964:	68db      	ldr	r3, [r3, #12]
 800d966:	461a      	mov	r2, r3
 800d968:	f000 fbba 	bl	800e0e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	2140      	movs	r1, #64	; 0x40
 800d972:	4618      	mov	r0, r3
 800d974:	f000 fc13 	bl	800e19e <TIM_ITRx_SetConfig>
      break;
 800d978:	e00c      	b.n	800d994 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	681a      	ldr	r2, [r3, #0]
 800d97e:	683b      	ldr	r3, [r7, #0]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	4619      	mov	r1, r3
 800d984:	4610      	mov	r0, r2
 800d986:	f000 fc0a 	bl	800e19e <TIM_ITRx_SetConfig>
      break;
 800d98a:	e003      	b.n	800d994 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800d98c:	2301      	movs	r3, #1
 800d98e:	73fb      	strb	r3, [r7, #15]
      break;
 800d990:	e000      	b.n	800d994 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800d992:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	2201      	movs	r2, #1
 800d998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	2200      	movs	r2, #0
 800d9a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d9a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	3710      	adds	r7, #16
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	bd80      	pop	{r7, pc}

0800d9ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d9ae:	b480      	push	{r7}
 800d9b0:	b083      	sub	sp, #12
 800d9b2:	af00      	add	r7, sp, #0
 800d9b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d9b6:	bf00      	nop
 800d9b8:	370c      	adds	r7, #12
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c0:	4770      	bx	lr

0800d9c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d9c2:	b480      	push	{r7}
 800d9c4:	b083      	sub	sp, #12
 800d9c6:	af00      	add	r7, sp, #0
 800d9c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d9ca:	bf00      	nop
 800d9cc:	370c      	adds	r7, #12
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d4:	4770      	bx	lr

0800d9d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d9d6:	b480      	push	{r7}
 800d9d8:	b083      	sub	sp, #12
 800d9da:	af00      	add	r7, sp, #0
 800d9dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d9de:	bf00      	nop
 800d9e0:	370c      	adds	r7, #12
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e8:	4770      	bx	lr

0800d9ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d9ea:	b480      	push	{r7}
 800d9ec:	b083      	sub	sp, #12
 800d9ee:	af00      	add	r7, sp, #0
 800d9f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d9f2:	bf00      	nop
 800d9f4:	370c      	adds	r7, #12
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fc:	4770      	bx	lr
	...

0800da00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800da00:	b480      	push	{r7}
 800da02:	b085      	sub	sp, #20
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
 800da08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	4a40      	ldr	r2, [pc, #256]	; (800db14 <TIM_Base_SetConfig+0x114>)
 800da14:	4293      	cmp	r3, r2
 800da16:	d013      	beq.n	800da40 <TIM_Base_SetConfig+0x40>
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800da1e:	d00f      	beq.n	800da40 <TIM_Base_SetConfig+0x40>
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	4a3d      	ldr	r2, [pc, #244]	; (800db18 <TIM_Base_SetConfig+0x118>)
 800da24:	4293      	cmp	r3, r2
 800da26:	d00b      	beq.n	800da40 <TIM_Base_SetConfig+0x40>
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	4a3c      	ldr	r2, [pc, #240]	; (800db1c <TIM_Base_SetConfig+0x11c>)
 800da2c:	4293      	cmp	r3, r2
 800da2e:	d007      	beq.n	800da40 <TIM_Base_SetConfig+0x40>
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	4a3b      	ldr	r2, [pc, #236]	; (800db20 <TIM_Base_SetConfig+0x120>)
 800da34:	4293      	cmp	r3, r2
 800da36:	d003      	beq.n	800da40 <TIM_Base_SetConfig+0x40>
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	4a3a      	ldr	r2, [pc, #232]	; (800db24 <TIM_Base_SetConfig+0x124>)
 800da3c:	4293      	cmp	r3, r2
 800da3e:	d108      	bne.n	800da52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800da46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800da48:	683b      	ldr	r3, [r7, #0]
 800da4a:	685b      	ldr	r3, [r3, #4]
 800da4c:	68fa      	ldr	r2, [r7, #12]
 800da4e:	4313      	orrs	r3, r2
 800da50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	4a2f      	ldr	r2, [pc, #188]	; (800db14 <TIM_Base_SetConfig+0x114>)
 800da56:	4293      	cmp	r3, r2
 800da58:	d01f      	beq.n	800da9a <TIM_Base_SetConfig+0x9a>
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800da60:	d01b      	beq.n	800da9a <TIM_Base_SetConfig+0x9a>
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	4a2c      	ldr	r2, [pc, #176]	; (800db18 <TIM_Base_SetConfig+0x118>)
 800da66:	4293      	cmp	r3, r2
 800da68:	d017      	beq.n	800da9a <TIM_Base_SetConfig+0x9a>
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	4a2b      	ldr	r2, [pc, #172]	; (800db1c <TIM_Base_SetConfig+0x11c>)
 800da6e:	4293      	cmp	r3, r2
 800da70:	d013      	beq.n	800da9a <TIM_Base_SetConfig+0x9a>
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	4a2a      	ldr	r2, [pc, #168]	; (800db20 <TIM_Base_SetConfig+0x120>)
 800da76:	4293      	cmp	r3, r2
 800da78:	d00f      	beq.n	800da9a <TIM_Base_SetConfig+0x9a>
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	4a29      	ldr	r2, [pc, #164]	; (800db24 <TIM_Base_SetConfig+0x124>)
 800da7e:	4293      	cmp	r3, r2
 800da80:	d00b      	beq.n	800da9a <TIM_Base_SetConfig+0x9a>
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	4a28      	ldr	r2, [pc, #160]	; (800db28 <TIM_Base_SetConfig+0x128>)
 800da86:	4293      	cmp	r3, r2
 800da88:	d007      	beq.n	800da9a <TIM_Base_SetConfig+0x9a>
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	4a27      	ldr	r2, [pc, #156]	; (800db2c <TIM_Base_SetConfig+0x12c>)
 800da8e:	4293      	cmp	r3, r2
 800da90:	d003      	beq.n	800da9a <TIM_Base_SetConfig+0x9a>
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	4a26      	ldr	r2, [pc, #152]	; (800db30 <TIM_Base_SetConfig+0x130>)
 800da96:	4293      	cmp	r3, r2
 800da98:	d108      	bne.n	800daac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800daa0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800daa2:	683b      	ldr	r3, [r7, #0]
 800daa4:	68db      	ldr	r3, [r3, #12]
 800daa6:	68fa      	ldr	r2, [r7, #12]
 800daa8:	4313      	orrs	r3, r2
 800daaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800dab2:	683b      	ldr	r3, [r7, #0]
 800dab4:	695b      	ldr	r3, [r3, #20]
 800dab6:	4313      	orrs	r3, r2
 800dab8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	68fa      	ldr	r2, [r7, #12]
 800dabe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dac0:	683b      	ldr	r3, [r7, #0]
 800dac2:	689a      	ldr	r2, [r3, #8]
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dac8:	683b      	ldr	r3, [r7, #0]
 800daca:	681a      	ldr	r2, [r3, #0]
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	4a10      	ldr	r2, [pc, #64]	; (800db14 <TIM_Base_SetConfig+0x114>)
 800dad4:	4293      	cmp	r3, r2
 800dad6:	d00f      	beq.n	800daf8 <TIM_Base_SetConfig+0xf8>
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	4a12      	ldr	r2, [pc, #72]	; (800db24 <TIM_Base_SetConfig+0x124>)
 800dadc:	4293      	cmp	r3, r2
 800dade:	d00b      	beq.n	800daf8 <TIM_Base_SetConfig+0xf8>
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	4a11      	ldr	r2, [pc, #68]	; (800db28 <TIM_Base_SetConfig+0x128>)
 800dae4:	4293      	cmp	r3, r2
 800dae6:	d007      	beq.n	800daf8 <TIM_Base_SetConfig+0xf8>
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	4a10      	ldr	r2, [pc, #64]	; (800db2c <TIM_Base_SetConfig+0x12c>)
 800daec:	4293      	cmp	r3, r2
 800daee:	d003      	beq.n	800daf8 <TIM_Base_SetConfig+0xf8>
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	4a0f      	ldr	r2, [pc, #60]	; (800db30 <TIM_Base_SetConfig+0x130>)
 800daf4:	4293      	cmp	r3, r2
 800daf6:	d103      	bne.n	800db00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800daf8:	683b      	ldr	r3, [r7, #0]
 800dafa:	691a      	ldr	r2, [r3, #16]
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	2201      	movs	r2, #1
 800db04:	615a      	str	r2, [r3, #20]
}
 800db06:	bf00      	nop
 800db08:	3714      	adds	r7, #20
 800db0a:	46bd      	mov	sp, r7
 800db0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db10:	4770      	bx	lr
 800db12:	bf00      	nop
 800db14:	40012c00 	.word	0x40012c00
 800db18:	40000400 	.word	0x40000400
 800db1c:	40000800 	.word	0x40000800
 800db20:	40000c00 	.word	0x40000c00
 800db24:	40013400 	.word	0x40013400
 800db28:	40014000 	.word	0x40014000
 800db2c:	40014400 	.word	0x40014400
 800db30:	40014800 	.word	0x40014800

0800db34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800db34:	b480      	push	{r7}
 800db36:	b087      	sub	sp, #28
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
 800db3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	6a1b      	ldr	r3, [r3, #32]
 800db42:	f023 0201 	bic.w	r2, r3, #1
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	6a1b      	ldr	r3, [r3, #32]
 800db4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	685b      	ldr	r3, [r3, #4]
 800db54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	699b      	ldr	r3, [r3, #24]
 800db5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800db62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800db66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	f023 0303 	bic.w	r3, r3, #3
 800db6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800db70:	683b      	ldr	r3, [r7, #0]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	68fa      	ldr	r2, [r7, #12]
 800db76:	4313      	orrs	r3, r2
 800db78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800db7a:	697b      	ldr	r3, [r7, #20]
 800db7c:	f023 0302 	bic.w	r3, r3, #2
 800db80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800db82:	683b      	ldr	r3, [r7, #0]
 800db84:	689b      	ldr	r3, [r3, #8]
 800db86:	697a      	ldr	r2, [r7, #20]
 800db88:	4313      	orrs	r3, r2
 800db8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	4a2c      	ldr	r2, [pc, #176]	; (800dc40 <TIM_OC1_SetConfig+0x10c>)
 800db90:	4293      	cmp	r3, r2
 800db92:	d00f      	beq.n	800dbb4 <TIM_OC1_SetConfig+0x80>
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	4a2b      	ldr	r2, [pc, #172]	; (800dc44 <TIM_OC1_SetConfig+0x110>)
 800db98:	4293      	cmp	r3, r2
 800db9a:	d00b      	beq.n	800dbb4 <TIM_OC1_SetConfig+0x80>
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	4a2a      	ldr	r2, [pc, #168]	; (800dc48 <TIM_OC1_SetConfig+0x114>)
 800dba0:	4293      	cmp	r3, r2
 800dba2:	d007      	beq.n	800dbb4 <TIM_OC1_SetConfig+0x80>
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	4a29      	ldr	r2, [pc, #164]	; (800dc4c <TIM_OC1_SetConfig+0x118>)
 800dba8:	4293      	cmp	r3, r2
 800dbaa:	d003      	beq.n	800dbb4 <TIM_OC1_SetConfig+0x80>
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	4a28      	ldr	r2, [pc, #160]	; (800dc50 <TIM_OC1_SetConfig+0x11c>)
 800dbb0:	4293      	cmp	r3, r2
 800dbb2:	d10c      	bne.n	800dbce <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800dbb4:	697b      	ldr	r3, [r7, #20]
 800dbb6:	f023 0308 	bic.w	r3, r3, #8
 800dbba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800dbbc:	683b      	ldr	r3, [r7, #0]
 800dbbe:	68db      	ldr	r3, [r3, #12]
 800dbc0:	697a      	ldr	r2, [r7, #20]
 800dbc2:	4313      	orrs	r3, r2
 800dbc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800dbc6:	697b      	ldr	r3, [r7, #20]
 800dbc8:	f023 0304 	bic.w	r3, r3, #4
 800dbcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	4a1b      	ldr	r2, [pc, #108]	; (800dc40 <TIM_OC1_SetConfig+0x10c>)
 800dbd2:	4293      	cmp	r3, r2
 800dbd4:	d00f      	beq.n	800dbf6 <TIM_OC1_SetConfig+0xc2>
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	4a1a      	ldr	r2, [pc, #104]	; (800dc44 <TIM_OC1_SetConfig+0x110>)
 800dbda:	4293      	cmp	r3, r2
 800dbdc:	d00b      	beq.n	800dbf6 <TIM_OC1_SetConfig+0xc2>
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	4a19      	ldr	r2, [pc, #100]	; (800dc48 <TIM_OC1_SetConfig+0x114>)
 800dbe2:	4293      	cmp	r3, r2
 800dbe4:	d007      	beq.n	800dbf6 <TIM_OC1_SetConfig+0xc2>
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	4a18      	ldr	r2, [pc, #96]	; (800dc4c <TIM_OC1_SetConfig+0x118>)
 800dbea:	4293      	cmp	r3, r2
 800dbec:	d003      	beq.n	800dbf6 <TIM_OC1_SetConfig+0xc2>
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	4a17      	ldr	r2, [pc, #92]	; (800dc50 <TIM_OC1_SetConfig+0x11c>)
 800dbf2:	4293      	cmp	r3, r2
 800dbf4:	d111      	bne.n	800dc1a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800dbf6:	693b      	ldr	r3, [r7, #16]
 800dbf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dbfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800dbfe:	693b      	ldr	r3, [r7, #16]
 800dc00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800dc04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800dc06:	683b      	ldr	r3, [r7, #0]
 800dc08:	695b      	ldr	r3, [r3, #20]
 800dc0a:	693a      	ldr	r2, [r7, #16]
 800dc0c:	4313      	orrs	r3, r2
 800dc0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800dc10:	683b      	ldr	r3, [r7, #0]
 800dc12:	699b      	ldr	r3, [r3, #24]
 800dc14:	693a      	ldr	r2, [r7, #16]
 800dc16:	4313      	orrs	r3, r2
 800dc18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	693a      	ldr	r2, [r7, #16]
 800dc1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	68fa      	ldr	r2, [r7, #12]
 800dc24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800dc26:	683b      	ldr	r3, [r7, #0]
 800dc28:	685a      	ldr	r2, [r3, #4]
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	697a      	ldr	r2, [r7, #20]
 800dc32:	621a      	str	r2, [r3, #32]
}
 800dc34:	bf00      	nop
 800dc36:	371c      	adds	r7, #28
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3e:	4770      	bx	lr
 800dc40:	40012c00 	.word	0x40012c00
 800dc44:	40013400 	.word	0x40013400
 800dc48:	40014000 	.word	0x40014000
 800dc4c:	40014400 	.word	0x40014400
 800dc50:	40014800 	.word	0x40014800

0800dc54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dc54:	b480      	push	{r7}
 800dc56:	b087      	sub	sp, #28
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
 800dc5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	6a1b      	ldr	r3, [r3, #32]
 800dc62:	f023 0210 	bic.w	r2, r3, #16
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	6a1b      	ldr	r3, [r3, #32]
 800dc6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	685b      	ldr	r3, [r3, #4]
 800dc74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	699b      	ldr	r3, [r3, #24]
 800dc7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800dc82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dc86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dc8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dc90:	683b      	ldr	r3, [r7, #0]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	021b      	lsls	r3, r3, #8
 800dc96:	68fa      	ldr	r2, [r7, #12]
 800dc98:	4313      	orrs	r3, r2
 800dc9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800dc9c:	697b      	ldr	r3, [r7, #20]
 800dc9e:	f023 0320 	bic.w	r3, r3, #32
 800dca2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800dca4:	683b      	ldr	r3, [r7, #0]
 800dca6:	689b      	ldr	r3, [r3, #8]
 800dca8:	011b      	lsls	r3, r3, #4
 800dcaa:	697a      	ldr	r2, [r7, #20]
 800dcac:	4313      	orrs	r3, r2
 800dcae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	4a28      	ldr	r2, [pc, #160]	; (800dd54 <TIM_OC2_SetConfig+0x100>)
 800dcb4:	4293      	cmp	r3, r2
 800dcb6:	d003      	beq.n	800dcc0 <TIM_OC2_SetConfig+0x6c>
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	4a27      	ldr	r2, [pc, #156]	; (800dd58 <TIM_OC2_SetConfig+0x104>)
 800dcbc:	4293      	cmp	r3, r2
 800dcbe:	d10d      	bne.n	800dcdc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800dcc0:	697b      	ldr	r3, [r7, #20]
 800dcc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dcc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	68db      	ldr	r3, [r3, #12]
 800dccc:	011b      	lsls	r3, r3, #4
 800dcce:	697a      	ldr	r2, [r7, #20]
 800dcd0:	4313      	orrs	r3, r2
 800dcd2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800dcd4:	697b      	ldr	r3, [r7, #20]
 800dcd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dcda:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	4a1d      	ldr	r2, [pc, #116]	; (800dd54 <TIM_OC2_SetConfig+0x100>)
 800dce0:	4293      	cmp	r3, r2
 800dce2:	d00f      	beq.n	800dd04 <TIM_OC2_SetConfig+0xb0>
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	4a1c      	ldr	r2, [pc, #112]	; (800dd58 <TIM_OC2_SetConfig+0x104>)
 800dce8:	4293      	cmp	r3, r2
 800dcea:	d00b      	beq.n	800dd04 <TIM_OC2_SetConfig+0xb0>
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	4a1b      	ldr	r2, [pc, #108]	; (800dd5c <TIM_OC2_SetConfig+0x108>)
 800dcf0:	4293      	cmp	r3, r2
 800dcf2:	d007      	beq.n	800dd04 <TIM_OC2_SetConfig+0xb0>
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	4a1a      	ldr	r2, [pc, #104]	; (800dd60 <TIM_OC2_SetConfig+0x10c>)
 800dcf8:	4293      	cmp	r3, r2
 800dcfa:	d003      	beq.n	800dd04 <TIM_OC2_SetConfig+0xb0>
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	4a19      	ldr	r2, [pc, #100]	; (800dd64 <TIM_OC2_SetConfig+0x110>)
 800dd00:	4293      	cmp	r3, r2
 800dd02:	d113      	bne.n	800dd2c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800dd04:	693b      	ldr	r3, [r7, #16]
 800dd06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dd0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800dd0c:	693b      	ldr	r3, [r7, #16]
 800dd0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dd12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800dd14:	683b      	ldr	r3, [r7, #0]
 800dd16:	695b      	ldr	r3, [r3, #20]
 800dd18:	009b      	lsls	r3, r3, #2
 800dd1a:	693a      	ldr	r2, [r7, #16]
 800dd1c:	4313      	orrs	r3, r2
 800dd1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	699b      	ldr	r3, [r3, #24]
 800dd24:	009b      	lsls	r3, r3, #2
 800dd26:	693a      	ldr	r2, [r7, #16]
 800dd28:	4313      	orrs	r3, r2
 800dd2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	693a      	ldr	r2, [r7, #16]
 800dd30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	68fa      	ldr	r2, [r7, #12]
 800dd36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800dd38:	683b      	ldr	r3, [r7, #0]
 800dd3a:	685a      	ldr	r2, [r3, #4]
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	697a      	ldr	r2, [r7, #20]
 800dd44:	621a      	str	r2, [r3, #32]
}
 800dd46:	bf00      	nop
 800dd48:	371c      	adds	r7, #28
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd50:	4770      	bx	lr
 800dd52:	bf00      	nop
 800dd54:	40012c00 	.word	0x40012c00
 800dd58:	40013400 	.word	0x40013400
 800dd5c:	40014000 	.word	0x40014000
 800dd60:	40014400 	.word	0x40014400
 800dd64:	40014800 	.word	0x40014800

0800dd68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dd68:	b480      	push	{r7}
 800dd6a:	b087      	sub	sp, #28
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
 800dd70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	6a1b      	ldr	r3, [r3, #32]
 800dd76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	6a1b      	ldr	r3, [r3, #32]
 800dd82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	685b      	ldr	r3, [r3, #4]
 800dd88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	69db      	ldr	r3, [r3, #28]
 800dd8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dd96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dd9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	f023 0303 	bic.w	r3, r3, #3
 800dda2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dda4:	683b      	ldr	r3, [r7, #0]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	68fa      	ldr	r2, [r7, #12]
 800ddaa:	4313      	orrs	r3, r2
 800ddac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ddae:	697b      	ldr	r3, [r7, #20]
 800ddb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ddb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ddb6:	683b      	ldr	r3, [r7, #0]
 800ddb8:	689b      	ldr	r3, [r3, #8]
 800ddba:	021b      	lsls	r3, r3, #8
 800ddbc:	697a      	ldr	r2, [r7, #20]
 800ddbe:	4313      	orrs	r3, r2
 800ddc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	4a27      	ldr	r2, [pc, #156]	; (800de64 <TIM_OC3_SetConfig+0xfc>)
 800ddc6:	4293      	cmp	r3, r2
 800ddc8:	d003      	beq.n	800ddd2 <TIM_OC3_SetConfig+0x6a>
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	4a26      	ldr	r2, [pc, #152]	; (800de68 <TIM_OC3_SetConfig+0x100>)
 800ddce:	4293      	cmp	r3, r2
 800ddd0:	d10d      	bne.n	800ddee <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ddd2:	697b      	ldr	r3, [r7, #20]
 800ddd4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ddd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ddda:	683b      	ldr	r3, [r7, #0]
 800dddc:	68db      	ldr	r3, [r3, #12]
 800ddde:	021b      	lsls	r3, r3, #8
 800dde0:	697a      	ldr	r2, [r7, #20]
 800dde2:	4313      	orrs	r3, r2
 800dde4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800dde6:	697b      	ldr	r3, [r7, #20]
 800dde8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ddec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	4a1c      	ldr	r2, [pc, #112]	; (800de64 <TIM_OC3_SetConfig+0xfc>)
 800ddf2:	4293      	cmp	r3, r2
 800ddf4:	d00f      	beq.n	800de16 <TIM_OC3_SetConfig+0xae>
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	4a1b      	ldr	r2, [pc, #108]	; (800de68 <TIM_OC3_SetConfig+0x100>)
 800ddfa:	4293      	cmp	r3, r2
 800ddfc:	d00b      	beq.n	800de16 <TIM_OC3_SetConfig+0xae>
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	4a1a      	ldr	r2, [pc, #104]	; (800de6c <TIM_OC3_SetConfig+0x104>)
 800de02:	4293      	cmp	r3, r2
 800de04:	d007      	beq.n	800de16 <TIM_OC3_SetConfig+0xae>
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	4a19      	ldr	r2, [pc, #100]	; (800de70 <TIM_OC3_SetConfig+0x108>)
 800de0a:	4293      	cmp	r3, r2
 800de0c:	d003      	beq.n	800de16 <TIM_OC3_SetConfig+0xae>
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	4a18      	ldr	r2, [pc, #96]	; (800de74 <TIM_OC3_SetConfig+0x10c>)
 800de12:	4293      	cmp	r3, r2
 800de14:	d113      	bne.n	800de3e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800de16:	693b      	ldr	r3, [r7, #16]
 800de18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800de1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800de1e:	693b      	ldr	r3, [r7, #16]
 800de20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800de24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800de26:	683b      	ldr	r3, [r7, #0]
 800de28:	695b      	ldr	r3, [r3, #20]
 800de2a:	011b      	lsls	r3, r3, #4
 800de2c:	693a      	ldr	r2, [r7, #16]
 800de2e:	4313      	orrs	r3, r2
 800de30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800de32:	683b      	ldr	r3, [r7, #0]
 800de34:	699b      	ldr	r3, [r3, #24]
 800de36:	011b      	lsls	r3, r3, #4
 800de38:	693a      	ldr	r2, [r7, #16]
 800de3a:	4313      	orrs	r3, r2
 800de3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	693a      	ldr	r2, [r7, #16]
 800de42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	68fa      	ldr	r2, [r7, #12]
 800de48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800de4a:	683b      	ldr	r3, [r7, #0]
 800de4c:	685a      	ldr	r2, [r3, #4]
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	697a      	ldr	r2, [r7, #20]
 800de56:	621a      	str	r2, [r3, #32]
}
 800de58:	bf00      	nop
 800de5a:	371c      	adds	r7, #28
 800de5c:	46bd      	mov	sp, r7
 800de5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de62:	4770      	bx	lr
 800de64:	40012c00 	.word	0x40012c00
 800de68:	40013400 	.word	0x40013400
 800de6c:	40014000 	.word	0x40014000
 800de70:	40014400 	.word	0x40014400
 800de74:	40014800 	.word	0x40014800

0800de78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800de78:	b480      	push	{r7}
 800de7a:	b087      	sub	sp, #28
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
 800de80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	6a1b      	ldr	r3, [r3, #32]
 800de86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	6a1b      	ldr	r3, [r3, #32]
 800de92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	685b      	ldr	r3, [r3, #4]
 800de98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	69db      	ldr	r3, [r3, #28]
 800de9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800dea6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800deaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800deb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800deb4:	683b      	ldr	r3, [r7, #0]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	021b      	lsls	r3, r3, #8
 800deba:	68fa      	ldr	r2, [r7, #12]
 800debc:	4313      	orrs	r3, r2
 800debe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800dec0:	693b      	ldr	r3, [r7, #16]
 800dec2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dec6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800dec8:	683b      	ldr	r3, [r7, #0]
 800deca:	689b      	ldr	r3, [r3, #8]
 800decc:	031b      	lsls	r3, r3, #12
 800dece:	693a      	ldr	r2, [r7, #16]
 800ded0:	4313      	orrs	r3, r2
 800ded2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	4a18      	ldr	r2, [pc, #96]	; (800df38 <TIM_OC4_SetConfig+0xc0>)
 800ded8:	4293      	cmp	r3, r2
 800deda:	d00f      	beq.n	800defc <TIM_OC4_SetConfig+0x84>
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	4a17      	ldr	r2, [pc, #92]	; (800df3c <TIM_OC4_SetConfig+0xc4>)
 800dee0:	4293      	cmp	r3, r2
 800dee2:	d00b      	beq.n	800defc <TIM_OC4_SetConfig+0x84>
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	4a16      	ldr	r2, [pc, #88]	; (800df40 <TIM_OC4_SetConfig+0xc8>)
 800dee8:	4293      	cmp	r3, r2
 800deea:	d007      	beq.n	800defc <TIM_OC4_SetConfig+0x84>
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	4a15      	ldr	r2, [pc, #84]	; (800df44 <TIM_OC4_SetConfig+0xcc>)
 800def0:	4293      	cmp	r3, r2
 800def2:	d003      	beq.n	800defc <TIM_OC4_SetConfig+0x84>
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	4a14      	ldr	r2, [pc, #80]	; (800df48 <TIM_OC4_SetConfig+0xd0>)
 800def8:	4293      	cmp	r3, r2
 800defa:	d109      	bne.n	800df10 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800defc:	697b      	ldr	r3, [r7, #20]
 800defe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800df02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800df04:	683b      	ldr	r3, [r7, #0]
 800df06:	695b      	ldr	r3, [r3, #20]
 800df08:	019b      	lsls	r3, r3, #6
 800df0a:	697a      	ldr	r2, [r7, #20]
 800df0c:	4313      	orrs	r3, r2
 800df0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	697a      	ldr	r2, [r7, #20]
 800df14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	68fa      	ldr	r2, [r7, #12]
 800df1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800df1c:	683b      	ldr	r3, [r7, #0]
 800df1e:	685a      	ldr	r2, [r3, #4]
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	693a      	ldr	r2, [r7, #16]
 800df28:	621a      	str	r2, [r3, #32]
}
 800df2a:	bf00      	nop
 800df2c:	371c      	adds	r7, #28
 800df2e:	46bd      	mov	sp, r7
 800df30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df34:	4770      	bx	lr
 800df36:	bf00      	nop
 800df38:	40012c00 	.word	0x40012c00
 800df3c:	40013400 	.word	0x40013400
 800df40:	40014000 	.word	0x40014000
 800df44:	40014400 	.word	0x40014400
 800df48:	40014800 	.word	0x40014800

0800df4c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800df4c:	b480      	push	{r7}
 800df4e:	b087      	sub	sp, #28
 800df50:	af00      	add	r7, sp, #0
 800df52:	6078      	str	r0, [r7, #4]
 800df54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	6a1b      	ldr	r3, [r3, #32]
 800df5a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	6a1b      	ldr	r3, [r3, #32]
 800df66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	685b      	ldr	r3, [r3, #4]
 800df6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800df7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800df7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800df80:	683b      	ldr	r3, [r7, #0]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	68fa      	ldr	r2, [r7, #12]
 800df86:	4313      	orrs	r3, r2
 800df88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800df8a:	693b      	ldr	r3, [r7, #16]
 800df8c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800df90:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800df92:	683b      	ldr	r3, [r7, #0]
 800df94:	689b      	ldr	r3, [r3, #8]
 800df96:	041b      	lsls	r3, r3, #16
 800df98:	693a      	ldr	r2, [r7, #16]
 800df9a:	4313      	orrs	r3, r2
 800df9c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	4a17      	ldr	r2, [pc, #92]	; (800e000 <TIM_OC5_SetConfig+0xb4>)
 800dfa2:	4293      	cmp	r3, r2
 800dfa4:	d00f      	beq.n	800dfc6 <TIM_OC5_SetConfig+0x7a>
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	4a16      	ldr	r2, [pc, #88]	; (800e004 <TIM_OC5_SetConfig+0xb8>)
 800dfaa:	4293      	cmp	r3, r2
 800dfac:	d00b      	beq.n	800dfc6 <TIM_OC5_SetConfig+0x7a>
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	4a15      	ldr	r2, [pc, #84]	; (800e008 <TIM_OC5_SetConfig+0xbc>)
 800dfb2:	4293      	cmp	r3, r2
 800dfb4:	d007      	beq.n	800dfc6 <TIM_OC5_SetConfig+0x7a>
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	4a14      	ldr	r2, [pc, #80]	; (800e00c <TIM_OC5_SetConfig+0xc0>)
 800dfba:	4293      	cmp	r3, r2
 800dfbc:	d003      	beq.n	800dfc6 <TIM_OC5_SetConfig+0x7a>
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	4a13      	ldr	r2, [pc, #76]	; (800e010 <TIM_OC5_SetConfig+0xc4>)
 800dfc2:	4293      	cmp	r3, r2
 800dfc4:	d109      	bne.n	800dfda <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800dfc6:	697b      	ldr	r3, [r7, #20]
 800dfc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dfcc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800dfce:	683b      	ldr	r3, [r7, #0]
 800dfd0:	695b      	ldr	r3, [r3, #20]
 800dfd2:	021b      	lsls	r3, r3, #8
 800dfd4:	697a      	ldr	r2, [r7, #20]
 800dfd6:	4313      	orrs	r3, r2
 800dfd8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	697a      	ldr	r2, [r7, #20]
 800dfde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	68fa      	ldr	r2, [r7, #12]
 800dfe4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800dfe6:	683b      	ldr	r3, [r7, #0]
 800dfe8:	685a      	ldr	r2, [r3, #4]
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	693a      	ldr	r2, [r7, #16]
 800dff2:	621a      	str	r2, [r3, #32]
}
 800dff4:	bf00      	nop
 800dff6:	371c      	adds	r7, #28
 800dff8:	46bd      	mov	sp, r7
 800dffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffe:	4770      	bx	lr
 800e000:	40012c00 	.word	0x40012c00
 800e004:	40013400 	.word	0x40013400
 800e008:	40014000 	.word	0x40014000
 800e00c:	40014400 	.word	0x40014400
 800e010:	40014800 	.word	0x40014800

0800e014 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e014:	b480      	push	{r7}
 800e016:	b087      	sub	sp, #28
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
 800e01c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	6a1b      	ldr	r3, [r3, #32]
 800e022:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	6a1b      	ldr	r3, [r3, #32]
 800e02e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	685b      	ldr	r3, [r3, #4]
 800e034:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e03a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e042:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e046:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	021b      	lsls	r3, r3, #8
 800e04e:	68fa      	ldr	r2, [r7, #12]
 800e050:	4313      	orrs	r3, r2
 800e052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e054:	693b      	ldr	r3, [r7, #16]
 800e056:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e05a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e05c:	683b      	ldr	r3, [r7, #0]
 800e05e:	689b      	ldr	r3, [r3, #8]
 800e060:	051b      	lsls	r3, r3, #20
 800e062:	693a      	ldr	r2, [r7, #16]
 800e064:	4313      	orrs	r3, r2
 800e066:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	4a18      	ldr	r2, [pc, #96]	; (800e0cc <TIM_OC6_SetConfig+0xb8>)
 800e06c:	4293      	cmp	r3, r2
 800e06e:	d00f      	beq.n	800e090 <TIM_OC6_SetConfig+0x7c>
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	4a17      	ldr	r2, [pc, #92]	; (800e0d0 <TIM_OC6_SetConfig+0xbc>)
 800e074:	4293      	cmp	r3, r2
 800e076:	d00b      	beq.n	800e090 <TIM_OC6_SetConfig+0x7c>
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	4a16      	ldr	r2, [pc, #88]	; (800e0d4 <TIM_OC6_SetConfig+0xc0>)
 800e07c:	4293      	cmp	r3, r2
 800e07e:	d007      	beq.n	800e090 <TIM_OC6_SetConfig+0x7c>
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	4a15      	ldr	r2, [pc, #84]	; (800e0d8 <TIM_OC6_SetConfig+0xc4>)
 800e084:	4293      	cmp	r3, r2
 800e086:	d003      	beq.n	800e090 <TIM_OC6_SetConfig+0x7c>
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	4a14      	ldr	r2, [pc, #80]	; (800e0dc <TIM_OC6_SetConfig+0xc8>)
 800e08c:	4293      	cmp	r3, r2
 800e08e:	d109      	bne.n	800e0a4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e090:	697b      	ldr	r3, [r7, #20]
 800e092:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e096:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e098:	683b      	ldr	r3, [r7, #0]
 800e09a:	695b      	ldr	r3, [r3, #20]
 800e09c:	029b      	lsls	r3, r3, #10
 800e09e:	697a      	ldr	r2, [r7, #20]
 800e0a0:	4313      	orrs	r3, r2
 800e0a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	697a      	ldr	r2, [r7, #20]
 800e0a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	68fa      	ldr	r2, [r7, #12]
 800e0ae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e0b0:	683b      	ldr	r3, [r7, #0]
 800e0b2:	685a      	ldr	r2, [r3, #4]
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	693a      	ldr	r2, [r7, #16]
 800e0bc:	621a      	str	r2, [r3, #32]
}
 800e0be:	bf00      	nop
 800e0c0:	371c      	adds	r7, #28
 800e0c2:	46bd      	mov	sp, r7
 800e0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c8:	4770      	bx	lr
 800e0ca:	bf00      	nop
 800e0cc:	40012c00 	.word	0x40012c00
 800e0d0:	40013400 	.word	0x40013400
 800e0d4:	40014000 	.word	0x40014000
 800e0d8:	40014400 	.word	0x40014400
 800e0dc:	40014800 	.word	0x40014800

0800e0e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e0e0:	b480      	push	{r7}
 800e0e2:	b087      	sub	sp, #28
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	60f8      	str	r0, [r7, #12]
 800e0e8:	60b9      	str	r1, [r7, #8]
 800e0ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	6a1b      	ldr	r3, [r3, #32]
 800e0f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	6a1b      	ldr	r3, [r3, #32]
 800e0f6:	f023 0201 	bic.w	r2, r3, #1
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	699b      	ldr	r3, [r3, #24]
 800e102:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e104:	693b      	ldr	r3, [r7, #16]
 800e106:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e10a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	011b      	lsls	r3, r3, #4
 800e110:	693a      	ldr	r2, [r7, #16]
 800e112:	4313      	orrs	r3, r2
 800e114:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e116:	697b      	ldr	r3, [r7, #20]
 800e118:	f023 030a 	bic.w	r3, r3, #10
 800e11c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e11e:	697a      	ldr	r2, [r7, #20]
 800e120:	68bb      	ldr	r3, [r7, #8]
 800e122:	4313      	orrs	r3, r2
 800e124:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	693a      	ldr	r2, [r7, #16]
 800e12a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	697a      	ldr	r2, [r7, #20]
 800e130:	621a      	str	r2, [r3, #32]
}
 800e132:	bf00      	nop
 800e134:	371c      	adds	r7, #28
 800e136:	46bd      	mov	sp, r7
 800e138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e13c:	4770      	bx	lr

0800e13e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e13e:	b480      	push	{r7}
 800e140:	b087      	sub	sp, #28
 800e142:	af00      	add	r7, sp, #0
 800e144:	60f8      	str	r0, [r7, #12]
 800e146:	60b9      	str	r1, [r7, #8]
 800e148:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	6a1b      	ldr	r3, [r3, #32]
 800e14e:	f023 0210 	bic.w	r2, r3, #16
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	699b      	ldr	r3, [r3, #24]
 800e15a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	6a1b      	ldr	r3, [r3, #32]
 800e160:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e162:	697b      	ldr	r3, [r7, #20]
 800e164:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e168:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	031b      	lsls	r3, r3, #12
 800e16e:	697a      	ldr	r2, [r7, #20]
 800e170:	4313      	orrs	r3, r2
 800e172:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e174:	693b      	ldr	r3, [r7, #16]
 800e176:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e17a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e17c:	68bb      	ldr	r3, [r7, #8]
 800e17e:	011b      	lsls	r3, r3, #4
 800e180:	693a      	ldr	r2, [r7, #16]
 800e182:	4313      	orrs	r3, r2
 800e184:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	697a      	ldr	r2, [r7, #20]
 800e18a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	693a      	ldr	r2, [r7, #16]
 800e190:	621a      	str	r2, [r3, #32]
}
 800e192:	bf00      	nop
 800e194:	371c      	adds	r7, #28
 800e196:	46bd      	mov	sp, r7
 800e198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e19c:	4770      	bx	lr

0800e19e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e19e:	b480      	push	{r7}
 800e1a0:	b085      	sub	sp, #20
 800e1a2:	af00      	add	r7, sp, #0
 800e1a4:	6078      	str	r0, [r7, #4]
 800e1a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	689b      	ldr	r3, [r3, #8]
 800e1ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e1b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e1b6:	683a      	ldr	r2, [r7, #0]
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	4313      	orrs	r3, r2
 800e1bc:	f043 0307 	orr.w	r3, r3, #7
 800e1c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	68fa      	ldr	r2, [r7, #12]
 800e1c6:	609a      	str	r2, [r3, #8]
}
 800e1c8:	bf00      	nop
 800e1ca:	3714      	adds	r7, #20
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d2:	4770      	bx	lr

0800e1d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e1d4:	b480      	push	{r7}
 800e1d6:	b087      	sub	sp, #28
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	60f8      	str	r0, [r7, #12]
 800e1dc:	60b9      	str	r1, [r7, #8]
 800e1de:	607a      	str	r2, [r7, #4]
 800e1e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	689b      	ldr	r3, [r3, #8]
 800e1e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e1e8:	697b      	ldr	r3, [r7, #20]
 800e1ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e1ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e1f0:	683b      	ldr	r3, [r7, #0]
 800e1f2:	021a      	lsls	r2, r3, #8
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	431a      	orrs	r2, r3
 800e1f8:	68bb      	ldr	r3, [r7, #8]
 800e1fa:	4313      	orrs	r3, r2
 800e1fc:	697a      	ldr	r2, [r7, #20]
 800e1fe:	4313      	orrs	r3, r2
 800e200:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	697a      	ldr	r2, [r7, #20]
 800e206:	609a      	str	r2, [r3, #8]
}
 800e208:	bf00      	nop
 800e20a:	371c      	adds	r7, #28
 800e20c:	46bd      	mov	sp, r7
 800e20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e212:	4770      	bx	lr

0800e214 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e214:	b480      	push	{r7}
 800e216:	b087      	sub	sp, #28
 800e218:	af00      	add	r7, sp, #0
 800e21a:	60f8      	str	r0, [r7, #12]
 800e21c:	60b9      	str	r1, [r7, #8]
 800e21e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e220:	68bb      	ldr	r3, [r7, #8]
 800e222:	f003 031f 	and.w	r3, r3, #31
 800e226:	2201      	movs	r2, #1
 800e228:	fa02 f303 	lsl.w	r3, r2, r3
 800e22c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	6a1a      	ldr	r2, [r3, #32]
 800e232:	697b      	ldr	r3, [r7, #20]
 800e234:	43db      	mvns	r3, r3
 800e236:	401a      	ands	r2, r3
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	6a1a      	ldr	r2, [r3, #32]
 800e240:	68bb      	ldr	r3, [r7, #8]
 800e242:	f003 031f 	and.w	r3, r3, #31
 800e246:	6879      	ldr	r1, [r7, #4]
 800e248:	fa01 f303 	lsl.w	r3, r1, r3
 800e24c:	431a      	orrs	r2, r3
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	621a      	str	r2, [r3, #32]
}
 800e252:	bf00      	nop
 800e254:	371c      	adds	r7, #28
 800e256:	46bd      	mov	sp, r7
 800e258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e25c:	4770      	bx	lr
	...

0800e260 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e260:	b480      	push	{r7}
 800e262:	b085      	sub	sp, #20
 800e264:	af00      	add	r7, sp, #0
 800e266:	6078      	str	r0, [r7, #4]
 800e268:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e270:	2b01      	cmp	r3, #1
 800e272:	d101      	bne.n	800e278 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e274:	2302      	movs	r3, #2
 800e276:	e068      	b.n	800e34a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	2201      	movs	r2, #1
 800e27c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	2202      	movs	r2, #2
 800e284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	685b      	ldr	r3, [r3, #4]
 800e28e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	689b      	ldr	r3, [r3, #8]
 800e296:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	4a2e      	ldr	r2, [pc, #184]	; (800e358 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800e29e:	4293      	cmp	r3, r2
 800e2a0:	d004      	beq.n	800e2ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	4a2d      	ldr	r2, [pc, #180]	; (800e35c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800e2a8:	4293      	cmp	r3, r2
 800e2aa:	d108      	bne.n	800e2be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e2b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e2b4:	683b      	ldr	r3, [r7, #0]
 800e2b6:	685b      	ldr	r3, [r3, #4]
 800e2b8:	68fa      	ldr	r2, [r7, #12]
 800e2ba:	4313      	orrs	r3, r2
 800e2bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e2c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e2c6:	683b      	ldr	r3, [r7, #0]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	68fa      	ldr	r2, [r7, #12]
 800e2cc:	4313      	orrs	r3, r2
 800e2ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	68fa      	ldr	r2, [r7, #12]
 800e2d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	4a1e      	ldr	r2, [pc, #120]	; (800e358 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800e2de:	4293      	cmp	r3, r2
 800e2e0:	d01d      	beq.n	800e31e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e2ea:	d018      	beq.n	800e31e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	4a1b      	ldr	r2, [pc, #108]	; (800e360 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e2f2:	4293      	cmp	r3, r2
 800e2f4:	d013      	beq.n	800e31e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	4a1a      	ldr	r2, [pc, #104]	; (800e364 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e2fc:	4293      	cmp	r3, r2
 800e2fe:	d00e      	beq.n	800e31e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	4a18      	ldr	r2, [pc, #96]	; (800e368 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e306:	4293      	cmp	r3, r2
 800e308:	d009      	beq.n	800e31e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	4a13      	ldr	r2, [pc, #76]	; (800e35c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800e310:	4293      	cmp	r3, r2
 800e312:	d004      	beq.n	800e31e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	4a14      	ldr	r2, [pc, #80]	; (800e36c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e31a:	4293      	cmp	r3, r2
 800e31c:	d10c      	bne.n	800e338 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e31e:	68bb      	ldr	r3, [r7, #8]
 800e320:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e324:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e326:	683b      	ldr	r3, [r7, #0]
 800e328:	689b      	ldr	r3, [r3, #8]
 800e32a:	68ba      	ldr	r2, [r7, #8]
 800e32c:	4313      	orrs	r3, r2
 800e32e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	68ba      	ldr	r2, [r7, #8]
 800e336:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	2201      	movs	r2, #1
 800e33c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	2200      	movs	r2, #0
 800e344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e348:	2300      	movs	r3, #0
}
 800e34a:	4618      	mov	r0, r3
 800e34c:	3714      	adds	r7, #20
 800e34e:	46bd      	mov	sp, r7
 800e350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e354:	4770      	bx	lr
 800e356:	bf00      	nop
 800e358:	40012c00 	.word	0x40012c00
 800e35c:	40013400 	.word	0x40013400
 800e360:	40000400 	.word	0x40000400
 800e364:	40000800 	.word	0x40000800
 800e368:	40000c00 	.word	0x40000c00
 800e36c:	40014000 	.word	0x40014000

0800e370 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e370:	b480      	push	{r7}
 800e372:	b083      	sub	sp, #12
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e378:	bf00      	nop
 800e37a:	370c      	adds	r7, #12
 800e37c:	46bd      	mov	sp, r7
 800e37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e382:	4770      	bx	lr

0800e384 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e384:	b480      	push	{r7}
 800e386:	b083      	sub	sp, #12
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e38c:	bf00      	nop
 800e38e:	370c      	adds	r7, #12
 800e390:	46bd      	mov	sp, r7
 800e392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e396:	4770      	bx	lr

0800e398 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e398:	b480      	push	{r7}
 800e39a:	b083      	sub	sp, #12
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e3a0:	bf00      	nop
 800e3a2:	370c      	adds	r7, #12
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3aa:	4770      	bx	lr

0800e3ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	b082      	sub	sp, #8
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d101      	bne.n	800e3be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e3ba:	2301      	movs	r3, #1
 800e3bc:	e042      	b.n	800e444 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d106      	bne.n	800e3d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e3d0:	6878      	ldr	r0, [r7, #4]
 800e3d2:	f7fa fd41 	bl	8008e58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	2224      	movs	r2, #36	; 0x24
 800e3da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	681a      	ldr	r2, [r3, #0]
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	f022 0201 	bic.w	r2, r2, #1
 800e3ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e3ee:	6878      	ldr	r0, [r7, #4]
 800e3f0:	f000 fc02 	bl	800ebf8 <UART_SetConfig>
 800e3f4:	4603      	mov	r3, r0
 800e3f6:	2b01      	cmp	r3, #1
 800e3f8:	d101      	bne.n	800e3fe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800e3fa:	2301      	movs	r3, #1
 800e3fc:	e022      	b.n	800e444 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e402:	2b00      	cmp	r3, #0
 800e404:	d002      	beq.n	800e40c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800e406:	6878      	ldr	r0, [r7, #4]
 800e408:	f000 fef2 	bl	800f1f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	685a      	ldr	r2, [r3, #4]
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e41a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	689a      	ldr	r2, [r3, #8]
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e42a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	681a      	ldr	r2, [r3, #0]
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	f042 0201 	orr.w	r2, r2, #1
 800e43a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e43c:	6878      	ldr	r0, [r7, #4]
 800e43e:	f000 ff79 	bl	800f334 <UART_CheckIdleState>
 800e442:	4603      	mov	r3, r0
}
 800e444:	4618      	mov	r0, r3
 800e446:	3708      	adds	r7, #8
 800e448:	46bd      	mov	sp, r7
 800e44a:	bd80      	pop	{r7, pc}

0800e44c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b08a      	sub	sp, #40	; 0x28
 800e450:	af02      	add	r7, sp, #8
 800e452:	60f8      	str	r0, [r7, #12]
 800e454:	60b9      	str	r1, [r7, #8]
 800e456:	603b      	str	r3, [r7, #0]
 800e458:	4613      	mov	r3, r2
 800e45a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e462:	2b20      	cmp	r3, #32
 800e464:	f040 8083 	bne.w	800e56e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800e468:	68bb      	ldr	r3, [r7, #8]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d002      	beq.n	800e474 <HAL_UART_Transmit+0x28>
 800e46e:	88fb      	ldrh	r3, [r7, #6]
 800e470:	2b00      	cmp	r3, #0
 800e472:	d101      	bne.n	800e478 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800e474:	2301      	movs	r3, #1
 800e476:	e07b      	b.n	800e570 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e47e:	2b01      	cmp	r3, #1
 800e480:	d101      	bne.n	800e486 <HAL_UART_Transmit+0x3a>
 800e482:	2302      	movs	r3, #2
 800e484:	e074      	b.n	800e570 <HAL_UART_Transmit+0x124>
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	2201      	movs	r2, #1
 800e48a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	2200      	movs	r2, #0
 800e492:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	2221      	movs	r2, #33	; 0x21
 800e49a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e49e:	f7fa fdbb 	bl	8009018 <HAL_GetTick>
 800e4a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	88fa      	ldrh	r2, [r7, #6]
 800e4a8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	88fa      	ldrh	r2, [r7, #6]
 800e4b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	689b      	ldr	r3, [r3, #8]
 800e4b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e4bc:	d108      	bne.n	800e4d0 <HAL_UART_Transmit+0x84>
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	691b      	ldr	r3, [r3, #16]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d104      	bne.n	800e4d0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e4ca:	68bb      	ldr	r3, [r7, #8]
 800e4cc:	61bb      	str	r3, [r7, #24]
 800e4ce:	e003      	b.n	800e4d8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800e4d0:	68bb      	ldr	r3, [r7, #8]
 800e4d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	2200      	movs	r2, #0
 800e4dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800e4e0:	e02c      	b.n	800e53c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e4e2:	683b      	ldr	r3, [r7, #0]
 800e4e4:	9300      	str	r3, [sp, #0]
 800e4e6:	697b      	ldr	r3, [r7, #20]
 800e4e8:	2200      	movs	r2, #0
 800e4ea:	2180      	movs	r1, #128	; 0x80
 800e4ec:	68f8      	ldr	r0, [r7, #12]
 800e4ee:	f000 ff6c 	bl	800f3ca <UART_WaitOnFlagUntilTimeout>
 800e4f2:	4603      	mov	r3, r0
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d001      	beq.n	800e4fc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800e4f8:	2303      	movs	r3, #3
 800e4fa:	e039      	b.n	800e570 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800e4fc:	69fb      	ldr	r3, [r7, #28]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d10b      	bne.n	800e51a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e502:	69bb      	ldr	r3, [r7, #24]
 800e504:	881b      	ldrh	r3, [r3, #0]
 800e506:	461a      	mov	r2, r3
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e510:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800e512:	69bb      	ldr	r3, [r7, #24]
 800e514:	3302      	adds	r3, #2
 800e516:	61bb      	str	r3, [r7, #24]
 800e518:	e007      	b.n	800e52a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e51a:	69fb      	ldr	r3, [r7, #28]
 800e51c:	781a      	ldrb	r2, [r3, #0]
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800e524:	69fb      	ldr	r3, [r7, #28]
 800e526:	3301      	adds	r3, #1
 800e528:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e530:	b29b      	uxth	r3, r3
 800e532:	3b01      	subs	r3, #1
 800e534:	b29a      	uxth	r2, r3
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e542:	b29b      	uxth	r3, r3
 800e544:	2b00      	cmp	r3, #0
 800e546:	d1cc      	bne.n	800e4e2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e548:	683b      	ldr	r3, [r7, #0]
 800e54a:	9300      	str	r3, [sp, #0]
 800e54c:	697b      	ldr	r3, [r7, #20]
 800e54e:	2200      	movs	r2, #0
 800e550:	2140      	movs	r1, #64	; 0x40
 800e552:	68f8      	ldr	r0, [r7, #12]
 800e554:	f000 ff39 	bl	800f3ca <UART_WaitOnFlagUntilTimeout>
 800e558:	4603      	mov	r3, r0
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d001      	beq.n	800e562 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800e55e:	2303      	movs	r3, #3
 800e560:	e006      	b.n	800e570 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	2220      	movs	r2, #32
 800e566:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800e56a:	2300      	movs	r3, #0
 800e56c:	e000      	b.n	800e570 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800e56e:	2302      	movs	r3, #2
  }
}
 800e570:	4618      	mov	r0, r3
 800e572:	3720      	adds	r7, #32
 800e574:	46bd      	mov	sp, r7
 800e576:	bd80      	pop	{r7, pc}

0800e578 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e578:	b580      	push	{r7, lr}
 800e57a:	b0ba      	sub	sp, #232	; 0xe8
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	69db      	ldr	r3, [r3, #28]
 800e586:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	689b      	ldr	r3, [r3, #8]
 800e59a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e59e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e5a2:	f640 030f 	movw	r3, #2063	; 0x80f
 800e5a6:	4013      	ands	r3, r2
 800e5a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800e5ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d11b      	bne.n	800e5ec <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e5b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e5b8:	f003 0320 	and.w	r3, r3, #32
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d015      	beq.n	800e5ec <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e5c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e5c4:	f003 0320 	and.w	r3, r3, #32
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d105      	bne.n	800e5d8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e5cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e5d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d009      	beq.n	800e5ec <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	f000 82d6 	beq.w	800eb8e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5e6:	6878      	ldr	r0, [r7, #4]
 800e5e8:	4798      	blx	r3
      }
      return;
 800e5ea:	e2d0      	b.n	800eb8e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 800e5ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	f000 811f 	beq.w	800e834 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e5f6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e5fa:	4b8b      	ldr	r3, [pc, #556]	; (800e828 <HAL_UART_IRQHandler+0x2b0>)
 800e5fc:	4013      	ands	r3, r2
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d106      	bne.n	800e610 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e602:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e606:	4b89      	ldr	r3, [pc, #548]	; (800e82c <HAL_UART_IRQHandler+0x2b4>)
 800e608:	4013      	ands	r3, r2
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	f000 8112 	beq.w	800e834 <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e614:	f003 0301 	and.w	r3, r3, #1
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d011      	beq.n	800e640 <HAL_UART_IRQHandler+0xc8>
 800e61c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e624:	2b00      	cmp	r3, #0
 800e626:	d00b      	beq.n	800e640 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	2201      	movs	r2, #1
 800e62e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e636:	f043 0201 	orr.w	r2, r3, #1
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e644:	f003 0302 	and.w	r3, r3, #2
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d011      	beq.n	800e670 <HAL_UART_IRQHandler+0xf8>
 800e64c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e650:	f003 0301 	and.w	r3, r3, #1
 800e654:	2b00      	cmp	r3, #0
 800e656:	d00b      	beq.n	800e670 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	2202      	movs	r2, #2
 800e65e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e666:	f043 0204 	orr.w	r2, r3, #4
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e674:	f003 0304 	and.w	r3, r3, #4
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d011      	beq.n	800e6a0 <HAL_UART_IRQHandler+0x128>
 800e67c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e680:	f003 0301 	and.w	r3, r3, #1
 800e684:	2b00      	cmp	r3, #0
 800e686:	d00b      	beq.n	800e6a0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	2204      	movs	r2, #4
 800e68e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e696:	f043 0202 	orr.w	r2, r3, #2
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e6a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e6a4:	f003 0308 	and.w	r3, r3, #8
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d017      	beq.n	800e6dc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e6ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e6b0:	f003 0320 	and.w	r3, r3, #32
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d105      	bne.n	800e6c4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e6b8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e6bc:	4b5a      	ldr	r3, [pc, #360]	; (800e828 <HAL_UART_IRQHandler+0x2b0>)
 800e6be:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d00b      	beq.n	800e6dc <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	2208      	movs	r2, #8
 800e6ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e6d2:	f043 0208 	orr.w	r2, r3, #8
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e6dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e6e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d012      	beq.n	800e70e <HAL_UART_IRQHandler+0x196>
 800e6e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e6ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d00c      	beq.n	800e70e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e6fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e704:	f043 0220 	orr.w	r2, r3, #32
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e714:	2b00      	cmp	r3, #0
 800e716:	f000 823c 	beq.w	800eb92 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e71a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e71e:	f003 0320 	and.w	r3, r3, #32
 800e722:	2b00      	cmp	r3, #0
 800e724:	d013      	beq.n	800e74e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e726:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e72a:	f003 0320 	and.w	r3, r3, #32
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d105      	bne.n	800e73e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e732:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d007      	beq.n	800e74e <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e742:	2b00      	cmp	r3, #0
 800e744:	d003      	beq.n	800e74e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e74a:	6878      	ldr	r0, [r7, #4]
 800e74c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e754:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	689b      	ldr	r3, [r3, #8]
 800e75e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e762:	2b40      	cmp	r3, #64	; 0x40
 800e764:	d005      	beq.n	800e772 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e766:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e76a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d04f      	beq.n	800e812 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e772:	6878      	ldr	r0, [r7, #4]
 800e774:	f000 ffdb 	bl	800f72e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	689b      	ldr	r3, [r3, #8]
 800e77e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e782:	2b40      	cmp	r3, #64	; 0x40
 800e784:	d141      	bne.n	800e80a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	3308      	adds	r3, #8
 800e78c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e790:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e794:	e853 3f00 	ldrex	r3, [r3]
 800e798:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e79c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e7a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e7a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	3308      	adds	r3, #8
 800e7ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e7b2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e7b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e7be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e7c2:	e841 2300 	strex	r3, r2, [r1]
 800e7c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e7ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d1d9      	bne.n	800e786 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d013      	beq.n	800e802 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e7de:	4a14      	ldr	r2, [pc, #80]	; (800e830 <HAL_UART_IRQHandler+0x2b8>)
 800e7e0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	f7fa fec3 	bl	8009572 <HAL_DMA_Abort_IT>
 800e7ec:	4603      	mov	r3, r0
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d017      	beq.n	800e822 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e7f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7f8:	687a      	ldr	r2, [r7, #4]
 800e7fa:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800e7fc:	4610      	mov	r0, r2
 800e7fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e800:	e00f      	b.n	800e822 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e802:	6878      	ldr	r0, [r7, #4]
 800e804:	f000 f9ee 	bl	800ebe4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e808:	e00b      	b.n	800e822 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e80a:	6878      	ldr	r0, [r7, #4]
 800e80c:	f000 f9ea 	bl	800ebe4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e810:	e007      	b.n	800e822 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e812:	6878      	ldr	r0, [r7, #4]
 800e814:	f000 f9e6 	bl	800ebe4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	2200      	movs	r2, #0
 800e81c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800e820:	e1b7      	b.n	800eb92 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e822:	bf00      	nop
    return;
 800e824:	e1b5      	b.n	800eb92 <HAL_UART_IRQHandler+0x61a>
 800e826:	bf00      	nop
 800e828:	10000001 	.word	0x10000001
 800e82c:	04000120 	.word	0x04000120
 800e830:	0800f9d9 	.word	0x0800f9d9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e838:	2b01      	cmp	r3, #1
 800e83a:	f040 814a 	bne.w	800ead2 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e83e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e842:	f003 0310 	and.w	r3, r3, #16
 800e846:	2b00      	cmp	r3, #0
 800e848:	f000 8143 	beq.w	800ead2 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e84c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e850:	f003 0310 	and.w	r3, r3, #16
 800e854:	2b00      	cmp	r3, #0
 800e856:	f000 813c 	beq.w	800ead2 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	2210      	movs	r2, #16
 800e860:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	689b      	ldr	r3, [r3, #8]
 800e868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e86c:	2b40      	cmp	r3, #64	; 0x40
 800e86e:	f040 80b5 	bne.w	800e9dc <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	685b      	ldr	r3, [r3, #4]
 800e87a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e87e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e882:	2b00      	cmp	r3, #0
 800e884:	f000 8187 	beq.w	800eb96 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e88e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e892:	429a      	cmp	r2, r3
 800e894:	f080 817f 	bcs.w	800eb96 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e89e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	f003 0320 	and.w	r3, r3, #32
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	f040 8086 	bne.w	800e9c0 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e8c0:	e853 3f00 	ldrex	r3, [r3]
 800e8c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e8c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e8cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e8d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	461a      	mov	r2, r3
 800e8da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e8de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e8e2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e8ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e8ee:	e841 2300 	strex	r3, r2, [r1]
 800e8f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e8f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d1da      	bne.n	800e8b4 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	3308      	adds	r3, #8
 800e904:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e906:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e908:	e853 3f00 	ldrex	r3, [r3]
 800e90c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e90e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e910:	f023 0301 	bic.w	r3, r3, #1
 800e914:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	3308      	adds	r3, #8
 800e91e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e922:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e926:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e928:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e92a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e92e:	e841 2300 	strex	r3, r2, [r1]
 800e932:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e934:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e936:	2b00      	cmp	r3, #0
 800e938:	d1e1      	bne.n	800e8fe <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	3308      	adds	r3, #8
 800e940:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e942:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e944:	e853 3f00 	ldrex	r3, [r3]
 800e948:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e94a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e94c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e950:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	3308      	adds	r3, #8
 800e95a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e95e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e960:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e962:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e964:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e966:	e841 2300 	strex	r3, r2, [r1]
 800e96a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e96c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d1e3      	bne.n	800e93a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	2220      	movs	r2, #32
 800e976:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	2200      	movs	r2, #0
 800e97e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e986:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e988:	e853 3f00 	ldrex	r3, [r3]
 800e98c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e98e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e990:	f023 0310 	bic.w	r3, r3, #16
 800e994:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	461a      	mov	r2, r3
 800e99e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e9a2:	65bb      	str	r3, [r7, #88]	; 0x58
 800e9a4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9a6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e9a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e9aa:	e841 2300 	strex	r3, r2, [r1]
 800e9ae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e9b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d1e4      	bne.n	800e980 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	f7fa fd7d 	bl	80094ba <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e9cc:	b29b      	uxth	r3, r3
 800e9ce:	1ad3      	subs	r3, r2, r3
 800e9d0:	b29b      	uxth	r3, r3
 800e9d2:	4619      	mov	r1, r3
 800e9d4:	6878      	ldr	r0, [r7, #4]
 800e9d6:	f7f7 fb29 	bl	800602c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e9da:	e0dc      	b.n	800eb96 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e9e8:	b29b      	uxth	r3, r3
 800e9ea:	1ad3      	subs	r3, r2, r3
 800e9ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e9f6:	b29b      	uxth	r3, r3
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	f000 80ce 	beq.w	800eb9a <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800e9fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	f000 80c9 	beq.w	800eb9a <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea10:	e853 3f00 	ldrex	r3, [r3]
 800ea14:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ea16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ea1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	461a      	mov	r2, r3
 800ea26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ea2a:	647b      	str	r3, [r7, #68]	; 0x44
 800ea2c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea2e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ea30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ea32:	e841 2300 	strex	r3, r2, [r1]
 800ea36:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ea38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d1e4      	bne.n	800ea08 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	3308      	adds	r3, #8
 800ea44:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea48:	e853 3f00 	ldrex	r3, [r3]
 800ea4c:	623b      	str	r3, [r7, #32]
   return(result);
 800ea4e:	6a3b      	ldr	r3, [r7, #32]
 800ea50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ea54:	f023 0301 	bic.w	r3, r3, #1
 800ea58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	3308      	adds	r3, #8
 800ea62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ea66:	633a      	str	r2, [r7, #48]	; 0x30
 800ea68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ea6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea6e:	e841 2300 	strex	r3, r2, [r1]
 800ea72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ea74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d1e1      	bne.n	800ea3e <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	2220      	movs	r2, #32
 800ea7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	2200      	movs	r2, #0
 800ea86:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea94:	693b      	ldr	r3, [r7, #16]
 800ea96:	e853 3f00 	ldrex	r3, [r3]
 800ea9a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	f023 0310 	bic.w	r3, r3, #16
 800eaa2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	461a      	mov	r2, r3
 800eaac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800eab0:	61fb      	str	r3, [r7, #28]
 800eab2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eab4:	69b9      	ldr	r1, [r7, #24]
 800eab6:	69fa      	ldr	r2, [r7, #28]
 800eab8:	e841 2300 	strex	r3, r2, [r1]
 800eabc:	617b      	str	r3, [r7, #20]
   return(result);
 800eabe:	697b      	ldr	r3, [r7, #20]
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d1e4      	bne.n	800ea8e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800eac4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800eac8:	4619      	mov	r1, r3
 800eaca:	6878      	ldr	r0, [r7, #4]
 800eacc:	f7f7 faae 	bl	800602c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ead0:	e063      	b.n	800eb9a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ead2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ead6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d00e      	beq.n	800eafc <HAL_UART_IRQHandler+0x584>
 800eade:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800eae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d008      	beq.n	800eafc <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800eaf2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800eaf4:	6878      	ldr	r0, [r7, #4]
 800eaf6:	f000 ffb0 	bl	800fa5a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800eafa:	e051      	b.n	800eba0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800eafc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eb00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d014      	beq.n	800eb32 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800eb08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eb0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d105      	bne.n	800eb20 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800eb14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800eb18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d008      	beq.n	800eb32 <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d03a      	beq.n	800eb9e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb2c:	6878      	ldr	r0, [r7, #4]
 800eb2e:	4798      	blx	r3
    }
    return;
 800eb30:	e035      	b.n	800eb9e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800eb32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eb36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d009      	beq.n	800eb52 <HAL_UART_IRQHandler+0x5da>
 800eb3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eb42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d003      	beq.n	800eb52 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800eb4a:	6878      	ldr	r0, [r7, #4]
 800eb4c:	f000 ff5a 	bl	800fa04 <UART_EndTransmit_IT>
    return;
 800eb50:	e026      	b.n	800eba0 <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800eb52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eb56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d009      	beq.n	800eb72 <HAL_UART_IRQHandler+0x5fa>
 800eb5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eb62:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d003      	beq.n	800eb72 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800eb6a:	6878      	ldr	r0, [r7, #4]
 800eb6c:	f000 ff89 	bl	800fa82 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800eb70:	e016      	b.n	800eba0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800eb72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eb76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d010      	beq.n	800eba0 <HAL_UART_IRQHandler+0x628>
 800eb7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	da0c      	bge.n	800eba0 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800eb86:	6878      	ldr	r0, [r7, #4]
 800eb88:	f000 ff71 	bl	800fa6e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800eb8c:	e008      	b.n	800eba0 <HAL_UART_IRQHandler+0x628>
      return;
 800eb8e:	bf00      	nop
 800eb90:	e006      	b.n	800eba0 <HAL_UART_IRQHandler+0x628>
    return;
 800eb92:	bf00      	nop
 800eb94:	e004      	b.n	800eba0 <HAL_UART_IRQHandler+0x628>
      return;
 800eb96:	bf00      	nop
 800eb98:	e002      	b.n	800eba0 <HAL_UART_IRQHandler+0x628>
      return;
 800eb9a:	bf00      	nop
 800eb9c:	e000      	b.n	800eba0 <HAL_UART_IRQHandler+0x628>
    return;
 800eb9e:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 800eba0:	37e8      	adds	r7, #232	; 0xe8
 800eba2:	46bd      	mov	sp, r7
 800eba4:	bd80      	pop	{r7, pc}
 800eba6:	bf00      	nop

0800eba8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800eba8:	b480      	push	{r7}
 800ebaa:	b083      	sub	sp, #12
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ebb0:	bf00      	nop
 800ebb2:	370c      	adds	r7, #12
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebba:	4770      	bx	lr

0800ebbc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ebbc:	b480      	push	{r7}
 800ebbe:	b083      	sub	sp, #12
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800ebc4:	bf00      	nop
 800ebc6:	370c      	adds	r7, #12
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebce:	4770      	bx	lr

0800ebd0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ebd0:	b480      	push	{r7}
 800ebd2:	b083      	sub	sp, #12
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800ebd8:	bf00      	nop
 800ebda:	370c      	adds	r7, #12
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe2:	4770      	bx	lr

0800ebe4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ebe4:	b480      	push	{r7}
 800ebe6:	b083      	sub	sp, #12
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ebec:	bf00      	nop
 800ebee:	370c      	adds	r7, #12
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf6:	4770      	bx	lr

0800ebf8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ebf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ebfc:	b08c      	sub	sp, #48	; 0x30
 800ebfe:	af00      	add	r7, sp, #0
 800ec00:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ec02:	2300      	movs	r3, #0
 800ec04:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ec08:	697b      	ldr	r3, [r7, #20]
 800ec0a:	689a      	ldr	r2, [r3, #8]
 800ec0c:	697b      	ldr	r3, [r7, #20]
 800ec0e:	691b      	ldr	r3, [r3, #16]
 800ec10:	431a      	orrs	r2, r3
 800ec12:	697b      	ldr	r3, [r7, #20]
 800ec14:	695b      	ldr	r3, [r3, #20]
 800ec16:	431a      	orrs	r2, r3
 800ec18:	697b      	ldr	r3, [r7, #20]
 800ec1a:	69db      	ldr	r3, [r3, #28]
 800ec1c:	4313      	orrs	r3, r2
 800ec1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ec20:	697b      	ldr	r3, [r7, #20]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	681a      	ldr	r2, [r3, #0]
 800ec26:	4baa      	ldr	r3, [pc, #680]	; (800eed0 <UART_SetConfig+0x2d8>)
 800ec28:	4013      	ands	r3, r2
 800ec2a:	697a      	ldr	r2, [r7, #20]
 800ec2c:	6812      	ldr	r2, [r2, #0]
 800ec2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ec30:	430b      	orrs	r3, r1
 800ec32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ec34:	697b      	ldr	r3, [r7, #20]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	685b      	ldr	r3, [r3, #4]
 800ec3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ec3e:	697b      	ldr	r3, [r7, #20]
 800ec40:	68da      	ldr	r2, [r3, #12]
 800ec42:	697b      	ldr	r3, [r7, #20]
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	430a      	orrs	r2, r1
 800ec48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ec4a:	697b      	ldr	r3, [r7, #20]
 800ec4c:	699b      	ldr	r3, [r3, #24]
 800ec4e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ec50:	697b      	ldr	r3, [r7, #20]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	4a9f      	ldr	r2, [pc, #636]	; (800eed4 <UART_SetConfig+0x2dc>)
 800ec56:	4293      	cmp	r3, r2
 800ec58:	d004      	beq.n	800ec64 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ec5a:	697b      	ldr	r3, [r7, #20]
 800ec5c:	6a1b      	ldr	r3, [r3, #32]
 800ec5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec60:	4313      	orrs	r3, r2
 800ec62:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ec64:	697b      	ldr	r3, [r7, #20]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	689b      	ldr	r3, [r3, #8]
 800ec6a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800ec6e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800ec72:	697a      	ldr	r2, [r7, #20]
 800ec74:	6812      	ldr	r2, [r2, #0]
 800ec76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ec78:	430b      	orrs	r3, r1
 800ec7a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ec7c:	697b      	ldr	r3, [r7, #20]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec82:	f023 010f 	bic.w	r1, r3, #15
 800ec86:	697b      	ldr	r3, [r7, #20]
 800ec88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ec8a:	697b      	ldr	r3, [r7, #20]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	430a      	orrs	r2, r1
 800ec90:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ec92:	697b      	ldr	r3, [r7, #20]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	4a90      	ldr	r2, [pc, #576]	; (800eed8 <UART_SetConfig+0x2e0>)
 800ec98:	4293      	cmp	r3, r2
 800ec9a:	d125      	bne.n	800ece8 <UART_SetConfig+0xf0>
 800ec9c:	4b8f      	ldr	r3, [pc, #572]	; (800eedc <UART_SetConfig+0x2e4>)
 800ec9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eca2:	f003 0303 	and.w	r3, r3, #3
 800eca6:	2b03      	cmp	r3, #3
 800eca8:	d81a      	bhi.n	800ece0 <UART_SetConfig+0xe8>
 800ecaa:	a201      	add	r2, pc, #4	; (adr r2, 800ecb0 <UART_SetConfig+0xb8>)
 800ecac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecb0:	0800ecc1 	.word	0x0800ecc1
 800ecb4:	0800ecd1 	.word	0x0800ecd1
 800ecb8:	0800ecc9 	.word	0x0800ecc9
 800ecbc:	0800ecd9 	.word	0x0800ecd9
 800ecc0:	2301      	movs	r3, #1
 800ecc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ecc6:	e116      	b.n	800eef6 <UART_SetConfig+0x2fe>
 800ecc8:	2302      	movs	r3, #2
 800ecca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ecce:	e112      	b.n	800eef6 <UART_SetConfig+0x2fe>
 800ecd0:	2304      	movs	r3, #4
 800ecd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ecd6:	e10e      	b.n	800eef6 <UART_SetConfig+0x2fe>
 800ecd8:	2308      	movs	r3, #8
 800ecda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ecde:	e10a      	b.n	800eef6 <UART_SetConfig+0x2fe>
 800ece0:	2310      	movs	r3, #16
 800ece2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ece6:	e106      	b.n	800eef6 <UART_SetConfig+0x2fe>
 800ece8:	697b      	ldr	r3, [r7, #20]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	4a7c      	ldr	r2, [pc, #496]	; (800eee0 <UART_SetConfig+0x2e8>)
 800ecee:	4293      	cmp	r3, r2
 800ecf0:	d138      	bne.n	800ed64 <UART_SetConfig+0x16c>
 800ecf2:	4b7a      	ldr	r3, [pc, #488]	; (800eedc <UART_SetConfig+0x2e4>)
 800ecf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ecf8:	f003 030c 	and.w	r3, r3, #12
 800ecfc:	2b0c      	cmp	r3, #12
 800ecfe:	d82d      	bhi.n	800ed5c <UART_SetConfig+0x164>
 800ed00:	a201      	add	r2, pc, #4	; (adr r2, 800ed08 <UART_SetConfig+0x110>)
 800ed02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed06:	bf00      	nop
 800ed08:	0800ed3d 	.word	0x0800ed3d
 800ed0c:	0800ed5d 	.word	0x0800ed5d
 800ed10:	0800ed5d 	.word	0x0800ed5d
 800ed14:	0800ed5d 	.word	0x0800ed5d
 800ed18:	0800ed4d 	.word	0x0800ed4d
 800ed1c:	0800ed5d 	.word	0x0800ed5d
 800ed20:	0800ed5d 	.word	0x0800ed5d
 800ed24:	0800ed5d 	.word	0x0800ed5d
 800ed28:	0800ed45 	.word	0x0800ed45
 800ed2c:	0800ed5d 	.word	0x0800ed5d
 800ed30:	0800ed5d 	.word	0x0800ed5d
 800ed34:	0800ed5d 	.word	0x0800ed5d
 800ed38:	0800ed55 	.word	0x0800ed55
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ed42:	e0d8      	b.n	800eef6 <UART_SetConfig+0x2fe>
 800ed44:	2302      	movs	r3, #2
 800ed46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ed4a:	e0d4      	b.n	800eef6 <UART_SetConfig+0x2fe>
 800ed4c:	2304      	movs	r3, #4
 800ed4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ed52:	e0d0      	b.n	800eef6 <UART_SetConfig+0x2fe>
 800ed54:	2308      	movs	r3, #8
 800ed56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ed5a:	e0cc      	b.n	800eef6 <UART_SetConfig+0x2fe>
 800ed5c:	2310      	movs	r3, #16
 800ed5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ed62:	e0c8      	b.n	800eef6 <UART_SetConfig+0x2fe>
 800ed64:	697b      	ldr	r3, [r7, #20]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	4a5e      	ldr	r2, [pc, #376]	; (800eee4 <UART_SetConfig+0x2ec>)
 800ed6a:	4293      	cmp	r3, r2
 800ed6c:	d125      	bne.n	800edba <UART_SetConfig+0x1c2>
 800ed6e:	4b5b      	ldr	r3, [pc, #364]	; (800eedc <UART_SetConfig+0x2e4>)
 800ed70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ed74:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ed78:	2b30      	cmp	r3, #48	; 0x30
 800ed7a:	d016      	beq.n	800edaa <UART_SetConfig+0x1b2>
 800ed7c:	2b30      	cmp	r3, #48	; 0x30
 800ed7e:	d818      	bhi.n	800edb2 <UART_SetConfig+0x1ba>
 800ed80:	2b20      	cmp	r3, #32
 800ed82:	d00a      	beq.n	800ed9a <UART_SetConfig+0x1a2>
 800ed84:	2b20      	cmp	r3, #32
 800ed86:	d814      	bhi.n	800edb2 <UART_SetConfig+0x1ba>
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d002      	beq.n	800ed92 <UART_SetConfig+0x19a>
 800ed8c:	2b10      	cmp	r3, #16
 800ed8e:	d008      	beq.n	800eda2 <UART_SetConfig+0x1aa>
 800ed90:	e00f      	b.n	800edb2 <UART_SetConfig+0x1ba>
 800ed92:	2300      	movs	r3, #0
 800ed94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ed98:	e0ad      	b.n	800eef6 <UART_SetConfig+0x2fe>
 800ed9a:	2302      	movs	r3, #2
 800ed9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800eda0:	e0a9      	b.n	800eef6 <UART_SetConfig+0x2fe>
 800eda2:	2304      	movs	r3, #4
 800eda4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800eda8:	e0a5      	b.n	800eef6 <UART_SetConfig+0x2fe>
 800edaa:	2308      	movs	r3, #8
 800edac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800edb0:	e0a1      	b.n	800eef6 <UART_SetConfig+0x2fe>
 800edb2:	2310      	movs	r3, #16
 800edb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800edb8:	e09d      	b.n	800eef6 <UART_SetConfig+0x2fe>
 800edba:	697b      	ldr	r3, [r7, #20]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	4a4a      	ldr	r2, [pc, #296]	; (800eee8 <UART_SetConfig+0x2f0>)
 800edc0:	4293      	cmp	r3, r2
 800edc2:	d125      	bne.n	800ee10 <UART_SetConfig+0x218>
 800edc4:	4b45      	ldr	r3, [pc, #276]	; (800eedc <UART_SetConfig+0x2e4>)
 800edc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800edca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800edce:	2bc0      	cmp	r3, #192	; 0xc0
 800edd0:	d016      	beq.n	800ee00 <UART_SetConfig+0x208>
 800edd2:	2bc0      	cmp	r3, #192	; 0xc0
 800edd4:	d818      	bhi.n	800ee08 <UART_SetConfig+0x210>
 800edd6:	2b80      	cmp	r3, #128	; 0x80
 800edd8:	d00a      	beq.n	800edf0 <UART_SetConfig+0x1f8>
 800edda:	2b80      	cmp	r3, #128	; 0x80
 800eddc:	d814      	bhi.n	800ee08 <UART_SetConfig+0x210>
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d002      	beq.n	800ede8 <UART_SetConfig+0x1f0>
 800ede2:	2b40      	cmp	r3, #64	; 0x40
 800ede4:	d008      	beq.n	800edf8 <UART_SetConfig+0x200>
 800ede6:	e00f      	b.n	800ee08 <UART_SetConfig+0x210>
 800ede8:	2300      	movs	r3, #0
 800edea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800edee:	e082      	b.n	800eef6 <UART_SetConfig+0x2fe>
 800edf0:	2302      	movs	r3, #2
 800edf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800edf6:	e07e      	b.n	800eef6 <UART_SetConfig+0x2fe>
 800edf8:	2304      	movs	r3, #4
 800edfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800edfe:	e07a      	b.n	800eef6 <UART_SetConfig+0x2fe>
 800ee00:	2308      	movs	r3, #8
 800ee02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ee06:	e076      	b.n	800eef6 <UART_SetConfig+0x2fe>
 800ee08:	2310      	movs	r3, #16
 800ee0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ee0e:	e072      	b.n	800eef6 <UART_SetConfig+0x2fe>
 800ee10:	697b      	ldr	r3, [r7, #20]
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	4a35      	ldr	r2, [pc, #212]	; (800eeec <UART_SetConfig+0x2f4>)
 800ee16:	4293      	cmp	r3, r2
 800ee18:	d12a      	bne.n	800ee70 <UART_SetConfig+0x278>
 800ee1a:	4b30      	ldr	r3, [pc, #192]	; (800eedc <UART_SetConfig+0x2e4>)
 800ee1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ee20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ee24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ee28:	d01a      	beq.n	800ee60 <UART_SetConfig+0x268>
 800ee2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ee2e:	d81b      	bhi.n	800ee68 <UART_SetConfig+0x270>
 800ee30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ee34:	d00c      	beq.n	800ee50 <UART_SetConfig+0x258>
 800ee36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ee3a:	d815      	bhi.n	800ee68 <UART_SetConfig+0x270>
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d003      	beq.n	800ee48 <UART_SetConfig+0x250>
 800ee40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ee44:	d008      	beq.n	800ee58 <UART_SetConfig+0x260>
 800ee46:	e00f      	b.n	800ee68 <UART_SetConfig+0x270>
 800ee48:	2300      	movs	r3, #0
 800ee4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ee4e:	e052      	b.n	800eef6 <UART_SetConfig+0x2fe>
 800ee50:	2302      	movs	r3, #2
 800ee52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ee56:	e04e      	b.n	800eef6 <UART_SetConfig+0x2fe>
 800ee58:	2304      	movs	r3, #4
 800ee5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ee5e:	e04a      	b.n	800eef6 <UART_SetConfig+0x2fe>
 800ee60:	2308      	movs	r3, #8
 800ee62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ee66:	e046      	b.n	800eef6 <UART_SetConfig+0x2fe>
 800ee68:	2310      	movs	r3, #16
 800ee6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ee6e:	e042      	b.n	800eef6 <UART_SetConfig+0x2fe>
 800ee70:	697b      	ldr	r3, [r7, #20]
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	4a17      	ldr	r2, [pc, #92]	; (800eed4 <UART_SetConfig+0x2dc>)
 800ee76:	4293      	cmp	r3, r2
 800ee78:	d13a      	bne.n	800eef0 <UART_SetConfig+0x2f8>
 800ee7a:	4b18      	ldr	r3, [pc, #96]	; (800eedc <UART_SetConfig+0x2e4>)
 800ee7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ee80:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ee84:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ee88:	d01a      	beq.n	800eec0 <UART_SetConfig+0x2c8>
 800ee8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ee8e:	d81b      	bhi.n	800eec8 <UART_SetConfig+0x2d0>
 800ee90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ee94:	d00c      	beq.n	800eeb0 <UART_SetConfig+0x2b8>
 800ee96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ee9a:	d815      	bhi.n	800eec8 <UART_SetConfig+0x2d0>
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d003      	beq.n	800eea8 <UART_SetConfig+0x2b0>
 800eea0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eea4:	d008      	beq.n	800eeb8 <UART_SetConfig+0x2c0>
 800eea6:	e00f      	b.n	800eec8 <UART_SetConfig+0x2d0>
 800eea8:	2300      	movs	r3, #0
 800eeaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800eeae:	e022      	b.n	800eef6 <UART_SetConfig+0x2fe>
 800eeb0:	2302      	movs	r3, #2
 800eeb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800eeb6:	e01e      	b.n	800eef6 <UART_SetConfig+0x2fe>
 800eeb8:	2304      	movs	r3, #4
 800eeba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800eebe:	e01a      	b.n	800eef6 <UART_SetConfig+0x2fe>
 800eec0:	2308      	movs	r3, #8
 800eec2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800eec6:	e016      	b.n	800eef6 <UART_SetConfig+0x2fe>
 800eec8:	2310      	movs	r3, #16
 800eeca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800eece:	e012      	b.n	800eef6 <UART_SetConfig+0x2fe>
 800eed0:	cfff69f3 	.word	0xcfff69f3
 800eed4:	40008000 	.word	0x40008000
 800eed8:	40013800 	.word	0x40013800
 800eedc:	40021000 	.word	0x40021000
 800eee0:	40004400 	.word	0x40004400
 800eee4:	40004800 	.word	0x40004800
 800eee8:	40004c00 	.word	0x40004c00
 800eeec:	40005000 	.word	0x40005000
 800eef0:	2310      	movs	r3, #16
 800eef2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800eef6:	697b      	ldr	r3, [r7, #20]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	4aae      	ldr	r2, [pc, #696]	; (800f1b4 <UART_SetConfig+0x5bc>)
 800eefc:	4293      	cmp	r3, r2
 800eefe:	f040 8097 	bne.w	800f030 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ef02:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ef06:	2b08      	cmp	r3, #8
 800ef08:	d823      	bhi.n	800ef52 <UART_SetConfig+0x35a>
 800ef0a:	a201      	add	r2, pc, #4	; (adr r2, 800ef10 <UART_SetConfig+0x318>)
 800ef0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef10:	0800ef35 	.word	0x0800ef35
 800ef14:	0800ef53 	.word	0x0800ef53
 800ef18:	0800ef3d 	.word	0x0800ef3d
 800ef1c:	0800ef53 	.word	0x0800ef53
 800ef20:	0800ef43 	.word	0x0800ef43
 800ef24:	0800ef53 	.word	0x0800ef53
 800ef28:	0800ef53 	.word	0x0800ef53
 800ef2c:	0800ef53 	.word	0x0800ef53
 800ef30:	0800ef4b 	.word	0x0800ef4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ef34:	f7fb fe2a 	bl	800ab8c <HAL_RCC_GetPCLK1Freq>
 800ef38:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ef3a:	e010      	b.n	800ef5e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ef3c:	4b9e      	ldr	r3, [pc, #632]	; (800f1b8 <UART_SetConfig+0x5c0>)
 800ef3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ef40:	e00d      	b.n	800ef5e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ef42:	f7fb fd8b 	bl	800aa5c <HAL_RCC_GetSysClockFreq>
 800ef46:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ef48:	e009      	b.n	800ef5e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ef4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ef4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ef50:	e005      	b.n	800ef5e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800ef52:	2300      	movs	r3, #0
 800ef54:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800ef56:	2301      	movs	r3, #1
 800ef58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ef5c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ef5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	f000 8130 	beq.w	800f1c6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ef66:	697b      	ldr	r3, [r7, #20]
 800ef68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef6a:	4a94      	ldr	r2, [pc, #592]	; (800f1bc <UART_SetConfig+0x5c4>)
 800ef6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ef70:	461a      	mov	r2, r3
 800ef72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef74:	fbb3 f3f2 	udiv	r3, r3, r2
 800ef78:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ef7a:	697b      	ldr	r3, [r7, #20]
 800ef7c:	685a      	ldr	r2, [r3, #4]
 800ef7e:	4613      	mov	r3, r2
 800ef80:	005b      	lsls	r3, r3, #1
 800ef82:	4413      	add	r3, r2
 800ef84:	69ba      	ldr	r2, [r7, #24]
 800ef86:	429a      	cmp	r2, r3
 800ef88:	d305      	bcc.n	800ef96 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ef8a:	697b      	ldr	r3, [r7, #20]
 800ef8c:	685b      	ldr	r3, [r3, #4]
 800ef8e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ef90:	69ba      	ldr	r2, [r7, #24]
 800ef92:	429a      	cmp	r2, r3
 800ef94:	d903      	bls.n	800ef9e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800ef96:	2301      	movs	r3, #1
 800ef98:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ef9c:	e113      	b.n	800f1c6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ef9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efa0:	2200      	movs	r2, #0
 800efa2:	60bb      	str	r3, [r7, #8]
 800efa4:	60fa      	str	r2, [r7, #12]
 800efa6:	697b      	ldr	r3, [r7, #20]
 800efa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efaa:	4a84      	ldr	r2, [pc, #528]	; (800f1bc <UART_SetConfig+0x5c4>)
 800efac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800efb0:	b29b      	uxth	r3, r3
 800efb2:	2200      	movs	r2, #0
 800efb4:	603b      	str	r3, [r7, #0]
 800efb6:	607a      	str	r2, [r7, #4]
 800efb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800efbc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800efc0:	f7f1 feca 	bl	8000d58 <__aeabi_uldivmod>
 800efc4:	4602      	mov	r2, r0
 800efc6:	460b      	mov	r3, r1
 800efc8:	4610      	mov	r0, r2
 800efca:	4619      	mov	r1, r3
 800efcc:	f04f 0200 	mov.w	r2, #0
 800efd0:	f04f 0300 	mov.w	r3, #0
 800efd4:	020b      	lsls	r3, r1, #8
 800efd6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800efda:	0202      	lsls	r2, r0, #8
 800efdc:	6979      	ldr	r1, [r7, #20]
 800efde:	6849      	ldr	r1, [r1, #4]
 800efe0:	0849      	lsrs	r1, r1, #1
 800efe2:	2000      	movs	r0, #0
 800efe4:	460c      	mov	r4, r1
 800efe6:	4605      	mov	r5, r0
 800efe8:	eb12 0804 	adds.w	r8, r2, r4
 800efec:	eb43 0905 	adc.w	r9, r3, r5
 800eff0:	697b      	ldr	r3, [r7, #20]
 800eff2:	685b      	ldr	r3, [r3, #4]
 800eff4:	2200      	movs	r2, #0
 800eff6:	469a      	mov	sl, r3
 800eff8:	4693      	mov	fp, r2
 800effa:	4652      	mov	r2, sl
 800effc:	465b      	mov	r3, fp
 800effe:	4640      	mov	r0, r8
 800f000:	4649      	mov	r1, r9
 800f002:	f7f1 fea9 	bl	8000d58 <__aeabi_uldivmod>
 800f006:	4602      	mov	r2, r0
 800f008:	460b      	mov	r3, r1
 800f00a:	4613      	mov	r3, r2
 800f00c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f00e:	6a3b      	ldr	r3, [r7, #32]
 800f010:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f014:	d308      	bcc.n	800f028 <UART_SetConfig+0x430>
 800f016:	6a3b      	ldr	r3, [r7, #32]
 800f018:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f01c:	d204      	bcs.n	800f028 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800f01e:	697b      	ldr	r3, [r7, #20]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	6a3a      	ldr	r2, [r7, #32]
 800f024:	60da      	str	r2, [r3, #12]
 800f026:	e0ce      	b.n	800f1c6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800f028:	2301      	movs	r3, #1
 800f02a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800f02e:	e0ca      	b.n	800f1c6 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f030:	697b      	ldr	r3, [r7, #20]
 800f032:	69db      	ldr	r3, [r3, #28]
 800f034:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f038:	d166      	bne.n	800f108 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800f03a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f03e:	2b08      	cmp	r3, #8
 800f040:	d827      	bhi.n	800f092 <UART_SetConfig+0x49a>
 800f042:	a201      	add	r2, pc, #4	; (adr r2, 800f048 <UART_SetConfig+0x450>)
 800f044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f048:	0800f06d 	.word	0x0800f06d
 800f04c:	0800f075 	.word	0x0800f075
 800f050:	0800f07d 	.word	0x0800f07d
 800f054:	0800f093 	.word	0x0800f093
 800f058:	0800f083 	.word	0x0800f083
 800f05c:	0800f093 	.word	0x0800f093
 800f060:	0800f093 	.word	0x0800f093
 800f064:	0800f093 	.word	0x0800f093
 800f068:	0800f08b 	.word	0x0800f08b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f06c:	f7fb fd8e 	bl	800ab8c <HAL_RCC_GetPCLK1Freq>
 800f070:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f072:	e014      	b.n	800f09e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f074:	f7fb fda0 	bl	800abb8 <HAL_RCC_GetPCLK2Freq>
 800f078:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f07a:	e010      	b.n	800f09e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f07c:	4b4e      	ldr	r3, [pc, #312]	; (800f1b8 <UART_SetConfig+0x5c0>)
 800f07e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f080:	e00d      	b.n	800f09e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f082:	f7fb fceb 	bl	800aa5c <HAL_RCC_GetSysClockFreq>
 800f086:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f088:	e009      	b.n	800f09e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f08a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f08e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f090:	e005      	b.n	800f09e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800f092:	2300      	movs	r3, #0
 800f094:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800f096:	2301      	movs	r3, #1
 800f098:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800f09c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	f000 8090 	beq.w	800f1c6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f0a6:	697b      	ldr	r3, [r7, #20]
 800f0a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0aa:	4a44      	ldr	r2, [pc, #272]	; (800f1bc <UART_SetConfig+0x5c4>)
 800f0ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f0b0:	461a      	mov	r2, r3
 800f0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0b4:	fbb3 f3f2 	udiv	r3, r3, r2
 800f0b8:	005a      	lsls	r2, r3, #1
 800f0ba:	697b      	ldr	r3, [r7, #20]
 800f0bc:	685b      	ldr	r3, [r3, #4]
 800f0be:	085b      	lsrs	r3, r3, #1
 800f0c0:	441a      	add	r2, r3
 800f0c2:	697b      	ldr	r3, [r7, #20]
 800f0c4:	685b      	ldr	r3, [r3, #4]
 800f0c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800f0ca:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f0cc:	6a3b      	ldr	r3, [r7, #32]
 800f0ce:	2b0f      	cmp	r3, #15
 800f0d0:	d916      	bls.n	800f100 <UART_SetConfig+0x508>
 800f0d2:	6a3b      	ldr	r3, [r7, #32]
 800f0d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f0d8:	d212      	bcs.n	800f100 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f0da:	6a3b      	ldr	r3, [r7, #32]
 800f0dc:	b29b      	uxth	r3, r3
 800f0de:	f023 030f 	bic.w	r3, r3, #15
 800f0e2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f0e4:	6a3b      	ldr	r3, [r7, #32]
 800f0e6:	085b      	lsrs	r3, r3, #1
 800f0e8:	b29b      	uxth	r3, r3
 800f0ea:	f003 0307 	and.w	r3, r3, #7
 800f0ee:	b29a      	uxth	r2, r3
 800f0f0:	8bfb      	ldrh	r3, [r7, #30]
 800f0f2:	4313      	orrs	r3, r2
 800f0f4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800f0f6:	697b      	ldr	r3, [r7, #20]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	8bfa      	ldrh	r2, [r7, #30]
 800f0fc:	60da      	str	r2, [r3, #12]
 800f0fe:	e062      	b.n	800f1c6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800f100:	2301      	movs	r3, #1
 800f102:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800f106:	e05e      	b.n	800f1c6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f108:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f10c:	2b08      	cmp	r3, #8
 800f10e:	d828      	bhi.n	800f162 <UART_SetConfig+0x56a>
 800f110:	a201      	add	r2, pc, #4	; (adr r2, 800f118 <UART_SetConfig+0x520>)
 800f112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f116:	bf00      	nop
 800f118:	0800f13d 	.word	0x0800f13d
 800f11c:	0800f145 	.word	0x0800f145
 800f120:	0800f14d 	.word	0x0800f14d
 800f124:	0800f163 	.word	0x0800f163
 800f128:	0800f153 	.word	0x0800f153
 800f12c:	0800f163 	.word	0x0800f163
 800f130:	0800f163 	.word	0x0800f163
 800f134:	0800f163 	.word	0x0800f163
 800f138:	0800f15b 	.word	0x0800f15b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f13c:	f7fb fd26 	bl	800ab8c <HAL_RCC_GetPCLK1Freq>
 800f140:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f142:	e014      	b.n	800f16e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f144:	f7fb fd38 	bl	800abb8 <HAL_RCC_GetPCLK2Freq>
 800f148:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f14a:	e010      	b.n	800f16e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f14c:	4b1a      	ldr	r3, [pc, #104]	; (800f1b8 <UART_SetConfig+0x5c0>)
 800f14e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f150:	e00d      	b.n	800f16e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f152:	f7fb fc83 	bl	800aa5c <HAL_RCC_GetSysClockFreq>
 800f156:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f158:	e009      	b.n	800f16e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f15a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f15e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f160:	e005      	b.n	800f16e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800f162:	2300      	movs	r3, #0
 800f164:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800f166:	2301      	movs	r3, #1
 800f168:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800f16c:	bf00      	nop
    }

    if (pclk != 0U)
 800f16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f170:	2b00      	cmp	r3, #0
 800f172:	d028      	beq.n	800f1c6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f174:	697b      	ldr	r3, [r7, #20]
 800f176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f178:	4a10      	ldr	r2, [pc, #64]	; (800f1bc <UART_SetConfig+0x5c4>)
 800f17a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f17e:	461a      	mov	r2, r3
 800f180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f182:	fbb3 f2f2 	udiv	r2, r3, r2
 800f186:	697b      	ldr	r3, [r7, #20]
 800f188:	685b      	ldr	r3, [r3, #4]
 800f18a:	085b      	lsrs	r3, r3, #1
 800f18c:	441a      	add	r2, r3
 800f18e:	697b      	ldr	r3, [r7, #20]
 800f190:	685b      	ldr	r3, [r3, #4]
 800f192:	fbb2 f3f3 	udiv	r3, r2, r3
 800f196:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f198:	6a3b      	ldr	r3, [r7, #32]
 800f19a:	2b0f      	cmp	r3, #15
 800f19c:	d910      	bls.n	800f1c0 <UART_SetConfig+0x5c8>
 800f19e:	6a3b      	ldr	r3, [r7, #32]
 800f1a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f1a4:	d20c      	bcs.n	800f1c0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f1a6:	6a3b      	ldr	r3, [r7, #32]
 800f1a8:	b29a      	uxth	r2, r3
 800f1aa:	697b      	ldr	r3, [r7, #20]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	60da      	str	r2, [r3, #12]
 800f1b0:	e009      	b.n	800f1c6 <UART_SetConfig+0x5ce>
 800f1b2:	bf00      	nop
 800f1b4:	40008000 	.word	0x40008000
 800f1b8:	00f42400 	.word	0x00f42400
 800f1bc:	0801a158 	.word	0x0801a158
      }
      else
      {
        ret = HAL_ERROR;
 800f1c0:	2301      	movs	r3, #1
 800f1c2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f1c6:	697b      	ldr	r3, [r7, #20]
 800f1c8:	2201      	movs	r2, #1
 800f1ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f1ce:	697b      	ldr	r3, [r7, #20]
 800f1d0:	2201      	movs	r2, #1
 800f1d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f1d6:	697b      	ldr	r3, [r7, #20]
 800f1d8:	2200      	movs	r2, #0
 800f1da:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800f1dc:	697b      	ldr	r3, [r7, #20]
 800f1de:	2200      	movs	r2, #0
 800f1e0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800f1e2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	3730      	adds	r7, #48	; 0x30
 800f1ea:	46bd      	mov	sp, r7
 800f1ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800f1f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f1f0:	b480      	push	{r7}
 800f1f2:	b083      	sub	sp, #12
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1fc:	f003 0301 	and.w	r3, r3, #1
 800f200:	2b00      	cmp	r3, #0
 800f202:	d00a      	beq.n	800f21a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	685b      	ldr	r3, [r3, #4]
 800f20a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	430a      	orrs	r2, r1
 800f218:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f21e:	f003 0302 	and.w	r3, r3, #2
 800f222:	2b00      	cmp	r3, #0
 800f224:	d00a      	beq.n	800f23c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	685b      	ldr	r3, [r3, #4]
 800f22c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	430a      	orrs	r2, r1
 800f23a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f240:	f003 0304 	and.w	r3, r3, #4
 800f244:	2b00      	cmp	r3, #0
 800f246:	d00a      	beq.n	800f25e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	685b      	ldr	r3, [r3, #4]
 800f24e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	430a      	orrs	r2, r1
 800f25c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f262:	f003 0308 	and.w	r3, r3, #8
 800f266:	2b00      	cmp	r3, #0
 800f268:	d00a      	beq.n	800f280 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	685b      	ldr	r3, [r3, #4]
 800f270:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	430a      	orrs	r2, r1
 800f27e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f284:	f003 0310 	and.w	r3, r3, #16
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d00a      	beq.n	800f2a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	689b      	ldr	r3, [r3, #8]
 800f292:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	430a      	orrs	r2, r1
 800f2a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2a6:	f003 0320 	and.w	r3, r3, #32
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d00a      	beq.n	800f2c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	689b      	ldr	r3, [r3, #8]
 800f2b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	430a      	orrs	r2, r1
 800f2c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d01a      	beq.n	800f306 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	685b      	ldr	r3, [r3, #4]
 800f2d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	430a      	orrs	r2, r1
 800f2e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f2ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f2ee:	d10a      	bne.n	800f306 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	685b      	ldr	r3, [r3, #4]
 800f2f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	430a      	orrs	r2, r1
 800f304:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f30a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d00a      	beq.n	800f328 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	685b      	ldr	r3, [r3, #4]
 800f318:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	430a      	orrs	r2, r1
 800f326:	605a      	str	r2, [r3, #4]
  }
}
 800f328:	bf00      	nop
 800f32a:	370c      	adds	r7, #12
 800f32c:	46bd      	mov	sp, r7
 800f32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f332:	4770      	bx	lr

0800f334 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f334:	b580      	push	{r7, lr}
 800f336:	b086      	sub	sp, #24
 800f338:	af02      	add	r7, sp, #8
 800f33a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	2200      	movs	r2, #0
 800f340:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f344:	f7f9 fe68 	bl	8009018 <HAL_GetTick>
 800f348:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	f003 0308 	and.w	r3, r3, #8
 800f354:	2b08      	cmp	r3, #8
 800f356:	d10e      	bne.n	800f376 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f358:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f35c:	9300      	str	r3, [sp, #0]
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	2200      	movs	r2, #0
 800f362:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f366:	6878      	ldr	r0, [r7, #4]
 800f368:	f000 f82f 	bl	800f3ca <UART_WaitOnFlagUntilTimeout>
 800f36c:	4603      	mov	r3, r0
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d001      	beq.n	800f376 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f372:	2303      	movs	r3, #3
 800f374:	e025      	b.n	800f3c2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	f003 0304 	and.w	r3, r3, #4
 800f380:	2b04      	cmp	r3, #4
 800f382:	d10e      	bne.n	800f3a2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f384:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f388:	9300      	str	r3, [sp, #0]
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	2200      	movs	r2, #0
 800f38e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f392:	6878      	ldr	r0, [r7, #4]
 800f394:	f000 f819 	bl	800f3ca <UART_WaitOnFlagUntilTimeout>
 800f398:	4603      	mov	r3, r0
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d001      	beq.n	800f3a2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f39e:	2303      	movs	r3, #3
 800f3a0:	e00f      	b.n	800f3c2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	2220      	movs	r2, #32
 800f3a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	2220      	movs	r2, #32
 800f3ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	2200      	movs	r2, #0
 800f3b6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	2200      	movs	r2, #0
 800f3bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f3c0:	2300      	movs	r3, #0
}
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	3710      	adds	r7, #16
 800f3c6:	46bd      	mov	sp, r7
 800f3c8:	bd80      	pop	{r7, pc}

0800f3ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f3ca:	b580      	push	{r7, lr}
 800f3cc:	b09c      	sub	sp, #112	; 0x70
 800f3ce:	af00      	add	r7, sp, #0
 800f3d0:	60f8      	str	r0, [r7, #12]
 800f3d2:	60b9      	str	r1, [r7, #8]
 800f3d4:	603b      	str	r3, [r7, #0]
 800f3d6:	4613      	mov	r3, r2
 800f3d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f3da:	e0a9      	b.n	800f530 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f3dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f3de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3e2:	f000 80a5 	beq.w	800f530 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f3e6:	f7f9 fe17 	bl	8009018 <HAL_GetTick>
 800f3ea:	4602      	mov	r2, r0
 800f3ec:	683b      	ldr	r3, [r7, #0]
 800f3ee:	1ad3      	subs	r3, r2, r3
 800f3f0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f3f2:	429a      	cmp	r2, r3
 800f3f4:	d302      	bcc.n	800f3fc <UART_WaitOnFlagUntilTimeout+0x32>
 800f3f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d140      	bne.n	800f47e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f402:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f404:	e853 3f00 	ldrex	r3, [r3]
 800f408:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f40a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f40c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f410:	667b      	str	r3, [r7, #100]	; 0x64
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	461a      	mov	r2, r3
 800f418:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f41a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f41c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f41e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f420:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f422:	e841 2300 	strex	r3, r2, [r1]
 800f426:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f428:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d1e6      	bne.n	800f3fc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	3308      	adds	r3, #8
 800f434:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f438:	e853 3f00 	ldrex	r3, [r3]
 800f43c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f43e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f440:	f023 0301 	bic.w	r3, r3, #1
 800f444:	663b      	str	r3, [r7, #96]	; 0x60
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	3308      	adds	r3, #8
 800f44c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f44e:	64ba      	str	r2, [r7, #72]	; 0x48
 800f450:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f452:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f454:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f456:	e841 2300 	strex	r3, r2, [r1]
 800f45a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f45c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d1e5      	bne.n	800f42e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	2220      	movs	r2, #32
 800f466:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	2220      	movs	r2, #32
 800f46e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	2200      	movs	r2, #0
 800f476:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800f47a:	2303      	movs	r3, #3
 800f47c:	e069      	b.n	800f552 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	f003 0304 	and.w	r3, r3, #4
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d051      	beq.n	800f530 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	69db      	ldr	r3, [r3, #28]
 800f492:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f496:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f49a:	d149      	bne.n	800f530 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f4a4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4ae:	e853 3f00 	ldrex	r3, [r3]
 800f4b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f4ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	461a      	mov	r2, r3
 800f4c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f4c4:	637b      	str	r3, [r7, #52]	; 0x34
 800f4c6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f4ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f4cc:	e841 2300 	strex	r3, r2, [r1]
 800f4d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f4d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d1e6      	bne.n	800f4a6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	3308      	adds	r3, #8
 800f4de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4e0:	697b      	ldr	r3, [r7, #20]
 800f4e2:	e853 3f00 	ldrex	r3, [r3]
 800f4e6:	613b      	str	r3, [r7, #16]
   return(result);
 800f4e8:	693b      	ldr	r3, [r7, #16]
 800f4ea:	f023 0301 	bic.w	r3, r3, #1
 800f4ee:	66bb      	str	r3, [r7, #104]	; 0x68
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	3308      	adds	r3, #8
 800f4f6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f4f8:	623a      	str	r2, [r7, #32]
 800f4fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4fc:	69f9      	ldr	r1, [r7, #28]
 800f4fe:	6a3a      	ldr	r2, [r7, #32]
 800f500:	e841 2300 	strex	r3, r2, [r1]
 800f504:	61bb      	str	r3, [r7, #24]
   return(result);
 800f506:	69bb      	ldr	r3, [r7, #24]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d1e5      	bne.n	800f4d8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	2220      	movs	r2, #32
 800f510:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	2220      	movs	r2, #32
 800f518:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	2220      	movs	r2, #32
 800f520:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	2200      	movs	r2, #0
 800f528:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800f52c:	2303      	movs	r3, #3
 800f52e:	e010      	b.n	800f552 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	69da      	ldr	r2, [r3, #28]
 800f536:	68bb      	ldr	r3, [r7, #8]
 800f538:	4013      	ands	r3, r2
 800f53a:	68ba      	ldr	r2, [r7, #8]
 800f53c:	429a      	cmp	r2, r3
 800f53e:	bf0c      	ite	eq
 800f540:	2301      	moveq	r3, #1
 800f542:	2300      	movne	r3, #0
 800f544:	b2db      	uxtb	r3, r3
 800f546:	461a      	mov	r2, r3
 800f548:	79fb      	ldrb	r3, [r7, #7]
 800f54a:	429a      	cmp	r2, r3
 800f54c:	f43f af46 	beq.w	800f3dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f550:	2300      	movs	r3, #0
}
 800f552:	4618      	mov	r0, r3
 800f554:	3770      	adds	r7, #112	; 0x70
 800f556:	46bd      	mov	sp, r7
 800f558:	bd80      	pop	{r7, pc}
	...

0800f55c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f55c:	b580      	push	{r7, lr}
 800f55e:	b096      	sub	sp, #88	; 0x58
 800f560:	af00      	add	r7, sp, #0
 800f562:	60f8      	str	r0, [r7, #12]
 800f564:	60b9      	str	r1, [r7, #8]
 800f566:	4613      	mov	r3, r2
 800f568:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	68ba      	ldr	r2, [r7, #8]
 800f56e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	88fa      	ldrh	r2, [r7, #6]
 800f574:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	2200      	movs	r2, #0
 800f57c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	2222      	movs	r2, #34	; 0x22
 800f584:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d02c      	beq.n	800f5ea <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f594:	4a42      	ldr	r2, [pc, #264]	; (800f6a0 <UART_Start_Receive_DMA+0x144>)
 800f596:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f59c:	4a41      	ldr	r2, [pc, #260]	; (800f6a4 <UART_Start_Receive_DMA+0x148>)
 800f59e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f5a4:	4a40      	ldr	r2, [pc, #256]	; (800f6a8 <UART_Start_Receive_DMA+0x14c>)
 800f5a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f5ac:	2200      	movs	r2, #0
 800f5ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	3324      	adds	r3, #36	; 0x24
 800f5ba:	4619      	mov	r1, r3
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f5c0:	461a      	mov	r2, r3
 800f5c2:	88fb      	ldrh	r3, [r7, #6]
 800f5c4:	f7f9 fefe 	bl	80093c4 <HAL_DMA_Start_IT>
 800f5c8:	4603      	mov	r3, r0
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d00d      	beq.n	800f5ea <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	2210      	movs	r2, #16
 800f5d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	2200      	movs	r2, #0
 800f5da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	2220      	movs	r2, #32
 800f5e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800f5e6:	2301      	movs	r3, #1
 800f5e8:	e055      	b.n	800f696 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	2200      	movs	r2, #0
 800f5ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	691b      	ldr	r3, [r3, #16]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d018      	beq.n	800f62c <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f602:	e853 3f00 	ldrex	r3, [r3]
 800f606:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f60a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f60e:	657b      	str	r3, [r7, #84]	; 0x54
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	461a      	mov	r2, r3
 800f616:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f618:	64bb      	str	r3, [r7, #72]	; 0x48
 800f61a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f61c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f61e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f620:	e841 2300 	strex	r3, r2, [r1]
 800f624:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f626:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d1e6      	bne.n	800f5fa <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	3308      	adds	r3, #8
 800f632:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f636:	e853 3f00 	ldrex	r3, [r3]
 800f63a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f63c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f63e:	f043 0301 	orr.w	r3, r3, #1
 800f642:	653b      	str	r3, [r7, #80]	; 0x50
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	3308      	adds	r3, #8
 800f64a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f64c:	637a      	str	r2, [r7, #52]	; 0x34
 800f64e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f650:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f652:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f654:	e841 2300 	strex	r3, r2, [r1]
 800f658:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f65a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d1e5      	bne.n	800f62c <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	3308      	adds	r3, #8
 800f666:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f668:	697b      	ldr	r3, [r7, #20]
 800f66a:	e853 3f00 	ldrex	r3, [r3]
 800f66e:	613b      	str	r3, [r7, #16]
   return(result);
 800f670:	693b      	ldr	r3, [r7, #16]
 800f672:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f676:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	3308      	adds	r3, #8
 800f67e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f680:	623a      	str	r2, [r7, #32]
 800f682:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f684:	69f9      	ldr	r1, [r7, #28]
 800f686:	6a3a      	ldr	r2, [r7, #32]
 800f688:	e841 2300 	strex	r3, r2, [r1]
 800f68c:	61bb      	str	r3, [r7, #24]
   return(result);
 800f68e:	69bb      	ldr	r3, [r7, #24]
 800f690:	2b00      	cmp	r3, #0
 800f692:	d1e5      	bne.n	800f660 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800f694:	2300      	movs	r3, #0
}
 800f696:	4618      	mov	r0, r3
 800f698:	3758      	adds	r7, #88	; 0x58
 800f69a:	46bd      	mov	sp, r7
 800f69c:	bd80      	pop	{r7, pc}
 800f69e:	bf00      	nop
 800f6a0:	0800f7fb 	.word	0x0800f7fb
 800f6a4:	0800f921 	.word	0x0800f921
 800f6a8:	0800f959 	.word	0x0800f959

0800f6ac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f6ac:	b480      	push	{r7}
 800f6ae:	b08f      	sub	sp, #60	; 0x3c
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
#if defined(USART_CR1_FIFOEN)
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6ba:	6a3b      	ldr	r3, [r7, #32]
 800f6bc:	e853 3f00 	ldrex	r3, [r3]
 800f6c0:	61fb      	str	r3, [r7, #28]
   return(result);
 800f6c2:	69fb      	ldr	r3, [r7, #28]
 800f6c4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800f6c8:	637b      	str	r3, [r7, #52]	; 0x34
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	461a      	mov	r2, r3
 800f6d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f6d4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f6d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f6da:	e841 2300 	strex	r3, r2, [r1]
 800f6de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d1e6      	bne.n	800f6b4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	3308      	adds	r3, #8
 800f6ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	e853 3f00 	ldrex	r3, [r3]
 800f6f4:	60bb      	str	r3, [r7, #8]
   return(result);
 800f6f6:	68bb      	ldr	r3, [r7, #8]
 800f6f8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800f6fc:	633b      	str	r3, [r7, #48]	; 0x30
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	3308      	adds	r3, #8
 800f704:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f706:	61ba      	str	r2, [r7, #24]
 800f708:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f70a:	6979      	ldr	r1, [r7, #20]
 800f70c:	69ba      	ldr	r2, [r7, #24]
 800f70e:	e841 2300 	strex	r3, r2, [r1]
 800f712:	613b      	str	r3, [r7, #16]
   return(result);
 800f714:	693b      	ldr	r3, [r7, #16]
 800f716:	2b00      	cmp	r3, #0
 800f718:	d1e5      	bne.n	800f6e6 <UART_EndTxTransfer+0x3a>
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	2220      	movs	r2, #32
 800f71e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800f722:	bf00      	nop
 800f724:	373c      	adds	r7, #60	; 0x3c
 800f726:	46bd      	mov	sp, r7
 800f728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f72c:	4770      	bx	lr

0800f72e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f72e:	b480      	push	{r7}
 800f730:	b095      	sub	sp, #84	; 0x54
 800f732:	af00      	add	r7, sp, #0
 800f734:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f73c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f73e:	e853 3f00 	ldrex	r3, [r3]
 800f742:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f746:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f74a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	461a      	mov	r2, r3
 800f752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f754:	643b      	str	r3, [r7, #64]	; 0x40
 800f756:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f758:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f75a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f75c:	e841 2300 	strex	r3, r2, [r1]
 800f760:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f764:	2b00      	cmp	r3, #0
 800f766:	d1e6      	bne.n	800f736 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	3308      	adds	r3, #8
 800f76e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f770:	6a3b      	ldr	r3, [r7, #32]
 800f772:	e853 3f00 	ldrex	r3, [r3]
 800f776:	61fb      	str	r3, [r7, #28]
   return(result);
 800f778:	69fb      	ldr	r3, [r7, #28]
 800f77a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f77e:	f023 0301 	bic.w	r3, r3, #1
 800f782:	64bb      	str	r3, [r7, #72]	; 0x48
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	3308      	adds	r3, #8
 800f78a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f78c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f78e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f790:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f792:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f794:	e841 2300 	strex	r3, r2, [r1]
 800f798:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d1e3      	bne.n	800f768 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f7a4:	2b01      	cmp	r3, #1
 800f7a6:	d118      	bne.n	800f7da <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	e853 3f00 	ldrex	r3, [r3]
 800f7b4:	60bb      	str	r3, [r7, #8]
   return(result);
 800f7b6:	68bb      	ldr	r3, [r7, #8]
 800f7b8:	f023 0310 	bic.w	r3, r3, #16
 800f7bc:	647b      	str	r3, [r7, #68]	; 0x44
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	461a      	mov	r2, r3
 800f7c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f7c6:	61bb      	str	r3, [r7, #24]
 800f7c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7ca:	6979      	ldr	r1, [r7, #20]
 800f7cc:	69ba      	ldr	r2, [r7, #24]
 800f7ce:	e841 2300 	strex	r3, r2, [r1]
 800f7d2:	613b      	str	r3, [r7, #16]
   return(result);
 800f7d4:	693b      	ldr	r3, [r7, #16]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d1e6      	bne.n	800f7a8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	2220      	movs	r2, #32
 800f7de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	2200      	movs	r2, #0
 800f7e6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	2200      	movs	r2, #0
 800f7ec:	671a      	str	r2, [r3, #112]	; 0x70
}
 800f7ee:	bf00      	nop
 800f7f0:	3754      	adds	r7, #84	; 0x54
 800f7f2:	46bd      	mov	sp, r7
 800f7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f8:	4770      	bx	lr

0800f7fa <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f7fa:	b580      	push	{r7, lr}
 800f7fc:	b09c      	sub	sp, #112	; 0x70
 800f7fe:	af00      	add	r7, sp, #0
 800f800:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f806:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	f003 0320 	and.w	r3, r3, #32
 800f812:	2b00      	cmp	r3, #0
 800f814:	d171      	bne.n	800f8fa <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800f816:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f818:	2200      	movs	r2, #0
 800f81a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f81e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f824:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f826:	e853 3f00 	ldrex	r3, [r3]
 800f82a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f82c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f82e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f832:	66bb      	str	r3, [r7, #104]	; 0x68
 800f834:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	461a      	mov	r2, r3
 800f83a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f83c:	65bb      	str	r3, [r7, #88]	; 0x58
 800f83e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f840:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f842:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f844:	e841 2300 	strex	r3, r2, [r1]
 800f848:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f84a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d1e6      	bne.n	800f81e <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f850:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	3308      	adds	r3, #8
 800f856:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f85a:	e853 3f00 	ldrex	r3, [r3]
 800f85e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f862:	f023 0301 	bic.w	r3, r3, #1
 800f866:	667b      	str	r3, [r7, #100]	; 0x64
 800f868:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	3308      	adds	r3, #8
 800f86e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f870:	647a      	str	r2, [r7, #68]	; 0x44
 800f872:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f874:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f876:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f878:	e841 2300 	strex	r3, r2, [r1]
 800f87c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f87e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f880:	2b00      	cmp	r3, #0
 800f882:	d1e5      	bne.n	800f850 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f884:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	3308      	adds	r3, #8
 800f88a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f88e:	e853 3f00 	ldrex	r3, [r3]
 800f892:	623b      	str	r3, [r7, #32]
   return(result);
 800f894:	6a3b      	ldr	r3, [r7, #32]
 800f896:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f89a:	663b      	str	r3, [r7, #96]	; 0x60
 800f89c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	3308      	adds	r3, #8
 800f8a2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f8a4:	633a      	str	r2, [r7, #48]	; 0x30
 800f8a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f8aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f8ac:	e841 2300 	strex	r3, r2, [r1]
 800f8b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f8b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d1e5      	bne.n	800f884 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f8b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f8ba:	2220      	movs	r2, #32
 800f8bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f8c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f8c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f8c4:	2b01      	cmp	r3, #1
 800f8c6:	d118      	bne.n	800f8fa <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f8c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8ce:	693b      	ldr	r3, [r7, #16]
 800f8d0:	e853 3f00 	ldrex	r3, [r3]
 800f8d4:	60fb      	str	r3, [r7, #12]
   return(result);
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	f023 0310 	bic.w	r3, r3, #16
 800f8dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f8de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	461a      	mov	r2, r3
 800f8e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f8e6:	61fb      	str	r3, [r7, #28]
 800f8e8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8ea:	69b9      	ldr	r1, [r7, #24]
 800f8ec:	69fa      	ldr	r2, [r7, #28]
 800f8ee:	e841 2300 	strex	r3, r2, [r1]
 800f8f2:	617b      	str	r3, [r7, #20]
   return(result);
 800f8f4:	697b      	ldr	r3, [r7, #20]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d1e6      	bne.n	800f8c8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f8fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f8fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f8fe:	2b01      	cmp	r3, #1
 800f900:	d107      	bne.n	800f912 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f902:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f904:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f908:	4619      	mov	r1, r3
 800f90a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f90c:	f7f6 fb8e 	bl	800602c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f910:	e002      	b.n	800f918 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800f912:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f914:	f7ff f952 	bl	800ebbc <HAL_UART_RxCpltCallback>
}
 800f918:	bf00      	nop
 800f91a:	3770      	adds	r7, #112	; 0x70
 800f91c:	46bd      	mov	sp, r7
 800f91e:	bd80      	pop	{r7, pc}

0800f920 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f920:	b580      	push	{r7, lr}
 800f922:	b084      	sub	sp, #16
 800f924:	af00      	add	r7, sp, #0
 800f926:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f92c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f932:	2b01      	cmp	r3, #1
 800f934:	d109      	bne.n	800f94a <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f93c:	085b      	lsrs	r3, r3, #1
 800f93e:	b29b      	uxth	r3, r3
 800f940:	4619      	mov	r1, r3
 800f942:	68f8      	ldr	r0, [r7, #12]
 800f944:	f7f6 fb72 	bl	800602c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f948:	e002      	b.n	800f950 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800f94a:	68f8      	ldr	r0, [r7, #12]
 800f94c:	f7ff f940 	bl	800ebd0 <HAL_UART_RxHalfCpltCallback>
}
 800f950:	bf00      	nop
 800f952:	3710      	adds	r7, #16
 800f954:	46bd      	mov	sp, r7
 800f956:	bd80      	pop	{r7, pc}

0800f958 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f958:	b580      	push	{r7, lr}
 800f95a:	b086      	sub	sp, #24
 800f95c:	af00      	add	r7, sp, #0
 800f95e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f964:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f966:	697b      	ldr	r3, [r7, #20]
 800f968:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f96c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f96e:	697b      	ldr	r3, [r7, #20]
 800f970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f974:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f976:	697b      	ldr	r3, [r7, #20]
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	689b      	ldr	r3, [r3, #8]
 800f97c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f980:	2b80      	cmp	r3, #128	; 0x80
 800f982:	d109      	bne.n	800f998 <UART_DMAError+0x40>
 800f984:	693b      	ldr	r3, [r7, #16]
 800f986:	2b21      	cmp	r3, #33	; 0x21
 800f988:	d106      	bne.n	800f998 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800f98a:	697b      	ldr	r3, [r7, #20]
 800f98c:	2200      	movs	r2, #0
 800f98e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800f992:	6978      	ldr	r0, [r7, #20]
 800f994:	f7ff fe8a 	bl	800f6ac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f998:	697b      	ldr	r3, [r7, #20]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	689b      	ldr	r3, [r3, #8]
 800f99e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f9a2:	2b40      	cmp	r3, #64	; 0x40
 800f9a4:	d109      	bne.n	800f9ba <UART_DMAError+0x62>
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	2b22      	cmp	r3, #34	; 0x22
 800f9aa:	d106      	bne.n	800f9ba <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800f9ac:	697b      	ldr	r3, [r7, #20]
 800f9ae:	2200      	movs	r2, #0
 800f9b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800f9b4:	6978      	ldr	r0, [r7, #20]
 800f9b6:	f7ff feba 	bl	800f72e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f9ba:	697b      	ldr	r3, [r7, #20]
 800f9bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f9c0:	f043 0210 	orr.w	r2, r3, #16
 800f9c4:	697b      	ldr	r3, [r7, #20]
 800f9c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f9ca:	6978      	ldr	r0, [r7, #20]
 800f9cc:	f7ff f90a 	bl	800ebe4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f9d0:	bf00      	nop
 800f9d2:	3718      	adds	r7, #24
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	bd80      	pop	{r7, pc}

0800f9d8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f9d8:	b580      	push	{r7, lr}
 800f9da:	b084      	sub	sp, #16
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	2200      	movs	r2, #0
 800f9ea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	2200      	movs	r2, #0
 800f9f2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f9f6:	68f8      	ldr	r0, [r7, #12]
 800f9f8:	f7ff f8f4 	bl	800ebe4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f9fc:	bf00      	nop
 800f9fe:	3710      	adds	r7, #16
 800fa00:	46bd      	mov	sp, r7
 800fa02:	bd80      	pop	{r7, pc}

0800fa04 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fa04:	b580      	push	{r7, lr}
 800fa06:	b088      	sub	sp, #32
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	e853 3f00 	ldrex	r3, [r3]
 800fa18:	60bb      	str	r3, [r7, #8]
   return(result);
 800fa1a:	68bb      	ldr	r3, [r7, #8]
 800fa1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fa20:	61fb      	str	r3, [r7, #28]
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	461a      	mov	r2, r3
 800fa28:	69fb      	ldr	r3, [r7, #28]
 800fa2a:	61bb      	str	r3, [r7, #24]
 800fa2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa2e:	6979      	ldr	r1, [r7, #20]
 800fa30:	69ba      	ldr	r2, [r7, #24]
 800fa32:	e841 2300 	strex	r3, r2, [r1]
 800fa36:	613b      	str	r3, [r7, #16]
   return(result);
 800fa38:	693b      	ldr	r3, [r7, #16]
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d1e6      	bne.n	800fa0c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	2220      	movs	r2, #32
 800fa42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	2200      	movs	r2, #0
 800fa4a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800fa4c:	6878      	ldr	r0, [r7, #4]
 800fa4e:	f7ff f8ab 	bl	800eba8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fa52:	bf00      	nop
 800fa54:	3720      	adds	r7, #32
 800fa56:	46bd      	mov	sp, r7
 800fa58:	bd80      	pop	{r7, pc}

0800fa5a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800fa5a:	b480      	push	{r7}
 800fa5c:	b083      	sub	sp, #12
 800fa5e:	af00      	add	r7, sp, #0
 800fa60:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800fa62:	bf00      	nop
 800fa64:	370c      	adds	r7, #12
 800fa66:	46bd      	mov	sp, r7
 800fa68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa6c:	4770      	bx	lr

0800fa6e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800fa6e:	b480      	push	{r7}
 800fa70:	b083      	sub	sp, #12
 800fa72:	af00      	add	r7, sp, #0
 800fa74:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800fa76:	bf00      	nop
 800fa78:	370c      	adds	r7, #12
 800fa7a:	46bd      	mov	sp, r7
 800fa7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa80:	4770      	bx	lr

0800fa82 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800fa82:	b480      	push	{r7}
 800fa84:	b083      	sub	sp, #12
 800fa86:	af00      	add	r7, sp, #0
 800fa88:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800fa8a:	bf00      	nop
 800fa8c:	370c      	adds	r7, #12
 800fa8e:	46bd      	mov	sp, r7
 800fa90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa94:	4770      	bx	lr

0800fa96 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fa96:	b480      	push	{r7}
 800fa98:	b085      	sub	sp, #20
 800fa9a:	af00      	add	r7, sp, #0
 800fa9c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800faa4:	2b01      	cmp	r3, #1
 800faa6:	d101      	bne.n	800faac <HAL_UARTEx_DisableFifoMode+0x16>
 800faa8:	2302      	movs	r3, #2
 800faaa:	e027      	b.n	800fafc <HAL_UARTEx_DisableFifoMode+0x66>
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	2201      	movs	r2, #1
 800fab0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	2224      	movs	r2, #36	; 0x24
 800fab8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	681a      	ldr	r2, [r3, #0]
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	f022 0201 	bic.w	r2, r2, #1
 800fad2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800fada:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	2200      	movs	r2, #0
 800fae0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	68fa      	ldr	r2, [r7, #12]
 800fae8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	2220      	movs	r2, #32
 800faee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	2200      	movs	r2, #0
 800faf6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fafa:	2300      	movs	r3, #0
}
 800fafc:	4618      	mov	r0, r3
 800fafe:	3714      	adds	r7, #20
 800fb00:	46bd      	mov	sp, r7
 800fb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb06:	4770      	bx	lr

0800fb08 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fb08:	b580      	push	{r7, lr}
 800fb0a:	b084      	sub	sp, #16
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	6078      	str	r0, [r7, #4]
 800fb10:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fb18:	2b01      	cmp	r3, #1
 800fb1a:	d101      	bne.n	800fb20 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fb1c:	2302      	movs	r3, #2
 800fb1e:	e02d      	b.n	800fb7c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	2201      	movs	r2, #1
 800fb24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	2224      	movs	r2, #36	; 0x24
 800fb2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	681a      	ldr	r2, [r3, #0]
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	f022 0201 	bic.w	r2, r2, #1
 800fb46:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	689b      	ldr	r3, [r3, #8]
 800fb4e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	683a      	ldr	r2, [r7, #0]
 800fb58:	430a      	orrs	r2, r1
 800fb5a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fb5c:	6878      	ldr	r0, [r7, #4]
 800fb5e:	f000 f8ab 	bl	800fcb8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	68fa      	ldr	r2, [r7, #12]
 800fb68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	2220      	movs	r2, #32
 800fb6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	2200      	movs	r2, #0
 800fb76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fb7a:	2300      	movs	r3, #0
}
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	3710      	adds	r7, #16
 800fb80:	46bd      	mov	sp, r7
 800fb82:	bd80      	pop	{r7, pc}

0800fb84 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fb84:	b580      	push	{r7, lr}
 800fb86:	b084      	sub	sp, #16
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	6078      	str	r0, [r7, #4]
 800fb8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fb94:	2b01      	cmp	r3, #1
 800fb96:	d101      	bne.n	800fb9c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fb98:	2302      	movs	r3, #2
 800fb9a:	e02d      	b.n	800fbf8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	2201      	movs	r2, #1
 800fba0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	2224      	movs	r2, #36	; 0x24
 800fba8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	681a      	ldr	r2, [r3, #0]
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	f022 0201 	bic.w	r2, r2, #1
 800fbc2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	689b      	ldr	r3, [r3, #8]
 800fbca:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	683a      	ldr	r2, [r7, #0]
 800fbd4:	430a      	orrs	r2, r1
 800fbd6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fbd8:	6878      	ldr	r0, [r7, #4]
 800fbda:	f000 f86d 	bl	800fcb8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	68fa      	ldr	r2, [r7, #12]
 800fbe4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	2220      	movs	r2, #32
 800fbea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	2200      	movs	r2, #0
 800fbf2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fbf6:	2300      	movs	r3, #0
}
 800fbf8:	4618      	mov	r0, r3
 800fbfa:	3710      	adds	r7, #16
 800fbfc:	46bd      	mov	sp, r7
 800fbfe:	bd80      	pop	{r7, pc}

0800fc00 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fc00:	b580      	push	{r7, lr}
 800fc02:	b08c      	sub	sp, #48	; 0x30
 800fc04:	af00      	add	r7, sp, #0
 800fc06:	60f8      	str	r0, [r7, #12]
 800fc08:	60b9      	str	r1, [r7, #8]
 800fc0a:	4613      	mov	r3, r2
 800fc0c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fc14:	2b20      	cmp	r3, #32
 800fc16:	d14a      	bne.n	800fcae <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800fc18:	68bb      	ldr	r3, [r7, #8]
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d002      	beq.n	800fc24 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800fc1e:	88fb      	ldrh	r3, [r7, #6]
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d101      	bne.n	800fc28 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800fc24:	2301      	movs	r3, #1
 800fc26:	e043      	b.n	800fcb0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
    }

    __HAL_LOCK(huart);
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fc2e:	2b01      	cmp	r3, #1
 800fc30:	d101      	bne.n	800fc36 <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 800fc32:	2302      	movs	r3, #2
 800fc34:	e03c      	b.n	800fcb0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	2201      	movs	r2, #1
 800fc3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	2201      	movs	r2, #1
 800fc42:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800fc44:	88fb      	ldrh	r3, [r7, #6]
 800fc46:	461a      	mov	r2, r3
 800fc48:	68b9      	ldr	r1, [r7, #8]
 800fc4a:	68f8      	ldr	r0, [r7, #12]
 800fc4c:	f7ff fc86 	bl	800f55c <UART_Start_Receive_DMA>
 800fc50:	4603      	mov	r3, r0
 800fc52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800fc56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d124      	bne.n	800fca8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc62:	2b01      	cmp	r3, #1
 800fc64:	d11d      	bne.n	800fca2 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	2210      	movs	r2, #16
 800fc6c:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc74:	69bb      	ldr	r3, [r7, #24]
 800fc76:	e853 3f00 	ldrex	r3, [r3]
 800fc7a:	617b      	str	r3, [r7, #20]
   return(result);
 800fc7c:	697b      	ldr	r3, [r7, #20]
 800fc7e:	f043 0310 	orr.w	r3, r3, #16
 800fc82:	62bb      	str	r3, [r7, #40]	; 0x28
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	461a      	mov	r2, r3
 800fc8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc8c:	627b      	str	r3, [r7, #36]	; 0x24
 800fc8e:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc90:	6a39      	ldr	r1, [r7, #32]
 800fc92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc94:	e841 2300 	strex	r3, r2, [r1]
 800fc98:	61fb      	str	r3, [r7, #28]
   return(result);
 800fc9a:	69fb      	ldr	r3, [r7, #28]
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d1e6      	bne.n	800fc6e <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800fca0:	e002      	b.n	800fca8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800fca2:	2301      	movs	r3, #1
 800fca4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800fca8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fcac:	e000      	b.n	800fcb0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800fcae:	2302      	movs	r3, #2
  }
}
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	3730      	adds	r7, #48	; 0x30
 800fcb4:	46bd      	mov	sp, r7
 800fcb6:	bd80      	pop	{r7, pc}

0800fcb8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fcb8:	b480      	push	{r7}
 800fcba:	b085      	sub	sp, #20
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d108      	bne.n	800fcda <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	2201      	movs	r2, #1
 800fccc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	2201      	movs	r2, #1
 800fcd4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fcd8:	e031      	b.n	800fd3e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fcda:	2308      	movs	r3, #8
 800fcdc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fcde:	2308      	movs	r3, #8
 800fce0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	689b      	ldr	r3, [r3, #8]
 800fce8:	0e5b      	lsrs	r3, r3, #25
 800fcea:	b2db      	uxtb	r3, r3
 800fcec:	f003 0307 	and.w	r3, r3, #7
 800fcf0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	689b      	ldr	r3, [r3, #8]
 800fcf8:	0f5b      	lsrs	r3, r3, #29
 800fcfa:	b2db      	uxtb	r3, r3
 800fcfc:	f003 0307 	and.w	r3, r3, #7
 800fd00:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fd02:	7bbb      	ldrb	r3, [r7, #14]
 800fd04:	7b3a      	ldrb	r2, [r7, #12]
 800fd06:	4911      	ldr	r1, [pc, #68]	; (800fd4c <UARTEx_SetNbDataToProcess+0x94>)
 800fd08:	5c8a      	ldrb	r2, [r1, r2]
 800fd0a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fd0e:	7b3a      	ldrb	r2, [r7, #12]
 800fd10:	490f      	ldr	r1, [pc, #60]	; (800fd50 <UARTEx_SetNbDataToProcess+0x98>)
 800fd12:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fd14:	fb93 f3f2 	sdiv	r3, r3, r2
 800fd18:	b29a      	uxth	r2, r3
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fd20:	7bfb      	ldrb	r3, [r7, #15]
 800fd22:	7b7a      	ldrb	r2, [r7, #13]
 800fd24:	4909      	ldr	r1, [pc, #36]	; (800fd4c <UARTEx_SetNbDataToProcess+0x94>)
 800fd26:	5c8a      	ldrb	r2, [r1, r2]
 800fd28:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fd2c:	7b7a      	ldrb	r2, [r7, #13]
 800fd2e:	4908      	ldr	r1, [pc, #32]	; (800fd50 <UARTEx_SetNbDataToProcess+0x98>)
 800fd30:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fd32:	fb93 f3f2 	sdiv	r3, r3, r2
 800fd36:	b29a      	uxth	r2, r3
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800fd3e:	bf00      	nop
 800fd40:	3714      	adds	r7, #20
 800fd42:	46bd      	mov	sp, r7
 800fd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd48:	4770      	bx	lr
 800fd4a:	bf00      	nop
 800fd4c:	0801a170 	.word	0x0801a170
 800fd50:	0801a178 	.word	0x0801a178

0800fd54 <__NVIC_SetPriority>:
{
 800fd54:	b480      	push	{r7}
 800fd56:	b083      	sub	sp, #12
 800fd58:	af00      	add	r7, sp, #0
 800fd5a:	4603      	mov	r3, r0
 800fd5c:	6039      	str	r1, [r7, #0]
 800fd5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800fd60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	db0a      	blt.n	800fd7e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800fd68:	683b      	ldr	r3, [r7, #0]
 800fd6a:	b2da      	uxtb	r2, r3
 800fd6c:	490c      	ldr	r1, [pc, #48]	; (800fda0 <__NVIC_SetPriority+0x4c>)
 800fd6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fd72:	0112      	lsls	r2, r2, #4
 800fd74:	b2d2      	uxtb	r2, r2
 800fd76:	440b      	add	r3, r1
 800fd78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800fd7c:	e00a      	b.n	800fd94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800fd7e:	683b      	ldr	r3, [r7, #0]
 800fd80:	b2da      	uxtb	r2, r3
 800fd82:	4908      	ldr	r1, [pc, #32]	; (800fda4 <__NVIC_SetPriority+0x50>)
 800fd84:	79fb      	ldrb	r3, [r7, #7]
 800fd86:	f003 030f 	and.w	r3, r3, #15
 800fd8a:	3b04      	subs	r3, #4
 800fd8c:	0112      	lsls	r2, r2, #4
 800fd8e:	b2d2      	uxtb	r2, r2
 800fd90:	440b      	add	r3, r1
 800fd92:	761a      	strb	r2, [r3, #24]
}
 800fd94:	bf00      	nop
 800fd96:	370c      	adds	r7, #12
 800fd98:	46bd      	mov	sp, r7
 800fd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd9e:	4770      	bx	lr
 800fda0:	e000e100 	.word	0xe000e100
 800fda4:	e000ed00 	.word	0xe000ed00

0800fda8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800fda8:	b580      	push	{r7, lr}
 800fdaa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800fdac:	4b05      	ldr	r3, [pc, #20]	; (800fdc4 <SysTick_Handler+0x1c>)
 800fdae:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800fdb0:	f002 fde8 	bl	8012984 <xTaskGetSchedulerState>
 800fdb4:	4603      	mov	r3, r0
 800fdb6:	2b01      	cmp	r3, #1
 800fdb8:	d001      	beq.n	800fdbe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800fdba:	f003 fdbd 	bl	8013938 <xPortSysTickHandler>
  }
}
 800fdbe:	bf00      	nop
 800fdc0:	bd80      	pop	{r7, pc}
 800fdc2:	bf00      	nop
 800fdc4:	e000e010 	.word	0xe000e010

0800fdc8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800fdc8:	b580      	push	{r7, lr}
 800fdca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800fdcc:	2100      	movs	r1, #0
 800fdce:	f06f 0004 	mvn.w	r0, #4
 800fdd2:	f7ff ffbf 	bl	800fd54 <__NVIC_SetPriority>
#endif
}
 800fdd6:	bf00      	nop
 800fdd8:	bd80      	pop	{r7, pc}
	...

0800fddc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800fddc:	b480      	push	{r7}
 800fdde:	b083      	sub	sp, #12
 800fde0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fde2:	f3ef 8305 	mrs	r3, IPSR
 800fde6:	603b      	str	r3, [r7, #0]
  return(result);
 800fde8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d003      	beq.n	800fdf6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800fdee:	f06f 0305 	mvn.w	r3, #5
 800fdf2:	607b      	str	r3, [r7, #4]
 800fdf4:	e00c      	b.n	800fe10 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800fdf6:	4b0a      	ldr	r3, [pc, #40]	; (800fe20 <osKernelInitialize+0x44>)
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d105      	bne.n	800fe0a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800fdfe:	4b08      	ldr	r3, [pc, #32]	; (800fe20 <osKernelInitialize+0x44>)
 800fe00:	2201      	movs	r2, #1
 800fe02:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800fe04:	2300      	movs	r3, #0
 800fe06:	607b      	str	r3, [r7, #4]
 800fe08:	e002      	b.n	800fe10 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800fe0a:	f04f 33ff 	mov.w	r3, #4294967295
 800fe0e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800fe10:	687b      	ldr	r3, [r7, #4]
}
 800fe12:	4618      	mov	r0, r3
 800fe14:	370c      	adds	r7, #12
 800fe16:	46bd      	mov	sp, r7
 800fe18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe1c:	4770      	bx	lr
 800fe1e:	bf00      	nop
 800fe20:	200045b8 	.word	0x200045b8

0800fe24 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800fe24:	b580      	push	{r7, lr}
 800fe26:	b082      	sub	sp, #8
 800fe28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fe2a:	f3ef 8305 	mrs	r3, IPSR
 800fe2e:	603b      	str	r3, [r7, #0]
  return(result);
 800fe30:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d003      	beq.n	800fe3e <osKernelStart+0x1a>
    stat = osErrorISR;
 800fe36:	f06f 0305 	mvn.w	r3, #5
 800fe3a:	607b      	str	r3, [r7, #4]
 800fe3c:	e010      	b.n	800fe60 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800fe3e:	4b0b      	ldr	r3, [pc, #44]	; (800fe6c <osKernelStart+0x48>)
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	2b01      	cmp	r3, #1
 800fe44:	d109      	bne.n	800fe5a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800fe46:	f7ff ffbf 	bl	800fdc8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800fe4a:	4b08      	ldr	r3, [pc, #32]	; (800fe6c <osKernelStart+0x48>)
 800fe4c:	2202      	movs	r2, #2
 800fe4e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800fe50:	f002 f8a2 	bl	8011f98 <vTaskStartScheduler>
      stat = osOK;
 800fe54:	2300      	movs	r3, #0
 800fe56:	607b      	str	r3, [r7, #4]
 800fe58:	e002      	b.n	800fe60 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800fe5a:	f04f 33ff 	mov.w	r3, #4294967295
 800fe5e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800fe60:	687b      	ldr	r3, [r7, #4]
}
 800fe62:	4618      	mov	r0, r3
 800fe64:	3708      	adds	r7, #8
 800fe66:	46bd      	mov	sp, r7
 800fe68:	bd80      	pop	{r7, pc}
 800fe6a:	bf00      	nop
 800fe6c:	200045b8 	.word	0x200045b8

0800fe70 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800fe70:	b580      	push	{r7, lr}
 800fe72:	b08e      	sub	sp, #56	; 0x38
 800fe74:	af04      	add	r7, sp, #16
 800fe76:	60f8      	str	r0, [r7, #12]
 800fe78:	60b9      	str	r1, [r7, #8]
 800fe7a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800fe7c:	2300      	movs	r3, #0
 800fe7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fe80:	f3ef 8305 	mrs	r3, IPSR
 800fe84:	617b      	str	r3, [r7, #20]
  return(result);
 800fe86:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d17e      	bne.n	800ff8a <osThreadNew+0x11a>
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d07b      	beq.n	800ff8a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800fe92:	2380      	movs	r3, #128	; 0x80
 800fe94:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800fe96:	2318      	movs	r3, #24
 800fe98:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800fe9a:	2300      	movs	r3, #0
 800fe9c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800fe9e:	f04f 33ff 	mov.w	r3, #4294967295
 800fea2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d045      	beq.n	800ff36 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d002      	beq.n	800feb8 <osThreadNew+0x48>
        name = attr->name;
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	699b      	ldr	r3, [r3, #24]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d002      	beq.n	800fec6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	699b      	ldr	r3, [r3, #24]
 800fec4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800fec6:	69fb      	ldr	r3, [r7, #28]
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d008      	beq.n	800fede <osThreadNew+0x6e>
 800fecc:	69fb      	ldr	r3, [r7, #28]
 800fece:	2b38      	cmp	r3, #56	; 0x38
 800fed0:	d805      	bhi.n	800fede <osThreadNew+0x6e>
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	685b      	ldr	r3, [r3, #4]
 800fed6:	f003 0301 	and.w	r3, r3, #1
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d001      	beq.n	800fee2 <osThreadNew+0x72>
        return (NULL);
 800fede:	2300      	movs	r3, #0
 800fee0:	e054      	b.n	800ff8c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	695b      	ldr	r3, [r3, #20]
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d003      	beq.n	800fef2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	695b      	ldr	r3, [r3, #20]
 800feee:	089b      	lsrs	r3, r3, #2
 800fef0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	689b      	ldr	r3, [r3, #8]
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d00e      	beq.n	800ff18 <osThreadNew+0xa8>
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	68db      	ldr	r3, [r3, #12]
 800fefe:	2b6b      	cmp	r3, #107	; 0x6b
 800ff00:	d90a      	bls.n	800ff18 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d006      	beq.n	800ff18 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	695b      	ldr	r3, [r3, #20]
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d002      	beq.n	800ff18 <osThreadNew+0xa8>
        mem = 1;
 800ff12:	2301      	movs	r3, #1
 800ff14:	61bb      	str	r3, [r7, #24]
 800ff16:	e010      	b.n	800ff3a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	689b      	ldr	r3, [r3, #8]
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d10c      	bne.n	800ff3a <osThreadNew+0xca>
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	68db      	ldr	r3, [r3, #12]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d108      	bne.n	800ff3a <osThreadNew+0xca>
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	691b      	ldr	r3, [r3, #16]
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d104      	bne.n	800ff3a <osThreadNew+0xca>
          mem = 0;
 800ff30:	2300      	movs	r3, #0
 800ff32:	61bb      	str	r3, [r7, #24]
 800ff34:	e001      	b.n	800ff3a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800ff36:	2300      	movs	r3, #0
 800ff38:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ff3a:	69bb      	ldr	r3, [r7, #24]
 800ff3c:	2b01      	cmp	r3, #1
 800ff3e:	d110      	bne.n	800ff62 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ff44:	687a      	ldr	r2, [r7, #4]
 800ff46:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ff48:	9202      	str	r2, [sp, #8]
 800ff4a:	9301      	str	r3, [sp, #4]
 800ff4c:	69fb      	ldr	r3, [r7, #28]
 800ff4e:	9300      	str	r3, [sp, #0]
 800ff50:	68bb      	ldr	r3, [r7, #8]
 800ff52:	6a3a      	ldr	r2, [r7, #32]
 800ff54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ff56:	68f8      	ldr	r0, [r7, #12]
 800ff58:	f001 fe48 	bl	8011bec <xTaskCreateStatic>
 800ff5c:	4603      	mov	r3, r0
 800ff5e:	613b      	str	r3, [r7, #16]
 800ff60:	e013      	b.n	800ff8a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ff62:	69bb      	ldr	r3, [r7, #24]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d110      	bne.n	800ff8a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ff68:	6a3b      	ldr	r3, [r7, #32]
 800ff6a:	b29a      	uxth	r2, r3
 800ff6c:	f107 0310 	add.w	r3, r7, #16
 800ff70:	9301      	str	r3, [sp, #4]
 800ff72:	69fb      	ldr	r3, [r7, #28]
 800ff74:	9300      	str	r3, [sp, #0]
 800ff76:	68bb      	ldr	r3, [r7, #8]
 800ff78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ff7a:	68f8      	ldr	r0, [r7, #12]
 800ff7c:	f001 fe93 	bl	8011ca6 <xTaskCreate>
 800ff80:	4603      	mov	r3, r0
 800ff82:	2b01      	cmp	r3, #1
 800ff84:	d001      	beq.n	800ff8a <osThreadNew+0x11a>
            hTask = NULL;
 800ff86:	2300      	movs	r3, #0
 800ff88:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ff8a:	693b      	ldr	r3, [r7, #16]
}
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	3728      	adds	r7, #40	; 0x28
 800ff90:	46bd      	mov	sp, r7
 800ff92:	bd80      	pop	{r7, pc}

0800ff94 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ff94:	b580      	push	{r7, lr}
 800ff96:	b084      	sub	sp, #16
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ff9c:	f3ef 8305 	mrs	r3, IPSR
 800ffa0:	60bb      	str	r3, [r7, #8]
  return(result);
 800ffa2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d003      	beq.n	800ffb0 <osDelay+0x1c>
    stat = osErrorISR;
 800ffa8:	f06f 0305 	mvn.w	r3, #5
 800ffac:	60fb      	str	r3, [r7, #12]
 800ffae:	e007      	b.n	800ffc0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ffb0:	2300      	movs	r3, #0
 800ffb2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d002      	beq.n	800ffc0 <osDelay+0x2c>
      vTaskDelay(ticks);
 800ffba:	6878      	ldr	r0, [r7, #4]
 800ffbc:	f001 ffb8 	bl	8011f30 <vTaskDelay>
    }
  }

  return (stat);
 800ffc0:	68fb      	ldr	r3, [r7, #12]
}
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	3710      	adds	r7, #16
 800ffc6:	46bd      	mov	sp, r7
 800ffc8:	bd80      	pop	{r7, pc}

0800ffca <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800ffca:	b580      	push	{r7, lr}
 800ffcc:	b084      	sub	sp, #16
 800ffce:	af00      	add	r7, sp, #0
 800ffd0:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800ffd2:	6878      	ldr	r0, [r7, #4]
 800ffd4:	f003 fab4 	bl	8013540 <pvTimerGetTimerID>
 800ffd8:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d005      	beq.n	800ffec <TimerCallback+0x22>
    callb->func (callb->arg);
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	68fa      	ldr	r2, [r7, #12]
 800ffe6:	6852      	ldr	r2, [r2, #4]
 800ffe8:	4610      	mov	r0, r2
 800ffea:	4798      	blx	r3
  }
}
 800ffec:	bf00      	nop
 800ffee:	3710      	adds	r7, #16
 800fff0:	46bd      	mov	sp, r7
 800fff2:	bd80      	pop	{r7, pc}

0800fff4 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800fff4:	b580      	push	{r7, lr}
 800fff6:	b08c      	sub	sp, #48	; 0x30
 800fff8:	af02      	add	r7, sp, #8
 800fffa:	60f8      	str	r0, [r7, #12]
 800fffc:	607a      	str	r2, [r7, #4]
 800fffe:	603b      	str	r3, [r7, #0]
 8010000:	460b      	mov	r3, r1
 8010002:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8010004:	2300      	movs	r3, #0
 8010006:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010008:	f3ef 8305 	mrs	r3, IPSR
 801000c:	613b      	str	r3, [r7, #16]
  return(result);
 801000e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8010010:	2b00      	cmp	r3, #0
 8010012:	d163      	bne.n	80100dc <osTimerNew+0xe8>
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d060      	beq.n	80100dc <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 801001a:	2008      	movs	r0, #8
 801001c:	f003 fd1c 	bl	8013a58 <pvPortMalloc>
 8010020:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8010022:	697b      	ldr	r3, [r7, #20]
 8010024:	2b00      	cmp	r3, #0
 8010026:	d059      	beq.n	80100dc <osTimerNew+0xe8>
      callb->func = func;
 8010028:	697b      	ldr	r3, [r7, #20]
 801002a:	68fa      	ldr	r2, [r7, #12]
 801002c:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 801002e:	697b      	ldr	r3, [r7, #20]
 8010030:	687a      	ldr	r2, [r7, #4]
 8010032:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8010034:	7afb      	ldrb	r3, [r7, #11]
 8010036:	2b00      	cmp	r3, #0
 8010038:	d102      	bne.n	8010040 <osTimerNew+0x4c>
        reload = pdFALSE;
 801003a:	2300      	movs	r3, #0
 801003c:	61fb      	str	r3, [r7, #28]
 801003e:	e001      	b.n	8010044 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8010040:	2301      	movs	r3, #1
 8010042:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8010044:	f04f 33ff 	mov.w	r3, #4294967295
 8010048:	61bb      	str	r3, [r7, #24]
      name = NULL;
 801004a:	2300      	movs	r3, #0
 801004c:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 801004e:	683b      	ldr	r3, [r7, #0]
 8010050:	2b00      	cmp	r3, #0
 8010052:	d01c      	beq.n	801008e <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8010054:	683b      	ldr	r3, [r7, #0]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	2b00      	cmp	r3, #0
 801005a:	d002      	beq.n	8010062 <osTimerNew+0x6e>
          name = attr->name;
 801005c:	683b      	ldr	r3, [r7, #0]
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8010062:	683b      	ldr	r3, [r7, #0]
 8010064:	689b      	ldr	r3, [r3, #8]
 8010066:	2b00      	cmp	r3, #0
 8010068:	d006      	beq.n	8010078 <osTimerNew+0x84>
 801006a:	683b      	ldr	r3, [r7, #0]
 801006c:	68db      	ldr	r3, [r3, #12]
 801006e:	2b2b      	cmp	r3, #43	; 0x2b
 8010070:	d902      	bls.n	8010078 <osTimerNew+0x84>
          mem = 1;
 8010072:	2301      	movs	r3, #1
 8010074:	61bb      	str	r3, [r7, #24]
 8010076:	e00c      	b.n	8010092 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8010078:	683b      	ldr	r3, [r7, #0]
 801007a:	689b      	ldr	r3, [r3, #8]
 801007c:	2b00      	cmp	r3, #0
 801007e:	d108      	bne.n	8010092 <osTimerNew+0x9e>
 8010080:	683b      	ldr	r3, [r7, #0]
 8010082:	68db      	ldr	r3, [r3, #12]
 8010084:	2b00      	cmp	r3, #0
 8010086:	d104      	bne.n	8010092 <osTimerNew+0x9e>
            mem = 0;
 8010088:	2300      	movs	r3, #0
 801008a:	61bb      	str	r3, [r7, #24]
 801008c:	e001      	b.n	8010092 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 801008e:	2300      	movs	r3, #0
 8010090:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8010092:	69bb      	ldr	r3, [r7, #24]
 8010094:	2b01      	cmp	r3, #1
 8010096:	d10c      	bne.n	80100b2 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8010098:	683b      	ldr	r3, [r7, #0]
 801009a:	689b      	ldr	r3, [r3, #8]
 801009c:	9301      	str	r3, [sp, #4]
 801009e:	4b12      	ldr	r3, [pc, #72]	; (80100e8 <osTimerNew+0xf4>)
 80100a0:	9300      	str	r3, [sp, #0]
 80100a2:	697b      	ldr	r3, [r7, #20]
 80100a4:	69fa      	ldr	r2, [r7, #28]
 80100a6:	2101      	movs	r1, #1
 80100a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80100aa:	f002 feca 	bl	8012e42 <xTimerCreateStatic>
 80100ae:	6238      	str	r0, [r7, #32]
 80100b0:	e00b      	b.n	80100ca <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 80100b2:	69bb      	ldr	r3, [r7, #24]
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d108      	bne.n	80100ca <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 80100b8:	4b0b      	ldr	r3, [pc, #44]	; (80100e8 <osTimerNew+0xf4>)
 80100ba:	9300      	str	r3, [sp, #0]
 80100bc:	697b      	ldr	r3, [r7, #20]
 80100be:	69fa      	ldr	r2, [r7, #28]
 80100c0:	2101      	movs	r1, #1
 80100c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80100c4:	f002 fe9c 	bl	8012e00 <xTimerCreate>
 80100c8:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 80100ca:	6a3b      	ldr	r3, [r7, #32]
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d105      	bne.n	80100dc <osTimerNew+0xe8>
 80100d0:	697b      	ldr	r3, [r7, #20]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d002      	beq.n	80100dc <osTimerNew+0xe8>
        vPortFree (callb);
 80100d6:	6978      	ldr	r0, [r7, #20]
 80100d8:	f003 fd8a 	bl	8013bf0 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 80100dc:	6a3b      	ldr	r3, [r7, #32]
}
 80100de:	4618      	mov	r0, r3
 80100e0:	3728      	adds	r7, #40	; 0x28
 80100e2:	46bd      	mov	sp, r7
 80100e4:	bd80      	pop	{r7, pc}
 80100e6:	bf00      	nop
 80100e8:	0800ffcb 	.word	0x0800ffcb

080100ec <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80100ec:	b580      	push	{r7, lr}
 80100ee:	b086      	sub	sp, #24
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80100f4:	2300      	movs	r3, #0
 80100f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80100f8:	f3ef 8305 	mrs	r3, IPSR
 80100fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80100fe:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8010100:	2b00      	cmp	r3, #0
 8010102:	d12d      	bne.n	8010160 <osEventFlagsNew+0x74>
    mem = -1;
 8010104:	f04f 33ff 	mov.w	r3, #4294967295
 8010108:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	2b00      	cmp	r3, #0
 801010e:	d015      	beq.n	801013c <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	689b      	ldr	r3, [r3, #8]
 8010114:	2b00      	cmp	r3, #0
 8010116:	d006      	beq.n	8010126 <osEventFlagsNew+0x3a>
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	68db      	ldr	r3, [r3, #12]
 801011c:	2b1f      	cmp	r3, #31
 801011e:	d902      	bls.n	8010126 <osEventFlagsNew+0x3a>
        mem = 1;
 8010120:	2301      	movs	r3, #1
 8010122:	613b      	str	r3, [r7, #16]
 8010124:	e00c      	b.n	8010140 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	689b      	ldr	r3, [r3, #8]
 801012a:	2b00      	cmp	r3, #0
 801012c:	d108      	bne.n	8010140 <osEventFlagsNew+0x54>
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	68db      	ldr	r3, [r3, #12]
 8010132:	2b00      	cmp	r3, #0
 8010134:	d104      	bne.n	8010140 <osEventFlagsNew+0x54>
          mem = 0;
 8010136:	2300      	movs	r3, #0
 8010138:	613b      	str	r3, [r7, #16]
 801013a:	e001      	b.n	8010140 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 801013c:	2300      	movs	r3, #0
 801013e:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8010140:	693b      	ldr	r3, [r7, #16]
 8010142:	2b01      	cmp	r3, #1
 8010144:	d106      	bne.n	8010154 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	689b      	ldr	r3, [r3, #8]
 801014a:	4618      	mov	r0, r3
 801014c:	f000 fb2c 	bl	80107a8 <xEventGroupCreateStatic>
 8010150:	6178      	str	r0, [r7, #20]
 8010152:	e005      	b.n	8010160 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8010154:	693b      	ldr	r3, [r7, #16]
 8010156:	2b00      	cmp	r3, #0
 8010158:	d102      	bne.n	8010160 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 801015a:	f000 fb5c 	bl	8010816 <xEventGroupCreate>
 801015e:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8010160:	697b      	ldr	r3, [r7, #20]
}
 8010162:	4618      	mov	r0, r3
 8010164:	3718      	adds	r7, #24
 8010166:	46bd      	mov	sp, r7
 8010168:	bd80      	pop	{r7, pc}
	...

0801016c <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 801016c:	b580      	push	{r7, lr}
 801016e:	b086      	sub	sp, #24
 8010170:	af00      	add	r7, sp, #0
 8010172:	6078      	str	r0, [r7, #4]
 8010174:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 801017a:	693b      	ldr	r3, [r7, #16]
 801017c:	2b00      	cmp	r3, #0
 801017e:	d004      	beq.n	801018a <osEventFlagsSet+0x1e>
 8010180:	683b      	ldr	r3, [r7, #0]
 8010182:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8010186:	2b00      	cmp	r3, #0
 8010188:	d003      	beq.n	8010192 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 801018a:	f06f 0303 	mvn.w	r3, #3
 801018e:	617b      	str	r3, [r7, #20]
 8010190:	e028      	b.n	80101e4 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010192:	f3ef 8305 	mrs	r3, IPSR
 8010196:	60fb      	str	r3, [r7, #12]
  return(result);
 8010198:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 801019a:	2b00      	cmp	r3, #0
 801019c:	d01d      	beq.n	80101da <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 801019e:	2300      	movs	r3, #0
 80101a0:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 80101a2:	f107 0308 	add.w	r3, r7, #8
 80101a6:	461a      	mov	r2, r3
 80101a8:	6839      	ldr	r1, [r7, #0]
 80101aa:	6938      	ldr	r0, [r7, #16]
 80101ac:	f000 fcd6 	bl	8010b5c <xEventGroupSetBitsFromISR>
 80101b0:	4603      	mov	r3, r0
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d103      	bne.n	80101be <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 80101b6:	f06f 0302 	mvn.w	r3, #2
 80101ba:	617b      	str	r3, [r7, #20]
 80101bc:	e012      	b.n	80101e4 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 80101be:	683b      	ldr	r3, [r7, #0]
 80101c0:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 80101c2:	68bb      	ldr	r3, [r7, #8]
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d00d      	beq.n	80101e4 <osEventFlagsSet+0x78>
 80101c8:	4b09      	ldr	r3, [pc, #36]	; (80101f0 <osEventFlagsSet+0x84>)
 80101ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80101ce:	601a      	str	r2, [r3, #0]
 80101d0:	f3bf 8f4f 	dsb	sy
 80101d4:	f3bf 8f6f 	isb	sy
 80101d8:	e004      	b.n	80101e4 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 80101da:	6839      	ldr	r1, [r7, #0]
 80101dc:	6938      	ldr	r0, [r7, #16]
 80101de:	f000 fc03 	bl	80109e8 <xEventGroupSetBits>
 80101e2:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80101e4:	697b      	ldr	r3, [r7, #20]
}
 80101e6:	4618      	mov	r0, r3
 80101e8:	3718      	adds	r7, #24
 80101ea:	46bd      	mov	sp, r7
 80101ec:	bd80      	pop	{r7, pc}
 80101ee:	bf00      	nop
 80101f0:	e000ed04 	.word	0xe000ed04

080101f4 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80101f4:	b580      	push	{r7, lr}
 80101f6:	b08c      	sub	sp, #48	; 0x30
 80101f8:	af02      	add	r7, sp, #8
 80101fa:	60f8      	str	r0, [r7, #12]
 80101fc:	60b9      	str	r1, [r7, #8]
 80101fe:	607a      	str	r2, [r7, #4]
 8010200:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8010206:	69bb      	ldr	r3, [r7, #24]
 8010208:	2b00      	cmp	r3, #0
 801020a:	d004      	beq.n	8010216 <osEventFlagsWait+0x22>
 801020c:	68bb      	ldr	r3, [r7, #8]
 801020e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8010212:	2b00      	cmp	r3, #0
 8010214:	d003      	beq.n	801021e <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8010216:	f06f 0303 	mvn.w	r3, #3
 801021a:	61fb      	str	r3, [r7, #28]
 801021c:	e04b      	b.n	80102b6 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801021e:	f3ef 8305 	mrs	r3, IPSR
 8010222:	617b      	str	r3, [r7, #20]
  return(result);
 8010224:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8010226:	2b00      	cmp	r3, #0
 8010228:	d003      	beq.n	8010232 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 801022a:	f06f 0305 	mvn.w	r3, #5
 801022e:	61fb      	str	r3, [r7, #28]
 8010230:	e041      	b.n	80102b6 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	f003 0301 	and.w	r3, r3, #1
 8010238:	2b00      	cmp	r3, #0
 801023a:	d002      	beq.n	8010242 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 801023c:	2301      	movs	r3, #1
 801023e:	627b      	str	r3, [r7, #36]	; 0x24
 8010240:	e001      	b.n	8010246 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8010242:	2300      	movs	r3, #0
 8010244:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	f003 0302 	and.w	r3, r3, #2
 801024c:	2b00      	cmp	r3, #0
 801024e:	d002      	beq.n	8010256 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8010250:	2300      	movs	r3, #0
 8010252:	623b      	str	r3, [r7, #32]
 8010254:	e001      	b.n	801025a <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8010256:	2301      	movs	r3, #1
 8010258:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 801025a:	683b      	ldr	r3, [r7, #0]
 801025c:	9300      	str	r3, [sp, #0]
 801025e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010260:	6a3a      	ldr	r2, [r7, #32]
 8010262:	68b9      	ldr	r1, [r7, #8]
 8010264:	69b8      	ldr	r0, [r7, #24]
 8010266:	f000 faf1 	bl	801084c <xEventGroupWaitBits>
 801026a:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	f003 0301 	and.w	r3, r3, #1
 8010272:	2b00      	cmp	r3, #0
 8010274:	d010      	beq.n	8010298 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8010276:	68ba      	ldr	r2, [r7, #8]
 8010278:	69fb      	ldr	r3, [r7, #28]
 801027a:	4013      	ands	r3, r2
 801027c:	68ba      	ldr	r2, [r7, #8]
 801027e:	429a      	cmp	r2, r3
 8010280:	d019      	beq.n	80102b6 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8010282:	683b      	ldr	r3, [r7, #0]
 8010284:	2b00      	cmp	r3, #0
 8010286:	d003      	beq.n	8010290 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8010288:	f06f 0301 	mvn.w	r3, #1
 801028c:	61fb      	str	r3, [r7, #28]
 801028e:	e012      	b.n	80102b6 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8010290:	f06f 0302 	mvn.w	r3, #2
 8010294:	61fb      	str	r3, [r7, #28]
 8010296:	e00e      	b.n	80102b6 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8010298:	68ba      	ldr	r2, [r7, #8]
 801029a:	69fb      	ldr	r3, [r7, #28]
 801029c:	4013      	ands	r3, r2
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d109      	bne.n	80102b6 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80102a2:	683b      	ldr	r3, [r7, #0]
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d003      	beq.n	80102b0 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 80102a8:	f06f 0301 	mvn.w	r3, #1
 80102ac:	61fb      	str	r3, [r7, #28]
 80102ae:	e002      	b.n	80102b6 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80102b0:	f06f 0302 	mvn.w	r3, #2
 80102b4:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 80102b6:	69fb      	ldr	r3, [r7, #28]
}
 80102b8:	4618      	mov	r0, r3
 80102ba:	3728      	adds	r7, #40	; 0x28
 80102bc:	46bd      	mov	sp, r7
 80102be:	bd80      	pop	{r7, pc}

080102c0 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80102c0:	b580      	push	{r7, lr}
 80102c2:	b088      	sub	sp, #32
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80102c8:	2300      	movs	r3, #0
 80102ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80102cc:	f3ef 8305 	mrs	r3, IPSR
 80102d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80102d2:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d174      	bne.n	80103c2 <osMutexNew+0x102>
    if (attr != NULL) {
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d003      	beq.n	80102e6 <osMutexNew+0x26>
      type = attr->attr_bits;
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	685b      	ldr	r3, [r3, #4]
 80102e2:	61bb      	str	r3, [r7, #24]
 80102e4:	e001      	b.n	80102ea <osMutexNew+0x2a>
    } else {
      type = 0U;
 80102e6:	2300      	movs	r3, #0
 80102e8:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80102ea:	69bb      	ldr	r3, [r7, #24]
 80102ec:	f003 0301 	and.w	r3, r3, #1
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d002      	beq.n	80102fa <osMutexNew+0x3a>
      rmtx = 1U;
 80102f4:	2301      	movs	r3, #1
 80102f6:	617b      	str	r3, [r7, #20]
 80102f8:	e001      	b.n	80102fe <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80102fa:	2300      	movs	r3, #0
 80102fc:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80102fe:	69bb      	ldr	r3, [r7, #24]
 8010300:	f003 0308 	and.w	r3, r3, #8
 8010304:	2b00      	cmp	r3, #0
 8010306:	d15c      	bne.n	80103c2 <osMutexNew+0x102>
      mem = -1;
 8010308:	f04f 33ff 	mov.w	r3, #4294967295
 801030c:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	2b00      	cmp	r3, #0
 8010312:	d015      	beq.n	8010340 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	689b      	ldr	r3, [r3, #8]
 8010318:	2b00      	cmp	r3, #0
 801031a:	d006      	beq.n	801032a <osMutexNew+0x6a>
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	68db      	ldr	r3, [r3, #12]
 8010320:	2b4f      	cmp	r3, #79	; 0x4f
 8010322:	d902      	bls.n	801032a <osMutexNew+0x6a>
          mem = 1;
 8010324:	2301      	movs	r3, #1
 8010326:	613b      	str	r3, [r7, #16]
 8010328:	e00c      	b.n	8010344 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	689b      	ldr	r3, [r3, #8]
 801032e:	2b00      	cmp	r3, #0
 8010330:	d108      	bne.n	8010344 <osMutexNew+0x84>
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	68db      	ldr	r3, [r3, #12]
 8010336:	2b00      	cmp	r3, #0
 8010338:	d104      	bne.n	8010344 <osMutexNew+0x84>
            mem = 0;
 801033a:	2300      	movs	r3, #0
 801033c:	613b      	str	r3, [r7, #16]
 801033e:	e001      	b.n	8010344 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8010340:	2300      	movs	r3, #0
 8010342:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8010344:	693b      	ldr	r3, [r7, #16]
 8010346:	2b01      	cmp	r3, #1
 8010348:	d112      	bne.n	8010370 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 801034a:	697b      	ldr	r3, [r7, #20]
 801034c:	2b00      	cmp	r3, #0
 801034e:	d007      	beq.n	8010360 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	689b      	ldr	r3, [r3, #8]
 8010354:	4619      	mov	r1, r3
 8010356:	2004      	movs	r0, #4
 8010358:	f000 fe37 	bl	8010fca <xQueueCreateMutexStatic>
 801035c:	61f8      	str	r0, [r7, #28]
 801035e:	e016      	b.n	801038e <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	689b      	ldr	r3, [r3, #8]
 8010364:	4619      	mov	r1, r3
 8010366:	2001      	movs	r0, #1
 8010368:	f000 fe2f 	bl	8010fca <xQueueCreateMutexStatic>
 801036c:	61f8      	str	r0, [r7, #28]
 801036e:	e00e      	b.n	801038e <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8010370:	693b      	ldr	r3, [r7, #16]
 8010372:	2b00      	cmp	r3, #0
 8010374:	d10b      	bne.n	801038e <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8010376:	697b      	ldr	r3, [r7, #20]
 8010378:	2b00      	cmp	r3, #0
 801037a:	d004      	beq.n	8010386 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 801037c:	2004      	movs	r0, #4
 801037e:	f000 fe0c 	bl	8010f9a <xQueueCreateMutex>
 8010382:	61f8      	str	r0, [r7, #28]
 8010384:	e003      	b.n	801038e <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8010386:	2001      	movs	r0, #1
 8010388:	f000 fe07 	bl	8010f9a <xQueueCreateMutex>
 801038c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 801038e:	69fb      	ldr	r3, [r7, #28]
 8010390:	2b00      	cmp	r3, #0
 8010392:	d00c      	beq.n	80103ae <osMutexNew+0xee>
        if (attr != NULL) {
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	2b00      	cmp	r3, #0
 8010398:	d003      	beq.n	80103a2 <osMutexNew+0xe2>
          name = attr->name;
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	60fb      	str	r3, [r7, #12]
 80103a0:	e001      	b.n	80103a6 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80103a2:	2300      	movs	r3, #0
 80103a4:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80103a6:	68f9      	ldr	r1, [r7, #12]
 80103a8:	69f8      	ldr	r0, [r7, #28]
 80103aa:	f001 fbc1 	bl	8011b30 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80103ae:	69fb      	ldr	r3, [r7, #28]
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d006      	beq.n	80103c2 <osMutexNew+0x102>
 80103b4:	697b      	ldr	r3, [r7, #20]
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d003      	beq.n	80103c2 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80103ba:	69fb      	ldr	r3, [r7, #28]
 80103bc:	f043 0301 	orr.w	r3, r3, #1
 80103c0:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80103c2:	69fb      	ldr	r3, [r7, #28]
}
 80103c4:	4618      	mov	r0, r3
 80103c6:	3720      	adds	r7, #32
 80103c8:	46bd      	mov	sp, r7
 80103ca:	bd80      	pop	{r7, pc}

080103cc <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80103cc:	b580      	push	{r7, lr}
 80103ce:	b086      	sub	sp, #24
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	6078      	str	r0, [r7, #4]
 80103d4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	f023 0301 	bic.w	r3, r3, #1
 80103dc:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	f003 0301 	and.w	r3, r3, #1
 80103e4:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80103e6:	2300      	movs	r3, #0
 80103e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80103ea:	f3ef 8305 	mrs	r3, IPSR
 80103ee:	60bb      	str	r3, [r7, #8]
  return(result);
 80103f0:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d003      	beq.n	80103fe <osMutexAcquire+0x32>
    stat = osErrorISR;
 80103f6:	f06f 0305 	mvn.w	r3, #5
 80103fa:	617b      	str	r3, [r7, #20]
 80103fc:	e02c      	b.n	8010458 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80103fe:	693b      	ldr	r3, [r7, #16]
 8010400:	2b00      	cmp	r3, #0
 8010402:	d103      	bne.n	801040c <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8010404:	f06f 0303 	mvn.w	r3, #3
 8010408:	617b      	str	r3, [r7, #20]
 801040a:	e025      	b.n	8010458 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	2b00      	cmp	r3, #0
 8010410:	d011      	beq.n	8010436 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8010412:	6839      	ldr	r1, [r7, #0]
 8010414:	6938      	ldr	r0, [r7, #16]
 8010416:	f000 fe27 	bl	8011068 <xQueueTakeMutexRecursive>
 801041a:	4603      	mov	r3, r0
 801041c:	2b01      	cmp	r3, #1
 801041e:	d01b      	beq.n	8010458 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8010420:	683b      	ldr	r3, [r7, #0]
 8010422:	2b00      	cmp	r3, #0
 8010424:	d003      	beq.n	801042e <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8010426:	f06f 0301 	mvn.w	r3, #1
 801042a:	617b      	str	r3, [r7, #20]
 801042c:	e014      	b.n	8010458 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 801042e:	f06f 0302 	mvn.w	r3, #2
 8010432:	617b      	str	r3, [r7, #20]
 8010434:	e010      	b.n	8010458 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8010436:	6839      	ldr	r1, [r7, #0]
 8010438:	6938      	ldr	r0, [r7, #16]
 801043a:	f001 f8c5 	bl	80115c8 <xQueueSemaphoreTake>
 801043e:	4603      	mov	r3, r0
 8010440:	2b01      	cmp	r3, #1
 8010442:	d009      	beq.n	8010458 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8010444:	683b      	ldr	r3, [r7, #0]
 8010446:	2b00      	cmp	r3, #0
 8010448:	d003      	beq.n	8010452 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 801044a:	f06f 0301 	mvn.w	r3, #1
 801044e:	617b      	str	r3, [r7, #20]
 8010450:	e002      	b.n	8010458 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8010452:	f06f 0302 	mvn.w	r3, #2
 8010456:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8010458:	697b      	ldr	r3, [r7, #20]
}
 801045a:	4618      	mov	r0, r3
 801045c:	3718      	adds	r7, #24
 801045e:	46bd      	mov	sp, r7
 8010460:	bd80      	pop	{r7, pc}

08010462 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8010462:	b580      	push	{r7, lr}
 8010464:	b086      	sub	sp, #24
 8010466:	af00      	add	r7, sp, #0
 8010468:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	f023 0301 	bic.w	r3, r3, #1
 8010470:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	f003 0301 	and.w	r3, r3, #1
 8010478:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 801047a:	2300      	movs	r3, #0
 801047c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801047e:	f3ef 8305 	mrs	r3, IPSR
 8010482:	60bb      	str	r3, [r7, #8]
  return(result);
 8010484:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8010486:	2b00      	cmp	r3, #0
 8010488:	d003      	beq.n	8010492 <osMutexRelease+0x30>
    stat = osErrorISR;
 801048a:	f06f 0305 	mvn.w	r3, #5
 801048e:	617b      	str	r3, [r7, #20]
 8010490:	e01f      	b.n	80104d2 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8010492:	693b      	ldr	r3, [r7, #16]
 8010494:	2b00      	cmp	r3, #0
 8010496:	d103      	bne.n	80104a0 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8010498:	f06f 0303 	mvn.w	r3, #3
 801049c:	617b      	str	r3, [r7, #20]
 801049e:	e018      	b.n	80104d2 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d009      	beq.n	80104ba <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80104a6:	6938      	ldr	r0, [r7, #16]
 80104a8:	f000 fdaa 	bl	8011000 <xQueueGiveMutexRecursive>
 80104ac:	4603      	mov	r3, r0
 80104ae:	2b01      	cmp	r3, #1
 80104b0:	d00f      	beq.n	80104d2 <osMutexRelease+0x70>
        stat = osErrorResource;
 80104b2:	f06f 0302 	mvn.w	r3, #2
 80104b6:	617b      	str	r3, [r7, #20]
 80104b8:	e00b      	b.n	80104d2 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80104ba:	2300      	movs	r3, #0
 80104bc:	2200      	movs	r2, #0
 80104be:	2100      	movs	r1, #0
 80104c0:	6938      	ldr	r0, [r7, #16]
 80104c2:	f000 fe07 	bl	80110d4 <xQueueGenericSend>
 80104c6:	4603      	mov	r3, r0
 80104c8:	2b01      	cmp	r3, #1
 80104ca:	d002      	beq.n	80104d2 <osMutexRelease+0x70>
        stat = osErrorResource;
 80104cc:	f06f 0302 	mvn.w	r3, #2
 80104d0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80104d2:	697b      	ldr	r3, [r7, #20]
}
 80104d4:	4618      	mov	r0, r3
 80104d6:	3718      	adds	r7, #24
 80104d8:	46bd      	mov	sp, r7
 80104da:	bd80      	pop	{r7, pc}

080104dc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80104dc:	b580      	push	{r7, lr}
 80104de:	b08a      	sub	sp, #40	; 0x28
 80104e0:	af02      	add	r7, sp, #8
 80104e2:	60f8      	str	r0, [r7, #12]
 80104e4:	60b9      	str	r1, [r7, #8]
 80104e6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80104e8:	2300      	movs	r3, #0
 80104ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80104ec:	f3ef 8305 	mrs	r3, IPSR
 80104f0:	613b      	str	r3, [r7, #16]
  return(result);
 80104f2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d15f      	bne.n	80105b8 <osMessageQueueNew+0xdc>
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d05c      	beq.n	80105b8 <osMessageQueueNew+0xdc>
 80104fe:	68bb      	ldr	r3, [r7, #8]
 8010500:	2b00      	cmp	r3, #0
 8010502:	d059      	beq.n	80105b8 <osMessageQueueNew+0xdc>
    mem = -1;
 8010504:	f04f 33ff 	mov.w	r3, #4294967295
 8010508:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	2b00      	cmp	r3, #0
 801050e:	d029      	beq.n	8010564 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	689b      	ldr	r3, [r3, #8]
 8010514:	2b00      	cmp	r3, #0
 8010516:	d012      	beq.n	801053e <osMessageQueueNew+0x62>
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	68db      	ldr	r3, [r3, #12]
 801051c:	2b4f      	cmp	r3, #79	; 0x4f
 801051e:	d90e      	bls.n	801053e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010524:	2b00      	cmp	r3, #0
 8010526:	d00a      	beq.n	801053e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	695a      	ldr	r2, [r3, #20]
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	68b9      	ldr	r1, [r7, #8]
 8010530:	fb01 f303 	mul.w	r3, r1, r3
 8010534:	429a      	cmp	r2, r3
 8010536:	d302      	bcc.n	801053e <osMessageQueueNew+0x62>
        mem = 1;
 8010538:	2301      	movs	r3, #1
 801053a:	61bb      	str	r3, [r7, #24]
 801053c:	e014      	b.n	8010568 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	689b      	ldr	r3, [r3, #8]
 8010542:	2b00      	cmp	r3, #0
 8010544:	d110      	bne.n	8010568 <osMessageQueueNew+0x8c>
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	68db      	ldr	r3, [r3, #12]
 801054a:	2b00      	cmp	r3, #0
 801054c:	d10c      	bne.n	8010568 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8010552:	2b00      	cmp	r3, #0
 8010554:	d108      	bne.n	8010568 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	695b      	ldr	r3, [r3, #20]
 801055a:	2b00      	cmp	r3, #0
 801055c:	d104      	bne.n	8010568 <osMessageQueueNew+0x8c>
          mem = 0;
 801055e:	2300      	movs	r3, #0
 8010560:	61bb      	str	r3, [r7, #24]
 8010562:	e001      	b.n	8010568 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8010564:	2300      	movs	r3, #0
 8010566:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8010568:	69bb      	ldr	r3, [r7, #24]
 801056a:	2b01      	cmp	r3, #1
 801056c:	d10b      	bne.n	8010586 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	691a      	ldr	r2, [r3, #16]
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	689b      	ldr	r3, [r3, #8]
 8010576:	2100      	movs	r1, #0
 8010578:	9100      	str	r1, [sp, #0]
 801057a:	68b9      	ldr	r1, [r7, #8]
 801057c:	68f8      	ldr	r0, [r7, #12]
 801057e:	f000 fc1d 	bl	8010dbc <xQueueGenericCreateStatic>
 8010582:	61f8      	str	r0, [r7, #28]
 8010584:	e008      	b.n	8010598 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8010586:	69bb      	ldr	r3, [r7, #24]
 8010588:	2b00      	cmp	r3, #0
 801058a:	d105      	bne.n	8010598 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 801058c:	2200      	movs	r2, #0
 801058e:	68b9      	ldr	r1, [r7, #8]
 8010590:	68f8      	ldr	r0, [r7, #12]
 8010592:	f000 fc8b 	bl	8010eac <xQueueGenericCreate>
 8010596:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8010598:	69fb      	ldr	r3, [r7, #28]
 801059a:	2b00      	cmp	r3, #0
 801059c:	d00c      	beq.n	80105b8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d003      	beq.n	80105ac <osMessageQueueNew+0xd0>
        name = attr->name;
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	617b      	str	r3, [r7, #20]
 80105aa:	e001      	b.n	80105b0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80105ac:	2300      	movs	r3, #0
 80105ae:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80105b0:	6979      	ldr	r1, [r7, #20]
 80105b2:	69f8      	ldr	r0, [r7, #28]
 80105b4:	f001 fabc 	bl	8011b30 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80105b8:	69fb      	ldr	r3, [r7, #28]
}
 80105ba:	4618      	mov	r0, r3
 80105bc:	3720      	adds	r7, #32
 80105be:	46bd      	mov	sp, r7
 80105c0:	bd80      	pop	{r7, pc}
	...

080105c4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80105c4:	b580      	push	{r7, lr}
 80105c6:	b088      	sub	sp, #32
 80105c8:	af00      	add	r7, sp, #0
 80105ca:	60f8      	str	r0, [r7, #12]
 80105cc:	60b9      	str	r1, [r7, #8]
 80105ce:	603b      	str	r3, [r7, #0]
 80105d0:	4613      	mov	r3, r2
 80105d2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80105d8:	2300      	movs	r3, #0
 80105da:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80105dc:	f3ef 8305 	mrs	r3, IPSR
 80105e0:	617b      	str	r3, [r7, #20]
  return(result);
 80105e2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d028      	beq.n	801063a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80105e8:	69bb      	ldr	r3, [r7, #24]
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d005      	beq.n	80105fa <osMessageQueuePut+0x36>
 80105ee:	68bb      	ldr	r3, [r7, #8]
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d002      	beq.n	80105fa <osMessageQueuePut+0x36>
 80105f4:	683b      	ldr	r3, [r7, #0]
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d003      	beq.n	8010602 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80105fa:	f06f 0303 	mvn.w	r3, #3
 80105fe:	61fb      	str	r3, [r7, #28]
 8010600:	e038      	b.n	8010674 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8010602:	2300      	movs	r3, #0
 8010604:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8010606:	f107 0210 	add.w	r2, r7, #16
 801060a:	2300      	movs	r3, #0
 801060c:	68b9      	ldr	r1, [r7, #8]
 801060e:	69b8      	ldr	r0, [r7, #24]
 8010610:	f000 fe5e 	bl	80112d0 <xQueueGenericSendFromISR>
 8010614:	4603      	mov	r3, r0
 8010616:	2b01      	cmp	r3, #1
 8010618:	d003      	beq.n	8010622 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 801061a:	f06f 0302 	mvn.w	r3, #2
 801061e:	61fb      	str	r3, [r7, #28]
 8010620:	e028      	b.n	8010674 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8010622:	693b      	ldr	r3, [r7, #16]
 8010624:	2b00      	cmp	r3, #0
 8010626:	d025      	beq.n	8010674 <osMessageQueuePut+0xb0>
 8010628:	4b15      	ldr	r3, [pc, #84]	; (8010680 <osMessageQueuePut+0xbc>)
 801062a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801062e:	601a      	str	r2, [r3, #0]
 8010630:	f3bf 8f4f 	dsb	sy
 8010634:	f3bf 8f6f 	isb	sy
 8010638:	e01c      	b.n	8010674 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801063a:	69bb      	ldr	r3, [r7, #24]
 801063c:	2b00      	cmp	r3, #0
 801063e:	d002      	beq.n	8010646 <osMessageQueuePut+0x82>
 8010640:	68bb      	ldr	r3, [r7, #8]
 8010642:	2b00      	cmp	r3, #0
 8010644:	d103      	bne.n	801064e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8010646:	f06f 0303 	mvn.w	r3, #3
 801064a:	61fb      	str	r3, [r7, #28]
 801064c:	e012      	b.n	8010674 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801064e:	2300      	movs	r3, #0
 8010650:	683a      	ldr	r2, [r7, #0]
 8010652:	68b9      	ldr	r1, [r7, #8]
 8010654:	69b8      	ldr	r0, [r7, #24]
 8010656:	f000 fd3d 	bl	80110d4 <xQueueGenericSend>
 801065a:	4603      	mov	r3, r0
 801065c:	2b01      	cmp	r3, #1
 801065e:	d009      	beq.n	8010674 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8010660:	683b      	ldr	r3, [r7, #0]
 8010662:	2b00      	cmp	r3, #0
 8010664:	d003      	beq.n	801066e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8010666:	f06f 0301 	mvn.w	r3, #1
 801066a:	61fb      	str	r3, [r7, #28]
 801066c:	e002      	b.n	8010674 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 801066e:	f06f 0302 	mvn.w	r3, #2
 8010672:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8010674:	69fb      	ldr	r3, [r7, #28]
}
 8010676:	4618      	mov	r0, r3
 8010678:	3720      	adds	r7, #32
 801067a:	46bd      	mov	sp, r7
 801067c:	bd80      	pop	{r7, pc}
 801067e:	bf00      	nop
 8010680:	e000ed04 	.word	0xe000ed04

08010684 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8010684:	b580      	push	{r7, lr}
 8010686:	b088      	sub	sp, #32
 8010688:	af00      	add	r7, sp, #0
 801068a:	60f8      	str	r0, [r7, #12]
 801068c:	60b9      	str	r1, [r7, #8]
 801068e:	607a      	str	r2, [r7, #4]
 8010690:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8010696:	2300      	movs	r3, #0
 8010698:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801069a:	f3ef 8305 	mrs	r3, IPSR
 801069e:	617b      	str	r3, [r7, #20]
  return(result);
 80106a0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d028      	beq.n	80106f8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80106a6:	69bb      	ldr	r3, [r7, #24]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d005      	beq.n	80106b8 <osMessageQueueGet+0x34>
 80106ac:	68bb      	ldr	r3, [r7, #8]
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d002      	beq.n	80106b8 <osMessageQueueGet+0x34>
 80106b2:	683b      	ldr	r3, [r7, #0]
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d003      	beq.n	80106c0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80106b8:	f06f 0303 	mvn.w	r3, #3
 80106bc:	61fb      	str	r3, [r7, #28]
 80106be:	e037      	b.n	8010730 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80106c0:	2300      	movs	r3, #0
 80106c2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80106c4:	f107 0310 	add.w	r3, r7, #16
 80106c8:	461a      	mov	r2, r3
 80106ca:	68b9      	ldr	r1, [r7, #8]
 80106cc:	69b8      	ldr	r0, [r7, #24]
 80106ce:	f001 f887 	bl	80117e0 <xQueueReceiveFromISR>
 80106d2:	4603      	mov	r3, r0
 80106d4:	2b01      	cmp	r3, #1
 80106d6:	d003      	beq.n	80106e0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80106d8:	f06f 0302 	mvn.w	r3, #2
 80106dc:	61fb      	str	r3, [r7, #28]
 80106de:	e027      	b.n	8010730 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80106e0:	693b      	ldr	r3, [r7, #16]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d024      	beq.n	8010730 <osMessageQueueGet+0xac>
 80106e6:	4b15      	ldr	r3, [pc, #84]	; (801073c <osMessageQueueGet+0xb8>)
 80106e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80106ec:	601a      	str	r2, [r3, #0]
 80106ee:	f3bf 8f4f 	dsb	sy
 80106f2:	f3bf 8f6f 	isb	sy
 80106f6:	e01b      	b.n	8010730 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80106f8:	69bb      	ldr	r3, [r7, #24]
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d002      	beq.n	8010704 <osMessageQueueGet+0x80>
 80106fe:	68bb      	ldr	r3, [r7, #8]
 8010700:	2b00      	cmp	r3, #0
 8010702:	d103      	bne.n	801070c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8010704:	f06f 0303 	mvn.w	r3, #3
 8010708:	61fb      	str	r3, [r7, #28]
 801070a:	e011      	b.n	8010730 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801070c:	683a      	ldr	r2, [r7, #0]
 801070e:	68b9      	ldr	r1, [r7, #8]
 8010710:	69b8      	ldr	r0, [r7, #24]
 8010712:	f000 fe79 	bl	8011408 <xQueueReceive>
 8010716:	4603      	mov	r3, r0
 8010718:	2b01      	cmp	r3, #1
 801071a:	d009      	beq.n	8010730 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 801071c:	683b      	ldr	r3, [r7, #0]
 801071e:	2b00      	cmp	r3, #0
 8010720:	d003      	beq.n	801072a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8010722:	f06f 0301 	mvn.w	r3, #1
 8010726:	61fb      	str	r3, [r7, #28]
 8010728:	e002      	b.n	8010730 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 801072a:	f06f 0302 	mvn.w	r3, #2
 801072e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8010730:	69fb      	ldr	r3, [r7, #28]
}
 8010732:	4618      	mov	r0, r3
 8010734:	3720      	adds	r7, #32
 8010736:	46bd      	mov	sp, r7
 8010738:	bd80      	pop	{r7, pc}
 801073a:	bf00      	nop
 801073c:	e000ed04 	.word	0xe000ed04

08010740 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8010740:	b480      	push	{r7}
 8010742:	b085      	sub	sp, #20
 8010744:	af00      	add	r7, sp, #0
 8010746:	60f8      	str	r0, [r7, #12]
 8010748:	60b9      	str	r1, [r7, #8]
 801074a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	4a07      	ldr	r2, [pc, #28]	; (801076c <vApplicationGetIdleTaskMemory+0x2c>)
 8010750:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8010752:	68bb      	ldr	r3, [r7, #8]
 8010754:	4a06      	ldr	r2, [pc, #24]	; (8010770 <vApplicationGetIdleTaskMemory+0x30>)
 8010756:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	2280      	movs	r2, #128	; 0x80
 801075c:	601a      	str	r2, [r3, #0]
}
 801075e:	bf00      	nop
 8010760:	3714      	adds	r7, #20
 8010762:	46bd      	mov	sp, r7
 8010764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010768:	4770      	bx	lr
 801076a:	bf00      	nop
 801076c:	200045bc 	.word	0x200045bc
 8010770:	20004628 	.word	0x20004628

08010774 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8010774:	b480      	push	{r7}
 8010776:	b085      	sub	sp, #20
 8010778:	af00      	add	r7, sp, #0
 801077a:	60f8      	str	r0, [r7, #12]
 801077c:	60b9      	str	r1, [r7, #8]
 801077e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	4a07      	ldr	r2, [pc, #28]	; (80107a0 <vApplicationGetTimerTaskMemory+0x2c>)
 8010784:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8010786:	68bb      	ldr	r3, [r7, #8]
 8010788:	4a06      	ldr	r2, [pc, #24]	; (80107a4 <vApplicationGetTimerTaskMemory+0x30>)
 801078a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010792:	601a      	str	r2, [r3, #0]
}
 8010794:	bf00      	nop
 8010796:	3714      	adds	r7, #20
 8010798:	46bd      	mov	sp, r7
 801079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801079e:	4770      	bx	lr
 80107a0:	20004828 	.word	0x20004828
 80107a4:	20004894 	.word	0x20004894

080107a8 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80107a8:	b580      	push	{r7, lr}
 80107aa:	b086      	sub	sp, #24
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d10a      	bne.n	80107cc <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80107b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107ba:	f383 8811 	msr	BASEPRI, r3
 80107be:	f3bf 8f6f 	isb	sy
 80107c2:	f3bf 8f4f 	dsb	sy
 80107c6:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80107c8:	bf00      	nop
 80107ca:	e7fe      	b.n	80107ca <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80107cc:	2320      	movs	r3, #32
 80107ce:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80107d0:	68bb      	ldr	r3, [r7, #8]
 80107d2:	2b20      	cmp	r3, #32
 80107d4:	d00a      	beq.n	80107ec <xEventGroupCreateStatic+0x44>
	__asm volatile
 80107d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107da:	f383 8811 	msr	BASEPRI, r3
 80107de:	f3bf 8f6f 	isb	sy
 80107e2:	f3bf 8f4f 	dsb	sy
 80107e6:	60fb      	str	r3, [r7, #12]
}
 80107e8:	bf00      	nop
 80107ea:	e7fe      	b.n	80107ea <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 80107f0:	697b      	ldr	r3, [r7, #20]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d00a      	beq.n	801080c <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 80107f6:	697b      	ldr	r3, [r7, #20]
 80107f8:	2200      	movs	r2, #0
 80107fa:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80107fc:	697b      	ldr	r3, [r7, #20]
 80107fe:	3304      	adds	r3, #4
 8010800:	4618      	mov	r0, r3
 8010802:	f000 f9bf 	bl	8010b84 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8010806:	697b      	ldr	r3, [r7, #20]
 8010808:	2201      	movs	r2, #1
 801080a:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 801080c:	697b      	ldr	r3, [r7, #20]
	}
 801080e:	4618      	mov	r0, r3
 8010810:	3718      	adds	r7, #24
 8010812:	46bd      	mov	sp, r7
 8010814:	bd80      	pop	{r7, pc}

08010816 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8010816:	b580      	push	{r7, lr}
 8010818:	b082      	sub	sp, #8
 801081a:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 801081c:	2020      	movs	r0, #32
 801081e:	f003 f91b 	bl	8013a58 <pvPortMalloc>
 8010822:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	2b00      	cmp	r3, #0
 8010828:	d00a      	beq.n	8010840 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	2200      	movs	r2, #0
 801082e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	3304      	adds	r3, #4
 8010834:	4618      	mov	r0, r3
 8010836:	f000 f9a5 	bl	8010b84 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	2200      	movs	r2, #0
 801083e:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8010840:	687b      	ldr	r3, [r7, #4]
	}
 8010842:	4618      	mov	r0, r3
 8010844:	3708      	adds	r7, #8
 8010846:	46bd      	mov	sp, r7
 8010848:	bd80      	pop	{r7, pc}
	...

0801084c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 801084c:	b580      	push	{r7, lr}
 801084e:	b090      	sub	sp, #64	; 0x40
 8010850:	af00      	add	r7, sp, #0
 8010852:	60f8      	str	r0, [r7, #12]
 8010854:	60b9      	str	r1, [r7, #8]
 8010856:	607a      	str	r2, [r7, #4]
 8010858:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 801085e:	2300      	movs	r3, #0
 8010860:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8010862:	2300      	movs	r3, #0
 8010864:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	2b00      	cmp	r3, #0
 801086a:	d10a      	bne.n	8010882 <xEventGroupWaitBits+0x36>
	__asm volatile
 801086c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010870:	f383 8811 	msr	BASEPRI, r3
 8010874:	f3bf 8f6f 	isb	sy
 8010878:	f3bf 8f4f 	dsb	sy
 801087c:	623b      	str	r3, [r7, #32]
}
 801087e:	bf00      	nop
 8010880:	e7fe      	b.n	8010880 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8010882:	68bb      	ldr	r3, [r7, #8]
 8010884:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8010888:	2b00      	cmp	r3, #0
 801088a:	d00a      	beq.n	80108a2 <xEventGroupWaitBits+0x56>
	__asm volatile
 801088c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010890:	f383 8811 	msr	BASEPRI, r3
 8010894:	f3bf 8f6f 	isb	sy
 8010898:	f3bf 8f4f 	dsb	sy
 801089c:	61fb      	str	r3, [r7, #28]
}
 801089e:	bf00      	nop
 80108a0:	e7fe      	b.n	80108a0 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80108a2:	68bb      	ldr	r3, [r7, #8]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d10a      	bne.n	80108be <xEventGroupWaitBits+0x72>
	__asm volatile
 80108a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108ac:	f383 8811 	msr	BASEPRI, r3
 80108b0:	f3bf 8f6f 	isb	sy
 80108b4:	f3bf 8f4f 	dsb	sy
 80108b8:	61bb      	str	r3, [r7, #24]
}
 80108ba:	bf00      	nop
 80108bc:	e7fe      	b.n	80108bc <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80108be:	f002 f861 	bl	8012984 <xTaskGetSchedulerState>
 80108c2:	4603      	mov	r3, r0
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d102      	bne.n	80108ce <xEventGroupWaitBits+0x82>
 80108c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d101      	bne.n	80108d2 <xEventGroupWaitBits+0x86>
 80108ce:	2301      	movs	r3, #1
 80108d0:	e000      	b.n	80108d4 <xEventGroupWaitBits+0x88>
 80108d2:	2300      	movs	r3, #0
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d10a      	bne.n	80108ee <xEventGroupWaitBits+0xa2>
	__asm volatile
 80108d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108dc:	f383 8811 	msr	BASEPRI, r3
 80108e0:	f3bf 8f6f 	isb	sy
 80108e4:	f3bf 8f4f 	dsb	sy
 80108e8:	617b      	str	r3, [r7, #20]
}
 80108ea:	bf00      	nop
 80108ec:	e7fe      	b.n	80108ec <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 80108ee:	f001 fbb9 	bl	8012064 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80108f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80108f8:	683a      	ldr	r2, [r7, #0]
 80108fa:	68b9      	ldr	r1, [r7, #8]
 80108fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80108fe:	f000 f90b 	bl	8010b18 <prvTestWaitCondition>
 8010902:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8010904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010906:	2b00      	cmp	r3, #0
 8010908:	d00e      	beq.n	8010928 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 801090a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801090c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 801090e:	2300      	movs	r3, #0
 8010910:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	2b00      	cmp	r3, #0
 8010916:	d028      	beq.n	801096a <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8010918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801091a:	681a      	ldr	r2, [r3, #0]
 801091c:	68bb      	ldr	r3, [r7, #8]
 801091e:	43db      	mvns	r3, r3
 8010920:	401a      	ands	r2, r3
 8010922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010924:	601a      	str	r2, [r3, #0]
 8010926:	e020      	b.n	801096a <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8010928:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801092a:	2b00      	cmp	r3, #0
 801092c:	d104      	bne.n	8010938 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 801092e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010930:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8010932:	2301      	movs	r3, #1
 8010934:	633b      	str	r3, [r7, #48]	; 0x30
 8010936:	e018      	b.n	801096a <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	2b00      	cmp	r3, #0
 801093c:	d003      	beq.n	8010946 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 801093e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010940:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8010944:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8010946:	683b      	ldr	r3, [r7, #0]
 8010948:	2b00      	cmp	r3, #0
 801094a:	d003      	beq.n	8010954 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 801094c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801094e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8010952:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8010954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010956:	1d18      	adds	r0, r3, #4
 8010958:	68ba      	ldr	r2, [r7, #8]
 801095a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801095c:	4313      	orrs	r3, r2
 801095e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010960:	4619      	mov	r1, r3
 8010962:	f001 fd77 	bl	8012454 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8010966:	2300      	movs	r3, #0
 8010968:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 801096a:	f001 fb89 	bl	8012080 <xTaskResumeAll>
 801096e:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8010970:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010972:	2b00      	cmp	r3, #0
 8010974:	d031      	beq.n	80109da <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8010976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010978:	2b00      	cmp	r3, #0
 801097a:	d107      	bne.n	801098c <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 801097c:	4b19      	ldr	r3, [pc, #100]	; (80109e4 <xEventGroupWaitBits+0x198>)
 801097e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010982:	601a      	str	r2, [r3, #0]
 8010984:	f3bf 8f4f 	dsb	sy
 8010988:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 801098c:	f002 f970 	bl	8012c70 <uxTaskResetEventItemValue>
 8010990:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8010992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010998:	2b00      	cmp	r3, #0
 801099a:	d11a      	bne.n	80109d2 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 801099c:	f002 ff3a 	bl	8013814 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80109a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80109a6:	683a      	ldr	r2, [r7, #0]
 80109a8:	68b9      	ldr	r1, [r7, #8]
 80109aa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80109ac:	f000 f8b4 	bl	8010b18 <prvTestWaitCondition>
 80109b0:	4603      	mov	r3, r0
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d009      	beq.n	80109ca <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d006      	beq.n	80109ca <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80109bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109be:	681a      	ldr	r2, [r3, #0]
 80109c0:	68bb      	ldr	r3, [r7, #8]
 80109c2:	43db      	mvns	r3, r3
 80109c4:	401a      	ands	r2, r3
 80109c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109c8:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80109ca:	2301      	movs	r3, #1
 80109cc:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80109ce:	f002 ff51 	bl	8013874 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80109d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80109d8:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80109da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80109dc:	4618      	mov	r0, r3
 80109de:	3740      	adds	r7, #64	; 0x40
 80109e0:	46bd      	mov	sp, r7
 80109e2:	bd80      	pop	{r7, pc}
 80109e4:	e000ed04 	.word	0xe000ed04

080109e8 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80109e8:	b580      	push	{r7, lr}
 80109ea:	b08e      	sub	sp, #56	; 0x38
 80109ec:	af00      	add	r7, sp, #0
 80109ee:	6078      	str	r0, [r7, #4]
 80109f0:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80109f2:	2300      	movs	r3, #0
 80109f4:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80109fa:	2300      	movs	r3, #0
 80109fc:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d10a      	bne.n	8010a1a <xEventGroupSetBits+0x32>
	__asm volatile
 8010a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a08:	f383 8811 	msr	BASEPRI, r3
 8010a0c:	f3bf 8f6f 	isb	sy
 8010a10:	f3bf 8f4f 	dsb	sy
 8010a14:	613b      	str	r3, [r7, #16]
}
 8010a16:	bf00      	nop
 8010a18:	e7fe      	b.n	8010a18 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8010a1a:	683b      	ldr	r3, [r7, #0]
 8010a1c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d00a      	beq.n	8010a3a <xEventGroupSetBits+0x52>
	__asm volatile
 8010a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a28:	f383 8811 	msr	BASEPRI, r3
 8010a2c:	f3bf 8f6f 	isb	sy
 8010a30:	f3bf 8f4f 	dsb	sy
 8010a34:	60fb      	str	r3, [r7, #12]
}
 8010a36:	bf00      	nop
 8010a38:	e7fe      	b.n	8010a38 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8010a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a3c:	3304      	adds	r3, #4
 8010a3e:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a42:	3308      	adds	r3, #8
 8010a44:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8010a46:	f001 fb0d 	bl	8012064 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8010a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a4c:	68db      	ldr	r3, [r3, #12]
 8010a4e:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8010a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a52:	681a      	ldr	r2, [r3, #0]
 8010a54:	683b      	ldr	r3, [r7, #0]
 8010a56:	431a      	orrs	r2, r3
 8010a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a5a:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8010a5c:	e03c      	b.n	8010ad8 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8010a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a60:	685b      	ldr	r3, [r3, #4]
 8010a62:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8010a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8010a6a:	2300      	movs	r3, #0
 8010a6c:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8010a6e:	69bb      	ldr	r3, [r7, #24]
 8010a70:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8010a74:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8010a76:	69bb      	ldr	r3, [r7, #24]
 8010a78:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010a7c:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8010a7e:	697b      	ldr	r3, [r7, #20]
 8010a80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d108      	bne.n	8010a9a <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8010a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a8a:	681a      	ldr	r2, [r3, #0]
 8010a8c:	69bb      	ldr	r3, [r7, #24]
 8010a8e:	4013      	ands	r3, r2
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d00b      	beq.n	8010aac <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8010a94:	2301      	movs	r3, #1
 8010a96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010a98:	e008      	b.n	8010aac <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8010a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a9c:	681a      	ldr	r2, [r3, #0]
 8010a9e:	69bb      	ldr	r3, [r7, #24]
 8010aa0:	4013      	ands	r3, r2
 8010aa2:	69ba      	ldr	r2, [r7, #24]
 8010aa4:	429a      	cmp	r2, r3
 8010aa6:	d101      	bne.n	8010aac <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8010aa8:	2301      	movs	r3, #1
 8010aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8010aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d010      	beq.n	8010ad4 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8010ab2:	697b      	ldr	r3, [r7, #20]
 8010ab4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d003      	beq.n	8010ac4 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8010abc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010abe:	69bb      	ldr	r3, [r7, #24]
 8010ac0:	4313      	orrs	r3, r2
 8010ac2:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8010ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8010acc:	4619      	mov	r1, r3
 8010ace:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010ad0:	f001 fd8c 	bl	80125ec <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8010ad4:	69fb      	ldr	r3, [r7, #28]
 8010ad6:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8010ad8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010ada:	6a3b      	ldr	r3, [r7, #32]
 8010adc:	429a      	cmp	r2, r3
 8010ade:	d1be      	bne.n	8010a5e <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8010ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ae2:	681a      	ldr	r2, [r3, #0]
 8010ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ae6:	43db      	mvns	r3, r3
 8010ae8:	401a      	ands	r2, r3
 8010aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010aec:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8010aee:	f001 fac7 	bl	8012080 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8010af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010af4:	681b      	ldr	r3, [r3, #0]
}
 8010af6:	4618      	mov	r0, r3
 8010af8:	3738      	adds	r7, #56	; 0x38
 8010afa:	46bd      	mov	sp, r7
 8010afc:	bd80      	pop	{r7, pc}

08010afe <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8010afe:	b580      	push	{r7, lr}
 8010b00:	b082      	sub	sp, #8
 8010b02:	af00      	add	r7, sp, #0
 8010b04:	6078      	str	r0, [r7, #4]
 8010b06:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8010b08:	6839      	ldr	r1, [r7, #0]
 8010b0a:	6878      	ldr	r0, [r7, #4]
 8010b0c:	f7ff ff6c 	bl	80109e8 <xEventGroupSetBits>
}
 8010b10:	bf00      	nop
 8010b12:	3708      	adds	r7, #8
 8010b14:	46bd      	mov	sp, r7
 8010b16:	bd80      	pop	{r7, pc}

08010b18 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8010b18:	b480      	push	{r7}
 8010b1a:	b087      	sub	sp, #28
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	60f8      	str	r0, [r7, #12]
 8010b20:	60b9      	str	r1, [r7, #8]
 8010b22:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8010b24:	2300      	movs	r3, #0
 8010b26:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d107      	bne.n	8010b3e <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8010b2e:	68fa      	ldr	r2, [r7, #12]
 8010b30:	68bb      	ldr	r3, [r7, #8]
 8010b32:	4013      	ands	r3, r2
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d00a      	beq.n	8010b4e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8010b38:	2301      	movs	r3, #1
 8010b3a:	617b      	str	r3, [r7, #20]
 8010b3c:	e007      	b.n	8010b4e <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8010b3e:	68fa      	ldr	r2, [r7, #12]
 8010b40:	68bb      	ldr	r3, [r7, #8]
 8010b42:	4013      	ands	r3, r2
 8010b44:	68ba      	ldr	r2, [r7, #8]
 8010b46:	429a      	cmp	r2, r3
 8010b48:	d101      	bne.n	8010b4e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8010b4a:	2301      	movs	r3, #1
 8010b4c:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8010b4e:	697b      	ldr	r3, [r7, #20]
}
 8010b50:	4618      	mov	r0, r3
 8010b52:	371c      	adds	r7, #28
 8010b54:	46bd      	mov	sp, r7
 8010b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b5a:	4770      	bx	lr

08010b5c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8010b5c:	b580      	push	{r7, lr}
 8010b5e:	b086      	sub	sp, #24
 8010b60:	af00      	add	r7, sp, #0
 8010b62:	60f8      	str	r0, [r7, #12]
 8010b64:	60b9      	str	r1, [r7, #8]
 8010b66:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	68ba      	ldr	r2, [r7, #8]
 8010b6c:	68f9      	ldr	r1, [r7, #12]
 8010b6e:	4804      	ldr	r0, [pc, #16]	; (8010b80 <xEventGroupSetBitsFromISR+0x24>)
 8010b70:	f002 fd06 	bl	8013580 <xTimerPendFunctionCallFromISR>
 8010b74:	6178      	str	r0, [r7, #20]

		return xReturn;
 8010b76:	697b      	ldr	r3, [r7, #20]
	}
 8010b78:	4618      	mov	r0, r3
 8010b7a:	3718      	adds	r7, #24
 8010b7c:	46bd      	mov	sp, r7
 8010b7e:	bd80      	pop	{r7, pc}
 8010b80:	08010aff 	.word	0x08010aff

08010b84 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010b84:	b480      	push	{r7}
 8010b86:	b083      	sub	sp, #12
 8010b88:	af00      	add	r7, sp, #0
 8010b8a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	f103 0208 	add.w	r2, r3, #8
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	f04f 32ff 	mov.w	r2, #4294967295
 8010b9c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	f103 0208 	add.w	r2, r3, #8
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	f103 0208 	add.w	r2, r3, #8
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	2200      	movs	r2, #0
 8010bb6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010bb8:	bf00      	nop
 8010bba:	370c      	adds	r7, #12
 8010bbc:	46bd      	mov	sp, r7
 8010bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc2:	4770      	bx	lr

08010bc4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010bc4:	b480      	push	{r7}
 8010bc6:	b083      	sub	sp, #12
 8010bc8:	af00      	add	r7, sp, #0
 8010bca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	2200      	movs	r2, #0
 8010bd0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010bd2:	bf00      	nop
 8010bd4:	370c      	adds	r7, #12
 8010bd6:	46bd      	mov	sp, r7
 8010bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bdc:	4770      	bx	lr

08010bde <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010bde:	b480      	push	{r7}
 8010be0:	b085      	sub	sp, #20
 8010be2:	af00      	add	r7, sp, #0
 8010be4:	6078      	str	r0, [r7, #4]
 8010be6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	685b      	ldr	r3, [r3, #4]
 8010bec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010bee:	683b      	ldr	r3, [r7, #0]
 8010bf0:	68fa      	ldr	r2, [r7, #12]
 8010bf2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	689a      	ldr	r2, [r3, #8]
 8010bf8:	683b      	ldr	r3, [r7, #0]
 8010bfa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	689b      	ldr	r3, [r3, #8]
 8010c00:	683a      	ldr	r2, [r7, #0]
 8010c02:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	683a      	ldr	r2, [r7, #0]
 8010c08:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010c0a:	683b      	ldr	r3, [r7, #0]
 8010c0c:	687a      	ldr	r2, [r7, #4]
 8010c0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	1c5a      	adds	r2, r3, #1
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	601a      	str	r2, [r3, #0]
}
 8010c1a:	bf00      	nop
 8010c1c:	3714      	adds	r7, #20
 8010c1e:	46bd      	mov	sp, r7
 8010c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c24:	4770      	bx	lr

08010c26 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010c26:	b480      	push	{r7}
 8010c28:	b085      	sub	sp, #20
 8010c2a:	af00      	add	r7, sp, #0
 8010c2c:	6078      	str	r0, [r7, #4]
 8010c2e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010c30:	683b      	ldr	r3, [r7, #0]
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010c36:	68bb      	ldr	r3, [r7, #8]
 8010c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c3c:	d103      	bne.n	8010c46 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	691b      	ldr	r3, [r3, #16]
 8010c42:	60fb      	str	r3, [r7, #12]
 8010c44:	e00c      	b.n	8010c60 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	3308      	adds	r3, #8
 8010c4a:	60fb      	str	r3, [r7, #12]
 8010c4c:	e002      	b.n	8010c54 <vListInsert+0x2e>
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	685b      	ldr	r3, [r3, #4]
 8010c52:	60fb      	str	r3, [r7, #12]
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	685b      	ldr	r3, [r3, #4]
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	68ba      	ldr	r2, [r7, #8]
 8010c5c:	429a      	cmp	r2, r3
 8010c5e:	d2f6      	bcs.n	8010c4e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	685a      	ldr	r2, [r3, #4]
 8010c64:	683b      	ldr	r3, [r7, #0]
 8010c66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010c68:	683b      	ldr	r3, [r7, #0]
 8010c6a:	685b      	ldr	r3, [r3, #4]
 8010c6c:	683a      	ldr	r2, [r7, #0]
 8010c6e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010c70:	683b      	ldr	r3, [r7, #0]
 8010c72:	68fa      	ldr	r2, [r7, #12]
 8010c74:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	683a      	ldr	r2, [r7, #0]
 8010c7a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010c7c:	683b      	ldr	r3, [r7, #0]
 8010c7e:	687a      	ldr	r2, [r7, #4]
 8010c80:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	1c5a      	adds	r2, r3, #1
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	601a      	str	r2, [r3, #0]
}
 8010c8c:	bf00      	nop
 8010c8e:	3714      	adds	r7, #20
 8010c90:	46bd      	mov	sp, r7
 8010c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c96:	4770      	bx	lr

08010c98 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010c98:	b480      	push	{r7}
 8010c9a:	b085      	sub	sp, #20
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	691b      	ldr	r3, [r3, #16]
 8010ca4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	685b      	ldr	r3, [r3, #4]
 8010caa:	687a      	ldr	r2, [r7, #4]
 8010cac:	6892      	ldr	r2, [r2, #8]
 8010cae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	689b      	ldr	r3, [r3, #8]
 8010cb4:	687a      	ldr	r2, [r7, #4]
 8010cb6:	6852      	ldr	r2, [r2, #4]
 8010cb8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010cba:	68fb      	ldr	r3, [r7, #12]
 8010cbc:	685b      	ldr	r3, [r3, #4]
 8010cbe:	687a      	ldr	r2, [r7, #4]
 8010cc0:	429a      	cmp	r2, r3
 8010cc2:	d103      	bne.n	8010ccc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	689a      	ldr	r2, [r3, #8]
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	2200      	movs	r2, #0
 8010cd0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	1e5a      	subs	r2, r3, #1
 8010cd8:	68fb      	ldr	r3, [r7, #12]
 8010cda:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	681b      	ldr	r3, [r3, #0]
}
 8010ce0:	4618      	mov	r0, r3
 8010ce2:	3714      	adds	r7, #20
 8010ce4:	46bd      	mov	sp, r7
 8010ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cea:	4770      	bx	lr

08010cec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010cec:	b580      	push	{r7, lr}
 8010cee:	b084      	sub	sp, #16
 8010cf0:	af00      	add	r7, sp, #0
 8010cf2:	6078      	str	r0, [r7, #4]
 8010cf4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d10a      	bne.n	8010d16 <xQueueGenericReset+0x2a>
	__asm volatile
 8010d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d04:	f383 8811 	msr	BASEPRI, r3
 8010d08:	f3bf 8f6f 	isb	sy
 8010d0c:	f3bf 8f4f 	dsb	sy
 8010d10:	60bb      	str	r3, [r7, #8]
}
 8010d12:	bf00      	nop
 8010d14:	e7fe      	b.n	8010d14 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8010d16:	f002 fd7d 	bl	8013814 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	681a      	ldr	r2, [r3, #0]
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010d22:	68f9      	ldr	r1, [r7, #12]
 8010d24:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010d26:	fb01 f303 	mul.w	r3, r1, r3
 8010d2a:	441a      	add	r2, r3
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010d30:	68fb      	ldr	r3, [r7, #12]
 8010d32:	2200      	movs	r2, #0
 8010d34:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	681a      	ldr	r2, [r3, #0]
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	681a      	ldr	r2, [r3, #0]
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010d46:	3b01      	subs	r3, #1
 8010d48:	68f9      	ldr	r1, [r7, #12]
 8010d4a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010d4c:	fb01 f303 	mul.w	r3, r1, r3
 8010d50:	441a      	add	r2, r3
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	22ff      	movs	r2, #255	; 0xff
 8010d5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	22ff      	movs	r2, #255	; 0xff
 8010d62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8010d66:	683b      	ldr	r3, [r7, #0]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d114      	bne.n	8010d96 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	691b      	ldr	r3, [r3, #16]
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d01a      	beq.n	8010daa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	3310      	adds	r3, #16
 8010d78:	4618      	mov	r0, r3
 8010d7a:	f001 fbd3 	bl	8012524 <xTaskRemoveFromEventList>
 8010d7e:	4603      	mov	r3, r0
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d012      	beq.n	8010daa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010d84:	4b0c      	ldr	r3, [pc, #48]	; (8010db8 <xQueueGenericReset+0xcc>)
 8010d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d8a:	601a      	str	r2, [r3, #0]
 8010d8c:	f3bf 8f4f 	dsb	sy
 8010d90:	f3bf 8f6f 	isb	sy
 8010d94:	e009      	b.n	8010daa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	3310      	adds	r3, #16
 8010d9a:	4618      	mov	r0, r3
 8010d9c:	f7ff fef2 	bl	8010b84 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	3324      	adds	r3, #36	; 0x24
 8010da4:	4618      	mov	r0, r3
 8010da6:	f7ff feed 	bl	8010b84 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010daa:	f002 fd63 	bl	8013874 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010dae:	2301      	movs	r3, #1
}
 8010db0:	4618      	mov	r0, r3
 8010db2:	3710      	adds	r7, #16
 8010db4:	46bd      	mov	sp, r7
 8010db6:	bd80      	pop	{r7, pc}
 8010db8:	e000ed04 	.word	0xe000ed04

08010dbc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010dbc:	b580      	push	{r7, lr}
 8010dbe:	b08e      	sub	sp, #56	; 0x38
 8010dc0:	af02      	add	r7, sp, #8
 8010dc2:	60f8      	str	r0, [r7, #12]
 8010dc4:	60b9      	str	r1, [r7, #8]
 8010dc6:	607a      	str	r2, [r7, #4]
 8010dc8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d10a      	bne.n	8010de6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8010dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dd4:	f383 8811 	msr	BASEPRI, r3
 8010dd8:	f3bf 8f6f 	isb	sy
 8010ddc:	f3bf 8f4f 	dsb	sy
 8010de0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010de2:	bf00      	nop
 8010de4:	e7fe      	b.n	8010de4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010de6:	683b      	ldr	r3, [r7, #0]
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d10a      	bne.n	8010e02 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8010dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010df0:	f383 8811 	msr	BASEPRI, r3
 8010df4:	f3bf 8f6f 	isb	sy
 8010df8:	f3bf 8f4f 	dsb	sy
 8010dfc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010dfe:	bf00      	nop
 8010e00:	e7fe      	b.n	8010e00 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d002      	beq.n	8010e0e <xQueueGenericCreateStatic+0x52>
 8010e08:	68bb      	ldr	r3, [r7, #8]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d001      	beq.n	8010e12 <xQueueGenericCreateStatic+0x56>
 8010e0e:	2301      	movs	r3, #1
 8010e10:	e000      	b.n	8010e14 <xQueueGenericCreateStatic+0x58>
 8010e12:	2300      	movs	r3, #0
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d10a      	bne.n	8010e2e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8010e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e1c:	f383 8811 	msr	BASEPRI, r3
 8010e20:	f3bf 8f6f 	isb	sy
 8010e24:	f3bf 8f4f 	dsb	sy
 8010e28:	623b      	str	r3, [r7, #32]
}
 8010e2a:	bf00      	nop
 8010e2c:	e7fe      	b.n	8010e2c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d102      	bne.n	8010e3a <xQueueGenericCreateStatic+0x7e>
 8010e34:	68bb      	ldr	r3, [r7, #8]
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d101      	bne.n	8010e3e <xQueueGenericCreateStatic+0x82>
 8010e3a:	2301      	movs	r3, #1
 8010e3c:	e000      	b.n	8010e40 <xQueueGenericCreateStatic+0x84>
 8010e3e:	2300      	movs	r3, #0
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d10a      	bne.n	8010e5a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8010e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e48:	f383 8811 	msr	BASEPRI, r3
 8010e4c:	f3bf 8f6f 	isb	sy
 8010e50:	f3bf 8f4f 	dsb	sy
 8010e54:	61fb      	str	r3, [r7, #28]
}
 8010e56:	bf00      	nop
 8010e58:	e7fe      	b.n	8010e58 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010e5a:	2350      	movs	r3, #80	; 0x50
 8010e5c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010e5e:	697b      	ldr	r3, [r7, #20]
 8010e60:	2b50      	cmp	r3, #80	; 0x50
 8010e62:	d00a      	beq.n	8010e7a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8010e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e68:	f383 8811 	msr	BASEPRI, r3
 8010e6c:	f3bf 8f6f 	isb	sy
 8010e70:	f3bf 8f4f 	dsb	sy
 8010e74:	61bb      	str	r3, [r7, #24]
}
 8010e76:	bf00      	nop
 8010e78:	e7fe      	b.n	8010e78 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010e7a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010e7c:	683b      	ldr	r3, [r7, #0]
 8010e7e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8010e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d00d      	beq.n	8010ea2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e88:	2201      	movs	r2, #1
 8010e8a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010e8e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8010e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e94:	9300      	str	r3, [sp, #0]
 8010e96:	4613      	mov	r3, r2
 8010e98:	687a      	ldr	r2, [r7, #4]
 8010e9a:	68b9      	ldr	r1, [r7, #8]
 8010e9c:	68f8      	ldr	r0, [r7, #12]
 8010e9e:	f000 f83f 	bl	8010f20 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8010ea4:	4618      	mov	r0, r3
 8010ea6:	3730      	adds	r7, #48	; 0x30
 8010ea8:	46bd      	mov	sp, r7
 8010eaa:	bd80      	pop	{r7, pc}

08010eac <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010eac:	b580      	push	{r7, lr}
 8010eae:	b08a      	sub	sp, #40	; 0x28
 8010eb0:	af02      	add	r7, sp, #8
 8010eb2:	60f8      	str	r0, [r7, #12]
 8010eb4:	60b9      	str	r1, [r7, #8]
 8010eb6:	4613      	mov	r3, r2
 8010eb8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d10a      	bne.n	8010ed6 <xQueueGenericCreate+0x2a>
	__asm volatile
 8010ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ec4:	f383 8811 	msr	BASEPRI, r3
 8010ec8:	f3bf 8f6f 	isb	sy
 8010ecc:	f3bf 8f4f 	dsb	sy
 8010ed0:	613b      	str	r3, [r7, #16]
}
 8010ed2:	bf00      	nop
 8010ed4:	e7fe      	b.n	8010ed4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	68ba      	ldr	r2, [r7, #8]
 8010eda:	fb02 f303 	mul.w	r3, r2, r3
 8010ede:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010ee0:	69fb      	ldr	r3, [r7, #28]
 8010ee2:	3350      	adds	r3, #80	; 0x50
 8010ee4:	4618      	mov	r0, r3
 8010ee6:	f002 fdb7 	bl	8013a58 <pvPortMalloc>
 8010eea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010eec:	69bb      	ldr	r3, [r7, #24]
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d011      	beq.n	8010f16 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8010ef2:	69bb      	ldr	r3, [r7, #24]
 8010ef4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010ef6:	697b      	ldr	r3, [r7, #20]
 8010ef8:	3350      	adds	r3, #80	; 0x50
 8010efa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010efc:	69bb      	ldr	r3, [r7, #24]
 8010efe:	2200      	movs	r2, #0
 8010f00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010f04:	79fa      	ldrb	r2, [r7, #7]
 8010f06:	69bb      	ldr	r3, [r7, #24]
 8010f08:	9300      	str	r3, [sp, #0]
 8010f0a:	4613      	mov	r3, r2
 8010f0c:	697a      	ldr	r2, [r7, #20]
 8010f0e:	68b9      	ldr	r1, [r7, #8]
 8010f10:	68f8      	ldr	r0, [r7, #12]
 8010f12:	f000 f805 	bl	8010f20 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010f16:	69bb      	ldr	r3, [r7, #24]
	}
 8010f18:	4618      	mov	r0, r3
 8010f1a:	3720      	adds	r7, #32
 8010f1c:	46bd      	mov	sp, r7
 8010f1e:	bd80      	pop	{r7, pc}

08010f20 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010f20:	b580      	push	{r7, lr}
 8010f22:	b084      	sub	sp, #16
 8010f24:	af00      	add	r7, sp, #0
 8010f26:	60f8      	str	r0, [r7, #12]
 8010f28:	60b9      	str	r1, [r7, #8]
 8010f2a:	607a      	str	r2, [r7, #4]
 8010f2c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010f2e:	68bb      	ldr	r3, [r7, #8]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d103      	bne.n	8010f3c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010f34:	69bb      	ldr	r3, [r7, #24]
 8010f36:	69ba      	ldr	r2, [r7, #24]
 8010f38:	601a      	str	r2, [r3, #0]
 8010f3a:	e002      	b.n	8010f42 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010f3c:	69bb      	ldr	r3, [r7, #24]
 8010f3e:	687a      	ldr	r2, [r7, #4]
 8010f40:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010f42:	69bb      	ldr	r3, [r7, #24]
 8010f44:	68fa      	ldr	r2, [r7, #12]
 8010f46:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010f48:	69bb      	ldr	r3, [r7, #24]
 8010f4a:	68ba      	ldr	r2, [r7, #8]
 8010f4c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010f4e:	2101      	movs	r1, #1
 8010f50:	69b8      	ldr	r0, [r7, #24]
 8010f52:	f7ff fecb 	bl	8010cec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8010f56:	69bb      	ldr	r3, [r7, #24]
 8010f58:	78fa      	ldrb	r2, [r7, #3]
 8010f5a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010f5e:	bf00      	nop
 8010f60:	3710      	adds	r7, #16
 8010f62:	46bd      	mov	sp, r7
 8010f64:	bd80      	pop	{r7, pc}

08010f66 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8010f66:	b580      	push	{r7, lr}
 8010f68:	b082      	sub	sp, #8
 8010f6a:	af00      	add	r7, sp, #0
 8010f6c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d00e      	beq.n	8010f92 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	2200      	movs	r2, #0
 8010f78:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	2200      	movs	r2, #0
 8010f7e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	2200      	movs	r2, #0
 8010f84:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8010f86:	2300      	movs	r3, #0
 8010f88:	2200      	movs	r2, #0
 8010f8a:	2100      	movs	r1, #0
 8010f8c:	6878      	ldr	r0, [r7, #4]
 8010f8e:	f000 f8a1 	bl	80110d4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8010f92:	bf00      	nop
 8010f94:	3708      	adds	r7, #8
 8010f96:	46bd      	mov	sp, r7
 8010f98:	bd80      	pop	{r7, pc}

08010f9a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8010f9a:	b580      	push	{r7, lr}
 8010f9c:	b086      	sub	sp, #24
 8010f9e:	af00      	add	r7, sp, #0
 8010fa0:	4603      	mov	r3, r0
 8010fa2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8010fa4:	2301      	movs	r3, #1
 8010fa6:	617b      	str	r3, [r7, #20]
 8010fa8:	2300      	movs	r3, #0
 8010faa:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8010fac:	79fb      	ldrb	r3, [r7, #7]
 8010fae:	461a      	mov	r2, r3
 8010fb0:	6939      	ldr	r1, [r7, #16]
 8010fb2:	6978      	ldr	r0, [r7, #20]
 8010fb4:	f7ff ff7a 	bl	8010eac <xQueueGenericCreate>
 8010fb8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8010fba:	68f8      	ldr	r0, [r7, #12]
 8010fbc:	f7ff ffd3 	bl	8010f66 <prvInitialiseMutex>

		return xNewQueue;
 8010fc0:	68fb      	ldr	r3, [r7, #12]
	}
 8010fc2:	4618      	mov	r0, r3
 8010fc4:	3718      	adds	r7, #24
 8010fc6:	46bd      	mov	sp, r7
 8010fc8:	bd80      	pop	{r7, pc}

08010fca <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8010fca:	b580      	push	{r7, lr}
 8010fcc:	b088      	sub	sp, #32
 8010fce:	af02      	add	r7, sp, #8
 8010fd0:	4603      	mov	r3, r0
 8010fd2:	6039      	str	r1, [r7, #0]
 8010fd4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8010fd6:	2301      	movs	r3, #1
 8010fd8:	617b      	str	r3, [r7, #20]
 8010fda:	2300      	movs	r3, #0
 8010fdc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8010fde:	79fb      	ldrb	r3, [r7, #7]
 8010fe0:	9300      	str	r3, [sp, #0]
 8010fe2:	683b      	ldr	r3, [r7, #0]
 8010fe4:	2200      	movs	r2, #0
 8010fe6:	6939      	ldr	r1, [r7, #16]
 8010fe8:	6978      	ldr	r0, [r7, #20]
 8010fea:	f7ff fee7 	bl	8010dbc <xQueueGenericCreateStatic>
 8010fee:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8010ff0:	68f8      	ldr	r0, [r7, #12]
 8010ff2:	f7ff ffb8 	bl	8010f66 <prvInitialiseMutex>

		return xNewQueue;
 8010ff6:	68fb      	ldr	r3, [r7, #12]
	}
 8010ff8:	4618      	mov	r0, r3
 8010ffa:	3718      	adds	r7, #24
 8010ffc:	46bd      	mov	sp, r7
 8010ffe:	bd80      	pop	{r7, pc}

08011000 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8011000:	b590      	push	{r4, r7, lr}
 8011002:	b087      	sub	sp, #28
 8011004:	af00      	add	r7, sp, #0
 8011006:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 801100c:	693b      	ldr	r3, [r7, #16]
 801100e:	2b00      	cmp	r3, #0
 8011010:	d10a      	bne.n	8011028 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8011012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011016:	f383 8811 	msr	BASEPRI, r3
 801101a:	f3bf 8f6f 	isb	sy
 801101e:	f3bf 8f4f 	dsb	sy
 8011022:	60fb      	str	r3, [r7, #12]
}
 8011024:	bf00      	nop
 8011026:	e7fe      	b.n	8011026 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8011028:	693b      	ldr	r3, [r7, #16]
 801102a:	689c      	ldr	r4, [r3, #8]
 801102c:	f001 fc9a 	bl	8012964 <xTaskGetCurrentTaskHandle>
 8011030:	4603      	mov	r3, r0
 8011032:	429c      	cmp	r4, r3
 8011034:	d111      	bne.n	801105a <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8011036:	693b      	ldr	r3, [r7, #16]
 8011038:	68db      	ldr	r3, [r3, #12]
 801103a:	1e5a      	subs	r2, r3, #1
 801103c:	693b      	ldr	r3, [r7, #16]
 801103e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8011040:	693b      	ldr	r3, [r7, #16]
 8011042:	68db      	ldr	r3, [r3, #12]
 8011044:	2b00      	cmp	r3, #0
 8011046:	d105      	bne.n	8011054 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8011048:	2300      	movs	r3, #0
 801104a:	2200      	movs	r2, #0
 801104c:	2100      	movs	r1, #0
 801104e:	6938      	ldr	r0, [r7, #16]
 8011050:	f000 f840 	bl	80110d4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8011054:	2301      	movs	r3, #1
 8011056:	617b      	str	r3, [r7, #20]
 8011058:	e001      	b.n	801105e <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 801105a:	2300      	movs	r3, #0
 801105c:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 801105e:	697b      	ldr	r3, [r7, #20]
	}
 8011060:	4618      	mov	r0, r3
 8011062:	371c      	adds	r7, #28
 8011064:	46bd      	mov	sp, r7
 8011066:	bd90      	pop	{r4, r7, pc}

08011068 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8011068:	b590      	push	{r4, r7, lr}
 801106a:	b087      	sub	sp, #28
 801106c:	af00      	add	r7, sp, #0
 801106e:	6078      	str	r0, [r7, #4]
 8011070:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8011076:	693b      	ldr	r3, [r7, #16]
 8011078:	2b00      	cmp	r3, #0
 801107a:	d10a      	bne.n	8011092 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 801107c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011080:	f383 8811 	msr	BASEPRI, r3
 8011084:	f3bf 8f6f 	isb	sy
 8011088:	f3bf 8f4f 	dsb	sy
 801108c:	60fb      	str	r3, [r7, #12]
}
 801108e:	bf00      	nop
 8011090:	e7fe      	b.n	8011090 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8011092:	693b      	ldr	r3, [r7, #16]
 8011094:	689c      	ldr	r4, [r3, #8]
 8011096:	f001 fc65 	bl	8012964 <xTaskGetCurrentTaskHandle>
 801109a:	4603      	mov	r3, r0
 801109c:	429c      	cmp	r4, r3
 801109e:	d107      	bne.n	80110b0 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80110a0:	693b      	ldr	r3, [r7, #16]
 80110a2:	68db      	ldr	r3, [r3, #12]
 80110a4:	1c5a      	adds	r2, r3, #1
 80110a6:	693b      	ldr	r3, [r7, #16]
 80110a8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80110aa:	2301      	movs	r3, #1
 80110ac:	617b      	str	r3, [r7, #20]
 80110ae:	e00c      	b.n	80110ca <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80110b0:	6839      	ldr	r1, [r7, #0]
 80110b2:	6938      	ldr	r0, [r7, #16]
 80110b4:	f000 fa88 	bl	80115c8 <xQueueSemaphoreTake>
 80110b8:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80110ba:	697b      	ldr	r3, [r7, #20]
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d004      	beq.n	80110ca <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80110c0:	693b      	ldr	r3, [r7, #16]
 80110c2:	68db      	ldr	r3, [r3, #12]
 80110c4:	1c5a      	adds	r2, r3, #1
 80110c6:	693b      	ldr	r3, [r7, #16]
 80110c8:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80110ca:	697b      	ldr	r3, [r7, #20]
	}
 80110cc:	4618      	mov	r0, r3
 80110ce:	371c      	adds	r7, #28
 80110d0:	46bd      	mov	sp, r7
 80110d2:	bd90      	pop	{r4, r7, pc}

080110d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80110d4:	b580      	push	{r7, lr}
 80110d6:	b08e      	sub	sp, #56	; 0x38
 80110d8:	af00      	add	r7, sp, #0
 80110da:	60f8      	str	r0, [r7, #12]
 80110dc:	60b9      	str	r1, [r7, #8]
 80110de:	607a      	str	r2, [r7, #4]
 80110e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80110e2:	2300      	movs	r3, #0
 80110e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80110ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d10a      	bne.n	8011106 <xQueueGenericSend+0x32>
	__asm volatile
 80110f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110f4:	f383 8811 	msr	BASEPRI, r3
 80110f8:	f3bf 8f6f 	isb	sy
 80110fc:	f3bf 8f4f 	dsb	sy
 8011100:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011102:	bf00      	nop
 8011104:	e7fe      	b.n	8011104 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011106:	68bb      	ldr	r3, [r7, #8]
 8011108:	2b00      	cmp	r3, #0
 801110a:	d103      	bne.n	8011114 <xQueueGenericSend+0x40>
 801110c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801110e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011110:	2b00      	cmp	r3, #0
 8011112:	d101      	bne.n	8011118 <xQueueGenericSend+0x44>
 8011114:	2301      	movs	r3, #1
 8011116:	e000      	b.n	801111a <xQueueGenericSend+0x46>
 8011118:	2300      	movs	r3, #0
 801111a:	2b00      	cmp	r3, #0
 801111c:	d10a      	bne.n	8011134 <xQueueGenericSend+0x60>
	__asm volatile
 801111e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011122:	f383 8811 	msr	BASEPRI, r3
 8011126:	f3bf 8f6f 	isb	sy
 801112a:	f3bf 8f4f 	dsb	sy
 801112e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011130:	bf00      	nop
 8011132:	e7fe      	b.n	8011132 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011134:	683b      	ldr	r3, [r7, #0]
 8011136:	2b02      	cmp	r3, #2
 8011138:	d103      	bne.n	8011142 <xQueueGenericSend+0x6e>
 801113a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801113c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801113e:	2b01      	cmp	r3, #1
 8011140:	d101      	bne.n	8011146 <xQueueGenericSend+0x72>
 8011142:	2301      	movs	r3, #1
 8011144:	e000      	b.n	8011148 <xQueueGenericSend+0x74>
 8011146:	2300      	movs	r3, #0
 8011148:	2b00      	cmp	r3, #0
 801114a:	d10a      	bne.n	8011162 <xQueueGenericSend+0x8e>
	__asm volatile
 801114c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011150:	f383 8811 	msr	BASEPRI, r3
 8011154:	f3bf 8f6f 	isb	sy
 8011158:	f3bf 8f4f 	dsb	sy
 801115c:	623b      	str	r3, [r7, #32]
}
 801115e:	bf00      	nop
 8011160:	e7fe      	b.n	8011160 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011162:	f001 fc0f 	bl	8012984 <xTaskGetSchedulerState>
 8011166:	4603      	mov	r3, r0
 8011168:	2b00      	cmp	r3, #0
 801116a:	d102      	bne.n	8011172 <xQueueGenericSend+0x9e>
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	2b00      	cmp	r3, #0
 8011170:	d101      	bne.n	8011176 <xQueueGenericSend+0xa2>
 8011172:	2301      	movs	r3, #1
 8011174:	e000      	b.n	8011178 <xQueueGenericSend+0xa4>
 8011176:	2300      	movs	r3, #0
 8011178:	2b00      	cmp	r3, #0
 801117a:	d10a      	bne.n	8011192 <xQueueGenericSend+0xbe>
	__asm volatile
 801117c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011180:	f383 8811 	msr	BASEPRI, r3
 8011184:	f3bf 8f6f 	isb	sy
 8011188:	f3bf 8f4f 	dsb	sy
 801118c:	61fb      	str	r3, [r7, #28]
}
 801118e:	bf00      	nop
 8011190:	e7fe      	b.n	8011190 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011192:	f002 fb3f 	bl	8013814 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011198:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801119a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801119c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801119e:	429a      	cmp	r2, r3
 80111a0:	d302      	bcc.n	80111a8 <xQueueGenericSend+0xd4>
 80111a2:	683b      	ldr	r3, [r7, #0]
 80111a4:	2b02      	cmp	r3, #2
 80111a6:	d129      	bne.n	80111fc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80111a8:	683a      	ldr	r2, [r7, #0]
 80111aa:	68b9      	ldr	r1, [r7, #8]
 80111ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80111ae:	f000 fbaf 	bl	8011910 <prvCopyDataToQueue>
 80111b2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80111b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d010      	beq.n	80111de <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80111bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111be:	3324      	adds	r3, #36	; 0x24
 80111c0:	4618      	mov	r0, r3
 80111c2:	f001 f9af 	bl	8012524 <xTaskRemoveFromEventList>
 80111c6:	4603      	mov	r3, r0
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d013      	beq.n	80111f4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80111cc:	4b3f      	ldr	r3, [pc, #252]	; (80112cc <xQueueGenericSend+0x1f8>)
 80111ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80111d2:	601a      	str	r2, [r3, #0]
 80111d4:	f3bf 8f4f 	dsb	sy
 80111d8:	f3bf 8f6f 	isb	sy
 80111dc:	e00a      	b.n	80111f4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80111de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d007      	beq.n	80111f4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80111e4:	4b39      	ldr	r3, [pc, #228]	; (80112cc <xQueueGenericSend+0x1f8>)
 80111e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80111ea:	601a      	str	r2, [r3, #0]
 80111ec:	f3bf 8f4f 	dsb	sy
 80111f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80111f4:	f002 fb3e 	bl	8013874 <vPortExitCritical>
				return pdPASS;
 80111f8:	2301      	movs	r3, #1
 80111fa:	e063      	b.n	80112c4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d103      	bne.n	801120a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011202:	f002 fb37 	bl	8013874 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011206:	2300      	movs	r3, #0
 8011208:	e05c      	b.n	80112c4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801120a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801120c:	2b00      	cmp	r3, #0
 801120e:	d106      	bne.n	801121e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011210:	f107 0314 	add.w	r3, r7, #20
 8011214:	4618      	mov	r0, r3
 8011216:	f001 fa4b 	bl	80126b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801121a:	2301      	movs	r3, #1
 801121c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801121e:	f002 fb29 	bl	8013874 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011222:	f000 ff1f 	bl	8012064 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011226:	f002 faf5 	bl	8013814 <vPortEnterCritical>
 801122a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801122c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011230:	b25b      	sxtb	r3, r3
 8011232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011236:	d103      	bne.n	8011240 <xQueueGenericSend+0x16c>
 8011238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801123a:	2200      	movs	r2, #0
 801123c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011242:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011246:	b25b      	sxtb	r3, r3
 8011248:	f1b3 3fff 	cmp.w	r3, #4294967295
 801124c:	d103      	bne.n	8011256 <xQueueGenericSend+0x182>
 801124e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011250:	2200      	movs	r2, #0
 8011252:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011256:	f002 fb0d 	bl	8013874 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801125a:	1d3a      	adds	r2, r7, #4
 801125c:	f107 0314 	add.w	r3, r7, #20
 8011260:	4611      	mov	r1, r2
 8011262:	4618      	mov	r0, r3
 8011264:	f001 fa3a 	bl	80126dc <xTaskCheckForTimeOut>
 8011268:	4603      	mov	r3, r0
 801126a:	2b00      	cmp	r3, #0
 801126c:	d124      	bne.n	80112b8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801126e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011270:	f000 fc46 	bl	8011b00 <prvIsQueueFull>
 8011274:	4603      	mov	r3, r0
 8011276:	2b00      	cmp	r3, #0
 8011278:	d018      	beq.n	80112ac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801127a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801127c:	3310      	adds	r3, #16
 801127e:	687a      	ldr	r2, [r7, #4]
 8011280:	4611      	mov	r1, r2
 8011282:	4618      	mov	r0, r3
 8011284:	f001 f8c2 	bl	801240c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011288:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801128a:	f000 fbd1 	bl	8011a30 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801128e:	f000 fef7 	bl	8012080 <xTaskResumeAll>
 8011292:	4603      	mov	r3, r0
 8011294:	2b00      	cmp	r3, #0
 8011296:	f47f af7c 	bne.w	8011192 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801129a:	4b0c      	ldr	r3, [pc, #48]	; (80112cc <xQueueGenericSend+0x1f8>)
 801129c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80112a0:	601a      	str	r2, [r3, #0]
 80112a2:	f3bf 8f4f 	dsb	sy
 80112a6:	f3bf 8f6f 	isb	sy
 80112aa:	e772      	b.n	8011192 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80112ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80112ae:	f000 fbbf 	bl	8011a30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80112b2:	f000 fee5 	bl	8012080 <xTaskResumeAll>
 80112b6:	e76c      	b.n	8011192 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80112b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80112ba:	f000 fbb9 	bl	8011a30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80112be:	f000 fedf 	bl	8012080 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80112c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80112c4:	4618      	mov	r0, r3
 80112c6:	3738      	adds	r7, #56	; 0x38
 80112c8:	46bd      	mov	sp, r7
 80112ca:	bd80      	pop	{r7, pc}
 80112cc:	e000ed04 	.word	0xe000ed04

080112d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80112d0:	b580      	push	{r7, lr}
 80112d2:	b090      	sub	sp, #64	; 0x40
 80112d4:	af00      	add	r7, sp, #0
 80112d6:	60f8      	str	r0, [r7, #12]
 80112d8:	60b9      	str	r1, [r7, #8]
 80112da:	607a      	str	r2, [r7, #4]
 80112dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80112e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d10a      	bne.n	80112fe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80112e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112ec:	f383 8811 	msr	BASEPRI, r3
 80112f0:	f3bf 8f6f 	isb	sy
 80112f4:	f3bf 8f4f 	dsb	sy
 80112f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80112fa:	bf00      	nop
 80112fc:	e7fe      	b.n	80112fc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80112fe:	68bb      	ldr	r3, [r7, #8]
 8011300:	2b00      	cmp	r3, #0
 8011302:	d103      	bne.n	801130c <xQueueGenericSendFromISR+0x3c>
 8011304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011308:	2b00      	cmp	r3, #0
 801130a:	d101      	bne.n	8011310 <xQueueGenericSendFromISR+0x40>
 801130c:	2301      	movs	r3, #1
 801130e:	e000      	b.n	8011312 <xQueueGenericSendFromISR+0x42>
 8011310:	2300      	movs	r3, #0
 8011312:	2b00      	cmp	r3, #0
 8011314:	d10a      	bne.n	801132c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8011316:	f04f 0350 	mov.w	r3, #80	; 0x50
 801131a:	f383 8811 	msr	BASEPRI, r3
 801131e:	f3bf 8f6f 	isb	sy
 8011322:	f3bf 8f4f 	dsb	sy
 8011326:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011328:	bf00      	nop
 801132a:	e7fe      	b.n	801132a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801132c:	683b      	ldr	r3, [r7, #0]
 801132e:	2b02      	cmp	r3, #2
 8011330:	d103      	bne.n	801133a <xQueueGenericSendFromISR+0x6a>
 8011332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011336:	2b01      	cmp	r3, #1
 8011338:	d101      	bne.n	801133e <xQueueGenericSendFromISR+0x6e>
 801133a:	2301      	movs	r3, #1
 801133c:	e000      	b.n	8011340 <xQueueGenericSendFromISR+0x70>
 801133e:	2300      	movs	r3, #0
 8011340:	2b00      	cmp	r3, #0
 8011342:	d10a      	bne.n	801135a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8011344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011348:	f383 8811 	msr	BASEPRI, r3
 801134c:	f3bf 8f6f 	isb	sy
 8011350:	f3bf 8f4f 	dsb	sy
 8011354:	623b      	str	r3, [r7, #32]
}
 8011356:	bf00      	nop
 8011358:	e7fe      	b.n	8011358 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801135a:	f002 fb3d 	bl	80139d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801135e:	f3ef 8211 	mrs	r2, BASEPRI
 8011362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011366:	f383 8811 	msr	BASEPRI, r3
 801136a:	f3bf 8f6f 	isb	sy
 801136e:	f3bf 8f4f 	dsb	sy
 8011372:	61fa      	str	r2, [r7, #28]
 8011374:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011376:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011378:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801137a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801137c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801137e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011382:	429a      	cmp	r2, r3
 8011384:	d302      	bcc.n	801138c <xQueueGenericSendFromISR+0xbc>
 8011386:	683b      	ldr	r3, [r7, #0]
 8011388:	2b02      	cmp	r3, #2
 801138a:	d12f      	bne.n	80113ec <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801138c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801138e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011392:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801139a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801139c:	683a      	ldr	r2, [r7, #0]
 801139e:	68b9      	ldr	r1, [r7, #8]
 80113a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80113a2:	f000 fab5 	bl	8011910 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80113a6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80113aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113ae:	d112      	bne.n	80113d6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80113b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d016      	beq.n	80113e6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80113b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113ba:	3324      	adds	r3, #36	; 0x24
 80113bc:	4618      	mov	r0, r3
 80113be:	f001 f8b1 	bl	8012524 <xTaskRemoveFromEventList>
 80113c2:	4603      	mov	r3, r0
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d00e      	beq.n	80113e6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d00b      	beq.n	80113e6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	2201      	movs	r2, #1
 80113d2:	601a      	str	r2, [r3, #0]
 80113d4:	e007      	b.n	80113e6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80113d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80113da:	3301      	adds	r3, #1
 80113dc:	b2db      	uxtb	r3, r3
 80113de:	b25a      	sxtb	r2, r3
 80113e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80113e6:	2301      	movs	r3, #1
 80113e8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80113ea:	e001      	b.n	80113f0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80113ec:	2300      	movs	r3, #0
 80113ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80113f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113f2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80113f4:	697b      	ldr	r3, [r7, #20]
 80113f6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80113fa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80113fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80113fe:	4618      	mov	r0, r3
 8011400:	3740      	adds	r7, #64	; 0x40
 8011402:	46bd      	mov	sp, r7
 8011404:	bd80      	pop	{r7, pc}
	...

08011408 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011408:	b580      	push	{r7, lr}
 801140a:	b08c      	sub	sp, #48	; 0x30
 801140c:	af00      	add	r7, sp, #0
 801140e:	60f8      	str	r0, [r7, #12]
 8011410:	60b9      	str	r1, [r7, #8]
 8011412:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8011414:	2300      	movs	r3, #0
 8011416:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801141c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801141e:	2b00      	cmp	r3, #0
 8011420:	d10a      	bne.n	8011438 <xQueueReceive+0x30>
	__asm volatile
 8011422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011426:	f383 8811 	msr	BASEPRI, r3
 801142a:	f3bf 8f6f 	isb	sy
 801142e:	f3bf 8f4f 	dsb	sy
 8011432:	623b      	str	r3, [r7, #32]
}
 8011434:	bf00      	nop
 8011436:	e7fe      	b.n	8011436 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011438:	68bb      	ldr	r3, [r7, #8]
 801143a:	2b00      	cmp	r3, #0
 801143c:	d103      	bne.n	8011446 <xQueueReceive+0x3e>
 801143e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011442:	2b00      	cmp	r3, #0
 8011444:	d101      	bne.n	801144a <xQueueReceive+0x42>
 8011446:	2301      	movs	r3, #1
 8011448:	e000      	b.n	801144c <xQueueReceive+0x44>
 801144a:	2300      	movs	r3, #0
 801144c:	2b00      	cmp	r3, #0
 801144e:	d10a      	bne.n	8011466 <xQueueReceive+0x5e>
	__asm volatile
 8011450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011454:	f383 8811 	msr	BASEPRI, r3
 8011458:	f3bf 8f6f 	isb	sy
 801145c:	f3bf 8f4f 	dsb	sy
 8011460:	61fb      	str	r3, [r7, #28]
}
 8011462:	bf00      	nop
 8011464:	e7fe      	b.n	8011464 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011466:	f001 fa8d 	bl	8012984 <xTaskGetSchedulerState>
 801146a:	4603      	mov	r3, r0
 801146c:	2b00      	cmp	r3, #0
 801146e:	d102      	bne.n	8011476 <xQueueReceive+0x6e>
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	2b00      	cmp	r3, #0
 8011474:	d101      	bne.n	801147a <xQueueReceive+0x72>
 8011476:	2301      	movs	r3, #1
 8011478:	e000      	b.n	801147c <xQueueReceive+0x74>
 801147a:	2300      	movs	r3, #0
 801147c:	2b00      	cmp	r3, #0
 801147e:	d10a      	bne.n	8011496 <xQueueReceive+0x8e>
	__asm volatile
 8011480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011484:	f383 8811 	msr	BASEPRI, r3
 8011488:	f3bf 8f6f 	isb	sy
 801148c:	f3bf 8f4f 	dsb	sy
 8011490:	61bb      	str	r3, [r7, #24]
}
 8011492:	bf00      	nop
 8011494:	e7fe      	b.n	8011494 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011496:	f002 f9bd 	bl	8013814 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801149a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801149c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801149e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80114a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d01f      	beq.n	80114e6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80114a6:	68b9      	ldr	r1, [r7, #8]
 80114a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80114aa:	f000 fa9b 	bl	80119e4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80114ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114b0:	1e5a      	subs	r2, r3, #1
 80114b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114b4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80114b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114b8:	691b      	ldr	r3, [r3, #16]
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d00f      	beq.n	80114de <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80114be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114c0:	3310      	adds	r3, #16
 80114c2:	4618      	mov	r0, r3
 80114c4:	f001 f82e 	bl	8012524 <xTaskRemoveFromEventList>
 80114c8:	4603      	mov	r3, r0
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d007      	beq.n	80114de <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80114ce:	4b3d      	ldr	r3, [pc, #244]	; (80115c4 <xQueueReceive+0x1bc>)
 80114d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80114d4:	601a      	str	r2, [r3, #0]
 80114d6:	f3bf 8f4f 	dsb	sy
 80114da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80114de:	f002 f9c9 	bl	8013874 <vPortExitCritical>
				return pdPASS;
 80114e2:	2301      	movs	r3, #1
 80114e4:	e069      	b.n	80115ba <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d103      	bne.n	80114f4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80114ec:	f002 f9c2 	bl	8013874 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80114f0:	2300      	movs	r3, #0
 80114f2:	e062      	b.n	80115ba <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80114f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d106      	bne.n	8011508 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80114fa:	f107 0310 	add.w	r3, r7, #16
 80114fe:	4618      	mov	r0, r3
 8011500:	f001 f8d6 	bl	80126b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011504:	2301      	movs	r3, #1
 8011506:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011508:	f002 f9b4 	bl	8013874 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801150c:	f000 fdaa 	bl	8012064 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011510:	f002 f980 	bl	8013814 <vPortEnterCritical>
 8011514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011516:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801151a:	b25b      	sxtb	r3, r3
 801151c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011520:	d103      	bne.n	801152a <xQueueReceive+0x122>
 8011522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011524:	2200      	movs	r2, #0
 8011526:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801152a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801152c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011530:	b25b      	sxtb	r3, r3
 8011532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011536:	d103      	bne.n	8011540 <xQueueReceive+0x138>
 8011538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801153a:	2200      	movs	r2, #0
 801153c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011540:	f002 f998 	bl	8013874 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011544:	1d3a      	adds	r2, r7, #4
 8011546:	f107 0310 	add.w	r3, r7, #16
 801154a:	4611      	mov	r1, r2
 801154c:	4618      	mov	r0, r3
 801154e:	f001 f8c5 	bl	80126dc <xTaskCheckForTimeOut>
 8011552:	4603      	mov	r3, r0
 8011554:	2b00      	cmp	r3, #0
 8011556:	d123      	bne.n	80115a0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011558:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801155a:	f000 fabb 	bl	8011ad4 <prvIsQueueEmpty>
 801155e:	4603      	mov	r3, r0
 8011560:	2b00      	cmp	r3, #0
 8011562:	d017      	beq.n	8011594 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011566:	3324      	adds	r3, #36	; 0x24
 8011568:	687a      	ldr	r2, [r7, #4]
 801156a:	4611      	mov	r1, r2
 801156c:	4618      	mov	r0, r3
 801156e:	f000 ff4d 	bl	801240c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011572:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011574:	f000 fa5c 	bl	8011a30 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011578:	f000 fd82 	bl	8012080 <xTaskResumeAll>
 801157c:	4603      	mov	r3, r0
 801157e:	2b00      	cmp	r3, #0
 8011580:	d189      	bne.n	8011496 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8011582:	4b10      	ldr	r3, [pc, #64]	; (80115c4 <xQueueReceive+0x1bc>)
 8011584:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011588:	601a      	str	r2, [r3, #0]
 801158a:	f3bf 8f4f 	dsb	sy
 801158e:	f3bf 8f6f 	isb	sy
 8011592:	e780      	b.n	8011496 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8011594:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011596:	f000 fa4b 	bl	8011a30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801159a:	f000 fd71 	bl	8012080 <xTaskResumeAll>
 801159e:	e77a      	b.n	8011496 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80115a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80115a2:	f000 fa45 	bl	8011a30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80115a6:	f000 fd6b 	bl	8012080 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80115aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80115ac:	f000 fa92 	bl	8011ad4 <prvIsQueueEmpty>
 80115b0:	4603      	mov	r3, r0
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	f43f af6f 	beq.w	8011496 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80115b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80115ba:	4618      	mov	r0, r3
 80115bc:	3730      	adds	r7, #48	; 0x30
 80115be:	46bd      	mov	sp, r7
 80115c0:	bd80      	pop	{r7, pc}
 80115c2:	bf00      	nop
 80115c4:	e000ed04 	.word	0xe000ed04

080115c8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80115c8:	b580      	push	{r7, lr}
 80115ca:	b08e      	sub	sp, #56	; 0x38
 80115cc:	af00      	add	r7, sp, #0
 80115ce:	6078      	str	r0, [r7, #4]
 80115d0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80115d2:	2300      	movs	r3, #0
 80115d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80115da:	2300      	movs	r3, #0
 80115dc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80115de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d10a      	bne.n	80115fa <xQueueSemaphoreTake+0x32>
	__asm volatile
 80115e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115e8:	f383 8811 	msr	BASEPRI, r3
 80115ec:	f3bf 8f6f 	isb	sy
 80115f0:	f3bf 8f4f 	dsb	sy
 80115f4:	623b      	str	r3, [r7, #32]
}
 80115f6:	bf00      	nop
 80115f8:	e7fe      	b.n	80115f8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80115fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d00a      	beq.n	8011618 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8011602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011606:	f383 8811 	msr	BASEPRI, r3
 801160a:	f3bf 8f6f 	isb	sy
 801160e:	f3bf 8f4f 	dsb	sy
 8011612:	61fb      	str	r3, [r7, #28]
}
 8011614:	bf00      	nop
 8011616:	e7fe      	b.n	8011616 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011618:	f001 f9b4 	bl	8012984 <xTaskGetSchedulerState>
 801161c:	4603      	mov	r3, r0
 801161e:	2b00      	cmp	r3, #0
 8011620:	d102      	bne.n	8011628 <xQueueSemaphoreTake+0x60>
 8011622:	683b      	ldr	r3, [r7, #0]
 8011624:	2b00      	cmp	r3, #0
 8011626:	d101      	bne.n	801162c <xQueueSemaphoreTake+0x64>
 8011628:	2301      	movs	r3, #1
 801162a:	e000      	b.n	801162e <xQueueSemaphoreTake+0x66>
 801162c:	2300      	movs	r3, #0
 801162e:	2b00      	cmp	r3, #0
 8011630:	d10a      	bne.n	8011648 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8011632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011636:	f383 8811 	msr	BASEPRI, r3
 801163a:	f3bf 8f6f 	isb	sy
 801163e:	f3bf 8f4f 	dsb	sy
 8011642:	61bb      	str	r3, [r7, #24]
}
 8011644:	bf00      	nop
 8011646:	e7fe      	b.n	8011646 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011648:	f002 f8e4 	bl	8013814 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801164c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801164e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011650:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8011652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011654:	2b00      	cmp	r3, #0
 8011656:	d024      	beq.n	80116a2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8011658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801165a:	1e5a      	subs	r2, r3, #1
 801165c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801165e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	2b00      	cmp	r3, #0
 8011666:	d104      	bne.n	8011672 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8011668:	f001 fb1a 	bl	8012ca0 <pvTaskIncrementMutexHeldCount>
 801166c:	4602      	mov	r2, r0
 801166e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011670:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011674:	691b      	ldr	r3, [r3, #16]
 8011676:	2b00      	cmp	r3, #0
 8011678:	d00f      	beq.n	801169a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801167a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801167c:	3310      	adds	r3, #16
 801167e:	4618      	mov	r0, r3
 8011680:	f000 ff50 	bl	8012524 <xTaskRemoveFromEventList>
 8011684:	4603      	mov	r3, r0
 8011686:	2b00      	cmp	r3, #0
 8011688:	d007      	beq.n	801169a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801168a:	4b54      	ldr	r3, [pc, #336]	; (80117dc <xQueueSemaphoreTake+0x214>)
 801168c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011690:	601a      	str	r2, [r3, #0]
 8011692:	f3bf 8f4f 	dsb	sy
 8011696:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801169a:	f002 f8eb 	bl	8013874 <vPortExitCritical>
				return pdPASS;
 801169e:	2301      	movs	r3, #1
 80116a0:	e097      	b.n	80117d2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80116a2:	683b      	ldr	r3, [r7, #0]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d111      	bne.n	80116cc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80116a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d00a      	beq.n	80116c4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80116ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116b2:	f383 8811 	msr	BASEPRI, r3
 80116b6:	f3bf 8f6f 	isb	sy
 80116ba:	f3bf 8f4f 	dsb	sy
 80116be:	617b      	str	r3, [r7, #20]
}
 80116c0:	bf00      	nop
 80116c2:	e7fe      	b.n	80116c2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80116c4:	f002 f8d6 	bl	8013874 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80116c8:	2300      	movs	r3, #0
 80116ca:	e082      	b.n	80117d2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80116cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d106      	bne.n	80116e0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80116d2:	f107 030c 	add.w	r3, r7, #12
 80116d6:	4618      	mov	r0, r3
 80116d8:	f000 ffea 	bl	80126b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80116dc:	2301      	movs	r3, #1
 80116de:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80116e0:	f002 f8c8 	bl	8013874 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80116e4:	f000 fcbe 	bl	8012064 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80116e8:	f002 f894 	bl	8013814 <vPortEnterCritical>
 80116ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80116f2:	b25b      	sxtb	r3, r3
 80116f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116f8:	d103      	bne.n	8011702 <xQueueSemaphoreTake+0x13a>
 80116fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116fc:	2200      	movs	r2, #0
 80116fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011704:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011708:	b25b      	sxtb	r3, r3
 801170a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801170e:	d103      	bne.n	8011718 <xQueueSemaphoreTake+0x150>
 8011710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011712:	2200      	movs	r2, #0
 8011714:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011718:	f002 f8ac 	bl	8013874 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801171c:	463a      	mov	r2, r7
 801171e:	f107 030c 	add.w	r3, r7, #12
 8011722:	4611      	mov	r1, r2
 8011724:	4618      	mov	r0, r3
 8011726:	f000 ffd9 	bl	80126dc <xTaskCheckForTimeOut>
 801172a:	4603      	mov	r3, r0
 801172c:	2b00      	cmp	r3, #0
 801172e:	d132      	bne.n	8011796 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011730:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011732:	f000 f9cf 	bl	8011ad4 <prvIsQueueEmpty>
 8011736:	4603      	mov	r3, r0
 8011738:	2b00      	cmp	r3, #0
 801173a:	d026      	beq.n	801178a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801173c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	2b00      	cmp	r3, #0
 8011742:	d109      	bne.n	8011758 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8011744:	f002 f866 	bl	8013814 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801174a:	689b      	ldr	r3, [r3, #8]
 801174c:	4618      	mov	r0, r3
 801174e:	f001 f937 	bl	80129c0 <xTaskPriorityInherit>
 8011752:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8011754:	f002 f88e 	bl	8013874 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801175a:	3324      	adds	r3, #36	; 0x24
 801175c:	683a      	ldr	r2, [r7, #0]
 801175e:	4611      	mov	r1, r2
 8011760:	4618      	mov	r0, r3
 8011762:	f000 fe53 	bl	801240c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011766:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011768:	f000 f962 	bl	8011a30 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801176c:	f000 fc88 	bl	8012080 <xTaskResumeAll>
 8011770:	4603      	mov	r3, r0
 8011772:	2b00      	cmp	r3, #0
 8011774:	f47f af68 	bne.w	8011648 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8011778:	4b18      	ldr	r3, [pc, #96]	; (80117dc <xQueueSemaphoreTake+0x214>)
 801177a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801177e:	601a      	str	r2, [r3, #0]
 8011780:	f3bf 8f4f 	dsb	sy
 8011784:	f3bf 8f6f 	isb	sy
 8011788:	e75e      	b.n	8011648 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801178a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801178c:	f000 f950 	bl	8011a30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011790:	f000 fc76 	bl	8012080 <xTaskResumeAll>
 8011794:	e758      	b.n	8011648 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8011796:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011798:	f000 f94a 	bl	8011a30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801179c:	f000 fc70 	bl	8012080 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80117a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80117a2:	f000 f997 	bl	8011ad4 <prvIsQueueEmpty>
 80117a6:	4603      	mov	r3, r0
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	f43f af4d 	beq.w	8011648 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80117ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d00d      	beq.n	80117d0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80117b4:	f002 f82e 	bl	8013814 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80117b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80117ba:	f000 f891 	bl	80118e0 <prvGetDisinheritPriorityAfterTimeout>
 80117be:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80117c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117c2:	689b      	ldr	r3, [r3, #8]
 80117c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80117c6:	4618      	mov	r0, r3
 80117c8:	f001 f9d0 	bl	8012b6c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80117cc:	f002 f852 	bl	8013874 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80117d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80117d2:	4618      	mov	r0, r3
 80117d4:	3738      	adds	r7, #56	; 0x38
 80117d6:	46bd      	mov	sp, r7
 80117d8:	bd80      	pop	{r7, pc}
 80117da:	bf00      	nop
 80117dc:	e000ed04 	.word	0xe000ed04

080117e0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80117e0:	b580      	push	{r7, lr}
 80117e2:	b08e      	sub	sp, #56	; 0x38
 80117e4:	af00      	add	r7, sp, #0
 80117e6:	60f8      	str	r0, [r7, #12]
 80117e8:	60b9      	str	r1, [r7, #8]
 80117ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80117ec:	68fb      	ldr	r3, [r7, #12]
 80117ee:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80117f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d10a      	bne.n	801180c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80117f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117fa:	f383 8811 	msr	BASEPRI, r3
 80117fe:	f3bf 8f6f 	isb	sy
 8011802:	f3bf 8f4f 	dsb	sy
 8011806:	623b      	str	r3, [r7, #32]
}
 8011808:	bf00      	nop
 801180a:	e7fe      	b.n	801180a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801180c:	68bb      	ldr	r3, [r7, #8]
 801180e:	2b00      	cmp	r3, #0
 8011810:	d103      	bne.n	801181a <xQueueReceiveFromISR+0x3a>
 8011812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011816:	2b00      	cmp	r3, #0
 8011818:	d101      	bne.n	801181e <xQueueReceiveFromISR+0x3e>
 801181a:	2301      	movs	r3, #1
 801181c:	e000      	b.n	8011820 <xQueueReceiveFromISR+0x40>
 801181e:	2300      	movs	r3, #0
 8011820:	2b00      	cmp	r3, #0
 8011822:	d10a      	bne.n	801183a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8011824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011828:	f383 8811 	msr	BASEPRI, r3
 801182c:	f3bf 8f6f 	isb	sy
 8011830:	f3bf 8f4f 	dsb	sy
 8011834:	61fb      	str	r3, [r7, #28]
}
 8011836:	bf00      	nop
 8011838:	e7fe      	b.n	8011838 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801183a:	f002 f8cd 	bl	80139d8 <vPortValidateInterruptPriority>
	__asm volatile
 801183e:	f3ef 8211 	mrs	r2, BASEPRI
 8011842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011846:	f383 8811 	msr	BASEPRI, r3
 801184a:	f3bf 8f6f 	isb	sy
 801184e:	f3bf 8f4f 	dsb	sy
 8011852:	61ba      	str	r2, [r7, #24]
 8011854:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8011856:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011858:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801185a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801185c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801185e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011862:	2b00      	cmp	r3, #0
 8011864:	d02f      	beq.n	80118c6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8011866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011868:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801186c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011870:	68b9      	ldr	r1, [r7, #8]
 8011872:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011874:	f000 f8b6 	bl	80119e4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801187a:	1e5a      	subs	r2, r3, #1
 801187c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801187e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8011880:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011888:	d112      	bne.n	80118b0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801188a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801188c:	691b      	ldr	r3, [r3, #16]
 801188e:	2b00      	cmp	r3, #0
 8011890:	d016      	beq.n	80118c0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011894:	3310      	adds	r3, #16
 8011896:	4618      	mov	r0, r3
 8011898:	f000 fe44 	bl	8012524 <xTaskRemoveFromEventList>
 801189c:	4603      	mov	r3, r0
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d00e      	beq.n	80118c0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d00b      	beq.n	80118c0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	2201      	movs	r2, #1
 80118ac:	601a      	str	r2, [r3, #0]
 80118ae:	e007      	b.n	80118c0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80118b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80118b4:	3301      	adds	r3, #1
 80118b6:	b2db      	uxtb	r3, r3
 80118b8:	b25a      	sxtb	r2, r3
 80118ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80118c0:	2301      	movs	r3, #1
 80118c2:	637b      	str	r3, [r7, #52]	; 0x34
 80118c4:	e001      	b.n	80118ca <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80118c6:	2300      	movs	r3, #0
 80118c8:	637b      	str	r3, [r7, #52]	; 0x34
 80118ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118cc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80118ce:	693b      	ldr	r3, [r7, #16]
 80118d0:	f383 8811 	msr	BASEPRI, r3
}
 80118d4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80118d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80118d8:	4618      	mov	r0, r3
 80118da:	3738      	adds	r7, #56	; 0x38
 80118dc:	46bd      	mov	sp, r7
 80118de:	bd80      	pop	{r7, pc}

080118e0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80118e0:	b480      	push	{r7}
 80118e2:	b085      	sub	sp, #20
 80118e4:	af00      	add	r7, sp, #0
 80118e6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d006      	beq.n	80118fe <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80118f4:	681b      	ldr	r3, [r3, #0]
 80118f6:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80118fa:	60fb      	str	r3, [r7, #12]
 80118fc:	e001      	b.n	8011902 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80118fe:	2300      	movs	r3, #0
 8011900:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8011902:	68fb      	ldr	r3, [r7, #12]
	}
 8011904:	4618      	mov	r0, r3
 8011906:	3714      	adds	r7, #20
 8011908:	46bd      	mov	sp, r7
 801190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801190e:	4770      	bx	lr

08011910 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8011910:	b580      	push	{r7, lr}
 8011912:	b086      	sub	sp, #24
 8011914:	af00      	add	r7, sp, #0
 8011916:	60f8      	str	r0, [r7, #12]
 8011918:	60b9      	str	r1, [r7, #8]
 801191a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801191c:	2300      	movs	r3, #0
 801191e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011924:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801192a:	2b00      	cmp	r3, #0
 801192c:	d10d      	bne.n	801194a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801192e:	68fb      	ldr	r3, [r7, #12]
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	2b00      	cmp	r3, #0
 8011934:	d14d      	bne.n	80119d2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	689b      	ldr	r3, [r3, #8]
 801193a:	4618      	mov	r0, r3
 801193c:	f001 f8a8 	bl	8012a90 <xTaskPriorityDisinherit>
 8011940:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8011942:	68fb      	ldr	r3, [r7, #12]
 8011944:	2200      	movs	r2, #0
 8011946:	609a      	str	r2, [r3, #8]
 8011948:	e043      	b.n	80119d2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	2b00      	cmp	r3, #0
 801194e:	d119      	bne.n	8011984 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011950:	68fb      	ldr	r3, [r7, #12]
 8011952:	6858      	ldr	r0, [r3, #4]
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011958:	461a      	mov	r2, r3
 801195a:	68b9      	ldr	r1, [r7, #8]
 801195c:	f002 fa92 	bl	8013e84 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	685a      	ldr	r2, [r3, #4]
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011968:	441a      	add	r2, r3
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801196e:	68fb      	ldr	r3, [r7, #12]
 8011970:	685a      	ldr	r2, [r3, #4]
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	689b      	ldr	r3, [r3, #8]
 8011976:	429a      	cmp	r2, r3
 8011978:	d32b      	bcc.n	80119d2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801197a:	68fb      	ldr	r3, [r7, #12]
 801197c:	681a      	ldr	r2, [r3, #0]
 801197e:	68fb      	ldr	r3, [r7, #12]
 8011980:	605a      	str	r2, [r3, #4]
 8011982:	e026      	b.n	80119d2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011984:	68fb      	ldr	r3, [r7, #12]
 8011986:	68d8      	ldr	r0, [r3, #12]
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801198c:	461a      	mov	r2, r3
 801198e:	68b9      	ldr	r1, [r7, #8]
 8011990:	f002 fa78 	bl	8013e84 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011994:	68fb      	ldr	r3, [r7, #12]
 8011996:	68da      	ldr	r2, [r3, #12]
 8011998:	68fb      	ldr	r3, [r7, #12]
 801199a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801199c:	425b      	negs	r3, r3
 801199e:	441a      	add	r2, r3
 80119a0:	68fb      	ldr	r3, [r7, #12]
 80119a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	68da      	ldr	r2, [r3, #12]
 80119a8:	68fb      	ldr	r3, [r7, #12]
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	429a      	cmp	r2, r3
 80119ae:	d207      	bcs.n	80119c0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	689a      	ldr	r2, [r3, #8]
 80119b4:	68fb      	ldr	r3, [r7, #12]
 80119b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80119b8:	425b      	negs	r3, r3
 80119ba:	441a      	add	r2, r3
 80119bc:	68fb      	ldr	r3, [r7, #12]
 80119be:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	2b02      	cmp	r3, #2
 80119c4:	d105      	bne.n	80119d2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80119c6:	693b      	ldr	r3, [r7, #16]
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d002      	beq.n	80119d2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80119cc:	693b      	ldr	r3, [r7, #16]
 80119ce:	3b01      	subs	r3, #1
 80119d0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80119d2:	693b      	ldr	r3, [r7, #16]
 80119d4:	1c5a      	adds	r2, r3, #1
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80119da:	697b      	ldr	r3, [r7, #20]
}
 80119dc:	4618      	mov	r0, r3
 80119de:	3718      	adds	r7, #24
 80119e0:	46bd      	mov	sp, r7
 80119e2:	bd80      	pop	{r7, pc}

080119e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80119e4:	b580      	push	{r7, lr}
 80119e6:	b082      	sub	sp, #8
 80119e8:	af00      	add	r7, sp, #0
 80119ea:	6078      	str	r0, [r7, #4]
 80119ec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d018      	beq.n	8011a28 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	68da      	ldr	r2, [r3, #12]
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80119fe:	441a      	add	r2, r3
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	68da      	ldr	r2, [r3, #12]
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	689b      	ldr	r3, [r3, #8]
 8011a0c:	429a      	cmp	r2, r3
 8011a0e:	d303      	bcc.n	8011a18 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	681a      	ldr	r2, [r3, #0]
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	68d9      	ldr	r1, [r3, #12]
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a20:	461a      	mov	r2, r3
 8011a22:	6838      	ldr	r0, [r7, #0]
 8011a24:	f002 fa2e 	bl	8013e84 <memcpy>
	}
}
 8011a28:	bf00      	nop
 8011a2a:	3708      	adds	r7, #8
 8011a2c:	46bd      	mov	sp, r7
 8011a2e:	bd80      	pop	{r7, pc}

08011a30 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8011a30:	b580      	push	{r7, lr}
 8011a32:	b084      	sub	sp, #16
 8011a34:	af00      	add	r7, sp, #0
 8011a36:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011a38:	f001 feec 	bl	8013814 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011a42:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011a44:	e011      	b.n	8011a6a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d012      	beq.n	8011a74 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	3324      	adds	r3, #36	; 0x24
 8011a52:	4618      	mov	r0, r3
 8011a54:	f000 fd66 	bl	8012524 <xTaskRemoveFromEventList>
 8011a58:	4603      	mov	r3, r0
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d001      	beq.n	8011a62 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011a5e:	f000 fe9f 	bl	80127a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011a62:	7bfb      	ldrb	r3, [r7, #15]
 8011a64:	3b01      	subs	r3, #1
 8011a66:	b2db      	uxtb	r3, r3
 8011a68:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	dce9      	bgt.n	8011a46 <prvUnlockQueue+0x16>
 8011a72:	e000      	b.n	8011a76 <prvUnlockQueue+0x46>
					break;
 8011a74:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	22ff      	movs	r2, #255	; 0xff
 8011a7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8011a7e:	f001 fef9 	bl	8013874 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011a82:	f001 fec7 	bl	8013814 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011a8c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011a8e:	e011      	b.n	8011ab4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	691b      	ldr	r3, [r3, #16]
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d012      	beq.n	8011abe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	3310      	adds	r3, #16
 8011a9c:	4618      	mov	r0, r3
 8011a9e:	f000 fd41 	bl	8012524 <xTaskRemoveFromEventList>
 8011aa2:	4603      	mov	r3, r0
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d001      	beq.n	8011aac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011aa8:	f000 fe7a 	bl	80127a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011aac:	7bbb      	ldrb	r3, [r7, #14]
 8011aae:	3b01      	subs	r3, #1
 8011ab0:	b2db      	uxtb	r3, r3
 8011ab2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011ab4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	dce9      	bgt.n	8011a90 <prvUnlockQueue+0x60>
 8011abc:	e000      	b.n	8011ac0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011abe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	22ff      	movs	r2, #255	; 0xff
 8011ac4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8011ac8:	f001 fed4 	bl	8013874 <vPortExitCritical>
}
 8011acc:	bf00      	nop
 8011ace:	3710      	adds	r7, #16
 8011ad0:	46bd      	mov	sp, r7
 8011ad2:	bd80      	pop	{r7, pc}

08011ad4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011ad4:	b580      	push	{r7, lr}
 8011ad6:	b084      	sub	sp, #16
 8011ad8:	af00      	add	r7, sp, #0
 8011ada:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011adc:	f001 fe9a 	bl	8013814 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d102      	bne.n	8011aee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011ae8:	2301      	movs	r3, #1
 8011aea:	60fb      	str	r3, [r7, #12]
 8011aec:	e001      	b.n	8011af2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8011aee:	2300      	movs	r3, #0
 8011af0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011af2:	f001 febf 	bl	8013874 <vPortExitCritical>

	return xReturn;
 8011af6:	68fb      	ldr	r3, [r7, #12]
}
 8011af8:	4618      	mov	r0, r3
 8011afa:	3710      	adds	r7, #16
 8011afc:	46bd      	mov	sp, r7
 8011afe:	bd80      	pop	{r7, pc}

08011b00 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8011b00:	b580      	push	{r7, lr}
 8011b02:	b084      	sub	sp, #16
 8011b04:	af00      	add	r7, sp, #0
 8011b06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011b08:	f001 fe84 	bl	8013814 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011b14:	429a      	cmp	r2, r3
 8011b16:	d102      	bne.n	8011b1e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011b18:	2301      	movs	r3, #1
 8011b1a:	60fb      	str	r3, [r7, #12]
 8011b1c:	e001      	b.n	8011b22 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8011b1e:	2300      	movs	r3, #0
 8011b20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011b22:	f001 fea7 	bl	8013874 <vPortExitCritical>

	return xReturn;
 8011b26:	68fb      	ldr	r3, [r7, #12]
}
 8011b28:	4618      	mov	r0, r3
 8011b2a:	3710      	adds	r7, #16
 8011b2c:	46bd      	mov	sp, r7
 8011b2e:	bd80      	pop	{r7, pc}

08011b30 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8011b30:	b480      	push	{r7}
 8011b32:	b085      	sub	sp, #20
 8011b34:	af00      	add	r7, sp, #0
 8011b36:	6078      	str	r0, [r7, #4]
 8011b38:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011b3a:	2300      	movs	r3, #0
 8011b3c:	60fb      	str	r3, [r7, #12]
 8011b3e:	e014      	b.n	8011b6a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8011b40:	4a0f      	ldr	r2, [pc, #60]	; (8011b80 <vQueueAddToRegistry+0x50>)
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d10b      	bne.n	8011b64 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8011b4c:	490c      	ldr	r1, [pc, #48]	; (8011b80 <vQueueAddToRegistry+0x50>)
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	683a      	ldr	r2, [r7, #0]
 8011b52:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8011b56:	4a0a      	ldr	r2, [pc, #40]	; (8011b80 <vQueueAddToRegistry+0x50>)
 8011b58:	68fb      	ldr	r3, [r7, #12]
 8011b5a:	00db      	lsls	r3, r3, #3
 8011b5c:	4413      	add	r3, r2
 8011b5e:	687a      	ldr	r2, [r7, #4]
 8011b60:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8011b62:	e006      	b.n	8011b72 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	3301      	adds	r3, #1
 8011b68:	60fb      	str	r3, [r7, #12]
 8011b6a:	68fb      	ldr	r3, [r7, #12]
 8011b6c:	2b07      	cmp	r3, #7
 8011b6e:	d9e7      	bls.n	8011b40 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8011b70:	bf00      	nop
 8011b72:	bf00      	nop
 8011b74:	3714      	adds	r7, #20
 8011b76:	46bd      	mov	sp, r7
 8011b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b7c:	4770      	bx	lr
 8011b7e:	bf00      	nop
 8011b80:	20005894 	.word	0x20005894

08011b84 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011b84:	b580      	push	{r7, lr}
 8011b86:	b086      	sub	sp, #24
 8011b88:	af00      	add	r7, sp, #0
 8011b8a:	60f8      	str	r0, [r7, #12]
 8011b8c:	60b9      	str	r1, [r7, #8]
 8011b8e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8011b94:	f001 fe3e 	bl	8013814 <vPortEnterCritical>
 8011b98:	697b      	ldr	r3, [r7, #20]
 8011b9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011b9e:	b25b      	sxtb	r3, r3
 8011ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ba4:	d103      	bne.n	8011bae <vQueueWaitForMessageRestricted+0x2a>
 8011ba6:	697b      	ldr	r3, [r7, #20]
 8011ba8:	2200      	movs	r2, #0
 8011baa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011bae:	697b      	ldr	r3, [r7, #20]
 8011bb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011bb4:	b25b      	sxtb	r3, r3
 8011bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011bba:	d103      	bne.n	8011bc4 <vQueueWaitForMessageRestricted+0x40>
 8011bbc:	697b      	ldr	r3, [r7, #20]
 8011bbe:	2200      	movs	r2, #0
 8011bc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011bc4:	f001 fe56 	bl	8013874 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8011bc8:	697b      	ldr	r3, [r7, #20]
 8011bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d106      	bne.n	8011bde <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8011bd0:	697b      	ldr	r3, [r7, #20]
 8011bd2:	3324      	adds	r3, #36	; 0x24
 8011bd4:	687a      	ldr	r2, [r7, #4]
 8011bd6:	68b9      	ldr	r1, [r7, #8]
 8011bd8:	4618      	mov	r0, r3
 8011bda:	f000 fc77 	bl	80124cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8011bde:	6978      	ldr	r0, [r7, #20]
 8011be0:	f7ff ff26 	bl	8011a30 <prvUnlockQueue>
	}
 8011be4:	bf00      	nop
 8011be6:	3718      	adds	r7, #24
 8011be8:	46bd      	mov	sp, r7
 8011bea:	bd80      	pop	{r7, pc}

08011bec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011bec:	b580      	push	{r7, lr}
 8011bee:	b08e      	sub	sp, #56	; 0x38
 8011bf0:	af04      	add	r7, sp, #16
 8011bf2:	60f8      	str	r0, [r7, #12]
 8011bf4:	60b9      	str	r1, [r7, #8]
 8011bf6:	607a      	str	r2, [r7, #4]
 8011bf8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d10a      	bne.n	8011c16 <xTaskCreateStatic+0x2a>
	__asm volatile
 8011c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c04:	f383 8811 	msr	BASEPRI, r3
 8011c08:	f3bf 8f6f 	isb	sy
 8011c0c:	f3bf 8f4f 	dsb	sy
 8011c10:	623b      	str	r3, [r7, #32]
}
 8011c12:	bf00      	nop
 8011c14:	e7fe      	b.n	8011c14 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8011c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d10a      	bne.n	8011c32 <xTaskCreateStatic+0x46>
	__asm volatile
 8011c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c20:	f383 8811 	msr	BASEPRI, r3
 8011c24:	f3bf 8f6f 	isb	sy
 8011c28:	f3bf 8f4f 	dsb	sy
 8011c2c:	61fb      	str	r3, [r7, #28]
}
 8011c2e:	bf00      	nop
 8011c30:	e7fe      	b.n	8011c30 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8011c32:	236c      	movs	r3, #108	; 0x6c
 8011c34:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011c36:	693b      	ldr	r3, [r7, #16]
 8011c38:	2b6c      	cmp	r3, #108	; 0x6c
 8011c3a:	d00a      	beq.n	8011c52 <xTaskCreateStatic+0x66>
	__asm volatile
 8011c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c40:	f383 8811 	msr	BASEPRI, r3
 8011c44:	f3bf 8f6f 	isb	sy
 8011c48:	f3bf 8f4f 	dsb	sy
 8011c4c:	61bb      	str	r3, [r7, #24]
}
 8011c4e:	bf00      	nop
 8011c50:	e7fe      	b.n	8011c50 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8011c52:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d01e      	beq.n	8011c98 <xTaskCreateStatic+0xac>
 8011c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d01b      	beq.n	8011c98 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c62:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011c68:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c6c:	2202      	movs	r2, #2
 8011c6e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011c72:	2300      	movs	r3, #0
 8011c74:	9303      	str	r3, [sp, #12]
 8011c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c78:	9302      	str	r3, [sp, #8]
 8011c7a:	f107 0314 	add.w	r3, r7, #20
 8011c7e:	9301      	str	r3, [sp, #4]
 8011c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c82:	9300      	str	r3, [sp, #0]
 8011c84:	683b      	ldr	r3, [r7, #0]
 8011c86:	687a      	ldr	r2, [r7, #4]
 8011c88:	68b9      	ldr	r1, [r7, #8]
 8011c8a:	68f8      	ldr	r0, [r7, #12]
 8011c8c:	f000 f850 	bl	8011d30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011c90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011c92:	f000 f8dd 	bl	8011e50 <prvAddNewTaskToReadyList>
 8011c96:	e001      	b.n	8011c9c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8011c98:	2300      	movs	r3, #0
 8011c9a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011c9c:	697b      	ldr	r3, [r7, #20]
	}
 8011c9e:	4618      	mov	r0, r3
 8011ca0:	3728      	adds	r7, #40	; 0x28
 8011ca2:	46bd      	mov	sp, r7
 8011ca4:	bd80      	pop	{r7, pc}

08011ca6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8011ca6:	b580      	push	{r7, lr}
 8011ca8:	b08c      	sub	sp, #48	; 0x30
 8011caa:	af04      	add	r7, sp, #16
 8011cac:	60f8      	str	r0, [r7, #12]
 8011cae:	60b9      	str	r1, [r7, #8]
 8011cb0:	603b      	str	r3, [r7, #0]
 8011cb2:	4613      	mov	r3, r2
 8011cb4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011cb6:	88fb      	ldrh	r3, [r7, #6]
 8011cb8:	009b      	lsls	r3, r3, #2
 8011cba:	4618      	mov	r0, r3
 8011cbc:	f001 fecc 	bl	8013a58 <pvPortMalloc>
 8011cc0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011cc2:	697b      	ldr	r3, [r7, #20]
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d00e      	beq.n	8011ce6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011cc8:	206c      	movs	r0, #108	; 0x6c
 8011cca:	f001 fec5 	bl	8013a58 <pvPortMalloc>
 8011cce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011cd0:	69fb      	ldr	r3, [r7, #28]
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d003      	beq.n	8011cde <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011cd6:	69fb      	ldr	r3, [r7, #28]
 8011cd8:	697a      	ldr	r2, [r7, #20]
 8011cda:	631a      	str	r2, [r3, #48]	; 0x30
 8011cdc:	e005      	b.n	8011cea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011cde:	6978      	ldr	r0, [r7, #20]
 8011ce0:	f001 ff86 	bl	8013bf0 <vPortFree>
 8011ce4:	e001      	b.n	8011cea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8011ce6:	2300      	movs	r3, #0
 8011ce8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011cea:	69fb      	ldr	r3, [r7, #28]
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d017      	beq.n	8011d20 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011cf0:	69fb      	ldr	r3, [r7, #28]
 8011cf2:	2200      	movs	r2, #0
 8011cf4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011cf8:	88fa      	ldrh	r2, [r7, #6]
 8011cfa:	2300      	movs	r3, #0
 8011cfc:	9303      	str	r3, [sp, #12]
 8011cfe:	69fb      	ldr	r3, [r7, #28]
 8011d00:	9302      	str	r3, [sp, #8]
 8011d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d04:	9301      	str	r3, [sp, #4]
 8011d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d08:	9300      	str	r3, [sp, #0]
 8011d0a:	683b      	ldr	r3, [r7, #0]
 8011d0c:	68b9      	ldr	r1, [r7, #8]
 8011d0e:	68f8      	ldr	r0, [r7, #12]
 8011d10:	f000 f80e 	bl	8011d30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011d14:	69f8      	ldr	r0, [r7, #28]
 8011d16:	f000 f89b 	bl	8011e50 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011d1a:	2301      	movs	r3, #1
 8011d1c:	61bb      	str	r3, [r7, #24]
 8011d1e:	e002      	b.n	8011d26 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011d20:	f04f 33ff 	mov.w	r3, #4294967295
 8011d24:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011d26:	69bb      	ldr	r3, [r7, #24]
	}
 8011d28:	4618      	mov	r0, r3
 8011d2a:	3720      	adds	r7, #32
 8011d2c:	46bd      	mov	sp, r7
 8011d2e:	bd80      	pop	{r7, pc}

08011d30 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011d30:	b580      	push	{r7, lr}
 8011d32:	b088      	sub	sp, #32
 8011d34:	af00      	add	r7, sp, #0
 8011d36:	60f8      	str	r0, [r7, #12]
 8011d38:	60b9      	str	r1, [r7, #8]
 8011d3a:	607a      	str	r2, [r7, #4]
 8011d3c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8011d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d40:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	009b      	lsls	r3, r3, #2
 8011d46:	461a      	mov	r2, r3
 8011d48:	21a5      	movs	r1, #165	; 0xa5
 8011d4a:	f002 f8a9 	bl	8013ea0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8011d58:	3b01      	subs	r3, #1
 8011d5a:	009b      	lsls	r3, r3, #2
 8011d5c:	4413      	add	r3, r2
 8011d5e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011d60:	69bb      	ldr	r3, [r7, #24]
 8011d62:	f023 0307 	bic.w	r3, r3, #7
 8011d66:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011d68:	69bb      	ldr	r3, [r7, #24]
 8011d6a:	f003 0307 	and.w	r3, r3, #7
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d00a      	beq.n	8011d88 <prvInitialiseNewTask+0x58>
	__asm volatile
 8011d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d76:	f383 8811 	msr	BASEPRI, r3
 8011d7a:	f3bf 8f6f 	isb	sy
 8011d7e:	f3bf 8f4f 	dsb	sy
 8011d82:	617b      	str	r3, [r7, #20]
}
 8011d84:	bf00      	nop
 8011d86:	e7fe      	b.n	8011d86 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011d88:	68bb      	ldr	r3, [r7, #8]
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d01f      	beq.n	8011dce <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011d8e:	2300      	movs	r3, #0
 8011d90:	61fb      	str	r3, [r7, #28]
 8011d92:	e012      	b.n	8011dba <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011d94:	68ba      	ldr	r2, [r7, #8]
 8011d96:	69fb      	ldr	r3, [r7, #28]
 8011d98:	4413      	add	r3, r2
 8011d9a:	7819      	ldrb	r1, [r3, #0]
 8011d9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011d9e:	69fb      	ldr	r3, [r7, #28]
 8011da0:	4413      	add	r3, r2
 8011da2:	3334      	adds	r3, #52	; 0x34
 8011da4:	460a      	mov	r2, r1
 8011da6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8011da8:	68ba      	ldr	r2, [r7, #8]
 8011daa:	69fb      	ldr	r3, [r7, #28]
 8011dac:	4413      	add	r3, r2
 8011dae:	781b      	ldrb	r3, [r3, #0]
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d006      	beq.n	8011dc2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011db4:	69fb      	ldr	r3, [r7, #28]
 8011db6:	3301      	adds	r3, #1
 8011db8:	61fb      	str	r3, [r7, #28]
 8011dba:	69fb      	ldr	r3, [r7, #28]
 8011dbc:	2b1f      	cmp	r3, #31
 8011dbe:	d9e9      	bls.n	8011d94 <prvInitialiseNewTask+0x64>
 8011dc0:	e000      	b.n	8011dc4 <prvInitialiseNewTask+0x94>
			{
				break;
 8011dc2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dc6:	2200      	movs	r2, #0
 8011dc8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8011dcc:	e003      	b.n	8011dd6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8011dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dd0:	2200      	movs	r2, #0
 8011dd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dd8:	2b37      	cmp	r3, #55	; 0x37
 8011dda:	d901      	bls.n	8011de0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011ddc:	2337      	movs	r3, #55	; 0x37
 8011dde:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011de2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011de4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8011de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011de8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011dea:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 8011dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dee:	2200      	movs	r2, #0
 8011df0:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011df4:	3304      	adds	r3, #4
 8011df6:	4618      	mov	r0, r3
 8011df8:	f7fe fee4 	bl	8010bc4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dfe:	3318      	adds	r3, #24
 8011e00:	4618      	mov	r0, r3
 8011e02:	f7fe fedf 	bl	8010bc4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011e0a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e0e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e14:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011e1a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e1e:	2200      	movs	r2, #0
 8011e20:	665a      	str	r2, [r3, #100]	; 0x64
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e24:	2200      	movs	r2, #0
 8011e26:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011e2a:	683a      	ldr	r2, [r7, #0]
 8011e2c:	68f9      	ldr	r1, [r7, #12]
 8011e2e:	69b8      	ldr	r0, [r7, #24]
 8011e30:	f001 fbc6 	bl	80135c0 <pxPortInitialiseStack>
 8011e34:	4602      	mov	r2, r0
 8011e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e38:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d002      	beq.n	8011e46 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011e44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011e46:	bf00      	nop
 8011e48:	3720      	adds	r7, #32
 8011e4a:	46bd      	mov	sp, r7
 8011e4c:	bd80      	pop	{r7, pc}
	...

08011e50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011e50:	b580      	push	{r7, lr}
 8011e52:	b082      	sub	sp, #8
 8011e54:	af00      	add	r7, sp, #0
 8011e56:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011e58:	f001 fcdc 	bl	8013814 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011e5c:	4b2d      	ldr	r3, [pc, #180]	; (8011f14 <prvAddNewTaskToReadyList+0xc4>)
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	3301      	adds	r3, #1
 8011e62:	4a2c      	ldr	r2, [pc, #176]	; (8011f14 <prvAddNewTaskToReadyList+0xc4>)
 8011e64:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011e66:	4b2c      	ldr	r3, [pc, #176]	; (8011f18 <prvAddNewTaskToReadyList+0xc8>)
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d109      	bne.n	8011e82 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8011e6e:	4a2a      	ldr	r2, [pc, #168]	; (8011f18 <prvAddNewTaskToReadyList+0xc8>)
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011e74:	4b27      	ldr	r3, [pc, #156]	; (8011f14 <prvAddNewTaskToReadyList+0xc4>)
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	2b01      	cmp	r3, #1
 8011e7a:	d110      	bne.n	8011e9e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011e7c:	f000 fcb4 	bl	80127e8 <prvInitialiseTaskLists>
 8011e80:	e00d      	b.n	8011e9e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8011e82:	4b26      	ldr	r3, [pc, #152]	; (8011f1c <prvAddNewTaskToReadyList+0xcc>)
 8011e84:	681b      	ldr	r3, [r3, #0]
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d109      	bne.n	8011e9e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011e8a:	4b23      	ldr	r3, [pc, #140]	; (8011f18 <prvAddNewTaskToReadyList+0xc8>)
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e94:	429a      	cmp	r2, r3
 8011e96:	d802      	bhi.n	8011e9e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011e98:	4a1f      	ldr	r2, [pc, #124]	; (8011f18 <prvAddNewTaskToReadyList+0xc8>)
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011e9e:	4b20      	ldr	r3, [pc, #128]	; (8011f20 <prvAddNewTaskToReadyList+0xd0>)
 8011ea0:	681b      	ldr	r3, [r3, #0]
 8011ea2:	3301      	adds	r3, #1
 8011ea4:	4a1e      	ldr	r2, [pc, #120]	; (8011f20 <prvAddNewTaskToReadyList+0xd0>)
 8011ea6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8011ea8:	4b1d      	ldr	r3, [pc, #116]	; (8011f20 <prvAddNewTaskToReadyList+0xd0>)
 8011eaa:	681a      	ldr	r2, [r3, #0]
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011eb4:	4b1b      	ldr	r3, [pc, #108]	; (8011f24 <prvAddNewTaskToReadyList+0xd4>)
 8011eb6:	681b      	ldr	r3, [r3, #0]
 8011eb8:	429a      	cmp	r2, r3
 8011eba:	d903      	bls.n	8011ec4 <prvAddNewTaskToReadyList+0x74>
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ec0:	4a18      	ldr	r2, [pc, #96]	; (8011f24 <prvAddNewTaskToReadyList+0xd4>)
 8011ec2:	6013      	str	r3, [r2, #0]
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ec8:	4613      	mov	r3, r2
 8011eca:	009b      	lsls	r3, r3, #2
 8011ecc:	4413      	add	r3, r2
 8011ece:	009b      	lsls	r3, r3, #2
 8011ed0:	4a15      	ldr	r2, [pc, #84]	; (8011f28 <prvAddNewTaskToReadyList+0xd8>)
 8011ed2:	441a      	add	r2, r3
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	3304      	adds	r3, #4
 8011ed8:	4619      	mov	r1, r3
 8011eda:	4610      	mov	r0, r2
 8011edc:	f7fe fe7f 	bl	8010bde <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011ee0:	f001 fcc8 	bl	8013874 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011ee4:	4b0d      	ldr	r3, [pc, #52]	; (8011f1c <prvAddNewTaskToReadyList+0xcc>)
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d00e      	beq.n	8011f0a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011eec:	4b0a      	ldr	r3, [pc, #40]	; (8011f18 <prvAddNewTaskToReadyList+0xc8>)
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ef6:	429a      	cmp	r2, r3
 8011ef8:	d207      	bcs.n	8011f0a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011efa:	4b0c      	ldr	r3, [pc, #48]	; (8011f2c <prvAddNewTaskToReadyList+0xdc>)
 8011efc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f00:	601a      	str	r2, [r3, #0]
 8011f02:	f3bf 8f4f 	dsb	sy
 8011f06:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011f0a:	bf00      	nop
 8011f0c:	3708      	adds	r7, #8
 8011f0e:	46bd      	mov	sp, r7
 8011f10:	bd80      	pop	{r7, pc}
 8011f12:	bf00      	nop
 8011f14:	20005da8 	.word	0x20005da8
 8011f18:	200058d4 	.word	0x200058d4
 8011f1c:	20005db4 	.word	0x20005db4
 8011f20:	20005dc4 	.word	0x20005dc4
 8011f24:	20005db0 	.word	0x20005db0
 8011f28:	200058d8 	.word	0x200058d8
 8011f2c:	e000ed04 	.word	0xe000ed04

08011f30 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011f30:	b580      	push	{r7, lr}
 8011f32:	b084      	sub	sp, #16
 8011f34:	af00      	add	r7, sp, #0
 8011f36:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011f38:	2300      	movs	r3, #0
 8011f3a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d017      	beq.n	8011f72 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8011f42:	4b13      	ldr	r3, [pc, #76]	; (8011f90 <vTaskDelay+0x60>)
 8011f44:	681b      	ldr	r3, [r3, #0]
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d00a      	beq.n	8011f60 <vTaskDelay+0x30>
	__asm volatile
 8011f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f4e:	f383 8811 	msr	BASEPRI, r3
 8011f52:	f3bf 8f6f 	isb	sy
 8011f56:	f3bf 8f4f 	dsb	sy
 8011f5a:	60bb      	str	r3, [r7, #8]
}
 8011f5c:	bf00      	nop
 8011f5e:	e7fe      	b.n	8011f5e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8011f60:	f000 f880 	bl	8012064 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011f64:	2100      	movs	r1, #0
 8011f66:	6878      	ldr	r0, [r7, #4]
 8011f68:	f000 feae 	bl	8012cc8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011f6c:	f000 f888 	bl	8012080 <xTaskResumeAll>
 8011f70:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d107      	bne.n	8011f88 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8011f78:	4b06      	ldr	r3, [pc, #24]	; (8011f94 <vTaskDelay+0x64>)
 8011f7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f7e:	601a      	str	r2, [r3, #0]
 8011f80:	f3bf 8f4f 	dsb	sy
 8011f84:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011f88:	bf00      	nop
 8011f8a:	3710      	adds	r7, #16
 8011f8c:	46bd      	mov	sp, r7
 8011f8e:	bd80      	pop	{r7, pc}
 8011f90:	20005dd0 	.word	0x20005dd0
 8011f94:	e000ed04 	.word	0xe000ed04

08011f98 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011f98:	b580      	push	{r7, lr}
 8011f9a:	b08a      	sub	sp, #40	; 0x28
 8011f9c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011f9e:	2300      	movs	r3, #0
 8011fa0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011fa2:	2300      	movs	r3, #0
 8011fa4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011fa6:	463a      	mov	r2, r7
 8011fa8:	1d39      	adds	r1, r7, #4
 8011faa:	f107 0308 	add.w	r3, r7, #8
 8011fae:	4618      	mov	r0, r3
 8011fb0:	f7fe fbc6 	bl	8010740 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011fb4:	6839      	ldr	r1, [r7, #0]
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	68ba      	ldr	r2, [r7, #8]
 8011fba:	9202      	str	r2, [sp, #8]
 8011fbc:	9301      	str	r3, [sp, #4]
 8011fbe:	2300      	movs	r3, #0
 8011fc0:	9300      	str	r3, [sp, #0]
 8011fc2:	2300      	movs	r3, #0
 8011fc4:	460a      	mov	r2, r1
 8011fc6:	4921      	ldr	r1, [pc, #132]	; (801204c <vTaskStartScheduler+0xb4>)
 8011fc8:	4821      	ldr	r0, [pc, #132]	; (8012050 <vTaskStartScheduler+0xb8>)
 8011fca:	f7ff fe0f 	bl	8011bec <xTaskCreateStatic>
 8011fce:	4603      	mov	r3, r0
 8011fd0:	4a20      	ldr	r2, [pc, #128]	; (8012054 <vTaskStartScheduler+0xbc>)
 8011fd2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011fd4:	4b1f      	ldr	r3, [pc, #124]	; (8012054 <vTaskStartScheduler+0xbc>)
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d002      	beq.n	8011fe2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011fdc:	2301      	movs	r3, #1
 8011fde:	617b      	str	r3, [r7, #20]
 8011fe0:	e001      	b.n	8011fe6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011fe2:	2300      	movs	r3, #0
 8011fe4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8011fe6:	697b      	ldr	r3, [r7, #20]
 8011fe8:	2b01      	cmp	r3, #1
 8011fea:	d102      	bne.n	8011ff2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8011fec:	f000 fec0 	bl	8012d70 <xTimerCreateTimerTask>
 8011ff0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011ff2:	697b      	ldr	r3, [r7, #20]
 8011ff4:	2b01      	cmp	r3, #1
 8011ff6:	d116      	bne.n	8012026 <vTaskStartScheduler+0x8e>
	__asm volatile
 8011ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ffc:	f383 8811 	msr	BASEPRI, r3
 8012000:	f3bf 8f6f 	isb	sy
 8012004:	f3bf 8f4f 	dsb	sy
 8012008:	613b      	str	r3, [r7, #16]
}
 801200a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801200c:	4b12      	ldr	r3, [pc, #72]	; (8012058 <vTaskStartScheduler+0xc0>)
 801200e:	f04f 32ff 	mov.w	r2, #4294967295
 8012012:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012014:	4b11      	ldr	r3, [pc, #68]	; (801205c <vTaskStartScheduler+0xc4>)
 8012016:	2201      	movs	r2, #1
 8012018:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801201a:	4b11      	ldr	r3, [pc, #68]	; (8012060 <vTaskStartScheduler+0xc8>)
 801201c:	2200      	movs	r2, #0
 801201e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012020:	f001 fb56 	bl	80136d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8012024:	e00e      	b.n	8012044 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012026:	697b      	ldr	r3, [r7, #20]
 8012028:	f1b3 3fff 	cmp.w	r3, #4294967295
 801202c:	d10a      	bne.n	8012044 <vTaskStartScheduler+0xac>
	__asm volatile
 801202e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012032:	f383 8811 	msr	BASEPRI, r3
 8012036:	f3bf 8f6f 	isb	sy
 801203a:	f3bf 8f4f 	dsb	sy
 801203e:	60fb      	str	r3, [r7, #12]
}
 8012040:	bf00      	nop
 8012042:	e7fe      	b.n	8012042 <vTaskStartScheduler+0xaa>
}
 8012044:	bf00      	nop
 8012046:	3718      	adds	r7, #24
 8012048:	46bd      	mov	sp, r7
 801204a:	bd80      	pop	{r7, pc}
 801204c:	08019b80 	.word	0x08019b80
 8012050:	080127b9 	.word	0x080127b9
 8012054:	20005dcc 	.word	0x20005dcc
 8012058:	20005dc8 	.word	0x20005dc8
 801205c:	20005db4 	.word	0x20005db4
 8012060:	20005dac 	.word	0x20005dac

08012064 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012064:	b480      	push	{r7}
 8012066:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8012068:	4b04      	ldr	r3, [pc, #16]	; (801207c <vTaskSuspendAll+0x18>)
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	3301      	adds	r3, #1
 801206e:	4a03      	ldr	r2, [pc, #12]	; (801207c <vTaskSuspendAll+0x18>)
 8012070:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8012072:	bf00      	nop
 8012074:	46bd      	mov	sp, r7
 8012076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801207a:	4770      	bx	lr
 801207c:	20005dd0 	.word	0x20005dd0

08012080 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012080:	b580      	push	{r7, lr}
 8012082:	b084      	sub	sp, #16
 8012084:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8012086:	2300      	movs	r3, #0
 8012088:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801208a:	2300      	movs	r3, #0
 801208c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801208e:	4b42      	ldr	r3, [pc, #264]	; (8012198 <xTaskResumeAll+0x118>)
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	2b00      	cmp	r3, #0
 8012094:	d10a      	bne.n	80120ac <xTaskResumeAll+0x2c>
	__asm volatile
 8012096:	f04f 0350 	mov.w	r3, #80	; 0x50
 801209a:	f383 8811 	msr	BASEPRI, r3
 801209e:	f3bf 8f6f 	isb	sy
 80120a2:	f3bf 8f4f 	dsb	sy
 80120a6:	603b      	str	r3, [r7, #0]
}
 80120a8:	bf00      	nop
 80120aa:	e7fe      	b.n	80120aa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80120ac:	f001 fbb2 	bl	8013814 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80120b0:	4b39      	ldr	r3, [pc, #228]	; (8012198 <xTaskResumeAll+0x118>)
 80120b2:	681b      	ldr	r3, [r3, #0]
 80120b4:	3b01      	subs	r3, #1
 80120b6:	4a38      	ldr	r2, [pc, #224]	; (8012198 <xTaskResumeAll+0x118>)
 80120b8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80120ba:	4b37      	ldr	r3, [pc, #220]	; (8012198 <xTaskResumeAll+0x118>)
 80120bc:	681b      	ldr	r3, [r3, #0]
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d162      	bne.n	8012188 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80120c2:	4b36      	ldr	r3, [pc, #216]	; (801219c <xTaskResumeAll+0x11c>)
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d05e      	beq.n	8012188 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80120ca:	e02f      	b.n	801212c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80120cc:	4b34      	ldr	r3, [pc, #208]	; (80121a0 <xTaskResumeAll+0x120>)
 80120ce:	68db      	ldr	r3, [r3, #12]
 80120d0:	68db      	ldr	r3, [r3, #12]
 80120d2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80120d4:	68fb      	ldr	r3, [r7, #12]
 80120d6:	3318      	adds	r3, #24
 80120d8:	4618      	mov	r0, r3
 80120da:	f7fe fddd 	bl	8010c98 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	3304      	adds	r3, #4
 80120e2:	4618      	mov	r0, r3
 80120e4:	f7fe fdd8 	bl	8010c98 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80120e8:	68fb      	ldr	r3, [r7, #12]
 80120ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80120ec:	4b2d      	ldr	r3, [pc, #180]	; (80121a4 <xTaskResumeAll+0x124>)
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	429a      	cmp	r2, r3
 80120f2:	d903      	bls.n	80120fc <xTaskResumeAll+0x7c>
 80120f4:	68fb      	ldr	r3, [r7, #12]
 80120f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120f8:	4a2a      	ldr	r2, [pc, #168]	; (80121a4 <xTaskResumeAll+0x124>)
 80120fa:	6013      	str	r3, [r2, #0]
 80120fc:	68fb      	ldr	r3, [r7, #12]
 80120fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012100:	4613      	mov	r3, r2
 8012102:	009b      	lsls	r3, r3, #2
 8012104:	4413      	add	r3, r2
 8012106:	009b      	lsls	r3, r3, #2
 8012108:	4a27      	ldr	r2, [pc, #156]	; (80121a8 <xTaskResumeAll+0x128>)
 801210a:	441a      	add	r2, r3
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	3304      	adds	r3, #4
 8012110:	4619      	mov	r1, r3
 8012112:	4610      	mov	r0, r2
 8012114:	f7fe fd63 	bl	8010bde <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801211c:	4b23      	ldr	r3, [pc, #140]	; (80121ac <xTaskResumeAll+0x12c>)
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012122:	429a      	cmp	r2, r3
 8012124:	d302      	bcc.n	801212c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8012126:	4b22      	ldr	r3, [pc, #136]	; (80121b0 <xTaskResumeAll+0x130>)
 8012128:	2201      	movs	r2, #1
 801212a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801212c:	4b1c      	ldr	r3, [pc, #112]	; (80121a0 <xTaskResumeAll+0x120>)
 801212e:	681b      	ldr	r3, [r3, #0]
 8012130:	2b00      	cmp	r3, #0
 8012132:	d1cb      	bne.n	80120cc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012134:	68fb      	ldr	r3, [r7, #12]
 8012136:	2b00      	cmp	r3, #0
 8012138:	d001      	beq.n	801213e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801213a:	f000 fbf3 	bl	8012924 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801213e:	4b1d      	ldr	r3, [pc, #116]	; (80121b4 <xTaskResumeAll+0x134>)
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	2b00      	cmp	r3, #0
 8012148:	d010      	beq.n	801216c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801214a:	f000 f847 	bl	80121dc <xTaskIncrementTick>
 801214e:	4603      	mov	r3, r0
 8012150:	2b00      	cmp	r3, #0
 8012152:	d002      	beq.n	801215a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8012154:	4b16      	ldr	r3, [pc, #88]	; (80121b0 <xTaskResumeAll+0x130>)
 8012156:	2201      	movs	r2, #1
 8012158:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	3b01      	subs	r3, #1
 801215e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	2b00      	cmp	r3, #0
 8012164:	d1f1      	bne.n	801214a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8012166:	4b13      	ldr	r3, [pc, #76]	; (80121b4 <xTaskResumeAll+0x134>)
 8012168:	2200      	movs	r2, #0
 801216a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801216c:	4b10      	ldr	r3, [pc, #64]	; (80121b0 <xTaskResumeAll+0x130>)
 801216e:	681b      	ldr	r3, [r3, #0]
 8012170:	2b00      	cmp	r3, #0
 8012172:	d009      	beq.n	8012188 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012174:	2301      	movs	r3, #1
 8012176:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012178:	4b0f      	ldr	r3, [pc, #60]	; (80121b8 <xTaskResumeAll+0x138>)
 801217a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801217e:	601a      	str	r2, [r3, #0]
 8012180:	f3bf 8f4f 	dsb	sy
 8012184:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012188:	f001 fb74 	bl	8013874 <vPortExitCritical>

	return xAlreadyYielded;
 801218c:	68bb      	ldr	r3, [r7, #8]
}
 801218e:	4618      	mov	r0, r3
 8012190:	3710      	adds	r7, #16
 8012192:	46bd      	mov	sp, r7
 8012194:	bd80      	pop	{r7, pc}
 8012196:	bf00      	nop
 8012198:	20005dd0 	.word	0x20005dd0
 801219c:	20005da8 	.word	0x20005da8
 80121a0:	20005d68 	.word	0x20005d68
 80121a4:	20005db0 	.word	0x20005db0
 80121a8:	200058d8 	.word	0x200058d8
 80121ac:	200058d4 	.word	0x200058d4
 80121b0:	20005dbc 	.word	0x20005dbc
 80121b4:	20005db8 	.word	0x20005db8
 80121b8:	e000ed04 	.word	0xe000ed04

080121bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80121bc:	b480      	push	{r7}
 80121be:	b083      	sub	sp, #12
 80121c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80121c2:	4b05      	ldr	r3, [pc, #20]	; (80121d8 <xTaskGetTickCount+0x1c>)
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80121c8:	687b      	ldr	r3, [r7, #4]
}
 80121ca:	4618      	mov	r0, r3
 80121cc:	370c      	adds	r7, #12
 80121ce:	46bd      	mov	sp, r7
 80121d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121d4:	4770      	bx	lr
 80121d6:	bf00      	nop
 80121d8:	20005dac 	.word	0x20005dac

080121dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80121dc:	b580      	push	{r7, lr}
 80121de:	b086      	sub	sp, #24
 80121e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80121e2:	2300      	movs	r3, #0
 80121e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80121e6:	4b4f      	ldr	r3, [pc, #316]	; (8012324 <xTaskIncrementTick+0x148>)
 80121e8:	681b      	ldr	r3, [r3, #0]
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	f040 808f 	bne.w	801230e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80121f0:	4b4d      	ldr	r3, [pc, #308]	; (8012328 <xTaskIncrementTick+0x14c>)
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	3301      	adds	r3, #1
 80121f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80121f8:	4a4b      	ldr	r2, [pc, #300]	; (8012328 <xTaskIncrementTick+0x14c>)
 80121fa:	693b      	ldr	r3, [r7, #16]
 80121fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80121fe:	693b      	ldr	r3, [r7, #16]
 8012200:	2b00      	cmp	r3, #0
 8012202:	d120      	bne.n	8012246 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8012204:	4b49      	ldr	r3, [pc, #292]	; (801232c <xTaskIncrementTick+0x150>)
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	2b00      	cmp	r3, #0
 801220c:	d00a      	beq.n	8012224 <xTaskIncrementTick+0x48>
	__asm volatile
 801220e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012212:	f383 8811 	msr	BASEPRI, r3
 8012216:	f3bf 8f6f 	isb	sy
 801221a:	f3bf 8f4f 	dsb	sy
 801221e:	603b      	str	r3, [r7, #0]
}
 8012220:	bf00      	nop
 8012222:	e7fe      	b.n	8012222 <xTaskIncrementTick+0x46>
 8012224:	4b41      	ldr	r3, [pc, #260]	; (801232c <xTaskIncrementTick+0x150>)
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	60fb      	str	r3, [r7, #12]
 801222a:	4b41      	ldr	r3, [pc, #260]	; (8012330 <xTaskIncrementTick+0x154>)
 801222c:	681b      	ldr	r3, [r3, #0]
 801222e:	4a3f      	ldr	r2, [pc, #252]	; (801232c <xTaskIncrementTick+0x150>)
 8012230:	6013      	str	r3, [r2, #0]
 8012232:	4a3f      	ldr	r2, [pc, #252]	; (8012330 <xTaskIncrementTick+0x154>)
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	6013      	str	r3, [r2, #0]
 8012238:	4b3e      	ldr	r3, [pc, #248]	; (8012334 <xTaskIncrementTick+0x158>)
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	3301      	adds	r3, #1
 801223e:	4a3d      	ldr	r2, [pc, #244]	; (8012334 <xTaskIncrementTick+0x158>)
 8012240:	6013      	str	r3, [r2, #0]
 8012242:	f000 fb6f 	bl	8012924 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012246:	4b3c      	ldr	r3, [pc, #240]	; (8012338 <xTaskIncrementTick+0x15c>)
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	693a      	ldr	r2, [r7, #16]
 801224c:	429a      	cmp	r2, r3
 801224e:	d349      	bcc.n	80122e4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012250:	4b36      	ldr	r3, [pc, #216]	; (801232c <xTaskIncrementTick+0x150>)
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	681b      	ldr	r3, [r3, #0]
 8012256:	2b00      	cmp	r3, #0
 8012258:	d104      	bne.n	8012264 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801225a:	4b37      	ldr	r3, [pc, #220]	; (8012338 <xTaskIncrementTick+0x15c>)
 801225c:	f04f 32ff 	mov.w	r2, #4294967295
 8012260:	601a      	str	r2, [r3, #0]
					break;
 8012262:	e03f      	b.n	80122e4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012264:	4b31      	ldr	r3, [pc, #196]	; (801232c <xTaskIncrementTick+0x150>)
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	68db      	ldr	r3, [r3, #12]
 801226a:	68db      	ldr	r3, [r3, #12]
 801226c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801226e:	68bb      	ldr	r3, [r7, #8]
 8012270:	685b      	ldr	r3, [r3, #4]
 8012272:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012274:	693a      	ldr	r2, [r7, #16]
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	429a      	cmp	r2, r3
 801227a:	d203      	bcs.n	8012284 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801227c:	4a2e      	ldr	r2, [pc, #184]	; (8012338 <xTaskIncrementTick+0x15c>)
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8012282:	e02f      	b.n	80122e4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012284:	68bb      	ldr	r3, [r7, #8]
 8012286:	3304      	adds	r3, #4
 8012288:	4618      	mov	r0, r3
 801228a:	f7fe fd05 	bl	8010c98 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801228e:	68bb      	ldr	r3, [r7, #8]
 8012290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012292:	2b00      	cmp	r3, #0
 8012294:	d004      	beq.n	80122a0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012296:	68bb      	ldr	r3, [r7, #8]
 8012298:	3318      	adds	r3, #24
 801229a:	4618      	mov	r0, r3
 801229c:	f7fe fcfc 	bl	8010c98 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80122a0:	68bb      	ldr	r3, [r7, #8]
 80122a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80122a4:	4b25      	ldr	r3, [pc, #148]	; (801233c <xTaskIncrementTick+0x160>)
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	429a      	cmp	r2, r3
 80122aa:	d903      	bls.n	80122b4 <xTaskIncrementTick+0xd8>
 80122ac:	68bb      	ldr	r3, [r7, #8]
 80122ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122b0:	4a22      	ldr	r2, [pc, #136]	; (801233c <xTaskIncrementTick+0x160>)
 80122b2:	6013      	str	r3, [r2, #0]
 80122b4:	68bb      	ldr	r3, [r7, #8]
 80122b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80122b8:	4613      	mov	r3, r2
 80122ba:	009b      	lsls	r3, r3, #2
 80122bc:	4413      	add	r3, r2
 80122be:	009b      	lsls	r3, r3, #2
 80122c0:	4a1f      	ldr	r2, [pc, #124]	; (8012340 <xTaskIncrementTick+0x164>)
 80122c2:	441a      	add	r2, r3
 80122c4:	68bb      	ldr	r3, [r7, #8]
 80122c6:	3304      	adds	r3, #4
 80122c8:	4619      	mov	r1, r3
 80122ca:	4610      	mov	r0, r2
 80122cc:	f7fe fc87 	bl	8010bde <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80122d0:	68bb      	ldr	r3, [r7, #8]
 80122d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80122d4:	4b1b      	ldr	r3, [pc, #108]	; (8012344 <xTaskIncrementTick+0x168>)
 80122d6:	681b      	ldr	r3, [r3, #0]
 80122d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122da:	429a      	cmp	r2, r3
 80122dc:	d3b8      	bcc.n	8012250 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80122de:	2301      	movs	r3, #1
 80122e0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80122e2:	e7b5      	b.n	8012250 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80122e4:	4b17      	ldr	r3, [pc, #92]	; (8012344 <xTaskIncrementTick+0x168>)
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80122ea:	4915      	ldr	r1, [pc, #84]	; (8012340 <xTaskIncrementTick+0x164>)
 80122ec:	4613      	mov	r3, r2
 80122ee:	009b      	lsls	r3, r3, #2
 80122f0:	4413      	add	r3, r2
 80122f2:	009b      	lsls	r3, r3, #2
 80122f4:	440b      	add	r3, r1
 80122f6:	681b      	ldr	r3, [r3, #0]
 80122f8:	2b01      	cmp	r3, #1
 80122fa:	d901      	bls.n	8012300 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80122fc:	2301      	movs	r3, #1
 80122fe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8012300:	4b11      	ldr	r3, [pc, #68]	; (8012348 <xTaskIncrementTick+0x16c>)
 8012302:	681b      	ldr	r3, [r3, #0]
 8012304:	2b00      	cmp	r3, #0
 8012306:	d007      	beq.n	8012318 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8012308:	2301      	movs	r3, #1
 801230a:	617b      	str	r3, [r7, #20]
 801230c:	e004      	b.n	8012318 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801230e:	4b0f      	ldr	r3, [pc, #60]	; (801234c <xTaskIncrementTick+0x170>)
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	3301      	adds	r3, #1
 8012314:	4a0d      	ldr	r2, [pc, #52]	; (801234c <xTaskIncrementTick+0x170>)
 8012316:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8012318:	697b      	ldr	r3, [r7, #20]
}
 801231a:	4618      	mov	r0, r3
 801231c:	3718      	adds	r7, #24
 801231e:	46bd      	mov	sp, r7
 8012320:	bd80      	pop	{r7, pc}
 8012322:	bf00      	nop
 8012324:	20005dd0 	.word	0x20005dd0
 8012328:	20005dac 	.word	0x20005dac
 801232c:	20005d60 	.word	0x20005d60
 8012330:	20005d64 	.word	0x20005d64
 8012334:	20005dc0 	.word	0x20005dc0
 8012338:	20005dc8 	.word	0x20005dc8
 801233c:	20005db0 	.word	0x20005db0
 8012340:	200058d8 	.word	0x200058d8
 8012344:	200058d4 	.word	0x200058d4
 8012348:	20005dbc 	.word	0x20005dbc
 801234c:	20005db8 	.word	0x20005db8

08012350 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012350:	b480      	push	{r7}
 8012352:	b085      	sub	sp, #20
 8012354:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012356:	4b28      	ldr	r3, [pc, #160]	; (80123f8 <vTaskSwitchContext+0xa8>)
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	2b00      	cmp	r3, #0
 801235c:	d003      	beq.n	8012366 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801235e:	4b27      	ldr	r3, [pc, #156]	; (80123fc <vTaskSwitchContext+0xac>)
 8012360:	2201      	movs	r2, #1
 8012362:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012364:	e041      	b.n	80123ea <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8012366:	4b25      	ldr	r3, [pc, #148]	; (80123fc <vTaskSwitchContext+0xac>)
 8012368:	2200      	movs	r2, #0
 801236a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801236c:	4b24      	ldr	r3, [pc, #144]	; (8012400 <vTaskSwitchContext+0xb0>)
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	60fb      	str	r3, [r7, #12]
 8012372:	e010      	b.n	8012396 <vTaskSwitchContext+0x46>
 8012374:	68fb      	ldr	r3, [r7, #12]
 8012376:	2b00      	cmp	r3, #0
 8012378:	d10a      	bne.n	8012390 <vTaskSwitchContext+0x40>
	__asm volatile
 801237a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801237e:	f383 8811 	msr	BASEPRI, r3
 8012382:	f3bf 8f6f 	isb	sy
 8012386:	f3bf 8f4f 	dsb	sy
 801238a:	607b      	str	r3, [r7, #4]
}
 801238c:	bf00      	nop
 801238e:	e7fe      	b.n	801238e <vTaskSwitchContext+0x3e>
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	3b01      	subs	r3, #1
 8012394:	60fb      	str	r3, [r7, #12]
 8012396:	491b      	ldr	r1, [pc, #108]	; (8012404 <vTaskSwitchContext+0xb4>)
 8012398:	68fa      	ldr	r2, [r7, #12]
 801239a:	4613      	mov	r3, r2
 801239c:	009b      	lsls	r3, r3, #2
 801239e:	4413      	add	r3, r2
 80123a0:	009b      	lsls	r3, r3, #2
 80123a2:	440b      	add	r3, r1
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d0e4      	beq.n	8012374 <vTaskSwitchContext+0x24>
 80123aa:	68fa      	ldr	r2, [r7, #12]
 80123ac:	4613      	mov	r3, r2
 80123ae:	009b      	lsls	r3, r3, #2
 80123b0:	4413      	add	r3, r2
 80123b2:	009b      	lsls	r3, r3, #2
 80123b4:	4a13      	ldr	r2, [pc, #76]	; (8012404 <vTaskSwitchContext+0xb4>)
 80123b6:	4413      	add	r3, r2
 80123b8:	60bb      	str	r3, [r7, #8]
 80123ba:	68bb      	ldr	r3, [r7, #8]
 80123bc:	685b      	ldr	r3, [r3, #4]
 80123be:	685a      	ldr	r2, [r3, #4]
 80123c0:	68bb      	ldr	r3, [r7, #8]
 80123c2:	605a      	str	r2, [r3, #4]
 80123c4:	68bb      	ldr	r3, [r7, #8]
 80123c6:	685a      	ldr	r2, [r3, #4]
 80123c8:	68bb      	ldr	r3, [r7, #8]
 80123ca:	3308      	adds	r3, #8
 80123cc:	429a      	cmp	r2, r3
 80123ce:	d104      	bne.n	80123da <vTaskSwitchContext+0x8a>
 80123d0:	68bb      	ldr	r3, [r7, #8]
 80123d2:	685b      	ldr	r3, [r3, #4]
 80123d4:	685a      	ldr	r2, [r3, #4]
 80123d6:	68bb      	ldr	r3, [r7, #8]
 80123d8:	605a      	str	r2, [r3, #4]
 80123da:	68bb      	ldr	r3, [r7, #8]
 80123dc:	685b      	ldr	r3, [r3, #4]
 80123de:	68db      	ldr	r3, [r3, #12]
 80123e0:	4a09      	ldr	r2, [pc, #36]	; (8012408 <vTaskSwitchContext+0xb8>)
 80123e2:	6013      	str	r3, [r2, #0]
 80123e4:	4a06      	ldr	r2, [pc, #24]	; (8012400 <vTaskSwitchContext+0xb0>)
 80123e6:	68fb      	ldr	r3, [r7, #12]
 80123e8:	6013      	str	r3, [r2, #0]
}
 80123ea:	bf00      	nop
 80123ec:	3714      	adds	r7, #20
 80123ee:	46bd      	mov	sp, r7
 80123f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123f4:	4770      	bx	lr
 80123f6:	bf00      	nop
 80123f8:	20005dd0 	.word	0x20005dd0
 80123fc:	20005dbc 	.word	0x20005dbc
 8012400:	20005db0 	.word	0x20005db0
 8012404:	200058d8 	.word	0x200058d8
 8012408:	200058d4 	.word	0x200058d4

0801240c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801240c:	b580      	push	{r7, lr}
 801240e:	b084      	sub	sp, #16
 8012410:	af00      	add	r7, sp, #0
 8012412:	6078      	str	r0, [r7, #4]
 8012414:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	2b00      	cmp	r3, #0
 801241a:	d10a      	bne.n	8012432 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801241c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012420:	f383 8811 	msr	BASEPRI, r3
 8012424:	f3bf 8f6f 	isb	sy
 8012428:	f3bf 8f4f 	dsb	sy
 801242c:	60fb      	str	r3, [r7, #12]
}
 801242e:	bf00      	nop
 8012430:	e7fe      	b.n	8012430 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012432:	4b07      	ldr	r3, [pc, #28]	; (8012450 <vTaskPlaceOnEventList+0x44>)
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	3318      	adds	r3, #24
 8012438:	4619      	mov	r1, r3
 801243a:	6878      	ldr	r0, [r7, #4]
 801243c:	f7fe fbf3 	bl	8010c26 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012440:	2101      	movs	r1, #1
 8012442:	6838      	ldr	r0, [r7, #0]
 8012444:	f000 fc40 	bl	8012cc8 <prvAddCurrentTaskToDelayedList>
}
 8012448:	bf00      	nop
 801244a:	3710      	adds	r7, #16
 801244c:	46bd      	mov	sp, r7
 801244e:	bd80      	pop	{r7, pc}
 8012450:	200058d4 	.word	0x200058d4

08012454 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8012454:	b580      	push	{r7, lr}
 8012456:	b086      	sub	sp, #24
 8012458:	af00      	add	r7, sp, #0
 801245a:	60f8      	str	r0, [r7, #12]
 801245c:	60b9      	str	r1, [r7, #8]
 801245e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	2b00      	cmp	r3, #0
 8012464:	d10a      	bne.n	801247c <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8012466:	f04f 0350 	mov.w	r3, #80	; 0x50
 801246a:	f383 8811 	msr	BASEPRI, r3
 801246e:	f3bf 8f6f 	isb	sy
 8012472:	f3bf 8f4f 	dsb	sy
 8012476:	617b      	str	r3, [r7, #20]
}
 8012478:	bf00      	nop
 801247a:	e7fe      	b.n	801247a <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 801247c:	4b11      	ldr	r3, [pc, #68]	; (80124c4 <vTaskPlaceOnUnorderedEventList+0x70>)
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	2b00      	cmp	r3, #0
 8012482:	d10a      	bne.n	801249a <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8012484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012488:	f383 8811 	msr	BASEPRI, r3
 801248c:	f3bf 8f6f 	isb	sy
 8012490:	f3bf 8f4f 	dsb	sy
 8012494:	613b      	str	r3, [r7, #16]
}
 8012496:	bf00      	nop
 8012498:	e7fe      	b.n	8012498 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801249a:	4b0b      	ldr	r3, [pc, #44]	; (80124c8 <vTaskPlaceOnUnorderedEventList+0x74>)
 801249c:	681b      	ldr	r3, [r3, #0]
 801249e:	68ba      	ldr	r2, [r7, #8]
 80124a0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80124a4:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80124a6:	4b08      	ldr	r3, [pc, #32]	; (80124c8 <vTaskPlaceOnUnorderedEventList+0x74>)
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	3318      	adds	r3, #24
 80124ac:	4619      	mov	r1, r3
 80124ae:	68f8      	ldr	r0, [r7, #12]
 80124b0:	f7fe fb95 	bl	8010bde <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80124b4:	2101      	movs	r1, #1
 80124b6:	6878      	ldr	r0, [r7, #4]
 80124b8:	f000 fc06 	bl	8012cc8 <prvAddCurrentTaskToDelayedList>
}
 80124bc:	bf00      	nop
 80124be:	3718      	adds	r7, #24
 80124c0:	46bd      	mov	sp, r7
 80124c2:	bd80      	pop	{r7, pc}
 80124c4:	20005dd0 	.word	0x20005dd0
 80124c8:	200058d4 	.word	0x200058d4

080124cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80124cc:	b580      	push	{r7, lr}
 80124ce:	b086      	sub	sp, #24
 80124d0:	af00      	add	r7, sp, #0
 80124d2:	60f8      	str	r0, [r7, #12]
 80124d4:	60b9      	str	r1, [r7, #8]
 80124d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80124d8:	68fb      	ldr	r3, [r7, #12]
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d10a      	bne.n	80124f4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80124de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124e2:	f383 8811 	msr	BASEPRI, r3
 80124e6:	f3bf 8f6f 	isb	sy
 80124ea:	f3bf 8f4f 	dsb	sy
 80124ee:	617b      	str	r3, [r7, #20]
}
 80124f0:	bf00      	nop
 80124f2:	e7fe      	b.n	80124f2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80124f4:	4b0a      	ldr	r3, [pc, #40]	; (8012520 <vTaskPlaceOnEventListRestricted+0x54>)
 80124f6:	681b      	ldr	r3, [r3, #0]
 80124f8:	3318      	adds	r3, #24
 80124fa:	4619      	mov	r1, r3
 80124fc:	68f8      	ldr	r0, [r7, #12]
 80124fe:	f7fe fb6e 	bl	8010bde <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	2b00      	cmp	r3, #0
 8012506:	d002      	beq.n	801250e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8012508:	f04f 33ff 	mov.w	r3, #4294967295
 801250c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801250e:	6879      	ldr	r1, [r7, #4]
 8012510:	68b8      	ldr	r0, [r7, #8]
 8012512:	f000 fbd9 	bl	8012cc8 <prvAddCurrentTaskToDelayedList>
	}
 8012516:	bf00      	nop
 8012518:	3718      	adds	r7, #24
 801251a:	46bd      	mov	sp, r7
 801251c:	bd80      	pop	{r7, pc}
 801251e:	bf00      	nop
 8012520:	200058d4 	.word	0x200058d4

08012524 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012524:	b580      	push	{r7, lr}
 8012526:	b086      	sub	sp, #24
 8012528:	af00      	add	r7, sp, #0
 801252a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	68db      	ldr	r3, [r3, #12]
 8012530:	68db      	ldr	r3, [r3, #12]
 8012532:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012534:	693b      	ldr	r3, [r7, #16]
 8012536:	2b00      	cmp	r3, #0
 8012538:	d10a      	bne.n	8012550 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801253a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801253e:	f383 8811 	msr	BASEPRI, r3
 8012542:	f3bf 8f6f 	isb	sy
 8012546:	f3bf 8f4f 	dsb	sy
 801254a:	60fb      	str	r3, [r7, #12]
}
 801254c:	bf00      	nop
 801254e:	e7fe      	b.n	801254e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012550:	693b      	ldr	r3, [r7, #16]
 8012552:	3318      	adds	r3, #24
 8012554:	4618      	mov	r0, r3
 8012556:	f7fe fb9f 	bl	8010c98 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801255a:	4b1e      	ldr	r3, [pc, #120]	; (80125d4 <xTaskRemoveFromEventList+0xb0>)
 801255c:	681b      	ldr	r3, [r3, #0]
 801255e:	2b00      	cmp	r3, #0
 8012560:	d11d      	bne.n	801259e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012562:	693b      	ldr	r3, [r7, #16]
 8012564:	3304      	adds	r3, #4
 8012566:	4618      	mov	r0, r3
 8012568:	f7fe fb96 	bl	8010c98 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801256c:	693b      	ldr	r3, [r7, #16]
 801256e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012570:	4b19      	ldr	r3, [pc, #100]	; (80125d8 <xTaskRemoveFromEventList+0xb4>)
 8012572:	681b      	ldr	r3, [r3, #0]
 8012574:	429a      	cmp	r2, r3
 8012576:	d903      	bls.n	8012580 <xTaskRemoveFromEventList+0x5c>
 8012578:	693b      	ldr	r3, [r7, #16]
 801257a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801257c:	4a16      	ldr	r2, [pc, #88]	; (80125d8 <xTaskRemoveFromEventList+0xb4>)
 801257e:	6013      	str	r3, [r2, #0]
 8012580:	693b      	ldr	r3, [r7, #16]
 8012582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012584:	4613      	mov	r3, r2
 8012586:	009b      	lsls	r3, r3, #2
 8012588:	4413      	add	r3, r2
 801258a:	009b      	lsls	r3, r3, #2
 801258c:	4a13      	ldr	r2, [pc, #76]	; (80125dc <xTaskRemoveFromEventList+0xb8>)
 801258e:	441a      	add	r2, r3
 8012590:	693b      	ldr	r3, [r7, #16]
 8012592:	3304      	adds	r3, #4
 8012594:	4619      	mov	r1, r3
 8012596:	4610      	mov	r0, r2
 8012598:	f7fe fb21 	bl	8010bde <vListInsertEnd>
 801259c:	e005      	b.n	80125aa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801259e:	693b      	ldr	r3, [r7, #16]
 80125a0:	3318      	adds	r3, #24
 80125a2:	4619      	mov	r1, r3
 80125a4:	480e      	ldr	r0, [pc, #56]	; (80125e0 <xTaskRemoveFromEventList+0xbc>)
 80125a6:	f7fe fb1a 	bl	8010bde <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80125aa:	693b      	ldr	r3, [r7, #16]
 80125ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80125ae:	4b0d      	ldr	r3, [pc, #52]	; (80125e4 <xTaskRemoveFromEventList+0xc0>)
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125b4:	429a      	cmp	r2, r3
 80125b6:	d905      	bls.n	80125c4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80125b8:	2301      	movs	r3, #1
 80125ba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80125bc:	4b0a      	ldr	r3, [pc, #40]	; (80125e8 <xTaskRemoveFromEventList+0xc4>)
 80125be:	2201      	movs	r2, #1
 80125c0:	601a      	str	r2, [r3, #0]
 80125c2:	e001      	b.n	80125c8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80125c4:	2300      	movs	r3, #0
 80125c6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80125c8:	697b      	ldr	r3, [r7, #20]
}
 80125ca:	4618      	mov	r0, r3
 80125cc:	3718      	adds	r7, #24
 80125ce:	46bd      	mov	sp, r7
 80125d0:	bd80      	pop	{r7, pc}
 80125d2:	bf00      	nop
 80125d4:	20005dd0 	.word	0x20005dd0
 80125d8:	20005db0 	.word	0x20005db0
 80125dc:	200058d8 	.word	0x200058d8
 80125e0:	20005d68 	.word	0x20005d68
 80125e4:	200058d4 	.word	0x200058d4
 80125e8:	20005dbc 	.word	0x20005dbc

080125ec <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80125ec:	b580      	push	{r7, lr}
 80125ee:	b086      	sub	sp, #24
 80125f0:	af00      	add	r7, sp, #0
 80125f2:	6078      	str	r0, [r7, #4]
 80125f4:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80125f6:	4b29      	ldr	r3, [pc, #164]	; (801269c <vTaskRemoveFromUnorderedEventList+0xb0>)
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d10a      	bne.n	8012614 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 80125fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012602:	f383 8811 	msr	BASEPRI, r3
 8012606:	f3bf 8f6f 	isb	sy
 801260a:	f3bf 8f4f 	dsb	sy
 801260e:	613b      	str	r3, [r7, #16]
}
 8012610:	bf00      	nop
 8012612:	e7fe      	b.n	8012612 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8012614:	683b      	ldr	r3, [r7, #0]
 8012616:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	68db      	ldr	r3, [r3, #12]
 8012622:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8012624:	697b      	ldr	r3, [r7, #20]
 8012626:	2b00      	cmp	r3, #0
 8012628:	d10a      	bne.n	8012640 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 801262a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801262e:	f383 8811 	msr	BASEPRI, r3
 8012632:	f3bf 8f6f 	isb	sy
 8012636:	f3bf 8f4f 	dsb	sy
 801263a:	60fb      	str	r3, [r7, #12]
}
 801263c:	bf00      	nop
 801263e:	e7fe      	b.n	801263e <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8012640:	6878      	ldr	r0, [r7, #4]
 8012642:	f7fe fb29 	bl	8010c98 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012646:	697b      	ldr	r3, [r7, #20]
 8012648:	3304      	adds	r3, #4
 801264a:	4618      	mov	r0, r3
 801264c:	f7fe fb24 	bl	8010c98 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8012650:	697b      	ldr	r3, [r7, #20]
 8012652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012654:	4b12      	ldr	r3, [pc, #72]	; (80126a0 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	429a      	cmp	r2, r3
 801265a:	d903      	bls.n	8012664 <vTaskRemoveFromUnorderedEventList+0x78>
 801265c:	697b      	ldr	r3, [r7, #20]
 801265e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012660:	4a0f      	ldr	r2, [pc, #60]	; (80126a0 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8012662:	6013      	str	r3, [r2, #0]
 8012664:	697b      	ldr	r3, [r7, #20]
 8012666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012668:	4613      	mov	r3, r2
 801266a:	009b      	lsls	r3, r3, #2
 801266c:	4413      	add	r3, r2
 801266e:	009b      	lsls	r3, r3, #2
 8012670:	4a0c      	ldr	r2, [pc, #48]	; (80126a4 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8012672:	441a      	add	r2, r3
 8012674:	697b      	ldr	r3, [r7, #20]
 8012676:	3304      	adds	r3, #4
 8012678:	4619      	mov	r1, r3
 801267a:	4610      	mov	r0, r2
 801267c:	f7fe faaf 	bl	8010bde <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012680:	697b      	ldr	r3, [r7, #20]
 8012682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012684:	4b08      	ldr	r3, [pc, #32]	; (80126a8 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8012686:	681b      	ldr	r3, [r3, #0]
 8012688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801268a:	429a      	cmp	r2, r3
 801268c:	d902      	bls.n	8012694 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 801268e:	4b07      	ldr	r3, [pc, #28]	; (80126ac <vTaskRemoveFromUnorderedEventList+0xc0>)
 8012690:	2201      	movs	r2, #1
 8012692:	601a      	str	r2, [r3, #0]
	}
}
 8012694:	bf00      	nop
 8012696:	3718      	adds	r7, #24
 8012698:	46bd      	mov	sp, r7
 801269a:	bd80      	pop	{r7, pc}
 801269c:	20005dd0 	.word	0x20005dd0
 80126a0:	20005db0 	.word	0x20005db0
 80126a4:	200058d8 	.word	0x200058d8
 80126a8:	200058d4 	.word	0x200058d4
 80126ac:	20005dbc 	.word	0x20005dbc

080126b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80126b0:	b480      	push	{r7}
 80126b2:	b083      	sub	sp, #12
 80126b4:	af00      	add	r7, sp, #0
 80126b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80126b8:	4b06      	ldr	r3, [pc, #24]	; (80126d4 <vTaskInternalSetTimeOutState+0x24>)
 80126ba:	681a      	ldr	r2, [r3, #0]
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80126c0:	4b05      	ldr	r3, [pc, #20]	; (80126d8 <vTaskInternalSetTimeOutState+0x28>)
 80126c2:	681a      	ldr	r2, [r3, #0]
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	605a      	str	r2, [r3, #4]
}
 80126c8:	bf00      	nop
 80126ca:	370c      	adds	r7, #12
 80126cc:	46bd      	mov	sp, r7
 80126ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126d2:	4770      	bx	lr
 80126d4:	20005dc0 	.word	0x20005dc0
 80126d8:	20005dac 	.word	0x20005dac

080126dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80126dc:	b580      	push	{r7, lr}
 80126de:	b088      	sub	sp, #32
 80126e0:	af00      	add	r7, sp, #0
 80126e2:	6078      	str	r0, [r7, #4]
 80126e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d10a      	bne.n	8012702 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80126ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126f0:	f383 8811 	msr	BASEPRI, r3
 80126f4:	f3bf 8f6f 	isb	sy
 80126f8:	f3bf 8f4f 	dsb	sy
 80126fc:	613b      	str	r3, [r7, #16]
}
 80126fe:	bf00      	nop
 8012700:	e7fe      	b.n	8012700 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8012702:	683b      	ldr	r3, [r7, #0]
 8012704:	2b00      	cmp	r3, #0
 8012706:	d10a      	bne.n	801271e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8012708:	f04f 0350 	mov.w	r3, #80	; 0x50
 801270c:	f383 8811 	msr	BASEPRI, r3
 8012710:	f3bf 8f6f 	isb	sy
 8012714:	f3bf 8f4f 	dsb	sy
 8012718:	60fb      	str	r3, [r7, #12]
}
 801271a:	bf00      	nop
 801271c:	e7fe      	b.n	801271c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801271e:	f001 f879 	bl	8013814 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8012722:	4b1d      	ldr	r3, [pc, #116]	; (8012798 <xTaskCheckForTimeOut+0xbc>)
 8012724:	681b      	ldr	r3, [r3, #0]
 8012726:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	685b      	ldr	r3, [r3, #4]
 801272c:	69ba      	ldr	r2, [r7, #24]
 801272e:	1ad3      	subs	r3, r2, r3
 8012730:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8012732:	683b      	ldr	r3, [r7, #0]
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	f1b3 3fff 	cmp.w	r3, #4294967295
 801273a:	d102      	bne.n	8012742 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801273c:	2300      	movs	r3, #0
 801273e:	61fb      	str	r3, [r7, #28]
 8012740:	e023      	b.n	801278a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	681a      	ldr	r2, [r3, #0]
 8012746:	4b15      	ldr	r3, [pc, #84]	; (801279c <xTaskCheckForTimeOut+0xc0>)
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	429a      	cmp	r2, r3
 801274c:	d007      	beq.n	801275e <xTaskCheckForTimeOut+0x82>
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	685b      	ldr	r3, [r3, #4]
 8012752:	69ba      	ldr	r2, [r7, #24]
 8012754:	429a      	cmp	r2, r3
 8012756:	d302      	bcc.n	801275e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012758:	2301      	movs	r3, #1
 801275a:	61fb      	str	r3, [r7, #28]
 801275c:	e015      	b.n	801278a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801275e:	683b      	ldr	r3, [r7, #0]
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	697a      	ldr	r2, [r7, #20]
 8012764:	429a      	cmp	r2, r3
 8012766:	d20b      	bcs.n	8012780 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012768:	683b      	ldr	r3, [r7, #0]
 801276a:	681a      	ldr	r2, [r3, #0]
 801276c:	697b      	ldr	r3, [r7, #20]
 801276e:	1ad2      	subs	r2, r2, r3
 8012770:	683b      	ldr	r3, [r7, #0]
 8012772:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012774:	6878      	ldr	r0, [r7, #4]
 8012776:	f7ff ff9b 	bl	80126b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801277a:	2300      	movs	r3, #0
 801277c:	61fb      	str	r3, [r7, #28]
 801277e:	e004      	b.n	801278a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8012780:	683b      	ldr	r3, [r7, #0]
 8012782:	2200      	movs	r2, #0
 8012784:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012786:	2301      	movs	r3, #1
 8012788:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801278a:	f001 f873 	bl	8013874 <vPortExitCritical>

	return xReturn;
 801278e:	69fb      	ldr	r3, [r7, #28]
}
 8012790:	4618      	mov	r0, r3
 8012792:	3720      	adds	r7, #32
 8012794:	46bd      	mov	sp, r7
 8012796:	bd80      	pop	{r7, pc}
 8012798:	20005dac 	.word	0x20005dac
 801279c:	20005dc0 	.word	0x20005dc0

080127a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80127a0:	b480      	push	{r7}
 80127a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80127a4:	4b03      	ldr	r3, [pc, #12]	; (80127b4 <vTaskMissedYield+0x14>)
 80127a6:	2201      	movs	r2, #1
 80127a8:	601a      	str	r2, [r3, #0]
}
 80127aa:	bf00      	nop
 80127ac:	46bd      	mov	sp, r7
 80127ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127b2:	4770      	bx	lr
 80127b4:	20005dbc 	.word	0x20005dbc

080127b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80127b8:	b580      	push	{r7, lr}
 80127ba:	b082      	sub	sp, #8
 80127bc:	af00      	add	r7, sp, #0
 80127be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80127c0:	f000 f852 	bl	8012868 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80127c4:	4b06      	ldr	r3, [pc, #24]	; (80127e0 <prvIdleTask+0x28>)
 80127c6:	681b      	ldr	r3, [r3, #0]
 80127c8:	2b01      	cmp	r3, #1
 80127ca:	d9f9      	bls.n	80127c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80127cc:	4b05      	ldr	r3, [pc, #20]	; (80127e4 <prvIdleTask+0x2c>)
 80127ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80127d2:	601a      	str	r2, [r3, #0]
 80127d4:	f3bf 8f4f 	dsb	sy
 80127d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80127dc:	e7f0      	b.n	80127c0 <prvIdleTask+0x8>
 80127de:	bf00      	nop
 80127e0:	200058d8 	.word	0x200058d8
 80127e4:	e000ed04 	.word	0xe000ed04

080127e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80127e8:	b580      	push	{r7, lr}
 80127ea:	b082      	sub	sp, #8
 80127ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80127ee:	2300      	movs	r3, #0
 80127f0:	607b      	str	r3, [r7, #4]
 80127f2:	e00c      	b.n	801280e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80127f4:	687a      	ldr	r2, [r7, #4]
 80127f6:	4613      	mov	r3, r2
 80127f8:	009b      	lsls	r3, r3, #2
 80127fa:	4413      	add	r3, r2
 80127fc:	009b      	lsls	r3, r3, #2
 80127fe:	4a12      	ldr	r2, [pc, #72]	; (8012848 <prvInitialiseTaskLists+0x60>)
 8012800:	4413      	add	r3, r2
 8012802:	4618      	mov	r0, r3
 8012804:	f7fe f9be 	bl	8010b84 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	3301      	adds	r3, #1
 801280c:	607b      	str	r3, [r7, #4]
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	2b37      	cmp	r3, #55	; 0x37
 8012812:	d9ef      	bls.n	80127f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012814:	480d      	ldr	r0, [pc, #52]	; (801284c <prvInitialiseTaskLists+0x64>)
 8012816:	f7fe f9b5 	bl	8010b84 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801281a:	480d      	ldr	r0, [pc, #52]	; (8012850 <prvInitialiseTaskLists+0x68>)
 801281c:	f7fe f9b2 	bl	8010b84 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012820:	480c      	ldr	r0, [pc, #48]	; (8012854 <prvInitialiseTaskLists+0x6c>)
 8012822:	f7fe f9af 	bl	8010b84 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8012826:	480c      	ldr	r0, [pc, #48]	; (8012858 <prvInitialiseTaskLists+0x70>)
 8012828:	f7fe f9ac 	bl	8010b84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801282c:	480b      	ldr	r0, [pc, #44]	; (801285c <prvInitialiseTaskLists+0x74>)
 801282e:	f7fe f9a9 	bl	8010b84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8012832:	4b0b      	ldr	r3, [pc, #44]	; (8012860 <prvInitialiseTaskLists+0x78>)
 8012834:	4a05      	ldr	r2, [pc, #20]	; (801284c <prvInitialiseTaskLists+0x64>)
 8012836:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012838:	4b0a      	ldr	r3, [pc, #40]	; (8012864 <prvInitialiseTaskLists+0x7c>)
 801283a:	4a05      	ldr	r2, [pc, #20]	; (8012850 <prvInitialiseTaskLists+0x68>)
 801283c:	601a      	str	r2, [r3, #0]
}
 801283e:	bf00      	nop
 8012840:	3708      	adds	r7, #8
 8012842:	46bd      	mov	sp, r7
 8012844:	bd80      	pop	{r7, pc}
 8012846:	bf00      	nop
 8012848:	200058d8 	.word	0x200058d8
 801284c:	20005d38 	.word	0x20005d38
 8012850:	20005d4c 	.word	0x20005d4c
 8012854:	20005d68 	.word	0x20005d68
 8012858:	20005d7c 	.word	0x20005d7c
 801285c:	20005d94 	.word	0x20005d94
 8012860:	20005d60 	.word	0x20005d60
 8012864:	20005d64 	.word	0x20005d64

08012868 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012868:	b580      	push	{r7, lr}
 801286a:	b082      	sub	sp, #8
 801286c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801286e:	e019      	b.n	80128a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012870:	f000 ffd0 	bl	8013814 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012874:	4b10      	ldr	r3, [pc, #64]	; (80128b8 <prvCheckTasksWaitingTermination+0x50>)
 8012876:	68db      	ldr	r3, [r3, #12]
 8012878:	68db      	ldr	r3, [r3, #12]
 801287a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	3304      	adds	r3, #4
 8012880:	4618      	mov	r0, r3
 8012882:	f7fe fa09 	bl	8010c98 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012886:	4b0d      	ldr	r3, [pc, #52]	; (80128bc <prvCheckTasksWaitingTermination+0x54>)
 8012888:	681b      	ldr	r3, [r3, #0]
 801288a:	3b01      	subs	r3, #1
 801288c:	4a0b      	ldr	r2, [pc, #44]	; (80128bc <prvCheckTasksWaitingTermination+0x54>)
 801288e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012890:	4b0b      	ldr	r3, [pc, #44]	; (80128c0 <prvCheckTasksWaitingTermination+0x58>)
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	3b01      	subs	r3, #1
 8012896:	4a0a      	ldr	r2, [pc, #40]	; (80128c0 <prvCheckTasksWaitingTermination+0x58>)
 8012898:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801289a:	f000 ffeb 	bl	8013874 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801289e:	6878      	ldr	r0, [r7, #4]
 80128a0:	f000 f810 	bl	80128c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80128a4:	4b06      	ldr	r3, [pc, #24]	; (80128c0 <prvCheckTasksWaitingTermination+0x58>)
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d1e1      	bne.n	8012870 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80128ac:	bf00      	nop
 80128ae:	bf00      	nop
 80128b0:	3708      	adds	r7, #8
 80128b2:	46bd      	mov	sp, r7
 80128b4:	bd80      	pop	{r7, pc}
 80128b6:	bf00      	nop
 80128b8:	20005d7c 	.word	0x20005d7c
 80128bc:	20005da8 	.word	0x20005da8
 80128c0:	20005d90 	.word	0x20005d90

080128c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80128c4:	b580      	push	{r7, lr}
 80128c6:	b084      	sub	sp, #16
 80128c8:	af00      	add	r7, sp, #0
 80128ca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d108      	bne.n	80128e8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80128da:	4618      	mov	r0, r3
 80128dc:	f001 f988 	bl	8013bf0 <vPortFree>
				vPortFree( pxTCB );
 80128e0:	6878      	ldr	r0, [r7, #4]
 80128e2:	f001 f985 	bl	8013bf0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80128e6:	e018      	b.n	801291a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80128ee:	2b01      	cmp	r3, #1
 80128f0:	d103      	bne.n	80128fa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80128f2:	6878      	ldr	r0, [r7, #4]
 80128f4:	f001 f97c 	bl	8013bf0 <vPortFree>
	}
 80128f8:	e00f      	b.n	801291a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8012900:	2b02      	cmp	r3, #2
 8012902:	d00a      	beq.n	801291a <prvDeleteTCB+0x56>
	__asm volatile
 8012904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012908:	f383 8811 	msr	BASEPRI, r3
 801290c:	f3bf 8f6f 	isb	sy
 8012910:	f3bf 8f4f 	dsb	sy
 8012914:	60fb      	str	r3, [r7, #12]
}
 8012916:	bf00      	nop
 8012918:	e7fe      	b.n	8012918 <prvDeleteTCB+0x54>
	}
 801291a:	bf00      	nop
 801291c:	3710      	adds	r7, #16
 801291e:	46bd      	mov	sp, r7
 8012920:	bd80      	pop	{r7, pc}
	...

08012924 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012924:	b480      	push	{r7}
 8012926:	b083      	sub	sp, #12
 8012928:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801292a:	4b0c      	ldr	r3, [pc, #48]	; (801295c <prvResetNextTaskUnblockTime+0x38>)
 801292c:	681b      	ldr	r3, [r3, #0]
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	2b00      	cmp	r3, #0
 8012932:	d104      	bne.n	801293e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012934:	4b0a      	ldr	r3, [pc, #40]	; (8012960 <prvResetNextTaskUnblockTime+0x3c>)
 8012936:	f04f 32ff 	mov.w	r2, #4294967295
 801293a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801293c:	e008      	b.n	8012950 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801293e:	4b07      	ldr	r3, [pc, #28]	; (801295c <prvResetNextTaskUnblockTime+0x38>)
 8012940:	681b      	ldr	r3, [r3, #0]
 8012942:	68db      	ldr	r3, [r3, #12]
 8012944:	68db      	ldr	r3, [r3, #12]
 8012946:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	685b      	ldr	r3, [r3, #4]
 801294c:	4a04      	ldr	r2, [pc, #16]	; (8012960 <prvResetNextTaskUnblockTime+0x3c>)
 801294e:	6013      	str	r3, [r2, #0]
}
 8012950:	bf00      	nop
 8012952:	370c      	adds	r7, #12
 8012954:	46bd      	mov	sp, r7
 8012956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801295a:	4770      	bx	lr
 801295c:	20005d60 	.word	0x20005d60
 8012960:	20005dc8 	.word	0x20005dc8

08012964 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8012964:	b480      	push	{r7}
 8012966:	b083      	sub	sp, #12
 8012968:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 801296a:	4b05      	ldr	r3, [pc, #20]	; (8012980 <xTaskGetCurrentTaskHandle+0x1c>)
 801296c:	681b      	ldr	r3, [r3, #0]
 801296e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8012970:	687b      	ldr	r3, [r7, #4]
	}
 8012972:	4618      	mov	r0, r3
 8012974:	370c      	adds	r7, #12
 8012976:	46bd      	mov	sp, r7
 8012978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801297c:	4770      	bx	lr
 801297e:	bf00      	nop
 8012980:	200058d4 	.word	0x200058d4

08012984 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012984:	b480      	push	{r7}
 8012986:	b083      	sub	sp, #12
 8012988:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801298a:	4b0b      	ldr	r3, [pc, #44]	; (80129b8 <xTaskGetSchedulerState+0x34>)
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	2b00      	cmp	r3, #0
 8012990:	d102      	bne.n	8012998 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012992:	2301      	movs	r3, #1
 8012994:	607b      	str	r3, [r7, #4]
 8012996:	e008      	b.n	80129aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012998:	4b08      	ldr	r3, [pc, #32]	; (80129bc <xTaskGetSchedulerState+0x38>)
 801299a:	681b      	ldr	r3, [r3, #0]
 801299c:	2b00      	cmp	r3, #0
 801299e:	d102      	bne.n	80129a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80129a0:	2302      	movs	r3, #2
 80129a2:	607b      	str	r3, [r7, #4]
 80129a4:	e001      	b.n	80129aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80129a6:	2300      	movs	r3, #0
 80129a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80129aa:	687b      	ldr	r3, [r7, #4]
	}
 80129ac:	4618      	mov	r0, r3
 80129ae:	370c      	adds	r7, #12
 80129b0:	46bd      	mov	sp, r7
 80129b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129b6:	4770      	bx	lr
 80129b8:	20005db4 	.word	0x20005db4
 80129bc:	20005dd0 	.word	0x20005dd0

080129c0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80129c0:	b580      	push	{r7, lr}
 80129c2:	b084      	sub	sp, #16
 80129c4:	af00      	add	r7, sp, #0
 80129c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80129cc:	2300      	movs	r3, #0
 80129ce:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d051      	beq.n	8012a7a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80129d6:	68bb      	ldr	r3, [r7, #8]
 80129d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80129da:	4b2a      	ldr	r3, [pc, #168]	; (8012a84 <xTaskPriorityInherit+0xc4>)
 80129dc:	681b      	ldr	r3, [r3, #0]
 80129de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129e0:	429a      	cmp	r2, r3
 80129e2:	d241      	bcs.n	8012a68 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80129e4:	68bb      	ldr	r3, [r7, #8]
 80129e6:	699b      	ldr	r3, [r3, #24]
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	db06      	blt.n	80129fa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80129ec:	4b25      	ldr	r3, [pc, #148]	; (8012a84 <xTaskPriorityInherit+0xc4>)
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80129f6:	68bb      	ldr	r3, [r7, #8]
 80129f8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80129fa:	68bb      	ldr	r3, [r7, #8]
 80129fc:	6959      	ldr	r1, [r3, #20]
 80129fe:	68bb      	ldr	r3, [r7, #8]
 8012a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a02:	4613      	mov	r3, r2
 8012a04:	009b      	lsls	r3, r3, #2
 8012a06:	4413      	add	r3, r2
 8012a08:	009b      	lsls	r3, r3, #2
 8012a0a:	4a1f      	ldr	r2, [pc, #124]	; (8012a88 <xTaskPriorityInherit+0xc8>)
 8012a0c:	4413      	add	r3, r2
 8012a0e:	4299      	cmp	r1, r3
 8012a10:	d122      	bne.n	8012a58 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012a12:	68bb      	ldr	r3, [r7, #8]
 8012a14:	3304      	adds	r3, #4
 8012a16:	4618      	mov	r0, r3
 8012a18:	f7fe f93e 	bl	8010c98 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012a1c:	4b19      	ldr	r3, [pc, #100]	; (8012a84 <xTaskPriorityInherit+0xc4>)
 8012a1e:	681b      	ldr	r3, [r3, #0]
 8012a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a22:	68bb      	ldr	r3, [r7, #8]
 8012a24:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8012a26:	68bb      	ldr	r3, [r7, #8]
 8012a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a2a:	4b18      	ldr	r3, [pc, #96]	; (8012a8c <xTaskPriorityInherit+0xcc>)
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	429a      	cmp	r2, r3
 8012a30:	d903      	bls.n	8012a3a <xTaskPriorityInherit+0x7a>
 8012a32:	68bb      	ldr	r3, [r7, #8]
 8012a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a36:	4a15      	ldr	r2, [pc, #84]	; (8012a8c <xTaskPriorityInherit+0xcc>)
 8012a38:	6013      	str	r3, [r2, #0]
 8012a3a:	68bb      	ldr	r3, [r7, #8]
 8012a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a3e:	4613      	mov	r3, r2
 8012a40:	009b      	lsls	r3, r3, #2
 8012a42:	4413      	add	r3, r2
 8012a44:	009b      	lsls	r3, r3, #2
 8012a46:	4a10      	ldr	r2, [pc, #64]	; (8012a88 <xTaskPriorityInherit+0xc8>)
 8012a48:	441a      	add	r2, r3
 8012a4a:	68bb      	ldr	r3, [r7, #8]
 8012a4c:	3304      	adds	r3, #4
 8012a4e:	4619      	mov	r1, r3
 8012a50:	4610      	mov	r0, r2
 8012a52:	f7fe f8c4 	bl	8010bde <vListInsertEnd>
 8012a56:	e004      	b.n	8012a62 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012a58:	4b0a      	ldr	r3, [pc, #40]	; (8012a84 <xTaskPriorityInherit+0xc4>)
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a5e:	68bb      	ldr	r3, [r7, #8]
 8012a60:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8012a62:	2301      	movs	r3, #1
 8012a64:	60fb      	str	r3, [r7, #12]
 8012a66:	e008      	b.n	8012a7a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8012a68:	68bb      	ldr	r3, [r7, #8]
 8012a6a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012a6c:	4b05      	ldr	r3, [pc, #20]	; (8012a84 <xTaskPriorityInherit+0xc4>)
 8012a6e:	681b      	ldr	r3, [r3, #0]
 8012a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a72:	429a      	cmp	r2, r3
 8012a74:	d201      	bcs.n	8012a7a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8012a76:	2301      	movs	r3, #1
 8012a78:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012a7a:	68fb      	ldr	r3, [r7, #12]
	}
 8012a7c:	4618      	mov	r0, r3
 8012a7e:	3710      	adds	r7, #16
 8012a80:	46bd      	mov	sp, r7
 8012a82:	bd80      	pop	{r7, pc}
 8012a84:	200058d4 	.word	0x200058d4
 8012a88:	200058d8 	.word	0x200058d8
 8012a8c:	20005db0 	.word	0x20005db0

08012a90 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012a90:	b580      	push	{r7, lr}
 8012a92:	b086      	sub	sp, #24
 8012a94:	af00      	add	r7, sp, #0
 8012a96:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012a9c:	2300      	movs	r3, #0
 8012a9e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d056      	beq.n	8012b54 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8012aa6:	4b2e      	ldr	r3, [pc, #184]	; (8012b60 <xTaskPriorityDisinherit+0xd0>)
 8012aa8:	681b      	ldr	r3, [r3, #0]
 8012aaa:	693a      	ldr	r2, [r7, #16]
 8012aac:	429a      	cmp	r2, r3
 8012aae:	d00a      	beq.n	8012ac6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8012ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ab4:	f383 8811 	msr	BASEPRI, r3
 8012ab8:	f3bf 8f6f 	isb	sy
 8012abc:	f3bf 8f4f 	dsb	sy
 8012ac0:	60fb      	str	r3, [r7, #12]
}
 8012ac2:	bf00      	nop
 8012ac4:	e7fe      	b.n	8012ac4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8012ac6:	693b      	ldr	r3, [r7, #16]
 8012ac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d10a      	bne.n	8012ae4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8012ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ad2:	f383 8811 	msr	BASEPRI, r3
 8012ad6:	f3bf 8f6f 	isb	sy
 8012ada:	f3bf 8f4f 	dsb	sy
 8012ade:	60bb      	str	r3, [r7, #8]
}
 8012ae0:	bf00      	nop
 8012ae2:	e7fe      	b.n	8012ae2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8012ae4:	693b      	ldr	r3, [r7, #16]
 8012ae6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012ae8:	1e5a      	subs	r2, r3, #1
 8012aea:	693b      	ldr	r3, [r7, #16]
 8012aec:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012aee:	693b      	ldr	r3, [r7, #16]
 8012af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012af2:	693b      	ldr	r3, [r7, #16]
 8012af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012af6:	429a      	cmp	r2, r3
 8012af8:	d02c      	beq.n	8012b54 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8012afa:	693b      	ldr	r3, [r7, #16]
 8012afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d128      	bne.n	8012b54 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012b02:	693b      	ldr	r3, [r7, #16]
 8012b04:	3304      	adds	r3, #4
 8012b06:	4618      	mov	r0, r3
 8012b08:	f7fe f8c6 	bl	8010c98 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012b0c:	693b      	ldr	r3, [r7, #16]
 8012b0e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012b10:	693b      	ldr	r3, [r7, #16]
 8012b12:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012b14:	693b      	ldr	r3, [r7, #16]
 8012b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b18:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012b1c:	693b      	ldr	r3, [r7, #16]
 8012b1e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012b20:	693b      	ldr	r3, [r7, #16]
 8012b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b24:	4b0f      	ldr	r3, [pc, #60]	; (8012b64 <xTaskPriorityDisinherit+0xd4>)
 8012b26:	681b      	ldr	r3, [r3, #0]
 8012b28:	429a      	cmp	r2, r3
 8012b2a:	d903      	bls.n	8012b34 <xTaskPriorityDisinherit+0xa4>
 8012b2c:	693b      	ldr	r3, [r7, #16]
 8012b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b30:	4a0c      	ldr	r2, [pc, #48]	; (8012b64 <xTaskPriorityDisinherit+0xd4>)
 8012b32:	6013      	str	r3, [r2, #0]
 8012b34:	693b      	ldr	r3, [r7, #16]
 8012b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b38:	4613      	mov	r3, r2
 8012b3a:	009b      	lsls	r3, r3, #2
 8012b3c:	4413      	add	r3, r2
 8012b3e:	009b      	lsls	r3, r3, #2
 8012b40:	4a09      	ldr	r2, [pc, #36]	; (8012b68 <xTaskPriorityDisinherit+0xd8>)
 8012b42:	441a      	add	r2, r3
 8012b44:	693b      	ldr	r3, [r7, #16]
 8012b46:	3304      	adds	r3, #4
 8012b48:	4619      	mov	r1, r3
 8012b4a:	4610      	mov	r0, r2
 8012b4c:	f7fe f847 	bl	8010bde <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012b50:	2301      	movs	r3, #1
 8012b52:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012b54:	697b      	ldr	r3, [r7, #20]
	}
 8012b56:	4618      	mov	r0, r3
 8012b58:	3718      	adds	r7, #24
 8012b5a:	46bd      	mov	sp, r7
 8012b5c:	bd80      	pop	{r7, pc}
 8012b5e:	bf00      	nop
 8012b60:	200058d4 	.word	0x200058d4
 8012b64:	20005db0 	.word	0x20005db0
 8012b68:	200058d8 	.word	0x200058d8

08012b6c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8012b6c:	b580      	push	{r7, lr}
 8012b6e:	b088      	sub	sp, #32
 8012b70:	af00      	add	r7, sp, #0
 8012b72:	6078      	str	r0, [r7, #4]
 8012b74:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8012b7a:	2301      	movs	r3, #1
 8012b7c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d06a      	beq.n	8012c5a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8012b84:	69bb      	ldr	r3, [r7, #24]
 8012b86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d10a      	bne.n	8012ba2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8012b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b90:	f383 8811 	msr	BASEPRI, r3
 8012b94:	f3bf 8f6f 	isb	sy
 8012b98:	f3bf 8f4f 	dsb	sy
 8012b9c:	60fb      	str	r3, [r7, #12]
}
 8012b9e:	bf00      	nop
 8012ba0:	e7fe      	b.n	8012ba0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8012ba2:	69bb      	ldr	r3, [r7, #24]
 8012ba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012ba6:	683a      	ldr	r2, [r7, #0]
 8012ba8:	429a      	cmp	r2, r3
 8012baa:	d902      	bls.n	8012bb2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8012bac:	683b      	ldr	r3, [r7, #0]
 8012bae:	61fb      	str	r3, [r7, #28]
 8012bb0:	e002      	b.n	8012bb8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8012bb2:	69bb      	ldr	r3, [r7, #24]
 8012bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012bb6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8012bb8:	69bb      	ldr	r3, [r7, #24]
 8012bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bbc:	69fa      	ldr	r2, [r7, #28]
 8012bbe:	429a      	cmp	r2, r3
 8012bc0:	d04b      	beq.n	8012c5a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8012bc2:	69bb      	ldr	r3, [r7, #24]
 8012bc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012bc6:	697a      	ldr	r2, [r7, #20]
 8012bc8:	429a      	cmp	r2, r3
 8012bca:	d146      	bne.n	8012c5a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8012bcc:	4b25      	ldr	r3, [pc, #148]	; (8012c64 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	69ba      	ldr	r2, [r7, #24]
 8012bd2:	429a      	cmp	r2, r3
 8012bd4:	d10a      	bne.n	8012bec <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8012bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bda:	f383 8811 	msr	BASEPRI, r3
 8012bde:	f3bf 8f6f 	isb	sy
 8012be2:	f3bf 8f4f 	dsb	sy
 8012be6:	60bb      	str	r3, [r7, #8]
}
 8012be8:	bf00      	nop
 8012bea:	e7fe      	b.n	8012bea <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8012bec:	69bb      	ldr	r3, [r7, #24]
 8012bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bf0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8012bf2:	69bb      	ldr	r3, [r7, #24]
 8012bf4:	69fa      	ldr	r2, [r7, #28]
 8012bf6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012bf8:	69bb      	ldr	r3, [r7, #24]
 8012bfa:	699b      	ldr	r3, [r3, #24]
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	db04      	blt.n	8012c0a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012c00:	69fb      	ldr	r3, [r7, #28]
 8012c02:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012c06:	69bb      	ldr	r3, [r7, #24]
 8012c08:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012c0a:	69bb      	ldr	r3, [r7, #24]
 8012c0c:	6959      	ldr	r1, [r3, #20]
 8012c0e:	693a      	ldr	r2, [r7, #16]
 8012c10:	4613      	mov	r3, r2
 8012c12:	009b      	lsls	r3, r3, #2
 8012c14:	4413      	add	r3, r2
 8012c16:	009b      	lsls	r3, r3, #2
 8012c18:	4a13      	ldr	r2, [pc, #76]	; (8012c68 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8012c1a:	4413      	add	r3, r2
 8012c1c:	4299      	cmp	r1, r3
 8012c1e:	d11c      	bne.n	8012c5a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012c20:	69bb      	ldr	r3, [r7, #24]
 8012c22:	3304      	adds	r3, #4
 8012c24:	4618      	mov	r0, r3
 8012c26:	f7fe f837 	bl	8010c98 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8012c2a:	69bb      	ldr	r3, [r7, #24]
 8012c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c2e:	4b0f      	ldr	r3, [pc, #60]	; (8012c6c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8012c30:	681b      	ldr	r3, [r3, #0]
 8012c32:	429a      	cmp	r2, r3
 8012c34:	d903      	bls.n	8012c3e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8012c36:	69bb      	ldr	r3, [r7, #24]
 8012c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c3a:	4a0c      	ldr	r2, [pc, #48]	; (8012c6c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8012c3c:	6013      	str	r3, [r2, #0]
 8012c3e:	69bb      	ldr	r3, [r7, #24]
 8012c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c42:	4613      	mov	r3, r2
 8012c44:	009b      	lsls	r3, r3, #2
 8012c46:	4413      	add	r3, r2
 8012c48:	009b      	lsls	r3, r3, #2
 8012c4a:	4a07      	ldr	r2, [pc, #28]	; (8012c68 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8012c4c:	441a      	add	r2, r3
 8012c4e:	69bb      	ldr	r3, [r7, #24]
 8012c50:	3304      	adds	r3, #4
 8012c52:	4619      	mov	r1, r3
 8012c54:	4610      	mov	r0, r2
 8012c56:	f7fd ffc2 	bl	8010bde <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012c5a:	bf00      	nop
 8012c5c:	3720      	adds	r7, #32
 8012c5e:	46bd      	mov	sp, r7
 8012c60:	bd80      	pop	{r7, pc}
 8012c62:	bf00      	nop
 8012c64:	200058d4 	.word	0x200058d4
 8012c68:	200058d8 	.word	0x200058d8
 8012c6c:	20005db0 	.word	0x20005db0

08012c70 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8012c70:	b480      	push	{r7}
 8012c72:	b083      	sub	sp, #12
 8012c74:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8012c76:	4b09      	ldr	r3, [pc, #36]	; (8012c9c <uxTaskResetEventItemValue+0x2c>)
 8012c78:	681b      	ldr	r3, [r3, #0]
 8012c7a:	699b      	ldr	r3, [r3, #24]
 8012c7c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012c7e:	4b07      	ldr	r3, [pc, #28]	; (8012c9c <uxTaskResetEventItemValue+0x2c>)
 8012c80:	681b      	ldr	r3, [r3, #0]
 8012c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c84:	4b05      	ldr	r3, [pc, #20]	; (8012c9c <uxTaskResetEventItemValue+0x2c>)
 8012c86:	681b      	ldr	r3, [r3, #0]
 8012c88:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8012c8c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8012c8e:	687b      	ldr	r3, [r7, #4]
}
 8012c90:	4618      	mov	r0, r3
 8012c92:	370c      	adds	r7, #12
 8012c94:	46bd      	mov	sp, r7
 8012c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c9a:	4770      	bx	lr
 8012c9c:	200058d4 	.word	0x200058d4

08012ca0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8012ca0:	b480      	push	{r7}
 8012ca2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8012ca4:	4b07      	ldr	r3, [pc, #28]	; (8012cc4 <pvTaskIncrementMutexHeldCount+0x24>)
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d004      	beq.n	8012cb6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8012cac:	4b05      	ldr	r3, [pc, #20]	; (8012cc4 <pvTaskIncrementMutexHeldCount+0x24>)
 8012cae:	681b      	ldr	r3, [r3, #0]
 8012cb0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8012cb2:	3201      	adds	r2, #1
 8012cb4:	661a      	str	r2, [r3, #96]	; 0x60
		}

		return pxCurrentTCB;
 8012cb6:	4b03      	ldr	r3, [pc, #12]	; (8012cc4 <pvTaskIncrementMutexHeldCount+0x24>)
 8012cb8:	681b      	ldr	r3, [r3, #0]
	}
 8012cba:	4618      	mov	r0, r3
 8012cbc:	46bd      	mov	sp, r7
 8012cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cc2:	4770      	bx	lr
 8012cc4:	200058d4 	.word	0x200058d4

08012cc8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012cc8:	b580      	push	{r7, lr}
 8012cca:	b084      	sub	sp, #16
 8012ccc:	af00      	add	r7, sp, #0
 8012cce:	6078      	str	r0, [r7, #4]
 8012cd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012cd2:	4b21      	ldr	r3, [pc, #132]	; (8012d58 <prvAddCurrentTaskToDelayedList+0x90>)
 8012cd4:	681b      	ldr	r3, [r3, #0]
 8012cd6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012cd8:	4b20      	ldr	r3, [pc, #128]	; (8012d5c <prvAddCurrentTaskToDelayedList+0x94>)
 8012cda:	681b      	ldr	r3, [r3, #0]
 8012cdc:	3304      	adds	r3, #4
 8012cde:	4618      	mov	r0, r3
 8012ce0:	f7fd ffda 	bl	8010c98 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012cea:	d10a      	bne.n	8012d02 <prvAddCurrentTaskToDelayedList+0x3a>
 8012cec:	683b      	ldr	r3, [r7, #0]
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d007      	beq.n	8012d02 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012cf2:	4b1a      	ldr	r3, [pc, #104]	; (8012d5c <prvAddCurrentTaskToDelayedList+0x94>)
 8012cf4:	681b      	ldr	r3, [r3, #0]
 8012cf6:	3304      	adds	r3, #4
 8012cf8:	4619      	mov	r1, r3
 8012cfa:	4819      	ldr	r0, [pc, #100]	; (8012d60 <prvAddCurrentTaskToDelayedList+0x98>)
 8012cfc:	f7fd ff6f 	bl	8010bde <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012d00:	e026      	b.n	8012d50 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012d02:	68fa      	ldr	r2, [r7, #12]
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	4413      	add	r3, r2
 8012d08:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012d0a:	4b14      	ldr	r3, [pc, #80]	; (8012d5c <prvAddCurrentTaskToDelayedList+0x94>)
 8012d0c:	681b      	ldr	r3, [r3, #0]
 8012d0e:	68ba      	ldr	r2, [r7, #8]
 8012d10:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012d12:	68ba      	ldr	r2, [r7, #8]
 8012d14:	68fb      	ldr	r3, [r7, #12]
 8012d16:	429a      	cmp	r2, r3
 8012d18:	d209      	bcs.n	8012d2e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012d1a:	4b12      	ldr	r3, [pc, #72]	; (8012d64 <prvAddCurrentTaskToDelayedList+0x9c>)
 8012d1c:	681a      	ldr	r2, [r3, #0]
 8012d1e:	4b0f      	ldr	r3, [pc, #60]	; (8012d5c <prvAddCurrentTaskToDelayedList+0x94>)
 8012d20:	681b      	ldr	r3, [r3, #0]
 8012d22:	3304      	adds	r3, #4
 8012d24:	4619      	mov	r1, r3
 8012d26:	4610      	mov	r0, r2
 8012d28:	f7fd ff7d 	bl	8010c26 <vListInsert>
}
 8012d2c:	e010      	b.n	8012d50 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012d2e:	4b0e      	ldr	r3, [pc, #56]	; (8012d68 <prvAddCurrentTaskToDelayedList+0xa0>)
 8012d30:	681a      	ldr	r2, [r3, #0]
 8012d32:	4b0a      	ldr	r3, [pc, #40]	; (8012d5c <prvAddCurrentTaskToDelayedList+0x94>)
 8012d34:	681b      	ldr	r3, [r3, #0]
 8012d36:	3304      	adds	r3, #4
 8012d38:	4619      	mov	r1, r3
 8012d3a:	4610      	mov	r0, r2
 8012d3c:	f7fd ff73 	bl	8010c26 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012d40:	4b0a      	ldr	r3, [pc, #40]	; (8012d6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8012d42:	681b      	ldr	r3, [r3, #0]
 8012d44:	68ba      	ldr	r2, [r7, #8]
 8012d46:	429a      	cmp	r2, r3
 8012d48:	d202      	bcs.n	8012d50 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8012d4a:	4a08      	ldr	r2, [pc, #32]	; (8012d6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8012d4c:	68bb      	ldr	r3, [r7, #8]
 8012d4e:	6013      	str	r3, [r2, #0]
}
 8012d50:	bf00      	nop
 8012d52:	3710      	adds	r7, #16
 8012d54:	46bd      	mov	sp, r7
 8012d56:	bd80      	pop	{r7, pc}
 8012d58:	20005dac 	.word	0x20005dac
 8012d5c:	200058d4 	.word	0x200058d4
 8012d60:	20005d94 	.word	0x20005d94
 8012d64:	20005d64 	.word	0x20005d64
 8012d68:	20005d60 	.word	0x20005d60
 8012d6c:	20005dc8 	.word	0x20005dc8

08012d70 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8012d70:	b580      	push	{r7, lr}
 8012d72:	b08a      	sub	sp, #40	; 0x28
 8012d74:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8012d76:	2300      	movs	r3, #0
 8012d78:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8012d7a:	f000 fba1 	bl	80134c0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8012d7e:	4b1c      	ldr	r3, [pc, #112]	; (8012df0 <xTimerCreateTimerTask+0x80>)
 8012d80:	681b      	ldr	r3, [r3, #0]
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d021      	beq.n	8012dca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8012d86:	2300      	movs	r3, #0
 8012d88:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8012d8a:	2300      	movs	r3, #0
 8012d8c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8012d8e:	1d3a      	adds	r2, r7, #4
 8012d90:	f107 0108 	add.w	r1, r7, #8
 8012d94:	f107 030c 	add.w	r3, r7, #12
 8012d98:	4618      	mov	r0, r3
 8012d9a:	f7fd fceb 	bl	8010774 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8012d9e:	6879      	ldr	r1, [r7, #4]
 8012da0:	68bb      	ldr	r3, [r7, #8]
 8012da2:	68fa      	ldr	r2, [r7, #12]
 8012da4:	9202      	str	r2, [sp, #8]
 8012da6:	9301      	str	r3, [sp, #4]
 8012da8:	2302      	movs	r3, #2
 8012daa:	9300      	str	r3, [sp, #0]
 8012dac:	2300      	movs	r3, #0
 8012dae:	460a      	mov	r2, r1
 8012db0:	4910      	ldr	r1, [pc, #64]	; (8012df4 <xTimerCreateTimerTask+0x84>)
 8012db2:	4811      	ldr	r0, [pc, #68]	; (8012df8 <xTimerCreateTimerTask+0x88>)
 8012db4:	f7fe ff1a 	bl	8011bec <xTaskCreateStatic>
 8012db8:	4603      	mov	r3, r0
 8012dba:	4a10      	ldr	r2, [pc, #64]	; (8012dfc <xTimerCreateTimerTask+0x8c>)
 8012dbc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8012dbe:	4b0f      	ldr	r3, [pc, #60]	; (8012dfc <xTimerCreateTimerTask+0x8c>)
 8012dc0:	681b      	ldr	r3, [r3, #0]
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d001      	beq.n	8012dca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8012dc6:	2301      	movs	r3, #1
 8012dc8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8012dca:	697b      	ldr	r3, [r7, #20]
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d10a      	bne.n	8012de6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8012dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dd4:	f383 8811 	msr	BASEPRI, r3
 8012dd8:	f3bf 8f6f 	isb	sy
 8012ddc:	f3bf 8f4f 	dsb	sy
 8012de0:	613b      	str	r3, [r7, #16]
}
 8012de2:	bf00      	nop
 8012de4:	e7fe      	b.n	8012de4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8012de6:	697b      	ldr	r3, [r7, #20]
}
 8012de8:	4618      	mov	r0, r3
 8012dea:	3718      	adds	r7, #24
 8012dec:	46bd      	mov	sp, r7
 8012dee:	bd80      	pop	{r7, pc}
 8012df0:	20005e04 	.word	0x20005e04
 8012df4:	08019b88 	.word	0x08019b88
 8012df8:	08013069 	.word	0x08013069
 8012dfc:	20005e08 	.word	0x20005e08

08012e00 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8012e00:	b580      	push	{r7, lr}
 8012e02:	b088      	sub	sp, #32
 8012e04:	af02      	add	r7, sp, #8
 8012e06:	60f8      	str	r0, [r7, #12]
 8012e08:	60b9      	str	r1, [r7, #8]
 8012e0a:	607a      	str	r2, [r7, #4]
 8012e0c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8012e0e:	202c      	movs	r0, #44	; 0x2c
 8012e10:	f000 fe22 	bl	8013a58 <pvPortMalloc>
 8012e14:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8012e16:	697b      	ldr	r3, [r7, #20]
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	d00d      	beq.n	8012e38 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8012e1c:	697b      	ldr	r3, [r7, #20]
 8012e1e:	2200      	movs	r2, #0
 8012e20:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8012e24:	697b      	ldr	r3, [r7, #20]
 8012e26:	9301      	str	r3, [sp, #4]
 8012e28:	6a3b      	ldr	r3, [r7, #32]
 8012e2a:	9300      	str	r3, [sp, #0]
 8012e2c:	683b      	ldr	r3, [r7, #0]
 8012e2e:	687a      	ldr	r2, [r7, #4]
 8012e30:	68b9      	ldr	r1, [r7, #8]
 8012e32:	68f8      	ldr	r0, [r7, #12]
 8012e34:	f000 f843 	bl	8012ebe <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8012e38:	697b      	ldr	r3, [r7, #20]
	}
 8012e3a:	4618      	mov	r0, r3
 8012e3c:	3718      	adds	r7, #24
 8012e3e:	46bd      	mov	sp, r7
 8012e40:	bd80      	pop	{r7, pc}

08012e42 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8012e42:	b580      	push	{r7, lr}
 8012e44:	b08a      	sub	sp, #40	; 0x28
 8012e46:	af02      	add	r7, sp, #8
 8012e48:	60f8      	str	r0, [r7, #12]
 8012e4a:	60b9      	str	r1, [r7, #8]
 8012e4c:	607a      	str	r2, [r7, #4]
 8012e4e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8012e50:	232c      	movs	r3, #44	; 0x2c
 8012e52:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8012e54:	693b      	ldr	r3, [r7, #16]
 8012e56:	2b2c      	cmp	r3, #44	; 0x2c
 8012e58:	d00a      	beq.n	8012e70 <xTimerCreateStatic+0x2e>
	__asm volatile
 8012e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e5e:	f383 8811 	msr	BASEPRI, r3
 8012e62:	f3bf 8f6f 	isb	sy
 8012e66:	f3bf 8f4f 	dsb	sy
 8012e6a:	61bb      	str	r3, [r7, #24]
}
 8012e6c:	bf00      	nop
 8012e6e:	e7fe      	b.n	8012e6e <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012e70:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8012e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d10a      	bne.n	8012e8e <xTimerCreateStatic+0x4c>
	__asm volatile
 8012e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e7c:	f383 8811 	msr	BASEPRI, r3
 8012e80:	f3bf 8f6f 	isb	sy
 8012e84:	f3bf 8f4f 	dsb	sy
 8012e88:	617b      	str	r3, [r7, #20]
}
 8012e8a:	bf00      	nop
 8012e8c:	e7fe      	b.n	8012e8c <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8012e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e90:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8012e92:	69fb      	ldr	r3, [r7, #28]
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	d00d      	beq.n	8012eb4 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8012e98:	69fb      	ldr	r3, [r7, #28]
 8012e9a:	2202      	movs	r2, #2
 8012e9c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8012ea0:	69fb      	ldr	r3, [r7, #28]
 8012ea2:	9301      	str	r3, [sp, #4]
 8012ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ea6:	9300      	str	r3, [sp, #0]
 8012ea8:	683b      	ldr	r3, [r7, #0]
 8012eaa:	687a      	ldr	r2, [r7, #4]
 8012eac:	68b9      	ldr	r1, [r7, #8]
 8012eae:	68f8      	ldr	r0, [r7, #12]
 8012eb0:	f000 f805 	bl	8012ebe <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8012eb4:	69fb      	ldr	r3, [r7, #28]
	}
 8012eb6:	4618      	mov	r0, r3
 8012eb8:	3720      	adds	r7, #32
 8012eba:	46bd      	mov	sp, r7
 8012ebc:	bd80      	pop	{r7, pc}

08012ebe <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8012ebe:	b580      	push	{r7, lr}
 8012ec0:	b086      	sub	sp, #24
 8012ec2:	af00      	add	r7, sp, #0
 8012ec4:	60f8      	str	r0, [r7, #12]
 8012ec6:	60b9      	str	r1, [r7, #8]
 8012ec8:	607a      	str	r2, [r7, #4]
 8012eca:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8012ecc:	68bb      	ldr	r3, [r7, #8]
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d10a      	bne.n	8012ee8 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8012ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ed6:	f383 8811 	msr	BASEPRI, r3
 8012eda:	f3bf 8f6f 	isb	sy
 8012ede:	f3bf 8f4f 	dsb	sy
 8012ee2:	617b      	str	r3, [r7, #20]
}
 8012ee4:	bf00      	nop
 8012ee6:	e7fe      	b.n	8012ee6 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8012ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d01e      	beq.n	8012f2c <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8012eee:	f000 fae7 	bl	80134c0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8012ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ef4:	68fa      	ldr	r2, [r7, #12]
 8012ef6:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8012ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012efa:	68ba      	ldr	r2, [r7, #8]
 8012efc:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8012efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f00:	683a      	ldr	r2, [r7, #0]
 8012f02:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8012f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f06:	6a3a      	ldr	r2, [r7, #32]
 8012f08:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8012f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f0c:	3304      	adds	r3, #4
 8012f0e:	4618      	mov	r0, r3
 8012f10:	f7fd fe58 	bl	8010bc4 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d008      	beq.n	8012f2c <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8012f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012f20:	f043 0304 	orr.w	r3, r3, #4
 8012f24:	b2da      	uxtb	r2, r3
 8012f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f28:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8012f2c:	bf00      	nop
 8012f2e:	3718      	adds	r7, #24
 8012f30:	46bd      	mov	sp, r7
 8012f32:	bd80      	pop	{r7, pc}

08012f34 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8012f34:	b580      	push	{r7, lr}
 8012f36:	b08a      	sub	sp, #40	; 0x28
 8012f38:	af00      	add	r7, sp, #0
 8012f3a:	60f8      	str	r0, [r7, #12]
 8012f3c:	60b9      	str	r1, [r7, #8]
 8012f3e:	607a      	str	r2, [r7, #4]
 8012f40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8012f42:	2300      	movs	r3, #0
 8012f44:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8012f46:	68fb      	ldr	r3, [r7, #12]
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d10a      	bne.n	8012f62 <xTimerGenericCommand+0x2e>
	__asm volatile
 8012f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f50:	f383 8811 	msr	BASEPRI, r3
 8012f54:	f3bf 8f6f 	isb	sy
 8012f58:	f3bf 8f4f 	dsb	sy
 8012f5c:	623b      	str	r3, [r7, #32]
}
 8012f5e:	bf00      	nop
 8012f60:	e7fe      	b.n	8012f60 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8012f62:	4b1a      	ldr	r3, [pc, #104]	; (8012fcc <xTimerGenericCommand+0x98>)
 8012f64:	681b      	ldr	r3, [r3, #0]
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d02a      	beq.n	8012fc0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8012f6a:	68bb      	ldr	r3, [r7, #8]
 8012f6c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8012f76:	68bb      	ldr	r3, [r7, #8]
 8012f78:	2b05      	cmp	r3, #5
 8012f7a:	dc18      	bgt.n	8012fae <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8012f7c:	f7ff fd02 	bl	8012984 <xTaskGetSchedulerState>
 8012f80:	4603      	mov	r3, r0
 8012f82:	2b02      	cmp	r3, #2
 8012f84:	d109      	bne.n	8012f9a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8012f86:	4b11      	ldr	r3, [pc, #68]	; (8012fcc <xTimerGenericCommand+0x98>)
 8012f88:	6818      	ldr	r0, [r3, #0]
 8012f8a:	f107 0110 	add.w	r1, r7, #16
 8012f8e:	2300      	movs	r3, #0
 8012f90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012f92:	f7fe f89f 	bl	80110d4 <xQueueGenericSend>
 8012f96:	6278      	str	r0, [r7, #36]	; 0x24
 8012f98:	e012      	b.n	8012fc0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8012f9a:	4b0c      	ldr	r3, [pc, #48]	; (8012fcc <xTimerGenericCommand+0x98>)
 8012f9c:	6818      	ldr	r0, [r3, #0]
 8012f9e:	f107 0110 	add.w	r1, r7, #16
 8012fa2:	2300      	movs	r3, #0
 8012fa4:	2200      	movs	r2, #0
 8012fa6:	f7fe f895 	bl	80110d4 <xQueueGenericSend>
 8012faa:	6278      	str	r0, [r7, #36]	; 0x24
 8012fac:	e008      	b.n	8012fc0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8012fae:	4b07      	ldr	r3, [pc, #28]	; (8012fcc <xTimerGenericCommand+0x98>)
 8012fb0:	6818      	ldr	r0, [r3, #0]
 8012fb2:	f107 0110 	add.w	r1, r7, #16
 8012fb6:	2300      	movs	r3, #0
 8012fb8:	683a      	ldr	r2, [r7, #0]
 8012fba:	f7fe f989 	bl	80112d0 <xQueueGenericSendFromISR>
 8012fbe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8012fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012fc2:	4618      	mov	r0, r3
 8012fc4:	3728      	adds	r7, #40	; 0x28
 8012fc6:	46bd      	mov	sp, r7
 8012fc8:	bd80      	pop	{r7, pc}
 8012fca:	bf00      	nop
 8012fcc:	20005e04 	.word	0x20005e04

08012fd0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8012fd0:	b580      	push	{r7, lr}
 8012fd2:	b088      	sub	sp, #32
 8012fd4:	af02      	add	r7, sp, #8
 8012fd6:	6078      	str	r0, [r7, #4]
 8012fd8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012fda:	4b22      	ldr	r3, [pc, #136]	; (8013064 <prvProcessExpiredTimer+0x94>)
 8012fdc:	681b      	ldr	r3, [r3, #0]
 8012fde:	68db      	ldr	r3, [r3, #12]
 8012fe0:	68db      	ldr	r3, [r3, #12]
 8012fe2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012fe4:	697b      	ldr	r3, [r7, #20]
 8012fe6:	3304      	adds	r3, #4
 8012fe8:	4618      	mov	r0, r3
 8012fea:	f7fd fe55 	bl	8010c98 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012fee:	697b      	ldr	r3, [r7, #20]
 8012ff0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012ff4:	f003 0304 	and.w	r3, r3, #4
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d022      	beq.n	8013042 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8012ffc:	697b      	ldr	r3, [r7, #20]
 8012ffe:	699a      	ldr	r2, [r3, #24]
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	18d1      	adds	r1, r2, r3
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	683a      	ldr	r2, [r7, #0]
 8013008:	6978      	ldr	r0, [r7, #20]
 801300a:	f000 f8d1 	bl	80131b0 <prvInsertTimerInActiveList>
 801300e:	4603      	mov	r3, r0
 8013010:	2b00      	cmp	r3, #0
 8013012:	d01f      	beq.n	8013054 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013014:	2300      	movs	r3, #0
 8013016:	9300      	str	r3, [sp, #0]
 8013018:	2300      	movs	r3, #0
 801301a:	687a      	ldr	r2, [r7, #4]
 801301c:	2100      	movs	r1, #0
 801301e:	6978      	ldr	r0, [r7, #20]
 8013020:	f7ff ff88 	bl	8012f34 <xTimerGenericCommand>
 8013024:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8013026:	693b      	ldr	r3, [r7, #16]
 8013028:	2b00      	cmp	r3, #0
 801302a:	d113      	bne.n	8013054 <prvProcessExpiredTimer+0x84>
	__asm volatile
 801302c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013030:	f383 8811 	msr	BASEPRI, r3
 8013034:	f3bf 8f6f 	isb	sy
 8013038:	f3bf 8f4f 	dsb	sy
 801303c:	60fb      	str	r3, [r7, #12]
}
 801303e:	bf00      	nop
 8013040:	e7fe      	b.n	8013040 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013042:	697b      	ldr	r3, [r7, #20]
 8013044:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013048:	f023 0301 	bic.w	r3, r3, #1
 801304c:	b2da      	uxtb	r2, r3
 801304e:	697b      	ldr	r3, [r7, #20]
 8013050:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013054:	697b      	ldr	r3, [r7, #20]
 8013056:	6a1b      	ldr	r3, [r3, #32]
 8013058:	6978      	ldr	r0, [r7, #20]
 801305a:	4798      	blx	r3
}
 801305c:	bf00      	nop
 801305e:	3718      	adds	r7, #24
 8013060:	46bd      	mov	sp, r7
 8013062:	bd80      	pop	{r7, pc}
 8013064:	20005dfc 	.word	0x20005dfc

08013068 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8013068:	b580      	push	{r7, lr}
 801306a:	b084      	sub	sp, #16
 801306c:	af00      	add	r7, sp, #0
 801306e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013070:	f107 0308 	add.w	r3, r7, #8
 8013074:	4618      	mov	r0, r3
 8013076:	f000 f857 	bl	8013128 <prvGetNextExpireTime>
 801307a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801307c:	68bb      	ldr	r3, [r7, #8]
 801307e:	4619      	mov	r1, r3
 8013080:	68f8      	ldr	r0, [r7, #12]
 8013082:	f000 f803 	bl	801308c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8013086:	f000 f8d5 	bl	8013234 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801308a:	e7f1      	b.n	8013070 <prvTimerTask+0x8>

0801308c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801308c:	b580      	push	{r7, lr}
 801308e:	b084      	sub	sp, #16
 8013090:	af00      	add	r7, sp, #0
 8013092:	6078      	str	r0, [r7, #4]
 8013094:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8013096:	f7fe ffe5 	bl	8012064 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801309a:	f107 0308 	add.w	r3, r7, #8
 801309e:	4618      	mov	r0, r3
 80130a0:	f000 f866 	bl	8013170 <prvSampleTimeNow>
 80130a4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80130a6:	68bb      	ldr	r3, [r7, #8]
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d130      	bne.n	801310e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80130ac:	683b      	ldr	r3, [r7, #0]
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d10a      	bne.n	80130c8 <prvProcessTimerOrBlockTask+0x3c>
 80130b2:	687a      	ldr	r2, [r7, #4]
 80130b4:	68fb      	ldr	r3, [r7, #12]
 80130b6:	429a      	cmp	r2, r3
 80130b8:	d806      	bhi.n	80130c8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80130ba:	f7fe ffe1 	bl	8012080 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80130be:	68f9      	ldr	r1, [r7, #12]
 80130c0:	6878      	ldr	r0, [r7, #4]
 80130c2:	f7ff ff85 	bl	8012fd0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80130c6:	e024      	b.n	8013112 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80130c8:	683b      	ldr	r3, [r7, #0]
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d008      	beq.n	80130e0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80130ce:	4b13      	ldr	r3, [pc, #76]	; (801311c <prvProcessTimerOrBlockTask+0x90>)
 80130d0:	681b      	ldr	r3, [r3, #0]
 80130d2:	681b      	ldr	r3, [r3, #0]
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d101      	bne.n	80130dc <prvProcessTimerOrBlockTask+0x50>
 80130d8:	2301      	movs	r3, #1
 80130da:	e000      	b.n	80130de <prvProcessTimerOrBlockTask+0x52>
 80130dc:	2300      	movs	r3, #0
 80130de:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80130e0:	4b0f      	ldr	r3, [pc, #60]	; (8013120 <prvProcessTimerOrBlockTask+0x94>)
 80130e2:	6818      	ldr	r0, [r3, #0]
 80130e4:	687a      	ldr	r2, [r7, #4]
 80130e6:	68fb      	ldr	r3, [r7, #12]
 80130e8:	1ad3      	subs	r3, r2, r3
 80130ea:	683a      	ldr	r2, [r7, #0]
 80130ec:	4619      	mov	r1, r3
 80130ee:	f7fe fd49 	bl	8011b84 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80130f2:	f7fe ffc5 	bl	8012080 <xTaskResumeAll>
 80130f6:	4603      	mov	r3, r0
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d10a      	bne.n	8013112 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80130fc:	4b09      	ldr	r3, [pc, #36]	; (8013124 <prvProcessTimerOrBlockTask+0x98>)
 80130fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013102:	601a      	str	r2, [r3, #0]
 8013104:	f3bf 8f4f 	dsb	sy
 8013108:	f3bf 8f6f 	isb	sy
}
 801310c:	e001      	b.n	8013112 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801310e:	f7fe ffb7 	bl	8012080 <xTaskResumeAll>
}
 8013112:	bf00      	nop
 8013114:	3710      	adds	r7, #16
 8013116:	46bd      	mov	sp, r7
 8013118:	bd80      	pop	{r7, pc}
 801311a:	bf00      	nop
 801311c:	20005e00 	.word	0x20005e00
 8013120:	20005e04 	.word	0x20005e04
 8013124:	e000ed04 	.word	0xe000ed04

08013128 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8013128:	b480      	push	{r7}
 801312a:	b085      	sub	sp, #20
 801312c:	af00      	add	r7, sp, #0
 801312e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8013130:	4b0e      	ldr	r3, [pc, #56]	; (801316c <prvGetNextExpireTime+0x44>)
 8013132:	681b      	ldr	r3, [r3, #0]
 8013134:	681b      	ldr	r3, [r3, #0]
 8013136:	2b00      	cmp	r3, #0
 8013138:	d101      	bne.n	801313e <prvGetNextExpireTime+0x16>
 801313a:	2201      	movs	r2, #1
 801313c:	e000      	b.n	8013140 <prvGetNextExpireTime+0x18>
 801313e:	2200      	movs	r2, #0
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	681b      	ldr	r3, [r3, #0]
 8013148:	2b00      	cmp	r3, #0
 801314a:	d105      	bne.n	8013158 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801314c:	4b07      	ldr	r3, [pc, #28]	; (801316c <prvGetNextExpireTime+0x44>)
 801314e:	681b      	ldr	r3, [r3, #0]
 8013150:	68db      	ldr	r3, [r3, #12]
 8013152:	681b      	ldr	r3, [r3, #0]
 8013154:	60fb      	str	r3, [r7, #12]
 8013156:	e001      	b.n	801315c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8013158:	2300      	movs	r3, #0
 801315a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801315c:	68fb      	ldr	r3, [r7, #12]
}
 801315e:	4618      	mov	r0, r3
 8013160:	3714      	adds	r7, #20
 8013162:	46bd      	mov	sp, r7
 8013164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013168:	4770      	bx	lr
 801316a:	bf00      	nop
 801316c:	20005dfc 	.word	0x20005dfc

08013170 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8013170:	b580      	push	{r7, lr}
 8013172:	b084      	sub	sp, #16
 8013174:	af00      	add	r7, sp, #0
 8013176:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8013178:	f7ff f820 	bl	80121bc <xTaskGetTickCount>
 801317c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801317e:	4b0b      	ldr	r3, [pc, #44]	; (80131ac <prvSampleTimeNow+0x3c>)
 8013180:	681b      	ldr	r3, [r3, #0]
 8013182:	68fa      	ldr	r2, [r7, #12]
 8013184:	429a      	cmp	r2, r3
 8013186:	d205      	bcs.n	8013194 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8013188:	f000 f936 	bl	80133f8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	2201      	movs	r2, #1
 8013190:	601a      	str	r2, [r3, #0]
 8013192:	e002      	b.n	801319a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	2200      	movs	r2, #0
 8013198:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801319a:	4a04      	ldr	r2, [pc, #16]	; (80131ac <prvSampleTimeNow+0x3c>)
 801319c:	68fb      	ldr	r3, [r7, #12]
 801319e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80131a0:	68fb      	ldr	r3, [r7, #12]
}
 80131a2:	4618      	mov	r0, r3
 80131a4:	3710      	adds	r7, #16
 80131a6:	46bd      	mov	sp, r7
 80131a8:	bd80      	pop	{r7, pc}
 80131aa:	bf00      	nop
 80131ac:	20005e0c 	.word	0x20005e0c

080131b0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80131b0:	b580      	push	{r7, lr}
 80131b2:	b086      	sub	sp, #24
 80131b4:	af00      	add	r7, sp, #0
 80131b6:	60f8      	str	r0, [r7, #12]
 80131b8:	60b9      	str	r1, [r7, #8]
 80131ba:	607a      	str	r2, [r7, #4]
 80131bc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80131be:	2300      	movs	r3, #0
 80131c0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80131c2:	68fb      	ldr	r3, [r7, #12]
 80131c4:	68ba      	ldr	r2, [r7, #8]
 80131c6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	68fa      	ldr	r2, [r7, #12]
 80131cc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80131ce:	68ba      	ldr	r2, [r7, #8]
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	429a      	cmp	r2, r3
 80131d4:	d812      	bhi.n	80131fc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80131d6:	687a      	ldr	r2, [r7, #4]
 80131d8:	683b      	ldr	r3, [r7, #0]
 80131da:	1ad2      	subs	r2, r2, r3
 80131dc:	68fb      	ldr	r3, [r7, #12]
 80131de:	699b      	ldr	r3, [r3, #24]
 80131e0:	429a      	cmp	r2, r3
 80131e2:	d302      	bcc.n	80131ea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80131e4:	2301      	movs	r3, #1
 80131e6:	617b      	str	r3, [r7, #20]
 80131e8:	e01b      	b.n	8013222 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80131ea:	4b10      	ldr	r3, [pc, #64]	; (801322c <prvInsertTimerInActiveList+0x7c>)
 80131ec:	681a      	ldr	r2, [r3, #0]
 80131ee:	68fb      	ldr	r3, [r7, #12]
 80131f0:	3304      	adds	r3, #4
 80131f2:	4619      	mov	r1, r3
 80131f4:	4610      	mov	r0, r2
 80131f6:	f7fd fd16 	bl	8010c26 <vListInsert>
 80131fa:	e012      	b.n	8013222 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80131fc:	687a      	ldr	r2, [r7, #4]
 80131fe:	683b      	ldr	r3, [r7, #0]
 8013200:	429a      	cmp	r2, r3
 8013202:	d206      	bcs.n	8013212 <prvInsertTimerInActiveList+0x62>
 8013204:	68ba      	ldr	r2, [r7, #8]
 8013206:	683b      	ldr	r3, [r7, #0]
 8013208:	429a      	cmp	r2, r3
 801320a:	d302      	bcc.n	8013212 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801320c:	2301      	movs	r3, #1
 801320e:	617b      	str	r3, [r7, #20]
 8013210:	e007      	b.n	8013222 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013212:	4b07      	ldr	r3, [pc, #28]	; (8013230 <prvInsertTimerInActiveList+0x80>)
 8013214:	681a      	ldr	r2, [r3, #0]
 8013216:	68fb      	ldr	r3, [r7, #12]
 8013218:	3304      	adds	r3, #4
 801321a:	4619      	mov	r1, r3
 801321c:	4610      	mov	r0, r2
 801321e:	f7fd fd02 	bl	8010c26 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8013222:	697b      	ldr	r3, [r7, #20]
}
 8013224:	4618      	mov	r0, r3
 8013226:	3718      	adds	r7, #24
 8013228:	46bd      	mov	sp, r7
 801322a:	bd80      	pop	{r7, pc}
 801322c:	20005e00 	.word	0x20005e00
 8013230:	20005dfc 	.word	0x20005dfc

08013234 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8013234:	b580      	push	{r7, lr}
 8013236:	b08e      	sub	sp, #56	; 0x38
 8013238:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801323a:	e0ca      	b.n	80133d2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	2b00      	cmp	r3, #0
 8013240:	da18      	bge.n	8013274 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8013242:	1d3b      	adds	r3, r7, #4
 8013244:	3304      	adds	r3, #4
 8013246:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8013248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801324a:	2b00      	cmp	r3, #0
 801324c:	d10a      	bne.n	8013264 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801324e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013252:	f383 8811 	msr	BASEPRI, r3
 8013256:	f3bf 8f6f 	isb	sy
 801325a:	f3bf 8f4f 	dsb	sy
 801325e:	61fb      	str	r3, [r7, #28]
}
 8013260:	bf00      	nop
 8013262:	e7fe      	b.n	8013262 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8013264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013266:	681b      	ldr	r3, [r3, #0]
 8013268:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801326a:	6850      	ldr	r0, [r2, #4]
 801326c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801326e:	6892      	ldr	r2, [r2, #8]
 8013270:	4611      	mov	r1, r2
 8013272:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	2b00      	cmp	r3, #0
 8013278:	f2c0 80aa 	blt.w	80133d0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801327c:	68fb      	ldr	r3, [r7, #12]
 801327e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8013280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013282:	695b      	ldr	r3, [r3, #20]
 8013284:	2b00      	cmp	r3, #0
 8013286:	d004      	beq.n	8013292 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801328a:	3304      	adds	r3, #4
 801328c:	4618      	mov	r0, r3
 801328e:	f7fd fd03 	bl	8010c98 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013292:	463b      	mov	r3, r7
 8013294:	4618      	mov	r0, r3
 8013296:	f7ff ff6b 	bl	8013170 <prvSampleTimeNow>
 801329a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	2b09      	cmp	r3, #9
 80132a0:	f200 8097 	bhi.w	80133d2 <prvProcessReceivedCommands+0x19e>
 80132a4:	a201      	add	r2, pc, #4	; (adr r2, 80132ac <prvProcessReceivedCommands+0x78>)
 80132a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80132aa:	bf00      	nop
 80132ac:	080132d5 	.word	0x080132d5
 80132b0:	080132d5 	.word	0x080132d5
 80132b4:	080132d5 	.word	0x080132d5
 80132b8:	08013349 	.word	0x08013349
 80132bc:	0801335d 	.word	0x0801335d
 80132c0:	080133a7 	.word	0x080133a7
 80132c4:	080132d5 	.word	0x080132d5
 80132c8:	080132d5 	.word	0x080132d5
 80132cc:	08013349 	.word	0x08013349
 80132d0:	0801335d 	.word	0x0801335d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80132d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80132da:	f043 0301 	orr.w	r3, r3, #1
 80132de:	b2da      	uxtb	r2, r3
 80132e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80132e6:	68ba      	ldr	r2, [r7, #8]
 80132e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132ea:	699b      	ldr	r3, [r3, #24]
 80132ec:	18d1      	adds	r1, r2, r3
 80132ee:	68bb      	ldr	r3, [r7, #8]
 80132f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80132f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80132f4:	f7ff ff5c 	bl	80131b0 <prvInsertTimerInActiveList>
 80132f8:	4603      	mov	r3, r0
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d069      	beq.n	80133d2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80132fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013300:	6a1b      	ldr	r3, [r3, #32]
 8013302:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013304:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013308:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801330c:	f003 0304 	and.w	r3, r3, #4
 8013310:	2b00      	cmp	r3, #0
 8013312:	d05e      	beq.n	80133d2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8013314:	68ba      	ldr	r2, [r7, #8]
 8013316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013318:	699b      	ldr	r3, [r3, #24]
 801331a:	441a      	add	r2, r3
 801331c:	2300      	movs	r3, #0
 801331e:	9300      	str	r3, [sp, #0]
 8013320:	2300      	movs	r3, #0
 8013322:	2100      	movs	r1, #0
 8013324:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013326:	f7ff fe05 	bl	8012f34 <xTimerGenericCommand>
 801332a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801332c:	6a3b      	ldr	r3, [r7, #32]
 801332e:	2b00      	cmp	r3, #0
 8013330:	d14f      	bne.n	80133d2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8013332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013336:	f383 8811 	msr	BASEPRI, r3
 801333a:	f3bf 8f6f 	isb	sy
 801333e:	f3bf 8f4f 	dsb	sy
 8013342:	61bb      	str	r3, [r7, #24]
}
 8013344:	bf00      	nop
 8013346:	e7fe      	b.n	8013346 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801334a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801334e:	f023 0301 	bic.w	r3, r3, #1
 8013352:	b2da      	uxtb	r2, r3
 8013354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013356:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801335a:	e03a      	b.n	80133d2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801335c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801335e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013362:	f043 0301 	orr.w	r3, r3, #1
 8013366:	b2da      	uxtb	r2, r3
 8013368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801336a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801336e:	68ba      	ldr	r2, [r7, #8]
 8013370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013372:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8013374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013376:	699b      	ldr	r3, [r3, #24]
 8013378:	2b00      	cmp	r3, #0
 801337a:	d10a      	bne.n	8013392 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 801337c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013380:	f383 8811 	msr	BASEPRI, r3
 8013384:	f3bf 8f6f 	isb	sy
 8013388:	f3bf 8f4f 	dsb	sy
 801338c:	617b      	str	r3, [r7, #20]
}
 801338e:	bf00      	nop
 8013390:	e7fe      	b.n	8013390 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8013392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013394:	699a      	ldr	r2, [r3, #24]
 8013396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013398:	18d1      	adds	r1, r2, r3
 801339a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801339c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801339e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80133a0:	f7ff ff06 	bl	80131b0 <prvInsertTimerInActiveList>
					break;
 80133a4:	e015      	b.n	80133d2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80133a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80133ac:	f003 0302 	and.w	r3, r3, #2
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d103      	bne.n	80133bc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80133b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80133b6:	f000 fc1b 	bl	8013bf0 <vPortFree>
 80133ba:	e00a      	b.n	80133d2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80133bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80133c2:	f023 0301 	bic.w	r3, r3, #1
 80133c6:	b2da      	uxtb	r2, r3
 80133c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80133ce:	e000      	b.n	80133d2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80133d0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80133d2:	4b08      	ldr	r3, [pc, #32]	; (80133f4 <prvProcessReceivedCommands+0x1c0>)
 80133d4:	681b      	ldr	r3, [r3, #0]
 80133d6:	1d39      	adds	r1, r7, #4
 80133d8:	2200      	movs	r2, #0
 80133da:	4618      	mov	r0, r3
 80133dc:	f7fe f814 	bl	8011408 <xQueueReceive>
 80133e0:	4603      	mov	r3, r0
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	f47f af2a 	bne.w	801323c <prvProcessReceivedCommands+0x8>
	}
}
 80133e8:	bf00      	nop
 80133ea:	bf00      	nop
 80133ec:	3730      	adds	r7, #48	; 0x30
 80133ee:	46bd      	mov	sp, r7
 80133f0:	bd80      	pop	{r7, pc}
 80133f2:	bf00      	nop
 80133f4:	20005e04 	.word	0x20005e04

080133f8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80133f8:	b580      	push	{r7, lr}
 80133fa:	b088      	sub	sp, #32
 80133fc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80133fe:	e048      	b.n	8013492 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013400:	4b2d      	ldr	r3, [pc, #180]	; (80134b8 <prvSwitchTimerLists+0xc0>)
 8013402:	681b      	ldr	r3, [r3, #0]
 8013404:	68db      	ldr	r3, [r3, #12]
 8013406:	681b      	ldr	r3, [r3, #0]
 8013408:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801340a:	4b2b      	ldr	r3, [pc, #172]	; (80134b8 <prvSwitchTimerLists+0xc0>)
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	68db      	ldr	r3, [r3, #12]
 8013410:	68db      	ldr	r3, [r3, #12]
 8013412:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013414:	68fb      	ldr	r3, [r7, #12]
 8013416:	3304      	adds	r3, #4
 8013418:	4618      	mov	r0, r3
 801341a:	f7fd fc3d 	bl	8010c98 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	6a1b      	ldr	r3, [r3, #32]
 8013422:	68f8      	ldr	r0, [r7, #12]
 8013424:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013426:	68fb      	ldr	r3, [r7, #12]
 8013428:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801342c:	f003 0304 	and.w	r3, r3, #4
 8013430:	2b00      	cmp	r3, #0
 8013432:	d02e      	beq.n	8013492 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	699b      	ldr	r3, [r3, #24]
 8013438:	693a      	ldr	r2, [r7, #16]
 801343a:	4413      	add	r3, r2
 801343c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801343e:	68ba      	ldr	r2, [r7, #8]
 8013440:	693b      	ldr	r3, [r7, #16]
 8013442:	429a      	cmp	r2, r3
 8013444:	d90e      	bls.n	8013464 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8013446:	68fb      	ldr	r3, [r7, #12]
 8013448:	68ba      	ldr	r2, [r7, #8]
 801344a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801344c:	68fb      	ldr	r3, [r7, #12]
 801344e:	68fa      	ldr	r2, [r7, #12]
 8013450:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013452:	4b19      	ldr	r3, [pc, #100]	; (80134b8 <prvSwitchTimerLists+0xc0>)
 8013454:	681a      	ldr	r2, [r3, #0]
 8013456:	68fb      	ldr	r3, [r7, #12]
 8013458:	3304      	adds	r3, #4
 801345a:	4619      	mov	r1, r3
 801345c:	4610      	mov	r0, r2
 801345e:	f7fd fbe2 	bl	8010c26 <vListInsert>
 8013462:	e016      	b.n	8013492 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013464:	2300      	movs	r3, #0
 8013466:	9300      	str	r3, [sp, #0]
 8013468:	2300      	movs	r3, #0
 801346a:	693a      	ldr	r2, [r7, #16]
 801346c:	2100      	movs	r1, #0
 801346e:	68f8      	ldr	r0, [r7, #12]
 8013470:	f7ff fd60 	bl	8012f34 <xTimerGenericCommand>
 8013474:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	2b00      	cmp	r3, #0
 801347a:	d10a      	bne.n	8013492 <prvSwitchTimerLists+0x9a>
	__asm volatile
 801347c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013480:	f383 8811 	msr	BASEPRI, r3
 8013484:	f3bf 8f6f 	isb	sy
 8013488:	f3bf 8f4f 	dsb	sy
 801348c:	603b      	str	r3, [r7, #0]
}
 801348e:	bf00      	nop
 8013490:	e7fe      	b.n	8013490 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013492:	4b09      	ldr	r3, [pc, #36]	; (80134b8 <prvSwitchTimerLists+0xc0>)
 8013494:	681b      	ldr	r3, [r3, #0]
 8013496:	681b      	ldr	r3, [r3, #0]
 8013498:	2b00      	cmp	r3, #0
 801349a:	d1b1      	bne.n	8013400 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801349c:	4b06      	ldr	r3, [pc, #24]	; (80134b8 <prvSwitchTimerLists+0xc0>)
 801349e:	681b      	ldr	r3, [r3, #0]
 80134a0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80134a2:	4b06      	ldr	r3, [pc, #24]	; (80134bc <prvSwitchTimerLists+0xc4>)
 80134a4:	681b      	ldr	r3, [r3, #0]
 80134a6:	4a04      	ldr	r2, [pc, #16]	; (80134b8 <prvSwitchTimerLists+0xc0>)
 80134a8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80134aa:	4a04      	ldr	r2, [pc, #16]	; (80134bc <prvSwitchTimerLists+0xc4>)
 80134ac:	697b      	ldr	r3, [r7, #20]
 80134ae:	6013      	str	r3, [r2, #0]
}
 80134b0:	bf00      	nop
 80134b2:	3718      	adds	r7, #24
 80134b4:	46bd      	mov	sp, r7
 80134b6:	bd80      	pop	{r7, pc}
 80134b8:	20005dfc 	.word	0x20005dfc
 80134bc:	20005e00 	.word	0x20005e00

080134c0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80134c0:	b580      	push	{r7, lr}
 80134c2:	b082      	sub	sp, #8
 80134c4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80134c6:	f000 f9a5 	bl	8013814 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80134ca:	4b15      	ldr	r3, [pc, #84]	; (8013520 <prvCheckForValidListAndQueue+0x60>)
 80134cc:	681b      	ldr	r3, [r3, #0]
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d120      	bne.n	8013514 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80134d2:	4814      	ldr	r0, [pc, #80]	; (8013524 <prvCheckForValidListAndQueue+0x64>)
 80134d4:	f7fd fb56 	bl	8010b84 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80134d8:	4813      	ldr	r0, [pc, #76]	; (8013528 <prvCheckForValidListAndQueue+0x68>)
 80134da:	f7fd fb53 	bl	8010b84 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80134de:	4b13      	ldr	r3, [pc, #76]	; (801352c <prvCheckForValidListAndQueue+0x6c>)
 80134e0:	4a10      	ldr	r2, [pc, #64]	; (8013524 <prvCheckForValidListAndQueue+0x64>)
 80134e2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80134e4:	4b12      	ldr	r3, [pc, #72]	; (8013530 <prvCheckForValidListAndQueue+0x70>)
 80134e6:	4a10      	ldr	r2, [pc, #64]	; (8013528 <prvCheckForValidListAndQueue+0x68>)
 80134e8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80134ea:	2300      	movs	r3, #0
 80134ec:	9300      	str	r3, [sp, #0]
 80134ee:	4b11      	ldr	r3, [pc, #68]	; (8013534 <prvCheckForValidListAndQueue+0x74>)
 80134f0:	4a11      	ldr	r2, [pc, #68]	; (8013538 <prvCheckForValidListAndQueue+0x78>)
 80134f2:	2110      	movs	r1, #16
 80134f4:	2040      	movs	r0, #64	; 0x40
 80134f6:	f7fd fc61 	bl	8010dbc <xQueueGenericCreateStatic>
 80134fa:	4603      	mov	r3, r0
 80134fc:	4a08      	ldr	r2, [pc, #32]	; (8013520 <prvCheckForValidListAndQueue+0x60>)
 80134fe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8013500:	4b07      	ldr	r3, [pc, #28]	; (8013520 <prvCheckForValidListAndQueue+0x60>)
 8013502:	681b      	ldr	r3, [r3, #0]
 8013504:	2b00      	cmp	r3, #0
 8013506:	d005      	beq.n	8013514 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8013508:	4b05      	ldr	r3, [pc, #20]	; (8013520 <prvCheckForValidListAndQueue+0x60>)
 801350a:	681b      	ldr	r3, [r3, #0]
 801350c:	490b      	ldr	r1, [pc, #44]	; (801353c <prvCheckForValidListAndQueue+0x7c>)
 801350e:	4618      	mov	r0, r3
 8013510:	f7fe fb0e 	bl	8011b30 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013514:	f000 f9ae 	bl	8013874 <vPortExitCritical>
}
 8013518:	bf00      	nop
 801351a:	46bd      	mov	sp, r7
 801351c:	bd80      	pop	{r7, pc}
 801351e:	bf00      	nop
 8013520:	20005e04 	.word	0x20005e04
 8013524:	20005dd4 	.word	0x20005dd4
 8013528:	20005de8 	.word	0x20005de8
 801352c:	20005dfc 	.word	0x20005dfc
 8013530:	20005e00 	.word	0x20005e00
 8013534:	20006210 	.word	0x20006210
 8013538:	20005e10 	.word	0x20005e10
 801353c:	08019b90 	.word	0x08019b90

08013540 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8013540:	b580      	push	{r7, lr}
 8013542:	b086      	sub	sp, #24
 8013544:	af00      	add	r7, sp, #0
 8013546:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	2b00      	cmp	r3, #0
 8013550:	d10a      	bne.n	8013568 <pvTimerGetTimerID+0x28>
	__asm volatile
 8013552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013556:	f383 8811 	msr	BASEPRI, r3
 801355a:	f3bf 8f6f 	isb	sy
 801355e:	f3bf 8f4f 	dsb	sy
 8013562:	60fb      	str	r3, [r7, #12]
}
 8013564:	bf00      	nop
 8013566:	e7fe      	b.n	8013566 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8013568:	f000 f954 	bl	8013814 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 801356c:	697b      	ldr	r3, [r7, #20]
 801356e:	69db      	ldr	r3, [r3, #28]
 8013570:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8013572:	f000 f97f 	bl	8013874 <vPortExitCritical>

	return pvReturn;
 8013576:	693b      	ldr	r3, [r7, #16]
}
 8013578:	4618      	mov	r0, r3
 801357a:	3718      	adds	r7, #24
 801357c:	46bd      	mov	sp, r7
 801357e:	bd80      	pop	{r7, pc}

08013580 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8013580:	b580      	push	{r7, lr}
 8013582:	b08a      	sub	sp, #40	; 0x28
 8013584:	af00      	add	r7, sp, #0
 8013586:	60f8      	str	r0, [r7, #12]
 8013588:	60b9      	str	r1, [r7, #8]
 801358a:	607a      	str	r2, [r7, #4]
 801358c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 801358e:	f06f 0301 	mvn.w	r3, #1
 8013592:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8013594:	68fb      	ldr	r3, [r7, #12]
 8013596:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8013598:	68bb      	ldr	r3, [r7, #8]
 801359a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80135a0:	4b06      	ldr	r3, [pc, #24]	; (80135bc <xTimerPendFunctionCallFromISR+0x3c>)
 80135a2:	6818      	ldr	r0, [r3, #0]
 80135a4:	f107 0114 	add.w	r1, r7, #20
 80135a8:	2300      	movs	r3, #0
 80135aa:	683a      	ldr	r2, [r7, #0]
 80135ac:	f7fd fe90 	bl	80112d0 <xQueueGenericSendFromISR>
 80135b0:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80135b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80135b4:	4618      	mov	r0, r3
 80135b6:	3728      	adds	r7, #40	; 0x28
 80135b8:	46bd      	mov	sp, r7
 80135ba:	bd80      	pop	{r7, pc}
 80135bc:	20005e04 	.word	0x20005e04

080135c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80135c0:	b480      	push	{r7}
 80135c2:	b085      	sub	sp, #20
 80135c4:	af00      	add	r7, sp, #0
 80135c6:	60f8      	str	r0, [r7, #12]
 80135c8:	60b9      	str	r1, [r7, #8]
 80135ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80135cc:	68fb      	ldr	r3, [r7, #12]
 80135ce:	3b04      	subs	r3, #4
 80135d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80135d2:	68fb      	ldr	r3, [r7, #12]
 80135d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80135d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80135da:	68fb      	ldr	r3, [r7, #12]
 80135dc:	3b04      	subs	r3, #4
 80135de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80135e0:	68bb      	ldr	r3, [r7, #8]
 80135e2:	f023 0201 	bic.w	r2, r3, #1
 80135e6:	68fb      	ldr	r3, [r7, #12]
 80135e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80135ea:	68fb      	ldr	r3, [r7, #12]
 80135ec:	3b04      	subs	r3, #4
 80135ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80135f0:	4a0c      	ldr	r2, [pc, #48]	; (8013624 <pxPortInitialiseStack+0x64>)
 80135f2:	68fb      	ldr	r3, [r7, #12]
 80135f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80135f6:	68fb      	ldr	r3, [r7, #12]
 80135f8:	3b14      	subs	r3, #20
 80135fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80135fc:	687a      	ldr	r2, [r7, #4]
 80135fe:	68fb      	ldr	r3, [r7, #12]
 8013600:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8013602:	68fb      	ldr	r3, [r7, #12]
 8013604:	3b04      	subs	r3, #4
 8013606:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8013608:	68fb      	ldr	r3, [r7, #12]
 801360a:	f06f 0202 	mvn.w	r2, #2
 801360e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8013610:	68fb      	ldr	r3, [r7, #12]
 8013612:	3b20      	subs	r3, #32
 8013614:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8013616:	68fb      	ldr	r3, [r7, #12]
}
 8013618:	4618      	mov	r0, r3
 801361a:	3714      	adds	r7, #20
 801361c:	46bd      	mov	sp, r7
 801361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013622:	4770      	bx	lr
 8013624:	08013629 	.word	0x08013629

08013628 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013628:	b480      	push	{r7}
 801362a:	b085      	sub	sp, #20
 801362c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801362e:	2300      	movs	r3, #0
 8013630:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8013632:	4b12      	ldr	r3, [pc, #72]	; (801367c <prvTaskExitError+0x54>)
 8013634:	681b      	ldr	r3, [r3, #0]
 8013636:	f1b3 3fff 	cmp.w	r3, #4294967295
 801363a:	d00a      	beq.n	8013652 <prvTaskExitError+0x2a>
	__asm volatile
 801363c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013640:	f383 8811 	msr	BASEPRI, r3
 8013644:	f3bf 8f6f 	isb	sy
 8013648:	f3bf 8f4f 	dsb	sy
 801364c:	60fb      	str	r3, [r7, #12]
}
 801364e:	bf00      	nop
 8013650:	e7fe      	b.n	8013650 <prvTaskExitError+0x28>
	__asm volatile
 8013652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013656:	f383 8811 	msr	BASEPRI, r3
 801365a:	f3bf 8f6f 	isb	sy
 801365e:	f3bf 8f4f 	dsb	sy
 8013662:	60bb      	str	r3, [r7, #8]
}
 8013664:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8013666:	bf00      	nop
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	2b00      	cmp	r3, #0
 801366c:	d0fc      	beq.n	8013668 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801366e:	bf00      	nop
 8013670:	bf00      	nop
 8013672:	3714      	adds	r7, #20
 8013674:	46bd      	mov	sp, r7
 8013676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801367a:	4770      	bx	lr
 801367c:	200000a0 	.word	0x200000a0

08013680 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013680:	4b07      	ldr	r3, [pc, #28]	; (80136a0 <pxCurrentTCBConst2>)
 8013682:	6819      	ldr	r1, [r3, #0]
 8013684:	6808      	ldr	r0, [r1, #0]
 8013686:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801368a:	f380 8809 	msr	PSP, r0
 801368e:	f3bf 8f6f 	isb	sy
 8013692:	f04f 0000 	mov.w	r0, #0
 8013696:	f380 8811 	msr	BASEPRI, r0
 801369a:	4770      	bx	lr
 801369c:	f3af 8000 	nop.w

080136a0 <pxCurrentTCBConst2>:
 80136a0:	200058d4 	.word	0x200058d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80136a4:	bf00      	nop
 80136a6:	bf00      	nop

080136a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80136a8:	4808      	ldr	r0, [pc, #32]	; (80136cc <prvPortStartFirstTask+0x24>)
 80136aa:	6800      	ldr	r0, [r0, #0]
 80136ac:	6800      	ldr	r0, [r0, #0]
 80136ae:	f380 8808 	msr	MSP, r0
 80136b2:	f04f 0000 	mov.w	r0, #0
 80136b6:	f380 8814 	msr	CONTROL, r0
 80136ba:	b662      	cpsie	i
 80136bc:	b661      	cpsie	f
 80136be:	f3bf 8f4f 	dsb	sy
 80136c2:	f3bf 8f6f 	isb	sy
 80136c6:	df00      	svc	0
 80136c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80136ca:	bf00      	nop
 80136cc:	e000ed08 	.word	0xe000ed08

080136d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80136d0:	b580      	push	{r7, lr}
 80136d2:	b086      	sub	sp, #24
 80136d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80136d6:	4b46      	ldr	r3, [pc, #280]	; (80137f0 <xPortStartScheduler+0x120>)
 80136d8:	681b      	ldr	r3, [r3, #0]
 80136da:	4a46      	ldr	r2, [pc, #280]	; (80137f4 <xPortStartScheduler+0x124>)
 80136dc:	4293      	cmp	r3, r2
 80136de:	d10a      	bne.n	80136f6 <xPortStartScheduler+0x26>
	__asm volatile
 80136e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136e4:	f383 8811 	msr	BASEPRI, r3
 80136e8:	f3bf 8f6f 	isb	sy
 80136ec:	f3bf 8f4f 	dsb	sy
 80136f0:	613b      	str	r3, [r7, #16]
}
 80136f2:	bf00      	nop
 80136f4:	e7fe      	b.n	80136f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80136f6:	4b3e      	ldr	r3, [pc, #248]	; (80137f0 <xPortStartScheduler+0x120>)
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	4a3f      	ldr	r2, [pc, #252]	; (80137f8 <xPortStartScheduler+0x128>)
 80136fc:	4293      	cmp	r3, r2
 80136fe:	d10a      	bne.n	8013716 <xPortStartScheduler+0x46>
	__asm volatile
 8013700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013704:	f383 8811 	msr	BASEPRI, r3
 8013708:	f3bf 8f6f 	isb	sy
 801370c:	f3bf 8f4f 	dsb	sy
 8013710:	60fb      	str	r3, [r7, #12]
}
 8013712:	bf00      	nop
 8013714:	e7fe      	b.n	8013714 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8013716:	4b39      	ldr	r3, [pc, #228]	; (80137fc <xPortStartScheduler+0x12c>)
 8013718:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801371a:	697b      	ldr	r3, [r7, #20]
 801371c:	781b      	ldrb	r3, [r3, #0]
 801371e:	b2db      	uxtb	r3, r3
 8013720:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8013722:	697b      	ldr	r3, [r7, #20]
 8013724:	22ff      	movs	r2, #255	; 0xff
 8013726:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013728:	697b      	ldr	r3, [r7, #20]
 801372a:	781b      	ldrb	r3, [r3, #0]
 801372c:	b2db      	uxtb	r3, r3
 801372e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013730:	78fb      	ldrb	r3, [r7, #3]
 8013732:	b2db      	uxtb	r3, r3
 8013734:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8013738:	b2da      	uxtb	r2, r3
 801373a:	4b31      	ldr	r3, [pc, #196]	; (8013800 <xPortStartScheduler+0x130>)
 801373c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801373e:	4b31      	ldr	r3, [pc, #196]	; (8013804 <xPortStartScheduler+0x134>)
 8013740:	2207      	movs	r2, #7
 8013742:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013744:	e009      	b.n	801375a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8013746:	4b2f      	ldr	r3, [pc, #188]	; (8013804 <xPortStartScheduler+0x134>)
 8013748:	681b      	ldr	r3, [r3, #0]
 801374a:	3b01      	subs	r3, #1
 801374c:	4a2d      	ldr	r2, [pc, #180]	; (8013804 <xPortStartScheduler+0x134>)
 801374e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013750:	78fb      	ldrb	r3, [r7, #3]
 8013752:	b2db      	uxtb	r3, r3
 8013754:	005b      	lsls	r3, r3, #1
 8013756:	b2db      	uxtb	r3, r3
 8013758:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801375a:	78fb      	ldrb	r3, [r7, #3]
 801375c:	b2db      	uxtb	r3, r3
 801375e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013762:	2b80      	cmp	r3, #128	; 0x80
 8013764:	d0ef      	beq.n	8013746 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8013766:	4b27      	ldr	r3, [pc, #156]	; (8013804 <xPortStartScheduler+0x134>)
 8013768:	681b      	ldr	r3, [r3, #0]
 801376a:	f1c3 0307 	rsb	r3, r3, #7
 801376e:	2b04      	cmp	r3, #4
 8013770:	d00a      	beq.n	8013788 <xPortStartScheduler+0xb8>
	__asm volatile
 8013772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013776:	f383 8811 	msr	BASEPRI, r3
 801377a:	f3bf 8f6f 	isb	sy
 801377e:	f3bf 8f4f 	dsb	sy
 8013782:	60bb      	str	r3, [r7, #8]
}
 8013784:	bf00      	nop
 8013786:	e7fe      	b.n	8013786 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8013788:	4b1e      	ldr	r3, [pc, #120]	; (8013804 <xPortStartScheduler+0x134>)
 801378a:	681b      	ldr	r3, [r3, #0]
 801378c:	021b      	lsls	r3, r3, #8
 801378e:	4a1d      	ldr	r2, [pc, #116]	; (8013804 <xPortStartScheduler+0x134>)
 8013790:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013792:	4b1c      	ldr	r3, [pc, #112]	; (8013804 <xPortStartScheduler+0x134>)
 8013794:	681b      	ldr	r3, [r3, #0]
 8013796:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801379a:	4a1a      	ldr	r2, [pc, #104]	; (8013804 <xPortStartScheduler+0x134>)
 801379c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	b2da      	uxtb	r2, r3
 80137a2:	697b      	ldr	r3, [r7, #20]
 80137a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80137a6:	4b18      	ldr	r3, [pc, #96]	; (8013808 <xPortStartScheduler+0x138>)
 80137a8:	681b      	ldr	r3, [r3, #0]
 80137aa:	4a17      	ldr	r2, [pc, #92]	; (8013808 <xPortStartScheduler+0x138>)
 80137ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80137b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80137b2:	4b15      	ldr	r3, [pc, #84]	; (8013808 <xPortStartScheduler+0x138>)
 80137b4:	681b      	ldr	r3, [r3, #0]
 80137b6:	4a14      	ldr	r2, [pc, #80]	; (8013808 <xPortStartScheduler+0x138>)
 80137b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80137bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80137be:	f000 f8dd 	bl	801397c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80137c2:	4b12      	ldr	r3, [pc, #72]	; (801380c <xPortStartScheduler+0x13c>)
 80137c4:	2200      	movs	r2, #0
 80137c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80137c8:	f000 f8fc 	bl	80139c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80137cc:	4b10      	ldr	r3, [pc, #64]	; (8013810 <xPortStartScheduler+0x140>)
 80137ce:	681b      	ldr	r3, [r3, #0]
 80137d0:	4a0f      	ldr	r2, [pc, #60]	; (8013810 <xPortStartScheduler+0x140>)
 80137d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80137d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80137d8:	f7ff ff66 	bl	80136a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80137dc:	f7fe fdb8 	bl	8012350 <vTaskSwitchContext>
	prvTaskExitError();
 80137e0:	f7ff ff22 	bl	8013628 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80137e4:	2300      	movs	r3, #0
}
 80137e6:	4618      	mov	r0, r3
 80137e8:	3718      	adds	r7, #24
 80137ea:	46bd      	mov	sp, r7
 80137ec:	bd80      	pop	{r7, pc}
 80137ee:	bf00      	nop
 80137f0:	e000ed00 	.word	0xe000ed00
 80137f4:	410fc271 	.word	0x410fc271
 80137f8:	410fc270 	.word	0x410fc270
 80137fc:	e000e400 	.word	0xe000e400
 8013800:	20006260 	.word	0x20006260
 8013804:	20006264 	.word	0x20006264
 8013808:	e000ed20 	.word	0xe000ed20
 801380c:	200000a0 	.word	0x200000a0
 8013810:	e000ef34 	.word	0xe000ef34

08013814 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8013814:	b480      	push	{r7}
 8013816:	b083      	sub	sp, #12
 8013818:	af00      	add	r7, sp, #0
	__asm volatile
 801381a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801381e:	f383 8811 	msr	BASEPRI, r3
 8013822:	f3bf 8f6f 	isb	sy
 8013826:	f3bf 8f4f 	dsb	sy
 801382a:	607b      	str	r3, [r7, #4]
}
 801382c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801382e:	4b0f      	ldr	r3, [pc, #60]	; (801386c <vPortEnterCritical+0x58>)
 8013830:	681b      	ldr	r3, [r3, #0]
 8013832:	3301      	adds	r3, #1
 8013834:	4a0d      	ldr	r2, [pc, #52]	; (801386c <vPortEnterCritical+0x58>)
 8013836:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8013838:	4b0c      	ldr	r3, [pc, #48]	; (801386c <vPortEnterCritical+0x58>)
 801383a:	681b      	ldr	r3, [r3, #0]
 801383c:	2b01      	cmp	r3, #1
 801383e:	d10f      	bne.n	8013860 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013840:	4b0b      	ldr	r3, [pc, #44]	; (8013870 <vPortEnterCritical+0x5c>)
 8013842:	681b      	ldr	r3, [r3, #0]
 8013844:	b2db      	uxtb	r3, r3
 8013846:	2b00      	cmp	r3, #0
 8013848:	d00a      	beq.n	8013860 <vPortEnterCritical+0x4c>
	__asm volatile
 801384a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801384e:	f383 8811 	msr	BASEPRI, r3
 8013852:	f3bf 8f6f 	isb	sy
 8013856:	f3bf 8f4f 	dsb	sy
 801385a:	603b      	str	r3, [r7, #0]
}
 801385c:	bf00      	nop
 801385e:	e7fe      	b.n	801385e <vPortEnterCritical+0x4a>
	}
}
 8013860:	bf00      	nop
 8013862:	370c      	adds	r7, #12
 8013864:	46bd      	mov	sp, r7
 8013866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801386a:	4770      	bx	lr
 801386c:	200000a0 	.word	0x200000a0
 8013870:	e000ed04 	.word	0xe000ed04

08013874 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8013874:	b480      	push	{r7}
 8013876:	b083      	sub	sp, #12
 8013878:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801387a:	4b12      	ldr	r3, [pc, #72]	; (80138c4 <vPortExitCritical+0x50>)
 801387c:	681b      	ldr	r3, [r3, #0]
 801387e:	2b00      	cmp	r3, #0
 8013880:	d10a      	bne.n	8013898 <vPortExitCritical+0x24>
	__asm volatile
 8013882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013886:	f383 8811 	msr	BASEPRI, r3
 801388a:	f3bf 8f6f 	isb	sy
 801388e:	f3bf 8f4f 	dsb	sy
 8013892:	607b      	str	r3, [r7, #4]
}
 8013894:	bf00      	nop
 8013896:	e7fe      	b.n	8013896 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8013898:	4b0a      	ldr	r3, [pc, #40]	; (80138c4 <vPortExitCritical+0x50>)
 801389a:	681b      	ldr	r3, [r3, #0]
 801389c:	3b01      	subs	r3, #1
 801389e:	4a09      	ldr	r2, [pc, #36]	; (80138c4 <vPortExitCritical+0x50>)
 80138a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80138a2:	4b08      	ldr	r3, [pc, #32]	; (80138c4 <vPortExitCritical+0x50>)
 80138a4:	681b      	ldr	r3, [r3, #0]
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	d105      	bne.n	80138b6 <vPortExitCritical+0x42>
 80138aa:	2300      	movs	r3, #0
 80138ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80138ae:	683b      	ldr	r3, [r7, #0]
 80138b0:	f383 8811 	msr	BASEPRI, r3
}
 80138b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80138b6:	bf00      	nop
 80138b8:	370c      	adds	r7, #12
 80138ba:	46bd      	mov	sp, r7
 80138bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138c0:	4770      	bx	lr
 80138c2:	bf00      	nop
 80138c4:	200000a0 	.word	0x200000a0
	...

080138d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80138d0:	f3ef 8009 	mrs	r0, PSP
 80138d4:	f3bf 8f6f 	isb	sy
 80138d8:	4b15      	ldr	r3, [pc, #84]	; (8013930 <pxCurrentTCBConst>)
 80138da:	681a      	ldr	r2, [r3, #0]
 80138dc:	f01e 0f10 	tst.w	lr, #16
 80138e0:	bf08      	it	eq
 80138e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80138e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138ea:	6010      	str	r0, [r2, #0]
 80138ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80138f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80138f4:	f380 8811 	msr	BASEPRI, r0
 80138f8:	f3bf 8f4f 	dsb	sy
 80138fc:	f3bf 8f6f 	isb	sy
 8013900:	f7fe fd26 	bl	8012350 <vTaskSwitchContext>
 8013904:	f04f 0000 	mov.w	r0, #0
 8013908:	f380 8811 	msr	BASEPRI, r0
 801390c:	bc09      	pop	{r0, r3}
 801390e:	6819      	ldr	r1, [r3, #0]
 8013910:	6808      	ldr	r0, [r1, #0]
 8013912:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013916:	f01e 0f10 	tst.w	lr, #16
 801391a:	bf08      	it	eq
 801391c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013920:	f380 8809 	msr	PSP, r0
 8013924:	f3bf 8f6f 	isb	sy
 8013928:	4770      	bx	lr
 801392a:	bf00      	nop
 801392c:	f3af 8000 	nop.w

08013930 <pxCurrentTCBConst>:
 8013930:	200058d4 	.word	0x200058d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013934:	bf00      	nop
 8013936:	bf00      	nop

08013938 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013938:	b580      	push	{r7, lr}
 801393a:	b082      	sub	sp, #8
 801393c:	af00      	add	r7, sp, #0
	__asm volatile
 801393e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013942:	f383 8811 	msr	BASEPRI, r3
 8013946:	f3bf 8f6f 	isb	sy
 801394a:	f3bf 8f4f 	dsb	sy
 801394e:	607b      	str	r3, [r7, #4]
}
 8013950:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013952:	f7fe fc43 	bl	80121dc <xTaskIncrementTick>
 8013956:	4603      	mov	r3, r0
 8013958:	2b00      	cmp	r3, #0
 801395a:	d003      	beq.n	8013964 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801395c:	4b06      	ldr	r3, [pc, #24]	; (8013978 <xPortSysTickHandler+0x40>)
 801395e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013962:	601a      	str	r2, [r3, #0]
 8013964:	2300      	movs	r3, #0
 8013966:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013968:	683b      	ldr	r3, [r7, #0]
 801396a:	f383 8811 	msr	BASEPRI, r3
}
 801396e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8013970:	bf00      	nop
 8013972:	3708      	adds	r7, #8
 8013974:	46bd      	mov	sp, r7
 8013976:	bd80      	pop	{r7, pc}
 8013978:	e000ed04 	.word	0xe000ed04

0801397c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801397c:	b480      	push	{r7}
 801397e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013980:	4b0b      	ldr	r3, [pc, #44]	; (80139b0 <vPortSetupTimerInterrupt+0x34>)
 8013982:	2200      	movs	r2, #0
 8013984:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013986:	4b0b      	ldr	r3, [pc, #44]	; (80139b4 <vPortSetupTimerInterrupt+0x38>)
 8013988:	2200      	movs	r2, #0
 801398a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801398c:	4b0a      	ldr	r3, [pc, #40]	; (80139b8 <vPortSetupTimerInterrupt+0x3c>)
 801398e:	681b      	ldr	r3, [r3, #0]
 8013990:	4a0a      	ldr	r2, [pc, #40]	; (80139bc <vPortSetupTimerInterrupt+0x40>)
 8013992:	fba2 2303 	umull	r2, r3, r2, r3
 8013996:	099b      	lsrs	r3, r3, #6
 8013998:	4a09      	ldr	r2, [pc, #36]	; (80139c0 <vPortSetupTimerInterrupt+0x44>)
 801399a:	3b01      	subs	r3, #1
 801399c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801399e:	4b04      	ldr	r3, [pc, #16]	; (80139b0 <vPortSetupTimerInterrupt+0x34>)
 80139a0:	2207      	movs	r2, #7
 80139a2:	601a      	str	r2, [r3, #0]
}
 80139a4:	bf00      	nop
 80139a6:	46bd      	mov	sp, r7
 80139a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ac:	4770      	bx	lr
 80139ae:	bf00      	nop
 80139b0:	e000e010 	.word	0xe000e010
 80139b4:	e000e018 	.word	0xe000e018
 80139b8:	20000094 	.word	0x20000094
 80139bc:	10624dd3 	.word	0x10624dd3
 80139c0:	e000e014 	.word	0xe000e014

080139c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80139c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80139d4 <vPortEnableVFP+0x10>
 80139c8:	6801      	ldr	r1, [r0, #0]
 80139ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80139ce:	6001      	str	r1, [r0, #0]
 80139d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80139d2:	bf00      	nop
 80139d4:	e000ed88 	.word	0xe000ed88

080139d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80139d8:	b480      	push	{r7}
 80139da:	b085      	sub	sp, #20
 80139dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80139de:	f3ef 8305 	mrs	r3, IPSR
 80139e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80139e4:	68fb      	ldr	r3, [r7, #12]
 80139e6:	2b0f      	cmp	r3, #15
 80139e8:	d914      	bls.n	8013a14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80139ea:	4a17      	ldr	r2, [pc, #92]	; (8013a48 <vPortValidateInterruptPriority+0x70>)
 80139ec:	68fb      	ldr	r3, [r7, #12]
 80139ee:	4413      	add	r3, r2
 80139f0:	781b      	ldrb	r3, [r3, #0]
 80139f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80139f4:	4b15      	ldr	r3, [pc, #84]	; (8013a4c <vPortValidateInterruptPriority+0x74>)
 80139f6:	781b      	ldrb	r3, [r3, #0]
 80139f8:	7afa      	ldrb	r2, [r7, #11]
 80139fa:	429a      	cmp	r2, r3
 80139fc:	d20a      	bcs.n	8013a14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80139fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a02:	f383 8811 	msr	BASEPRI, r3
 8013a06:	f3bf 8f6f 	isb	sy
 8013a0a:	f3bf 8f4f 	dsb	sy
 8013a0e:	607b      	str	r3, [r7, #4]
}
 8013a10:	bf00      	nop
 8013a12:	e7fe      	b.n	8013a12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8013a14:	4b0e      	ldr	r3, [pc, #56]	; (8013a50 <vPortValidateInterruptPriority+0x78>)
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8013a1c:	4b0d      	ldr	r3, [pc, #52]	; (8013a54 <vPortValidateInterruptPriority+0x7c>)
 8013a1e:	681b      	ldr	r3, [r3, #0]
 8013a20:	429a      	cmp	r2, r3
 8013a22:	d90a      	bls.n	8013a3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8013a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a28:	f383 8811 	msr	BASEPRI, r3
 8013a2c:	f3bf 8f6f 	isb	sy
 8013a30:	f3bf 8f4f 	dsb	sy
 8013a34:	603b      	str	r3, [r7, #0]
}
 8013a36:	bf00      	nop
 8013a38:	e7fe      	b.n	8013a38 <vPortValidateInterruptPriority+0x60>
	}
 8013a3a:	bf00      	nop
 8013a3c:	3714      	adds	r7, #20
 8013a3e:	46bd      	mov	sp, r7
 8013a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a44:	4770      	bx	lr
 8013a46:	bf00      	nop
 8013a48:	e000e3f0 	.word	0xe000e3f0
 8013a4c:	20006260 	.word	0x20006260
 8013a50:	e000ed0c 	.word	0xe000ed0c
 8013a54:	20006264 	.word	0x20006264

08013a58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013a58:	b580      	push	{r7, lr}
 8013a5a:	b08a      	sub	sp, #40	; 0x28
 8013a5c:	af00      	add	r7, sp, #0
 8013a5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013a60:	2300      	movs	r3, #0
 8013a62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013a64:	f7fe fafe 	bl	8012064 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8013a68:	4b5b      	ldr	r3, [pc, #364]	; (8013bd8 <pvPortMalloc+0x180>)
 8013a6a:	681b      	ldr	r3, [r3, #0]
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	d101      	bne.n	8013a74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013a70:	f000 f920 	bl	8013cb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013a74:	4b59      	ldr	r3, [pc, #356]	; (8013bdc <pvPortMalloc+0x184>)
 8013a76:	681a      	ldr	r2, [r3, #0]
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	4013      	ands	r3, r2
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	f040 8093 	bne.w	8013ba8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d01d      	beq.n	8013ac4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8013a88:	2208      	movs	r2, #8
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	4413      	add	r3, r2
 8013a8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	f003 0307 	and.w	r3, r3, #7
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d014      	beq.n	8013ac4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	f023 0307 	bic.w	r3, r3, #7
 8013aa0:	3308      	adds	r3, #8
 8013aa2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	f003 0307 	and.w	r3, r3, #7
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d00a      	beq.n	8013ac4 <pvPortMalloc+0x6c>
	__asm volatile
 8013aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ab2:	f383 8811 	msr	BASEPRI, r3
 8013ab6:	f3bf 8f6f 	isb	sy
 8013aba:	f3bf 8f4f 	dsb	sy
 8013abe:	617b      	str	r3, [r7, #20]
}
 8013ac0:	bf00      	nop
 8013ac2:	e7fe      	b.n	8013ac2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d06e      	beq.n	8013ba8 <pvPortMalloc+0x150>
 8013aca:	4b45      	ldr	r3, [pc, #276]	; (8013be0 <pvPortMalloc+0x188>)
 8013acc:	681b      	ldr	r3, [r3, #0]
 8013ace:	687a      	ldr	r2, [r7, #4]
 8013ad0:	429a      	cmp	r2, r3
 8013ad2:	d869      	bhi.n	8013ba8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8013ad4:	4b43      	ldr	r3, [pc, #268]	; (8013be4 <pvPortMalloc+0x18c>)
 8013ad6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8013ad8:	4b42      	ldr	r3, [pc, #264]	; (8013be4 <pvPortMalloc+0x18c>)
 8013ada:	681b      	ldr	r3, [r3, #0]
 8013adc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013ade:	e004      	b.n	8013aea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8013ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ae2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8013ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ae6:	681b      	ldr	r3, [r3, #0]
 8013ae8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aec:	685b      	ldr	r3, [r3, #4]
 8013aee:	687a      	ldr	r2, [r7, #4]
 8013af0:	429a      	cmp	r2, r3
 8013af2:	d903      	bls.n	8013afc <pvPortMalloc+0xa4>
 8013af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013af6:	681b      	ldr	r3, [r3, #0]
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d1f1      	bne.n	8013ae0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8013afc:	4b36      	ldr	r3, [pc, #216]	; (8013bd8 <pvPortMalloc+0x180>)
 8013afe:	681b      	ldr	r3, [r3, #0]
 8013b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013b02:	429a      	cmp	r2, r3
 8013b04:	d050      	beq.n	8013ba8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013b06:	6a3b      	ldr	r3, [r7, #32]
 8013b08:	681b      	ldr	r3, [r3, #0]
 8013b0a:	2208      	movs	r2, #8
 8013b0c:	4413      	add	r3, r2
 8013b0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b12:	681a      	ldr	r2, [r3, #0]
 8013b14:	6a3b      	ldr	r3, [r7, #32]
 8013b16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b1a:	685a      	ldr	r2, [r3, #4]
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	1ad2      	subs	r2, r2, r3
 8013b20:	2308      	movs	r3, #8
 8013b22:	005b      	lsls	r3, r3, #1
 8013b24:	429a      	cmp	r2, r3
 8013b26:	d91f      	bls.n	8013b68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8013b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	4413      	add	r3, r2
 8013b2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013b30:	69bb      	ldr	r3, [r7, #24]
 8013b32:	f003 0307 	and.w	r3, r3, #7
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d00a      	beq.n	8013b50 <pvPortMalloc+0xf8>
	__asm volatile
 8013b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b3e:	f383 8811 	msr	BASEPRI, r3
 8013b42:	f3bf 8f6f 	isb	sy
 8013b46:	f3bf 8f4f 	dsb	sy
 8013b4a:	613b      	str	r3, [r7, #16]
}
 8013b4c:	bf00      	nop
 8013b4e:	e7fe      	b.n	8013b4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b52:	685a      	ldr	r2, [r3, #4]
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	1ad2      	subs	r2, r2, r3
 8013b58:	69bb      	ldr	r3, [r7, #24]
 8013b5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8013b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b5e:	687a      	ldr	r2, [r7, #4]
 8013b60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8013b62:	69b8      	ldr	r0, [r7, #24]
 8013b64:	f000 f90a 	bl	8013d7c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013b68:	4b1d      	ldr	r3, [pc, #116]	; (8013be0 <pvPortMalloc+0x188>)
 8013b6a:	681a      	ldr	r2, [r3, #0]
 8013b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b6e:	685b      	ldr	r3, [r3, #4]
 8013b70:	1ad3      	subs	r3, r2, r3
 8013b72:	4a1b      	ldr	r2, [pc, #108]	; (8013be0 <pvPortMalloc+0x188>)
 8013b74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013b76:	4b1a      	ldr	r3, [pc, #104]	; (8013be0 <pvPortMalloc+0x188>)
 8013b78:	681a      	ldr	r2, [r3, #0]
 8013b7a:	4b1b      	ldr	r3, [pc, #108]	; (8013be8 <pvPortMalloc+0x190>)
 8013b7c:	681b      	ldr	r3, [r3, #0]
 8013b7e:	429a      	cmp	r2, r3
 8013b80:	d203      	bcs.n	8013b8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8013b82:	4b17      	ldr	r3, [pc, #92]	; (8013be0 <pvPortMalloc+0x188>)
 8013b84:	681b      	ldr	r3, [r3, #0]
 8013b86:	4a18      	ldr	r2, [pc, #96]	; (8013be8 <pvPortMalloc+0x190>)
 8013b88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8013b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b8c:	685a      	ldr	r2, [r3, #4]
 8013b8e:	4b13      	ldr	r3, [pc, #76]	; (8013bdc <pvPortMalloc+0x184>)
 8013b90:	681b      	ldr	r3, [r3, #0]
 8013b92:	431a      	orrs	r2, r3
 8013b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b9a:	2200      	movs	r2, #0
 8013b9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8013b9e:	4b13      	ldr	r3, [pc, #76]	; (8013bec <pvPortMalloc+0x194>)
 8013ba0:	681b      	ldr	r3, [r3, #0]
 8013ba2:	3301      	adds	r3, #1
 8013ba4:	4a11      	ldr	r2, [pc, #68]	; (8013bec <pvPortMalloc+0x194>)
 8013ba6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013ba8:	f7fe fa6a 	bl	8012080 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8013bac:	69fb      	ldr	r3, [r7, #28]
 8013bae:	f003 0307 	and.w	r3, r3, #7
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d00a      	beq.n	8013bcc <pvPortMalloc+0x174>
	__asm volatile
 8013bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bba:	f383 8811 	msr	BASEPRI, r3
 8013bbe:	f3bf 8f6f 	isb	sy
 8013bc2:	f3bf 8f4f 	dsb	sy
 8013bc6:	60fb      	str	r3, [r7, #12]
}
 8013bc8:	bf00      	nop
 8013bca:	e7fe      	b.n	8013bca <pvPortMalloc+0x172>
	return pvReturn;
 8013bcc:	69fb      	ldr	r3, [r7, #28]
}
 8013bce:	4618      	mov	r0, r3
 8013bd0:	3728      	adds	r7, #40	; 0x28
 8013bd2:	46bd      	mov	sp, r7
 8013bd4:	bd80      	pop	{r7, pc}
 8013bd6:	bf00      	nop
 8013bd8:	20019af0 	.word	0x20019af0
 8013bdc:	20019b04 	.word	0x20019b04
 8013be0:	20019af4 	.word	0x20019af4
 8013be4:	20019ae8 	.word	0x20019ae8
 8013be8:	20019af8 	.word	0x20019af8
 8013bec:	20019afc 	.word	0x20019afc

08013bf0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013bf0:	b580      	push	{r7, lr}
 8013bf2:	b086      	sub	sp, #24
 8013bf4:	af00      	add	r7, sp, #0
 8013bf6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d04d      	beq.n	8013c9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8013c02:	2308      	movs	r3, #8
 8013c04:	425b      	negs	r3, r3
 8013c06:	697a      	ldr	r2, [r7, #20]
 8013c08:	4413      	add	r3, r2
 8013c0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8013c0c:	697b      	ldr	r3, [r7, #20]
 8013c0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013c10:	693b      	ldr	r3, [r7, #16]
 8013c12:	685a      	ldr	r2, [r3, #4]
 8013c14:	4b24      	ldr	r3, [pc, #144]	; (8013ca8 <vPortFree+0xb8>)
 8013c16:	681b      	ldr	r3, [r3, #0]
 8013c18:	4013      	ands	r3, r2
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d10a      	bne.n	8013c34 <vPortFree+0x44>
	__asm volatile
 8013c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c22:	f383 8811 	msr	BASEPRI, r3
 8013c26:	f3bf 8f6f 	isb	sy
 8013c2a:	f3bf 8f4f 	dsb	sy
 8013c2e:	60fb      	str	r3, [r7, #12]
}
 8013c30:	bf00      	nop
 8013c32:	e7fe      	b.n	8013c32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013c34:	693b      	ldr	r3, [r7, #16]
 8013c36:	681b      	ldr	r3, [r3, #0]
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	d00a      	beq.n	8013c52 <vPortFree+0x62>
	__asm volatile
 8013c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c40:	f383 8811 	msr	BASEPRI, r3
 8013c44:	f3bf 8f6f 	isb	sy
 8013c48:	f3bf 8f4f 	dsb	sy
 8013c4c:	60bb      	str	r3, [r7, #8]
}
 8013c4e:	bf00      	nop
 8013c50:	e7fe      	b.n	8013c50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8013c52:	693b      	ldr	r3, [r7, #16]
 8013c54:	685a      	ldr	r2, [r3, #4]
 8013c56:	4b14      	ldr	r3, [pc, #80]	; (8013ca8 <vPortFree+0xb8>)
 8013c58:	681b      	ldr	r3, [r3, #0]
 8013c5a:	4013      	ands	r3, r2
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d01e      	beq.n	8013c9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013c60:	693b      	ldr	r3, [r7, #16]
 8013c62:	681b      	ldr	r3, [r3, #0]
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d11a      	bne.n	8013c9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013c68:	693b      	ldr	r3, [r7, #16]
 8013c6a:	685a      	ldr	r2, [r3, #4]
 8013c6c:	4b0e      	ldr	r3, [pc, #56]	; (8013ca8 <vPortFree+0xb8>)
 8013c6e:	681b      	ldr	r3, [r3, #0]
 8013c70:	43db      	mvns	r3, r3
 8013c72:	401a      	ands	r2, r3
 8013c74:	693b      	ldr	r3, [r7, #16]
 8013c76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013c78:	f7fe f9f4 	bl	8012064 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8013c7c:	693b      	ldr	r3, [r7, #16]
 8013c7e:	685a      	ldr	r2, [r3, #4]
 8013c80:	4b0a      	ldr	r3, [pc, #40]	; (8013cac <vPortFree+0xbc>)
 8013c82:	681b      	ldr	r3, [r3, #0]
 8013c84:	4413      	add	r3, r2
 8013c86:	4a09      	ldr	r2, [pc, #36]	; (8013cac <vPortFree+0xbc>)
 8013c88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8013c8a:	6938      	ldr	r0, [r7, #16]
 8013c8c:	f000 f876 	bl	8013d7c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8013c90:	4b07      	ldr	r3, [pc, #28]	; (8013cb0 <vPortFree+0xc0>)
 8013c92:	681b      	ldr	r3, [r3, #0]
 8013c94:	3301      	adds	r3, #1
 8013c96:	4a06      	ldr	r2, [pc, #24]	; (8013cb0 <vPortFree+0xc0>)
 8013c98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8013c9a:	f7fe f9f1 	bl	8012080 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8013c9e:	bf00      	nop
 8013ca0:	3718      	adds	r7, #24
 8013ca2:	46bd      	mov	sp, r7
 8013ca4:	bd80      	pop	{r7, pc}
 8013ca6:	bf00      	nop
 8013ca8:	20019b04 	.word	0x20019b04
 8013cac:	20019af4 	.word	0x20019af4
 8013cb0:	20019b00 	.word	0x20019b00

08013cb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013cb4:	b480      	push	{r7}
 8013cb6:	b085      	sub	sp, #20
 8013cb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8013cba:	4b29      	ldr	r3, [pc, #164]	; (8013d60 <prvHeapInit+0xac>)
 8013cbc:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013cbe:	4b29      	ldr	r3, [pc, #164]	; (8013d64 <prvHeapInit+0xb0>)
 8013cc0:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013cc2:	68fb      	ldr	r3, [r7, #12]
 8013cc4:	f003 0307 	and.w	r3, r3, #7
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d00c      	beq.n	8013ce6 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8013ccc:	68fb      	ldr	r3, [r7, #12]
 8013cce:	3307      	adds	r3, #7
 8013cd0:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013cd2:	68fb      	ldr	r3, [r7, #12]
 8013cd4:	f023 0307 	bic.w	r3, r3, #7
 8013cd8:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8013cda:	68ba      	ldr	r2, [r7, #8]
 8013cdc:	68fb      	ldr	r3, [r7, #12]
 8013cde:	1ad3      	subs	r3, r2, r3
 8013ce0:	4a20      	ldr	r2, [pc, #128]	; (8013d64 <prvHeapInit+0xb0>)
 8013ce2:	4413      	add	r3, r2
 8013ce4:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013ce6:	68fb      	ldr	r3, [r7, #12]
 8013ce8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8013cea:	4a1f      	ldr	r2, [pc, #124]	; (8013d68 <prvHeapInit+0xb4>)
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013cf0:	4b1d      	ldr	r3, [pc, #116]	; (8013d68 <prvHeapInit+0xb4>)
 8013cf2:	2200      	movs	r2, #0
 8013cf4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	68ba      	ldr	r2, [r7, #8]
 8013cfa:	4413      	add	r3, r2
 8013cfc:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013cfe:	2208      	movs	r2, #8
 8013d00:	68fb      	ldr	r3, [r7, #12]
 8013d02:	1a9b      	subs	r3, r3, r2
 8013d04:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013d06:	68fb      	ldr	r3, [r7, #12]
 8013d08:	f023 0307 	bic.w	r3, r3, #7
 8013d0c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013d0e:	68fb      	ldr	r3, [r7, #12]
 8013d10:	4a16      	ldr	r2, [pc, #88]	; (8013d6c <prvHeapInit+0xb8>)
 8013d12:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013d14:	4b15      	ldr	r3, [pc, #84]	; (8013d6c <prvHeapInit+0xb8>)
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	2200      	movs	r2, #0
 8013d1a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8013d1c:	4b13      	ldr	r3, [pc, #76]	; (8013d6c <prvHeapInit+0xb8>)
 8013d1e:	681b      	ldr	r3, [r3, #0]
 8013d20:	2200      	movs	r2, #0
 8013d22:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8013d28:	683b      	ldr	r3, [r7, #0]
 8013d2a:	68fa      	ldr	r2, [r7, #12]
 8013d2c:	1ad2      	subs	r2, r2, r3
 8013d2e:	683b      	ldr	r3, [r7, #0]
 8013d30:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013d32:	4b0e      	ldr	r3, [pc, #56]	; (8013d6c <prvHeapInit+0xb8>)
 8013d34:	681a      	ldr	r2, [r3, #0]
 8013d36:	683b      	ldr	r3, [r7, #0]
 8013d38:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013d3a:	683b      	ldr	r3, [r7, #0]
 8013d3c:	685b      	ldr	r3, [r3, #4]
 8013d3e:	4a0c      	ldr	r2, [pc, #48]	; (8013d70 <prvHeapInit+0xbc>)
 8013d40:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013d42:	683b      	ldr	r3, [r7, #0]
 8013d44:	685b      	ldr	r3, [r3, #4]
 8013d46:	4a0b      	ldr	r2, [pc, #44]	; (8013d74 <prvHeapInit+0xc0>)
 8013d48:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8013d4a:	4b0b      	ldr	r3, [pc, #44]	; (8013d78 <prvHeapInit+0xc4>)
 8013d4c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013d50:	601a      	str	r2, [r3, #0]
}
 8013d52:	bf00      	nop
 8013d54:	3714      	adds	r7, #20
 8013d56:	46bd      	mov	sp, r7
 8013d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d5c:	4770      	bx	lr
 8013d5e:	bf00      	nop
 8013d60:	00013880 	.word	0x00013880
 8013d64:	20006268 	.word	0x20006268
 8013d68:	20019ae8 	.word	0x20019ae8
 8013d6c:	20019af0 	.word	0x20019af0
 8013d70:	20019af8 	.word	0x20019af8
 8013d74:	20019af4 	.word	0x20019af4
 8013d78:	20019b04 	.word	0x20019b04

08013d7c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013d7c:	b480      	push	{r7}
 8013d7e:	b085      	sub	sp, #20
 8013d80:	af00      	add	r7, sp, #0
 8013d82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013d84:	4b28      	ldr	r3, [pc, #160]	; (8013e28 <prvInsertBlockIntoFreeList+0xac>)
 8013d86:	60fb      	str	r3, [r7, #12]
 8013d88:	e002      	b.n	8013d90 <prvInsertBlockIntoFreeList+0x14>
 8013d8a:	68fb      	ldr	r3, [r7, #12]
 8013d8c:	681b      	ldr	r3, [r3, #0]
 8013d8e:	60fb      	str	r3, [r7, #12]
 8013d90:	68fb      	ldr	r3, [r7, #12]
 8013d92:	681b      	ldr	r3, [r3, #0]
 8013d94:	687a      	ldr	r2, [r7, #4]
 8013d96:	429a      	cmp	r2, r3
 8013d98:	d8f7      	bhi.n	8013d8a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8013d9a:	68fb      	ldr	r3, [r7, #12]
 8013d9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8013d9e:	68fb      	ldr	r3, [r7, #12]
 8013da0:	685b      	ldr	r3, [r3, #4]
 8013da2:	68ba      	ldr	r2, [r7, #8]
 8013da4:	4413      	add	r3, r2
 8013da6:	687a      	ldr	r2, [r7, #4]
 8013da8:	429a      	cmp	r2, r3
 8013daa:	d108      	bne.n	8013dbe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013dac:	68fb      	ldr	r3, [r7, #12]
 8013dae:	685a      	ldr	r2, [r3, #4]
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	685b      	ldr	r3, [r3, #4]
 8013db4:	441a      	add	r2, r3
 8013db6:	68fb      	ldr	r3, [r7, #12]
 8013db8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013dba:	68fb      	ldr	r3, [r7, #12]
 8013dbc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	685b      	ldr	r3, [r3, #4]
 8013dc6:	68ba      	ldr	r2, [r7, #8]
 8013dc8:	441a      	add	r2, r3
 8013dca:	68fb      	ldr	r3, [r7, #12]
 8013dcc:	681b      	ldr	r3, [r3, #0]
 8013dce:	429a      	cmp	r2, r3
 8013dd0:	d118      	bne.n	8013e04 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8013dd2:	68fb      	ldr	r3, [r7, #12]
 8013dd4:	681a      	ldr	r2, [r3, #0]
 8013dd6:	4b15      	ldr	r3, [pc, #84]	; (8013e2c <prvInsertBlockIntoFreeList+0xb0>)
 8013dd8:	681b      	ldr	r3, [r3, #0]
 8013dda:	429a      	cmp	r2, r3
 8013ddc:	d00d      	beq.n	8013dfa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	685a      	ldr	r2, [r3, #4]
 8013de2:	68fb      	ldr	r3, [r7, #12]
 8013de4:	681b      	ldr	r3, [r3, #0]
 8013de6:	685b      	ldr	r3, [r3, #4]
 8013de8:	441a      	add	r2, r3
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8013dee:	68fb      	ldr	r3, [r7, #12]
 8013df0:	681b      	ldr	r3, [r3, #0]
 8013df2:	681a      	ldr	r2, [r3, #0]
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	601a      	str	r2, [r3, #0]
 8013df8:	e008      	b.n	8013e0c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013dfa:	4b0c      	ldr	r3, [pc, #48]	; (8013e2c <prvInsertBlockIntoFreeList+0xb0>)
 8013dfc:	681a      	ldr	r2, [r3, #0]
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	601a      	str	r2, [r3, #0]
 8013e02:	e003      	b.n	8013e0c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013e04:	68fb      	ldr	r3, [r7, #12]
 8013e06:	681a      	ldr	r2, [r3, #0]
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013e0c:	68fa      	ldr	r2, [r7, #12]
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	429a      	cmp	r2, r3
 8013e12:	d002      	beq.n	8013e1a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013e14:	68fb      	ldr	r3, [r7, #12]
 8013e16:	687a      	ldr	r2, [r7, #4]
 8013e18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013e1a:	bf00      	nop
 8013e1c:	3714      	adds	r7, #20
 8013e1e:	46bd      	mov	sp, r7
 8013e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e24:	4770      	bx	lr
 8013e26:	bf00      	nop
 8013e28:	20019ae8 	.word	0x20019ae8
 8013e2c:	20019af0 	.word	0x20019af0

08013e30 <__errno>:
 8013e30:	4b01      	ldr	r3, [pc, #4]	; (8013e38 <__errno+0x8>)
 8013e32:	6818      	ldr	r0, [r3, #0]
 8013e34:	4770      	bx	lr
 8013e36:	bf00      	nop
 8013e38:	200000a4 	.word	0x200000a4

08013e3c <__libc_init_array>:
 8013e3c:	b570      	push	{r4, r5, r6, lr}
 8013e3e:	4d0d      	ldr	r5, [pc, #52]	; (8013e74 <__libc_init_array+0x38>)
 8013e40:	4c0d      	ldr	r4, [pc, #52]	; (8013e78 <__libc_init_array+0x3c>)
 8013e42:	1b64      	subs	r4, r4, r5
 8013e44:	10a4      	asrs	r4, r4, #2
 8013e46:	2600      	movs	r6, #0
 8013e48:	42a6      	cmp	r6, r4
 8013e4a:	d109      	bne.n	8013e60 <__libc_init_array+0x24>
 8013e4c:	4d0b      	ldr	r5, [pc, #44]	; (8013e7c <__libc_init_array+0x40>)
 8013e4e:	4c0c      	ldr	r4, [pc, #48]	; (8013e80 <__libc_init_array+0x44>)
 8013e50:	f005 fd2c 	bl	80198ac <_init>
 8013e54:	1b64      	subs	r4, r4, r5
 8013e56:	10a4      	asrs	r4, r4, #2
 8013e58:	2600      	movs	r6, #0
 8013e5a:	42a6      	cmp	r6, r4
 8013e5c:	d105      	bne.n	8013e6a <__libc_init_array+0x2e>
 8013e5e:	bd70      	pop	{r4, r5, r6, pc}
 8013e60:	f855 3b04 	ldr.w	r3, [r5], #4
 8013e64:	4798      	blx	r3
 8013e66:	3601      	adds	r6, #1
 8013e68:	e7ee      	b.n	8013e48 <__libc_init_array+0xc>
 8013e6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8013e6e:	4798      	blx	r3
 8013e70:	3601      	adds	r6, #1
 8013e72:	e7f2      	b.n	8013e5a <__libc_init_array+0x1e>
 8013e74:	0801a808 	.word	0x0801a808
 8013e78:	0801a808 	.word	0x0801a808
 8013e7c:	0801a808 	.word	0x0801a808
 8013e80:	0801a80c 	.word	0x0801a80c

08013e84 <memcpy>:
 8013e84:	440a      	add	r2, r1
 8013e86:	4291      	cmp	r1, r2
 8013e88:	f100 33ff 	add.w	r3, r0, #4294967295
 8013e8c:	d100      	bne.n	8013e90 <memcpy+0xc>
 8013e8e:	4770      	bx	lr
 8013e90:	b510      	push	{r4, lr}
 8013e92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013e96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013e9a:	4291      	cmp	r1, r2
 8013e9c:	d1f9      	bne.n	8013e92 <memcpy+0xe>
 8013e9e:	bd10      	pop	{r4, pc}

08013ea0 <memset>:
 8013ea0:	4402      	add	r2, r0
 8013ea2:	4603      	mov	r3, r0
 8013ea4:	4293      	cmp	r3, r2
 8013ea6:	d100      	bne.n	8013eaa <memset+0xa>
 8013ea8:	4770      	bx	lr
 8013eaa:	f803 1b01 	strb.w	r1, [r3], #1
 8013eae:	e7f9      	b.n	8013ea4 <memset+0x4>

08013eb0 <__cvt>:
 8013eb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013eb4:	ec55 4b10 	vmov	r4, r5, d0
 8013eb8:	2d00      	cmp	r5, #0
 8013eba:	460e      	mov	r6, r1
 8013ebc:	4619      	mov	r1, r3
 8013ebe:	462b      	mov	r3, r5
 8013ec0:	bfbb      	ittet	lt
 8013ec2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8013ec6:	461d      	movlt	r5, r3
 8013ec8:	2300      	movge	r3, #0
 8013eca:	232d      	movlt	r3, #45	; 0x2d
 8013ecc:	700b      	strb	r3, [r1, #0]
 8013ece:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013ed0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8013ed4:	4691      	mov	r9, r2
 8013ed6:	f023 0820 	bic.w	r8, r3, #32
 8013eda:	bfbc      	itt	lt
 8013edc:	4622      	movlt	r2, r4
 8013ede:	4614      	movlt	r4, r2
 8013ee0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013ee4:	d005      	beq.n	8013ef2 <__cvt+0x42>
 8013ee6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8013eea:	d100      	bne.n	8013eee <__cvt+0x3e>
 8013eec:	3601      	adds	r6, #1
 8013eee:	2102      	movs	r1, #2
 8013ef0:	e000      	b.n	8013ef4 <__cvt+0x44>
 8013ef2:	2103      	movs	r1, #3
 8013ef4:	ab03      	add	r3, sp, #12
 8013ef6:	9301      	str	r3, [sp, #4]
 8013ef8:	ab02      	add	r3, sp, #8
 8013efa:	9300      	str	r3, [sp, #0]
 8013efc:	ec45 4b10 	vmov	d0, r4, r5
 8013f00:	4653      	mov	r3, sl
 8013f02:	4632      	mov	r2, r6
 8013f04:	f001 fdac 	bl	8015a60 <_dtoa_r>
 8013f08:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8013f0c:	4607      	mov	r7, r0
 8013f0e:	d102      	bne.n	8013f16 <__cvt+0x66>
 8013f10:	f019 0f01 	tst.w	r9, #1
 8013f14:	d022      	beq.n	8013f5c <__cvt+0xac>
 8013f16:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013f1a:	eb07 0906 	add.w	r9, r7, r6
 8013f1e:	d110      	bne.n	8013f42 <__cvt+0x92>
 8013f20:	783b      	ldrb	r3, [r7, #0]
 8013f22:	2b30      	cmp	r3, #48	; 0x30
 8013f24:	d10a      	bne.n	8013f3c <__cvt+0x8c>
 8013f26:	2200      	movs	r2, #0
 8013f28:	2300      	movs	r3, #0
 8013f2a:	4620      	mov	r0, r4
 8013f2c:	4629      	mov	r1, r5
 8013f2e:	f7ec fde3 	bl	8000af8 <__aeabi_dcmpeq>
 8013f32:	b918      	cbnz	r0, 8013f3c <__cvt+0x8c>
 8013f34:	f1c6 0601 	rsb	r6, r6, #1
 8013f38:	f8ca 6000 	str.w	r6, [sl]
 8013f3c:	f8da 3000 	ldr.w	r3, [sl]
 8013f40:	4499      	add	r9, r3
 8013f42:	2200      	movs	r2, #0
 8013f44:	2300      	movs	r3, #0
 8013f46:	4620      	mov	r0, r4
 8013f48:	4629      	mov	r1, r5
 8013f4a:	f7ec fdd5 	bl	8000af8 <__aeabi_dcmpeq>
 8013f4e:	b108      	cbz	r0, 8013f54 <__cvt+0xa4>
 8013f50:	f8cd 900c 	str.w	r9, [sp, #12]
 8013f54:	2230      	movs	r2, #48	; 0x30
 8013f56:	9b03      	ldr	r3, [sp, #12]
 8013f58:	454b      	cmp	r3, r9
 8013f5a:	d307      	bcc.n	8013f6c <__cvt+0xbc>
 8013f5c:	9b03      	ldr	r3, [sp, #12]
 8013f5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013f60:	1bdb      	subs	r3, r3, r7
 8013f62:	4638      	mov	r0, r7
 8013f64:	6013      	str	r3, [r2, #0]
 8013f66:	b004      	add	sp, #16
 8013f68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f6c:	1c59      	adds	r1, r3, #1
 8013f6e:	9103      	str	r1, [sp, #12]
 8013f70:	701a      	strb	r2, [r3, #0]
 8013f72:	e7f0      	b.n	8013f56 <__cvt+0xa6>

08013f74 <__exponent>:
 8013f74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013f76:	4603      	mov	r3, r0
 8013f78:	2900      	cmp	r1, #0
 8013f7a:	bfb8      	it	lt
 8013f7c:	4249      	neglt	r1, r1
 8013f7e:	f803 2b02 	strb.w	r2, [r3], #2
 8013f82:	bfb4      	ite	lt
 8013f84:	222d      	movlt	r2, #45	; 0x2d
 8013f86:	222b      	movge	r2, #43	; 0x2b
 8013f88:	2909      	cmp	r1, #9
 8013f8a:	7042      	strb	r2, [r0, #1]
 8013f8c:	dd2a      	ble.n	8013fe4 <__exponent+0x70>
 8013f8e:	f10d 0407 	add.w	r4, sp, #7
 8013f92:	46a4      	mov	ip, r4
 8013f94:	270a      	movs	r7, #10
 8013f96:	46a6      	mov	lr, r4
 8013f98:	460a      	mov	r2, r1
 8013f9a:	fb91 f6f7 	sdiv	r6, r1, r7
 8013f9e:	fb07 1516 	mls	r5, r7, r6, r1
 8013fa2:	3530      	adds	r5, #48	; 0x30
 8013fa4:	2a63      	cmp	r2, #99	; 0x63
 8013fa6:	f104 34ff 	add.w	r4, r4, #4294967295
 8013faa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8013fae:	4631      	mov	r1, r6
 8013fb0:	dcf1      	bgt.n	8013f96 <__exponent+0x22>
 8013fb2:	3130      	adds	r1, #48	; 0x30
 8013fb4:	f1ae 0502 	sub.w	r5, lr, #2
 8013fb8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8013fbc:	1c44      	adds	r4, r0, #1
 8013fbe:	4629      	mov	r1, r5
 8013fc0:	4561      	cmp	r1, ip
 8013fc2:	d30a      	bcc.n	8013fda <__exponent+0x66>
 8013fc4:	f10d 0209 	add.w	r2, sp, #9
 8013fc8:	eba2 020e 	sub.w	r2, r2, lr
 8013fcc:	4565      	cmp	r5, ip
 8013fce:	bf88      	it	hi
 8013fd0:	2200      	movhi	r2, #0
 8013fd2:	4413      	add	r3, r2
 8013fd4:	1a18      	subs	r0, r3, r0
 8013fd6:	b003      	add	sp, #12
 8013fd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013fda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013fde:	f804 2f01 	strb.w	r2, [r4, #1]!
 8013fe2:	e7ed      	b.n	8013fc0 <__exponent+0x4c>
 8013fe4:	2330      	movs	r3, #48	; 0x30
 8013fe6:	3130      	adds	r1, #48	; 0x30
 8013fe8:	7083      	strb	r3, [r0, #2]
 8013fea:	70c1      	strb	r1, [r0, #3]
 8013fec:	1d03      	adds	r3, r0, #4
 8013fee:	e7f1      	b.n	8013fd4 <__exponent+0x60>

08013ff0 <_printf_float>:
 8013ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ff4:	ed2d 8b02 	vpush	{d8}
 8013ff8:	b08d      	sub	sp, #52	; 0x34
 8013ffa:	460c      	mov	r4, r1
 8013ffc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8014000:	4616      	mov	r6, r2
 8014002:	461f      	mov	r7, r3
 8014004:	4605      	mov	r5, r0
 8014006:	f002 fe89 	bl	8016d1c <_localeconv_r>
 801400a:	f8d0 a000 	ldr.w	sl, [r0]
 801400e:	4650      	mov	r0, sl
 8014010:	f7ec f8f6 	bl	8000200 <strlen>
 8014014:	2300      	movs	r3, #0
 8014016:	930a      	str	r3, [sp, #40]	; 0x28
 8014018:	6823      	ldr	r3, [r4, #0]
 801401a:	9305      	str	r3, [sp, #20]
 801401c:	f8d8 3000 	ldr.w	r3, [r8]
 8014020:	f894 b018 	ldrb.w	fp, [r4, #24]
 8014024:	3307      	adds	r3, #7
 8014026:	f023 0307 	bic.w	r3, r3, #7
 801402a:	f103 0208 	add.w	r2, r3, #8
 801402e:	f8c8 2000 	str.w	r2, [r8]
 8014032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014036:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801403a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801403e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014042:	9307      	str	r3, [sp, #28]
 8014044:	f8cd 8018 	str.w	r8, [sp, #24]
 8014048:	ee08 0a10 	vmov	s16, r0
 801404c:	4b9f      	ldr	r3, [pc, #636]	; (80142cc <_printf_float+0x2dc>)
 801404e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014052:	f04f 32ff 	mov.w	r2, #4294967295
 8014056:	f7ec fd81 	bl	8000b5c <__aeabi_dcmpun>
 801405a:	bb88      	cbnz	r0, 80140c0 <_printf_float+0xd0>
 801405c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014060:	4b9a      	ldr	r3, [pc, #616]	; (80142cc <_printf_float+0x2dc>)
 8014062:	f04f 32ff 	mov.w	r2, #4294967295
 8014066:	f7ec fd5b 	bl	8000b20 <__aeabi_dcmple>
 801406a:	bb48      	cbnz	r0, 80140c0 <_printf_float+0xd0>
 801406c:	2200      	movs	r2, #0
 801406e:	2300      	movs	r3, #0
 8014070:	4640      	mov	r0, r8
 8014072:	4649      	mov	r1, r9
 8014074:	f7ec fd4a 	bl	8000b0c <__aeabi_dcmplt>
 8014078:	b110      	cbz	r0, 8014080 <_printf_float+0x90>
 801407a:	232d      	movs	r3, #45	; 0x2d
 801407c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014080:	4b93      	ldr	r3, [pc, #588]	; (80142d0 <_printf_float+0x2e0>)
 8014082:	4894      	ldr	r0, [pc, #592]	; (80142d4 <_printf_float+0x2e4>)
 8014084:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8014088:	bf94      	ite	ls
 801408a:	4698      	movls	r8, r3
 801408c:	4680      	movhi	r8, r0
 801408e:	2303      	movs	r3, #3
 8014090:	6123      	str	r3, [r4, #16]
 8014092:	9b05      	ldr	r3, [sp, #20]
 8014094:	f023 0204 	bic.w	r2, r3, #4
 8014098:	6022      	str	r2, [r4, #0]
 801409a:	f04f 0900 	mov.w	r9, #0
 801409e:	9700      	str	r7, [sp, #0]
 80140a0:	4633      	mov	r3, r6
 80140a2:	aa0b      	add	r2, sp, #44	; 0x2c
 80140a4:	4621      	mov	r1, r4
 80140a6:	4628      	mov	r0, r5
 80140a8:	f000 f9d8 	bl	801445c <_printf_common>
 80140ac:	3001      	adds	r0, #1
 80140ae:	f040 8090 	bne.w	80141d2 <_printf_float+0x1e2>
 80140b2:	f04f 30ff 	mov.w	r0, #4294967295
 80140b6:	b00d      	add	sp, #52	; 0x34
 80140b8:	ecbd 8b02 	vpop	{d8}
 80140bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140c0:	4642      	mov	r2, r8
 80140c2:	464b      	mov	r3, r9
 80140c4:	4640      	mov	r0, r8
 80140c6:	4649      	mov	r1, r9
 80140c8:	f7ec fd48 	bl	8000b5c <__aeabi_dcmpun>
 80140cc:	b140      	cbz	r0, 80140e0 <_printf_float+0xf0>
 80140ce:	464b      	mov	r3, r9
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	bfbc      	itt	lt
 80140d4:	232d      	movlt	r3, #45	; 0x2d
 80140d6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80140da:	487f      	ldr	r0, [pc, #508]	; (80142d8 <_printf_float+0x2e8>)
 80140dc:	4b7f      	ldr	r3, [pc, #508]	; (80142dc <_printf_float+0x2ec>)
 80140de:	e7d1      	b.n	8014084 <_printf_float+0x94>
 80140e0:	6863      	ldr	r3, [r4, #4]
 80140e2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80140e6:	9206      	str	r2, [sp, #24]
 80140e8:	1c5a      	adds	r2, r3, #1
 80140ea:	d13f      	bne.n	801416c <_printf_float+0x17c>
 80140ec:	2306      	movs	r3, #6
 80140ee:	6063      	str	r3, [r4, #4]
 80140f0:	9b05      	ldr	r3, [sp, #20]
 80140f2:	6861      	ldr	r1, [r4, #4]
 80140f4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80140f8:	2300      	movs	r3, #0
 80140fa:	9303      	str	r3, [sp, #12]
 80140fc:	ab0a      	add	r3, sp, #40	; 0x28
 80140fe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8014102:	ab09      	add	r3, sp, #36	; 0x24
 8014104:	ec49 8b10 	vmov	d0, r8, r9
 8014108:	9300      	str	r3, [sp, #0]
 801410a:	6022      	str	r2, [r4, #0]
 801410c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014110:	4628      	mov	r0, r5
 8014112:	f7ff fecd 	bl	8013eb0 <__cvt>
 8014116:	9b06      	ldr	r3, [sp, #24]
 8014118:	9909      	ldr	r1, [sp, #36]	; 0x24
 801411a:	2b47      	cmp	r3, #71	; 0x47
 801411c:	4680      	mov	r8, r0
 801411e:	d108      	bne.n	8014132 <_printf_float+0x142>
 8014120:	1cc8      	adds	r0, r1, #3
 8014122:	db02      	blt.n	801412a <_printf_float+0x13a>
 8014124:	6863      	ldr	r3, [r4, #4]
 8014126:	4299      	cmp	r1, r3
 8014128:	dd41      	ble.n	80141ae <_printf_float+0x1be>
 801412a:	f1ab 0b02 	sub.w	fp, fp, #2
 801412e:	fa5f fb8b 	uxtb.w	fp, fp
 8014132:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8014136:	d820      	bhi.n	801417a <_printf_float+0x18a>
 8014138:	3901      	subs	r1, #1
 801413a:	465a      	mov	r2, fp
 801413c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8014140:	9109      	str	r1, [sp, #36]	; 0x24
 8014142:	f7ff ff17 	bl	8013f74 <__exponent>
 8014146:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014148:	1813      	adds	r3, r2, r0
 801414a:	2a01      	cmp	r2, #1
 801414c:	4681      	mov	r9, r0
 801414e:	6123      	str	r3, [r4, #16]
 8014150:	dc02      	bgt.n	8014158 <_printf_float+0x168>
 8014152:	6822      	ldr	r2, [r4, #0]
 8014154:	07d2      	lsls	r2, r2, #31
 8014156:	d501      	bpl.n	801415c <_printf_float+0x16c>
 8014158:	3301      	adds	r3, #1
 801415a:	6123      	str	r3, [r4, #16]
 801415c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8014160:	2b00      	cmp	r3, #0
 8014162:	d09c      	beq.n	801409e <_printf_float+0xae>
 8014164:	232d      	movs	r3, #45	; 0x2d
 8014166:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801416a:	e798      	b.n	801409e <_printf_float+0xae>
 801416c:	9a06      	ldr	r2, [sp, #24]
 801416e:	2a47      	cmp	r2, #71	; 0x47
 8014170:	d1be      	bne.n	80140f0 <_printf_float+0x100>
 8014172:	2b00      	cmp	r3, #0
 8014174:	d1bc      	bne.n	80140f0 <_printf_float+0x100>
 8014176:	2301      	movs	r3, #1
 8014178:	e7b9      	b.n	80140ee <_printf_float+0xfe>
 801417a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801417e:	d118      	bne.n	80141b2 <_printf_float+0x1c2>
 8014180:	2900      	cmp	r1, #0
 8014182:	6863      	ldr	r3, [r4, #4]
 8014184:	dd0b      	ble.n	801419e <_printf_float+0x1ae>
 8014186:	6121      	str	r1, [r4, #16]
 8014188:	b913      	cbnz	r3, 8014190 <_printf_float+0x1a0>
 801418a:	6822      	ldr	r2, [r4, #0]
 801418c:	07d0      	lsls	r0, r2, #31
 801418e:	d502      	bpl.n	8014196 <_printf_float+0x1a6>
 8014190:	3301      	adds	r3, #1
 8014192:	440b      	add	r3, r1
 8014194:	6123      	str	r3, [r4, #16]
 8014196:	65a1      	str	r1, [r4, #88]	; 0x58
 8014198:	f04f 0900 	mov.w	r9, #0
 801419c:	e7de      	b.n	801415c <_printf_float+0x16c>
 801419e:	b913      	cbnz	r3, 80141a6 <_printf_float+0x1b6>
 80141a0:	6822      	ldr	r2, [r4, #0]
 80141a2:	07d2      	lsls	r2, r2, #31
 80141a4:	d501      	bpl.n	80141aa <_printf_float+0x1ba>
 80141a6:	3302      	adds	r3, #2
 80141a8:	e7f4      	b.n	8014194 <_printf_float+0x1a4>
 80141aa:	2301      	movs	r3, #1
 80141ac:	e7f2      	b.n	8014194 <_printf_float+0x1a4>
 80141ae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80141b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80141b4:	4299      	cmp	r1, r3
 80141b6:	db05      	blt.n	80141c4 <_printf_float+0x1d4>
 80141b8:	6823      	ldr	r3, [r4, #0]
 80141ba:	6121      	str	r1, [r4, #16]
 80141bc:	07d8      	lsls	r0, r3, #31
 80141be:	d5ea      	bpl.n	8014196 <_printf_float+0x1a6>
 80141c0:	1c4b      	adds	r3, r1, #1
 80141c2:	e7e7      	b.n	8014194 <_printf_float+0x1a4>
 80141c4:	2900      	cmp	r1, #0
 80141c6:	bfd4      	ite	le
 80141c8:	f1c1 0202 	rsble	r2, r1, #2
 80141cc:	2201      	movgt	r2, #1
 80141ce:	4413      	add	r3, r2
 80141d0:	e7e0      	b.n	8014194 <_printf_float+0x1a4>
 80141d2:	6823      	ldr	r3, [r4, #0]
 80141d4:	055a      	lsls	r2, r3, #21
 80141d6:	d407      	bmi.n	80141e8 <_printf_float+0x1f8>
 80141d8:	6923      	ldr	r3, [r4, #16]
 80141da:	4642      	mov	r2, r8
 80141dc:	4631      	mov	r1, r6
 80141de:	4628      	mov	r0, r5
 80141e0:	47b8      	blx	r7
 80141e2:	3001      	adds	r0, #1
 80141e4:	d12c      	bne.n	8014240 <_printf_float+0x250>
 80141e6:	e764      	b.n	80140b2 <_printf_float+0xc2>
 80141e8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80141ec:	f240 80e0 	bls.w	80143b0 <_printf_float+0x3c0>
 80141f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80141f4:	2200      	movs	r2, #0
 80141f6:	2300      	movs	r3, #0
 80141f8:	f7ec fc7e 	bl	8000af8 <__aeabi_dcmpeq>
 80141fc:	2800      	cmp	r0, #0
 80141fe:	d034      	beq.n	801426a <_printf_float+0x27a>
 8014200:	4a37      	ldr	r2, [pc, #220]	; (80142e0 <_printf_float+0x2f0>)
 8014202:	2301      	movs	r3, #1
 8014204:	4631      	mov	r1, r6
 8014206:	4628      	mov	r0, r5
 8014208:	47b8      	blx	r7
 801420a:	3001      	adds	r0, #1
 801420c:	f43f af51 	beq.w	80140b2 <_printf_float+0xc2>
 8014210:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014214:	429a      	cmp	r2, r3
 8014216:	db02      	blt.n	801421e <_printf_float+0x22e>
 8014218:	6823      	ldr	r3, [r4, #0]
 801421a:	07d8      	lsls	r0, r3, #31
 801421c:	d510      	bpl.n	8014240 <_printf_float+0x250>
 801421e:	ee18 3a10 	vmov	r3, s16
 8014222:	4652      	mov	r2, sl
 8014224:	4631      	mov	r1, r6
 8014226:	4628      	mov	r0, r5
 8014228:	47b8      	blx	r7
 801422a:	3001      	adds	r0, #1
 801422c:	f43f af41 	beq.w	80140b2 <_printf_float+0xc2>
 8014230:	f04f 0800 	mov.w	r8, #0
 8014234:	f104 091a 	add.w	r9, r4, #26
 8014238:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801423a:	3b01      	subs	r3, #1
 801423c:	4543      	cmp	r3, r8
 801423e:	dc09      	bgt.n	8014254 <_printf_float+0x264>
 8014240:	6823      	ldr	r3, [r4, #0]
 8014242:	079b      	lsls	r3, r3, #30
 8014244:	f100 8105 	bmi.w	8014452 <_printf_float+0x462>
 8014248:	68e0      	ldr	r0, [r4, #12]
 801424a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801424c:	4298      	cmp	r0, r3
 801424e:	bfb8      	it	lt
 8014250:	4618      	movlt	r0, r3
 8014252:	e730      	b.n	80140b6 <_printf_float+0xc6>
 8014254:	2301      	movs	r3, #1
 8014256:	464a      	mov	r2, r9
 8014258:	4631      	mov	r1, r6
 801425a:	4628      	mov	r0, r5
 801425c:	47b8      	blx	r7
 801425e:	3001      	adds	r0, #1
 8014260:	f43f af27 	beq.w	80140b2 <_printf_float+0xc2>
 8014264:	f108 0801 	add.w	r8, r8, #1
 8014268:	e7e6      	b.n	8014238 <_printf_float+0x248>
 801426a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801426c:	2b00      	cmp	r3, #0
 801426e:	dc39      	bgt.n	80142e4 <_printf_float+0x2f4>
 8014270:	4a1b      	ldr	r2, [pc, #108]	; (80142e0 <_printf_float+0x2f0>)
 8014272:	2301      	movs	r3, #1
 8014274:	4631      	mov	r1, r6
 8014276:	4628      	mov	r0, r5
 8014278:	47b8      	blx	r7
 801427a:	3001      	adds	r0, #1
 801427c:	f43f af19 	beq.w	80140b2 <_printf_float+0xc2>
 8014280:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014284:	4313      	orrs	r3, r2
 8014286:	d102      	bne.n	801428e <_printf_float+0x29e>
 8014288:	6823      	ldr	r3, [r4, #0]
 801428a:	07d9      	lsls	r1, r3, #31
 801428c:	d5d8      	bpl.n	8014240 <_printf_float+0x250>
 801428e:	ee18 3a10 	vmov	r3, s16
 8014292:	4652      	mov	r2, sl
 8014294:	4631      	mov	r1, r6
 8014296:	4628      	mov	r0, r5
 8014298:	47b8      	blx	r7
 801429a:	3001      	adds	r0, #1
 801429c:	f43f af09 	beq.w	80140b2 <_printf_float+0xc2>
 80142a0:	f04f 0900 	mov.w	r9, #0
 80142a4:	f104 0a1a 	add.w	sl, r4, #26
 80142a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80142aa:	425b      	negs	r3, r3
 80142ac:	454b      	cmp	r3, r9
 80142ae:	dc01      	bgt.n	80142b4 <_printf_float+0x2c4>
 80142b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80142b2:	e792      	b.n	80141da <_printf_float+0x1ea>
 80142b4:	2301      	movs	r3, #1
 80142b6:	4652      	mov	r2, sl
 80142b8:	4631      	mov	r1, r6
 80142ba:	4628      	mov	r0, r5
 80142bc:	47b8      	blx	r7
 80142be:	3001      	adds	r0, #1
 80142c0:	f43f aef7 	beq.w	80140b2 <_printf_float+0xc2>
 80142c4:	f109 0901 	add.w	r9, r9, #1
 80142c8:	e7ee      	b.n	80142a8 <_printf_float+0x2b8>
 80142ca:	bf00      	nop
 80142cc:	7fefffff 	.word	0x7fefffff
 80142d0:	0801a184 	.word	0x0801a184
 80142d4:	0801a188 	.word	0x0801a188
 80142d8:	0801a190 	.word	0x0801a190
 80142dc:	0801a18c 	.word	0x0801a18c
 80142e0:	0801a194 	.word	0x0801a194
 80142e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80142e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80142e8:	429a      	cmp	r2, r3
 80142ea:	bfa8      	it	ge
 80142ec:	461a      	movge	r2, r3
 80142ee:	2a00      	cmp	r2, #0
 80142f0:	4691      	mov	r9, r2
 80142f2:	dc37      	bgt.n	8014364 <_printf_float+0x374>
 80142f4:	f04f 0b00 	mov.w	fp, #0
 80142f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80142fc:	f104 021a 	add.w	r2, r4, #26
 8014300:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014302:	9305      	str	r3, [sp, #20]
 8014304:	eba3 0309 	sub.w	r3, r3, r9
 8014308:	455b      	cmp	r3, fp
 801430a:	dc33      	bgt.n	8014374 <_printf_float+0x384>
 801430c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014310:	429a      	cmp	r2, r3
 8014312:	db3b      	blt.n	801438c <_printf_float+0x39c>
 8014314:	6823      	ldr	r3, [r4, #0]
 8014316:	07da      	lsls	r2, r3, #31
 8014318:	d438      	bmi.n	801438c <_printf_float+0x39c>
 801431a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801431c:	9a05      	ldr	r2, [sp, #20]
 801431e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014320:	1a9a      	subs	r2, r3, r2
 8014322:	eba3 0901 	sub.w	r9, r3, r1
 8014326:	4591      	cmp	r9, r2
 8014328:	bfa8      	it	ge
 801432a:	4691      	movge	r9, r2
 801432c:	f1b9 0f00 	cmp.w	r9, #0
 8014330:	dc35      	bgt.n	801439e <_printf_float+0x3ae>
 8014332:	f04f 0800 	mov.w	r8, #0
 8014336:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801433a:	f104 0a1a 	add.w	sl, r4, #26
 801433e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014342:	1a9b      	subs	r3, r3, r2
 8014344:	eba3 0309 	sub.w	r3, r3, r9
 8014348:	4543      	cmp	r3, r8
 801434a:	f77f af79 	ble.w	8014240 <_printf_float+0x250>
 801434e:	2301      	movs	r3, #1
 8014350:	4652      	mov	r2, sl
 8014352:	4631      	mov	r1, r6
 8014354:	4628      	mov	r0, r5
 8014356:	47b8      	blx	r7
 8014358:	3001      	adds	r0, #1
 801435a:	f43f aeaa 	beq.w	80140b2 <_printf_float+0xc2>
 801435e:	f108 0801 	add.w	r8, r8, #1
 8014362:	e7ec      	b.n	801433e <_printf_float+0x34e>
 8014364:	4613      	mov	r3, r2
 8014366:	4631      	mov	r1, r6
 8014368:	4642      	mov	r2, r8
 801436a:	4628      	mov	r0, r5
 801436c:	47b8      	blx	r7
 801436e:	3001      	adds	r0, #1
 8014370:	d1c0      	bne.n	80142f4 <_printf_float+0x304>
 8014372:	e69e      	b.n	80140b2 <_printf_float+0xc2>
 8014374:	2301      	movs	r3, #1
 8014376:	4631      	mov	r1, r6
 8014378:	4628      	mov	r0, r5
 801437a:	9205      	str	r2, [sp, #20]
 801437c:	47b8      	blx	r7
 801437e:	3001      	adds	r0, #1
 8014380:	f43f ae97 	beq.w	80140b2 <_printf_float+0xc2>
 8014384:	9a05      	ldr	r2, [sp, #20]
 8014386:	f10b 0b01 	add.w	fp, fp, #1
 801438a:	e7b9      	b.n	8014300 <_printf_float+0x310>
 801438c:	ee18 3a10 	vmov	r3, s16
 8014390:	4652      	mov	r2, sl
 8014392:	4631      	mov	r1, r6
 8014394:	4628      	mov	r0, r5
 8014396:	47b8      	blx	r7
 8014398:	3001      	adds	r0, #1
 801439a:	d1be      	bne.n	801431a <_printf_float+0x32a>
 801439c:	e689      	b.n	80140b2 <_printf_float+0xc2>
 801439e:	9a05      	ldr	r2, [sp, #20]
 80143a0:	464b      	mov	r3, r9
 80143a2:	4442      	add	r2, r8
 80143a4:	4631      	mov	r1, r6
 80143a6:	4628      	mov	r0, r5
 80143a8:	47b8      	blx	r7
 80143aa:	3001      	adds	r0, #1
 80143ac:	d1c1      	bne.n	8014332 <_printf_float+0x342>
 80143ae:	e680      	b.n	80140b2 <_printf_float+0xc2>
 80143b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80143b2:	2a01      	cmp	r2, #1
 80143b4:	dc01      	bgt.n	80143ba <_printf_float+0x3ca>
 80143b6:	07db      	lsls	r3, r3, #31
 80143b8:	d538      	bpl.n	801442c <_printf_float+0x43c>
 80143ba:	2301      	movs	r3, #1
 80143bc:	4642      	mov	r2, r8
 80143be:	4631      	mov	r1, r6
 80143c0:	4628      	mov	r0, r5
 80143c2:	47b8      	blx	r7
 80143c4:	3001      	adds	r0, #1
 80143c6:	f43f ae74 	beq.w	80140b2 <_printf_float+0xc2>
 80143ca:	ee18 3a10 	vmov	r3, s16
 80143ce:	4652      	mov	r2, sl
 80143d0:	4631      	mov	r1, r6
 80143d2:	4628      	mov	r0, r5
 80143d4:	47b8      	blx	r7
 80143d6:	3001      	adds	r0, #1
 80143d8:	f43f ae6b 	beq.w	80140b2 <_printf_float+0xc2>
 80143dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80143e0:	2200      	movs	r2, #0
 80143e2:	2300      	movs	r3, #0
 80143e4:	f7ec fb88 	bl	8000af8 <__aeabi_dcmpeq>
 80143e8:	b9d8      	cbnz	r0, 8014422 <_printf_float+0x432>
 80143ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80143ec:	f108 0201 	add.w	r2, r8, #1
 80143f0:	3b01      	subs	r3, #1
 80143f2:	4631      	mov	r1, r6
 80143f4:	4628      	mov	r0, r5
 80143f6:	47b8      	blx	r7
 80143f8:	3001      	adds	r0, #1
 80143fa:	d10e      	bne.n	801441a <_printf_float+0x42a>
 80143fc:	e659      	b.n	80140b2 <_printf_float+0xc2>
 80143fe:	2301      	movs	r3, #1
 8014400:	4652      	mov	r2, sl
 8014402:	4631      	mov	r1, r6
 8014404:	4628      	mov	r0, r5
 8014406:	47b8      	blx	r7
 8014408:	3001      	adds	r0, #1
 801440a:	f43f ae52 	beq.w	80140b2 <_printf_float+0xc2>
 801440e:	f108 0801 	add.w	r8, r8, #1
 8014412:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014414:	3b01      	subs	r3, #1
 8014416:	4543      	cmp	r3, r8
 8014418:	dcf1      	bgt.n	80143fe <_printf_float+0x40e>
 801441a:	464b      	mov	r3, r9
 801441c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014420:	e6dc      	b.n	80141dc <_printf_float+0x1ec>
 8014422:	f04f 0800 	mov.w	r8, #0
 8014426:	f104 0a1a 	add.w	sl, r4, #26
 801442a:	e7f2      	b.n	8014412 <_printf_float+0x422>
 801442c:	2301      	movs	r3, #1
 801442e:	4642      	mov	r2, r8
 8014430:	e7df      	b.n	80143f2 <_printf_float+0x402>
 8014432:	2301      	movs	r3, #1
 8014434:	464a      	mov	r2, r9
 8014436:	4631      	mov	r1, r6
 8014438:	4628      	mov	r0, r5
 801443a:	47b8      	blx	r7
 801443c:	3001      	adds	r0, #1
 801443e:	f43f ae38 	beq.w	80140b2 <_printf_float+0xc2>
 8014442:	f108 0801 	add.w	r8, r8, #1
 8014446:	68e3      	ldr	r3, [r4, #12]
 8014448:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801444a:	1a5b      	subs	r3, r3, r1
 801444c:	4543      	cmp	r3, r8
 801444e:	dcf0      	bgt.n	8014432 <_printf_float+0x442>
 8014450:	e6fa      	b.n	8014248 <_printf_float+0x258>
 8014452:	f04f 0800 	mov.w	r8, #0
 8014456:	f104 0919 	add.w	r9, r4, #25
 801445a:	e7f4      	b.n	8014446 <_printf_float+0x456>

0801445c <_printf_common>:
 801445c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014460:	4616      	mov	r6, r2
 8014462:	4699      	mov	r9, r3
 8014464:	688a      	ldr	r2, [r1, #8]
 8014466:	690b      	ldr	r3, [r1, #16]
 8014468:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801446c:	4293      	cmp	r3, r2
 801446e:	bfb8      	it	lt
 8014470:	4613      	movlt	r3, r2
 8014472:	6033      	str	r3, [r6, #0]
 8014474:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014478:	4607      	mov	r7, r0
 801447a:	460c      	mov	r4, r1
 801447c:	b10a      	cbz	r2, 8014482 <_printf_common+0x26>
 801447e:	3301      	adds	r3, #1
 8014480:	6033      	str	r3, [r6, #0]
 8014482:	6823      	ldr	r3, [r4, #0]
 8014484:	0699      	lsls	r1, r3, #26
 8014486:	bf42      	ittt	mi
 8014488:	6833      	ldrmi	r3, [r6, #0]
 801448a:	3302      	addmi	r3, #2
 801448c:	6033      	strmi	r3, [r6, #0]
 801448e:	6825      	ldr	r5, [r4, #0]
 8014490:	f015 0506 	ands.w	r5, r5, #6
 8014494:	d106      	bne.n	80144a4 <_printf_common+0x48>
 8014496:	f104 0a19 	add.w	sl, r4, #25
 801449a:	68e3      	ldr	r3, [r4, #12]
 801449c:	6832      	ldr	r2, [r6, #0]
 801449e:	1a9b      	subs	r3, r3, r2
 80144a0:	42ab      	cmp	r3, r5
 80144a2:	dc26      	bgt.n	80144f2 <_printf_common+0x96>
 80144a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80144a8:	1e13      	subs	r3, r2, #0
 80144aa:	6822      	ldr	r2, [r4, #0]
 80144ac:	bf18      	it	ne
 80144ae:	2301      	movne	r3, #1
 80144b0:	0692      	lsls	r2, r2, #26
 80144b2:	d42b      	bmi.n	801450c <_printf_common+0xb0>
 80144b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80144b8:	4649      	mov	r1, r9
 80144ba:	4638      	mov	r0, r7
 80144bc:	47c0      	blx	r8
 80144be:	3001      	adds	r0, #1
 80144c0:	d01e      	beq.n	8014500 <_printf_common+0xa4>
 80144c2:	6823      	ldr	r3, [r4, #0]
 80144c4:	68e5      	ldr	r5, [r4, #12]
 80144c6:	6832      	ldr	r2, [r6, #0]
 80144c8:	f003 0306 	and.w	r3, r3, #6
 80144cc:	2b04      	cmp	r3, #4
 80144ce:	bf08      	it	eq
 80144d0:	1aad      	subeq	r5, r5, r2
 80144d2:	68a3      	ldr	r3, [r4, #8]
 80144d4:	6922      	ldr	r2, [r4, #16]
 80144d6:	bf0c      	ite	eq
 80144d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80144dc:	2500      	movne	r5, #0
 80144de:	4293      	cmp	r3, r2
 80144e0:	bfc4      	itt	gt
 80144e2:	1a9b      	subgt	r3, r3, r2
 80144e4:	18ed      	addgt	r5, r5, r3
 80144e6:	2600      	movs	r6, #0
 80144e8:	341a      	adds	r4, #26
 80144ea:	42b5      	cmp	r5, r6
 80144ec:	d11a      	bne.n	8014524 <_printf_common+0xc8>
 80144ee:	2000      	movs	r0, #0
 80144f0:	e008      	b.n	8014504 <_printf_common+0xa8>
 80144f2:	2301      	movs	r3, #1
 80144f4:	4652      	mov	r2, sl
 80144f6:	4649      	mov	r1, r9
 80144f8:	4638      	mov	r0, r7
 80144fa:	47c0      	blx	r8
 80144fc:	3001      	adds	r0, #1
 80144fe:	d103      	bne.n	8014508 <_printf_common+0xac>
 8014500:	f04f 30ff 	mov.w	r0, #4294967295
 8014504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014508:	3501      	adds	r5, #1
 801450a:	e7c6      	b.n	801449a <_printf_common+0x3e>
 801450c:	18e1      	adds	r1, r4, r3
 801450e:	1c5a      	adds	r2, r3, #1
 8014510:	2030      	movs	r0, #48	; 0x30
 8014512:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014516:	4422      	add	r2, r4
 8014518:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801451c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014520:	3302      	adds	r3, #2
 8014522:	e7c7      	b.n	80144b4 <_printf_common+0x58>
 8014524:	2301      	movs	r3, #1
 8014526:	4622      	mov	r2, r4
 8014528:	4649      	mov	r1, r9
 801452a:	4638      	mov	r0, r7
 801452c:	47c0      	blx	r8
 801452e:	3001      	adds	r0, #1
 8014530:	d0e6      	beq.n	8014500 <_printf_common+0xa4>
 8014532:	3601      	adds	r6, #1
 8014534:	e7d9      	b.n	80144ea <_printf_common+0x8e>
	...

08014538 <_printf_i>:
 8014538:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801453c:	7e0f      	ldrb	r7, [r1, #24]
 801453e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014540:	2f78      	cmp	r7, #120	; 0x78
 8014542:	4691      	mov	r9, r2
 8014544:	4680      	mov	r8, r0
 8014546:	460c      	mov	r4, r1
 8014548:	469a      	mov	sl, r3
 801454a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801454e:	d807      	bhi.n	8014560 <_printf_i+0x28>
 8014550:	2f62      	cmp	r7, #98	; 0x62
 8014552:	d80a      	bhi.n	801456a <_printf_i+0x32>
 8014554:	2f00      	cmp	r7, #0
 8014556:	f000 80d8 	beq.w	801470a <_printf_i+0x1d2>
 801455a:	2f58      	cmp	r7, #88	; 0x58
 801455c:	f000 80a3 	beq.w	80146a6 <_printf_i+0x16e>
 8014560:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014564:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014568:	e03a      	b.n	80145e0 <_printf_i+0xa8>
 801456a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801456e:	2b15      	cmp	r3, #21
 8014570:	d8f6      	bhi.n	8014560 <_printf_i+0x28>
 8014572:	a101      	add	r1, pc, #4	; (adr r1, 8014578 <_printf_i+0x40>)
 8014574:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014578:	080145d1 	.word	0x080145d1
 801457c:	080145e5 	.word	0x080145e5
 8014580:	08014561 	.word	0x08014561
 8014584:	08014561 	.word	0x08014561
 8014588:	08014561 	.word	0x08014561
 801458c:	08014561 	.word	0x08014561
 8014590:	080145e5 	.word	0x080145e5
 8014594:	08014561 	.word	0x08014561
 8014598:	08014561 	.word	0x08014561
 801459c:	08014561 	.word	0x08014561
 80145a0:	08014561 	.word	0x08014561
 80145a4:	080146f1 	.word	0x080146f1
 80145a8:	08014615 	.word	0x08014615
 80145ac:	080146d3 	.word	0x080146d3
 80145b0:	08014561 	.word	0x08014561
 80145b4:	08014561 	.word	0x08014561
 80145b8:	08014713 	.word	0x08014713
 80145bc:	08014561 	.word	0x08014561
 80145c0:	08014615 	.word	0x08014615
 80145c4:	08014561 	.word	0x08014561
 80145c8:	08014561 	.word	0x08014561
 80145cc:	080146db 	.word	0x080146db
 80145d0:	682b      	ldr	r3, [r5, #0]
 80145d2:	1d1a      	adds	r2, r3, #4
 80145d4:	681b      	ldr	r3, [r3, #0]
 80145d6:	602a      	str	r2, [r5, #0]
 80145d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80145dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80145e0:	2301      	movs	r3, #1
 80145e2:	e0a3      	b.n	801472c <_printf_i+0x1f4>
 80145e4:	6820      	ldr	r0, [r4, #0]
 80145e6:	6829      	ldr	r1, [r5, #0]
 80145e8:	0606      	lsls	r6, r0, #24
 80145ea:	f101 0304 	add.w	r3, r1, #4
 80145ee:	d50a      	bpl.n	8014606 <_printf_i+0xce>
 80145f0:	680e      	ldr	r6, [r1, #0]
 80145f2:	602b      	str	r3, [r5, #0]
 80145f4:	2e00      	cmp	r6, #0
 80145f6:	da03      	bge.n	8014600 <_printf_i+0xc8>
 80145f8:	232d      	movs	r3, #45	; 0x2d
 80145fa:	4276      	negs	r6, r6
 80145fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014600:	485e      	ldr	r0, [pc, #376]	; (801477c <_printf_i+0x244>)
 8014602:	230a      	movs	r3, #10
 8014604:	e019      	b.n	801463a <_printf_i+0x102>
 8014606:	680e      	ldr	r6, [r1, #0]
 8014608:	602b      	str	r3, [r5, #0]
 801460a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801460e:	bf18      	it	ne
 8014610:	b236      	sxthne	r6, r6
 8014612:	e7ef      	b.n	80145f4 <_printf_i+0xbc>
 8014614:	682b      	ldr	r3, [r5, #0]
 8014616:	6820      	ldr	r0, [r4, #0]
 8014618:	1d19      	adds	r1, r3, #4
 801461a:	6029      	str	r1, [r5, #0]
 801461c:	0601      	lsls	r1, r0, #24
 801461e:	d501      	bpl.n	8014624 <_printf_i+0xec>
 8014620:	681e      	ldr	r6, [r3, #0]
 8014622:	e002      	b.n	801462a <_printf_i+0xf2>
 8014624:	0646      	lsls	r6, r0, #25
 8014626:	d5fb      	bpl.n	8014620 <_printf_i+0xe8>
 8014628:	881e      	ldrh	r6, [r3, #0]
 801462a:	4854      	ldr	r0, [pc, #336]	; (801477c <_printf_i+0x244>)
 801462c:	2f6f      	cmp	r7, #111	; 0x6f
 801462e:	bf0c      	ite	eq
 8014630:	2308      	moveq	r3, #8
 8014632:	230a      	movne	r3, #10
 8014634:	2100      	movs	r1, #0
 8014636:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801463a:	6865      	ldr	r5, [r4, #4]
 801463c:	60a5      	str	r5, [r4, #8]
 801463e:	2d00      	cmp	r5, #0
 8014640:	bfa2      	ittt	ge
 8014642:	6821      	ldrge	r1, [r4, #0]
 8014644:	f021 0104 	bicge.w	r1, r1, #4
 8014648:	6021      	strge	r1, [r4, #0]
 801464a:	b90e      	cbnz	r6, 8014650 <_printf_i+0x118>
 801464c:	2d00      	cmp	r5, #0
 801464e:	d04d      	beq.n	80146ec <_printf_i+0x1b4>
 8014650:	4615      	mov	r5, r2
 8014652:	fbb6 f1f3 	udiv	r1, r6, r3
 8014656:	fb03 6711 	mls	r7, r3, r1, r6
 801465a:	5dc7      	ldrb	r7, [r0, r7]
 801465c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014660:	4637      	mov	r7, r6
 8014662:	42bb      	cmp	r3, r7
 8014664:	460e      	mov	r6, r1
 8014666:	d9f4      	bls.n	8014652 <_printf_i+0x11a>
 8014668:	2b08      	cmp	r3, #8
 801466a:	d10b      	bne.n	8014684 <_printf_i+0x14c>
 801466c:	6823      	ldr	r3, [r4, #0]
 801466e:	07de      	lsls	r6, r3, #31
 8014670:	d508      	bpl.n	8014684 <_printf_i+0x14c>
 8014672:	6923      	ldr	r3, [r4, #16]
 8014674:	6861      	ldr	r1, [r4, #4]
 8014676:	4299      	cmp	r1, r3
 8014678:	bfde      	ittt	le
 801467a:	2330      	movle	r3, #48	; 0x30
 801467c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014680:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014684:	1b52      	subs	r2, r2, r5
 8014686:	6122      	str	r2, [r4, #16]
 8014688:	f8cd a000 	str.w	sl, [sp]
 801468c:	464b      	mov	r3, r9
 801468e:	aa03      	add	r2, sp, #12
 8014690:	4621      	mov	r1, r4
 8014692:	4640      	mov	r0, r8
 8014694:	f7ff fee2 	bl	801445c <_printf_common>
 8014698:	3001      	adds	r0, #1
 801469a:	d14c      	bne.n	8014736 <_printf_i+0x1fe>
 801469c:	f04f 30ff 	mov.w	r0, #4294967295
 80146a0:	b004      	add	sp, #16
 80146a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80146a6:	4835      	ldr	r0, [pc, #212]	; (801477c <_printf_i+0x244>)
 80146a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80146ac:	6829      	ldr	r1, [r5, #0]
 80146ae:	6823      	ldr	r3, [r4, #0]
 80146b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80146b4:	6029      	str	r1, [r5, #0]
 80146b6:	061d      	lsls	r5, r3, #24
 80146b8:	d514      	bpl.n	80146e4 <_printf_i+0x1ac>
 80146ba:	07df      	lsls	r7, r3, #31
 80146bc:	bf44      	itt	mi
 80146be:	f043 0320 	orrmi.w	r3, r3, #32
 80146c2:	6023      	strmi	r3, [r4, #0]
 80146c4:	b91e      	cbnz	r6, 80146ce <_printf_i+0x196>
 80146c6:	6823      	ldr	r3, [r4, #0]
 80146c8:	f023 0320 	bic.w	r3, r3, #32
 80146cc:	6023      	str	r3, [r4, #0]
 80146ce:	2310      	movs	r3, #16
 80146d0:	e7b0      	b.n	8014634 <_printf_i+0xfc>
 80146d2:	6823      	ldr	r3, [r4, #0]
 80146d4:	f043 0320 	orr.w	r3, r3, #32
 80146d8:	6023      	str	r3, [r4, #0]
 80146da:	2378      	movs	r3, #120	; 0x78
 80146dc:	4828      	ldr	r0, [pc, #160]	; (8014780 <_printf_i+0x248>)
 80146de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80146e2:	e7e3      	b.n	80146ac <_printf_i+0x174>
 80146e4:	0659      	lsls	r1, r3, #25
 80146e6:	bf48      	it	mi
 80146e8:	b2b6      	uxthmi	r6, r6
 80146ea:	e7e6      	b.n	80146ba <_printf_i+0x182>
 80146ec:	4615      	mov	r5, r2
 80146ee:	e7bb      	b.n	8014668 <_printf_i+0x130>
 80146f0:	682b      	ldr	r3, [r5, #0]
 80146f2:	6826      	ldr	r6, [r4, #0]
 80146f4:	6961      	ldr	r1, [r4, #20]
 80146f6:	1d18      	adds	r0, r3, #4
 80146f8:	6028      	str	r0, [r5, #0]
 80146fa:	0635      	lsls	r5, r6, #24
 80146fc:	681b      	ldr	r3, [r3, #0]
 80146fe:	d501      	bpl.n	8014704 <_printf_i+0x1cc>
 8014700:	6019      	str	r1, [r3, #0]
 8014702:	e002      	b.n	801470a <_printf_i+0x1d2>
 8014704:	0670      	lsls	r0, r6, #25
 8014706:	d5fb      	bpl.n	8014700 <_printf_i+0x1c8>
 8014708:	8019      	strh	r1, [r3, #0]
 801470a:	2300      	movs	r3, #0
 801470c:	6123      	str	r3, [r4, #16]
 801470e:	4615      	mov	r5, r2
 8014710:	e7ba      	b.n	8014688 <_printf_i+0x150>
 8014712:	682b      	ldr	r3, [r5, #0]
 8014714:	1d1a      	adds	r2, r3, #4
 8014716:	602a      	str	r2, [r5, #0]
 8014718:	681d      	ldr	r5, [r3, #0]
 801471a:	6862      	ldr	r2, [r4, #4]
 801471c:	2100      	movs	r1, #0
 801471e:	4628      	mov	r0, r5
 8014720:	f7eb fd76 	bl	8000210 <memchr>
 8014724:	b108      	cbz	r0, 801472a <_printf_i+0x1f2>
 8014726:	1b40      	subs	r0, r0, r5
 8014728:	6060      	str	r0, [r4, #4]
 801472a:	6863      	ldr	r3, [r4, #4]
 801472c:	6123      	str	r3, [r4, #16]
 801472e:	2300      	movs	r3, #0
 8014730:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014734:	e7a8      	b.n	8014688 <_printf_i+0x150>
 8014736:	6923      	ldr	r3, [r4, #16]
 8014738:	462a      	mov	r2, r5
 801473a:	4649      	mov	r1, r9
 801473c:	4640      	mov	r0, r8
 801473e:	47d0      	blx	sl
 8014740:	3001      	adds	r0, #1
 8014742:	d0ab      	beq.n	801469c <_printf_i+0x164>
 8014744:	6823      	ldr	r3, [r4, #0]
 8014746:	079b      	lsls	r3, r3, #30
 8014748:	d413      	bmi.n	8014772 <_printf_i+0x23a>
 801474a:	68e0      	ldr	r0, [r4, #12]
 801474c:	9b03      	ldr	r3, [sp, #12]
 801474e:	4298      	cmp	r0, r3
 8014750:	bfb8      	it	lt
 8014752:	4618      	movlt	r0, r3
 8014754:	e7a4      	b.n	80146a0 <_printf_i+0x168>
 8014756:	2301      	movs	r3, #1
 8014758:	4632      	mov	r2, r6
 801475a:	4649      	mov	r1, r9
 801475c:	4640      	mov	r0, r8
 801475e:	47d0      	blx	sl
 8014760:	3001      	adds	r0, #1
 8014762:	d09b      	beq.n	801469c <_printf_i+0x164>
 8014764:	3501      	adds	r5, #1
 8014766:	68e3      	ldr	r3, [r4, #12]
 8014768:	9903      	ldr	r1, [sp, #12]
 801476a:	1a5b      	subs	r3, r3, r1
 801476c:	42ab      	cmp	r3, r5
 801476e:	dcf2      	bgt.n	8014756 <_printf_i+0x21e>
 8014770:	e7eb      	b.n	801474a <_printf_i+0x212>
 8014772:	2500      	movs	r5, #0
 8014774:	f104 0619 	add.w	r6, r4, #25
 8014778:	e7f5      	b.n	8014766 <_printf_i+0x22e>
 801477a:	bf00      	nop
 801477c:	0801a196 	.word	0x0801a196
 8014780:	0801a1a7 	.word	0x0801a1a7

08014784 <_scanf_float>:
 8014784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014788:	b087      	sub	sp, #28
 801478a:	4617      	mov	r7, r2
 801478c:	9303      	str	r3, [sp, #12]
 801478e:	688b      	ldr	r3, [r1, #8]
 8014790:	1e5a      	subs	r2, r3, #1
 8014792:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8014796:	bf83      	ittte	hi
 8014798:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801479c:	195b      	addhi	r3, r3, r5
 801479e:	9302      	strhi	r3, [sp, #8]
 80147a0:	2300      	movls	r3, #0
 80147a2:	bf86      	itte	hi
 80147a4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80147a8:	608b      	strhi	r3, [r1, #8]
 80147aa:	9302      	strls	r3, [sp, #8]
 80147ac:	680b      	ldr	r3, [r1, #0]
 80147ae:	468b      	mov	fp, r1
 80147b0:	2500      	movs	r5, #0
 80147b2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80147b6:	f84b 3b1c 	str.w	r3, [fp], #28
 80147ba:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80147be:	4680      	mov	r8, r0
 80147c0:	460c      	mov	r4, r1
 80147c2:	465e      	mov	r6, fp
 80147c4:	46aa      	mov	sl, r5
 80147c6:	46a9      	mov	r9, r5
 80147c8:	9501      	str	r5, [sp, #4]
 80147ca:	68a2      	ldr	r2, [r4, #8]
 80147cc:	b152      	cbz	r2, 80147e4 <_scanf_float+0x60>
 80147ce:	683b      	ldr	r3, [r7, #0]
 80147d0:	781b      	ldrb	r3, [r3, #0]
 80147d2:	2b4e      	cmp	r3, #78	; 0x4e
 80147d4:	d864      	bhi.n	80148a0 <_scanf_float+0x11c>
 80147d6:	2b40      	cmp	r3, #64	; 0x40
 80147d8:	d83c      	bhi.n	8014854 <_scanf_float+0xd0>
 80147da:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80147de:	b2c8      	uxtb	r0, r1
 80147e0:	280e      	cmp	r0, #14
 80147e2:	d93a      	bls.n	801485a <_scanf_float+0xd6>
 80147e4:	f1b9 0f00 	cmp.w	r9, #0
 80147e8:	d003      	beq.n	80147f2 <_scanf_float+0x6e>
 80147ea:	6823      	ldr	r3, [r4, #0]
 80147ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80147f0:	6023      	str	r3, [r4, #0]
 80147f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80147f6:	f1ba 0f01 	cmp.w	sl, #1
 80147fa:	f200 8113 	bhi.w	8014a24 <_scanf_float+0x2a0>
 80147fe:	455e      	cmp	r6, fp
 8014800:	f200 8105 	bhi.w	8014a0e <_scanf_float+0x28a>
 8014804:	2501      	movs	r5, #1
 8014806:	4628      	mov	r0, r5
 8014808:	b007      	add	sp, #28
 801480a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801480e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8014812:	2a0d      	cmp	r2, #13
 8014814:	d8e6      	bhi.n	80147e4 <_scanf_float+0x60>
 8014816:	a101      	add	r1, pc, #4	; (adr r1, 801481c <_scanf_float+0x98>)
 8014818:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801481c:	0801495b 	.word	0x0801495b
 8014820:	080147e5 	.word	0x080147e5
 8014824:	080147e5 	.word	0x080147e5
 8014828:	080147e5 	.word	0x080147e5
 801482c:	080149bb 	.word	0x080149bb
 8014830:	08014993 	.word	0x08014993
 8014834:	080147e5 	.word	0x080147e5
 8014838:	080147e5 	.word	0x080147e5
 801483c:	08014969 	.word	0x08014969
 8014840:	080147e5 	.word	0x080147e5
 8014844:	080147e5 	.word	0x080147e5
 8014848:	080147e5 	.word	0x080147e5
 801484c:	080147e5 	.word	0x080147e5
 8014850:	08014921 	.word	0x08014921
 8014854:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8014858:	e7db      	b.n	8014812 <_scanf_float+0x8e>
 801485a:	290e      	cmp	r1, #14
 801485c:	d8c2      	bhi.n	80147e4 <_scanf_float+0x60>
 801485e:	a001      	add	r0, pc, #4	; (adr r0, 8014864 <_scanf_float+0xe0>)
 8014860:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8014864:	08014913 	.word	0x08014913
 8014868:	080147e5 	.word	0x080147e5
 801486c:	08014913 	.word	0x08014913
 8014870:	080149a7 	.word	0x080149a7
 8014874:	080147e5 	.word	0x080147e5
 8014878:	080148c1 	.word	0x080148c1
 801487c:	080148fd 	.word	0x080148fd
 8014880:	080148fd 	.word	0x080148fd
 8014884:	080148fd 	.word	0x080148fd
 8014888:	080148fd 	.word	0x080148fd
 801488c:	080148fd 	.word	0x080148fd
 8014890:	080148fd 	.word	0x080148fd
 8014894:	080148fd 	.word	0x080148fd
 8014898:	080148fd 	.word	0x080148fd
 801489c:	080148fd 	.word	0x080148fd
 80148a0:	2b6e      	cmp	r3, #110	; 0x6e
 80148a2:	d809      	bhi.n	80148b8 <_scanf_float+0x134>
 80148a4:	2b60      	cmp	r3, #96	; 0x60
 80148a6:	d8b2      	bhi.n	801480e <_scanf_float+0x8a>
 80148a8:	2b54      	cmp	r3, #84	; 0x54
 80148aa:	d077      	beq.n	801499c <_scanf_float+0x218>
 80148ac:	2b59      	cmp	r3, #89	; 0x59
 80148ae:	d199      	bne.n	80147e4 <_scanf_float+0x60>
 80148b0:	2d07      	cmp	r5, #7
 80148b2:	d197      	bne.n	80147e4 <_scanf_float+0x60>
 80148b4:	2508      	movs	r5, #8
 80148b6:	e029      	b.n	801490c <_scanf_float+0x188>
 80148b8:	2b74      	cmp	r3, #116	; 0x74
 80148ba:	d06f      	beq.n	801499c <_scanf_float+0x218>
 80148bc:	2b79      	cmp	r3, #121	; 0x79
 80148be:	e7f6      	b.n	80148ae <_scanf_float+0x12a>
 80148c0:	6821      	ldr	r1, [r4, #0]
 80148c2:	05c8      	lsls	r0, r1, #23
 80148c4:	d51a      	bpl.n	80148fc <_scanf_float+0x178>
 80148c6:	9b02      	ldr	r3, [sp, #8]
 80148c8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80148cc:	6021      	str	r1, [r4, #0]
 80148ce:	f109 0901 	add.w	r9, r9, #1
 80148d2:	b11b      	cbz	r3, 80148dc <_scanf_float+0x158>
 80148d4:	3b01      	subs	r3, #1
 80148d6:	3201      	adds	r2, #1
 80148d8:	9302      	str	r3, [sp, #8]
 80148da:	60a2      	str	r2, [r4, #8]
 80148dc:	68a3      	ldr	r3, [r4, #8]
 80148de:	3b01      	subs	r3, #1
 80148e0:	60a3      	str	r3, [r4, #8]
 80148e2:	6923      	ldr	r3, [r4, #16]
 80148e4:	3301      	adds	r3, #1
 80148e6:	6123      	str	r3, [r4, #16]
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	3b01      	subs	r3, #1
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	607b      	str	r3, [r7, #4]
 80148f0:	f340 8084 	ble.w	80149fc <_scanf_float+0x278>
 80148f4:	683b      	ldr	r3, [r7, #0]
 80148f6:	3301      	adds	r3, #1
 80148f8:	603b      	str	r3, [r7, #0]
 80148fa:	e766      	b.n	80147ca <_scanf_float+0x46>
 80148fc:	eb1a 0f05 	cmn.w	sl, r5
 8014900:	f47f af70 	bne.w	80147e4 <_scanf_float+0x60>
 8014904:	6822      	ldr	r2, [r4, #0]
 8014906:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801490a:	6022      	str	r2, [r4, #0]
 801490c:	f806 3b01 	strb.w	r3, [r6], #1
 8014910:	e7e4      	b.n	80148dc <_scanf_float+0x158>
 8014912:	6822      	ldr	r2, [r4, #0]
 8014914:	0610      	lsls	r0, r2, #24
 8014916:	f57f af65 	bpl.w	80147e4 <_scanf_float+0x60>
 801491a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801491e:	e7f4      	b.n	801490a <_scanf_float+0x186>
 8014920:	f1ba 0f00 	cmp.w	sl, #0
 8014924:	d10e      	bne.n	8014944 <_scanf_float+0x1c0>
 8014926:	f1b9 0f00 	cmp.w	r9, #0
 801492a:	d10e      	bne.n	801494a <_scanf_float+0x1c6>
 801492c:	6822      	ldr	r2, [r4, #0]
 801492e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8014932:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8014936:	d108      	bne.n	801494a <_scanf_float+0x1c6>
 8014938:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801493c:	6022      	str	r2, [r4, #0]
 801493e:	f04f 0a01 	mov.w	sl, #1
 8014942:	e7e3      	b.n	801490c <_scanf_float+0x188>
 8014944:	f1ba 0f02 	cmp.w	sl, #2
 8014948:	d055      	beq.n	80149f6 <_scanf_float+0x272>
 801494a:	2d01      	cmp	r5, #1
 801494c:	d002      	beq.n	8014954 <_scanf_float+0x1d0>
 801494e:	2d04      	cmp	r5, #4
 8014950:	f47f af48 	bne.w	80147e4 <_scanf_float+0x60>
 8014954:	3501      	adds	r5, #1
 8014956:	b2ed      	uxtb	r5, r5
 8014958:	e7d8      	b.n	801490c <_scanf_float+0x188>
 801495a:	f1ba 0f01 	cmp.w	sl, #1
 801495e:	f47f af41 	bne.w	80147e4 <_scanf_float+0x60>
 8014962:	f04f 0a02 	mov.w	sl, #2
 8014966:	e7d1      	b.n	801490c <_scanf_float+0x188>
 8014968:	b97d      	cbnz	r5, 801498a <_scanf_float+0x206>
 801496a:	f1b9 0f00 	cmp.w	r9, #0
 801496e:	f47f af3c 	bne.w	80147ea <_scanf_float+0x66>
 8014972:	6822      	ldr	r2, [r4, #0]
 8014974:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8014978:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801497c:	f47f af39 	bne.w	80147f2 <_scanf_float+0x6e>
 8014980:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8014984:	6022      	str	r2, [r4, #0]
 8014986:	2501      	movs	r5, #1
 8014988:	e7c0      	b.n	801490c <_scanf_float+0x188>
 801498a:	2d03      	cmp	r5, #3
 801498c:	d0e2      	beq.n	8014954 <_scanf_float+0x1d0>
 801498e:	2d05      	cmp	r5, #5
 8014990:	e7de      	b.n	8014950 <_scanf_float+0x1cc>
 8014992:	2d02      	cmp	r5, #2
 8014994:	f47f af26 	bne.w	80147e4 <_scanf_float+0x60>
 8014998:	2503      	movs	r5, #3
 801499a:	e7b7      	b.n	801490c <_scanf_float+0x188>
 801499c:	2d06      	cmp	r5, #6
 801499e:	f47f af21 	bne.w	80147e4 <_scanf_float+0x60>
 80149a2:	2507      	movs	r5, #7
 80149a4:	e7b2      	b.n	801490c <_scanf_float+0x188>
 80149a6:	6822      	ldr	r2, [r4, #0]
 80149a8:	0591      	lsls	r1, r2, #22
 80149aa:	f57f af1b 	bpl.w	80147e4 <_scanf_float+0x60>
 80149ae:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80149b2:	6022      	str	r2, [r4, #0]
 80149b4:	f8cd 9004 	str.w	r9, [sp, #4]
 80149b8:	e7a8      	b.n	801490c <_scanf_float+0x188>
 80149ba:	6822      	ldr	r2, [r4, #0]
 80149bc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80149c0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80149c4:	d006      	beq.n	80149d4 <_scanf_float+0x250>
 80149c6:	0550      	lsls	r0, r2, #21
 80149c8:	f57f af0c 	bpl.w	80147e4 <_scanf_float+0x60>
 80149cc:	f1b9 0f00 	cmp.w	r9, #0
 80149d0:	f43f af0f 	beq.w	80147f2 <_scanf_float+0x6e>
 80149d4:	0591      	lsls	r1, r2, #22
 80149d6:	bf58      	it	pl
 80149d8:	9901      	ldrpl	r1, [sp, #4]
 80149da:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80149de:	bf58      	it	pl
 80149e0:	eba9 0101 	subpl.w	r1, r9, r1
 80149e4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80149e8:	bf58      	it	pl
 80149ea:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80149ee:	6022      	str	r2, [r4, #0]
 80149f0:	f04f 0900 	mov.w	r9, #0
 80149f4:	e78a      	b.n	801490c <_scanf_float+0x188>
 80149f6:	f04f 0a03 	mov.w	sl, #3
 80149fa:	e787      	b.n	801490c <_scanf_float+0x188>
 80149fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014a00:	4639      	mov	r1, r7
 8014a02:	4640      	mov	r0, r8
 8014a04:	4798      	blx	r3
 8014a06:	2800      	cmp	r0, #0
 8014a08:	f43f aedf 	beq.w	80147ca <_scanf_float+0x46>
 8014a0c:	e6ea      	b.n	80147e4 <_scanf_float+0x60>
 8014a0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014a12:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014a16:	463a      	mov	r2, r7
 8014a18:	4640      	mov	r0, r8
 8014a1a:	4798      	blx	r3
 8014a1c:	6923      	ldr	r3, [r4, #16]
 8014a1e:	3b01      	subs	r3, #1
 8014a20:	6123      	str	r3, [r4, #16]
 8014a22:	e6ec      	b.n	80147fe <_scanf_float+0x7a>
 8014a24:	1e6b      	subs	r3, r5, #1
 8014a26:	2b06      	cmp	r3, #6
 8014a28:	d825      	bhi.n	8014a76 <_scanf_float+0x2f2>
 8014a2a:	2d02      	cmp	r5, #2
 8014a2c:	d836      	bhi.n	8014a9c <_scanf_float+0x318>
 8014a2e:	455e      	cmp	r6, fp
 8014a30:	f67f aee8 	bls.w	8014804 <_scanf_float+0x80>
 8014a34:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014a38:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014a3c:	463a      	mov	r2, r7
 8014a3e:	4640      	mov	r0, r8
 8014a40:	4798      	blx	r3
 8014a42:	6923      	ldr	r3, [r4, #16]
 8014a44:	3b01      	subs	r3, #1
 8014a46:	6123      	str	r3, [r4, #16]
 8014a48:	e7f1      	b.n	8014a2e <_scanf_float+0x2aa>
 8014a4a:	9802      	ldr	r0, [sp, #8]
 8014a4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014a50:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8014a54:	9002      	str	r0, [sp, #8]
 8014a56:	463a      	mov	r2, r7
 8014a58:	4640      	mov	r0, r8
 8014a5a:	4798      	blx	r3
 8014a5c:	6923      	ldr	r3, [r4, #16]
 8014a5e:	3b01      	subs	r3, #1
 8014a60:	6123      	str	r3, [r4, #16]
 8014a62:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014a66:	fa5f fa8a 	uxtb.w	sl, sl
 8014a6a:	f1ba 0f02 	cmp.w	sl, #2
 8014a6e:	d1ec      	bne.n	8014a4a <_scanf_float+0x2c6>
 8014a70:	3d03      	subs	r5, #3
 8014a72:	b2ed      	uxtb	r5, r5
 8014a74:	1b76      	subs	r6, r6, r5
 8014a76:	6823      	ldr	r3, [r4, #0]
 8014a78:	05da      	lsls	r2, r3, #23
 8014a7a:	d52f      	bpl.n	8014adc <_scanf_float+0x358>
 8014a7c:	055b      	lsls	r3, r3, #21
 8014a7e:	d510      	bpl.n	8014aa2 <_scanf_float+0x31e>
 8014a80:	455e      	cmp	r6, fp
 8014a82:	f67f aebf 	bls.w	8014804 <_scanf_float+0x80>
 8014a86:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014a8a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014a8e:	463a      	mov	r2, r7
 8014a90:	4640      	mov	r0, r8
 8014a92:	4798      	blx	r3
 8014a94:	6923      	ldr	r3, [r4, #16]
 8014a96:	3b01      	subs	r3, #1
 8014a98:	6123      	str	r3, [r4, #16]
 8014a9a:	e7f1      	b.n	8014a80 <_scanf_float+0x2fc>
 8014a9c:	46aa      	mov	sl, r5
 8014a9e:	9602      	str	r6, [sp, #8]
 8014aa0:	e7df      	b.n	8014a62 <_scanf_float+0x2de>
 8014aa2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8014aa6:	6923      	ldr	r3, [r4, #16]
 8014aa8:	2965      	cmp	r1, #101	; 0x65
 8014aaa:	f103 33ff 	add.w	r3, r3, #4294967295
 8014aae:	f106 35ff 	add.w	r5, r6, #4294967295
 8014ab2:	6123      	str	r3, [r4, #16]
 8014ab4:	d00c      	beq.n	8014ad0 <_scanf_float+0x34c>
 8014ab6:	2945      	cmp	r1, #69	; 0x45
 8014ab8:	d00a      	beq.n	8014ad0 <_scanf_float+0x34c>
 8014aba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014abe:	463a      	mov	r2, r7
 8014ac0:	4640      	mov	r0, r8
 8014ac2:	4798      	blx	r3
 8014ac4:	6923      	ldr	r3, [r4, #16]
 8014ac6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8014aca:	3b01      	subs	r3, #1
 8014acc:	1eb5      	subs	r5, r6, #2
 8014ace:	6123      	str	r3, [r4, #16]
 8014ad0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014ad4:	463a      	mov	r2, r7
 8014ad6:	4640      	mov	r0, r8
 8014ad8:	4798      	blx	r3
 8014ada:	462e      	mov	r6, r5
 8014adc:	6825      	ldr	r5, [r4, #0]
 8014ade:	f015 0510 	ands.w	r5, r5, #16
 8014ae2:	d159      	bne.n	8014b98 <_scanf_float+0x414>
 8014ae4:	7035      	strb	r5, [r6, #0]
 8014ae6:	6823      	ldr	r3, [r4, #0]
 8014ae8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8014aec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014af0:	d11b      	bne.n	8014b2a <_scanf_float+0x3a6>
 8014af2:	9b01      	ldr	r3, [sp, #4]
 8014af4:	454b      	cmp	r3, r9
 8014af6:	eba3 0209 	sub.w	r2, r3, r9
 8014afa:	d123      	bne.n	8014b44 <_scanf_float+0x3c0>
 8014afc:	2200      	movs	r2, #0
 8014afe:	4659      	mov	r1, fp
 8014b00:	4640      	mov	r0, r8
 8014b02:	f000 fe97 	bl	8015834 <_strtod_r>
 8014b06:	6822      	ldr	r2, [r4, #0]
 8014b08:	9b03      	ldr	r3, [sp, #12]
 8014b0a:	f012 0f02 	tst.w	r2, #2
 8014b0e:	ec57 6b10 	vmov	r6, r7, d0
 8014b12:	681b      	ldr	r3, [r3, #0]
 8014b14:	d021      	beq.n	8014b5a <_scanf_float+0x3d6>
 8014b16:	9903      	ldr	r1, [sp, #12]
 8014b18:	1d1a      	adds	r2, r3, #4
 8014b1a:	600a      	str	r2, [r1, #0]
 8014b1c:	681b      	ldr	r3, [r3, #0]
 8014b1e:	e9c3 6700 	strd	r6, r7, [r3]
 8014b22:	68e3      	ldr	r3, [r4, #12]
 8014b24:	3301      	adds	r3, #1
 8014b26:	60e3      	str	r3, [r4, #12]
 8014b28:	e66d      	b.n	8014806 <_scanf_float+0x82>
 8014b2a:	9b04      	ldr	r3, [sp, #16]
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	d0e5      	beq.n	8014afc <_scanf_float+0x378>
 8014b30:	9905      	ldr	r1, [sp, #20]
 8014b32:	230a      	movs	r3, #10
 8014b34:	462a      	mov	r2, r5
 8014b36:	3101      	adds	r1, #1
 8014b38:	4640      	mov	r0, r8
 8014b3a:	f000 ff03 	bl	8015944 <_strtol_r>
 8014b3e:	9b04      	ldr	r3, [sp, #16]
 8014b40:	9e05      	ldr	r6, [sp, #20]
 8014b42:	1ac2      	subs	r2, r0, r3
 8014b44:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8014b48:	429e      	cmp	r6, r3
 8014b4a:	bf28      	it	cs
 8014b4c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8014b50:	4912      	ldr	r1, [pc, #72]	; (8014b9c <_scanf_float+0x418>)
 8014b52:	4630      	mov	r0, r6
 8014b54:	f000 f82c 	bl	8014bb0 <siprintf>
 8014b58:	e7d0      	b.n	8014afc <_scanf_float+0x378>
 8014b5a:	9903      	ldr	r1, [sp, #12]
 8014b5c:	f012 0f04 	tst.w	r2, #4
 8014b60:	f103 0204 	add.w	r2, r3, #4
 8014b64:	600a      	str	r2, [r1, #0]
 8014b66:	d1d9      	bne.n	8014b1c <_scanf_float+0x398>
 8014b68:	f8d3 8000 	ldr.w	r8, [r3]
 8014b6c:	ee10 2a10 	vmov	r2, s0
 8014b70:	ee10 0a10 	vmov	r0, s0
 8014b74:	463b      	mov	r3, r7
 8014b76:	4639      	mov	r1, r7
 8014b78:	f7eb fff0 	bl	8000b5c <__aeabi_dcmpun>
 8014b7c:	b128      	cbz	r0, 8014b8a <_scanf_float+0x406>
 8014b7e:	4808      	ldr	r0, [pc, #32]	; (8014ba0 <_scanf_float+0x41c>)
 8014b80:	f000 f810 	bl	8014ba4 <nanf>
 8014b84:	ed88 0a00 	vstr	s0, [r8]
 8014b88:	e7cb      	b.n	8014b22 <_scanf_float+0x39e>
 8014b8a:	4630      	mov	r0, r6
 8014b8c:	4639      	mov	r1, r7
 8014b8e:	f7ec f843 	bl	8000c18 <__aeabi_d2f>
 8014b92:	f8c8 0000 	str.w	r0, [r8]
 8014b96:	e7c4      	b.n	8014b22 <_scanf_float+0x39e>
 8014b98:	2500      	movs	r5, #0
 8014b9a:	e634      	b.n	8014806 <_scanf_float+0x82>
 8014b9c:	0801a1b8 	.word	0x0801a1b8
 8014ba0:	0801a5c0 	.word	0x0801a5c0

08014ba4 <nanf>:
 8014ba4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014bac <nanf+0x8>
 8014ba8:	4770      	bx	lr
 8014baa:	bf00      	nop
 8014bac:	7fc00000 	.word	0x7fc00000

08014bb0 <siprintf>:
 8014bb0:	b40e      	push	{r1, r2, r3}
 8014bb2:	b500      	push	{lr}
 8014bb4:	b09c      	sub	sp, #112	; 0x70
 8014bb6:	ab1d      	add	r3, sp, #116	; 0x74
 8014bb8:	9002      	str	r0, [sp, #8]
 8014bba:	9006      	str	r0, [sp, #24]
 8014bbc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014bc0:	4809      	ldr	r0, [pc, #36]	; (8014be8 <siprintf+0x38>)
 8014bc2:	9107      	str	r1, [sp, #28]
 8014bc4:	9104      	str	r1, [sp, #16]
 8014bc6:	4909      	ldr	r1, [pc, #36]	; (8014bec <siprintf+0x3c>)
 8014bc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8014bcc:	9105      	str	r1, [sp, #20]
 8014bce:	6800      	ldr	r0, [r0, #0]
 8014bd0:	9301      	str	r3, [sp, #4]
 8014bd2:	a902      	add	r1, sp, #8
 8014bd4:	f002 fed4 	bl	8017980 <_svfiprintf_r>
 8014bd8:	9b02      	ldr	r3, [sp, #8]
 8014bda:	2200      	movs	r2, #0
 8014bdc:	701a      	strb	r2, [r3, #0]
 8014bde:	b01c      	add	sp, #112	; 0x70
 8014be0:	f85d eb04 	ldr.w	lr, [sp], #4
 8014be4:	b003      	add	sp, #12
 8014be6:	4770      	bx	lr
 8014be8:	200000a4 	.word	0x200000a4
 8014bec:	ffff0208 	.word	0xffff0208

08014bf0 <sulp>:
 8014bf0:	b570      	push	{r4, r5, r6, lr}
 8014bf2:	4604      	mov	r4, r0
 8014bf4:	460d      	mov	r5, r1
 8014bf6:	ec45 4b10 	vmov	d0, r4, r5
 8014bfa:	4616      	mov	r6, r2
 8014bfc:	f002 fc1e 	bl	801743c <__ulp>
 8014c00:	ec51 0b10 	vmov	r0, r1, d0
 8014c04:	b17e      	cbz	r6, 8014c26 <sulp+0x36>
 8014c06:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8014c0a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	dd09      	ble.n	8014c26 <sulp+0x36>
 8014c12:	051b      	lsls	r3, r3, #20
 8014c14:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8014c18:	2400      	movs	r4, #0
 8014c1a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8014c1e:	4622      	mov	r2, r4
 8014c20:	462b      	mov	r3, r5
 8014c22:	f7eb fd01 	bl	8000628 <__aeabi_dmul>
 8014c26:	bd70      	pop	{r4, r5, r6, pc}

08014c28 <_strtod_l>:
 8014c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c2c:	ed2d 8b02 	vpush	{d8}
 8014c30:	b09d      	sub	sp, #116	; 0x74
 8014c32:	461f      	mov	r7, r3
 8014c34:	2300      	movs	r3, #0
 8014c36:	9318      	str	r3, [sp, #96]	; 0x60
 8014c38:	4ba2      	ldr	r3, [pc, #648]	; (8014ec4 <_strtod_l+0x29c>)
 8014c3a:	9213      	str	r2, [sp, #76]	; 0x4c
 8014c3c:	681b      	ldr	r3, [r3, #0]
 8014c3e:	9305      	str	r3, [sp, #20]
 8014c40:	4604      	mov	r4, r0
 8014c42:	4618      	mov	r0, r3
 8014c44:	4688      	mov	r8, r1
 8014c46:	f7eb fadb 	bl	8000200 <strlen>
 8014c4a:	f04f 0a00 	mov.w	sl, #0
 8014c4e:	4605      	mov	r5, r0
 8014c50:	f04f 0b00 	mov.w	fp, #0
 8014c54:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8014c58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014c5a:	781a      	ldrb	r2, [r3, #0]
 8014c5c:	2a2b      	cmp	r2, #43	; 0x2b
 8014c5e:	d04e      	beq.n	8014cfe <_strtod_l+0xd6>
 8014c60:	d83b      	bhi.n	8014cda <_strtod_l+0xb2>
 8014c62:	2a0d      	cmp	r2, #13
 8014c64:	d834      	bhi.n	8014cd0 <_strtod_l+0xa8>
 8014c66:	2a08      	cmp	r2, #8
 8014c68:	d834      	bhi.n	8014cd4 <_strtod_l+0xac>
 8014c6a:	2a00      	cmp	r2, #0
 8014c6c:	d03e      	beq.n	8014cec <_strtod_l+0xc4>
 8014c6e:	2300      	movs	r3, #0
 8014c70:	930a      	str	r3, [sp, #40]	; 0x28
 8014c72:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8014c74:	7833      	ldrb	r3, [r6, #0]
 8014c76:	2b30      	cmp	r3, #48	; 0x30
 8014c78:	f040 80b0 	bne.w	8014ddc <_strtod_l+0x1b4>
 8014c7c:	7873      	ldrb	r3, [r6, #1]
 8014c7e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014c82:	2b58      	cmp	r3, #88	; 0x58
 8014c84:	d168      	bne.n	8014d58 <_strtod_l+0x130>
 8014c86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c88:	9301      	str	r3, [sp, #4]
 8014c8a:	ab18      	add	r3, sp, #96	; 0x60
 8014c8c:	9702      	str	r7, [sp, #8]
 8014c8e:	9300      	str	r3, [sp, #0]
 8014c90:	4a8d      	ldr	r2, [pc, #564]	; (8014ec8 <_strtod_l+0x2a0>)
 8014c92:	ab19      	add	r3, sp, #100	; 0x64
 8014c94:	a917      	add	r1, sp, #92	; 0x5c
 8014c96:	4620      	mov	r0, r4
 8014c98:	f001 fd38 	bl	801670c <__gethex>
 8014c9c:	f010 0707 	ands.w	r7, r0, #7
 8014ca0:	4605      	mov	r5, r0
 8014ca2:	d005      	beq.n	8014cb0 <_strtod_l+0x88>
 8014ca4:	2f06      	cmp	r7, #6
 8014ca6:	d12c      	bne.n	8014d02 <_strtod_l+0xda>
 8014ca8:	3601      	adds	r6, #1
 8014caa:	2300      	movs	r3, #0
 8014cac:	9617      	str	r6, [sp, #92]	; 0x5c
 8014cae:	930a      	str	r3, [sp, #40]	; 0x28
 8014cb0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	f040 8590 	bne.w	80157d8 <_strtod_l+0xbb0>
 8014cb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014cba:	b1eb      	cbz	r3, 8014cf8 <_strtod_l+0xd0>
 8014cbc:	4652      	mov	r2, sl
 8014cbe:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8014cc2:	ec43 2b10 	vmov	d0, r2, r3
 8014cc6:	b01d      	add	sp, #116	; 0x74
 8014cc8:	ecbd 8b02 	vpop	{d8}
 8014ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cd0:	2a20      	cmp	r2, #32
 8014cd2:	d1cc      	bne.n	8014c6e <_strtod_l+0x46>
 8014cd4:	3301      	adds	r3, #1
 8014cd6:	9317      	str	r3, [sp, #92]	; 0x5c
 8014cd8:	e7be      	b.n	8014c58 <_strtod_l+0x30>
 8014cda:	2a2d      	cmp	r2, #45	; 0x2d
 8014cdc:	d1c7      	bne.n	8014c6e <_strtod_l+0x46>
 8014cde:	2201      	movs	r2, #1
 8014ce0:	920a      	str	r2, [sp, #40]	; 0x28
 8014ce2:	1c5a      	adds	r2, r3, #1
 8014ce4:	9217      	str	r2, [sp, #92]	; 0x5c
 8014ce6:	785b      	ldrb	r3, [r3, #1]
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	d1c2      	bne.n	8014c72 <_strtod_l+0x4a>
 8014cec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014cee:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	f040 856e 	bne.w	80157d4 <_strtod_l+0xbac>
 8014cf8:	4652      	mov	r2, sl
 8014cfa:	465b      	mov	r3, fp
 8014cfc:	e7e1      	b.n	8014cc2 <_strtod_l+0x9a>
 8014cfe:	2200      	movs	r2, #0
 8014d00:	e7ee      	b.n	8014ce0 <_strtod_l+0xb8>
 8014d02:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014d04:	b13a      	cbz	r2, 8014d16 <_strtod_l+0xee>
 8014d06:	2135      	movs	r1, #53	; 0x35
 8014d08:	a81a      	add	r0, sp, #104	; 0x68
 8014d0a:	f002 fca2 	bl	8017652 <__copybits>
 8014d0e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014d10:	4620      	mov	r0, r4
 8014d12:	f002 f861 	bl	8016dd8 <_Bfree>
 8014d16:	3f01      	subs	r7, #1
 8014d18:	2f04      	cmp	r7, #4
 8014d1a:	d806      	bhi.n	8014d2a <_strtod_l+0x102>
 8014d1c:	e8df f007 	tbb	[pc, r7]
 8014d20:	1714030a 	.word	0x1714030a
 8014d24:	0a          	.byte	0x0a
 8014d25:	00          	.byte	0x00
 8014d26:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8014d2a:	0728      	lsls	r0, r5, #28
 8014d2c:	d5c0      	bpl.n	8014cb0 <_strtod_l+0x88>
 8014d2e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8014d32:	e7bd      	b.n	8014cb0 <_strtod_l+0x88>
 8014d34:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8014d38:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8014d3a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8014d3e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8014d42:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8014d46:	e7f0      	b.n	8014d2a <_strtod_l+0x102>
 8014d48:	f8df b180 	ldr.w	fp, [pc, #384]	; 8014ecc <_strtod_l+0x2a4>
 8014d4c:	e7ed      	b.n	8014d2a <_strtod_l+0x102>
 8014d4e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8014d52:	f04f 3aff 	mov.w	sl, #4294967295
 8014d56:	e7e8      	b.n	8014d2a <_strtod_l+0x102>
 8014d58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014d5a:	1c5a      	adds	r2, r3, #1
 8014d5c:	9217      	str	r2, [sp, #92]	; 0x5c
 8014d5e:	785b      	ldrb	r3, [r3, #1]
 8014d60:	2b30      	cmp	r3, #48	; 0x30
 8014d62:	d0f9      	beq.n	8014d58 <_strtod_l+0x130>
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	d0a3      	beq.n	8014cb0 <_strtod_l+0x88>
 8014d68:	2301      	movs	r3, #1
 8014d6a:	f04f 0900 	mov.w	r9, #0
 8014d6e:	9304      	str	r3, [sp, #16]
 8014d70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014d72:	9308      	str	r3, [sp, #32]
 8014d74:	f8cd 901c 	str.w	r9, [sp, #28]
 8014d78:	464f      	mov	r7, r9
 8014d7a:	220a      	movs	r2, #10
 8014d7c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8014d7e:	7806      	ldrb	r6, [r0, #0]
 8014d80:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8014d84:	b2d9      	uxtb	r1, r3
 8014d86:	2909      	cmp	r1, #9
 8014d88:	d92a      	bls.n	8014de0 <_strtod_l+0x1b8>
 8014d8a:	9905      	ldr	r1, [sp, #20]
 8014d8c:	462a      	mov	r2, r5
 8014d8e:	f002 ff0f 	bl	8017bb0 <strncmp>
 8014d92:	b398      	cbz	r0, 8014dfc <_strtod_l+0x1d4>
 8014d94:	2000      	movs	r0, #0
 8014d96:	4632      	mov	r2, r6
 8014d98:	463d      	mov	r5, r7
 8014d9a:	9005      	str	r0, [sp, #20]
 8014d9c:	4603      	mov	r3, r0
 8014d9e:	2a65      	cmp	r2, #101	; 0x65
 8014da0:	d001      	beq.n	8014da6 <_strtod_l+0x17e>
 8014da2:	2a45      	cmp	r2, #69	; 0x45
 8014da4:	d118      	bne.n	8014dd8 <_strtod_l+0x1b0>
 8014da6:	b91d      	cbnz	r5, 8014db0 <_strtod_l+0x188>
 8014da8:	9a04      	ldr	r2, [sp, #16]
 8014daa:	4302      	orrs	r2, r0
 8014dac:	d09e      	beq.n	8014cec <_strtod_l+0xc4>
 8014dae:	2500      	movs	r5, #0
 8014db0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8014db4:	f108 0201 	add.w	r2, r8, #1
 8014db8:	9217      	str	r2, [sp, #92]	; 0x5c
 8014dba:	f898 2001 	ldrb.w	r2, [r8, #1]
 8014dbe:	2a2b      	cmp	r2, #43	; 0x2b
 8014dc0:	d075      	beq.n	8014eae <_strtod_l+0x286>
 8014dc2:	2a2d      	cmp	r2, #45	; 0x2d
 8014dc4:	d07b      	beq.n	8014ebe <_strtod_l+0x296>
 8014dc6:	f04f 0c00 	mov.w	ip, #0
 8014dca:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8014dce:	2909      	cmp	r1, #9
 8014dd0:	f240 8082 	bls.w	8014ed8 <_strtod_l+0x2b0>
 8014dd4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8014dd8:	2600      	movs	r6, #0
 8014dda:	e09d      	b.n	8014f18 <_strtod_l+0x2f0>
 8014ddc:	2300      	movs	r3, #0
 8014dde:	e7c4      	b.n	8014d6a <_strtod_l+0x142>
 8014de0:	2f08      	cmp	r7, #8
 8014de2:	bfd8      	it	le
 8014de4:	9907      	ldrle	r1, [sp, #28]
 8014de6:	f100 0001 	add.w	r0, r0, #1
 8014dea:	bfda      	itte	le
 8014dec:	fb02 3301 	mlale	r3, r2, r1, r3
 8014df0:	9307      	strle	r3, [sp, #28]
 8014df2:	fb02 3909 	mlagt	r9, r2, r9, r3
 8014df6:	3701      	adds	r7, #1
 8014df8:	9017      	str	r0, [sp, #92]	; 0x5c
 8014dfa:	e7bf      	b.n	8014d7c <_strtod_l+0x154>
 8014dfc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014dfe:	195a      	adds	r2, r3, r5
 8014e00:	9217      	str	r2, [sp, #92]	; 0x5c
 8014e02:	5d5a      	ldrb	r2, [r3, r5]
 8014e04:	2f00      	cmp	r7, #0
 8014e06:	d037      	beq.n	8014e78 <_strtod_l+0x250>
 8014e08:	9005      	str	r0, [sp, #20]
 8014e0a:	463d      	mov	r5, r7
 8014e0c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8014e10:	2b09      	cmp	r3, #9
 8014e12:	d912      	bls.n	8014e3a <_strtod_l+0x212>
 8014e14:	2301      	movs	r3, #1
 8014e16:	e7c2      	b.n	8014d9e <_strtod_l+0x176>
 8014e18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014e1a:	1c5a      	adds	r2, r3, #1
 8014e1c:	9217      	str	r2, [sp, #92]	; 0x5c
 8014e1e:	785a      	ldrb	r2, [r3, #1]
 8014e20:	3001      	adds	r0, #1
 8014e22:	2a30      	cmp	r2, #48	; 0x30
 8014e24:	d0f8      	beq.n	8014e18 <_strtod_l+0x1f0>
 8014e26:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8014e2a:	2b08      	cmp	r3, #8
 8014e2c:	f200 84d9 	bhi.w	80157e2 <_strtod_l+0xbba>
 8014e30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014e32:	9005      	str	r0, [sp, #20]
 8014e34:	2000      	movs	r0, #0
 8014e36:	9308      	str	r3, [sp, #32]
 8014e38:	4605      	mov	r5, r0
 8014e3a:	3a30      	subs	r2, #48	; 0x30
 8014e3c:	f100 0301 	add.w	r3, r0, #1
 8014e40:	d014      	beq.n	8014e6c <_strtod_l+0x244>
 8014e42:	9905      	ldr	r1, [sp, #20]
 8014e44:	4419      	add	r1, r3
 8014e46:	9105      	str	r1, [sp, #20]
 8014e48:	462b      	mov	r3, r5
 8014e4a:	eb00 0e05 	add.w	lr, r0, r5
 8014e4e:	210a      	movs	r1, #10
 8014e50:	4573      	cmp	r3, lr
 8014e52:	d113      	bne.n	8014e7c <_strtod_l+0x254>
 8014e54:	182b      	adds	r3, r5, r0
 8014e56:	2b08      	cmp	r3, #8
 8014e58:	f105 0501 	add.w	r5, r5, #1
 8014e5c:	4405      	add	r5, r0
 8014e5e:	dc1c      	bgt.n	8014e9a <_strtod_l+0x272>
 8014e60:	9907      	ldr	r1, [sp, #28]
 8014e62:	230a      	movs	r3, #10
 8014e64:	fb03 2301 	mla	r3, r3, r1, r2
 8014e68:	9307      	str	r3, [sp, #28]
 8014e6a:	2300      	movs	r3, #0
 8014e6c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014e6e:	1c51      	adds	r1, r2, #1
 8014e70:	9117      	str	r1, [sp, #92]	; 0x5c
 8014e72:	7852      	ldrb	r2, [r2, #1]
 8014e74:	4618      	mov	r0, r3
 8014e76:	e7c9      	b.n	8014e0c <_strtod_l+0x1e4>
 8014e78:	4638      	mov	r0, r7
 8014e7a:	e7d2      	b.n	8014e22 <_strtod_l+0x1fa>
 8014e7c:	2b08      	cmp	r3, #8
 8014e7e:	dc04      	bgt.n	8014e8a <_strtod_l+0x262>
 8014e80:	9e07      	ldr	r6, [sp, #28]
 8014e82:	434e      	muls	r6, r1
 8014e84:	9607      	str	r6, [sp, #28]
 8014e86:	3301      	adds	r3, #1
 8014e88:	e7e2      	b.n	8014e50 <_strtod_l+0x228>
 8014e8a:	f103 0c01 	add.w	ip, r3, #1
 8014e8e:	f1bc 0f10 	cmp.w	ip, #16
 8014e92:	bfd8      	it	le
 8014e94:	fb01 f909 	mulle.w	r9, r1, r9
 8014e98:	e7f5      	b.n	8014e86 <_strtod_l+0x25e>
 8014e9a:	2d10      	cmp	r5, #16
 8014e9c:	bfdc      	itt	le
 8014e9e:	230a      	movle	r3, #10
 8014ea0:	fb03 2909 	mlale	r9, r3, r9, r2
 8014ea4:	e7e1      	b.n	8014e6a <_strtod_l+0x242>
 8014ea6:	2300      	movs	r3, #0
 8014ea8:	9305      	str	r3, [sp, #20]
 8014eaa:	2301      	movs	r3, #1
 8014eac:	e77c      	b.n	8014da8 <_strtod_l+0x180>
 8014eae:	f04f 0c00 	mov.w	ip, #0
 8014eb2:	f108 0202 	add.w	r2, r8, #2
 8014eb6:	9217      	str	r2, [sp, #92]	; 0x5c
 8014eb8:	f898 2002 	ldrb.w	r2, [r8, #2]
 8014ebc:	e785      	b.n	8014dca <_strtod_l+0x1a2>
 8014ebe:	f04f 0c01 	mov.w	ip, #1
 8014ec2:	e7f6      	b.n	8014eb2 <_strtod_l+0x28a>
 8014ec4:	0801a408 	.word	0x0801a408
 8014ec8:	0801a1c0 	.word	0x0801a1c0
 8014ecc:	7ff00000 	.word	0x7ff00000
 8014ed0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014ed2:	1c51      	adds	r1, r2, #1
 8014ed4:	9117      	str	r1, [sp, #92]	; 0x5c
 8014ed6:	7852      	ldrb	r2, [r2, #1]
 8014ed8:	2a30      	cmp	r2, #48	; 0x30
 8014eda:	d0f9      	beq.n	8014ed0 <_strtod_l+0x2a8>
 8014edc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8014ee0:	2908      	cmp	r1, #8
 8014ee2:	f63f af79 	bhi.w	8014dd8 <_strtod_l+0x1b0>
 8014ee6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8014eea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014eec:	9206      	str	r2, [sp, #24]
 8014eee:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014ef0:	1c51      	adds	r1, r2, #1
 8014ef2:	9117      	str	r1, [sp, #92]	; 0x5c
 8014ef4:	7852      	ldrb	r2, [r2, #1]
 8014ef6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8014efa:	2e09      	cmp	r6, #9
 8014efc:	d937      	bls.n	8014f6e <_strtod_l+0x346>
 8014efe:	9e06      	ldr	r6, [sp, #24]
 8014f00:	1b89      	subs	r1, r1, r6
 8014f02:	2908      	cmp	r1, #8
 8014f04:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8014f08:	dc02      	bgt.n	8014f10 <_strtod_l+0x2e8>
 8014f0a:	4576      	cmp	r6, lr
 8014f0c:	bfa8      	it	ge
 8014f0e:	4676      	movge	r6, lr
 8014f10:	f1bc 0f00 	cmp.w	ip, #0
 8014f14:	d000      	beq.n	8014f18 <_strtod_l+0x2f0>
 8014f16:	4276      	negs	r6, r6
 8014f18:	2d00      	cmp	r5, #0
 8014f1a:	d14d      	bne.n	8014fb8 <_strtod_l+0x390>
 8014f1c:	9904      	ldr	r1, [sp, #16]
 8014f1e:	4301      	orrs	r1, r0
 8014f20:	f47f aec6 	bne.w	8014cb0 <_strtod_l+0x88>
 8014f24:	2b00      	cmp	r3, #0
 8014f26:	f47f aee1 	bne.w	8014cec <_strtod_l+0xc4>
 8014f2a:	2a69      	cmp	r2, #105	; 0x69
 8014f2c:	d027      	beq.n	8014f7e <_strtod_l+0x356>
 8014f2e:	dc24      	bgt.n	8014f7a <_strtod_l+0x352>
 8014f30:	2a49      	cmp	r2, #73	; 0x49
 8014f32:	d024      	beq.n	8014f7e <_strtod_l+0x356>
 8014f34:	2a4e      	cmp	r2, #78	; 0x4e
 8014f36:	f47f aed9 	bne.w	8014cec <_strtod_l+0xc4>
 8014f3a:	499f      	ldr	r1, [pc, #636]	; (80151b8 <_strtod_l+0x590>)
 8014f3c:	a817      	add	r0, sp, #92	; 0x5c
 8014f3e:	f001 fe3d 	bl	8016bbc <__match>
 8014f42:	2800      	cmp	r0, #0
 8014f44:	f43f aed2 	beq.w	8014cec <_strtod_l+0xc4>
 8014f48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014f4a:	781b      	ldrb	r3, [r3, #0]
 8014f4c:	2b28      	cmp	r3, #40	; 0x28
 8014f4e:	d12d      	bne.n	8014fac <_strtod_l+0x384>
 8014f50:	499a      	ldr	r1, [pc, #616]	; (80151bc <_strtod_l+0x594>)
 8014f52:	aa1a      	add	r2, sp, #104	; 0x68
 8014f54:	a817      	add	r0, sp, #92	; 0x5c
 8014f56:	f001 fe45 	bl	8016be4 <__hexnan>
 8014f5a:	2805      	cmp	r0, #5
 8014f5c:	d126      	bne.n	8014fac <_strtod_l+0x384>
 8014f5e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014f60:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8014f64:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8014f68:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8014f6c:	e6a0      	b.n	8014cb0 <_strtod_l+0x88>
 8014f6e:	210a      	movs	r1, #10
 8014f70:	fb01 2e0e 	mla	lr, r1, lr, r2
 8014f74:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8014f78:	e7b9      	b.n	8014eee <_strtod_l+0x2c6>
 8014f7a:	2a6e      	cmp	r2, #110	; 0x6e
 8014f7c:	e7db      	b.n	8014f36 <_strtod_l+0x30e>
 8014f7e:	4990      	ldr	r1, [pc, #576]	; (80151c0 <_strtod_l+0x598>)
 8014f80:	a817      	add	r0, sp, #92	; 0x5c
 8014f82:	f001 fe1b 	bl	8016bbc <__match>
 8014f86:	2800      	cmp	r0, #0
 8014f88:	f43f aeb0 	beq.w	8014cec <_strtod_l+0xc4>
 8014f8c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014f8e:	498d      	ldr	r1, [pc, #564]	; (80151c4 <_strtod_l+0x59c>)
 8014f90:	3b01      	subs	r3, #1
 8014f92:	a817      	add	r0, sp, #92	; 0x5c
 8014f94:	9317      	str	r3, [sp, #92]	; 0x5c
 8014f96:	f001 fe11 	bl	8016bbc <__match>
 8014f9a:	b910      	cbnz	r0, 8014fa2 <_strtod_l+0x37a>
 8014f9c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014f9e:	3301      	adds	r3, #1
 8014fa0:	9317      	str	r3, [sp, #92]	; 0x5c
 8014fa2:	f8df b230 	ldr.w	fp, [pc, #560]	; 80151d4 <_strtod_l+0x5ac>
 8014fa6:	f04f 0a00 	mov.w	sl, #0
 8014faa:	e681      	b.n	8014cb0 <_strtod_l+0x88>
 8014fac:	4886      	ldr	r0, [pc, #536]	; (80151c8 <_strtod_l+0x5a0>)
 8014fae:	f002 fde7 	bl	8017b80 <nan>
 8014fb2:	ec5b ab10 	vmov	sl, fp, d0
 8014fb6:	e67b      	b.n	8014cb0 <_strtod_l+0x88>
 8014fb8:	9b05      	ldr	r3, [sp, #20]
 8014fba:	9807      	ldr	r0, [sp, #28]
 8014fbc:	1af3      	subs	r3, r6, r3
 8014fbe:	2f00      	cmp	r7, #0
 8014fc0:	bf08      	it	eq
 8014fc2:	462f      	moveq	r7, r5
 8014fc4:	2d10      	cmp	r5, #16
 8014fc6:	9306      	str	r3, [sp, #24]
 8014fc8:	46a8      	mov	r8, r5
 8014fca:	bfa8      	it	ge
 8014fcc:	f04f 0810 	movge.w	r8, #16
 8014fd0:	f7eb fab0 	bl	8000534 <__aeabi_ui2d>
 8014fd4:	2d09      	cmp	r5, #9
 8014fd6:	4682      	mov	sl, r0
 8014fd8:	468b      	mov	fp, r1
 8014fda:	dd13      	ble.n	8015004 <_strtod_l+0x3dc>
 8014fdc:	4b7b      	ldr	r3, [pc, #492]	; (80151cc <_strtod_l+0x5a4>)
 8014fde:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8014fe2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8014fe6:	f7eb fb1f 	bl	8000628 <__aeabi_dmul>
 8014fea:	4682      	mov	sl, r0
 8014fec:	4648      	mov	r0, r9
 8014fee:	468b      	mov	fp, r1
 8014ff0:	f7eb faa0 	bl	8000534 <__aeabi_ui2d>
 8014ff4:	4602      	mov	r2, r0
 8014ff6:	460b      	mov	r3, r1
 8014ff8:	4650      	mov	r0, sl
 8014ffa:	4659      	mov	r1, fp
 8014ffc:	f7eb f95e 	bl	80002bc <__adddf3>
 8015000:	4682      	mov	sl, r0
 8015002:	468b      	mov	fp, r1
 8015004:	2d0f      	cmp	r5, #15
 8015006:	dc38      	bgt.n	801507a <_strtod_l+0x452>
 8015008:	9b06      	ldr	r3, [sp, #24]
 801500a:	2b00      	cmp	r3, #0
 801500c:	f43f ae50 	beq.w	8014cb0 <_strtod_l+0x88>
 8015010:	dd24      	ble.n	801505c <_strtod_l+0x434>
 8015012:	2b16      	cmp	r3, #22
 8015014:	dc0b      	bgt.n	801502e <_strtod_l+0x406>
 8015016:	496d      	ldr	r1, [pc, #436]	; (80151cc <_strtod_l+0x5a4>)
 8015018:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801501c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015020:	4652      	mov	r2, sl
 8015022:	465b      	mov	r3, fp
 8015024:	f7eb fb00 	bl	8000628 <__aeabi_dmul>
 8015028:	4682      	mov	sl, r0
 801502a:	468b      	mov	fp, r1
 801502c:	e640      	b.n	8014cb0 <_strtod_l+0x88>
 801502e:	9a06      	ldr	r2, [sp, #24]
 8015030:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8015034:	4293      	cmp	r3, r2
 8015036:	db20      	blt.n	801507a <_strtod_l+0x452>
 8015038:	4c64      	ldr	r4, [pc, #400]	; (80151cc <_strtod_l+0x5a4>)
 801503a:	f1c5 050f 	rsb	r5, r5, #15
 801503e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8015042:	4652      	mov	r2, sl
 8015044:	465b      	mov	r3, fp
 8015046:	e9d1 0100 	ldrd	r0, r1, [r1]
 801504a:	f7eb faed 	bl	8000628 <__aeabi_dmul>
 801504e:	9b06      	ldr	r3, [sp, #24]
 8015050:	1b5d      	subs	r5, r3, r5
 8015052:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8015056:	e9d4 2300 	ldrd	r2, r3, [r4]
 801505a:	e7e3      	b.n	8015024 <_strtod_l+0x3fc>
 801505c:	9b06      	ldr	r3, [sp, #24]
 801505e:	3316      	adds	r3, #22
 8015060:	db0b      	blt.n	801507a <_strtod_l+0x452>
 8015062:	9b05      	ldr	r3, [sp, #20]
 8015064:	1b9e      	subs	r6, r3, r6
 8015066:	4b59      	ldr	r3, [pc, #356]	; (80151cc <_strtod_l+0x5a4>)
 8015068:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801506c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8015070:	4650      	mov	r0, sl
 8015072:	4659      	mov	r1, fp
 8015074:	f7eb fc02 	bl	800087c <__aeabi_ddiv>
 8015078:	e7d6      	b.n	8015028 <_strtod_l+0x400>
 801507a:	9b06      	ldr	r3, [sp, #24]
 801507c:	eba5 0808 	sub.w	r8, r5, r8
 8015080:	4498      	add	r8, r3
 8015082:	f1b8 0f00 	cmp.w	r8, #0
 8015086:	dd74      	ble.n	8015172 <_strtod_l+0x54a>
 8015088:	f018 030f 	ands.w	r3, r8, #15
 801508c:	d00a      	beq.n	80150a4 <_strtod_l+0x47c>
 801508e:	494f      	ldr	r1, [pc, #316]	; (80151cc <_strtod_l+0x5a4>)
 8015090:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015094:	4652      	mov	r2, sl
 8015096:	465b      	mov	r3, fp
 8015098:	e9d1 0100 	ldrd	r0, r1, [r1]
 801509c:	f7eb fac4 	bl	8000628 <__aeabi_dmul>
 80150a0:	4682      	mov	sl, r0
 80150a2:	468b      	mov	fp, r1
 80150a4:	f038 080f 	bics.w	r8, r8, #15
 80150a8:	d04f      	beq.n	801514a <_strtod_l+0x522>
 80150aa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80150ae:	dd22      	ble.n	80150f6 <_strtod_l+0x4ce>
 80150b0:	2500      	movs	r5, #0
 80150b2:	462e      	mov	r6, r5
 80150b4:	9507      	str	r5, [sp, #28]
 80150b6:	9505      	str	r5, [sp, #20]
 80150b8:	2322      	movs	r3, #34	; 0x22
 80150ba:	f8df b118 	ldr.w	fp, [pc, #280]	; 80151d4 <_strtod_l+0x5ac>
 80150be:	6023      	str	r3, [r4, #0]
 80150c0:	f04f 0a00 	mov.w	sl, #0
 80150c4:	9b07      	ldr	r3, [sp, #28]
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	f43f adf2 	beq.w	8014cb0 <_strtod_l+0x88>
 80150cc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80150ce:	4620      	mov	r0, r4
 80150d0:	f001 fe82 	bl	8016dd8 <_Bfree>
 80150d4:	9905      	ldr	r1, [sp, #20]
 80150d6:	4620      	mov	r0, r4
 80150d8:	f001 fe7e 	bl	8016dd8 <_Bfree>
 80150dc:	4631      	mov	r1, r6
 80150de:	4620      	mov	r0, r4
 80150e0:	f001 fe7a 	bl	8016dd8 <_Bfree>
 80150e4:	9907      	ldr	r1, [sp, #28]
 80150e6:	4620      	mov	r0, r4
 80150e8:	f001 fe76 	bl	8016dd8 <_Bfree>
 80150ec:	4629      	mov	r1, r5
 80150ee:	4620      	mov	r0, r4
 80150f0:	f001 fe72 	bl	8016dd8 <_Bfree>
 80150f4:	e5dc      	b.n	8014cb0 <_strtod_l+0x88>
 80150f6:	4b36      	ldr	r3, [pc, #216]	; (80151d0 <_strtod_l+0x5a8>)
 80150f8:	9304      	str	r3, [sp, #16]
 80150fa:	2300      	movs	r3, #0
 80150fc:	ea4f 1828 	mov.w	r8, r8, asr #4
 8015100:	4650      	mov	r0, sl
 8015102:	4659      	mov	r1, fp
 8015104:	4699      	mov	r9, r3
 8015106:	f1b8 0f01 	cmp.w	r8, #1
 801510a:	dc21      	bgt.n	8015150 <_strtod_l+0x528>
 801510c:	b10b      	cbz	r3, 8015112 <_strtod_l+0x4ea>
 801510e:	4682      	mov	sl, r0
 8015110:	468b      	mov	fp, r1
 8015112:	4b2f      	ldr	r3, [pc, #188]	; (80151d0 <_strtod_l+0x5a8>)
 8015114:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8015118:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801511c:	4652      	mov	r2, sl
 801511e:	465b      	mov	r3, fp
 8015120:	e9d9 0100 	ldrd	r0, r1, [r9]
 8015124:	f7eb fa80 	bl	8000628 <__aeabi_dmul>
 8015128:	4b2a      	ldr	r3, [pc, #168]	; (80151d4 <_strtod_l+0x5ac>)
 801512a:	460a      	mov	r2, r1
 801512c:	400b      	ands	r3, r1
 801512e:	492a      	ldr	r1, [pc, #168]	; (80151d8 <_strtod_l+0x5b0>)
 8015130:	428b      	cmp	r3, r1
 8015132:	4682      	mov	sl, r0
 8015134:	d8bc      	bhi.n	80150b0 <_strtod_l+0x488>
 8015136:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801513a:	428b      	cmp	r3, r1
 801513c:	bf86      	itte	hi
 801513e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80151dc <_strtod_l+0x5b4>
 8015142:	f04f 3aff 	movhi.w	sl, #4294967295
 8015146:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801514a:	2300      	movs	r3, #0
 801514c:	9304      	str	r3, [sp, #16]
 801514e:	e084      	b.n	801525a <_strtod_l+0x632>
 8015150:	f018 0f01 	tst.w	r8, #1
 8015154:	d005      	beq.n	8015162 <_strtod_l+0x53a>
 8015156:	9b04      	ldr	r3, [sp, #16]
 8015158:	e9d3 2300 	ldrd	r2, r3, [r3]
 801515c:	f7eb fa64 	bl	8000628 <__aeabi_dmul>
 8015160:	2301      	movs	r3, #1
 8015162:	9a04      	ldr	r2, [sp, #16]
 8015164:	3208      	adds	r2, #8
 8015166:	f109 0901 	add.w	r9, r9, #1
 801516a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801516e:	9204      	str	r2, [sp, #16]
 8015170:	e7c9      	b.n	8015106 <_strtod_l+0x4de>
 8015172:	d0ea      	beq.n	801514a <_strtod_l+0x522>
 8015174:	f1c8 0800 	rsb	r8, r8, #0
 8015178:	f018 020f 	ands.w	r2, r8, #15
 801517c:	d00a      	beq.n	8015194 <_strtod_l+0x56c>
 801517e:	4b13      	ldr	r3, [pc, #76]	; (80151cc <_strtod_l+0x5a4>)
 8015180:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015184:	4650      	mov	r0, sl
 8015186:	4659      	mov	r1, fp
 8015188:	e9d3 2300 	ldrd	r2, r3, [r3]
 801518c:	f7eb fb76 	bl	800087c <__aeabi_ddiv>
 8015190:	4682      	mov	sl, r0
 8015192:	468b      	mov	fp, r1
 8015194:	ea5f 1828 	movs.w	r8, r8, asr #4
 8015198:	d0d7      	beq.n	801514a <_strtod_l+0x522>
 801519a:	f1b8 0f1f 	cmp.w	r8, #31
 801519e:	dd1f      	ble.n	80151e0 <_strtod_l+0x5b8>
 80151a0:	2500      	movs	r5, #0
 80151a2:	462e      	mov	r6, r5
 80151a4:	9507      	str	r5, [sp, #28]
 80151a6:	9505      	str	r5, [sp, #20]
 80151a8:	2322      	movs	r3, #34	; 0x22
 80151aa:	f04f 0a00 	mov.w	sl, #0
 80151ae:	f04f 0b00 	mov.w	fp, #0
 80151b2:	6023      	str	r3, [r4, #0]
 80151b4:	e786      	b.n	80150c4 <_strtod_l+0x49c>
 80151b6:	bf00      	nop
 80151b8:	0801a191 	.word	0x0801a191
 80151bc:	0801a1d4 	.word	0x0801a1d4
 80151c0:	0801a189 	.word	0x0801a189
 80151c4:	0801a314 	.word	0x0801a314
 80151c8:	0801a5c0 	.word	0x0801a5c0
 80151cc:	0801a4a0 	.word	0x0801a4a0
 80151d0:	0801a478 	.word	0x0801a478
 80151d4:	7ff00000 	.word	0x7ff00000
 80151d8:	7ca00000 	.word	0x7ca00000
 80151dc:	7fefffff 	.word	0x7fefffff
 80151e0:	f018 0310 	ands.w	r3, r8, #16
 80151e4:	bf18      	it	ne
 80151e6:	236a      	movne	r3, #106	; 0x6a
 80151e8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8015598 <_strtod_l+0x970>
 80151ec:	9304      	str	r3, [sp, #16]
 80151ee:	4650      	mov	r0, sl
 80151f0:	4659      	mov	r1, fp
 80151f2:	2300      	movs	r3, #0
 80151f4:	f018 0f01 	tst.w	r8, #1
 80151f8:	d004      	beq.n	8015204 <_strtod_l+0x5dc>
 80151fa:	e9d9 2300 	ldrd	r2, r3, [r9]
 80151fe:	f7eb fa13 	bl	8000628 <__aeabi_dmul>
 8015202:	2301      	movs	r3, #1
 8015204:	ea5f 0868 	movs.w	r8, r8, asr #1
 8015208:	f109 0908 	add.w	r9, r9, #8
 801520c:	d1f2      	bne.n	80151f4 <_strtod_l+0x5cc>
 801520e:	b10b      	cbz	r3, 8015214 <_strtod_l+0x5ec>
 8015210:	4682      	mov	sl, r0
 8015212:	468b      	mov	fp, r1
 8015214:	9b04      	ldr	r3, [sp, #16]
 8015216:	b1c3      	cbz	r3, 801524a <_strtod_l+0x622>
 8015218:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801521c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8015220:	2b00      	cmp	r3, #0
 8015222:	4659      	mov	r1, fp
 8015224:	dd11      	ble.n	801524a <_strtod_l+0x622>
 8015226:	2b1f      	cmp	r3, #31
 8015228:	f340 8124 	ble.w	8015474 <_strtod_l+0x84c>
 801522c:	2b34      	cmp	r3, #52	; 0x34
 801522e:	bfde      	ittt	le
 8015230:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8015234:	f04f 33ff 	movle.w	r3, #4294967295
 8015238:	fa03 f202 	lslle.w	r2, r3, r2
 801523c:	f04f 0a00 	mov.w	sl, #0
 8015240:	bfcc      	ite	gt
 8015242:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8015246:	ea02 0b01 	andle.w	fp, r2, r1
 801524a:	2200      	movs	r2, #0
 801524c:	2300      	movs	r3, #0
 801524e:	4650      	mov	r0, sl
 8015250:	4659      	mov	r1, fp
 8015252:	f7eb fc51 	bl	8000af8 <__aeabi_dcmpeq>
 8015256:	2800      	cmp	r0, #0
 8015258:	d1a2      	bne.n	80151a0 <_strtod_l+0x578>
 801525a:	9b07      	ldr	r3, [sp, #28]
 801525c:	9300      	str	r3, [sp, #0]
 801525e:	9908      	ldr	r1, [sp, #32]
 8015260:	462b      	mov	r3, r5
 8015262:	463a      	mov	r2, r7
 8015264:	4620      	mov	r0, r4
 8015266:	f001 fe1f 	bl	8016ea8 <__s2b>
 801526a:	9007      	str	r0, [sp, #28]
 801526c:	2800      	cmp	r0, #0
 801526e:	f43f af1f 	beq.w	80150b0 <_strtod_l+0x488>
 8015272:	9b05      	ldr	r3, [sp, #20]
 8015274:	1b9e      	subs	r6, r3, r6
 8015276:	9b06      	ldr	r3, [sp, #24]
 8015278:	2b00      	cmp	r3, #0
 801527a:	bfb4      	ite	lt
 801527c:	4633      	movlt	r3, r6
 801527e:	2300      	movge	r3, #0
 8015280:	930c      	str	r3, [sp, #48]	; 0x30
 8015282:	9b06      	ldr	r3, [sp, #24]
 8015284:	2500      	movs	r5, #0
 8015286:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801528a:	9312      	str	r3, [sp, #72]	; 0x48
 801528c:	462e      	mov	r6, r5
 801528e:	9b07      	ldr	r3, [sp, #28]
 8015290:	4620      	mov	r0, r4
 8015292:	6859      	ldr	r1, [r3, #4]
 8015294:	f001 fd60 	bl	8016d58 <_Balloc>
 8015298:	9005      	str	r0, [sp, #20]
 801529a:	2800      	cmp	r0, #0
 801529c:	f43f af0c 	beq.w	80150b8 <_strtod_l+0x490>
 80152a0:	9b07      	ldr	r3, [sp, #28]
 80152a2:	691a      	ldr	r2, [r3, #16]
 80152a4:	3202      	adds	r2, #2
 80152a6:	f103 010c 	add.w	r1, r3, #12
 80152aa:	0092      	lsls	r2, r2, #2
 80152ac:	300c      	adds	r0, #12
 80152ae:	f7fe fde9 	bl	8013e84 <memcpy>
 80152b2:	ec4b ab10 	vmov	d0, sl, fp
 80152b6:	aa1a      	add	r2, sp, #104	; 0x68
 80152b8:	a919      	add	r1, sp, #100	; 0x64
 80152ba:	4620      	mov	r0, r4
 80152bc:	f002 f93a 	bl	8017534 <__d2b>
 80152c0:	ec4b ab18 	vmov	d8, sl, fp
 80152c4:	9018      	str	r0, [sp, #96]	; 0x60
 80152c6:	2800      	cmp	r0, #0
 80152c8:	f43f aef6 	beq.w	80150b8 <_strtod_l+0x490>
 80152cc:	2101      	movs	r1, #1
 80152ce:	4620      	mov	r0, r4
 80152d0:	f001 fe84 	bl	8016fdc <__i2b>
 80152d4:	4606      	mov	r6, r0
 80152d6:	2800      	cmp	r0, #0
 80152d8:	f43f aeee 	beq.w	80150b8 <_strtod_l+0x490>
 80152dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80152de:	9904      	ldr	r1, [sp, #16]
 80152e0:	2b00      	cmp	r3, #0
 80152e2:	bfab      	itete	ge
 80152e4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80152e6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80152e8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80152ea:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80152ee:	bfac      	ite	ge
 80152f0:	eb03 0902 	addge.w	r9, r3, r2
 80152f4:	1ad7      	sublt	r7, r2, r3
 80152f6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80152f8:	eba3 0801 	sub.w	r8, r3, r1
 80152fc:	4490      	add	r8, r2
 80152fe:	4ba1      	ldr	r3, [pc, #644]	; (8015584 <_strtod_l+0x95c>)
 8015300:	f108 38ff 	add.w	r8, r8, #4294967295
 8015304:	4598      	cmp	r8, r3
 8015306:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801530a:	f280 80c7 	bge.w	801549c <_strtod_l+0x874>
 801530e:	eba3 0308 	sub.w	r3, r3, r8
 8015312:	2b1f      	cmp	r3, #31
 8015314:	eba2 0203 	sub.w	r2, r2, r3
 8015318:	f04f 0101 	mov.w	r1, #1
 801531c:	f300 80b1 	bgt.w	8015482 <_strtod_l+0x85a>
 8015320:	fa01 f303 	lsl.w	r3, r1, r3
 8015324:	930d      	str	r3, [sp, #52]	; 0x34
 8015326:	2300      	movs	r3, #0
 8015328:	9308      	str	r3, [sp, #32]
 801532a:	eb09 0802 	add.w	r8, r9, r2
 801532e:	9b04      	ldr	r3, [sp, #16]
 8015330:	45c1      	cmp	r9, r8
 8015332:	4417      	add	r7, r2
 8015334:	441f      	add	r7, r3
 8015336:	464b      	mov	r3, r9
 8015338:	bfa8      	it	ge
 801533a:	4643      	movge	r3, r8
 801533c:	42bb      	cmp	r3, r7
 801533e:	bfa8      	it	ge
 8015340:	463b      	movge	r3, r7
 8015342:	2b00      	cmp	r3, #0
 8015344:	bfc2      	ittt	gt
 8015346:	eba8 0803 	subgt.w	r8, r8, r3
 801534a:	1aff      	subgt	r7, r7, r3
 801534c:	eba9 0903 	subgt.w	r9, r9, r3
 8015350:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015352:	2b00      	cmp	r3, #0
 8015354:	dd17      	ble.n	8015386 <_strtod_l+0x75e>
 8015356:	4631      	mov	r1, r6
 8015358:	461a      	mov	r2, r3
 801535a:	4620      	mov	r0, r4
 801535c:	f001 fefe 	bl	801715c <__pow5mult>
 8015360:	4606      	mov	r6, r0
 8015362:	2800      	cmp	r0, #0
 8015364:	f43f aea8 	beq.w	80150b8 <_strtod_l+0x490>
 8015368:	4601      	mov	r1, r0
 801536a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801536c:	4620      	mov	r0, r4
 801536e:	f001 fe4b 	bl	8017008 <__multiply>
 8015372:	900b      	str	r0, [sp, #44]	; 0x2c
 8015374:	2800      	cmp	r0, #0
 8015376:	f43f ae9f 	beq.w	80150b8 <_strtod_l+0x490>
 801537a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801537c:	4620      	mov	r0, r4
 801537e:	f001 fd2b 	bl	8016dd8 <_Bfree>
 8015382:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015384:	9318      	str	r3, [sp, #96]	; 0x60
 8015386:	f1b8 0f00 	cmp.w	r8, #0
 801538a:	f300 808c 	bgt.w	80154a6 <_strtod_l+0x87e>
 801538e:	9b06      	ldr	r3, [sp, #24]
 8015390:	2b00      	cmp	r3, #0
 8015392:	dd08      	ble.n	80153a6 <_strtod_l+0x77e>
 8015394:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015396:	9905      	ldr	r1, [sp, #20]
 8015398:	4620      	mov	r0, r4
 801539a:	f001 fedf 	bl	801715c <__pow5mult>
 801539e:	9005      	str	r0, [sp, #20]
 80153a0:	2800      	cmp	r0, #0
 80153a2:	f43f ae89 	beq.w	80150b8 <_strtod_l+0x490>
 80153a6:	2f00      	cmp	r7, #0
 80153a8:	dd08      	ble.n	80153bc <_strtod_l+0x794>
 80153aa:	9905      	ldr	r1, [sp, #20]
 80153ac:	463a      	mov	r2, r7
 80153ae:	4620      	mov	r0, r4
 80153b0:	f001 ff2e 	bl	8017210 <__lshift>
 80153b4:	9005      	str	r0, [sp, #20]
 80153b6:	2800      	cmp	r0, #0
 80153b8:	f43f ae7e 	beq.w	80150b8 <_strtod_l+0x490>
 80153bc:	f1b9 0f00 	cmp.w	r9, #0
 80153c0:	dd08      	ble.n	80153d4 <_strtod_l+0x7ac>
 80153c2:	4631      	mov	r1, r6
 80153c4:	464a      	mov	r2, r9
 80153c6:	4620      	mov	r0, r4
 80153c8:	f001 ff22 	bl	8017210 <__lshift>
 80153cc:	4606      	mov	r6, r0
 80153ce:	2800      	cmp	r0, #0
 80153d0:	f43f ae72 	beq.w	80150b8 <_strtod_l+0x490>
 80153d4:	9a05      	ldr	r2, [sp, #20]
 80153d6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80153d8:	4620      	mov	r0, r4
 80153da:	f001 ffa5 	bl	8017328 <__mdiff>
 80153de:	4605      	mov	r5, r0
 80153e0:	2800      	cmp	r0, #0
 80153e2:	f43f ae69 	beq.w	80150b8 <_strtod_l+0x490>
 80153e6:	68c3      	ldr	r3, [r0, #12]
 80153e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80153ea:	2300      	movs	r3, #0
 80153ec:	60c3      	str	r3, [r0, #12]
 80153ee:	4631      	mov	r1, r6
 80153f0:	f001 ff7e 	bl	80172f0 <__mcmp>
 80153f4:	2800      	cmp	r0, #0
 80153f6:	da60      	bge.n	80154ba <_strtod_l+0x892>
 80153f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80153fa:	ea53 030a 	orrs.w	r3, r3, sl
 80153fe:	f040 8082 	bne.w	8015506 <_strtod_l+0x8de>
 8015402:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015406:	2b00      	cmp	r3, #0
 8015408:	d17d      	bne.n	8015506 <_strtod_l+0x8de>
 801540a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801540e:	0d1b      	lsrs	r3, r3, #20
 8015410:	051b      	lsls	r3, r3, #20
 8015412:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8015416:	d976      	bls.n	8015506 <_strtod_l+0x8de>
 8015418:	696b      	ldr	r3, [r5, #20]
 801541a:	b913      	cbnz	r3, 8015422 <_strtod_l+0x7fa>
 801541c:	692b      	ldr	r3, [r5, #16]
 801541e:	2b01      	cmp	r3, #1
 8015420:	dd71      	ble.n	8015506 <_strtod_l+0x8de>
 8015422:	4629      	mov	r1, r5
 8015424:	2201      	movs	r2, #1
 8015426:	4620      	mov	r0, r4
 8015428:	f001 fef2 	bl	8017210 <__lshift>
 801542c:	4631      	mov	r1, r6
 801542e:	4605      	mov	r5, r0
 8015430:	f001 ff5e 	bl	80172f0 <__mcmp>
 8015434:	2800      	cmp	r0, #0
 8015436:	dd66      	ble.n	8015506 <_strtod_l+0x8de>
 8015438:	9904      	ldr	r1, [sp, #16]
 801543a:	4a53      	ldr	r2, [pc, #332]	; (8015588 <_strtod_l+0x960>)
 801543c:	465b      	mov	r3, fp
 801543e:	2900      	cmp	r1, #0
 8015440:	f000 8081 	beq.w	8015546 <_strtod_l+0x91e>
 8015444:	ea02 010b 	and.w	r1, r2, fp
 8015448:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801544c:	dc7b      	bgt.n	8015546 <_strtod_l+0x91e>
 801544e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8015452:	f77f aea9 	ble.w	80151a8 <_strtod_l+0x580>
 8015456:	4b4d      	ldr	r3, [pc, #308]	; (801558c <_strtod_l+0x964>)
 8015458:	4650      	mov	r0, sl
 801545a:	4659      	mov	r1, fp
 801545c:	2200      	movs	r2, #0
 801545e:	f7eb f8e3 	bl	8000628 <__aeabi_dmul>
 8015462:	460b      	mov	r3, r1
 8015464:	4303      	orrs	r3, r0
 8015466:	bf08      	it	eq
 8015468:	2322      	moveq	r3, #34	; 0x22
 801546a:	4682      	mov	sl, r0
 801546c:	468b      	mov	fp, r1
 801546e:	bf08      	it	eq
 8015470:	6023      	streq	r3, [r4, #0]
 8015472:	e62b      	b.n	80150cc <_strtod_l+0x4a4>
 8015474:	f04f 32ff 	mov.w	r2, #4294967295
 8015478:	fa02 f303 	lsl.w	r3, r2, r3
 801547c:	ea03 0a0a 	and.w	sl, r3, sl
 8015480:	e6e3      	b.n	801524a <_strtod_l+0x622>
 8015482:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8015486:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801548a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801548e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8015492:	fa01 f308 	lsl.w	r3, r1, r8
 8015496:	9308      	str	r3, [sp, #32]
 8015498:	910d      	str	r1, [sp, #52]	; 0x34
 801549a:	e746      	b.n	801532a <_strtod_l+0x702>
 801549c:	2300      	movs	r3, #0
 801549e:	9308      	str	r3, [sp, #32]
 80154a0:	2301      	movs	r3, #1
 80154a2:	930d      	str	r3, [sp, #52]	; 0x34
 80154a4:	e741      	b.n	801532a <_strtod_l+0x702>
 80154a6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80154a8:	4642      	mov	r2, r8
 80154aa:	4620      	mov	r0, r4
 80154ac:	f001 feb0 	bl	8017210 <__lshift>
 80154b0:	9018      	str	r0, [sp, #96]	; 0x60
 80154b2:	2800      	cmp	r0, #0
 80154b4:	f47f af6b 	bne.w	801538e <_strtod_l+0x766>
 80154b8:	e5fe      	b.n	80150b8 <_strtod_l+0x490>
 80154ba:	465f      	mov	r7, fp
 80154bc:	d16e      	bne.n	801559c <_strtod_l+0x974>
 80154be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80154c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80154c4:	b342      	cbz	r2, 8015518 <_strtod_l+0x8f0>
 80154c6:	4a32      	ldr	r2, [pc, #200]	; (8015590 <_strtod_l+0x968>)
 80154c8:	4293      	cmp	r3, r2
 80154ca:	d128      	bne.n	801551e <_strtod_l+0x8f6>
 80154cc:	9b04      	ldr	r3, [sp, #16]
 80154ce:	4651      	mov	r1, sl
 80154d0:	b1eb      	cbz	r3, 801550e <_strtod_l+0x8e6>
 80154d2:	4b2d      	ldr	r3, [pc, #180]	; (8015588 <_strtod_l+0x960>)
 80154d4:	403b      	ands	r3, r7
 80154d6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80154da:	f04f 32ff 	mov.w	r2, #4294967295
 80154de:	d819      	bhi.n	8015514 <_strtod_l+0x8ec>
 80154e0:	0d1b      	lsrs	r3, r3, #20
 80154e2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80154e6:	fa02 f303 	lsl.w	r3, r2, r3
 80154ea:	4299      	cmp	r1, r3
 80154ec:	d117      	bne.n	801551e <_strtod_l+0x8f6>
 80154ee:	4b29      	ldr	r3, [pc, #164]	; (8015594 <_strtod_l+0x96c>)
 80154f0:	429f      	cmp	r7, r3
 80154f2:	d102      	bne.n	80154fa <_strtod_l+0x8d2>
 80154f4:	3101      	adds	r1, #1
 80154f6:	f43f addf 	beq.w	80150b8 <_strtod_l+0x490>
 80154fa:	4b23      	ldr	r3, [pc, #140]	; (8015588 <_strtod_l+0x960>)
 80154fc:	403b      	ands	r3, r7
 80154fe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8015502:	f04f 0a00 	mov.w	sl, #0
 8015506:	9b04      	ldr	r3, [sp, #16]
 8015508:	2b00      	cmp	r3, #0
 801550a:	d1a4      	bne.n	8015456 <_strtod_l+0x82e>
 801550c:	e5de      	b.n	80150cc <_strtod_l+0x4a4>
 801550e:	f04f 33ff 	mov.w	r3, #4294967295
 8015512:	e7ea      	b.n	80154ea <_strtod_l+0x8c2>
 8015514:	4613      	mov	r3, r2
 8015516:	e7e8      	b.n	80154ea <_strtod_l+0x8c2>
 8015518:	ea53 030a 	orrs.w	r3, r3, sl
 801551c:	d08c      	beq.n	8015438 <_strtod_l+0x810>
 801551e:	9b08      	ldr	r3, [sp, #32]
 8015520:	b1db      	cbz	r3, 801555a <_strtod_l+0x932>
 8015522:	423b      	tst	r3, r7
 8015524:	d0ef      	beq.n	8015506 <_strtod_l+0x8de>
 8015526:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015528:	9a04      	ldr	r2, [sp, #16]
 801552a:	4650      	mov	r0, sl
 801552c:	4659      	mov	r1, fp
 801552e:	b1c3      	cbz	r3, 8015562 <_strtod_l+0x93a>
 8015530:	f7ff fb5e 	bl	8014bf0 <sulp>
 8015534:	4602      	mov	r2, r0
 8015536:	460b      	mov	r3, r1
 8015538:	ec51 0b18 	vmov	r0, r1, d8
 801553c:	f7ea febe 	bl	80002bc <__adddf3>
 8015540:	4682      	mov	sl, r0
 8015542:	468b      	mov	fp, r1
 8015544:	e7df      	b.n	8015506 <_strtod_l+0x8de>
 8015546:	4013      	ands	r3, r2
 8015548:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801554c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8015550:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8015554:	f04f 3aff 	mov.w	sl, #4294967295
 8015558:	e7d5      	b.n	8015506 <_strtod_l+0x8de>
 801555a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801555c:	ea13 0f0a 	tst.w	r3, sl
 8015560:	e7e0      	b.n	8015524 <_strtod_l+0x8fc>
 8015562:	f7ff fb45 	bl	8014bf0 <sulp>
 8015566:	4602      	mov	r2, r0
 8015568:	460b      	mov	r3, r1
 801556a:	ec51 0b18 	vmov	r0, r1, d8
 801556e:	f7ea fea3 	bl	80002b8 <__aeabi_dsub>
 8015572:	2200      	movs	r2, #0
 8015574:	2300      	movs	r3, #0
 8015576:	4682      	mov	sl, r0
 8015578:	468b      	mov	fp, r1
 801557a:	f7eb fabd 	bl	8000af8 <__aeabi_dcmpeq>
 801557e:	2800      	cmp	r0, #0
 8015580:	d0c1      	beq.n	8015506 <_strtod_l+0x8de>
 8015582:	e611      	b.n	80151a8 <_strtod_l+0x580>
 8015584:	fffffc02 	.word	0xfffffc02
 8015588:	7ff00000 	.word	0x7ff00000
 801558c:	39500000 	.word	0x39500000
 8015590:	000fffff 	.word	0x000fffff
 8015594:	7fefffff 	.word	0x7fefffff
 8015598:	0801a1e8 	.word	0x0801a1e8
 801559c:	4631      	mov	r1, r6
 801559e:	4628      	mov	r0, r5
 80155a0:	f002 f824 	bl	80175ec <__ratio>
 80155a4:	ec59 8b10 	vmov	r8, r9, d0
 80155a8:	ee10 0a10 	vmov	r0, s0
 80155ac:	2200      	movs	r2, #0
 80155ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80155b2:	4649      	mov	r1, r9
 80155b4:	f7eb fab4 	bl	8000b20 <__aeabi_dcmple>
 80155b8:	2800      	cmp	r0, #0
 80155ba:	d07a      	beq.n	80156b2 <_strtod_l+0xa8a>
 80155bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80155be:	2b00      	cmp	r3, #0
 80155c0:	d04a      	beq.n	8015658 <_strtod_l+0xa30>
 80155c2:	4b95      	ldr	r3, [pc, #596]	; (8015818 <_strtod_l+0xbf0>)
 80155c4:	2200      	movs	r2, #0
 80155c6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80155ca:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8015818 <_strtod_l+0xbf0>
 80155ce:	f04f 0800 	mov.w	r8, #0
 80155d2:	4b92      	ldr	r3, [pc, #584]	; (801581c <_strtod_l+0xbf4>)
 80155d4:	403b      	ands	r3, r7
 80155d6:	930d      	str	r3, [sp, #52]	; 0x34
 80155d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80155da:	4b91      	ldr	r3, [pc, #580]	; (8015820 <_strtod_l+0xbf8>)
 80155dc:	429a      	cmp	r2, r3
 80155de:	f040 80b0 	bne.w	8015742 <_strtod_l+0xb1a>
 80155e2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80155e6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80155ea:	ec4b ab10 	vmov	d0, sl, fp
 80155ee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80155f2:	f001 ff23 	bl	801743c <__ulp>
 80155f6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80155fa:	ec53 2b10 	vmov	r2, r3, d0
 80155fe:	f7eb f813 	bl	8000628 <__aeabi_dmul>
 8015602:	4652      	mov	r2, sl
 8015604:	465b      	mov	r3, fp
 8015606:	f7ea fe59 	bl	80002bc <__adddf3>
 801560a:	460b      	mov	r3, r1
 801560c:	4983      	ldr	r1, [pc, #524]	; (801581c <_strtod_l+0xbf4>)
 801560e:	4a85      	ldr	r2, [pc, #532]	; (8015824 <_strtod_l+0xbfc>)
 8015610:	4019      	ands	r1, r3
 8015612:	4291      	cmp	r1, r2
 8015614:	4682      	mov	sl, r0
 8015616:	d960      	bls.n	80156da <_strtod_l+0xab2>
 8015618:	ee18 3a90 	vmov	r3, s17
 801561c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8015620:	4293      	cmp	r3, r2
 8015622:	d104      	bne.n	801562e <_strtod_l+0xa06>
 8015624:	ee18 3a10 	vmov	r3, s16
 8015628:	3301      	adds	r3, #1
 801562a:	f43f ad45 	beq.w	80150b8 <_strtod_l+0x490>
 801562e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8015830 <_strtod_l+0xc08>
 8015632:	f04f 3aff 	mov.w	sl, #4294967295
 8015636:	9918      	ldr	r1, [sp, #96]	; 0x60
 8015638:	4620      	mov	r0, r4
 801563a:	f001 fbcd 	bl	8016dd8 <_Bfree>
 801563e:	9905      	ldr	r1, [sp, #20]
 8015640:	4620      	mov	r0, r4
 8015642:	f001 fbc9 	bl	8016dd8 <_Bfree>
 8015646:	4631      	mov	r1, r6
 8015648:	4620      	mov	r0, r4
 801564a:	f001 fbc5 	bl	8016dd8 <_Bfree>
 801564e:	4629      	mov	r1, r5
 8015650:	4620      	mov	r0, r4
 8015652:	f001 fbc1 	bl	8016dd8 <_Bfree>
 8015656:	e61a      	b.n	801528e <_strtod_l+0x666>
 8015658:	f1ba 0f00 	cmp.w	sl, #0
 801565c:	d11b      	bne.n	8015696 <_strtod_l+0xa6e>
 801565e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015662:	b9f3      	cbnz	r3, 80156a2 <_strtod_l+0xa7a>
 8015664:	4b6c      	ldr	r3, [pc, #432]	; (8015818 <_strtod_l+0xbf0>)
 8015666:	2200      	movs	r2, #0
 8015668:	4640      	mov	r0, r8
 801566a:	4649      	mov	r1, r9
 801566c:	f7eb fa4e 	bl	8000b0c <__aeabi_dcmplt>
 8015670:	b9d0      	cbnz	r0, 80156a8 <_strtod_l+0xa80>
 8015672:	4640      	mov	r0, r8
 8015674:	4649      	mov	r1, r9
 8015676:	4b6c      	ldr	r3, [pc, #432]	; (8015828 <_strtod_l+0xc00>)
 8015678:	2200      	movs	r2, #0
 801567a:	f7ea ffd5 	bl	8000628 <__aeabi_dmul>
 801567e:	4680      	mov	r8, r0
 8015680:	4689      	mov	r9, r1
 8015682:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8015686:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 801568a:	9315      	str	r3, [sp, #84]	; 0x54
 801568c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8015690:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015694:	e79d      	b.n	80155d2 <_strtod_l+0x9aa>
 8015696:	f1ba 0f01 	cmp.w	sl, #1
 801569a:	d102      	bne.n	80156a2 <_strtod_l+0xa7a>
 801569c:	2f00      	cmp	r7, #0
 801569e:	f43f ad83 	beq.w	80151a8 <_strtod_l+0x580>
 80156a2:	4b62      	ldr	r3, [pc, #392]	; (801582c <_strtod_l+0xc04>)
 80156a4:	2200      	movs	r2, #0
 80156a6:	e78e      	b.n	80155c6 <_strtod_l+0x99e>
 80156a8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8015828 <_strtod_l+0xc00>
 80156ac:	f04f 0800 	mov.w	r8, #0
 80156b0:	e7e7      	b.n	8015682 <_strtod_l+0xa5a>
 80156b2:	4b5d      	ldr	r3, [pc, #372]	; (8015828 <_strtod_l+0xc00>)
 80156b4:	4640      	mov	r0, r8
 80156b6:	4649      	mov	r1, r9
 80156b8:	2200      	movs	r2, #0
 80156ba:	f7ea ffb5 	bl	8000628 <__aeabi_dmul>
 80156be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80156c0:	4680      	mov	r8, r0
 80156c2:	4689      	mov	r9, r1
 80156c4:	b933      	cbnz	r3, 80156d4 <_strtod_l+0xaac>
 80156c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80156ca:	900e      	str	r0, [sp, #56]	; 0x38
 80156cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80156ce:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80156d2:	e7dd      	b.n	8015690 <_strtod_l+0xa68>
 80156d4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80156d8:	e7f9      	b.n	80156ce <_strtod_l+0xaa6>
 80156da:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80156de:	9b04      	ldr	r3, [sp, #16]
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	d1a8      	bne.n	8015636 <_strtod_l+0xa0e>
 80156e4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80156e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80156ea:	0d1b      	lsrs	r3, r3, #20
 80156ec:	051b      	lsls	r3, r3, #20
 80156ee:	429a      	cmp	r2, r3
 80156f0:	d1a1      	bne.n	8015636 <_strtod_l+0xa0e>
 80156f2:	4640      	mov	r0, r8
 80156f4:	4649      	mov	r1, r9
 80156f6:	f7eb fb47 	bl	8000d88 <__aeabi_d2lz>
 80156fa:	f7ea ff67 	bl	80005cc <__aeabi_l2d>
 80156fe:	4602      	mov	r2, r0
 8015700:	460b      	mov	r3, r1
 8015702:	4640      	mov	r0, r8
 8015704:	4649      	mov	r1, r9
 8015706:	f7ea fdd7 	bl	80002b8 <__aeabi_dsub>
 801570a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801570c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015710:	ea43 030a 	orr.w	r3, r3, sl
 8015714:	4313      	orrs	r3, r2
 8015716:	4680      	mov	r8, r0
 8015718:	4689      	mov	r9, r1
 801571a:	d055      	beq.n	80157c8 <_strtod_l+0xba0>
 801571c:	a336      	add	r3, pc, #216	; (adr r3, 80157f8 <_strtod_l+0xbd0>)
 801571e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015722:	f7eb f9f3 	bl	8000b0c <__aeabi_dcmplt>
 8015726:	2800      	cmp	r0, #0
 8015728:	f47f acd0 	bne.w	80150cc <_strtod_l+0x4a4>
 801572c:	a334      	add	r3, pc, #208	; (adr r3, 8015800 <_strtod_l+0xbd8>)
 801572e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015732:	4640      	mov	r0, r8
 8015734:	4649      	mov	r1, r9
 8015736:	f7eb fa07 	bl	8000b48 <__aeabi_dcmpgt>
 801573a:	2800      	cmp	r0, #0
 801573c:	f43f af7b 	beq.w	8015636 <_strtod_l+0xa0e>
 8015740:	e4c4      	b.n	80150cc <_strtod_l+0x4a4>
 8015742:	9b04      	ldr	r3, [sp, #16]
 8015744:	b333      	cbz	r3, 8015794 <_strtod_l+0xb6c>
 8015746:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015748:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801574c:	d822      	bhi.n	8015794 <_strtod_l+0xb6c>
 801574e:	a32e      	add	r3, pc, #184	; (adr r3, 8015808 <_strtod_l+0xbe0>)
 8015750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015754:	4640      	mov	r0, r8
 8015756:	4649      	mov	r1, r9
 8015758:	f7eb f9e2 	bl	8000b20 <__aeabi_dcmple>
 801575c:	b1a0      	cbz	r0, 8015788 <_strtod_l+0xb60>
 801575e:	4649      	mov	r1, r9
 8015760:	4640      	mov	r0, r8
 8015762:	f7eb fa39 	bl	8000bd8 <__aeabi_d2uiz>
 8015766:	2801      	cmp	r0, #1
 8015768:	bf38      	it	cc
 801576a:	2001      	movcc	r0, #1
 801576c:	f7ea fee2 	bl	8000534 <__aeabi_ui2d>
 8015770:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015772:	4680      	mov	r8, r0
 8015774:	4689      	mov	r9, r1
 8015776:	bb23      	cbnz	r3, 80157c2 <_strtod_l+0xb9a>
 8015778:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801577c:	9010      	str	r0, [sp, #64]	; 0x40
 801577e:	9311      	str	r3, [sp, #68]	; 0x44
 8015780:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8015784:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015788:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801578a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801578c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8015790:	1a9b      	subs	r3, r3, r2
 8015792:	9309      	str	r3, [sp, #36]	; 0x24
 8015794:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015798:	eeb0 0a48 	vmov.f32	s0, s16
 801579c:	eef0 0a68 	vmov.f32	s1, s17
 80157a0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80157a4:	f001 fe4a 	bl	801743c <__ulp>
 80157a8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80157ac:	ec53 2b10 	vmov	r2, r3, d0
 80157b0:	f7ea ff3a 	bl	8000628 <__aeabi_dmul>
 80157b4:	ec53 2b18 	vmov	r2, r3, d8
 80157b8:	f7ea fd80 	bl	80002bc <__adddf3>
 80157bc:	4682      	mov	sl, r0
 80157be:	468b      	mov	fp, r1
 80157c0:	e78d      	b.n	80156de <_strtod_l+0xab6>
 80157c2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80157c6:	e7db      	b.n	8015780 <_strtod_l+0xb58>
 80157c8:	a311      	add	r3, pc, #68	; (adr r3, 8015810 <_strtod_l+0xbe8>)
 80157ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157ce:	f7eb f99d 	bl	8000b0c <__aeabi_dcmplt>
 80157d2:	e7b2      	b.n	801573a <_strtod_l+0xb12>
 80157d4:	2300      	movs	r3, #0
 80157d6:	930a      	str	r3, [sp, #40]	; 0x28
 80157d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80157da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80157dc:	6013      	str	r3, [r2, #0]
 80157de:	f7ff ba6b 	b.w	8014cb8 <_strtod_l+0x90>
 80157e2:	2a65      	cmp	r2, #101	; 0x65
 80157e4:	f43f ab5f 	beq.w	8014ea6 <_strtod_l+0x27e>
 80157e8:	2a45      	cmp	r2, #69	; 0x45
 80157ea:	f43f ab5c 	beq.w	8014ea6 <_strtod_l+0x27e>
 80157ee:	2301      	movs	r3, #1
 80157f0:	f7ff bb94 	b.w	8014f1c <_strtod_l+0x2f4>
 80157f4:	f3af 8000 	nop.w
 80157f8:	94a03595 	.word	0x94a03595
 80157fc:	3fdfffff 	.word	0x3fdfffff
 8015800:	35afe535 	.word	0x35afe535
 8015804:	3fe00000 	.word	0x3fe00000
 8015808:	ffc00000 	.word	0xffc00000
 801580c:	41dfffff 	.word	0x41dfffff
 8015810:	94a03595 	.word	0x94a03595
 8015814:	3fcfffff 	.word	0x3fcfffff
 8015818:	3ff00000 	.word	0x3ff00000
 801581c:	7ff00000 	.word	0x7ff00000
 8015820:	7fe00000 	.word	0x7fe00000
 8015824:	7c9fffff 	.word	0x7c9fffff
 8015828:	3fe00000 	.word	0x3fe00000
 801582c:	bff00000 	.word	0xbff00000
 8015830:	7fefffff 	.word	0x7fefffff

08015834 <_strtod_r>:
 8015834:	4b01      	ldr	r3, [pc, #4]	; (801583c <_strtod_r+0x8>)
 8015836:	f7ff b9f7 	b.w	8014c28 <_strtod_l>
 801583a:	bf00      	nop
 801583c:	2000010c 	.word	0x2000010c

08015840 <_strtol_l.constprop.0>:
 8015840:	2b01      	cmp	r3, #1
 8015842:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015846:	d001      	beq.n	801584c <_strtol_l.constprop.0+0xc>
 8015848:	2b24      	cmp	r3, #36	; 0x24
 801584a:	d906      	bls.n	801585a <_strtol_l.constprop.0+0x1a>
 801584c:	f7fe faf0 	bl	8013e30 <__errno>
 8015850:	2316      	movs	r3, #22
 8015852:	6003      	str	r3, [r0, #0]
 8015854:	2000      	movs	r0, #0
 8015856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801585a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8015940 <_strtol_l.constprop.0+0x100>
 801585e:	460d      	mov	r5, r1
 8015860:	462e      	mov	r6, r5
 8015862:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015866:	f814 700c 	ldrb.w	r7, [r4, ip]
 801586a:	f017 0708 	ands.w	r7, r7, #8
 801586e:	d1f7      	bne.n	8015860 <_strtol_l.constprop.0+0x20>
 8015870:	2c2d      	cmp	r4, #45	; 0x2d
 8015872:	d132      	bne.n	80158da <_strtol_l.constprop.0+0x9a>
 8015874:	782c      	ldrb	r4, [r5, #0]
 8015876:	2701      	movs	r7, #1
 8015878:	1cb5      	adds	r5, r6, #2
 801587a:	2b00      	cmp	r3, #0
 801587c:	d05b      	beq.n	8015936 <_strtol_l.constprop.0+0xf6>
 801587e:	2b10      	cmp	r3, #16
 8015880:	d109      	bne.n	8015896 <_strtol_l.constprop.0+0x56>
 8015882:	2c30      	cmp	r4, #48	; 0x30
 8015884:	d107      	bne.n	8015896 <_strtol_l.constprop.0+0x56>
 8015886:	782c      	ldrb	r4, [r5, #0]
 8015888:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801588c:	2c58      	cmp	r4, #88	; 0x58
 801588e:	d14d      	bne.n	801592c <_strtol_l.constprop.0+0xec>
 8015890:	786c      	ldrb	r4, [r5, #1]
 8015892:	2310      	movs	r3, #16
 8015894:	3502      	adds	r5, #2
 8015896:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801589a:	f108 38ff 	add.w	r8, r8, #4294967295
 801589e:	f04f 0c00 	mov.w	ip, #0
 80158a2:	fbb8 f9f3 	udiv	r9, r8, r3
 80158a6:	4666      	mov	r6, ip
 80158a8:	fb03 8a19 	mls	sl, r3, r9, r8
 80158ac:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80158b0:	f1be 0f09 	cmp.w	lr, #9
 80158b4:	d816      	bhi.n	80158e4 <_strtol_l.constprop.0+0xa4>
 80158b6:	4674      	mov	r4, lr
 80158b8:	42a3      	cmp	r3, r4
 80158ba:	dd24      	ble.n	8015906 <_strtol_l.constprop.0+0xc6>
 80158bc:	f1bc 0f00 	cmp.w	ip, #0
 80158c0:	db1e      	blt.n	8015900 <_strtol_l.constprop.0+0xc0>
 80158c2:	45b1      	cmp	r9, r6
 80158c4:	d31c      	bcc.n	8015900 <_strtol_l.constprop.0+0xc0>
 80158c6:	d101      	bne.n	80158cc <_strtol_l.constprop.0+0x8c>
 80158c8:	45a2      	cmp	sl, r4
 80158ca:	db19      	blt.n	8015900 <_strtol_l.constprop.0+0xc0>
 80158cc:	fb06 4603 	mla	r6, r6, r3, r4
 80158d0:	f04f 0c01 	mov.w	ip, #1
 80158d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80158d8:	e7e8      	b.n	80158ac <_strtol_l.constprop.0+0x6c>
 80158da:	2c2b      	cmp	r4, #43	; 0x2b
 80158dc:	bf04      	itt	eq
 80158de:	782c      	ldrbeq	r4, [r5, #0]
 80158e0:	1cb5      	addeq	r5, r6, #2
 80158e2:	e7ca      	b.n	801587a <_strtol_l.constprop.0+0x3a>
 80158e4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80158e8:	f1be 0f19 	cmp.w	lr, #25
 80158ec:	d801      	bhi.n	80158f2 <_strtol_l.constprop.0+0xb2>
 80158ee:	3c37      	subs	r4, #55	; 0x37
 80158f0:	e7e2      	b.n	80158b8 <_strtol_l.constprop.0+0x78>
 80158f2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80158f6:	f1be 0f19 	cmp.w	lr, #25
 80158fa:	d804      	bhi.n	8015906 <_strtol_l.constprop.0+0xc6>
 80158fc:	3c57      	subs	r4, #87	; 0x57
 80158fe:	e7db      	b.n	80158b8 <_strtol_l.constprop.0+0x78>
 8015900:	f04f 3cff 	mov.w	ip, #4294967295
 8015904:	e7e6      	b.n	80158d4 <_strtol_l.constprop.0+0x94>
 8015906:	f1bc 0f00 	cmp.w	ip, #0
 801590a:	da05      	bge.n	8015918 <_strtol_l.constprop.0+0xd8>
 801590c:	2322      	movs	r3, #34	; 0x22
 801590e:	6003      	str	r3, [r0, #0]
 8015910:	4646      	mov	r6, r8
 8015912:	b942      	cbnz	r2, 8015926 <_strtol_l.constprop.0+0xe6>
 8015914:	4630      	mov	r0, r6
 8015916:	e79e      	b.n	8015856 <_strtol_l.constprop.0+0x16>
 8015918:	b107      	cbz	r7, 801591c <_strtol_l.constprop.0+0xdc>
 801591a:	4276      	negs	r6, r6
 801591c:	2a00      	cmp	r2, #0
 801591e:	d0f9      	beq.n	8015914 <_strtol_l.constprop.0+0xd4>
 8015920:	f1bc 0f00 	cmp.w	ip, #0
 8015924:	d000      	beq.n	8015928 <_strtol_l.constprop.0+0xe8>
 8015926:	1e69      	subs	r1, r5, #1
 8015928:	6011      	str	r1, [r2, #0]
 801592a:	e7f3      	b.n	8015914 <_strtol_l.constprop.0+0xd4>
 801592c:	2430      	movs	r4, #48	; 0x30
 801592e:	2b00      	cmp	r3, #0
 8015930:	d1b1      	bne.n	8015896 <_strtol_l.constprop.0+0x56>
 8015932:	2308      	movs	r3, #8
 8015934:	e7af      	b.n	8015896 <_strtol_l.constprop.0+0x56>
 8015936:	2c30      	cmp	r4, #48	; 0x30
 8015938:	d0a5      	beq.n	8015886 <_strtol_l.constprop.0+0x46>
 801593a:	230a      	movs	r3, #10
 801593c:	e7ab      	b.n	8015896 <_strtol_l.constprop.0+0x56>
 801593e:	bf00      	nop
 8015940:	0801a211 	.word	0x0801a211

08015944 <_strtol_r>:
 8015944:	f7ff bf7c 	b.w	8015840 <_strtol_l.constprop.0>

08015948 <quorem>:
 8015948:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801594c:	6903      	ldr	r3, [r0, #16]
 801594e:	690c      	ldr	r4, [r1, #16]
 8015950:	42a3      	cmp	r3, r4
 8015952:	4607      	mov	r7, r0
 8015954:	f2c0 8081 	blt.w	8015a5a <quorem+0x112>
 8015958:	3c01      	subs	r4, #1
 801595a:	f101 0814 	add.w	r8, r1, #20
 801595e:	f100 0514 	add.w	r5, r0, #20
 8015962:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015966:	9301      	str	r3, [sp, #4]
 8015968:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801596c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015970:	3301      	adds	r3, #1
 8015972:	429a      	cmp	r2, r3
 8015974:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8015978:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801597c:	fbb2 f6f3 	udiv	r6, r2, r3
 8015980:	d331      	bcc.n	80159e6 <quorem+0x9e>
 8015982:	f04f 0e00 	mov.w	lr, #0
 8015986:	4640      	mov	r0, r8
 8015988:	46ac      	mov	ip, r5
 801598a:	46f2      	mov	sl, lr
 801598c:	f850 2b04 	ldr.w	r2, [r0], #4
 8015990:	b293      	uxth	r3, r2
 8015992:	fb06 e303 	mla	r3, r6, r3, lr
 8015996:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801599a:	b29b      	uxth	r3, r3
 801599c:	ebaa 0303 	sub.w	r3, sl, r3
 80159a0:	f8dc a000 	ldr.w	sl, [ip]
 80159a4:	0c12      	lsrs	r2, r2, #16
 80159a6:	fa13 f38a 	uxtah	r3, r3, sl
 80159aa:	fb06 e202 	mla	r2, r6, r2, lr
 80159ae:	9300      	str	r3, [sp, #0]
 80159b0:	9b00      	ldr	r3, [sp, #0]
 80159b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80159b6:	b292      	uxth	r2, r2
 80159b8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80159bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80159c0:	f8bd 3000 	ldrh.w	r3, [sp]
 80159c4:	4581      	cmp	r9, r0
 80159c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80159ca:	f84c 3b04 	str.w	r3, [ip], #4
 80159ce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80159d2:	d2db      	bcs.n	801598c <quorem+0x44>
 80159d4:	f855 300b 	ldr.w	r3, [r5, fp]
 80159d8:	b92b      	cbnz	r3, 80159e6 <quorem+0x9e>
 80159da:	9b01      	ldr	r3, [sp, #4]
 80159dc:	3b04      	subs	r3, #4
 80159de:	429d      	cmp	r5, r3
 80159e0:	461a      	mov	r2, r3
 80159e2:	d32e      	bcc.n	8015a42 <quorem+0xfa>
 80159e4:	613c      	str	r4, [r7, #16]
 80159e6:	4638      	mov	r0, r7
 80159e8:	f001 fc82 	bl	80172f0 <__mcmp>
 80159ec:	2800      	cmp	r0, #0
 80159ee:	db24      	blt.n	8015a3a <quorem+0xf2>
 80159f0:	3601      	adds	r6, #1
 80159f2:	4628      	mov	r0, r5
 80159f4:	f04f 0c00 	mov.w	ip, #0
 80159f8:	f858 2b04 	ldr.w	r2, [r8], #4
 80159fc:	f8d0 e000 	ldr.w	lr, [r0]
 8015a00:	b293      	uxth	r3, r2
 8015a02:	ebac 0303 	sub.w	r3, ip, r3
 8015a06:	0c12      	lsrs	r2, r2, #16
 8015a08:	fa13 f38e 	uxtah	r3, r3, lr
 8015a0c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8015a10:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015a14:	b29b      	uxth	r3, r3
 8015a16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015a1a:	45c1      	cmp	r9, r8
 8015a1c:	f840 3b04 	str.w	r3, [r0], #4
 8015a20:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8015a24:	d2e8      	bcs.n	80159f8 <quorem+0xb0>
 8015a26:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015a2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015a2e:	b922      	cbnz	r2, 8015a3a <quorem+0xf2>
 8015a30:	3b04      	subs	r3, #4
 8015a32:	429d      	cmp	r5, r3
 8015a34:	461a      	mov	r2, r3
 8015a36:	d30a      	bcc.n	8015a4e <quorem+0x106>
 8015a38:	613c      	str	r4, [r7, #16]
 8015a3a:	4630      	mov	r0, r6
 8015a3c:	b003      	add	sp, #12
 8015a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a42:	6812      	ldr	r2, [r2, #0]
 8015a44:	3b04      	subs	r3, #4
 8015a46:	2a00      	cmp	r2, #0
 8015a48:	d1cc      	bne.n	80159e4 <quorem+0x9c>
 8015a4a:	3c01      	subs	r4, #1
 8015a4c:	e7c7      	b.n	80159de <quorem+0x96>
 8015a4e:	6812      	ldr	r2, [r2, #0]
 8015a50:	3b04      	subs	r3, #4
 8015a52:	2a00      	cmp	r2, #0
 8015a54:	d1f0      	bne.n	8015a38 <quorem+0xf0>
 8015a56:	3c01      	subs	r4, #1
 8015a58:	e7eb      	b.n	8015a32 <quorem+0xea>
 8015a5a:	2000      	movs	r0, #0
 8015a5c:	e7ee      	b.n	8015a3c <quorem+0xf4>
	...

08015a60 <_dtoa_r>:
 8015a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a64:	ed2d 8b04 	vpush	{d8-d9}
 8015a68:	ec57 6b10 	vmov	r6, r7, d0
 8015a6c:	b093      	sub	sp, #76	; 0x4c
 8015a6e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015a70:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8015a74:	9106      	str	r1, [sp, #24]
 8015a76:	ee10 aa10 	vmov	sl, s0
 8015a7a:	4604      	mov	r4, r0
 8015a7c:	9209      	str	r2, [sp, #36]	; 0x24
 8015a7e:	930c      	str	r3, [sp, #48]	; 0x30
 8015a80:	46bb      	mov	fp, r7
 8015a82:	b975      	cbnz	r5, 8015aa2 <_dtoa_r+0x42>
 8015a84:	2010      	movs	r0, #16
 8015a86:	f001 f94d 	bl	8016d24 <malloc>
 8015a8a:	4602      	mov	r2, r0
 8015a8c:	6260      	str	r0, [r4, #36]	; 0x24
 8015a8e:	b920      	cbnz	r0, 8015a9a <_dtoa_r+0x3a>
 8015a90:	4ba7      	ldr	r3, [pc, #668]	; (8015d30 <_dtoa_r+0x2d0>)
 8015a92:	21ea      	movs	r1, #234	; 0xea
 8015a94:	48a7      	ldr	r0, [pc, #668]	; (8015d34 <_dtoa_r+0x2d4>)
 8015a96:	f002 f8ad 	bl	8017bf4 <__assert_func>
 8015a9a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8015a9e:	6005      	str	r5, [r0, #0]
 8015aa0:	60c5      	str	r5, [r0, #12]
 8015aa2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015aa4:	6819      	ldr	r1, [r3, #0]
 8015aa6:	b151      	cbz	r1, 8015abe <_dtoa_r+0x5e>
 8015aa8:	685a      	ldr	r2, [r3, #4]
 8015aaa:	604a      	str	r2, [r1, #4]
 8015aac:	2301      	movs	r3, #1
 8015aae:	4093      	lsls	r3, r2
 8015ab0:	608b      	str	r3, [r1, #8]
 8015ab2:	4620      	mov	r0, r4
 8015ab4:	f001 f990 	bl	8016dd8 <_Bfree>
 8015ab8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015aba:	2200      	movs	r2, #0
 8015abc:	601a      	str	r2, [r3, #0]
 8015abe:	1e3b      	subs	r3, r7, #0
 8015ac0:	bfaa      	itet	ge
 8015ac2:	2300      	movge	r3, #0
 8015ac4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8015ac8:	f8c8 3000 	strge.w	r3, [r8]
 8015acc:	4b9a      	ldr	r3, [pc, #616]	; (8015d38 <_dtoa_r+0x2d8>)
 8015ace:	bfbc      	itt	lt
 8015ad0:	2201      	movlt	r2, #1
 8015ad2:	f8c8 2000 	strlt.w	r2, [r8]
 8015ad6:	ea33 030b 	bics.w	r3, r3, fp
 8015ada:	d11b      	bne.n	8015b14 <_dtoa_r+0xb4>
 8015adc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015ade:	f242 730f 	movw	r3, #9999	; 0x270f
 8015ae2:	6013      	str	r3, [r2, #0]
 8015ae4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015ae8:	4333      	orrs	r3, r6
 8015aea:	f000 8592 	beq.w	8016612 <_dtoa_r+0xbb2>
 8015aee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015af0:	b963      	cbnz	r3, 8015b0c <_dtoa_r+0xac>
 8015af2:	4b92      	ldr	r3, [pc, #584]	; (8015d3c <_dtoa_r+0x2dc>)
 8015af4:	e022      	b.n	8015b3c <_dtoa_r+0xdc>
 8015af6:	4b92      	ldr	r3, [pc, #584]	; (8015d40 <_dtoa_r+0x2e0>)
 8015af8:	9301      	str	r3, [sp, #4]
 8015afa:	3308      	adds	r3, #8
 8015afc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015afe:	6013      	str	r3, [r2, #0]
 8015b00:	9801      	ldr	r0, [sp, #4]
 8015b02:	b013      	add	sp, #76	; 0x4c
 8015b04:	ecbd 8b04 	vpop	{d8-d9}
 8015b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b0c:	4b8b      	ldr	r3, [pc, #556]	; (8015d3c <_dtoa_r+0x2dc>)
 8015b0e:	9301      	str	r3, [sp, #4]
 8015b10:	3303      	adds	r3, #3
 8015b12:	e7f3      	b.n	8015afc <_dtoa_r+0x9c>
 8015b14:	2200      	movs	r2, #0
 8015b16:	2300      	movs	r3, #0
 8015b18:	4650      	mov	r0, sl
 8015b1a:	4659      	mov	r1, fp
 8015b1c:	f7ea ffec 	bl	8000af8 <__aeabi_dcmpeq>
 8015b20:	ec4b ab19 	vmov	d9, sl, fp
 8015b24:	4680      	mov	r8, r0
 8015b26:	b158      	cbz	r0, 8015b40 <_dtoa_r+0xe0>
 8015b28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015b2a:	2301      	movs	r3, #1
 8015b2c:	6013      	str	r3, [r2, #0]
 8015b2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015b30:	2b00      	cmp	r3, #0
 8015b32:	f000 856b 	beq.w	801660c <_dtoa_r+0xbac>
 8015b36:	4883      	ldr	r0, [pc, #524]	; (8015d44 <_dtoa_r+0x2e4>)
 8015b38:	6018      	str	r0, [r3, #0]
 8015b3a:	1e43      	subs	r3, r0, #1
 8015b3c:	9301      	str	r3, [sp, #4]
 8015b3e:	e7df      	b.n	8015b00 <_dtoa_r+0xa0>
 8015b40:	ec4b ab10 	vmov	d0, sl, fp
 8015b44:	aa10      	add	r2, sp, #64	; 0x40
 8015b46:	a911      	add	r1, sp, #68	; 0x44
 8015b48:	4620      	mov	r0, r4
 8015b4a:	f001 fcf3 	bl	8017534 <__d2b>
 8015b4e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8015b52:	ee08 0a10 	vmov	s16, r0
 8015b56:	2d00      	cmp	r5, #0
 8015b58:	f000 8084 	beq.w	8015c64 <_dtoa_r+0x204>
 8015b5c:	ee19 3a90 	vmov	r3, s19
 8015b60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015b64:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8015b68:	4656      	mov	r6, sl
 8015b6a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8015b6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8015b72:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8015b76:	4b74      	ldr	r3, [pc, #464]	; (8015d48 <_dtoa_r+0x2e8>)
 8015b78:	2200      	movs	r2, #0
 8015b7a:	4630      	mov	r0, r6
 8015b7c:	4639      	mov	r1, r7
 8015b7e:	f7ea fb9b 	bl	80002b8 <__aeabi_dsub>
 8015b82:	a365      	add	r3, pc, #404	; (adr r3, 8015d18 <_dtoa_r+0x2b8>)
 8015b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b88:	f7ea fd4e 	bl	8000628 <__aeabi_dmul>
 8015b8c:	a364      	add	r3, pc, #400	; (adr r3, 8015d20 <_dtoa_r+0x2c0>)
 8015b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b92:	f7ea fb93 	bl	80002bc <__adddf3>
 8015b96:	4606      	mov	r6, r0
 8015b98:	4628      	mov	r0, r5
 8015b9a:	460f      	mov	r7, r1
 8015b9c:	f7ea fcda 	bl	8000554 <__aeabi_i2d>
 8015ba0:	a361      	add	r3, pc, #388	; (adr r3, 8015d28 <_dtoa_r+0x2c8>)
 8015ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ba6:	f7ea fd3f 	bl	8000628 <__aeabi_dmul>
 8015baa:	4602      	mov	r2, r0
 8015bac:	460b      	mov	r3, r1
 8015bae:	4630      	mov	r0, r6
 8015bb0:	4639      	mov	r1, r7
 8015bb2:	f7ea fb83 	bl	80002bc <__adddf3>
 8015bb6:	4606      	mov	r6, r0
 8015bb8:	460f      	mov	r7, r1
 8015bba:	f7ea ffe5 	bl	8000b88 <__aeabi_d2iz>
 8015bbe:	2200      	movs	r2, #0
 8015bc0:	9000      	str	r0, [sp, #0]
 8015bc2:	2300      	movs	r3, #0
 8015bc4:	4630      	mov	r0, r6
 8015bc6:	4639      	mov	r1, r7
 8015bc8:	f7ea ffa0 	bl	8000b0c <__aeabi_dcmplt>
 8015bcc:	b150      	cbz	r0, 8015be4 <_dtoa_r+0x184>
 8015bce:	9800      	ldr	r0, [sp, #0]
 8015bd0:	f7ea fcc0 	bl	8000554 <__aeabi_i2d>
 8015bd4:	4632      	mov	r2, r6
 8015bd6:	463b      	mov	r3, r7
 8015bd8:	f7ea ff8e 	bl	8000af8 <__aeabi_dcmpeq>
 8015bdc:	b910      	cbnz	r0, 8015be4 <_dtoa_r+0x184>
 8015bde:	9b00      	ldr	r3, [sp, #0]
 8015be0:	3b01      	subs	r3, #1
 8015be2:	9300      	str	r3, [sp, #0]
 8015be4:	9b00      	ldr	r3, [sp, #0]
 8015be6:	2b16      	cmp	r3, #22
 8015be8:	d85a      	bhi.n	8015ca0 <_dtoa_r+0x240>
 8015bea:	9a00      	ldr	r2, [sp, #0]
 8015bec:	4b57      	ldr	r3, [pc, #348]	; (8015d4c <_dtoa_r+0x2ec>)
 8015bee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bf6:	ec51 0b19 	vmov	r0, r1, d9
 8015bfa:	f7ea ff87 	bl	8000b0c <__aeabi_dcmplt>
 8015bfe:	2800      	cmp	r0, #0
 8015c00:	d050      	beq.n	8015ca4 <_dtoa_r+0x244>
 8015c02:	9b00      	ldr	r3, [sp, #0]
 8015c04:	3b01      	subs	r3, #1
 8015c06:	9300      	str	r3, [sp, #0]
 8015c08:	2300      	movs	r3, #0
 8015c0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8015c0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015c0e:	1b5d      	subs	r5, r3, r5
 8015c10:	1e6b      	subs	r3, r5, #1
 8015c12:	9305      	str	r3, [sp, #20]
 8015c14:	bf45      	ittet	mi
 8015c16:	f1c5 0301 	rsbmi	r3, r5, #1
 8015c1a:	9304      	strmi	r3, [sp, #16]
 8015c1c:	2300      	movpl	r3, #0
 8015c1e:	2300      	movmi	r3, #0
 8015c20:	bf4c      	ite	mi
 8015c22:	9305      	strmi	r3, [sp, #20]
 8015c24:	9304      	strpl	r3, [sp, #16]
 8015c26:	9b00      	ldr	r3, [sp, #0]
 8015c28:	2b00      	cmp	r3, #0
 8015c2a:	db3d      	blt.n	8015ca8 <_dtoa_r+0x248>
 8015c2c:	9b05      	ldr	r3, [sp, #20]
 8015c2e:	9a00      	ldr	r2, [sp, #0]
 8015c30:	920a      	str	r2, [sp, #40]	; 0x28
 8015c32:	4413      	add	r3, r2
 8015c34:	9305      	str	r3, [sp, #20]
 8015c36:	2300      	movs	r3, #0
 8015c38:	9307      	str	r3, [sp, #28]
 8015c3a:	9b06      	ldr	r3, [sp, #24]
 8015c3c:	2b09      	cmp	r3, #9
 8015c3e:	f200 8089 	bhi.w	8015d54 <_dtoa_r+0x2f4>
 8015c42:	2b05      	cmp	r3, #5
 8015c44:	bfc4      	itt	gt
 8015c46:	3b04      	subgt	r3, #4
 8015c48:	9306      	strgt	r3, [sp, #24]
 8015c4a:	9b06      	ldr	r3, [sp, #24]
 8015c4c:	f1a3 0302 	sub.w	r3, r3, #2
 8015c50:	bfcc      	ite	gt
 8015c52:	2500      	movgt	r5, #0
 8015c54:	2501      	movle	r5, #1
 8015c56:	2b03      	cmp	r3, #3
 8015c58:	f200 8087 	bhi.w	8015d6a <_dtoa_r+0x30a>
 8015c5c:	e8df f003 	tbb	[pc, r3]
 8015c60:	59383a2d 	.word	0x59383a2d
 8015c64:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8015c68:	441d      	add	r5, r3
 8015c6a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8015c6e:	2b20      	cmp	r3, #32
 8015c70:	bfc1      	itttt	gt
 8015c72:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8015c76:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8015c7a:	fa0b f303 	lslgt.w	r3, fp, r3
 8015c7e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8015c82:	bfda      	itte	le
 8015c84:	f1c3 0320 	rsble	r3, r3, #32
 8015c88:	fa06 f003 	lslle.w	r0, r6, r3
 8015c8c:	4318      	orrgt	r0, r3
 8015c8e:	f7ea fc51 	bl	8000534 <__aeabi_ui2d>
 8015c92:	2301      	movs	r3, #1
 8015c94:	4606      	mov	r6, r0
 8015c96:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8015c9a:	3d01      	subs	r5, #1
 8015c9c:	930e      	str	r3, [sp, #56]	; 0x38
 8015c9e:	e76a      	b.n	8015b76 <_dtoa_r+0x116>
 8015ca0:	2301      	movs	r3, #1
 8015ca2:	e7b2      	b.n	8015c0a <_dtoa_r+0x1aa>
 8015ca4:	900b      	str	r0, [sp, #44]	; 0x2c
 8015ca6:	e7b1      	b.n	8015c0c <_dtoa_r+0x1ac>
 8015ca8:	9b04      	ldr	r3, [sp, #16]
 8015caa:	9a00      	ldr	r2, [sp, #0]
 8015cac:	1a9b      	subs	r3, r3, r2
 8015cae:	9304      	str	r3, [sp, #16]
 8015cb0:	4253      	negs	r3, r2
 8015cb2:	9307      	str	r3, [sp, #28]
 8015cb4:	2300      	movs	r3, #0
 8015cb6:	930a      	str	r3, [sp, #40]	; 0x28
 8015cb8:	e7bf      	b.n	8015c3a <_dtoa_r+0x1da>
 8015cba:	2300      	movs	r3, #0
 8015cbc:	9308      	str	r3, [sp, #32]
 8015cbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015cc0:	2b00      	cmp	r3, #0
 8015cc2:	dc55      	bgt.n	8015d70 <_dtoa_r+0x310>
 8015cc4:	2301      	movs	r3, #1
 8015cc6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8015cca:	461a      	mov	r2, r3
 8015ccc:	9209      	str	r2, [sp, #36]	; 0x24
 8015cce:	e00c      	b.n	8015cea <_dtoa_r+0x28a>
 8015cd0:	2301      	movs	r3, #1
 8015cd2:	e7f3      	b.n	8015cbc <_dtoa_r+0x25c>
 8015cd4:	2300      	movs	r3, #0
 8015cd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015cd8:	9308      	str	r3, [sp, #32]
 8015cda:	9b00      	ldr	r3, [sp, #0]
 8015cdc:	4413      	add	r3, r2
 8015cde:	9302      	str	r3, [sp, #8]
 8015ce0:	3301      	adds	r3, #1
 8015ce2:	2b01      	cmp	r3, #1
 8015ce4:	9303      	str	r3, [sp, #12]
 8015ce6:	bfb8      	it	lt
 8015ce8:	2301      	movlt	r3, #1
 8015cea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8015cec:	2200      	movs	r2, #0
 8015cee:	6042      	str	r2, [r0, #4]
 8015cf0:	2204      	movs	r2, #4
 8015cf2:	f102 0614 	add.w	r6, r2, #20
 8015cf6:	429e      	cmp	r6, r3
 8015cf8:	6841      	ldr	r1, [r0, #4]
 8015cfa:	d93d      	bls.n	8015d78 <_dtoa_r+0x318>
 8015cfc:	4620      	mov	r0, r4
 8015cfe:	f001 f82b 	bl	8016d58 <_Balloc>
 8015d02:	9001      	str	r0, [sp, #4]
 8015d04:	2800      	cmp	r0, #0
 8015d06:	d13b      	bne.n	8015d80 <_dtoa_r+0x320>
 8015d08:	4b11      	ldr	r3, [pc, #68]	; (8015d50 <_dtoa_r+0x2f0>)
 8015d0a:	4602      	mov	r2, r0
 8015d0c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8015d10:	e6c0      	b.n	8015a94 <_dtoa_r+0x34>
 8015d12:	2301      	movs	r3, #1
 8015d14:	e7df      	b.n	8015cd6 <_dtoa_r+0x276>
 8015d16:	bf00      	nop
 8015d18:	636f4361 	.word	0x636f4361
 8015d1c:	3fd287a7 	.word	0x3fd287a7
 8015d20:	8b60c8b3 	.word	0x8b60c8b3
 8015d24:	3fc68a28 	.word	0x3fc68a28
 8015d28:	509f79fb 	.word	0x509f79fb
 8015d2c:	3fd34413 	.word	0x3fd34413
 8015d30:	0801a31e 	.word	0x0801a31e
 8015d34:	0801a335 	.word	0x0801a335
 8015d38:	7ff00000 	.word	0x7ff00000
 8015d3c:	0801a31a 	.word	0x0801a31a
 8015d40:	0801a311 	.word	0x0801a311
 8015d44:	0801a195 	.word	0x0801a195
 8015d48:	3ff80000 	.word	0x3ff80000
 8015d4c:	0801a4a0 	.word	0x0801a4a0
 8015d50:	0801a390 	.word	0x0801a390
 8015d54:	2501      	movs	r5, #1
 8015d56:	2300      	movs	r3, #0
 8015d58:	9306      	str	r3, [sp, #24]
 8015d5a:	9508      	str	r5, [sp, #32]
 8015d5c:	f04f 33ff 	mov.w	r3, #4294967295
 8015d60:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8015d64:	2200      	movs	r2, #0
 8015d66:	2312      	movs	r3, #18
 8015d68:	e7b0      	b.n	8015ccc <_dtoa_r+0x26c>
 8015d6a:	2301      	movs	r3, #1
 8015d6c:	9308      	str	r3, [sp, #32]
 8015d6e:	e7f5      	b.n	8015d5c <_dtoa_r+0x2fc>
 8015d70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d72:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8015d76:	e7b8      	b.n	8015cea <_dtoa_r+0x28a>
 8015d78:	3101      	adds	r1, #1
 8015d7a:	6041      	str	r1, [r0, #4]
 8015d7c:	0052      	lsls	r2, r2, #1
 8015d7e:	e7b8      	b.n	8015cf2 <_dtoa_r+0x292>
 8015d80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015d82:	9a01      	ldr	r2, [sp, #4]
 8015d84:	601a      	str	r2, [r3, #0]
 8015d86:	9b03      	ldr	r3, [sp, #12]
 8015d88:	2b0e      	cmp	r3, #14
 8015d8a:	f200 809d 	bhi.w	8015ec8 <_dtoa_r+0x468>
 8015d8e:	2d00      	cmp	r5, #0
 8015d90:	f000 809a 	beq.w	8015ec8 <_dtoa_r+0x468>
 8015d94:	9b00      	ldr	r3, [sp, #0]
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	dd32      	ble.n	8015e00 <_dtoa_r+0x3a0>
 8015d9a:	4ab7      	ldr	r2, [pc, #732]	; (8016078 <_dtoa_r+0x618>)
 8015d9c:	f003 030f 	and.w	r3, r3, #15
 8015da0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8015da4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015da8:	9b00      	ldr	r3, [sp, #0]
 8015daa:	05d8      	lsls	r0, r3, #23
 8015dac:	ea4f 1723 	mov.w	r7, r3, asr #4
 8015db0:	d516      	bpl.n	8015de0 <_dtoa_r+0x380>
 8015db2:	4bb2      	ldr	r3, [pc, #712]	; (801607c <_dtoa_r+0x61c>)
 8015db4:	ec51 0b19 	vmov	r0, r1, d9
 8015db8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015dbc:	f7ea fd5e 	bl	800087c <__aeabi_ddiv>
 8015dc0:	f007 070f 	and.w	r7, r7, #15
 8015dc4:	4682      	mov	sl, r0
 8015dc6:	468b      	mov	fp, r1
 8015dc8:	2503      	movs	r5, #3
 8015dca:	4eac      	ldr	r6, [pc, #688]	; (801607c <_dtoa_r+0x61c>)
 8015dcc:	b957      	cbnz	r7, 8015de4 <_dtoa_r+0x384>
 8015dce:	4642      	mov	r2, r8
 8015dd0:	464b      	mov	r3, r9
 8015dd2:	4650      	mov	r0, sl
 8015dd4:	4659      	mov	r1, fp
 8015dd6:	f7ea fd51 	bl	800087c <__aeabi_ddiv>
 8015dda:	4682      	mov	sl, r0
 8015ddc:	468b      	mov	fp, r1
 8015dde:	e028      	b.n	8015e32 <_dtoa_r+0x3d2>
 8015de0:	2502      	movs	r5, #2
 8015de2:	e7f2      	b.n	8015dca <_dtoa_r+0x36a>
 8015de4:	07f9      	lsls	r1, r7, #31
 8015de6:	d508      	bpl.n	8015dfa <_dtoa_r+0x39a>
 8015de8:	4640      	mov	r0, r8
 8015dea:	4649      	mov	r1, r9
 8015dec:	e9d6 2300 	ldrd	r2, r3, [r6]
 8015df0:	f7ea fc1a 	bl	8000628 <__aeabi_dmul>
 8015df4:	3501      	adds	r5, #1
 8015df6:	4680      	mov	r8, r0
 8015df8:	4689      	mov	r9, r1
 8015dfa:	107f      	asrs	r7, r7, #1
 8015dfc:	3608      	adds	r6, #8
 8015dfe:	e7e5      	b.n	8015dcc <_dtoa_r+0x36c>
 8015e00:	f000 809b 	beq.w	8015f3a <_dtoa_r+0x4da>
 8015e04:	9b00      	ldr	r3, [sp, #0]
 8015e06:	4f9d      	ldr	r7, [pc, #628]	; (801607c <_dtoa_r+0x61c>)
 8015e08:	425e      	negs	r6, r3
 8015e0a:	4b9b      	ldr	r3, [pc, #620]	; (8016078 <_dtoa_r+0x618>)
 8015e0c:	f006 020f 	and.w	r2, r6, #15
 8015e10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e18:	ec51 0b19 	vmov	r0, r1, d9
 8015e1c:	f7ea fc04 	bl	8000628 <__aeabi_dmul>
 8015e20:	1136      	asrs	r6, r6, #4
 8015e22:	4682      	mov	sl, r0
 8015e24:	468b      	mov	fp, r1
 8015e26:	2300      	movs	r3, #0
 8015e28:	2502      	movs	r5, #2
 8015e2a:	2e00      	cmp	r6, #0
 8015e2c:	d17a      	bne.n	8015f24 <_dtoa_r+0x4c4>
 8015e2e:	2b00      	cmp	r3, #0
 8015e30:	d1d3      	bne.n	8015dda <_dtoa_r+0x37a>
 8015e32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015e34:	2b00      	cmp	r3, #0
 8015e36:	f000 8082 	beq.w	8015f3e <_dtoa_r+0x4de>
 8015e3a:	4b91      	ldr	r3, [pc, #580]	; (8016080 <_dtoa_r+0x620>)
 8015e3c:	2200      	movs	r2, #0
 8015e3e:	4650      	mov	r0, sl
 8015e40:	4659      	mov	r1, fp
 8015e42:	f7ea fe63 	bl	8000b0c <__aeabi_dcmplt>
 8015e46:	2800      	cmp	r0, #0
 8015e48:	d079      	beq.n	8015f3e <_dtoa_r+0x4de>
 8015e4a:	9b03      	ldr	r3, [sp, #12]
 8015e4c:	2b00      	cmp	r3, #0
 8015e4e:	d076      	beq.n	8015f3e <_dtoa_r+0x4de>
 8015e50:	9b02      	ldr	r3, [sp, #8]
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	dd36      	ble.n	8015ec4 <_dtoa_r+0x464>
 8015e56:	9b00      	ldr	r3, [sp, #0]
 8015e58:	4650      	mov	r0, sl
 8015e5a:	4659      	mov	r1, fp
 8015e5c:	1e5f      	subs	r7, r3, #1
 8015e5e:	2200      	movs	r2, #0
 8015e60:	4b88      	ldr	r3, [pc, #544]	; (8016084 <_dtoa_r+0x624>)
 8015e62:	f7ea fbe1 	bl	8000628 <__aeabi_dmul>
 8015e66:	9e02      	ldr	r6, [sp, #8]
 8015e68:	4682      	mov	sl, r0
 8015e6a:	468b      	mov	fp, r1
 8015e6c:	3501      	adds	r5, #1
 8015e6e:	4628      	mov	r0, r5
 8015e70:	f7ea fb70 	bl	8000554 <__aeabi_i2d>
 8015e74:	4652      	mov	r2, sl
 8015e76:	465b      	mov	r3, fp
 8015e78:	f7ea fbd6 	bl	8000628 <__aeabi_dmul>
 8015e7c:	4b82      	ldr	r3, [pc, #520]	; (8016088 <_dtoa_r+0x628>)
 8015e7e:	2200      	movs	r2, #0
 8015e80:	f7ea fa1c 	bl	80002bc <__adddf3>
 8015e84:	46d0      	mov	r8, sl
 8015e86:	46d9      	mov	r9, fp
 8015e88:	4682      	mov	sl, r0
 8015e8a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8015e8e:	2e00      	cmp	r6, #0
 8015e90:	d158      	bne.n	8015f44 <_dtoa_r+0x4e4>
 8015e92:	4b7e      	ldr	r3, [pc, #504]	; (801608c <_dtoa_r+0x62c>)
 8015e94:	2200      	movs	r2, #0
 8015e96:	4640      	mov	r0, r8
 8015e98:	4649      	mov	r1, r9
 8015e9a:	f7ea fa0d 	bl	80002b8 <__aeabi_dsub>
 8015e9e:	4652      	mov	r2, sl
 8015ea0:	465b      	mov	r3, fp
 8015ea2:	4680      	mov	r8, r0
 8015ea4:	4689      	mov	r9, r1
 8015ea6:	f7ea fe4f 	bl	8000b48 <__aeabi_dcmpgt>
 8015eaa:	2800      	cmp	r0, #0
 8015eac:	f040 8295 	bne.w	80163da <_dtoa_r+0x97a>
 8015eb0:	4652      	mov	r2, sl
 8015eb2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8015eb6:	4640      	mov	r0, r8
 8015eb8:	4649      	mov	r1, r9
 8015eba:	f7ea fe27 	bl	8000b0c <__aeabi_dcmplt>
 8015ebe:	2800      	cmp	r0, #0
 8015ec0:	f040 8289 	bne.w	80163d6 <_dtoa_r+0x976>
 8015ec4:	ec5b ab19 	vmov	sl, fp, d9
 8015ec8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	f2c0 8148 	blt.w	8016160 <_dtoa_r+0x700>
 8015ed0:	9a00      	ldr	r2, [sp, #0]
 8015ed2:	2a0e      	cmp	r2, #14
 8015ed4:	f300 8144 	bgt.w	8016160 <_dtoa_r+0x700>
 8015ed8:	4b67      	ldr	r3, [pc, #412]	; (8016078 <_dtoa_r+0x618>)
 8015eda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015ede:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015ee2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	f280 80d5 	bge.w	8016094 <_dtoa_r+0x634>
 8015eea:	9b03      	ldr	r3, [sp, #12]
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	f300 80d1 	bgt.w	8016094 <_dtoa_r+0x634>
 8015ef2:	f040 826f 	bne.w	80163d4 <_dtoa_r+0x974>
 8015ef6:	4b65      	ldr	r3, [pc, #404]	; (801608c <_dtoa_r+0x62c>)
 8015ef8:	2200      	movs	r2, #0
 8015efa:	4640      	mov	r0, r8
 8015efc:	4649      	mov	r1, r9
 8015efe:	f7ea fb93 	bl	8000628 <__aeabi_dmul>
 8015f02:	4652      	mov	r2, sl
 8015f04:	465b      	mov	r3, fp
 8015f06:	f7ea fe15 	bl	8000b34 <__aeabi_dcmpge>
 8015f0a:	9e03      	ldr	r6, [sp, #12]
 8015f0c:	4637      	mov	r7, r6
 8015f0e:	2800      	cmp	r0, #0
 8015f10:	f040 8245 	bne.w	801639e <_dtoa_r+0x93e>
 8015f14:	9d01      	ldr	r5, [sp, #4]
 8015f16:	2331      	movs	r3, #49	; 0x31
 8015f18:	f805 3b01 	strb.w	r3, [r5], #1
 8015f1c:	9b00      	ldr	r3, [sp, #0]
 8015f1e:	3301      	adds	r3, #1
 8015f20:	9300      	str	r3, [sp, #0]
 8015f22:	e240      	b.n	80163a6 <_dtoa_r+0x946>
 8015f24:	07f2      	lsls	r2, r6, #31
 8015f26:	d505      	bpl.n	8015f34 <_dtoa_r+0x4d4>
 8015f28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015f2c:	f7ea fb7c 	bl	8000628 <__aeabi_dmul>
 8015f30:	3501      	adds	r5, #1
 8015f32:	2301      	movs	r3, #1
 8015f34:	1076      	asrs	r6, r6, #1
 8015f36:	3708      	adds	r7, #8
 8015f38:	e777      	b.n	8015e2a <_dtoa_r+0x3ca>
 8015f3a:	2502      	movs	r5, #2
 8015f3c:	e779      	b.n	8015e32 <_dtoa_r+0x3d2>
 8015f3e:	9f00      	ldr	r7, [sp, #0]
 8015f40:	9e03      	ldr	r6, [sp, #12]
 8015f42:	e794      	b.n	8015e6e <_dtoa_r+0x40e>
 8015f44:	9901      	ldr	r1, [sp, #4]
 8015f46:	4b4c      	ldr	r3, [pc, #304]	; (8016078 <_dtoa_r+0x618>)
 8015f48:	4431      	add	r1, r6
 8015f4a:	910d      	str	r1, [sp, #52]	; 0x34
 8015f4c:	9908      	ldr	r1, [sp, #32]
 8015f4e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8015f52:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8015f56:	2900      	cmp	r1, #0
 8015f58:	d043      	beq.n	8015fe2 <_dtoa_r+0x582>
 8015f5a:	494d      	ldr	r1, [pc, #308]	; (8016090 <_dtoa_r+0x630>)
 8015f5c:	2000      	movs	r0, #0
 8015f5e:	f7ea fc8d 	bl	800087c <__aeabi_ddiv>
 8015f62:	4652      	mov	r2, sl
 8015f64:	465b      	mov	r3, fp
 8015f66:	f7ea f9a7 	bl	80002b8 <__aeabi_dsub>
 8015f6a:	9d01      	ldr	r5, [sp, #4]
 8015f6c:	4682      	mov	sl, r0
 8015f6e:	468b      	mov	fp, r1
 8015f70:	4649      	mov	r1, r9
 8015f72:	4640      	mov	r0, r8
 8015f74:	f7ea fe08 	bl	8000b88 <__aeabi_d2iz>
 8015f78:	4606      	mov	r6, r0
 8015f7a:	f7ea faeb 	bl	8000554 <__aeabi_i2d>
 8015f7e:	4602      	mov	r2, r0
 8015f80:	460b      	mov	r3, r1
 8015f82:	4640      	mov	r0, r8
 8015f84:	4649      	mov	r1, r9
 8015f86:	f7ea f997 	bl	80002b8 <__aeabi_dsub>
 8015f8a:	3630      	adds	r6, #48	; 0x30
 8015f8c:	f805 6b01 	strb.w	r6, [r5], #1
 8015f90:	4652      	mov	r2, sl
 8015f92:	465b      	mov	r3, fp
 8015f94:	4680      	mov	r8, r0
 8015f96:	4689      	mov	r9, r1
 8015f98:	f7ea fdb8 	bl	8000b0c <__aeabi_dcmplt>
 8015f9c:	2800      	cmp	r0, #0
 8015f9e:	d163      	bne.n	8016068 <_dtoa_r+0x608>
 8015fa0:	4642      	mov	r2, r8
 8015fa2:	464b      	mov	r3, r9
 8015fa4:	4936      	ldr	r1, [pc, #216]	; (8016080 <_dtoa_r+0x620>)
 8015fa6:	2000      	movs	r0, #0
 8015fa8:	f7ea f986 	bl	80002b8 <__aeabi_dsub>
 8015fac:	4652      	mov	r2, sl
 8015fae:	465b      	mov	r3, fp
 8015fb0:	f7ea fdac 	bl	8000b0c <__aeabi_dcmplt>
 8015fb4:	2800      	cmp	r0, #0
 8015fb6:	f040 80b5 	bne.w	8016124 <_dtoa_r+0x6c4>
 8015fba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015fbc:	429d      	cmp	r5, r3
 8015fbe:	d081      	beq.n	8015ec4 <_dtoa_r+0x464>
 8015fc0:	4b30      	ldr	r3, [pc, #192]	; (8016084 <_dtoa_r+0x624>)
 8015fc2:	2200      	movs	r2, #0
 8015fc4:	4650      	mov	r0, sl
 8015fc6:	4659      	mov	r1, fp
 8015fc8:	f7ea fb2e 	bl	8000628 <__aeabi_dmul>
 8015fcc:	4b2d      	ldr	r3, [pc, #180]	; (8016084 <_dtoa_r+0x624>)
 8015fce:	4682      	mov	sl, r0
 8015fd0:	468b      	mov	fp, r1
 8015fd2:	4640      	mov	r0, r8
 8015fd4:	4649      	mov	r1, r9
 8015fd6:	2200      	movs	r2, #0
 8015fd8:	f7ea fb26 	bl	8000628 <__aeabi_dmul>
 8015fdc:	4680      	mov	r8, r0
 8015fde:	4689      	mov	r9, r1
 8015fe0:	e7c6      	b.n	8015f70 <_dtoa_r+0x510>
 8015fe2:	4650      	mov	r0, sl
 8015fe4:	4659      	mov	r1, fp
 8015fe6:	f7ea fb1f 	bl	8000628 <__aeabi_dmul>
 8015fea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015fec:	9d01      	ldr	r5, [sp, #4]
 8015fee:	930f      	str	r3, [sp, #60]	; 0x3c
 8015ff0:	4682      	mov	sl, r0
 8015ff2:	468b      	mov	fp, r1
 8015ff4:	4649      	mov	r1, r9
 8015ff6:	4640      	mov	r0, r8
 8015ff8:	f7ea fdc6 	bl	8000b88 <__aeabi_d2iz>
 8015ffc:	4606      	mov	r6, r0
 8015ffe:	f7ea faa9 	bl	8000554 <__aeabi_i2d>
 8016002:	3630      	adds	r6, #48	; 0x30
 8016004:	4602      	mov	r2, r0
 8016006:	460b      	mov	r3, r1
 8016008:	4640      	mov	r0, r8
 801600a:	4649      	mov	r1, r9
 801600c:	f7ea f954 	bl	80002b8 <__aeabi_dsub>
 8016010:	f805 6b01 	strb.w	r6, [r5], #1
 8016014:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016016:	429d      	cmp	r5, r3
 8016018:	4680      	mov	r8, r0
 801601a:	4689      	mov	r9, r1
 801601c:	f04f 0200 	mov.w	r2, #0
 8016020:	d124      	bne.n	801606c <_dtoa_r+0x60c>
 8016022:	4b1b      	ldr	r3, [pc, #108]	; (8016090 <_dtoa_r+0x630>)
 8016024:	4650      	mov	r0, sl
 8016026:	4659      	mov	r1, fp
 8016028:	f7ea f948 	bl	80002bc <__adddf3>
 801602c:	4602      	mov	r2, r0
 801602e:	460b      	mov	r3, r1
 8016030:	4640      	mov	r0, r8
 8016032:	4649      	mov	r1, r9
 8016034:	f7ea fd88 	bl	8000b48 <__aeabi_dcmpgt>
 8016038:	2800      	cmp	r0, #0
 801603a:	d173      	bne.n	8016124 <_dtoa_r+0x6c4>
 801603c:	4652      	mov	r2, sl
 801603e:	465b      	mov	r3, fp
 8016040:	4913      	ldr	r1, [pc, #76]	; (8016090 <_dtoa_r+0x630>)
 8016042:	2000      	movs	r0, #0
 8016044:	f7ea f938 	bl	80002b8 <__aeabi_dsub>
 8016048:	4602      	mov	r2, r0
 801604a:	460b      	mov	r3, r1
 801604c:	4640      	mov	r0, r8
 801604e:	4649      	mov	r1, r9
 8016050:	f7ea fd5c 	bl	8000b0c <__aeabi_dcmplt>
 8016054:	2800      	cmp	r0, #0
 8016056:	f43f af35 	beq.w	8015ec4 <_dtoa_r+0x464>
 801605a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801605c:	1e6b      	subs	r3, r5, #1
 801605e:	930f      	str	r3, [sp, #60]	; 0x3c
 8016060:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016064:	2b30      	cmp	r3, #48	; 0x30
 8016066:	d0f8      	beq.n	801605a <_dtoa_r+0x5fa>
 8016068:	9700      	str	r7, [sp, #0]
 801606a:	e049      	b.n	8016100 <_dtoa_r+0x6a0>
 801606c:	4b05      	ldr	r3, [pc, #20]	; (8016084 <_dtoa_r+0x624>)
 801606e:	f7ea fadb 	bl	8000628 <__aeabi_dmul>
 8016072:	4680      	mov	r8, r0
 8016074:	4689      	mov	r9, r1
 8016076:	e7bd      	b.n	8015ff4 <_dtoa_r+0x594>
 8016078:	0801a4a0 	.word	0x0801a4a0
 801607c:	0801a478 	.word	0x0801a478
 8016080:	3ff00000 	.word	0x3ff00000
 8016084:	40240000 	.word	0x40240000
 8016088:	401c0000 	.word	0x401c0000
 801608c:	40140000 	.word	0x40140000
 8016090:	3fe00000 	.word	0x3fe00000
 8016094:	9d01      	ldr	r5, [sp, #4]
 8016096:	4656      	mov	r6, sl
 8016098:	465f      	mov	r7, fp
 801609a:	4642      	mov	r2, r8
 801609c:	464b      	mov	r3, r9
 801609e:	4630      	mov	r0, r6
 80160a0:	4639      	mov	r1, r7
 80160a2:	f7ea fbeb 	bl	800087c <__aeabi_ddiv>
 80160a6:	f7ea fd6f 	bl	8000b88 <__aeabi_d2iz>
 80160aa:	4682      	mov	sl, r0
 80160ac:	f7ea fa52 	bl	8000554 <__aeabi_i2d>
 80160b0:	4642      	mov	r2, r8
 80160b2:	464b      	mov	r3, r9
 80160b4:	f7ea fab8 	bl	8000628 <__aeabi_dmul>
 80160b8:	4602      	mov	r2, r0
 80160ba:	460b      	mov	r3, r1
 80160bc:	4630      	mov	r0, r6
 80160be:	4639      	mov	r1, r7
 80160c0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80160c4:	f7ea f8f8 	bl	80002b8 <__aeabi_dsub>
 80160c8:	f805 6b01 	strb.w	r6, [r5], #1
 80160cc:	9e01      	ldr	r6, [sp, #4]
 80160ce:	9f03      	ldr	r7, [sp, #12]
 80160d0:	1bae      	subs	r6, r5, r6
 80160d2:	42b7      	cmp	r7, r6
 80160d4:	4602      	mov	r2, r0
 80160d6:	460b      	mov	r3, r1
 80160d8:	d135      	bne.n	8016146 <_dtoa_r+0x6e6>
 80160da:	f7ea f8ef 	bl	80002bc <__adddf3>
 80160de:	4642      	mov	r2, r8
 80160e0:	464b      	mov	r3, r9
 80160e2:	4606      	mov	r6, r0
 80160e4:	460f      	mov	r7, r1
 80160e6:	f7ea fd2f 	bl	8000b48 <__aeabi_dcmpgt>
 80160ea:	b9d0      	cbnz	r0, 8016122 <_dtoa_r+0x6c2>
 80160ec:	4642      	mov	r2, r8
 80160ee:	464b      	mov	r3, r9
 80160f0:	4630      	mov	r0, r6
 80160f2:	4639      	mov	r1, r7
 80160f4:	f7ea fd00 	bl	8000af8 <__aeabi_dcmpeq>
 80160f8:	b110      	cbz	r0, 8016100 <_dtoa_r+0x6a0>
 80160fa:	f01a 0f01 	tst.w	sl, #1
 80160fe:	d110      	bne.n	8016122 <_dtoa_r+0x6c2>
 8016100:	4620      	mov	r0, r4
 8016102:	ee18 1a10 	vmov	r1, s16
 8016106:	f000 fe67 	bl	8016dd8 <_Bfree>
 801610a:	2300      	movs	r3, #0
 801610c:	9800      	ldr	r0, [sp, #0]
 801610e:	702b      	strb	r3, [r5, #0]
 8016110:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016112:	3001      	adds	r0, #1
 8016114:	6018      	str	r0, [r3, #0]
 8016116:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016118:	2b00      	cmp	r3, #0
 801611a:	f43f acf1 	beq.w	8015b00 <_dtoa_r+0xa0>
 801611e:	601d      	str	r5, [r3, #0]
 8016120:	e4ee      	b.n	8015b00 <_dtoa_r+0xa0>
 8016122:	9f00      	ldr	r7, [sp, #0]
 8016124:	462b      	mov	r3, r5
 8016126:	461d      	mov	r5, r3
 8016128:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801612c:	2a39      	cmp	r2, #57	; 0x39
 801612e:	d106      	bne.n	801613e <_dtoa_r+0x6de>
 8016130:	9a01      	ldr	r2, [sp, #4]
 8016132:	429a      	cmp	r2, r3
 8016134:	d1f7      	bne.n	8016126 <_dtoa_r+0x6c6>
 8016136:	9901      	ldr	r1, [sp, #4]
 8016138:	2230      	movs	r2, #48	; 0x30
 801613a:	3701      	adds	r7, #1
 801613c:	700a      	strb	r2, [r1, #0]
 801613e:	781a      	ldrb	r2, [r3, #0]
 8016140:	3201      	adds	r2, #1
 8016142:	701a      	strb	r2, [r3, #0]
 8016144:	e790      	b.n	8016068 <_dtoa_r+0x608>
 8016146:	4ba6      	ldr	r3, [pc, #664]	; (80163e0 <_dtoa_r+0x980>)
 8016148:	2200      	movs	r2, #0
 801614a:	f7ea fa6d 	bl	8000628 <__aeabi_dmul>
 801614e:	2200      	movs	r2, #0
 8016150:	2300      	movs	r3, #0
 8016152:	4606      	mov	r6, r0
 8016154:	460f      	mov	r7, r1
 8016156:	f7ea fccf 	bl	8000af8 <__aeabi_dcmpeq>
 801615a:	2800      	cmp	r0, #0
 801615c:	d09d      	beq.n	801609a <_dtoa_r+0x63a>
 801615e:	e7cf      	b.n	8016100 <_dtoa_r+0x6a0>
 8016160:	9a08      	ldr	r2, [sp, #32]
 8016162:	2a00      	cmp	r2, #0
 8016164:	f000 80d7 	beq.w	8016316 <_dtoa_r+0x8b6>
 8016168:	9a06      	ldr	r2, [sp, #24]
 801616a:	2a01      	cmp	r2, #1
 801616c:	f300 80ba 	bgt.w	80162e4 <_dtoa_r+0x884>
 8016170:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016172:	2a00      	cmp	r2, #0
 8016174:	f000 80b2 	beq.w	80162dc <_dtoa_r+0x87c>
 8016178:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801617c:	9e07      	ldr	r6, [sp, #28]
 801617e:	9d04      	ldr	r5, [sp, #16]
 8016180:	9a04      	ldr	r2, [sp, #16]
 8016182:	441a      	add	r2, r3
 8016184:	9204      	str	r2, [sp, #16]
 8016186:	9a05      	ldr	r2, [sp, #20]
 8016188:	2101      	movs	r1, #1
 801618a:	441a      	add	r2, r3
 801618c:	4620      	mov	r0, r4
 801618e:	9205      	str	r2, [sp, #20]
 8016190:	f000 ff24 	bl	8016fdc <__i2b>
 8016194:	4607      	mov	r7, r0
 8016196:	2d00      	cmp	r5, #0
 8016198:	dd0c      	ble.n	80161b4 <_dtoa_r+0x754>
 801619a:	9b05      	ldr	r3, [sp, #20]
 801619c:	2b00      	cmp	r3, #0
 801619e:	dd09      	ble.n	80161b4 <_dtoa_r+0x754>
 80161a0:	42ab      	cmp	r3, r5
 80161a2:	9a04      	ldr	r2, [sp, #16]
 80161a4:	bfa8      	it	ge
 80161a6:	462b      	movge	r3, r5
 80161a8:	1ad2      	subs	r2, r2, r3
 80161aa:	9204      	str	r2, [sp, #16]
 80161ac:	9a05      	ldr	r2, [sp, #20]
 80161ae:	1aed      	subs	r5, r5, r3
 80161b0:	1ad3      	subs	r3, r2, r3
 80161b2:	9305      	str	r3, [sp, #20]
 80161b4:	9b07      	ldr	r3, [sp, #28]
 80161b6:	b31b      	cbz	r3, 8016200 <_dtoa_r+0x7a0>
 80161b8:	9b08      	ldr	r3, [sp, #32]
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	f000 80af 	beq.w	801631e <_dtoa_r+0x8be>
 80161c0:	2e00      	cmp	r6, #0
 80161c2:	dd13      	ble.n	80161ec <_dtoa_r+0x78c>
 80161c4:	4639      	mov	r1, r7
 80161c6:	4632      	mov	r2, r6
 80161c8:	4620      	mov	r0, r4
 80161ca:	f000 ffc7 	bl	801715c <__pow5mult>
 80161ce:	ee18 2a10 	vmov	r2, s16
 80161d2:	4601      	mov	r1, r0
 80161d4:	4607      	mov	r7, r0
 80161d6:	4620      	mov	r0, r4
 80161d8:	f000 ff16 	bl	8017008 <__multiply>
 80161dc:	ee18 1a10 	vmov	r1, s16
 80161e0:	4680      	mov	r8, r0
 80161e2:	4620      	mov	r0, r4
 80161e4:	f000 fdf8 	bl	8016dd8 <_Bfree>
 80161e8:	ee08 8a10 	vmov	s16, r8
 80161ec:	9b07      	ldr	r3, [sp, #28]
 80161ee:	1b9a      	subs	r2, r3, r6
 80161f0:	d006      	beq.n	8016200 <_dtoa_r+0x7a0>
 80161f2:	ee18 1a10 	vmov	r1, s16
 80161f6:	4620      	mov	r0, r4
 80161f8:	f000 ffb0 	bl	801715c <__pow5mult>
 80161fc:	ee08 0a10 	vmov	s16, r0
 8016200:	2101      	movs	r1, #1
 8016202:	4620      	mov	r0, r4
 8016204:	f000 feea 	bl	8016fdc <__i2b>
 8016208:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801620a:	2b00      	cmp	r3, #0
 801620c:	4606      	mov	r6, r0
 801620e:	f340 8088 	ble.w	8016322 <_dtoa_r+0x8c2>
 8016212:	461a      	mov	r2, r3
 8016214:	4601      	mov	r1, r0
 8016216:	4620      	mov	r0, r4
 8016218:	f000 ffa0 	bl	801715c <__pow5mult>
 801621c:	9b06      	ldr	r3, [sp, #24]
 801621e:	2b01      	cmp	r3, #1
 8016220:	4606      	mov	r6, r0
 8016222:	f340 8081 	ble.w	8016328 <_dtoa_r+0x8c8>
 8016226:	f04f 0800 	mov.w	r8, #0
 801622a:	6933      	ldr	r3, [r6, #16]
 801622c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8016230:	6918      	ldr	r0, [r3, #16]
 8016232:	f000 fe83 	bl	8016f3c <__hi0bits>
 8016236:	f1c0 0020 	rsb	r0, r0, #32
 801623a:	9b05      	ldr	r3, [sp, #20]
 801623c:	4418      	add	r0, r3
 801623e:	f010 001f 	ands.w	r0, r0, #31
 8016242:	f000 8092 	beq.w	801636a <_dtoa_r+0x90a>
 8016246:	f1c0 0320 	rsb	r3, r0, #32
 801624a:	2b04      	cmp	r3, #4
 801624c:	f340 808a 	ble.w	8016364 <_dtoa_r+0x904>
 8016250:	f1c0 001c 	rsb	r0, r0, #28
 8016254:	9b04      	ldr	r3, [sp, #16]
 8016256:	4403      	add	r3, r0
 8016258:	9304      	str	r3, [sp, #16]
 801625a:	9b05      	ldr	r3, [sp, #20]
 801625c:	4403      	add	r3, r0
 801625e:	4405      	add	r5, r0
 8016260:	9305      	str	r3, [sp, #20]
 8016262:	9b04      	ldr	r3, [sp, #16]
 8016264:	2b00      	cmp	r3, #0
 8016266:	dd07      	ble.n	8016278 <_dtoa_r+0x818>
 8016268:	ee18 1a10 	vmov	r1, s16
 801626c:	461a      	mov	r2, r3
 801626e:	4620      	mov	r0, r4
 8016270:	f000 ffce 	bl	8017210 <__lshift>
 8016274:	ee08 0a10 	vmov	s16, r0
 8016278:	9b05      	ldr	r3, [sp, #20]
 801627a:	2b00      	cmp	r3, #0
 801627c:	dd05      	ble.n	801628a <_dtoa_r+0x82a>
 801627e:	4631      	mov	r1, r6
 8016280:	461a      	mov	r2, r3
 8016282:	4620      	mov	r0, r4
 8016284:	f000 ffc4 	bl	8017210 <__lshift>
 8016288:	4606      	mov	r6, r0
 801628a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801628c:	2b00      	cmp	r3, #0
 801628e:	d06e      	beq.n	801636e <_dtoa_r+0x90e>
 8016290:	ee18 0a10 	vmov	r0, s16
 8016294:	4631      	mov	r1, r6
 8016296:	f001 f82b 	bl	80172f0 <__mcmp>
 801629a:	2800      	cmp	r0, #0
 801629c:	da67      	bge.n	801636e <_dtoa_r+0x90e>
 801629e:	9b00      	ldr	r3, [sp, #0]
 80162a0:	3b01      	subs	r3, #1
 80162a2:	ee18 1a10 	vmov	r1, s16
 80162a6:	9300      	str	r3, [sp, #0]
 80162a8:	220a      	movs	r2, #10
 80162aa:	2300      	movs	r3, #0
 80162ac:	4620      	mov	r0, r4
 80162ae:	f000 fdb5 	bl	8016e1c <__multadd>
 80162b2:	9b08      	ldr	r3, [sp, #32]
 80162b4:	ee08 0a10 	vmov	s16, r0
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	f000 81b1 	beq.w	8016620 <_dtoa_r+0xbc0>
 80162be:	2300      	movs	r3, #0
 80162c0:	4639      	mov	r1, r7
 80162c2:	220a      	movs	r2, #10
 80162c4:	4620      	mov	r0, r4
 80162c6:	f000 fda9 	bl	8016e1c <__multadd>
 80162ca:	9b02      	ldr	r3, [sp, #8]
 80162cc:	2b00      	cmp	r3, #0
 80162ce:	4607      	mov	r7, r0
 80162d0:	f300 808e 	bgt.w	80163f0 <_dtoa_r+0x990>
 80162d4:	9b06      	ldr	r3, [sp, #24]
 80162d6:	2b02      	cmp	r3, #2
 80162d8:	dc51      	bgt.n	801637e <_dtoa_r+0x91e>
 80162da:	e089      	b.n	80163f0 <_dtoa_r+0x990>
 80162dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80162de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80162e2:	e74b      	b.n	801617c <_dtoa_r+0x71c>
 80162e4:	9b03      	ldr	r3, [sp, #12]
 80162e6:	1e5e      	subs	r6, r3, #1
 80162e8:	9b07      	ldr	r3, [sp, #28]
 80162ea:	42b3      	cmp	r3, r6
 80162ec:	bfbf      	itttt	lt
 80162ee:	9b07      	ldrlt	r3, [sp, #28]
 80162f0:	9607      	strlt	r6, [sp, #28]
 80162f2:	1af2      	sublt	r2, r6, r3
 80162f4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80162f6:	bfb6      	itet	lt
 80162f8:	189b      	addlt	r3, r3, r2
 80162fa:	1b9e      	subge	r6, r3, r6
 80162fc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80162fe:	9b03      	ldr	r3, [sp, #12]
 8016300:	bfb8      	it	lt
 8016302:	2600      	movlt	r6, #0
 8016304:	2b00      	cmp	r3, #0
 8016306:	bfb7      	itett	lt
 8016308:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801630c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8016310:	1a9d      	sublt	r5, r3, r2
 8016312:	2300      	movlt	r3, #0
 8016314:	e734      	b.n	8016180 <_dtoa_r+0x720>
 8016316:	9e07      	ldr	r6, [sp, #28]
 8016318:	9d04      	ldr	r5, [sp, #16]
 801631a:	9f08      	ldr	r7, [sp, #32]
 801631c:	e73b      	b.n	8016196 <_dtoa_r+0x736>
 801631e:	9a07      	ldr	r2, [sp, #28]
 8016320:	e767      	b.n	80161f2 <_dtoa_r+0x792>
 8016322:	9b06      	ldr	r3, [sp, #24]
 8016324:	2b01      	cmp	r3, #1
 8016326:	dc18      	bgt.n	801635a <_dtoa_r+0x8fa>
 8016328:	f1ba 0f00 	cmp.w	sl, #0
 801632c:	d115      	bne.n	801635a <_dtoa_r+0x8fa>
 801632e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016332:	b993      	cbnz	r3, 801635a <_dtoa_r+0x8fa>
 8016334:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016338:	0d1b      	lsrs	r3, r3, #20
 801633a:	051b      	lsls	r3, r3, #20
 801633c:	b183      	cbz	r3, 8016360 <_dtoa_r+0x900>
 801633e:	9b04      	ldr	r3, [sp, #16]
 8016340:	3301      	adds	r3, #1
 8016342:	9304      	str	r3, [sp, #16]
 8016344:	9b05      	ldr	r3, [sp, #20]
 8016346:	3301      	adds	r3, #1
 8016348:	9305      	str	r3, [sp, #20]
 801634a:	f04f 0801 	mov.w	r8, #1
 801634e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016350:	2b00      	cmp	r3, #0
 8016352:	f47f af6a 	bne.w	801622a <_dtoa_r+0x7ca>
 8016356:	2001      	movs	r0, #1
 8016358:	e76f      	b.n	801623a <_dtoa_r+0x7da>
 801635a:	f04f 0800 	mov.w	r8, #0
 801635e:	e7f6      	b.n	801634e <_dtoa_r+0x8ee>
 8016360:	4698      	mov	r8, r3
 8016362:	e7f4      	b.n	801634e <_dtoa_r+0x8ee>
 8016364:	f43f af7d 	beq.w	8016262 <_dtoa_r+0x802>
 8016368:	4618      	mov	r0, r3
 801636a:	301c      	adds	r0, #28
 801636c:	e772      	b.n	8016254 <_dtoa_r+0x7f4>
 801636e:	9b03      	ldr	r3, [sp, #12]
 8016370:	2b00      	cmp	r3, #0
 8016372:	dc37      	bgt.n	80163e4 <_dtoa_r+0x984>
 8016374:	9b06      	ldr	r3, [sp, #24]
 8016376:	2b02      	cmp	r3, #2
 8016378:	dd34      	ble.n	80163e4 <_dtoa_r+0x984>
 801637a:	9b03      	ldr	r3, [sp, #12]
 801637c:	9302      	str	r3, [sp, #8]
 801637e:	9b02      	ldr	r3, [sp, #8]
 8016380:	b96b      	cbnz	r3, 801639e <_dtoa_r+0x93e>
 8016382:	4631      	mov	r1, r6
 8016384:	2205      	movs	r2, #5
 8016386:	4620      	mov	r0, r4
 8016388:	f000 fd48 	bl	8016e1c <__multadd>
 801638c:	4601      	mov	r1, r0
 801638e:	4606      	mov	r6, r0
 8016390:	ee18 0a10 	vmov	r0, s16
 8016394:	f000 ffac 	bl	80172f0 <__mcmp>
 8016398:	2800      	cmp	r0, #0
 801639a:	f73f adbb 	bgt.w	8015f14 <_dtoa_r+0x4b4>
 801639e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80163a0:	9d01      	ldr	r5, [sp, #4]
 80163a2:	43db      	mvns	r3, r3
 80163a4:	9300      	str	r3, [sp, #0]
 80163a6:	f04f 0800 	mov.w	r8, #0
 80163aa:	4631      	mov	r1, r6
 80163ac:	4620      	mov	r0, r4
 80163ae:	f000 fd13 	bl	8016dd8 <_Bfree>
 80163b2:	2f00      	cmp	r7, #0
 80163b4:	f43f aea4 	beq.w	8016100 <_dtoa_r+0x6a0>
 80163b8:	f1b8 0f00 	cmp.w	r8, #0
 80163bc:	d005      	beq.n	80163ca <_dtoa_r+0x96a>
 80163be:	45b8      	cmp	r8, r7
 80163c0:	d003      	beq.n	80163ca <_dtoa_r+0x96a>
 80163c2:	4641      	mov	r1, r8
 80163c4:	4620      	mov	r0, r4
 80163c6:	f000 fd07 	bl	8016dd8 <_Bfree>
 80163ca:	4639      	mov	r1, r7
 80163cc:	4620      	mov	r0, r4
 80163ce:	f000 fd03 	bl	8016dd8 <_Bfree>
 80163d2:	e695      	b.n	8016100 <_dtoa_r+0x6a0>
 80163d4:	2600      	movs	r6, #0
 80163d6:	4637      	mov	r7, r6
 80163d8:	e7e1      	b.n	801639e <_dtoa_r+0x93e>
 80163da:	9700      	str	r7, [sp, #0]
 80163dc:	4637      	mov	r7, r6
 80163de:	e599      	b.n	8015f14 <_dtoa_r+0x4b4>
 80163e0:	40240000 	.word	0x40240000
 80163e4:	9b08      	ldr	r3, [sp, #32]
 80163e6:	2b00      	cmp	r3, #0
 80163e8:	f000 80ca 	beq.w	8016580 <_dtoa_r+0xb20>
 80163ec:	9b03      	ldr	r3, [sp, #12]
 80163ee:	9302      	str	r3, [sp, #8]
 80163f0:	2d00      	cmp	r5, #0
 80163f2:	dd05      	ble.n	8016400 <_dtoa_r+0x9a0>
 80163f4:	4639      	mov	r1, r7
 80163f6:	462a      	mov	r2, r5
 80163f8:	4620      	mov	r0, r4
 80163fa:	f000 ff09 	bl	8017210 <__lshift>
 80163fe:	4607      	mov	r7, r0
 8016400:	f1b8 0f00 	cmp.w	r8, #0
 8016404:	d05b      	beq.n	80164be <_dtoa_r+0xa5e>
 8016406:	6879      	ldr	r1, [r7, #4]
 8016408:	4620      	mov	r0, r4
 801640a:	f000 fca5 	bl	8016d58 <_Balloc>
 801640e:	4605      	mov	r5, r0
 8016410:	b928      	cbnz	r0, 801641e <_dtoa_r+0x9be>
 8016412:	4b87      	ldr	r3, [pc, #540]	; (8016630 <_dtoa_r+0xbd0>)
 8016414:	4602      	mov	r2, r0
 8016416:	f240 21ea 	movw	r1, #746	; 0x2ea
 801641a:	f7ff bb3b 	b.w	8015a94 <_dtoa_r+0x34>
 801641e:	693a      	ldr	r2, [r7, #16]
 8016420:	3202      	adds	r2, #2
 8016422:	0092      	lsls	r2, r2, #2
 8016424:	f107 010c 	add.w	r1, r7, #12
 8016428:	300c      	adds	r0, #12
 801642a:	f7fd fd2b 	bl	8013e84 <memcpy>
 801642e:	2201      	movs	r2, #1
 8016430:	4629      	mov	r1, r5
 8016432:	4620      	mov	r0, r4
 8016434:	f000 feec 	bl	8017210 <__lshift>
 8016438:	9b01      	ldr	r3, [sp, #4]
 801643a:	f103 0901 	add.w	r9, r3, #1
 801643e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8016442:	4413      	add	r3, r2
 8016444:	9305      	str	r3, [sp, #20]
 8016446:	f00a 0301 	and.w	r3, sl, #1
 801644a:	46b8      	mov	r8, r7
 801644c:	9304      	str	r3, [sp, #16]
 801644e:	4607      	mov	r7, r0
 8016450:	4631      	mov	r1, r6
 8016452:	ee18 0a10 	vmov	r0, s16
 8016456:	f7ff fa77 	bl	8015948 <quorem>
 801645a:	4641      	mov	r1, r8
 801645c:	9002      	str	r0, [sp, #8]
 801645e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8016462:	ee18 0a10 	vmov	r0, s16
 8016466:	f000 ff43 	bl	80172f0 <__mcmp>
 801646a:	463a      	mov	r2, r7
 801646c:	9003      	str	r0, [sp, #12]
 801646e:	4631      	mov	r1, r6
 8016470:	4620      	mov	r0, r4
 8016472:	f000 ff59 	bl	8017328 <__mdiff>
 8016476:	68c2      	ldr	r2, [r0, #12]
 8016478:	f109 3bff 	add.w	fp, r9, #4294967295
 801647c:	4605      	mov	r5, r0
 801647e:	bb02      	cbnz	r2, 80164c2 <_dtoa_r+0xa62>
 8016480:	4601      	mov	r1, r0
 8016482:	ee18 0a10 	vmov	r0, s16
 8016486:	f000 ff33 	bl	80172f0 <__mcmp>
 801648a:	4602      	mov	r2, r0
 801648c:	4629      	mov	r1, r5
 801648e:	4620      	mov	r0, r4
 8016490:	9207      	str	r2, [sp, #28]
 8016492:	f000 fca1 	bl	8016dd8 <_Bfree>
 8016496:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801649a:	ea43 0102 	orr.w	r1, r3, r2
 801649e:	9b04      	ldr	r3, [sp, #16]
 80164a0:	430b      	orrs	r3, r1
 80164a2:	464d      	mov	r5, r9
 80164a4:	d10f      	bne.n	80164c6 <_dtoa_r+0xa66>
 80164a6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80164aa:	d02a      	beq.n	8016502 <_dtoa_r+0xaa2>
 80164ac:	9b03      	ldr	r3, [sp, #12]
 80164ae:	2b00      	cmp	r3, #0
 80164b0:	dd02      	ble.n	80164b8 <_dtoa_r+0xa58>
 80164b2:	9b02      	ldr	r3, [sp, #8]
 80164b4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80164b8:	f88b a000 	strb.w	sl, [fp]
 80164bc:	e775      	b.n	80163aa <_dtoa_r+0x94a>
 80164be:	4638      	mov	r0, r7
 80164c0:	e7ba      	b.n	8016438 <_dtoa_r+0x9d8>
 80164c2:	2201      	movs	r2, #1
 80164c4:	e7e2      	b.n	801648c <_dtoa_r+0xa2c>
 80164c6:	9b03      	ldr	r3, [sp, #12]
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	db04      	blt.n	80164d6 <_dtoa_r+0xa76>
 80164cc:	9906      	ldr	r1, [sp, #24]
 80164ce:	430b      	orrs	r3, r1
 80164d0:	9904      	ldr	r1, [sp, #16]
 80164d2:	430b      	orrs	r3, r1
 80164d4:	d122      	bne.n	801651c <_dtoa_r+0xabc>
 80164d6:	2a00      	cmp	r2, #0
 80164d8:	ddee      	ble.n	80164b8 <_dtoa_r+0xa58>
 80164da:	ee18 1a10 	vmov	r1, s16
 80164de:	2201      	movs	r2, #1
 80164e0:	4620      	mov	r0, r4
 80164e2:	f000 fe95 	bl	8017210 <__lshift>
 80164e6:	4631      	mov	r1, r6
 80164e8:	ee08 0a10 	vmov	s16, r0
 80164ec:	f000 ff00 	bl	80172f0 <__mcmp>
 80164f0:	2800      	cmp	r0, #0
 80164f2:	dc03      	bgt.n	80164fc <_dtoa_r+0xa9c>
 80164f4:	d1e0      	bne.n	80164b8 <_dtoa_r+0xa58>
 80164f6:	f01a 0f01 	tst.w	sl, #1
 80164fa:	d0dd      	beq.n	80164b8 <_dtoa_r+0xa58>
 80164fc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8016500:	d1d7      	bne.n	80164b2 <_dtoa_r+0xa52>
 8016502:	2339      	movs	r3, #57	; 0x39
 8016504:	f88b 3000 	strb.w	r3, [fp]
 8016508:	462b      	mov	r3, r5
 801650a:	461d      	mov	r5, r3
 801650c:	3b01      	subs	r3, #1
 801650e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8016512:	2a39      	cmp	r2, #57	; 0x39
 8016514:	d071      	beq.n	80165fa <_dtoa_r+0xb9a>
 8016516:	3201      	adds	r2, #1
 8016518:	701a      	strb	r2, [r3, #0]
 801651a:	e746      	b.n	80163aa <_dtoa_r+0x94a>
 801651c:	2a00      	cmp	r2, #0
 801651e:	dd07      	ble.n	8016530 <_dtoa_r+0xad0>
 8016520:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8016524:	d0ed      	beq.n	8016502 <_dtoa_r+0xaa2>
 8016526:	f10a 0301 	add.w	r3, sl, #1
 801652a:	f88b 3000 	strb.w	r3, [fp]
 801652e:	e73c      	b.n	80163aa <_dtoa_r+0x94a>
 8016530:	9b05      	ldr	r3, [sp, #20]
 8016532:	f809 ac01 	strb.w	sl, [r9, #-1]
 8016536:	4599      	cmp	r9, r3
 8016538:	d047      	beq.n	80165ca <_dtoa_r+0xb6a>
 801653a:	ee18 1a10 	vmov	r1, s16
 801653e:	2300      	movs	r3, #0
 8016540:	220a      	movs	r2, #10
 8016542:	4620      	mov	r0, r4
 8016544:	f000 fc6a 	bl	8016e1c <__multadd>
 8016548:	45b8      	cmp	r8, r7
 801654a:	ee08 0a10 	vmov	s16, r0
 801654e:	f04f 0300 	mov.w	r3, #0
 8016552:	f04f 020a 	mov.w	r2, #10
 8016556:	4641      	mov	r1, r8
 8016558:	4620      	mov	r0, r4
 801655a:	d106      	bne.n	801656a <_dtoa_r+0xb0a>
 801655c:	f000 fc5e 	bl	8016e1c <__multadd>
 8016560:	4680      	mov	r8, r0
 8016562:	4607      	mov	r7, r0
 8016564:	f109 0901 	add.w	r9, r9, #1
 8016568:	e772      	b.n	8016450 <_dtoa_r+0x9f0>
 801656a:	f000 fc57 	bl	8016e1c <__multadd>
 801656e:	4639      	mov	r1, r7
 8016570:	4680      	mov	r8, r0
 8016572:	2300      	movs	r3, #0
 8016574:	220a      	movs	r2, #10
 8016576:	4620      	mov	r0, r4
 8016578:	f000 fc50 	bl	8016e1c <__multadd>
 801657c:	4607      	mov	r7, r0
 801657e:	e7f1      	b.n	8016564 <_dtoa_r+0xb04>
 8016580:	9b03      	ldr	r3, [sp, #12]
 8016582:	9302      	str	r3, [sp, #8]
 8016584:	9d01      	ldr	r5, [sp, #4]
 8016586:	ee18 0a10 	vmov	r0, s16
 801658a:	4631      	mov	r1, r6
 801658c:	f7ff f9dc 	bl	8015948 <quorem>
 8016590:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8016594:	9b01      	ldr	r3, [sp, #4]
 8016596:	f805 ab01 	strb.w	sl, [r5], #1
 801659a:	1aea      	subs	r2, r5, r3
 801659c:	9b02      	ldr	r3, [sp, #8]
 801659e:	4293      	cmp	r3, r2
 80165a0:	dd09      	ble.n	80165b6 <_dtoa_r+0xb56>
 80165a2:	ee18 1a10 	vmov	r1, s16
 80165a6:	2300      	movs	r3, #0
 80165a8:	220a      	movs	r2, #10
 80165aa:	4620      	mov	r0, r4
 80165ac:	f000 fc36 	bl	8016e1c <__multadd>
 80165b0:	ee08 0a10 	vmov	s16, r0
 80165b4:	e7e7      	b.n	8016586 <_dtoa_r+0xb26>
 80165b6:	9b02      	ldr	r3, [sp, #8]
 80165b8:	2b00      	cmp	r3, #0
 80165ba:	bfc8      	it	gt
 80165bc:	461d      	movgt	r5, r3
 80165be:	9b01      	ldr	r3, [sp, #4]
 80165c0:	bfd8      	it	le
 80165c2:	2501      	movle	r5, #1
 80165c4:	441d      	add	r5, r3
 80165c6:	f04f 0800 	mov.w	r8, #0
 80165ca:	ee18 1a10 	vmov	r1, s16
 80165ce:	2201      	movs	r2, #1
 80165d0:	4620      	mov	r0, r4
 80165d2:	f000 fe1d 	bl	8017210 <__lshift>
 80165d6:	4631      	mov	r1, r6
 80165d8:	ee08 0a10 	vmov	s16, r0
 80165dc:	f000 fe88 	bl	80172f0 <__mcmp>
 80165e0:	2800      	cmp	r0, #0
 80165e2:	dc91      	bgt.n	8016508 <_dtoa_r+0xaa8>
 80165e4:	d102      	bne.n	80165ec <_dtoa_r+0xb8c>
 80165e6:	f01a 0f01 	tst.w	sl, #1
 80165ea:	d18d      	bne.n	8016508 <_dtoa_r+0xaa8>
 80165ec:	462b      	mov	r3, r5
 80165ee:	461d      	mov	r5, r3
 80165f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80165f4:	2a30      	cmp	r2, #48	; 0x30
 80165f6:	d0fa      	beq.n	80165ee <_dtoa_r+0xb8e>
 80165f8:	e6d7      	b.n	80163aa <_dtoa_r+0x94a>
 80165fa:	9a01      	ldr	r2, [sp, #4]
 80165fc:	429a      	cmp	r2, r3
 80165fe:	d184      	bne.n	801650a <_dtoa_r+0xaaa>
 8016600:	9b00      	ldr	r3, [sp, #0]
 8016602:	3301      	adds	r3, #1
 8016604:	9300      	str	r3, [sp, #0]
 8016606:	2331      	movs	r3, #49	; 0x31
 8016608:	7013      	strb	r3, [r2, #0]
 801660a:	e6ce      	b.n	80163aa <_dtoa_r+0x94a>
 801660c:	4b09      	ldr	r3, [pc, #36]	; (8016634 <_dtoa_r+0xbd4>)
 801660e:	f7ff ba95 	b.w	8015b3c <_dtoa_r+0xdc>
 8016612:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016614:	2b00      	cmp	r3, #0
 8016616:	f47f aa6e 	bne.w	8015af6 <_dtoa_r+0x96>
 801661a:	4b07      	ldr	r3, [pc, #28]	; (8016638 <_dtoa_r+0xbd8>)
 801661c:	f7ff ba8e 	b.w	8015b3c <_dtoa_r+0xdc>
 8016620:	9b02      	ldr	r3, [sp, #8]
 8016622:	2b00      	cmp	r3, #0
 8016624:	dcae      	bgt.n	8016584 <_dtoa_r+0xb24>
 8016626:	9b06      	ldr	r3, [sp, #24]
 8016628:	2b02      	cmp	r3, #2
 801662a:	f73f aea8 	bgt.w	801637e <_dtoa_r+0x91e>
 801662e:	e7a9      	b.n	8016584 <_dtoa_r+0xb24>
 8016630:	0801a390 	.word	0x0801a390
 8016634:	0801a194 	.word	0x0801a194
 8016638:	0801a311 	.word	0x0801a311

0801663c <rshift>:
 801663c:	6903      	ldr	r3, [r0, #16]
 801663e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8016642:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016646:	ea4f 1261 	mov.w	r2, r1, asr #5
 801664a:	f100 0414 	add.w	r4, r0, #20
 801664e:	dd45      	ble.n	80166dc <rshift+0xa0>
 8016650:	f011 011f 	ands.w	r1, r1, #31
 8016654:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8016658:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801665c:	d10c      	bne.n	8016678 <rshift+0x3c>
 801665e:	f100 0710 	add.w	r7, r0, #16
 8016662:	4629      	mov	r1, r5
 8016664:	42b1      	cmp	r1, r6
 8016666:	d334      	bcc.n	80166d2 <rshift+0x96>
 8016668:	1a9b      	subs	r3, r3, r2
 801666a:	009b      	lsls	r3, r3, #2
 801666c:	1eea      	subs	r2, r5, #3
 801666e:	4296      	cmp	r6, r2
 8016670:	bf38      	it	cc
 8016672:	2300      	movcc	r3, #0
 8016674:	4423      	add	r3, r4
 8016676:	e015      	b.n	80166a4 <rshift+0x68>
 8016678:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801667c:	f1c1 0820 	rsb	r8, r1, #32
 8016680:	40cf      	lsrs	r7, r1
 8016682:	f105 0e04 	add.w	lr, r5, #4
 8016686:	46a1      	mov	r9, r4
 8016688:	4576      	cmp	r6, lr
 801668a:	46f4      	mov	ip, lr
 801668c:	d815      	bhi.n	80166ba <rshift+0x7e>
 801668e:	1a9a      	subs	r2, r3, r2
 8016690:	0092      	lsls	r2, r2, #2
 8016692:	3a04      	subs	r2, #4
 8016694:	3501      	adds	r5, #1
 8016696:	42ae      	cmp	r6, r5
 8016698:	bf38      	it	cc
 801669a:	2200      	movcc	r2, #0
 801669c:	18a3      	adds	r3, r4, r2
 801669e:	50a7      	str	r7, [r4, r2]
 80166a0:	b107      	cbz	r7, 80166a4 <rshift+0x68>
 80166a2:	3304      	adds	r3, #4
 80166a4:	1b1a      	subs	r2, r3, r4
 80166a6:	42a3      	cmp	r3, r4
 80166a8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80166ac:	bf08      	it	eq
 80166ae:	2300      	moveq	r3, #0
 80166b0:	6102      	str	r2, [r0, #16]
 80166b2:	bf08      	it	eq
 80166b4:	6143      	streq	r3, [r0, #20]
 80166b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80166ba:	f8dc c000 	ldr.w	ip, [ip]
 80166be:	fa0c fc08 	lsl.w	ip, ip, r8
 80166c2:	ea4c 0707 	orr.w	r7, ip, r7
 80166c6:	f849 7b04 	str.w	r7, [r9], #4
 80166ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 80166ce:	40cf      	lsrs	r7, r1
 80166d0:	e7da      	b.n	8016688 <rshift+0x4c>
 80166d2:	f851 cb04 	ldr.w	ip, [r1], #4
 80166d6:	f847 cf04 	str.w	ip, [r7, #4]!
 80166da:	e7c3      	b.n	8016664 <rshift+0x28>
 80166dc:	4623      	mov	r3, r4
 80166de:	e7e1      	b.n	80166a4 <rshift+0x68>

080166e0 <__hexdig_fun>:
 80166e0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80166e4:	2b09      	cmp	r3, #9
 80166e6:	d802      	bhi.n	80166ee <__hexdig_fun+0xe>
 80166e8:	3820      	subs	r0, #32
 80166ea:	b2c0      	uxtb	r0, r0
 80166ec:	4770      	bx	lr
 80166ee:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80166f2:	2b05      	cmp	r3, #5
 80166f4:	d801      	bhi.n	80166fa <__hexdig_fun+0x1a>
 80166f6:	3847      	subs	r0, #71	; 0x47
 80166f8:	e7f7      	b.n	80166ea <__hexdig_fun+0xa>
 80166fa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80166fe:	2b05      	cmp	r3, #5
 8016700:	d801      	bhi.n	8016706 <__hexdig_fun+0x26>
 8016702:	3827      	subs	r0, #39	; 0x27
 8016704:	e7f1      	b.n	80166ea <__hexdig_fun+0xa>
 8016706:	2000      	movs	r0, #0
 8016708:	4770      	bx	lr
	...

0801670c <__gethex>:
 801670c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016710:	ed2d 8b02 	vpush	{d8}
 8016714:	b089      	sub	sp, #36	; 0x24
 8016716:	ee08 0a10 	vmov	s16, r0
 801671a:	9304      	str	r3, [sp, #16]
 801671c:	4bb4      	ldr	r3, [pc, #720]	; (80169f0 <__gethex+0x2e4>)
 801671e:	681b      	ldr	r3, [r3, #0]
 8016720:	9301      	str	r3, [sp, #4]
 8016722:	4618      	mov	r0, r3
 8016724:	468b      	mov	fp, r1
 8016726:	4690      	mov	r8, r2
 8016728:	f7e9 fd6a 	bl	8000200 <strlen>
 801672c:	9b01      	ldr	r3, [sp, #4]
 801672e:	f8db 2000 	ldr.w	r2, [fp]
 8016732:	4403      	add	r3, r0
 8016734:	4682      	mov	sl, r0
 8016736:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801673a:	9305      	str	r3, [sp, #20]
 801673c:	1c93      	adds	r3, r2, #2
 801673e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8016742:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8016746:	32fe      	adds	r2, #254	; 0xfe
 8016748:	18d1      	adds	r1, r2, r3
 801674a:	461f      	mov	r7, r3
 801674c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8016750:	9100      	str	r1, [sp, #0]
 8016752:	2830      	cmp	r0, #48	; 0x30
 8016754:	d0f8      	beq.n	8016748 <__gethex+0x3c>
 8016756:	f7ff ffc3 	bl	80166e0 <__hexdig_fun>
 801675a:	4604      	mov	r4, r0
 801675c:	2800      	cmp	r0, #0
 801675e:	d13a      	bne.n	80167d6 <__gethex+0xca>
 8016760:	9901      	ldr	r1, [sp, #4]
 8016762:	4652      	mov	r2, sl
 8016764:	4638      	mov	r0, r7
 8016766:	f001 fa23 	bl	8017bb0 <strncmp>
 801676a:	4605      	mov	r5, r0
 801676c:	2800      	cmp	r0, #0
 801676e:	d168      	bne.n	8016842 <__gethex+0x136>
 8016770:	f817 000a 	ldrb.w	r0, [r7, sl]
 8016774:	eb07 060a 	add.w	r6, r7, sl
 8016778:	f7ff ffb2 	bl	80166e0 <__hexdig_fun>
 801677c:	2800      	cmp	r0, #0
 801677e:	d062      	beq.n	8016846 <__gethex+0x13a>
 8016780:	4633      	mov	r3, r6
 8016782:	7818      	ldrb	r0, [r3, #0]
 8016784:	2830      	cmp	r0, #48	; 0x30
 8016786:	461f      	mov	r7, r3
 8016788:	f103 0301 	add.w	r3, r3, #1
 801678c:	d0f9      	beq.n	8016782 <__gethex+0x76>
 801678e:	f7ff ffa7 	bl	80166e0 <__hexdig_fun>
 8016792:	2301      	movs	r3, #1
 8016794:	fab0 f480 	clz	r4, r0
 8016798:	0964      	lsrs	r4, r4, #5
 801679a:	4635      	mov	r5, r6
 801679c:	9300      	str	r3, [sp, #0]
 801679e:	463a      	mov	r2, r7
 80167a0:	4616      	mov	r6, r2
 80167a2:	3201      	adds	r2, #1
 80167a4:	7830      	ldrb	r0, [r6, #0]
 80167a6:	f7ff ff9b 	bl	80166e0 <__hexdig_fun>
 80167aa:	2800      	cmp	r0, #0
 80167ac:	d1f8      	bne.n	80167a0 <__gethex+0x94>
 80167ae:	9901      	ldr	r1, [sp, #4]
 80167b0:	4652      	mov	r2, sl
 80167b2:	4630      	mov	r0, r6
 80167b4:	f001 f9fc 	bl	8017bb0 <strncmp>
 80167b8:	b980      	cbnz	r0, 80167dc <__gethex+0xd0>
 80167ba:	b94d      	cbnz	r5, 80167d0 <__gethex+0xc4>
 80167bc:	eb06 050a 	add.w	r5, r6, sl
 80167c0:	462a      	mov	r2, r5
 80167c2:	4616      	mov	r6, r2
 80167c4:	3201      	adds	r2, #1
 80167c6:	7830      	ldrb	r0, [r6, #0]
 80167c8:	f7ff ff8a 	bl	80166e0 <__hexdig_fun>
 80167cc:	2800      	cmp	r0, #0
 80167ce:	d1f8      	bne.n	80167c2 <__gethex+0xb6>
 80167d0:	1bad      	subs	r5, r5, r6
 80167d2:	00ad      	lsls	r5, r5, #2
 80167d4:	e004      	b.n	80167e0 <__gethex+0xd4>
 80167d6:	2400      	movs	r4, #0
 80167d8:	4625      	mov	r5, r4
 80167da:	e7e0      	b.n	801679e <__gethex+0x92>
 80167dc:	2d00      	cmp	r5, #0
 80167de:	d1f7      	bne.n	80167d0 <__gethex+0xc4>
 80167e0:	7833      	ldrb	r3, [r6, #0]
 80167e2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80167e6:	2b50      	cmp	r3, #80	; 0x50
 80167e8:	d13b      	bne.n	8016862 <__gethex+0x156>
 80167ea:	7873      	ldrb	r3, [r6, #1]
 80167ec:	2b2b      	cmp	r3, #43	; 0x2b
 80167ee:	d02c      	beq.n	801684a <__gethex+0x13e>
 80167f0:	2b2d      	cmp	r3, #45	; 0x2d
 80167f2:	d02e      	beq.n	8016852 <__gethex+0x146>
 80167f4:	1c71      	adds	r1, r6, #1
 80167f6:	f04f 0900 	mov.w	r9, #0
 80167fa:	7808      	ldrb	r0, [r1, #0]
 80167fc:	f7ff ff70 	bl	80166e0 <__hexdig_fun>
 8016800:	1e43      	subs	r3, r0, #1
 8016802:	b2db      	uxtb	r3, r3
 8016804:	2b18      	cmp	r3, #24
 8016806:	d82c      	bhi.n	8016862 <__gethex+0x156>
 8016808:	f1a0 0210 	sub.w	r2, r0, #16
 801680c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8016810:	f7ff ff66 	bl	80166e0 <__hexdig_fun>
 8016814:	1e43      	subs	r3, r0, #1
 8016816:	b2db      	uxtb	r3, r3
 8016818:	2b18      	cmp	r3, #24
 801681a:	d91d      	bls.n	8016858 <__gethex+0x14c>
 801681c:	f1b9 0f00 	cmp.w	r9, #0
 8016820:	d000      	beq.n	8016824 <__gethex+0x118>
 8016822:	4252      	negs	r2, r2
 8016824:	4415      	add	r5, r2
 8016826:	f8cb 1000 	str.w	r1, [fp]
 801682a:	b1e4      	cbz	r4, 8016866 <__gethex+0x15a>
 801682c:	9b00      	ldr	r3, [sp, #0]
 801682e:	2b00      	cmp	r3, #0
 8016830:	bf14      	ite	ne
 8016832:	2700      	movne	r7, #0
 8016834:	2706      	moveq	r7, #6
 8016836:	4638      	mov	r0, r7
 8016838:	b009      	add	sp, #36	; 0x24
 801683a:	ecbd 8b02 	vpop	{d8}
 801683e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016842:	463e      	mov	r6, r7
 8016844:	4625      	mov	r5, r4
 8016846:	2401      	movs	r4, #1
 8016848:	e7ca      	b.n	80167e0 <__gethex+0xd4>
 801684a:	f04f 0900 	mov.w	r9, #0
 801684e:	1cb1      	adds	r1, r6, #2
 8016850:	e7d3      	b.n	80167fa <__gethex+0xee>
 8016852:	f04f 0901 	mov.w	r9, #1
 8016856:	e7fa      	b.n	801684e <__gethex+0x142>
 8016858:	230a      	movs	r3, #10
 801685a:	fb03 0202 	mla	r2, r3, r2, r0
 801685e:	3a10      	subs	r2, #16
 8016860:	e7d4      	b.n	801680c <__gethex+0x100>
 8016862:	4631      	mov	r1, r6
 8016864:	e7df      	b.n	8016826 <__gethex+0x11a>
 8016866:	1bf3      	subs	r3, r6, r7
 8016868:	3b01      	subs	r3, #1
 801686a:	4621      	mov	r1, r4
 801686c:	2b07      	cmp	r3, #7
 801686e:	dc0b      	bgt.n	8016888 <__gethex+0x17c>
 8016870:	ee18 0a10 	vmov	r0, s16
 8016874:	f000 fa70 	bl	8016d58 <_Balloc>
 8016878:	4604      	mov	r4, r0
 801687a:	b940      	cbnz	r0, 801688e <__gethex+0x182>
 801687c:	4b5d      	ldr	r3, [pc, #372]	; (80169f4 <__gethex+0x2e8>)
 801687e:	4602      	mov	r2, r0
 8016880:	21de      	movs	r1, #222	; 0xde
 8016882:	485d      	ldr	r0, [pc, #372]	; (80169f8 <__gethex+0x2ec>)
 8016884:	f001 f9b6 	bl	8017bf4 <__assert_func>
 8016888:	3101      	adds	r1, #1
 801688a:	105b      	asrs	r3, r3, #1
 801688c:	e7ee      	b.n	801686c <__gethex+0x160>
 801688e:	f100 0914 	add.w	r9, r0, #20
 8016892:	f04f 0b00 	mov.w	fp, #0
 8016896:	f1ca 0301 	rsb	r3, sl, #1
 801689a:	f8cd 9008 	str.w	r9, [sp, #8]
 801689e:	f8cd b000 	str.w	fp, [sp]
 80168a2:	9306      	str	r3, [sp, #24]
 80168a4:	42b7      	cmp	r7, r6
 80168a6:	d340      	bcc.n	801692a <__gethex+0x21e>
 80168a8:	9802      	ldr	r0, [sp, #8]
 80168aa:	9b00      	ldr	r3, [sp, #0]
 80168ac:	f840 3b04 	str.w	r3, [r0], #4
 80168b0:	eba0 0009 	sub.w	r0, r0, r9
 80168b4:	1080      	asrs	r0, r0, #2
 80168b6:	0146      	lsls	r6, r0, #5
 80168b8:	6120      	str	r0, [r4, #16]
 80168ba:	4618      	mov	r0, r3
 80168bc:	f000 fb3e 	bl	8016f3c <__hi0bits>
 80168c0:	1a30      	subs	r0, r6, r0
 80168c2:	f8d8 6000 	ldr.w	r6, [r8]
 80168c6:	42b0      	cmp	r0, r6
 80168c8:	dd63      	ble.n	8016992 <__gethex+0x286>
 80168ca:	1b87      	subs	r7, r0, r6
 80168cc:	4639      	mov	r1, r7
 80168ce:	4620      	mov	r0, r4
 80168d0:	f000 fee2 	bl	8017698 <__any_on>
 80168d4:	4682      	mov	sl, r0
 80168d6:	b1a8      	cbz	r0, 8016904 <__gethex+0x1f8>
 80168d8:	1e7b      	subs	r3, r7, #1
 80168da:	1159      	asrs	r1, r3, #5
 80168dc:	f003 021f 	and.w	r2, r3, #31
 80168e0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80168e4:	f04f 0a01 	mov.w	sl, #1
 80168e8:	fa0a f202 	lsl.w	r2, sl, r2
 80168ec:	420a      	tst	r2, r1
 80168ee:	d009      	beq.n	8016904 <__gethex+0x1f8>
 80168f0:	4553      	cmp	r3, sl
 80168f2:	dd05      	ble.n	8016900 <__gethex+0x1f4>
 80168f4:	1eb9      	subs	r1, r7, #2
 80168f6:	4620      	mov	r0, r4
 80168f8:	f000 fece 	bl	8017698 <__any_on>
 80168fc:	2800      	cmp	r0, #0
 80168fe:	d145      	bne.n	801698c <__gethex+0x280>
 8016900:	f04f 0a02 	mov.w	sl, #2
 8016904:	4639      	mov	r1, r7
 8016906:	4620      	mov	r0, r4
 8016908:	f7ff fe98 	bl	801663c <rshift>
 801690c:	443d      	add	r5, r7
 801690e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016912:	42ab      	cmp	r3, r5
 8016914:	da4c      	bge.n	80169b0 <__gethex+0x2a4>
 8016916:	ee18 0a10 	vmov	r0, s16
 801691a:	4621      	mov	r1, r4
 801691c:	f000 fa5c 	bl	8016dd8 <_Bfree>
 8016920:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016922:	2300      	movs	r3, #0
 8016924:	6013      	str	r3, [r2, #0]
 8016926:	27a3      	movs	r7, #163	; 0xa3
 8016928:	e785      	b.n	8016836 <__gethex+0x12a>
 801692a:	1e73      	subs	r3, r6, #1
 801692c:	9a05      	ldr	r2, [sp, #20]
 801692e:	9303      	str	r3, [sp, #12]
 8016930:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8016934:	4293      	cmp	r3, r2
 8016936:	d019      	beq.n	801696c <__gethex+0x260>
 8016938:	f1bb 0f20 	cmp.w	fp, #32
 801693c:	d107      	bne.n	801694e <__gethex+0x242>
 801693e:	9b02      	ldr	r3, [sp, #8]
 8016940:	9a00      	ldr	r2, [sp, #0]
 8016942:	f843 2b04 	str.w	r2, [r3], #4
 8016946:	9302      	str	r3, [sp, #8]
 8016948:	2300      	movs	r3, #0
 801694a:	9300      	str	r3, [sp, #0]
 801694c:	469b      	mov	fp, r3
 801694e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8016952:	f7ff fec5 	bl	80166e0 <__hexdig_fun>
 8016956:	9b00      	ldr	r3, [sp, #0]
 8016958:	f000 000f 	and.w	r0, r0, #15
 801695c:	fa00 f00b 	lsl.w	r0, r0, fp
 8016960:	4303      	orrs	r3, r0
 8016962:	9300      	str	r3, [sp, #0]
 8016964:	f10b 0b04 	add.w	fp, fp, #4
 8016968:	9b03      	ldr	r3, [sp, #12]
 801696a:	e00d      	b.n	8016988 <__gethex+0x27c>
 801696c:	9b03      	ldr	r3, [sp, #12]
 801696e:	9a06      	ldr	r2, [sp, #24]
 8016970:	4413      	add	r3, r2
 8016972:	42bb      	cmp	r3, r7
 8016974:	d3e0      	bcc.n	8016938 <__gethex+0x22c>
 8016976:	4618      	mov	r0, r3
 8016978:	9901      	ldr	r1, [sp, #4]
 801697a:	9307      	str	r3, [sp, #28]
 801697c:	4652      	mov	r2, sl
 801697e:	f001 f917 	bl	8017bb0 <strncmp>
 8016982:	9b07      	ldr	r3, [sp, #28]
 8016984:	2800      	cmp	r0, #0
 8016986:	d1d7      	bne.n	8016938 <__gethex+0x22c>
 8016988:	461e      	mov	r6, r3
 801698a:	e78b      	b.n	80168a4 <__gethex+0x198>
 801698c:	f04f 0a03 	mov.w	sl, #3
 8016990:	e7b8      	b.n	8016904 <__gethex+0x1f8>
 8016992:	da0a      	bge.n	80169aa <__gethex+0x29e>
 8016994:	1a37      	subs	r7, r6, r0
 8016996:	4621      	mov	r1, r4
 8016998:	ee18 0a10 	vmov	r0, s16
 801699c:	463a      	mov	r2, r7
 801699e:	f000 fc37 	bl	8017210 <__lshift>
 80169a2:	1bed      	subs	r5, r5, r7
 80169a4:	4604      	mov	r4, r0
 80169a6:	f100 0914 	add.w	r9, r0, #20
 80169aa:	f04f 0a00 	mov.w	sl, #0
 80169ae:	e7ae      	b.n	801690e <__gethex+0x202>
 80169b0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80169b4:	42a8      	cmp	r0, r5
 80169b6:	dd72      	ble.n	8016a9e <__gethex+0x392>
 80169b8:	1b45      	subs	r5, r0, r5
 80169ba:	42ae      	cmp	r6, r5
 80169bc:	dc36      	bgt.n	8016a2c <__gethex+0x320>
 80169be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80169c2:	2b02      	cmp	r3, #2
 80169c4:	d02a      	beq.n	8016a1c <__gethex+0x310>
 80169c6:	2b03      	cmp	r3, #3
 80169c8:	d02c      	beq.n	8016a24 <__gethex+0x318>
 80169ca:	2b01      	cmp	r3, #1
 80169cc:	d11c      	bne.n	8016a08 <__gethex+0x2fc>
 80169ce:	42ae      	cmp	r6, r5
 80169d0:	d11a      	bne.n	8016a08 <__gethex+0x2fc>
 80169d2:	2e01      	cmp	r6, #1
 80169d4:	d112      	bne.n	80169fc <__gethex+0x2f0>
 80169d6:	9a04      	ldr	r2, [sp, #16]
 80169d8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80169dc:	6013      	str	r3, [r2, #0]
 80169de:	2301      	movs	r3, #1
 80169e0:	6123      	str	r3, [r4, #16]
 80169e2:	f8c9 3000 	str.w	r3, [r9]
 80169e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80169e8:	2762      	movs	r7, #98	; 0x62
 80169ea:	601c      	str	r4, [r3, #0]
 80169ec:	e723      	b.n	8016836 <__gethex+0x12a>
 80169ee:	bf00      	nop
 80169f0:	0801a408 	.word	0x0801a408
 80169f4:	0801a390 	.word	0x0801a390
 80169f8:	0801a3a1 	.word	0x0801a3a1
 80169fc:	1e71      	subs	r1, r6, #1
 80169fe:	4620      	mov	r0, r4
 8016a00:	f000 fe4a 	bl	8017698 <__any_on>
 8016a04:	2800      	cmp	r0, #0
 8016a06:	d1e6      	bne.n	80169d6 <__gethex+0x2ca>
 8016a08:	ee18 0a10 	vmov	r0, s16
 8016a0c:	4621      	mov	r1, r4
 8016a0e:	f000 f9e3 	bl	8016dd8 <_Bfree>
 8016a12:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016a14:	2300      	movs	r3, #0
 8016a16:	6013      	str	r3, [r2, #0]
 8016a18:	2750      	movs	r7, #80	; 0x50
 8016a1a:	e70c      	b.n	8016836 <__gethex+0x12a>
 8016a1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016a1e:	2b00      	cmp	r3, #0
 8016a20:	d1f2      	bne.n	8016a08 <__gethex+0x2fc>
 8016a22:	e7d8      	b.n	80169d6 <__gethex+0x2ca>
 8016a24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016a26:	2b00      	cmp	r3, #0
 8016a28:	d1d5      	bne.n	80169d6 <__gethex+0x2ca>
 8016a2a:	e7ed      	b.n	8016a08 <__gethex+0x2fc>
 8016a2c:	1e6f      	subs	r7, r5, #1
 8016a2e:	f1ba 0f00 	cmp.w	sl, #0
 8016a32:	d131      	bne.n	8016a98 <__gethex+0x38c>
 8016a34:	b127      	cbz	r7, 8016a40 <__gethex+0x334>
 8016a36:	4639      	mov	r1, r7
 8016a38:	4620      	mov	r0, r4
 8016a3a:	f000 fe2d 	bl	8017698 <__any_on>
 8016a3e:	4682      	mov	sl, r0
 8016a40:	117b      	asrs	r3, r7, #5
 8016a42:	2101      	movs	r1, #1
 8016a44:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8016a48:	f007 071f 	and.w	r7, r7, #31
 8016a4c:	fa01 f707 	lsl.w	r7, r1, r7
 8016a50:	421f      	tst	r7, r3
 8016a52:	4629      	mov	r1, r5
 8016a54:	4620      	mov	r0, r4
 8016a56:	bf18      	it	ne
 8016a58:	f04a 0a02 	orrne.w	sl, sl, #2
 8016a5c:	1b76      	subs	r6, r6, r5
 8016a5e:	f7ff fded 	bl	801663c <rshift>
 8016a62:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8016a66:	2702      	movs	r7, #2
 8016a68:	f1ba 0f00 	cmp.w	sl, #0
 8016a6c:	d048      	beq.n	8016b00 <__gethex+0x3f4>
 8016a6e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016a72:	2b02      	cmp	r3, #2
 8016a74:	d015      	beq.n	8016aa2 <__gethex+0x396>
 8016a76:	2b03      	cmp	r3, #3
 8016a78:	d017      	beq.n	8016aaa <__gethex+0x39e>
 8016a7a:	2b01      	cmp	r3, #1
 8016a7c:	d109      	bne.n	8016a92 <__gethex+0x386>
 8016a7e:	f01a 0f02 	tst.w	sl, #2
 8016a82:	d006      	beq.n	8016a92 <__gethex+0x386>
 8016a84:	f8d9 0000 	ldr.w	r0, [r9]
 8016a88:	ea4a 0a00 	orr.w	sl, sl, r0
 8016a8c:	f01a 0f01 	tst.w	sl, #1
 8016a90:	d10e      	bne.n	8016ab0 <__gethex+0x3a4>
 8016a92:	f047 0710 	orr.w	r7, r7, #16
 8016a96:	e033      	b.n	8016b00 <__gethex+0x3f4>
 8016a98:	f04f 0a01 	mov.w	sl, #1
 8016a9c:	e7d0      	b.n	8016a40 <__gethex+0x334>
 8016a9e:	2701      	movs	r7, #1
 8016aa0:	e7e2      	b.n	8016a68 <__gethex+0x35c>
 8016aa2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016aa4:	f1c3 0301 	rsb	r3, r3, #1
 8016aa8:	9315      	str	r3, [sp, #84]	; 0x54
 8016aaa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016aac:	2b00      	cmp	r3, #0
 8016aae:	d0f0      	beq.n	8016a92 <__gethex+0x386>
 8016ab0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8016ab4:	f104 0314 	add.w	r3, r4, #20
 8016ab8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8016abc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8016ac0:	f04f 0c00 	mov.w	ip, #0
 8016ac4:	4618      	mov	r0, r3
 8016ac6:	f853 2b04 	ldr.w	r2, [r3], #4
 8016aca:	f1b2 3fff 	cmp.w	r2, #4294967295
 8016ace:	d01c      	beq.n	8016b0a <__gethex+0x3fe>
 8016ad0:	3201      	adds	r2, #1
 8016ad2:	6002      	str	r2, [r0, #0]
 8016ad4:	2f02      	cmp	r7, #2
 8016ad6:	f104 0314 	add.w	r3, r4, #20
 8016ada:	d13f      	bne.n	8016b5c <__gethex+0x450>
 8016adc:	f8d8 2000 	ldr.w	r2, [r8]
 8016ae0:	3a01      	subs	r2, #1
 8016ae2:	42b2      	cmp	r2, r6
 8016ae4:	d10a      	bne.n	8016afc <__gethex+0x3f0>
 8016ae6:	1171      	asrs	r1, r6, #5
 8016ae8:	2201      	movs	r2, #1
 8016aea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016aee:	f006 061f 	and.w	r6, r6, #31
 8016af2:	fa02 f606 	lsl.w	r6, r2, r6
 8016af6:	421e      	tst	r6, r3
 8016af8:	bf18      	it	ne
 8016afa:	4617      	movne	r7, r2
 8016afc:	f047 0720 	orr.w	r7, r7, #32
 8016b00:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016b02:	601c      	str	r4, [r3, #0]
 8016b04:	9b04      	ldr	r3, [sp, #16]
 8016b06:	601d      	str	r5, [r3, #0]
 8016b08:	e695      	b.n	8016836 <__gethex+0x12a>
 8016b0a:	4299      	cmp	r1, r3
 8016b0c:	f843 cc04 	str.w	ip, [r3, #-4]
 8016b10:	d8d8      	bhi.n	8016ac4 <__gethex+0x3b8>
 8016b12:	68a3      	ldr	r3, [r4, #8]
 8016b14:	459b      	cmp	fp, r3
 8016b16:	db19      	blt.n	8016b4c <__gethex+0x440>
 8016b18:	6861      	ldr	r1, [r4, #4]
 8016b1a:	ee18 0a10 	vmov	r0, s16
 8016b1e:	3101      	adds	r1, #1
 8016b20:	f000 f91a 	bl	8016d58 <_Balloc>
 8016b24:	4681      	mov	r9, r0
 8016b26:	b918      	cbnz	r0, 8016b30 <__gethex+0x424>
 8016b28:	4b1a      	ldr	r3, [pc, #104]	; (8016b94 <__gethex+0x488>)
 8016b2a:	4602      	mov	r2, r0
 8016b2c:	2184      	movs	r1, #132	; 0x84
 8016b2e:	e6a8      	b.n	8016882 <__gethex+0x176>
 8016b30:	6922      	ldr	r2, [r4, #16]
 8016b32:	3202      	adds	r2, #2
 8016b34:	f104 010c 	add.w	r1, r4, #12
 8016b38:	0092      	lsls	r2, r2, #2
 8016b3a:	300c      	adds	r0, #12
 8016b3c:	f7fd f9a2 	bl	8013e84 <memcpy>
 8016b40:	4621      	mov	r1, r4
 8016b42:	ee18 0a10 	vmov	r0, s16
 8016b46:	f000 f947 	bl	8016dd8 <_Bfree>
 8016b4a:	464c      	mov	r4, r9
 8016b4c:	6923      	ldr	r3, [r4, #16]
 8016b4e:	1c5a      	adds	r2, r3, #1
 8016b50:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8016b54:	6122      	str	r2, [r4, #16]
 8016b56:	2201      	movs	r2, #1
 8016b58:	615a      	str	r2, [r3, #20]
 8016b5a:	e7bb      	b.n	8016ad4 <__gethex+0x3c8>
 8016b5c:	6922      	ldr	r2, [r4, #16]
 8016b5e:	455a      	cmp	r2, fp
 8016b60:	dd0b      	ble.n	8016b7a <__gethex+0x46e>
 8016b62:	2101      	movs	r1, #1
 8016b64:	4620      	mov	r0, r4
 8016b66:	f7ff fd69 	bl	801663c <rshift>
 8016b6a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016b6e:	3501      	adds	r5, #1
 8016b70:	42ab      	cmp	r3, r5
 8016b72:	f6ff aed0 	blt.w	8016916 <__gethex+0x20a>
 8016b76:	2701      	movs	r7, #1
 8016b78:	e7c0      	b.n	8016afc <__gethex+0x3f0>
 8016b7a:	f016 061f 	ands.w	r6, r6, #31
 8016b7e:	d0fa      	beq.n	8016b76 <__gethex+0x46a>
 8016b80:	4453      	add	r3, sl
 8016b82:	f1c6 0620 	rsb	r6, r6, #32
 8016b86:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8016b8a:	f000 f9d7 	bl	8016f3c <__hi0bits>
 8016b8e:	42b0      	cmp	r0, r6
 8016b90:	dbe7      	blt.n	8016b62 <__gethex+0x456>
 8016b92:	e7f0      	b.n	8016b76 <__gethex+0x46a>
 8016b94:	0801a390 	.word	0x0801a390

08016b98 <L_shift>:
 8016b98:	f1c2 0208 	rsb	r2, r2, #8
 8016b9c:	0092      	lsls	r2, r2, #2
 8016b9e:	b570      	push	{r4, r5, r6, lr}
 8016ba0:	f1c2 0620 	rsb	r6, r2, #32
 8016ba4:	6843      	ldr	r3, [r0, #4]
 8016ba6:	6804      	ldr	r4, [r0, #0]
 8016ba8:	fa03 f506 	lsl.w	r5, r3, r6
 8016bac:	432c      	orrs	r4, r5
 8016bae:	40d3      	lsrs	r3, r2
 8016bb0:	6004      	str	r4, [r0, #0]
 8016bb2:	f840 3f04 	str.w	r3, [r0, #4]!
 8016bb6:	4288      	cmp	r0, r1
 8016bb8:	d3f4      	bcc.n	8016ba4 <L_shift+0xc>
 8016bba:	bd70      	pop	{r4, r5, r6, pc}

08016bbc <__match>:
 8016bbc:	b530      	push	{r4, r5, lr}
 8016bbe:	6803      	ldr	r3, [r0, #0]
 8016bc0:	3301      	adds	r3, #1
 8016bc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016bc6:	b914      	cbnz	r4, 8016bce <__match+0x12>
 8016bc8:	6003      	str	r3, [r0, #0]
 8016bca:	2001      	movs	r0, #1
 8016bcc:	bd30      	pop	{r4, r5, pc}
 8016bce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016bd2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8016bd6:	2d19      	cmp	r5, #25
 8016bd8:	bf98      	it	ls
 8016bda:	3220      	addls	r2, #32
 8016bdc:	42a2      	cmp	r2, r4
 8016bde:	d0f0      	beq.n	8016bc2 <__match+0x6>
 8016be0:	2000      	movs	r0, #0
 8016be2:	e7f3      	b.n	8016bcc <__match+0x10>

08016be4 <__hexnan>:
 8016be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016be8:	680b      	ldr	r3, [r1, #0]
 8016bea:	115e      	asrs	r6, r3, #5
 8016bec:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8016bf0:	f013 031f 	ands.w	r3, r3, #31
 8016bf4:	b087      	sub	sp, #28
 8016bf6:	bf18      	it	ne
 8016bf8:	3604      	addne	r6, #4
 8016bfa:	2500      	movs	r5, #0
 8016bfc:	1f37      	subs	r7, r6, #4
 8016bfe:	4690      	mov	r8, r2
 8016c00:	6802      	ldr	r2, [r0, #0]
 8016c02:	9301      	str	r3, [sp, #4]
 8016c04:	4682      	mov	sl, r0
 8016c06:	f846 5c04 	str.w	r5, [r6, #-4]
 8016c0a:	46b9      	mov	r9, r7
 8016c0c:	463c      	mov	r4, r7
 8016c0e:	9502      	str	r5, [sp, #8]
 8016c10:	46ab      	mov	fp, r5
 8016c12:	7851      	ldrb	r1, [r2, #1]
 8016c14:	1c53      	adds	r3, r2, #1
 8016c16:	9303      	str	r3, [sp, #12]
 8016c18:	b341      	cbz	r1, 8016c6c <__hexnan+0x88>
 8016c1a:	4608      	mov	r0, r1
 8016c1c:	9205      	str	r2, [sp, #20]
 8016c1e:	9104      	str	r1, [sp, #16]
 8016c20:	f7ff fd5e 	bl	80166e0 <__hexdig_fun>
 8016c24:	2800      	cmp	r0, #0
 8016c26:	d14f      	bne.n	8016cc8 <__hexnan+0xe4>
 8016c28:	9904      	ldr	r1, [sp, #16]
 8016c2a:	9a05      	ldr	r2, [sp, #20]
 8016c2c:	2920      	cmp	r1, #32
 8016c2e:	d818      	bhi.n	8016c62 <__hexnan+0x7e>
 8016c30:	9b02      	ldr	r3, [sp, #8]
 8016c32:	459b      	cmp	fp, r3
 8016c34:	dd13      	ble.n	8016c5e <__hexnan+0x7a>
 8016c36:	454c      	cmp	r4, r9
 8016c38:	d206      	bcs.n	8016c48 <__hexnan+0x64>
 8016c3a:	2d07      	cmp	r5, #7
 8016c3c:	dc04      	bgt.n	8016c48 <__hexnan+0x64>
 8016c3e:	462a      	mov	r2, r5
 8016c40:	4649      	mov	r1, r9
 8016c42:	4620      	mov	r0, r4
 8016c44:	f7ff ffa8 	bl	8016b98 <L_shift>
 8016c48:	4544      	cmp	r4, r8
 8016c4a:	d950      	bls.n	8016cee <__hexnan+0x10a>
 8016c4c:	2300      	movs	r3, #0
 8016c4e:	f1a4 0904 	sub.w	r9, r4, #4
 8016c52:	f844 3c04 	str.w	r3, [r4, #-4]
 8016c56:	f8cd b008 	str.w	fp, [sp, #8]
 8016c5a:	464c      	mov	r4, r9
 8016c5c:	461d      	mov	r5, r3
 8016c5e:	9a03      	ldr	r2, [sp, #12]
 8016c60:	e7d7      	b.n	8016c12 <__hexnan+0x2e>
 8016c62:	2929      	cmp	r1, #41	; 0x29
 8016c64:	d156      	bne.n	8016d14 <__hexnan+0x130>
 8016c66:	3202      	adds	r2, #2
 8016c68:	f8ca 2000 	str.w	r2, [sl]
 8016c6c:	f1bb 0f00 	cmp.w	fp, #0
 8016c70:	d050      	beq.n	8016d14 <__hexnan+0x130>
 8016c72:	454c      	cmp	r4, r9
 8016c74:	d206      	bcs.n	8016c84 <__hexnan+0xa0>
 8016c76:	2d07      	cmp	r5, #7
 8016c78:	dc04      	bgt.n	8016c84 <__hexnan+0xa0>
 8016c7a:	462a      	mov	r2, r5
 8016c7c:	4649      	mov	r1, r9
 8016c7e:	4620      	mov	r0, r4
 8016c80:	f7ff ff8a 	bl	8016b98 <L_shift>
 8016c84:	4544      	cmp	r4, r8
 8016c86:	d934      	bls.n	8016cf2 <__hexnan+0x10e>
 8016c88:	f1a8 0204 	sub.w	r2, r8, #4
 8016c8c:	4623      	mov	r3, r4
 8016c8e:	f853 1b04 	ldr.w	r1, [r3], #4
 8016c92:	f842 1f04 	str.w	r1, [r2, #4]!
 8016c96:	429f      	cmp	r7, r3
 8016c98:	d2f9      	bcs.n	8016c8e <__hexnan+0xaa>
 8016c9a:	1b3b      	subs	r3, r7, r4
 8016c9c:	f023 0303 	bic.w	r3, r3, #3
 8016ca0:	3304      	adds	r3, #4
 8016ca2:	3401      	adds	r4, #1
 8016ca4:	3e03      	subs	r6, #3
 8016ca6:	42b4      	cmp	r4, r6
 8016ca8:	bf88      	it	hi
 8016caa:	2304      	movhi	r3, #4
 8016cac:	4443      	add	r3, r8
 8016cae:	2200      	movs	r2, #0
 8016cb0:	f843 2b04 	str.w	r2, [r3], #4
 8016cb4:	429f      	cmp	r7, r3
 8016cb6:	d2fb      	bcs.n	8016cb0 <__hexnan+0xcc>
 8016cb8:	683b      	ldr	r3, [r7, #0]
 8016cba:	b91b      	cbnz	r3, 8016cc4 <__hexnan+0xe0>
 8016cbc:	4547      	cmp	r7, r8
 8016cbe:	d127      	bne.n	8016d10 <__hexnan+0x12c>
 8016cc0:	2301      	movs	r3, #1
 8016cc2:	603b      	str	r3, [r7, #0]
 8016cc4:	2005      	movs	r0, #5
 8016cc6:	e026      	b.n	8016d16 <__hexnan+0x132>
 8016cc8:	3501      	adds	r5, #1
 8016cca:	2d08      	cmp	r5, #8
 8016ccc:	f10b 0b01 	add.w	fp, fp, #1
 8016cd0:	dd06      	ble.n	8016ce0 <__hexnan+0xfc>
 8016cd2:	4544      	cmp	r4, r8
 8016cd4:	d9c3      	bls.n	8016c5e <__hexnan+0x7a>
 8016cd6:	2300      	movs	r3, #0
 8016cd8:	f844 3c04 	str.w	r3, [r4, #-4]
 8016cdc:	2501      	movs	r5, #1
 8016cde:	3c04      	subs	r4, #4
 8016ce0:	6822      	ldr	r2, [r4, #0]
 8016ce2:	f000 000f 	and.w	r0, r0, #15
 8016ce6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8016cea:	6022      	str	r2, [r4, #0]
 8016cec:	e7b7      	b.n	8016c5e <__hexnan+0x7a>
 8016cee:	2508      	movs	r5, #8
 8016cf0:	e7b5      	b.n	8016c5e <__hexnan+0x7a>
 8016cf2:	9b01      	ldr	r3, [sp, #4]
 8016cf4:	2b00      	cmp	r3, #0
 8016cf6:	d0df      	beq.n	8016cb8 <__hexnan+0xd4>
 8016cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8016cfc:	f1c3 0320 	rsb	r3, r3, #32
 8016d00:	fa22 f303 	lsr.w	r3, r2, r3
 8016d04:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8016d08:	401a      	ands	r2, r3
 8016d0a:	f846 2c04 	str.w	r2, [r6, #-4]
 8016d0e:	e7d3      	b.n	8016cb8 <__hexnan+0xd4>
 8016d10:	3f04      	subs	r7, #4
 8016d12:	e7d1      	b.n	8016cb8 <__hexnan+0xd4>
 8016d14:	2004      	movs	r0, #4
 8016d16:	b007      	add	sp, #28
 8016d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016d1c <_localeconv_r>:
 8016d1c:	4800      	ldr	r0, [pc, #0]	; (8016d20 <_localeconv_r+0x4>)
 8016d1e:	4770      	bx	lr
 8016d20:	200001fc 	.word	0x200001fc

08016d24 <malloc>:
 8016d24:	4b02      	ldr	r3, [pc, #8]	; (8016d30 <malloc+0xc>)
 8016d26:	4601      	mov	r1, r0
 8016d28:	6818      	ldr	r0, [r3, #0]
 8016d2a:	f000 bd59 	b.w	80177e0 <_malloc_r>
 8016d2e:	bf00      	nop
 8016d30:	200000a4 	.word	0x200000a4

08016d34 <__ascii_mbtowc>:
 8016d34:	b082      	sub	sp, #8
 8016d36:	b901      	cbnz	r1, 8016d3a <__ascii_mbtowc+0x6>
 8016d38:	a901      	add	r1, sp, #4
 8016d3a:	b142      	cbz	r2, 8016d4e <__ascii_mbtowc+0x1a>
 8016d3c:	b14b      	cbz	r3, 8016d52 <__ascii_mbtowc+0x1e>
 8016d3e:	7813      	ldrb	r3, [r2, #0]
 8016d40:	600b      	str	r3, [r1, #0]
 8016d42:	7812      	ldrb	r2, [r2, #0]
 8016d44:	1e10      	subs	r0, r2, #0
 8016d46:	bf18      	it	ne
 8016d48:	2001      	movne	r0, #1
 8016d4a:	b002      	add	sp, #8
 8016d4c:	4770      	bx	lr
 8016d4e:	4610      	mov	r0, r2
 8016d50:	e7fb      	b.n	8016d4a <__ascii_mbtowc+0x16>
 8016d52:	f06f 0001 	mvn.w	r0, #1
 8016d56:	e7f8      	b.n	8016d4a <__ascii_mbtowc+0x16>

08016d58 <_Balloc>:
 8016d58:	b570      	push	{r4, r5, r6, lr}
 8016d5a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8016d5c:	4604      	mov	r4, r0
 8016d5e:	460d      	mov	r5, r1
 8016d60:	b976      	cbnz	r6, 8016d80 <_Balloc+0x28>
 8016d62:	2010      	movs	r0, #16
 8016d64:	f7ff ffde 	bl	8016d24 <malloc>
 8016d68:	4602      	mov	r2, r0
 8016d6a:	6260      	str	r0, [r4, #36]	; 0x24
 8016d6c:	b920      	cbnz	r0, 8016d78 <_Balloc+0x20>
 8016d6e:	4b18      	ldr	r3, [pc, #96]	; (8016dd0 <_Balloc+0x78>)
 8016d70:	4818      	ldr	r0, [pc, #96]	; (8016dd4 <_Balloc+0x7c>)
 8016d72:	2166      	movs	r1, #102	; 0x66
 8016d74:	f000 ff3e 	bl	8017bf4 <__assert_func>
 8016d78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016d7c:	6006      	str	r6, [r0, #0]
 8016d7e:	60c6      	str	r6, [r0, #12]
 8016d80:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8016d82:	68f3      	ldr	r3, [r6, #12]
 8016d84:	b183      	cbz	r3, 8016da8 <_Balloc+0x50>
 8016d86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016d88:	68db      	ldr	r3, [r3, #12]
 8016d8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016d8e:	b9b8      	cbnz	r0, 8016dc0 <_Balloc+0x68>
 8016d90:	2101      	movs	r1, #1
 8016d92:	fa01 f605 	lsl.w	r6, r1, r5
 8016d96:	1d72      	adds	r2, r6, #5
 8016d98:	0092      	lsls	r2, r2, #2
 8016d9a:	4620      	mov	r0, r4
 8016d9c:	f000 fc9d 	bl	80176da <_calloc_r>
 8016da0:	b160      	cbz	r0, 8016dbc <_Balloc+0x64>
 8016da2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8016da6:	e00e      	b.n	8016dc6 <_Balloc+0x6e>
 8016da8:	2221      	movs	r2, #33	; 0x21
 8016daa:	2104      	movs	r1, #4
 8016dac:	4620      	mov	r0, r4
 8016dae:	f000 fc94 	bl	80176da <_calloc_r>
 8016db2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016db4:	60f0      	str	r0, [r6, #12]
 8016db6:	68db      	ldr	r3, [r3, #12]
 8016db8:	2b00      	cmp	r3, #0
 8016dba:	d1e4      	bne.n	8016d86 <_Balloc+0x2e>
 8016dbc:	2000      	movs	r0, #0
 8016dbe:	bd70      	pop	{r4, r5, r6, pc}
 8016dc0:	6802      	ldr	r2, [r0, #0]
 8016dc2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016dc6:	2300      	movs	r3, #0
 8016dc8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016dcc:	e7f7      	b.n	8016dbe <_Balloc+0x66>
 8016dce:	bf00      	nop
 8016dd0:	0801a31e 	.word	0x0801a31e
 8016dd4:	0801a41c 	.word	0x0801a41c

08016dd8 <_Bfree>:
 8016dd8:	b570      	push	{r4, r5, r6, lr}
 8016dda:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8016ddc:	4605      	mov	r5, r0
 8016dde:	460c      	mov	r4, r1
 8016de0:	b976      	cbnz	r6, 8016e00 <_Bfree+0x28>
 8016de2:	2010      	movs	r0, #16
 8016de4:	f7ff ff9e 	bl	8016d24 <malloc>
 8016de8:	4602      	mov	r2, r0
 8016dea:	6268      	str	r0, [r5, #36]	; 0x24
 8016dec:	b920      	cbnz	r0, 8016df8 <_Bfree+0x20>
 8016dee:	4b09      	ldr	r3, [pc, #36]	; (8016e14 <_Bfree+0x3c>)
 8016df0:	4809      	ldr	r0, [pc, #36]	; (8016e18 <_Bfree+0x40>)
 8016df2:	218a      	movs	r1, #138	; 0x8a
 8016df4:	f000 fefe 	bl	8017bf4 <__assert_func>
 8016df8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016dfc:	6006      	str	r6, [r0, #0]
 8016dfe:	60c6      	str	r6, [r0, #12]
 8016e00:	b13c      	cbz	r4, 8016e12 <_Bfree+0x3a>
 8016e02:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8016e04:	6862      	ldr	r2, [r4, #4]
 8016e06:	68db      	ldr	r3, [r3, #12]
 8016e08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016e0c:	6021      	str	r1, [r4, #0]
 8016e0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8016e12:	bd70      	pop	{r4, r5, r6, pc}
 8016e14:	0801a31e 	.word	0x0801a31e
 8016e18:	0801a41c 	.word	0x0801a41c

08016e1c <__multadd>:
 8016e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e20:	690d      	ldr	r5, [r1, #16]
 8016e22:	4607      	mov	r7, r0
 8016e24:	460c      	mov	r4, r1
 8016e26:	461e      	mov	r6, r3
 8016e28:	f101 0c14 	add.w	ip, r1, #20
 8016e2c:	2000      	movs	r0, #0
 8016e2e:	f8dc 3000 	ldr.w	r3, [ip]
 8016e32:	b299      	uxth	r1, r3
 8016e34:	fb02 6101 	mla	r1, r2, r1, r6
 8016e38:	0c1e      	lsrs	r6, r3, #16
 8016e3a:	0c0b      	lsrs	r3, r1, #16
 8016e3c:	fb02 3306 	mla	r3, r2, r6, r3
 8016e40:	b289      	uxth	r1, r1
 8016e42:	3001      	adds	r0, #1
 8016e44:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8016e48:	4285      	cmp	r5, r0
 8016e4a:	f84c 1b04 	str.w	r1, [ip], #4
 8016e4e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8016e52:	dcec      	bgt.n	8016e2e <__multadd+0x12>
 8016e54:	b30e      	cbz	r6, 8016e9a <__multadd+0x7e>
 8016e56:	68a3      	ldr	r3, [r4, #8]
 8016e58:	42ab      	cmp	r3, r5
 8016e5a:	dc19      	bgt.n	8016e90 <__multadd+0x74>
 8016e5c:	6861      	ldr	r1, [r4, #4]
 8016e5e:	4638      	mov	r0, r7
 8016e60:	3101      	adds	r1, #1
 8016e62:	f7ff ff79 	bl	8016d58 <_Balloc>
 8016e66:	4680      	mov	r8, r0
 8016e68:	b928      	cbnz	r0, 8016e76 <__multadd+0x5a>
 8016e6a:	4602      	mov	r2, r0
 8016e6c:	4b0c      	ldr	r3, [pc, #48]	; (8016ea0 <__multadd+0x84>)
 8016e6e:	480d      	ldr	r0, [pc, #52]	; (8016ea4 <__multadd+0x88>)
 8016e70:	21b5      	movs	r1, #181	; 0xb5
 8016e72:	f000 febf 	bl	8017bf4 <__assert_func>
 8016e76:	6922      	ldr	r2, [r4, #16]
 8016e78:	3202      	adds	r2, #2
 8016e7a:	f104 010c 	add.w	r1, r4, #12
 8016e7e:	0092      	lsls	r2, r2, #2
 8016e80:	300c      	adds	r0, #12
 8016e82:	f7fc ffff 	bl	8013e84 <memcpy>
 8016e86:	4621      	mov	r1, r4
 8016e88:	4638      	mov	r0, r7
 8016e8a:	f7ff ffa5 	bl	8016dd8 <_Bfree>
 8016e8e:	4644      	mov	r4, r8
 8016e90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016e94:	3501      	adds	r5, #1
 8016e96:	615e      	str	r6, [r3, #20]
 8016e98:	6125      	str	r5, [r4, #16]
 8016e9a:	4620      	mov	r0, r4
 8016e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ea0:	0801a390 	.word	0x0801a390
 8016ea4:	0801a41c 	.word	0x0801a41c

08016ea8 <__s2b>:
 8016ea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016eac:	460c      	mov	r4, r1
 8016eae:	4615      	mov	r5, r2
 8016eb0:	461f      	mov	r7, r3
 8016eb2:	2209      	movs	r2, #9
 8016eb4:	3308      	adds	r3, #8
 8016eb6:	4606      	mov	r6, r0
 8016eb8:	fb93 f3f2 	sdiv	r3, r3, r2
 8016ebc:	2100      	movs	r1, #0
 8016ebe:	2201      	movs	r2, #1
 8016ec0:	429a      	cmp	r2, r3
 8016ec2:	db09      	blt.n	8016ed8 <__s2b+0x30>
 8016ec4:	4630      	mov	r0, r6
 8016ec6:	f7ff ff47 	bl	8016d58 <_Balloc>
 8016eca:	b940      	cbnz	r0, 8016ede <__s2b+0x36>
 8016ecc:	4602      	mov	r2, r0
 8016ece:	4b19      	ldr	r3, [pc, #100]	; (8016f34 <__s2b+0x8c>)
 8016ed0:	4819      	ldr	r0, [pc, #100]	; (8016f38 <__s2b+0x90>)
 8016ed2:	21ce      	movs	r1, #206	; 0xce
 8016ed4:	f000 fe8e 	bl	8017bf4 <__assert_func>
 8016ed8:	0052      	lsls	r2, r2, #1
 8016eda:	3101      	adds	r1, #1
 8016edc:	e7f0      	b.n	8016ec0 <__s2b+0x18>
 8016ede:	9b08      	ldr	r3, [sp, #32]
 8016ee0:	6143      	str	r3, [r0, #20]
 8016ee2:	2d09      	cmp	r5, #9
 8016ee4:	f04f 0301 	mov.w	r3, #1
 8016ee8:	6103      	str	r3, [r0, #16]
 8016eea:	dd16      	ble.n	8016f1a <__s2b+0x72>
 8016eec:	f104 0909 	add.w	r9, r4, #9
 8016ef0:	46c8      	mov	r8, r9
 8016ef2:	442c      	add	r4, r5
 8016ef4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8016ef8:	4601      	mov	r1, r0
 8016efa:	3b30      	subs	r3, #48	; 0x30
 8016efc:	220a      	movs	r2, #10
 8016efe:	4630      	mov	r0, r6
 8016f00:	f7ff ff8c 	bl	8016e1c <__multadd>
 8016f04:	45a0      	cmp	r8, r4
 8016f06:	d1f5      	bne.n	8016ef4 <__s2b+0x4c>
 8016f08:	f1a5 0408 	sub.w	r4, r5, #8
 8016f0c:	444c      	add	r4, r9
 8016f0e:	1b2d      	subs	r5, r5, r4
 8016f10:	1963      	adds	r3, r4, r5
 8016f12:	42bb      	cmp	r3, r7
 8016f14:	db04      	blt.n	8016f20 <__s2b+0x78>
 8016f16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016f1a:	340a      	adds	r4, #10
 8016f1c:	2509      	movs	r5, #9
 8016f1e:	e7f6      	b.n	8016f0e <__s2b+0x66>
 8016f20:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016f24:	4601      	mov	r1, r0
 8016f26:	3b30      	subs	r3, #48	; 0x30
 8016f28:	220a      	movs	r2, #10
 8016f2a:	4630      	mov	r0, r6
 8016f2c:	f7ff ff76 	bl	8016e1c <__multadd>
 8016f30:	e7ee      	b.n	8016f10 <__s2b+0x68>
 8016f32:	bf00      	nop
 8016f34:	0801a390 	.word	0x0801a390
 8016f38:	0801a41c 	.word	0x0801a41c

08016f3c <__hi0bits>:
 8016f3c:	0c03      	lsrs	r3, r0, #16
 8016f3e:	041b      	lsls	r3, r3, #16
 8016f40:	b9d3      	cbnz	r3, 8016f78 <__hi0bits+0x3c>
 8016f42:	0400      	lsls	r0, r0, #16
 8016f44:	2310      	movs	r3, #16
 8016f46:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8016f4a:	bf04      	itt	eq
 8016f4c:	0200      	lsleq	r0, r0, #8
 8016f4e:	3308      	addeq	r3, #8
 8016f50:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8016f54:	bf04      	itt	eq
 8016f56:	0100      	lsleq	r0, r0, #4
 8016f58:	3304      	addeq	r3, #4
 8016f5a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8016f5e:	bf04      	itt	eq
 8016f60:	0080      	lsleq	r0, r0, #2
 8016f62:	3302      	addeq	r3, #2
 8016f64:	2800      	cmp	r0, #0
 8016f66:	db05      	blt.n	8016f74 <__hi0bits+0x38>
 8016f68:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8016f6c:	f103 0301 	add.w	r3, r3, #1
 8016f70:	bf08      	it	eq
 8016f72:	2320      	moveq	r3, #32
 8016f74:	4618      	mov	r0, r3
 8016f76:	4770      	bx	lr
 8016f78:	2300      	movs	r3, #0
 8016f7a:	e7e4      	b.n	8016f46 <__hi0bits+0xa>

08016f7c <__lo0bits>:
 8016f7c:	6803      	ldr	r3, [r0, #0]
 8016f7e:	f013 0207 	ands.w	r2, r3, #7
 8016f82:	4601      	mov	r1, r0
 8016f84:	d00b      	beq.n	8016f9e <__lo0bits+0x22>
 8016f86:	07da      	lsls	r2, r3, #31
 8016f88:	d423      	bmi.n	8016fd2 <__lo0bits+0x56>
 8016f8a:	0798      	lsls	r0, r3, #30
 8016f8c:	bf49      	itett	mi
 8016f8e:	085b      	lsrmi	r3, r3, #1
 8016f90:	089b      	lsrpl	r3, r3, #2
 8016f92:	2001      	movmi	r0, #1
 8016f94:	600b      	strmi	r3, [r1, #0]
 8016f96:	bf5c      	itt	pl
 8016f98:	600b      	strpl	r3, [r1, #0]
 8016f9a:	2002      	movpl	r0, #2
 8016f9c:	4770      	bx	lr
 8016f9e:	b298      	uxth	r0, r3
 8016fa0:	b9a8      	cbnz	r0, 8016fce <__lo0bits+0x52>
 8016fa2:	0c1b      	lsrs	r3, r3, #16
 8016fa4:	2010      	movs	r0, #16
 8016fa6:	b2da      	uxtb	r2, r3
 8016fa8:	b90a      	cbnz	r2, 8016fae <__lo0bits+0x32>
 8016faa:	3008      	adds	r0, #8
 8016fac:	0a1b      	lsrs	r3, r3, #8
 8016fae:	071a      	lsls	r2, r3, #28
 8016fb0:	bf04      	itt	eq
 8016fb2:	091b      	lsreq	r3, r3, #4
 8016fb4:	3004      	addeq	r0, #4
 8016fb6:	079a      	lsls	r2, r3, #30
 8016fb8:	bf04      	itt	eq
 8016fba:	089b      	lsreq	r3, r3, #2
 8016fbc:	3002      	addeq	r0, #2
 8016fbe:	07da      	lsls	r2, r3, #31
 8016fc0:	d403      	bmi.n	8016fca <__lo0bits+0x4e>
 8016fc2:	085b      	lsrs	r3, r3, #1
 8016fc4:	f100 0001 	add.w	r0, r0, #1
 8016fc8:	d005      	beq.n	8016fd6 <__lo0bits+0x5a>
 8016fca:	600b      	str	r3, [r1, #0]
 8016fcc:	4770      	bx	lr
 8016fce:	4610      	mov	r0, r2
 8016fd0:	e7e9      	b.n	8016fa6 <__lo0bits+0x2a>
 8016fd2:	2000      	movs	r0, #0
 8016fd4:	4770      	bx	lr
 8016fd6:	2020      	movs	r0, #32
 8016fd8:	4770      	bx	lr
	...

08016fdc <__i2b>:
 8016fdc:	b510      	push	{r4, lr}
 8016fde:	460c      	mov	r4, r1
 8016fe0:	2101      	movs	r1, #1
 8016fe2:	f7ff feb9 	bl	8016d58 <_Balloc>
 8016fe6:	4602      	mov	r2, r0
 8016fe8:	b928      	cbnz	r0, 8016ff6 <__i2b+0x1a>
 8016fea:	4b05      	ldr	r3, [pc, #20]	; (8017000 <__i2b+0x24>)
 8016fec:	4805      	ldr	r0, [pc, #20]	; (8017004 <__i2b+0x28>)
 8016fee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8016ff2:	f000 fdff 	bl	8017bf4 <__assert_func>
 8016ff6:	2301      	movs	r3, #1
 8016ff8:	6144      	str	r4, [r0, #20]
 8016ffa:	6103      	str	r3, [r0, #16]
 8016ffc:	bd10      	pop	{r4, pc}
 8016ffe:	bf00      	nop
 8017000:	0801a390 	.word	0x0801a390
 8017004:	0801a41c 	.word	0x0801a41c

08017008 <__multiply>:
 8017008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801700c:	4691      	mov	r9, r2
 801700e:	690a      	ldr	r2, [r1, #16]
 8017010:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017014:	429a      	cmp	r2, r3
 8017016:	bfb8      	it	lt
 8017018:	460b      	movlt	r3, r1
 801701a:	460c      	mov	r4, r1
 801701c:	bfbc      	itt	lt
 801701e:	464c      	movlt	r4, r9
 8017020:	4699      	movlt	r9, r3
 8017022:	6927      	ldr	r7, [r4, #16]
 8017024:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8017028:	68a3      	ldr	r3, [r4, #8]
 801702a:	6861      	ldr	r1, [r4, #4]
 801702c:	eb07 060a 	add.w	r6, r7, sl
 8017030:	42b3      	cmp	r3, r6
 8017032:	b085      	sub	sp, #20
 8017034:	bfb8      	it	lt
 8017036:	3101      	addlt	r1, #1
 8017038:	f7ff fe8e 	bl	8016d58 <_Balloc>
 801703c:	b930      	cbnz	r0, 801704c <__multiply+0x44>
 801703e:	4602      	mov	r2, r0
 8017040:	4b44      	ldr	r3, [pc, #272]	; (8017154 <__multiply+0x14c>)
 8017042:	4845      	ldr	r0, [pc, #276]	; (8017158 <__multiply+0x150>)
 8017044:	f240 115d 	movw	r1, #349	; 0x15d
 8017048:	f000 fdd4 	bl	8017bf4 <__assert_func>
 801704c:	f100 0514 	add.w	r5, r0, #20
 8017050:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8017054:	462b      	mov	r3, r5
 8017056:	2200      	movs	r2, #0
 8017058:	4543      	cmp	r3, r8
 801705a:	d321      	bcc.n	80170a0 <__multiply+0x98>
 801705c:	f104 0314 	add.w	r3, r4, #20
 8017060:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8017064:	f109 0314 	add.w	r3, r9, #20
 8017068:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801706c:	9202      	str	r2, [sp, #8]
 801706e:	1b3a      	subs	r2, r7, r4
 8017070:	3a15      	subs	r2, #21
 8017072:	f022 0203 	bic.w	r2, r2, #3
 8017076:	3204      	adds	r2, #4
 8017078:	f104 0115 	add.w	r1, r4, #21
 801707c:	428f      	cmp	r7, r1
 801707e:	bf38      	it	cc
 8017080:	2204      	movcc	r2, #4
 8017082:	9201      	str	r2, [sp, #4]
 8017084:	9a02      	ldr	r2, [sp, #8]
 8017086:	9303      	str	r3, [sp, #12]
 8017088:	429a      	cmp	r2, r3
 801708a:	d80c      	bhi.n	80170a6 <__multiply+0x9e>
 801708c:	2e00      	cmp	r6, #0
 801708e:	dd03      	ble.n	8017098 <__multiply+0x90>
 8017090:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8017094:	2b00      	cmp	r3, #0
 8017096:	d05a      	beq.n	801714e <__multiply+0x146>
 8017098:	6106      	str	r6, [r0, #16]
 801709a:	b005      	add	sp, #20
 801709c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170a0:	f843 2b04 	str.w	r2, [r3], #4
 80170a4:	e7d8      	b.n	8017058 <__multiply+0x50>
 80170a6:	f8b3 a000 	ldrh.w	sl, [r3]
 80170aa:	f1ba 0f00 	cmp.w	sl, #0
 80170ae:	d024      	beq.n	80170fa <__multiply+0xf2>
 80170b0:	f104 0e14 	add.w	lr, r4, #20
 80170b4:	46a9      	mov	r9, r5
 80170b6:	f04f 0c00 	mov.w	ip, #0
 80170ba:	f85e 2b04 	ldr.w	r2, [lr], #4
 80170be:	f8d9 1000 	ldr.w	r1, [r9]
 80170c2:	fa1f fb82 	uxth.w	fp, r2
 80170c6:	b289      	uxth	r1, r1
 80170c8:	fb0a 110b 	mla	r1, sl, fp, r1
 80170cc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80170d0:	f8d9 2000 	ldr.w	r2, [r9]
 80170d4:	4461      	add	r1, ip
 80170d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80170da:	fb0a c20b 	mla	r2, sl, fp, ip
 80170de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80170e2:	b289      	uxth	r1, r1
 80170e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80170e8:	4577      	cmp	r7, lr
 80170ea:	f849 1b04 	str.w	r1, [r9], #4
 80170ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80170f2:	d8e2      	bhi.n	80170ba <__multiply+0xb2>
 80170f4:	9a01      	ldr	r2, [sp, #4]
 80170f6:	f845 c002 	str.w	ip, [r5, r2]
 80170fa:	9a03      	ldr	r2, [sp, #12]
 80170fc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8017100:	3304      	adds	r3, #4
 8017102:	f1b9 0f00 	cmp.w	r9, #0
 8017106:	d020      	beq.n	801714a <__multiply+0x142>
 8017108:	6829      	ldr	r1, [r5, #0]
 801710a:	f104 0c14 	add.w	ip, r4, #20
 801710e:	46ae      	mov	lr, r5
 8017110:	f04f 0a00 	mov.w	sl, #0
 8017114:	f8bc b000 	ldrh.w	fp, [ip]
 8017118:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801711c:	fb09 220b 	mla	r2, r9, fp, r2
 8017120:	4492      	add	sl, r2
 8017122:	b289      	uxth	r1, r1
 8017124:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8017128:	f84e 1b04 	str.w	r1, [lr], #4
 801712c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8017130:	f8be 1000 	ldrh.w	r1, [lr]
 8017134:	0c12      	lsrs	r2, r2, #16
 8017136:	fb09 1102 	mla	r1, r9, r2, r1
 801713a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801713e:	4567      	cmp	r7, ip
 8017140:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8017144:	d8e6      	bhi.n	8017114 <__multiply+0x10c>
 8017146:	9a01      	ldr	r2, [sp, #4]
 8017148:	50a9      	str	r1, [r5, r2]
 801714a:	3504      	adds	r5, #4
 801714c:	e79a      	b.n	8017084 <__multiply+0x7c>
 801714e:	3e01      	subs	r6, #1
 8017150:	e79c      	b.n	801708c <__multiply+0x84>
 8017152:	bf00      	nop
 8017154:	0801a390 	.word	0x0801a390
 8017158:	0801a41c 	.word	0x0801a41c

0801715c <__pow5mult>:
 801715c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017160:	4615      	mov	r5, r2
 8017162:	f012 0203 	ands.w	r2, r2, #3
 8017166:	4606      	mov	r6, r0
 8017168:	460f      	mov	r7, r1
 801716a:	d007      	beq.n	801717c <__pow5mult+0x20>
 801716c:	4c25      	ldr	r4, [pc, #148]	; (8017204 <__pow5mult+0xa8>)
 801716e:	3a01      	subs	r2, #1
 8017170:	2300      	movs	r3, #0
 8017172:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8017176:	f7ff fe51 	bl	8016e1c <__multadd>
 801717a:	4607      	mov	r7, r0
 801717c:	10ad      	asrs	r5, r5, #2
 801717e:	d03d      	beq.n	80171fc <__pow5mult+0xa0>
 8017180:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8017182:	b97c      	cbnz	r4, 80171a4 <__pow5mult+0x48>
 8017184:	2010      	movs	r0, #16
 8017186:	f7ff fdcd 	bl	8016d24 <malloc>
 801718a:	4602      	mov	r2, r0
 801718c:	6270      	str	r0, [r6, #36]	; 0x24
 801718e:	b928      	cbnz	r0, 801719c <__pow5mult+0x40>
 8017190:	4b1d      	ldr	r3, [pc, #116]	; (8017208 <__pow5mult+0xac>)
 8017192:	481e      	ldr	r0, [pc, #120]	; (801720c <__pow5mult+0xb0>)
 8017194:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8017198:	f000 fd2c 	bl	8017bf4 <__assert_func>
 801719c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80171a0:	6004      	str	r4, [r0, #0]
 80171a2:	60c4      	str	r4, [r0, #12]
 80171a4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80171a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80171ac:	b94c      	cbnz	r4, 80171c2 <__pow5mult+0x66>
 80171ae:	f240 2171 	movw	r1, #625	; 0x271
 80171b2:	4630      	mov	r0, r6
 80171b4:	f7ff ff12 	bl	8016fdc <__i2b>
 80171b8:	2300      	movs	r3, #0
 80171ba:	f8c8 0008 	str.w	r0, [r8, #8]
 80171be:	4604      	mov	r4, r0
 80171c0:	6003      	str	r3, [r0, #0]
 80171c2:	f04f 0900 	mov.w	r9, #0
 80171c6:	07eb      	lsls	r3, r5, #31
 80171c8:	d50a      	bpl.n	80171e0 <__pow5mult+0x84>
 80171ca:	4639      	mov	r1, r7
 80171cc:	4622      	mov	r2, r4
 80171ce:	4630      	mov	r0, r6
 80171d0:	f7ff ff1a 	bl	8017008 <__multiply>
 80171d4:	4639      	mov	r1, r7
 80171d6:	4680      	mov	r8, r0
 80171d8:	4630      	mov	r0, r6
 80171da:	f7ff fdfd 	bl	8016dd8 <_Bfree>
 80171de:	4647      	mov	r7, r8
 80171e0:	106d      	asrs	r5, r5, #1
 80171e2:	d00b      	beq.n	80171fc <__pow5mult+0xa0>
 80171e4:	6820      	ldr	r0, [r4, #0]
 80171e6:	b938      	cbnz	r0, 80171f8 <__pow5mult+0x9c>
 80171e8:	4622      	mov	r2, r4
 80171ea:	4621      	mov	r1, r4
 80171ec:	4630      	mov	r0, r6
 80171ee:	f7ff ff0b 	bl	8017008 <__multiply>
 80171f2:	6020      	str	r0, [r4, #0]
 80171f4:	f8c0 9000 	str.w	r9, [r0]
 80171f8:	4604      	mov	r4, r0
 80171fa:	e7e4      	b.n	80171c6 <__pow5mult+0x6a>
 80171fc:	4638      	mov	r0, r7
 80171fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017202:	bf00      	nop
 8017204:	0801a568 	.word	0x0801a568
 8017208:	0801a31e 	.word	0x0801a31e
 801720c:	0801a41c 	.word	0x0801a41c

08017210 <__lshift>:
 8017210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017214:	460c      	mov	r4, r1
 8017216:	6849      	ldr	r1, [r1, #4]
 8017218:	6923      	ldr	r3, [r4, #16]
 801721a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801721e:	68a3      	ldr	r3, [r4, #8]
 8017220:	4607      	mov	r7, r0
 8017222:	4691      	mov	r9, r2
 8017224:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017228:	f108 0601 	add.w	r6, r8, #1
 801722c:	42b3      	cmp	r3, r6
 801722e:	db0b      	blt.n	8017248 <__lshift+0x38>
 8017230:	4638      	mov	r0, r7
 8017232:	f7ff fd91 	bl	8016d58 <_Balloc>
 8017236:	4605      	mov	r5, r0
 8017238:	b948      	cbnz	r0, 801724e <__lshift+0x3e>
 801723a:	4602      	mov	r2, r0
 801723c:	4b2a      	ldr	r3, [pc, #168]	; (80172e8 <__lshift+0xd8>)
 801723e:	482b      	ldr	r0, [pc, #172]	; (80172ec <__lshift+0xdc>)
 8017240:	f240 11d9 	movw	r1, #473	; 0x1d9
 8017244:	f000 fcd6 	bl	8017bf4 <__assert_func>
 8017248:	3101      	adds	r1, #1
 801724a:	005b      	lsls	r3, r3, #1
 801724c:	e7ee      	b.n	801722c <__lshift+0x1c>
 801724e:	2300      	movs	r3, #0
 8017250:	f100 0114 	add.w	r1, r0, #20
 8017254:	f100 0210 	add.w	r2, r0, #16
 8017258:	4618      	mov	r0, r3
 801725a:	4553      	cmp	r3, sl
 801725c:	db37      	blt.n	80172ce <__lshift+0xbe>
 801725e:	6920      	ldr	r0, [r4, #16]
 8017260:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017264:	f104 0314 	add.w	r3, r4, #20
 8017268:	f019 091f 	ands.w	r9, r9, #31
 801726c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017270:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8017274:	d02f      	beq.n	80172d6 <__lshift+0xc6>
 8017276:	f1c9 0e20 	rsb	lr, r9, #32
 801727a:	468a      	mov	sl, r1
 801727c:	f04f 0c00 	mov.w	ip, #0
 8017280:	681a      	ldr	r2, [r3, #0]
 8017282:	fa02 f209 	lsl.w	r2, r2, r9
 8017286:	ea42 020c 	orr.w	r2, r2, ip
 801728a:	f84a 2b04 	str.w	r2, [sl], #4
 801728e:	f853 2b04 	ldr.w	r2, [r3], #4
 8017292:	4298      	cmp	r0, r3
 8017294:	fa22 fc0e 	lsr.w	ip, r2, lr
 8017298:	d8f2      	bhi.n	8017280 <__lshift+0x70>
 801729a:	1b03      	subs	r3, r0, r4
 801729c:	3b15      	subs	r3, #21
 801729e:	f023 0303 	bic.w	r3, r3, #3
 80172a2:	3304      	adds	r3, #4
 80172a4:	f104 0215 	add.w	r2, r4, #21
 80172a8:	4290      	cmp	r0, r2
 80172aa:	bf38      	it	cc
 80172ac:	2304      	movcc	r3, #4
 80172ae:	f841 c003 	str.w	ip, [r1, r3]
 80172b2:	f1bc 0f00 	cmp.w	ip, #0
 80172b6:	d001      	beq.n	80172bc <__lshift+0xac>
 80172b8:	f108 0602 	add.w	r6, r8, #2
 80172bc:	3e01      	subs	r6, #1
 80172be:	4638      	mov	r0, r7
 80172c0:	612e      	str	r6, [r5, #16]
 80172c2:	4621      	mov	r1, r4
 80172c4:	f7ff fd88 	bl	8016dd8 <_Bfree>
 80172c8:	4628      	mov	r0, r5
 80172ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80172ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80172d2:	3301      	adds	r3, #1
 80172d4:	e7c1      	b.n	801725a <__lshift+0x4a>
 80172d6:	3904      	subs	r1, #4
 80172d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80172dc:	f841 2f04 	str.w	r2, [r1, #4]!
 80172e0:	4298      	cmp	r0, r3
 80172e2:	d8f9      	bhi.n	80172d8 <__lshift+0xc8>
 80172e4:	e7ea      	b.n	80172bc <__lshift+0xac>
 80172e6:	bf00      	nop
 80172e8:	0801a390 	.word	0x0801a390
 80172ec:	0801a41c 	.word	0x0801a41c

080172f0 <__mcmp>:
 80172f0:	b530      	push	{r4, r5, lr}
 80172f2:	6902      	ldr	r2, [r0, #16]
 80172f4:	690c      	ldr	r4, [r1, #16]
 80172f6:	1b12      	subs	r2, r2, r4
 80172f8:	d10e      	bne.n	8017318 <__mcmp+0x28>
 80172fa:	f100 0314 	add.w	r3, r0, #20
 80172fe:	3114      	adds	r1, #20
 8017300:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8017304:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8017308:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801730c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8017310:	42a5      	cmp	r5, r4
 8017312:	d003      	beq.n	801731c <__mcmp+0x2c>
 8017314:	d305      	bcc.n	8017322 <__mcmp+0x32>
 8017316:	2201      	movs	r2, #1
 8017318:	4610      	mov	r0, r2
 801731a:	bd30      	pop	{r4, r5, pc}
 801731c:	4283      	cmp	r3, r0
 801731e:	d3f3      	bcc.n	8017308 <__mcmp+0x18>
 8017320:	e7fa      	b.n	8017318 <__mcmp+0x28>
 8017322:	f04f 32ff 	mov.w	r2, #4294967295
 8017326:	e7f7      	b.n	8017318 <__mcmp+0x28>

08017328 <__mdiff>:
 8017328:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801732c:	460c      	mov	r4, r1
 801732e:	4606      	mov	r6, r0
 8017330:	4611      	mov	r1, r2
 8017332:	4620      	mov	r0, r4
 8017334:	4690      	mov	r8, r2
 8017336:	f7ff ffdb 	bl	80172f0 <__mcmp>
 801733a:	1e05      	subs	r5, r0, #0
 801733c:	d110      	bne.n	8017360 <__mdiff+0x38>
 801733e:	4629      	mov	r1, r5
 8017340:	4630      	mov	r0, r6
 8017342:	f7ff fd09 	bl	8016d58 <_Balloc>
 8017346:	b930      	cbnz	r0, 8017356 <__mdiff+0x2e>
 8017348:	4b3a      	ldr	r3, [pc, #232]	; (8017434 <__mdiff+0x10c>)
 801734a:	4602      	mov	r2, r0
 801734c:	f240 2132 	movw	r1, #562	; 0x232
 8017350:	4839      	ldr	r0, [pc, #228]	; (8017438 <__mdiff+0x110>)
 8017352:	f000 fc4f 	bl	8017bf4 <__assert_func>
 8017356:	2301      	movs	r3, #1
 8017358:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801735c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017360:	bfa4      	itt	ge
 8017362:	4643      	movge	r3, r8
 8017364:	46a0      	movge	r8, r4
 8017366:	4630      	mov	r0, r6
 8017368:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801736c:	bfa6      	itte	ge
 801736e:	461c      	movge	r4, r3
 8017370:	2500      	movge	r5, #0
 8017372:	2501      	movlt	r5, #1
 8017374:	f7ff fcf0 	bl	8016d58 <_Balloc>
 8017378:	b920      	cbnz	r0, 8017384 <__mdiff+0x5c>
 801737a:	4b2e      	ldr	r3, [pc, #184]	; (8017434 <__mdiff+0x10c>)
 801737c:	4602      	mov	r2, r0
 801737e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8017382:	e7e5      	b.n	8017350 <__mdiff+0x28>
 8017384:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8017388:	6926      	ldr	r6, [r4, #16]
 801738a:	60c5      	str	r5, [r0, #12]
 801738c:	f104 0914 	add.w	r9, r4, #20
 8017390:	f108 0514 	add.w	r5, r8, #20
 8017394:	f100 0e14 	add.w	lr, r0, #20
 8017398:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801739c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80173a0:	f108 0210 	add.w	r2, r8, #16
 80173a4:	46f2      	mov	sl, lr
 80173a6:	2100      	movs	r1, #0
 80173a8:	f859 3b04 	ldr.w	r3, [r9], #4
 80173ac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80173b0:	fa1f f883 	uxth.w	r8, r3
 80173b4:	fa11 f18b 	uxtah	r1, r1, fp
 80173b8:	0c1b      	lsrs	r3, r3, #16
 80173ba:	eba1 0808 	sub.w	r8, r1, r8
 80173be:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80173c2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80173c6:	fa1f f888 	uxth.w	r8, r8
 80173ca:	1419      	asrs	r1, r3, #16
 80173cc:	454e      	cmp	r6, r9
 80173ce:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80173d2:	f84a 3b04 	str.w	r3, [sl], #4
 80173d6:	d8e7      	bhi.n	80173a8 <__mdiff+0x80>
 80173d8:	1b33      	subs	r3, r6, r4
 80173da:	3b15      	subs	r3, #21
 80173dc:	f023 0303 	bic.w	r3, r3, #3
 80173e0:	3304      	adds	r3, #4
 80173e2:	3415      	adds	r4, #21
 80173e4:	42a6      	cmp	r6, r4
 80173e6:	bf38      	it	cc
 80173e8:	2304      	movcc	r3, #4
 80173ea:	441d      	add	r5, r3
 80173ec:	4473      	add	r3, lr
 80173ee:	469e      	mov	lr, r3
 80173f0:	462e      	mov	r6, r5
 80173f2:	4566      	cmp	r6, ip
 80173f4:	d30e      	bcc.n	8017414 <__mdiff+0xec>
 80173f6:	f10c 0203 	add.w	r2, ip, #3
 80173fa:	1b52      	subs	r2, r2, r5
 80173fc:	f022 0203 	bic.w	r2, r2, #3
 8017400:	3d03      	subs	r5, #3
 8017402:	45ac      	cmp	ip, r5
 8017404:	bf38      	it	cc
 8017406:	2200      	movcc	r2, #0
 8017408:	441a      	add	r2, r3
 801740a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801740e:	b17b      	cbz	r3, 8017430 <__mdiff+0x108>
 8017410:	6107      	str	r7, [r0, #16]
 8017412:	e7a3      	b.n	801735c <__mdiff+0x34>
 8017414:	f856 8b04 	ldr.w	r8, [r6], #4
 8017418:	fa11 f288 	uxtah	r2, r1, r8
 801741c:	1414      	asrs	r4, r2, #16
 801741e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8017422:	b292      	uxth	r2, r2
 8017424:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8017428:	f84e 2b04 	str.w	r2, [lr], #4
 801742c:	1421      	asrs	r1, r4, #16
 801742e:	e7e0      	b.n	80173f2 <__mdiff+0xca>
 8017430:	3f01      	subs	r7, #1
 8017432:	e7ea      	b.n	801740a <__mdiff+0xe2>
 8017434:	0801a390 	.word	0x0801a390
 8017438:	0801a41c 	.word	0x0801a41c

0801743c <__ulp>:
 801743c:	b082      	sub	sp, #8
 801743e:	ed8d 0b00 	vstr	d0, [sp]
 8017442:	9b01      	ldr	r3, [sp, #4]
 8017444:	4912      	ldr	r1, [pc, #72]	; (8017490 <__ulp+0x54>)
 8017446:	4019      	ands	r1, r3
 8017448:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801744c:	2900      	cmp	r1, #0
 801744e:	dd05      	ble.n	801745c <__ulp+0x20>
 8017450:	2200      	movs	r2, #0
 8017452:	460b      	mov	r3, r1
 8017454:	ec43 2b10 	vmov	d0, r2, r3
 8017458:	b002      	add	sp, #8
 801745a:	4770      	bx	lr
 801745c:	4249      	negs	r1, r1
 801745e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8017462:	ea4f 5021 	mov.w	r0, r1, asr #20
 8017466:	f04f 0200 	mov.w	r2, #0
 801746a:	f04f 0300 	mov.w	r3, #0
 801746e:	da04      	bge.n	801747a <__ulp+0x3e>
 8017470:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8017474:	fa41 f300 	asr.w	r3, r1, r0
 8017478:	e7ec      	b.n	8017454 <__ulp+0x18>
 801747a:	f1a0 0114 	sub.w	r1, r0, #20
 801747e:	291e      	cmp	r1, #30
 8017480:	bfda      	itte	le
 8017482:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8017486:	fa20 f101 	lsrle.w	r1, r0, r1
 801748a:	2101      	movgt	r1, #1
 801748c:	460a      	mov	r2, r1
 801748e:	e7e1      	b.n	8017454 <__ulp+0x18>
 8017490:	7ff00000 	.word	0x7ff00000

08017494 <__b2d>:
 8017494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017496:	6905      	ldr	r5, [r0, #16]
 8017498:	f100 0714 	add.w	r7, r0, #20
 801749c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80174a0:	1f2e      	subs	r6, r5, #4
 80174a2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80174a6:	4620      	mov	r0, r4
 80174a8:	f7ff fd48 	bl	8016f3c <__hi0bits>
 80174ac:	f1c0 0320 	rsb	r3, r0, #32
 80174b0:	280a      	cmp	r0, #10
 80174b2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8017530 <__b2d+0x9c>
 80174b6:	600b      	str	r3, [r1, #0]
 80174b8:	dc14      	bgt.n	80174e4 <__b2d+0x50>
 80174ba:	f1c0 0e0b 	rsb	lr, r0, #11
 80174be:	fa24 f10e 	lsr.w	r1, r4, lr
 80174c2:	42b7      	cmp	r7, r6
 80174c4:	ea41 030c 	orr.w	r3, r1, ip
 80174c8:	bf34      	ite	cc
 80174ca:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80174ce:	2100      	movcs	r1, #0
 80174d0:	3015      	adds	r0, #21
 80174d2:	fa04 f000 	lsl.w	r0, r4, r0
 80174d6:	fa21 f10e 	lsr.w	r1, r1, lr
 80174da:	ea40 0201 	orr.w	r2, r0, r1
 80174de:	ec43 2b10 	vmov	d0, r2, r3
 80174e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80174e4:	42b7      	cmp	r7, r6
 80174e6:	bf3a      	itte	cc
 80174e8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80174ec:	f1a5 0608 	subcc.w	r6, r5, #8
 80174f0:	2100      	movcs	r1, #0
 80174f2:	380b      	subs	r0, #11
 80174f4:	d017      	beq.n	8017526 <__b2d+0x92>
 80174f6:	f1c0 0c20 	rsb	ip, r0, #32
 80174fa:	fa04 f500 	lsl.w	r5, r4, r0
 80174fe:	42be      	cmp	r6, r7
 8017500:	fa21 f40c 	lsr.w	r4, r1, ip
 8017504:	ea45 0504 	orr.w	r5, r5, r4
 8017508:	bf8c      	ite	hi
 801750a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801750e:	2400      	movls	r4, #0
 8017510:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8017514:	fa01 f000 	lsl.w	r0, r1, r0
 8017518:	fa24 f40c 	lsr.w	r4, r4, ip
 801751c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8017520:	ea40 0204 	orr.w	r2, r0, r4
 8017524:	e7db      	b.n	80174de <__b2d+0x4a>
 8017526:	ea44 030c 	orr.w	r3, r4, ip
 801752a:	460a      	mov	r2, r1
 801752c:	e7d7      	b.n	80174de <__b2d+0x4a>
 801752e:	bf00      	nop
 8017530:	3ff00000 	.word	0x3ff00000

08017534 <__d2b>:
 8017534:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017538:	4689      	mov	r9, r1
 801753a:	2101      	movs	r1, #1
 801753c:	ec57 6b10 	vmov	r6, r7, d0
 8017540:	4690      	mov	r8, r2
 8017542:	f7ff fc09 	bl	8016d58 <_Balloc>
 8017546:	4604      	mov	r4, r0
 8017548:	b930      	cbnz	r0, 8017558 <__d2b+0x24>
 801754a:	4602      	mov	r2, r0
 801754c:	4b25      	ldr	r3, [pc, #148]	; (80175e4 <__d2b+0xb0>)
 801754e:	4826      	ldr	r0, [pc, #152]	; (80175e8 <__d2b+0xb4>)
 8017550:	f240 310a 	movw	r1, #778	; 0x30a
 8017554:	f000 fb4e 	bl	8017bf4 <__assert_func>
 8017558:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801755c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8017560:	bb35      	cbnz	r5, 80175b0 <__d2b+0x7c>
 8017562:	2e00      	cmp	r6, #0
 8017564:	9301      	str	r3, [sp, #4]
 8017566:	d028      	beq.n	80175ba <__d2b+0x86>
 8017568:	4668      	mov	r0, sp
 801756a:	9600      	str	r6, [sp, #0]
 801756c:	f7ff fd06 	bl	8016f7c <__lo0bits>
 8017570:	9900      	ldr	r1, [sp, #0]
 8017572:	b300      	cbz	r0, 80175b6 <__d2b+0x82>
 8017574:	9a01      	ldr	r2, [sp, #4]
 8017576:	f1c0 0320 	rsb	r3, r0, #32
 801757a:	fa02 f303 	lsl.w	r3, r2, r3
 801757e:	430b      	orrs	r3, r1
 8017580:	40c2      	lsrs	r2, r0
 8017582:	6163      	str	r3, [r4, #20]
 8017584:	9201      	str	r2, [sp, #4]
 8017586:	9b01      	ldr	r3, [sp, #4]
 8017588:	61a3      	str	r3, [r4, #24]
 801758a:	2b00      	cmp	r3, #0
 801758c:	bf14      	ite	ne
 801758e:	2202      	movne	r2, #2
 8017590:	2201      	moveq	r2, #1
 8017592:	6122      	str	r2, [r4, #16]
 8017594:	b1d5      	cbz	r5, 80175cc <__d2b+0x98>
 8017596:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801759a:	4405      	add	r5, r0
 801759c:	f8c9 5000 	str.w	r5, [r9]
 80175a0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80175a4:	f8c8 0000 	str.w	r0, [r8]
 80175a8:	4620      	mov	r0, r4
 80175aa:	b003      	add	sp, #12
 80175ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80175b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80175b4:	e7d5      	b.n	8017562 <__d2b+0x2e>
 80175b6:	6161      	str	r1, [r4, #20]
 80175b8:	e7e5      	b.n	8017586 <__d2b+0x52>
 80175ba:	a801      	add	r0, sp, #4
 80175bc:	f7ff fcde 	bl	8016f7c <__lo0bits>
 80175c0:	9b01      	ldr	r3, [sp, #4]
 80175c2:	6163      	str	r3, [r4, #20]
 80175c4:	2201      	movs	r2, #1
 80175c6:	6122      	str	r2, [r4, #16]
 80175c8:	3020      	adds	r0, #32
 80175ca:	e7e3      	b.n	8017594 <__d2b+0x60>
 80175cc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80175d0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80175d4:	f8c9 0000 	str.w	r0, [r9]
 80175d8:	6918      	ldr	r0, [r3, #16]
 80175da:	f7ff fcaf 	bl	8016f3c <__hi0bits>
 80175de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80175e2:	e7df      	b.n	80175a4 <__d2b+0x70>
 80175e4:	0801a390 	.word	0x0801a390
 80175e8:	0801a41c 	.word	0x0801a41c

080175ec <__ratio>:
 80175ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175f0:	4688      	mov	r8, r1
 80175f2:	4669      	mov	r1, sp
 80175f4:	4681      	mov	r9, r0
 80175f6:	f7ff ff4d 	bl	8017494 <__b2d>
 80175fa:	a901      	add	r1, sp, #4
 80175fc:	4640      	mov	r0, r8
 80175fe:	ec55 4b10 	vmov	r4, r5, d0
 8017602:	f7ff ff47 	bl	8017494 <__b2d>
 8017606:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801760a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801760e:	eba3 0c02 	sub.w	ip, r3, r2
 8017612:	e9dd 3200 	ldrd	r3, r2, [sp]
 8017616:	1a9b      	subs	r3, r3, r2
 8017618:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801761c:	ec51 0b10 	vmov	r0, r1, d0
 8017620:	2b00      	cmp	r3, #0
 8017622:	bfd6      	itet	le
 8017624:	460a      	movle	r2, r1
 8017626:	462a      	movgt	r2, r5
 8017628:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801762c:	468b      	mov	fp, r1
 801762e:	462f      	mov	r7, r5
 8017630:	bfd4      	ite	le
 8017632:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8017636:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801763a:	4620      	mov	r0, r4
 801763c:	ee10 2a10 	vmov	r2, s0
 8017640:	465b      	mov	r3, fp
 8017642:	4639      	mov	r1, r7
 8017644:	f7e9 f91a 	bl	800087c <__aeabi_ddiv>
 8017648:	ec41 0b10 	vmov	d0, r0, r1
 801764c:	b003      	add	sp, #12
 801764e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017652 <__copybits>:
 8017652:	3901      	subs	r1, #1
 8017654:	b570      	push	{r4, r5, r6, lr}
 8017656:	1149      	asrs	r1, r1, #5
 8017658:	6914      	ldr	r4, [r2, #16]
 801765a:	3101      	adds	r1, #1
 801765c:	f102 0314 	add.w	r3, r2, #20
 8017660:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8017664:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8017668:	1f05      	subs	r5, r0, #4
 801766a:	42a3      	cmp	r3, r4
 801766c:	d30c      	bcc.n	8017688 <__copybits+0x36>
 801766e:	1aa3      	subs	r3, r4, r2
 8017670:	3b11      	subs	r3, #17
 8017672:	f023 0303 	bic.w	r3, r3, #3
 8017676:	3211      	adds	r2, #17
 8017678:	42a2      	cmp	r2, r4
 801767a:	bf88      	it	hi
 801767c:	2300      	movhi	r3, #0
 801767e:	4418      	add	r0, r3
 8017680:	2300      	movs	r3, #0
 8017682:	4288      	cmp	r0, r1
 8017684:	d305      	bcc.n	8017692 <__copybits+0x40>
 8017686:	bd70      	pop	{r4, r5, r6, pc}
 8017688:	f853 6b04 	ldr.w	r6, [r3], #4
 801768c:	f845 6f04 	str.w	r6, [r5, #4]!
 8017690:	e7eb      	b.n	801766a <__copybits+0x18>
 8017692:	f840 3b04 	str.w	r3, [r0], #4
 8017696:	e7f4      	b.n	8017682 <__copybits+0x30>

08017698 <__any_on>:
 8017698:	f100 0214 	add.w	r2, r0, #20
 801769c:	6900      	ldr	r0, [r0, #16]
 801769e:	114b      	asrs	r3, r1, #5
 80176a0:	4298      	cmp	r0, r3
 80176a2:	b510      	push	{r4, lr}
 80176a4:	db11      	blt.n	80176ca <__any_on+0x32>
 80176a6:	dd0a      	ble.n	80176be <__any_on+0x26>
 80176a8:	f011 011f 	ands.w	r1, r1, #31
 80176ac:	d007      	beq.n	80176be <__any_on+0x26>
 80176ae:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80176b2:	fa24 f001 	lsr.w	r0, r4, r1
 80176b6:	fa00 f101 	lsl.w	r1, r0, r1
 80176ba:	428c      	cmp	r4, r1
 80176bc:	d10b      	bne.n	80176d6 <__any_on+0x3e>
 80176be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80176c2:	4293      	cmp	r3, r2
 80176c4:	d803      	bhi.n	80176ce <__any_on+0x36>
 80176c6:	2000      	movs	r0, #0
 80176c8:	bd10      	pop	{r4, pc}
 80176ca:	4603      	mov	r3, r0
 80176cc:	e7f7      	b.n	80176be <__any_on+0x26>
 80176ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80176d2:	2900      	cmp	r1, #0
 80176d4:	d0f5      	beq.n	80176c2 <__any_on+0x2a>
 80176d6:	2001      	movs	r0, #1
 80176d8:	e7f6      	b.n	80176c8 <__any_on+0x30>

080176da <_calloc_r>:
 80176da:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80176dc:	fba1 2402 	umull	r2, r4, r1, r2
 80176e0:	b94c      	cbnz	r4, 80176f6 <_calloc_r+0x1c>
 80176e2:	4611      	mov	r1, r2
 80176e4:	9201      	str	r2, [sp, #4]
 80176e6:	f000 f87b 	bl	80177e0 <_malloc_r>
 80176ea:	9a01      	ldr	r2, [sp, #4]
 80176ec:	4605      	mov	r5, r0
 80176ee:	b930      	cbnz	r0, 80176fe <_calloc_r+0x24>
 80176f0:	4628      	mov	r0, r5
 80176f2:	b003      	add	sp, #12
 80176f4:	bd30      	pop	{r4, r5, pc}
 80176f6:	220c      	movs	r2, #12
 80176f8:	6002      	str	r2, [r0, #0]
 80176fa:	2500      	movs	r5, #0
 80176fc:	e7f8      	b.n	80176f0 <_calloc_r+0x16>
 80176fe:	4621      	mov	r1, r4
 8017700:	f7fc fbce 	bl	8013ea0 <memset>
 8017704:	e7f4      	b.n	80176f0 <_calloc_r+0x16>
	...

08017708 <_free_r>:
 8017708:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801770a:	2900      	cmp	r1, #0
 801770c:	d044      	beq.n	8017798 <_free_r+0x90>
 801770e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017712:	9001      	str	r0, [sp, #4]
 8017714:	2b00      	cmp	r3, #0
 8017716:	f1a1 0404 	sub.w	r4, r1, #4
 801771a:	bfb8      	it	lt
 801771c:	18e4      	addlt	r4, r4, r3
 801771e:	f000 fab3 	bl	8017c88 <__malloc_lock>
 8017722:	4a1e      	ldr	r2, [pc, #120]	; (801779c <_free_r+0x94>)
 8017724:	9801      	ldr	r0, [sp, #4]
 8017726:	6813      	ldr	r3, [r2, #0]
 8017728:	b933      	cbnz	r3, 8017738 <_free_r+0x30>
 801772a:	6063      	str	r3, [r4, #4]
 801772c:	6014      	str	r4, [r2, #0]
 801772e:	b003      	add	sp, #12
 8017730:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017734:	f000 baae 	b.w	8017c94 <__malloc_unlock>
 8017738:	42a3      	cmp	r3, r4
 801773a:	d908      	bls.n	801774e <_free_r+0x46>
 801773c:	6825      	ldr	r5, [r4, #0]
 801773e:	1961      	adds	r1, r4, r5
 8017740:	428b      	cmp	r3, r1
 8017742:	bf01      	itttt	eq
 8017744:	6819      	ldreq	r1, [r3, #0]
 8017746:	685b      	ldreq	r3, [r3, #4]
 8017748:	1949      	addeq	r1, r1, r5
 801774a:	6021      	streq	r1, [r4, #0]
 801774c:	e7ed      	b.n	801772a <_free_r+0x22>
 801774e:	461a      	mov	r2, r3
 8017750:	685b      	ldr	r3, [r3, #4]
 8017752:	b10b      	cbz	r3, 8017758 <_free_r+0x50>
 8017754:	42a3      	cmp	r3, r4
 8017756:	d9fa      	bls.n	801774e <_free_r+0x46>
 8017758:	6811      	ldr	r1, [r2, #0]
 801775a:	1855      	adds	r5, r2, r1
 801775c:	42a5      	cmp	r5, r4
 801775e:	d10b      	bne.n	8017778 <_free_r+0x70>
 8017760:	6824      	ldr	r4, [r4, #0]
 8017762:	4421      	add	r1, r4
 8017764:	1854      	adds	r4, r2, r1
 8017766:	42a3      	cmp	r3, r4
 8017768:	6011      	str	r1, [r2, #0]
 801776a:	d1e0      	bne.n	801772e <_free_r+0x26>
 801776c:	681c      	ldr	r4, [r3, #0]
 801776e:	685b      	ldr	r3, [r3, #4]
 8017770:	6053      	str	r3, [r2, #4]
 8017772:	4421      	add	r1, r4
 8017774:	6011      	str	r1, [r2, #0]
 8017776:	e7da      	b.n	801772e <_free_r+0x26>
 8017778:	d902      	bls.n	8017780 <_free_r+0x78>
 801777a:	230c      	movs	r3, #12
 801777c:	6003      	str	r3, [r0, #0]
 801777e:	e7d6      	b.n	801772e <_free_r+0x26>
 8017780:	6825      	ldr	r5, [r4, #0]
 8017782:	1961      	adds	r1, r4, r5
 8017784:	428b      	cmp	r3, r1
 8017786:	bf04      	itt	eq
 8017788:	6819      	ldreq	r1, [r3, #0]
 801778a:	685b      	ldreq	r3, [r3, #4]
 801778c:	6063      	str	r3, [r4, #4]
 801778e:	bf04      	itt	eq
 8017790:	1949      	addeq	r1, r1, r5
 8017792:	6021      	streq	r1, [r4, #0]
 8017794:	6054      	str	r4, [r2, #4]
 8017796:	e7ca      	b.n	801772e <_free_r+0x26>
 8017798:	b003      	add	sp, #12
 801779a:	bd30      	pop	{r4, r5, pc}
 801779c:	20019b08 	.word	0x20019b08

080177a0 <sbrk_aligned>:
 80177a0:	b570      	push	{r4, r5, r6, lr}
 80177a2:	4e0e      	ldr	r6, [pc, #56]	; (80177dc <sbrk_aligned+0x3c>)
 80177a4:	460c      	mov	r4, r1
 80177a6:	6831      	ldr	r1, [r6, #0]
 80177a8:	4605      	mov	r5, r0
 80177aa:	b911      	cbnz	r1, 80177b2 <sbrk_aligned+0x12>
 80177ac:	f000 f9f0 	bl	8017b90 <_sbrk_r>
 80177b0:	6030      	str	r0, [r6, #0]
 80177b2:	4621      	mov	r1, r4
 80177b4:	4628      	mov	r0, r5
 80177b6:	f000 f9eb 	bl	8017b90 <_sbrk_r>
 80177ba:	1c43      	adds	r3, r0, #1
 80177bc:	d00a      	beq.n	80177d4 <sbrk_aligned+0x34>
 80177be:	1cc4      	adds	r4, r0, #3
 80177c0:	f024 0403 	bic.w	r4, r4, #3
 80177c4:	42a0      	cmp	r0, r4
 80177c6:	d007      	beq.n	80177d8 <sbrk_aligned+0x38>
 80177c8:	1a21      	subs	r1, r4, r0
 80177ca:	4628      	mov	r0, r5
 80177cc:	f000 f9e0 	bl	8017b90 <_sbrk_r>
 80177d0:	3001      	adds	r0, #1
 80177d2:	d101      	bne.n	80177d8 <sbrk_aligned+0x38>
 80177d4:	f04f 34ff 	mov.w	r4, #4294967295
 80177d8:	4620      	mov	r0, r4
 80177da:	bd70      	pop	{r4, r5, r6, pc}
 80177dc:	20019b0c 	.word	0x20019b0c

080177e0 <_malloc_r>:
 80177e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80177e4:	1ccd      	adds	r5, r1, #3
 80177e6:	f025 0503 	bic.w	r5, r5, #3
 80177ea:	3508      	adds	r5, #8
 80177ec:	2d0c      	cmp	r5, #12
 80177ee:	bf38      	it	cc
 80177f0:	250c      	movcc	r5, #12
 80177f2:	2d00      	cmp	r5, #0
 80177f4:	4607      	mov	r7, r0
 80177f6:	db01      	blt.n	80177fc <_malloc_r+0x1c>
 80177f8:	42a9      	cmp	r1, r5
 80177fa:	d905      	bls.n	8017808 <_malloc_r+0x28>
 80177fc:	230c      	movs	r3, #12
 80177fe:	603b      	str	r3, [r7, #0]
 8017800:	2600      	movs	r6, #0
 8017802:	4630      	mov	r0, r6
 8017804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017808:	4e2e      	ldr	r6, [pc, #184]	; (80178c4 <_malloc_r+0xe4>)
 801780a:	f000 fa3d 	bl	8017c88 <__malloc_lock>
 801780e:	6833      	ldr	r3, [r6, #0]
 8017810:	461c      	mov	r4, r3
 8017812:	bb34      	cbnz	r4, 8017862 <_malloc_r+0x82>
 8017814:	4629      	mov	r1, r5
 8017816:	4638      	mov	r0, r7
 8017818:	f7ff ffc2 	bl	80177a0 <sbrk_aligned>
 801781c:	1c43      	adds	r3, r0, #1
 801781e:	4604      	mov	r4, r0
 8017820:	d14d      	bne.n	80178be <_malloc_r+0xde>
 8017822:	6834      	ldr	r4, [r6, #0]
 8017824:	4626      	mov	r6, r4
 8017826:	2e00      	cmp	r6, #0
 8017828:	d140      	bne.n	80178ac <_malloc_r+0xcc>
 801782a:	6823      	ldr	r3, [r4, #0]
 801782c:	4631      	mov	r1, r6
 801782e:	4638      	mov	r0, r7
 8017830:	eb04 0803 	add.w	r8, r4, r3
 8017834:	f000 f9ac 	bl	8017b90 <_sbrk_r>
 8017838:	4580      	cmp	r8, r0
 801783a:	d13a      	bne.n	80178b2 <_malloc_r+0xd2>
 801783c:	6821      	ldr	r1, [r4, #0]
 801783e:	3503      	adds	r5, #3
 8017840:	1a6d      	subs	r5, r5, r1
 8017842:	f025 0503 	bic.w	r5, r5, #3
 8017846:	3508      	adds	r5, #8
 8017848:	2d0c      	cmp	r5, #12
 801784a:	bf38      	it	cc
 801784c:	250c      	movcc	r5, #12
 801784e:	4629      	mov	r1, r5
 8017850:	4638      	mov	r0, r7
 8017852:	f7ff ffa5 	bl	80177a0 <sbrk_aligned>
 8017856:	3001      	adds	r0, #1
 8017858:	d02b      	beq.n	80178b2 <_malloc_r+0xd2>
 801785a:	6823      	ldr	r3, [r4, #0]
 801785c:	442b      	add	r3, r5
 801785e:	6023      	str	r3, [r4, #0]
 8017860:	e00e      	b.n	8017880 <_malloc_r+0xa0>
 8017862:	6822      	ldr	r2, [r4, #0]
 8017864:	1b52      	subs	r2, r2, r5
 8017866:	d41e      	bmi.n	80178a6 <_malloc_r+0xc6>
 8017868:	2a0b      	cmp	r2, #11
 801786a:	d916      	bls.n	801789a <_malloc_r+0xba>
 801786c:	1961      	adds	r1, r4, r5
 801786e:	42a3      	cmp	r3, r4
 8017870:	6025      	str	r5, [r4, #0]
 8017872:	bf18      	it	ne
 8017874:	6059      	strne	r1, [r3, #4]
 8017876:	6863      	ldr	r3, [r4, #4]
 8017878:	bf08      	it	eq
 801787a:	6031      	streq	r1, [r6, #0]
 801787c:	5162      	str	r2, [r4, r5]
 801787e:	604b      	str	r3, [r1, #4]
 8017880:	4638      	mov	r0, r7
 8017882:	f104 060b 	add.w	r6, r4, #11
 8017886:	f000 fa05 	bl	8017c94 <__malloc_unlock>
 801788a:	f026 0607 	bic.w	r6, r6, #7
 801788e:	1d23      	adds	r3, r4, #4
 8017890:	1af2      	subs	r2, r6, r3
 8017892:	d0b6      	beq.n	8017802 <_malloc_r+0x22>
 8017894:	1b9b      	subs	r3, r3, r6
 8017896:	50a3      	str	r3, [r4, r2]
 8017898:	e7b3      	b.n	8017802 <_malloc_r+0x22>
 801789a:	6862      	ldr	r2, [r4, #4]
 801789c:	42a3      	cmp	r3, r4
 801789e:	bf0c      	ite	eq
 80178a0:	6032      	streq	r2, [r6, #0]
 80178a2:	605a      	strne	r2, [r3, #4]
 80178a4:	e7ec      	b.n	8017880 <_malloc_r+0xa0>
 80178a6:	4623      	mov	r3, r4
 80178a8:	6864      	ldr	r4, [r4, #4]
 80178aa:	e7b2      	b.n	8017812 <_malloc_r+0x32>
 80178ac:	4634      	mov	r4, r6
 80178ae:	6876      	ldr	r6, [r6, #4]
 80178b0:	e7b9      	b.n	8017826 <_malloc_r+0x46>
 80178b2:	230c      	movs	r3, #12
 80178b4:	603b      	str	r3, [r7, #0]
 80178b6:	4638      	mov	r0, r7
 80178b8:	f000 f9ec 	bl	8017c94 <__malloc_unlock>
 80178bc:	e7a1      	b.n	8017802 <_malloc_r+0x22>
 80178be:	6025      	str	r5, [r4, #0]
 80178c0:	e7de      	b.n	8017880 <_malloc_r+0xa0>
 80178c2:	bf00      	nop
 80178c4:	20019b08 	.word	0x20019b08

080178c8 <__ssputs_r>:
 80178c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80178cc:	688e      	ldr	r6, [r1, #8]
 80178ce:	429e      	cmp	r6, r3
 80178d0:	4682      	mov	sl, r0
 80178d2:	460c      	mov	r4, r1
 80178d4:	4690      	mov	r8, r2
 80178d6:	461f      	mov	r7, r3
 80178d8:	d838      	bhi.n	801794c <__ssputs_r+0x84>
 80178da:	898a      	ldrh	r2, [r1, #12]
 80178dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80178e0:	d032      	beq.n	8017948 <__ssputs_r+0x80>
 80178e2:	6825      	ldr	r5, [r4, #0]
 80178e4:	6909      	ldr	r1, [r1, #16]
 80178e6:	eba5 0901 	sub.w	r9, r5, r1
 80178ea:	6965      	ldr	r5, [r4, #20]
 80178ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80178f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80178f4:	3301      	adds	r3, #1
 80178f6:	444b      	add	r3, r9
 80178f8:	106d      	asrs	r5, r5, #1
 80178fa:	429d      	cmp	r5, r3
 80178fc:	bf38      	it	cc
 80178fe:	461d      	movcc	r5, r3
 8017900:	0553      	lsls	r3, r2, #21
 8017902:	d531      	bpl.n	8017968 <__ssputs_r+0xa0>
 8017904:	4629      	mov	r1, r5
 8017906:	f7ff ff6b 	bl	80177e0 <_malloc_r>
 801790a:	4606      	mov	r6, r0
 801790c:	b950      	cbnz	r0, 8017924 <__ssputs_r+0x5c>
 801790e:	230c      	movs	r3, #12
 8017910:	f8ca 3000 	str.w	r3, [sl]
 8017914:	89a3      	ldrh	r3, [r4, #12]
 8017916:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801791a:	81a3      	strh	r3, [r4, #12]
 801791c:	f04f 30ff 	mov.w	r0, #4294967295
 8017920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017924:	6921      	ldr	r1, [r4, #16]
 8017926:	464a      	mov	r2, r9
 8017928:	f7fc faac 	bl	8013e84 <memcpy>
 801792c:	89a3      	ldrh	r3, [r4, #12]
 801792e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017932:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017936:	81a3      	strh	r3, [r4, #12]
 8017938:	6126      	str	r6, [r4, #16]
 801793a:	6165      	str	r5, [r4, #20]
 801793c:	444e      	add	r6, r9
 801793e:	eba5 0509 	sub.w	r5, r5, r9
 8017942:	6026      	str	r6, [r4, #0]
 8017944:	60a5      	str	r5, [r4, #8]
 8017946:	463e      	mov	r6, r7
 8017948:	42be      	cmp	r6, r7
 801794a:	d900      	bls.n	801794e <__ssputs_r+0x86>
 801794c:	463e      	mov	r6, r7
 801794e:	6820      	ldr	r0, [r4, #0]
 8017950:	4632      	mov	r2, r6
 8017952:	4641      	mov	r1, r8
 8017954:	f000 f97e 	bl	8017c54 <memmove>
 8017958:	68a3      	ldr	r3, [r4, #8]
 801795a:	1b9b      	subs	r3, r3, r6
 801795c:	60a3      	str	r3, [r4, #8]
 801795e:	6823      	ldr	r3, [r4, #0]
 8017960:	4433      	add	r3, r6
 8017962:	6023      	str	r3, [r4, #0]
 8017964:	2000      	movs	r0, #0
 8017966:	e7db      	b.n	8017920 <__ssputs_r+0x58>
 8017968:	462a      	mov	r2, r5
 801796a:	f000 f999 	bl	8017ca0 <_realloc_r>
 801796e:	4606      	mov	r6, r0
 8017970:	2800      	cmp	r0, #0
 8017972:	d1e1      	bne.n	8017938 <__ssputs_r+0x70>
 8017974:	6921      	ldr	r1, [r4, #16]
 8017976:	4650      	mov	r0, sl
 8017978:	f7ff fec6 	bl	8017708 <_free_r>
 801797c:	e7c7      	b.n	801790e <__ssputs_r+0x46>
	...

08017980 <_svfiprintf_r>:
 8017980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017984:	4698      	mov	r8, r3
 8017986:	898b      	ldrh	r3, [r1, #12]
 8017988:	061b      	lsls	r3, r3, #24
 801798a:	b09d      	sub	sp, #116	; 0x74
 801798c:	4607      	mov	r7, r0
 801798e:	460d      	mov	r5, r1
 8017990:	4614      	mov	r4, r2
 8017992:	d50e      	bpl.n	80179b2 <_svfiprintf_r+0x32>
 8017994:	690b      	ldr	r3, [r1, #16]
 8017996:	b963      	cbnz	r3, 80179b2 <_svfiprintf_r+0x32>
 8017998:	2140      	movs	r1, #64	; 0x40
 801799a:	f7ff ff21 	bl	80177e0 <_malloc_r>
 801799e:	6028      	str	r0, [r5, #0]
 80179a0:	6128      	str	r0, [r5, #16]
 80179a2:	b920      	cbnz	r0, 80179ae <_svfiprintf_r+0x2e>
 80179a4:	230c      	movs	r3, #12
 80179a6:	603b      	str	r3, [r7, #0]
 80179a8:	f04f 30ff 	mov.w	r0, #4294967295
 80179ac:	e0d1      	b.n	8017b52 <_svfiprintf_r+0x1d2>
 80179ae:	2340      	movs	r3, #64	; 0x40
 80179b0:	616b      	str	r3, [r5, #20]
 80179b2:	2300      	movs	r3, #0
 80179b4:	9309      	str	r3, [sp, #36]	; 0x24
 80179b6:	2320      	movs	r3, #32
 80179b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80179bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80179c0:	2330      	movs	r3, #48	; 0x30
 80179c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8017b6c <_svfiprintf_r+0x1ec>
 80179c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80179ca:	f04f 0901 	mov.w	r9, #1
 80179ce:	4623      	mov	r3, r4
 80179d0:	469a      	mov	sl, r3
 80179d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80179d6:	b10a      	cbz	r2, 80179dc <_svfiprintf_r+0x5c>
 80179d8:	2a25      	cmp	r2, #37	; 0x25
 80179da:	d1f9      	bne.n	80179d0 <_svfiprintf_r+0x50>
 80179dc:	ebba 0b04 	subs.w	fp, sl, r4
 80179e0:	d00b      	beq.n	80179fa <_svfiprintf_r+0x7a>
 80179e2:	465b      	mov	r3, fp
 80179e4:	4622      	mov	r2, r4
 80179e6:	4629      	mov	r1, r5
 80179e8:	4638      	mov	r0, r7
 80179ea:	f7ff ff6d 	bl	80178c8 <__ssputs_r>
 80179ee:	3001      	adds	r0, #1
 80179f0:	f000 80aa 	beq.w	8017b48 <_svfiprintf_r+0x1c8>
 80179f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80179f6:	445a      	add	r2, fp
 80179f8:	9209      	str	r2, [sp, #36]	; 0x24
 80179fa:	f89a 3000 	ldrb.w	r3, [sl]
 80179fe:	2b00      	cmp	r3, #0
 8017a00:	f000 80a2 	beq.w	8017b48 <_svfiprintf_r+0x1c8>
 8017a04:	2300      	movs	r3, #0
 8017a06:	f04f 32ff 	mov.w	r2, #4294967295
 8017a0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017a0e:	f10a 0a01 	add.w	sl, sl, #1
 8017a12:	9304      	str	r3, [sp, #16]
 8017a14:	9307      	str	r3, [sp, #28]
 8017a16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017a1a:	931a      	str	r3, [sp, #104]	; 0x68
 8017a1c:	4654      	mov	r4, sl
 8017a1e:	2205      	movs	r2, #5
 8017a20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017a24:	4851      	ldr	r0, [pc, #324]	; (8017b6c <_svfiprintf_r+0x1ec>)
 8017a26:	f7e8 fbf3 	bl	8000210 <memchr>
 8017a2a:	9a04      	ldr	r2, [sp, #16]
 8017a2c:	b9d8      	cbnz	r0, 8017a66 <_svfiprintf_r+0xe6>
 8017a2e:	06d0      	lsls	r0, r2, #27
 8017a30:	bf44      	itt	mi
 8017a32:	2320      	movmi	r3, #32
 8017a34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017a38:	0711      	lsls	r1, r2, #28
 8017a3a:	bf44      	itt	mi
 8017a3c:	232b      	movmi	r3, #43	; 0x2b
 8017a3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017a42:	f89a 3000 	ldrb.w	r3, [sl]
 8017a46:	2b2a      	cmp	r3, #42	; 0x2a
 8017a48:	d015      	beq.n	8017a76 <_svfiprintf_r+0xf6>
 8017a4a:	9a07      	ldr	r2, [sp, #28]
 8017a4c:	4654      	mov	r4, sl
 8017a4e:	2000      	movs	r0, #0
 8017a50:	f04f 0c0a 	mov.w	ip, #10
 8017a54:	4621      	mov	r1, r4
 8017a56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017a5a:	3b30      	subs	r3, #48	; 0x30
 8017a5c:	2b09      	cmp	r3, #9
 8017a5e:	d94e      	bls.n	8017afe <_svfiprintf_r+0x17e>
 8017a60:	b1b0      	cbz	r0, 8017a90 <_svfiprintf_r+0x110>
 8017a62:	9207      	str	r2, [sp, #28]
 8017a64:	e014      	b.n	8017a90 <_svfiprintf_r+0x110>
 8017a66:	eba0 0308 	sub.w	r3, r0, r8
 8017a6a:	fa09 f303 	lsl.w	r3, r9, r3
 8017a6e:	4313      	orrs	r3, r2
 8017a70:	9304      	str	r3, [sp, #16]
 8017a72:	46a2      	mov	sl, r4
 8017a74:	e7d2      	b.n	8017a1c <_svfiprintf_r+0x9c>
 8017a76:	9b03      	ldr	r3, [sp, #12]
 8017a78:	1d19      	adds	r1, r3, #4
 8017a7a:	681b      	ldr	r3, [r3, #0]
 8017a7c:	9103      	str	r1, [sp, #12]
 8017a7e:	2b00      	cmp	r3, #0
 8017a80:	bfbb      	ittet	lt
 8017a82:	425b      	neglt	r3, r3
 8017a84:	f042 0202 	orrlt.w	r2, r2, #2
 8017a88:	9307      	strge	r3, [sp, #28]
 8017a8a:	9307      	strlt	r3, [sp, #28]
 8017a8c:	bfb8      	it	lt
 8017a8e:	9204      	strlt	r2, [sp, #16]
 8017a90:	7823      	ldrb	r3, [r4, #0]
 8017a92:	2b2e      	cmp	r3, #46	; 0x2e
 8017a94:	d10c      	bne.n	8017ab0 <_svfiprintf_r+0x130>
 8017a96:	7863      	ldrb	r3, [r4, #1]
 8017a98:	2b2a      	cmp	r3, #42	; 0x2a
 8017a9a:	d135      	bne.n	8017b08 <_svfiprintf_r+0x188>
 8017a9c:	9b03      	ldr	r3, [sp, #12]
 8017a9e:	1d1a      	adds	r2, r3, #4
 8017aa0:	681b      	ldr	r3, [r3, #0]
 8017aa2:	9203      	str	r2, [sp, #12]
 8017aa4:	2b00      	cmp	r3, #0
 8017aa6:	bfb8      	it	lt
 8017aa8:	f04f 33ff 	movlt.w	r3, #4294967295
 8017aac:	3402      	adds	r4, #2
 8017aae:	9305      	str	r3, [sp, #20]
 8017ab0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8017b7c <_svfiprintf_r+0x1fc>
 8017ab4:	7821      	ldrb	r1, [r4, #0]
 8017ab6:	2203      	movs	r2, #3
 8017ab8:	4650      	mov	r0, sl
 8017aba:	f7e8 fba9 	bl	8000210 <memchr>
 8017abe:	b140      	cbz	r0, 8017ad2 <_svfiprintf_r+0x152>
 8017ac0:	2340      	movs	r3, #64	; 0x40
 8017ac2:	eba0 000a 	sub.w	r0, r0, sl
 8017ac6:	fa03 f000 	lsl.w	r0, r3, r0
 8017aca:	9b04      	ldr	r3, [sp, #16]
 8017acc:	4303      	orrs	r3, r0
 8017ace:	3401      	adds	r4, #1
 8017ad0:	9304      	str	r3, [sp, #16]
 8017ad2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017ad6:	4826      	ldr	r0, [pc, #152]	; (8017b70 <_svfiprintf_r+0x1f0>)
 8017ad8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017adc:	2206      	movs	r2, #6
 8017ade:	f7e8 fb97 	bl	8000210 <memchr>
 8017ae2:	2800      	cmp	r0, #0
 8017ae4:	d038      	beq.n	8017b58 <_svfiprintf_r+0x1d8>
 8017ae6:	4b23      	ldr	r3, [pc, #140]	; (8017b74 <_svfiprintf_r+0x1f4>)
 8017ae8:	bb1b      	cbnz	r3, 8017b32 <_svfiprintf_r+0x1b2>
 8017aea:	9b03      	ldr	r3, [sp, #12]
 8017aec:	3307      	adds	r3, #7
 8017aee:	f023 0307 	bic.w	r3, r3, #7
 8017af2:	3308      	adds	r3, #8
 8017af4:	9303      	str	r3, [sp, #12]
 8017af6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017af8:	4433      	add	r3, r6
 8017afa:	9309      	str	r3, [sp, #36]	; 0x24
 8017afc:	e767      	b.n	80179ce <_svfiprintf_r+0x4e>
 8017afe:	fb0c 3202 	mla	r2, ip, r2, r3
 8017b02:	460c      	mov	r4, r1
 8017b04:	2001      	movs	r0, #1
 8017b06:	e7a5      	b.n	8017a54 <_svfiprintf_r+0xd4>
 8017b08:	2300      	movs	r3, #0
 8017b0a:	3401      	adds	r4, #1
 8017b0c:	9305      	str	r3, [sp, #20]
 8017b0e:	4619      	mov	r1, r3
 8017b10:	f04f 0c0a 	mov.w	ip, #10
 8017b14:	4620      	mov	r0, r4
 8017b16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017b1a:	3a30      	subs	r2, #48	; 0x30
 8017b1c:	2a09      	cmp	r2, #9
 8017b1e:	d903      	bls.n	8017b28 <_svfiprintf_r+0x1a8>
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	d0c5      	beq.n	8017ab0 <_svfiprintf_r+0x130>
 8017b24:	9105      	str	r1, [sp, #20]
 8017b26:	e7c3      	b.n	8017ab0 <_svfiprintf_r+0x130>
 8017b28:	fb0c 2101 	mla	r1, ip, r1, r2
 8017b2c:	4604      	mov	r4, r0
 8017b2e:	2301      	movs	r3, #1
 8017b30:	e7f0      	b.n	8017b14 <_svfiprintf_r+0x194>
 8017b32:	ab03      	add	r3, sp, #12
 8017b34:	9300      	str	r3, [sp, #0]
 8017b36:	462a      	mov	r2, r5
 8017b38:	4b0f      	ldr	r3, [pc, #60]	; (8017b78 <_svfiprintf_r+0x1f8>)
 8017b3a:	a904      	add	r1, sp, #16
 8017b3c:	4638      	mov	r0, r7
 8017b3e:	f7fc fa57 	bl	8013ff0 <_printf_float>
 8017b42:	1c42      	adds	r2, r0, #1
 8017b44:	4606      	mov	r6, r0
 8017b46:	d1d6      	bne.n	8017af6 <_svfiprintf_r+0x176>
 8017b48:	89ab      	ldrh	r3, [r5, #12]
 8017b4a:	065b      	lsls	r3, r3, #25
 8017b4c:	f53f af2c 	bmi.w	80179a8 <_svfiprintf_r+0x28>
 8017b50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017b52:	b01d      	add	sp, #116	; 0x74
 8017b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b58:	ab03      	add	r3, sp, #12
 8017b5a:	9300      	str	r3, [sp, #0]
 8017b5c:	462a      	mov	r2, r5
 8017b5e:	4b06      	ldr	r3, [pc, #24]	; (8017b78 <_svfiprintf_r+0x1f8>)
 8017b60:	a904      	add	r1, sp, #16
 8017b62:	4638      	mov	r0, r7
 8017b64:	f7fc fce8 	bl	8014538 <_printf_i>
 8017b68:	e7eb      	b.n	8017b42 <_svfiprintf_r+0x1c2>
 8017b6a:	bf00      	nop
 8017b6c:	0801a574 	.word	0x0801a574
 8017b70:	0801a57e 	.word	0x0801a57e
 8017b74:	08013ff1 	.word	0x08013ff1
 8017b78:	080178c9 	.word	0x080178c9
 8017b7c:	0801a57a 	.word	0x0801a57a

08017b80 <nan>:
 8017b80:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017b88 <nan+0x8>
 8017b84:	4770      	bx	lr
 8017b86:	bf00      	nop
 8017b88:	00000000 	.word	0x00000000
 8017b8c:	7ff80000 	.word	0x7ff80000

08017b90 <_sbrk_r>:
 8017b90:	b538      	push	{r3, r4, r5, lr}
 8017b92:	4d06      	ldr	r5, [pc, #24]	; (8017bac <_sbrk_r+0x1c>)
 8017b94:	2300      	movs	r3, #0
 8017b96:	4604      	mov	r4, r0
 8017b98:	4608      	mov	r0, r1
 8017b9a:	602b      	str	r3, [r5, #0]
 8017b9c:	f7f0 ff5e 	bl	8008a5c <_sbrk>
 8017ba0:	1c43      	adds	r3, r0, #1
 8017ba2:	d102      	bne.n	8017baa <_sbrk_r+0x1a>
 8017ba4:	682b      	ldr	r3, [r5, #0]
 8017ba6:	b103      	cbz	r3, 8017baa <_sbrk_r+0x1a>
 8017ba8:	6023      	str	r3, [r4, #0]
 8017baa:	bd38      	pop	{r3, r4, r5, pc}
 8017bac:	20019b10 	.word	0x20019b10

08017bb0 <strncmp>:
 8017bb0:	b510      	push	{r4, lr}
 8017bb2:	b17a      	cbz	r2, 8017bd4 <strncmp+0x24>
 8017bb4:	4603      	mov	r3, r0
 8017bb6:	3901      	subs	r1, #1
 8017bb8:	1884      	adds	r4, r0, r2
 8017bba:	f813 0b01 	ldrb.w	r0, [r3], #1
 8017bbe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8017bc2:	4290      	cmp	r0, r2
 8017bc4:	d101      	bne.n	8017bca <strncmp+0x1a>
 8017bc6:	42a3      	cmp	r3, r4
 8017bc8:	d101      	bne.n	8017bce <strncmp+0x1e>
 8017bca:	1a80      	subs	r0, r0, r2
 8017bcc:	bd10      	pop	{r4, pc}
 8017bce:	2800      	cmp	r0, #0
 8017bd0:	d1f3      	bne.n	8017bba <strncmp+0xa>
 8017bd2:	e7fa      	b.n	8017bca <strncmp+0x1a>
 8017bd4:	4610      	mov	r0, r2
 8017bd6:	e7f9      	b.n	8017bcc <strncmp+0x1c>

08017bd8 <__ascii_wctomb>:
 8017bd8:	b149      	cbz	r1, 8017bee <__ascii_wctomb+0x16>
 8017bda:	2aff      	cmp	r2, #255	; 0xff
 8017bdc:	bf85      	ittet	hi
 8017bde:	238a      	movhi	r3, #138	; 0x8a
 8017be0:	6003      	strhi	r3, [r0, #0]
 8017be2:	700a      	strbls	r2, [r1, #0]
 8017be4:	f04f 30ff 	movhi.w	r0, #4294967295
 8017be8:	bf98      	it	ls
 8017bea:	2001      	movls	r0, #1
 8017bec:	4770      	bx	lr
 8017bee:	4608      	mov	r0, r1
 8017bf0:	4770      	bx	lr
	...

08017bf4 <__assert_func>:
 8017bf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017bf6:	4614      	mov	r4, r2
 8017bf8:	461a      	mov	r2, r3
 8017bfa:	4b09      	ldr	r3, [pc, #36]	; (8017c20 <__assert_func+0x2c>)
 8017bfc:	681b      	ldr	r3, [r3, #0]
 8017bfe:	4605      	mov	r5, r0
 8017c00:	68d8      	ldr	r0, [r3, #12]
 8017c02:	b14c      	cbz	r4, 8017c18 <__assert_func+0x24>
 8017c04:	4b07      	ldr	r3, [pc, #28]	; (8017c24 <__assert_func+0x30>)
 8017c06:	9100      	str	r1, [sp, #0]
 8017c08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017c0c:	4906      	ldr	r1, [pc, #24]	; (8017c28 <__assert_func+0x34>)
 8017c0e:	462b      	mov	r3, r5
 8017c10:	f000 f80e 	bl	8017c30 <fiprintf>
 8017c14:	f000 fa8c 	bl	8018130 <abort>
 8017c18:	4b04      	ldr	r3, [pc, #16]	; (8017c2c <__assert_func+0x38>)
 8017c1a:	461c      	mov	r4, r3
 8017c1c:	e7f3      	b.n	8017c06 <__assert_func+0x12>
 8017c1e:	bf00      	nop
 8017c20:	200000a4 	.word	0x200000a4
 8017c24:	0801a585 	.word	0x0801a585
 8017c28:	0801a592 	.word	0x0801a592
 8017c2c:	0801a5c0 	.word	0x0801a5c0

08017c30 <fiprintf>:
 8017c30:	b40e      	push	{r1, r2, r3}
 8017c32:	b503      	push	{r0, r1, lr}
 8017c34:	4601      	mov	r1, r0
 8017c36:	ab03      	add	r3, sp, #12
 8017c38:	4805      	ldr	r0, [pc, #20]	; (8017c50 <fiprintf+0x20>)
 8017c3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8017c3e:	6800      	ldr	r0, [r0, #0]
 8017c40:	9301      	str	r3, [sp, #4]
 8017c42:	f000 f885 	bl	8017d50 <_vfiprintf_r>
 8017c46:	b002      	add	sp, #8
 8017c48:	f85d eb04 	ldr.w	lr, [sp], #4
 8017c4c:	b003      	add	sp, #12
 8017c4e:	4770      	bx	lr
 8017c50:	200000a4 	.word	0x200000a4

08017c54 <memmove>:
 8017c54:	4288      	cmp	r0, r1
 8017c56:	b510      	push	{r4, lr}
 8017c58:	eb01 0402 	add.w	r4, r1, r2
 8017c5c:	d902      	bls.n	8017c64 <memmove+0x10>
 8017c5e:	4284      	cmp	r4, r0
 8017c60:	4623      	mov	r3, r4
 8017c62:	d807      	bhi.n	8017c74 <memmove+0x20>
 8017c64:	1e43      	subs	r3, r0, #1
 8017c66:	42a1      	cmp	r1, r4
 8017c68:	d008      	beq.n	8017c7c <memmove+0x28>
 8017c6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017c6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017c72:	e7f8      	b.n	8017c66 <memmove+0x12>
 8017c74:	4402      	add	r2, r0
 8017c76:	4601      	mov	r1, r0
 8017c78:	428a      	cmp	r2, r1
 8017c7a:	d100      	bne.n	8017c7e <memmove+0x2a>
 8017c7c:	bd10      	pop	{r4, pc}
 8017c7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017c82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017c86:	e7f7      	b.n	8017c78 <memmove+0x24>

08017c88 <__malloc_lock>:
 8017c88:	4801      	ldr	r0, [pc, #4]	; (8017c90 <__malloc_lock+0x8>)
 8017c8a:	f000 bc11 	b.w	80184b0 <__retarget_lock_acquire_recursive>
 8017c8e:	bf00      	nop
 8017c90:	20019b14 	.word	0x20019b14

08017c94 <__malloc_unlock>:
 8017c94:	4801      	ldr	r0, [pc, #4]	; (8017c9c <__malloc_unlock+0x8>)
 8017c96:	f000 bc0c 	b.w	80184b2 <__retarget_lock_release_recursive>
 8017c9a:	bf00      	nop
 8017c9c:	20019b14 	.word	0x20019b14

08017ca0 <_realloc_r>:
 8017ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ca4:	4680      	mov	r8, r0
 8017ca6:	4614      	mov	r4, r2
 8017ca8:	460e      	mov	r6, r1
 8017caa:	b921      	cbnz	r1, 8017cb6 <_realloc_r+0x16>
 8017cac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017cb0:	4611      	mov	r1, r2
 8017cb2:	f7ff bd95 	b.w	80177e0 <_malloc_r>
 8017cb6:	b92a      	cbnz	r2, 8017cc4 <_realloc_r+0x24>
 8017cb8:	f7ff fd26 	bl	8017708 <_free_r>
 8017cbc:	4625      	mov	r5, r4
 8017cbe:	4628      	mov	r0, r5
 8017cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017cc4:	f000 fc5c 	bl	8018580 <_malloc_usable_size_r>
 8017cc8:	4284      	cmp	r4, r0
 8017cca:	4607      	mov	r7, r0
 8017ccc:	d802      	bhi.n	8017cd4 <_realloc_r+0x34>
 8017cce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017cd2:	d812      	bhi.n	8017cfa <_realloc_r+0x5a>
 8017cd4:	4621      	mov	r1, r4
 8017cd6:	4640      	mov	r0, r8
 8017cd8:	f7ff fd82 	bl	80177e0 <_malloc_r>
 8017cdc:	4605      	mov	r5, r0
 8017cde:	2800      	cmp	r0, #0
 8017ce0:	d0ed      	beq.n	8017cbe <_realloc_r+0x1e>
 8017ce2:	42bc      	cmp	r4, r7
 8017ce4:	4622      	mov	r2, r4
 8017ce6:	4631      	mov	r1, r6
 8017ce8:	bf28      	it	cs
 8017cea:	463a      	movcs	r2, r7
 8017cec:	f7fc f8ca 	bl	8013e84 <memcpy>
 8017cf0:	4631      	mov	r1, r6
 8017cf2:	4640      	mov	r0, r8
 8017cf4:	f7ff fd08 	bl	8017708 <_free_r>
 8017cf8:	e7e1      	b.n	8017cbe <_realloc_r+0x1e>
 8017cfa:	4635      	mov	r5, r6
 8017cfc:	e7df      	b.n	8017cbe <_realloc_r+0x1e>

08017cfe <__sfputc_r>:
 8017cfe:	6893      	ldr	r3, [r2, #8]
 8017d00:	3b01      	subs	r3, #1
 8017d02:	2b00      	cmp	r3, #0
 8017d04:	b410      	push	{r4}
 8017d06:	6093      	str	r3, [r2, #8]
 8017d08:	da08      	bge.n	8017d1c <__sfputc_r+0x1e>
 8017d0a:	6994      	ldr	r4, [r2, #24]
 8017d0c:	42a3      	cmp	r3, r4
 8017d0e:	db01      	blt.n	8017d14 <__sfputc_r+0x16>
 8017d10:	290a      	cmp	r1, #10
 8017d12:	d103      	bne.n	8017d1c <__sfputc_r+0x1e>
 8017d14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017d18:	f000 b94a 	b.w	8017fb0 <__swbuf_r>
 8017d1c:	6813      	ldr	r3, [r2, #0]
 8017d1e:	1c58      	adds	r0, r3, #1
 8017d20:	6010      	str	r0, [r2, #0]
 8017d22:	7019      	strb	r1, [r3, #0]
 8017d24:	4608      	mov	r0, r1
 8017d26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017d2a:	4770      	bx	lr

08017d2c <__sfputs_r>:
 8017d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d2e:	4606      	mov	r6, r0
 8017d30:	460f      	mov	r7, r1
 8017d32:	4614      	mov	r4, r2
 8017d34:	18d5      	adds	r5, r2, r3
 8017d36:	42ac      	cmp	r4, r5
 8017d38:	d101      	bne.n	8017d3e <__sfputs_r+0x12>
 8017d3a:	2000      	movs	r0, #0
 8017d3c:	e007      	b.n	8017d4e <__sfputs_r+0x22>
 8017d3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017d42:	463a      	mov	r2, r7
 8017d44:	4630      	mov	r0, r6
 8017d46:	f7ff ffda 	bl	8017cfe <__sfputc_r>
 8017d4a:	1c43      	adds	r3, r0, #1
 8017d4c:	d1f3      	bne.n	8017d36 <__sfputs_r+0xa>
 8017d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017d50 <_vfiprintf_r>:
 8017d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d54:	460d      	mov	r5, r1
 8017d56:	b09d      	sub	sp, #116	; 0x74
 8017d58:	4614      	mov	r4, r2
 8017d5a:	4698      	mov	r8, r3
 8017d5c:	4606      	mov	r6, r0
 8017d5e:	b118      	cbz	r0, 8017d68 <_vfiprintf_r+0x18>
 8017d60:	6983      	ldr	r3, [r0, #24]
 8017d62:	b90b      	cbnz	r3, 8017d68 <_vfiprintf_r+0x18>
 8017d64:	f000 fb06 	bl	8018374 <__sinit>
 8017d68:	4b89      	ldr	r3, [pc, #548]	; (8017f90 <_vfiprintf_r+0x240>)
 8017d6a:	429d      	cmp	r5, r3
 8017d6c:	d11b      	bne.n	8017da6 <_vfiprintf_r+0x56>
 8017d6e:	6875      	ldr	r5, [r6, #4]
 8017d70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017d72:	07d9      	lsls	r1, r3, #31
 8017d74:	d405      	bmi.n	8017d82 <_vfiprintf_r+0x32>
 8017d76:	89ab      	ldrh	r3, [r5, #12]
 8017d78:	059a      	lsls	r2, r3, #22
 8017d7a:	d402      	bmi.n	8017d82 <_vfiprintf_r+0x32>
 8017d7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017d7e:	f000 fb97 	bl	80184b0 <__retarget_lock_acquire_recursive>
 8017d82:	89ab      	ldrh	r3, [r5, #12]
 8017d84:	071b      	lsls	r3, r3, #28
 8017d86:	d501      	bpl.n	8017d8c <_vfiprintf_r+0x3c>
 8017d88:	692b      	ldr	r3, [r5, #16]
 8017d8a:	b9eb      	cbnz	r3, 8017dc8 <_vfiprintf_r+0x78>
 8017d8c:	4629      	mov	r1, r5
 8017d8e:	4630      	mov	r0, r6
 8017d90:	f000 f960 	bl	8018054 <__swsetup_r>
 8017d94:	b1c0      	cbz	r0, 8017dc8 <_vfiprintf_r+0x78>
 8017d96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017d98:	07dc      	lsls	r4, r3, #31
 8017d9a:	d50e      	bpl.n	8017dba <_vfiprintf_r+0x6a>
 8017d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8017da0:	b01d      	add	sp, #116	; 0x74
 8017da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017da6:	4b7b      	ldr	r3, [pc, #492]	; (8017f94 <_vfiprintf_r+0x244>)
 8017da8:	429d      	cmp	r5, r3
 8017daa:	d101      	bne.n	8017db0 <_vfiprintf_r+0x60>
 8017dac:	68b5      	ldr	r5, [r6, #8]
 8017dae:	e7df      	b.n	8017d70 <_vfiprintf_r+0x20>
 8017db0:	4b79      	ldr	r3, [pc, #484]	; (8017f98 <_vfiprintf_r+0x248>)
 8017db2:	429d      	cmp	r5, r3
 8017db4:	bf08      	it	eq
 8017db6:	68f5      	ldreq	r5, [r6, #12]
 8017db8:	e7da      	b.n	8017d70 <_vfiprintf_r+0x20>
 8017dba:	89ab      	ldrh	r3, [r5, #12]
 8017dbc:	0598      	lsls	r0, r3, #22
 8017dbe:	d4ed      	bmi.n	8017d9c <_vfiprintf_r+0x4c>
 8017dc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017dc2:	f000 fb76 	bl	80184b2 <__retarget_lock_release_recursive>
 8017dc6:	e7e9      	b.n	8017d9c <_vfiprintf_r+0x4c>
 8017dc8:	2300      	movs	r3, #0
 8017dca:	9309      	str	r3, [sp, #36]	; 0x24
 8017dcc:	2320      	movs	r3, #32
 8017dce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017dd2:	f8cd 800c 	str.w	r8, [sp, #12]
 8017dd6:	2330      	movs	r3, #48	; 0x30
 8017dd8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017f9c <_vfiprintf_r+0x24c>
 8017ddc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017de0:	f04f 0901 	mov.w	r9, #1
 8017de4:	4623      	mov	r3, r4
 8017de6:	469a      	mov	sl, r3
 8017de8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017dec:	b10a      	cbz	r2, 8017df2 <_vfiprintf_r+0xa2>
 8017dee:	2a25      	cmp	r2, #37	; 0x25
 8017df0:	d1f9      	bne.n	8017de6 <_vfiprintf_r+0x96>
 8017df2:	ebba 0b04 	subs.w	fp, sl, r4
 8017df6:	d00b      	beq.n	8017e10 <_vfiprintf_r+0xc0>
 8017df8:	465b      	mov	r3, fp
 8017dfa:	4622      	mov	r2, r4
 8017dfc:	4629      	mov	r1, r5
 8017dfe:	4630      	mov	r0, r6
 8017e00:	f7ff ff94 	bl	8017d2c <__sfputs_r>
 8017e04:	3001      	adds	r0, #1
 8017e06:	f000 80aa 	beq.w	8017f5e <_vfiprintf_r+0x20e>
 8017e0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017e0c:	445a      	add	r2, fp
 8017e0e:	9209      	str	r2, [sp, #36]	; 0x24
 8017e10:	f89a 3000 	ldrb.w	r3, [sl]
 8017e14:	2b00      	cmp	r3, #0
 8017e16:	f000 80a2 	beq.w	8017f5e <_vfiprintf_r+0x20e>
 8017e1a:	2300      	movs	r3, #0
 8017e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8017e20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017e24:	f10a 0a01 	add.w	sl, sl, #1
 8017e28:	9304      	str	r3, [sp, #16]
 8017e2a:	9307      	str	r3, [sp, #28]
 8017e2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017e30:	931a      	str	r3, [sp, #104]	; 0x68
 8017e32:	4654      	mov	r4, sl
 8017e34:	2205      	movs	r2, #5
 8017e36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017e3a:	4858      	ldr	r0, [pc, #352]	; (8017f9c <_vfiprintf_r+0x24c>)
 8017e3c:	f7e8 f9e8 	bl	8000210 <memchr>
 8017e40:	9a04      	ldr	r2, [sp, #16]
 8017e42:	b9d8      	cbnz	r0, 8017e7c <_vfiprintf_r+0x12c>
 8017e44:	06d1      	lsls	r1, r2, #27
 8017e46:	bf44      	itt	mi
 8017e48:	2320      	movmi	r3, #32
 8017e4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017e4e:	0713      	lsls	r3, r2, #28
 8017e50:	bf44      	itt	mi
 8017e52:	232b      	movmi	r3, #43	; 0x2b
 8017e54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017e58:	f89a 3000 	ldrb.w	r3, [sl]
 8017e5c:	2b2a      	cmp	r3, #42	; 0x2a
 8017e5e:	d015      	beq.n	8017e8c <_vfiprintf_r+0x13c>
 8017e60:	9a07      	ldr	r2, [sp, #28]
 8017e62:	4654      	mov	r4, sl
 8017e64:	2000      	movs	r0, #0
 8017e66:	f04f 0c0a 	mov.w	ip, #10
 8017e6a:	4621      	mov	r1, r4
 8017e6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017e70:	3b30      	subs	r3, #48	; 0x30
 8017e72:	2b09      	cmp	r3, #9
 8017e74:	d94e      	bls.n	8017f14 <_vfiprintf_r+0x1c4>
 8017e76:	b1b0      	cbz	r0, 8017ea6 <_vfiprintf_r+0x156>
 8017e78:	9207      	str	r2, [sp, #28]
 8017e7a:	e014      	b.n	8017ea6 <_vfiprintf_r+0x156>
 8017e7c:	eba0 0308 	sub.w	r3, r0, r8
 8017e80:	fa09 f303 	lsl.w	r3, r9, r3
 8017e84:	4313      	orrs	r3, r2
 8017e86:	9304      	str	r3, [sp, #16]
 8017e88:	46a2      	mov	sl, r4
 8017e8a:	e7d2      	b.n	8017e32 <_vfiprintf_r+0xe2>
 8017e8c:	9b03      	ldr	r3, [sp, #12]
 8017e8e:	1d19      	adds	r1, r3, #4
 8017e90:	681b      	ldr	r3, [r3, #0]
 8017e92:	9103      	str	r1, [sp, #12]
 8017e94:	2b00      	cmp	r3, #0
 8017e96:	bfbb      	ittet	lt
 8017e98:	425b      	neglt	r3, r3
 8017e9a:	f042 0202 	orrlt.w	r2, r2, #2
 8017e9e:	9307      	strge	r3, [sp, #28]
 8017ea0:	9307      	strlt	r3, [sp, #28]
 8017ea2:	bfb8      	it	lt
 8017ea4:	9204      	strlt	r2, [sp, #16]
 8017ea6:	7823      	ldrb	r3, [r4, #0]
 8017ea8:	2b2e      	cmp	r3, #46	; 0x2e
 8017eaa:	d10c      	bne.n	8017ec6 <_vfiprintf_r+0x176>
 8017eac:	7863      	ldrb	r3, [r4, #1]
 8017eae:	2b2a      	cmp	r3, #42	; 0x2a
 8017eb0:	d135      	bne.n	8017f1e <_vfiprintf_r+0x1ce>
 8017eb2:	9b03      	ldr	r3, [sp, #12]
 8017eb4:	1d1a      	adds	r2, r3, #4
 8017eb6:	681b      	ldr	r3, [r3, #0]
 8017eb8:	9203      	str	r2, [sp, #12]
 8017eba:	2b00      	cmp	r3, #0
 8017ebc:	bfb8      	it	lt
 8017ebe:	f04f 33ff 	movlt.w	r3, #4294967295
 8017ec2:	3402      	adds	r4, #2
 8017ec4:	9305      	str	r3, [sp, #20]
 8017ec6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017fac <_vfiprintf_r+0x25c>
 8017eca:	7821      	ldrb	r1, [r4, #0]
 8017ecc:	2203      	movs	r2, #3
 8017ece:	4650      	mov	r0, sl
 8017ed0:	f7e8 f99e 	bl	8000210 <memchr>
 8017ed4:	b140      	cbz	r0, 8017ee8 <_vfiprintf_r+0x198>
 8017ed6:	2340      	movs	r3, #64	; 0x40
 8017ed8:	eba0 000a 	sub.w	r0, r0, sl
 8017edc:	fa03 f000 	lsl.w	r0, r3, r0
 8017ee0:	9b04      	ldr	r3, [sp, #16]
 8017ee2:	4303      	orrs	r3, r0
 8017ee4:	3401      	adds	r4, #1
 8017ee6:	9304      	str	r3, [sp, #16]
 8017ee8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017eec:	482c      	ldr	r0, [pc, #176]	; (8017fa0 <_vfiprintf_r+0x250>)
 8017eee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017ef2:	2206      	movs	r2, #6
 8017ef4:	f7e8 f98c 	bl	8000210 <memchr>
 8017ef8:	2800      	cmp	r0, #0
 8017efa:	d03f      	beq.n	8017f7c <_vfiprintf_r+0x22c>
 8017efc:	4b29      	ldr	r3, [pc, #164]	; (8017fa4 <_vfiprintf_r+0x254>)
 8017efe:	bb1b      	cbnz	r3, 8017f48 <_vfiprintf_r+0x1f8>
 8017f00:	9b03      	ldr	r3, [sp, #12]
 8017f02:	3307      	adds	r3, #7
 8017f04:	f023 0307 	bic.w	r3, r3, #7
 8017f08:	3308      	adds	r3, #8
 8017f0a:	9303      	str	r3, [sp, #12]
 8017f0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017f0e:	443b      	add	r3, r7
 8017f10:	9309      	str	r3, [sp, #36]	; 0x24
 8017f12:	e767      	b.n	8017de4 <_vfiprintf_r+0x94>
 8017f14:	fb0c 3202 	mla	r2, ip, r2, r3
 8017f18:	460c      	mov	r4, r1
 8017f1a:	2001      	movs	r0, #1
 8017f1c:	e7a5      	b.n	8017e6a <_vfiprintf_r+0x11a>
 8017f1e:	2300      	movs	r3, #0
 8017f20:	3401      	adds	r4, #1
 8017f22:	9305      	str	r3, [sp, #20]
 8017f24:	4619      	mov	r1, r3
 8017f26:	f04f 0c0a 	mov.w	ip, #10
 8017f2a:	4620      	mov	r0, r4
 8017f2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017f30:	3a30      	subs	r2, #48	; 0x30
 8017f32:	2a09      	cmp	r2, #9
 8017f34:	d903      	bls.n	8017f3e <_vfiprintf_r+0x1ee>
 8017f36:	2b00      	cmp	r3, #0
 8017f38:	d0c5      	beq.n	8017ec6 <_vfiprintf_r+0x176>
 8017f3a:	9105      	str	r1, [sp, #20]
 8017f3c:	e7c3      	b.n	8017ec6 <_vfiprintf_r+0x176>
 8017f3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8017f42:	4604      	mov	r4, r0
 8017f44:	2301      	movs	r3, #1
 8017f46:	e7f0      	b.n	8017f2a <_vfiprintf_r+0x1da>
 8017f48:	ab03      	add	r3, sp, #12
 8017f4a:	9300      	str	r3, [sp, #0]
 8017f4c:	462a      	mov	r2, r5
 8017f4e:	4b16      	ldr	r3, [pc, #88]	; (8017fa8 <_vfiprintf_r+0x258>)
 8017f50:	a904      	add	r1, sp, #16
 8017f52:	4630      	mov	r0, r6
 8017f54:	f7fc f84c 	bl	8013ff0 <_printf_float>
 8017f58:	4607      	mov	r7, r0
 8017f5a:	1c78      	adds	r0, r7, #1
 8017f5c:	d1d6      	bne.n	8017f0c <_vfiprintf_r+0x1bc>
 8017f5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017f60:	07d9      	lsls	r1, r3, #31
 8017f62:	d405      	bmi.n	8017f70 <_vfiprintf_r+0x220>
 8017f64:	89ab      	ldrh	r3, [r5, #12]
 8017f66:	059a      	lsls	r2, r3, #22
 8017f68:	d402      	bmi.n	8017f70 <_vfiprintf_r+0x220>
 8017f6a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017f6c:	f000 faa1 	bl	80184b2 <__retarget_lock_release_recursive>
 8017f70:	89ab      	ldrh	r3, [r5, #12]
 8017f72:	065b      	lsls	r3, r3, #25
 8017f74:	f53f af12 	bmi.w	8017d9c <_vfiprintf_r+0x4c>
 8017f78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017f7a:	e711      	b.n	8017da0 <_vfiprintf_r+0x50>
 8017f7c:	ab03      	add	r3, sp, #12
 8017f7e:	9300      	str	r3, [sp, #0]
 8017f80:	462a      	mov	r2, r5
 8017f82:	4b09      	ldr	r3, [pc, #36]	; (8017fa8 <_vfiprintf_r+0x258>)
 8017f84:	a904      	add	r1, sp, #16
 8017f86:	4630      	mov	r0, r6
 8017f88:	f7fc fad6 	bl	8014538 <_printf_i>
 8017f8c:	e7e4      	b.n	8017f58 <_vfiprintf_r+0x208>
 8017f8e:	bf00      	nop
 8017f90:	0801a5e4 	.word	0x0801a5e4
 8017f94:	0801a604 	.word	0x0801a604
 8017f98:	0801a5c4 	.word	0x0801a5c4
 8017f9c:	0801a574 	.word	0x0801a574
 8017fa0:	0801a57e 	.word	0x0801a57e
 8017fa4:	08013ff1 	.word	0x08013ff1
 8017fa8:	08017d2d 	.word	0x08017d2d
 8017fac:	0801a57a 	.word	0x0801a57a

08017fb0 <__swbuf_r>:
 8017fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017fb2:	460e      	mov	r6, r1
 8017fb4:	4614      	mov	r4, r2
 8017fb6:	4605      	mov	r5, r0
 8017fb8:	b118      	cbz	r0, 8017fc2 <__swbuf_r+0x12>
 8017fba:	6983      	ldr	r3, [r0, #24]
 8017fbc:	b90b      	cbnz	r3, 8017fc2 <__swbuf_r+0x12>
 8017fbe:	f000 f9d9 	bl	8018374 <__sinit>
 8017fc2:	4b21      	ldr	r3, [pc, #132]	; (8018048 <__swbuf_r+0x98>)
 8017fc4:	429c      	cmp	r4, r3
 8017fc6:	d12b      	bne.n	8018020 <__swbuf_r+0x70>
 8017fc8:	686c      	ldr	r4, [r5, #4]
 8017fca:	69a3      	ldr	r3, [r4, #24]
 8017fcc:	60a3      	str	r3, [r4, #8]
 8017fce:	89a3      	ldrh	r3, [r4, #12]
 8017fd0:	071a      	lsls	r2, r3, #28
 8017fd2:	d52f      	bpl.n	8018034 <__swbuf_r+0x84>
 8017fd4:	6923      	ldr	r3, [r4, #16]
 8017fd6:	b36b      	cbz	r3, 8018034 <__swbuf_r+0x84>
 8017fd8:	6923      	ldr	r3, [r4, #16]
 8017fda:	6820      	ldr	r0, [r4, #0]
 8017fdc:	1ac0      	subs	r0, r0, r3
 8017fde:	6963      	ldr	r3, [r4, #20]
 8017fe0:	b2f6      	uxtb	r6, r6
 8017fe2:	4283      	cmp	r3, r0
 8017fe4:	4637      	mov	r7, r6
 8017fe6:	dc04      	bgt.n	8017ff2 <__swbuf_r+0x42>
 8017fe8:	4621      	mov	r1, r4
 8017fea:	4628      	mov	r0, r5
 8017fec:	f000 f92e 	bl	801824c <_fflush_r>
 8017ff0:	bb30      	cbnz	r0, 8018040 <__swbuf_r+0x90>
 8017ff2:	68a3      	ldr	r3, [r4, #8]
 8017ff4:	3b01      	subs	r3, #1
 8017ff6:	60a3      	str	r3, [r4, #8]
 8017ff8:	6823      	ldr	r3, [r4, #0]
 8017ffa:	1c5a      	adds	r2, r3, #1
 8017ffc:	6022      	str	r2, [r4, #0]
 8017ffe:	701e      	strb	r6, [r3, #0]
 8018000:	6963      	ldr	r3, [r4, #20]
 8018002:	3001      	adds	r0, #1
 8018004:	4283      	cmp	r3, r0
 8018006:	d004      	beq.n	8018012 <__swbuf_r+0x62>
 8018008:	89a3      	ldrh	r3, [r4, #12]
 801800a:	07db      	lsls	r3, r3, #31
 801800c:	d506      	bpl.n	801801c <__swbuf_r+0x6c>
 801800e:	2e0a      	cmp	r6, #10
 8018010:	d104      	bne.n	801801c <__swbuf_r+0x6c>
 8018012:	4621      	mov	r1, r4
 8018014:	4628      	mov	r0, r5
 8018016:	f000 f919 	bl	801824c <_fflush_r>
 801801a:	b988      	cbnz	r0, 8018040 <__swbuf_r+0x90>
 801801c:	4638      	mov	r0, r7
 801801e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018020:	4b0a      	ldr	r3, [pc, #40]	; (801804c <__swbuf_r+0x9c>)
 8018022:	429c      	cmp	r4, r3
 8018024:	d101      	bne.n	801802a <__swbuf_r+0x7a>
 8018026:	68ac      	ldr	r4, [r5, #8]
 8018028:	e7cf      	b.n	8017fca <__swbuf_r+0x1a>
 801802a:	4b09      	ldr	r3, [pc, #36]	; (8018050 <__swbuf_r+0xa0>)
 801802c:	429c      	cmp	r4, r3
 801802e:	bf08      	it	eq
 8018030:	68ec      	ldreq	r4, [r5, #12]
 8018032:	e7ca      	b.n	8017fca <__swbuf_r+0x1a>
 8018034:	4621      	mov	r1, r4
 8018036:	4628      	mov	r0, r5
 8018038:	f000 f80c 	bl	8018054 <__swsetup_r>
 801803c:	2800      	cmp	r0, #0
 801803e:	d0cb      	beq.n	8017fd8 <__swbuf_r+0x28>
 8018040:	f04f 37ff 	mov.w	r7, #4294967295
 8018044:	e7ea      	b.n	801801c <__swbuf_r+0x6c>
 8018046:	bf00      	nop
 8018048:	0801a5e4 	.word	0x0801a5e4
 801804c:	0801a604 	.word	0x0801a604
 8018050:	0801a5c4 	.word	0x0801a5c4

08018054 <__swsetup_r>:
 8018054:	4b32      	ldr	r3, [pc, #200]	; (8018120 <__swsetup_r+0xcc>)
 8018056:	b570      	push	{r4, r5, r6, lr}
 8018058:	681d      	ldr	r5, [r3, #0]
 801805a:	4606      	mov	r6, r0
 801805c:	460c      	mov	r4, r1
 801805e:	b125      	cbz	r5, 801806a <__swsetup_r+0x16>
 8018060:	69ab      	ldr	r3, [r5, #24]
 8018062:	b913      	cbnz	r3, 801806a <__swsetup_r+0x16>
 8018064:	4628      	mov	r0, r5
 8018066:	f000 f985 	bl	8018374 <__sinit>
 801806a:	4b2e      	ldr	r3, [pc, #184]	; (8018124 <__swsetup_r+0xd0>)
 801806c:	429c      	cmp	r4, r3
 801806e:	d10f      	bne.n	8018090 <__swsetup_r+0x3c>
 8018070:	686c      	ldr	r4, [r5, #4]
 8018072:	89a3      	ldrh	r3, [r4, #12]
 8018074:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018078:	0719      	lsls	r1, r3, #28
 801807a:	d42c      	bmi.n	80180d6 <__swsetup_r+0x82>
 801807c:	06dd      	lsls	r5, r3, #27
 801807e:	d411      	bmi.n	80180a4 <__swsetup_r+0x50>
 8018080:	2309      	movs	r3, #9
 8018082:	6033      	str	r3, [r6, #0]
 8018084:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8018088:	81a3      	strh	r3, [r4, #12]
 801808a:	f04f 30ff 	mov.w	r0, #4294967295
 801808e:	e03e      	b.n	801810e <__swsetup_r+0xba>
 8018090:	4b25      	ldr	r3, [pc, #148]	; (8018128 <__swsetup_r+0xd4>)
 8018092:	429c      	cmp	r4, r3
 8018094:	d101      	bne.n	801809a <__swsetup_r+0x46>
 8018096:	68ac      	ldr	r4, [r5, #8]
 8018098:	e7eb      	b.n	8018072 <__swsetup_r+0x1e>
 801809a:	4b24      	ldr	r3, [pc, #144]	; (801812c <__swsetup_r+0xd8>)
 801809c:	429c      	cmp	r4, r3
 801809e:	bf08      	it	eq
 80180a0:	68ec      	ldreq	r4, [r5, #12]
 80180a2:	e7e6      	b.n	8018072 <__swsetup_r+0x1e>
 80180a4:	0758      	lsls	r0, r3, #29
 80180a6:	d512      	bpl.n	80180ce <__swsetup_r+0x7a>
 80180a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80180aa:	b141      	cbz	r1, 80180be <__swsetup_r+0x6a>
 80180ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80180b0:	4299      	cmp	r1, r3
 80180b2:	d002      	beq.n	80180ba <__swsetup_r+0x66>
 80180b4:	4630      	mov	r0, r6
 80180b6:	f7ff fb27 	bl	8017708 <_free_r>
 80180ba:	2300      	movs	r3, #0
 80180bc:	6363      	str	r3, [r4, #52]	; 0x34
 80180be:	89a3      	ldrh	r3, [r4, #12]
 80180c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80180c4:	81a3      	strh	r3, [r4, #12]
 80180c6:	2300      	movs	r3, #0
 80180c8:	6063      	str	r3, [r4, #4]
 80180ca:	6923      	ldr	r3, [r4, #16]
 80180cc:	6023      	str	r3, [r4, #0]
 80180ce:	89a3      	ldrh	r3, [r4, #12]
 80180d0:	f043 0308 	orr.w	r3, r3, #8
 80180d4:	81a3      	strh	r3, [r4, #12]
 80180d6:	6923      	ldr	r3, [r4, #16]
 80180d8:	b94b      	cbnz	r3, 80180ee <__swsetup_r+0x9a>
 80180da:	89a3      	ldrh	r3, [r4, #12]
 80180dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80180e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80180e4:	d003      	beq.n	80180ee <__swsetup_r+0x9a>
 80180e6:	4621      	mov	r1, r4
 80180e8:	4630      	mov	r0, r6
 80180ea:	f000 fa09 	bl	8018500 <__smakebuf_r>
 80180ee:	89a0      	ldrh	r0, [r4, #12]
 80180f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80180f4:	f010 0301 	ands.w	r3, r0, #1
 80180f8:	d00a      	beq.n	8018110 <__swsetup_r+0xbc>
 80180fa:	2300      	movs	r3, #0
 80180fc:	60a3      	str	r3, [r4, #8]
 80180fe:	6963      	ldr	r3, [r4, #20]
 8018100:	425b      	negs	r3, r3
 8018102:	61a3      	str	r3, [r4, #24]
 8018104:	6923      	ldr	r3, [r4, #16]
 8018106:	b943      	cbnz	r3, 801811a <__swsetup_r+0xc6>
 8018108:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801810c:	d1ba      	bne.n	8018084 <__swsetup_r+0x30>
 801810e:	bd70      	pop	{r4, r5, r6, pc}
 8018110:	0781      	lsls	r1, r0, #30
 8018112:	bf58      	it	pl
 8018114:	6963      	ldrpl	r3, [r4, #20]
 8018116:	60a3      	str	r3, [r4, #8]
 8018118:	e7f4      	b.n	8018104 <__swsetup_r+0xb0>
 801811a:	2000      	movs	r0, #0
 801811c:	e7f7      	b.n	801810e <__swsetup_r+0xba>
 801811e:	bf00      	nop
 8018120:	200000a4 	.word	0x200000a4
 8018124:	0801a5e4 	.word	0x0801a5e4
 8018128:	0801a604 	.word	0x0801a604
 801812c:	0801a5c4 	.word	0x0801a5c4

08018130 <abort>:
 8018130:	b508      	push	{r3, lr}
 8018132:	2006      	movs	r0, #6
 8018134:	f000 fa54 	bl	80185e0 <raise>
 8018138:	2001      	movs	r0, #1
 801813a:	f7f0 fc17 	bl	800896c <_exit>
	...

08018140 <__sflush_r>:
 8018140:	898a      	ldrh	r2, [r1, #12]
 8018142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018146:	4605      	mov	r5, r0
 8018148:	0710      	lsls	r0, r2, #28
 801814a:	460c      	mov	r4, r1
 801814c:	d458      	bmi.n	8018200 <__sflush_r+0xc0>
 801814e:	684b      	ldr	r3, [r1, #4]
 8018150:	2b00      	cmp	r3, #0
 8018152:	dc05      	bgt.n	8018160 <__sflush_r+0x20>
 8018154:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018156:	2b00      	cmp	r3, #0
 8018158:	dc02      	bgt.n	8018160 <__sflush_r+0x20>
 801815a:	2000      	movs	r0, #0
 801815c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018160:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018162:	2e00      	cmp	r6, #0
 8018164:	d0f9      	beq.n	801815a <__sflush_r+0x1a>
 8018166:	2300      	movs	r3, #0
 8018168:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801816c:	682f      	ldr	r7, [r5, #0]
 801816e:	602b      	str	r3, [r5, #0]
 8018170:	d032      	beq.n	80181d8 <__sflush_r+0x98>
 8018172:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018174:	89a3      	ldrh	r3, [r4, #12]
 8018176:	075a      	lsls	r2, r3, #29
 8018178:	d505      	bpl.n	8018186 <__sflush_r+0x46>
 801817a:	6863      	ldr	r3, [r4, #4]
 801817c:	1ac0      	subs	r0, r0, r3
 801817e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018180:	b10b      	cbz	r3, 8018186 <__sflush_r+0x46>
 8018182:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018184:	1ac0      	subs	r0, r0, r3
 8018186:	2300      	movs	r3, #0
 8018188:	4602      	mov	r2, r0
 801818a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801818c:	6a21      	ldr	r1, [r4, #32]
 801818e:	4628      	mov	r0, r5
 8018190:	47b0      	blx	r6
 8018192:	1c43      	adds	r3, r0, #1
 8018194:	89a3      	ldrh	r3, [r4, #12]
 8018196:	d106      	bne.n	80181a6 <__sflush_r+0x66>
 8018198:	6829      	ldr	r1, [r5, #0]
 801819a:	291d      	cmp	r1, #29
 801819c:	d82c      	bhi.n	80181f8 <__sflush_r+0xb8>
 801819e:	4a2a      	ldr	r2, [pc, #168]	; (8018248 <__sflush_r+0x108>)
 80181a0:	40ca      	lsrs	r2, r1
 80181a2:	07d6      	lsls	r6, r2, #31
 80181a4:	d528      	bpl.n	80181f8 <__sflush_r+0xb8>
 80181a6:	2200      	movs	r2, #0
 80181a8:	6062      	str	r2, [r4, #4]
 80181aa:	04d9      	lsls	r1, r3, #19
 80181ac:	6922      	ldr	r2, [r4, #16]
 80181ae:	6022      	str	r2, [r4, #0]
 80181b0:	d504      	bpl.n	80181bc <__sflush_r+0x7c>
 80181b2:	1c42      	adds	r2, r0, #1
 80181b4:	d101      	bne.n	80181ba <__sflush_r+0x7a>
 80181b6:	682b      	ldr	r3, [r5, #0]
 80181b8:	b903      	cbnz	r3, 80181bc <__sflush_r+0x7c>
 80181ba:	6560      	str	r0, [r4, #84]	; 0x54
 80181bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80181be:	602f      	str	r7, [r5, #0]
 80181c0:	2900      	cmp	r1, #0
 80181c2:	d0ca      	beq.n	801815a <__sflush_r+0x1a>
 80181c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80181c8:	4299      	cmp	r1, r3
 80181ca:	d002      	beq.n	80181d2 <__sflush_r+0x92>
 80181cc:	4628      	mov	r0, r5
 80181ce:	f7ff fa9b 	bl	8017708 <_free_r>
 80181d2:	2000      	movs	r0, #0
 80181d4:	6360      	str	r0, [r4, #52]	; 0x34
 80181d6:	e7c1      	b.n	801815c <__sflush_r+0x1c>
 80181d8:	6a21      	ldr	r1, [r4, #32]
 80181da:	2301      	movs	r3, #1
 80181dc:	4628      	mov	r0, r5
 80181de:	47b0      	blx	r6
 80181e0:	1c41      	adds	r1, r0, #1
 80181e2:	d1c7      	bne.n	8018174 <__sflush_r+0x34>
 80181e4:	682b      	ldr	r3, [r5, #0]
 80181e6:	2b00      	cmp	r3, #0
 80181e8:	d0c4      	beq.n	8018174 <__sflush_r+0x34>
 80181ea:	2b1d      	cmp	r3, #29
 80181ec:	d001      	beq.n	80181f2 <__sflush_r+0xb2>
 80181ee:	2b16      	cmp	r3, #22
 80181f0:	d101      	bne.n	80181f6 <__sflush_r+0xb6>
 80181f2:	602f      	str	r7, [r5, #0]
 80181f4:	e7b1      	b.n	801815a <__sflush_r+0x1a>
 80181f6:	89a3      	ldrh	r3, [r4, #12]
 80181f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80181fc:	81a3      	strh	r3, [r4, #12]
 80181fe:	e7ad      	b.n	801815c <__sflush_r+0x1c>
 8018200:	690f      	ldr	r7, [r1, #16]
 8018202:	2f00      	cmp	r7, #0
 8018204:	d0a9      	beq.n	801815a <__sflush_r+0x1a>
 8018206:	0793      	lsls	r3, r2, #30
 8018208:	680e      	ldr	r6, [r1, #0]
 801820a:	bf08      	it	eq
 801820c:	694b      	ldreq	r3, [r1, #20]
 801820e:	600f      	str	r7, [r1, #0]
 8018210:	bf18      	it	ne
 8018212:	2300      	movne	r3, #0
 8018214:	eba6 0807 	sub.w	r8, r6, r7
 8018218:	608b      	str	r3, [r1, #8]
 801821a:	f1b8 0f00 	cmp.w	r8, #0
 801821e:	dd9c      	ble.n	801815a <__sflush_r+0x1a>
 8018220:	6a21      	ldr	r1, [r4, #32]
 8018222:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018224:	4643      	mov	r3, r8
 8018226:	463a      	mov	r2, r7
 8018228:	4628      	mov	r0, r5
 801822a:	47b0      	blx	r6
 801822c:	2800      	cmp	r0, #0
 801822e:	dc06      	bgt.n	801823e <__sflush_r+0xfe>
 8018230:	89a3      	ldrh	r3, [r4, #12]
 8018232:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018236:	81a3      	strh	r3, [r4, #12]
 8018238:	f04f 30ff 	mov.w	r0, #4294967295
 801823c:	e78e      	b.n	801815c <__sflush_r+0x1c>
 801823e:	4407      	add	r7, r0
 8018240:	eba8 0800 	sub.w	r8, r8, r0
 8018244:	e7e9      	b.n	801821a <__sflush_r+0xda>
 8018246:	bf00      	nop
 8018248:	20400001 	.word	0x20400001

0801824c <_fflush_r>:
 801824c:	b538      	push	{r3, r4, r5, lr}
 801824e:	690b      	ldr	r3, [r1, #16]
 8018250:	4605      	mov	r5, r0
 8018252:	460c      	mov	r4, r1
 8018254:	b913      	cbnz	r3, 801825c <_fflush_r+0x10>
 8018256:	2500      	movs	r5, #0
 8018258:	4628      	mov	r0, r5
 801825a:	bd38      	pop	{r3, r4, r5, pc}
 801825c:	b118      	cbz	r0, 8018266 <_fflush_r+0x1a>
 801825e:	6983      	ldr	r3, [r0, #24]
 8018260:	b90b      	cbnz	r3, 8018266 <_fflush_r+0x1a>
 8018262:	f000 f887 	bl	8018374 <__sinit>
 8018266:	4b14      	ldr	r3, [pc, #80]	; (80182b8 <_fflush_r+0x6c>)
 8018268:	429c      	cmp	r4, r3
 801826a:	d11b      	bne.n	80182a4 <_fflush_r+0x58>
 801826c:	686c      	ldr	r4, [r5, #4]
 801826e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018272:	2b00      	cmp	r3, #0
 8018274:	d0ef      	beq.n	8018256 <_fflush_r+0xa>
 8018276:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018278:	07d0      	lsls	r0, r2, #31
 801827a:	d404      	bmi.n	8018286 <_fflush_r+0x3a>
 801827c:	0599      	lsls	r1, r3, #22
 801827e:	d402      	bmi.n	8018286 <_fflush_r+0x3a>
 8018280:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018282:	f000 f915 	bl	80184b0 <__retarget_lock_acquire_recursive>
 8018286:	4628      	mov	r0, r5
 8018288:	4621      	mov	r1, r4
 801828a:	f7ff ff59 	bl	8018140 <__sflush_r>
 801828e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018290:	07da      	lsls	r2, r3, #31
 8018292:	4605      	mov	r5, r0
 8018294:	d4e0      	bmi.n	8018258 <_fflush_r+0xc>
 8018296:	89a3      	ldrh	r3, [r4, #12]
 8018298:	059b      	lsls	r3, r3, #22
 801829a:	d4dd      	bmi.n	8018258 <_fflush_r+0xc>
 801829c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801829e:	f000 f908 	bl	80184b2 <__retarget_lock_release_recursive>
 80182a2:	e7d9      	b.n	8018258 <_fflush_r+0xc>
 80182a4:	4b05      	ldr	r3, [pc, #20]	; (80182bc <_fflush_r+0x70>)
 80182a6:	429c      	cmp	r4, r3
 80182a8:	d101      	bne.n	80182ae <_fflush_r+0x62>
 80182aa:	68ac      	ldr	r4, [r5, #8]
 80182ac:	e7df      	b.n	801826e <_fflush_r+0x22>
 80182ae:	4b04      	ldr	r3, [pc, #16]	; (80182c0 <_fflush_r+0x74>)
 80182b0:	429c      	cmp	r4, r3
 80182b2:	bf08      	it	eq
 80182b4:	68ec      	ldreq	r4, [r5, #12]
 80182b6:	e7da      	b.n	801826e <_fflush_r+0x22>
 80182b8:	0801a5e4 	.word	0x0801a5e4
 80182bc:	0801a604 	.word	0x0801a604
 80182c0:	0801a5c4 	.word	0x0801a5c4

080182c4 <std>:
 80182c4:	2300      	movs	r3, #0
 80182c6:	b510      	push	{r4, lr}
 80182c8:	4604      	mov	r4, r0
 80182ca:	e9c0 3300 	strd	r3, r3, [r0]
 80182ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80182d2:	6083      	str	r3, [r0, #8]
 80182d4:	8181      	strh	r1, [r0, #12]
 80182d6:	6643      	str	r3, [r0, #100]	; 0x64
 80182d8:	81c2      	strh	r2, [r0, #14]
 80182da:	6183      	str	r3, [r0, #24]
 80182dc:	4619      	mov	r1, r3
 80182de:	2208      	movs	r2, #8
 80182e0:	305c      	adds	r0, #92	; 0x5c
 80182e2:	f7fb fddd 	bl	8013ea0 <memset>
 80182e6:	4b05      	ldr	r3, [pc, #20]	; (80182fc <std+0x38>)
 80182e8:	6263      	str	r3, [r4, #36]	; 0x24
 80182ea:	4b05      	ldr	r3, [pc, #20]	; (8018300 <std+0x3c>)
 80182ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80182ee:	4b05      	ldr	r3, [pc, #20]	; (8018304 <std+0x40>)
 80182f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80182f2:	4b05      	ldr	r3, [pc, #20]	; (8018308 <std+0x44>)
 80182f4:	6224      	str	r4, [r4, #32]
 80182f6:	6323      	str	r3, [r4, #48]	; 0x30
 80182f8:	bd10      	pop	{r4, pc}
 80182fa:	bf00      	nop
 80182fc:	08018619 	.word	0x08018619
 8018300:	0801863b 	.word	0x0801863b
 8018304:	08018673 	.word	0x08018673
 8018308:	08018697 	.word	0x08018697

0801830c <_cleanup_r>:
 801830c:	4901      	ldr	r1, [pc, #4]	; (8018314 <_cleanup_r+0x8>)
 801830e:	f000 b8af 	b.w	8018470 <_fwalk_reent>
 8018312:	bf00      	nop
 8018314:	0801824d 	.word	0x0801824d

08018318 <__sfmoreglue>:
 8018318:	b570      	push	{r4, r5, r6, lr}
 801831a:	2268      	movs	r2, #104	; 0x68
 801831c:	1e4d      	subs	r5, r1, #1
 801831e:	4355      	muls	r5, r2
 8018320:	460e      	mov	r6, r1
 8018322:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8018326:	f7ff fa5b 	bl	80177e0 <_malloc_r>
 801832a:	4604      	mov	r4, r0
 801832c:	b140      	cbz	r0, 8018340 <__sfmoreglue+0x28>
 801832e:	2100      	movs	r1, #0
 8018330:	e9c0 1600 	strd	r1, r6, [r0]
 8018334:	300c      	adds	r0, #12
 8018336:	60a0      	str	r0, [r4, #8]
 8018338:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801833c:	f7fb fdb0 	bl	8013ea0 <memset>
 8018340:	4620      	mov	r0, r4
 8018342:	bd70      	pop	{r4, r5, r6, pc}

08018344 <__sfp_lock_acquire>:
 8018344:	4801      	ldr	r0, [pc, #4]	; (801834c <__sfp_lock_acquire+0x8>)
 8018346:	f000 b8b3 	b.w	80184b0 <__retarget_lock_acquire_recursive>
 801834a:	bf00      	nop
 801834c:	20019b15 	.word	0x20019b15

08018350 <__sfp_lock_release>:
 8018350:	4801      	ldr	r0, [pc, #4]	; (8018358 <__sfp_lock_release+0x8>)
 8018352:	f000 b8ae 	b.w	80184b2 <__retarget_lock_release_recursive>
 8018356:	bf00      	nop
 8018358:	20019b15 	.word	0x20019b15

0801835c <__sinit_lock_acquire>:
 801835c:	4801      	ldr	r0, [pc, #4]	; (8018364 <__sinit_lock_acquire+0x8>)
 801835e:	f000 b8a7 	b.w	80184b0 <__retarget_lock_acquire_recursive>
 8018362:	bf00      	nop
 8018364:	20019b16 	.word	0x20019b16

08018368 <__sinit_lock_release>:
 8018368:	4801      	ldr	r0, [pc, #4]	; (8018370 <__sinit_lock_release+0x8>)
 801836a:	f000 b8a2 	b.w	80184b2 <__retarget_lock_release_recursive>
 801836e:	bf00      	nop
 8018370:	20019b16 	.word	0x20019b16

08018374 <__sinit>:
 8018374:	b510      	push	{r4, lr}
 8018376:	4604      	mov	r4, r0
 8018378:	f7ff fff0 	bl	801835c <__sinit_lock_acquire>
 801837c:	69a3      	ldr	r3, [r4, #24]
 801837e:	b11b      	cbz	r3, 8018388 <__sinit+0x14>
 8018380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018384:	f7ff bff0 	b.w	8018368 <__sinit_lock_release>
 8018388:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801838c:	6523      	str	r3, [r4, #80]	; 0x50
 801838e:	4b13      	ldr	r3, [pc, #76]	; (80183dc <__sinit+0x68>)
 8018390:	4a13      	ldr	r2, [pc, #76]	; (80183e0 <__sinit+0x6c>)
 8018392:	681b      	ldr	r3, [r3, #0]
 8018394:	62a2      	str	r2, [r4, #40]	; 0x28
 8018396:	42a3      	cmp	r3, r4
 8018398:	bf04      	itt	eq
 801839a:	2301      	moveq	r3, #1
 801839c:	61a3      	streq	r3, [r4, #24]
 801839e:	4620      	mov	r0, r4
 80183a0:	f000 f820 	bl	80183e4 <__sfp>
 80183a4:	6060      	str	r0, [r4, #4]
 80183a6:	4620      	mov	r0, r4
 80183a8:	f000 f81c 	bl	80183e4 <__sfp>
 80183ac:	60a0      	str	r0, [r4, #8]
 80183ae:	4620      	mov	r0, r4
 80183b0:	f000 f818 	bl	80183e4 <__sfp>
 80183b4:	2200      	movs	r2, #0
 80183b6:	60e0      	str	r0, [r4, #12]
 80183b8:	2104      	movs	r1, #4
 80183ba:	6860      	ldr	r0, [r4, #4]
 80183bc:	f7ff ff82 	bl	80182c4 <std>
 80183c0:	68a0      	ldr	r0, [r4, #8]
 80183c2:	2201      	movs	r2, #1
 80183c4:	2109      	movs	r1, #9
 80183c6:	f7ff ff7d 	bl	80182c4 <std>
 80183ca:	68e0      	ldr	r0, [r4, #12]
 80183cc:	2202      	movs	r2, #2
 80183ce:	2112      	movs	r1, #18
 80183d0:	f7ff ff78 	bl	80182c4 <std>
 80183d4:	2301      	movs	r3, #1
 80183d6:	61a3      	str	r3, [r4, #24]
 80183d8:	e7d2      	b.n	8018380 <__sinit+0xc>
 80183da:	bf00      	nop
 80183dc:	0801a180 	.word	0x0801a180
 80183e0:	0801830d 	.word	0x0801830d

080183e4 <__sfp>:
 80183e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80183e6:	4607      	mov	r7, r0
 80183e8:	f7ff ffac 	bl	8018344 <__sfp_lock_acquire>
 80183ec:	4b1e      	ldr	r3, [pc, #120]	; (8018468 <__sfp+0x84>)
 80183ee:	681e      	ldr	r6, [r3, #0]
 80183f0:	69b3      	ldr	r3, [r6, #24]
 80183f2:	b913      	cbnz	r3, 80183fa <__sfp+0x16>
 80183f4:	4630      	mov	r0, r6
 80183f6:	f7ff ffbd 	bl	8018374 <__sinit>
 80183fa:	3648      	adds	r6, #72	; 0x48
 80183fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8018400:	3b01      	subs	r3, #1
 8018402:	d503      	bpl.n	801840c <__sfp+0x28>
 8018404:	6833      	ldr	r3, [r6, #0]
 8018406:	b30b      	cbz	r3, 801844c <__sfp+0x68>
 8018408:	6836      	ldr	r6, [r6, #0]
 801840a:	e7f7      	b.n	80183fc <__sfp+0x18>
 801840c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018410:	b9d5      	cbnz	r5, 8018448 <__sfp+0x64>
 8018412:	4b16      	ldr	r3, [pc, #88]	; (801846c <__sfp+0x88>)
 8018414:	60e3      	str	r3, [r4, #12]
 8018416:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801841a:	6665      	str	r5, [r4, #100]	; 0x64
 801841c:	f000 f847 	bl	80184ae <__retarget_lock_init_recursive>
 8018420:	f7ff ff96 	bl	8018350 <__sfp_lock_release>
 8018424:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8018428:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801842c:	6025      	str	r5, [r4, #0]
 801842e:	61a5      	str	r5, [r4, #24]
 8018430:	2208      	movs	r2, #8
 8018432:	4629      	mov	r1, r5
 8018434:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018438:	f7fb fd32 	bl	8013ea0 <memset>
 801843c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018440:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018444:	4620      	mov	r0, r4
 8018446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018448:	3468      	adds	r4, #104	; 0x68
 801844a:	e7d9      	b.n	8018400 <__sfp+0x1c>
 801844c:	2104      	movs	r1, #4
 801844e:	4638      	mov	r0, r7
 8018450:	f7ff ff62 	bl	8018318 <__sfmoreglue>
 8018454:	4604      	mov	r4, r0
 8018456:	6030      	str	r0, [r6, #0]
 8018458:	2800      	cmp	r0, #0
 801845a:	d1d5      	bne.n	8018408 <__sfp+0x24>
 801845c:	f7ff ff78 	bl	8018350 <__sfp_lock_release>
 8018460:	230c      	movs	r3, #12
 8018462:	603b      	str	r3, [r7, #0]
 8018464:	e7ee      	b.n	8018444 <__sfp+0x60>
 8018466:	bf00      	nop
 8018468:	0801a180 	.word	0x0801a180
 801846c:	ffff0001 	.word	0xffff0001

08018470 <_fwalk_reent>:
 8018470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018474:	4606      	mov	r6, r0
 8018476:	4688      	mov	r8, r1
 8018478:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801847c:	2700      	movs	r7, #0
 801847e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018482:	f1b9 0901 	subs.w	r9, r9, #1
 8018486:	d505      	bpl.n	8018494 <_fwalk_reent+0x24>
 8018488:	6824      	ldr	r4, [r4, #0]
 801848a:	2c00      	cmp	r4, #0
 801848c:	d1f7      	bne.n	801847e <_fwalk_reent+0xe>
 801848e:	4638      	mov	r0, r7
 8018490:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018494:	89ab      	ldrh	r3, [r5, #12]
 8018496:	2b01      	cmp	r3, #1
 8018498:	d907      	bls.n	80184aa <_fwalk_reent+0x3a>
 801849a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801849e:	3301      	adds	r3, #1
 80184a0:	d003      	beq.n	80184aa <_fwalk_reent+0x3a>
 80184a2:	4629      	mov	r1, r5
 80184a4:	4630      	mov	r0, r6
 80184a6:	47c0      	blx	r8
 80184a8:	4307      	orrs	r7, r0
 80184aa:	3568      	adds	r5, #104	; 0x68
 80184ac:	e7e9      	b.n	8018482 <_fwalk_reent+0x12>

080184ae <__retarget_lock_init_recursive>:
 80184ae:	4770      	bx	lr

080184b0 <__retarget_lock_acquire_recursive>:
 80184b0:	4770      	bx	lr

080184b2 <__retarget_lock_release_recursive>:
 80184b2:	4770      	bx	lr

080184b4 <__swhatbuf_r>:
 80184b4:	b570      	push	{r4, r5, r6, lr}
 80184b6:	460e      	mov	r6, r1
 80184b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80184bc:	2900      	cmp	r1, #0
 80184be:	b096      	sub	sp, #88	; 0x58
 80184c0:	4614      	mov	r4, r2
 80184c2:	461d      	mov	r5, r3
 80184c4:	da08      	bge.n	80184d8 <__swhatbuf_r+0x24>
 80184c6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80184ca:	2200      	movs	r2, #0
 80184cc:	602a      	str	r2, [r5, #0]
 80184ce:	061a      	lsls	r2, r3, #24
 80184d0:	d410      	bmi.n	80184f4 <__swhatbuf_r+0x40>
 80184d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80184d6:	e00e      	b.n	80184f6 <__swhatbuf_r+0x42>
 80184d8:	466a      	mov	r2, sp
 80184da:	f000 f903 	bl	80186e4 <_fstat_r>
 80184de:	2800      	cmp	r0, #0
 80184e0:	dbf1      	blt.n	80184c6 <__swhatbuf_r+0x12>
 80184e2:	9a01      	ldr	r2, [sp, #4]
 80184e4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80184e8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80184ec:	425a      	negs	r2, r3
 80184ee:	415a      	adcs	r2, r3
 80184f0:	602a      	str	r2, [r5, #0]
 80184f2:	e7ee      	b.n	80184d2 <__swhatbuf_r+0x1e>
 80184f4:	2340      	movs	r3, #64	; 0x40
 80184f6:	2000      	movs	r0, #0
 80184f8:	6023      	str	r3, [r4, #0]
 80184fa:	b016      	add	sp, #88	; 0x58
 80184fc:	bd70      	pop	{r4, r5, r6, pc}
	...

08018500 <__smakebuf_r>:
 8018500:	898b      	ldrh	r3, [r1, #12]
 8018502:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018504:	079d      	lsls	r5, r3, #30
 8018506:	4606      	mov	r6, r0
 8018508:	460c      	mov	r4, r1
 801850a:	d507      	bpl.n	801851c <__smakebuf_r+0x1c>
 801850c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018510:	6023      	str	r3, [r4, #0]
 8018512:	6123      	str	r3, [r4, #16]
 8018514:	2301      	movs	r3, #1
 8018516:	6163      	str	r3, [r4, #20]
 8018518:	b002      	add	sp, #8
 801851a:	bd70      	pop	{r4, r5, r6, pc}
 801851c:	ab01      	add	r3, sp, #4
 801851e:	466a      	mov	r2, sp
 8018520:	f7ff ffc8 	bl	80184b4 <__swhatbuf_r>
 8018524:	9900      	ldr	r1, [sp, #0]
 8018526:	4605      	mov	r5, r0
 8018528:	4630      	mov	r0, r6
 801852a:	f7ff f959 	bl	80177e0 <_malloc_r>
 801852e:	b948      	cbnz	r0, 8018544 <__smakebuf_r+0x44>
 8018530:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018534:	059a      	lsls	r2, r3, #22
 8018536:	d4ef      	bmi.n	8018518 <__smakebuf_r+0x18>
 8018538:	f023 0303 	bic.w	r3, r3, #3
 801853c:	f043 0302 	orr.w	r3, r3, #2
 8018540:	81a3      	strh	r3, [r4, #12]
 8018542:	e7e3      	b.n	801850c <__smakebuf_r+0xc>
 8018544:	4b0d      	ldr	r3, [pc, #52]	; (801857c <__smakebuf_r+0x7c>)
 8018546:	62b3      	str	r3, [r6, #40]	; 0x28
 8018548:	89a3      	ldrh	r3, [r4, #12]
 801854a:	6020      	str	r0, [r4, #0]
 801854c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018550:	81a3      	strh	r3, [r4, #12]
 8018552:	9b00      	ldr	r3, [sp, #0]
 8018554:	6163      	str	r3, [r4, #20]
 8018556:	9b01      	ldr	r3, [sp, #4]
 8018558:	6120      	str	r0, [r4, #16]
 801855a:	b15b      	cbz	r3, 8018574 <__smakebuf_r+0x74>
 801855c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018560:	4630      	mov	r0, r6
 8018562:	f000 f8d1 	bl	8018708 <_isatty_r>
 8018566:	b128      	cbz	r0, 8018574 <__smakebuf_r+0x74>
 8018568:	89a3      	ldrh	r3, [r4, #12]
 801856a:	f023 0303 	bic.w	r3, r3, #3
 801856e:	f043 0301 	orr.w	r3, r3, #1
 8018572:	81a3      	strh	r3, [r4, #12]
 8018574:	89a0      	ldrh	r0, [r4, #12]
 8018576:	4305      	orrs	r5, r0
 8018578:	81a5      	strh	r5, [r4, #12]
 801857a:	e7cd      	b.n	8018518 <__smakebuf_r+0x18>
 801857c:	0801830d 	.word	0x0801830d

08018580 <_malloc_usable_size_r>:
 8018580:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018584:	1f18      	subs	r0, r3, #4
 8018586:	2b00      	cmp	r3, #0
 8018588:	bfbc      	itt	lt
 801858a:	580b      	ldrlt	r3, [r1, r0]
 801858c:	18c0      	addlt	r0, r0, r3
 801858e:	4770      	bx	lr

08018590 <_raise_r>:
 8018590:	291f      	cmp	r1, #31
 8018592:	b538      	push	{r3, r4, r5, lr}
 8018594:	4604      	mov	r4, r0
 8018596:	460d      	mov	r5, r1
 8018598:	d904      	bls.n	80185a4 <_raise_r+0x14>
 801859a:	2316      	movs	r3, #22
 801859c:	6003      	str	r3, [r0, #0]
 801859e:	f04f 30ff 	mov.w	r0, #4294967295
 80185a2:	bd38      	pop	{r3, r4, r5, pc}
 80185a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80185a6:	b112      	cbz	r2, 80185ae <_raise_r+0x1e>
 80185a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80185ac:	b94b      	cbnz	r3, 80185c2 <_raise_r+0x32>
 80185ae:	4620      	mov	r0, r4
 80185b0:	f000 f830 	bl	8018614 <_getpid_r>
 80185b4:	462a      	mov	r2, r5
 80185b6:	4601      	mov	r1, r0
 80185b8:	4620      	mov	r0, r4
 80185ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80185be:	f000 b817 	b.w	80185f0 <_kill_r>
 80185c2:	2b01      	cmp	r3, #1
 80185c4:	d00a      	beq.n	80185dc <_raise_r+0x4c>
 80185c6:	1c59      	adds	r1, r3, #1
 80185c8:	d103      	bne.n	80185d2 <_raise_r+0x42>
 80185ca:	2316      	movs	r3, #22
 80185cc:	6003      	str	r3, [r0, #0]
 80185ce:	2001      	movs	r0, #1
 80185d0:	e7e7      	b.n	80185a2 <_raise_r+0x12>
 80185d2:	2400      	movs	r4, #0
 80185d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80185d8:	4628      	mov	r0, r5
 80185da:	4798      	blx	r3
 80185dc:	2000      	movs	r0, #0
 80185de:	e7e0      	b.n	80185a2 <_raise_r+0x12>

080185e0 <raise>:
 80185e0:	4b02      	ldr	r3, [pc, #8]	; (80185ec <raise+0xc>)
 80185e2:	4601      	mov	r1, r0
 80185e4:	6818      	ldr	r0, [r3, #0]
 80185e6:	f7ff bfd3 	b.w	8018590 <_raise_r>
 80185ea:	bf00      	nop
 80185ec:	200000a4 	.word	0x200000a4

080185f0 <_kill_r>:
 80185f0:	b538      	push	{r3, r4, r5, lr}
 80185f2:	4d07      	ldr	r5, [pc, #28]	; (8018610 <_kill_r+0x20>)
 80185f4:	2300      	movs	r3, #0
 80185f6:	4604      	mov	r4, r0
 80185f8:	4608      	mov	r0, r1
 80185fa:	4611      	mov	r1, r2
 80185fc:	602b      	str	r3, [r5, #0]
 80185fe:	f7f0 f9a5 	bl	800894c <_kill>
 8018602:	1c43      	adds	r3, r0, #1
 8018604:	d102      	bne.n	801860c <_kill_r+0x1c>
 8018606:	682b      	ldr	r3, [r5, #0]
 8018608:	b103      	cbz	r3, 801860c <_kill_r+0x1c>
 801860a:	6023      	str	r3, [r4, #0]
 801860c:	bd38      	pop	{r3, r4, r5, pc}
 801860e:	bf00      	nop
 8018610:	20019b10 	.word	0x20019b10

08018614 <_getpid_r>:
 8018614:	f7f0 b992 	b.w	800893c <_getpid>

08018618 <__sread>:
 8018618:	b510      	push	{r4, lr}
 801861a:	460c      	mov	r4, r1
 801861c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018620:	f000 f894 	bl	801874c <_read_r>
 8018624:	2800      	cmp	r0, #0
 8018626:	bfab      	itete	ge
 8018628:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801862a:	89a3      	ldrhlt	r3, [r4, #12]
 801862c:	181b      	addge	r3, r3, r0
 801862e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018632:	bfac      	ite	ge
 8018634:	6563      	strge	r3, [r4, #84]	; 0x54
 8018636:	81a3      	strhlt	r3, [r4, #12]
 8018638:	bd10      	pop	{r4, pc}

0801863a <__swrite>:
 801863a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801863e:	461f      	mov	r7, r3
 8018640:	898b      	ldrh	r3, [r1, #12]
 8018642:	05db      	lsls	r3, r3, #23
 8018644:	4605      	mov	r5, r0
 8018646:	460c      	mov	r4, r1
 8018648:	4616      	mov	r6, r2
 801864a:	d505      	bpl.n	8018658 <__swrite+0x1e>
 801864c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018650:	2302      	movs	r3, #2
 8018652:	2200      	movs	r2, #0
 8018654:	f000 f868 	bl	8018728 <_lseek_r>
 8018658:	89a3      	ldrh	r3, [r4, #12]
 801865a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801865e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018662:	81a3      	strh	r3, [r4, #12]
 8018664:	4632      	mov	r2, r6
 8018666:	463b      	mov	r3, r7
 8018668:	4628      	mov	r0, r5
 801866a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801866e:	f000 b817 	b.w	80186a0 <_write_r>

08018672 <__sseek>:
 8018672:	b510      	push	{r4, lr}
 8018674:	460c      	mov	r4, r1
 8018676:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801867a:	f000 f855 	bl	8018728 <_lseek_r>
 801867e:	1c43      	adds	r3, r0, #1
 8018680:	89a3      	ldrh	r3, [r4, #12]
 8018682:	bf15      	itete	ne
 8018684:	6560      	strne	r0, [r4, #84]	; 0x54
 8018686:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801868a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801868e:	81a3      	strheq	r3, [r4, #12]
 8018690:	bf18      	it	ne
 8018692:	81a3      	strhne	r3, [r4, #12]
 8018694:	bd10      	pop	{r4, pc}

08018696 <__sclose>:
 8018696:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801869a:	f000 b813 	b.w	80186c4 <_close_r>
	...

080186a0 <_write_r>:
 80186a0:	b538      	push	{r3, r4, r5, lr}
 80186a2:	4d07      	ldr	r5, [pc, #28]	; (80186c0 <_write_r+0x20>)
 80186a4:	4604      	mov	r4, r0
 80186a6:	4608      	mov	r0, r1
 80186a8:	4611      	mov	r1, r2
 80186aa:	2200      	movs	r2, #0
 80186ac:	602a      	str	r2, [r5, #0]
 80186ae:	461a      	mov	r2, r3
 80186b0:	f7f0 f983 	bl	80089ba <_write>
 80186b4:	1c43      	adds	r3, r0, #1
 80186b6:	d102      	bne.n	80186be <_write_r+0x1e>
 80186b8:	682b      	ldr	r3, [r5, #0]
 80186ba:	b103      	cbz	r3, 80186be <_write_r+0x1e>
 80186bc:	6023      	str	r3, [r4, #0]
 80186be:	bd38      	pop	{r3, r4, r5, pc}
 80186c0:	20019b10 	.word	0x20019b10

080186c4 <_close_r>:
 80186c4:	b538      	push	{r3, r4, r5, lr}
 80186c6:	4d06      	ldr	r5, [pc, #24]	; (80186e0 <_close_r+0x1c>)
 80186c8:	2300      	movs	r3, #0
 80186ca:	4604      	mov	r4, r0
 80186cc:	4608      	mov	r0, r1
 80186ce:	602b      	str	r3, [r5, #0]
 80186d0:	f7f0 f98f 	bl	80089f2 <_close>
 80186d4:	1c43      	adds	r3, r0, #1
 80186d6:	d102      	bne.n	80186de <_close_r+0x1a>
 80186d8:	682b      	ldr	r3, [r5, #0]
 80186da:	b103      	cbz	r3, 80186de <_close_r+0x1a>
 80186dc:	6023      	str	r3, [r4, #0]
 80186de:	bd38      	pop	{r3, r4, r5, pc}
 80186e0:	20019b10 	.word	0x20019b10

080186e4 <_fstat_r>:
 80186e4:	b538      	push	{r3, r4, r5, lr}
 80186e6:	4d07      	ldr	r5, [pc, #28]	; (8018704 <_fstat_r+0x20>)
 80186e8:	2300      	movs	r3, #0
 80186ea:	4604      	mov	r4, r0
 80186ec:	4608      	mov	r0, r1
 80186ee:	4611      	mov	r1, r2
 80186f0:	602b      	str	r3, [r5, #0]
 80186f2:	f7f0 f98a 	bl	8008a0a <_fstat>
 80186f6:	1c43      	adds	r3, r0, #1
 80186f8:	d102      	bne.n	8018700 <_fstat_r+0x1c>
 80186fa:	682b      	ldr	r3, [r5, #0]
 80186fc:	b103      	cbz	r3, 8018700 <_fstat_r+0x1c>
 80186fe:	6023      	str	r3, [r4, #0]
 8018700:	bd38      	pop	{r3, r4, r5, pc}
 8018702:	bf00      	nop
 8018704:	20019b10 	.word	0x20019b10

08018708 <_isatty_r>:
 8018708:	b538      	push	{r3, r4, r5, lr}
 801870a:	4d06      	ldr	r5, [pc, #24]	; (8018724 <_isatty_r+0x1c>)
 801870c:	2300      	movs	r3, #0
 801870e:	4604      	mov	r4, r0
 8018710:	4608      	mov	r0, r1
 8018712:	602b      	str	r3, [r5, #0]
 8018714:	f7f0 f989 	bl	8008a2a <_isatty>
 8018718:	1c43      	adds	r3, r0, #1
 801871a:	d102      	bne.n	8018722 <_isatty_r+0x1a>
 801871c:	682b      	ldr	r3, [r5, #0]
 801871e:	b103      	cbz	r3, 8018722 <_isatty_r+0x1a>
 8018720:	6023      	str	r3, [r4, #0]
 8018722:	bd38      	pop	{r3, r4, r5, pc}
 8018724:	20019b10 	.word	0x20019b10

08018728 <_lseek_r>:
 8018728:	b538      	push	{r3, r4, r5, lr}
 801872a:	4d07      	ldr	r5, [pc, #28]	; (8018748 <_lseek_r+0x20>)
 801872c:	4604      	mov	r4, r0
 801872e:	4608      	mov	r0, r1
 8018730:	4611      	mov	r1, r2
 8018732:	2200      	movs	r2, #0
 8018734:	602a      	str	r2, [r5, #0]
 8018736:	461a      	mov	r2, r3
 8018738:	f7f0 f982 	bl	8008a40 <_lseek>
 801873c:	1c43      	adds	r3, r0, #1
 801873e:	d102      	bne.n	8018746 <_lseek_r+0x1e>
 8018740:	682b      	ldr	r3, [r5, #0]
 8018742:	b103      	cbz	r3, 8018746 <_lseek_r+0x1e>
 8018744:	6023      	str	r3, [r4, #0]
 8018746:	bd38      	pop	{r3, r4, r5, pc}
 8018748:	20019b10 	.word	0x20019b10

0801874c <_read_r>:
 801874c:	b538      	push	{r3, r4, r5, lr}
 801874e:	4d07      	ldr	r5, [pc, #28]	; (801876c <_read_r+0x20>)
 8018750:	4604      	mov	r4, r0
 8018752:	4608      	mov	r0, r1
 8018754:	4611      	mov	r1, r2
 8018756:	2200      	movs	r2, #0
 8018758:	602a      	str	r2, [r5, #0]
 801875a:	461a      	mov	r2, r3
 801875c:	f7f0 f910 	bl	8008980 <_read>
 8018760:	1c43      	adds	r3, r0, #1
 8018762:	d102      	bne.n	801876a <_read_r+0x1e>
 8018764:	682b      	ldr	r3, [r5, #0]
 8018766:	b103      	cbz	r3, 801876a <_read_r+0x1e>
 8018768:	6023      	str	r3, [r4, #0]
 801876a:	bd38      	pop	{r3, r4, r5, pc}
 801876c:	20019b10 	.word	0x20019b10

08018770 <cos>:
 8018770:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018772:	ec53 2b10 	vmov	r2, r3, d0
 8018776:	4826      	ldr	r0, [pc, #152]	; (8018810 <cos+0xa0>)
 8018778:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801877c:	4281      	cmp	r1, r0
 801877e:	dc06      	bgt.n	801878e <cos+0x1e>
 8018780:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8018808 <cos+0x98>
 8018784:	b005      	add	sp, #20
 8018786:	f85d eb04 	ldr.w	lr, [sp], #4
 801878a:	f000 baa9 	b.w	8018ce0 <__kernel_cos>
 801878e:	4821      	ldr	r0, [pc, #132]	; (8018814 <cos+0xa4>)
 8018790:	4281      	cmp	r1, r0
 8018792:	dd09      	ble.n	80187a8 <cos+0x38>
 8018794:	ee10 0a10 	vmov	r0, s0
 8018798:	4619      	mov	r1, r3
 801879a:	f7e7 fd8d 	bl	80002b8 <__aeabi_dsub>
 801879e:	ec41 0b10 	vmov	d0, r0, r1
 80187a2:	b005      	add	sp, #20
 80187a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80187a8:	4668      	mov	r0, sp
 80187aa:	f000 f88d 	bl	80188c8 <__ieee754_rem_pio2>
 80187ae:	f000 0003 	and.w	r0, r0, #3
 80187b2:	2801      	cmp	r0, #1
 80187b4:	d00b      	beq.n	80187ce <cos+0x5e>
 80187b6:	2802      	cmp	r0, #2
 80187b8:	d016      	beq.n	80187e8 <cos+0x78>
 80187ba:	b9e0      	cbnz	r0, 80187f6 <cos+0x86>
 80187bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80187c0:	ed9d 0b00 	vldr	d0, [sp]
 80187c4:	f000 fa8c 	bl	8018ce0 <__kernel_cos>
 80187c8:	ec51 0b10 	vmov	r0, r1, d0
 80187cc:	e7e7      	b.n	801879e <cos+0x2e>
 80187ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 80187d2:	ed9d 0b00 	vldr	d0, [sp]
 80187d6:	f000 fe9b 	bl	8019510 <__kernel_sin>
 80187da:	ec53 2b10 	vmov	r2, r3, d0
 80187de:	ee10 0a10 	vmov	r0, s0
 80187e2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80187e6:	e7da      	b.n	801879e <cos+0x2e>
 80187e8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80187ec:	ed9d 0b00 	vldr	d0, [sp]
 80187f0:	f000 fa76 	bl	8018ce0 <__kernel_cos>
 80187f4:	e7f1      	b.n	80187da <cos+0x6a>
 80187f6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80187fa:	ed9d 0b00 	vldr	d0, [sp]
 80187fe:	2001      	movs	r0, #1
 8018800:	f000 fe86 	bl	8019510 <__kernel_sin>
 8018804:	e7e0      	b.n	80187c8 <cos+0x58>
 8018806:	bf00      	nop
	...
 8018810:	3fe921fb 	.word	0x3fe921fb
 8018814:	7fefffff 	.word	0x7fefffff

08018818 <sin>:
 8018818:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801881a:	ec53 2b10 	vmov	r2, r3, d0
 801881e:	4828      	ldr	r0, [pc, #160]	; (80188c0 <sin+0xa8>)
 8018820:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8018824:	4281      	cmp	r1, r0
 8018826:	dc07      	bgt.n	8018838 <sin+0x20>
 8018828:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80188b8 <sin+0xa0>
 801882c:	2000      	movs	r0, #0
 801882e:	b005      	add	sp, #20
 8018830:	f85d eb04 	ldr.w	lr, [sp], #4
 8018834:	f000 be6c 	b.w	8019510 <__kernel_sin>
 8018838:	4822      	ldr	r0, [pc, #136]	; (80188c4 <sin+0xac>)
 801883a:	4281      	cmp	r1, r0
 801883c:	dd09      	ble.n	8018852 <sin+0x3a>
 801883e:	ee10 0a10 	vmov	r0, s0
 8018842:	4619      	mov	r1, r3
 8018844:	f7e7 fd38 	bl	80002b8 <__aeabi_dsub>
 8018848:	ec41 0b10 	vmov	d0, r0, r1
 801884c:	b005      	add	sp, #20
 801884e:	f85d fb04 	ldr.w	pc, [sp], #4
 8018852:	4668      	mov	r0, sp
 8018854:	f000 f838 	bl	80188c8 <__ieee754_rem_pio2>
 8018858:	f000 0003 	and.w	r0, r0, #3
 801885c:	2801      	cmp	r0, #1
 801885e:	d00c      	beq.n	801887a <sin+0x62>
 8018860:	2802      	cmp	r0, #2
 8018862:	d011      	beq.n	8018888 <sin+0x70>
 8018864:	b9f0      	cbnz	r0, 80188a4 <sin+0x8c>
 8018866:	ed9d 1b02 	vldr	d1, [sp, #8]
 801886a:	ed9d 0b00 	vldr	d0, [sp]
 801886e:	2001      	movs	r0, #1
 8018870:	f000 fe4e 	bl	8019510 <__kernel_sin>
 8018874:	ec51 0b10 	vmov	r0, r1, d0
 8018878:	e7e6      	b.n	8018848 <sin+0x30>
 801887a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801887e:	ed9d 0b00 	vldr	d0, [sp]
 8018882:	f000 fa2d 	bl	8018ce0 <__kernel_cos>
 8018886:	e7f5      	b.n	8018874 <sin+0x5c>
 8018888:	ed9d 1b02 	vldr	d1, [sp, #8]
 801888c:	ed9d 0b00 	vldr	d0, [sp]
 8018890:	2001      	movs	r0, #1
 8018892:	f000 fe3d 	bl	8019510 <__kernel_sin>
 8018896:	ec53 2b10 	vmov	r2, r3, d0
 801889a:	ee10 0a10 	vmov	r0, s0
 801889e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80188a2:	e7d1      	b.n	8018848 <sin+0x30>
 80188a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80188a8:	ed9d 0b00 	vldr	d0, [sp]
 80188ac:	f000 fa18 	bl	8018ce0 <__kernel_cos>
 80188b0:	e7f1      	b.n	8018896 <sin+0x7e>
 80188b2:	bf00      	nop
 80188b4:	f3af 8000 	nop.w
	...
 80188c0:	3fe921fb 	.word	0x3fe921fb
 80188c4:	7fefffff 	.word	0x7fefffff

080188c8 <__ieee754_rem_pio2>:
 80188c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188cc:	ed2d 8b02 	vpush	{d8}
 80188d0:	ec55 4b10 	vmov	r4, r5, d0
 80188d4:	4bca      	ldr	r3, [pc, #808]	; (8018c00 <__ieee754_rem_pio2+0x338>)
 80188d6:	b08b      	sub	sp, #44	; 0x2c
 80188d8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80188dc:	4598      	cmp	r8, r3
 80188de:	4682      	mov	sl, r0
 80188e0:	9502      	str	r5, [sp, #8]
 80188e2:	dc08      	bgt.n	80188f6 <__ieee754_rem_pio2+0x2e>
 80188e4:	2200      	movs	r2, #0
 80188e6:	2300      	movs	r3, #0
 80188e8:	ed80 0b00 	vstr	d0, [r0]
 80188ec:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80188f0:	f04f 0b00 	mov.w	fp, #0
 80188f4:	e028      	b.n	8018948 <__ieee754_rem_pio2+0x80>
 80188f6:	4bc3      	ldr	r3, [pc, #780]	; (8018c04 <__ieee754_rem_pio2+0x33c>)
 80188f8:	4598      	cmp	r8, r3
 80188fa:	dc78      	bgt.n	80189ee <__ieee754_rem_pio2+0x126>
 80188fc:	9b02      	ldr	r3, [sp, #8]
 80188fe:	4ec2      	ldr	r6, [pc, #776]	; (8018c08 <__ieee754_rem_pio2+0x340>)
 8018900:	2b00      	cmp	r3, #0
 8018902:	ee10 0a10 	vmov	r0, s0
 8018906:	a3b0      	add	r3, pc, #704	; (adr r3, 8018bc8 <__ieee754_rem_pio2+0x300>)
 8018908:	e9d3 2300 	ldrd	r2, r3, [r3]
 801890c:	4629      	mov	r1, r5
 801890e:	dd39      	ble.n	8018984 <__ieee754_rem_pio2+0xbc>
 8018910:	f7e7 fcd2 	bl	80002b8 <__aeabi_dsub>
 8018914:	45b0      	cmp	r8, r6
 8018916:	4604      	mov	r4, r0
 8018918:	460d      	mov	r5, r1
 801891a:	d01b      	beq.n	8018954 <__ieee754_rem_pio2+0x8c>
 801891c:	a3ac      	add	r3, pc, #688	; (adr r3, 8018bd0 <__ieee754_rem_pio2+0x308>)
 801891e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018922:	f7e7 fcc9 	bl	80002b8 <__aeabi_dsub>
 8018926:	4602      	mov	r2, r0
 8018928:	460b      	mov	r3, r1
 801892a:	e9ca 2300 	strd	r2, r3, [sl]
 801892e:	4620      	mov	r0, r4
 8018930:	4629      	mov	r1, r5
 8018932:	f7e7 fcc1 	bl	80002b8 <__aeabi_dsub>
 8018936:	a3a6      	add	r3, pc, #664	; (adr r3, 8018bd0 <__ieee754_rem_pio2+0x308>)
 8018938:	e9d3 2300 	ldrd	r2, r3, [r3]
 801893c:	f7e7 fcbc 	bl	80002b8 <__aeabi_dsub>
 8018940:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8018944:	f04f 0b01 	mov.w	fp, #1
 8018948:	4658      	mov	r0, fp
 801894a:	b00b      	add	sp, #44	; 0x2c
 801894c:	ecbd 8b02 	vpop	{d8}
 8018950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018954:	a3a0      	add	r3, pc, #640	; (adr r3, 8018bd8 <__ieee754_rem_pio2+0x310>)
 8018956:	e9d3 2300 	ldrd	r2, r3, [r3]
 801895a:	f7e7 fcad 	bl	80002b8 <__aeabi_dsub>
 801895e:	a3a0      	add	r3, pc, #640	; (adr r3, 8018be0 <__ieee754_rem_pio2+0x318>)
 8018960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018964:	4604      	mov	r4, r0
 8018966:	460d      	mov	r5, r1
 8018968:	f7e7 fca6 	bl	80002b8 <__aeabi_dsub>
 801896c:	4602      	mov	r2, r0
 801896e:	460b      	mov	r3, r1
 8018970:	e9ca 2300 	strd	r2, r3, [sl]
 8018974:	4620      	mov	r0, r4
 8018976:	4629      	mov	r1, r5
 8018978:	f7e7 fc9e 	bl	80002b8 <__aeabi_dsub>
 801897c:	a398      	add	r3, pc, #608	; (adr r3, 8018be0 <__ieee754_rem_pio2+0x318>)
 801897e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018982:	e7db      	b.n	801893c <__ieee754_rem_pio2+0x74>
 8018984:	f7e7 fc9a 	bl	80002bc <__adddf3>
 8018988:	45b0      	cmp	r8, r6
 801898a:	4604      	mov	r4, r0
 801898c:	460d      	mov	r5, r1
 801898e:	d016      	beq.n	80189be <__ieee754_rem_pio2+0xf6>
 8018990:	a38f      	add	r3, pc, #572	; (adr r3, 8018bd0 <__ieee754_rem_pio2+0x308>)
 8018992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018996:	f7e7 fc91 	bl	80002bc <__adddf3>
 801899a:	4602      	mov	r2, r0
 801899c:	460b      	mov	r3, r1
 801899e:	e9ca 2300 	strd	r2, r3, [sl]
 80189a2:	4620      	mov	r0, r4
 80189a4:	4629      	mov	r1, r5
 80189a6:	f7e7 fc87 	bl	80002b8 <__aeabi_dsub>
 80189aa:	a389      	add	r3, pc, #548	; (adr r3, 8018bd0 <__ieee754_rem_pio2+0x308>)
 80189ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189b0:	f7e7 fc84 	bl	80002bc <__adddf3>
 80189b4:	f04f 3bff 	mov.w	fp, #4294967295
 80189b8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80189bc:	e7c4      	b.n	8018948 <__ieee754_rem_pio2+0x80>
 80189be:	a386      	add	r3, pc, #536	; (adr r3, 8018bd8 <__ieee754_rem_pio2+0x310>)
 80189c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189c4:	f7e7 fc7a 	bl	80002bc <__adddf3>
 80189c8:	a385      	add	r3, pc, #532	; (adr r3, 8018be0 <__ieee754_rem_pio2+0x318>)
 80189ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189ce:	4604      	mov	r4, r0
 80189d0:	460d      	mov	r5, r1
 80189d2:	f7e7 fc73 	bl	80002bc <__adddf3>
 80189d6:	4602      	mov	r2, r0
 80189d8:	460b      	mov	r3, r1
 80189da:	e9ca 2300 	strd	r2, r3, [sl]
 80189de:	4620      	mov	r0, r4
 80189e0:	4629      	mov	r1, r5
 80189e2:	f7e7 fc69 	bl	80002b8 <__aeabi_dsub>
 80189e6:	a37e      	add	r3, pc, #504	; (adr r3, 8018be0 <__ieee754_rem_pio2+0x318>)
 80189e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189ec:	e7e0      	b.n	80189b0 <__ieee754_rem_pio2+0xe8>
 80189ee:	4b87      	ldr	r3, [pc, #540]	; (8018c0c <__ieee754_rem_pio2+0x344>)
 80189f0:	4598      	cmp	r8, r3
 80189f2:	f300 80d9 	bgt.w	8018ba8 <__ieee754_rem_pio2+0x2e0>
 80189f6:	f000 fe49 	bl	801968c <fabs>
 80189fa:	ec55 4b10 	vmov	r4, r5, d0
 80189fe:	ee10 0a10 	vmov	r0, s0
 8018a02:	a379      	add	r3, pc, #484	; (adr r3, 8018be8 <__ieee754_rem_pio2+0x320>)
 8018a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a08:	4629      	mov	r1, r5
 8018a0a:	f7e7 fe0d 	bl	8000628 <__aeabi_dmul>
 8018a0e:	4b80      	ldr	r3, [pc, #512]	; (8018c10 <__ieee754_rem_pio2+0x348>)
 8018a10:	2200      	movs	r2, #0
 8018a12:	f7e7 fc53 	bl	80002bc <__adddf3>
 8018a16:	f7e8 f8b7 	bl	8000b88 <__aeabi_d2iz>
 8018a1a:	4683      	mov	fp, r0
 8018a1c:	f7e7 fd9a 	bl	8000554 <__aeabi_i2d>
 8018a20:	4602      	mov	r2, r0
 8018a22:	460b      	mov	r3, r1
 8018a24:	ec43 2b18 	vmov	d8, r2, r3
 8018a28:	a367      	add	r3, pc, #412	; (adr r3, 8018bc8 <__ieee754_rem_pio2+0x300>)
 8018a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a2e:	f7e7 fdfb 	bl	8000628 <__aeabi_dmul>
 8018a32:	4602      	mov	r2, r0
 8018a34:	460b      	mov	r3, r1
 8018a36:	4620      	mov	r0, r4
 8018a38:	4629      	mov	r1, r5
 8018a3a:	f7e7 fc3d 	bl	80002b8 <__aeabi_dsub>
 8018a3e:	a364      	add	r3, pc, #400	; (adr r3, 8018bd0 <__ieee754_rem_pio2+0x308>)
 8018a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a44:	4606      	mov	r6, r0
 8018a46:	460f      	mov	r7, r1
 8018a48:	ec51 0b18 	vmov	r0, r1, d8
 8018a4c:	f7e7 fdec 	bl	8000628 <__aeabi_dmul>
 8018a50:	f1bb 0f1f 	cmp.w	fp, #31
 8018a54:	4604      	mov	r4, r0
 8018a56:	460d      	mov	r5, r1
 8018a58:	dc0d      	bgt.n	8018a76 <__ieee754_rem_pio2+0x1ae>
 8018a5a:	4b6e      	ldr	r3, [pc, #440]	; (8018c14 <__ieee754_rem_pio2+0x34c>)
 8018a5c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8018a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018a64:	4543      	cmp	r3, r8
 8018a66:	d006      	beq.n	8018a76 <__ieee754_rem_pio2+0x1ae>
 8018a68:	4622      	mov	r2, r4
 8018a6a:	462b      	mov	r3, r5
 8018a6c:	4630      	mov	r0, r6
 8018a6e:	4639      	mov	r1, r7
 8018a70:	f7e7 fc22 	bl	80002b8 <__aeabi_dsub>
 8018a74:	e00f      	b.n	8018a96 <__ieee754_rem_pio2+0x1ce>
 8018a76:	462b      	mov	r3, r5
 8018a78:	4622      	mov	r2, r4
 8018a7a:	4630      	mov	r0, r6
 8018a7c:	4639      	mov	r1, r7
 8018a7e:	f7e7 fc1b 	bl	80002b8 <__aeabi_dsub>
 8018a82:	ea4f 5328 	mov.w	r3, r8, asr #20
 8018a86:	9303      	str	r3, [sp, #12]
 8018a88:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8018a8c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8018a90:	f1b8 0f10 	cmp.w	r8, #16
 8018a94:	dc02      	bgt.n	8018a9c <__ieee754_rem_pio2+0x1d4>
 8018a96:	e9ca 0100 	strd	r0, r1, [sl]
 8018a9a:	e039      	b.n	8018b10 <__ieee754_rem_pio2+0x248>
 8018a9c:	a34e      	add	r3, pc, #312	; (adr r3, 8018bd8 <__ieee754_rem_pio2+0x310>)
 8018a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018aa2:	ec51 0b18 	vmov	r0, r1, d8
 8018aa6:	f7e7 fdbf 	bl	8000628 <__aeabi_dmul>
 8018aaa:	4604      	mov	r4, r0
 8018aac:	460d      	mov	r5, r1
 8018aae:	4602      	mov	r2, r0
 8018ab0:	460b      	mov	r3, r1
 8018ab2:	4630      	mov	r0, r6
 8018ab4:	4639      	mov	r1, r7
 8018ab6:	f7e7 fbff 	bl	80002b8 <__aeabi_dsub>
 8018aba:	4602      	mov	r2, r0
 8018abc:	460b      	mov	r3, r1
 8018abe:	4680      	mov	r8, r0
 8018ac0:	4689      	mov	r9, r1
 8018ac2:	4630      	mov	r0, r6
 8018ac4:	4639      	mov	r1, r7
 8018ac6:	f7e7 fbf7 	bl	80002b8 <__aeabi_dsub>
 8018aca:	4622      	mov	r2, r4
 8018acc:	462b      	mov	r3, r5
 8018ace:	f7e7 fbf3 	bl	80002b8 <__aeabi_dsub>
 8018ad2:	a343      	add	r3, pc, #268	; (adr r3, 8018be0 <__ieee754_rem_pio2+0x318>)
 8018ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ad8:	4604      	mov	r4, r0
 8018ada:	460d      	mov	r5, r1
 8018adc:	ec51 0b18 	vmov	r0, r1, d8
 8018ae0:	f7e7 fda2 	bl	8000628 <__aeabi_dmul>
 8018ae4:	4622      	mov	r2, r4
 8018ae6:	462b      	mov	r3, r5
 8018ae8:	f7e7 fbe6 	bl	80002b8 <__aeabi_dsub>
 8018aec:	4602      	mov	r2, r0
 8018aee:	460b      	mov	r3, r1
 8018af0:	4604      	mov	r4, r0
 8018af2:	460d      	mov	r5, r1
 8018af4:	4640      	mov	r0, r8
 8018af6:	4649      	mov	r1, r9
 8018af8:	f7e7 fbde 	bl	80002b8 <__aeabi_dsub>
 8018afc:	9a03      	ldr	r2, [sp, #12]
 8018afe:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8018b02:	1ad3      	subs	r3, r2, r3
 8018b04:	2b31      	cmp	r3, #49	; 0x31
 8018b06:	dc24      	bgt.n	8018b52 <__ieee754_rem_pio2+0x28a>
 8018b08:	e9ca 0100 	strd	r0, r1, [sl]
 8018b0c:	4646      	mov	r6, r8
 8018b0e:	464f      	mov	r7, r9
 8018b10:	e9da 8900 	ldrd	r8, r9, [sl]
 8018b14:	4630      	mov	r0, r6
 8018b16:	4642      	mov	r2, r8
 8018b18:	464b      	mov	r3, r9
 8018b1a:	4639      	mov	r1, r7
 8018b1c:	f7e7 fbcc 	bl	80002b8 <__aeabi_dsub>
 8018b20:	462b      	mov	r3, r5
 8018b22:	4622      	mov	r2, r4
 8018b24:	f7e7 fbc8 	bl	80002b8 <__aeabi_dsub>
 8018b28:	9b02      	ldr	r3, [sp, #8]
 8018b2a:	2b00      	cmp	r3, #0
 8018b2c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8018b30:	f6bf af0a 	bge.w	8018948 <__ieee754_rem_pio2+0x80>
 8018b34:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8018b38:	f8ca 3004 	str.w	r3, [sl, #4]
 8018b3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018b40:	f8ca 8000 	str.w	r8, [sl]
 8018b44:	f8ca 0008 	str.w	r0, [sl, #8]
 8018b48:	f8ca 300c 	str.w	r3, [sl, #12]
 8018b4c:	f1cb 0b00 	rsb	fp, fp, #0
 8018b50:	e6fa      	b.n	8018948 <__ieee754_rem_pio2+0x80>
 8018b52:	a327      	add	r3, pc, #156	; (adr r3, 8018bf0 <__ieee754_rem_pio2+0x328>)
 8018b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b58:	ec51 0b18 	vmov	r0, r1, d8
 8018b5c:	f7e7 fd64 	bl	8000628 <__aeabi_dmul>
 8018b60:	4604      	mov	r4, r0
 8018b62:	460d      	mov	r5, r1
 8018b64:	4602      	mov	r2, r0
 8018b66:	460b      	mov	r3, r1
 8018b68:	4640      	mov	r0, r8
 8018b6a:	4649      	mov	r1, r9
 8018b6c:	f7e7 fba4 	bl	80002b8 <__aeabi_dsub>
 8018b70:	4602      	mov	r2, r0
 8018b72:	460b      	mov	r3, r1
 8018b74:	4606      	mov	r6, r0
 8018b76:	460f      	mov	r7, r1
 8018b78:	4640      	mov	r0, r8
 8018b7a:	4649      	mov	r1, r9
 8018b7c:	f7e7 fb9c 	bl	80002b8 <__aeabi_dsub>
 8018b80:	4622      	mov	r2, r4
 8018b82:	462b      	mov	r3, r5
 8018b84:	f7e7 fb98 	bl	80002b8 <__aeabi_dsub>
 8018b88:	a31b      	add	r3, pc, #108	; (adr r3, 8018bf8 <__ieee754_rem_pio2+0x330>)
 8018b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b8e:	4604      	mov	r4, r0
 8018b90:	460d      	mov	r5, r1
 8018b92:	ec51 0b18 	vmov	r0, r1, d8
 8018b96:	f7e7 fd47 	bl	8000628 <__aeabi_dmul>
 8018b9a:	4622      	mov	r2, r4
 8018b9c:	462b      	mov	r3, r5
 8018b9e:	f7e7 fb8b 	bl	80002b8 <__aeabi_dsub>
 8018ba2:	4604      	mov	r4, r0
 8018ba4:	460d      	mov	r5, r1
 8018ba6:	e75f      	b.n	8018a68 <__ieee754_rem_pio2+0x1a0>
 8018ba8:	4b1b      	ldr	r3, [pc, #108]	; (8018c18 <__ieee754_rem_pio2+0x350>)
 8018baa:	4598      	cmp	r8, r3
 8018bac:	dd36      	ble.n	8018c1c <__ieee754_rem_pio2+0x354>
 8018bae:	ee10 2a10 	vmov	r2, s0
 8018bb2:	462b      	mov	r3, r5
 8018bb4:	4620      	mov	r0, r4
 8018bb6:	4629      	mov	r1, r5
 8018bb8:	f7e7 fb7e 	bl	80002b8 <__aeabi_dsub>
 8018bbc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8018bc0:	e9ca 0100 	strd	r0, r1, [sl]
 8018bc4:	e694      	b.n	80188f0 <__ieee754_rem_pio2+0x28>
 8018bc6:	bf00      	nop
 8018bc8:	54400000 	.word	0x54400000
 8018bcc:	3ff921fb 	.word	0x3ff921fb
 8018bd0:	1a626331 	.word	0x1a626331
 8018bd4:	3dd0b461 	.word	0x3dd0b461
 8018bd8:	1a600000 	.word	0x1a600000
 8018bdc:	3dd0b461 	.word	0x3dd0b461
 8018be0:	2e037073 	.word	0x2e037073
 8018be4:	3ba3198a 	.word	0x3ba3198a
 8018be8:	6dc9c883 	.word	0x6dc9c883
 8018bec:	3fe45f30 	.word	0x3fe45f30
 8018bf0:	2e000000 	.word	0x2e000000
 8018bf4:	3ba3198a 	.word	0x3ba3198a
 8018bf8:	252049c1 	.word	0x252049c1
 8018bfc:	397b839a 	.word	0x397b839a
 8018c00:	3fe921fb 	.word	0x3fe921fb
 8018c04:	4002d97b 	.word	0x4002d97b
 8018c08:	3ff921fb 	.word	0x3ff921fb
 8018c0c:	413921fb 	.word	0x413921fb
 8018c10:	3fe00000 	.word	0x3fe00000
 8018c14:	0801a624 	.word	0x0801a624
 8018c18:	7fefffff 	.word	0x7fefffff
 8018c1c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8018c20:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8018c24:	ee10 0a10 	vmov	r0, s0
 8018c28:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8018c2c:	ee10 6a10 	vmov	r6, s0
 8018c30:	460f      	mov	r7, r1
 8018c32:	f7e7 ffa9 	bl	8000b88 <__aeabi_d2iz>
 8018c36:	f7e7 fc8d 	bl	8000554 <__aeabi_i2d>
 8018c3a:	4602      	mov	r2, r0
 8018c3c:	460b      	mov	r3, r1
 8018c3e:	4630      	mov	r0, r6
 8018c40:	4639      	mov	r1, r7
 8018c42:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8018c46:	f7e7 fb37 	bl	80002b8 <__aeabi_dsub>
 8018c4a:	4b23      	ldr	r3, [pc, #140]	; (8018cd8 <__ieee754_rem_pio2+0x410>)
 8018c4c:	2200      	movs	r2, #0
 8018c4e:	f7e7 fceb 	bl	8000628 <__aeabi_dmul>
 8018c52:	460f      	mov	r7, r1
 8018c54:	4606      	mov	r6, r0
 8018c56:	f7e7 ff97 	bl	8000b88 <__aeabi_d2iz>
 8018c5a:	f7e7 fc7b 	bl	8000554 <__aeabi_i2d>
 8018c5e:	4602      	mov	r2, r0
 8018c60:	460b      	mov	r3, r1
 8018c62:	4630      	mov	r0, r6
 8018c64:	4639      	mov	r1, r7
 8018c66:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8018c6a:	f7e7 fb25 	bl	80002b8 <__aeabi_dsub>
 8018c6e:	4b1a      	ldr	r3, [pc, #104]	; (8018cd8 <__ieee754_rem_pio2+0x410>)
 8018c70:	2200      	movs	r2, #0
 8018c72:	f7e7 fcd9 	bl	8000628 <__aeabi_dmul>
 8018c76:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8018c7a:	ad04      	add	r5, sp, #16
 8018c7c:	f04f 0803 	mov.w	r8, #3
 8018c80:	46a9      	mov	r9, r5
 8018c82:	2600      	movs	r6, #0
 8018c84:	2700      	movs	r7, #0
 8018c86:	4632      	mov	r2, r6
 8018c88:	463b      	mov	r3, r7
 8018c8a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8018c8e:	46c3      	mov	fp, r8
 8018c90:	3d08      	subs	r5, #8
 8018c92:	f108 38ff 	add.w	r8, r8, #4294967295
 8018c96:	f7e7 ff2f 	bl	8000af8 <__aeabi_dcmpeq>
 8018c9a:	2800      	cmp	r0, #0
 8018c9c:	d1f3      	bne.n	8018c86 <__ieee754_rem_pio2+0x3be>
 8018c9e:	4b0f      	ldr	r3, [pc, #60]	; (8018cdc <__ieee754_rem_pio2+0x414>)
 8018ca0:	9301      	str	r3, [sp, #4]
 8018ca2:	2302      	movs	r3, #2
 8018ca4:	9300      	str	r3, [sp, #0]
 8018ca6:	4622      	mov	r2, r4
 8018ca8:	465b      	mov	r3, fp
 8018caa:	4651      	mov	r1, sl
 8018cac:	4648      	mov	r0, r9
 8018cae:	f000 f8df 	bl	8018e70 <__kernel_rem_pio2>
 8018cb2:	9b02      	ldr	r3, [sp, #8]
 8018cb4:	2b00      	cmp	r3, #0
 8018cb6:	4683      	mov	fp, r0
 8018cb8:	f6bf ae46 	bge.w	8018948 <__ieee754_rem_pio2+0x80>
 8018cbc:	e9da 2100 	ldrd	r2, r1, [sl]
 8018cc0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018cc4:	e9ca 2300 	strd	r2, r3, [sl]
 8018cc8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8018ccc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018cd0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8018cd4:	e73a      	b.n	8018b4c <__ieee754_rem_pio2+0x284>
 8018cd6:	bf00      	nop
 8018cd8:	41700000 	.word	0x41700000
 8018cdc:	0801a6a4 	.word	0x0801a6a4

08018ce0 <__kernel_cos>:
 8018ce0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ce4:	ec57 6b10 	vmov	r6, r7, d0
 8018ce8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8018cec:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8018cf0:	ed8d 1b00 	vstr	d1, [sp]
 8018cf4:	da07      	bge.n	8018d06 <__kernel_cos+0x26>
 8018cf6:	ee10 0a10 	vmov	r0, s0
 8018cfa:	4639      	mov	r1, r7
 8018cfc:	f7e7 ff44 	bl	8000b88 <__aeabi_d2iz>
 8018d00:	2800      	cmp	r0, #0
 8018d02:	f000 8088 	beq.w	8018e16 <__kernel_cos+0x136>
 8018d06:	4632      	mov	r2, r6
 8018d08:	463b      	mov	r3, r7
 8018d0a:	4630      	mov	r0, r6
 8018d0c:	4639      	mov	r1, r7
 8018d0e:	f7e7 fc8b 	bl	8000628 <__aeabi_dmul>
 8018d12:	4b51      	ldr	r3, [pc, #324]	; (8018e58 <__kernel_cos+0x178>)
 8018d14:	2200      	movs	r2, #0
 8018d16:	4604      	mov	r4, r0
 8018d18:	460d      	mov	r5, r1
 8018d1a:	f7e7 fc85 	bl	8000628 <__aeabi_dmul>
 8018d1e:	a340      	add	r3, pc, #256	; (adr r3, 8018e20 <__kernel_cos+0x140>)
 8018d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d24:	4682      	mov	sl, r0
 8018d26:	468b      	mov	fp, r1
 8018d28:	4620      	mov	r0, r4
 8018d2a:	4629      	mov	r1, r5
 8018d2c:	f7e7 fc7c 	bl	8000628 <__aeabi_dmul>
 8018d30:	a33d      	add	r3, pc, #244	; (adr r3, 8018e28 <__kernel_cos+0x148>)
 8018d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d36:	f7e7 fac1 	bl	80002bc <__adddf3>
 8018d3a:	4622      	mov	r2, r4
 8018d3c:	462b      	mov	r3, r5
 8018d3e:	f7e7 fc73 	bl	8000628 <__aeabi_dmul>
 8018d42:	a33b      	add	r3, pc, #236	; (adr r3, 8018e30 <__kernel_cos+0x150>)
 8018d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d48:	f7e7 fab6 	bl	80002b8 <__aeabi_dsub>
 8018d4c:	4622      	mov	r2, r4
 8018d4e:	462b      	mov	r3, r5
 8018d50:	f7e7 fc6a 	bl	8000628 <__aeabi_dmul>
 8018d54:	a338      	add	r3, pc, #224	; (adr r3, 8018e38 <__kernel_cos+0x158>)
 8018d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d5a:	f7e7 faaf 	bl	80002bc <__adddf3>
 8018d5e:	4622      	mov	r2, r4
 8018d60:	462b      	mov	r3, r5
 8018d62:	f7e7 fc61 	bl	8000628 <__aeabi_dmul>
 8018d66:	a336      	add	r3, pc, #216	; (adr r3, 8018e40 <__kernel_cos+0x160>)
 8018d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d6c:	f7e7 faa4 	bl	80002b8 <__aeabi_dsub>
 8018d70:	4622      	mov	r2, r4
 8018d72:	462b      	mov	r3, r5
 8018d74:	f7e7 fc58 	bl	8000628 <__aeabi_dmul>
 8018d78:	a333      	add	r3, pc, #204	; (adr r3, 8018e48 <__kernel_cos+0x168>)
 8018d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d7e:	f7e7 fa9d 	bl	80002bc <__adddf3>
 8018d82:	4622      	mov	r2, r4
 8018d84:	462b      	mov	r3, r5
 8018d86:	f7e7 fc4f 	bl	8000628 <__aeabi_dmul>
 8018d8a:	4622      	mov	r2, r4
 8018d8c:	462b      	mov	r3, r5
 8018d8e:	f7e7 fc4b 	bl	8000628 <__aeabi_dmul>
 8018d92:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018d96:	4604      	mov	r4, r0
 8018d98:	460d      	mov	r5, r1
 8018d9a:	4630      	mov	r0, r6
 8018d9c:	4639      	mov	r1, r7
 8018d9e:	f7e7 fc43 	bl	8000628 <__aeabi_dmul>
 8018da2:	460b      	mov	r3, r1
 8018da4:	4602      	mov	r2, r0
 8018da6:	4629      	mov	r1, r5
 8018da8:	4620      	mov	r0, r4
 8018daa:	f7e7 fa85 	bl	80002b8 <__aeabi_dsub>
 8018dae:	4b2b      	ldr	r3, [pc, #172]	; (8018e5c <__kernel_cos+0x17c>)
 8018db0:	4598      	cmp	r8, r3
 8018db2:	4606      	mov	r6, r0
 8018db4:	460f      	mov	r7, r1
 8018db6:	dc10      	bgt.n	8018dda <__kernel_cos+0xfa>
 8018db8:	4602      	mov	r2, r0
 8018dba:	460b      	mov	r3, r1
 8018dbc:	4650      	mov	r0, sl
 8018dbe:	4659      	mov	r1, fp
 8018dc0:	f7e7 fa7a 	bl	80002b8 <__aeabi_dsub>
 8018dc4:	460b      	mov	r3, r1
 8018dc6:	4926      	ldr	r1, [pc, #152]	; (8018e60 <__kernel_cos+0x180>)
 8018dc8:	4602      	mov	r2, r0
 8018dca:	2000      	movs	r0, #0
 8018dcc:	f7e7 fa74 	bl	80002b8 <__aeabi_dsub>
 8018dd0:	ec41 0b10 	vmov	d0, r0, r1
 8018dd4:	b003      	add	sp, #12
 8018dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018dda:	4b22      	ldr	r3, [pc, #136]	; (8018e64 <__kernel_cos+0x184>)
 8018ddc:	4920      	ldr	r1, [pc, #128]	; (8018e60 <__kernel_cos+0x180>)
 8018dde:	4598      	cmp	r8, r3
 8018de0:	bfcc      	ite	gt
 8018de2:	4d21      	ldrgt	r5, [pc, #132]	; (8018e68 <__kernel_cos+0x188>)
 8018de4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8018de8:	2400      	movs	r4, #0
 8018dea:	4622      	mov	r2, r4
 8018dec:	462b      	mov	r3, r5
 8018dee:	2000      	movs	r0, #0
 8018df0:	f7e7 fa62 	bl	80002b8 <__aeabi_dsub>
 8018df4:	4622      	mov	r2, r4
 8018df6:	4680      	mov	r8, r0
 8018df8:	4689      	mov	r9, r1
 8018dfa:	462b      	mov	r3, r5
 8018dfc:	4650      	mov	r0, sl
 8018dfe:	4659      	mov	r1, fp
 8018e00:	f7e7 fa5a 	bl	80002b8 <__aeabi_dsub>
 8018e04:	4632      	mov	r2, r6
 8018e06:	463b      	mov	r3, r7
 8018e08:	f7e7 fa56 	bl	80002b8 <__aeabi_dsub>
 8018e0c:	4602      	mov	r2, r0
 8018e0e:	460b      	mov	r3, r1
 8018e10:	4640      	mov	r0, r8
 8018e12:	4649      	mov	r1, r9
 8018e14:	e7da      	b.n	8018dcc <__kernel_cos+0xec>
 8018e16:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8018e50 <__kernel_cos+0x170>
 8018e1a:	e7db      	b.n	8018dd4 <__kernel_cos+0xf4>
 8018e1c:	f3af 8000 	nop.w
 8018e20:	be8838d4 	.word	0xbe8838d4
 8018e24:	bda8fae9 	.word	0xbda8fae9
 8018e28:	bdb4b1c4 	.word	0xbdb4b1c4
 8018e2c:	3e21ee9e 	.word	0x3e21ee9e
 8018e30:	809c52ad 	.word	0x809c52ad
 8018e34:	3e927e4f 	.word	0x3e927e4f
 8018e38:	19cb1590 	.word	0x19cb1590
 8018e3c:	3efa01a0 	.word	0x3efa01a0
 8018e40:	16c15177 	.word	0x16c15177
 8018e44:	3f56c16c 	.word	0x3f56c16c
 8018e48:	5555554c 	.word	0x5555554c
 8018e4c:	3fa55555 	.word	0x3fa55555
 8018e50:	00000000 	.word	0x00000000
 8018e54:	3ff00000 	.word	0x3ff00000
 8018e58:	3fe00000 	.word	0x3fe00000
 8018e5c:	3fd33332 	.word	0x3fd33332
 8018e60:	3ff00000 	.word	0x3ff00000
 8018e64:	3fe90000 	.word	0x3fe90000
 8018e68:	3fd20000 	.word	0x3fd20000
 8018e6c:	00000000 	.word	0x00000000

08018e70 <__kernel_rem_pio2>:
 8018e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e74:	ed2d 8b02 	vpush	{d8}
 8018e78:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8018e7c:	f112 0f14 	cmn.w	r2, #20
 8018e80:	9308      	str	r3, [sp, #32]
 8018e82:	9101      	str	r1, [sp, #4]
 8018e84:	4bc4      	ldr	r3, [pc, #784]	; (8019198 <__kernel_rem_pio2+0x328>)
 8018e86:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8018e88:	900b      	str	r0, [sp, #44]	; 0x2c
 8018e8a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018e8e:	9302      	str	r3, [sp, #8]
 8018e90:	9b08      	ldr	r3, [sp, #32]
 8018e92:	f103 33ff 	add.w	r3, r3, #4294967295
 8018e96:	bfa8      	it	ge
 8018e98:	1ed4      	subge	r4, r2, #3
 8018e9a:	9306      	str	r3, [sp, #24]
 8018e9c:	bfb2      	itee	lt
 8018e9e:	2400      	movlt	r4, #0
 8018ea0:	2318      	movge	r3, #24
 8018ea2:	fb94 f4f3 	sdivge	r4, r4, r3
 8018ea6:	f06f 0317 	mvn.w	r3, #23
 8018eaa:	fb04 3303 	mla	r3, r4, r3, r3
 8018eae:	eb03 0a02 	add.w	sl, r3, r2
 8018eb2:	9b02      	ldr	r3, [sp, #8]
 8018eb4:	9a06      	ldr	r2, [sp, #24]
 8018eb6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8019188 <__kernel_rem_pio2+0x318>
 8018eba:	eb03 0802 	add.w	r8, r3, r2
 8018ebe:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8018ec0:	1aa7      	subs	r7, r4, r2
 8018ec2:	ae22      	add	r6, sp, #136	; 0x88
 8018ec4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8018ec8:	2500      	movs	r5, #0
 8018eca:	4545      	cmp	r5, r8
 8018ecc:	dd13      	ble.n	8018ef6 <__kernel_rem_pio2+0x86>
 8018ece:	9b08      	ldr	r3, [sp, #32]
 8018ed0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8019188 <__kernel_rem_pio2+0x318>
 8018ed4:	aa22      	add	r2, sp, #136	; 0x88
 8018ed6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8018eda:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8018ede:	f04f 0800 	mov.w	r8, #0
 8018ee2:	9b02      	ldr	r3, [sp, #8]
 8018ee4:	4598      	cmp	r8, r3
 8018ee6:	dc2f      	bgt.n	8018f48 <__kernel_rem_pio2+0xd8>
 8018ee8:	ed8d 8b04 	vstr	d8, [sp, #16]
 8018eec:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8018ef0:	462f      	mov	r7, r5
 8018ef2:	2600      	movs	r6, #0
 8018ef4:	e01b      	b.n	8018f2e <__kernel_rem_pio2+0xbe>
 8018ef6:	42ef      	cmn	r7, r5
 8018ef8:	d407      	bmi.n	8018f0a <__kernel_rem_pio2+0x9a>
 8018efa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8018efe:	f7e7 fb29 	bl	8000554 <__aeabi_i2d>
 8018f02:	e8e6 0102 	strd	r0, r1, [r6], #8
 8018f06:	3501      	adds	r5, #1
 8018f08:	e7df      	b.n	8018eca <__kernel_rem_pio2+0x5a>
 8018f0a:	ec51 0b18 	vmov	r0, r1, d8
 8018f0e:	e7f8      	b.n	8018f02 <__kernel_rem_pio2+0x92>
 8018f10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018f14:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8018f18:	f7e7 fb86 	bl	8000628 <__aeabi_dmul>
 8018f1c:	4602      	mov	r2, r0
 8018f1e:	460b      	mov	r3, r1
 8018f20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018f24:	f7e7 f9ca 	bl	80002bc <__adddf3>
 8018f28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018f2c:	3601      	adds	r6, #1
 8018f2e:	9b06      	ldr	r3, [sp, #24]
 8018f30:	429e      	cmp	r6, r3
 8018f32:	f1a7 0708 	sub.w	r7, r7, #8
 8018f36:	ddeb      	ble.n	8018f10 <__kernel_rem_pio2+0xa0>
 8018f38:	ed9d 7b04 	vldr	d7, [sp, #16]
 8018f3c:	f108 0801 	add.w	r8, r8, #1
 8018f40:	ecab 7b02 	vstmia	fp!, {d7}
 8018f44:	3508      	adds	r5, #8
 8018f46:	e7cc      	b.n	8018ee2 <__kernel_rem_pio2+0x72>
 8018f48:	9b02      	ldr	r3, [sp, #8]
 8018f4a:	aa0e      	add	r2, sp, #56	; 0x38
 8018f4c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018f50:	930d      	str	r3, [sp, #52]	; 0x34
 8018f52:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8018f54:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8018f58:	9c02      	ldr	r4, [sp, #8]
 8018f5a:	930c      	str	r3, [sp, #48]	; 0x30
 8018f5c:	00e3      	lsls	r3, r4, #3
 8018f5e:	930a      	str	r3, [sp, #40]	; 0x28
 8018f60:	ab9a      	add	r3, sp, #616	; 0x268
 8018f62:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8018f66:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8018f6a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8018f6e:	ab72      	add	r3, sp, #456	; 0x1c8
 8018f70:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8018f74:	46c3      	mov	fp, r8
 8018f76:	46a1      	mov	r9, r4
 8018f78:	f1b9 0f00 	cmp.w	r9, #0
 8018f7c:	f1a5 0508 	sub.w	r5, r5, #8
 8018f80:	dc77      	bgt.n	8019072 <__kernel_rem_pio2+0x202>
 8018f82:	ec47 6b10 	vmov	d0, r6, r7
 8018f86:	4650      	mov	r0, sl
 8018f88:	f000 fc0a 	bl	80197a0 <scalbn>
 8018f8c:	ec57 6b10 	vmov	r6, r7, d0
 8018f90:	2200      	movs	r2, #0
 8018f92:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8018f96:	ee10 0a10 	vmov	r0, s0
 8018f9a:	4639      	mov	r1, r7
 8018f9c:	f7e7 fb44 	bl	8000628 <__aeabi_dmul>
 8018fa0:	ec41 0b10 	vmov	d0, r0, r1
 8018fa4:	f000 fb7c 	bl	80196a0 <floor>
 8018fa8:	4b7c      	ldr	r3, [pc, #496]	; (801919c <__kernel_rem_pio2+0x32c>)
 8018faa:	ec51 0b10 	vmov	r0, r1, d0
 8018fae:	2200      	movs	r2, #0
 8018fb0:	f7e7 fb3a 	bl	8000628 <__aeabi_dmul>
 8018fb4:	4602      	mov	r2, r0
 8018fb6:	460b      	mov	r3, r1
 8018fb8:	4630      	mov	r0, r6
 8018fba:	4639      	mov	r1, r7
 8018fbc:	f7e7 f97c 	bl	80002b8 <__aeabi_dsub>
 8018fc0:	460f      	mov	r7, r1
 8018fc2:	4606      	mov	r6, r0
 8018fc4:	f7e7 fde0 	bl	8000b88 <__aeabi_d2iz>
 8018fc8:	9004      	str	r0, [sp, #16]
 8018fca:	f7e7 fac3 	bl	8000554 <__aeabi_i2d>
 8018fce:	4602      	mov	r2, r0
 8018fd0:	460b      	mov	r3, r1
 8018fd2:	4630      	mov	r0, r6
 8018fd4:	4639      	mov	r1, r7
 8018fd6:	f7e7 f96f 	bl	80002b8 <__aeabi_dsub>
 8018fda:	f1ba 0f00 	cmp.w	sl, #0
 8018fde:	4606      	mov	r6, r0
 8018fe0:	460f      	mov	r7, r1
 8018fe2:	dd6d      	ble.n	80190c0 <__kernel_rem_pio2+0x250>
 8018fe4:	1e62      	subs	r2, r4, #1
 8018fe6:	ab0e      	add	r3, sp, #56	; 0x38
 8018fe8:	9d04      	ldr	r5, [sp, #16]
 8018fea:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8018fee:	f1ca 0118 	rsb	r1, sl, #24
 8018ff2:	fa40 f301 	asr.w	r3, r0, r1
 8018ff6:	441d      	add	r5, r3
 8018ff8:	408b      	lsls	r3, r1
 8018ffa:	1ac0      	subs	r0, r0, r3
 8018ffc:	ab0e      	add	r3, sp, #56	; 0x38
 8018ffe:	9504      	str	r5, [sp, #16]
 8019000:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8019004:	f1ca 0317 	rsb	r3, sl, #23
 8019008:	fa40 fb03 	asr.w	fp, r0, r3
 801900c:	f1bb 0f00 	cmp.w	fp, #0
 8019010:	dd65      	ble.n	80190de <__kernel_rem_pio2+0x26e>
 8019012:	9b04      	ldr	r3, [sp, #16]
 8019014:	2200      	movs	r2, #0
 8019016:	3301      	adds	r3, #1
 8019018:	9304      	str	r3, [sp, #16]
 801901a:	4615      	mov	r5, r2
 801901c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8019020:	4294      	cmp	r4, r2
 8019022:	f300 809c 	bgt.w	801915e <__kernel_rem_pio2+0x2ee>
 8019026:	f1ba 0f00 	cmp.w	sl, #0
 801902a:	dd07      	ble.n	801903c <__kernel_rem_pio2+0x1cc>
 801902c:	f1ba 0f01 	cmp.w	sl, #1
 8019030:	f000 80c0 	beq.w	80191b4 <__kernel_rem_pio2+0x344>
 8019034:	f1ba 0f02 	cmp.w	sl, #2
 8019038:	f000 80c6 	beq.w	80191c8 <__kernel_rem_pio2+0x358>
 801903c:	f1bb 0f02 	cmp.w	fp, #2
 8019040:	d14d      	bne.n	80190de <__kernel_rem_pio2+0x26e>
 8019042:	4632      	mov	r2, r6
 8019044:	463b      	mov	r3, r7
 8019046:	4956      	ldr	r1, [pc, #344]	; (80191a0 <__kernel_rem_pio2+0x330>)
 8019048:	2000      	movs	r0, #0
 801904a:	f7e7 f935 	bl	80002b8 <__aeabi_dsub>
 801904e:	4606      	mov	r6, r0
 8019050:	460f      	mov	r7, r1
 8019052:	2d00      	cmp	r5, #0
 8019054:	d043      	beq.n	80190de <__kernel_rem_pio2+0x26e>
 8019056:	4650      	mov	r0, sl
 8019058:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8019190 <__kernel_rem_pio2+0x320>
 801905c:	f000 fba0 	bl	80197a0 <scalbn>
 8019060:	4630      	mov	r0, r6
 8019062:	4639      	mov	r1, r7
 8019064:	ec53 2b10 	vmov	r2, r3, d0
 8019068:	f7e7 f926 	bl	80002b8 <__aeabi_dsub>
 801906c:	4606      	mov	r6, r0
 801906e:	460f      	mov	r7, r1
 8019070:	e035      	b.n	80190de <__kernel_rem_pio2+0x26e>
 8019072:	4b4c      	ldr	r3, [pc, #304]	; (80191a4 <__kernel_rem_pio2+0x334>)
 8019074:	2200      	movs	r2, #0
 8019076:	4630      	mov	r0, r6
 8019078:	4639      	mov	r1, r7
 801907a:	f7e7 fad5 	bl	8000628 <__aeabi_dmul>
 801907e:	f7e7 fd83 	bl	8000b88 <__aeabi_d2iz>
 8019082:	f7e7 fa67 	bl	8000554 <__aeabi_i2d>
 8019086:	4602      	mov	r2, r0
 8019088:	460b      	mov	r3, r1
 801908a:	ec43 2b18 	vmov	d8, r2, r3
 801908e:	4b46      	ldr	r3, [pc, #280]	; (80191a8 <__kernel_rem_pio2+0x338>)
 8019090:	2200      	movs	r2, #0
 8019092:	f7e7 fac9 	bl	8000628 <__aeabi_dmul>
 8019096:	4602      	mov	r2, r0
 8019098:	460b      	mov	r3, r1
 801909a:	4630      	mov	r0, r6
 801909c:	4639      	mov	r1, r7
 801909e:	f7e7 f90b 	bl	80002b8 <__aeabi_dsub>
 80190a2:	f7e7 fd71 	bl	8000b88 <__aeabi_d2iz>
 80190a6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80190aa:	f84b 0b04 	str.w	r0, [fp], #4
 80190ae:	ec51 0b18 	vmov	r0, r1, d8
 80190b2:	f7e7 f903 	bl	80002bc <__adddf3>
 80190b6:	f109 39ff 	add.w	r9, r9, #4294967295
 80190ba:	4606      	mov	r6, r0
 80190bc:	460f      	mov	r7, r1
 80190be:	e75b      	b.n	8018f78 <__kernel_rem_pio2+0x108>
 80190c0:	d106      	bne.n	80190d0 <__kernel_rem_pio2+0x260>
 80190c2:	1e63      	subs	r3, r4, #1
 80190c4:	aa0e      	add	r2, sp, #56	; 0x38
 80190c6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80190ca:	ea4f 5be0 	mov.w	fp, r0, asr #23
 80190ce:	e79d      	b.n	801900c <__kernel_rem_pio2+0x19c>
 80190d0:	4b36      	ldr	r3, [pc, #216]	; (80191ac <__kernel_rem_pio2+0x33c>)
 80190d2:	2200      	movs	r2, #0
 80190d4:	f7e7 fd2e 	bl	8000b34 <__aeabi_dcmpge>
 80190d8:	2800      	cmp	r0, #0
 80190da:	d13d      	bne.n	8019158 <__kernel_rem_pio2+0x2e8>
 80190dc:	4683      	mov	fp, r0
 80190de:	2200      	movs	r2, #0
 80190e0:	2300      	movs	r3, #0
 80190e2:	4630      	mov	r0, r6
 80190e4:	4639      	mov	r1, r7
 80190e6:	f7e7 fd07 	bl	8000af8 <__aeabi_dcmpeq>
 80190ea:	2800      	cmp	r0, #0
 80190ec:	f000 80c0 	beq.w	8019270 <__kernel_rem_pio2+0x400>
 80190f0:	1e65      	subs	r5, r4, #1
 80190f2:	462b      	mov	r3, r5
 80190f4:	2200      	movs	r2, #0
 80190f6:	9902      	ldr	r1, [sp, #8]
 80190f8:	428b      	cmp	r3, r1
 80190fa:	da6c      	bge.n	80191d6 <__kernel_rem_pio2+0x366>
 80190fc:	2a00      	cmp	r2, #0
 80190fe:	f000 8089 	beq.w	8019214 <__kernel_rem_pio2+0x3a4>
 8019102:	ab0e      	add	r3, sp, #56	; 0x38
 8019104:	f1aa 0a18 	sub.w	sl, sl, #24
 8019108:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801910c:	2b00      	cmp	r3, #0
 801910e:	f000 80ad 	beq.w	801926c <__kernel_rem_pio2+0x3fc>
 8019112:	4650      	mov	r0, sl
 8019114:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8019190 <__kernel_rem_pio2+0x320>
 8019118:	f000 fb42 	bl	80197a0 <scalbn>
 801911c:	ab9a      	add	r3, sp, #616	; 0x268
 801911e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8019122:	ec57 6b10 	vmov	r6, r7, d0
 8019126:	00ec      	lsls	r4, r5, #3
 8019128:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 801912c:	46aa      	mov	sl, r5
 801912e:	f1ba 0f00 	cmp.w	sl, #0
 8019132:	f280 80d6 	bge.w	80192e2 <__kernel_rem_pio2+0x472>
 8019136:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8019188 <__kernel_rem_pio2+0x318>
 801913a:	462e      	mov	r6, r5
 801913c:	2e00      	cmp	r6, #0
 801913e:	f2c0 8104 	blt.w	801934a <__kernel_rem_pio2+0x4da>
 8019142:	ab72      	add	r3, sp, #456	; 0x1c8
 8019144:	ed8d 8b06 	vstr	d8, [sp, #24]
 8019148:	f8df a064 	ldr.w	sl, [pc, #100]	; 80191b0 <__kernel_rem_pio2+0x340>
 801914c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8019150:	f04f 0800 	mov.w	r8, #0
 8019154:	1baf      	subs	r7, r5, r6
 8019156:	e0ea      	b.n	801932e <__kernel_rem_pio2+0x4be>
 8019158:	f04f 0b02 	mov.w	fp, #2
 801915c:	e759      	b.n	8019012 <__kernel_rem_pio2+0x1a2>
 801915e:	f8d8 3000 	ldr.w	r3, [r8]
 8019162:	b955      	cbnz	r5, 801917a <__kernel_rem_pio2+0x30a>
 8019164:	b123      	cbz	r3, 8019170 <__kernel_rem_pio2+0x300>
 8019166:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801916a:	f8c8 3000 	str.w	r3, [r8]
 801916e:	2301      	movs	r3, #1
 8019170:	3201      	adds	r2, #1
 8019172:	f108 0804 	add.w	r8, r8, #4
 8019176:	461d      	mov	r5, r3
 8019178:	e752      	b.n	8019020 <__kernel_rem_pio2+0x1b0>
 801917a:	1acb      	subs	r3, r1, r3
 801917c:	f8c8 3000 	str.w	r3, [r8]
 8019180:	462b      	mov	r3, r5
 8019182:	e7f5      	b.n	8019170 <__kernel_rem_pio2+0x300>
 8019184:	f3af 8000 	nop.w
	...
 8019194:	3ff00000 	.word	0x3ff00000
 8019198:	0801a7f0 	.word	0x0801a7f0
 801919c:	40200000 	.word	0x40200000
 80191a0:	3ff00000 	.word	0x3ff00000
 80191a4:	3e700000 	.word	0x3e700000
 80191a8:	41700000 	.word	0x41700000
 80191ac:	3fe00000 	.word	0x3fe00000
 80191b0:	0801a7b0 	.word	0x0801a7b0
 80191b4:	1e62      	subs	r2, r4, #1
 80191b6:	ab0e      	add	r3, sp, #56	; 0x38
 80191b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80191bc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80191c0:	a90e      	add	r1, sp, #56	; 0x38
 80191c2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80191c6:	e739      	b.n	801903c <__kernel_rem_pio2+0x1cc>
 80191c8:	1e62      	subs	r2, r4, #1
 80191ca:	ab0e      	add	r3, sp, #56	; 0x38
 80191cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80191d0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80191d4:	e7f4      	b.n	80191c0 <__kernel_rem_pio2+0x350>
 80191d6:	a90e      	add	r1, sp, #56	; 0x38
 80191d8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80191dc:	3b01      	subs	r3, #1
 80191de:	430a      	orrs	r2, r1
 80191e0:	e789      	b.n	80190f6 <__kernel_rem_pio2+0x286>
 80191e2:	3301      	adds	r3, #1
 80191e4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80191e8:	2900      	cmp	r1, #0
 80191ea:	d0fa      	beq.n	80191e2 <__kernel_rem_pio2+0x372>
 80191ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80191ee:	f502 721a 	add.w	r2, r2, #616	; 0x268
 80191f2:	446a      	add	r2, sp
 80191f4:	3a98      	subs	r2, #152	; 0x98
 80191f6:	920a      	str	r2, [sp, #40]	; 0x28
 80191f8:	9a08      	ldr	r2, [sp, #32]
 80191fa:	18e3      	adds	r3, r4, r3
 80191fc:	18a5      	adds	r5, r4, r2
 80191fe:	aa22      	add	r2, sp, #136	; 0x88
 8019200:	f104 0801 	add.w	r8, r4, #1
 8019204:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8019208:	9304      	str	r3, [sp, #16]
 801920a:	9b04      	ldr	r3, [sp, #16]
 801920c:	4543      	cmp	r3, r8
 801920e:	da04      	bge.n	801921a <__kernel_rem_pio2+0x3aa>
 8019210:	461c      	mov	r4, r3
 8019212:	e6a3      	b.n	8018f5c <__kernel_rem_pio2+0xec>
 8019214:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019216:	2301      	movs	r3, #1
 8019218:	e7e4      	b.n	80191e4 <__kernel_rem_pio2+0x374>
 801921a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801921c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8019220:	f7e7 f998 	bl	8000554 <__aeabi_i2d>
 8019224:	e8e5 0102 	strd	r0, r1, [r5], #8
 8019228:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801922a:	46ab      	mov	fp, r5
 801922c:	461c      	mov	r4, r3
 801922e:	f04f 0900 	mov.w	r9, #0
 8019232:	2600      	movs	r6, #0
 8019234:	2700      	movs	r7, #0
 8019236:	9b06      	ldr	r3, [sp, #24]
 8019238:	4599      	cmp	r9, r3
 801923a:	dd06      	ble.n	801924a <__kernel_rem_pio2+0x3da>
 801923c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801923e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8019242:	f108 0801 	add.w	r8, r8, #1
 8019246:	930a      	str	r3, [sp, #40]	; 0x28
 8019248:	e7df      	b.n	801920a <__kernel_rem_pio2+0x39a>
 801924a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801924e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8019252:	f7e7 f9e9 	bl	8000628 <__aeabi_dmul>
 8019256:	4602      	mov	r2, r0
 8019258:	460b      	mov	r3, r1
 801925a:	4630      	mov	r0, r6
 801925c:	4639      	mov	r1, r7
 801925e:	f7e7 f82d 	bl	80002bc <__adddf3>
 8019262:	f109 0901 	add.w	r9, r9, #1
 8019266:	4606      	mov	r6, r0
 8019268:	460f      	mov	r7, r1
 801926a:	e7e4      	b.n	8019236 <__kernel_rem_pio2+0x3c6>
 801926c:	3d01      	subs	r5, #1
 801926e:	e748      	b.n	8019102 <__kernel_rem_pio2+0x292>
 8019270:	ec47 6b10 	vmov	d0, r6, r7
 8019274:	f1ca 0000 	rsb	r0, sl, #0
 8019278:	f000 fa92 	bl	80197a0 <scalbn>
 801927c:	ec57 6b10 	vmov	r6, r7, d0
 8019280:	4ba0      	ldr	r3, [pc, #640]	; (8019504 <__kernel_rem_pio2+0x694>)
 8019282:	ee10 0a10 	vmov	r0, s0
 8019286:	2200      	movs	r2, #0
 8019288:	4639      	mov	r1, r7
 801928a:	f7e7 fc53 	bl	8000b34 <__aeabi_dcmpge>
 801928e:	b1f8      	cbz	r0, 80192d0 <__kernel_rem_pio2+0x460>
 8019290:	4b9d      	ldr	r3, [pc, #628]	; (8019508 <__kernel_rem_pio2+0x698>)
 8019292:	2200      	movs	r2, #0
 8019294:	4630      	mov	r0, r6
 8019296:	4639      	mov	r1, r7
 8019298:	f7e7 f9c6 	bl	8000628 <__aeabi_dmul>
 801929c:	f7e7 fc74 	bl	8000b88 <__aeabi_d2iz>
 80192a0:	4680      	mov	r8, r0
 80192a2:	f7e7 f957 	bl	8000554 <__aeabi_i2d>
 80192a6:	4b97      	ldr	r3, [pc, #604]	; (8019504 <__kernel_rem_pio2+0x694>)
 80192a8:	2200      	movs	r2, #0
 80192aa:	f7e7 f9bd 	bl	8000628 <__aeabi_dmul>
 80192ae:	460b      	mov	r3, r1
 80192b0:	4602      	mov	r2, r0
 80192b2:	4639      	mov	r1, r7
 80192b4:	4630      	mov	r0, r6
 80192b6:	f7e6 ffff 	bl	80002b8 <__aeabi_dsub>
 80192ba:	f7e7 fc65 	bl	8000b88 <__aeabi_d2iz>
 80192be:	1c65      	adds	r5, r4, #1
 80192c0:	ab0e      	add	r3, sp, #56	; 0x38
 80192c2:	f10a 0a18 	add.w	sl, sl, #24
 80192c6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80192ca:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80192ce:	e720      	b.n	8019112 <__kernel_rem_pio2+0x2a2>
 80192d0:	4630      	mov	r0, r6
 80192d2:	4639      	mov	r1, r7
 80192d4:	f7e7 fc58 	bl	8000b88 <__aeabi_d2iz>
 80192d8:	ab0e      	add	r3, sp, #56	; 0x38
 80192da:	4625      	mov	r5, r4
 80192dc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80192e0:	e717      	b.n	8019112 <__kernel_rem_pio2+0x2a2>
 80192e2:	ab0e      	add	r3, sp, #56	; 0x38
 80192e4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80192e8:	f7e7 f934 	bl	8000554 <__aeabi_i2d>
 80192ec:	4632      	mov	r2, r6
 80192ee:	463b      	mov	r3, r7
 80192f0:	f7e7 f99a 	bl	8000628 <__aeabi_dmul>
 80192f4:	4b84      	ldr	r3, [pc, #528]	; (8019508 <__kernel_rem_pio2+0x698>)
 80192f6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 80192fa:	2200      	movs	r2, #0
 80192fc:	4630      	mov	r0, r6
 80192fe:	4639      	mov	r1, r7
 8019300:	f7e7 f992 	bl	8000628 <__aeabi_dmul>
 8019304:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019308:	4606      	mov	r6, r0
 801930a:	460f      	mov	r7, r1
 801930c:	e70f      	b.n	801912e <__kernel_rem_pio2+0x2be>
 801930e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8019312:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8019316:	f7e7 f987 	bl	8000628 <__aeabi_dmul>
 801931a:	4602      	mov	r2, r0
 801931c:	460b      	mov	r3, r1
 801931e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019322:	f7e6 ffcb 	bl	80002bc <__adddf3>
 8019326:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801932a:	f108 0801 	add.w	r8, r8, #1
 801932e:	9b02      	ldr	r3, [sp, #8]
 8019330:	4598      	cmp	r8, r3
 8019332:	dc01      	bgt.n	8019338 <__kernel_rem_pio2+0x4c8>
 8019334:	45b8      	cmp	r8, r7
 8019336:	ddea      	ble.n	801930e <__kernel_rem_pio2+0x49e>
 8019338:	ed9d 7b06 	vldr	d7, [sp, #24]
 801933c:	ab4a      	add	r3, sp, #296	; 0x128
 801933e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8019342:	ed87 7b00 	vstr	d7, [r7]
 8019346:	3e01      	subs	r6, #1
 8019348:	e6f8      	b.n	801913c <__kernel_rem_pio2+0x2cc>
 801934a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801934c:	2b02      	cmp	r3, #2
 801934e:	dc0b      	bgt.n	8019368 <__kernel_rem_pio2+0x4f8>
 8019350:	2b00      	cmp	r3, #0
 8019352:	dc35      	bgt.n	80193c0 <__kernel_rem_pio2+0x550>
 8019354:	d059      	beq.n	801940a <__kernel_rem_pio2+0x59a>
 8019356:	9b04      	ldr	r3, [sp, #16]
 8019358:	f003 0007 	and.w	r0, r3, #7
 801935c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8019360:	ecbd 8b02 	vpop	{d8}
 8019364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019368:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801936a:	2b03      	cmp	r3, #3
 801936c:	d1f3      	bne.n	8019356 <__kernel_rem_pio2+0x4e6>
 801936e:	ab4a      	add	r3, sp, #296	; 0x128
 8019370:	4423      	add	r3, r4
 8019372:	9306      	str	r3, [sp, #24]
 8019374:	461c      	mov	r4, r3
 8019376:	469a      	mov	sl, r3
 8019378:	9502      	str	r5, [sp, #8]
 801937a:	9b02      	ldr	r3, [sp, #8]
 801937c:	2b00      	cmp	r3, #0
 801937e:	f1aa 0a08 	sub.w	sl, sl, #8
 8019382:	dc6b      	bgt.n	801945c <__kernel_rem_pio2+0x5ec>
 8019384:	46aa      	mov	sl, r5
 8019386:	f1ba 0f01 	cmp.w	sl, #1
 801938a:	f1a4 0408 	sub.w	r4, r4, #8
 801938e:	f300 8085 	bgt.w	801949c <__kernel_rem_pio2+0x62c>
 8019392:	9c06      	ldr	r4, [sp, #24]
 8019394:	2000      	movs	r0, #0
 8019396:	3408      	adds	r4, #8
 8019398:	2100      	movs	r1, #0
 801939a:	2d01      	cmp	r5, #1
 801939c:	f300 809d 	bgt.w	80194da <__kernel_rem_pio2+0x66a>
 80193a0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80193a4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 80193a8:	f1bb 0f00 	cmp.w	fp, #0
 80193ac:	f040 809b 	bne.w	80194e6 <__kernel_rem_pio2+0x676>
 80193b0:	9b01      	ldr	r3, [sp, #4]
 80193b2:	e9c3 5600 	strd	r5, r6, [r3]
 80193b6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80193ba:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80193be:	e7ca      	b.n	8019356 <__kernel_rem_pio2+0x4e6>
 80193c0:	3408      	adds	r4, #8
 80193c2:	ab4a      	add	r3, sp, #296	; 0x128
 80193c4:	441c      	add	r4, r3
 80193c6:	462e      	mov	r6, r5
 80193c8:	2000      	movs	r0, #0
 80193ca:	2100      	movs	r1, #0
 80193cc:	2e00      	cmp	r6, #0
 80193ce:	da36      	bge.n	801943e <__kernel_rem_pio2+0x5ce>
 80193d0:	f1bb 0f00 	cmp.w	fp, #0
 80193d4:	d039      	beq.n	801944a <__kernel_rem_pio2+0x5da>
 80193d6:	4602      	mov	r2, r0
 80193d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80193dc:	9c01      	ldr	r4, [sp, #4]
 80193de:	e9c4 2300 	strd	r2, r3, [r4]
 80193e2:	4602      	mov	r2, r0
 80193e4:	460b      	mov	r3, r1
 80193e6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80193ea:	f7e6 ff65 	bl	80002b8 <__aeabi_dsub>
 80193ee:	ae4c      	add	r6, sp, #304	; 0x130
 80193f0:	2401      	movs	r4, #1
 80193f2:	42a5      	cmp	r5, r4
 80193f4:	da2c      	bge.n	8019450 <__kernel_rem_pio2+0x5e0>
 80193f6:	f1bb 0f00 	cmp.w	fp, #0
 80193fa:	d002      	beq.n	8019402 <__kernel_rem_pio2+0x592>
 80193fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019400:	4619      	mov	r1, r3
 8019402:	9b01      	ldr	r3, [sp, #4]
 8019404:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8019408:	e7a5      	b.n	8019356 <__kernel_rem_pio2+0x4e6>
 801940a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 801940e:	eb0d 0403 	add.w	r4, sp, r3
 8019412:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8019416:	2000      	movs	r0, #0
 8019418:	2100      	movs	r1, #0
 801941a:	2d00      	cmp	r5, #0
 801941c:	da09      	bge.n	8019432 <__kernel_rem_pio2+0x5c2>
 801941e:	f1bb 0f00 	cmp.w	fp, #0
 8019422:	d002      	beq.n	801942a <__kernel_rem_pio2+0x5ba>
 8019424:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019428:	4619      	mov	r1, r3
 801942a:	9b01      	ldr	r3, [sp, #4]
 801942c:	e9c3 0100 	strd	r0, r1, [r3]
 8019430:	e791      	b.n	8019356 <__kernel_rem_pio2+0x4e6>
 8019432:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8019436:	f7e6 ff41 	bl	80002bc <__adddf3>
 801943a:	3d01      	subs	r5, #1
 801943c:	e7ed      	b.n	801941a <__kernel_rem_pio2+0x5aa>
 801943e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8019442:	f7e6 ff3b 	bl	80002bc <__adddf3>
 8019446:	3e01      	subs	r6, #1
 8019448:	e7c0      	b.n	80193cc <__kernel_rem_pio2+0x55c>
 801944a:	4602      	mov	r2, r0
 801944c:	460b      	mov	r3, r1
 801944e:	e7c5      	b.n	80193dc <__kernel_rem_pio2+0x56c>
 8019450:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8019454:	f7e6 ff32 	bl	80002bc <__adddf3>
 8019458:	3401      	adds	r4, #1
 801945a:	e7ca      	b.n	80193f2 <__kernel_rem_pio2+0x582>
 801945c:	e9da 8900 	ldrd	r8, r9, [sl]
 8019460:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8019464:	9b02      	ldr	r3, [sp, #8]
 8019466:	3b01      	subs	r3, #1
 8019468:	9302      	str	r3, [sp, #8]
 801946a:	4632      	mov	r2, r6
 801946c:	463b      	mov	r3, r7
 801946e:	4640      	mov	r0, r8
 8019470:	4649      	mov	r1, r9
 8019472:	f7e6 ff23 	bl	80002bc <__adddf3>
 8019476:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801947a:	4602      	mov	r2, r0
 801947c:	460b      	mov	r3, r1
 801947e:	4640      	mov	r0, r8
 8019480:	4649      	mov	r1, r9
 8019482:	f7e6 ff19 	bl	80002b8 <__aeabi_dsub>
 8019486:	4632      	mov	r2, r6
 8019488:	463b      	mov	r3, r7
 801948a:	f7e6 ff17 	bl	80002bc <__adddf3>
 801948e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8019492:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8019496:	ed8a 7b00 	vstr	d7, [sl]
 801949a:	e76e      	b.n	801937a <__kernel_rem_pio2+0x50a>
 801949c:	e9d4 8900 	ldrd	r8, r9, [r4]
 80194a0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80194a4:	4640      	mov	r0, r8
 80194a6:	4632      	mov	r2, r6
 80194a8:	463b      	mov	r3, r7
 80194aa:	4649      	mov	r1, r9
 80194ac:	f7e6 ff06 	bl	80002bc <__adddf3>
 80194b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80194b4:	4602      	mov	r2, r0
 80194b6:	460b      	mov	r3, r1
 80194b8:	4640      	mov	r0, r8
 80194ba:	4649      	mov	r1, r9
 80194bc:	f7e6 fefc 	bl	80002b8 <__aeabi_dsub>
 80194c0:	4632      	mov	r2, r6
 80194c2:	463b      	mov	r3, r7
 80194c4:	f7e6 fefa 	bl	80002bc <__adddf3>
 80194c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80194cc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80194d0:	ed84 7b00 	vstr	d7, [r4]
 80194d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80194d8:	e755      	b.n	8019386 <__kernel_rem_pio2+0x516>
 80194da:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80194de:	f7e6 feed 	bl	80002bc <__adddf3>
 80194e2:	3d01      	subs	r5, #1
 80194e4:	e759      	b.n	801939a <__kernel_rem_pio2+0x52a>
 80194e6:	9b01      	ldr	r3, [sp, #4]
 80194e8:	9a01      	ldr	r2, [sp, #4]
 80194ea:	601d      	str	r5, [r3, #0]
 80194ec:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80194f0:	605c      	str	r4, [r3, #4]
 80194f2:	609f      	str	r7, [r3, #8]
 80194f4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80194f8:	60d3      	str	r3, [r2, #12]
 80194fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80194fe:	6110      	str	r0, [r2, #16]
 8019500:	6153      	str	r3, [r2, #20]
 8019502:	e728      	b.n	8019356 <__kernel_rem_pio2+0x4e6>
 8019504:	41700000 	.word	0x41700000
 8019508:	3e700000 	.word	0x3e700000
 801950c:	00000000 	.word	0x00000000

08019510 <__kernel_sin>:
 8019510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019514:	ed2d 8b04 	vpush	{d8-d9}
 8019518:	eeb0 8a41 	vmov.f32	s16, s2
 801951c:	eef0 8a61 	vmov.f32	s17, s3
 8019520:	ec55 4b10 	vmov	r4, r5, d0
 8019524:	b083      	sub	sp, #12
 8019526:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801952a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801952e:	9001      	str	r0, [sp, #4]
 8019530:	da06      	bge.n	8019540 <__kernel_sin+0x30>
 8019532:	ee10 0a10 	vmov	r0, s0
 8019536:	4629      	mov	r1, r5
 8019538:	f7e7 fb26 	bl	8000b88 <__aeabi_d2iz>
 801953c:	2800      	cmp	r0, #0
 801953e:	d051      	beq.n	80195e4 <__kernel_sin+0xd4>
 8019540:	4622      	mov	r2, r4
 8019542:	462b      	mov	r3, r5
 8019544:	4620      	mov	r0, r4
 8019546:	4629      	mov	r1, r5
 8019548:	f7e7 f86e 	bl	8000628 <__aeabi_dmul>
 801954c:	4682      	mov	sl, r0
 801954e:	468b      	mov	fp, r1
 8019550:	4602      	mov	r2, r0
 8019552:	460b      	mov	r3, r1
 8019554:	4620      	mov	r0, r4
 8019556:	4629      	mov	r1, r5
 8019558:	f7e7 f866 	bl	8000628 <__aeabi_dmul>
 801955c:	a341      	add	r3, pc, #260	; (adr r3, 8019664 <__kernel_sin+0x154>)
 801955e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019562:	4680      	mov	r8, r0
 8019564:	4689      	mov	r9, r1
 8019566:	4650      	mov	r0, sl
 8019568:	4659      	mov	r1, fp
 801956a:	f7e7 f85d 	bl	8000628 <__aeabi_dmul>
 801956e:	a33f      	add	r3, pc, #252	; (adr r3, 801966c <__kernel_sin+0x15c>)
 8019570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019574:	f7e6 fea0 	bl	80002b8 <__aeabi_dsub>
 8019578:	4652      	mov	r2, sl
 801957a:	465b      	mov	r3, fp
 801957c:	f7e7 f854 	bl	8000628 <__aeabi_dmul>
 8019580:	a33c      	add	r3, pc, #240	; (adr r3, 8019674 <__kernel_sin+0x164>)
 8019582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019586:	f7e6 fe99 	bl	80002bc <__adddf3>
 801958a:	4652      	mov	r2, sl
 801958c:	465b      	mov	r3, fp
 801958e:	f7e7 f84b 	bl	8000628 <__aeabi_dmul>
 8019592:	a33a      	add	r3, pc, #232	; (adr r3, 801967c <__kernel_sin+0x16c>)
 8019594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019598:	f7e6 fe8e 	bl	80002b8 <__aeabi_dsub>
 801959c:	4652      	mov	r2, sl
 801959e:	465b      	mov	r3, fp
 80195a0:	f7e7 f842 	bl	8000628 <__aeabi_dmul>
 80195a4:	a337      	add	r3, pc, #220	; (adr r3, 8019684 <__kernel_sin+0x174>)
 80195a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195aa:	f7e6 fe87 	bl	80002bc <__adddf3>
 80195ae:	9b01      	ldr	r3, [sp, #4]
 80195b0:	4606      	mov	r6, r0
 80195b2:	460f      	mov	r7, r1
 80195b4:	b9eb      	cbnz	r3, 80195f2 <__kernel_sin+0xe2>
 80195b6:	4602      	mov	r2, r0
 80195b8:	460b      	mov	r3, r1
 80195ba:	4650      	mov	r0, sl
 80195bc:	4659      	mov	r1, fp
 80195be:	f7e7 f833 	bl	8000628 <__aeabi_dmul>
 80195c2:	a325      	add	r3, pc, #148	; (adr r3, 8019658 <__kernel_sin+0x148>)
 80195c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195c8:	f7e6 fe76 	bl	80002b8 <__aeabi_dsub>
 80195cc:	4642      	mov	r2, r8
 80195ce:	464b      	mov	r3, r9
 80195d0:	f7e7 f82a 	bl	8000628 <__aeabi_dmul>
 80195d4:	4602      	mov	r2, r0
 80195d6:	460b      	mov	r3, r1
 80195d8:	4620      	mov	r0, r4
 80195da:	4629      	mov	r1, r5
 80195dc:	f7e6 fe6e 	bl	80002bc <__adddf3>
 80195e0:	4604      	mov	r4, r0
 80195e2:	460d      	mov	r5, r1
 80195e4:	ec45 4b10 	vmov	d0, r4, r5
 80195e8:	b003      	add	sp, #12
 80195ea:	ecbd 8b04 	vpop	{d8-d9}
 80195ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80195f2:	4b1b      	ldr	r3, [pc, #108]	; (8019660 <__kernel_sin+0x150>)
 80195f4:	ec51 0b18 	vmov	r0, r1, d8
 80195f8:	2200      	movs	r2, #0
 80195fa:	f7e7 f815 	bl	8000628 <__aeabi_dmul>
 80195fe:	4632      	mov	r2, r6
 8019600:	ec41 0b19 	vmov	d9, r0, r1
 8019604:	463b      	mov	r3, r7
 8019606:	4640      	mov	r0, r8
 8019608:	4649      	mov	r1, r9
 801960a:	f7e7 f80d 	bl	8000628 <__aeabi_dmul>
 801960e:	4602      	mov	r2, r0
 8019610:	460b      	mov	r3, r1
 8019612:	ec51 0b19 	vmov	r0, r1, d9
 8019616:	f7e6 fe4f 	bl	80002b8 <__aeabi_dsub>
 801961a:	4652      	mov	r2, sl
 801961c:	465b      	mov	r3, fp
 801961e:	f7e7 f803 	bl	8000628 <__aeabi_dmul>
 8019622:	ec53 2b18 	vmov	r2, r3, d8
 8019626:	f7e6 fe47 	bl	80002b8 <__aeabi_dsub>
 801962a:	a30b      	add	r3, pc, #44	; (adr r3, 8019658 <__kernel_sin+0x148>)
 801962c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019630:	4606      	mov	r6, r0
 8019632:	460f      	mov	r7, r1
 8019634:	4640      	mov	r0, r8
 8019636:	4649      	mov	r1, r9
 8019638:	f7e6 fff6 	bl	8000628 <__aeabi_dmul>
 801963c:	4602      	mov	r2, r0
 801963e:	460b      	mov	r3, r1
 8019640:	4630      	mov	r0, r6
 8019642:	4639      	mov	r1, r7
 8019644:	f7e6 fe3a 	bl	80002bc <__adddf3>
 8019648:	4602      	mov	r2, r0
 801964a:	460b      	mov	r3, r1
 801964c:	4620      	mov	r0, r4
 801964e:	4629      	mov	r1, r5
 8019650:	f7e6 fe32 	bl	80002b8 <__aeabi_dsub>
 8019654:	e7c4      	b.n	80195e0 <__kernel_sin+0xd0>
 8019656:	bf00      	nop
 8019658:	55555549 	.word	0x55555549
 801965c:	3fc55555 	.word	0x3fc55555
 8019660:	3fe00000 	.word	0x3fe00000
 8019664:	5acfd57c 	.word	0x5acfd57c
 8019668:	3de5d93a 	.word	0x3de5d93a
 801966c:	8a2b9ceb 	.word	0x8a2b9ceb
 8019670:	3e5ae5e6 	.word	0x3e5ae5e6
 8019674:	57b1fe7d 	.word	0x57b1fe7d
 8019678:	3ec71de3 	.word	0x3ec71de3
 801967c:	19c161d5 	.word	0x19c161d5
 8019680:	3f2a01a0 	.word	0x3f2a01a0
 8019684:	1110f8a6 	.word	0x1110f8a6
 8019688:	3f811111 	.word	0x3f811111

0801968c <fabs>:
 801968c:	ec51 0b10 	vmov	r0, r1, d0
 8019690:	ee10 2a10 	vmov	r2, s0
 8019694:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019698:	ec43 2b10 	vmov	d0, r2, r3
 801969c:	4770      	bx	lr
	...

080196a0 <floor>:
 80196a0:	ec51 0b10 	vmov	r0, r1, d0
 80196a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80196a8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80196ac:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80196b0:	2e13      	cmp	r6, #19
 80196b2:	ee10 5a10 	vmov	r5, s0
 80196b6:	ee10 8a10 	vmov	r8, s0
 80196ba:	460c      	mov	r4, r1
 80196bc:	dc32      	bgt.n	8019724 <floor+0x84>
 80196be:	2e00      	cmp	r6, #0
 80196c0:	da14      	bge.n	80196ec <floor+0x4c>
 80196c2:	a333      	add	r3, pc, #204	; (adr r3, 8019790 <floor+0xf0>)
 80196c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196c8:	f7e6 fdf8 	bl	80002bc <__adddf3>
 80196cc:	2200      	movs	r2, #0
 80196ce:	2300      	movs	r3, #0
 80196d0:	f7e7 fa3a 	bl	8000b48 <__aeabi_dcmpgt>
 80196d4:	b138      	cbz	r0, 80196e6 <floor+0x46>
 80196d6:	2c00      	cmp	r4, #0
 80196d8:	da57      	bge.n	801978a <floor+0xea>
 80196da:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80196de:	431d      	orrs	r5, r3
 80196e0:	d001      	beq.n	80196e6 <floor+0x46>
 80196e2:	4c2d      	ldr	r4, [pc, #180]	; (8019798 <floor+0xf8>)
 80196e4:	2500      	movs	r5, #0
 80196e6:	4621      	mov	r1, r4
 80196e8:	4628      	mov	r0, r5
 80196ea:	e025      	b.n	8019738 <floor+0x98>
 80196ec:	4f2b      	ldr	r7, [pc, #172]	; (801979c <floor+0xfc>)
 80196ee:	4137      	asrs	r7, r6
 80196f0:	ea01 0307 	and.w	r3, r1, r7
 80196f4:	4303      	orrs	r3, r0
 80196f6:	d01f      	beq.n	8019738 <floor+0x98>
 80196f8:	a325      	add	r3, pc, #148	; (adr r3, 8019790 <floor+0xf0>)
 80196fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196fe:	f7e6 fddd 	bl	80002bc <__adddf3>
 8019702:	2200      	movs	r2, #0
 8019704:	2300      	movs	r3, #0
 8019706:	f7e7 fa1f 	bl	8000b48 <__aeabi_dcmpgt>
 801970a:	2800      	cmp	r0, #0
 801970c:	d0eb      	beq.n	80196e6 <floor+0x46>
 801970e:	2c00      	cmp	r4, #0
 8019710:	bfbe      	ittt	lt
 8019712:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8019716:	fa43 f606 	asrlt.w	r6, r3, r6
 801971a:	19a4      	addlt	r4, r4, r6
 801971c:	ea24 0407 	bic.w	r4, r4, r7
 8019720:	2500      	movs	r5, #0
 8019722:	e7e0      	b.n	80196e6 <floor+0x46>
 8019724:	2e33      	cmp	r6, #51	; 0x33
 8019726:	dd0b      	ble.n	8019740 <floor+0xa0>
 8019728:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801972c:	d104      	bne.n	8019738 <floor+0x98>
 801972e:	ee10 2a10 	vmov	r2, s0
 8019732:	460b      	mov	r3, r1
 8019734:	f7e6 fdc2 	bl	80002bc <__adddf3>
 8019738:	ec41 0b10 	vmov	d0, r0, r1
 801973c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019740:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8019744:	f04f 33ff 	mov.w	r3, #4294967295
 8019748:	fa23 f707 	lsr.w	r7, r3, r7
 801974c:	4207      	tst	r7, r0
 801974e:	d0f3      	beq.n	8019738 <floor+0x98>
 8019750:	a30f      	add	r3, pc, #60	; (adr r3, 8019790 <floor+0xf0>)
 8019752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019756:	f7e6 fdb1 	bl	80002bc <__adddf3>
 801975a:	2200      	movs	r2, #0
 801975c:	2300      	movs	r3, #0
 801975e:	f7e7 f9f3 	bl	8000b48 <__aeabi_dcmpgt>
 8019762:	2800      	cmp	r0, #0
 8019764:	d0bf      	beq.n	80196e6 <floor+0x46>
 8019766:	2c00      	cmp	r4, #0
 8019768:	da02      	bge.n	8019770 <floor+0xd0>
 801976a:	2e14      	cmp	r6, #20
 801976c:	d103      	bne.n	8019776 <floor+0xd6>
 801976e:	3401      	adds	r4, #1
 8019770:	ea25 0507 	bic.w	r5, r5, r7
 8019774:	e7b7      	b.n	80196e6 <floor+0x46>
 8019776:	2301      	movs	r3, #1
 8019778:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801977c:	fa03 f606 	lsl.w	r6, r3, r6
 8019780:	4435      	add	r5, r6
 8019782:	4545      	cmp	r5, r8
 8019784:	bf38      	it	cc
 8019786:	18e4      	addcc	r4, r4, r3
 8019788:	e7f2      	b.n	8019770 <floor+0xd0>
 801978a:	2500      	movs	r5, #0
 801978c:	462c      	mov	r4, r5
 801978e:	e7aa      	b.n	80196e6 <floor+0x46>
 8019790:	8800759c 	.word	0x8800759c
 8019794:	7e37e43c 	.word	0x7e37e43c
 8019798:	bff00000 	.word	0xbff00000
 801979c:	000fffff 	.word	0x000fffff

080197a0 <scalbn>:
 80197a0:	b570      	push	{r4, r5, r6, lr}
 80197a2:	ec55 4b10 	vmov	r4, r5, d0
 80197a6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80197aa:	4606      	mov	r6, r0
 80197ac:	462b      	mov	r3, r5
 80197ae:	b99a      	cbnz	r2, 80197d8 <scalbn+0x38>
 80197b0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80197b4:	4323      	orrs	r3, r4
 80197b6:	d036      	beq.n	8019826 <scalbn+0x86>
 80197b8:	4b39      	ldr	r3, [pc, #228]	; (80198a0 <scalbn+0x100>)
 80197ba:	4629      	mov	r1, r5
 80197bc:	ee10 0a10 	vmov	r0, s0
 80197c0:	2200      	movs	r2, #0
 80197c2:	f7e6 ff31 	bl	8000628 <__aeabi_dmul>
 80197c6:	4b37      	ldr	r3, [pc, #220]	; (80198a4 <scalbn+0x104>)
 80197c8:	429e      	cmp	r6, r3
 80197ca:	4604      	mov	r4, r0
 80197cc:	460d      	mov	r5, r1
 80197ce:	da10      	bge.n	80197f2 <scalbn+0x52>
 80197d0:	a32b      	add	r3, pc, #172	; (adr r3, 8019880 <scalbn+0xe0>)
 80197d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197d6:	e03a      	b.n	801984e <scalbn+0xae>
 80197d8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80197dc:	428a      	cmp	r2, r1
 80197de:	d10c      	bne.n	80197fa <scalbn+0x5a>
 80197e0:	ee10 2a10 	vmov	r2, s0
 80197e4:	4620      	mov	r0, r4
 80197e6:	4629      	mov	r1, r5
 80197e8:	f7e6 fd68 	bl	80002bc <__adddf3>
 80197ec:	4604      	mov	r4, r0
 80197ee:	460d      	mov	r5, r1
 80197f0:	e019      	b.n	8019826 <scalbn+0x86>
 80197f2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80197f6:	460b      	mov	r3, r1
 80197f8:	3a36      	subs	r2, #54	; 0x36
 80197fa:	4432      	add	r2, r6
 80197fc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8019800:	428a      	cmp	r2, r1
 8019802:	dd08      	ble.n	8019816 <scalbn+0x76>
 8019804:	2d00      	cmp	r5, #0
 8019806:	a120      	add	r1, pc, #128	; (adr r1, 8019888 <scalbn+0xe8>)
 8019808:	e9d1 0100 	ldrd	r0, r1, [r1]
 801980c:	da1c      	bge.n	8019848 <scalbn+0xa8>
 801980e:	a120      	add	r1, pc, #128	; (adr r1, 8019890 <scalbn+0xf0>)
 8019810:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019814:	e018      	b.n	8019848 <scalbn+0xa8>
 8019816:	2a00      	cmp	r2, #0
 8019818:	dd08      	ble.n	801982c <scalbn+0x8c>
 801981a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801981e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8019822:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8019826:	ec45 4b10 	vmov	d0, r4, r5
 801982a:	bd70      	pop	{r4, r5, r6, pc}
 801982c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8019830:	da19      	bge.n	8019866 <scalbn+0xc6>
 8019832:	f24c 3350 	movw	r3, #50000	; 0xc350
 8019836:	429e      	cmp	r6, r3
 8019838:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801983c:	dd0a      	ble.n	8019854 <scalbn+0xb4>
 801983e:	a112      	add	r1, pc, #72	; (adr r1, 8019888 <scalbn+0xe8>)
 8019840:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019844:	2b00      	cmp	r3, #0
 8019846:	d1e2      	bne.n	801980e <scalbn+0x6e>
 8019848:	a30f      	add	r3, pc, #60	; (adr r3, 8019888 <scalbn+0xe8>)
 801984a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801984e:	f7e6 feeb 	bl	8000628 <__aeabi_dmul>
 8019852:	e7cb      	b.n	80197ec <scalbn+0x4c>
 8019854:	a10a      	add	r1, pc, #40	; (adr r1, 8019880 <scalbn+0xe0>)
 8019856:	e9d1 0100 	ldrd	r0, r1, [r1]
 801985a:	2b00      	cmp	r3, #0
 801985c:	d0b8      	beq.n	80197d0 <scalbn+0x30>
 801985e:	a10e      	add	r1, pc, #56	; (adr r1, 8019898 <scalbn+0xf8>)
 8019860:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019864:	e7b4      	b.n	80197d0 <scalbn+0x30>
 8019866:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801986a:	3236      	adds	r2, #54	; 0x36
 801986c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8019870:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8019874:	4620      	mov	r0, r4
 8019876:	4b0c      	ldr	r3, [pc, #48]	; (80198a8 <scalbn+0x108>)
 8019878:	2200      	movs	r2, #0
 801987a:	e7e8      	b.n	801984e <scalbn+0xae>
 801987c:	f3af 8000 	nop.w
 8019880:	c2f8f359 	.word	0xc2f8f359
 8019884:	01a56e1f 	.word	0x01a56e1f
 8019888:	8800759c 	.word	0x8800759c
 801988c:	7e37e43c 	.word	0x7e37e43c
 8019890:	8800759c 	.word	0x8800759c
 8019894:	fe37e43c 	.word	0xfe37e43c
 8019898:	c2f8f359 	.word	0xc2f8f359
 801989c:	81a56e1f 	.word	0x81a56e1f
 80198a0:	43500000 	.word	0x43500000
 80198a4:	ffff3cb0 	.word	0xffff3cb0
 80198a8:	3c900000 	.word	0x3c900000

080198ac <_init>:
 80198ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80198ae:	bf00      	nop
 80198b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80198b2:	bc08      	pop	{r3}
 80198b4:	469e      	mov	lr, r3
 80198b6:	4770      	bx	lr

080198b8 <_fini>:
 80198b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80198ba:	bf00      	nop
 80198bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80198be:	bc08      	pop	{r3}
 80198c0:	469e      	mov	lr, r3
 80198c2:	4770      	bx	lr
