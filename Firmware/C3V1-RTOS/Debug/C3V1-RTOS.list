
C3V1-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001fd14  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005c10  0801fed8  0801fed8  0002fed8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08025ae8  08025ae8  00040278  2**0
                  CONTENTS
  4 .ARM          00000008  08025ae8  08025ae8  00035ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08025af0  08025af0  00040278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08025af0  08025af0  00035af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08025af4  08025af4  00035af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000278  20000000  08025af8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00037190  20000278  08025d70  00040278  2**2
                  ALLOC
 10 ._user_heap_stack 00001800  20037408  08025d70  00047408  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040278  2**0
                  CONTENTS, READONLY
 12 .debug_info   000341f7  00000000  00000000  000402a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000072b3  00000000  00000000  0007449f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002570  00000000  00000000  0007b758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003623d  00000000  00000000  0007dcc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00033775  00000000  00000000  000b3f05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0012d81c  00000000  00000000  000e767a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00214e96  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00002228  00000000  00000000  00214ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000b040  00000000  00000000  00217110  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000278 	.word	0x20000278
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0801febc 	.word	0x0801febc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000027c 	.word	0x2000027c
 80001fc:	0801febc 	.word	0x0801febc

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_ldivmod>:
 8000cb8:	b97b      	cbnz	r3, 8000cda <__aeabi_ldivmod+0x22>
 8000cba:	b972      	cbnz	r2, 8000cda <__aeabi_ldivmod+0x22>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bfbe      	ittt	lt
 8000cc0:	2000      	movlt	r0, #0
 8000cc2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cc6:	e006      	blt.n	8000cd6 <__aeabi_ldivmod+0x1e>
 8000cc8:	bf08      	it	eq
 8000cca:	2800      	cmpeq	r0, #0
 8000ccc:	bf1c      	itt	ne
 8000cce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cd2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd6:	f000 b9f5 	b.w	80010c4 <__aeabi_idiv0>
 8000cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	db09      	blt.n	8000cfa <__aeabi_ldivmod+0x42>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db1a      	blt.n	8000d20 <__aeabi_ldivmod+0x68>
 8000cea:	f000 f883 	bl	8000df4 <__udivmoddi4>
 8000cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf6:	b004      	add	sp, #16
 8000cf8:	4770      	bx	lr
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db1b      	blt.n	8000d3c <__aeabi_ldivmod+0x84>
 8000d04:	f000 f876 	bl	8000df4 <__udivmoddi4>
 8000d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d10:	b004      	add	sp, #16
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	4252      	negs	r2, r2
 8000d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f865 	bl	8000df4 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4240      	negs	r0, r0
 8000d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3a:	4770      	bx	lr
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d42:	f000 f857 	bl	8000df4 <__udivmoddi4>
 8000d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d4e:	b004      	add	sp, #16
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_uldivmod>:
 8000d58:	b953      	cbnz	r3, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5a:	b94a      	cbnz	r2, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5c:	2900      	cmp	r1, #0
 8000d5e:	bf08      	it	eq
 8000d60:	2800      	cmpeq	r0, #0
 8000d62:	bf1c      	itt	ne
 8000d64:	f04f 31ff 	movne.w	r1, #4294967295
 8000d68:	f04f 30ff 	movne.w	r0, #4294967295
 8000d6c:	f000 b9aa 	b.w	80010c4 <__aeabi_idiv0>
 8000d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d78:	f000 f83c 	bl	8000df4 <__udivmoddi4>
 8000d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d84:	b004      	add	sp, #16
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_d2lz>:
 8000d88:	b538      	push	{r3, r4, r5, lr}
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	4604      	mov	r4, r0
 8000d90:	460d      	mov	r5, r1
 8000d92:	f7ff febb 	bl	8000b0c <__aeabi_dcmplt>
 8000d96:	b928      	cbnz	r0, 8000da4 <__aeabi_d2lz+0x1c>
 8000d98:	4620      	mov	r0, r4
 8000d9a:	4629      	mov	r1, r5
 8000d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000da0:	f000 b80a 	b.w	8000db8 <__aeabi_d2ulz>
 8000da4:	4620      	mov	r0, r4
 8000da6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000daa:	f000 f805 	bl	8000db8 <__aeabi_d2ulz>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	bd38      	pop	{r3, r4, r5, pc}
 8000db6:	bf00      	nop

08000db8 <__aeabi_d2ulz>:
 8000db8:	b5d0      	push	{r4, r6, r7, lr}
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <__aeabi_d2ulz+0x34>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	4606      	mov	r6, r0
 8000dc0:	460f      	mov	r7, r1
 8000dc2:	f7ff fc31 	bl	8000628 <__aeabi_dmul>
 8000dc6:	f7ff ff07 	bl	8000bd8 <__aeabi_d2uiz>
 8000dca:	4604      	mov	r4, r0
 8000dcc:	f7ff fbb2 	bl	8000534 <__aeabi_ui2d>
 8000dd0:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <__aeabi_d2ulz+0x38>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f7ff fc28 	bl	8000628 <__aeabi_dmul>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4630      	mov	r0, r6
 8000dde:	4639      	mov	r1, r7
 8000de0:	f7ff fa6a 	bl	80002b8 <__aeabi_dsub>
 8000de4:	f7ff fef8 	bl	8000bd8 <__aeabi_d2uiz>
 8000de8:	4621      	mov	r1, r4
 8000dea:	bdd0      	pop	{r4, r6, r7, pc}
 8000dec:	3df00000 	.word	0x3df00000
 8000df0:	41f00000 	.word	0x41f00000

08000df4 <__udivmoddi4>:
 8000df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df8:	9d08      	ldr	r5, [sp, #32]
 8000dfa:	4604      	mov	r4, r0
 8000dfc:	468e      	mov	lr, r1
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d14d      	bne.n	8000e9e <__udivmoddi4+0xaa>
 8000e02:	428a      	cmp	r2, r1
 8000e04:	4694      	mov	ip, r2
 8000e06:	d969      	bls.n	8000edc <__udivmoddi4+0xe8>
 8000e08:	fab2 f282 	clz	r2, r2
 8000e0c:	b152      	cbz	r2, 8000e24 <__udivmoddi4+0x30>
 8000e0e:	fa01 f302 	lsl.w	r3, r1, r2
 8000e12:	f1c2 0120 	rsb	r1, r2, #32
 8000e16:	fa20 f101 	lsr.w	r1, r0, r1
 8000e1a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1e:	ea41 0e03 	orr.w	lr, r1, r3
 8000e22:	4094      	lsls	r4, r2
 8000e24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e28:	0c21      	lsrs	r1, r4, #16
 8000e2a:	fbbe f6f8 	udiv	r6, lr, r8
 8000e2e:	fa1f f78c 	uxth.w	r7, ip
 8000e32:	fb08 e316 	mls	r3, r8, r6, lr
 8000e36:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e3a:	fb06 f107 	mul.w	r1, r6, r7
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d90a      	bls.n	8000e58 <__udivmoddi4+0x64>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e4a:	f080 811f 	bcs.w	800108c <__udivmoddi4+0x298>
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	f240 811c 	bls.w	800108c <__udivmoddi4+0x298>
 8000e54:	3e02      	subs	r6, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1a5b      	subs	r3, r3, r1
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e60:	fb08 3310 	mls	r3, r8, r0, r3
 8000e64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e68:	fb00 f707 	mul.w	r7, r0, r7
 8000e6c:	42a7      	cmp	r7, r4
 8000e6e:	d90a      	bls.n	8000e86 <__udivmoddi4+0x92>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e78:	f080 810a 	bcs.w	8001090 <__udivmoddi4+0x29c>
 8000e7c:	42a7      	cmp	r7, r4
 8000e7e:	f240 8107 	bls.w	8001090 <__udivmoddi4+0x29c>
 8000e82:	4464      	add	r4, ip
 8000e84:	3802      	subs	r0, #2
 8000e86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e8a:	1be4      	subs	r4, r4, r7
 8000e8c:	2600      	movs	r6, #0
 8000e8e:	b11d      	cbz	r5, 8000e98 <__udivmoddi4+0xa4>
 8000e90:	40d4      	lsrs	r4, r2
 8000e92:	2300      	movs	r3, #0
 8000e94:	e9c5 4300 	strd	r4, r3, [r5]
 8000e98:	4631      	mov	r1, r6
 8000e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	d909      	bls.n	8000eb6 <__udivmoddi4+0xc2>
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	f000 80ef 	beq.w	8001086 <__udivmoddi4+0x292>
 8000ea8:	2600      	movs	r6, #0
 8000eaa:	e9c5 0100 	strd	r0, r1, [r5]
 8000eae:	4630      	mov	r0, r6
 8000eb0:	4631      	mov	r1, r6
 8000eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb6:	fab3 f683 	clz	r6, r3
 8000eba:	2e00      	cmp	r6, #0
 8000ebc:	d14a      	bne.n	8000f54 <__udivmoddi4+0x160>
 8000ebe:	428b      	cmp	r3, r1
 8000ec0:	d302      	bcc.n	8000ec8 <__udivmoddi4+0xd4>
 8000ec2:	4282      	cmp	r2, r0
 8000ec4:	f200 80f9 	bhi.w	80010ba <__udivmoddi4+0x2c6>
 8000ec8:	1a84      	subs	r4, r0, r2
 8000eca:	eb61 0303 	sbc.w	r3, r1, r3
 8000ece:	2001      	movs	r0, #1
 8000ed0:	469e      	mov	lr, r3
 8000ed2:	2d00      	cmp	r5, #0
 8000ed4:	d0e0      	beq.n	8000e98 <__udivmoddi4+0xa4>
 8000ed6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eda:	e7dd      	b.n	8000e98 <__udivmoddi4+0xa4>
 8000edc:	b902      	cbnz	r2, 8000ee0 <__udivmoddi4+0xec>
 8000ede:	deff      	udf	#255	; 0xff
 8000ee0:	fab2 f282 	clz	r2, r2
 8000ee4:	2a00      	cmp	r2, #0
 8000ee6:	f040 8092 	bne.w	800100e <__udivmoddi4+0x21a>
 8000eea:	eba1 010c 	sub.w	r1, r1, ip
 8000eee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef2:	fa1f fe8c 	uxth.w	lr, ip
 8000ef6:	2601      	movs	r6, #1
 8000ef8:	0c20      	lsrs	r0, r4, #16
 8000efa:	fbb1 f3f7 	udiv	r3, r1, r7
 8000efe:	fb07 1113 	mls	r1, r7, r3, r1
 8000f02:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f06:	fb0e f003 	mul.w	r0, lr, r3
 8000f0a:	4288      	cmp	r0, r1
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x12c>
 8000f0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f12:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f16:	d202      	bcs.n	8000f1e <__udivmoddi4+0x12a>
 8000f18:	4288      	cmp	r0, r1
 8000f1a:	f200 80cb 	bhi.w	80010b4 <__udivmoddi4+0x2c0>
 8000f1e:	4643      	mov	r3, r8
 8000f20:	1a09      	subs	r1, r1, r0
 8000f22:	b2a4      	uxth	r4, r4
 8000f24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f28:	fb07 1110 	mls	r1, r7, r0, r1
 8000f2c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f30:	fb0e fe00 	mul.w	lr, lr, r0
 8000f34:	45a6      	cmp	lr, r4
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x156>
 8000f38:	eb1c 0404 	adds.w	r4, ip, r4
 8000f3c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f40:	d202      	bcs.n	8000f48 <__udivmoddi4+0x154>
 8000f42:	45a6      	cmp	lr, r4
 8000f44:	f200 80bb 	bhi.w	80010be <__udivmoddi4+0x2ca>
 8000f48:	4608      	mov	r0, r1
 8000f4a:	eba4 040e 	sub.w	r4, r4, lr
 8000f4e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f52:	e79c      	b.n	8000e8e <__udivmoddi4+0x9a>
 8000f54:	f1c6 0720 	rsb	r7, r6, #32
 8000f58:	40b3      	lsls	r3, r6
 8000f5a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f5e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f62:	fa20 f407 	lsr.w	r4, r0, r7
 8000f66:	fa01 f306 	lsl.w	r3, r1, r6
 8000f6a:	431c      	orrs	r4, r3
 8000f6c:	40f9      	lsrs	r1, r7
 8000f6e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f72:	fa00 f306 	lsl.w	r3, r0, r6
 8000f76:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f7a:	0c20      	lsrs	r0, r4, #16
 8000f7c:	fa1f fe8c 	uxth.w	lr, ip
 8000f80:	fb09 1118 	mls	r1, r9, r8, r1
 8000f84:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f88:	fb08 f00e 	mul.w	r0, r8, lr
 8000f8c:	4288      	cmp	r0, r1
 8000f8e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f92:	d90b      	bls.n	8000fac <__udivmoddi4+0x1b8>
 8000f94:	eb1c 0101 	adds.w	r1, ip, r1
 8000f98:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f9c:	f080 8088 	bcs.w	80010b0 <__udivmoddi4+0x2bc>
 8000fa0:	4288      	cmp	r0, r1
 8000fa2:	f240 8085 	bls.w	80010b0 <__udivmoddi4+0x2bc>
 8000fa6:	f1a8 0802 	sub.w	r8, r8, #2
 8000faa:	4461      	add	r1, ip
 8000fac:	1a09      	subs	r1, r1, r0
 8000fae:	b2a4      	uxth	r4, r4
 8000fb0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000fb4:	fb09 1110 	mls	r1, r9, r0, r1
 8000fb8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fbc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fc0:	458e      	cmp	lr, r1
 8000fc2:	d908      	bls.n	8000fd6 <__udivmoddi4+0x1e2>
 8000fc4:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fcc:	d26c      	bcs.n	80010a8 <__udivmoddi4+0x2b4>
 8000fce:	458e      	cmp	lr, r1
 8000fd0:	d96a      	bls.n	80010a8 <__udivmoddi4+0x2b4>
 8000fd2:	3802      	subs	r0, #2
 8000fd4:	4461      	add	r1, ip
 8000fd6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fda:	fba0 9402 	umull	r9, r4, r0, r2
 8000fde:	eba1 010e 	sub.w	r1, r1, lr
 8000fe2:	42a1      	cmp	r1, r4
 8000fe4:	46c8      	mov	r8, r9
 8000fe6:	46a6      	mov	lr, r4
 8000fe8:	d356      	bcc.n	8001098 <__udivmoddi4+0x2a4>
 8000fea:	d053      	beq.n	8001094 <__udivmoddi4+0x2a0>
 8000fec:	b15d      	cbz	r5, 8001006 <__udivmoddi4+0x212>
 8000fee:	ebb3 0208 	subs.w	r2, r3, r8
 8000ff2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ff6:	fa01 f707 	lsl.w	r7, r1, r7
 8000ffa:	fa22 f306 	lsr.w	r3, r2, r6
 8000ffe:	40f1      	lsrs	r1, r6
 8001000:	431f      	orrs	r7, r3
 8001002:	e9c5 7100 	strd	r7, r1, [r5]
 8001006:	2600      	movs	r6, #0
 8001008:	4631      	mov	r1, r6
 800100a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800100e:	f1c2 0320 	rsb	r3, r2, #32
 8001012:	40d8      	lsrs	r0, r3
 8001014:	fa0c fc02 	lsl.w	ip, ip, r2
 8001018:	fa21 f303 	lsr.w	r3, r1, r3
 800101c:	4091      	lsls	r1, r2
 800101e:	4301      	orrs	r1, r0
 8001020:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001024:	fa1f fe8c 	uxth.w	lr, ip
 8001028:	fbb3 f0f7 	udiv	r0, r3, r7
 800102c:	fb07 3610 	mls	r6, r7, r0, r3
 8001030:	0c0b      	lsrs	r3, r1, #16
 8001032:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001036:	fb00 f60e 	mul.w	r6, r0, lr
 800103a:	429e      	cmp	r6, r3
 800103c:	fa04 f402 	lsl.w	r4, r4, r2
 8001040:	d908      	bls.n	8001054 <__udivmoddi4+0x260>
 8001042:	eb1c 0303 	adds.w	r3, ip, r3
 8001046:	f100 38ff 	add.w	r8, r0, #4294967295
 800104a:	d22f      	bcs.n	80010ac <__udivmoddi4+0x2b8>
 800104c:	429e      	cmp	r6, r3
 800104e:	d92d      	bls.n	80010ac <__udivmoddi4+0x2b8>
 8001050:	3802      	subs	r0, #2
 8001052:	4463      	add	r3, ip
 8001054:	1b9b      	subs	r3, r3, r6
 8001056:	b289      	uxth	r1, r1
 8001058:	fbb3 f6f7 	udiv	r6, r3, r7
 800105c:	fb07 3316 	mls	r3, r7, r6, r3
 8001060:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001064:	fb06 f30e 	mul.w	r3, r6, lr
 8001068:	428b      	cmp	r3, r1
 800106a:	d908      	bls.n	800107e <__udivmoddi4+0x28a>
 800106c:	eb1c 0101 	adds.w	r1, ip, r1
 8001070:	f106 38ff 	add.w	r8, r6, #4294967295
 8001074:	d216      	bcs.n	80010a4 <__udivmoddi4+0x2b0>
 8001076:	428b      	cmp	r3, r1
 8001078:	d914      	bls.n	80010a4 <__udivmoddi4+0x2b0>
 800107a:	3e02      	subs	r6, #2
 800107c:	4461      	add	r1, ip
 800107e:	1ac9      	subs	r1, r1, r3
 8001080:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001084:	e738      	b.n	8000ef8 <__udivmoddi4+0x104>
 8001086:	462e      	mov	r6, r5
 8001088:	4628      	mov	r0, r5
 800108a:	e705      	b.n	8000e98 <__udivmoddi4+0xa4>
 800108c:	4606      	mov	r6, r0
 800108e:	e6e3      	b.n	8000e58 <__udivmoddi4+0x64>
 8001090:	4618      	mov	r0, r3
 8001092:	e6f8      	b.n	8000e86 <__udivmoddi4+0x92>
 8001094:	454b      	cmp	r3, r9
 8001096:	d2a9      	bcs.n	8000fec <__udivmoddi4+0x1f8>
 8001098:	ebb9 0802 	subs.w	r8, r9, r2
 800109c:	eb64 0e0c 	sbc.w	lr, r4, ip
 80010a0:	3801      	subs	r0, #1
 80010a2:	e7a3      	b.n	8000fec <__udivmoddi4+0x1f8>
 80010a4:	4646      	mov	r6, r8
 80010a6:	e7ea      	b.n	800107e <__udivmoddi4+0x28a>
 80010a8:	4620      	mov	r0, r4
 80010aa:	e794      	b.n	8000fd6 <__udivmoddi4+0x1e2>
 80010ac:	4640      	mov	r0, r8
 80010ae:	e7d1      	b.n	8001054 <__udivmoddi4+0x260>
 80010b0:	46d0      	mov	r8, sl
 80010b2:	e77b      	b.n	8000fac <__udivmoddi4+0x1b8>
 80010b4:	3b02      	subs	r3, #2
 80010b6:	4461      	add	r1, ip
 80010b8:	e732      	b.n	8000f20 <__udivmoddi4+0x12c>
 80010ba:	4630      	mov	r0, r6
 80010bc:	e709      	b.n	8000ed2 <__udivmoddi4+0xde>
 80010be:	4464      	add	r4, ip
 80010c0:	3802      	subs	r0, #2
 80010c2:	e742      	b.n	8000f4a <__udivmoddi4+0x156>

080010c4 <__aeabi_idiv0>:
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop

080010c8 <GFX_DrawPixelScreen>:

#if USING_STRINGS == 1
const uint8_t *font;
uint8_t size = 1;
void GFX_DrawPixelScreen(uint16_t x, uint16_t y, uint8_t color, Screen_TypeDef Screen)
{
 80010c8:	b590      	push	{r4, r7, lr}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4604      	mov	r4, r0
 80010d0:	4608      	mov	r0, r1
 80010d2:	4611      	mov	r1, r2
 80010d4:	461a      	mov	r2, r3
 80010d6:	4623      	mov	r3, r4
 80010d8:	80fb      	strh	r3, [r7, #6]
 80010da:	4603      	mov	r3, r0
 80010dc:	80bb      	strh	r3, [r7, #4]
 80010de:	460b      	mov	r3, r1
 80010e0:	70fb      	strb	r3, [r7, #3]
 80010e2:	4613      	mov	r3, r2
 80010e4:	70bb      	strb	r3, [r7, #2]
   if(Screen == OLED)
 80010e6:	78bb      	ldrb	r3, [r7, #2]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d108      	bne.n	80010fe <GFX_DrawPixelScreen+0x36>
   {
      GFX_DrawPixelOled(x, y, color);
 80010ec:	88fb      	ldrh	r3, [r7, #6]
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	88ba      	ldrh	r2, [r7, #4]
 80010f2:	b2d1      	uxtb	r1, r2
 80010f4:	78fa      	ldrb	r2, [r7, #3]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f00c f9f6 	bl	800d4e8 <ssd1306_set_pixel>
   }
   else if(Screen == E_PAPIER)
   {
      GFX_DrawPixelEpapier(x, y, color);
   }
}
 80010fc:	e008      	b.n	8001110 <GFX_DrawPixelScreen+0x48>
   else if(Screen == E_PAPIER)
 80010fe:	78bb      	ldrb	r3, [r7, #2]
 8001100:	2b01      	cmp	r3, #1
 8001102:	d105      	bne.n	8001110 <GFX_DrawPixelScreen+0x48>
      GFX_DrawPixelEpapier(x, y, color);
 8001104:	78fa      	ldrb	r2, [r7, #3]
 8001106:	88b9      	ldrh	r1, [r7, #4]
 8001108:	88fb      	ldrh	r3, [r7, #6]
 800110a:	4618      	mov	r0, r3
 800110c:	f003 fccc 	bl	8004aa8 <e_papier_set_pixel>
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	bd90      	pop	{r4, r7, pc}

08001118 <GFX_SetFont>:
void GFX_SetFont(const uint8_t *font_t)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
   font = font_t;
 8001120:	4a04      	ldr	r2, [pc, #16]	; (8001134 <GFX_SetFont+0x1c>)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6013      	str	r3, [r2, #0]
}
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	20000294 	.word	0x20000294

08001138 <GFX_DrawChar>:
{
   return size;
}

void GFX_DrawChar(int x, int y, char chr, uint8_t color, uint8_t background, Screen_TypeDef Screen)
{
 8001138:	b590      	push	{r4, r7, lr}
 800113a:	b089      	sub	sp, #36	; 0x24
 800113c:	af02      	add	r7, sp, #8
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	4611      	mov	r1, r2
 8001144:	461a      	mov	r2, r3
 8001146:	460b      	mov	r3, r1
 8001148:	71fb      	strb	r3, [r7, #7]
 800114a:	4613      	mov	r3, r2
 800114c:	71bb      	strb	r3, [r7, #6]
   if(chr > 0x7E)
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	2b7e      	cmp	r3, #126	; 0x7e
 8001152:	f200 80a7 	bhi.w	80012a4 <GFX_DrawChar+0x16c>
      return; // chr > '~'

   for(uint8_t i = 0; i < font[1]; i++) // Each column (Width)
 8001156:	2300      	movs	r3, #0
 8001158:	75fb      	strb	r3, [r7, #23]
 800115a:	e09a      	b.n	8001292 <GFX_DrawChar+0x15a>
   {
      uint8_t line = (uint8_t)font[(chr - 0x20) * font[1] + i + 2]; // Takie this line, (chr-0x20) = move 20 chars back,
 800115c:	4b53      	ldr	r3, [pc, #332]	; (80012ac <GFX_DrawChar+0x174>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	3b20      	subs	r3, #32
 8001164:	4951      	ldr	r1, [pc, #324]	; (80012ac <GFX_DrawChar+0x174>)
 8001166:	6809      	ldr	r1, [r1, #0]
 8001168:	3101      	adds	r1, #1
 800116a:	7809      	ldrb	r1, [r1, #0]
 800116c:	fb03 f101 	mul.w	r1, r3, r1
 8001170:	7dfb      	ldrb	r3, [r7, #23]
 8001172:	440b      	add	r3, r1
 8001174:	3302      	adds	r3, #2
 8001176:	4413      	add	r3, r2
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	75bb      	strb	r3, [r7, #22]

      for(int8_t j = 0; j < font[0]; j++, line >>= 1) // For each pixel in column
 800117c:	2300      	movs	r3, #0
 800117e:	757b      	strb	r3, [r7, #21]
 8001180:	e07c      	b.n	800127c <GFX_DrawChar+0x144>
      {
         if(line & 1) // Check last pixel in line
 8001182:	7dbb      	ldrb	r3, [r7, #22]
 8001184:	f003 0301 	and.w	r3, r3, #1
 8001188:	2b00      	cmp	r3, #0
 800118a:	d034      	beq.n	80011f6 <GFX_DrawChar+0xbe>
         {
            if(size == 1)
 800118c:	4b48      	ldr	r3, [pc, #288]	; (80012b0 <GFX_DrawChar+0x178>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d112      	bne.n	80011ba <GFX_DrawChar+0x82>
               GFX_DrawPixelScreen(x + i, y + j, color, Screen); // Draw this pixel
 8001194:	7dfb      	ldrb	r3, [r7, #23]
 8001196:	b29a      	uxth	r2, r3
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	b29b      	uxth	r3, r3
 800119c:	4413      	add	r3, r2
 800119e:	b298      	uxth	r0, r3
 80011a0:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	4413      	add	r3, r2
 80011ac:	b299      	uxth	r1, r3
 80011ae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80011b2:	79ba      	ldrb	r2, [r7, #6]
 80011b4:	f7ff ff88 	bl	80010c8 <GFX_DrawPixelScreen>
 80011b8:	e057      	b.n	800126a <GFX_DrawChar+0x132>
            else
               GFX_DrawFillRectangle(x + i * size, y + j * size, size, size, color, Screen); // Or bigger pixel
 80011ba:	7dfb      	ldrb	r3, [r7, #23]
 80011bc:	4a3c      	ldr	r2, [pc, #240]	; (80012b0 <GFX_DrawChar+0x178>)
 80011be:	7812      	ldrb	r2, [r2, #0]
 80011c0:	fb03 f202 	mul.w	r2, r3, r2
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	18d0      	adds	r0, r2, r3
 80011c8:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80011cc:	4a38      	ldr	r2, [pc, #224]	; (80012b0 <GFX_DrawChar+0x178>)
 80011ce:	7812      	ldrb	r2, [r2, #0]
 80011d0:	fb03 f202 	mul.w	r2, r3, r2
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	18d1      	adds	r1, r2, r3
 80011d8:	4b35      	ldr	r3, [pc, #212]	; (80012b0 <GFX_DrawChar+0x178>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	b29a      	uxth	r2, r3
 80011de:	4b34      	ldr	r3, [pc, #208]	; (80012b0 <GFX_DrawChar+0x178>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	b29c      	uxth	r4, r3
 80011e4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80011e8:	9301      	str	r3, [sp, #4]
 80011ea:	79bb      	ldrb	r3, [r7, #6]
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	4623      	mov	r3, r4
 80011f0:	f000 f9d1 	bl	8001596 <GFX_DrawFillRectangle>
 80011f4:	e039      	b.n	800126a <GFX_DrawChar+0x132>
         }
         else if(background == 0)
 80011f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d135      	bne.n	800126a <GFX_DrawChar+0x132>
         {
            if(size == 1)
 80011fe:	4b2c      	ldr	r3, [pc, #176]	; (80012b0 <GFX_DrawChar+0x178>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d113      	bne.n	800122e <GFX_DrawChar+0xf6>
               GFX_DrawPixelScreen(x + i, y + j, background, Screen); // Draw black BG
 8001206:	7dfb      	ldrb	r3, [r7, #23]
 8001208:	b29a      	uxth	r2, r3
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	b29b      	uxth	r3, r3
 800120e:	4413      	add	r3, r2
 8001210:	b298      	uxth	r0, r3
 8001212:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001216:	b29a      	uxth	r2, r3
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	b29b      	uxth	r3, r3
 800121c:	4413      	add	r3, r2
 800121e:	b299      	uxth	r1, r3
 8001220:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001224:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001228:	f7ff ff4e 	bl	80010c8 <GFX_DrawPixelScreen>
 800122c:	e01d      	b.n	800126a <GFX_DrawChar+0x132>
            else
               GFX_DrawFillRectangle(x + i * size, y + j * size, size, size, background, Screen); // Or bigger
 800122e:	7dfb      	ldrb	r3, [r7, #23]
 8001230:	4a1f      	ldr	r2, [pc, #124]	; (80012b0 <GFX_DrawChar+0x178>)
 8001232:	7812      	ldrb	r2, [r2, #0]
 8001234:	fb03 f202 	mul.w	r2, r3, r2
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	18d0      	adds	r0, r2, r3
 800123c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001240:	4a1b      	ldr	r2, [pc, #108]	; (80012b0 <GFX_DrawChar+0x178>)
 8001242:	7812      	ldrb	r2, [r2, #0]
 8001244:	fb03 f202 	mul.w	r2, r3, r2
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	18d1      	adds	r1, r2, r3
 800124c:	4b18      	ldr	r3, [pc, #96]	; (80012b0 <GFX_DrawChar+0x178>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	b29a      	uxth	r2, r3
 8001252:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <GFX_DrawChar+0x178>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	b29c      	uxth	r4, r3
 8001258:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800125c:	9301      	str	r3, [sp, #4]
 800125e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	4623      	mov	r3, r4
 8001266:	f000 f996 	bl	8001596 <GFX_DrawFillRectangle>
      for(int8_t j = 0; j < font[0]; j++, line >>= 1) // For each pixel in column
 800126a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800126e:	b2db      	uxtb	r3, r3
 8001270:	3301      	adds	r3, #1
 8001272:	b2db      	uxtb	r3, r3
 8001274:	757b      	strb	r3, [r7, #21]
 8001276:	7dbb      	ldrb	r3, [r7, #22]
 8001278:	085b      	lsrs	r3, r3, #1
 800127a:	75bb      	strb	r3, [r7, #22]
 800127c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001280:	4a0a      	ldr	r2, [pc, #40]	; (80012ac <GFX_DrawChar+0x174>)
 8001282:	6812      	ldr	r2, [r2, #0]
 8001284:	7812      	ldrb	r2, [r2, #0]
 8001286:	4293      	cmp	r3, r2
 8001288:	f6ff af7b 	blt.w	8001182 <GFX_DrawChar+0x4a>
   for(uint8_t i = 0; i < font[1]; i++) // Each column (Width)
 800128c:	7dfb      	ldrb	r3, [r7, #23]
 800128e:	3301      	adds	r3, #1
 8001290:	75fb      	strb	r3, [r7, #23]
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <GFX_DrawChar+0x174>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	3301      	adds	r3, #1
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	7dfa      	ldrb	r2, [r7, #23]
 800129c:	429a      	cmp	r2, r3
 800129e:	f4ff af5d 	bcc.w	800115c <GFX_DrawChar+0x24>
 80012a2:	e000      	b.n	80012a6 <GFX_DrawChar+0x16e>
      return; // chr > '~'
 80012a4:	bf00      	nop
         }
      }
   }
}
 80012a6:	371c      	adds	r7, #28
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd90      	pop	{r4, r7, pc}
 80012ac:	20000294 	.word	0x20000294
 80012b0:	20000000 	.word	0x20000000

080012b4 <GFX_DrawString>:

void GFX_DrawString(int x, int y, char *str, uint8_t color, uint8_t background, Screen_TypeDef Screen)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b088      	sub	sp, #32
 80012b8:	af02      	add	r7, sp, #8
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
 80012c0:	70fb      	strb	r3, [r7, #3]
   int x_tmp = x;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	617b      	str	r3, [r7, #20]

   char znak;
   znak = *str;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	74fb      	strb	r3, [r7, #19]

   while(*str++)
 80012cc:	e040      	b.n	8001350 <GFX_DrawString+0x9c>
   {
      GFX_DrawChar(x_tmp, y, znak, color, background, Screen); // Draw current char
 80012ce:	78f9      	ldrb	r1, [r7, #3]
 80012d0:	7cfa      	ldrb	r2, [r7, #19]
 80012d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80012d6:	9301      	str	r3, [sp, #4]
 80012d8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012dc:	9300      	str	r3, [sp, #0]
 80012de:	460b      	mov	r3, r1
 80012e0:	68b9      	ldr	r1, [r7, #8]
 80012e2:	6978      	ldr	r0, [r7, #20]
 80012e4:	f7ff ff28 	bl	8001138 <GFX_DrawChar>

      x_tmp += ((uint8_t)font[1] * size) + 1; // Move X drawing pointer do char width + 1 (space)
 80012e8:	4b1f      	ldr	r3, [pc, #124]	; (8001368 <GFX_DrawString+0xb4>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	3301      	adds	r3, #1
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	461a      	mov	r2, r3
 80012f2:	4b1e      	ldr	r3, [pc, #120]	; (800136c <GFX_DrawString+0xb8>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	fb02 f303 	mul.w	r3, r2, r3
 80012fa:	3301      	adds	r3, #1
 80012fc:	697a      	ldr	r2, [r7, #20]
 80012fe:	4413      	add	r3, r2
 8001300:	617b      	str	r3, [r7, #20]

      if(background == 0) // Draw black space if needed
 8001302:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d11f      	bne.n	800134a <GFX_DrawString+0x96>
      {
         for(uint8_t i = 0; i < (font[0] * size); i++)
 800130a:	2300      	movs	r3, #0
 800130c:	74bb      	strb	r3, [r7, #18]
 800130e:	e011      	b.n	8001334 <GFX_DrawString+0x80>
         {
            GFX_DrawPixelScreen(x_tmp - 1, y + i, PIXEL_BLACK, Screen);
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	b29b      	uxth	r3, r3
 8001314:	3b01      	subs	r3, #1
 8001316:	b298      	uxth	r0, r3
 8001318:	7cbb      	ldrb	r3, [r7, #18]
 800131a:	b29a      	uxth	r2, r3
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	b29b      	uxth	r3, r3
 8001320:	4413      	add	r3, r2
 8001322:	b299      	uxth	r1, r3
 8001324:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001328:	2200      	movs	r2, #0
 800132a:	f7ff fecd 	bl	80010c8 <GFX_DrawPixelScreen>
         for(uint8_t i = 0; i < (font[0] * size); i++)
 800132e:	7cbb      	ldrb	r3, [r7, #18]
 8001330:	3301      	adds	r3, #1
 8001332:	74bb      	strb	r3, [r7, #18]
 8001334:	7cba      	ldrb	r2, [r7, #18]
 8001336:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <GFX_DrawString+0xb4>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	4619      	mov	r1, r3
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <GFX_DrawString+0xb8>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	fb01 f303 	mul.w	r3, r1, r3
 8001346:	429a      	cmp	r2, r3
 8001348:	dbe2      	blt.n	8001310 <GFX_DrawString+0x5c>
         }
      }

      znak = *str; // Next char
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	74fb      	strb	r3, [r7, #19]
   while(*str++)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	1c5a      	adds	r2, r3, #1
 8001354:	607a      	str	r2, [r7, #4]
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1b8      	bne.n	80012ce <GFX_DrawString+0x1a>
   }
}
 800135c:	bf00      	nop
 800135e:	bf00      	nop
 8001360:	3718      	adds	r7, #24
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000294 	.word	0x20000294
 800136c:	20000000 	.word	0x20000000

08001370 <GFX_WriteLine>:
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, uint8_t color, Screen_TypeDef Screen)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08c      	sub	sp, #48	; 0x30
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
 800137c:	603b      	str	r3, [r7, #0]
   int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 800137e:	683a      	ldr	r2, [r7, #0]
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001388:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800138c:	6879      	ldr	r1, [r7, #4]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	1acb      	subs	r3, r1, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	bfb8      	it	lt
 8001396:	425b      	neglt	r3, r3
 8001398:	429a      	cmp	r2, r3
 800139a:	bfcc      	ite	gt
 800139c:	2301      	movgt	r3, #1
 800139e:	2300      	movle	r3, #0
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	857b      	strh	r3, [r7, #42]	; 0x2a

   if(steep)
 80013a4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d00b      	beq.n	80013c4 <GFX_WriteLine+0x54>
   {
      _swap_int(x_start, y_start);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b6:	60bb      	str	r3, [r7, #8]
      _swap_int(x_end, y_end);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	623b      	str	r3, [r7, #32]
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	6a3b      	ldr	r3, [r7, #32]
 80013c2:	603b      	str	r3, [r7, #0]
   }

   if(x_start > x_end)
 80013c4:	68fa      	ldr	r2, [r7, #12]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	dd0b      	ble.n	80013e4 <GFX_WriteLine+0x74>
   {
      _swap_int(x_start, x_end);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	61fb      	str	r3, [r7, #28]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	607b      	str	r3, [r7, #4]
      _swap_int(y_start, y_end);
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	61bb      	str	r3, [r7, #24]
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	60bb      	str	r3, [r7, #8]
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	603b      	str	r3, [r7, #0]
   }

   int16_t dx, dy;
   dx = x_end - x_start;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	b29a      	uxth	r2, r3
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	82fb      	strh	r3, [r7, #22]
   dy = abs(y_end - y_start);
 80013f2:	683a      	ldr	r2, [r7, #0]
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	bfb8      	it	lt
 80013fc:	425b      	neglt	r3, r3
 80013fe:	82bb      	strh	r3, [r7, #20]

   int16_t err = dx / 2;
 8001400:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001404:	0fda      	lsrs	r2, r3, #31
 8001406:	4413      	add	r3, r2
 8001408:	105b      	asrs	r3, r3, #1
 800140a:	85fb      	strh	r3, [r7, #46]	; 0x2e
   int16_t ystep;

   if(y_start < y_end)
 800140c:	68ba      	ldr	r2, [r7, #8]
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	429a      	cmp	r2, r3
 8001412:	da02      	bge.n	800141a <GFX_WriteLine+0xaa>
   {
      ystep = 1;
 8001414:	2301      	movs	r3, #1
 8001416:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001418:	e032      	b.n	8001480 <GFX_WriteLine+0x110>
   }
   else
   {
      ystep = -1;
 800141a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800141e:	85bb      	strh	r3, [r7, #44]	; 0x2c
   }

   for(; x_start <= x_end; x_start++)
 8001420:	e02e      	b.n	8001480 <GFX_WriteLine+0x110>
   {
      if(steep)
 8001422:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001426:	2b00      	cmp	r3, #0
 8001428:	d00a      	beq.n	8001440 <GFX_WriteLine+0xd0>
      {
         GFX_DrawPixelScreen(y_start, x_start, color, Screen);
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	b298      	uxth	r0, r3
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	b299      	uxth	r1, r3
 8001432:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001436:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800143a:	f7ff fe45 	bl	80010c8 <GFX_DrawPixelScreen>
 800143e:	e009      	b.n	8001454 <GFX_WriteLine+0xe4>
      }
      else
      {
         GFX_DrawPixelScreen(x_start, y_start, color, Screen);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	b298      	uxth	r0, r3
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	b299      	uxth	r1, r3
 8001448:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800144c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001450:	f7ff fe3a 	bl	80010c8 <GFX_DrawPixelScreen>
      }
      err -= dy;
 8001454:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001456:	8abb      	ldrh	r3, [r7, #20]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	b29b      	uxth	r3, r3
 800145c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      if(err < 0)
 800145e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001462:	2b00      	cmp	r3, #0
 8001464:	da09      	bge.n	800147a <GFX_WriteLine+0x10a>
      {
         y_start += ystep;
 8001466:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800146a:	68ba      	ldr	r2, [r7, #8]
 800146c:	4413      	add	r3, r2
 800146e:	60bb      	str	r3, [r7, #8]
         err += dx;
 8001470:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001472:	8afb      	ldrh	r3, [r7, #22]
 8001474:	4413      	add	r3, r2
 8001476:	b29b      	uxth	r3, r3
 8001478:	85fb      	strh	r3, [r7, #46]	; 0x2e
   for(; x_start <= x_end; x_start++)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	3301      	adds	r3, #1
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fa      	ldr	r2, [r7, #12]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	429a      	cmp	r2, r3
 8001486:	ddcc      	ble.n	8001422 <GFX_WriteLine+0xb2>
      }
   }
}
 8001488:	bf00      	nop
 800148a:	bf00      	nop
 800148c:	3730      	adds	r7, #48	; 0x30
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, uint8_t color, Screen_TypeDef Screen)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b086      	sub	sp, #24
 8001496:	af02      	add	r7, sp, #8
 8001498:	60f8      	str	r0, [r7, #12]
 800149a:	60b9      	str	r1, [r7, #8]
 800149c:	607a      	str	r2, [r7, #4]
 800149e:	70fb      	strb	r3, [r7, #3]
   GFX_WriteLine(x_start, y_start, x_start, y_start + h - 1, color, Screen);
 80014a0:	68ba      	ldr	r2, [r7, #8]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4413      	add	r3, r2
 80014a6:	1e5a      	subs	r2, r3, #1
 80014a8:	7e3b      	ldrb	r3, [r7, #24]
 80014aa:	9301      	str	r3, [sp, #4]
 80014ac:	78fb      	ldrb	r3, [r7, #3]
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	4613      	mov	r3, r2
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	68b9      	ldr	r1, [r7, #8]
 80014b6:	68f8      	ldr	r0, [r7, #12]
 80014b8:	f7ff ff5a 	bl	8001370 <GFX_WriteLine>
}
 80014bc:	bf00      	nop
 80014be:	3710      	adds	r7, #16
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <GFX_DrawFastHLine>:

void GFX_DrawFastHLine(int x_start, int y_start, int w, uint8_t color, Screen_TypeDef Screen)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af02      	add	r7, sp, #8
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
 80014d0:	70fb      	strb	r3, [r7, #3]
   GFX_WriteLine(x_start, y_start, x_start + w - 1, y_start, color, Screen);
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4413      	add	r3, r2
 80014d8:	1e5a      	subs	r2, r3, #1
 80014da:	7e3b      	ldrb	r3, [r7, #24]
 80014dc:	9301      	str	r3, [sp, #4]
 80014de:	78fb      	ldrb	r3, [r7, #3]
 80014e0:	9300      	str	r3, [sp, #0]
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	68b9      	ldr	r1, [r7, #8]
 80014e6:	68f8      	ldr	r0, [r7, #12]
 80014e8:	f7ff ff42 	bl	8001370 <GFX_WriteLine>
}
 80014ec:	bf00      	nop
 80014ee:	3710      	adds	r7, #16
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <GFX_DrawLine>:

void GFX_DrawLine(int x_start, int y_start, int x_end, int y_end, uint8_t color, Screen_TypeDef Screen)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b088      	sub	sp, #32
 80014f8:	af02      	add	r7, sp, #8
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
 8001500:	603b      	str	r3, [r7, #0]
   if(x_start == x_end)
 8001502:	68fa      	ldr	r2, [r7, #12]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	429a      	cmp	r2, r3
 8001508:	d118      	bne.n	800153c <GFX_DrawLine+0x48>
   {
      if(y_start > y_end)
 800150a:	68ba      	ldr	r2, [r7, #8]
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	429a      	cmp	r2, r3
 8001510:	dd05      	ble.n	800151e <GFX_DrawLine+0x2a>
         _swap_int(y_start, y_end);
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	613b      	str	r3, [r7, #16]
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	603b      	str	r3, [r7, #0]
      GFX_DrawFastVLine(x_start, y_start, y_end - y_start + 1, color, Screen);
 800151e:	683a      	ldr	r2, [r7, #0]
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	1c5a      	adds	r2, r3, #1
 8001526:	f897 1020 	ldrb.w	r1, [r7, #32]
 800152a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	460b      	mov	r3, r1
 8001532:	68b9      	ldr	r1, [r7, #8]
 8001534:	68f8      	ldr	r0, [r7, #12]
 8001536:	f7ff ffac 	bl	8001492 <GFX_DrawFastVLine>
   else
   {

      GFX_WriteLine(x_start, y_start, x_end, y_end, color, Screen);
   }
}
 800153a:	e028      	b.n	800158e <GFX_DrawLine+0x9a>
   else if(y_start == y_end)
 800153c:	68ba      	ldr	r2, [r7, #8]
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	429a      	cmp	r2, r3
 8001542:	d118      	bne.n	8001576 <GFX_DrawLine+0x82>
      if(x_start > x_end)
 8001544:	68fa      	ldr	r2, [r7, #12]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	429a      	cmp	r2, r3
 800154a:	dd05      	ble.n	8001558 <GFX_DrawLine+0x64>
         _swap_int(x_start, x_end);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	617b      	str	r3, [r7, #20]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	607b      	str	r3, [r7, #4]
      GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color, Screen);
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	1c5a      	adds	r2, r3, #1
 8001560:	f897 1020 	ldrb.w	r1, [r7, #32]
 8001564:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001568:	9300      	str	r3, [sp, #0]
 800156a:	460b      	mov	r3, r1
 800156c:	68b9      	ldr	r1, [r7, #8]
 800156e:	68f8      	ldr	r0, [r7, #12]
 8001570:	f7ff ffa8 	bl	80014c4 <GFX_DrawFastHLine>
}
 8001574:	e00b      	b.n	800158e <GFX_DrawLine+0x9a>
      GFX_WriteLine(x_start, y_start, x_end, y_end, color, Screen);
 8001576:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800157a:	9301      	str	r3, [sp, #4]
 800157c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001580:	9300      	str	r3, [sp, #0]
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	68b9      	ldr	r1, [r7, #8]
 8001588:	68f8      	ldr	r0, [r7, #12]
 800158a:	f7ff fef1 	bl	8001370 <GFX_WriteLine>
}
 800158e:	bf00      	nop
 8001590:	3718      	adds	r7, #24
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <GFX_DrawFillRectangle>:
   GFX_DrawFastVLine(x + w - 1, y, h, color, Screen);
}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color, Screen_TypeDef Screen)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b088      	sub	sp, #32
 800159a:	af02      	add	r7, sp, #8
 800159c:	60f8      	str	r0, [r7, #12]
 800159e:	60b9      	str	r1, [r7, #8]
 80015a0:	4611      	mov	r1, r2
 80015a2:	461a      	mov	r2, r3
 80015a4:	460b      	mov	r3, r1
 80015a6:	80fb      	strh	r3, [r7, #6]
 80015a8:	4613      	mov	r3, r2
 80015aa:	80bb      	strh	r3, [r7, #4]
   for(int i = x; i < x + w; i++)
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	617b      	str	r3, [r7, #20]
 80015b0:	e00d      	b.n	80015ce <GFX_DrawFillRectangle+0x38>
   {
      GFX_DrawFastVLine(i, y, h, color, Screen);
 80015b2:	88ba      	ldrh	r2, [r7, #4]
 80015b4:	f897 1020 	ldrb.w	r1, [r7, #32]
 80015b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015bc:	9300      	str	r3, [sp, #0]
 80015be:	460b      	mov	r3, r1
 80015c0:	68b9      	ldr	r1, [r7, #8]
 80015c2:	6978      	ldr	r0, [r7, #20]
 80015c4:	f7ff ff65 	bl	8001492 <GFX_DrawFastVLine>
   for(int i = x; i < x + w; i++)
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	3301      	adds	r3, #1
 80015cc:	617b      	str	r3, [r7, #20]
 80015ce:	88fa      	ldrh	r2, [r7, #6]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4413      	add	r3, r2
 80015d4:	697a      	ldr	r2, [r7, #20]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	dbeb      	blt.n	80015b2 <GFX_DrawFillRectangle+0x1c>
   }
}
 80015da:	bf00      	nop
 80015dc:	bf00      	nop
 80015de:	3718      	adds	r7, #24
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <EF_SetFont>:
#include "string.h"

const FONT_INFO *CurrentFont;

void EF_SetFont(const FONT_INFO *Font)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
   CurrentFont = Font;
 80015ec:	4a04      	ldr	r2, [pc, #16]	; (8001600 <EF_SetFont+0x1c>)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6013      	str	r3, [r2, #0]
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	20000298 	.word	0x20000298

08001604 <EF_GetFontHeight>:

uint8_t EF_GetFontHeight(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
   return CurrentFont->CharHeight;
 8001608:	4b03      	ldr	r3, [pc, #12]	; (8001618 <EF_GetFontHeight+0x14>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	781b      	ldrb	r3, [r3, #0]
}
 800160e:	4618      	mov	r0, r3
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	20000298 	.word	0x20000298

0800161c <EF_GetFontStartChar>:

uint8_t EF_GetFontStartChar(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
   return CurrentFont->StartChar;
 8001620:	4b03      	ldr	r3, [pc, #12]	; (8001630 <EF_GetFontStartChar+0x14>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	785b      	ldrb	r3, [r3, #1]
}
 8001626:	4618      	mov	r0, r3
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	20000298 	.word	0x20000298

08001634 <EF_GetFontEndChar>:

uint8_t EF_GetFontEndChar(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
   return CurrentFont->EndChar;
 8001638:	4b03      	ldr	r3, [pc, #12]	; (8001648 <EF_GetFontEndChar+0x14>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	789b      	ldrb	r3, [r3, #2]
}
 800163e:	4618      	mov	r0, r3
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	20000298 	.word	0x20000298

0800164c <EF_GetFontSpaceWidth>:

uint8_t EF_GetFontSpaceWidth(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
   return CurrentFont->SpaceWidth;
 8001650:	4b03      	ldr	r3, [pc, #12]	; (8001660 <EF_GetFontSpaceWidth+0x14>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	78db      	ldrb	r3, [r3, #3]
}
 8001656:	4618      	mov	r0, r3
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	20000298 	.word	0x20000298

08001664 <EF_DecodePolish>:

char EF_DecodePolish(uint8_t chMsb, uint8_t chLsb)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	460a      	mov	r2, r1
 800166e:	71fb      	strb	r3, [r7, #7]
 8001670:	4613      	mov	r3, r2
 8001672:	71bb      	strb	r3, [r7, #6]
   switch(chMsb) // Check first byte
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	2bc5      	cmp	r3, #197	; 0xc5
 8001678:	d052      	beq.n	8001720 <EF_DecodePolish+0xbc>
 800167a:	2bc5      	cmp	r3, #197	; 0xc5
 800167c:	f300 80e7 	bgt.w	800184e <EF_DecodePolish+0x1ea>
 8001680:	2bc3      	cmp	r3, #195	; 0xc3
 8001682:	d002      	beq.n	800168a <EF_DecodePolish+0x26>
 8001684:	2bc4      	cmp	r3, #196	; 0xc4
 8001686:	d00a      	beq.n	800169e <EF_DecodePolish+0x3a>
 8001688:	e0e1      	b.n	800184e <EF_DecodePolish+0x1ea>
   {
      case 0xC3:       // Ó, ó
         switch(chLsb) // Check second byte
 800168a:	79bb      	ldrb	r3, [r7, #6]
 800168c:	2b93      	cmp	r3, #147	; 0x93
 800168e:	d002      	beq.n	8001696 <EF_DecodePolish+0x32>
 8001690:	2bb3      	cmp	r3, #179	; 0xb3
 8001692:	d002      	beq.n	800169a <EF_DecodePolish+0x36>
               break;
            case 0xB3: // ó
               return 0x8D;
               break;
         }
         break;
 8001694:	e0db      	b.n	800184e <EF_DecodePolish+0x1ea>
               return 0x84;
 8001696:	2384      	movs	r3, #132	; 0x84
 8001698:	e0da      	b.n	8001850 <EF_DecodePolish+0x1ec>
               return 0x8D;
 800169a:	238d      	movs	r3, #141	; 0x8d
 800169c:	e0d8      	b.n	8001850 <EF_DecodePolish+0x1ec>
      case 0xC4:       // Ą, Ę, Ć, ą, ę, ć
         switch(chLsb) // Check second byte
 800169e:	79bb      	ldrb	r3, [r7, #6]
 80016a0:	3b84      	subs	r3, #132	; 0x84
 80016a2:	2b15      	cmp	r3, #21
 80016a4:	f200 80d0 	bhi.w	8001848 <EF_DecodePolish+0x1e4>
 80016a8:	a201      	add	r2, pc, #4	; (adr r2, 80016b0 <EF_DecodePolish+0x4c>)
 80016aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ae:	bf00      	nop
 80016b0:	08001709 	.word	0x08001709
 80016b4:	08001715 	.word	0x08001715
 80016b8:	08001711 	.word	0x08001711
 80016bc:	0800171d 	.word	0x0800171d
 80016c0:	08001849 	.word	0x08001849
 80016c4:	08001849 	.word	0x08001849
 80016c8:	08001849 	.word	0x08001849
 80016cc:	08001849 	.word	0x08001849
 80016d0:	08001849 	.word	0x08001849
 80016d4:	08001849 	.word	0x08001849
 80016d8:	08001849 	.word	0x08001849
 80016dc:	08001849 	.word	0x08001849
 80016e0:	08001849 	.word	0x08001849
 80016e4:	08001849 	.word	0x08001849
 80016e8:	08001849 	.word	0x08001849
 80016ec:	08001849 	.word	0x08001849
 80016f0:	08001849 	.word	0x08001849
 80016f4:	08001849 	.word	0x08001849
 80016f8:	08001849 	.word	0x08001849
 80016fc:	08001849 	.word	0x08001849
 8001700:	0800170d 	.word	0x0800170d
 8001704:	08001719 	.word	0x08001719
         {
            case 0x84: // Ą
               return 0x7F;
 8001708:	237f      	movs	r3, #127	; 0x7f
 800170a:	e0a1      	b.n	8001850 <EF_DecodePolish+0x1ec>
               break;
            case 0x98: // Ę
               return 0x81;
 800170c:	2381      	movs	r3, #129	; 0x81
 800170e:	e09f      	b.n	8001850 <EF_DecodePolish+0x1ec>
               break;
            case 0x86: // Ć
               return 0x80;
 8001710:	2380      	movs	r3, #128	; 0x80
 8001712:	e09d      	b.n	8001850 <EF_DecodePolish+0x1ec>
               break;
            case 0x85: // ą
               return 0x88;
 8001714:	2388      	movs	r3, #136	; 0x88
 8001716:	e09b      	b.n	8001850 <EF_DecodePolish+0x1ec>
               break;
            case 0x99: // ę
               return 0x8A;
 8001718:	238a      	movs	r3, #138	; 0x8a
 800171a:	e099      	b.n	8001850 <EF_DecodePolish+0x1ec>
               break;
            case 0x87: // ć
               return 0x89;
 800171c:	2389      	movs	r3, #137	; 0x89
 800171e:	e097      	b.n	8001850 <EF_DecodePolish+0x1ec>
               break;
         }
         break;
      case 0xC5:       // Ł, Ń, Ś, Ź, Ż, ł, ń, ś, ź, ż
         switch(chLsb) // Check second byte
 8001720:	79bb      	ldrb	r3, [r7, #6]
 8001722:	3b81      	subs	r3, #129	; 0x81
 8001724:	2b3b      	cmp	r3, #59	; 0x3b
 8001726:	f200 8091 	bhi.w	800184c <EF_DecodePolish+0x1e8>
 800172a:	a201      	add	r2, pc, #4	; (adr r2, 8001730 <EF_DecodePolish+0xcc>)
 800172c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001730:	08001821 	.word	0x08001821
 8001734:	08001835 	.word	0x08001835
 8001738:	08001825 	.word	0x08001825
 800173c:	08001839 	.word	0x08001839
 8001740:	0800184d 	.word	0x0800184d
 8001744:	0800184d 	.word	0x0800184d
 8001748:	0800184d 	.word	0x0800184d
 800174c:	0800184d 	.word	0x0800184d
 8001750:	0800184d 	.word	0x0800184d
 8001754:	0800184d 	.word	0x0800184d
 8001758:	0800184d 	.word	0x0800184d
 800175c:	0800184d 	.word	0x0800184d
 8001760:	0800184d 	.word	0x0800184d
 8001764:	0800184d 	.word	0x0800184d
 8001768:	0800184d 	.word	0x0800184d
 800176c:	0800184d 	.word	0x0800184d
 8001770:	0800184d 	.word	0x0800184d
 8001774:	0800184d 	.word	0x0800184d
 8001778:	0800184d 	.word	0x0800184d
 800177c:	0800184d 	.word	0x0800184d
 8001780:	0800184d 	.word	0x0800184d
 8001784:	0800184d 	.word	0x0800184d
 8001788:	0800184d 	.word	0x0800184d
 800178c:	0800184d 	.word	0x0800184d
 8001790:	0800184d 	.word	0x0800184d
 8001794:	08001829 	.word	0x08001829
 8001798:	0800183d 	.word	0x0800183d
 800179c:	0800184d 	.word	0x0800184d
 80017a0:	0800184d 	.word	0x0800184d
 80017a4:	0800184d 	.word	0x0800184d
 80017a8:	0800184d 	.word	0x0800184d
 80017ac:	0800184d 	.word	0x0800184d
 80017b0:	0800184d 	.word	0x0800184d
 80017b4:	0800184d 	.word	0x0800184d
 80017b8:	0800184d 	.word	0x0800184d
 80017bc:	0800184d 	.word	0x0800184d
 80017c0:	0800184d 	.word	0x0800184d
 80017c4:	0800184d 	.word	0x0800184d
 80017c8:	0800184d 	.word	0x0800184d
 80017cc:	0800184d 	.word	0x0800184d
 80017d0:	0800184d 	.word	0x0800184d
 80017d4:	0800184d 	.word	0x0800184d
 80017d8:	0800184d 	.word	0x0800184d
 80017dc:	0800184d 	.word	0x0800184d
 80017e0:	0800184d 	.word	0x0800184d
 80017e4:	0800184d 	.word	0x0800184d
 80017e8:	0800184d 	.word	0x0800184d
 80017ec:	0800184d 	.word	0x0800184d
 80017f0:	0800184d 	.word	0x0800184d
 80017f4:	0800184d 	.word	0x0800184d
 80017f8:	0800184d 	.word	0x0800184d
 80017fc:	0800184d 	.word	0x0800184d
 8001800:	0800184d 	.word	0x0800184d
 8001804:	0800184d 	.word	0x0800184d
 8001808:	0800184d 	.word	0x0800184d
 800180c:	0800184d 	.word	0x0800184d
 8001810:	0800182d 	.word	0x0800182d
 8001814:	08001841 	.word	0x08001841
 8001818:	08001831 	.word	0x08001831
 800181c:	08001845 	.word	0x08001845
         {
            case 0x81: // Ł
               return 0x82;
 8001820:	2382      	movs	r3, #130	; 0x82
 8001822:	e015      	b.n	8001850 <EF_DecodePolish+0x1ec>
               break;
            case 0x83: // Ń
               return 0x83;
 8001824:	2383      	movs	r3, #131	; 0x83
 8001826:	e013      	b.n	8001850 <EF_DecodePolish+0x1ec>
               break;
            case 0x9A: // Ś
               return 0x85;
 8001828:	2385      	movs	r3, #133	; 0x85
 800182a:	e011      	b.n	8001850 <EF_DecodePolish+0x1ec>
               break;
            case 0xB9: // Ź
               return 0x86;
 800182c:	2386      	movs	r3, #134	; 0x86
 800182e:	e00f      	b.n	8001850 <EF_DecodePolish+0x1ec>
               break;
            case 0xBB: // Ż
               return 0x87;
 8001830:	2387      	movs	r3, #135	; 0x87
 8001832:	e00d      	b.n	8001850 <EF_DecodePolish+0x1ec>
               break;
            case 0x82: // ł
               return 0x8B;
 8001834:	238b      	movs	r3, #139	; 0x8b
 8001836:	e00b      	b.n	8001850 <EF_DecodePolish+0x1ec>
               break;
            case 0x84: // ń
               return 0x8C;
 8001838:	238c      	movs	r3, #140	; 0x8c
 800183a:	e009      	b.n	8001850 <EF_DecodePolish+0x1ec>
               break;
            case 0x9B: // ś
               return 0x8E;
 800183c:	238e      	movs	r3, #142	; 0x8e
 800183e:	e007      	b.n	8001850 <EF_DecodePolish+0x1ec>
               break;
            case 0xBA: // ź
               return 0x8F;
 8001840:	238f      	movs	r3, #143	; 0x8f
 8001842:	e005      	b.n	8001850 <EF_DecodePolish+0x1ec>
               break;
            case 0xBC: // ż
               return 0x90;
 8001844:	2390      	movs	r3, #144	; 0x90
 8001846:	e003      	b.n	8001850 <EF_DecodePolish+0x1ec>
         break;
 8001848:	bf00      	nop
 800184a:	e000      	b.n	800184e <EF_DecodePolish+0x1ea>
               break;
         }
         break;
 800184c:	bf00      	nop
   }

   return 0;
 800184e:	2300      	movs	r3, #0
}
 8001850:	4618      	mov	r0, r3
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <EF_PutChar>:

uint8_t EF_PutChar(char ch, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor, Screen_TypeDef Screen)
{
 800185c:	b5b0      	push	{r4, r5, r7, lr}
 800185e:	b08a      	sub	sp, #40	; 0x28
 8001860:	af02      	add	r7, sp, #8
 8001862:	4604      	mov	r4, r0
 8001864:	4608      	mov	r0, r1
 8001866:	4611      	mov	r1, r2
 8001868:	461a      	mov	r2, r3
 800186a:	4623      	mov	r3, r4
 800186c:	71fb      	strb	r3, [r7, #7]
 800186e:	4603      	mov	r3, r0
 8001870:	80bb      	strh	r3, [r7, #4]
 8001872:	460b      	mov	r3, r1
 8001874:	807b      	strh	r3, [r7, #2]
 8001876:	4613      	mov	r3, r2
 8001878:	803b      	strh	r3, [r7, #0]
   uint16_t PixelHeight;
   uint8_t WidthLoops, CharBits, CharBitsLeft;
   uint8_t CharNumber = ch - EF_GetFontStartChar();
 800187a:	f7ff fecf 	bl	800161c <EF_GetFontStartChar>
 800187e:	4603      	mov	r3, r0
 8001880:	461a      	mov	r2, r3
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	1a9b      	subs	r3, r3, r2
 8001886:	747b      	strb	r3, [r7, #17]

   if(ch == ' ') // Check if we have a Space char
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	2b20      	cmp	r3, #32
 800188c:	d121      	bne.n	80018d2 <EF_PutChar+0x76>
   {
      if(Btransparent == BG_COLOR) // If draw BG by color...
 800188e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001892:	2b01      	cmp	r3, #1
 8001894:	d117      	bne.n	80018c6 <EF_PutChar+0x6a>
      {
         // Draw filled rectangle on Space char
         GFX_DrawFillRectangle(PosX, PosY, SPACE_WIDHT * EF_GetFontSpaceWidth(), CurrentFont->CharHeight, Bcolor, Screen);
 8001896:	88bc      	ldrh	r4, [r7, #4]
 8001898:	887d      	ldrh	r5, [r7, #2]
 800189a:	f7ff fed7 	bl	800164c <EF_GetFontSpaceWidth>
 800189e:	4603      	mov	r3, r0
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	b299      	uxth	r1, r3
 80018a6:	4b5b      	ldr	r3, [pc, #364]	; (8001a14 <EF_PutChar+0x1b8>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	b298      	uxth	r0, r3
 80018ae:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80018b6:	9201      	str	r2, [sp, #4]
 80018b8:	9300      	str	r3, [sp, #0]
 80018ba:	4603      	mov	r3, r0
 80018bc:	460a      	mov	r2, r1
 80018be:	4629      	mov	r1, r5
 80018c0:	4620      	mov	r0, r4
 80018c2:	f7ff fe68 	bl	8001596 <GFX_DrawFillRectangle>
      }
      // Return width for String function
      return SPACE_WIDHT * EF_GetFontSpaceWidth();
 80018c6:	f7ff fec1 	bl	800164c <EF_GetFontSpaceWidth>
 80018ca:	4603      	mov	r3, r0
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	e09c      	b.n	8001a0c <EF_PutChar+0x1b0>
   }

   // Return if char is not in our font  (smaller than the first)
   if(ch < EF_GetFontStartChar())
 80018d2:	f7ff fea3 	bl	800161c <EF_GetFontStartChar>
 80018d6:	4603      	mov	r3, r0
 80018d8:	461a      	mov	r2, r3
 80018da:	79fb      	ldrb	r3, [r7, #7]
 80018dc:	4293      	cmp	r3, r2
 80018de:	d201      	bcs.n	80018e4 <EF_PutChar+0x88>
   {
      return 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	e093      	b.n	8001a0c <EF_PutChar+0x1b0>
   }

   // Return if char is not in our font (bigger than the lastlast)
   if(CharNumber > EF_GetFontEndChar())
 80018e4:	f7ff fea6 	bl	8001634 <EF_GetFontEndChar>
 80018e8:	4603      	mov	r3, r0
 80018ea:	461a      	mov	r2, r3
 80018ec:	7c7b      	ldrb	r3, [r7, #17]
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d901      	bls.n	80018f6 <EF_PutChar+0x9a>
   {
      return 0;
 80018f2:	2300      	movs	r3, #0
 80018f4:	e08a      	b.n	8001a0c <EF_PutChar+0x1b0>
   }

   // Get Current char info descriptor - {width, bitmap start byte}
   const FONT_CHAR_INFO *CurrentChar = &CurrentFont->CharDescription[CharNumber];
 80018f6:	4b47      	ldr	r3, [pc, #284]	; (8001a14 <EF_PutChar+0x1b8>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	685a      	ldr	r2, [r3, #4]
 80018fc:	7c7b      	ldrb	r3, [r7, #17]
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	4413      	add	r3, r2
 8001902:	60fb      	str	r3, [r7, #12]
   // Get bitmap pointer for our char
   uint8_t *CharPointer = (uint8_t *)&CurrentFont->CharBitmaps[CurrentFont->CharDescription[CharNumber].CharOffset];
 8001904:	4b43      	ldr	r3, [pc, #268]	; (8001a14 <EF_PutChar+0x1b8>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	4a42      	ldr	r2, [pc, #264]	; (8001a14 <EF_PutChar+0x1b8>)
 800190c:	6812      	ldr	r2, [r2, #0]
 800190e:	6851      	ldr	r1, [r2, #4]
 8001910:	7c7a      	ldrb	r2, [r7, #17]
 8001912:	0092      	lsls	r2, r2, #2
 8001914:	440a      	add	r2, r1
 8001916:	8852      	ldrh	r2, [r2, #2]
 8001918:	4413      	add	r3, r2
 800191a:	617b      	str	r3, [r7, #20]

   // 1st iteration - for each Row by Height
   for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 800191c:	2300      	movs	r3, #0
 800191e:	83fb      	strh	r3, [r7, #30]
 8001920:	e066      	b.n	80019f0 <EF_PutChar+0x194>
   {
      // Check how many bits left to draw in current Row
      CharBitsLeft = CurrentChar->CharWidth;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	76fb      	strb	r3, [r7, #27]

      // 2nd Iterator - For each byte in that Row
      for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth - 1) / 8; WidthLoops++)
 8001928:	2300      	movs	r3, #0
 800192a:	777b      	strb	r3, [r7, #29]
 800192c:	e053      	b.n	80019d6 <EF_PutChar+0x17a>
      {
         // Take one line
         uint8_t line = (uint8_t)*CharPointer;
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	74fb      	strb	r3, [r7, #19]
         // Define how many bit to draw - full byte or less
         if(CharBitsLeft >= 8)
 8001934:	7efb      	ldrb	r3, [r7, #27]
 8001936:	2b07      	cmp	r3, #7
 8001938:	d905      	bls.n	8001946 <EF_PutChar+0xea>
         {
            CharBits = 8;      // Full byte
 800193a:	2308      	movs	r3, #8
 800193c:	773b      	strb	r3, [r7, #28]
            CharBitsLeft -= 8; // Decrease bits left counter
 800193e:	7efb      	ldrb	r3, [r7, #27]
 8001940:	3b08      	subs	r3, #8
 8001942:	76fb      	strb	r3, [r7, #27]
 8001944:	e001      	b.n	800194a <EF_PutChar+0xee>
         }
         else
         {
            // If less than byte - only few bits
            CharBits = CharBitsLeft;
 8001946:	7efb      	ldrb	r3, [r7, #27]
 8001948:	773b      	strb	r3, [r7, #28]
         }

         // 3rd Iterator - for each bit in current byte in current row ;)
         for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 800194a:	2300      	movs	r3, #0
 800194c:	74bb      	strb	r3, [r7, #18]
 800194e:	e038      	b.n	80019c2 <EF_PutChar+0x166>
         {
            // Check bit first from left
            if(line & 0x80)
 8001950:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001954:	2b00      	cmp	r3, #0
 8001956:	da15      	bge.n	8001984 <EF_PutChar+0x128>
            {
               // If pixel exists - draw it
               GFX_DrawPixelScreen(PosX + (WidthLoops * 8) + i, PosY + PixelHeight, Fcolor, Screen);
 8001958:	7f7b      	ldrb	r3, [r7, #29]
 800195a:	b29b      	uxth	r3, r3
 800195c:	00db      	lsls	r3, r3, #3
 800195e:	b29a      	uxth	r2, r3
 8001960:	88bb      	ldrh	r3, [r7, #4]
 8001962:	4413      	add	r3, r2
 8001964:	b29a      	uxth	r2, r3
 8001966:	7cbb      	ldrb	r3, [r7, #18]
 8001968:	b29b      	uxth	r3, r3
 800196a:	4413      	add	r3, r2
 800196c:	b298      	uxth	r0, r3
 800196e:	887a      	ldrh	r2, [r7, #2]
 8001970:	8bfb      	ldrh	r3, [r7, #30]
 8001972:	4413      	add	r3, r2
 8001974:	b299      	uxth	r1, r3
 8001976:	883b      	ldrh	r3, [r7, #0]
 8001978:	b2da      	uxtb	r2, r3
 800197a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800197e:	f7ff fba3 	bl	80010c8 <GFX_DrawPixelScreen>
 8001982:	e018      	b.n	80019b6 <EF_PutChar+0x15a>
            }
            else if(Btransparent == BG_COLOR) // Check if we want to draw background
 8001984:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001988:	2b01      	cmp	r3, #1
 800198a:	d114      	bne.n	80019b6 <EF_PutChar+0x15a>
            {
               // If no character pixel, then BG pixel
               GFX_DrawPixelScreen(PosX + (WidthLoops * 8) + i, PosY + PixelHeight, Bcolor, Screen);
 800198c:	7f7b      	ldrb	r3, [r7, #29]
 800198e:	b29b      	uxth	r3, r3
 8001990:	00db      	lsls	r3, r3, #3
 8001992:	b29a      	uxth	r2, r3
 8001994:	88bb      	ldrh	r3, [r7, #4]
 8001996:	4413      	add	r3, r2
 8001998:	b29a      	uxth	r2, r3
 800199a:	7cbb      	ldrb	r3, [r7, #18]
 800199c:	b29b      	uxth	r3, r3
 800199e:	4413      	add	r3, r2
 80019a0:	b298      	uxth	r0, r3
 80019a2:	887a      	ldrh	r2, [r7, #2]
 80019a4:	8bfb      	ldrh	r3, [r7, #30]
 80019a6:	4413      	add	r3, r2
 80019a8:	b299      	uxth	r1, r3
 80019aa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80019b2:	f7ff fb89 	bl	80010c8 <GFX_DrawPixelScreen>
         for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 80019b6:	7cbb      	ldrb	r3, [r7, #18]
 80019b8:	3301      	adds	r3, #1
 80019ba:	74bb      	strb	r3, [r7, #18]
 80019bc:	7cfb      	ldrb	r3, [r7, #19]
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	74fb      	strb	r3, [r7, #19]
 80019c2:	7cba      	ldrb	r2, [r7, #18]
 80019c4:	7f3b      	ldrb	r3, [r7, #28]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d3c2      	bcc.n	8001950 <EF_PutChar+0xf4>
            }
         }

         // Take next byte in current char bitmap
         CharPointer++;
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	3301      	adds	r3, #1
 80019ce:	617b      	str	r3, [r7, #20]
      for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth - 1) / 8; WidthLoops++)
 80019d0:	7f7b      	ldrb	r3, [r7, #29]
 80019d2:	3301      	adds	r3, #1
 80019d4:	777b      	strb	r3, [r7, #29]
 80019d6:	7f7a      	ldrb	r2, [r7, #29]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	3b01      	subs	r3, #1
 80019de:	2b00      	cmp	r3, #0
 80019e0:	da00      	bge.n	80019e4 <EF_PutChar+0x188>
 80019e2:	3307      	adds	r3, #7
 80019e4:	10db      	asrs	r3, r3, #3
 80019e6:	429a      	cmp	r2, r3
 80019e8:	dda1      	ble.n	800192e <EF_PutChar+0xd2>
   for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 80019ea:	8bfb      	ldrh	r3, [r7, #30]
 80019ec:	3301      	adds	r3, #1
 80019ee:	83fb      	strh	r3, [r7, #30]
 80019f0:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <EF_PutChar+0x1b8>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	8bfa      	ldrh	r2, [r7, #30]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d391      	bcc.n	8001922 <EF_PutChar+0xc6>
      }
   }
   // Return char width for String function
   return CurrentFont->CharDescription[CharNumber].CharWidth;
 80019fe:	4b05      	ldr	r3, [pc, #20]	; (8001a14 <EF_PutChar+0x1b8>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	685a      	ldr	r2, [r3, #4]
 8001a04:	7c7b      	ldrb	r3, [r7, #17]
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	4413      	add	r3, r2
 8001a0a:	781b      	ldrb	r3, [r3, #0]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3720      	adds	r7, #32
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bdb0      	pop	{r4, r5, r7, pc}
 8001a14:	20000298 	.word	0x20000298

08001a18 <EF_PutString>:

uint8_t EF_PutString(const uint8_t *pStr, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor, Screen_TypeDef Screen)
{
 8001a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a1a:	b08b      	sub	sp, #44	; 0x2c
 8001a1c:	af04      	add	r7, sp, #16
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	4608      	mov	r0, r1
 8001a22:	4611      	mov	r1, r2
 8001a24:	461a      	mov	r2, r3
 8001a26:	4603      	mov	r3, r0
 8001a28:	817b      	strh	r3, [r7, #10]
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	813b      	strh	r3, [r7, #8]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	80fb      	strh	r3, [r7, #6]
   uint8_t Lenght = strlen((char *)pStr); // Take a string length in bytes
 8001a32:	68f8      	ldr	r0, [r7, #12]
 8001a34:	f7fe fbe4 	bl	8000200 <strlen>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	74bb      	strb	r3, [r7, #18]

   uint8_t Loop;        // Loop Iterator for current char
   uint16_t Shift = 0;  // Shift in X-axis for each char drawing
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	82bb      	strh	r3, [r7, #20]
   uint8_t CharWidth;   // Current char width
   uint8_t CharToPrint; // Current char to print

   for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 8001a40:	2300      	movs	r3, #0
 8001a42:	75fb      	strb	r3, [r7, #23]
 8001a44:	e06a      	b.n	8001b1c <EF_PutString+0x104>
   {

      if((pStr[Loop] <= 0xC5) && (pStr[Loop] >= 0xC3)) // check if current char is a Polish sign
 8001a46:	7dfb      	ldrb	r3, [r7, #23]
 8001a48:	68fa      	ldr	r2, [r7, #12]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	2bc5      	cmp	r3, #197	; 0xc5
 8001a50:	d817      	bhi.n	8001a82 <EF_PutString+0x6a>
 8001a52:	7dfb      	ldrb	r3, [r7, #23]
 8001a54:	68fa      	ldr	r2, [r7, #12]
 8001a56:	4413      	add	r3, r2
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	2bc2      	cmp	r3, #194	; 0xc2
 8001a5c:	d911      	bls.n	8001a82 <EF_PutString+0x6a>
      {
         // If yes - decode that char
         CharToPrint = EF_DecodePolish(pStr[Loop], pStr[Loop + 1]);
 8001a5e:	7dfb      	ldrb	r3, [r7, #23]
 8001a60:	68fa      	ldr	r2, [r7, #12]
 8001a62:	4413      	add	r3, r2
 8001a64:	7818      	ldrb	r0, [r3, #0]
 8001a66:	7dfb      	ldrb	r3, [r7, #23]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	68fa      	ldr	r2, [r7, #12]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	4619      	mov	r1, r3
 8001a72:	f7ff fdf7 	bl	8001664 <EF_DecodePolish>
 8001a76:	4603      	mov	r3, r0
 8001a78:	74fb      	strb	r3, [r7, #19]
         // Skip one byte - Polish chars are 2-bytes
         Loop++;
 8001a7a:	7dfb      	ldrb	r3, [r7, #23]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	75fb      	strb	r3, [r7, #23]
 8001a80:	e00d      	b.n	8001a9e <EF_PutString+0x86>
      }
      else if(pStr[Loop] == 0)
 8001a82:	7dfb      	ldrb	r3, [r7, #23]
 8001a84:	68fa      	ldr	r2, [r7, #12]
 8001a86:	4413      	add	r3, r2
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d102      	bne.n	8001a94 <EF_PutString+0x7c>
      {
         CharToPrint = ' ';
 8001a8e:	2320      	movs	r3, #32
 8001a90:	74fb      	strb	r3, [r7, #19]
 8001a92:	e004      	b.n	8001a9e <EF_PutString+0x86>
      }
      else
      {
         // If not polish - just take that char
         CharToPrint = pStr[Loop];
 8001a94:	7dfb      	ldrb	r3, [r7, #23]
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	4413      	add	r3, r2
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	74fb      	strb	r3, [r7, #19]
      }

      // Draw char and take its width
      CharWidth = EF_PutChar(CharToPrint, PosX + Shift, PosY, Fcolor, Btransparent, Bcolor, Screen);
 8001a9e:	897a      	ldrh	r2, [r7, #10]
 8001aa0:	8abb      	ldrh	r3, [r7, #20]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	b299      	uxth	r1, r3
 8001aa6:	88fc      	ldrh	r4, [r7, #6]
 8001aa8:	893a      	ldrh	r2, [r7, #8]
 8001aaa:	7cf8      	ldrb	r0, [r7, #19]
 8001aac:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001ab0:	9302      	str	r3, [sp, #8]
 8001ab2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001ab4:	9301      	str	r3, [sp, #4]
 8001ab6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001aba:	9300      	str	r3, [sp, #0]
 8001abc:	4623      	mov	r3, r4
 8001abe:	f7ff fecd 	bl	800185c <EF_PutChar>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	747b      	strb	r3, [r7, #17]

      // Add last char width to drawing Shift
      Shift = Shift + CharWidth;
 8001ac6:	7c7b      	ldrb	r3, [r7, #17]
 8001ac8:	b29a      	uxth	r2, r3
 8001aca:	8abb      	ldrh	r3, [r7, #20]
 8001acc:	4413      	add	r3, r2
 8001ace:	82bb      	strh	r3, [r7, #20]

      if(Btransparent == BG_COLOR)
 8001ad0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d117      	bne.n	8001b08 <EF_PutString+0xf0>
      {
         // If draw background - draw the BG color between chars
         GFX_DrawFillRectangle(PosX + Shift, PosY, EF_GetFontSpaceWidth(), EF_GetFontHeight(), Bcolor, Screen);
 8001ad8:	897a      	ldrh	r2, [r7, #10]
 8001ada:	8abb      	ldrh	r3, [r7, #20]
 8001adc:	18d4      	adds	r4, r2, r3
 8001ade:	893d      	ldrh	r5, [r7, #8]
 8001ae0:	f7ff fdb4 	bl	800164c <EF_GetFontSpaceWidth>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	b29e      	uxth	r6, r3
 8001ae8:	f7ff fd8c 	bl	8001604 <EF_GetFontHeight>
 8001aec:	4603      	mov	r3, r0
 8001aee:	b299      	uxth	r1, r3
 8001af0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001af8:	9201      	str	r2, [sp, #4]
 8001afa:	9300      	str	r3, [sp, #0]
 8001afc:	460b      	mov	r3, r1
 8001afe:	4632      	mov	r2, r6
 8001b00:	4629      	mov	r1, r5
 8001b02:	4620      	mov	r0, r4
 8001b04:	f7ff fd47 	bl	8001596 <GFX_DrawFillRectangle>
      }

      // Add between-char distance to Shift
      Shift = Shift + EF_GetFontSpaceWidth();
 8001b08:	f7ff fda0 	bl	800164c <EF_GetFontSpaceWidth>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	8abb      	ldrh	r3, [r7, #20]
 8001b12:	4413      	add	r3, r2
 8001b14:	82bb      	strh	r3, [r7, #20]
   for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 8001b16:	7dfb      	ldrb	r3, [r7, #23]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	75fb      	strb	r3, [r7, #23]
 8001b1c:	7dfa      	ldrb	r2, [r7, #23]
 8001b1e:	7cbb      	ldrb	r3, [r7, #18]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d390      	bcc.n	8001a46 <EF_PutString+0x2e>
   }
   // Return whole String shift - if you want to use it higher in app.
   return Shift - EF_GetFontSpaceWidth();
 8001b24:	8abb      	ldrh	r3, [r7, #20]
 8001b26:	b2dc      	uxtb	r4, r3
 8001b28:	f7ff fd90 	bl	800164c <EF_GetFontSpaceWidth>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	1ae3      	subs	r3, r4, r3
 8001b30:	b2db      	uxtb	r3, r3
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	371c      	adds	r7, #28
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b3a <HC12_ExitCommandMode>:
void HC12_EnterCommandMode(void)
{
   HAL_GPIO_WritePin(HC12_SET_GPIO_Port, HC12_SET_Pin, 0);
}
void HC12_ExitCommandMode(void)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(HC12_SET_GPIO_Port, HC12_SET_Pin, 1);
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b48:	f00d f9b2 	bl	800eeb0 <HAL_GPIO_WritePin>
}
 8001b4c:	bf00      	nop
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <HC12_TransmitData>:
void HC12_TransmitData(uint8_t *Data, uint32_t Length)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
   taskENTER_CRITICAL();
 8001b5a:	f017 fbd3 	bl	8019304 <vPortEnterCritical>
   HAL_UART_Transmit(&huart1, Data, Length, 1000);
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b66:	6879      	ldr	r1, [r7, #4]
 8001b68:	4804      	ldr	r0, [pc, #16]	; (8001b7c <HC12_TransmitData+0x2c>)
 8001b6a:	f012 f937 	bl	8013ddc <HAL_UART_Transmit>
   taskEXIT_CRITICAL();
 8001b6e:	f017 fbf9 	bl	8019364 <vPortExitCritical>
}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20004804 	.word	0x20004804

08001b80 <HC12_ReciveToIdleDMA>:
void HC12_ReciveToIdleDMA(uint8_t *Data, uint32_t Length)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
   HAL_UARTEx_ReceiveToIdle_DMA(&huart1, Data, Length);
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	461a      	mov	r2, r3
 8001b90:	6879      	ldr	r1, [r7, #4]
 8001b92:	4803      	ldr	r0, [pc, #12]	; (8001ba0 <HC12_ReciveToIdleDMA+0x20>)
 8001b94:	f013 fcfc 	bl	8015590 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8001b98:	bf00      	nop
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	20004804 	.word	0x20004804

08001ba4 <HC12_Init>:
void HC12_Init(RFP_TypeDef *TempRfp, uint8_t *Buffer)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
   rfp      = TempRfp;
 8001bae:	4a06      	ldr	r2, [pc, #24]	; (8001bc8 <HC12_Init+0x24>)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6013      	str	r3, [r2, #0]
   HC12Data = Buffer;
 8001bb4:	4a05      	ldr	r2, [pc, #20]	; (8001bcc <HC12_Init+0x28>)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	6013      	str	r3, [r2, #0]
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	2000029c 	.word	0x2000029c
 8001bcc:	200002a0 	.word	0x200002a0

08001bd0 <MENU_ChangeState>:
                                                  { MENU_STATE_RUNNING, MENU_STATE_END, MENU_EVENT_END },
                                                  { MENU_EVENT_END, MENU_STATE_IDLE, MENU_EVENT_NOTHING } };
MenuFunctions_TypeDef StateFunction[]         = { { MENU_IdleFunction }, { MENU_ChoiseFunction }, { MENU_RunningFunction }, { MENU_EndFunction } };
Menu_TypeDef Menu                             = { 0 };
static void MENU_ChangeState(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
   for(int i = 0; i < TRANSITION_TABLE_SIZE; i++)
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	607b      	str	r3, [r7, #4]
 8001bda:	e027      	b.n	8001c2c <MENU_ChangeState+0x5c>
   {
      if(Menu.State == TransitionTable[i].Source && Menu.NewEvent == TransitionTable[i].Event)
 8001bdc:	4b19      	ldr	r3, [pc, #100]	; (8001c44 <MENU_ChangeState+0x74>)
 8001bde:	7a19      	ldrb	r1, [r3, #8]
 8001be0:	4819      	ldr	r0, [pc, #100]	; (8001c48 <MENU_ChangeState+0x78>)
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	4613      	mov	r3, r2
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	4413      	add	r3, r2
 8001bea:	4403      	add	r3, r0
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	4299      	cmp	r1, r3
 8001bf0:	d119      	bne.n	8001c26 <MENU_ChangeState+0x56>
 8001bf2:	4b14      	ldr	r3, [pc, #80]	; (8001c44 <MENU_ChangeState+0x74>)
 8001bf4:	7a59      	ldrb	r1, [r3, #9]
 8001bf6:	4814      	ldr	r0, [pc, #80]	; (8001c48 <MENU_ChangeState+0x78>)
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	4413      	add	r3, r2
 8001c00:	4403      	add	r3, r0
 8001c02:	3302      	adds	r3, #2
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	4299      	cmp	r1, r3
 8001c08:	d10d      	bne.n	8001c26 <MENU_ChangeState+0x56>
      {
         Menu.State    = TransitionTable[i].Destination;
 8001c0a:	490f      	ldr	r1, [pc, #60]	; (8001c48 <MENU_ChangeState+0x78>)
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	4413      	add	r3, r2
 8001c14:	440b      	add	r3, r1
 8001c16:	3301      	adds	r3, #1
 8001c18:	781a      	ldrb	r2, [r3, #0]
 8001c1a:	4b0a      	ldr	r3, [pc, #40]	; (8001c44 <MENU_ChangeState+0x74>)
 8001c1c:	721a      	strb	r2, [r3, #8]
         Menu.NewEvent = MENU_EVENT_NOTHING;
 8001c1e:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <MENU_ChangeState+0x74>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	725a      	strb	r2, [r3, #9]
         return;
 8001c24:	e008      	b.n	8001c38 <MENU_ChangeState+0x68>
   for(int i = 0; i < TRANSITION_TABLE_SIZE; i++)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	607b      	str	r3, [r7, #4]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2b04      	cmp	r3, #4
 8001c30:	d9d4      	bls.n	8001bdc <MENU_ChangeState+0xc>
      }
   }
   Menu.NewEvent = MENU_EVENT_NOTHING;
 8001c32:	4b04      	ldr	r3, [pc, #16]	; (8001c44 <MENU_ChangeState+0x74>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	725a      	strb	r2, [r3, #9]
}
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	200002a4 	.word	0x200002a4
 8001c48:	20000004 	.word	0x20000004

08001c4c <MENU_Init>:
void MENU_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
   HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8001c50:	213c      	movs	r1, #60	; 0x3c
 8001c52:	4802      	ldr	r0, [pc, #8]	; (8001c5c <MENU_Init+0x10>)
 8001c54:	f010 fe86 	bl	8012964 <HAL_TIM_Encoder_Start>
}
 8001c58:	bf00      	nop
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	2000470c 	.word	0x2000470c

08001c60 <MENU_Handler>:
void MENU_Handler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
   MENU_ChangeState();
 8001c64:	f7ff ffb4 	bl	8001bd0 <MENU_ChangeState>
   if(StateFunction[Menu.State].MenuFunction != NULL)
 8001c68:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <MENU_Handler+0x2c>)
 8001c6a:	7a1b      	ldrb	r3, [r3, #8]
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	4b08      	ldr	r3, [pc, #32]	; (8001c90 <MENU_Handler+0x30>)
 8001c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d006      	beq.n	8001c86 <MENU_Handler+0x26>
   {
      StateFunction[Menu.State].MenuFunction();
 8001c78:	4b04      	ldr	r3, [pc, #16]	; (8001c8c <MENU_Handler+0x2c>)
 8001c7a:	7a1b      	ldrb	r3, [r3, #8]
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <MENU_Handler+0x30>)
 8001c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c84:	4798      	blx	r3
   }
}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	200002a4 	.word	0x200002a4
 8001c90:	20000014 	.word	0x20000014

08001c94 <MENU_IdleFunction>:
static void MENU_IdleFunction(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
   if(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8001c98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c9c:	480e      	ldr	r0, [pc, #56]	; (8001cd8 <MENU_IdleFunction+0x44>)
 8001c9e:	f00d f8ef 	bl	800ee80 <HAL_GPIO_ReadPin>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d115      	bne.n	8001cd4 <MENU_IdleFunction+0x40>
   {
      osMutexAcquire(MenuMutexHandle, osWaitForever);
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <MENU_IdleFunction+0x48>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f014 f885 	bl	8015dc0 <osMutexAcquire>
      Menu.NewEvent = MENU_EVENT_NEW;
 8001cb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ce0 <MENU_IdleFunction+0x4c>)
 8001cb8:	2201      	movs	r2, #1
 8001cba:	725a      	strb	r2, [r3, #9]
      while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8001cbc:	e002      	b.n	8001cc4 <MENU_IdleFunction+0x30>
      {
         osDelay(100);
 8001cbe:	2064      	movs	r0, #100	; 0x64
 8001cc0:	f013 fe30 	bl	8015924 <osDelay>
      while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8001cc4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cc8:	4803      	ldr	r0, [pc, #12]	; (8001cd8 <MENU_IdleFunction+0x44>)
 8001cca:	f00d f8d9 	bl	800ee80 <HAL_GPIO_ReadPin>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d0f4      	beq.n	8001cbe <MENU_IdleFunction+0x2a>
      }
   }
}
 8001cd4:	bf00      	nop
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	48000400 	.word	0x48000400
 8001cdc:	200040b8 	.word	0x200040b8
 8001ce0:	200002a4 	.word	0x200002a4

08001ce4 <MENU_ChoiseFunction>:
static void MENU_ChoiseFunction(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b09c      	sub	sp, #112	; 0x70
 8001ce8:	af02      	add	r7, sp, #8
   char Temp[100];
   switch((TIM5->CNT / 4) % MENU_CHOISE_CNT)
 8001cea:	4bc6      	ldr	r3, [pc, #792]	; (8002004 <MENU_ChoiseFunction+0x320>)
 8001cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cee:	0899      	lsrs	r1, r3, #2
 8001cf0:	4bc5      	ldr	r3, [pc, #788]	; (8002008 <MENU_ChoiseFunction+0x324>)
 8001cf2:	fba3 2301 	umull	r2, r3, r3, r1
 8001cf6:	089a      	lsrs	r2, r3, #2
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	4413      	add	r3, r2
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	1aca      	subs	r2, r1, r3
 8001d02:	2a05      	cmp	r2, #5
 8001d04:	f200 8198 	bhi.w	8002038 <MENU_ChoiseFunction+0x354>
 8001d08:	a301      	add	r3, pc, #4	; (adr r3, 8001d10 <MENU_ChoiseFunction+0x2c>)
 8001d0a:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8001d0e:	bf00      	nop
 8001d10:	08001d29 	.word	0x08001d29
 8001d14:	08001d99 	.word	0x08001d99
 8001d18:	08001e09 	.word	0x08001e09
 8001d1c:	08001e79 	.word	0x08001e79
 8001d20:	08001f07 	.word	0x08001f07
 8001d24:	08001f77 	.word	0x08001f77
   {
      case MENU_CHOISE_TIME:
      {
         osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8001d28:	4bb8      	ldr	r3, [pc, #736]	; (800200c <MENU_ChoiseFunction+0x328>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d30:	4618      	mov	r0, r3
 8001d32:	f014 f845 	bl	8015dc0 <osMutexAcquire>
         osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8001d36:	4bb6      	ldr	r3, [pc, #728]	; (8002010 <MENU_ChoiseFunction+0x32c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f04f 31ff 	mov.w	r1, #4294967295
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f014 f83e 	bl	8015dc0 <osMutexAcquire>
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8001d44:	4bb3      	ldr	r3, [pc, #716]	; (8002014 <MENU_ChoiseFunction+0x330>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f04f 31ff 	mov.w	r1, #4294967295
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f014 f837 	bl	8015dc0 <osMutexAcquire>
         ssd1306_clear();
 8001d52:	f00b fc51 	bl	800d5f8 <ssd1306_clear>
         sprintf(Temp, "Ustaw godzine");
 8001d56:	1d3b      	adds	r3, r7, #4
 8001d58:	49af      	ldr	r1, [pc, #700]	; (8002018 <MENU_ChoiseFunction+0x334>)
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f00a ff1c 	bl	800cb98 <sprintf_>
         GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8001d60:	1d3a      	adds	r2, r7, #4
 8001d62:	2300      	movs	r3, #0
 8001d64:	9301      	str	r3, [sp, #4]
 8001d66:	2300      	movs	r3, #0
 8001d68:	9300      	str	r3, [sp, #0]
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	2000      	movs	r0, #0
 8001d70:	f7ff faa0 	bl	80012b4 <GFX_DrawString>
         ssd1306_display();
 8001d74:	f00b fc14 	bl	800d5a0 <ssd1306_display>
         osMutexRelease(SPI1MutexHandle);
 8001d78:	4ba6      	ldr	r3, [pc, #664]	; (8002014 <MENU_ChoiseFunction+0x330>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f014 f86a 	bl	8015e56 <osMutexRelease>
         osMutexRelease(SSD1306MutexHandle);
 8001d82:	4ba3      	ldr	r3, [pc, #652]	; (8002010 <MENU_ChoiseFunction+0x32c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f014 f865 	bl	8015e56 <osMutexRelease>
         osMutexRelease(ScreensDcMutexHandle);
 8001d8c:	4b9f      	ldr	r3, [pc, #636]	; (800200c <MENU_ChoiseFunction+0x328>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f014 f860 	bl	8015e56 <osMutexRelease>
         break;
 8001d96:	e150      	b.n	800203a <MENU_ChoiseFunction+0x356>
      }
      case MENU_CHOISE_DATE:
      {
         osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8001d98:	4b9c      	ldr	r3, [pc, #624]	; (800200c <MENU_ChoiseFunction+0x328>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001da0:	4618      	mov	r0, r3
 8001da2:	f014 f80d 	bl	8015dc0 <osMutexAcquire>
         osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8001da6:	4b9a      	ldr	r3, [pc, #616]	; (8002010 <MENU_ChoiseFunction+0x32c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f04f 31ff 	mov.w	r1, #4294967295
 8001dae:	4618      	mov	r0, r3
 8001db0:	f014 f806 	bl	8015dc0 <osMutexAcquire>
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8001db4:	4b97      	ldr	r3, [pc, #604]	; (8002014 <MENU_ChoiseFunction+0x330>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f013 ffff 	bl	8015dc0 <osMutexAcquire>
         ssd1306_clear();
 8001dc2:	f00b fc19 	bl	800d5f8 <ssd1306_clear>
         sprintf(Temp, "Ustaw date");
 8001dc6:	1d3b      	adds	r3, r7, #4
 8001dc8:	4994      	ldr	r1, [pc, #592]	; (800201c <MENU_ChoiseFunction+0x338>)
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f00a fee4 	bl	800cb98 <sprintf_>
         GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8001dd0:	1d3a      	adds	r2, r7, #4
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	9301      	str	r3, [sp, #4]
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	9300      	str	r3, [sp, #0]
 8001dda:	2301      	movs	r3, #1
 8001ddc:	2100      	movs	r1, #0
 8001dde:	2000      	movs	r0, #0
 8001de0:	f7ff fa68 	bl	80012b4 <GFX_DrawString>
         ssd1306_display();
 8001de4:	f00b fbdc 	bl	800d5a0 <ssd1306_display>
         osMutexRelease(SPI1MutexHandle);
 8001de8:	4b8a      	ldr	r3, [pc, #552]	; (8002014 <MENU_ChoiseFunction+0x330>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f014 f832 	bl	8015e56 <osMutexRelease>
         osMutexRelease(SSD1306MutexHandle);
 8001df2:	4b87      	ldr	r3, [pc, #540]	; (8002010 <MENU_ChoiseFunction+0x32c>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f014 f82d 	bl	8015e56 <osMutexRelease>
         osMutexRelease(ScreensDcMutexHandle);
 8001dfc:	4b83      	ldr	r3, [pc, #524]	; (800200c <MENU_ChoiseFunction+0x328>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f014 f828 	bl	8015e56 <osMutexRelease>
         break;
 8001e06:	e118      	b.n	800203a <MENU_ChoiseFunction+0x356>
      }
      case MENU_CHOISE_CHART:
      {
         osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8001e08:	4b80      	ldr	r3, [pc, #512]	; (800200c <MENU_ChoiseFunction+0x328>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e10:	4618      	mov	r0, r3
 8001e12:	f013 ffd5 	bl	8015dc0 <osMutexAcquire>
         osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8001e16:	4b7e      	ldr	r3, [pc, #504]	; (8002010 <MENU_ChoiseFunction+0x32c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f04f 31ff 	mov.w	r1, #4294967295
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f013 ffce 	bl	8015dc0 <osMutexAcquire>
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8001e24:	4b7b      	ldr	r3, [pc, #492]	; (8002014 <MENU_ChoiseFunction+0x330>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f04f 31ff 	mov.w	r1, #4294967295
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f013 ffc7 	bl	8015dc0 <osMutexAcquire>
         ssd1306_clear();
 8001e32:	f00b fbe1 	bl	800d5f8 <ssd1306_clear>
         sprintf(Temp, "Wykresy");
 8001e36:	1d3b      	adds	r3, r7, #4
 8001e38:	4979      	ldr	r1, [pc, #484]	; (8002020 <MENU_ChoiseFunction+0x33c>)
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f00a feac 	bl	800cb98 <sprintf_>
         GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8001e40:	1d3a      	adds	r2, r7, #4
 8001e42:	2300      	movs	r3, #0
 8001e44:	9301      	str	r3, [sp, #4]
 8001e46:	2300      	movs	r3, #0
 8001e48:	9300      	str	r3, [sp, #0]
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	2000      	movs	r0, #0
 8001e50:	f7ff fa30 	bl	80012b4 <GFX_DrawString>
         ssd1306_display();
 8001e54:	f00b fba4 	bl	800d5a0 <ssd1306_display>
         osMutexRelease(SPI1MutexHandle);
 8001e58:	4b6e      	ldr	r3, [pc, #440]	; (8002014 <MENU_ChoiseFunction+0x330>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f013 fffa 	bl	8015e56 <osMutexRelease>
         osMutexRelease(SSD1306MutexHandle);
 8001e62:	4b6b      	ldr	r3, [pc, #428]	; (8002010 <MENU_ChoiseFunction+0x32c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f013 fff5 	bl	8015e56 <osMutexRelease>
         osMutexRelease(ScreensDcMutexHandle);
 8001e6c:	4b67      	ldr	r3, [pc, #412]	; (800200c <MENU_ChoiseFunction+0x328>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f013 fff0 	bl	8015e56 <osMutexRelease>
         break;
 8001e76:	e0e0      	b.n	800203a <MENU_ChoiseFunction+0x356>
      }
      case MENU_CHOISE_CLEAR_EXTERNAL_MEMORY:
      {
         osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8001e78:	4b64      	ldr	r3, [pc, #400]	; (800200c <MENU_ChoiseFunction+0x328>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e80:	4618      	mov	r0, r3
 8001e82:	f013 ff9d 	bl	8015dc0 <osMutexAcquire>
         osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8001e86:	4b62      	ldr	r3, [pc, #392]	; (8002010 <MENU_ChoiseFunction+0x32c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f04f 31ff 	mov.w	r1, #4294967295
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f013 ff96 	bl	8015dc0 <osMutexAcquire>
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8001e94:	4b5f      	ldr	r3, [pc, #380]	; (8002014 <MENU_ChoiseFunction+0x330>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f04f 31ff 	mov.w	r1, #4294967295
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f013 ff8f 	bl	8015dc0 <osMutexAcquire>
         ssd1306_clear();
 8001ea2:	f00b fba9 	bl	800d5f8 <ssd1306_clear>
         sprintf(Temp, "Czyszczenie Pamieci");
 8001ea6:	1d3b      	adds	r3, r7, #4
 8001ea8:	495e      	ldr	r1, [pc, #376]	; (8002024 <MENU_ChoiseFunction+0x340>)
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f00a fe74 	bl	800cb98 <sprintf_>
         GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8001eb0:	1d3a      	adds	r2, r7, #4
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	9301      	str	r3, [sp, #4]
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	9300      	str	r3, [sp, #0]
 8001eba:	2301      	movs	r3, #1
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	2000      	movs	r0, #0
 8001ec0:	f7ff f9f8 	bl	80012b4 <GFX_DrawString>
         sprintf(Temp, "WYMAGA POTWIERDZENIA");
 8001ec4:	1d3b      	adds	r3, r7, #4
 8001ec6:	4958      	ldr	r1, [pc, #352]	; (8002028 <MENU_ChoiseFunction+0x344>)
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f00a fe65 	bl	800cb98 <sprintf_>
         GFX_DrawString(0, 10, Temp, WHITE, 0, OLED);
 8001ece:	1d3a      	adds	r2, r7, #4
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	9301      	str	r3, [sp, #4]
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	2301      	movs	r3, #1
 8001eda:	210a      	movs	r1, #10
 8001edc:	2000      	movs	r0, #0
 8001ede:	f7ff f9e9 	bl	80012b4 <GFX_DrawString>
         ssd1306_display();
 8001ee2:	f00b fb5d 	bl	800d5a0 <ssd1306_display>
         osMutexRelease(SPI1MutexHandle);
 8001ee6:	4b4b      	ldr	r3, [pc, #300]	; (8002014 <MENU_ChoiseFunction+0x330>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f013 ffb3 	bl	8015e56 <osMutexRelease>
         osMutexRelease(SSD1306MutexHandle);
 8001ef0:	4b47      	ldr	r3, [pc, #284]	; (8002010 <MENU_ChoiseFunction+0x32c>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f013 ffae 	bl	8015e56 <osMutexRelease>
         osMutexRelease(ScreensDcMutexHandle);
 8001efa:	4b44      	ldr	r3, [pc, #272]	; (800200c <MENU_ChoiseFunction+0x328>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f013 ffa9 	bl	8015e56 <osMutexRelease>
         break;
 8001f04:	e099      	b.n	800203a <MENU_ChoiseFunction+0x356>
      }
      case MENU_CHOISE_DARK_MODE:
      {
         osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8001f06:	4b41      	ldr	r3, [pc, #260]	; (800200c <MENU_ChoiseFunction+0x328>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f04f 31ff 	mov.w	r1, #4294967295
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f013 ff56 	bl	8015dc0 <osMutexAcquire>
         osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8001f14:	4b3e      	ldr	r3, [pc, #248]	; (8002010 <MENU_ChoiseFunction+0x32c>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f04f 31ff 	mov.w	r1, #4294967295
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f013 ff4f 	bl	8015dc0 <osMutexAcquire>
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8001f22:	4b3c      	ldr	r3, [pc, #240]	; (8002014 <MENU_ChoiseFunction+0x330>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f04f 31ff 	mov.w	r1, #4294967295
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f013 ff48 	bl	8015dc0 <osMutexAcquire>
         ssd1306_clear();
 8001f30:	f00b fb62 	bl	800d5f8 <ssd1306_clear>
         sprintf(Temp, "ON/OFF Tryb ciemny");
 8001f34:	1d3b      	adds	r3, r7, #4
 8001f36:	493d      	ldr	r1, [pc, #244]	; (800202c <MENU_ChoiseFunction+0x348>)
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f00a fe2d 	bl	800cb98 <sprintf_>
         GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8001f3e:	1d3a      	adds	r2, r7, #4
 8001f40:	2300      	movs	r3, #0
 8001f42:	9301      	str	r3, [sp, #4]
 8001f44:	2300      	movs	r3, #0
 8001f46:	9300      	str	r3, [sp, #0]
 8001f48:	2301      	movs	r3, #1
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	f7ff f9b1 	bl	80012b4 <GFX_DrawString>
         ssd1306_display();
 8001f52:	f00b fb25 	bl	800d5a0 <ssd1306_display>
         osMutexRelease(SPI1MutexHandle);
 8001f56:	4b2f      	ldr	r3, [pc, #188]	; (8002014 <MENU_ChoiseFunction+0x330>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f013 ff7b 	bl	8015e56 <osMutexRelease>
         osMutexRelease(SSD1306MutexHandle);
 8001f60:	4b2b      	ldr	r3, [pc, #172]	; (8002010 <MENU_ChoiseFunction+0x32c>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f013 ff76 	bl	8015e56 <osMutexRelease>
         osMutexRelease(ScreensDcMutexHandle);
 8001f6a:	4b28      	ldr	r3, [pc, #160]	; (800200c <MENU_ChoiseFunction+0x328>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f013 ff71 	bl	8015e56 <osMutexRelease>
         break;
 8001f74:	e061      	b.n	800203a <MENU_ChoiseFunction+0x356>
      }
      case MENU_CHOISE_SEND_MESURMENT_COMMAND:
      {
         osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8001f76:	4b25      	ldr	r3, [pc, #148]	; (800200c <MENU_ChoiseFunction+0x328>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f04f 31ff 	mov.w	r1, #4294967295
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f013 ff1e 	bl	8015dc0 <osMutexAcquire>
         osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8001f84:	4b22      	ldr	r3, [pc, #136]	; (8002010 <MENU_ChoiseFunction+0x32c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f04f 31ff 	mov.w	r1, #4294967295
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f013 ff17 	bl	8015dc0 <osMutexAcquire>
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8001f92:	4b20      	ldr	r3, [pc, #128]	; (8002014 <MENU_ChoiseFunction+0x330>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f04f 31ff 	mov.w	r1, #4294967295
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f013 ff10 	bl	8015dc0 <osMutexAcquire>
         ssd1306_clear();
 8001fa0:	f00b fb2a 	bl	800d5f8 <ssd1306_clear>
         sprintf(Temp, "WYSLIJ ZADANIE");
 8001fa4:	1d3b      	adds	r3, r7, #4
 8001fa6:	4922      	ldr	r1, [pc, #136]	; (8002030 <MENU_ChoiseFunction+0x34c>)
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f00a fdf5 	bl	800cb98 <sprintf_>
         GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8001fae:	1d3a      	adds	r2, r7, #4
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	9301      	str	r3, [sp, #4]
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	9300      	str	r3, [sp, #0]
 8001fb8:	2301      	movs	r3, #1
 8001fba:	2100      	movs	r1, #0
 8001fbc:	2000      	movs	r0, #0
 8001fbe:	f7ff f979 	bl	80012b4 <GFX_DrawString>
         sprintf(Temp, "POMIARU");
 8001fc2:	1d3b      	adds	r3, r7, #4
 8001fc4:	491b      	ldr	r1, [pc, #108]	; (8002034 <MENU_ChoiseFunction+0x350>)
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f00a fde6 	bl	800cb98 <sprintf_>
         GFX_DrawString(0, 10, Temp, WHITE, 0, OLED);
 8001fcc:	1d3a      	adds	r2, r7, #4
 8001fce:	2300      	movs	r3, #0
 8001fd0:	9301      	str	r3, [sp, #4]
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	9300      	str	r3, [sp, #0]
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	210a      	movs	r1, #10
 8001fda:	2000      	movs	r0, #0
 8001fdc:	f7ff f96a 	bl	80012b4 <GFX_DrawString>
         ssd1306_display();
 8001fe0:	f00b fade 	bl	800d5a0 <ssd1306_display>
         osMutexRelease(SPI1MutexHandle);
 8001fe4:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <MENU_ChoiseFunction+0x330>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f013 ff34 	bl	8015e56 <osMutexRelease>
         osMutexRelease(SSD1306MutexHandle);
 8001fee:	4b08      	ldr	r3, [pc, #32]	; (8002010 <MENU_ChoiseFunction+0x32c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f013 ff2f 	bl	8015e56 <osMutexRelease>
         osMutexRelease(ScreensDcMutexHandle);
 8001ff8:	4b04      	ldr	r3, [pc, #16]	; (800200c <MENU_ChoiseFunction+0x328>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f013 ff2a 	bl	8015e56 <osMutexRelease>
         break;
 8002002:	e01a      	b.n	800203a <MENU_ChoiseFunction+0x356>
 8002004:	40000c00 	.word	0x40000c00
 8002008:	aaaaaaab 	.word	0xaaaaaaab
 800200c:	200040a4 	.word	0x200040a4
 8002010:	200040a8 	.word	0x200040a8
 8002014:	200040ac 	.word	0x200040ac
 8002018:	0801fed8 	.word	0x0801fed8
 800201c:	0801fee8 	.word	0x0801fee8
 8002020:	0801fef4 	.word	0x0801fef4
 8002024:	0801fefc 	.word	0x0801fefc
 8002028:	0801ff10 	.word	0x0801ff10
 800202c:	0801ff28 	.word	0x0801ff28
 8002030:	0801ff3c 	.word	0x0801ff3c
 8002034:	0801ff4c 	.word	0x0801ff4c
      }
      default:
      {
         break;
 8002038:	bf00      	nop
      }
   }
   if(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 800203a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800203e:	4816      	ldr	r0, [pc, #88]	; (8002098 <MENU_ChoiseFunction+0x3b4>)
 8002040:	f00c ff1e 	bl	800ee80 <HAL_GPIO_ReadPin>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d122      	bne.n	8002090 <MENU_ChoiseFunction+0x3ac>
   {
      Menu.NewEvent  = MENU_EVENT_CHOISE;
 800204a:	4b14      	ldr	r3, [pc, #80]	; (800209c <MENU_ChoiseFunction+0x3b8>)
 800204c:	2202      	movs	r2, #2
 800204e:	725a      	strb	r2, [r3, #9]
      Menu.ChoiseCnt = (TIM5->CNT / 4) % MENU_CHOISE_CNT;
 8002050:	4b13      	ldr	r3, [pc, #76]	; (80020a0 <MENU_ChoiseFunction+0x3bc>)
 8002052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002054:	0899      	lsrs	r1, r3, #2
 8002056:	4b13      	ldr	r3, [pc, #76]	; (80020a4 <MENU_ChoiseFunction+0x3c0>)
 8002058:	fba3 2301 	umull	r2, r3, r3, r1
 800205c:	089a      	lsrs	r2, r3, #2
 800205e:	4613      	mov	r3, r2
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	4413      	add	r3, r2
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	1aca      	subs	r2, r1, r3
 8002068:	4b0c      	ldr	r3, [pc, #48]	; (800209c <MENU_ChoiseFunction+0x3b8>)
 800206a:	601a      	str	r2, [r3, #0]
      TIM5->CNT      = 0;
 800206c:	4b0c      	ldr	r3, [pc, #48]	; (80020a0 <MENU_ChoiseFunction+0x3bc>)
 800206e:	2200      	movs	r2, #0
 8002070:	625a      	str	r2, [r3, #36]	; 0x24
      Menu.f         = 0;
 8002072:	4b0a      	ldr	r3, [pc, #40]	; (800209c <MENU_ChoiseFunction+0x3b8>)
 8002074:	2200      	movs	r2, #0
 8002076:	729a      	strb	r2, [r3, #10]
      while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002078:	e002      	b.n	8002080 <MENU_ChoiseFunction+0x39c>
      {
         osDelay(100);
 800207a:	2064      	movs	r0, #100	; 0x64
 800207c:	f013 fc52 	bl	8015924 <osDelay>
      while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002080:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002084:	4804      	ldr	r0, [pc, #16]	; (8002098 <MENU_ChoiseFunction+0x3b4>)
 8002086:	f00c fefb 	bl	800ee80 <HAL_GPIO_ReadPin>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d0f4      	beq.n	800207a <MENU_ChoiseFunction+0x396>
      }
   }
}
 8002090:	bf00      	nop
 8002092:	3768      	adds	r7, #104	; 0x68
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	48000400 	.word	0x48000400
 800209c:	200002a4 	.word	0x200002a4
 80020a0:	40000c00 	.word	0x40000c00
 80020a4:	aaaaaaab 	.word	0xaaaaaaab

080020a8 <MENU_RunningFunction>:
static void MENU_RunningFunction(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b0b2      	sub	sp, #200	; 0xc8
 80020ac:	af02      	add	r7, sp, #8
   char Temp[100];
   ChartDateAndType_TypeDef QueueChartData = { 0 };
 80020ae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80020b2:	2200      	movs	r2, #0
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	809a      	strh	r2, [r3, #4]
   switch(Menu.ChoiseCnt)
 80020b8:	4bab      	ldr	r3, [pc, #684]	; (8002368 <MENU_RunningFunction+0x2c0>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2b05      	cmp	r3, #5
 80020be:	f201 850b 	bhi.w	8003ad8 <MENU_RunningFunction+0x1a30>
 80020c2:	a201      	add	r2, pc, #4	; (adr r2, 80020c8 <MENU_RunningFunction+0x20>)
 80020c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c8:	080020e1 	.word	0x080020e1
 80020cc:	080024d1 	.word	0x080024d1
 80020d0:	080028c7 	.word	0x080028c7
 80020d4:	08003465 	.word	0x08003465
 80020d8:	08003709 	.word	0x08003709
 80020dc:	08003905 	.word	0x08003905
   {
      case MENU_CHOISE_TIME:
      {
         RTC_TimeTypeDef RtcTime;
         RTC_DateTypeDef RtcDate;
         osMutexAcquire(RTCMutexHandle, osWaitForever);
 80020e0:	4ba2      	ldr	r3, [pc, #648]	; (800236c <MENU_RunningFunction+0x2c4>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f04f 31ff 	mov.w	r1, #4294967295
 80020e8:	4618      	mov	r0, r3
 80020ea:	f013 fe69 	bl	8015dc0 <osMutexAcquire>
         HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 80020ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80020f2:	2200      	movs	r2, #0
 80020f4:	4619      	mov	r1, r3
 80020f6:	489e      	ldr	r0, [pc, #632]	; (8002370 <MENU_RunningFunction+0x2c8>)
 80020f8:	f00e fe30 	bl	8010d5c <HAL_RTC_GetTime>
         HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 80020fc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002100:	2200      	movs	r2, #0
 8002102:	4619      	mov	r1, r3
 8002104:	489a      	ldr	r0, [pc, #616]	; (8002370 <MENU_RunningFunction+0x2c8>)
 8002106:	f00e ff13 	bl	8010f30 <HAL_RTC_GetDate>
         osMutexRelease(RTCMutexHandle);
 800210a:	4b98      	ldr	r3, [pc, #608]	; (800236c <MENU_RunningFunction+0x2c4>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f013 fea1 	bl	8015e56 <osMutexRelease>
         osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8002114:	4b97      	ldr	r3, [pc, #604]	; (8002374 <MENU_RunningFunction+0x2cc>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f04f 31ff 	mov.w	r1, #4294967295
 800211c:	4618      	mov	r0, r3
 800211e:	f013 fe4f 	bl	8015dc0 <osMutexAcquire>
         osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8002122:	4b95      	ldr	r3, [pc, #596]	; (8002378 <MENU_RunningFunction+0x2d0>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f04f 31ff 	mov.w	r1, #4294967295
 800212a:	4618      	mov	r0, r3
 800212c:	f013 fe48 	bl	8015dc0 <osMutexAcquire>
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8002130:	4b92      	ldr	r3, [pc, #584]	; (800237c <MENU_RunningFunction+0x2d4>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f04f 31ff 	mov.w	r1, #4294967295
 8002138:	4618      	mov	r0, r3
 800213a:	f013 fe41 	bl	8015dc0 <osMutexAcquire>
         ssd1306_clear();
 800213e:	f00b fa5b 	bl	800d5f8 <ssd1306_clear>
         sprintf(Temp, "%d h %d m %d s", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 8002142:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002146:	461a      	mov	r2, r3
 8002148:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800214c:	4619      	mov	r1, r3
 800214e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002152:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8002156:	9300      	str	r3, [sp, #0]
 8002158:	460b      	mov	r3, r1
 800215a:	4989      	ldr	r1, [pc, #548]	; (8002380 <MENU_RunningFunction+0x2d8>)
 800215c:	f00a fd1c 	bl	800cb98 <sprintf_>
         GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8002160:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002164:	2300      	movs	r3, #0
 8002166:	9301      	str	r3, [sp, #4]
 8002168:	2300      	movs	r3, #0
 800216a:	9300      	str	r3, [sp, #0]
 800216c:	2301      	movs	r3, #1
 800216e:	2100      	movs	r1, #0
 8002170:	2000      	movs	r0, #0
 8002172:	f7ff f89f 	bl	80012b4 <GFX_DrawString>
         ssd1306_display();
 8002176:	f00b fa13 	bl	800d5a0 <ssd1306_display>
         osMutexRelease(SPI1MutexHandle);
 800217a:	4b80      	ldr	r3, [pc, #512]	; (800237c <MENU_RunningFunction+0x2d4>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4618      	mov	r0, r3
 8002180:	f013 fe69 	bl	8015e56 <osMutexRelease>
         osMutexRelease(SSD1306MutexHandle);
 8002184:	4b7c      	ldr	r3, [pc, #496]	; (8002378 <MENU_RunningFunction+0x2d0>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f013 fe64 	bl	8015e56 <osMutexRelease>
         osMutexRelease(ScreensDcMutexHandle);
 800218e:	4b79      	ldr	r3, [pc, #484]	; (8002374 <MENU_RunningFunction+0x2cc>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	f013 fe5f 	bl	8015e56 <osMutexRelease>
         while(Menu.f == 0)
 8002198:	e193      	b.n	80024c2 <MENU_RunningFunction+0x41a>
         {
            if(Menu.ButtonCnt == 0)
 800219a:	4b73      	ldr	r3, [pc, #460]	; (8002368 <MENU_RunningFunction+0x2c0>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d16e      	bne.n	8002280 <MENU_RunningFunction+0x1d8>
            {
               RtcTime.Hours = (TIM5->CNT / 4) % 24;
 80021a2:	4b78      	ldr	r3, [pc, #480]	; (8002384 <MENU_RunningFunction+0x2dc>)
 80021a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a6:	0899      	lsrs	r1, r3, #2
 80021a8:	4b77      	ldr	r3, [pc, #476]	; (8002388 <MENU_RunningFunction+0x2e0>)
 80021aa:	fba3 2301 	umull	r2, r3, r3, r1
 80021ae:	091a      	lsrs	r2, r3, #4
 80021b0:	4613      	mov	r3, r2
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	4413      	add	r3, r2
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	1aca      	subs	r2, r1, r3
 80021ba:	b2d3      	uxtb	r3, r2
 80021bc:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 80021c0:	4b6c      	ldr	r3, [pc, #432]	; (8002374 <MENU_RunningFunction+0x2cc>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f04f 31ff 	mov.w	r1, #4294967295
 80021c8:	4618      	mov	r0, r3
 80021ca:	f013 fdf9 	bl	8015dc0 <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 80021ce:	4b6a      	ldr	r3, [pc, #424]	; (8002378 <MENU_RunningFunction+0x2d0>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f04f 31ff 	mov.w	r1, #4294967295
 80021d6:	4618      	mov	r0, r3
 80021d8:	f013 fdf2 	bl	8015dc0 <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 80021dc:	4b67      	ldr	r3, [pc, #412]	; (800237c <MENU_RunningFunction+0x2d4>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f04f 31ff 	mov.w	r1, #4294967295
 80021e4:	4618      	mov	r0, r3
 80021e6:	f013 fdeb 	bl	8015dc0 <osMutexAcquire>
               ssd1306_clear();
 80021ea:	f00b fa05 	bl	800d5f8 <ssd1306_clear>
               sprintf(Temp, "%d h %d m %d s", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 80021ee:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80021f2:	461a      	mov	r2, r3
 80021f4:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80021f8:	4619      	mov	r1, r3
 80021fa:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80021fe:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	460b      	mov	r3, r1
 8002206:	495e      	ldr	r1, [pc, #376]	; (8002380 <MENU_RunningFunction+0x2d8>)
 8002208:	f00a fcc6 	bl	800cb98 <sprintf_>
               GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 800220c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002210:	2300      	movs	r3, #0
 8002212:	9301      	str	r3, [sp, #4]
 8002214:	2300      	movs	r3, #0
 8002216:	9300      	str	r3, [sp, #0]
 8002218:	2301      	movs	r3, #1
 800221a:	2100      	movs	r1, #0
 800221c:	2000      	movs	r0, #0
 800221e:	f7ff f849 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 8002222:	f00b f9bd 	bl	800d5a0 <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 8002226:	4b55      	ldr	r3, [pc, #340]	; (800237c <MENU_RunningFunction+0x2d4>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f013 fe13 	bl	8015e56 <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 8002230:	4b51      	ldr	r3, [pc, #324]	; (8002378 <MENU_RunningFunction+0x2d0>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4618      	mov	r0, r3
 8002236:	f013 fe0e 	bl	8015e56 <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 800223a:	4b4e      	ldr	r3, [pc, #312]	; (8002374 <MENU_RunningFunction+0x2cc>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4618      	mov	r0, r3
 8002240:	f013 fe09 	bl	8015e56 <osMutexRelease>
               if(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002244:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002248:	4850      	ldr	r0, [pc, #320]	; (800238c <MENU_RunningFunction+0x2e4>)
 800224a:	f00c fe19 	bl	800ee80 <HAL_GPIO_ReadPin>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	f040 8133 	bne.w	80024bc <MENU_RunningFunction+0x414>
               {
                  Menu.ButtonCnt++;
 8002256:	4b44      	ldr	r3, [pc, #272]	; (8002368 <MENU_RunningFunction+0x2c0>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	3301      	adds	r3, #1
 800225c:	4a42      	ldr	r2, [pc, #264]	; (8002368 <MENU_RunningFunction+0x2c0>)
 800225e:	6053      	str	r3, [r2, #4]
                  TIM5->CNT = 0;
 8002260:	4b48      	ldr	r3, [pc, #288]	; (8002384 <MENU_RunningFunction+0x2dc>)
 8002262:	2200      	movs	r2, #0
 8002264:	625a      	str	r2, [r3, #36]	; 0x24
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002266:	e002      	b.n	800226e <MENU_RunningFunction+0x1c6>
                  {
                     osDelay(100);
 8002268:	2064      	movs	r0, #100	; 0x64
 800226a:	f013 fb5b 	bl	8015924 <osDelay>
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 800226e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002272:	4846      	ldr	r0, [pc, #280]	; (800238c <MENU_RunningFunction+0x2e4>)
 8002274:	f00c fe04 	bl	800ee80 <HAL_GPIO_ReadPin>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d0f4      	beq.n	8002268 <MENU_RunningFunction+0x1c0>
 800227e:	e11d      	b.n	80024bc <MENU_RunningFunction+0x414>
                  }
               }
            }
            else if(Menu.ButtonCnt == 1)
 8002280:	4b39      	ldr	r3, [pc, #228]	; (8002368 <MENU_RunningFunction+0x2c0>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	2b01      	cmp	r3, #1
 8002286:	f040 8085 	bne.w	8002394 <MENU_RunningFunction+0x2ec>
            {
               RtcTime.Minutes = (TIM5->CNT / 4) % 60;
 800228a:	4b3e      	ldr	r3, [pc, #248]	; (8002384 <MENU_RunningFunction+0x2dc>)
 800228c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228e:	0899      	lsrs	r1, r3, #2
 8002290:	4b3f      	ldr	r3, [pc, #252]	; (8002390 <MENU_RunningFunction+0x2e8>)
 8002292:	fba3 2301 	umull	r2, r3, r3, r1
 8002296:	095a      	lsrs	r2, r3, #5
 8002298:	4613      	mov	r3, r2
 800229a:	011b      	lsls	r3, r3, #4
 800229c:	1a9b      	subs	r3, r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	1aca      	subs	r2, r1, r3
 80022a2:	b2d3      	uxtb	r3, r2
 80022a4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 80022a8:	4b32      	ldr	r3, [pc, #200]	; (8002374 <MENU_RunningFunction+0x2cc>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f04f 31ff 	mov.w	r1, #4294967295
 80022b0:	4618      	mov	r0, r3
 80022b2:	f013 fd85 	bl	8015dc0 <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 80022b6:	4b30      	ldr	r3, [pc, #192]	; (8002378 <MENU_RunningFunction+0x2d0>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f04f 31ff 	mov.w	r1, #4294967295
 80022be:	4618      	mov	r0, r3
 80022c0:	f013 fd7e 	bl	8015dc0 <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 80022c4:	4b2d      	ldr	r3, [pc, #180]	; (800237c <MENU_RunningFunction+0x2d4>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f04f 31ff 	mov.w	r1, #4294967295
 80022cc:	4618      	mov	r0, r3
 80022ce:	f013 fd77 	bl	8015dc0 <osMutexAcquire>
               ssd1306_clear();
 80022d2:	f00b f991 	bl	800d5f8 <ssd1306_clear>
               sprintf(Temp, "%d h %d m %d s", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 80022d6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80022da:	461a      	mov	r2, r3
 80022dc:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80022e0:	4619      	mov	r1, r3
 80022e2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80022e6:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80022ea:	9300      	str	r3, [sp, #0]
 80022ec:	460b      	mov	r3, r1
 80022ee:	4924      	ldr	r1, [pc, #144]	; (8002380 <MENU_RunningFunction+0x2d8>)
 80022f0:	f00a fc52 	bl	800cb98 <sprintf_>
               GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 80022f4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80022f8:	2300      	movs	r3, #0
 80022fa:	9301      	str	r3, [sp, #4]
 80022fc:	2300      	movs	r3, #0
 80022fe:	9300      	str	r3, [sp, #0]
 8002300:	2301      	movs	r3, #1
 8002302:	2100      	movs	r1, #0
 8002304:	2000      	movs	r0, #0
 8002306:	f7fe ffd5 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 800230a:	f00b f949 	bl	800d5a0 <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 800230e:	4b1b      	ldr	r3, [pc, #108]	; (800237c <MENU_RunningFunction+0x2d4>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f013 fd9f 	bl	8015e56 <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 8002318:	4b17      	ldr	r3, [pc, #92]	; (8002378 <MENU_RunningFunction+0x2d0>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4618      	mov	r0, r3
 800231e:	f013 fd9a 	bl	8015e56 <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 8002322:	4b14      	ldr	r3, [pc, #80]	; (8002374 <MENU_RunningFunction+0x2cc>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4618      	mov	r0, r3
 8002328:	f013 fd95 	bl	8015e56 <osMutexRelease>
               if(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 800232c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002330:	4816      	ldr	r0, [pc, #88]	; (800238c <MENU_RunningFunction+0x2e4>)
 8002332:	f00c fda5 	bl	800ee80 <HAL_GPIO_ReadPin>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	f040 80bf 	bne.w	80024bc <MENU_RunningFunction+0x414>
               {
                  Menu.ButtonCnt++;
 800233e:	4b0a      	ldr	r3, [pc, #40]	; (8002368 <MENU_RunningFunction+0x2c0>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	3301      	adds	r3, #1
 8002344:	4a08      	ldr	r2, [pc, #32]	; (8002368 <MENU_RunningFunction+0x2c0>)
 8002346:	6053      	str	r3, [r2, #4]
                  TIM5->CNT = 0;
 8002348:	4b0e      	ldr	r3, [pc, #56]	; (8002384 <MENU_RunningFunction+0x2dc>)
 800234a:	2200      	movs	r2, #0
 800234c:	625a      	str	r2, [r3, #36]	; 0x24
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 800234e:	e002      	b.n	8002356 <MENU_RunningFunction+0x2ae>
                  {
                     osDelay(100);
 8002350:	2064      	movs	r0, #100	; 0x64
 8002352:	f013 fae7 	bl	8015924 <osDelay>
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002356:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800235a:	480c      	ldr	r0, [pc, #48]	; (800238c <MENU_RunningFunction+0x2e4>)
 800235c:	f00c fd90 	bl	800ee80 <HAL_GPIO_ReadPin>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0f4      	beq.n	8002350 <MENU_RunningFunction+0x2a8>
 8002366:	e0a9      	b.n	80024bc <MENU_RunningFunction+0x414>
 8002368:	200002a4 	.word	0x200002a4
 800236c:	200040bc 	.word	0x200040bc
 8002370:	200041d4 	.word	0x200041d4
 8002374:	200040a4 	.word	0x200040a4
 8002378:	200040a8 	.word	0x200040a8
 800237c:	200040ac 	.word	0x200040ac
 8002380:	0801ff54 	.word	0x0801ff54
 8002384:	40000c00 	.word	0x40000c00
 8002388:	aaaaaaab 	.word	0xaaaaaaab
 800238c:	48000400 	.word	0x48000400
 8002390:	88888889 	.word	0x88888889
                  }
               }
            }
            else
            {
               RtcTime.Seconds = (TIM5->CNT / 4) % 60;
 8002394:	4bb9      	ldr	r3, [pc, #740]	; (800267c <MENU_RunningFunction+0x5d4>)
 8002396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002398:	0899      	lsrs	r1, r3, #2
 800239a:	4bb9      	ldr	r3, [pc, #740]	; (8002680 <MENU_RunningFunction+0x5d8>)
 800239c:	fba3 2301 	umull	r2, r3, r3, r1
 80023a0:	095a      	lsrs	r2, r3, #5
 80023a2:	4613      	mov	r3, r2
 80023a4:	011b      	lsls	r3, r3, #4
 80023a6:	1a9b      	subs	r3, r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	1aca      	subs	r2, r1, r3
 80023ac:	b2d3      	uxtb	r3, r2
 80023ae:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 80023b2:	4bb4      	ldr	r3, [pc, #720]	; (8002684 <MENU_RunningFunction+0x5dc>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f04f 31ff 	mov.w	r1, #4294967295
 80023ba:	4618      	mov	r0, r3
 80023bc:	f013 fd00 	bl	8015dc0 <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 80023c0:	4bb1      	ldr	r3, [pc, #708]	; (8002688 <MENU_RunningFunction+0x5e0>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f04f 31ff 	mov.w	r1, #4294967295
 80023c8:	4618      	mov	r0, r3
 80023ca:	f013 fcf9 	bl	8015dc0 <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 80023ce:	4baf      	ldr	r3, [pc, #700]	; (800268c <MENU_RunningFunction+0x5e4>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f04f 31ff 	mov.w	r1, #4294967295
 80023d6:	4618      	mov	r0, r3
 80023d8:	f013 fcf2 	bl	8015dc0 <osMutexAcquire>
               ssd1306_clear();
 80023dc:	f00b f90c 	bl	800d5f8 <ssd1306_clear>
               sprintf(Temp, "%d h %d m %d s", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 80023e0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80023e4:	461a      	mov	r2, r3
 80023e6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80023ea:	4619      	mov	r1, r3
 80023ec:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80023f0:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80023f4:	9300      	str	r3, [sp, #0]
 80023f6:	460b      	mov	r3, r1
 80023f8:	49a5      	ldr	r1, [pc, #660]	; (8002690 <MENU_RunningFunction+0x5e8>)
 80023fa:	f00a fbcd 	bl	800cb98 <sprintf_>
               GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 80023fe:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002402:	2300      	movs	r3, #0
 8002404:	9301      	str	r3, [sp, #4]
 8002406:	2300      	movs	r3, #0
 8002408:	9300      	str	r3, [sp, #0]
 800240a:	2301      	movs	r3, #1
 800240c:	2100      	movs	r1, #0
 800240e:	2000      	movs	r0, #0
 8002410:	f7fe ff50 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 8002414:	f00b f8c4 	bl	800d5a0 <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 8002418:	4b9c      	ldr	r3, [pc, #624]	; (800268c <MENU_RunningFunction+0x5e4>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4618      	mov	r0, r3
 800241e:	f013 fd1a 	bl	8015e56 <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 8002422:	4b99      	ldr	r3, [pc, #612]	; (8002688 <MENU_RunningFunction+0x5e0>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f013 fd15 	bl	8015e56 <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 800242c:	4b95      	ldr	r3, [pc, #596]	; (8002684 <MENU_RunningFunction+0x5dc>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4618      	mov	r0, r3
 8002432:	f013 fd10 	bl	8015e56 <osMutexRelease>
               if(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002436:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800243a:	4896      	ldr	r0, [pc, #600]	; (8002694 <MENU_RunningFunction+0x5ec>)
 800243c:	f00c fd20 	bl	800ee80 <HAL_GPIO_ReadPin>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d13a      	bne.n	80024bc <MENU_RunningFunction+0x414>
               {
                  Menu.ButtonCnt++;
 8002446:	4b94      	ldr	r3, [pc, #592]	; (8002698 <MENU_RunningFunction+0x5f0>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	3301      	adds	r3, #1
 800244c:	4a92      	ldr	r2, [pc, #584]	; (8002698 <MENU_RunningFunction+0x5f0>)
 800244e:	6053      	str	r3, [r2, #4]
                  TIM5->CNT = 0;
 8002450:	4b8a      	ldr	r3, [pc, #552]	; (800267c <MENU_RunningFunction+0x5d4>)
 8002452:	2200      	movs	r2, #0
 8002454:	625a      	str	r2, [r3, #36]	; 0x24
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002456:	e002      	b.n	800245e <MENU_RunningFunction+0x3b6>
                  {
                     osDelay(100);
 8002458:	2064      	movs	r0, #100	; 0x64
 800245a:	f013 fa63 	bl	8015924 <osDelay>
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 800245e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002462:	488c      	ldr	r0, [pc, #560]	; (8002694 <MENU_RunningFunction+0x5ec>)
 8002464:	f00c fd0c 	bl	800ee80 <HAL_GPIO_ReadPin>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d0f4      	beq.n	8002458 <MENU_RunningFunction+0x3b0>
                  }
                  Menu.ButtonCnt = 0;
 800246e:	4b8a      	ldr	r3, [pc, #552]	; (8002698 <MENU_RunningFunction+0x5f0>)
 8002470:	2200      	movs	r2, #0
 8002472:	605a      	str	r2, [r3, #4]
                  Menu.f         = 1;
 8002474:	4b88      	ldr	r3, [pc, #544]	; (8002698 <MENU_RunningFunction+0x5f0>)
 8002476:	2201      	movs	r2, #1
 8002478:	729a      	strb	r2, [r3, #10]
                  osMutexAcquire(RTCMutexHandle, osWaitForever);
 800247a:	4b88      	ldr	r3, [pc, #544]	; (800269c <MENU_RunningFunction+0x5f4>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f04f 31ff 	mov.w	r1, #4294967295
 8002482:	4618      	mov	r0, r3
 8002484:	f013 fc9c 	bl	8015dc0 <osMutexAcquire>
                  RtcTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002488:	2300      	movs	r3, #0
 800248a:	64bb      	str	r3, [r7, #72]	; 0x48
                  RtcTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800248c:	2300      	movs	r3, #0
 800248e:	64fb      	str	r3, [r7, #76]	; 0x4c
                  RtcTime.TimeFormat=RTC_FORMAT_BIN;
 8002490:	2300      	movs	r3, #0
 8002492:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                  while(HAL_RTC_SetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN) != HAL_OK)
 8002496:	e002      	b.n	800249e <MENU_RunningFunction+0x3f6>
                  {
                     osDelay(100);
 8002498:	2064      	movs	r0, #100	; 0x64
 800249a:	f013 fa43 	bl	8015924 <osDelay>
                  while(HAL_RTC_SetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN) != HAL_OK)
 800249e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80024a2:	2200      	movs	r2, #0
 80024a4:	4619      	mov	r1, r3
 80024a6:	487e      	ldr	r0, [pc, #504]	; (80026a0 <MENU_RunningFunction+0x5f8>)
 80024a8:	f00e fbb8 	bl	8010c1c <HAL_RTC_SetTime>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1f2      	bne.n	8002498 <MENU_RunningFunction+0x3f0>
                  }
                  osMutexRelease(RTCMutexHandle);
 80024b2:	4b7a      	ldr	r3, [pc, #488]	; (800269c <MENU_RunningFunction+0x5f4>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f013 fccd 	bl	8015e56 <osMutexRelease>
               }
            }
            osDelay(50);
 80024bc:	2032      	movs	r0, #50	; 0x32
 80024be:	f013 fa31 	bl	8015924 <osDelay>
         while(Menu.f == 0)
 80024c2:	4b75      	ldr	r3, [pc, #468]	; (8002698 <MENU_RunningFunction+0x5f0>)
 80024c4:	7a9b      	ldrb	r3, [r3, #10]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f43f ae67 	beq.w	800219a <MENU_RunningFunction+0xf2>
         }
         break;
 80024cc:	f001 bb0b 	b.w	8003ae6 <MENU_RunningFunction+0x1a3e>
      }
      case MENU_CHOISE_DATE:
      {
         RTC_TimeTypeDef RtcTime;
         RTC_DateTypeDef RtcDate;
         osMutexAcquire(RTCMutexHandle, osWaitForever);
 80024d0:	4b72      	ldr	r3, [pc, #456]	; (800269c <MENU_RunningFunction+0x5f4>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f04f 31ff 	mov.w	r1, #4294967295
 80024d8:	4618      	mov	r0, r3
 80024da:	f013 fc71 	bl	8015dc0 <osMutexAcquire>
         HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 80024de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024e2:	2200      	movs	r2, #0
 80024e4:	4619      	mov	r1, r3
 80024e6:	486e      	ldr	r0, [pc, #440]	; (80026a0 <MENU_RunningFunction+0x5f8>)
 80024e8:	f00e fc38 	bl	8010d5c <HAL_RTC_GetTime>
         HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 80024ec:	f107 0320 	add.w	r3, r7, #32
 80024f0:	2200      	movs	r2, #0
 80024f2:	4619      	mov	r1, r3
 80024f4:	486a      	ldr	r0, [pc, #424]	; (80026a0 <MENU_RunningFunction+0x5f8>)
 80024f6:	f00e fd1b 	bl	8010f30 <HAL_RTC_GetDate>
         osMutexRelease(RTCMutexHandle);
 80024fa:	4b68      	ldr	r3, [pc, #416]	; (800269c <MENU_RunningFunction+0x5f4>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f013 fca9 	bl	8015e56 <osMutexRelease>
         osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8002504:	4b5f      	ldr	r3, [pc, #380]	; (8002684 <MENU_RunningFunction+0x5dc>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f04f 31ff 	mov.w	r1, #4294967295
 800250c:	4618      	mov	r0, r3
 800250e:	f013 fc57 	bl	8015dc0 <osMutexAcquire>
         osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8002512:	4b5d      	ldr	r3, [pc, #372]	; (8002688 <MENU_RunningFunction+0x5e0>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f04f 31ff 	mov.w	r1, #4294967295
 800251a:	4618      	mov	r0, r3
 800251c:	f013 fc50 	bl	8015dc0 <osMutexAcquire>
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8002520:	4b5a      	ldr	r3, [pc, #360]	; (800268c <MENU_RunningFunction+0x5e4>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f04f 31ff 	mov.w	r1, #4294967295
 8002528:	4618      	mov	r0, r3
 800252a:	f013 fc49 	bl	8015dc0 <osMutexAcquire>
         ssd1306_clear();
 800252e:	f00b f863 	bl	800d5f8 <ssd1306_clear>
         sprintf(Temp, "%d : %d : 20%d :", RtcDate.Date, RtcDate.Month, RtcDate.Year);
 8002532:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002536:	461a      	mov	r2, r3
 8002538:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800253c:	4619      	mov	r1, r3
 800253e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002542:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8002546:	9300      	str	r3, [sp, #0]
 8002548:	460b      	mov	r3, r1
 800254a:	4956      	ldr	r1, [pc, #344]	; (80026a4 <MENU_RunningFunction+0x5fc>)
 800254c:	f00a fb24 	bl	800cb98 <sprintf_>
         GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8002550:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002554:	2300      	movs	r3, #0
 8002556:	9301      	str	r3, [sp, #4]
 8002558:	2300      	movs	r3, #0
 800255a:	9300      	str	r3, [sp, #0]
 800255c:	2301      	movs	r3, #1
 800255e:	2100      	movs	r1, #0
 8002560:	2000      	movs	r0, #0
 8002562:	f7fe fea7 	bl	80012b4 <GFX_DrawString>
         ssd1306_display();
 8002566:	f00b f81b 	bl	800d5a0 <ssd1306_display>
         osMutexRelease(SPI1MutexHandle);
 800256a:	4b48      	ldr	r3, [pc, #288]	; (800268c <MENU_RunningFunction+0x5e4>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4618      	mov	r0, r3
 8002570:	f013 fc71 	bl	8015e56 <osMutexRelease>
         osMutexRelease(SSD1306MutexHandle);
 8002574:	4b44      	ldr	r3, [pc, #272]	; (8002688 <MENU_RunningFunction+0x5e0>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4618      	mov	r0, r3
 800257a:	f013 fc6c 	bl	8015e56 <osMutexRelease>
         osMutexRelease(ScreensDcMutexHandle);
 800257e:	4b41      	ldr	r3, [pc, #260]	; (8002684 <MENU_RunningFunction+0x5dc>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f013 fc67 	bl	8015e56 <osMutexRelease>
         while(Menu.f == 0)
 8002588:	e196      	b.n	80028b8 <MENU_RunningFunction+0x810>
         {
            if(Menu.ButtonCnt == 0)
 800258a:	4b43      	ldr	r3, [pc, #268]	; (8002698 <MENU_RunningFunction+0x5f0>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	f040 808c 	bne.w	80026ac <MENU_RunningFunction+0x604>
            {
               RtcDate.Date = (TIM5->CNT / 4) % 31 + 1;
 8002594:	4b39      	ldr	r3, [pc, #228]	; (800267c <MENU_RunningFunction+0x5d4>)
 8002596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002598:	089a      	lsrs	r2, r3, #2
 800259a:	4b43      	ldr	r3, [pc, #268]	; (80026a8 <MENU_RunningFunction+0x600>)
 800259c:	fba3 1302 	umull	r1, r3, r3, r2
 80025a0:	1ad1      	subs	r1, r2, r3
 80025a2:	0849      	lsrs	r1, r1, #1
 80025a4:	440b      	add	r3, r1
 80025a6:	0919      	lsrs	r1, r3, #4
 80025a8:	460b      	mov	r3, r1
 80025aa:	015b      	lsls	r3, r3, #5
 80025ac:	1a5b      	subs	r3, r3, r1
 80025ae:	1ad1      	subs	r1, r2, r3
 80025b0:	b2cb      	uxtb	r3, r1
 80025b2:	3301      	adds	r3, #1
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 80025ba:	4b32      	ldr	r3, [pc, #200]	; (8002684 <MENU_RunningFunction+0x5dc>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f04f 31ff 	mov.w	r1, #4294967295
 80025c2:	4618      	mov	r0, r3
 80025c4:	f013 fbfc 	bl	8015dc0 <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 80025c8:	4b2f      	ldr	r3, [pc, #188]	; (8002688 <MENU_RunningFunction+0x5e0>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f04f 31ff 	mov.w	r1, #4294967295
 80025d0:	4618      	mov	r0, r3
 80025d2:	f013 fbf5 	bl	8015dc0 <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 80025d6:	4b2d      	ldr	r3, [pc, #180]	; (800268c <MENU_RunningFunction+0x5e4>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f04f 31ff 	mov.w	r1, #4294967295
 80025de:	4618      	mov	r0, r3
 80025e0:	f013 fbee 	bl	8015dc0 <osMutexAcquire>
               ssd1306_clear();
 80025e4:	f00b f808 	bl	800d5f8 <ssd1306_clear>
               sprintf(Temp, "%d : %d : 20%d :", RtcDate.Date, RtcDate.Month, RtcDate.Year);
 80025e8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80025ec:	461a      	mov	r2, r3
 80025ee:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80025f2:	4619      	mov	r1, r3
 80025f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80025f8:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80025fc:	9300      	str	r3, [sp, #0]
 80025fe:	460b      	mov	r3, r1
 8002600:	4928      	ldr	r1, [pc, #160]	; (80026a4 <MENU_RunningFunction+0x5fc>)
 8002602:	f00a fac9 	bl	800cb98 <sprintf_>
               GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8002606:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800260a:	2300      	movs	r3, #0
 800260c:	9301      	str	r3, [sp, #4]
 800260e:	2300      	movs	r3, #0
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	2301      	movs	r3, #1
 8002614:	2100      	movs	r1, #0
 8002616:	2000      	movs	r0, #0
 8002618:	f7fe fe4c 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 800261c:	f00a ffc0 	bl	800d5a0 <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 8002620:	4b1a      	ldr	r3, [pc, #104]	; (800268c <MENU_RunningFunction+0x5e4>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4618      	mov	r0, r3
 8002626:	f013 fc16 	bl	8015e56 <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 800262a:	4b17      	ldr	r3, [pc, #92]	; (8002688 <MENU_RunningFunction+0x5e0>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4618      	mov	r0, r3
 8002630:	f013 fc11 	bl	8015e56 <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 8002634:	4b13      	ldr	r3, [pc, #76]	; (8002684 <MENU_RunningFunction+0x5dc>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4618      	mov	r0, r3
 800263a:	f013 fc0c 	bl	8015e56 <osMutexRelease>
               if(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 800263e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002642:	4814      	ldr	r0, [pc, #80]	; (8002694 <MENU_RunningFunction+0x5ec>)
 8002644:	f00c fc1c 	bl	800ee80 <HAL_GPIO_ReadPin>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	f040 8131 	bne.w	80028b2 <MENU_RunningFunction+0x80a>
               {
                  Menu.ButtonCnt++;
 8002650:	4b11      	ldr	r3, [pc, #68]	; (8002698 <MENU_RunningFunction+0x5f0>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	3301      	adds	r3, #1
 8002656:	4a10      	ldr	r2, [pc, #64]	; (8002698 <MENU_RunningFunction+0x5f0>)
 8002658:	6053      	str	r3, [r2, #4]
                  TIM5->CNT = 0;
 800265a:	4b08      	ldr	r3, [pc, #32]	; (800267c <MENU_RunningFunction+0x5d4>)
 800265c:	2200      	movs	r2, #0
 800265e:	625a      	str	r2, [r3, #36]	; 0x24
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002660:	e002      	b.n	8002668 <MENU_RunningFunction+0x5c0>
                  {
                     osDelay(100);
 8002662:	2064      	movs	r0, #100	; 0x64
 8002664:	f013 f95e 	bl	8015924 <osDelay>
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002668:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800266c:	4809      	ldr	r0, [pc, #36]	; (8002694 <MENU_RunningFunction+0x5ec>)
 800266e:	f00c fc07 	bl	800ee80 <HAL_GPIO_ReadPin>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d0f4      	beq.n	8002662 <MENU_RunningFunction+0x5ba>
 8002678:	e11b      	b.n	80028b2 <MENU_RunningFunction+0x80a>
 800267a:	bf00      	nop
 800267c:	40000c00 	.word	0x40000c00
 8002680:	88888889 	.word	0x88888889
 8002684:	200040a4 	.word	0x200040a4
 8002688:	200040a8 	.word	0x200040a8
 800268c:	200040ac 	.word	0x200040ac
 8002690:	0801ff54 	.word	0x0801ff54
 8002694:	48000400 	.word	0x48000400
 8002698:	200002a4 	.word	0x200002a4
 800269c:	200040bc 	.word	0x200040bc
 80026a0:	200041d4 	.word	0x200041d4
 80026a4:	0801ff64 	.word	0x0801ff64
 80026a8:	08421085 	.word	0x08421085
                  }
               }
            }
            else if(Menu.ButtonCnt == 1)
 80026ac:	4bb4      	ldr	r3, [pc, #720]	; (8002980 <MENU_RunningFunction+0x8d8>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d170      	bne.n	8002796 <MENU_RunningFunction+0x6ee>
            {
               RtcDate.Month = (TIM5->CNT / 4) % 12 + 1;
 80026b4:	4bb3      	ldr	r3, [pc, #716]	; (8002984 <MENU_RunningFunction+0x8dc>)
 80026b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b8:	0899      	lsrs	r1, r3, #2
 80026ba:	4bb3      	ldr	r3, [pc, #716]	; (8002988 <MENU_RunningFunction+0x8e0>)
 80026bc:	fba3 2301 	umull	r2, r3, r3, r1
 80026c0:	08da      	lsrs	r2, r3, #3
 80026c2:	4613      	mov	r3, r2
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	4413      	add	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	1aca      	subs	r2, r1, r3
 80026cc:	b2d3      	uxtb	r3, r2
 80026ce:	3301      	adds	r3, #1
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 80026d6:	4bad      	ldr	r3, [pc, #692]	; (800298c <MENU_RunningFunction+0x8e4>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f04f 31ff 	mov.w	r1, #4294967295
 80026de:	4618      	mov	r0, r3
 80026e0:	f013 fb6e 	bl	8015dc0 <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 80026e4:	4baa      	ldr	r3, [pc, #680]	; (8002990 <MENU_RunningFunction+0x8e8>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f04f 31ff 	mov.w	r1, #4294967295
 80026ec:	4618      	mov	r0, r3
 80026ee:	f013 fb67 	bl	8015dc0 <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 80026f2:	4ba8      	ldr	r3, [pc, #672]	; (8002994 <MENU_RunningFunction+0x8ec>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f04f 31ff 	mov.w	r1, #4294967295
 80026fa:	4618      	mov	r0, r3
 80026fc:	f013 fb60 	bl	8015dc0 <osMutexAcquire>
               ssd1306_clear();
 8002700:	f00a ff7a 	bl	800d5f8 <ssd1306_clear>
               sprintf(Temp, "%d : %d : 20%d :", RtcDate.Date, RtcDate.Month, RtcDate.Year);
 8002704:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002708:	461a      	mov	r2, r3
 800270a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800270e:	4619      	mov	r1, r3
 8002710:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002714:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8002718:	9300      	str	r3, [sp, #0]
 800271a:	460b      	mov	r3, r1
 800271c:	499e      	ldr	r1, [pc, #632]	; (8002998 <MENU_RunningFunction+0x8f0>)
 800271e:	f00a fa3b 	bl	800cb98 <sprintf_>
               GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8002722:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002726:	2300      	movs	r3, #0
 8002728:	9301      	str	r3, [sp, #4]
 800272a:	2300      	movs	r3, #0
 800272c:	9300      	str	r3, [sp, #0]
 800272e:	2301      	movs	r3, #1
 8002730:	2100      	movs	r1, #0
 8002732:	2000      	movs	r0, #0
 8002734:	f7fe fdbe 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 8002738:	f00a ff32 	bl	800d5a0 <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 800273c:	4b95      	ldr	r3, [pc, #596]	; (8002994 <MENU_RunningFunction+0x8ec>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4618      	mov	r0, r3
 8002742:	f013 fb88 	bl	8015e56 <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 8002746:	4b92      	ldr	r3, [pc, #584]	; (8002990 <MENU_RunningFunction+0x8e8>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4618      	mov	r0, r3
 800274c:	f013 fb83 	bl	8015e56 <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 8002750:	4b8e      	ldr	r3, [pc, #568]	; (800298c <MENU_RunningFunction+0x8e4>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4618      	mov	r0, r3
 8002756:	f013 fb7e 	bl	8015e56 <osMutexRelease>
               if(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 800275a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800275e:	488f      	ldr	r0, [pc, #572]	; (800299c <MENU_RunningFunction+0x8f4>)
 8002760:	f00c fb8e 	bl	800ee80 <HAL_GPIO_ReadPin>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	f040 80a3 	bne.w	80028b2 <MENU_RunningFunction+0x80a>
               {
                  Menu.ButtonCnt++;
 800276c:	4b84      	ldr	r3, [pc, #528]	; (8002980 <MENU_RunningFunction+0x8d8>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	3301      	adds	r3, #1
 8002772:	4a83      	ldr	r2, [pc, #524]	; (8002980 <MENU_RunningFunction+0x8d8>)
 8002774:	6053      	str	r3, [r2, #4]
                  TIM5->CNT = 0;
 8002776:	4b83      	ldr	r3, [pc, #524]	; (8002984 <MENU_RunningFunction+0x8dc>)
 8002778:	2200      	movs	r2, #0
 800277a:	625a      	str	r2, [r3, #36]	; 0x24
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 800277c:	e002      	b.n	8002784 <MENU_RunningFunction+0x6dc>
                  {
                     osDelay(100);
 800277e:	2064      	movs	r0, #100	; 0x64
 8002780:	f013 f8d0 	bl	8015924 <osDelay>
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002784:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002788:	4884      	ldr	r0, [pc, #528]	; (800299c <MENU_RunningFunction+0x8f4>)
 800278a:	f00c fb79 	bl	800ee80 <HAL_GPIO_ReadPin>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d0f4      	beq.n	800277e <MENU_RunningFunction+0x6d6>
 8002794:	e08d      	b.n	80028b2 <MENU_RunningFunction+0x80a>
                  }
               }
            }
            else
            {
               RtcDate.Year = (TIM5->CNT / 4) % 99;
 8002796:	4b7b      	ldr	r3, [pc, #492]	; (8002984 <MENU_RunningFunction+0x8dc>)
 8002798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279a:	0899      	lsrs	r1, r3, #2
 800279c:	4b80      	ldr	r3, [pc, #512]	; (80029a0 <MENU_RunningFunction+0x8f8>)
 800279e:	fba3 2301 	umull	r2, r3, r3, r1
 80027a2:	099a      	lsrs	r2, r3, #6
 80027a4:	4613      	mov	r3, r2
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	4413      	add	r3, r2
 80027aa:	015a      	lsls	r2, r3, #5
 80027ac:	4413      	add	r3, r2
 80027ae:	1aca      	subs	r2, r1, r3
 80027b0:	b2d3      	uxtb	r3, r2
 80027b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 80027b6:	4b75      	ldr	r3, [pc, #468]	; (800298c <MENU_RunningFunction+0x8e4>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f04f 31ff 	mov.w	r1, #4294967295
 80027be:	4618      	mov	r0, r3
 80027c0:	f013 fafe 	bl	8015dc0 <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 80027c4:	4b72      	ldr	r3, [pc, #456]	; (8002990 <MENU_RunningFunction+0x8e8>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f04f 31ff 	mov.w	r1, #4294967295
 80027cc:	4618      	mov	r0, r3
 80027ce:	f013 faf7 	bl	8015dc0 <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 80027d2:	4b70      	ldr	r3, [pc, #448]	; (8002994 <MENU_RunningFunction+0x8ec>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f04f 31ff 	mov.w	r1, #4294967295
 80027da:	4618      	mov	r0, r3
 80027dc:	f013 faf0 	bl	8015dc0 <osMutexAcquire>
               ssd1306_clear();
 80027e0:	f00a ff0a 	bl	800d5f8 <ssd1306_clear>
               sprintf(Temp, "%d : %d : 20%d :", RtcDate.Date, RtcDate.Month, RtcDate.Year);
 80027e4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80027e8:	461a      	mov	r2, r3
 80027ea:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80027ee:	4619      	mov	r1, r3
 80027f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80027f4:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80027f8:	9300      	str	r3, [sp, #0]
 80027fa:	460b      	mov	r3, r1
 80027fc:	4966      	ldr	r1, [pc, #408]	; (8002998 <MENU_RunningFunction+0x8f0>)
 80027fe:	f00a f9cb 	bl	800cb98 <sprintf_>
               GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8002802:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002806:	2300      	movs	r3, #0
 8002808:	9301      	str	r3, [sp, #4]
 800280a:	2300      	movs	r3, #0
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	2301      	movs	r3, #1
 8002810:	2100      	movs	r1, #0
 8002812:	2000      	movs	r0, #0
 8002814:	f7fe fd4e 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 8002818:	f00a fec2 	bl	800d5a0 <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 800281c:	4b5d      	ldr	r3, [pc, #372]	; (8002994 <MENU_RunningFunction+0x8ec>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4618      	mov	r0, r3
 8002822:	f013 fb18 	bl	8015e56 <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 8002826:	4b5a      	ldr	r3, [pc, #360]	; (8002990 <MENU_RunningFunction+0x8e8>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f013 fb13 	bl	8015e56 <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 8002830:	4b56      	ldr	r3, [pc, #344]	; (800298c <MENU_RunningFunction+0x8e4>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4618      	mov	r0, r3
 8002836:	f013 fb0e 	bl	8015e56 <osMutexRelease>
               if(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 800283a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800283e:	4857      	ldr	r0, [pc, #348]	; (800299c <MENU_RunningFunction+0x8f4>)
 8002840:	f00c fb1e 	bl	800ee80 <HAL_GPIO_ReadPin>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d133      	bne.n	80028b2 <MENU_RunningFunction+0x80a>
               {
                  Menu.ButtonCnt++;
 800284a:	4b4d      	ldr	r3, [pc, #308]	; (8002980 <MENU_RunningFunction+0x8d8>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	3301      	adds	r3, #1
 8002850:	4a4b      	ldr	r2, [pc, #300]	; (8002980 <MENU_RunningFunction+0x8d8>)
 8002852:	6053      	str	r3, [r2, #4]
                  TIM5->CNT = 0;
 8002854:	4b4b      	ldr	r3, [pc, #300]	; (8002984 <MENU_RunningFunction+0x8dc>)
 8002856:	2200      	movs	r2, #0
 8002858:	625a      	str	r2, [r3, #36]	; 0x24
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 800285a:	e002      	b.n	8002862 <MENU_RunningFunction+0x7ba>
                  {
                     osDelay(100);
 800285c:	2064      	movs	r0, #100	; 0x64
 800285e:	f013 f861 	bl	8015924 <osDelay>
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002862:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002866:	484d      	ldr	r0, [pc, #308]	; (800299c <MENU_RunningFunction+0x8f4>)
 8002868:	f00c fb0a 	bl	800ee80 <HAL_GPIO_ReadPin>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d0f4      	beq.n	800285c <MENU_RunningFunction+0x7b4>
                  }
                  Menu.ButtonCnt = 0;
 8002872:	4b43      	ldr	r3, [pc, #268]	; (8002980 <MENU_RunningFunction+0x8d8>)
 8002874:	2200      	movs	r2, #0
 8002876:	605a      	str	r2, [r3, #4]
                  Menu.f         = 1;
 8002878:	4b41      	ldr	r3, [pc, #260]	; (8002980 <MENU_RunningFunction+0x8d8>)
 800287a:	2201      	movs	r2, #1
 800287c:	729a      	strb	r2, [r3, #10]
                  osMutexAcquire(RTCMutexHandle, osWaitForever);
 800287e:	4b49      	ldr	r3, [pc, #292]	; (80029a4 <MENU_RunningFunction+0x8fc>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f04f 31ff 	mov.w	r1, #4294967295
 8002886:	4618      	mov	r0, r3
 8002888:	f013 fa9a 	bl	8015dc0 <osMutexAcquire>
                  while(HAL_RTC_SetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN) != HAL_OK)
 800288c:	e002      	b.n	8002894 <MENU_RunningFunction+0x7ec>
                  {
                     osDelay(100);
 800288e:	2064      	movs	r0, #100	; 0x64
 8002890:	f013 f848 	bl	8015924 <osDelay>
                  while(HAL_RTC_SetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN) != HAL_OK)
 8002894:	f107 0320 	add.w	r3, r7, #32
 8002898:	2200      	movs	r2, #0
 800289a:	4619      	mov	r1, r3
 800289c:	4842      	ldr	r0, [pc, #264]	; (80029a8 <MENU_RunningFunction+0x900>)
 800289e:	f00e fabf 	bl	8010e20 <HAL_RTC_SetDate>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1f2      	bne.n	800288e <MENU_RunningFunction+0x7e6>
                  }
                  osMutexRelease(RTCMutexHandle);
 80028a8:	4b3e      	ldr	r3, [pc, #248]	; (80029a4 <MENU_RunningFunction+0x8fc>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f013 fad2 	bl	8015e56 <osMutexRelease>
               }
            }
            osDelay(50);
 80028b2:	2032      	movs	r0, #50	; 0x32
 80028b4:	f013 f836 	bl	8015924 <osDelay>
         while(Menu.f == 0)
 80028b8:	4b31      	ldr	r3, [pc, #196]	; (8002980 <MENU_RunningFunction+0x8d8>)
 80028ba:	7a9b      	ldrb	r3, [r3, #10]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	f43f ae64 	beq.w	800258a <MENU_RunningFunction+0x4e2>
         }
         break;
 80028c2:	f001 b910 	b.w	8003ae6 <MENU_RunningFunction+0x1a3e>
      }
      case MENU_CHOISE_CHART:
      {
         RTC_TimeTypeDef RtcTime;
         RTC_DateTypeDef RtcDate;
         osMutexAcquire(RTCMutexHandle, osWaitForever);
 80028c6:	4b37      	ldr	r3, [pc, #220]	; (80029a4 <MENU_RunningFunction+0x8fc>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f04f 31ff 	mov.w	r1, #4294967295
 80028ce:	4618      	mov	r0, r3
 80028d0:	f013 fa76 	bl	8015dc0 <osMutexAcquire>
         HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 80028d4:	f107 030c 	add.w	r3, r7, #12
 80028d8:	2200      	movs	r2, #0
 80028da:	4619      	mov	r1, r3
 80028dc:	4832      	ldr	r0, [pc, #200]	; (80029a8 <MENU_RunningFunction+0x900>)
 80028de:	f00e fa3d 	bl	8010d5c <HAL_RTC_GetTime>
         HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 80028e2:	f107 0308 	add.w	r3, r7, #8
 80028e6:	2200      	movs	r2, #0
 80028e8:	4619      	mov	r1, r3
 80028ea:	482f      	ldr	r0, [pc, #188]	; (80029a8 <MENU_RunningFunction+0x900>)
 80028ec:	f00e fb20 	bl	8010f30 <HAL_RTC_GetDate>
         osMutexRelease(RTCMutexHandle);
 80028f0:	4b2c      	ldr	r3, [pc, #176]	; (80029a4 <MENU_RunningFunction+0x8fc>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f013 faae 	bl	8015e56 <osMutexRelease>
         osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 80028fa:	4b24      	ldr	r3, [pc, #144]	; (800298c <MENU_RunningFunction+0x8e4>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f04f 31ff 	mov.w	r1, #4294967295
 8002902:	4618      	mov	r0, r3
 8002904:	f013 fa5c 	bl	8015dc0 <osMutexAcquire>
         osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8002908:	4b21      	ldr	r3, [pc, #132]	; (8002990 <MENU_RunningFunction+0x8e8>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f04f 31ff 	mov.w	r1, #4294967295
 8002910:	4618      	mov	r0, r3
 8002912:	f013 fa55 	bl	8015dc0 <osMutexAcquire>
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8002916:	4b1f      	ldr	r3, [pc, #124]	; (8002994 <MENU_RunningFunction+0x8ec>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f04f 31ff 	mov.w	r1, #4294967295
 800291e:	4618      	mov	r0, r3
 8002920:	f013 fa4e 	bl	8015dc0 <osMutexAcquire>
         ssd1306_clear();
 8002924:	f00a fe68 	bl	800d5f8 <ssd1306_clear>
         sprintf(Temp, "%d : %d : 20%d :", RtcDate.Date, RtcDate.Month, RtcDate.Year);
 8002928:	7abb      	ldrb	r3, [r7, #10]
 800292a:	461a      	mov	r2, r3
 800292c:	7a7b      	ldrb	r3, [r7, #9]
 800292e:	4619      	mov	r1, r3
 8002930:	7afb      	ldrb	r3, [r7, #11]
 8002932:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8002936:	9300      	str	r3, [sp, #0]
 8002938:	460b      	mov	r3, r1
 800293a:	4917      	ldr	r1, [pc, #92]	; (8002998 <MENU_RunningFunction+0x8f0>)
 800293c:	f00a f92c 	bl	800cb98 <sprintf_>
         GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8002940:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002944:	2300      	movs	r3, #0
 8002946:	9301      	str	r3, [sp, #4]
 8002948:	2300      	movs	r3, #0
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	2301      	movs	r3, #1
 800294e:	2100      	movs	r1, #0
 8002950:	2000      	movs	r0, #0
 8002952:	f7fe fcaf 	bl	80012b4 <GFX_DrawString>
         ssd1306_display();
 8002956:	f00a fe23 	bl	800d5a0 <ssd1306_display>
         osMutexRelease(SPI1MutexHandle);
 800295a:	4b0e      	ldr	r3, [pc, #56]	; (8002994 <MENU_RunningFunction+0x8ec>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4618      	mov	r0, r3
 8002960:	f013 fa79 	bl	8015e56 <osMutexRelease>
         osMutexRelease(SSD1306MutexHandle);
 8002964:	4b0a      	ldr	r3, [pc, #40]	; (8002990 <MENU_RunningFunction+0x8e8>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4618      	mov	r0, r3
 800296a:	f013 fa74 	bl	8015e56 <osMutexRelease>
         osMutexRelease(ScreensDcMutexHandle);
 800296e:	4b07      	ldr	r3, [pc, #28]	; (800298c <MENU_RunningFunction+0x8e4>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4618      	mov	r0, r3
 8002974:	f013 fa6f 	bl	8015e56 <osMutexRelease>
         Menu.f = 0;
 8002978:	4b01      	ldr	r3, [pc, #4]	; (8002980 <MENU_RunningFunction+0x8d8>)
 800297a:	2200      	movs	r2, #0
 800297c:	729a      	strb	r2, [r3, #10]
         while(Menu.f == 0)
 800297e:	e18b      	b.n	8002c98 <MENU_RunningFunction+0xbf0>
 8002980:	200002a4 	.word	0x200002a4
 8002984:	40000c00 	.word	0x40000c00
 8002988:	aaaaaaab 	.word	0xaaaaaaab
 800298c:	200040a4 	.word	0x200040a4
 8002990:	200040a8 	.word	0x200040a8
 8002994:	200040ac 	.word	0x200040ac
 8002998:	0801ff64 	.word	0x0801ff64
 800299c:	48000400 	.word	0x48000400
 80029a0:	a57eb503 	.word	0xa57eb503
 80029a4:	200040bc 	.word	0x200040bc
 80029a8:	200041d4 	.word	0x200041d4
         {
            if(Menu.ButtonCnt == 0)
 80029ac:	4ba1      	ldr	r3, [pc, #644]	; (8002c34 <MENU_RunningFunction+0xb8c>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d16e      	bne.n	8002a92 <MENU_RunningFunction+0x9ea>
            {
               RtcDate.Date = (TIM5->CNT / 4) % 31 + 1;
 80029b4:	4ba0      	ldr	r3, [pc, #640]	; (8002c38 <MENU_RunningFunction+0xb90>)
 80029b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b8:	089a      	lsrs	r2, r3, #2
 80029ba:	4ba0      	ldr	r3, [pc, #640]	; (8002c3c <MENU_RunningFunction+0xb94>)
 80029bc:	fba3 1302 	umull	r1, r3, r3, r2
 80029c0:	1ad1      	subs	r1, r2, r3
 80029c2:	0849      	lsrs	r1, r1, #1
 80029c4:	440b      	add	r3, r1
 80029c6:	0919      	lsrs	r1, r3, #4
 80029c8:	460b      	mov	r3, r1
 80029ca:	015b      	lsls	r3, r3, #5
 80029cc:	1a5b      	subs	r3, r3, r1
 80029ce:	1ad1      	subs	r1, r2, r3
 80029d0:	b2cb      	uxtb	r3, r1
 80029d2:	3301      	adds	r3, #1
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	72bb      	strb	r3, [r7, #10]
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 80029d8:	4b99      	ldr	r3, [pc, #612]	; (8002c40 <MENU_RunningFunction+0xb98>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f04f 31ff 	mov.w	r1, #4294967295
 80029e0:	4618      	mov	r0, r3
 80029e2:	f013 f9ed 	bl	8015dc0 <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 80029e6:	4b97      	ldr	r3, [pc, #604]	; (8002c44 <MENU_RunningFunction+0xb9c>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f04f 31ff 	mov.w	r1, #4294967295
 80029ee:	4618      	mov	r0, r3
 80029f0:	f013 f9e6 	bl	8015dc0 <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 80029f4:	4b94      	ldr	r3, [pc, #592]	; (8002c48 <MENU_RunningFunction+0xba0>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f04f 31ff 	mov.w	r1, #4294967295
 80029fc:	4618      	mov	r0, r3
 80029fe:	f013 f9df 	bl	8015dc0 <osMutexAcquire>
               ssd1306_clear();
 8002a02:	f00a fdf9 	bl	800d5f8 <ssd1306_clear>
               sprintf(Temp, "%d : %d : 20%d :", RtcDate.Date, RtcDate.Month, RtcDate.Year);
 8002a06:	7abb      	ldrb	r3, [r7, #10]
 8002a08:	461a      	mov	r2, r3
 8002a0a:	7a7b      	ldrb	r3, [r7, #9]
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	7afb      	ldrb	r3, [r7, #11]
 8002a10:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	460b      	mov	r3, r1
 8002a18:	498c      	ldr	r1, [pc, #560]	; (8002c4c <MENU_RunningFunction+0xba4>)
 8002a1a:	f00a f8bd 	bl	800cb98 <sprintf_>
               GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8002a1e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002a22:	2300      	movs	r3, #0
 8002a24:	9301      	str	r3, [sp, #4]
 8002a26:	2300      	movs	r3, #0
 8002a28:	9300      	str	r3, [sp, #0]
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	2000      	movs	r0, #0
 8002a30:	f7fe fc40 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 8002a34:	f00a fdb4 	bl	800d5a0 <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 8002a38:	4b83      	ldr	r3, [pc, #524]	; (8002c48 <MENU_RunningFunction+0xba0>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f013 fa0a 	bl	8015e56 <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 8002a42:	4b80      	ldr	r3, [pc, #512]	; (8002c44 <MENU_RunningFunction+0xb9c>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f013 fa05 	bl	8015e56 <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 8002a4c:	4b7c      	ldr	r3, [pc, #496]	; (8002c40 <MENU_RunningFunction+0xb98>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f013 fa00 	bl	8015e56 <osMutexRelease>
               if(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002a56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a5a:	487d      	ldr	r0, [pc, #500]	; (8002c50 <MENU_RunningFunction+0xba8>)
 8002a5c:	f00c fa10 	bl	800ee80 <HAL_GPIO_ReadPin>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	f040 8115 	bne.w	8002c92 <MENU_RunningFunction+0xbea>
               {
                  Menu.ButtonCnt++;
 8002a68:	4b72      	ldr	r3, [pc, #456]	; (8002c34 <MENU_RunningFunction+0xb8c>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	4a71      	ldr	r2, [pc, #452]	; (8002c34 <MENU_RunningFunction+0xb8c>)
 8002a70:	6053      	str	r3, [r2, #4]
                  TIM5->CNT = 0;
 8002a72:	4b71      	ldr	r3, [pc, #452]	; (8002c38 <MENU_RunningFunction+0xb90>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	625a      	str	r2, [r3, #36]	; 0x24
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002a78:	e002      	b.n	8002a80 <MENU_RunningFunction+0x9d8>
                  {
                     osDelay(100);
 8002a7a:	2064      	movs	r0, #100	; 0x64
 8002a7c:	f012 ff52 	bl	8015924 <osDelay>
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002a80:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a84:	4872      	ldr	r0, [pc, #456]	; (8002c50 <MENU_RunningFunction+0xba8>)
 8002a86:	f00c f9fb 	bl	800ee80 <HAL_GPIO_ReadPin>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d0f4      	beq.n	8002a7a <MENU_RunningFunction+0x9d2>
 8002a90:	e0ff      	b.n	8002c92 <MENU_RunningFunction+0xbea>
                  }
               }
            }
            else if(Menu.ButtonCnt == 1)
 8002a92:	4b68      	ldr	r3, [pc, #416]	; (8002c34 <MENU_RunningFunction+0xb8c>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d16c      	bne.n	8002b74 <MENU_RunningFunction+0xacc>
            {
               RtcDate.Month = (TIM5->CNT / 4) % 12 + 1;
 8002a9a:	4b67      	ldr	r3, [pc, #412]	; (8002c38 <MENU_RunningFunction+0xb90>)
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9e:	0899      	lsrs	r1, r3, #2
 8002aa0:	4b6c      	ldr	r3, [pc, #432]	; (8002c54 <MENU_RunningFunction+0xbac>)
 8002aa2:	fba3 2301 	umull	r2, r3, r3, r1
 8002aa6:	08da      	lsrs	r2, r3, #3
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	4413      	add	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	1aca      	subs	r2, r1, r3
 8002ab2:	b2d3      	uxtb	r3, r2
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	727b      	strb	r3, [r7, #9]
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8002aba:	4b61      	ldr	r3, [pc, #388]	; (8002c40 <MENU_RunningFunction+0xb98>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f04f 31ff 	mov.w	r1, #4294967295
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f013 f97c 	bl	8015dc0 <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8002ac8:	4b5e      	ldr	r3, [pc, #376]	; (8002c44 <MENU_RunningFunction+0xb9c>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f013 f975 	bl	8015dc0 <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8002ad6:	4b5c      	ldr	r3, [pc, #368]	; (8002c48 <MENU_RunningFunction+0xba0>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f04f 31ff 	mov.w	r1, #4294967295
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f013 f96e 	bl	8015dc0 <osMutexAcquire>
               ssd1306_clear();
 8002ae4:	f00a fd88 	bl	800d5f8 <ssd1306_clear>
               sprintf(Temp, "%d : %d : 20%d :", RtcDate.Date, RtcDate.Month, RtcDate.Year);
 8002ae8:	7abb      	ldrb	r3, [r7, #10]
 8002aea:	461a      	mov	r2, r3
 8002aec:	7a7b      	ldrb	r3, [r7, #9]
 8002aee:	4619      	mov	r1, r3
 8002af0:	7afb      	ldrb	r3, [r7, #11]
 8002af2:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8002af6:	9300      	str	r3, [sp, #0]
 8002af8:	460b      	mov	r3, r1
 8002afa:	4954      	ldr	r1, [pc, #336]	; (8002c4c <MENU_RunningFunction+0xba4>)
 8002afc:	f00a f84c 	bl	800cb98 <sprintf_>
               GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8002b00:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002b04:	2300      	movs	r3, #0
 8002b06:	9301      	str	r3, [sp, #4]
 8002b08:	2300      	movs	r3, #0
 8002b0a:	9300      	str	r3, [sp, #0]
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	2100      	movs	r1, #0
 8002b10:	2000      	movs	r0, #0
 8002b12:	f7fe fbcf 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 8002b16:	f00a fd43 	bl	800d5a0 <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 8002b1a:	4b4b      	ldr	r3, [pc, #300]	; (8002c48 <MENU_RunningFunction+0xba0>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f013 f999 	bl	8015e56 <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 8002b24:	4b47      	ldr	r3, [pc, #284]	; (8002c44 <MENU_RunningFunction+0xb9c>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f013 f994 	bl	8015e56 <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 8002b2e:	4b44      	ldr	r3, [pc, #272]	; (8002c40 <MENU_RunningFunction+0xb98>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f013 f98f 	bl	8015e56 <osMutexRelease>
               if(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002b38:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b3c:	4844      	ldr	r0, [pc, #272]	; (8002c50 <MENU_RunningFunction+0xba8>)
 8002b3e:	f00c f99f 	bl	800ee80 <HAL_GPIO_ReadPin>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f040 80a4 	bne.w	8002c92 <MENU_RunningFunction+0xbea>
               {
                  Menu.ButtonCnt++;
 8002b4a:	4b3a      	ldr	r3, [pc, #232]	; (8002c34 <MENU_RunningFunction+0xb8c>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	3301      	adds	r3, #1
 8002b50:	4a38      	ldr	r2, [pc, #224]	; (8002c34 <MENU_RunningFunction+0xb8c>)
 8002b52:	6053      	str	r3, [r2, #4]
                  TIM5->CNT = 0;
 8002b54:	4b38      	ldr	r3, [pc, #224]	; (8002c38 <MENU_RunningFunction+0xb90>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	625a      	str	r2, [r3, #36]	; 0x24
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002b5a:	e002      	b.n	8002b62 <MENU_RunningFunction+0xaba>
                  {
                     osDelay(100);
 8002b5c:	2064      	movs	r0, #100	; 0x64
 8002b5e:	f012 fee1 	bl	8015924 <osDelay>
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002b62:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b66:	483a      	ldr	r0, [pc, #232]	; (8002c50 <MENU_RunningFunction+0xba8>)
 8002b68:	f00c f98a 	bl	800ee80 <HAL_GPIO_ReadPin>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d0f4      	beq.n	8002b5c <MENU_RunningFunction+0xab4>
 8002b72:	e08e      	b.n	8002c92 <MENU_RunningFunction+0xbea>
                  }
               }
            }
            else
            {
               RtcDate.Year = (TIM5->CNT / 4) % 99;
 8002b74:	4b30      	ldr	r3, [pc, #192]	; (8002c38 <MENU_RunningFunction+0xb90>)
 8002b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b78:	0899      	lsrs	r1, r3, #2
 8002b7a:	4b37      	ldr	r3, [pc, #220]	; (8002c58 <MENU_RunningFunction+0xbb0>)
 8002b7c:	fba3 2301 	umull	r2, r3, r3, r1
 8002b80:	099a      	lsrs	r2, r3, #6
 8002b82:	4613      	mov	r3, r2
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	4413      	add	r3, r2
 8002b88:	015a      	lsls	r2, r3, #5
 8002b8a:	4413      	add	r3, r2
 8002b8c:	1aca      	subs	r2, r1, r3
 8002b8e:	b2d3      	uxtb	r3, r2
 8002b90:	72fb      	strb	r3, [r7, #11]
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8002b92:	4b2b      	ldr	r3, [pc, #172]	; (8002c40 <MENU_RunningFunction+0xb98>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f04f 31ff 	mov.w	r1, #4294967295
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f013 f910 	bl	8015dc0 <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8002ba0:	4b28      	ldr	r3, [pc, #160]	; (8002c44 <MENU_RunningFunction+0xb9c>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f013 f909 	bl	8015dc0 <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8002bae:	4b26      	ldr	r3, [pc, #152]	; (8002c48 <MENU_RunningFunction+0xba0>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f04f 31ff 	mov.w	r1, #4294967295
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f013 f902 	bl	8015dc0 <osMutexAcquire>
               ssd1306_clear();
 8002bbc:	f00a fd1c 	bl	800d5f8 <ssd1306_clear>
               sprintf(Temp, "%d : %d : 20%d :", RtcDate.Date, RtcDate.Month, RtcDate.Year);
 8002bc0:	7abb      	ldrb	r3, [r7, #10]
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	7a7b      	ldrb	r3, [r7, #9]
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	7afb      	ldrb	r3, [r7, #11]
 8002bca:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8002bce:	9300      	str	r3, [sp, #0]
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	491e      	ldr	r1, [pc, #120]	; (8002c4c <MENU_RunningFunction+0xba4>)
 8002bd4:	f009 ffe0 	bl	800cb98 <sprintf_>
               GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8002bd8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002bdc:	2300      	movs	r3, #0
 8002bde:	9301      	str	r3, [sp, #4]
 8002be0:	2300      	movs	r3, #0
 8002be2:	9300      	str	r3, [sp, #0]
 8002be4:	2301      	movs	r3, #1
 8002be6:	2100      	movs	r1, #0
 8002be8:	2000      	movs	r0, #0
 8002bea:	f7fe fb63 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 8002bee:	f00a fcd7 	bl	800d5a0 <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 8002bf2:	4b15      	ldr	r3, [pc, #84]	; (8002c48 <MENU_RunningFunction+0xba0>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f013 f92d 	bl	8015e56 <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 8002bfc:	4b11      	ldr	r3, [pc, #68]	; (8002c44 <MENU_RunningFunction+0xb9c>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f013 f928 	bl	8015e56 <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 8002c06:	4b0e      	ldr	r3, [pc, #56]	; (8002c40 <MENU_RunningFunction+0xb98>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f013 f923 	bl	8015e56 <osMutexRelease>
               if(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002c10:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c14:	480e      	ldr	r0, [pc, #56]	; (8002c50 <MENU_RunningFunction+0xba8>)
 8002c16:	f00c f933 	bl	800ee80 <HAL_GPIO_ReadPin>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d138      	bne.n	8002c92 <MENU_RunningFunction+0xbea>
               {
                  Menu.ButtonCnt++;
 8002c20:	4b04      	ldr	r3, [pc, #16]	; (8002c34 <MENU_RunningFunction+0xb8c>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	3301      	adds	r3, #1
 8002c26:	4a03      	ldr	r2, [pc, #12]	; (8002c34 <MENU_RunningFunction+0xb8c>)
 8002c28:	6053      	str	r3, [r2, #4]
                  TIM5->CNT = 0;
 8002c2a:	4b03      	ldr	r3, [pc, #12]	; (8002c38 <MENU_RunningFunction+0xb90>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	625a      	str	r2, [r3, #36]	; 0x24
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002c30:	e017      	b.n	8002c62 <MENU_RunningFunction+0xbba>
 8002c32:	bf00      	nop
 8002c34:	200002a4 	.word	0x200002a4
 8002c38:	40000c00 	.word	0x40000c00
 8002c3c:	08421085 	.word	0x08421085
 8002c40:	200040a4 	.word	0x200040a4
 8002c44:	200040a8 	.word	0x200040a8
 8002c48:	200040ac 	.word	0x200040ac
 8002c4c:	0801ff64 	.word	0x0801ff64
 8002c50:	48000400 	.word	0x48000400
 8002c54:	aaaaaaab 	.word	0xaaaaaaab
 8002c58:	a57eb503 	.word	0xa57eb503
                  {
                     osDelay(100);
 8002c5c:	2064      	movs	r0, #100	; 0x64
 8002c5e:	f012 fe61 	bl	8015924 <osDelay>
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002c62:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c66:	48c5      	ldr	r0, [pc, #788]	; (8002f7c <MENU_RunningFunction+0xed4>)
 8002c68:	f00c f90a 	bl	800ee80 <HAL_GPIO_ReadPin>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d0f4      	beq.n	8002c5c <MENU_RunningFunction+0xbb4>
                  }
                  Menu.ButtonCnt       = 0;
 8002c72:	4bc3      	ldr	r3, [pc, #780]	; (8002f80 <MENU_RunningFunction+0xed8>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	605a      	str	r2, [r3, #4]
                  Menu.f               = 1;
 8002c78:	4bc1      	ldr	r3, [pc, #772]	; (8002f80 <MENU_RunningFunction+0xed8>)
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	729a      	strb	r2, [r3, #10]
                  QueueChartData.Date  = RtcDate.Date;
 8002c7e:	7abb      	ldrb	r3, [r7, #10]
 8002c80:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
                  QueueChartData.Month = RtcDate.Month;
 8002c84:	7a7b      	ldrb	r3, [r7, #9]
 8002c86:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
                  QueueChartData.Year  = RtcDate.Year;
 8002c8a:	7afb      	ldrb	r3, [r7, #11]
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
               }
            }
            osDelay(50);
 8002c92:	2032      	movs	r0, #50	; 0x32
 8002c94:	f012 fe46 	bl	8015924 <osDelay>
         while(Menu.f == 0)
 8002c98:	4bb9      	ldr	r3, [pc, #740]	; (8002f80 <MENU_RunningFunction+0xed8>)
 8002c9a:	7a9b      	ldrb	r3, [r3, #10]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f43f ae85 	beq.w	80029ac <MENU_RunningFunction+0x904>
         }

         osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8002ca2:	4bb8      	ldr	r3, [pc, #736]	; (8002f84 <MENU_RunningFunction+0xedc>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f04f 31ff 	mov.w	r1, #4294967295
 8002caa:	4618      	mov	r0, r3
 8002cac:	f013 f888 	bl	8015dc0 <osMutexAcquire>
         osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8002cb0:	4bb5      	ldr	r3, [pc, #724]	; (8002f88 <MENU_RunningFunction+0xee0>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f013 f881 	bl	8015dc0 <osMutexAcquire>
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8002cbe:	4bb3      	ldr	r3, [pc, #716]	; (8002f8c <MENU_RunningFunction+0xee4>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f04f 31ff 	mov.w	r1, #4294967295
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f013 f87a 	bl	8015dc0 <osMutexAcquire>
         ssd1306_clear();
 8002ccc:	f00a fc94 	bl	800d5f8 <ssd1306_clear>
         sprintf(Temp, "Dokonaj Wyboru");
 8002cd0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002cd4:	49ae      	ldr	r1, [pc, #696]	; (8002f90 <MENU_RunningFunction+0xee8>)
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f009 ff5e 	bl	800cb98 <sprintf_>
         GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8002cdc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	9301      	str	r3, [sp, #4]
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	9300      	str	r3, [sp, #0]
 8002ce8:	2301      	movs	r3, #1
 8002cea:	2100      	movs	r1, #0
 8002cec:	2000      	movs	r0, #0
 8002cee:	f7fe fae1 	bl	80012b4 <GFX_DrawString>
         ssd1306_display();
 8002cf2:	f00a fc55 	bl	800d5a0 <ssd1306_display>
         osMutexRelease(SPI1MutexHandle);
 8002cf6:	4ba5      	ldr	r3, [pc, #660]	; (8002f8c <MENU_RunningFunction+0xee4>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f013 f8ab 	bl	8015e56 <osMutexRelease>
         osMutexRelease(SSD1306MutexHandle);
 8002d00:	4ba1      	ldr	r3, [pc, #644]	; (8002f88 <MENU_RunningFunction+0xee0>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f013 f8a6 	bl	8015e56 <osMutexRelease>
         osMutexRelease(ScreensDcMutexHandle);
 8002d0a:	4b9e      	ldr	r3, [pc, #632]	; (8002f84 <MENU_RunningFunction+0xedc>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f013 f8a1 	bl	8015e56 <osMutexRelease>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 1)
 8002d14:	e002      	b.n	8002d1c <MENU_RunningFunction+0xc74>
         {
            osDelay(100);
 8002d16:	2064      	movs	r0, #100	; 0x64
 8002d18:	f012 fe04 	bl	8015924 <osDelay>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 1)
 8002d1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002d20:	4896      	ldr	r0, [pc, #600]	; (8002f7c <MENU_RunningFunction+0xed4>)
 8002d22:	f00c f8ad 	bl	800ee80 <HAL_GPIO_ReadPin>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d0f4      	beq.n	8002d16 <MENU_RunningFunction+0xc6e>
         }
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002d2c:	e002      	b.n	8002d34 <MENU_RunningFunction+0xc8c>
         {
            osDelay(100);
 8002d2e:	2064      	movs	r0, #100	; 0x64
 8002d30:	f012 fdf8 	bl	8015924 <osDelay>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002d34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002d38:	4890      	ldr	r0, [pc, #576]	; (8002f7c <MENU_RunningFunction+0xed4>)
 8002d3a:	f00c f8a1 	bl	800ee80 <HAL_GPIO_ReadPin>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d0f4      	beq.n	8002d2e <MENU_RunningFunction+0xc86>
         }
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 1)
 8002d44:	e262      	b.n	800320c <MENU_RunningFunction+0x1164>
         {
            osDelay(100);
 8002d46:	2064      	movs	r0, #100	; 0x64
 8002d48:	f012 fdec 	bl	8015924 <osDelay>
            switch((TIM5->CNT / 4) % 9)
 8002d4c:	4b91      	ldr	r3, [pc, #580]	; (8002f94 <MENU_RunningFunction+0xeec>)
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d50:	0899      	lsrs	r1, r3, #2
 8002d52:	4b91      	ldr	r3, [pc, #580]	; (8002f98 <MENU_RunningFunction+0xef0>)
 8002d54:	fba3 2301 	umull	r2, r3, r3, r1
 8002d58:	085a      	lsrs	r2, r3, #1
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	00db      	lsls	r3, r3, #3
 8002d5e:	4413      	add	r3, r2
 8002d60:	1aca      	subs	r2, r1, r3
 8002d62:	2a08      	cmp	r2, #8
 8002d64:	f200 8252 	bhi.w	800320c <MENU_RunningFunction+0x1164>
 8002d68:	a301      	add	r3, pc, #4	; (adr r3, 8002d70 <MENU_RunningFunction+0xcc8>)
 8002d6a:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8002d6e:	bf00      	nop
 8002d70:	08002d95 	.word	0x08002d95
 8002d74:	08002e0f 	.word	0x08002e0f
 8002d78:	08002e89 	.word	0x08002e89
 8002d7c:	08002f03 	.word	0x08002f03
 8002d80:	08002fad 	.word	0x08002fad
 8002d84:	08003027 	.word	0x08003027
 8002d88:	080030a1 	.word	0x080030a1
 8002d8c:	0800311b 	.word	0x0800311b
 8002d90:	08003195 	.word	0x08003195
            {
               case INTERNAL_PM1:
               {
                  osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8002d94:	4b7b      	ldr	r3, [pc, #492]	; (8002f84 <MENU_RunningFunction+0xedc>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f04f 31ff 	mov.w	r1, #4294967295
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f013 f80f 	bl	8015dc0 <osMutexAcquire>
                  osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8002da2:	4b79      	ldr	r3, [pc, #484]	; (8002f88 <MENU_RunningFunction+0xee0>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f04f 31ff 	mov.w	r1, #4294967295
 8002daa:	4618      	mov	r0, r3
 8002dac:	f013 f808 	bl	8015dc0 <osMutexAcquire>
                  osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8002db0:	4b76      	ldr	r3, [pc, #472]	; (8002f8c <MENU_RunningFunction+0xee4>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f04f 31ff 	mov.w	r1, #4294967295
 8002db8:	4618      	mov	r0, r3
 8002dba:	f013 f801 	bl	8015dc0 <osMutexAcquire>
                  ssd1306_clear();
 8002dbe:	f00a fc1b 	bl	800d5f8 <ssd1306_clear>
                  sprintf(Temp, "INTERNAL_PM1");
 8002dc2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002dc6:	4975      	ldr	r1, [pc, #468]	; (8002f9c <MENU_RunningFunction+0xef4>)
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f009 fee5 	bl	800cb98 <sprintf_>
                  GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8002dce:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	9301      	str	r3, [sp, #4]
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	9300      	str	r3, [sp, #0]
 8002dda:	2301      	movs	r3, #1
 8002ddc:	2100      	movs	r1, #0
 8002dde:	2000      	movs	r0, #0
 8002de0:	f7fe fa68 	bl	80012b4 <GFX_DrawString>
                  ssd1306_display();
 8002de4:	f00a fbdc 	bl	800d5a0 <ssd1306_display>
                  osMutexRelease(SPI1MutexHandle);
 8002de8:	4b68      	ldr	r3, [pc, #416]	; (8002f8c <MENU_RunningFunction+0xee4>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f013 f832 	bl	8015e56 <osMutexRelease>
                  osMutexRelease(SSD1306MutexHandle);
 8002df2:	4b65      	ldr	r3, [pc, #404]	; (8002f88 <MENU_RunningFunction+0xee0>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f013 f82d 	bl	8015e56 <osMutexRelease>
                  osMutexRelease(ScreensDcMutexHandle);
 8002dfc:	4b61      	ldr	r3, [pc, #388]	; (8002f84 <MENU_RunningFunction+0xedc>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f013 f828 	bl	8015e56 <osMutexRelease>
                  QueueChartData.ChartType = INTERNAL_PM1;
 8002e06:	2300      	movs	r3, #0
 8002e08:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                  break;
 8002e0c:	e1fe      	b.n	800320c <MENU_RunningFunction+0x1164>
               }
               case INTERNAL_PM25:
               {
                  osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8002e0e:	4b5d      	ldr	r3, [pc, #372]	; (8002f84 <MENU_RunningFunction+0xedc>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f04f 31ff 	mov.w	r1, #4294967295
 8002e16:	4618      	mov	r0, r3
 8002e18:	f012 ffd2 	bl	8015dc0 <osMutexAcquire>
                  osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8002e1c:	4b5a      	ldr	r3, [pc, #360]	; (8002f88 <MENU_RunningFunction+0xee0>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f04f 31ff 	mov.w	r1, #4294967295
 8002e24:	4618      	mov	r0, r3
 8002e26:	f012 ffcb 	bl	8015dc0 <osMutexAcquire>
                  osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8002e2a:	4b58      	ldr	r3, [pc, #352]	; (8002f8c <MENU_RunningFunction+0xee4>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f04f 31ff 	mov.w	r1, #4294967295
 8002e32:	4618      	mov	r0, r3
 8002e34:	f012 ffc4 	bl	8015dc0 <osMutexAcquire>
                  ssd1306_clear();
 8002e38:	f00a fbde 	bl	800d5f8 <ssd1306_clear>
                  sprintf(Temp, "INTERNAL_PM25");
 8002e3c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002e40:	4957      	ldr	r1, [pc, #348]	; (8002fa0 <MENU_RunningFunction+0xef8>)
 8002e42:	4618      	mov	r0, r3
 8002e44:	f009 fea8 	bl	800cb98 <sprintf_>
                  GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8002e48:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	9301      	str	r3, [sp, #4]
 8002e50:	2300      	movs	r3, #0
 8002e52:	9300      	str	r3, [sp, #0]
 8002e54:	2301      	movs	r3, #1
 8002e56:	2100      	movs	r1, #0
 8002e58:	2000      	movs	r0, #0
 8002e5a:	f7fe fa2b 	bl	80012b4 <GFX_DrawString>
                  ssd1306_display();
 8002e5e:	f00a fb9f 	bl	800d5a0 <ssd1306_display>
                  osMutexRelease(SPI1MutexHandle);
 8002e62:	4b4a      	ldr	r3, [pc, #296]	; (8002f8c <MENU_RunningFunction+0xee4>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f012 fff5 	bl	8015e56 <osMutexRelease>
                  osMutexRelease(SSD1306MutexHandle);
 8002e6c:	4b46      	ldr	r3, [pc, #280]	; (8002f88 <MENU_RunningFunction+0xee0>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f012 fff0 	bl	8015e56 <osMutexRelease>
                  osMutexRelease(ScreensDcMutexHandle);
 8002e76:	4b43      	ldr	r3, [pc, #268]	; (8002f84 <MENU_RunningFunction+0xedc>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f012 ffeb 	bl	8015e56 <osMutexRelease>
                  QueueChartData.ChartType = INTERNAL_PM25;
 8002e80:	2301      	movs	r3, #1
 8002e82:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                  break;
 8002e86:	e1c1      	b.n	800320c <MENU_RunningFunction+0x1164>
               }
               case INTERNAL_PM10:
               {
                  osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8002e88:	4b3e      	ldr	r3, [pc, #248]	; (8002f84 <MENU_RunningFunction+0xedc>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e90:	4618      	mov	r0, r3
 8002e92:	f012 ff95 	bl	8015dc0 <osMutexAcquire>
                  osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8002e96:	4b3c      	ldr	r3, [pc, #240]	; (8002f88 <MENU_RunningFunction+0xee0>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f04f 31ff 	mov.w	r1, #4294967295
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f012 ff8e 	bl	8015dc0 <osMutexAcquire>
                  osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8002ea4:	4b39      	ldr	r3, [pc, #228]	; (8002f8c <MENU_RunningFunction+0xee4>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8002eac:	4618      	mov	r0, r3
 8002eae:	f012 ff87 	bl	8015dc0 <osMutexAcquire>
                  ssd1306_clear();
 8002eb2:	f00a fba1 	bl	800d5f8 <ssd1306_clear>
                  sprintf(Temp, "INTERNAL_PM10");
 8002eb6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002eba:	493a      	ldr	r1, [pc, #232]	; (8002fa4 <MENU_RunningFunction+0xefc>)
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f009 fe6b 	bl	800cb98 <sprintf_>
                  GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8002ec2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	9301      	str	r3, [sp, #4]
 8002eca:	2300      	movs	r3, #0
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	2301      	movs	r3, #1
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	2000      	movs	r0, #0
 8002ed4:	f7fe f9ee 	bl	80012b4 <GFX_DrawString>
                  ssd1306_display();
 8002ed8:	f00a fb62 	bl	800d5a0 <ssd1306_display>
                  osMutexRelease(SPI1MutexHandle);
 8002edc:	4b2b      	ldr	r3, [pc, #172]	; (8002f8c <MENU_RunningFunction+0xee4>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f012 ffb8 	bl	8015e56 <osMutexRelease>
                  osMutexRelease(SSD1306MutexHandle);
 8002ee6:	4b28      	ldr	r3, [pc, #160]	; (8002f88 <MENU_RunningFunction+0xee0>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f012 ffb3 	bl	8015e56 <osMutexRelease>
                  osMutexRelease(ScreensDcMutexHandle);
 8002ef0:	4b24      	ldr	r3, [pc, #144]	; (8002f84 <MENU_RunningFunction+0xedc>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f012 ffae 	bl	8015e56 <osMutexRelease>
                  QueueChartData.ChartType = INTERNAL_PM10;
 8002efa:	2302      	movs	r3, #2
 8002efc:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                  break;
 8002f00:	e184      	b.n	800320c <MENU_RunningFunction+0x1164>
               }
               case EXTERNAL_PM1:
               {
                  osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8002f02:	4b20      	ldr	r3, [pc, #128]	; (8002f84 <MENU_RunningFunction+0xedc>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f04f 31ff 	mov.w	r1, #4294967295
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f012 ff58 	bl	8015dc0 <osMutexAcquire>
                  osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8002f10:	4b1d      	ldr	r3, [pc, #116]	; (8002f88 <MENU_RunningFunction+0xee0>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f04f 31ff 	mov.w	r1, #4294967295
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f012 ff51 	bl	8015dc0 <osMutexAcquire>
                  osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8002f1e:	4b1b      	ldr	r3, [pc, #108]	; (8002f8c <MENU_RunningFunction+0xee4>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f04f 31ff 	mov.w	r1, #4294967295
 8002f26:	4618      	mov	r0, r3
 8002f28:	f012 ff4a 	bl	8015dc0 <osMutexAcquire>
                  ssd1306_clear();
 8002f2c:	f00a fb64 	bl	800d5f8 <ssd1306_clear>
                  sprintf(Temp, "EXTERNAL_PM1");
 8002f30:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002f34:	491c      	ldr	r1, [pc, #112]	; (8002fa8 <MENU_RunningFunction+0xf00>)
 8002f36:	4618      	mov	r0, r3
 8002f38:	f009 fe2e 	bl	800cb98 <sprintf_>
                  GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8002f3c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002f40:	2300      	movs	r3, #0
 8002f42:	9301      	str	r3, [sp, #4]
 8002f44:	2300      	movs	r3, #0
 8002f46:	9300      	str	r3, [sp, #0]
 8002f48:	2301      	movs	r3, #1
 8002f4a:	2100      	movs	r1, #0
 8002f4c:	2000      	movs	r0, #0
 8002f4e:	f7fe f9b1 	bl	80012b4 <GFX_DrawString>
                  ssd1306_display();
 8002f52:	f00a fb25 	bl	800d5a0 <ssd1306_display>
                  osMutexRelease(SPI1MutexHandle);
 8002f56:	4b0d      	ldr	r3, [pc, #52]	; (8002f8c <MENU_RunningFunction+0xee4>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f012 ff7b 	bl	8015e56 <osMutexRelease>
                  osMutexRelease(SSD1306MutexHandle);
 8002f60:	4b09      	ldr	r3, [pc, #36]	; (8002f88 <MENU_RunningFunction+0xee0>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f012 ff76 	bl	8015e56 <osMutexRelease>
                  osMutexRelease(ScreensDcMutexHandle);
 8002f6a:	4b06      	ldr	r3, [pc, #24]	; (8002f84 <MENU_RunningFunction+0xedc>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f012 ff71 	bl	8015e56 <osMutexRelease>
                  QueueChartData.ChartType = EXTERNAL_PM1;
 8002f74:	2303      	movs	r3, #3
 8002f76:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                  break;
 8002f7a:	e147      	b.n	800320c <MENU_RunningFunction+0x1164>
 8002f7c:	48000400 	.word	0x48000400
 8002f80:	200002a4 	.word	0x200002a4
 8002f84:	200040a4 	.word	0x200040a4
 8002f88:	200040a8 	.word	0x200040a8
 8002f8c:	200040ac 	.word	0x200040ac
 8002f90:	0801ff78 	.word	0x0801ff78
 8002f94:	40000c00 	.word	0x40000c00
 8002f98:	38e38e39 	.word	0x38e38e39
 8002f9c:	0801ff88 	.word	0x0801ff88
 8002fa0:	0801ff98 	.word	0x0801ff98
 8002fa4:	0801ffa8 	.word	0x0801ffa8
 8002fa8:	0801ffb8 	.word	0x0801ffb8
               }
               case EXTERNAL_PM25:
               {
                  osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8002fac:	4ba5      	ldr	r3, [pc, #660]	; (8003244 <MENU_RunningFunction+0x119c>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f012 ff03 	bl	8015dc0 <osMutexAcquire>
                  osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8002fba:	4ba3      	ldr	r3, [pc, #652]	; (8003248 <MENU_RunningFunction+0x11a0>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f04f 31ff 	mov.w	r1, #4294967295
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f012 fefc 	bl	8015dc0 <osMutexAcquire>
                  osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8002fc8:	4ba0      	ldr	r3, [pc, #640]	; (800324c <MENU_RunningFunction+0x11a4>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f012 fef5 	bl	8015dc0 <osMutexAcquire>
                  ssd1306_clear();
 8002fd6:	f00a fb0f 	bl	800d5f8 <ssd1306_clear>
                  sprintf(Temp, "EXTERNAL_PM25");
 8002fda:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002fde:	499c      	ldr	r1, [pc, #624]	; (8003250 <MENU_RunningFunction+0x11a8>)
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f009 fdd9 	bl	800cb98 <sprintf_>
                  GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8002fe6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002fea:	2300      	movs	r3, #0
 8002fec:	9301      	str	r3, [sp, #4]
 8002fee:	2300      	movs	r3, #0
 8002ff0:	9300      	str	r3, [sp, #0]
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	2000      	movs	r0, #0
 8002ff8:	f7fe f95c 	bl	80012b4 <GFX_DrawString>
                  ssd1306_display();
 8002ffc:	f00a fad0 	bl	800d5a0 <ssd1306_display>
                  osMutexRelease(SPI1MutexHandle);
 8003000:	4b92      	ldr	r3, [pc, #584]	; (800324c <MENU_RunningFunction+0x11a4>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4618      	mov	r0, r3
 8003006:	f012 ff26 	bl	8015e56 <osMutexRelease>
                  osMutexRelease(SSD1306MutexHandle);
 800300a:	4b8f      	ldr	r3, [pc, #572]	; (8003248 <MENU_RunningFunction+0x11a0>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4618      	mov	r0, r3
 8003010:	f012 ff21 	bl	8015e56 <osMutexRelease>
                  osMutexRelease(ScreensDcMutexHandle);
 8003014:	4b8b      	ldr	r3, [pc, #556]	; (8003244 <MENU_RunningFunction+0x119c>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4618      	mov	r0, r3
 800301a:	f012 ff1c 	bl	8015e56 <osMutexRelease>
                  QueueChartData.ChartType = EXTERNAL_PM25;
 800301e:	2304      	movs	r3, #4
 8003020:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                  break;
 8003024:	e0f2      	b.n	800320c <MENU_RunningFunction+0x1164>
               }
               case EXTERNAL_PM10:
               {
                  osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8003026:	4b87      	ldr	r3, [pc, #540]	; (8003244 <MENU_RunningFunction+0x119c>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f04f 31ff 	mov.w	r1, #4294967295
 800302e:	4618      	mov	r0, r3
 8003030:	f012 fec6 	bl	8015dc0 <osMutexAcquire>
                  osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8003034:	4b84      	ldr	r3, [pc, #528]	; (8003248 <MENU_RunningFunction+0x11a0>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f04f 31ff 	mov.w	r1, #4294967295
 800303c:	4618      	mov	r0, r3
 800303e:	f012 febf 	bl	8015dc0 <osMutexAcquire>
                  osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8003042:	4b82      	ldr	r3, [pc, #520]	; (800324c <MENU_RunningFunction+0x11a4>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f04f 31ff 	mov.w	r1, #4294967295
 800304a:	4618      	mov	r0, r3
 800304c:	f012 feb8 	bl	8015dc0 <osMutexAcquire>
                  ssd1306_clear();
 8003050:	f00a fad2 	bl	800d5f8 <ssd1306_clear>
                  sprintf(Temp, "EXTERNAL_PM10");
 8003054:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003058:	497e      	ldr	r1, [pc, #504]	; (8003254 <MENU_RunningFunction+0x11ac>)
 800305a:	4618      	mov	r0, r3
 800305c:	f009 fd9c 	bl	800cb98 <sprintf_>
                  GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8003060:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003064:	2300      	movs	r3, #0
 8003066:	9301      	str	r3, [sp, #4]
 8003068:	2300      	movs	r3, #0
 800306a:	9300      	str	r3, [sp, #0]
 800306c:	2301      	movs	r3, #1
 800306e:	2100      	movs	r1, #0
 8003070:	2000      	movs	r0, #0
 8003072:	f7fe f91f 	bl	80012b4 <GFX_DrawString>
                  ssd1306_display();
 8003076:	f00a fa93 	bl	800d5a0 <ssd1306_display>
                  osMutexRelease(SPI1MutexHandle);
 800307a:	4b74      	ldr	r3, [pc, #464]	; (800324c <MENU_RunningFunction+0x11a4>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4618      	mov	r0, r3
 8003080:	f012 fee9 	bl	8015e56 <osMutexRelease>
                  osMutexRelease(SSD1306MutexHandle);
 8003084:	4b70      	ldr	r3, [pc, #448]	; (8003248 <MENU_RunningFunction+0x11a0>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4618      	mov	r0, r3
 800308a:	f012 fee4 	bl	8015e56 <osMutexRelease>
                  osMutexRelease(ScreensDcMutexHandle);
 800308e:	4b6d      	ldr	r3, [pc, #436]	; (8003244 <MENU_RunningFunction+0x119c>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4618      	mov	r0, r3
 8003094:	f012 fedf 	bl	8015e56 <osMutexRelease>
                  QueueChartData.ChartType = EXTERNAL_PM10;
 8003098:	2305      	movs	r3, #5
 800309a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                  break;
 800309e:	e0b5      	b.n	800320c <MENU_RunningFunction+0x1164>
               }
               case PRESSURE:
               {
                  osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 80030a0:	4b68      	ldr	r3, [pc, #416]	; (8003244 <MENU_RunningFunction+0x119c>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f04f 31ff 	mov.w	r1, #4294967295
 80030a8:	4618      	mov	r0, r3
 80030aa:	f012 fe89 	bl	8015dc0 <osMutexAcquire>
                  osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 80030ae:	4b66      	ldr	r3, [pc, #408]	; (8003248 <MENU_RunningFunction+0x11a0>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f04f 31ff 	mov.w	r1, #4294967295
 80030b6:	4618      	mov	r0, r3
 80030b8:	f012 fe82 	bl	8015dc0 <osMutexAcquire>
                  osMutexAcquire(SPI1MutexHandle, osWaitForever);
 80030bc:	4b63      	ldr	r3, [pc, #396]	; (800324c <MENU_RunningFunction+0x11a4>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f04f 31ff 	mov.w	r1, #4294967295
 80030c4:	4618      	mov	r0, r3
 80030c6:	f012 fe7b 	bl	8015dc0 <osMutexAcquire>
                  ssd1306_clear();
 80030ca:	f00a fa95 	bl	800d5f8 <ssd1306_clear>
                  sprintf(Temp, "PRESSURE");
 80030ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80030d2:	4961      	ldr	r1, [pc, #388]	; (8003258 <MENU_RunningFunction+0x11b0>)
 80030d4:	4618      	mov	r0, r3
 80030d6:	f009 fd5f 	bl	800cb98 <sprintf_>
                  GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 80030da:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80030de:	2300      	movs	r3, #0
 80030e0:	9301      	str	r3, [sp, #4]
 80030e2:	2300      	movs	r3, #0
 80030e4:	9300      	str	r3, [sp, #0]
 80030e6:	2301      	movs	r3, #1
 80030e8:	2100      	movs	r1, #0
 80030ea:	2000      	movs	r0, #0
 80030ec:	f7fe f8e2 	bl	80012b4 <GFX_DrawString>
                  ssd1306_display();
 80030f0:	f00a fa56 	bl	800d5a0 <ssd1306_display>
                  osMutexRelease(SPI1MutexHandle);
 80030f4:	4b55      	ldr	r3, [pc, #340]	; (800324c <MENU_RunningFunction+0x11a4>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f012 feac 	bl	8015e56 <osMutexRelease>
                  osMutexRelease(SSD1306MutexHandle);
 80030fe:	4b52      	ldr	r3, [pc, #328]	; (8003248 <MENU_RunningFunction+0x11a0>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4618      	mov	r0, r3
 8003104:	f012 fea7 	bl	8015e56 <osMutexRelease>
                  osMutexRelease(ScreensDcMutexHandle);
 8003108:	4b4e      	ldr	r3, [pc, #312]	; (8003244 <MENU_RunningFunction+0x119c>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4618      	mov	r0, r3
 800310e:	f012 fea2 	bl	8015e56 <osMutexRelease>
                  QueueChartData.ChartType = PRESSURE;
 8003112:	2306      	movs	r3, #6
 8003114:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                  break;
 8003118:	e078      	b.n	800320c <MENU_RunningFunction+0x1164>
               }
               case EXTERNAL_TEMPERATURE:
               {
                  osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 800311a:	4b4a      	ldr	r3, [pc, #296]	; (8003244 <MENU_RunningFunction+0x119c>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f04f 31ff 	mov.w	r1, #4294967295
 8003122:	4618      	mov	r0, r3
 8003124:	f012 fe4c 	bl	8015dc0 <osMutexAcquire>
                  osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8003128:	4b47      	ldr	r3, [pc, #284]	; (8003248 <MENU_RunningFunction+0x11a0>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f04f 31ff 	mov.w	r1, #4294967295
 8003130:	4618      	mov	r0, r3
 8003132:	f012 fe45 	bl	8015dc0 <osMutexAcquire>
                  osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8003136:	4b45      	ldr	r3, [pc, #276]	; (800324c <MENU_RunningFunction+0x11a4>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f04f 31ff 	mov.w	r1, #4294967295
 800313e:	4618      	mov	r0, r3
 8003140:	f012 fe3e 	bl	8015dc0 <osMutexAcquire>
                  ssd1306_clear();
 8003144:	f00a fa58 	bl	800d5f8 <ssd1306_clear>
                  sprintf(Temp, "EXTERNAL_TEMPERATURE");
 8003148:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800314c:	4943      	ldr	r1, [pc, #268]	; (800325c <MENU_RunningFunction+0x11b4>)
 800314e:	4618      	mov	r0, r3
 8003150:	f009 fd22 	bl	800cb98 <sprintf_>
                  GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8003154:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003158:	2300      	movs	r3, #0
 800315a:	9301      	str	r3, [sp, #4]
 800315c:	2300      	movs	r3, #0
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	2301      	movs	r3, #1
 8003162:	2100      	movs	r1, #0
 8003164:	2000      	movs	r0, #0
 8003166:	f7fe f8a5 	bl	80012b4 <GFX_DrawString>
                  ssd1306_display();
 800316a:	f00a fa19 	bl	800d5a0 <ssd1306_display>
                  osMutexRelease(SPI1MutexHandle);
 800316e:	4b37      	ldr	r3, [pc, #220]	; (800324c <MENU_RunningFunction+0x11a4>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4618      	mov	r0, r3
 8003174:	f012 fe6f 	bl	8015e56 <osMutexRelease>
                  osMutexRelease(SSD1306MutexHandle);
 8003178:	4b33      	ldr	r3, [pc, #204]	; (8003248 <MENU_RunningFunction+0x11a0>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4618      	mov	r0, r3
 800317e:	f012 fe6a 	bl	8015e56 <osMutexRelease>
                  osMutexRelease(ScreensDcMutexHandle);
 8003182:	4b30      	ldr	r3, [pc, #192]	; (8003244 <MENU_RunningFunction+0x119c>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4618      	mov	r0, r3
 8003188:	f012 fe65 	bl	8015e56 <osMutexRelease>
                  QueueChartData.ChartType = EXTERNAL_TEMPERATURE;
 800318c:	2307      	movs	r3, #7
 800318e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                  break;
 8003192:	e03b      	b.n	800320c <MENU_RunningFunction+0x1164>
               }
               case EXTERNAL_HUMIDITY:
               {
                  osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8003194:	4b2b      	ldr	r3, [pc, #172]	; (8003244 <MENU_RunningFunction+0x119c>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f04f 31ff 	mov.w	r1, #4294967295
 800319c:	4618      	mov	r0, r3
 800319e:	f012 fe0f 	bl	8015dc0 <osMutexAcquire>
                  osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 80031a2:	4b29      	ldr	r3, [pc, #164]	; (8003248 <MENU_RunningFunction+0x11a0>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f04f 31ff 	mov.w	r1, #4294967295
 80031aa:	4618      	mov	r0, r3
 80031ac:	f012 fe08 	bl	8015dc0 <osMutexAcquire>
                  osMutexAcquire(SPI1MutexHandle, osWaitForever);
 80031b0:	4b26      	ldr	r3, [pc, #152]	; (800324c <MENU_RunningFunction+0x11a4>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f04f 31ff 	mov.w	r1, #4294967295
 80031b8:	4618      	mov	r0, r3
 80031ba:	f012 fe01 	bl	8015dc0 <osMutexAcquire>
                  ssd1306_clear();
 80031be:	f00a fa1b 	bl	800d5f8 <ssd1306_clear>
                  sprintf(Temp, "EXTERNAL_HUMIDITY");
 80031c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80031c6:	4926      	ldr	r1, [pc, #152]	; (8003260 <MENU_RunningFunction+0x11b8>)
 80031c8:	4618      	mov	r0, r3
 80031ca:	f009 fce5 	bl	800cb98 <sprintf_>
                  GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 80031ce:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80031d2:	2300      	movs	r3, #0
 80031d4:	9301      	str	r3, [sp, #4]
 80031d6:	2300      	movs	r3, #0
 80031d8:	9300      	str	r3, [sp, #0]
 80031da:	2301      	movs	r3, #1
 80031dc:	2100      	movs	r1, #0
 80031de:	2000      	movs	r0, #0
 80031e0:	f7fe f868 	bl	80012b4 <GFX_DrawString>
                  ssd1306_display();
 80031e4:	f00a f9dc 	bl	800d5a0 <ssd1306_display>
                  osMutexRelease(SPI1MutexHandle);
 80031e8:	4b18      	ldr	r3, [pc, #96]	; (800324c <MENU_RunningFunction+0x11a4>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f012 fe32 	bl	8015e56 <osMutexRelease>
                  osMutexRelease(SSD1306MutexHandle);
 80031f2:	4b15      	ldr	r3, [pc, #84]	; (8003248 <MENU_RunningFunction+0x11a0>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f012 fe2d 	bl	8015e56 <osMutexRelease>
                  osMutexRelease(ScreensDcMutexHandle);
 80031fc:	4b11      	ldr	r3, [pc, #68]	; (8003244 <MENU_RunningFunction+0x119c>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4618      	mov	r0, r3
 8003202:	f012 fe28 	bl	8015e56 <osMutexRelease>
                  QueueChartData.ChartType = EXTERNAL_HUMIDITY;
 8003206:	2308      	movs	r3, #8
 8003208:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 1)
 800320c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003210:	4814      	ldr	r0, [pc, #80]	; (8003264 <MENU_RunningFunction+0x11bc>)
 8003212:	f00b fe35 	bl	800ee80 <HAL_GPIO_ReadPin>
 8003216:	4603      	mov	r3, r0
 8003218:	2b01      	cmp	r3, #1
 800321a:	f43f ad94 	beq.w	8002d46 <MENU_RunningFunction+0xc9e>
               }
            }
         }
         osDelay(50);
 800321e:	2032      	movs	r0, #50	; 0x32
 8003220:	f012 fb80 	bl	8015924 <osDelay>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8003224:	e002      	b.n	800322c <MENU_RunningFunction+0x1184>
         {
            osDelay(100);
 8003226:	2064      	movs	r0, #100	; 0x64
 8003228:	f012 fb7c 	bl	8015924 <osDelay>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 800322c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003230:	480c      	ldr	r0, [pc, #48]	; (8003264 <MENU_RunningFunction+0x11bc>)
 8003232:	f00b fe25 	bl	800ee80 <HAL_GPIO_ReadPin>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d0f4      	beq.n	8003226 <MENU_RunningFunction+0x117e>
         }
         TIM5->CNT = 0;
 800323c:	4b0a      	ldr	r3, [pc, #40]	; (8003268 <MENU_RunningFunction+0x11c0>)
 800323e:	2200      	movs	r2, #0
 8003240:	625a      	str	r2, [r3, #36]	; 0x24
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 1)
 8003242:	e0e8      	b.n	8003416 <MENU_RunningFunction+0x136e>
 8003244:	200040a4 	.word	0x200040a4
 8003248:	200040a8 	.word	0x200040a8
 800324c:	200040ac 	.word	0x200040ac
 8003250:	0801ffc8 	.word	0x0801ffc8
 8003254:	0801ffd8 	.word	0x0801ffd8
 8003258:	0801ffe8 	.word	0x0801ffe8
 800325c:	0801fff4 	.word	0x0801fff4
 8003260:	0802000c 	.word	0x0802000c
 8003264:	48000400 	.word	0x48000400
 8003268:	40000c00 	.word	0x40000c00
         {
            if((TIM5->CNT / 4) % 2 == 0)
 800326c:	4bb6      	ldr	r3, [pc, #728]	; (8003548 <MENU_RunningFunction+0x14a0>)
 800326e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003270:	089b      	lsrs	r3, r3, #2
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b00      	cmp	r3, #0
 8003278:	d165      	bne.n	8003346 <MENU_RunningFunction+0x129e>
            {
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 800327a:	4bb4      	ldr	r3, [pc, #720]	; (800354c <MENU_RunningFunction+0x14a4>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f04f 31ff 	mov.w	r1, #4294967295
 8003282:	4618      	mov	r0, r3
 8003284:	f012 fd9c 	bl	8015dc0 <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8003288:	4bb1      	ldr	r3, [pc, #708]	; (8003550 <MENU_RunningFunction+0x14a8>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f04f 31ff 	mov.w	r1, #4294967295
 8003290:	4618      	mov	r0, r3
 8003292:	f012 fd95 	bl	8015dc0 <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8003296:	4baf      	ldr	r3, [pc, #700]	; (8003554 <MENU_RunningFunction+0x14ac>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f04f 31ff 	mov.w	r1, #4294967295
 800329e:	4618      	mov	r0, r3
 80032a0:	f012 fd8e 	bl	8015dc0 <osMutexAcquire>
               ssd1306_clear();
 80032a4:	f00a f9a8 	bl	800d5f8 <ssd1306_clear>
               sprintf(Temp, "WYMAGA POTWIERDZENIA");
 80032a8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80032ac:	49aa      	ldr	r1, [pc, #680]	; (8003558 <MENU_RunningFunction+0x14b0>)
 80032ae:	4618      	mov	r0, r3
 80032b0:	f009 fc72 	bl	800cb98 <sprintf_>
               GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 80032b4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80032b8:	2300      	movs	r3, #0
 80032ba:	9301      	str	r3, [sp, #4]
 80032bc:	2300      	movs	r3, #0
 80032be:	9300      	str	r3, [sp, #0]
 80032c0:	2301      	movs	r3, #1
 80032c2:	2100      	movs	r1, #0
 80032c4:	2000      	movs	r0, #0
 80032c6:	f7fd fff5 	bl	80012b4 <GFX_DrawString>
               sprintf(Temp, "NIE");
 80032ca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80032ce:	49a3      	ldr	r1, [pc, #652]	; (800355c <MENU_RunningFunction+0x14b4>)
 80032d0:	4618      	mov	r0, r3
 80032d2:	f009 fc61 	bl	800cb98 <sprintf_>
               GFX_DrawFillRectangle(5, 25, 25, 18, WHITE, OLED);
 80032d6:	2300      	movs	r3, #0
 80032d8:	9301      	str	r3, [sp, #4]
 80032da:	2301      	movs	r3, #1
 80032dc:	9300      	str	r3, [sp, #0]
 80032de:	2312      	movs	r3, #18
 80032e0:	2219      	movs	r2, #25
 80032e2:	2119      	movs	r1, #25
 80032e4:	2005      	movs	r0, #5
 80032e6:	f7fe f956 	bl	8001596 <GFX_DrawFillRectangle>
               GFX_DrawString(10, 30, Temp, BLACK, 1, OLED);
 80032ea:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80032ee:	2300      	movs	r3, #0
 80032f0:	9301      	str	r3, [sp, #4]
 80032f2:	2301      	movs	r3, #1
 80032f4:	9300      	str	r3, [sp, #0]
 80032f6:	2300      	movs	r3, #0
 80032f8:	211e      	movs	r1, #30
 80032fa:	200a      	movs	r0, #10
 80032fc:	f7fd ffda 	bl	80012b4 <GFX_DrawString>
               sprintf(Temp, "TAK");
 8003300:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003304:	4996      	ldr	r1, [pc, #600]	; (8003560 <MENU_RunningFunction+0x14b8>)
 8003306:	4618      	mov	r0, r3
 8003308:	f009 fc46 	bl	800cb98 <sprintf_>
               GFX_DrawString(100, 30, Temp, WHITE, 0, OLED);
 800330c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003310:	2300      	movs	r3, #0
 8003312:	9301      	str	r3, [sp, #4]
 8003314:	2300      	movs	r3, #0
 8003316:	9300      	str	r3, [sp, #0]
 8003318:	2301      	movs	r3, #1
 800331a:	211e      	movs	r1, #30
 800331c:	2064      	movs	r0, #100	; 0x64
 800331e:	f7fd ffc9 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 8003322:	f00a f93d 	bl	800d5a0 <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 8003326:	4b8b      	ldr	r3, [pc, #556]	; (8003554 <MENU_RunningFunction+0x14ac>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4618      	mov	r0, r3
 800332c:	f012 fd93 	bl	8015e56 <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 8003330:	4b87      	ldr	r3, [pc, #540]	; (8003550 <MENU_RunningFunction+0x14a8>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4618      	mov	r0, r3
 8003336:	f012 fd8e 	bl	8015e56 <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 800333a:	4b84      	ldr	r3, [pc, #528]	; (800354c <MENU_RunningFunction+0x14a4>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4618      	mov	r0, r3
 8003340:	f012 fd89 	bl	8015e56 <osMutexRelease>
 8003344:	e064      	b.n	8003410 <MENU_RunningFunction+0x1368>
            }
            else
            {
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8003346:	4b81      	ldr	r3, [pc, #516]	; (800354c <MENU_RunningFunction+0x14a4>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f04f 31ff 	mov.w	r1, #4294967295
 800334e:	4618      	mov	r0, r3
 8003350:	f012 fd36 	bl	8015dc0 <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8003354:	4b7e      	ldr	r3, [pc, #504]	; (8003550 <MENU_RunningFunction+0x14a8>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f04f 31ff 	mov.w	r1, #4294967295
 800335c:	4618      	mov	r0, r3
 800335e:	f012 fd2f 	bl	8015dc0 <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8003362:	4b7c      	ldr	r3, [pc, #496]	; (8003554 <MENU_RunningFunction+0x14ac>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f04f 31ff 	mov.w	r1, #4294967295
 800336a:	4618      	mov	r0, r3
 800336c:	f012 fd28 	bl	8015dc0 <osMutexAcquire>
               ssd1306_clear();
 8003370:	f00a f942 	bl	800d5f8 <ssd1306_clear>
               sprintf(Temp, "WYMAGA POTWIERDZENIA");
 8003374:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003378:	4977      	ldr	r1, [pc, #476]	; (8003558 <MENU_RunningFunction+0x14b0>)
 800337a:	4618      	mov	r0, r3
 800337c:	f009 fc0c 	bl	800cb98 <sprintf_>
               GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8003380:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003384:	2300      	movs	r3, #0
 8003386:	9301      	str	r3, [sp, #4]
 8003388:	2300      	movs	r3, #0
 800338a:	9300      	str	r3, [sp, #0]
 800338c:	2301      	movs	r3, #1
 800338e:	2100      	movs	r1, #0
 8003390:	2000      	movs	r0, #0
 8003392:	f7fd ff8f 	bl	80012b4 <GFX_DrawString>
               sprintf(Temp, "NIE");
 8003396:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800339a:	4970      	ldr	r1, [pc, #448]	; (800355c <MENU_RunningFunction+0x14b4>)
 800339c:	4618      	mov	r0, r3
 800339e:	f009 fbfb 	bl	800cb98 <sprintf_>
               GFX_DrawString(10, 30, Temp, WHITE, 0, OLED);
 80033a2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80033a6:	2300      	movs	r3, #0
 80033a8:	9301      	str	r3, [sp, #4]
 80033aa:	2300      	movs	r3, #0
 80033ac:	9300      	str	r3, [sp, #0]
 80033ae:	2301      	movs	r3, #1
 80033b0:	211e      	movs	r1, #30
 80033b2:	200a      	movs	r0, #10
 80033b4:	f7fd ff7e 	bl	80012b4 <GFX_DrawString>
               sprintf(Temp, "TAK");
 80033b8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80033bc:	4968      	ldr	r1, [pc, #416]	; (8003560 <MENU_RunningFunction+0x14b8>)
 80033be:	4618      	mov	r0, r3
 80033c0:	f009 fbea 	bl	800cb98 <sprintf_>
               GFX_DrawFillRectangle(95, 25, 25, 18, WHITE, OLED);
 80033c4:	2300      	movs	r3, #0
 80033c6:	9301      	str	r3, [sp, #4]
 80033c8:	2301      	movs	r3, #1
 80033ca:	9300      	str	r3, [sp, #0]
 80033cc:	2312      	movs	r3, #18
 80033ce:	2219      	movs	r2, #25
 80033d0:	2119      	movs	r1, #25
 80033d2:	205f      	movs	r0, #95	; 0x5f
 80033d4:	f7fe f8df 	bl	8001596 <GFX_DrawFillRectangle>
               GFX_DrawString(100, 30, Temp, BLACK, 1, OLED);
 80033d8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80033dc:	2300      	movs	r3, #0
 80033de:	9301      	str	r3, [sp, #4]
 80033e0:	2301      	movs	r3, #1
 80033e2:	9300      	str	r3, [sp, #0]
 80033e4:	2300      	movs	r3, #0
 80033e6:	211e      	movs	r1, #30
 80033e8:	2064      	movs	r0, #100	; 0x64
 80033ea:	f7fd ff63 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 80033ee:	f00a f8d7 	bl	800d5a0 <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 80033f2:	4b58      	ldr	r3, [pc, #352]	; (8003554 <MENU_RunningFunction+0x14ac>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f012 fd2d 	bl	8015e56 <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 80033fc:	4b54      	ldr	r3, [pc, #336]	; (8003550 <MENU_RunningFunction+0x14a8>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4618      	mov	r0, r3
 8003402:	f012 fd28 	bl	8015e56 <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 8003406:	4b51      	ldr	r3, [pc, #324]	; (800354c <MENU_RunningFunction+0x14a4>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4618      	mov	r0, r3
 800340c:	f012 fd23 	bl	8015e56 <osMutexRelease>
            }
            osDelay(100);
 8003410:	2064      	movs	r0, #100	; 0x64
 8003412:	f012 fa87 	bl	8015924 <osDelay>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 1)
 8003416:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800341a:	4852      	ldr	r0, [pc, #328]	; (8003564 <MENU_RunningFunction+0x14bc>)
 800341c:	f00b fd30 	bl	800ee80 <HAL_GPIO_ReadPin>
 8003420:	4603      	mov	r3, r0
 8003422:	2b01      	cmp	r3, #1
 8003424:	f43f af22 	beq.w	800326c <MENU_RunningFunction+0x11c4>
         }

         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8003428:	e002      	b.n	8003430 <MENU_RunningFunction+0x1388>
         {
            osDelay(100);
 800342a:	2064      	movs	r0, #100	; 0x64
 800342c:	f012 fa7a 	bl	8015924 <osDelay>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8003430:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003434:	484b      	ldr	r0, [pc, #300]	; (8003564 <MENU_RunningFunction+0x14bc>)
 8003436:	f00b fd23 	bl	800ee80 <HAL_GPIO_ReadPin>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d0f4      	beq.n	800342a <MENU_RunningFunction+0x1382>
         }
         if((TIM5->CNT / 4) % 2 == 1)
 8003440:	4b41      	ldr	r3, [pc, #260]	; (8003548 <MENU_RunningFunction+0x14a0>)
 8003442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003444:	089b      	lsrs	r3, r3, #2
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b01      	cmp	r3, #1
 800344c:	f040 8346 	bne.w	8003adc <MENU_RunningFunction+0x1a34>
         {
            osMessageQueuePut(ChartQueueHandle, &QueueChartData, 0, osWaitForever);
 8003450:	4b45      	ldr	r3, [pc, #276]	; (8003568 <MENU_RunningFunction+0x14c0>)
 8003452:	6818      	ldr	r0, [r3, #0]
 8003454:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003458:	f04f 33ff 	mov.w	r3, #4294967295
 800345c:	2200      	movs	r2, #0
 800345e:	f012 fdab 	bl	8015fb8 <osMessageQueuePut>
         }
         break;
 8003462:	e33b      	b.n	8003adc <MENU_RunningFunction+0x1a34>
      }

      case MENU_CHOISE_CLEAR_EXTERNAL_MEMORY:
      {
         TIM5->CNT = 0;
 8003464:	4b38      	ldr	r3, [pc, #224]	; (8003548 <MENU_RunningFunction+0x14a0>)
 8003466:	2200      	movs	r2, #0
 8003468:	625a      	str	r2, [r3, #36]	; 0x24
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 1)
 800346a:	e0e7      	b.n	800363c <MENU_RunningFunction+0x1594>
         {
            if((TIM5->CNT / 4) % 2 == 0)
 800346c:	4b36      	ldr	r3, [pc, #216]	; (8003548 <MENU_RunningFunction+0x14a0>)
 800346e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003470:	089b      	lsrs	r3, r3, #2
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b00      	cmp	r3, #0
 8003478:	d178      	bne.n	800356c <MENU_RunningFunction+0x14c4>
            {
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 800347a:	4b34      	ldr	r3, [pc, #208]	; (800354c <MENU_RunningFunction+0x14a4>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f04f 31ff 	mov.w	r1, #4294967295
 8003482:	4618      	mov	r0, r3
 8003484:	f012 fc9c 	bl	8015dc0 <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8003488:	4b31      	ldr	r3, [pc, #196]	; (8003550 <MENU_RunningFunction+0x14a8>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f04f 31ff 	mov.w	r1, #4294967295
 8003490:	4618      	mov	r0, r3
 8003492:	f012 fc95 	bl	8015dc0 <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8003496:	4b2f      	ldr	r3, [pc, #188]	; (8003554 <MENU_RunningFunction+0x14ac>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f04f 31ff 	mov.w	r1, #4294967295
 800349e:	4618      	mov	r0, r3
 80034a0:	f012 fc8e 	bl	8015dc0 <osMutexAcquire>
               ssd1306_clear();
 80034a4:	f00a f8a8 	bl	800d5f8 <ssd1306_clear>
               sprintf(Temp, "WYMAGA POTWIERDZENIA");
 80034a8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80034ac:	492a      	ldr	r1, [pc, #168]	; (8003558 <MENU_RunningFunction+0x14b0>)
 80034ae:	4618      	mov	r0, r3
 80034b0:	f009 fb72 	bl	800cb98 <sprintf_>
               GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 80034b4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80034b8:	2300      	movs	r3, #0
 80034ba:	9301      	str	r3, [sp, #4]
 80034bc:	2300      	movs	r3, #0
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	2301      	movs	r3, #1
 80034c2:	2100      	movs	r1, #0
 80034c4:	2000      	movs	r0, #0
 80034c6:	f7fd fef5 	bl	80012b4 <GFX_DrawString>
               sprintf(Temp, "NIE");
 80034ca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80034ce:	4923      	ldr	r1, [pc, #140]	; (800355c <MENU_RunningFunction+0x14b4>)
 80034d0:	4618      	mov	r0, r3
 80034d2:	f009 fb61 	bl	800cb98 <sprintf_>
               GFX_DrawFillRectangle(5, 25, 25, 18, WHITE, OLED);
 80034d6:	2300      	movs	r3, #0
 80034d8:	9301      	str	r3, [sp, #4]
 80034da:	2301      	movs	r3, #1
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	2312      	movs	r3, #18
 80034e0:	2219      	movs	r2, #25
 80034e2:	2119      	movs	r1, #25
 80034e4:	2005      	movs	r0, #5
 80034e6:	f7fe f856 	bl	8001596 <GFX_DrawFillRectangle>
               GFX_DrawString(10, 30, Temp, BLACK, 1, OLED);
 80034ea:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80034ee:	2300      	movs	r3, #0
 80034f0:	9301      	str	r3, [sp, #4]
 80034f2:	2301      	movs	r3, #1
 80034f4:	9300      	str	r3, [sp, #0]
 80034f6:	2300      	movs	r3, #0
 80034f8:	211e      	movs	r1, #30
 80034fa:	200a      	movs	r0, #10
 80034fc:	f7fd feda 	bl	80012b4 <GFX_DrawString>
               sprintf(Temp, "TAK");
 8003500:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003504:	4916      	ldr	r1, [pc, #88]	; (8003560 <MENU_RunningFunction+0x14b8>)
 8003506:	4618      	mov	r0, r3
 8003508:	f009 fb46 	bl	800cb98 <sprintf_>
               GFX_DrawString(100, 30, Temp, WHITE, 0, OLED);
 800350c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003510:	2300      	movs	r3, #0
 8003512:	9301      	str	r3, [sp, #4]
 8003514:	2300      	movs	r3, #0
 8003516:	9300      	str	r3, [sp, #0]
 8003518:	2301      	movs	r3, #1
 800351a:	211e      	movs	r1, #30
 800351c:	2064      	movs	r0, #100	; 0x64
 800351e:	f7fd fec9 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 8003522:	f00a f83d 	bl	800d5a0 <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 8003526:	4b0b      	ldr	r3, [pc, #44]	; (8003554 <MENU_RunningFunction+0x14ac>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4618      	mov	r0, r3
 800352c:	f012 fc93 	bl	8015e56 <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 8003530:	4b07      	ldr	r3, [pc, #28]	; (8003550 <MENU_RunningFunction+0x14a8>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4618      	mov	r0, r3
 8003536:	f012 fc8e 	bl	8015e56 <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 800353a:	4b04      	ldr	r3, [pc, #16]	; (800354c <MENU_RunningFunction+0x14a4>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4618      	mov	r0, r3
 8003540:	f012 fc89 	bl	8015e56 <osMutexRelease>
 8003544:	e077      	b.n	8003636 <MENU_RunningFunction+0x158e>
 8003546:	bf00      	nop
 8003548:	40000c00 	.word	0x40000c00
 800354c:	200040a4 	.word	0x200040a4
 8003550:	200040a8 	.word	0x200040a8
 8003554:	200040ac 	.word	0x200040ac
 8003558:	0801ff10 	.word	0x0801ff10
 800355c:	08020020 	.word	0x08020020
 8003560:	08020024 	.word	0x08020024
 8003564:	48000400 	.word	0x48000400
 8003568:	20004080 	.word	0x20004080
            }
            else
            {
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 800356c:	4bc7      	ldr	r3, [pc, #796]	; (800388c <MENU_RunningFunction+0x17e4>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f04f 31ff 	mov.w	r1, #4294967295
 8003574:	4618      	mov	r0, r3
 8003576:	f012 fc23 	bl	8015dc0 <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 800357a:	4bc5      	ldr	r3, [pc, #788]	; (8003890 <MENU_RunningFunction+0x17e8>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f04f 31ff 	mov.w	r1, #4294967295
 8003582:	4618      	mov	r0, r3
 8003584:	f012 fc1c 	bl	8015dc0 <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8003588:	4bc2      	ldr	r3, [pc, #776]	; (8003894 <MENU_RunningFunction+0x17ec>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f04f 31ff 	mov.w	r1, #4294967295
 8003590:	4618      	mov	r0, r3
 8003592:	f012 fc15 	bl	8015dc0 <osMutexAcquire>
               ssd1306_clear();
 8003596:	f00a f82f 	bl	800d5f8 <ssd1306_clear>
               sprintf(Temp, "WYMAGA POTWIERDZENIA");
 800359a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800359e:	49be      	ldr	r1, [pc, #760]	; (8003898 <MENU_RunningFunction+0x17f0>)
 80035a0:	4618      	mov	r0, r3
 80035a2:	f009 faf9 	bl	800cb98 <sprintf_>
               GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 80035a6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80035aa:	2300      	movs	r3, #0
 80035ac:	9301      	str	r3, [sp, #4]
 80035ae:	2300      	movs	r3, #0
 80035b0:	9300      	str	r3, [sp, #0]
 80035b2:	2301      	movs	r3, #1
 80035b4:	2100      	movs	r1, #0
 80035b6:	2000      	movs	r0, #0
 80035b8:	f7fd fe7c 	bl	80012b4 <GFX_DrawString>
               sprintf(Temp, "NIE");
 80035bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80035c0:	49b6      	ldr	r1, [pc, #728]	; (800389c <MENU_RunningFunction+0x17f4>)
 80035c2:	4618      	mov	r0, r3
 80035c4:	f009 fae8 	bl	800cb98 <sprintf_>
               GFX_DrawString(10, 30, Temp, WHITE, 0, OLED);
 80035c8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80035cc:	2300      	movs	r3, #0
 80035ce:	9301      	str	r3, [sp, #4]
 80035d0:	2300      	movs	r3, #0
 80035d2:	9300      	str	r3, [sp, #0]
 80035d4:	2301      	movs	r3, #1
 80035d6:	211e      	movs	r1, #30
 80035d8:	200a      	movs	r0, #10
 80035da:	f7fd fe6b 	bl	80012b4 <GFX_DrawString>
               sprintf(Temp, "TAK");
 80035de:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80035e2:	49af      	ldr	r1, [pc, #700]	; (80038a0 <MENU_RunningFunction+0x17f8>)
 80035e4:	4618      	mov	r0, r3
 80035e6:	f009 fad7 	bl	800cb98 <sprintf_>
               GFX_DrawFillRectangle(95, 25, 25, 18, WHITE, OLED);
 80035ea:	2300      	movs	r3, #0
 80035ec:	9301      	str	r3, [sp, #4]
 80035ee:	2301      	movs	r3, #1
 80035f0:	9300      	str	r3, [sp, #0]
 80035f2:	2312      	movs	r3, #18
 80035f4:	2219      	movs	r2, #25
 80035f6:	2119      	movs	r1, #25
 80035f8:	205f      	movs	r0, #95	; 0x5f
 80035fa:	f7fd ffcc 	bl	8001596 <GFX_DrawFillRectangle>
               GFX_DrawString(100, 30, Temp, BLACK, 1, OLED);
 80035fe:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003602:	2300      	movs	r3, #0
 8003604:	9301      	str	r3, [sp, #4]
 8003606:	2301      	movs	r3, #1
 8003608:	9300      	str	r3, [sp, #0]
 800360a:	2300      	movs	r3, #0
 800360c:	211e      	movs	r1, #30
 800360e:	2064      	movs	r0, #100	; 0x64
 8003610:	f7fd fe50 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 8003614:	f009 ffc4 	bl	800d5a0 <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 8003618:	4b9e      	ldr	r3, [pc, #632]	; (8003894 <MENU_RunningFunction+0x17ec>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4618      	mov	r0, r3
 800361e:	f012 fc1a 	bl	8015e56 <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 8003622:	4b9b      	ldr	r3, [pc, #620]	; (8003890 <MENU_RunningFunction+0x17e8>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4618      	mov	r0, r3
 8003628:	f012 fc15 	bl	8015e56 <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 800362c:	4b97      	ldr	r3, [pc, #604]	; (800388c <MENU_RunningFunction+0x17e4>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4618      	mov	r0, r3
 8003632:	f012 fc10 	bl	8015e56 <osMutexRelease>
            }
            osDelay(100);
 8003636:	2064      	movs	r0, #100	; 0x64
 8003638:	f012 f974 	bl	8015924 <osDelay>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 1)
 800363c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003640:	4898      	ldr	r0, [pc, #608]	; (80038a4 <MENU_RunningFunction+0x17fc>)
 8003642:	f00b fc1d 	bl	800ee80 <HAL_GPIO_ReadPin>
 8003646:	4603      	mov	r3, r0
 8003648:	2b01      	cmp	r3, #1
 800364a:	f43f af0f 	beq.w	800346c <MENU_RunningFunction+0x13c4>
         }

         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 800364e:	e002      	b.n	8003656 <MENU_RunningFunction+0x15ae>
         {
            osDelay(100);
 8003650:	2064      	movs	r0, #100	; 0x64
 8003652:	f012 f967 	bl	8015924 <osDelay>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8003656:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800365a:	4892      	ldr	r0, [pc, #584]	; (80038a4 <MENU_RunningFunction+0x17fc>)
 800365c:	f00b fc10 	bl	800ee80 <HAL_GPIO_ReadPin>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d0f4      	beq.n	8003650 <MENU_RunningFunction+0x15a8>
         }
         if((TIM5->CNT / 4) % 2 == 1)
 8003666:	4b90      	ldr	r3, [pc, #576]	; (80038a8 <MENU_RunningFunction+0x1800>)
 8003668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366a:	089b      	lsrs	r3, r3, #2
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	2b01      	cmp	r3, #1
 8003672:	f040 8235 	bne.w	8003ae0 <MENU_RunningFunction+0x1a38>
         {
            osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8003676:	4b85      	ldr	r3, [pc, #532]	; (800388c <MENU_RunningFunction+0x17e4>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f04f 31ff 	mov.w	r1, #4294967295
 800367e:	4618      	mov	r0, r3
 8003680:	f012 fb9e 	bl	8015dc0 <osMutexAcquire>
            osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8003684:	4b82      	ldr	r3, [pc, #520]	; (8003890 <MENU_RunningFunction+0x17e8>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f04f 31ff 	mov.w	r1, #4294967295
 800368c:	4618      	mov	r0, r3
 800368e:	f012 fb97 	bl	8015dc0 <osMutexAcquire>
            osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8003692:	4b80      	ldr	r3, [pc, #512]	; (8003894 <MENU_RunningFunction+0x17ec>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f04f 31ff 	mov.w	r1, #4294967295
 800369a:	4618      	mov	r0, r3
 800369c:	f012 fb90 	bl	8015dc0 <osMutexAcquire>
            ssd1306_clear();
 80036a0:	f009 ffaa 	bl	800d5f8 <ssd1306_clear>
            sprintf(Temp, "CZYSZCZENIE!!!");
 80036a4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80036a8:	4980      	ldr	r1, [pc, #512]	; (80038ac <MENU_RunningFunction+0x1804>)
 80036aa:	4618      	mov	r0, r3
 80036ac:	f009 fa74 	bl	800cb98 <sprintf_>
            GFX_DrawString(0, 0, Temp, BLACK, 1, OLED);
 80036b0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80036b4:	2300      	movs	r3, #0
 80036b6:	9301      	str	r3, [sp, #4]
 80036b8:	2301      	movs	r3, #1
 80036ba:	9300      	str	r3, [sp, #0]
 80036bc:	2300      	movs	r3, #0
 80036be:	2100      	movs	r1, #0
 80036c0:	2000      	movs	r0, #0
 80036c2:	f7fd fdf7 	bl	80012b4 <GFX_DrawString>
            ssd1306_display();
 80036c6:	f009 ff6b 	bl	800d5a0 <ssd1306_display>
            taskENTER_CRITICAL();
 80036ca:	f015 fe1b 	bl	8019304 <vPortEnterCritical>
            fram_ChipErase(&Fram);
 80036ce:	4878      	ldr	r0, [pc, #480]	; (80038b0 <MENU_RunningFunction+0x1808>)
 80036d0:	f001 fe07 	bl	80052e2 <fram_ChipErase>
            HAL_IWDG_Refresh(&hiwdg);
 80036d4:	4877      	ldr	r0, [pc, #476]	; (80038b4 <MENU_RunningFunction+0x180c>)
 80036d6:	f00b fc6c 	bl	800efb2 <HAL_IWDG_Refresh>
            flash_ChipErase(&Flash);
 80036da:	4877      	ldr	r0, [pc, #476]	; (80038b8 <MENU_RunningFunction+0x1810>)
 80036dc:	f001 fd22 	bl	8005124 <flash_ChipErase>
            taskEXIT_CRITICAL();
 80036e0:	f015 fe40 	bl	8019364 <vPortExitCritical>
            HAL_NVIC_SystemReset();
 80036e4:	f00a fef9 	bl	800e4da <HAL_NVIC_SystemReset>
            osMutexRelease(SPI1MutexHandle);
 80036e8:	4b6a      	ldr	r3, [pc, #424]	; (8003894 <MENU_RunningFunction+0x17ec>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f012 fbb2 	bl	8015e56 <osMutexRelease>
            osMutexRelease(SSD1306MutexHandle);
 80036f2:	4b67      	ldr	r3, [pc, #412]	; (8003890 <MENU_RunningFunction+0x17e8>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f012 fbad 	bl	8015e56 <osMutexRelease>
            osMutexRelease(ScreensDcMutexHandle);
 80036fc:	4b63      	ldr	r3, [pc, #396]	; (800388c <MENU_RunningFunction+0x17e4>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4618      	mov	r0, r3
 8003702:	f012 fba8 	bl	8015e56 <osMutexRelease>
         }
         break;
 8003706:	e1eb      	b.n	8003ae0 <MENU_RunningFunction+0x1a38>
      }
      case MENU_CHOISE_DARK_MODE:
      {
         TIM5->CNT = 0;
 8003708:	4b67      	ldr	r3, [pc, #412]	; (80038a8 <MENU_RunningFunction+0x1800>)
 800370a:	2200      	movs	r2, #0
 800370c:	625a      	str	r2, [r3, #36]	; 0x24
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 1)
 800370e:	e0b2      	b.n	8003876 <MENU_RunningFunction+0x17ce>
         {
            if((TIM5->CNT / 4) % 2 == 0)
 8003710:	4b65      	ldr	r3, [pc, #404]	; (80038a8 <MENU_RunningFunction+0x1800>)
 8003712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003714:	089b      	lsrs	r3, r3, #2
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	2b00      	cmp	r3, #0
 800371c:	d154      	bne.n	80037c8 <MENU_RunningFunction+0x1720>
            {
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 800371e:	4b5b      	ldr	r3, [pc, #364]	; (800388c <MENU_RunningFunction+0x17e4>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f04f 31ff 	mov.w	r1, #4294967295
 8003726:	4618      	mov	r0, r3
 8003728:	f012 fb4a 	bl	8015dc0 <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 800372c:	4b58      	ldr	r3, [pc, #352]	; (8003890 <MENU_RunningFunction+0x17e8>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f04f 31ff 	mov.w	r1, #4294967295
 8003734:	4618      	mov	r0, r3
 8003736:	f012 fb43 	bl	8015dc0 <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 800373a:	4b56      	ldr	r3, [pc, #344]	; (8003894 <MENU_RunningFunction+0x17ec>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f04f 31ff 	mov.w	r1, #4294967295
 8003742:	4618      	mov	r0, r3
 8003744:	f012 fb3c 	bl	8015dc0 <osMutexAcquire>
               ssd1306_clear();
 8003748:	f009 ff56 	bl	800d5f8 <ssd1306_clear>
               sprintf(Temp, "OFF");
 800374c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003750:	495a      	ldr	r1, [pc, #360]	; (80038bc <MENU_RunningFunction+0x1814>)
 8003752:	4618      	mov	r0, r3
 8003754:	f009 fa20 	bl	800cb98 <sprintf_>
               GFX_DrawFillRectangle(5, 25, 25, 18, WHITE, OLED);
 8003758:	2300      	movs	r3, #0
 800375a:	9301      	str	r3, [sp, #4]
 800375c:	2301      	movs	r3, #1
 800375e:	9300      	str	r3, [sp, #0]
 8003760:	2312      	movs	r3, #18
 8003762:	2219      	movs	r2, #25
 8003764:	2119      	movs	r1, #25
 8003766:	2005      	movs	r0, #5
 8003768:	f7fd ff15 	bl	8001596 <GFX_DrawFillRectangle>
               GFX_DrawString(10, 30, Temp, BLACK, 1, OLED);
 800376c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003770:	2300      	movs	r3, #0
 8003772:	9301      	str	r3, [sp, #4]
 8003774:	2301      	movs	r3, #1
 8003776:	9300      	str	r3, [sp, #0]
 8003778:	2300      	movs	r3, #0
 800377a:	211e      	movs	r1, #30
 800377c:	200a      	movs	r0, #10
 800377e:	f7fd fd99 	bl	80012b4 <GFX_DrawString>
               sprintf(Temp, "ON");
 8003782:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003786:	494e      	ldr	r1, [pc, #312]	; (80038c0 <MENU_RunningFunction+0x1818>)
 8003788:	4618      	mov	r0, r3
 800378a:	f009 fa05 	bl	800cb98 <sprintf_>
               GFX_DrawString(100, 30, Temp, WHITE, 0, OLED);
 800378e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003792:	2300      	movs	r3, #0
 8003794:	9301      	str	r3, [sp, #4]
 8003796:	2300      	movs	r3, #0
 8003798:	9300      	str	r3, [sp, #0]
 800379a:	2301      	movs	r3, #1
 800379c:	211e      	movs	r1, #30
 800379e:	2064      	movs	r0, #100	; 0x64
 80037a0:	f7fd fd88 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 80037a4:	f009 fefc 	bl	800d5a0 <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 80037a8:	4b3a      	ldr	r3, [pc, #232]	; (8003894 <MENU_RunningFunction+0x17ec>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f012 fb52 	bl	8015e56 <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 80037b2:	4b37      	ldr	r3, [pc, #220]	; (8003890 <MENU_RunningFunction+0x17e8>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f012 fb4d 	bl	8015e56 <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 80037bc:	4b33      	ldr	r3, [pc, #204]	; (800388c <MENU_RunningFunction+0x17e4>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f012 fb48 	bl	8015e56 <osMutexRelease>
 80037c6:	e053      	b.n	8003870 <MENU_RunningFunction+0x17c8>
            }
            else
            {
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 80037c8:	4b30      	ldr	r3, [pc, #192]	; (800388c <MENU_RunningFunction+0x17e4>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f04f 31ff 	mov.w	r1, #4294967295
 80037d0:	4618      	mov	r0, r3
 80037d2:	f012 faf5 	bl	8015dc0 <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 80037d6:	4b2e      	ldr	r3, [pc, #184]	; (8003890 <MENU_RunningFunction+0x17e8>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f04f 31ff 	mov.w	r1, #4294967295
 80037de:	4618      	mov	r0, r3
 80037e0:	f012 faee 	bl	8015dc0 <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 80037e4:	4b2b      	ldr	r3, [pc, #172]	; (8003894 <MENU_RunningFunction+0x17ec>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f04f 31ff 	mov.w	r1, #4294967295
 80037ec:	4618      	mov	r0, r3
 80037ee:	f012 fae7 	bl	8015dc0 <osMutexAcquire>
               ssd1306_clear();
 80037f2:	f009 ff01 	bl	800d5f8 <ssd1306_clear>
               sprintf(Temp, "OFF");
 80037f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80037fa:	4930      	ldr	r1, [pc, #192]	; (80038bc <MENU_RunningFunction+0x1814>)
 80037fc:	4618      	mov	r0, r3
 80037fe:	f009 f9cb 	bl	800cb98 <sprintf_>
               GFX_DrawString(10, 30, Temp, WHITE, 0, OLED);
 8003802:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003806:	2300      	movs	r3, #0
 8003808:	9301      	str	r3, [sp, #4]
 800380a:	2300      	movs	r3, #0
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	2301      	movs	r3, #1
 8003810:	211e      	movs	r1, #30
 8003812:	200a      	movs	r0, #10
 8003814:	f7fd fd4e 	bl	80012b4 <GFX_DrawString>
               sprintf(Temp, "ON");
 8003818:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800381c:	4928      	ldr	r1, [pc, #160]	; (80038c0 <MENU_RunningFunction+0x1818>)
 800381e:	4618      	mov	r0, r3
 8003820:	f009 f9ba 	bl	800cb98 <sprintf_>
               GFX_DrawFillRectangle(95, 25, 25, 18, WHITE, OLED);
 8003824:	2300      	movs	r3, #0
 8003826:	9301      	str	r3, [sp, #4]
 8003828:	2301      	movs	r3, #1
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	2312      	movs	r3, #18
 800382e:	2219      	movs	r2, #25
 8003830:	2119      	movs	r1, #25
 8003832:	205f      	movs	r0, #95	; 0x5f
 8003834:	f7fd feaf 	bl	8001596 <GFX_DrawFillRectangle>
               GFX_DrawString(100, 30, Temp, BLACK, 1, OLED);
 8003838:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800383c:	2300      	movs	r3, #0
 800383e:	9301      	str	r3, [sp, #4]
 8003840:	2301      	movs	r3, #1
 8003842:	9300      	str	r3, [sp, #0]
 8003844:	2300      	movs	r3, #0
 8003846:	211e      	movs	r1, #30
 8003848:	2064      	movs	r0, #100	; 0x64
 800384a:	f7fd fd33 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 800384e:	f009 fea7 	bl	800d5a0 <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 8003852:	4b10      	ldr	r3, [pc, #64]	; (8003894 <MENU_RunningFunction+0x17ec>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4618      	mov	r0, r3
 8003858:	f012 fafd 	bl	8015e56 <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 800385c:	4b0c      	ldr	r3, [pc, #48]	; (8003890 <MENU_RunningFunction+0x17e8>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4618      	mov	r0, r3
 8003862:	f012 faf8 	bl	8015e56 <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 8003866:	4b09      	ldr	r3, [pc, #36]	; (800388c <MENU_RunningFunction+0x17e4>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4618      	mov	r0, r3
 800386c:	f012 faf3 	bl	8015e56 <osMutexRelease>
            }
            osDelay(100);
 8003870:	2064      	movs	r0, #100	; 0x64
 8003872:	f012 f857 	bl	8015924 <osDelay>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 1)
 8003876:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800387a:	480a      	ldr	r0, [pc, #40]	; (80038a4 <MENU_RunningFunction+0x17fc>)
 800387c:	f00b fb00 	bl	800ee80 <HAL_GPIO_ReadPin>
 8003880:	4603      	mov	r3, r0
 8003882:	2b01      	cmp	r3, #1
 8003884:	f43f af44 	beq.w	8003710 <MENU_RunningFunction+0x1668>
         }

         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8003888:	e01f      	b.n	80038ca <MENU_RunningFunction+0x1822>
 800388a:	bf00      	nop
 800388c:	200040a4 	.word	0x200040a4
 8003890:	200040a8 	.word	0x200040a8
 8003894:	200040ac 	.word	0x200040ac
 8003898:	0801ff10 	.word	0x0801ff10
 800389c:	08020020 	.word	0x08020020
 80038a0:	08020024 	.word	0x08020024
 80038a4:	48000400 	.word	0x48000400
 80038a8:	40000c00 	.word	0x40000c00
 80038ac:	08020028 	.word	0x08020028
 80038b0:	20003fbc 	.word	0x20003fbc
 80038b4:	200040c8 	.word	0x200040c8
 80038b8:	20003fac 	.word	0x20003fac
 80038bc:	08020038 	.word	0x08020038
 80038c0:	0802003c 	.word	0x0802003c
         {
            osDelay(100);
 80038c4:	2064      	movs	r0, #100	; 0x64
 80038c6:	f012 f82d 	bl	8015924 <osDelay>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 80038ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80038ce:	4889      	ldr	r0, [pc, #548]	; (8003af4 <MENU_RunningFunction+0x1a4c>)
 80038d0:	f00b fad6 	bl	800ee80 <HAL_GPIO_ReadPin>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d0f4      	beq.n	80038c4 <MENU_RunningFunction+0x181c>
         }
         if((TIM5->CNT / 4) % 2 == 1)
 80038da:	4b87      	ldr	r3, [pc, #540]	; (8003af8 <MENU_RunningFunction+0x1a50>)
 80038dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038de:	089b      	lsrs	r3, r3, #2
 80038e0:	f003 0301 	and.w	r3, r3, #1
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d106      	bne.n	80038f6 <MENU_RunningFunction+0x184e>
         {
            osEventFlagsSet(C3V1FlagsHandle, E_PAPIER_DARK_MODE);
 80038e8:	4b84      	ldr	r3, [pc, #528]	; (8003afc <MENU_RunningFunction+0x1a54>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2140      	movs	r1, #64	; 0x40
 80038ee:	4618      	mov	r0, r3
 80038f0:	f012 f904 	bl	8015afc <osEventFlagsSet>
         }
         else
         {
            osEventFlagsClear(C3V1FlagsHandle, E_PAPIER_DARK_MODE);
         }
         break;
 80038f4:	e0f7      	b.n	8003ae6 <MENU_RunningFunction+0x1a3e>
            osEventFlagsClear(C3V1FlagsHandle, E_PAPIER_DARK_MODE);
 80038f6:	4b81      	ldr	r3, [pc, #516]	; (8003afc <MENU_RunningFunction+0x1a54>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2140      	movs	r1, #64	; 0x40
 80038fc:	4618      	mov	r0, r3
 80038fe:	f012 f941 	bl	8015b84 <osEventFlagsClear>
         break;
 8003902:	e0f0      	b.n	8003ae6 <MENU_RunningFunction+0x1a3e>
      }
      case MENU_CHOISE_SEND_MESURMENT_COMMAND:
      {
         TIM5->CNT                     = 0;
 8003904:	4b7c      	ldr	r3, [pc, #496]	; (8003af8 <MENU_RunningFunction+0x1a50>)
 8003906:	2200      	movs	r2, #0
 8003908:	625a      	str	r2, [r3, #36]	; 0x24
         RfpMessage_TypeDef RfpMessage = { 0 };
 800390a:	2300      	movs	r3, #0
 800390c:	607b      	str	r3, [r7, #4]
         uint8_t Command               = RFP_START_MEASURMENT;
 800390e:	2302      	movs	r3, #2
 8003910:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 1)
 8003914:	e0b2      	b.n	8003a7c <MENU_RunningFunction+0x19d4>
         {
            if((TIM5->CNT / 4) % 2 == 0)
 8003916:	4b78      	ldr	r3, [pc, #480]	; (8003af8 <MENU_RunningFunction+0x1a50>)
 8003918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391a:	089b      	lsrs	r3, r3, #2
 800391c:	f003 0301 	and.w	r3, r3, #1
 8003920:	2b00      	cmp	r3, #0
 8003922:	d154      	bne.n	80039ce <MENU_RunningFunction+0x1926>
            {
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8003924:	4b76      	ldr	r3, [pc, #472]	; (8003b00 <MENU_RunningFunction+0x1a58>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f04f 31ff 	mov.w	r1, #4294967295
 800392c:	4618      	mov	r0, r3
 800392e:	f012 fa47 	bl	8015dc0 <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8003932:	4b74      	ldr	r3, [pc, #464]	; (8003b04 <MENU_RunningFunction+0x1a5c>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f04f 31ff 	mov.w	r1, #4294967295
 800393a:	4618      	mov	r0, r3
 800393c:	f012 fa40 	bl	8015dc0 <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8003940:	4b71      	ldr	r3, [pc, #452]	; (8003b08 <MENU_RunningFunction+0x1a60>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f04f 31ff 	mov.w	r1, #4294967295
 8003948:	4618      	mov	r0, r3
 800394a:	f012 fa39 	bl	8015dc0 <osMutexAcquire>
               ssd1306_clear();
 800394e:	f009 fe53 	bl	800d5f8 <ssd1306_clear>
               sprintf(Temp, "NIE");
 8003952:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003956:	496d      	ldr	r1, [pc, #436]	; (8003b0c <MENU_RunningFunction+0x1a64>)
 8003958:	4618      	mov	r0, r3
 800395a:	f009 f91d 	bl	800cb98 <sprintf_>
               GFX_DrawFillRectangle(5, 25, 25, 18, WHITE, OLED);
 800395e:	2300      	movs	r3, #0
 8003960:	9301      	str	r3, [sp, #4]
 8003962:	2301      	movs	r3, #1
 8003964:	9300      	str	r3, [sp, #0]
 8003966:	2312      	movs	r3, #18
 8003968:	2219      	movs	r2, #25
 800396a:	2119      	movs	r1, #25
 800396c:	2005      	movs	r0, #5
 800396e:	f7fd fe12 	bl	8001596 <GFX_DrawFillRectangle>
               GFX_DrawString(10, 30, Temp, BLACK, 1, OLED);
 8003972:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003976:	2300      	movs	r3, #0
 8003978:	9301      	str	r3, [sp, #4]
 800397a:	2301      	movs	r3, #1
 800397c:	9300      	str	r3, [sp, #0]
 800397e:	2300      	movs	r3, #0
 8003980:	211e      	movs	r1, #30
 8003982:	200a      	movs	r0, #10
 8003984:	f7fd fc96 	bl	80012b4 <GFX_DrawString>
               sprintf(Temp, "TAK");
 8003988:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800398c:	4960      	ldr	r1, [pc, #384]	; (8003b10 <MENU_RunningFunction+0x1a68>)
 800398e:	4618      	mov	r0, r3
 8003990:	f009 f902 	bl	800cb98 <sprintf_>
               GFX_DrawString(100, 30, Temp, WHITE, 0, OLED);
 8003994:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003998:	2300      	movs	r3, #0
 800399a:	9301      	str	r3, [sp, #4]
 800399c:	2300      	movs	r3, #0
 800399e:	9300      	str	r3, [sp, #0]
 80039a0:	2301      	movs	r3, #1
 80039a2:	211e      	movs	r1, #30
 80039a4:	2064      	movs	r0, #100	; 0x64
 80039a6:	f7fd fc85 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 80039aa:	f009 fdf9 	bl	800d5a0 <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 80039ae:	4b56      	ldr	r3, [pc, #344]	; (8003b08 <MENU_RunningFunction+0x1a60>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f012 fa4f 	bl	8015e56 <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 80039b8:	4b52      	ldr	r3, [pc, #328]	; (8003b04 <MENU_RunningFunction+0x1a5c>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4618      	mov	r0, r3
 80039be:	f012 fa4a 	bl	8015e56 <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 80039c2:	4b4f      	ldr	r3, [pc, #316]	; (8003b00 <MENU_RunningFunction+0x1a58>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f012 fa45 	bl	8015e56 <osMutexRelease>
 80039cc:	e053      	b.n	8003a76 <MENU_RunningFunction+0x19ce>
            }
            else
            {
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 80039ce:	4b4c      	ldr	r3, [pc, #304]	; (8003b00 <MENU_RunningFunction+0x1a58>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f04f 31ff 	mov.w	r1, #4294967295
 80039d6:	4618      	mov	r0, r3
 80039d8:	f012 f9f2 	bl	8015dc0 <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 80039dc:	4b49      	ldr	r3, [pc, #292]	; (8003b04 <MENU_RunningFunction+0x1a5c>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f04f 31ff 	mov.w	r1, #4294967295
 80039e4:	4618      	mov	r0, r3
 80039e6:	f012 f9eb 	bl	8015dc0 <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 80039ea:	4b47      	ldr	r3, [pc, #284]	; (8003b08 <MENU_RunningFunction+0x1a60>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f04f 31ff 	mov.w	r1, #4294967295
 80039f2:	4618      	mov	r0, r3
 80039f4:	f012 f9e4 	bl	8015dc0 <osMutexAcquire>
               ssd1306_clear();
 80039f8:	f009 fdfe 	bl	800d5f8 <ssd1306_clear>
               sprintf(Temp, "NIE");
 80039fc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003a00:	4942      	ldr	r1, [pc, #264]	; (8003b0c <MENU_RunningFunction+0x1a64>)
 8003a02:	4618      	mov	r0, r3
 8003a04:	f009 f8c8 	bl	800cb98 <sprintf_>
               GFX_DrawString(10, 30, Temp, WHITE, 0, OLED);
 8003a08:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	9301      	str	r3, [sp, #4]
 8003a10:	2300      	movs	r3, #0
 8003a12:	9300      	str	r3, [sp, #0]
 8003a14:	2301      	movs	r3, #1
 8003a16:	211e      	movs	r1, #30
 8003a18:	200a      	movs	r0, #10
 8003a1a:	f7fd fc4b 	bl	80012b4 <GFX_DrawString>
               sprintf(Temp, "TAK");
 8003a1e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003a22:	493b      	ldr	r1, [pc, #236]	; (8003b10 <MENU_RunningFunction+0x1a68>)
 8003a24:	4618      	mov	r0, r3
 8003a26:	f009 f8b7 	bl	800cb98 <sprintf_>
               GFX_DrawFillRectangle(95, 25, 25, 18, WHITE, OLED);
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	9301      	str	r3, [sp, #4]
 8003a2e:	2301      	movs	r3, #1
 8003a30:	9300      	str	r3, [sp, #0]
 8003a32:	2312      	movs	r3, #18
 8003a34:	2219      	movs	r2, #25
 8003a36:	2119      	movs	r1, #25
 8003a38:	205f      	movs	r0, #95	; 0x5f
 8003a3a:	f7fd fdac 	bl	8001596 <GFX_DrawFillRectangle>
               GFX_DrawString(100, 30, Temp, BLACK, 1, OLED);
 8003a3e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003a42:	2300      	movs	r3, #0
 8003a44:	9301      	str	r3, [sp, #4]
 8003a46:	2301      	movs	r3, #1
 8003a48:	9300      	str	r3, [sp, #0]
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	211e      	movs	r1, #30
 8003a4e:	2064      	movs	r0, #100	; 0x64
 8003a50:	f7fd fc30 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 8003a54:	f009 fda4 	bl	800d5a0 <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 8003a58:	4b2b      	ldr	r3, [pc, #172]	; (8003b08 <MENU_RunningFunction+0x1a60>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f012 f9fa 	bl	8015e56 <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 8003a62:	4b28      	ldr	r3, [pc, #160]	; (8003b04 <MENU_RunningFunction+0x1a5c>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f012 f9f5 	bl	8015e56 <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 8003a6c:	4b24      	ldr	r3, [pc, #144]	; (8003b00 <MENU_RunningFunction+0x1a58>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4618      	mov	r0, r3
 8003a72:	f012 f9f0 	bl	8015e56 <osMutexRelease>
            }
            osDelay(100);
 8003a76:	2064      	movs	r0, #100	; 0x64
 8003a78:	f011 ff54 	bl	8015924 <osDelay>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 1)
 8003a7c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003a80:	481c      	ldr	r0, [pc, #112]	; (8003af4 <MENU_RunningFunction+0x1a4c>)
 8003a82:	f00b f9fd 	bl	800ee80 <HAL_GPIO_ReadPin>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	f43f af44 	beq.w	8003916 <MENU_RunningFunction+0x186e>
         }

         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8003a8e:	e002      	b.n	8003a96 <MENU_RunningFunction+0x19ee>
         {
            osDelay(100);
 8003a90:	2064      	movs	r0, #100	; 0x64
 8003a92:	f011 ff47 	bl	8015924 <osDelay>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8003a96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003a9a:	4816      	ldr	r0, [pc, #88]	; (8003af4 <MENU_RunningFunction+0x1a4c>)
 8003a9c:	f00b f9f0 	bl	800ee80 <HAL_GPIO_ReadPin>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d0f4      	beq.n	8003a90 <MENU_RunningFunction+0x19e8>
         }
         if((TIM5->CNT / 4) % 2 == 1)
 8003aa6:	4b14      	ldr	r3, [pc, #80]	; (8003af8 <MENU_RunningFunction+0x1a50>)
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aaa:	089b      	lsrs	r3, r3, #2
 8003aac:	f003 0301 	and.w	r3, r3, #1
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d117      	bne.n	8003ae4 <MENU_RunningFunction+0x1a3c>
         {
            RfpMessage.AdditionalData = 0;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	80fb      	strh	r3, [r7, #6]
            RfpMessage.Data           = Command;
 8003ab8:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8003abc:	717b      	strb	r3, [r7, #5]
            RfpMessage.MessageType    = RFP_COMMAND;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	713b      	strb	r3, [r7, #4]
            PMS_ExitSleepMode();
 8003ac2:	f000 f86b 	bl	8003b9c <PMS_ExitSleepMode>
            osMessageQueuePut(RfpMessageQueueHandle, &RfpMessage, 0, osWaitForever);
 8003ac6:	4b13      	ldr	r3, [pc, #76]	; (8003b14 <MENU_RunningFunction+0x1a6c>)
 8003ac8:	6818      	ldr	r0, [r3, #0]
 8003aca:	1d39      	adds	r1, r7, #4
 8003acc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f012 fa71 	bl	8015fb8 <osMessageQueuePut>
         }
         break;
 8003ad6:	e005      	b.n	8003ae4 <MENU_RunningFunction+0x1a3c>
      }
      default:
      {
         break;
 8003ad8:	bf00      	nop
 8003ada:	e004      	b.n	8003ae6 <MENU_RunningFunction+0x1a3e>
         break;
 8003adc:	bf00      	nop
 8003ade:	e002      	b.n	8003ae6 <MENU_RunningFunction+0x1a3e>
         break;
 8003ae0:	bf00      	nop
 8003ae2:	e000      	b.n	8003ae6 <MENU_RunningFunction+0x1a3e>
         break;
 8003ae4:	bf00      	nop
      }
   }

   Menu.NewEvent = MENU_EVENT_END;
 8003ae6:	4b0c      	ldr	r3, [pc, #48]	; (8003b18 <MENU_RunningFunction+0x1a70>)
 8003ae8:	2203      	movs	r2, #3
 8003aea:	725a      	strb	r2, [r3, #9]
}
 8003aec:	bf00      	nop
 8003aee:	37c0      	adds	r7, #192	; 0xc0
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	48000400 	.word	0x48000400
 8003af8:	40000c00 	.word	0x40000c00
 8003afc:	200040c4 	.word	0x200040c4
 8003b00:	200040a4 	.word	0x200040a4
 8003b04:	200040a8 	.word	0x200040a8
 8003b08:	200040ac 	.word	0x200040ac
 8003b0c:	08020020 	.word	0x08020020
 8003b10:	08020024 	.word	0x08020024
 8003b14:	20004088 	.word	0x20004088
 8003b18:	200002a4 	.word	0x200002a4

08003b1c <MENU_EndFunction>:

static void MENU_EndFunction(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	af00      	add	r7, sp, #0
   Menu.ButtonCnt = 0;
 8003b20:	4b0a      	ldr	r3, [pc, #40]	; (8003b4c <MENU_EndFunction+0x30>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	605a      	str	r2, [r3, #4]
   Menu.ChoiseCnt = 0;
 8003b26:	4b09      	ldr	r3, [pc, #36]	; (8003b4c <MENU_EndFunction+0x30>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	601a      	str	r2, [r3, #0]
   Menu.NewEvent  = MENU_EVENT_NOTHING;
 8003b2c:	4b07      	ldr	r3, [pc, #28]	; (8003b4c <MENU_EndFunction+0x30>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	725a      	strb	r2, [r3, #9]
   Menu.f         = 0;
 8003b32:	4b06      	ldr	r3, [pc, #24]	; (8003b4c <MENU_EndFunction+0x30>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	729a      	strb	r2, [r3, #10]
   TIM5->CNT      = 0;
 8003b38:	4b05      	ldr	r3, [pc, #20]	; (8003b50 <MENU_EndFunction+0x34>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	625a      	str	r2, [r3, #36]	; 0x24
   osMutexRelease(MenuMutexHandle);
 8003b3e:	4b05      	ldr	r3, [pc, #20]	; (8003b54 <MENU_EndFunction+0x38>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4618      	mov	r0, r3
 8003b44:	f012 f987 	bl	8015e56 <osMutexRelease>
}
 8003b48:	bf00      	nop
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	200002a4 	.word	0x200002a4
 8003b50:	40000c00 	.word	0x40000c00
 8003b54:	200040b8 	.word	0x200040b8

08003b58 <PMS_Reset>:
#include "PMS.h"
#include "cmsis_os.h"
#include "main.h"
#include "usart.h"
void PMS_Reset(void)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(PMS3003_RST_GPIO_Port, PMS3003_RST_Pin, 0);
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b66:	f00b f9a3 	bl	800eeb0 <HAL_GPIO_WritePin>
   osDelay(1000);
 8003b6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b6e:	f011 fed9 	bl	8015924 <osDelay>
   HAL_GPIO_WritePin(PMS3003_RST_GPIO_Port, PMS3003_RST_Pin, 1);
 8003b72:	2201      	movs	r2, #1
 8003b74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b7c:	f00b f998 	bl	800eeb0 <HAL_GPIO_WritePin>
}
 8003b80:	bf00      	nop
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <PMS_EnterSleepMode>:
{
   HAL_UARTEx_ReceiveToIdle_DMA(&huart2, Data, Length);
}
#endif
void PMS_EnterSleepMode(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(PMS3003_SET_GPIO_Port, PMS3003_SET_Pin, 0);
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b8e:	4802      	ldr	r0, [pc, #8]	; (8003b98 <PMS_EnterSleepMode+0x14>)
 8003b90:	f00b f98e 	bl	800eeb0 <HAL_GPIO_WritePin>
}
 8003b94:	bf00      	nop
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	48000400 	.word	0x48000400

08003b9c <PMS_ExitSleepMode>:
void PMS_ExitSleepMode(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(PMS3003_SET_GPIO_Port, PMS3003_SET_Pin, 1);
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ba6:	4802      	ldr	r0, [pc, #8]	; (8003bb0 <PMS_ExitSleepMode+0x14>)
 8003ba8:	f00b f982 	bl	800eeb0 <HAL_GPIO_WritePin>
}
 8003bac:	bf00      	nop
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	48000400 	.word	0x48000400

08003bb4 <WS2812_SetPixel>:

#include "WS2812b.h"
#include "tim.h"
uint16_t WsBuffer[11 * 24] = { 0 };
void WS2812_SetPixel(uint8_t r, uint8_t g, uint8_t b)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b086      	sub	sp, #24
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	4603      	mov	r3, r0
 8003bbc:	71fb      	strb	r3, [r7, #7]
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	71bb      	strb	r3, [r7, #6]
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	717b      	strb	r3, [r7, #5]

   for(int8_t k = 7, i = 0; k >= 0; k--, i++)
 8003bc6:	2307      	movs	r3, #7
 8003bc8:	75fb      	strb	r3, [r7, #23]
 8003bca:	2300      	movs	r3, #0
 8003bcc:	75bb      	strb	r3, [r7, #22]
 8003bce:	e023      	b.n	8003c18 <WS2812_SetPixel+0x64>
   {

      if((r & (1 << k)) == 0)
 8003bd0:	79fa      	ldrb	r2, [r7, #7]
 8003bd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003bd6:	fa42 f303 	asr.w	r3, r2, r3
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d107      	bne.n	8003bf2 <WS2812_SetPixel+0x3e>
         WsBuffer[10 * 24 + i] = zero;
 8003be2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003be6:	33f0      	adds	r3, #240	; 0xf0
 8003be8:	4a4e      	ldr	r2, [pc, #312]	; (8003d24 <WS2812_SetPixel+0x170>)
 8003bea:	2135      	movs	r1, #53	; 0x35
 8003bec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8003bf0:	e006      	b.n	8003c00 <WS2812_SetPixel+0x4c>
      else
         WsBuffer[10 * 24 + i] = one;
 8003bf2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003bf6:	33f0      	adds	r3, #240	; 0xf0
 8003bf8:	4a4a      	ldr	r2, [pc, #296]	; (8003d24 <WS2812_SetPixel+0x170>)
 8003bfa:	2160      	movs	r1, #96	; 0x60
 8003bfc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for(int8_t k = 7, i = 0; k >= 0; k--, i++)
 8003c00:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	3b01      	subs	r3, #1
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	75fb      	strb	r3, [r7, #23]
 8003c0c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	3301      	adds	r3, #1
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	75bb      	strb	r3, [r7, #22]
 8003c18:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	dad7      	bge.n	8003bd0 <WS2812_SetPixel+0x1c>
   }
   for(int8_t k = 7, i = 0; k >= 0; k--, i++)
 8003c20:	2307      	movs	r3, #7
 8003c22:	757b      	strb	r3, [r7, #21]
 8003c24:	2300      	movs	r3, #0
 8003c26:	753b      	strb	r3, [r7, #20]
 8003c28:	e023      	b.n	8003c72 <WS2812_SetPixel+0xbe>
   {

      if((g & (1 << k)) == 0)
 8003c2a:	79ba      	ldrb	r2, [r7, #6]
 8003c2c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8003c30:	fa42 f303 	asr.w	r3, r2, r3
 8003c34:	f003 0301 	and.w	r3, r3, #1
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d107      	bne.n	8003c4c <WS2812_SetPixel+0x98>
         WsBuffer[10 * 24 + i + 8] = zero;
 8003c3c:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003c40:	33f8      	adds	r3, #248	; 0xf8
 8003c42:	4a38      	ldr	r2, [pc, #224]	; (8003d24 <WS2812_SetPixel+0x170>)
 8003c44:	2135      	movs	r1, #53	; 0x35
 8003c46:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8003c4a:	e006      	b.n	8003c5a <WS2812_SetPixel+0xa6>
      else
         WsBuffer[10 * 24 + i + 8] = one;
 8003c4c:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003c50:	33f8      	adds	r3, #248	; 0xf8
 8003c52:	4a34      	ldr	r2, [pc, #208]	; (8003d24 <WS2812_SetPixel+0x170>)
 8003c54:	2160      	movs	r1, #96	; 0x60
 8003c56:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for(int8_t k = 7, i = 0; k >= 0; k--, i++)
 8003c5a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	3b01      	subs	r3, #1
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	757b      	strb	r3, [r7, #21]
 8003c66:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	753b      	strb	r3, [r7, #20]
 8003c72:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	dad7      	bge.n	8003c2a <WS2812_SetPixel+0x76>
   }
   for(int8_t k = 7, i = 0; k >= 0; k--, i++)
 8003c7a:	2307      	movs	r3, #7
 8003c7c:	74fb      	strb	r3, [r7, #19]
 8003c7e:	2300      	movs	r3, #0
 8003c80:	74bb      	strb	r3, [r7, #18]
 8003c82:	e025      	b.n	8003cd0 <WS2812_SetPixel+0x11c>
   {

      if((b & (1 << k)) == 0)
 8003c84:	797a      	ldrb	r2, [r7, #5]
 8003c86:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003c8a:	fa42 f303 	asr.w	r3, r2, r3
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d108      	bne.n	8003ca8 <WS2812_SetPixel+0xf4>
         WsBuffer[10 * 24 + i + 16] = zero;
 8003c96:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8003c9a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003c9e:	4a21      	ldr	r2, [pc, #132]	; (8003d24 <WS2812_SetPixel+0x170>)
 8003ca0:	2135      	movs	r1, #53	; 0x35
 8003ca2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8003ca6:	e007      	b.n	8003cb8 <WS2812_SetPixel+0x104>
      else
         WsBuffer[10 * 24 + i + 16] = one;
 8003ca8:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8003cac:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003cb0:	4a1c      	ldr	r2, [pc, #112]	; (8003d24 <WS2812_SetPixel+0x170>)
 8003cb2:	2160      	movs	r1, #96	; 0x60
 8003cb4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for(int8_t k = 7, i = 0; k >= 0; k--, i++)
 8003cb8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	74fb      	strb	r3, [r7, #19]
 8003cc4:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	3301      	adds	r3, #1
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	74bb      	strb	r3, [r7, #18]
 8003cd0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	dad5      	bge.n	8003c84 <WS2812_SetPixel+0xd0>
   }
   for(int i = 0; i < 240; i++)
 8003cd8:	2300      	movs	r3, #0
 8003cda:	60fb      	str	r3, [r7, #12]
 8003cdc:	e007      	b.n	8003cee <WS2812_SetPixel+0x13a>
   {
      WsBuffer[i] = 0;
 8003cde:	4a11      	ldr	r2, [pc, #68]	; (8003d24 <WS2812_SetPixel+0x170>)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2100      	movs	r1, #0
 8003ce4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for(int i = 0; i < 240; i++)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	3301      	adds	r3, #1
 8003cec:	60fb      	str	r3, [r7, #12]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2bef      	cmp	r3, #239	; 0xef
 8003cf2:	ddf4      	ble.n	8003cde <WS2812_SetPixel+0x12a>
   }
   HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, WsBuffer, 11 * 24);
 8003cf4:	f44f 7384 	mov.w	r3, #264	; 0x108
 8003cf8:	4a0a      	ldr	r2, [pc, #40]	; (8003d24 <WS2812_SetPixel+0x170>)
 8003cfa:	2100      	movs	r1, #0
 8003cfc:	480a      	ldr	r0, [pc, #40]	; (8003d28 <WS2812_SetPixel+0x174>)
 8003cfe:	f00e fa73 	bl	80121e8 <HAL_TIM_PWM_Start_DMA>
   while(HAL_DMA_STATE_READY != HAL_DMA_GetState(htim1.hdma[1]))
 8003d02:	bf00      	nop
 8003d04:	4b08      	ldr	r3, [pc, #32]	; (8003d28 <WS2812_SetPixel+0x174>)
 8003d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f00a fe78 	bl	800e9fe <HAL_DMA_GetState>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d1f7      	bne.n	8003d04 <WS2812_SetPixel+0x150>
   {
   }
   HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8003d14:	2100      	movs	r1, #0
 8003d16:	4804      	ldr	r0, [pc, #16]	; (8003d28 <WS2812_SetPixel+0x174>)
 8003d18:	f00e fc86 	bl	8012628 <HAL_TIM_PWM_Stop_DMA>
}
 8003d1c:	bf00      	nop
 8003d1e:	3718      	adds	r7, #24
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	200002b0 	.word	0x200002b0
 8003d28:	200046c0 	.word	0x200046c0

08003d2c <BME280_CsLow>:
#include "main.h"

#include "bme280_spi.h"

void BME280_CsLow(BME280_t *bme)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
   HAL_GPIO_WritePin(bme->bme280_CsPort, bme->bme280_CsPin, 0);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6858      	ldr	r0, [r3, #4]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	4619      	mov	r1, r3
 8003d40:	f00b f8b6 	bl	800eeb0 <HAL_GPIO_WritePin>
}
 8003d44:	bf00      	nop
 8003d46:	3708      	adds	r7, #8
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <BME280_CsHigh>:
void BME280_CsHigh(BME280_t *bme)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
   HAL_GPIO_WritePin(bme->bme280_CsPort, bme->bme280_CsPin, 1);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6858      	ldr	r0, [r3, #4]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	4619      	mov	r1, r3
 8003d60:	f00b f8a6 	bl	800eeb0 <HAL_GPIO_WritePin>
}
 8003d64:	bf00      	nop
 8003d66:	3708      	adds	r7, #8
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <BME280_Read8>:
uint8_t BME280_Read8(BME280_t *bme, uint8_t addr)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	460b      	mov	r3, r1
 8003d76:	70fb      	strb	r3, [r7, #3]
   addr |= 128;
 8003d78:	78fb      	ldrb	r3, [r7, #3]
 8003d7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	70fb      	strb	r3, [r7, #3]
   uint8_t data;
   BME280_CsLow(bme);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f7ff ffd2 	bl	8003d2c <BME280_CsLow>
   HAL_SPI_Transmit(bme->bme_spi, &addr, 1, BME_MAX_TIMEOUT);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6818      	ldr	r0, [r3, #0]
 8003d8c:	1cf9      	adds	r1, r7, #3
 8003d8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d92:	2201      	movs	r2, #1
 8003d94:	f00d fa91 	bl	80112ba <HAL_SPI_Transmit>
   HAL_SPI_Receive(bme->bme_spi, &data, 1, BME_MAX_TIMEOUT);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6818      	ldr	r0, [r3, #0]
 8003d9c:	f107 010f 	add.w	r1, r7, #15
 8003da0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003da4:	2201      	movs	r2, #1
 8003da6:	f00d fbf6 	bl	8011596 <HAL_SPI_Receive>
   BME280_CsHigh(bme);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7ff ffce 	bl	8003d4c <BME280_CsHigh>
   return data;
 8003db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <BME280_Write8>:
void BME280_Write8(BME280_t *bme, uint8_t addr, uint8_t data)
{
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b084      	sub	sp, #16
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
 8003dc2:	460b      	mov	r3, r1
 8003dc4:	70fb      	strb	r3, [r7, #3]
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	70bb      	strb	r3, [r7, #2]
   BME280_CsLow(bme);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7ff ffae 	bl	8003d2c <BME280_CsLow>
   addr &= 127;
 8003dd0:	78fb      	ldrb	r3, [r7, #3]
 8003dd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dd6:	70fb      	strb	r3, [r7, #3]
   uint8_t Data_ToSend[2];
   Data_ToSend[0] = addr;
 8003dd8:	78fb      	ldrb	r3, [r7, #3]
 8003dda:	733b      	strb	r3, [r7, #12]
   Data_ToSend[1] = data;
 8003ddc:	78bb      	ldrb	r3, [r7, #2]
 8003dde:	737b      	strb	r3, [r7, #13]
   HAL_SPI_Transmit(bme->bme_spi, Data_ToSend, 2, BME_MAX_TIMEOUT);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6818      	ldr	r0, [r3, #0]
 8003de4:	f107 010c 	add.w	r1, r7, #12
 8003de8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003dec:	2202      	movs	r2, #2
 8003dee:	f00d fa64 	bl	80112ba <HAL_SPI_Transmit>
   BME280_CsHigh(bme);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f7ff ffaa 	bl	8003d4c <BME280_CsHigh>
}
 8003df8:	bf00      	nop
 8003dfa:	3710      	adds	r7, #16
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <BME280_Read16LE>:
static uint16_t BME280_Read16LE(BME280_t *bme, uint8_t address)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	460b      	mov	r3, r1
 8003e0a:	70fb      	strb	r3, [r7, #3]
   uint8_t data[2];
   data[0] = BME280_Read8(bme, address);
 8003e0c:	78fb      	ldrb	r3, [r7, #3]
 8003e0e:	4619      	mov	r1, r3
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f7ff ffab 	bl	8003d6c <BME280_Read8>
 8003e16:	4603      	mov	r3, r0
 8003e18:	733b      	strb	r3, [r7, #12]
   data[1] = BME280_Read8(bme, address + 1);
 8003e1a:	78fb      	ldrb	r3, [r7, #3]
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	4619      	mov	r1, r3
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f7ff ffa2 	bl	8003d6c <BME280_Read8>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	737b      	strb	r3, [r7, #13]
   return ((data[1] << 8) | data[0]);
 8003e2c:	7b7b      	ldrb	r3, [r7, #13]
 8003e2e:	021b      	lsls	r3, r3, #8
 8003e30:	b21a      	sxth	r2, r3
 8003e32:	7b3b      	ldrb	r3, [r7, #12]
 8003e34:	b21b      	sxth	r3, r3
 8003e36:	4313      	orrs	r3, r2
 8003e38:	b21b      	sxth	r3, r3
 8003e3a:	b29b      	uxth	r3, r3
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3710      	adds	r7, #16
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <BME280_Read16>:
static uint16_t BME280_Read16(BME280_t *bme, uint8_t address)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	70fb      	strb	r3, [r7, #3]
   uint8_t data[2];
   data[0] = BME280_Read8(bme, address);
 8003e50:	78fb      	ldrb	r3, [r7, #3]
 8003e52:	4619      	mov	r1, r3
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f7ff ff89 	bl	8003d6c <BME280_Read8>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	733b      	strb	r3, [r7, #12]
   data[1] = BME280_Read8(bme, address + 1);
 8003e5e:	78fb      	ldrb	r3, [r7, #3]
 8003e60:	3301      	adds	r3, #1
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	4619      	mov	r1, r3
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f7ff ff80 	bl	8003d6c <BME280_Read8>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	737b      	strb	r3, [r7, #13]
   return ((data[0] << 8) | data[1]);
 8003e70:	7b3b      	ldrb	r3, [r7, #12]
 8003e72:	021b      	lsls	r3, r3, #8
 8003e74:	b21a      	sxth	r2, r3
 8003e76:	7b7b      	ldrb	r3, [r7, #13]
 8003e78:	b21b      	sxth	r3, r3
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	b21b      	sxth	r3, r3
 8003e7e:	b29b      	uxth	r3, r3
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3710      	adds	r7, #16
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <BME280_Read24>:
uint32_t BME280_Read24(BME280_t *bme, uint8_t addr)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	460b      	mov	r3, r1
 8003e92:	70fb      	strb	r3, [r7, #3]
   addr |= 128;
 8003e94:	78fb      	ldrb	r3, [r7, #3]
 8003e96:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	70fb      	strb	r3, [r7, #3]
   uint8_t data[3];
   BME280_CsLow(bme);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f7ff ff44 	bl	8003d2c <BME280_CsLow>
   HAL_SPI_Transmit(bme->bme_spi, &addr, 1, BME_MAX_TIMEOUT);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6818      	ldr	r0, [r3, #0]
 8003ea8:	1cf9      	adds	r1, r7, #3
 8003eaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f00d fa03 	bl	80112ba <HAL_SPI_Transmit>
   HAL_SPI_Receive(bme->bme_spi, data, 3, BME_MAX_TIMEOUT);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6818      	ldr	r0, [r3, #0]
 8003eb8:	f107 010c 	add.w	r1, r7, #12
 8003ebc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ec0:	2203      	movs	r2, #3
 8003ec2:	f00d fb68 	bl	8011596 <HAL_SPI_Receive>
   BME280_CsHigh(bme);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f7ff ff40 	bl	8003d4c <BME280_CsHigh>
   return ((data[0] << 16) | (data[1] << 8) | data[2]);
 8003ecc:	7b3b      	ldrb	r3, [r7, #12]
 8003ece:	041a      	lsls	r2, r3, #16
 8003ed0:	7b7b      	ldrb	r3, [r7, #13]
 8003ed2:	021b      	lsls	r3, r3, #8
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	7bba      	ldrb	r2, [r7, #14]
 8003ed8:	4313      	orrs	r3, r2
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3710      	adds	r7, #16
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
	...

08003ee4 <BME280_Read_temp>:
static float BME280_Read_temp(BME280_t *bme)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b086      	sub	sp, #24
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
   int32_t var1, var2;
   int32_t adc_T = BME280_Read24(bme, BME280_TEMPDATA);
 8003eec:	21fa      	movs	r1, #250	; 0xfa
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f7ff ffca 	bl	8003e88 <BME280_Read24>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	617b      	str	r3, [r7, #20]
   if(adc_T == 0x800000)
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003efe:	d102      	bne.n	8003f06 <BME280_Read_temp+0x22>
      return -99;
 8003f00:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8003f8c <BME280_Read_temp+0xa8>
 8003f04:	e03b      	b.n	8003f7e <BME280_Read_temp+0x9a>

   adc_T >>= 4;
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	111b      	asrs	r3, r3, #4
 8003f0a:	617b      	str	r3, [r7, #20]

   var1 = ((((adc_T >> 3) - ((int32_t)bme->t1 << 1))) * ((int32_t)bme->t2)) >> 11;
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	10da      	asrs	r2, r3, #3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8003f1e:	fb02 f303 	mul.w	r3, r2, r3
 8003f22:	12db      	asrs	r3, r3, #11
 8003f24:	613b      	str	r3, [r7, #16]

   var2 = (((((adc_T >> 4) - ((int32_t)bme->t1)) * ((adc_T >> 4) - ((int32_t)bme->t1))) >> 12) * ((int32_t)bme->t3)) >> 14;
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	111b      	asrs	r3, r3, #4
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8003f2e:	1a9b      	subs	r3, r3, r2
 8003f30:	697a      	ldr	r2, [r7, #20]
 8003f32:	1112      	asrs	r2, r2, #4
 8003f34:	6879      	ldr	r1, [r7, #4]
 8003f36:	8cc9      	ldrh	r1, [r1, #38]	; 0x26
 8003f38:	1a52      	subs	r2, r2, r1
 8003f3a:	fb02 f303 	mul.w	r3, r2, r3
 8003f3e:	131b      	asrs	r3, r3, #12
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8003f46:	fb02 f303 	mul.w	r3, r2, r3
 8003f4a:	139b      	asrs	r3, r3, #14
 8003f4c:	60fb      	str	r3, [r7, #12]

   bme->t_fine = var1 + var2;
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	441a      	add	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	62da      	str	r2, [r3, #44]	; 0x2c

   float T = (bme->t_fine * 5 + 128) >> 8;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	4413      	add	r3, r2
 8003f62:	3380      	adds	r3, #128	; 0x80
 8003f64:	121b      	asrs	r3, r3, #8
 8003f66:	ee07 3a90 	vmov	s15, r3
 8003f6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f6e:	edc7 7a02 	vstr	s15, [r7, #8]
   return T / 100;
 8003f72:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f76:	eddf 6a06 	vldr	s13, [pc, #24]	; 8003f90 <BME280_Read_temp+0xac>
 8003f7a:	ee87 7aa6 	vdiv.f32	s14, s15, s13

   return -99;
}
 8003f7e:	eef0 7a47 	vmov.f32	s15, s14
 8003f82:	eeb0 0a67 	vmov.f32	s0, s15
 8003f86:	3718      	adds	r7, #24
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	c2c60000 	.word	0xc2c60000
 8003f90:	42c80000 	.word	0x42c80000

08003f94 <BME280_Read_hum>:
static float BME280_Read_hum(BME280_t *bme)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b086      	sub	sp, #24
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]

   int32_t adc_H = BME280_Read16(bme, BME280_HUMIDDATA);
 8003f9c:	21fd      	movs	r1, #253	; 0xfd
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f7ff ff50 	bl	8003e44 <BME280_Read16>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	617b      	str	r3, [r7, #20]
   if(adc_H == 0x8000) // value in case humidity measurement was disabled
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fae:	d102      	bne.n	8003fb6 <BME280_Read_hum+0x22>
      return -99;      // error
 8003fb0:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8004084 <BME280_Read_hum+0xf0>
 8003fb4:	e05f      	b.n	8004076 <BME280_Read_hum+0xe2>
   int32_t v_x1_u32r;

   v_x1_u32r = (bme->t_fine - ((int32_t)76800));
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fba:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8003fbe:	613b      	str	r3, [r7, #16]

   v_x1_u32r = (((((adc_H << 14) - (((int32_t)bme->h4) << 20) - (((int32_t)bme->h5) * v_x1_u32r)) + ((int32_t)16384)) >> 15)
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	039a      	lsls	r2, r3, #14
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8003fca:	051b      	lsls	r3, r3, #20
 8003fcc:	1ad2      	subs	r2, r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	fb01 f303 	mul.w	r3, r1, r3
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8003fe2:	13db      	asrs	r3, r3, #15
                * (((((((v_x1_u32r * ((int32_t)bme->h6)) >> 10) * (((v_x1_u32r * ((int32_t)bme->h3)) >> 11) + ((int32_t)32768))) >> 10)
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	f992 200a 	ldrsb.w	r2, [r2, #10]
 8003fea:	4611      	mov	r1, r2
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	fb01 f202 	mul.w	r2, r1, r2
 8003ff2:	1292      	asrs	r2, r2, #10
 8003ff4:	6879      	ldr	r1, [r7, #4]
 8003ff6:	7a49      	ldrb	r1, [r1, #9]
 8003ff8:	4608      	mov	r0, r1
 8003ffa:	6939      	ldr	r1, [r7, #16]
 8003ffc:	fb00 f101 	mul.w	r1, r0, r1
 8004000:	12c9      	asrs	r1, r1, #11
 8004002:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8004006:	fb01 f202 	mul.w	r2, r1, r2
 800400a:	1292      	asrs	r2, r2, #10
                     + ((int32_t)2097152))
 800400c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
                        * ((int32_t)bme->h2)
 8004010:	6879      	ldr	r1, [r7, #4]
 8004012:	f9b1 1020 	ldrsh.w	r1, [r1, #32]
 8004016:	fb01 f202 	mul.w	r2, r1, r2
                    + 8192)
 800401a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
                   >> 14));
 800401e:	1392      	asrs	r2, r2, #14
   v_x1_u32r = (((((adc_H << 14) - (((int32_t)bme->h4) << 20) - (((int32_t)bme->h5) * v_x1_u32r)) + ((int32_t)16384)) >> 15)
 8004020:	fb02 f303 	mul.w	r3, r2, r3
 8004024:	613b      	str	r3, [r7, #16]

   v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) * ((int32_t)bme->h1)) >> 4));
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	13db      	asrs	r3, r3, #15
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	13d2      	asrs	r2, r2, #15
 800402e:	fb02 f303 	mul.w	r3, r2, r3
 8004032:	11db      	asrs	r3, r3, #7
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	7a12      	ldrb	r2, [r2, #8]
 8004038:	fb02 f303 	mul.w	r3, r2, r3
 800403c:	111b      	asrs	r3, r3, #4
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	613b      	str	r3, [r7, #16]

   v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800404a:	613b      	str	r3, [r7, #16]
   v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8004052:	bfa8      	it	ge
 8004054:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8004058:	613b      	str	r3, [r7, #16]
   float h   = (v_x1_u32r >> 12);
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	131b      	asrs	r3, r3, #12
 800405e:	ee07 3a90 	vmov	s15, r3
 8004062:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004066:	edc7 7a03 	vstr	s15, [r7, #12]
   return h / 1024.0;
 800406a:	edd7 7a03 	vldr	s15, [r7, #12]
 800406e:	eddf 6a06 	vldr	s13, [pc, #24]	; 8004088 <BME280_Read_hum+0xf4>
 8004072:	ee87 7aa6 	vdiv.f32	s14, s15, s13
}
 8004076:	eef0 7a47 	vmov.f32	s15, s14
 800407a:	eeb0 0a67 	vmov.f32	s0, s15
 800407e:	3718      	adds	r7, #24
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	c2c60000 	.word	0xc2c60000
 8004088:	44800000 	.word	0x44800000

0800408c <BME280_Read_press>:
static float BME280_Read_press(BME280_t *bme)
{
 800408c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004090:	b0cc      	sub	sp, #304	; 0x130
 8004092:	af00      	add	r7, sp, #0
 8004094:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
   int64_t var1, var2, p;

   // Must be done first to get the t_fine variable set up

   int32_t adc_P = BME280_Read24(bme, BME280_PRESSUREDATA);
 8004098:	21f7      	movs	r1, #247	; 0xf7
 800409a:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800409e:	f7ff fef3 	bl	8003e88 <BME280_Read24>
 80040a2:	4603      	mov	r3, r0
 80040a4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   adc_P >>= 4;
 80040a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040ac:	111b      	asrs	r3, r3, #4
 80040ae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

   var1 = ((int64_t)bme->t_fine) - 128000;
 80040b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b8:	17da      	asrs	r2, r3, #31
 80040ba:	4698      	mov	r8, r3
 80040bc:	4691      	mov	r9, r2
 80040be:	f5b8 33fa 	subs.w	r3, r8, #128000	; 0x1f400
 80040c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80040c4:	f149 33ff 	adc.w	r3, r9, #4294967295
 80040c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040ca:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80040ce:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
   var2 = var1 * var1 * (int64_t)bme->p6;
 80040d2:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80040d6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80040da:	fb03 f102 	mul.w	r1, r3, r2
 80040de:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80040e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80040e6:	fb02 f303 	mul.w	r3, r2, r3
 80040ea:	18ca      	adds	r2, r1, r3
 80040ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80040f0:	fba3 4503 	umull	r4, r5, r3, r3
 80040f4:	1953      	adds	r3, r2, r5
 80040f6:	461d      	mov	r5, r3
 80040f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040fc:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8004100:	b21b      	sxth	r3, r3
 8004102:	17da      	asrs	r2, r3, #31
 8004104:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004108:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800410c:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8004110:	4603      	mov	r3, r0
 8004112:	fb03 f205 	mul.w	r2, r3, r5
 8004116:	460b      	mov	r3, r1
 8004118:	fb04 f303 	mul.w	r3, r4, r3
 800411c:	4413      	add	r3, r2
 800411e:	4602      	mov	r2, r0
 8004120:	fba4 ab02 	umull	sl, fp, r4, r2
 8004124:	445b      	add	r3, fp
 8004126:	469b      	mov	fp, r3
 8004128:	e9c7 ab46 	strd	sl, fp, [r7, #280]	; 0x118
 800412c:	e9c7 ab46 	strd	sl, fp, [r7, #280]	; 0x118
   var2 = var2 + ((var1 * (int64_t)bme->p5) << 17);
 8004130:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004134:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8004138:	b21b      	sxth	r3, r3
 800413a:	17da      	asrs	r2, r3, #31
 800413c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004140:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004144:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004148:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 800414c:	462a      	mov	r2, r5
 800414e:	fb02 f203 	mul.w	r2, r2, r3
 8004152:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004156:	4621      	mov	r1, r4
 8004158:	fb01 f303 	mul.w	r3, r1, r3
 800415c:	441a      	add	r2, r3
 800415e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004162:	4621      	mov	r1, r4
 8004164:	fba3 1301 	umull	r1, r3, r3, r1
 8004168:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800416c:	460b      	mov	r3, r1
 800416e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004172:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004176:	18d3      	adds	r3, r2, r3
 8004178:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800417c:	f04f 0000 	mov.w	r0, #0
 8004180:	f04f 0100 	mov.w	r1, #0
 8004184:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8004188:	462b      	mov	r3, r5
 800418a:	0459      	lsls	r1, r3, #17
 800418c:	4623      	mov	r3, r4
 800418e:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8004192:	4623      	mov	r3, r4
 8004194:	0458      	lsls	r0, r3, #17
 8004196:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800419a:	1814      	adds	r4, r2, r0
 800419c:	643c      	str	r4, [r7, #64]	; 0x40
 800419e:	414b      	adcs	r3, r1
 80041a0:	647b      	str	r3, [r7, #68]	; 0x44
 80041a2:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80041a6:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
   var2 = var2 + (((int64_t)bme->p4) << 35);
 80041aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041ae:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80041b2:	b21b      	sxth	r3, r3
 80041b4:	17da      	asrs	r2, r3, #31
 80041b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80041ba:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80041be:	f04f 0000 	mov.w	r0, #0
 80041c2:	f04f 0100 	mov.w	r1, #0
 80041c6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80041ca:	00d9      	lsls	r1, r3, #3
 80041cc:	2000      	movs	r0, #0
 80041ce:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80041d2:	1814      	adds	r4, r2, r0
 80041d4:	63bc      	str	r4, [r7, #56]	; 0x38
 80041d6:	414b      	adcs	r3, r1
 80041d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041da:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80041de:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
   var1 = ((var1 * var1 * (int64_t)bme->p3) >> 8) + ((var1 * (int64_t)bme->p2) << 12);
 80041e2:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80041e6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80041ea:	fb03 f102 	mul.w	r1, r3, r2
 80041ee:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80041f2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80041f6:	fb02 f303 	mul.w	r3, r2, r3
 80041fa:	18ca      	adds	r2, r1, r3
 80041fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004200:	fba3 1303 	umull	r1, r3, r3, r3
 8004204:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004208:	460b      	mov	r3, r1
 800420a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800420e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004212:	18d3      	adds	r3, r2, r3
 8004214:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004218:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800421c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8004220:	b21b      	sxth	r3, r3
 8004222:	17da      	asrs	r2, r3, #31
 8004224:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004228:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800422c:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8004230:	462b      	mov	r3, r5
 8004232:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8004236:	4642      	mov	r2, r8
 8004238:	fb02 f203 	mul.w	r2, r2, r3
 800423c:	464b      	mov	r3, r9
 800423e:	4621      	mov	r1, r4
 8004240:	fb01 f303 	mul.w	r3, r1, r3
 8004244:	4413      	add	r3, r2
 8004246:	4622      	mov	r2, r4
 8004248:	4641      	mov	r1, r8
 800424a:	fba2 1201 	umull	r1, r2, r2, r1
 800424e:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004252:	460a      	mov	r2, r1
 8004254:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8004258:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800425c:	4413      	add	r3, r2
 800425e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004262:	f04f 0000 	mov.w	r0, #0
 8004266:	f04f 0100 	mov.w	r1, #0
 800426a:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 800426e:	4623      	mov	r3, r4
 8004270:	0a18      	lsrs	r0, r3, #8
 8004272:	462b      	mov	r3, r5
 8004274:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8004278:	462b      	mov	r3, r5
 800427a:	1219      	asrs	r1, r3, #8
 800427c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004280:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8004284:	b21b      	sxth	r3, r3
 8004286:	17da      	asrs	r2, r3, #31
 8004288:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800428c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004290:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004294:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004298:	464a      	mov	r2, r9
 800429a:	fb02 f203 	mul.w	r2, r2, r3
 800429e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80042a2:	4644      	mov	r4, r8
 80042a4:	fb04 f303 	mul.w	r3, r4, r3
 80042a8:	441a      	add	r2, r3
 80042aa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80042ae:	4644      	mov	r4, r8
 80042b0:	fba3 4304 	umull	r4, r3, r3, r4
 80042b4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80042b8:	4623      	mov	r3, r4
 80042ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80042be:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80042c2:	18d3      	adds	r3, r2, r3
 80042c4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80042c8:	f04f 0200 	mov.w	r2, #0
 80042cc:	f04f 0300 	mov.w	r3, #0
 80042d0:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80042d4:	464c      	mov	r4, r9
 80042d6:	0323      	lsls	r3, r4, #12
 80042d8:	4644      	mov	r4, r8
 80042da:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80042de:	4644      	mov	r4, r8
 80042e0:	0322      	lsls	r2, r4, #12
 80042e2:	1884      	adds	r4, r0, r2
 80042e4:	633c      	str	r4, [r7, #48]	; 0x30
 80042e6:	eb41 0303 	adc.w	r3, r1, r3
 80042ea:	637b      	str	r3, [r7, #52]	; 0x34
 80042ec:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80042f0:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
   var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)bme->p1) >> 33;
 80042f4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80042f8:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 80042fc:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 8004300:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8004304:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800430a:	b29b      	uxth	r3, r3
 800430c:	2200      	movs	r2, #0
 800430e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004312:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004316:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 800431a:	462b      	mov	r3, r5
 800431c:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8004320:	4642      	mov	r2, r8
 8004322:	fb02 f203 	mul.w	r2, r2, r3
 8004326:	464b      	mov	r3, r9
 8004328:	4621      	mov	r1, r4
 800432a:	fb01 f303 	mul.w	r3, r1, r3
 800432e:	4413      	add	r3, r2
 8004330:	4622      	mov	r2, r4
 8004332:	4641      	mov	r1, r8
 8004334:	fba2 1201 	umull	r1, r2, r2, r1
 8004338:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800433c:	460a      	mov	r2, r1
 800433e:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8004342:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004346:	4413      	add	r3, r2
 8004348:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800434c:	f04f 0200 	mov.w	r2, #0
 8004350:	f04f 0300 	mov.w	r3, #0
 8004354:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8004358:	4629      	mov	r1, r5
 800435a:	104a      	asrs	r2, r1, #1
 800435c:	4629      	mov	r1, r5
 800435e:	17cb      	asrs	r3, r1, #31
 8004360:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

   if(var1 == 0)
 8004364:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8004368:	4313      	orrs	r3, r2
 800436a:	d102      	bne.n	8004372 <BME280_Read_press+0x2e6>
   {
      return 0; // avoid exception caused by division by zero
 800436c:	eddf 7aae 	vldr	s15, [pc, #696]	; 8004628 <BME280_Read_press+0x59c>
 8004370:	e152      	b.n	8004618 <BME280_Read_press+0x58c>
   }
   p    = 1048576 - adc_P;
 8004372:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004376:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800437a:	17da      	asrs	r2, r3, #31
 800437c:	62bb      	str	r3, [r7, #40]	; 0x28
 800437e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004380:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8004384:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
   p    = (((p << 31) - var2) * 3125) / var1;
 8004388:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800438c:	105b      	asrs	r3, r3, #1
 800438e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004392:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004396:	07db      	lsls	r3, r3, #31
 8004398:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800439c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80043a0:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 80043a4:	4621      	mov	r1, r4
 80043a6:	1a89      	subs	r1, r1, r2
 80043a8:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80043ac:	4629      	mov	r1, r5
 80043ae:	eb61 0303 	sbc.w	r3, r1, r3
 80043b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80043b6:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80043ba:	4622      	mov	r2, r4
 80043bc:	462b      	mov	r3, r5
 80043be:	1891      	adds	r1, r2, r2
 80043c0:	6239      	str	r1, [r7, #32]
 80043c2:	415b      	adcs	r3, r3
 80043c4:	627b      	str	r3, [r7, #36]	; 0x24
 80043c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80043ca:	4621      	mov	r1, r4
 80043cc:	1851      	adds	r1, r2, r1
 80043ce:	61b9      	str	r1, [r7, #24]
 80043d0:	4629      	mov	r1, r5
 80043d2:	414b      	adcs	r3, r1
 80043d4:	61fb      	str	r3, [r7, #28]
 80043d6:	f04f 0200 	mov.w	r2, #0
 80043da:	f04f 0300 	mov.w	r3, #0
 80043de:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80043e2:	4649      	mov	r1, r9
 80043e4:	018b      	lsls	r3, r1, #6
 80043e6:	4641      	mov	r1, r8
 80043e8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043ec:	4641      	mov	r1, r8
 80043ee:	018a      	lsls	r2, r1, #6
 80043f0:	4641      	mov	r1, r8
 80043f2:	1889      	adds	r1, r1, r2
 80043f4:	6139      	str	r1, [r7, #16]
 80043f6:	4649      	mov	r1, r9
 80043f8:	eb43 0101 	adc.w	r1, r3, r1
 80043fc:	6179      	str	r1, [r7, #20]
 80043fe:	f04f 0200 	mov.w	r2, #0
 8004402:	f04f 0300 	mov.w	r3, #0
 8004406:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800440a:	4649      	mov	r1, r9
 800440c:	008b      	lsls	r3, r1, #2
 800440e:	4641      	mov	r1, r8
 8004410:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004414:	4641      	mov	r1, r8
 8004416:	008a      	lsls	r2, r1, #2
 8004418:	4610      	mov	r0, r2
 800441a:	4619      	mov	r1, r3
 800441c:	4603      	mov	r3, r0
 800441e:	4622      	mov	r2, r4
 8004420:	189b      	adds	r3, r3, r2
 8004422:	60bb      	str	r3, [r7, #8]
 8004424:	460b      	mov	r3, r1
 8004426:	462a      	mov	r2, r5
 8004428:	eb42 0303 	adc.w	r3, r2, r3
 800442c:	60fb      	str	r3, [r7, #12]
 800442e:	f04f 0200 	mov.w	r2, #0
 8004432:	f04f 0300 	mov.w	r3, #0
 8004436:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800443a:	4649      	mov	r1, r9
 800443c:	008b      	lsls	r3, r1, #2
 800443e:	4641      	mov	r1, r8
 8004440:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004444:	4641      	mov	r1, r8
 8004446:	008a      	lsls	r2, r1, #2
 8004448:	4610      	mov	r0, r2
 800444a:	4619      	mov	r1, r3
 800444c:	4603      	mov	r3, r0
 800444e:	4622      	mov	r2, r4
 8004450:	189b      	adds	r3, r3, r2
 8004452:	67bb      	str	r3, [r7, #120]	; 0x78
 8004454:	462b      	mov	r3, r5
 8004456:	460a      	mov	r2, r1
 8004458:	eb42 0303 	adc.w	r3, r2, r3
 800445c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800445e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8004462:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8004466:	f7fc fc27 	bl	8000cb8 <__aeabi_ldivmod>
 800446a:	4602      	mov	r2, r0
 800446c:	460b      	mov	r3, r1
 800446e:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
   var1 = (((int64_t)bme->p9) * (p >> 13) * (p >> 13)) >> 25;
 8004472:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004476:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800447a:	b21b      	sxth	r3, r3
 800447c:	17da      	asrs	r2, r3, #31
 800447e:	673b      	str	r3, [r7, #112]	; 0x70
 8004480:	677a      	str	r2, [r7, #116]	; 0x74
 8004482:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8004486:	f04f 0000 	mov.w	r0, #0
 800448a:	f04f 0100 	mov.w	r1, #0
 800448e:	0b50      	lsrs	r0, r2, #13
 8004490:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8004494:	1359      	asrs	r1, r3, #13
 8004496:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 800449a:	462b      	mov	r3, r5
 800449c:	fb00 f203 	mul.w	r2, r0, r3
 80044a0:	4623      	mov	r3, r4
 80044a2:	fb03 f301 	mul.w	r3, r3, r1
 80044a6:	4413      	add	r3, r2
 80044a8:	4622      	mov	r2, r4
 80044aa:	fba2 1200 	umull	r1, r2, r2, r0
 80044ae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80044b2:	460a      	mov	r2, r1
 80044b4:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 80044b8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80044bc:	4413      	add	r3, r2
 80044be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80044c2:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80044c6:	f04f 0000 	mov.w	r0, #0
 80044ca:	f04f 0100 	mov.w	r1, #0
 80044ce:	0b50      	lsrs	r0, r2, #13
 80044d0:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80044d4:	1359      	asrs	r1, r3, #13
 80044d6:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80044da:	462b      	mov	r3, r5
 80044dc:	fb00 f203 	mul.w	r2, r0, r3
 80044e0:	4623      	mov	r3, r4
 80044e2:	fb03 f301 	mul.w	r3, r3, r1
 80044e6:	4413      	add	r3, r2
 80044e8:	4622      	mov	r2, r4
 80044ea:	fba2 1200 	umull	r1, r2, r2, r0
 80044ee:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80044f2:	460a      	mov	r2, r1
 80044f4:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80044f8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80044fc:	4413      	add	r3, r2
 80044fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004502:	f04f 0200 	mov.w	r2, #0
 8004506:	f04f 0300 	mov.w	r3, #0
 800450a:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800450e:	4621      	mov	r1, r4
 8004510:	0e4a      	lsrs	r2, r1, #25
 8004512:	4629      	mov	r1, r5
 8004514:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8004518:	4629      	mov	r1, r5
 800451a:	164b      	asrs	r3, r1, #25
 800451c:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
   var2 = (((int64_t)bme->p8) * p) >> 19;
 8004520:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004524:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8004528:	b21b      	sxth	r3, r3
 800452a:	17da      	asrs	r2, r3, #31
 800452c:	66bb      	str	r3, [r7, #104]	; 0x68
 800452e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004530:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004534:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8004538:	462a      	mov	r2, r5
 800453a:	fb02 f203 	mul.w	r2, r2, r3
 800453e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004542:	4621      	mov	r1, r4
 8004544:	fb01 f303 	mul.w	r3, r1, r3
 8004548:	4413      	add	r3, r2
 800454a:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800454e:	4621      	mov	r1, r4
 8004550:	fba2 1201 	umull	r1, r2, r2, r1
 8004554:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8004558:	460a      	mov	r2, r1
 800455a:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800455e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8004562:	4413      	add	r3, r2
 8004564:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004568:	f04f 0200 	mov.w	r2, #0
 800456c:	f04f 0300 	mov.w	r3, #0
 8004570:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8004574:	4621      	mov	r1, r4
 8004576:	0cca      	lsrs	r2, r1, #19
 8004578:	4629      	mov	r1, r5
 800457a:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800457e:	4629      	mov	r1, r5
 8004580:	14cb      	asrs	r3, r1, #19
 8004582:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

   p = ((p + var1 + var2) >> 8) + (((int64_t)bme->p7) << 4);
 8004586:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800458a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800458e:	1884      	adds	r4, r0, r2
 8004590:	663c      	str	r4, [r7, #96]	; 0x60
 8004592:	eb41 0303 	adc.w	r3, r1, r3
 8004596:	667b      	str	r3, [r7, #100]	; 0x64
 8004598:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800459c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80045a0:	4621      	mov	r1, r4
 80045a2:	1889      	adds	r1, r1, r2
 80045a4:	65b9      	str	r1, [r7, #88]	; 0x58
 80045a6:	4629      	mov	r1, r5
 80045a8:	eb43 0101 	adc.w	r1, r3, r1
 80045ac:	65f9      	str	r1, [r7, #92]	; 0x5c
 80045ae:	f04f 0000 	mov.w	r0, #0
 80045b2:	f04f 0100 	mov.w	r1, #0
 80045b6:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80045ba:	4623      	mov	r3, r4
 80045bc:	0a18      	lsrs	r0, r3, #8
 80045be:	462b      	mov	r3, r5
 80045c0:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80045c4:	462b      	mov	r3, r5
 80045c6:	1219      	asrs	r1, r3, #8
 80045c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045cc:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80045d0:	b21b      	sxth	r3, r3
 80045d2:	17da      	asrs	r2, r3, #31
 80045d4:	653b      	str	r3, [r7, #80]	; 0x50
 80045d6:	657a      	str	r2, [r7, #84]	; 0x54
 80045d8:	f04f 0200 	mov.w	r2, #0
 80045dc:	f04f 0300 	mov.w	r3, #0
 80045e0:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80045e4:	464c      	mov	r4, r9
 80045e6:	0123      	lsls	r3, r4, #4
 80045e8:	4644      	mov	r4, r8
 80045ea:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80045ee:	4644      	mov	r4, r8
 80045f0:	0122      	lsls	r2, r4, #4
 80045f2:	1884      	adds	r4, r0, r2
 80045f4:	603c      	str	r4, [r7, #0]
 80045f6:	eb41 0303 	adc.w	r3, r1, r3
 80045fa:	607b      	str	r3, [r7, #4]
 80045fc:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004600:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
   return (int32_t)p / 256;
 8004604:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004608:	2b00      	cmp	r3, #0
 800460a:	da00      	bge.n	800460e <BME280_Read_press+0x582>
 800460c:	33ff      	adds	r3, #255	; 0xff
 800460e:	121b      	asrs	r3, r3, #8
 8004610:	ee07 3a90 	vmov	s15, r3
 8004614:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8004618:	eeb0 0a67 	vmov.f32	s0, s15
 800461c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004620:	46bd      	mov	sp, r7
 8004622:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004626:	bf00      	nop
 8004628:	00000000 	.word	0x00000000

0800462c <BME280_ReadAll>:
void BME280_ReadAll(BME280_t *bme, float *T, float *P, float *H)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	607a      	str	r2, [r7, #4]
 8004638:	603b      	str	r3, [r7, #0]
   *T = BME280_Read_temp(bme);
 800463a:	68f8      	ldr	r0, [r7, #12]
 800463c:	f7ff fc52 	bl	8003ee4 <BME280_Read_temp>
 8004640:	eef0 7a40 	vmov.f32	s15, s0
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	edc3 7a00 	vstr	s15, [r3]
   *P = BME280_Read_press(bme) / 100;
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	f7ff fd1e 	bl	800408c <BME280_Read_press>
 8004650:	eeb0 7a40 	vmov.f32	s14, s0
 8004654:	eddf 6a09 	vldr	s13, [pc, #36]	; 800467c <BME280_ReadAll+0x50>
 8004658:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	edc3 7a00 	vstr	s15, [r3]
   *H = BME280_Read_hum(bme);
 8004662:	68f8      	ldr	r0, [r7, #12]
 8004664:	f7ff fc96 	bl	8003f94 <BME280_Read_hum>
 8004668:	eef0 7a40 	vmov.f32	s15, s0
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	edc3 7a00 	vstr	s15, [r3]
}
 8004672:	bf00      	nop
 8004674:	3710      	adds	r7, #16
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	42c80000 	.word	0x42c80000

08004680 <BME280_Init>:
void BME280_Init(BME280_t *bme, SPI_HandleTypeDef *spi, GPIO_TypeDef *CsPort, uint16_t CsPin)
{
 8004680:	b590      	push	{r4, r7, lr}
 8004682:	b085      	sub	sp, #20
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]
 800468c:	807b      	strh	r3, [r7, #2]
   bme->bme_spi       = spi;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	68ba      	ldr	r2, [r7, #8]
 8004692:	601a      	str	r2, [r3, #0]
   bme->bme280_CsPort = CsPort;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	605a      	str	r2, [r3, #4]
   bme->bme280_CsPin  = CsPin;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	887a      	ldrh	r2, [r7, #2]
 800469e:	855a      	strh	r2, [r3, #42]	; 0x2a
   bme->t1            = BME280_Read16LE(bme, BME280_DIG_T1);
 80046a0:	2188      	movs	r1, #136	; 0x88
 80046a2:	68f8      	ldr	r0, [r7, #12]
 80046a4:	f7ff fbac 	bl	8003e00 <BME280_Read16LE>
 80046a8:	4603      	mov	r3, r0
 80046aa:	461a      	mov	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	84da      	strh	r2, [r3, #38]	; 0x26
   bme->t2            = BME280_Read16LE(bme, BME280_DIG_T2);
 80046b0:	218a      	movs	r1, #138	; 0x8a
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f7ff fba4 	bl	8003e00 <BME280_Read16LE>
 80046b8:	4603      	mov	r3, r0
 80046ba:	b21a      	sxth	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	819a      	strh	r2, [r3, #12]
   bme->t3            = BME280_Read16LE(bme, BME280_DIG_T3);
 80046c0:	218c      	movs	r1, #140	; 0x8c
 80046c2:	68f8      	ldr	r0, [r7, #12]
 80046c4:	f7ff fb9c 	bl	8003e00 <BME280_Read16LE>
 80046c8:	4603      	mov	r3, r0
 80046ca:	b21a      	sxth	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	81da      	strh	r2, [r3, #14]

   bme->p1 = BME280_Read16LE(bme, BME280_DIG_P1);
 80046d0:	218e      	movs	r1, #142	; 0x8e
 80046d2:	68f8      	ldr	r0, [r7, #12]
 80046d4:	f7ff fb94 	bl	8003e00 <BME280_Read16LE>
 80046d8:	4603      	mov	r3, r0
 80046da:	461a      	mov	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	851a      	strh	r2, [r3, #40]	; 0x28
   bme->p2 = BME280_Read16LE(bme, BME280_DIG_P2);
 80046e0:	2190      	movs	r1, #144	; 0x90
 80046e2:	68f8      	ldr	r0, [r7, #12]
 80046e4:	f7ff fb8c 	bl	8003e00 <BME280_Read16LE>
 80046e8:	4603      	mov	r3, r0
 80046ea:	b21a      	sxth	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	821a      	strh	r2, [r3, #16]
   bme->p3 = BME280_Read16LE(bme, BME280_DIG_P3);
 80046f0:	2192      	movs	r1, #146	; 0x92
 80046f2:	68f8      	ldr	r0, [r7, #12]
 80046f4:	f7ff fb84 	bl	8003e00 <BME280_Read16LE>
 80046f8:	4603      	mov	r3, r0
 80046fa:	b21a      	sxth	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	825a      	strh	r2, [r3, #18]
   bme->p4 = BME280_Read16LE(bme, BME280_DIG_P4);
 8004700:	2194      	movs	r1, #148	; 0x94
 8004702:	68f8      	ldr	r0, [r7, #12]
 8004704:	f7ff fb7c 	bl	8003e00 <BME280_Read16LE>
 8004708:	4603      	mov	r3, r0
 800470a:	b21a      	sxth	r2, r3
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	829a      	strh	r2, [r3, #20]
   bme->p5 = BME280_Read16LE(bme, BME280_DIG_P5);
 8004710:	2196      	movs	r1, #150	; 0x96
 8004712:	68f8      	ldr	r0, [r7, #12]
 8004714:	f7ff fb74 	bl	8003e00 <BME280_Read16LE>
 8004718:	4603      	mov	r3, r0
 800471a:	b21a      	sxth	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	82da      	strh	r2, [r3, #22]
   bme->p6 = BME280_Read16LE(bme, BME280_DIG_P6);
 8004720:	2198      	movs	r1, #152	; 0x98
 8004722:	68f8      	ldr	r0, [r7, #12]
 8004724:	f7ff fb6c 	bl	8003e00 <BME280_Read16LE>
 8004728:	4603      	mov	r3, r0
 800472a:	b21a      	sxth	r2, r3
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	831a      	strh	r2, [r3, #24]
   bme->p7 = BME280_Read16LE(bme, BME280_DIG_P7);
 8004730:	219a      	movs	r1, #154	; 0x9a
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	f7ff fb64 	bl	8003e00 <BME280_Read16LE>
 8004738:	4603      	mov	r3, r0
 800473a:	b21a      	sxth	r2, r3
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	835a      	strh	r2, [r3, #26]
   bme->p8 = BME280_Read16LE(bme, BME280_DIG_P8);
 8004740:	219c      	movs	r1, #156	; 0x9c
 8004742:	68f8      	ldr	r0, [r7, #12]
 8004744:	f7ff fb5c 	bl	8003e00 <BME280_Read16LE>
 8004748:	4603      	mov	r3, r0
 800474a:	b21a      	sxth	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	839a      	strh	r2, [r3, #28]
   bme->p9 = BME280_Read16LE(bme, BME280_DIG_P9);
 8004750:	219e      	movs	r1, #158	; 0x9e
 8004752:	68f8      	ldr	r0, [r7, #12]
 8004754:	f7ff fb54 	bl	8003e00 <BME280_Read16LE>
 8004758:	4603      	mov	r3, r0
 800475a:	b21a      	sxth	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	83da      	strh	r2, [r3, #30]

   bme->h1 = BME280_Read8(bme, BME280_DIG_H1);
 8004760:	21a1      	movs	r1, #161	; 0xa1
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f7ff fb02 	bl	8003d6c <BME280_Read8>
 8004768:	4603      	mov	r3, r0
 800476a:	461a      	mov	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	721a      	strb	r2, [r3, #8]
   bme->h2 = BME280_Read16LE(bme, BME280_DIG_H2);
 8004770:	21e1      	movs	r1, #225	; 0xe1
 8004772:	68f8      	ldr	r0, [r7, #12]
 8004774:	f7ff fb44 	bl	8003e00 <BME280_Read16LE>
 8004778:	4603      	mov	r3, r0
 800477a:	b21a      	sxth	r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	841a      	strh	r2, [r3, #32]
   bme->h3 = BME280_Read8(bme, BME280_DIG_H3);
 8004780:	21e3      	movs	r1, #227	; 0xe3
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f7ff faf2 	bl	8003d6c <BME280_Read8>
 8004788:	4603      	mov	r3, r0
 800478a:	461a      	mov	r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	725a      	strb	r2, [r3, #9]
   bme->h4 = ((BME280_Read8(bme, BME280_DIG_H4) << 4) | (BME280_Read8(bme, BME280_DIG_H4 + 1) & 0xF));
 8004790:	21e4      	movs	r1, #228	; 0xe4
 8004792:	68f8      	ldr	r0, [r7, #12]
 8004794:	f7ff faea 	bl	8003d6c <BME280_Read8>
 8004798:	4603      	mov	r3, r0
 800479a:	011b      	lsls	r3, r3, #4
 800479c:	b21c      	sxth	r4, r3
 800479e:	21e5      	movs	r1, #229	; 0xe5
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	f7ff fae3 	bl	8003d6c <BME280_Read8>
 80047a6:	4603      	mov	r3, r0
 80047a8:	b21b      	sxth	r3, r3
 80047aa:	f003 030f 	and.w	r3, r3, #15
 80047ae:	b21b      	sxth	r3, r3
 80047b0:	4323      	orrs	r3, r4
 80047b2:	b21a      	sxth	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	845a      	strh	r2, [r3, #34]	; 0x22
   bme->h5 = ((BME280_Read8(bme, BME280_DIG_H5 + 1) << 4) | (BME280_Read8(bme, BME280_DIG_H5) >> 4));
 80047b8:	21e6      	movs	r1, #230	; 0xe6
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	f7ff fad6 	bl	8003d6c <BME280_Read8>
 80047c0:	4603      	mov	r3, r0
 80047c2:	011b      	lsls	r3, r3, #4
 80047c4:	b21c      	sxth	r4, r3
 80047c6:	21e5      	movs	r1, #229	; 0xe5
 80047c8:	68f8      	ldr	r0, [r7, #12]
 80047ca:	f7ff facf 	bl	8003d6c <BME280_Read8>
 80047ce:	4603      	mov	r3, r0
 80047d0:	091b      	lsrs	r3, r3, #4
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	b21b      	sxth	r3, r3
 80047d6:	4323      	orrs	r3, r4
 80047d8:	b21a      	sxth	r2, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	849a      	strh	r2, [r3, #36]	; 0x24
   bme->h6 = (int8_t)BME280_Read8(bme, BME280_DIG_H6);
 80047de:	21e7      	movs	r1, #231	; 0xe7
 80047e0:	68f8      	ldr	r0, [r7, #12]
 80047e2:	f7ff fac3 	bl	8003d6c <BME280_Read8>
 80047e6:	4603      	mov	r3, r0
 80047e8:	b25a      	sxtb	r2, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	729a      	strb	r2, [r3, #10]
   BME280_Write8(bme, BME280_HUM_CONTROL, 0b00000100);
 80047ee:	2204      	movs	r2, #4
 80047f0:	21f2      	movs	r1, #242	; 0xf2
 80047f2:	68f8      	ldr	r0, [r7, #12]
 80047f4:	f7ff fae1 	bl	8003dba <BME280_Write8>
   BME280_Write8(bme, BME280_CONTROL, 0b10110111);
 80047f8:	22b7      	movs	r2, #183	; 0xb7
 80047fa:	21f4      	movs	r1, #244	; 0xf4
 80047fc:	68f8      	ldr	r0, [r7, #12]
 80047fe:	f7ff fadc 	bl	8003dba <BME280_Write8>
   BME280_Write8(bme, BME280_CONFIG, 0b00000000);
 8004802:	2200      	movs	r2, #0
 8004804:	21f5      	movs	r1, #245	; 0xf5
 8004806:	68f8      	ldr	r0, [r7, #12]
 8004808:	f7ff fad7 	bl	8003dba <BME280_Write8>
}
 800480c:	bf00      	nop
 800480e:	3714      	adds	r7, #20
 8004810:	46bd      	mov	sp, r7
 8004812:	bd90      	pop	{r4, r7, pc}

08004814 <Crc>:
#include "cmsis_os.h"
#include "main.h"
int RandomNumber[] = { 131456, 215134, 31254, 4135, 516454, 642754, 71363, 85362475, 9144316, 10341957, 11345134, 11354342 };
int k              = 0;
uint32_t Crc(uint32_t PreviuseCRC, uint32_t DataLength, uint8_t *data)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b086      	sub	sp, #24
 8004818:	af00      	add	r7, sp, #0
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	607a      	str	r2, [r7, #4]
   taskENTER_CRITICAL();
 8004820:	f014 fd70 	bl	8019304 <vPortEnterCritical>
   PreviuseCRC ^= data[0];
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	461a      	mov	r2, r3
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	4053      	eors	r3, r2
 800482e:	60fb      	str	r3, [r7, #12]
   for(uint32_t i = 1; i < DataLength; i++)
 8004830:	2301      	movs	r3, #1
 8004832:	617b      	str	r3, [r7, #20]
 8004834:	e032      	b.n	800489c <Crc+0x88>
   {
      uint32_t temp = data[i];
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	4413      	add	r3, r2
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	613b      	str	r3, [r7, #16]
      if(temp == 0x00000000)
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d115      	bne.n	8004872 <Crc+0x5e>
      {
         temp = RandomNumber[k % 12];
 8004846:	4b1c      	ldr	r3, [pc, #112]	; (80048b8 <Crc+0xa4>)
 8004848:	6819      	ldr	r1, [r3, #0]
 800484a:	4b1c      	ldr	r3, [pc, #112]	; (80048bc <Crc+0xa8>)
 800484c:	fb83 2301 	smull	r2, r3, r3, r1
 8004850:	105a      	asrs	r2, r3, #1
 8004852:	17cb      	asrs	r3, r1, #31
 8004854:	1ad2      	subs	r2, r2, r3
 8004856:	4613      	mov	r3, r2
 8004858:	005b      	lsls	r3, r3, #1
 800485a:	4413      	add	r3, r2
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	1aca      	subs	r2, r1, r3
 8004860:	4b17      	ldr	r3, [pc, #92]	; (80048c0 <Crc+0xac>)
 8004862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004866:	613b      	str	r3, [r7, #16]
         k++;
 8004868:	4b13      	ldr	r3, [pc, #76]	; (80048b8 <Crc+0xa4>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	3301      	adds	r3, #1
 800486e:	4a12      	ldr	r2, [pc, #72]	; (80048b8 <Crc+0xa4>)
 8004870:	6013      	str	r3, [r2, #0]
      }
      PreviuseCRC ^= ((uint32_t)(temp) * (256 * i));
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	fb02 f303 	mul.w	r3, r2, r3
 800487a:	021b      	lsls	r3, r3, #8
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	4053      	eors	r3, r2
 8004880:	60fb      	str	r3, [r7, #12]
      if(PreviuseCRC & 0x80000000)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2b00      	cmp	r3, #0
 8004886:	da03      	bge.n	8004890 <Crc+0x7c>
      {
         PreviuseCRC ^= 0xABC245C2;
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	4b0e      	ldr	r3, [pc, #56]	; (80048c4 <Crc+0xb0>)
 800488c:	4053      	eors	r3, r2
 800488e:	60fb      	str	r3, [r7, #12]
      }
      PreviuseCRC <<= 1;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	005b      	lsls	r3, r3, #1
 8004894:	60fb      	str	r3, [r7, #12]
   for(uint32_t i = 1; i < DataLength; i++)
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	3301      	adds	r3, #1
 800489a:	617b      	str	r3, [r7, #20]
 800489c:	697a      	ldr	r2, [r7, #20]
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d3c8      	bcc.n	8004836 <Crc+0x22>
   }
   k = 0;
 80048a4:	4b04      	ldr	r3, [pc, #16]	; (80048b8 <Crc+0xa4>)
 80048a6:	2200      	movs	r2, #0
 80048a8:	601a      	str	r2, [r3, #0]
   taskEXIT_CRITICAL();
 80048aa:	f014 fd5b 	bl	8019364 <vPortExitCritical>
   return PreviuseCRC;
 80048ae:	68fb      	ldr	r3, [r7, #12]
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3718      	adds	r7, #24
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	200004c0 	.word	0x200004c0
 80048bc:	2aaaaaab 	.word	0x2aaaaaab
 80048c0:	20000024 	.word	0x20000024
 80048c4:	abc245c2 	.word	0xabc245c2

080048c8 <RepareMessage>:
CRCStatus_TypeDef RepareMessage(uint32_t OryginalCRC, uint8_t *data, uint32_t DataLength)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b088      	sub	sp, #32
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	607a      	str	r2, [r7, #4]
   uint8_t temp = 1;
 80048d4:	2301      	movs	r3, #1
 80048d6:	75fb      	strb	r3, [r7, #23]
   for(int i = 0; i < DataLength; i++)
 80048d8:	2300      	movs	r3, #0
 80048da:	61fb      	str	r3, [r7, #28]
 80048dc:	e03b      	b.n	8004956 <RepareMessage+0x8e>
   {
      for(int j = 0; j < 8; j++)
 80048de:	2300      	movs	r3, #0
 80048e0:	61bb      	str	r3, [r7, #24]
 80048e2:	e032      	b.n	800494a <RepareMessage+0x82>
      {
         data[i] ^= (temp << j);
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	68ba      	ldr	r2, [r7, #8]
 80048e8:	4413      	add	r3, r2
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	b25a      	sxtb	r2, r3
 80048ee:	7df9      	ldrb	r1, [r7, #23]
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	fa01 f303 	lsl.w	r3, r1, r3
 80048f6:	b25b      	sxtb	r3, r3
 80048f8:	4053      	eors	r3, r2
 80048fa:	b259      	sxtb	r1, r3
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	68ba      	ldr	r2, [r7, #8]
 8004900:	4413      	add	r3, r2
 8004902:	b2ca      	uxtb	r2, r1
 8004904:	701a      	strb	r2, [r3, #0]
         if(OryginalCRC == Crc(CRC_INITIAL_VALUE, DataLength - 4, data))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	3b04      	subs	r3, #4
 800490a:	68ba      	ldr	r2, [r7, #8]
 800490c:	4619      	mov	r1, r3
 800490e:	f04f 30ff 	mov.w	r0, #4294967295
 8004912:	f7ff ff7f 	bl	8004814 <Crc>
 8004916:	4602      	mov	r2, r0
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	4293      	cmp	r3, r2
 800491c:	d101      	bne.n	8004922 <RepareMessage+0x5a>
         {
            return CRC_OK;
 800491e:	2301      	movs	r3, #1
 8004920:	e01e      	b.n	8004960 <RepareMessage+0x98>
         }
         else
         {
            data[i] ^= (temp << j);
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	68ba      	ldr	r2, [r7, #8]
 8004926:	4413      	add	r3, r2
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	b25a      	sxtb	r2, r3
 800492c:	7df9      	ldrb	r1, [r7, #23]
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	fa01 f303 	lsl.w	r3, r1, r3
 8004934:	b25b      	sxtb	r3, r3
 8004936:	4053      	eors	r3, r2
 8004938:	b259      	sxtb	r1, r3
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	68ba      	ldr	r2, [r7, #8]
 800493e:	4413      	add	r3, r2
 8004940:	b2ca      	uxtb	r2, r1
 8004942:	701a      	strb	r2, [r3, #0]
      for(int j = 0; j < 8; j++)
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	3301      	adds	r3, #1
 8004948:	61bb      	str	r3, [r7, #24]
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	2b07      	cmp	r3, #7
 800494e:	ddc9      	ble.n	80048e4 <RepareMessage+0x1c>
   for(int i = 0; i < DataLength; i++)
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	3301      	adds	r3, #1
 8004954:	61fb      	str	r3, [r7, #28]
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	429a      	cmp	r2, r3
 800495c:	d8bf      	bhi.n	80048de <RepareMessage+0x16>
         }
      }
   }
   return CRC_ERROR;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	3720      	adds	r7, #32
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800496e:	4b0f      	ldr	r3, [pc, #60]	; (80049ac <MX_DMA_Init+0x44>)
 8004970:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004972:	4a0e      	ldr	r2, [pc, #56]	; (80049ac <MX_DMA_Init+0x44>)
 8004974:	f043 0304 	orr.w	r3, r3, #4
 8004978:	6493      	str	r3, [r2, #72]	; 0x48
 800497a:	4b0c      	ldr	r3, [pc, #48]	; (80049ac <MX_DMA_Init+0x44>)
 800497c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800497e:	f003 0304 	and.w	r3, r3, #4
 8004982:	607b      	str	r3, [r7, #4]
 8004984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004986:	4b09      	ldr	r3, [pc, #36]	; (80049ac <MX_DMA_Init+0x44>)
 8004988:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800498a:	4a08      	ldr	r2, [pc, #32]	; (80049ac <MX_DMA_Init+0x44>)
 800498c:	f043 0301 	orr.w	r3, r3, #1
 8004990:	6493      	str	r3, [r2, #72]	; 0x48
 8004992:	4b06      	ldr	r3, [pc, #24]	; (80049ac <MX_DMA_Init+0x44>)
 8004994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	603b      	str	r3, [r7, #0]
 800499c:	683b      	ldr	r3, [r7, #0]

}
 800499e:	bf00      	nop
 80049a0:	370c      	adds	r7, #12
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	40021000 	.word	0x40021000

080049b0 <e_papier_reset>:
const unsigned char lut_bb[] = {
   0x80, 0x17, 0x00, 0x00, 0x00, 0x02, 0x90, 0x17, 0x17, 0x00, 0x00, 0x02, 0x80, 0x0A, 0x01, 0x00, 0x00, 0x01, 0x50, 0x0E, 0x0E,
   0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};
void e_papier_reset(void)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(EPAPIER_RST_GPIO_Port, EPAPIER_RST_Pin, 1);
 80049b4:	2201      	movs	r2, #1
 80049b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80049ba:	480d      	ldr	r0, [pc, #52]	; (80049f0 <e_papier_reset+0x40>)
 80049bc:	f00a fa78 	bl	800eeb0 <HAL_GPIO_WritePin>
   osDelay(200);
 80049c0:	20c8      	movs	r0, #200	; 0xc8
 80049c2:	f010 ffaf 	bl	8015924 <osDelay>
   HAL_GPIO_WritePin(EPAPIER_RST_GPIO_Port, EPAPIER_RST_Pin, 0);
 80049c6:	2200      	movs	r2, #0
 80049c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80049cc:	4808      	ldr	r0, [pc, #32]	; (80049f0 <e_papier_reset+0x40>)
 80049ce:	f00a fa6f 	bl	800eeb0 <HAL_GPIO_WritePin>
   osDelay(200);
 80049d2:	20c8      	movs	r0, #200	; 0xc8
 80049d4:	f010 ffa6 	bl	8015924 <osDelay>
   HAL_GPIO_WritePin(EPAPIER_RST_GPIO_Port, EPAPIER_RST_Pin, 1);
 80049d8:	2201      	movs	r2, #1
 80049da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80049de:	4804      	ldr	r0, [pc, #16]	; (80049f0 <e_papier_reset+0x40>)
 80049e0:	f00a fa66 	bl	800eeb0 <HAL_GPIO_WritePin>
   osDelay(200);
 80049e4:	20c8      	movs	r0, #200	; 0xc8
 80049e6:	f010 ff9d 	bl	8015924 <osDelay>
}
 80049ea:	bf00      	nop
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	48000400 	.word	0x48000400

080049f4 <e_papier_send_command>:
void e_papier_send_command(uint8_t command)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	4603      	mov	r3, r0
 80049fc:	71fb      	strb	r3, [r7, #7]
   HAL_GPIO_WritePin(SCREENS_DC_GPIO_Port, SCREENS_DC_Pin, 0);
 80049fe:	2200      	movs	r2, #0
 8004a00:	2101      	movs	r1, #1
 8004a02:	480c      	ldr	r0, [pc, #48]	; (8004a34 <e_papier_send_command+0x40>)
 8004a04:	f00a fa54 	bl	800eeb0 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(EPAPIER_CS_GPIO_Port, EPAPIER_CS_Pin, 0);
 8004a08:	2200      	movs	r2, #0
 8004a0a:	2102      	movs	r1, #2
 8004a0c:	4809      	ldr	r0, [pc, #36]	; (8004a34 <e_papier_send_command+0x40>)
 8004a0e:	f00a fa4f 	bl	800eeb0 <HAL_GPIO_WritePin>
   HAL_SPI_Transmit(e_papier_spi, &command, 1, 1000);
 8004a12:	4b09      	ldr	r3, [pc, #36]	; (8004a38 <e_papier_send_command+0x44>)
 8004a14:	6818      	ldr	r0, [r3, #0]
 8004a16:	1df9      	adds	r1, r7, #7
 8004a18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f00c fc4c 	bl	80112ba <HAL_SPI_Transmit>
   HAL_GPIO_WritePin(EPAPIER_CS_GPIO_Port, EPAPIER_CS_Pin, 1);
 8004a22:	2201      	movs	r2, #1
 8004a24:	2102      	movs	r1, #2
 8004a26:	4803      	ldr	r0, [pc, #12]	; (8004a34 <e_papier_send_command+0x40>)
 8004a28:	f00a fa42 	bl	800eeb0 <HAL_GPIO_WritePin>
}
 8004a2c:	bf00      	nop
 8004a2e:	3708      	adds	r7, #8
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	48000400 	.word	0x48000400
 8004a38:	200004c4 	.word	0x200004c4

08004a3c <e_papier_send_data>:
void e_papier_send_data(uint8_t data)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	4603      	mov	r3, r0
 8004a44:	71fb      	strb	r3, [r7, #7]
   HAL_GPIO_WritePin(SCREENS_DC_GPIO_Port, SCREENS_DC_Pin, 1);
 8004a46:	2201      	movs	r2, #1
 8004a48:	2101      	movs	r1, #1
 8004a4a:	480c      	ldr	r0, [pc, #48]	; (8004a7c <e_papier_send_data+0x40>)
 8004a4c:	f00a fa30 	bl	800eeb0 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(EPAPIER_CS_GPIO_Port, EPAPIER_CS_Pin, 0);
 8004a50:	2200      	movs	r2, #0
 8004a52:	2102      	movs	r1, #2
 8004a54:	4809      	ldr	r0, [pc, #36]	; (8004a7c <e_papier_send_data+0x40>)
 8004a56:	f00a fa2b 	bl	800eeb0 <HAL_GPIO_WritePin>
   HAL_SPI_Transmit(e_papier_spi, &data, 1, 1000);
 8004a5a:	4b09      	ldr	r3, [pc, #36]	; (8004a80 <e_papier_send_data+0x44>)
 8004a5c:	6818      	ldr	r0, [r3, #0]
 8004a5e:	1df9      	adds	r1, r7, #7
 8004a60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a64:	2201      	movs	r2, #1
 8004a66:	f00c fc28 	bl	80112ba <HAL_SPI_Transmit>
   HAL_GPIO_WritePin(EPAPIER_CS_GPIO_Port, EPAPIER_CS_Pin, 1);
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	2102      	movs	r1, #2
 8004a6e:	4803      	ldr	r0, [pc, #12]	; (8004a7c <e_papier_send_data+0x40>)
 8004a70:	f00a fa1e 	bl	800eeb0 <HAL_GPIO_WritePin>
}
 8004a74:	bf00      	nop
 8004a76:	3708      	adds	r7, #8
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	48000400 	.word	0x48000400
 8004a80:	200004c4 	.word	0x200004c4

08004a84 <e_papier_wait_until_idle>:
void e_papier_wait_until_idle(void)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	af00      	add	r7, sp, #0
   while(HAL_GPIO_ReadPin(EPAPIER_BUSY_GPIO_Port, EPAPIER_BUSY_Pin) == 0)
 8004a88:	e002      	b.n	8004a90 <e_papier_wait_until_idle+0xc>
   {
      osDelay(100);
 8004a8a:	2064      	movs	r0, #100	; 0x64
 8004a8c:	f010 ff4a 	bl	8015924 <osDelay>
   while(HAL_GPIO_ReadPin(EPAPIER_BUSY_GPIO_Port, EPAPIER_BUSY_Pin) == 0)
 8004a90:	2104      	movs	r1, #4
 8004a92:	4804      	ldr	r0, [pc, #16]	; (8004aa4 <e_papier_wait_until_idle+0x20>)
 8004a94:	f00a f9f4 	bl	800ee80 <HAL_GPIO_ReadPin>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d0f5      	beq.n	8004a8a <e_papier_wait_until_idle+0x6>
   }
}
 8004a9e:	bf00      	nop
 8004aa0:	bf00      	nop
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	48000400 	.word	0x48000400

08004aa8 <e_papier_set_pixel>:
void e_papier_set_pixel(uint16_t x, uint16_t y, color_t color)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	4603      	mov	r3, r0
 8004ab0:	80fb      	strh	r3, [r7, #6]
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	80bb      	strh	r3, [r7, #4]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	70fb      	strb	r3, [r7, #3]
   if(x >= EPD_WIDTH || x < 0 || y >= EPD_HEIGHT || y < 0)
 8004aba:	88fb      	ldrh	r3, [r7, #6]
 8004abc:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004ac0:	d247      	bcs.n	8004b52 <e_papier_set_pixel+0xaa>
 8004ac2:	88bb      	ldrh	r3, [r7, #4]
 8004ac4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8004ac8:	d243      	bcs.n	8004b52 <e_papier_set_pixel+0xaa>
   {
      return;
   }
   if(color == WHITE)
 8004aca:	78fb      	ldrb	r3, [r7, #3]
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d120      	bne.n	8004b12 <e_papier_set_pixel+0x6a>
   {
      BufferEpapier[x / 8 + y * EPD_WIDTH / 8] |= (0x80 > (x % 8));
 8004ad0:	88fb      	ldrh	r3, [r7, #6]
 8004ad2:	08db      	lsrs	r3, r3, #3
 8004ad4:	b299      	uxth	r1, r3
 8004ad6:	4608      	mov	r0, r1
 8004ad8:	88bb      	ldrh	r3, [r7, #4]
 8004ada:	2232      	movs	r2, #50	; 0x32
 8004adc:	fb02 f303 	mul.w	r3, r2, r3
 8004ae0:	4403      	add	r3, r0
 8004ae2:	4a1f      	ldr	r2, [pc, #124]	; (8004b60 <e_papier_set_pixel+0xb8>)
 8004ae4:	5cd3      	ldrb	r3, [r2, r3]
 8004ae6:	b25a      	sxtb	r2, r3
 8004ae8:	88fb      	ldrh	r3, [r7, #6]
 8004aea:	f003 0307 	and.w	r3, r3, #7
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	2b7f      	cmp	r3, #127	; 0x7f
 8004af2:	bf94      	ite	ls
 8004af4:	2301      	movls	r3, #1
 8004af6:	2300      	movhi	r3, #0
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	b25b      	sxtb	r3, r3
 8004afc:	4313      	orrs	r3, r2
 8004afe:	b258      	sxtb	r0, r3
 8004b00:	88bb      	ldrh	r3, [r7, #4]
 8004b02:	2232      	movs	r2, #50	; 0x32
 8004b04:	fb02 f303 	mul.w	r3, r2, r3
 8004b08:	440b      	add	r3, r1
 8004b0a:	b2c1      	uxtb	r1, r0
 8004b0c:	4a14      	ldr	r2, [pc, #80]	; (8004b60 <e_papier_set_pixel+0xb8>)
 8004b0e:	54d1      	strb	r1, [r2, r3]
 8004b10:	e020      	b.n	8004b54 <e_papier_set_pixel+0xac>
   }
   else
   {
      BufferEpapier[x / 8 + y * EPD_WIDTH / 8] &= ~(0x80 >> (x % 8));
 8004b12:	88fb      	ldrh	r3, [r7, #6]
 8004b14:	08db      	lsrs	r3, r3, #3
 8004b16:	b298      	uxth	r0, r3
 8004b18:	4601      	mov	r1, r0
 8004b1a:	88bb      	ldrh	r3, [r7, #4]
 8004b1c:	2232      	movs	r2, #50	; 0x32
 8004b1e:	fb02 f303 	mul.w	r3, r2, r3
 8004b22:	440b      	add	r3, r1
 8004b24:	4a0e      	ldr	r2, [pc, #56]	; (8004b60 <e_papier_set_pixel+0xb8>)
 8004b26:	5cd3      	ldrb	r3, [r2, r3]
 8004b28:	b25a      	sxtb	r2, r3
 8004b2a:	88fb      	ldrh	r3, [r7, #6]
 8004b2c:	f003 0307 	and.w	r3, r3, #7
 8004b30:	2180      	movs	r1, #128	; 0x80
 8004b32:	fa41 f303 	asr.w	r3, r1, r3
 8004b36:	b25b      	sxtb	r3, r3
 8004b38:	43db      	mvns	r3, r3
 8004b3a:	b25b      	sxtb	r3, r3
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	b259      	sxtb	r1, r3
 8004b40:	88bb      	ldrh	r3, [r7, #4]
 8004b42:	2232      	movs	r2, #50	; 0x32
 8004b44:	fb02 f303 	mul.w	r3, r2, r3
 8004b48:	4403      	add	r3, r0
 8004b4a:	b2c9      	uxtb	r1, r1
 8004b4c:	4a04      	ldr	r2, [pc, #16]	; (8004b60 <e_papier_set_pixel+0xb8>)
 8004b4e:	54d1      	strb	r1, [r2, r3]
 8004b50:	e000      	b.n	8004b54 <e_papier_set_pixel+0xac>
      return;
 8004b52:	bf00      	nop
   }
}
 8004b54:	370c      	adds	r7, #12
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
 8004b5e:	bf00      	nop
 8004b60:	200004c8 	.word	0x200004c8

08004b64 <e_papier_set_lut>:
void e_papier_set_lut(void)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b082      	sub	sp, #8
 8004b68:	af00      	add	r7, sp, #0
   uint16_t count;
   e_papier_send_command(LUT_FOR_VCOM); // g vcom
 8004b6a:	2020      	movs	r0, #32
 8004b6c:	f7ff ff42 	bl	80049f4 <e_papier_send_command>
   for(count = 0; count < 44; count++)
 8004b70:	2300      	movs	r3, #0
 8004b72:	80fb      	strh	r3, [r7, #6]
 8004b74:	e008      	b.n	8004b88 <e_papier_set_lut+0x24>
   {
      e_papier_send_data(lut_vcom0[count]);
 8004b76:	88fb      	ldrh	r3, [r7, #6]
 8004b78:	4a2b      	ldr	r2, [pc, #172]	; (8004c28 <e_papier_set_lut+0xc4>)
 8004b7a:	5cd3      	ldrb	r3, [r2, r3]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f7ff ff5d 	bl	8004a3c <e_papier_send_data>
   for(count = 0; count < 44; count++)
 8004b82:	88fb      	ldrh	r3, [r7, #6]
 8004b84:	3301      	adds	r3, #1
 8004b86:	80fb      	strh	r3, [r7, #6]
 8004b88:	88fb      	ldrh	r3, [r7, #6]
 8004b8a:	2b2b      	cmp	r3, #43	; 0x2b
 8004b8c:	d9f3      	bls.n	8004b76 <e_papier_set_lut+0x12>
   }

   e_papier_send_command(LUT_WHITE_TO_WHITE);
 8004b8e:	2021      	movs	r0, #33	; 0x21
 8004b90:	f7ff ff30 	bl	80049f4 <e_papier_send_command>
   for(count = 0; count < 42; count++)
 8004b94:	2300      	movs	r3, #0
 8004b96:	80fb      	strh	r3, [r7, #6]
 8004b98:	e008      	b.n	8004bac <e_papier_set_lut+0x48>
   {
      e_papier_send_data(lut_ww[count]);
 8004b9a:	88fb      	ldrh	r3, [r7, #6]
 8004b9c:	4a23      	ldr	r2, [pc, #140]	; (8004c2c <e_papier_set_lut+0xc8>)
 8004b9e:	5cd3      	ldrb	r3, [r2, r3]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7ff ff4b 	bl	8004a3c <e_papier_send_data>
   for(count = 0; count < 42; count++)
 8004ba6:	88fb      	ldrh	r3, [r7, #6]
 8004ba8:	3301      	adds	r3, #1
 8004baa:	80fb      	strh	r3, [r7, #6]
 8004bac:	88fb      	ldrh	r3, [r7, #6]
 8004bae:	2b29      	cmp	r3, #41	; 0x29
 8004bb0:	d9f3      	bls.n	8004b9a <e_papier_set_lut+0x36>
   }

   e_papier_send_command(LUT_BLACK_TO_WHITE);
 8004bb2:	2022      	movs	r0, #34	; 0x22
 8004bb4:	f7ff ff1e 	bl	80049f4 <e_papier_send_command>
   for(count = 0; count < 42; count++)
 8004bb8:	2300      	movs	r3, #0
 8004bba:	80fb      	strh	r3, [r7, #6]
 8004bbc:	e008      	b.n	8004bd0 <e_papier_set_lut+0x6c>
   {
      e_papier_send_data(lut_bw[count]);
 8004bbe:	88fb      	ldrh	r3, [r7, #6]
 8004bc0:	4a1b      	ldr	r2, [pc, #108]	; (8004c30 <e_papier_set_lut+0xcc>)
 8004bc2:	5cd3      	ldrb	r3, [r2, r3]
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7ff ff39 	bl	8004a3c <e_papier_send_data>
   for(count = 0; count < 42; count++)
 8004bca:	88fb      	ldrh	r3, [r7, #6]
 8004bcc:	3301      	adds	r3, #1
 8004bce:	80fb      	strh	r3, [r7, #6]
 8004bd0:	88fb      	ldrh	r3, [r7, #6]
 8004bd2:	2b29      	cmp	r3, #41	; 0x29
 8004bd4:	d9f3      	bls.n	8004bbe <e_papier_set_lut+0x5a>
   }

   e_papier_send_command(LUT_WHITE_TO_BLACK);
 8004bd6:	2023      	movs	r0, #35	; 0x23
 8004bd8:	f7ff ff0c 	bl	80049f4 <e_papier_send_command>
   for(count = 0; count < 42; count++)
 8004bdc:	2300      	movs	r3, #0
 8004bde:	80fb      	strh	r3, [r7, #6]
 8004be0:	e008      	b.n	8004bf4 <e_papier_set_lut+0x90>
   {
      e_papier_send_data(lut_wb[count]);
 8004be2:	88fb      	ldrh	r3, [r7, #6]
 8004be4:	4a13      	ldr	r2, [pc, #76]	; (8004c34 <e_papier_set_lut+0xd0>)
 8004be6:	5cd3      	ldrb	r3, [r2, r3]
 8004be8:	4618      	mov	r0, r3
 8004bea:	f7ff ff27 	bl	8004a3c <e_papier_send_data>
   for(count = 0; count < 42; count++)
 8004bee:	88fb      	ldrh	r3, [r7, #6]
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	80fb      	strh	r3, [r7, #6]
 8004bf4:	88fb      	ldrh	r3, [r7, #6]
 8004bf6:	2b29      	cmp	r3, #41	; 0x29
 8004bf8:	d9f3      	bls.n	8004be2 <e_papier_set_lut+0x7e>
   }

   e_papier_send_command(LUT_BLACK_TO_BLACK);
 8004bfa:	2024      	movs	r0, #36	; 0x24
 8004bfc:	f7ff fefa 	bl	80049f4 <e_papier_send_command>
   for(count = 0; count < 42; count++)
 8004c00:	2300      	movs	r3, #0
 8004c02:	80fb      	strh	r3, [r7, #6]
 8004c04:	e008      	b.n	8004c18 <e_papier_set_lut+0xb4>
   {
      e_papier_send_data(lut_bb[count]);
 8004c06:	88fb      	ldrh	r3, [r7, #6]
 8004c08:	4a0b      	ldr	r2, [pc, #44]	; (8004c38 <e_papier_set_lut+0xd4>)
 8004c0a:	5cd3      	ldrb	r3, [r2, r3]
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f7ff ff15 	bl	8004a3c <e_papier_send_data>
   for(count = 0; count < 42; count++)
 8004c12:	88fb      	ldrh	r3, [r7, #6]
 8004c14:	3301      	adds	r3, #1
 8004c16:	80fb      	strh	r3, [r7, #6]
 8004c18:	88fb      	ldrh	r3, [r7, #6]
 8004c1a:	2b29      	cmp	r3, #41	; 0x29
 8004c1c:	d9f3      	bls.n	8004c06 <e_papier_set_lut+0xa2>
   }
}
 8004c1e:	bf00      	nop
 8004c20:	bf00      	nop
 8004c22:	3708      	adds	r7, #8
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	08024d60 	.word	0x08024d60
 8004c2c:	08024d8c 	.word	0x08024d8c
 8004c30:	08024db8 	.word	0x08024db8
 8004c34:	08024de4 	.word	0x08024de4
 8004c38:	08024e10 	.word	0x08024e10

08004c3c <e_papier_turn_on_display>:
      }
   }
   // e_papier_wait_until_idle();
}
void e_papier_turn_on_display(void)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	af00      	add	r7, sp, #0
   e_papier_send_command(DISPLAY_REFRESH);
 8004c40:	2012      	movs	r0, #18
 8004c42:	f7ff fed7 	bl	80049f4 <e_papier_send_command>
   e_papier_wait_until_idle();
 8004c46:	f7ff ff1d 	bl	8004a84 <e_papier_wait_until_idle>
}
 8004c4a:	bf00      	nop
 8004c4c:	bd80      	pop	{r7, pc}
	...

08004c50 <e_papier_display>:
void e_papier_display(void)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
   uint16_t Width, Height;
   Width  = (EPD_WIDTH % 8 == 0) ? (EPD_WIDTH / 8) : (EPD_WIDTH / 8 + 1);
 8004c56:	2332      	movs	r3, #50	; 0x32
 8004c58:	807b      	strh	r3, [r7, #2]
   Height = EPD_HEIGHT;
 8004c5a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004c5e:	803b      	strh	r3, [r7, #0]
   if(osEventFlagsWait(C3V1FlagsHandle, E_PAPIER_DARK_MODE, osFlagsWaitAny | osFlagsNoClear, 1) != osFlagsErrorTimeout)
 8004c60:	4b32      	ldr	r3, [pc, #200]	; (8004d2c <e_papier_display+0xdc>)
 8004c62:	6818      	ldr	r0, [r3, #0]
 8004c64:	2301      	movs	r3, #1
 8004c66:	2202      	movs	r2, #2
 8004c68:	2140      	movs	r1, #64	; 0x40
 8004c6a:	f010 ffbd 	bl	8015be8 <osEventFlagsWait>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	f113 0f02 	cmn.w	r3, #2
 8004c74:	d015      	beq.n	8004ca2 <e_papier_display+0x52>
   {
      for(int i = 0; i < sizeof(BufferEpapier); i++)
 8004c76:	2300      	movs	r3, #0
 8004c78:	60fb      	str	r3, [r7, #12]
 8004c7a:	e00d      	b.n	8004c98 <e_papier_display+0x48>
      {
         BufferEpapier[i] = ~BufferEpapier[i];
 8004c7c:	4a2c      	ldr	r2, [pc, #176]	; (8004d30 <e_papier_display+0xe0>)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	4413      	add	r3, r2
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	43db      	mvns	r3, r3
 8004c86:	b2d9      	uxtb	r1, r3
 8004c88:	4a29      	ldr	r2, [pc, #164]	; (8004d30 <e_papier_display+0xe0>)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	460a      	mov	r2, r1
 8004c90:	701a      	strb	r2, [r3, #0]
      for(int i = 0; i < sizeof(BufferEpapier); i++)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	3301      	adds	r3, #1
 8004c96:	60fb      	str	r3, [r7, #12]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f643 2297 	movw	r2, #14999	; 0x3a97
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d9ec      	bls.n	8004c7c <e_papier_display+0x2c>
      }
   }
   e_papier_send_command(DATA_START_TRANSMISSION_1);
 8004ca2:	2010      	movs	r0, #16
 8004ca4:	f7ff fea6 	bl	80049f4 <e_papier_send_command>
   for(uint16_t j = 0; j < Height; j++)
 8004ca8:	2300      	movs	r3, #0
 8004caa:	817b      	strh	r3, [r7, #10]
 8004cac:	e00f      	b.n	8004cce <e_papier_display+0x7e>
   {
      for(uint16_t i = 0; i < Width; i++)
 8004cae:	2300      	movs	r3, #0
 8004cb0:	813b      	strh	r3, [r7, #8]
 8004cb2:	e005      	b.n	8004cc0 <e_papier_display+0x70>
      {
         e_papier_send_data(0XFF);
 8004cb4:	20ff      	movs	r0, #255	; 0xff
 8004cb6:	f7ff fec1 	bl	8004a3c <e_papier_send_data>
      for(uint16_t i = 0; i < Width; i++)
 8004cba:	893b      	ldrh	r3, [r7, #8]
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	813b      	strh	r3, [r7, #8]
 8004cc0:	893a      	ldrh	r2, [r7, #8]
 8004cc2:	887b      	ldrh	r3, [r7, #2]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d3f5      	bcc.n	8004cb4 <e_papier_display+0x64>
   for(uint16_t j = 0; j < Height; j++)
 8004cc8:	897b      	ldrh	r3, [r7, #10]
 8004cca:	3301      	adds	r3, #1
 8004ccc:	817b      	strh	r3, [r7, #10]
 8004cce:	897a      	ldrh	r2, [r7, #10]
 8004cd0:	883b      	ldrh	r3, [r7, #0]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d3eb      	bcc.n	8004cae <e_papier_display+0x5e>
      }
   }
   e_papier_send_command(DATA_START_TRANSMISSION_2);
 8004cd6:	2013      	movs	r0, #19
 8004cd8:	f7ff fe8c 	bl	80049f4 <e_papier_send_command>
   for(uint16_t j = 0; j < Height; j++)
 8004cdc:	2300      	movs	r3, #0
 8004cde:	80fb      	strh	r3, [r7, #6]
 8004ce0:	e017      	b.n	8004d12 <e_papier_display+0xc2>
   {
      for(uint16_t i = 0; i < Width; i++)
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	80bb      	strh	r3, [r7, #4]
 8004ce6:	e00d      	b.n	8004d04 <e_papier_display+0xb4>
      {
         e_papier_send_data(BufferEpapier[i + j * Width]);
 8004ce8:	88ba      	ldrh	r2, [r7, #4]
 8004cea:	88fb      	ldrh	r3, [r7, #6]
 8004cec:	8879      	ldrh	r1, [r7, #2]
 8004cee:	fb01 f303 	mul.w	r3, r1, r3
 8004cf2:	4413      	add	r3, r2
 8004cf4:	4a0e      	ldr	r2, [pc, #56]	; (8004d30 <e_papier_display+0xe0>)
 8004cf6:	5cd3      	ldrb	r3, [r2, r3]
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f7ff fe9f 	bl	8004a3c <e_papier_send_data>
      for(uint16_t i = 0; i < Width; i++)
 8004cfe:	88bb      	ldrh	r3, [r7, #4]
 8004d00:	3301      	adds	r3, #1
 8004d02:	80bb      	strh	r3, [r7, #4]
 8004d04:	88ba      	ldrh	r2, [r7, #4]
 8004d06:	887b      	ldrh	r3, [r7, #2]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d3ed      	bcc.n	8004ce8 <e_papier_display+0x98>
   for(uint16_t j = 0; j < Height; j++)
 8004d0c:	88fb      	ldrh	r3, [r7, #6]
 8004d0e:	3301      	adds	r3, #1
 8004d10:	80fb      	strh	r3, [r7, #6]
 8004d12:	88fa      	ldrh	r2, [r7, #6]
 8004d14:	883b      	ldrh	r3, [r7, #0]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d3e3      	bcc.n	8004ce2 <e_papier_display+0x92>
      }
   }
   e_papier_turn_on_display();
 8004d1a:	f7ff ff8f 	bl	8004c3c <e_papier_turn_on_display>
   e_papier_wait_until_idle();
 8004d1e:	f7ff feb1 	bl	8004a84 <e_papier_wait_until_idle>
}
 8004d22:	bf00      	nop
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	200040c4 	.word	0x200040c4
 8004d30:	200004c8 	.word	0x200004c8

08004d34 <e_papier_clear>:
void e_papier_clear()
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	af00      	add	r7, sp, #0
   memset(BufferEpapier, 0xff, EPD_HEIGHT * EPD_WIDTH / 8);
 8004d38:	f643 2298 	movw	r2, #15000	; 0x3a98
 8004d3c:	21ff      	movs	r1, #255	; 0xff
 8004d3e:	4802      	ldr	r0, [pc, #8]	; (8004d48 <e_papier_clear+0x14>)
 8004d40:	f014 fe26 	bl	8019990 <memset>
}
 8004d44:	bf00      	nop
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	200004c8 	.word	0x200004c8

08004d4c <e_papier_init>:
void e_papier_init(SPI_HandleTypeDef *spi)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
   e_papier_spi = spi;
 8004d54:	4a2b      	ldr	r2, [pc, #172]	; (8004e04 <e_papier_init+0xb8>)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6013      	str	r3, [r2, #0]
   e_papier_reset();
 8004d5a:	f7ff fe29 	bl	80049b0 <e_papier_reset>

   e_papier_send_command(POWER_SETTING); // POWER SETTING
 8004d5e:	2001      	movs	r0, #1
 8004d60:	f7ff fe48 	bl	80049f4 <e_papier_send_command>
   e_papier_send_data(0x03);
 8004d64:	2003      	movs	r0, #3
 8004d66:	f7ff fe69 	bl	8004a3c <e_papier_send_data>
   e_papier_send_data(0x00);
 8004d6a:	2000      	movs	r0, #0
 8004d6c:	f7ff fe66 	bl	8004a3c <e_papier_send_data>
   e_papier_send_data(0x2b);
 8004d70:	202b      	movs	r0, #43	; 0x2b
 8004d72:	f7ff fe63 	bl	8004a3c <e_papier_send_data>
   e_papier_send_data(0x2b);
 8004d76:	202b      	movs	r0, #43	; 0x2b
 8004d78:	f7ff fe60 	bl	8004a3c <e_papier_send_data>

   e_papier_send_command(BOOSTER_SOFT_START); // boost soft start
 8004d7c:	2006      	movs	r0, #6
 8004d7e:	f7ff fe39 	bl	80049f4 <e_papier_send_command>
   e_papier_send_data(0x17);                  // A
 8004d82:	2017      	movs	r0, #23
 8004d84:	f7ff fe5a 	bl	8004a3c <e_papier_send_data>
   e_papier_send_data(0x17);                  // B
 8004d88:	2017      	movs	r0, #23
 8004d8a:	f7ff fe57 	bl	8004a3c <e_papier_send_data>
   e_papier_send_data(0x17);                  // C
 8004d8e:	2017      	movs	r0, #23
 8004d90:	f7ff fe54 	bl	8004a3c <e_papier_send_data>

   e_papier_send_command(POWER_ON);
 8004d94:	2004      	movs	r0, #4
 8004d96:	f7ff fe2d 	bl	80049f4 <e_papier_send_command>
   e_papier_wait_until_idle();
 8004d9a:	f7ff fe73 	bl	8004a84 <e_papier_wait_until_idle>

   e_papier_send_command(PANEL_SETTING); // panel setting
 8004d9e:	2000      	movs	r0, #0
 8004da0:	f7ff fe28 	bl	80049f4 <e_papier_send_command>
   e_papier_send_data(0xbf);             // KW-BF   KWR-AF	BWROTP 0f	BWOTP 1f
 8004da4:	20bf      	movs	r0, #191	; 0xbf
 8004da6:	f7ff fe49 	bl	8004a3c <e_papier_send_data>
   e_papier_send_data(0x0d);
 8004daa:	200d      	movs	r0, #13
 8004dac:	f7ff fe46 	bl	8004a3c <e_papier_send_data>

   e_papier_send_command(PLL_CONTROL); // PLL setting
 8004db0:	2030      	movs	r0, #48	; 0x30
 8004db2:	f7ff fe1f 	bl	80049f4 <e_papier_send_command>
   e_papier_send_data(0x3C);           // 3A 100HZ   29 150Hz 39 200HZ	31 171HZ
 8004db6:	203c      	movs	r0, #60	; 0x3c
 8004db8:	f7ff fe40 	bl	8004a3c <e_papier_send_data>

   e_papier_send_command(0x61); // resolution setting
 8004dbc:	2061      	movs	r0, #97	; 0x61
 8004dbe:	f7ff fe19 	bl	80049f4 <e_papier_send_command>
   e_papier_send_data(0x01);
 8004dc2:	2001      	movs	r0, #1
 8004dc4:	f7ff fe3a 	bl	8004a3c <e_papier_send_data>
   e_papier_send_data(0x90); // 128
 8004dc8:	2090      	movs	r0, #144	; 0x90
 8004dca:	f7ff fe37 	bl	8004a3c <e_papier_send_data>
   e_papier_send_data(0x01); //
 8004dce:	2001      	movs	r0, #1
 8004dd0:	f7ff fe34 	bl	8004a3c <e_papier_send_data>
   e_papier_send_data(0x2c);
 8004dd4:	202c      	movs	r0, #44	; 0x2c
 8004dd6:	f7ff fe31 	bl	8004a3c <e_papier_send_data>

   e_papier_send_command(0x82); // vcom_DC setting
 8004dda:	2082      	movs	r0, #130	; 0x82
 8004ddc:	f7ff fe0a 	bl	80049f4 <e_papier_send_command>
   e_papier_send_data(0x28);
 8004de0:	2028      	movs	r0, #40	; 0x28
 8004de2:	f7ff fe2b 	bl	8004a3c <e_papier_send_data>

   e_papier_send_command(0X50); // VCOM AND DATA INTERVAL SETTING
 8004de6:	2050      	movs	r0, #80	; 0x50
 8004de8:	f7ff fe04 	bl	80049f4 <e_papier_send_command>
   e_papier_send_data(0x97);    // 97white border 77black border		VBDF 17|D7 VBDW 97 VBDB 57		VBDF F7 VBDW 77 VBDB 37  VBDR B7
 8004dec:	2097      	movs	r0, #151	; 0x97
 8004dee:	f7ff fe25 	bl	8004a3c <e_papier_send_data>

   e_papier_set_lut();
 8004df2:	f7ff feb7 	bl	8004b64 <e_papier_set_lut>
   e_papier_clear();
 8004df6:	f7ff ff9d 	bl	8004d34 <e_papier_clear>
}
 8004dfa:	bf00      	nop
 8004dfc:	3708      	adds	r7, #8
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	200004c4 	.word	0x200004c4

08004e08 <flash_CsLow>:

#include "flash_spi.h"

#include "cmsis_os.h"
void flash_CsLow(flash_t *flash)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
   HAL_GPIO_WritePin(flash->flash_CsPort, flash->flash_CsPin, 0);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	68d8      	ldr	r0, [r3, #12]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	891b      	ldrh	r3, [r3, #8]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	f00a f848 	bl	800eeb0 <HAL_GPIO_WritePin>
}
 8004e20:	bf00      	nop
 8004e22:	3708      	adds	r7, #8
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <flash_CsHigh>:
void flash_CsHigh(flash_t *flash)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
   HAL_GPIO_WritePin(flash->flash_CsPort, flash->flash_CsPin, 1);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	68d8      	ldr	r0, [r3, #12]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	891b      	ldrh	r3, [r3, #8]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	f00a f838 	bl	800eeb0 <HAL_GPIO_WritePin>
}
 8004e40:	bf00      	nop
 8004e42:	3708      	adds	r7, #8
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <flash_WriteCommand>:
void flash_WriteCommand(flash_t *flash, uint8_t *command, uint8_t size)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	4613      	mov	r3, r2
 8004e54:	71fb      	strb	r3, [r7, #7]
   HAL_SPI_Transmit(flash->flash_spi, command, size, 1000);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6818      	ldr	r0, [r3, #0]
 8004e5a:	79fb      	ldrb	r3, [r7, #7]
 8004e5c:	b29a      	uxth	r2, r3
 8004e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e62:	68b9      	ldr	r1, [r7, #8]
 8004e64:	f00c fa29 	bl	80112ba <HAL_SPI_Transmit>
}
 8004e68:	bf00      	nop
 8004e6a:	3710      	adds	r7, #16
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <flash_ReadCommand>:
void flash_ReadCommand(flash_t *flash, uint8_t *command, uint8_t size)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	71fb      	strb	r3, [r7, #7]
   HAL_SPI_Receive(flash->flash_spi, command, size, 1000);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6818      	ldr	r0, [r3, #0]
 8004e82:	79fb      	ldrb	r3, [r7, #7]
 8004e84:	b29a      	uxth	r2, r3
 8004e86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e8a:	68b9      	ldr	r1, [r7, #8]
 8004e8c:	f00c fb83 	bl	8011596 <HAL_SPI_Receive>
}
 8004e90:	bf00      	nop
 8004e92:	3710      	adds	r7, #16
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <flash_WriteData>:
void flash_WriteData(flash_t *flash, uint8_t *data, uint32_t size)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	607a      	str	r2, [r7, #4]
   HAL_SPI_Transmit(flash->flash_spi, data, size, 1000);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6818      	ldr	r0, [r3, #0]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	b29a      	uxth	r2, r3
 8004eac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004eb0:	68b9      	ldr	r1, [r7, #8]
 8004eb2:	f00c fa02 	bl	80112ba <HAL_SPI_Transmit>
}
 8004eb6:	bf00      	nop
 8004eb8:	3710      	adds	r7, #16
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}

08004ebe <flash_ReadData>:
void flash_ReadData(flash_t *flash, uint8_t *data, uint32_t size)
{
 8004ebe:	b580      	push	{r7, lr}
 8004ec0:	b084      	sub	sp, #16
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	60f8      	str	r0, [r7, #12]
 8004ec6:	60b9      	str	r1, [r7, #8]
 8004ec8:	607a      	str	r2, [r7, #4]
   HAL_SPI_Receive(flash->flash_spi, data, size, 1000);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6818      	ldr	r0, [r3, #0]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	b29a      	uxth	r2, r3
 8004ed2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ed6:	68b9      	ldr	r1, [r7, #8]
 8004ed8:	f00c fb5d 	bl	8011596 <HAL_SPI_Receive>
}
 8004edc:	bf00      	nop
 8004ede:	3710      	adds	r7, #16
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <flash_ReadSR1>:
uint8_t flash_ReadSR1(flash_t *flash)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
   flash_CsLow(flash);
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f7ff ff8b 	bl	8004e08 <flash_CsLow>
   uint8_t command = READ_SR1;
 8004ef2:	2305      	movs	r3, #5
 8004ef4:	73fb      	strb	r3, [r7, #15]
   flash_WriteCommand(flash, &command, 1);
 8004ef6:	f107 030f 	add.w	r3, r7, #15
 8004efa:	2201      	movs	r2, #1
 8004efc:	4619      	mov	r1, r3
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f7ff ffa2 	bl	8004e48 <flash_WriteCommand>
   flash_ReadCommand(flash, &command, 1);
 8004f04:	f107 030f 	add.w	r3, r7, #15
 8004f08:	2201      	movs	r2, #1
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f7ff ffaf 	bl	8004e70 <flash_ReadCommand>
   flash_CsHigh(flash);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f7ff ff88 	bl	8004e28 <flash_CsHigh>
   return command;
 8004f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3710      	adds	r7, #16
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}

08004f22 <flash_Reset>:
   flash_ReadCommand(flash, &command, 1);
   flash_CsHigh(flash);
   return command;
}
void flash_Reset(flash_t *flash)
{
 8004f22:	b580      	push	{r7, lr}
 8004f24:	b084      	sub	sp, #16
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
   uint8_t command = ENABLE_RESET;
 8004f2a:	2366      	movs	r3, #102	; 0x66
 8004f2c:	73fb      	strb	r3, [r7, #15]
   flash_CsLow(flash);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f7ff ff6a 	bl	8004e08 <flash_CsLow>
   flash_WriteCommand(flash, &command, 1);
 8004f34:	f107 030f 	add.w	r3, r7, #15
 8004f38:	2201      	movs	r2, #1
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f7ff ff83 	bl	8004e48 <flash_WriteCommand>
   flash_CsHigh(flash);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f7ff ff70 	bl	8004e28 <flash_CsHigh>
   command = RESET;
 8004f48:	2399      	movs	r3, #153	; 0x99
 8004f4a:	73fb      	strb	r3, [r7, #15]
   flash_CsLow(flash);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f7ff ff5b 	bl	8004e08 <flash_CsLow>
   flash_WriteCommand(flash, &command, 1);
 8004f52:	f107 030f 	add.w	r3, r7, #15
 8004f56:	2201      	movs	r2, #1
 8004f58:	4619      	mov	r1, r3
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f7ff ff74 	bl	8004e48 <flash_WriteCommand>
   flash_CsHigh(flash);
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f7ff ff61 	bl	8004e28 <flash_CsHigh>
}
 8004f66:	bf00      	nop
 8004f68:	3710      	adds	r7, #16
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <flash_SetWELBit>:
void flash_SetWELBit(flash_t *flash)
{
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b084      	sub	sp, #16
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
   flash_CsLow(flash);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f7ff ff46 	bl	8004e08 <flash_CsLow>
   uint8_t command = WRITE_ENABLE;
 8004f7c:	2306      	movs	r3, #6
 8004f7e:	73fb      	strb	r3, [r7, #15]
   flash_WriteCommand(flash, &command, 1);
 8004f80:	f107 030f 	add.w	r3, r7, #15
 8004f84:	2201      	movs	r2, #1
 8004f86:	4619      	mov	r1, r3
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f7ff ff5d 	bl	8004e48 <flash_WriteCommand>
   flash_CsHigh(flash);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f7ff ff4a 	bl	8004e28 <flash_CsHigh>
}
 8004f94:	bf00      	nop
 8004f96:	3710      	adds	r7, #16
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <flash_ReadID>:
void flash_ReadID(flash_t *flash)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
   uint8_t id[3], command = JEDEC_ID;
 8004fa4:	239f      	movs	r3, #159	; 0x9f
 8004fa6:	72fb      	strb	r3, [r7, #11]
   flash_CsLow(flash);
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f7ff ff2d 	bl	8004e08 <flash_CsLow>
   flash_WriteCommand(flash, &command, 1);
 8004fae:	f107 030b 	add.w	r3, r7, #11
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f7ff ff46 	bl	8004e48 <flash_WriteCommand>
   flash_ReadCommand(flash, id, 3);
 8004fbc:	f107 030c 	add.w	r3, r7, #12
 8004fc0:	2203      	movs	r2, #3
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f7ff ff53 	bl	8004e70 <flash_ReadCommand>
   flash_CsHigh(flash);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7ff ff2c 	bl	8004e28 <flash_CsHigh>
   flash->id = ((id[0] << 16) | (id[1] << 8) | id[2]);
 8004fd0:	7b3b      	ldrb	r3, [r7, #12]
 8004fd2:	041a      	lsls	r2, r3, #16
 8004fd4:	7b7b      	ldrb	r3, [r7, #13]
 8004fd6:	021b      	lsls	r3, r3, #8
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	7bba      	ldrb	r2, [r7, #14]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	461a      	mov	r2, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	605a      	str	r2, [r3, #4]
}
 8004fe4:	bf00      	nop
 8004fe6:	3710      	adds	r7, #16
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <flash_WaitForEndProcess>:
void flash_WaitForEndProcess(flash_t *flash)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
   while((flash_ReadSR1(flash) & BUSY_FLAG))
 8004ff4:	e002      	b.n	8004ffc <flash_WaitForEndProcess+0x10>
   {
      osDelay(5);
 8004ff6:	2005      	movs	r0, #5
 8004ff8:	f010 fc94 	bl	8015924 <osDelay>
   while((flash_ReadSR1(flash) & BUSY_FLAG))
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f7ff ff71 	bl	8004ee4 <flash_ReadSR1>
 8005002:	4603      	mov	r3, r0
 8005004:	f003 0301 	and.w	r3, r3, #1
 8005008:	2b00      	cmp	r3, #0
 800500a:	d1f4      	bne.n	8004ff6 <flash_WaitForEndProcess+0xa>
   }
}
 800500c:	bf00      	nop
 800500e:	bf00      	nop
 8005010:	3708      	adds	r7, #8
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}

08005016 <flash_SetWELBit_and_WaitForEndProcess>:
void flash_SetWELBit_and_WaitForEndProcess(flash_t *flash)
{
 8005016:	b580      	push	{r7, lr}
 8005018:	b082      	sub	sp, #8
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
   while(!(flash_ReadSR1(flash) & WEL_BIT))
 800501e:	e005      	b.n	800502c <flash_SetWELBit_and_WaitForEndProcess+0x16>
   {
      flash_SetWELBit(flash);
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f7ff ffa4 	bl	8004f6e <flash_SetWELBit>
      osDelay(5);
 8005026:	2005      	movs	r0, #5
 8005028:	f010 fc7c 	bl	8015924 <osDelay>
   while(!(flash_ReadSR1(flash) & WEL_BIT))
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f7ff ff59 	bl	8004ee4 <flash_ReadSR1>
 8005032:	4603      	mov	r3, r0
 8005034:	f003 0302 	and.w	r3, r3, #2
 8005038:	2b00      	cmp	r3, #0
 800503a:	d0f1      	beq.n	8005020 <flash_SetWELBit_and_WaitForEndProcess+0xa>
   }
}
 800503c:	bf00      	nop
 800503e:	bf00      	nop
 8005040:	3708      	adds	r7, #8
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}

08005046 <flash_WritePage>:
   flash_CsHigh(flash);
   flash_WaitForEndProcess(flash);
   flash_WaitForEndProcess(flash);
}
void flash_WritePage(flash_t *flash, uint32_t page_addr, uint8_t *data)
{
 8005046:	b580      	push	{r7, lr}
 8005048:	b086      	sub	sp, #24
 800504a:	af00      	add	r7, sp, #0
 800504c:	60f8      	str	r0, [r7, #12]
 800504e:	60b9      	str	r1, [r7, #8]
 8005050:	607a      	str	r2, [r7, #4]
   uint8_t dataToSend[4];
   flash_WaitForEndProcess(flash);
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	f7ff ffca 	bl	8004fec <flash_WaitForEndProcess>
   flash_SetWELBit_and_WaitForEndProcess(flash);
 8005058:	68f8      	ldr	r0, [r7, #12]
 800505a:	f7ff ffdc 	bl	8005016 <flash_SetWELBit_and_WaitForEndProcess>
   page_addr *= PAGE_SIZE;
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	021b      	lsls	r3, r3, #8
 8005062:	60bb      	str	r3, [r7, #8]
   dataToSend[0] = PAGE_PROGRAM;
 8005064:	2302      	movs	r3, #2
 8005066:	753b      	strb	r3, [r7, #20]
   dataToSend[1] = (page_addr >> 16) & 0xff;
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	0c1b      	lsrs	r3, r3, #16
 800506c:	b2db      	uxtb	r3, r3
 800506e:	757b      	strb	r3, [r7, #21]
   dataToSend[2] = (page_addr >> 8) & 0xff;
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	0a1b      	lsrs	r3, r3, #8
 8005074:	b2db      	uxtb	r3, r3
 8005076:	75bb      	strb	r3, [r7, #22]
   dataToSend[3] = page_addr & 0xff;
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	b2db      	uxtb	r3, r3
 800507c:	75fb      	strb	r3, [r7, #23]
   flash_CsLow(flash);
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	f7ff fec2 	bl	8004e08 <flash_CsLow>
   flash_WriteCommand(flash, dataToSend, 4);
 8005084:	f107 0314 	add.w	r3, r7, #20
 8005088:	2204      	movs	r2, #4
 800508a:	4619      	mov	r1, r3
 800508c:	68f8      	ldr	r0, [r7, #12]
 800508e:	f7ff fedb 	bl	8004e48 <flash_WriteCommand>
   flash_WriteData(flash, data, PAGE_SIZE);
 8005092:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005096:	6879      	ldr	r1, [r7, #4]
 8005098:	68f8      	ldr	r0, [r7, #12]
 800509a:	f7ff fefd 	bl	8004e98 <flash_WriteData>
   flash_CsHigh(flash);
 800509e:	68f8      	ldr	r0, [r7, #12]
 80050a0:	f7ff fec2 	bl	8004e28 <flash_CsHigh>
   flash_WaitForEndProcess(flash);
 80050a4:	68f8      	ldr	r0, [r7, #12]
 80050a6:	f7ff ffa1 	bl	8004fec <flash_WaitForEndProcess>
}
 80050aa:	bf00      	nop
 80050ac:	3718      	adds	r7, #24
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}

080050b2 <flash_ReadPage>:
void flash_ReadPage(flash_t *flash, uint32_t page_addr, uint8_t *data)
{
 80050b2:	b580      	push	{r7, lr}
 80050b4:	b086      	sub	sp, #24
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	60f8      	str	r0, [r7, #12]
 80050ba:	60b9      	str	r1, [r7, #8]
 80050bc:	607a      	str	r2, [r7, #4]
   uint8_t dataToSend[4];
   page_addr *= PAGE_SIZE;
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	021b      	lsls	r3, r3, #8
 80050c2:	60bb      	str	r3, [r7, #8]
   flash_WaitForEndProcess(flash);
 80050c4:	68f8      	ldr	r0, [r7, #12]
 80050c6:	f7ff ff91 	bl	8004fec <flash_WaitForEndProcess>
   flash_SetWELBit_and_WaitForEndProcess(flash);
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	f7ff ffa3 	bl	8005016 <flash_SetWELBit_and_WaitForEndProcess>
   dataToSend[0] = READ_DATA;
 80050d0:	2303      	movs	r3, #3
 80050d2:	753b      	strb	r3, [r7, #20]
   dataToSend[1] = (page_addr >> 16) & 0xff;
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	0c1b      	lsrs	r3, r3, #16
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	757b      	strb	r3, [r7, #21]
   dataToSend[2] = (page_addr >> 8) & 0xff;
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	0a1b      	lsrs	r3, r3, #8
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	75bb      	strb	r3, [r7, #22]
   dataToSend[3] = page_addr & 0xff;
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	75fb      	strb	r3, [r7, #23]
   flash_CsLow(flash);
 80050ea:	68f8      	ldr	r0, [r7, #12]
 80050ec:	f7ff fe8c 	bl	8004e08 <flash_CsLow>
   flash_WriteCommand(flash, dataToSend, 4);
 80050f0:	f107 0314 	add.w	r3, r7, #20
 80050f4:	2204      	movs	r2, #4
 80050f6:	4619      	mov	r1, r3
 80050f8:	68f8      	ldr	r0, [r7, #12]
 80050fa:	f7ff fea5 	bl	8004e48 <flash_WriteCommand>
   flash_ReadData(flash, data, PAGE_SIZE);
 80050fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005102:	6879      	ldr	r1, [r7, #4]
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f7ff feda 	bl	8004ebe <flash_ReadData>
   flash_CsHigh(flash);
 800510a:	68f8      	ldr	r0, [r7, #12]
 800510c:	f7ff fe8c 	bl	8004e28 <flash_CsHigh>
   flash_WaitForEndProcess(flash);
 8005110:	68f8      	ldr	r0, [r7, #12]
 8005112:	f7ff ff6b 	bl	8004fec <flash_WaitForEndProcess>
   flash_WaitForEndProcess(flash);
 8005116:	68f8      	ldr	r0, [r7, #12]
 8005118:	f7ff ff68 	bl	8004fec <flash_WaitForEndProcess>
}
 800511c:	bf00      	nop
 800511e:	3718      	adds	r7, #24
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <flash_ChipErase>:
   flash_WriteCommand(flash, dataToSend, 4);
   flash_CsHigh(flash);
   flash_WaitForEndProcess(flash);
}
void flash_ChipErase(flash_t *flash)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
   uint8_t Temp = CHIP_ERASE;
 800512c:	23c7      	movs	r3, #199	; 0xc7
 800512e:	73fb      	strb	r3, [r7, #15]
   flash_WaitForEndProcess(flash);
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f7ff ff5b 	bl	8004fec <flash_WaitForEndProcess>
   flash_SetWELBit_and_WaitForEndProcess(flash);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f7ff ff6d 	bl	8005016 <flash_SetWELBit_and_WaitForEndProcess>
   flash_CsLow(flash);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f7ff fe63 	bl	8004e08 <flash_CsLow>
   flash_WriteCommand(flash, &Temp, 1);
 8005142:	f107 030f 	add.w	r3, r7, #15
 8005146:	2201      	movs	r2, #1
 8005148:	4619      	mov	r1, r3
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f7ff fe7c 	bl	8004e48 <flash_WriteCommand>
   flash_CsHigh(flash);
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f7ff fe69 	bl	8004e28 <flash_CsHigh>
   flash_WaitForEndProcess(flash);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f7ff ff48 	bl	8004fec <flash_WaitForEndProcess>
}
 800515c:	bf00      	nop
 800515e:	3710      	adds	r7, #16
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <flash_Init>:
void flash_Init(flash_t *flash, SPI_HandleTypeDef *spi, GPIO_TypeDef *cs_port, uint16_t cs_pin)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
 8005170:	807b      	strh	r3, [r7, #2]
   flash->flash_spi    = spi;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	68ba      	ldr	r2, [r7, #8]
 8005176:	601a      	str	r2, [r3, #0]
   flash->flash_CsPort = cs_port;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	60da      	str	r2, [r3, #12]
   flash->flash_CsPin  = cs_pin;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	887a      	ldrh	r2, [r7, #2]
 8005182:	811a      	strh	r2, [r3, #8]
   flash_Reset(flash);
 8005184:	68f8      	ldr	r0, [r7, #12]
 8005186:	f7ff fecc 	bl	8004f22 <flash_Reset>
   flash_ReadID(flash);
 800518a:	68f8      	ldr	r0, [r7, #12]
 800518c:	f7ff ff06 	bl	8004f9c <flash_ReadID>
}
 8005190:	bf00      	nop
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <fram_CsLow>:
#include "fram.h"
#include "gpio.h"
#include "iwdg.h"
#include "spi.h"
void fram_CsLow(fram_t *fram)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
   HAL_GPIO_WritePin(fram->cs_port, fram->cs_pin, 0);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6898      	ldr	r0, [r3, #8]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	8a5b      	ldrh	r3, [r3, #18]
 80051a8:	2200      	movs	r2, #0
 80051aa:	4619      	mov	r1, r3
 80051ac:	f009 fe80 	bl	800eeb0 <HAL_GPIO_WritePin>
}
 80051b0:	bf00      	nop
 80051b2:	3708      	adds	r7, #8
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <fram_CsHigh>:
void fram_CsHigh(fram_t *fram)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
   HAL_GPIO_WritePin(fram->cs_port, fram->cs_pin, 1);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6898      	ldr	r0, [r3, #8]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	8a5b      	ldrh	r3, [r3, #18]
 80051c8:	2201      	movs	r2, #1
 80051ca:	4619      	mov	r1, r3
 80051cc:	f009 fe70 	bl	800eeb0 <HAL_GPIO_WritePin>
}
 80051d0:	bf00      	nop
 80051d2:	3708      	adds	r7, #8
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <fram_SetWELBit>:
void fram_SetWELBit(fram_t *fram)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
   uint8_t com = WREN;
 80051e0:	2306      	movs	r3, #6
 80051e2:	73fb      	strb	r3, [r7, #15]
   fram_CsLow(fram);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f7ff ffd7 	bl	8005198 <fram_CsLow>
   HAL_SPI_Transmit(fram->fram_spi, &com, 1, 1000);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6818      	ldr	r0, [r3, #0]
 80051ee:	f107 010f 	add.w	r1, r7, #15
 80051f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80051f6:	2201      	movs	r2, #1
 80051f8:	f00c f85f 	bl	80112ba <HAL_SPI_Transmit>
   fram_CsHigh(fram);
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f7ff ffdb 	bl	80051b8 <fram_CsHigh>
   HAL_IWDG_Refresh(&hiwdg);
 8005202:	4805      	ldr	r0, [pc, #20]	; (8005218 <fram_SetWELBit+0x40>)
 8005204:	f009 fed5 	bl	800efb2 <HAL_IWDG_Refresh>
   osDelay(100);
 8005208:	2064      	movs	r0, #100	; 0x64
 800520a:	f010 fb8b 	bl	8015924 <osDelay>
}
 800520e:	bf00      	nop
 8005210:	3710      	adds	r7, #16
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	200040c8 	.word	0x200040c8

0800521c <fram_SetProtectedBlocs>:
void fram_SetProtectedBlocs(fram_t *fram, uint8_t blocs)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	460b      	mov	r3, r1
 8005226:	70fb      	strb	r3, [r7, #3]
   if(blocs > 3)
 8005228:	78fb      	ldrb	r3, [r7, #3]
 800522a:	2b03      	cmp	r3, #3
 800522c:	d901      	bls.n	8005232 <fram_SetProtectedBlocs+0x16>
   {
      blocs = 3;
 800522e:	2303      	movs	r3, #3
 8005230:	70fb      	strb	r3, [r7, #3]
   }
   uint8_t data[2];
   data[0] = WRSR;
 8005232:	2301      	movs	r3, #1
 8005234:	733b      	strb	r3, [r7, #12]
   data[1] = (blocs << 2);
 8005236:	78fb      	ldrb	r3, [r7, #3]
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	b2db      	uxtb	r3, r3
 800523c:	737b      	strb	r3, [r7, #13]
   fram_SetWELBit(fram);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f7ff ffca 	bl	80051d8 <fram_SetWELBit>
   fram_CsLow(fram);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f7ff ffa7 	bl	8005198 <fram_CsLow>
   HAL_SPI_Transmit(fram->fram_spi, data, 2, 1000);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6818      	ldr	r0, [r3, #0]
 800524e:	f107 010c 	add.w	r1, r7, #12
 8005252:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005256:	2202      	movs	r2, #2
 8005258:	f00c f82f 	bl	80112ba <HAL_SPI_Transmit>
   fram_CsHigh(fram);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f7ff ffab 	bl	80051b8 <fram_CsHigh>
}
 8005262:	bf00      	nop
 8005264:	3710      	adds	r7, #16
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}

0800526a <fram_Read32>:
uint32_t fram_Read32(fram_t *fram, uint32_t Address)
{
 800526a:	b580      	push	{r7, lr}
 800526c:	b084      	sub	sp, #16
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
 8005272:	6039      	str	r1, [r7, #0]
   uint8_t Temp[4];
   fram_Read(fram, Address, Temp, 4);
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	b299      	uxth	r1, r3
 8005278:	f107 020c 	add.w	r2, r7, #12
 800527c:	2304      	movs	r3, #4
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 f8c4 	bl	800540c <fram_Read>
   return ((Temp[0] << 24) | (Temp[1] << 16) | (Temp[2] << 8) | Temp[3]);
 8005284:	7b3b      	ldrb	r3, [r7, #12]
 8005286:	061a      	lsls	r2, r3, #24
 8005288:	7b7b      	ldrb	r3, [r7, #13]
 800528a:	041b      	lsls	r3, r3, #16
 800528c:	431a      	orrs	r2, r3
 800528e:	7bbb      	ldrb	r3, [r7, #14]
 8005290:	021b      	lsls	r3, r3, #8
 8005292:	4313      	orrs	r3, r2
 8005294:	7bfa      	ldrb	r2, [r7, #15]
 8005296:	4313      	orrs	r3, r2
}
 8005298:	4618      	mov	r0, r3
 800529a:	3710      	adds	r7, #16
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <fram_Write32>:
void fram_Write32(fram_t *fram, uint32_t Address, uint32_t Data)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b086      	sub	sp, #24
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]
   uint8_t Temp[4];
   Temp[0] = ((Data >> 24) & 0xff);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	0e1b      	lsrs	r3, r3, #24
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	753b      	strb	r3, [r7, #20]
   Temp[1] = ((Data >> 16) & 0xff);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	0c1b      	lsrs	r3, r3, #16
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	757b      	strb	r3, [r7, #21]
   Temp[2] = ((Data >> 8) & 0xff);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	0a1b      	lsrs	r3, r3, #8
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	75bb      	strb	r3, [r7, #22]
   Temp[3] = ((Data >> 0) & 0xff);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	75fb      	strb	r3, [r7, #23]
   fram_Write(fram, Address, Temp, 4);
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	b299      	uxth	r1, r3
 80052ce:	f107 0214 	add.w	r2, r7, #20
 80052d2:	2304      	movs	r3, #4
 80052d4:	68f8      	ldr	r0, [r7, #12]
 80052d6:	f000 f86a 	bl	80053ae <fram_Write>
}
 80052da:	bf00      	nop
 80052dc:	3718      	adds	r7, #24
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <fram_ChipErase>:
void fram_ChipErase(fram_t *fram)
{
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b084      	sub	sp, #16
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
   uint8_t Temp = 0;
 80052ea:	2300      	movs	r3, #0
 80052ec:	72fb      	strb	r3, [r7, #11]
   for(int i = 0; i < 8 * 1024; i++)
 80052ee:	2300      	movs	r3, #0
 80052f0:	60fb      	str	r3, [r7, #12]
 80052f2:	e00a      	b.n	800530a <fram_ChipErase+0x28>
   {
      fram_Write(fram, i, &Temp, 1);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	b299      	uxth	r1, r3
 80052f8:	f107 020b 	add.w	r2, r7, #11
 80052fc:	2301      	movs	r3, #1
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 f855 	bl	80053ae <fram_Write>
   for(int i = 0; i < 8 * 1024; i++)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	3301      	adds	r3, #1
 8005308:	60fb      	str	r3, [r7, #12]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005310:	dbf0      	blt.n	80052f4 <fram_ChipErase+0x12>
   }
}
 8005312:	bf00      	nop
 8005314:	bf00      	nop
 8005316:	3710      	adds	r7, #16
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <fram_Increment32>:
FramStatus_TypeDef fram_Increment32(fram_t *fram, uint32_t Address)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
   uint32_t Temp = 0, Confirm = 0;
 8005326:	2300      	movs	r3, #0
 8005328:	60fb      	str	r3, [r7, #12]
 800532a:	2300      	movs	r3, #0
 800532c:	60bb      	str	r3, [r7, #8]
   Temp = fram_Read32(fram, Address);
 800532e:	6839      	ldr	r1, [r7, #0]
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f7ff ff9a 	bl	800526a <fram_Read32>
 8005336:	60f8      	str	r0, [r7, #12]
   Temp++;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	3301      	adds	r3, #1
 800533c:	60fb      	str	r3, [r7, #12]
   fram_Write32(fram, Address, Temp);
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	6839      	ldr	r1, [r7, #0]
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f7ff ffac 	bl	80052a0 <fram_Write32>
   Confirm = fram_Read32(fram, Address);
 8005348:	6839      	ldr	r1, [r7, #0]
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f7ff ff8d 	bl	800526a <fram_Read32>
 8005350:	60b8      	str	r0, [r7, #8]
   if(Temp == Confirm)
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	429a      	cmp	r2, r3
 8005358:	d101      	bne.n	800535e <fram_Increment32+0x42>
   {
      return FRAM_OK;
 800535a:	2301      	movs	r3, #1
 800535c:	e000      	b.n	8005360 <fram_Increment32+0x44>
   }
   else
   {
      return FRAM_ERROR;
 800535e:	2300      	movs	r3, #0
   }
}
 8005360:	4618      	mov	r0, r3
 8005362:	3710      	adds	r7, #16
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <fram_ReadSreg>:
uint8_t fram_ReadSreg(fram_t *fram)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
   fram_CsLow(fram);
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f7ff ff11 	bl	8005198 <fram_CsLow>
   uint8_t _sreg;
   uint8_t com = RDSR;
 8005376:	2305      	movs	r3, #5
 8005378:	73bb      	strb	r3, [r7, #14]
   HAL_SPI_Transmit(fram->fram_spi, &com, 1, 1000);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6818      	ldr	r0, [r3, #0]
 800537e:	f107 010e 	add.w	r1, r7, #14
 8005382:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005386:	2201      	movs	r2, #1
 8005388:	f00b ff97 	bl	80112ba <HAL_SPI_Transmit>
   HAL_SPI_Receive(fram->fram_spi, &_sreg, 1, 1000);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6818      	ldr	r0, [r3, #0]
 8005390:	f107 010f 	add.w	r1, r7, #15
 8005394:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005398:	2201      	movs	r2, #1
 800539a:	f00c f8fc 	bl	8011596 <HAL_SPI_Receive>
   fram_CsHigh(fram);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f7ff ff0a 	bl	80051b8 <fram_CsHigh>
   return _sreg;
 80053a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3710      	adds	r7, #16
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}

080053ae <fram_Write>:
void fram_Write(fram_t *fram, uint16_t addr, uint8_t *buff, uint16_t length)
{
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b086      	sub	sp, #24
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	60f8      	str	r0, [r7, #12]
 80053b6:	607a      	str	r2, [r7, #4]
 80053b8:	461a      	mov	r2, r3
 80053ba:	460b      	mov	r3, r1
 80053bc:	817b      	strh	r3, [r7, #10]
 80053be:	4613      	mov	r3, r2
 80053c0:	813b      	strh	r3, [r7, #8]
   fram_SetWELBit(fram);
 80053c2:	68f8      	ldr	r0, [r7, #12]
 80053c4:	f7ff ff08 	bl	80051d8 <fram_SetWELBit>
   uint8_t data[3];
   data[0] = WRITE;
 80053c8:	2302      	movs	r3, #2
 80053ca:	753b      	strb	r3, [r7, #20]
   data[1] = (addr & 0xff) >> 8;
 80053cc:	2300      	movs	r3, #0
 80053ce:	757b      	strb	r3, [r7, #21]
   data[2] = addr & 0xff;
 80053d0:	897b      	ldrh	r3, [r7, #10]
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	75bb      	strb	r3, [r7, #22]
   fram_CsLow(fram);
 80053d6:	68f8      	ldr	r0, [r7, #12]
 80053d8:	f7ff fede 	bl	8005198 <fram_CsLow>
   HAL_SPI_Transmit(fram->fram_spi, data, 3, 1000);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6818      	ldr	r0, [r3, #0]
 80053e0:	f107 0114 	add.w	r1, r7, #20
 80053e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80053e8:	2203      	movs	r2, #3
 80053ea:	f00b ff66 	bl	80112ba <HAL_SPI_Transmit>
   HAL_SPI_Transmit(fram->fram_spi, buff, length, 1000);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6818      	ldr	r0, [r3, #0]
 80053f2:	893a      	ldrh	r2, [r7, #8]
 80053f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80053f8:	6879      	ldr	r1, [r7, #4]
 80053fa:	f00b ff5e 	bl	80112ba <HAL_SPI_Transmit>
   fram_CsHigh(fram);
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f7ff feda 	bl	80051b8 <fram_CsHigh>
}
 8005404:	bf00      	nop
 8005406:	3718      	adds	r7, #24
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <fram_Read>:
void fram_Read(fram_t *fram, uint16_t addr, uint8_t *buff, uint16_t length)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b086      	sub	sp, #24
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	607a      	str	r2, [r7, #4]
 8005416:	461a      	mov	r2, r3
 8005418:	460b      	mov	r3, r1
 800541a:	817b      	strh	r3, [r7, #10]
 800541c:	4613      	mov	r3, r2
 800541e:	813b      	strh	r3, [r7, #8]
   fram_SetWELBit(fram);
 8005420:	68f8      	ldr	r0, [r7, #12]
 8005422:	f7ff fed9 	bl	80051d8 <fram_SetWELBit>
   uint8_t data[3];
   data[0] = READ;
 8005426:	2303      	movs	r3, #3
 8005428:	753b      	strb	r3, [r7, #20]
   data[1] = (addr & 0xff) >> 8;
 800542a:	2300      	movs	r3, #0
 800542c:	757b      	strb	r3, [r7, #21]
   data[2] = addr & 0xff;
 800542e:	897b      	ldrh	r3, [r7, #10]
 8005430:	b2db      	uxtb	r3, r3
 8005432:	75bb      	strb	r3, [r7, #22]
   fram_CsLow(fram);
 8005434:	68f8      	ldr	r0, [r7, #12]
 8005436:	f7ff feaf 	bl	8005198 <fram_CsLow>
   HAL_SPI_Transmit(fram->fram_spi, data, 3, 1000);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6818      	ldr	r0, [r3, #0]
 800543e:	f107 0114 	add.w	r1, r7, #20
 8005442:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005446:	2203      	movs	r2, #3
 8005448:	f00b ff37 	bl	80112ba <HAL_SPI_Transmit>
   HAL_SPI_Receive(fram->fram_spi, buff, length, 1000);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6818      	ldr	r0, [r3, #0]
 8005450:	893a      	ldrh	r2, [r7, #8]
 8005452:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005456:	6879      	ldr	r1, [r7, #4]
 8005458:	f00c f89d 	bl	8011596 <HAL_SPI_Receive>
   fram_CsHigh(fram);
 800545c:	68f8      	ldr	r0, [r7, #12]
 800545e:	f7ff feab 	bl	80051b8 <fram_CsHigh>
}
 8005462:	bf00      	nop
 8005464:	3718      	adds	r7, #24
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}

0800546a <fram_ReadID>:
uint32_t fram_ReadID(fram_t *fram)
{
 800546a:	b580      	push	{r7, lr}
 800546c:	b084      	sub	sp, #16
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
   uint8_t com, id[4];
   com = RDID;
 8005472:	239f      	movs	r3, #159	; 0x9f
 8005474:	73fb      	strb	r3, [r7, #15]
   fram_CsLow(fram);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f7ff fe8e 	bl	8005198 <fram_CsLow>
   HAL_SPI_Transmit(fram->fram_spi, &com, 1, 1000);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6818      	ldr	r0, [r3, #0]
 8005480:	f107 010f 	add.w	r1, r7, #15
 8005484:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005488:	2201      	movs	r2, #1
 800548a:	f00b ff16 	bl	80112ba <HAL_SPI_Transmit>
   HAL_SPI_Receive(fram->fram_spi, id, 4, 1000);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6818      	ldr	r0, [r3, #0]
 8005492:	f107 0108 	add.w	r1, r7, #8
 8005496:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800549a:	2204      	movs	r2, #4
 800549c:	f00c f87b 	bl	8011596 <HAL_SPI_Receive>
   fram_CsHigh(fram);
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f7ff fe89 	bl	80051b8 <fram_CsHigh>
   return ((id[0] << 24) | (id[1] << 16) | (id[2] << 8) | id[3]);
 80054a6:	7a3b      	ldrb	r3, [r7, #8]
 80054a8:	061a      	lsls	r2, r3, #24
 80054aa:	7a7b      	ldrb	r3, [r7, #9]
 80054ac:	041b      	lsls	r3, r3, #16
 80054ae:	431a      	orrs	r2, r3
 80054b0:	7abb      	ldrb	r3, [r7, #10]
 80054b2:	021b      	lsls	r3, r3, #8
 80054b4:	4313      	orrs	r3, r2
 80054b6:	7afa      	ldrb	r2, [r7, #11]
 80054b8:	4313      	orrs	r3, r2
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3710      	adds	r7, #16
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}

080054c2 <fram_Init>:
void fram_Init(fram_t *fram, SPI_HandleTypeDef *spi, GPIO_TypeDef *_hold_port, GPIO_TypeDef *_cs_port, GPIO_TypeDef *_wp_port, uint16_t _hold_pin,
               uint16_t _cs_pin, uint16_t _wp_pin)
{
 80054c2:	b580      	push	{r7, lr}
 80054c4:	b084      	sub	sp, #16
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	60f8      	str	r0, [r7, #12]
 80054ca:	60b9      	str	r1, [r7, #8]
 80054cc:	607a      	str	r2, [r7, #4]
 80054ce:	603b      	str	r3, [r7, #0]
   fram->fram_spi  = spi;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	601a      	str	r2, [r3, #0]
   fram->hold_port = _hold_port;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	605a      	str	r2, [r3, #4]
   fram->hold_pin  = _hold_pin;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	8bba      	ldrh	r2, [r7, #28]
 80054e0:	821a      	strh	r2, [r3, #16]
   fram->cs_port   = _cs_port;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	683a      	ldr	r2, [r7, #0]
 80054e6:	609a      	str	r2, [r3, #8]
   fram->cs_pin    = _cs_pin;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	8c3a      	ldrh	r2, [r7, #32]
 80054ec:	825a      	strh	r2, [r3, #18]
   fram->wp_port   = _wp_port;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	69ba      	ldr	r2, [r7, #24]
 80054f2:	60da      	str	r2, [r3, #12]
   fram->wp_pin    = _wp_pin;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80054f8:	829a      	strh	r2, [r3, #20]
   HAL_GPIO_WritePin(fram->hold_port, fram->hold_pin, 1);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6858      	ldr	r0, [r3, #4]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	8a1b      	ldrh	r3, [r3, #16]
 8005502:	2201      	movs	r2, #1
 8005504:	4619      	mov	r1, r3
 8005506:	f009 fcd3 	bl	800eeb0 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(fram->wp_port, fram->wp_pin, 1);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	68d8      	ldr	r0, [r3, #12]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	8a9b      	ldrh	r3, [r3, #20]
 8005512:	2201      	movs	r2, #1
 8005514:	4619      	mov	r1, r3
 8005516:	f009 fccb 	bl	800eeb0 <HAL_GPIO_WritePin>
   fram_SetProtectedBlocs(fram, 0);
 800551a:	2100      	movs	r1, #0
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	f7ff fe7d 	bl	800521c <fram_SetProtectedBlocs>
   fram->sreg   = fram_ReadSreg(fram);
 8005522:	68f8      	ldr	r0, [r7, #12]
 8005524:	f7ff ff20 	bl	8005368 <fram_ReadSreg>
 8005528:	4603      	mov	r3, r0
 800552a:	461a      	mov	r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	759a      	strb	r2, [r3, #22]
   fram->framID = fram_ReadID(fram);
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	f7ff ff9a 	bl	800546a <fram_ReadID>
 8005536:	4602      	mov	r2, r0
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	619a      	str	r2, [r3, #24]
}
 800553c:	bf00      	nop
 800553e:	3710      	adds	r7, #16
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <MX_FREERTOS_Init>:
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	af00      	add	r7, sp, #0
   /* USER CODE BEGIN Init */

   /* USER CODE END Init */
   /* Create the mutex(es) */
   /* creation of ScreensDcMutex */
   ScreensDcMutexHandle = osMutexNew(&ScreensDcMutex_attributes);
 8005548:	4880      	ldr	r0, [pc, #512]	; (800574c <MX_FREERTOS_Init+0x208>)
 800554a:	f010 fbb3 	bl	8015cb4 <osMutexNew>
 800554e:	4603      	mov	r3, r0
 8005550:	4a7f      	ldr	r2, [pc, #508]	; (8005750 <MX_FREERTOS_Init+0x20c>)
 8005552:	6013      	str	r3, [r2, #0]

   /* creation of SSD1306Mutex */
   SSD1306MutexHandle = osMutexNew(&SSD1306Mutex_attributes);
 8005554:	487f      	ldr	r0, [pc, #508]	; (8005754 <MX_FREERTOS_Init+0x210>)
 8005556:	f010 fbad 	bl	8015cb4 <osMutexNew>
 800555a:	4603      	mov	r3, r0
 800555c:	4a7e      	ldr	r2, [pc, #504]	; (8005758 <MX_FREERTOS_Init+0x214>)
 800555e:	6013      	str	r3, [r2, #0]

   /* creation of SPI1Mutex */
   SPI1MutexHandle = osMutexNew(&SPI1Mutex_attributes);
 8005560:	487e      	ldr	r0, [pc, #504]	; (800575c <MX_FREERTOS_Init+0x218>)
 8005562:	f010 fba7 	bl	8015cb4 <osMutexNew>
 8005566:	4603      	mov	r3, r0
 8005568:	4a7d      	ldr	r2, [pc, #500]	; (8005760 <MX_FREERTOS_Init+0x21c>)
 800556a:	6013      	str	r3, [r2, #0]

   /* creation of E_PAPIERMutex */
   E_PAPIERMutexHandle = osMutexNew(&E_PAPIERMutex_attributes);
 800556c:	487d      	ldr	r0, [pc, #500]	; (8005764 <MX_FREERTOS_Init+0x220>)
 800556e:	f010 fba1 	bl	8015cb4 <osMutexNew>
 8005572:	4603      	mov	r3, r0
 8005574:	4a7c      	ldr	r2, [pc, #496]	; (8005768 <MX_FREERTOS_Init+0x224>)
 8005576:	6013      	str	r3, [r2, #0]

   /* creation of BME280Mutex */
   BME280MutexHandle = osMutexNew(&BME280Mutex_attributes);
 8005578:	487c      	ldr	r0, [pc, #496]	; (800576c <MX_FREERTOS_Init+0x228>)
 800557a:	f010 fb9b 	bl	8015cb4 <osMutexNew>
 800557e:	4603      	mov	r3, r0
 8005580:	4a7b      	ldr	r2, [pc, #492]	; (8005770 <MX_FREERTOS_Init+0x22c>)
 8005582:	6013      	str	r3, [r2, #0]

   /* creation of MenuMutex */
   MenuMutexHandle = osMutexNew(&MenuMutex_attributes);
 8005584:	487b      	ldr	r0, [pc, #492]	; (8005774 <MX_FREERTOS_Init+0x230>)
 8005586:	f010 fb95 	bl	8015cb4 <osMutexNew>
 800558a:	4603      	mov	r3, r0
 800558c:	4a7a      	ldr	r2, [pc, #488]	; (8005778 <MX_FREERTOS_Init+0x234>)
 800558e:	6013      	str	r3, [r2, #0]

   /* creation of RTCMutex */
   RTCMutexHandle = osMutexNew(&RTCMutex_attributes);
 8005590:	487a      	ldr	r0, [pc, #488]	; (800577c <MX_FREERTOS_Init+0x238>)
 8005592:	f010 fb8f 	bl	8015cb4 <osMutexNew>
 8005596:	4603      	mov	r3, r0
 8005598:	4a79      	ldr	r2, [pc, #484]	; (8005780 <MX_FREERTOS_Init+0x23c>)
 800559a:	6013      	str	r3, [r2, #0]

   /* creation of EncoderMutex */
   EncoderMutexHandle = osMutexNew(&EncoderMutex_attributes);
 800559c:	4879      	ldr	r0, [pc, #484]	; (8005784 <MX_FREERTOS_Init+0x240>)
 800559e:	f010 fb89 	bl	8015cb4 <osMutexNew>
 80055a2:	4603      	mov	r3, r0
 80055a4:	4a78      	ldr	r2, [pc, #480]	; (8005788 <MX_FREERTOS_Init+0x244>)
 80055a6:	6013      	str	r3, [r2, #0]
   /* add semaphores, ... */
   /* USER CODE END RTOS_SEMAPHORES */

   /* Create the timer(s) */
   /* creation of MenuTimer */
   MenuTimerHandle = osTimerNew(MenuTimerCallback, osTimerOnce, NULL, &MenuTimer_attributes);
 80055a8:	4b78      	ldr	r3, [pc, #480]	; (800578c <MX_FREERTOS_Init+0x248>)
 80055aa:	2200      	movs	r2, #0
 80055ac:	2100      	movs	r1, #0
 80055ae:	4878      	ldr	r0, [pc, #480]	; (8005790 <MX_FREERTOS_Init+0x24c>)
 80055b0:	f010 f9e8 	bl	8015984 <osTimerNew>
 80055b4:	4603      	mov	r3, r0
 80055b6:	4a77      	ldr	r2, [pc, #476]	; (8005794 <MX_FREERTOS_Init+0x250>)
 80055b8:	6013      	str	r3, [r2, #0]
   /* start timers, add new ones, ... */
   /* USER CODE END RTOS_TIMERS */

   /* Create the queue(s) */
   /* creation of MeasurmentQueue */
   MeasurmentQueueHandle = osMessageQueueNew(16, sizeof(MV_TypeDef), &MeasurmentQueue_attributes);
 80055ba:	4a77      	ldr	r2, [pc, #476]	; (8005798 <MX_FREERTOS_Init+0x254>)
 80055bc:	2130      	movs	r1, #48	; 0x30
 80055be:	2010      	movs	r0, #16
 80055c0:	f010 fc86 	bl	8015ed0 <osMessageQueueNew>
 80055c4:	4603      	mov	r3, r0
 80055c6:	4a75      	ldr	r2, [pc, #468]	; (800579c <MX_FREERTOS_Init+0x258>)
 80055c8:	6013      	str	r3, [r2, #0]

   /* creation of MoonPhaseQueue */
   MoonPhaseQueueHandle = osMessageQueueNew(16, sizeof(double), &MoonPhaseQueue_attributes);
 80055ca:	4a75      	ldr	r2, [pc, #468]	; (80057a0 <MX_FREERTOS_Init+0x25c>)
 80055cc:	2108      	movs	r1, #8
 80055ce:	2010      	movs	r0, #16
 80055d0:	f010 fc7e 	bl	8015ed0 <osMessageQueueNew>
 80055d4:	4603      	mov	r3, r0
 80055d6:	4a73      	ldr	r2, [pc, #460]	; (80057a4 <MX_FREERTOS_Init+0x260>)
 80055d8:	6013      	str	r3, [r2, #0]

   /* creation of ChartQueue */
   ChartQueueHandle = osMessageQueueNew(16, sizeof(ChartDateAndType_TypeDef), &ChartQueue_attributes);
 80055da:	4a73      	ldr	r2, [pc, #460]	; (80057a8 <MX_FREERTOS_Init+0x264>)
 80055dc:	2106      	movs	r1, #6
 80055de:	2010      	movs	r0, #16
 80055e0:	f010 fc76 	bl	8015ed0 <osMessageQueueNew>
 80055e4:	4603      	mov	r3, r0
 80055e6:	4a71      	ldr	r2, [pc, #452]	; (80057ac <MX_FREERTOS_Init+0x268>)
 80055e8:	6013      	str	r3, [r2, #0]

   /* creation of DataToSaveQueue */
   DataToSaveQueueHandle = osMessageQueueNew(16, sizeof(MV_TypeDef), &DataToSaveQueue_attributes);
 80055ea:	4a71      	ldr	r2, [pc, #452]	; (80057b0 <MX_FREERTOS_Init+0x26c>)
 80055ec:	2130      	movs	r1, #48	; 0x30
 80055ee:	2010      	movs	r0, #16
 80055f0:	f010 fc6e 	bl	8015ed0 <osMessageQueueNew>
 80055f4:	4603      	mov	r3, r0
 80055f6:	4a6f      	ldr	r2, [pc, #444]	; (80057b4 <MX_FREERTOS_Init+0x270>)
 80055f8:	6013      	str	r3, [r2, #0]

   /* creation of RfpMessageQueue */
   RfpMessageQueueHandle = osMessageQueueNew(16, sizeof(RfpMessage_TypeDef), &RfpMessageQueue_attributes);
 80055fa:	4a6f      	ldr	r2, [pc, #444]	; (80057b8 <MX_FREERTOS_Init+0x274>)
 80055fc:	2104      	movs	r1, #4
 80055fe:	2010      	movs	r0, #16
 8005600:	f010 fc66 	bl	8015ed0 <osMessageQueueNew>
 8005604:	4603      	mov	r3, r0
 8005606:	4a6d      	ldr	r2, [pc, #436]	; (80057bc <MX_FREERTOS_Init+0x278>)
 8005608:	6013      	str	r3, [r2, #0]

   /* creation of ExternalMeasurmentQueue */
   ExternalMeasurmentQueueHandle = osMessageQueueNew(16, sizeof(MV_TypeDef), &ExternalMeasurmentQueue_attributes);
 800560a:	4a6d      	ldr	r2, [pc, #436]	; (80057c0 <MX_FREERTOS_Init+0x27c>)
 800560c:	2130      	movs	r1, #48	; 0x30
 800560e:	2010      	movs	r0, #16
 8005610:	f010 fc5e 	bl	8015ed0 <osMessageQueueNew>
 8005614:	4603      	mov	r3, r0
 8005616:	4a6b      	ldr	r2, [pc, #428]	; (80057c4 <MX_FREERTOS_Init+0x280>)
 8005618:	6013      	str	r3, [r2, #0]

   /* creation of SunriseQueue */
   SunriseQueueHandle = osMessageQueueNew(16, sizeof(Sunrise_TypeDef), &SunriseQueue_attributes);
 800561a:	4a6b      	ldr	r2, [pc, #428]	; (80057c8 <MX_FREERTOS_Init+0x284>)
 800561c:	2118      	movs	r1, #24
 800561e:	2010      	movs	r0, #16
 8005620:	f010 fc56 	bl	8015ed0 <osMessageQueueNew>
 8005624:	4603      	mov	r3, r0
 8005626:	4a69      	ldr	r2, [pc, #420]	; (80057cc <MX_FREERTOS_Init+0x288>)
 8005628:	6013      	str	r3, [r2, #0]

   /* creation of WS2812Queue */
   WS2812QueueHandle = osMessageQueueNew(16, sizeof(Sunrise_TypeDef), &WS2812Queue_attributes);
 800562a:	4a69      	ldr	r2, [pc, #420]	; (80057d0 <MX_FREERTOS_Init+0x28c>)
 800562c:	2118      	movs	r1, #24
 800562e:	2010      	movs	r0, #16
 8005630:	f010 fc4e 	bl	8015ed0 <osMessageQueueNew>
 8005634:	4603      	mov	r3, r0
 8005636:	4a67      	ldr	r2, [pc, #412]	; (80057d4 <MX_FREERTOS_Init+0x290>)
 8005638:	6013      	str	r3, [r2, #0]

   /* creation of WS2812bMeasurmentQueue */
   WS2812bMeasurmentQueueHandle = osMessageQueueNew(16, sizeof(MV_TypeDef), &WS2812bMeasurmentQueue_attributes);
 800563a:	4a67      	ldr	r2, [pc, #412]	; (80057d8 <MX_FREERTOS_Init+0x294>)
 800563c:	2130      	movs	r1, #48	; 0x30
 800563e:	2010      	movs	r0, #16
 8005640:	f010 fc46 	bl	8015ed0 <osMessageQueueNew>
 8005644:	4603      	mov	r3, r0
 8005646:	4a65      	ldr	r2, [pc, #404]	; (80057dc <MX_FREERTOS_Init+0x298>)
 8005648:	6013      	str	r3, [r2, #0]

   /* creation of TimeBreakMeasurmentQueue */
   TimeBreakMeasurmentQueueHandle = osMessageQueueNew(16, sizeof(MV_TypeDef), &TimeBreakMeasurmentQueue_attributes);
 800564a:	4a65      	ldr	r2, [pc, #404]	; (80057e0 <MX_FREERTOS_Init+0x29c>)
 800564c:	2130      	movs	r1, #48	; 0x30
 800564e:	2010      	movs	r0, #16
 8005650:	f010 fc3e 	bl	8015ed0 <osMessageQueueNew>
 8005654:	4603      	mov	r3, r0
 8005656:	4a63      	ldr	r2, [pc, #396]	; (80057e4 <MX_FREERTOS_Init+0x2a0>)
 8005658:	6013      	str	r3, [r2, #0]
   /* add queues, ... */
   /* USER CODE END RTOS_QUEUES */

   /* Create the thread(s) */
   /* creation of defaultTask */
   defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800565a:	4a63      	ldr	r2, [pc, #396]	; (80057e8 <MX_FREERTOS_Init+0x2a4>)
 800565c:	2100      	movs	r1, #0
 800565e:	4863      	ldr	r0, [pc, #396]	; (80057ec <MX_FREERTOS_Init+0x2a8>)
 8005660:	f010 f8ce 	bl	8015800 <osThreadNew>
 8005664:	4603      	mov	r3, r0
 8005666:	4a62      	ldr	r2, [pc, #392]	; (80057f0 <MX_FREERTOS_Init+0x2ac>)
 8005668:	6013      	str	r3, [r2, #0]

   /* creation of InitAndTimeTask */
   InitAndTimeTaskHandle = osThreadNew(StartInitAndTimeTask, NULL, &InitAndTimeTask_attributes);
 800566a:	4a62      	ldr	r2, [pc, #392]	; (80057f4 <MX_FREERTOS_Init+0x2b0>)
 800566c:	2100      	movs	r1, #0
 800566e:	4862      	ldr	r0, [pc, #392]	; (80057f8 <MX_FREERTOS_Init+0x2b4>)
 8005670:	f010 f8c6 	bl	8015800 <osThreadNew>
 8005674:	4603      	mov	r3, r0
 8005676:	4a61      	ldr	r2, [pc, #388]	; (80057fc <MX_FREERTOS_Init+0x2b8>)
 8005678:	6013      	str	r3, [r2, #0]

   /* creation of RfpTask */
   RfpTaskHandle = osThreadNew(StartRfpTask, NULL, &RfpTask_attributes);
 800567a:	4a61      	ldr	r2, [pc, #388]	; (8005800 <MX_FREERTOS_Init+0x2bc>)
 800567c:	2100      	movs	r1, #0
 800567e:	4861      	ldr	r0, [pc, #388]	; (8005804 <MX_FREERTOS_Init+0x2c0>)
 8005680:	f010 f8be 	bl	8015800 <osThreadNew>
 8005684:	4603      	mov	r3, r0
 8005686:	4a60      	ldr	r2, [pc, #384]	; (8005808 <MX_FREERTOS_Init+0x2c4>)
 8005688:	6013      	str	r3, [r2, #0]

   /* creation of MeasurmentTask */
   MeasurmentTaskHandle = osThreadNew(StartMeasurmentTask, NULL, &MeasurmentTask_attributes);
 800568a:	4a60      	ldr	r2, [pc, #384]	; (800580c <MX_FREERTOS_Init+0x2c8>)
 800568c:	2100      	movs	r1, #0
 800568e:	4860      	ldr	r0, [pc, #384]	; (8005810 <MX_FREERTOS_Init+0x2cc>)
 8005690:	f010 f8b6 	bl	8015800 <osThreadNew>
 8005694:	4603      	mov	r3, r0
 8005696:	4a5f      	ldr	r2, [pc, #380]	; (8005814 <MX_FREERTOS_Init+0x2d0>)
 8005698:	6013      	str	r3, [r2, #0]

   /* creation of InternalMeasurmentTask */
   InternalMeasurmentTaskHandle = osThreadNew(StartInternalMeasurmentTask, NULL, &InternalMeasurmentTask_attributes);
 800569a:	4a5f      	ldr	r2, [pc, #380]	; (8005818 <MX_FREERTOS_Init+0x2d4>)
 800569c:	2100      	movs	r1, #0
 800569e:	485f      	ldr	r0, [pc, #380]	; (800581c <MX_FREERTOS_Init+0x2d8>)
 80056a0:	f010 f8ae 	bl	8015800 <osThreadNew>
 80056a4:	4603      	mov	r3, r0
 80056a6:	4a5e      	ldr	r2, [pc, #376]	; (8005820 <MX_FREERTOS_Init+0x2dc>)
 80056a8:	6013      	str	r3, [r2, #0]

   /* creation of MoonPhaseTask */
   MoonPhaseTaskHandle = osThreadNew(StartMoonPhaseTask, NULL, &MoonPhaseTask_attributes);
 80056aa:	4a5e      	ldr	r2, [pc, #376]	; (8005824 <MX_FREERTOS_Init+0x2e0>)
 80056ac:	2100      	movs	r1, #0
 80056ae:	485e      	ldr	r0, [pc, #376]	; (8005828 <MX_FREERTOS_Init+0x2e4>)
 80056b0:	f010 f8a6 	bl	8015800 <osThreadNew>
 80056b4:	4603      	mov	r3, r0
 80056b6:	4a5d      	ldr	r2, [pc, #372]	; (800582c <MX_FREERTOS_Init+0x2e8>)
 80056b8:	6013      	str	r3, [r2, #0]

   /* creation of E_PapierDrawingTask */
   E_PapierDrawingTaskHandle = osThreadNew(StartE_PapierDrawingTask, NULL, &E_PapierDrawingTask_attributes);
 80056ba:	4a5d      	ldr	r2, [pc, #372]	; (8005830 <MX_FREERTOS_Init+0x2ec>)
 80056bc:	2100      	movs	r1, #0
 80056be:	485d      	ldr	r0, [pc, #372]	; (8005834 <MX_FREERTOS_Init+0x2f0>)
 80056c0:	f010 f89e 	bl	8015800 <osThreadNew>
 80056c4:	4603      	mov	r3, r0
 80056c6:	4a5c      	ldr	r2, [pc, #368]	; (8005838 <MX_FREERTOS_Init+0x2f4>)
 80056c8:	6013      	str	r3, [r2, #0]

   /* creation of E_PapierDisplayTask */
   E_PapierDisplayTaskHandle = osThreadNew(StartE_PapierDisplayTask, NULL, &E_PapierDisplayTask_attributes);
 80056ca:	4a5c      	ldr	r2, [pc, #368]	; (800583c <MX_FREERTOS_Init+0x2f8>)
 80056cc:	2100      	movs	r1, #0
 80056ce:	485c      	ldr	r0, [pc, #368]	; (8005840 <MX_FREERTOS_Init+0x2fc>)
 80056d0:	f010 f896 	bl	8015800 <osThreadNew>
 80056d4:	4603      	mov	r3, r0
 80056d6:	4a5b      	ldr	r2, [pc, #364]	; (8005844 <MX_FREERTOS_Init+0x300>)
 80056d8:	6013      	str	r3, [r2, #0]

   /* creation of MenuTask */
   MenuTaskHandle = osThreadNew(StartMenuTask, NULL, &MenuTask_attributes);
 80056da:	4a5b      	ldr	r2, [pc, #364]	; (8005848 <MX_FREERTOS_Init+0x304>)
 80056dc:	2100      	movs	r1, #0
 80056de:	485b      	ldr	r0, [pc, #364]	; (800584c <MX_FREERTOS_Init+0x308>)
 80056e0:	f010 f88e 	bl	8015800 <osThreadNew>
 80056e4:	4603      	mov	r3, r0
 80056e6:	4a5a      	ldr	r2, [pc, #360]	; (8005850 <MX_FREERTOS_Init+0x30c>)
 80056e8:	6013      	str	r3, [r2, #0]

   /* creation of SaveMemoryTask */
   SaveMemoryTaskHandle = osThreadNew(StartSaveMemoryTask, NULL, &SaveMemoryTask_attributes);
 80056ea:	4a5a      	ldr	r2, [pc, #360]	; (8005854 <MX_FREERTOS_Init+0x310>)
 80056ec:	2100      	movs	r1, #0
 80056ee:	485a      	ldr	r0, [pc, #360]	; (8005858 <MX_FREERTOS_Init+0x314>)
 80056f0:	f010 f886 	bl	8015800 <osThreadNew>
 80056f4:	4603      	mov	r3, r0
 80056f6:	4a59      	ldr	r2, [pc, #356]	; (800585c <MX_FREERTOS_Init+0x318>)
 80056f8:	6013      	str	r3, [r2, #0]

   /* creation of ChartTask */
   ChartTaskHandle = osThreadNew(StartChartTask, NULL, &ChartTask_attributes);
 80056fa:	4a59      	ldr	r2, [pc, #356]	; (8005860 <MX_FREERTOS_Init+0x31c>)
 80056fc:	2100      	movs	r1, #0
 80056fe:	4859      	ldr	r0, [pc, #356]	; (8005864 <MX_FREERTOS_Init+0x320>)
 8005700:	f010 f87e 	bl	8015800 <osThreadNew>
 8005704:	4603      	mov	r3, r0
 8005706:	4a58      	ldr	r2, [pc, #352]	; (8005868 <MX_FREERTOS_Init+0x324>)
 8005708:	6013      	str	r3, [r2, #0]

   /* creation of RfpMessageTask */
   RfpMessageTaskHandle = osThreadNew(StartRfpMessageTask, NULL, &RfpMessageTask_attributes);
 800570a:	4a58      	ldr	r2, [pc, #352]	; (800586c <MX_FREERTOS_Init+0x328>)
 800570c:	2100      	movs	r1, #0
 800570e:	4858      	ldr	r0, [pc, #352]	; (8005870 <MX_FREERTOS_Init+0x32c>)
 8005710:	f010 f876 	bl	8015800 <osThreadNew>
 8005714:	4603      	mov	r3, r0
 8005716:	4a57      	ldr	r2, [pc, #348]	; (8005874 <MX_FREERTOS_Init+0x330>)
 8005718:	6013      	str	r3, [r2, #0]

   /* creation of SunriseAndSunsetTask */
   SunriseAndSunsetTaskHandle = osThreadNew(StartSunriseAndSunsetTask, NULL, &SunriseAndSunsetTask_attributes);
 800571a:	4a57      	ldr	r2, [pc, #348]	; (8005878 <MX_FREERTOS_Init+0x334>)
 800571c:	2100      	movs	r1, #0
 800571e:	4857      	ldr	r0, [pc, #348]	; (800587c <MX_FREERTOS_Init+0x338>)
 8005720:	f010 f86e 	bl	8015800 <osThreadNew>
 8005724:	4603      	mov	r3, r0
 8005726:	4a56      	ldr	r2, [pc, #344]	; (8005880 <MX_FREERTOS_Init+0x33c>)
 8005728:	6013      	str	r3, [r2, #0]

   /* creation of WS2812Task */
   WS2812TaskHandle = osThreadNew(StartWS2812Task, NULL, &WS2812Task_attributes);
 800572a:	4a56      	ldr	r2, [pc, #344]	; (8005884 <MX_FREERTOS_Init+0x340>)
 800572c:	2100      	movs	r1, #0
 800572e:	4856      	ldr	r0, [pc, #344]	; (8005888 <MX_FREERTOS_Init+0x344>)
 8005730:	f010 f866 	bl	8015800 <osThreadNew>
 8005734:	4603      	mov	r3, r0
 8005736:	4a55      	ldr	r2, [pc, #340]	; (800588c <MX_FREERTOS_Init+0x348>)
 8005738:	6013      	str	r3, [r2, #0]
   /* USER CODE BEGIN RTOS_THREADS */
   /* add threads, ... */
   /* USER CODE END RTOS_THREADS */

   /* creation of C3V1Flags */
   C3V1FlagsHandle = osEventFlagsNew(&C3V1Flags_attributes);
 800573a:	4855      	ldr	r0, [pc, #340]	; (8005890 <MX_FREERTOS_Init+0x34c>)
 800573c:	f010 f99e 	bl	8015a7c <osEventFlagsNew>
 8005740:	4603      	mov	r3, r0
 8005742:	4a54      	ldr	r2, [pc, #336]	; (8005894 <MX_FREERTOS_Init+0x350>)
 8005744:	6013      	str	r3, [r2, #0]

   /* USER CODE BEGIN RTOS_EVENTS */
   /* add events, ... */
   /* USER CODE END RTOS_EVENTS */
}
 8005746:	bf00      	nop
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	08025314 	.word	0x08025314
 8005750:	200040a4 	.word	0x200040a4
 8005754:	08025324 	.word	0x08025324
 8005758:	200040a8 	.word	0x200040a8
 800575c:	08025334 	.word	0x08025334
 8005760:	200040ac 	.word	0x200040ac
 8005764:	08025344 	.word	0x08025344
 8005768:	200040b0 	.word	0x200040b0
 800576c:	08025354 	.word	0x08025354
 8005770:	200040b4 	.word	0x200040b4
 8005774:	08025364 	.word	0x08025364
 8005778:	200040b8 	.word	0x200040b8
 800577c:	08025374 	.word	0x08025374
 8005780:	200040bc 	.word	0x200040bc
 8005784:	08025384 	.word	0x08025384
 8005788:	200040c0 	.word	0x200040c0
 800578c:	08025304 	.word	0x08025304
 8005790:	08009619 	.word	0x08009619
 8005794:	200040a0 	.word	0x200040a0
 8005798:	08025214 	.word	0x08025214
 800579c:	20004078 	.word	0x20004078
 80057a0:	0802522c 	.word	0x0802522c
 80057a4:	2000407c 	.word	0x2000407c
 80057a8:	08025244 	.word	0x08025244
 80057ac:	20004080 	.word	0x20004080
 80057b0:	0802525c 	.word	0x0802525c
 80057b4:	20004084 	.word	0x20004084
 80057b8:	08025274 	.word	0x08025274
 80057bc:	20004088 	.word	0x20004088
 80057c0:	0802528c 	.word	0x0802528c
 80057c4:	2000408c 	.word	0x2000408c
 80057c8:	080252a4 	.word	0x080252a4
 80057cc:	20004090 	.word	0x20004090
 80057d0:	080252bc 	.word	0x080252bc
 80057d4:	20004094 	.word	0x20004094
 80057d8:	080252d4 	.word	0x080252d4
 80057dc:	20004098 	.word	0x20004098
 80057e0:	080252ec 	.word	0x080252ec
 80057e4:	2000409c 	.word	0x2000409c
 80057e8:	0802501c 	.word	0x0802501c
 80057ec:	08005899 	.word	0x08005899
 80057f0:	20004040 	.word	0x20004040
 80057f4:	08025040 	.word	0x08025040
 80057f8:	080058c1 	.word	0x080058c1
 80057fc:	20004044 	.word	0x20004044
 8005800:	08025064 	.word	0x08025064
 8005804:	08005c41 	.word	0x08005c41
 8005808:	20004048 	.word	0x20004048
 800580c:	08025088 	.word	0x08025088
 8005810:	08005c75 	.word	0x08005c75
 8005814:	2000404c 	.word	0x2000404c
 8005818:	080250ac 	.word	0x080250ac
 800581c:	08005dbd 	.word	0x08005dbd
 8005820:	20004050 	.word	0x20004050
 8005824:	080250d0 	.word	0x080250d0
 8005828:	08005f51 	.word	0x08005f51
 800582c:	20004054 	.word	0x20004054
 8005830:	080250f4 	.word	0x080250f4
 8005834:	08006291 	.word	0x08006291
 8005838:	20004058 	.word	0x20004058
 800583c:	08025118 	.word	0x08025118
 8005840:	08006ea5 	.word	0x08006ea5
 8005844:	2000405c 	.word	0x2000405c
 8005848:	0802513c 	.word	0x0802513c
 800584c:	08006f35 	.word	0x08006f35
 8005850:	20004060 	.word	0x20004060
 8005854:	08025160 	.word	0x08025160
 8005858:	08006f79 	.word	0x08006f79
 800585c:	20004064 	.word	0x20004064
 8005860:	08025184 	.word	0x08025184
 8005864:	08007741 	.word	0x08007741
 8005868:	20004068 	.word	0x20004068
 800586c:	080251a8 	.word	0x080251a8
 8005870:	08009295 	.word	0x08009295
 8005874:	2000406c 	.word	0x2000406c
 8005878:	080251cc 	.word	0x080251cc
 800587c:	0800932d 	.word	0x0800932d
 8005880:	20004070 	.word	0x20004070
 8005884:	080251f0 	.word	0x080251f0
 8005888:	08009449 	.word	0x08009449
 800588c:	20004074 	.word	0x20004074
 8005890:	08025394 	.word	0x08025394
 8005894:	200040c4 	.word	0x200040c4

08005898 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN StartDefaultTask */
   /* Infinite loop */
   for(;;)
   {
      HAL_GPIO_TogglePin(HEARTBEAT_GPIO_Port, HEARTBEAT_Pin);
 80058a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80058a4:	4804      	ldr	r0, [pc, #16]	; (80058b8 <StartDefaultTask+0x20>)
 80058a6:	f009 fb1b 	bl	800eee0 <HAL_GPIO_TogglePin>
      HAL_IWDG_Refresh(&hiwdg);
 80058aa:	4804      	ldr	r0, [pc, #16]	; (80058bc <StartDefaultTask+0x24>)
 80058ac:	f009 fb81 	bl	800efb2 <HAL_IWDG_Refresh>
      osDelay(100);
 80058b0:	2064      	movs	r0, #100	; 0x64
 80058b2:	f010 f837 	bl	8015924 <osDelay>
      HAL_GPIO_TogglePin(HEARTBEAT_GPIO_Port, HEARTBEAT_Pin);
 80058b6:	e7f3      	b.n	80058a0 <StartDefaultTask+0x8>
 80058b8:	48000400 	.word	0x48000400
 80058bc:	200040c8 	.word	0x200040c8

080058c0 <StartInitAndTimeTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartInitAndTimeTask */
void StartInitAndTimeTask(void *argument)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b0a6      	sub	sp, #152	; 0x98
 80058c4:	af04      	add	r7, sp, #16
 80058c6:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN StartInitAndTimeTask */
   RFP_Init(&Rfp, RFP_IDWS);
 80058c8:	2103      	movs	r1, #3
 80058ca:	48bf      	ldr	r0, [pc, #764]	; (8005bc8 <StartInitAndTimeTask+0x308>)
 80058cc:	f007 f99c 	bl	800cc08 <RFP_Init>
   e_papier_init(&hspi1);
 80058d0:	48be      	ldr	r0, [pc, #760]	; (8005bcc <StartInitAndTimeTask+0x30c>)
 80058d2:	f7ff fa3b 	bl	8004d4c <e_papier_init>
   ssd1306_init(&hspi1);
 80058d6:	48bd      	ldr	r0, [pc, #756]	; (8005bcc <StartInitAndTimeTask+0x30c>)
 80058d8:	f007 fe9a 	bl	800d610 <ssd1306_init>
   taskENTER_CRITICAL();
 80058dc:	f013 fd12 	bl	8019304 <vPortEnterCritical>
   BME280_Init(&Bme, &hspi1, BME280_CS_GPIO_Port, BME280_CS_Pin);
 80058e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80058e4:	4aba      	ldr	r2, [pc, #744]	; (8005bd0 <StartInitAndTimeTask+0x310>)
 80058e6:	49b9      	ldr	r1, [pc, #740]	; (8005bcc <StartInitAndTimeTask+0x30c>)
 80058e8:	48ba      	ldr	r0, [pc, #744]	; (8005bd4 <StartInitAndTimeTask+0x314>)
 80058ea:	f7fe fec9 	bl	8004680 <BME280_Init>
   GFX_SetFont(font_8x5);
 80058ee:	48ba      	ldr	r0, [pc, #744]	; (8005bd8 <StartInitAndTimeTask+0x318>)
 80058f0:	f7fb fc12 	bl	8001118 <GFX_SetFont>
   RFP_RegisterDataFunction(RFP_DataFunction);
 80058f4:	48b9      	ldr	r0, [pc, #740]	; (8005bdc <StartInitAndTimeTask+0x31c>)
 80058f6:	f007 fa07 	bl	800cd08 <RFP_RegisterDataFunction>
   MENU_Init();
 80058fa:	f7fc f9a7 	bl	8001c4c <MENU_Init>
   fram_Init(&Fram, &hspi1, FRAM_HOLD_GPIO_Port, FRAM_CS_GPIO_Port, FRAM_WP_GPIO_Port, FRAM_HOLD_Pin, FRAM_CS_Pin, FRAM_WP_Pin);
 80058fe:	2380      	movs	r3, #128	; 0x80
 8005900:	9303      	str	r3, [sp, #12]
 8005902:	2340      	movs	r3, #64	; 0x40
 8005904:	9302      	str	r3, [sp, #8]
 8005906:	f44f 7380 	mov.w	r3, #256	; 0x100
 800590a:	9301      	str	r3, [sp, #4]
 800590c:	4bb0      	ldr	r3, [pc, #704]	; (8005bd0 <StartInitAndTimeTask+0x310>)
 800590e:	9300      	str	r3, [sp, #0]
 8005910:	4baf      	ldr	r3, [pc, #700]	; (8005bd0 <StartInitAndTimeTask+0x310>)
 8005912:	4aaf      	ldr	r2, [pc, #700]	; (8005bd0 <StartInitAndTimeTask+0x310>)
 8005914:	49ad      	ldr	r1, [pc, #692]	; (8005bcc <StartInitAndTimeTask+0x30c>)
 8005916:	48b2      	ldr	r0, [pc, #712]	; (8005be0 <StartInitAndTimeTask+0x320>)
 8005918:	f7ff fdd3 	bl	80054c2 <fram_Init>
   flash_Init(&Flash, &hspi1, FLASH_CS_GPIO_Port, FLASH_CS_Pin);
 800591c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005920:	4aab      	ldr	r2, [pc, #684]	; (8005bd0 <StartInitAndTimeTask+0x310>)
 8005922:	49aa      	ldr	r1, [pc, #680]	; (8005bcc <StartInitAndTimeTask+0x30c>)
 8005924:	48af      	ldr	r0, [pc, #700]	; (8005be4 <StartInitAndTimeTask+0x324>)
 8005926:	f7ff fc1d 	bl	8005164 <flash_Init>
   //   fram_ChipErase(&Fram);
   //   HAL_IWDG_Refresh(&hiwdg);
   //   flash_ChipErase(&Flash);
   EF_SetFont(&timesNewRoman_12ptFontInfo);
 800592a:	48af      	ldr	r0, [pc, #700]	; (8005be8 <StartInitAndTimeTask+0x328>)
 800592c:	f7fb fe5a 	bl	80015e4 <EF_SetFont>
   EF_PutString((uint8_t *)"WITAJ W PROJEKCIE INŻYNIERSKIM", 0, 0, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8005930:	2301      	movs	r3, #1
 8005932:	9302      	str	r3, [sp, #8]
 8005934:	2301      	movs	r3, #1
 8005936:	9301      	str	r3, [sp, #4]
 8005938:	2300      	movs	r3, #0
 800593a:	9300      	str	r3, [sp, #0]
 800593c:	2300      	movs	r3, #0
 800593e:	2200      	movs	r2, #0
 8005940:	2100      	movs	r1, #0
 8005942:	48aa      	ldr	r0, [pc, #680]	; (8005bec <StartInitAndTimeTask+0x32c>)
 8005944:	f7fc f868 	bl	8001a18 <EF_PutString>
   EF_PutString((uint8_t *)"NA TEN MOMENT TRWA INICJALIZACJA", 0, 20, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8005948:	2301      	movs	r3, #1
 800594a:	9302      	str	r3, [sp, #8]
 800594c:	2301      	movs	r3, #1
 800594e:	9301      	str	r3, [sp, #4]
 8005950:	2300      	movs	r3, #0
 8005952:	9300      	str	r3, [sp, #0]
 8005954:	2300      	movs	r3, #0
 8005956:	2214      	movs	r2, #20
 8005958:	2100      	movs	r1, #0
 800595a:	48a5      	ldr	r0, [pc, #660]	; (8005bf0 <StartInitAndTimeTask+0x330>)
 800595c:	f7fc f85c 	bl	8001a18 <EF_PutString>
   EF_PutString((uint8_t *)"ZA OKOŁO 2 MINUTY POJAWIĄ SIĘ WYNIKI", 0, 40, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8005960:	2301      	movs	r3, #1
 8005962:	9302      	str	r3, [sp, #8]
 8005964:	2301      	movs	r3, #1
 8005966:	9301      	str	r3, [sp, #4]
 8005968:	2300      	movs	r3, #0
 800596a:	9300      	str	r3, [sp, #0]
 800596c:	2300      	movs	r3, #0
 800596e:	2228      	movs	r2, #40	; 0x28
 8005970:	2100      	movs	r1, #0
 8005972:	48a0      	ldr	r0, [pc, #640]	; (8005bf4 <StartInitAndTimeTask+0x334>)
 8005974:	f7fc f850 	bl	8001a18 <EF_PutString>
   EF_PutString((uint8_t *)"SPRAWDŹ ZIELONĄ DIODE!", 0, 80, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8005978:	2301      	movs	r3, #1
 800597a:	9302      	str	r3, [sp, #8]
 800597c:	2301      	movs	r3, #1
 800597e:	9301      	str	r3, [sp, #4]
 8005980:	2300      	movs	r3, #0
 8005982:	9300      	str	r3, [sp, #0]
 8005984:	2300      	movs	r3, #0
 8005986:	2250      	movs	r2, #80	; 0x50
 8005988:	2100      	movs	r1, #0
 800598a:	489b      	ldr	r0, [pc, #620]	; (8005bf8 <StartInitAndTimeTask+0x338>)
 800598c:	f7fc f844 	bl	8001a18 <EF_PutString>
   EF_PutString((uint8_t *)"JEŻELI MIGA TO WSZYSTKO DOBRZE", 0, 100, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8005990:	2301      	movs	r3, #1
 8005992:	9302      	str	r3, [sp, #8]
 8005994:	2301      	movs	r3, #1
 8005996:	9301      	str	r3, [sp, #4]
 8005998:	2300      	movs	r3, #0
 800599a:	9300      	str	r3, [sp, #0]
 800599c:	2300      	movs	r3, #0
 800599e:	2264      	movs	r2, #100	; 0x64
 80059a0:	2100      	movs	r1, #0
 80059a2:	4896      	ldr	r0, [pc, #600]	; (8005bfc <StartInitAndTimeTask+0x33c>)
 80059a4:	f7fc f838 	bl	8001a18 <EF_PutString>
   EF_PutString((uint8_t *)"JEŻELI NIE TO NALEŻY WCISĄĆ RESET", 0, 120, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 80059a8:	2301      	movs	r3, #1
 80059aa:	9302      	str	r3, [sp, #8]
 80059ac:	2301      	movs	r3, #1
 80059ae:	9301      	str	r3, [sp, #4]
 80059b0:	2300      	movs	r3, #0
 80059b2:	9300      	str	r3, [sp, #0]
 80059b4:	2300      	movs	r3, #0
 80059b6:	2278      	movs	r2, #120	; 0x78
 80059b8:	2100      	movs	r1, #0
 80059ba:	4891      	ldr	r0, [pc, #580]	; (8005c00 <StartInitAndTimeTask+0x340>)
 80059bc:	f7fc f82c 	bl	8001a18 <EF_PutString>
   EF_PutString((uint8_t *)"FIRMWARE VERSION: 11.2", 0, 260, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 80059c0:	2301      	movs	r3, #1
 80059c2:	9302      	str	r3, [sp, #8]
 80059c4:	2301      	movs	r3, #1
 80059c6:	9301      	str	r3, [sp, #4]
 80059c8:	2300      	movs	r3, #0
 80059ca:	9300      	str	r3, [sp, #0]
 80059cc:	2300      	movs	r3, #0
 80059ce:	f44f 7282 	mov.w	r2, #260	; 0x104
 80059d2:	2100      	movs	r1, #0
 80059d4:	488b      	ldr	r0, [pc, #556]	; (8005c04 <StartInitAndTimeTask+0x344>)
 80059d6:	f7fc f81f 	bl	8001a18 <EF_PutString>
   EF_PutString((uint8_t *)"HARDWARE VERSION: 2.1", 0, 280, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 80059da:	2301      	movs	r3, #1
 80059dc:	9302      	str	r3, [sp, #8]
 80059de:	2301      	movs	r3, #1
 80059e0:	9301      	str	r3, [sp, #4]
 80059e2:	2300      	movs	r3, #0
 80059e4:	9300      	str	r3, [sp, #0]
 80059e6:	2300      	movs	r3, #0
 80059e8:	f44f 728c 	mov.w	r2, #280	; 0x118
 80059ec:	2100      	movs	r1, #0
 80059ee:	4886      	ldr	r0, [pc, #536]	; (8005c08 <StartInitAndTimeTask+0x348>)
 80059f0:	f7fc f812 	bl	8001a18 <EF_PutString>
   EF_PutString((uint8_t *)"AUTOR: MARCIN WOJEWODZIC", 0, 220, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 80059f4:	2301      	movs	r3, #1
 80059f6:	9302      	str	r3, [sp, #8]
 80059f8:	2301      	movs	r3, #1
 80059fa:	9301      	str	r3, [sp, #4]
 80059fc:	2300      	movs	r3, #0
 80059fe:	9300      	str	r3, [sp, #0]
 8005a00:	2300      	movs	r3, #0
 8005a02:	22dc      	movs	r2, #220	; 0xdc
 8005a04:	2100      	movs	r1, #0
 8005a06:	4881      	ldr	r0, [pc, #516]	; (8005c0c <StartInitAndTimeTask+0x34c>)
 8005a08:	f7fc f806 	bl	8001a18 <EF_PutString>
   EF_PutString((uint8_t *)"PROMOTOR: Dr Inż. MARCIN RODZIEWICZ", 0, 240, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	9302      	str	r3, [sp, #8]
 8005a10:	2301      	movs	r3, #1
 8005a12:	9301      	str	r3, [sp, #4]
 8005a14:	2300      	movs	r3, #0
 8005a16:	9300      	str	r3, [sp, #0]
 8005a18:	2300      	movs	r3, #0
 8005a1a:	22f0      	movs	r2, #240	; 0xf0
 8005a1c:	2100      	movs	r1, #0
 8005a1e:	487c      	ldr	r0, [pc, #496]	; (8005c10 <StartInitAndTimeTask+0x350>)
 8005a20:	f7fb fffa 	bl	8001a18 <EF_PutString>
   e_papier_display();
 8005a24:	f7ff f914 	bl	8004c50 <e_papier_display>
   taskEXIT_CRITICAL();
 8005a28:	f013 fc9c 	bl	8019364 <vPortExitCritical>
   PMS_Reset();
 8005a2c:	f7fe f894 	bl	8003b58 <PMS_Reset>
   PMS_EnterSleepMode();
 8005a30:	f7fe f8a8 	bl	8003b84 <PMS_EnterSleepMode>
   osEventFlagsSet(C3V1FlagsHandle, INITIALIZE_ALL_FLAG);
 8005a34:	4b77      	ldr	r3, [pc, #476]	; (8005c14 <StartInitAndTimeTask+0x354>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2102      	movs	r1, #2
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f010 f85e 	bl	8015afc <osEventFlagsSet>
   RTC_TimeTypeDef RtcTime;
   RTC_DateTypeDef RtcDate;
   RTC_DateTypeDef ActualRtcDate = { 0 };
 8005a40:	2300      	movs	r3, #0
 8005a42:	66fb      	str	r3, [r7, #108]	; 0x6c
   char data[100];
   /* Infinite loop */
   for(;;)
   {
      osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 8005a44:	4b73      	ldr	r3, [pc, #460]	; (8005c14 <StartInitAndTimeTask+0x354>)
 8005a46:	6818      	ldr	r0, [r3, #0]
 8005a48:	f04f 33ff 	mov.w	r3, #4294967295
 8005a4c:	2202      	movs	r2, #2
 8005a4e:	2102      	movs	r1, #2
 8005a50:	f010 f8ca 	bl	8015be8 <osEventFlagsWait>
      osMutexAcquire(MenuMutexHandle, osWaitForever);
 8005a54:	4b70      	ldr	r3, [pc, #448]	; (8005c18 <StartInitAndTimeTask+0x358>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f04f 31ff 	mov.w	r1, #4294967295
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f010 f9af 	bl	8015dc0 <osMutexAcquire>
      osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8005a62:	4b6e      	ldr	r3, [pc, #440]	; (8005c1c <StartInitAndTimeTask+0x35c>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f04f 31ff 	mov.w	r1, #4294967295
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f010 f9a8 	bl	8015dc0 <osMutexAcquire>
      osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8005a70:	4b6b      	ldr	r3, [pc, #428]	; (8005c20 <StartInitAndTimeTask+0x360>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f04f 31ff 	mov.w	r1, #4294967295
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f010 f9a1 	bl	8015dc0 <osMutexAcquire>
      osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8005a7e:	4b69      	ldr	r3, [pc, #420]	; (8005c24 <StartInitAndTimeTask+0x364>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f04f 31ff 	mov.w	r1, #4294967295
 8005a86:	4618      	mov	r0, r3
 8005a88:	f010 f99a 	bl	8015dc0 <osMutexAcquire>
      ssd1306_clear();
 8005a8c:	f007 fdb4 	bl	800d5f8 <ssd1306_clear>
      osMutexAcquire(RTCMutexHandle, osWaitForever);
 8005a90:	4b65      	ldr	r3, [pc, #404]	; (8005c28 <StartInitAndTimeTask+0x368>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f04f 31ff 	mov.w	r1, #4294967295
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f010 f991 	bl	8015dc0 <osMutexAcquire>
      HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 8005a9e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	4861      	ldr	r0, [pc, #388]	; (8005c2c <StartInitAndTimeTask+0x36c>)
 8005aa8:	f00b f958 	bl	8010d5c <HAL_RTC_GetTime>
      HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 8005aac:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	485d      	ldr	r0, [pc, #372]	; (8005c2c <StartInitAndTimeTask+0x36c>)
 8005ab6:	f00b fa3b 	bl	8010f30 <HAL_RTC_GetDate>
      osMutexRelease(RTCMutexHandle);
 8005aba:	4b5b      	ldr	r3, [pc, #364]	; (8005c28 <StartInitAndTimeTask+0x368>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f010 f9c9 	bl	8015e56 <osMutexRelease>
      sprintf(data, "%d : %d", RtcTime.Hours, RtcTime.Minutes);
 8005ac4:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8005ac8:	461a      	mov	r2, r3
 8005aca:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8005ace:	f107 0008 	add.w	r0, r7, #8
 8005ad2:	4957      	ldr	r1, [pc, #348]	; (8005c30 <StartInitAndTimeTask+0x370>)
 8005ad4:	f007 f860 	bl	800cb98 <sprintf_>
      EF_SetFont(&timesNewRoman_22ptFontInfo);
 8005ad8:	4856      	ldr	r0, [pc, #344]	; (8005c34 <StartInitAndTimeTask+0x374>)
 8005ada:	f7fb fd83 	bl	80015e4 <EF_SetFont>
      if(RtcTime.Hours > 10)
 8005ade:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8005ae2:	2b0a      	cmp	r3, #10
 8005ae4:	d90d      	bls.n	8005b02 <StartInitAndTimeTask+0x242>
      {
         EF_PutString((uint8_t *)data, 23, 0, WHITE, BG_TRANSPARENT, BLACK, OLED);
 8005ae6:	f107 0008 	add.w	r0, r7, #8
 8005aea:	2300      	movs	r3, #0
 8005aec:	9302      	str	r3, [sp, #8]
 8005aee:	2300      	movs	r3, #0
 8005af0:	9301      	str	r3, [sp, #4]
 8005af2:	2300      	movs	r3, #0
 8005af4:	9300      	str	r3, [sp, #0]
 8005af6:	2301      	movs	r3, #1
 8005af8:	2200      	movs	r2, #0
 8005afa:	2117      	movs	r1, #23
 8005afc:	f7fb ff8c 	bl	8001a18 <EF_PutString>
 8005b00:	e00c      	b.n	8005b1c <StartInitAndTimeTask+0x25c>
      }
      else
      {
         EF_PutString((uint8_t *)data, 38, 0, WHITE, BG_TRANSPARENT, BLACK, OLED);
 8005b02:	f107 0008 	add.w	r0, r7, #8
 8005b06:	2300      	movs	r3, #0
 8005b08:	9302      	str	r3, [sp, #8]
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	9301      	str	r3, [sp, #4]
 8005b0e:	2300      	movs	r3, #0
 8005b10:	9300      	str	r3, [sp, #0]
 8005b12:	2301      	movs	r3, #1
 8005b14:	2200      	movs	r2, #0
 8005b16:	2126      	movs	r1, #38	; 0x26
 8005b18:	f7fb ff7e 	bl	8001a18 <EF_PutString>
      }
      EF_SetFont(&timesNewRoman_16ptFontInfo);
 8005b1c:	4846      	ldr	r0, [pc, #280]	; (8005c38 <StartInitAndTimeTask+0x378>)
 8005b1e:	f7fb fd61 	bl	80015e4 <EF_SetFont>
      sprintf(data, "%d : %d : 20%d", RtcDate.Date, RtcDate.Month, RtcDate.Year);
 8005b22:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8005b26:	461a      	mov	r2, r3
 8005b28:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8005b32:	f107 0008 	add.w	r0, r7, #8
 8005b36:	9300      	str	r3, [sp, #0]
 8005b38:	460b      	mov	r3, r1
 8005b3a:	4940      	ldr	r1, [pc, #256]	; (8005c3c <StartInitAndTimeTask+0x37c>)
 8005b3c:	f007 f82c 	bl	800cb98 <sprintf_>
      EF_PutString((uint8_t *)data, 10, 30, WHITE, BG_TRANSPARENT, BLACK, OLED);
 8005b40:	f107 0008 	add.w	r0, r7, #8
 8005b44:	2300      	movs	r3, #0
 8005b46:	9302      	str	r3, [sp, #8]
 8005b48:	2300      	movs	r3, #0
 8005b4a:	9301      	str	r3, [sp, #4]
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	9300      	str	r3, [sp, #0]
 8005b50:	2301      	movs	r3, #1
 8005b52:	221e      	movs	r2, #30
 8005b54:	210a      	movs	r1, #10
 8005b56:	f7fb ff5f 	bl	8001a18 <EF_PutString>
      ;
      ssd1306_display();
 8005b5a:	f007 fd21 	bl	800d5a0 <ssd1306_display>
      osMutexRelease(SPI1MutexHandle);
 8005b5e:	4b31      	ldr	r3, [pc, #196]	; (8005c24 <StartInitAndTimeTask+0x364>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4618      	mov	r0, r3
 8005b64:	f010 f977 	bl	8015e56 <osMutexRelease>
      osMutexRelease(SSD1306MutexHandle);
 8005b68:	4b2d      	ldr	r3, [pc, #180]	; (8005c20 <StartInitAndTimeTask+0x360>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f010 f972 	bl	8015e56 <osMutexRelease>
      osMutexRelease(ScreensDcMutexHandle);
 8005b72:	4b2a      	ldr	r3, [pc, #168]	; (8005c1c <StartInitAndTimeTask+0x35c>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4618      	mov	r0, r3
 8005b78:	f010 f96d 	bl	8015e56 <osMutexRelease>
      osMutexRelease(MenuMutexHandle);
 8005b7c:	4b26      	ldr	r3, [pc, #152]	; (8005c18 <StartInitAndTimeTask+0x358>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4618      	mov	r0, r3
 8005b82:	f010 f968 	bl	8015e56 <osMutexRelease>
      if(ActualRtcDate.Date != RtcDate.Date)
 8005b86:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 8005b8a:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d015      	beq.n	8005bbe <StartInitAndTimeTask+0x2fe>
      {
         ActualRtcDate.Date = RtcDate.Date;
 8005b92:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8005b96:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
         osEventFlagsSet(C3V1FlagsHandle, MOON_PHASE_FLAG);
 8005b9a:	4b1e      	ldr	r3, [pc, #120]	; (8005c14 <StartInitAndTimeTask+0x354>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2110      	movs	r1, #16
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f00f ffab 	bl	8015afc <osEventFlagsSet>
         osEventFlagsSet(C3V1FlagsHandle, NEW_DAY_TO_SAVE);
 8005ba6:	4b1b      	ldr	r3, [pc, #108]	; (8005c14 <StartInitAndTimeTask+0x354>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2120      	movs	r1, #32
 8005bac:	4618      	mov	r0, r3
 8005bae:	f00f ffa5 	bl	8015afc <osEventFlagsSet>
         osEventFlagsSet(C3V1FlagsHandle, NEW_DAY_FLAG);
 8005bb2:	4b18      	ldr	r3, [pc, #96]	; (8005c14 <StartInitAndTimeTask+0x354>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	2180      	movs	r1, #128	; 0x80
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f00f ff9f 	bl	8015afc <osEventFlagsSet>
      }
      osDelay(1000);
 8005bbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005bc2:	f00f feaf 	bl	8015924 <osDelay>
      osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 8005bc6:	e73d      	b.n	8005a44 <StartInitAndTimeTask+0x184>
 8005bc8:	20003f60 	.word	0x20003f60
 8005bcc:	20004208 	.word	0x20004208
 8005bd0:	48000400 	.word	0x48000400
 8005bd4:	20003f7c 	.word	0x20003f7c
 8005bd8:	08024e3c 	.word	0x08024e3c
 8005bdc:	08009779 	.word	0x08009779
 8005be0:	20003fbc 	.word	0x20003fbc
 8005be4:	20003fac 	.word	0x20003fac
 8005be8:	08021af0 	.word	0x08021af0
 8005bec:	0802025c 	.word	0x0802025c
 8005bf0:	0802027c 	.word	0x0802027c
 8005bf4:	080202a0 	.word	0x080202a0
 8005bf8:	080202c8 	.word	0x080202c8
 8005bfc:	080202e4 	.word	0x080202e4
 8005c00:	08020304 	.word	0x08020304
 8005c04:	0802032c 	.word	0x0802032c
 8005c08:	08020344 	.word	0x08020344
 8005c0c:	0802035c 	.word	0x0802035c
 8005c10:	08020378 	.word	0x08020378
 8005c14:	200040c4 	.word	0x200040c4
 8005c18:	200040b8 	.word	0x200040b8
 8005c1c:	200040a4 	.word	0x200040a4
 8005c20:	200040a8 	.word	0x200040a8
 8005c24:	200040ac 	.word	0x200040ac
 8005c28:	200040bc 	.word	0x200040bc
 8005c2c:	200041d4 	.word	0x200041d4
 8005c30:	080203a0 	.word	0x080203a0
 8005c34:	08024d54 	.word	0x08024d54
 8005c38:	08022dfc 	.word	0x08022dfc
 8005c3c:	080203a8 	.word	0x080203a8

08005c40 <StartRfpTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartRfpTask */
void StartRfpTask(void *argument)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b082      	sub	sp, #8
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN StartRfpTask */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 8005c48:	4b08      	ldr	r3, [pc, #32]	; (8005c6c <StartRfpTask+0x2c>)
 8005c4a:	6818      	ldr	r0, [r3, #0]
 8005c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8005c50:	2202      	movs	r2, #2
 8005c52:	2102      	movs	r1, #2
 8005c54:	f00f ffc8 	bl	8015be8 <osEventFlagsWait>
   /* Infinite loop */
   for(;;)
   {
      if(Rfp.Initialize == RFP_INITIALIZE)
 8005c58:	4b05      	ldr	r3, [pc, #20]	; (8005c70 <StartRfpTask+0x30>)
 8005c5a:	78db      	ldrb	r3, [r3, #3]
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d101      	bne.n	8005c64 <StartRfpTask+0x24>
      {
         RFP_Handle();
 8005c60:	f006 ffb6 	bl	800cbd0 <RFP_Handle>
      }
      osDelay(10);
 8005c64:	200a      	movs	r0, #10
 8005c66:	f00f fe5d 	bl	8015924 <osDelay>
      if(Rfp.Initialize == RFP_INITIALIZE)
 8005c6a:	e7f5      	b.n	8005c58 <StartRfpTask+0x18>
 8005c6c:	200040c4 	.word	0x200040c4
 8005c70:	20003f60 	.word	0x20003f60

08005c74 <StartMeasurmentTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMeasurmentTask */
void StartMeasurmentTask(void *argument)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b092      	sub	sp, #72	; 0x48
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN StartMeasurmentTask */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 8005c7c:	4b46      	ldr	r3, [pc, #280]	; (8005d98 <StartMeasurmentTask+0x124>)
 8005c7e:	6818      	ldr	r0, [r3, #0]
 8005c80:	f04f 33ff 	mov.w	r3, #4294967295
 8005c84:	2202      	movs	r2, #2
 8005c86:	2102      	movs	r1, #2
 8005c88:	f00f ffae 	bl	8015be8 <osEventFlagsWait>
   uint32_t Time                 = 1200000;
 8005c8c:	4b43      	ldr	r3, [pc, #268]	; (8005d9c <StartMeasurmentTask+0x128>)
 8005c8e:	647b      	str	r3, [r7, #68]	; 0x44
   uint8_t Command               = RFP_START_MEASURMENT;
 8005c90:	2302      	movs	r3, #2
 8005c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
   RfpMessage_TypeDef RfpMessage = { 0 };
 8005c96:	2300      	movs	r3, #0
 8005c98:	63fb      	str	r3, [r7, #60]	; 0x3c
   MV_TypeDef _Mv                = { 0 };
 8005c9a:	f107 030c 	add.w	r3, r7, #12
 8005c9e:	2230      	movs	r2, #48	; 0x30
 8005ca0:	2100      	movs	r1, #0
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f013 fe74 	bl	8019990 <memset>
   /* Infinite loop */
   for(;;)
   {
      RfpMessage.AdditionalData = 0;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	87fb      	strh	r3, [r7, #62]	; 0x3e
      RfpMessage.Data           = Command;
 8005cac:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005cb0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
      RfpMessage.MessageType    = RFP_COMMAND;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
      osMessageQueuePut(RfpMessageQueueHandle, &RfpMessage, 0, osWaitForever);
 8005cba:	4b39      	ldr	r3, [pc, #228]	; (8005da0 <StartMeasurmentTask+0x12c>)
 8005cbc:	6818      	ldr	r0, [r3, #0]
 8005cbe:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8005cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f010 f976 	bl	8015fb8 <osMessageQueuePut>
      PMSFlag = 0;
 8005ccc:	4b35      	ldr	r3, [pc, #212]	; (8005da4 <StartMeasurmentTask+0x130>)
 8005cce:	2200      	movs	r2, #0
 8005cd0:	701a      	strb	r2, [r3, #0]
      PMS_ExitSleepMode();
 8005cd2:	f7fd ff63 	bl	8003b9c <PMS_ExitSleepMode>
      osEventFlagsWait(C3V1FlagsHandle, SEND_MEASURMENT_COMMAND_FLAG, osFlagsWaitAny, osWaitForever);
 8005cd6:	4b30      	ldr	r3, [pc, #192]	; (8005d98 <StartMeasurmentTask+0x124>)
 8005cd8:	6818      	ldr	r0, [r3, #0]
 8005cda:	f04f 33ff 	mov.w	r3, #4294967295
 8005cde:	2200      	movs	r2, #0
 8005ce0:	2101      	movs	r1, #1
 8005ce2:	f00f ff81 	bl	8015be8 <osEventFlagsWait>
      osMessageQueueGet(TimeBreakMeasurmentQueueHandle, &_Mv, 0, osWaitForever);
 8005ce6:	4b30      	ldr	r3, [pc, #192]	; (8005da8 <StartMeasurmentTask+0x134>)
 8005ce8:	6818      	ldr	r0, [r3, #0]
 8005cea:	f107 010c 	add.w	r1, r7, #12
 8005cee:	f04f 33ff 	mov.w	r3, #4294967295
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f010 f9c0 	bl	8016078 <osMessageQueueGet>
      if(!(_Mv.BatteryState & 0x01))
 8005cf8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005cfc:	f003 0301 	and.w	r3, r3, #1
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d129      	bne.n	8005d58 <StartMeasurmentTask+0xe4>
      {
         Time -= 600000;
 8005d04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d06:	f5a3 2312 	sub.w	r3, r3, #598016	; 0x92000
 8005d0a:	f5a3 63f8 	sub.w	r3, r3, #1984	; 0x7c0
 8005d0e:	647b      	str	r3, [r7, #68]	; 0x44
         Time -= (100000 * _Mv.Brightness / 1000);
 8005d10:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005d12:	461a      	mov	r2, r3
 8005d14:	2364      	movs	r3, #100	; 0x64
 8005d16:	fb02 f303 	mul.w	r3, r2, r3
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d1e:	1a9b      	subs	r3, r3, r2
 8005d20:	647b      	str	r3, [r7, #68]	; 0x44
         Time -= (300000 * (_Mv.BatteryVoltage * 100) / 430);
 8005d22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d24:	ee07 3a90 	vmov	s15, r3
 8005d28:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005d2c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005d30:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8005dac <StartMeasurmentTask+0x138>
 8005d34:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005d38:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8005db0 <StartMeasurmentTask+0x13c>
 8005d3c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005d40:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 8005db4 <StartMeasurmentTask+0x140>
 8005d44:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8005d48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d50:	ee17 3a90 	vmov	r3, s15
 8005d54:	647b      	str	r3, [r7, #68]	; 0x44
 8005d56:	e019      	b.n	8005d8c <StartMeasurmentTask+0x118>
      }
      else
      {
         Time -= (750000 * (_Mv.BatteryVoltage * 100) / 430);
 8005d58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d5a:	ee07 3a90 	vmov	s15, r3
 8005d5e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005d62:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005d66:	eddf 6a11 	vldr	s13, [pc, #68]	; 8005dac <StartMeasurmentTask+0x138>
 8005d6a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005d6e:	eddf 6a12 	vldr	s13, [pc, #72]	; 8005db8 <StartMeasurmentTask+0x144>
 8005d72:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005d76:	ed9f 6a0f 	vldr	s12, [pc, #60]	; 8005db4 <StartMeasurmentTask+0x140>
 8005d7a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8005d7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d86:	ee17 3a90 	vmov	r3, s15
 8005d8a:	647b      	str	r3, [r7, #68]	; 0x44
      }
      osDelay(Time);
 8005d8c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8005d8e:	f00f fdc9 	bl	8015924 <osDelay>
      Time = 1200000;
 8005d92:	4b02      	ldr	r3, [pc, #8]	; (8005d9c <StartMeasurmentTask+0x128>)
 8005d94:	647b      	str	r3, [r7, #68]	; 0x44
      RfpMessage.AdditionalData = 0;
 8005d96:	e787      	b.n	8005ca8 <StartMeasurmentTask+0x34>
 8005d98:	200040c4 	.word	0x200040c4
 8005d9c:	00124f80 	.word	0x00124f80
 8005da0:	20004088 	.word	0x20004088
 8005da4:	2000403c 	.word	0x2000403c
 8005da8:	2000409c 	.word	0x2000409c
 8005dac:	42c80000 	.word	0x42c80000
 8005db0:	48927c00 	.word	0x48927c00
 8005db4:	43d70000 	.word	0x43d70000
 8005db8:	49371b00 	.word	0x49371b00

08005dbc <StartInternalMeasurmentTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartInternalMeasurmentTask */
void StartInternalMeasurmentTask(void *argument)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b090      	sub	sp, #64	; 0x40
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN StartInternalMeasurmentTask */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 8005dc4:	4b56      	ldr	r3, [pc, #344]	; (8005f20 <StartInternalMeasurmentTask+0x164>)
 8005dc6:	6818      	ldr	r0, [r3, #0]
 8005dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8005dcc:	2202      	movs	r2, #2
 8005dce:	2102      	movs	r1, #2
 8005dd0:	f00f ff0a 	bl	8015be8 <osEventFlagsWait>
   MV_TypeDef _Mv = { 0 };
 8005dd4:	f107 030c 	add.w	r3, r7, #12
 8005dd8:	2230      	movs	r2, #48	; 0x30
 8005dda:	2100      	movs	r1, #0
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f013 fdd7 	bl	8019990 <memset>
   /* Infinite loop */
   for(;;)
   {
      osMessageQueueGet(ExternalMeasurmentQueueHandle, &_Mv, 0, osWaitForever);
 8005de2:	4b50      	ldr	r3, [pc, #320]	; (8005f24 <StartInternalMeasurmentTask+0x168>)
 8005de4:	6818      	ldr	r0, [r3, #0]
 8005de6:	f107 010c 	add.w	r1, r7, #12
 8005dea:	f04f 33ff 	mov.w	r3, #4294967295
 8005dee:	2200      	movs	r2, #0
 8005df0:	f010 f942 	bl	8016078 <osMessageQueueGet>
      osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8005df4:	4b4c      	ldr	r3, [pc, #304]	; (8005f28 <StartInternalMeasurmentTask+0x16c>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f04f 31ff 	mov.w	r1, #4294967295
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f00f ffdf 	bl	8015dc0 <osMutexAcquire>
      osMutexAcquire(BME280MutexHandle, osWaitForever);
 8005e02:	4b4a      	ldr	r3, [pc, #296]	; (8005f2c <StartInternalMeasurmentTask+0x170>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f04f 31ff 	mov.w	r1, #4294967295
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f00f ffd8 	bl	8015dc0 <osMutexAcquire>
      HAL_UARTEx_ReceiveToIdle_DMA(&huart2, PMSData, 100);
 8005e10:	2264      	movs	r2, #100	; 0x64
 8005e12:	4947      	ldr	r1, [pc, #284]	; (8005f30 <StartInternalMeasurmentTask+0x174>)
 8005e14:	4847      	ldr	r0, [pc, #284]	; (8005f34 <StartInternalMeasurmentTask+0x178>)
 8005e16:	f00f fbbb 	bl	8015590 <HAL_UARTEx_ReceiveToIdle_DMA>
      uint32_t Time = HAL_GetTick();
 8005e1a:	f008 fa59 	bl	800e2d0 <HAL_GetTick>
 8005e1e:	63f8      	str	r0, [r7, #60]	; 0x3c
      while(PMSFlag == 0)
 8005e20:	e00b      	b.n	8005e3a <StartInternalMeasurmentTask+0x7e>
      {
         osDelay(100);
 8005e22:	2064      	movs	r0, #100	; 0x64
 8005e24:	f00f fd7e 	bl	8015924 <osDelay>
         if(HAL_GetTick() - Time > 10000)
 8005e28:	f008 fa52 	bl	800e2d0 <HAL_GetTick>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	f242 7210 	movw	r2, #10000	; 0x2710
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d804      	bhi.n	8005e44 <StartInternalMeasurmentTask+0x88>
      while(PMSFlag == 0)
 8005e3a:	4b3f      	ldr	r3, [pc, #252]	; (8005f38 <StartInternalMeasurmentTask+0x17c>)
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d0ef      	beq.n	8005e22 <StartInternalMeasurmentTask+0x66>
 8005e42:	e000      	b.n	8005e46 <StartInternalMeasurmentTask+0x8a>
         {
            break;
 8005e44:	bf00      	nop
         }
      }
      _Mv.InternalPM1  = ((PMSData[4] << 8) | PMSData[5]);
 8005e46:	4b3a      	ldr	r3, [pc, #232]	; (8005f30 <StartInternalMeasurmentTask+0x174>)
 8005e48:	791b      	ldrb	r3, [r3, #4]
 8005e4a:	021b      	lsls	r3, r3, #8
 8005e4c:	b21a      	sxth	r2, r3
 8005e4e:	4b38      	ldr	r3, [pc, #224]	; (8005f30 <StartInternalMeasurmentTask+0x174>)
 8005e50:	795b      	ldrb	r3, [r3, #5]
 8005e52:	b21b      	sxth	r3, r3
 8005e54:	4313      	orrs	r3, r2
 8005e56:	b21b      	sxth	r3, r3
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	84fb      	strh	r3, [r7, #38]	; 0x26
      _Mv.InternalPM25 = ((PMSData[6] << 8) | PMSData[7]);
 8005e5c:	4b34      	ldr	r3, [pc, #208]	; (8005f30 <StartInternalMeasurmentTask+0x174>)
 8005e5e:	799b      	ldrb	r3, [r3, #6]
 8005e60:	021b      	lsls	r3, r3, #8
 8005e62:	b21a      	sxth	r2, r3
 8005e64:	4b32      	ldr	r3, [pc, #200]	; (8005f30 <StartInternalMeasurmentTask+0x174>)
 8005e66:	79db      	ldrb	r3, [r3, #7]
 8005e68:	b21b      	sxth	r3, r3
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	b21b      	sxth	r3, r3
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	853b      	strh	r3, [r7, #40]	; 0x28
      _Mv.InternalPM10 = ((PMSData[8] << 8) | PMSData[9]);
 8005e72:	4b2f      	ldr	r3, [pc, #188]	; (8005f30 <StartInternalMeasurmentTask+0x174>)
 8005e74:	7a1b      	ldrb	r3, [r3, #8]
 8005e76:	021b      	lsls	r3, r3, #8
 8005e78:	b21a      	sxth	r2, r3
 8005e7a:	4b2d      	ldr	r3, [pc, #180]	; (8005f30 <StartInternalMeasurmentTask+0x174>)
 8005e7c:	7a5b      	ldrb	r3, [r3, #9]
 8005e7e:	b21b      	sxth	r3, r3
 8005e80:	4313      	orrs	r3, r2
 8005e82:	b21b      	sxth	r3, r3
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	857b      	strh	r3, [r7, #42]	; 0x2a
      PMS_EnterSleepMode();
 8005e88:	f7fd fe7c 	bl	8003b84 <PMS_EnterSleepMode>
      BME280_ReadAll(&Bme, &_Mv.InternalTemperature, &_Mv.Pressure, &_Mv.InternalHumidity);
 8005e8c:	f107 030c 	add.w	r3, r7, #12
 8005e90:	f103 000c 	add.w	r0, r3, #12
 8005e94:	f107 030c 	add.w	r3, r7, #12
 8005e98:	f103 0210 	add.w	r2, r3, #16
 8005e9c:	f107 030c 	add.w	r3, r7, #12
 8005ea0:	f103 0108 	add.w	r1, r3, #8
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	4825      	ldr	r0, [pc, #148]	; (8005f3c <StartInternalMeasurmentTask+0x180>)
 8005ea8:	f7fe fbc0 	bl	800462c <BME280_ReadAll>
      osMutexRelease(BME280MutexHandle);
 8005eac:	4b1f      	ldr	r3, [pc, #124]	; (8005f2c <StartInternalMeasurmentTask+0x170>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f00f ffd0 	bl	8015e56 <osMutexRelease>
      _Mv.Pressure += 10.0;
 8005eb6:	edd7 7a07 	vldr	s15, [r7, #28]
 8005eba:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005ebe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005ec2:	edc7 7a07 	vstr	s15, [r7, #28]
      osMutexRelease(SPI1MutexHandle);
 8005ec6:	4b18      	ldr	r3, [pc, #96]	; (8005f28 <StartInternalMeasurmentTask+0x16c>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f00f ffc3 	bl	8015e56 <osMutexRelease>
      osMessageQueuePut(MeasurmentQueueHandle, &_Mv, 0, osWaitForever);
 8005ed0:	4b1b      	ldr	r3, [pc, #108]	; (8005f40 <StartInternalMeasurmentTask+0x184>)
 8005ed2:	6818      	ldr	r0, [r3, #0]
 8005ed4:	f107 010c 	add.w	r1, r7, #12
 8005ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8005edc:	2200      	movs	r2, #0
 8005ede:	f010 f86b 	bl	8015fb8 <osMessageQueuePut>
      osMessageQueuePut(DataToSaveQueueHandle, &_Mv, 0, osWaitForever);
 8005ee2:	4b18      	ldr	r3, [pc, #96]	; (8005f44 <StartInternalMeasurmentTask+0x188>)
 8005ee4:	6818      	ldr	r0, [r3, #0]
 8005ee6:	f107 010c 	add.w	r1, r7, #12
 8005eea:	f04f 33ff 	mov.w	r3, #4294967295
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f010 f862 	bl	8015fb8 <osMessageQueuePut>
      osMessageQueuePut(WS2812bMeasurmentQueueHandle, &_Mv, 0, osWaitForever);
 8005ef4:	4b14      	ldr	r3, [pc, #80]	; (8005f48 <StartInternalMeasurmentTask+0x18c>)
 8005ef6:	6818      	ldr	r0, [r3, #0]
 8005ef8:	f107 010c 	add.w	r1, r7, #12
 8005efc:	f04f 33ff 	mov.w	r3, #4294967295
 8005f00:	2200      	movs	r2, #0
 8005f02:	f010 f859 	bl	8015fb8 <osMessageQueuePut>
      osMessageQueuePut(TimeBreakMeasurmentQueueHandle, &_Mv, 0, osWaitForever);
 8005f06:	4b11      	ldr	r3, [pc, #68]	; (8005f4c <StartInternalMeasurmentTask+0x190>)
 8005f08:	6818      	ldr	r0, [r3, #0]
 8005f0a:	f107 010c 	add.w	r1, r7, #12
 8005f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f12:	2200      	movs	r2, #0
 8005f14:	f010 f850 	bl	8015fb8 <osMessageQueuePut>
      osDelay(1);
 8005f18:	2001      	movs	r0, #1
 8005f1a:	f00f fd03 	bl	8015924 <osDelay>
   {
 8005f1e:	e760      	b.n	8005de2 <StartInternalMeasurmentTask+0x26>
 8005f20:	200040c4 	.word	0x200040c4
 8005f24:	2000408c 	.word	0x2000408c
 8005f28:	200040ac 	.word	0x200040ac
 8005f2c:	200040b4 	.word	0x200040b4
 8005f30:	20003fd8 	.word	0x20003fd8
 8005f34:	20004894 	.word	0x20004894
 8005f38:	2000403c 	.word	0x2000403c
 8005f3c:	20003f7c 	.word	0x20003f7c
 8005f40:	20004078 	.word	0x20004078
 8005f44:	20004084 	.word	0x20004084
 8005f48:	20004098 	.word	0x20004098
 8005f4c:	2000409c 	.word	0x2000409c

08005f50 <StartMoonPhaseTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMoonPhaseTask */
void StartMoonPhaseTask(void *argument)
{
 8005f50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f54:	ed2d 8b02 	vpush	{d8}
 8005f58:	b092      	sub	sp, #72	; 0x48
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN StartMoonPhaseTask */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 8005f5e:	4bb4      	ldr	r3, [pc, #720]	; (8006230 <StartMoonPhaseTask+0x2e0>)
 8005f60:	6818      	ldr	r0, [r3, #0]
 8005f62:	f04f 33ff 	mov.w	r3, #4294967295
 8005f66:	2202      	movs	r2, #2
 8005f68:	2102      	movs	r1, #2
 8005f6a:	f00f fe3d 	bl	8015be8 <osEventFlagsWait>
   /* Infinite loop */
   for(;;)
   {
      osEventFlagsWait(C3V1FlagsHandle, MOON_PHASE_FLAG, osFlagsWaitAny, osWaitForever);
 8005f6e:	4bb0      	ldr	r3, [pc, #704]	; (8006230 <StartMoonPhaseTask+0x2e0>)
 8005f70:	6818      	ldr	r0, [r3, #0]
 8005f72:	f04f 33ff 	mov.w	r3, #4294967295
 8005f76:	2200      	movs	r2, #0
 8005f78:	2110      	movs	r1, #16
 8005f7a:	f00f fe35 	bl	8015be8 <osEventFlagsWait>
      RTC_TimeTypeDef RtcTime;
      RTC_DateTypeDef RtcDate;
      double PhaseMoon = 0.0, TempPhaseNew = 0, TempPhaseOld = 0;
 8005f7e:	f04f 0200 	mov.w	r2, #0
 8005f82:	f04f 0300 	mov.w	r3, #0
 8005f86:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8005f8a:	f04f 0200 	mov.w	r2, #0
 8005f8e:	f04f 0300 	mov.w	r3, #0
 8005f92:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8005f96:	f04f 0200 	mov.w	r2, #0
 8005f9a:	f04f 0300 	mov.w	r3, #0
 8005f9e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      uint32_t Cnt          = 0;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
      uint8_t FullMoonPhase = 0, ThirdMoonPhase = 0, FirstMoonPhase = 0, NewMoonPhase = 0;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005fac:	2300      	movs	r3, #0
 8005fae:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8005fb8:	2300      	movs	r3, #0
 8005fba:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
      osMutexAcquire(RTCMutexHandle, osWaitForever);
 8005fbe:	4b9d      	ldr	r3, [pc, #628]	; (8006234 <StartMoonPhaseTask+0x2e4>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f04f 31ff 	mov.w	r1, #4294967295
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f00f fefa 	bl	8015dc0 <osMutexAcquire>
      HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 8005fcc:	f107 0314 	add.w	r3, r7, #20
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	4898      	ldr	r0, [pc, #608]	; (8006238 <StartMoonPhaseTask+0x2e8>)
 8005fd6:	f00a fec1 	bl	8010d5c <HAL_RTC_GetTime>
      HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 8005fda:	f107 0310 	add.w	r3, r7, #16
 8005fde:	2200      	movs	r2, #0
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	4895      	ldr	r0, [pc, #596]	; (8006238 <StartMoonPhaseTask+0x2e8>)
 8005fe4:	f00a ffa4 	bl	8010f30 <HAL_RTC_GetDate>
      osMutexRelease(RTCMutexHandle);
 8005fe8:	4b92      	ldr	r3, [pc, #584]	; (8006234 <StartMoonPhaseTask+0x2e4>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4618      	mov	r0, r3
 8005fee:	f00f ff32 	bl	8015e56 <osMutexRelease>
      TempPhaseNew = faza((RtcDate.Year + 2000), RtcDate.Month, RtcDate.Date, 0, 0, 0);
 8005ff2:	7cfb      	ldrb	r3, [r7, #19]
 8005ff4:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f7fa faab 	bl	8000554 <__aeabi_i2d>
 8005ffe:	4604      	mov	r4, r0
 8006000:	460d      	mov	r5, r1
 8006002:	7c7b      	ldrb	r3, [r7, #17]
 8006004:	4618      	mov	r0, r3
 8006006:	f7fa fa95 	bl	8000534 <__aeabi_ui2d>
 800600a:	4680      	mov	r8, r0
 800600c:	4689      	mov	r9, r1
 800600e:	7cbb      	ldrb	r3, [r7, #18]
 8006010:	4618      	mov	r0, r3
 8006012:	f7fa fa8f 	bl	8000534 <__aeabi_ui2d>
 8006016:	4602      	mov	r2, r0
 8006018:	460b      	mov	r3, r1
 800601a:	ed9f 5b7f 	vldr	d5, [pc, #508]	; 8006218 <StartMoonPhaseTask+0x2c8>
 800601e:	ed9f 4b7e 	vldr	d4, [pc, #504]	; 8006218 <StartMoonPhaseTask+0x2c8>
 8006022:	ed9f 3b7d 	vldr	d3, [pc, #500]	; 8006218 <StartMoonPhaseTask+0x2c8>
 8006026:	ec43 2b12 	vmov	d2, r2, r3
 800602a:	ec49 8b11 	vmov	d1, r8, r9
 800602e:	ec45 4b10 	vmov	d0, r4, r5
 8006032:	f003 fcc9 	bl	80099c8 <faza>
 8006036:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
      TempPhaseOld = TempPhaseNew;
 800603a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800603e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for(int Hours = 0; Hours < 24; Hours++)
 8006042:	2300      	movs	r3, #0
 8006044:	637b      	str	r3, [r7, #52]	; 0x34
 8006046:	e0aa      	b.n	800619e <StartMoonPhaseTask+0x24e>
      {
         for(int Minutes = 0; Minutes < 60; Minutes++)
 8006048:	2300      	movs	r3, #0
 800604a:	633b      	str	r3, [r7, #48]	; 0x30
 800604c:	e0a0      	b.n	8006190 <StartMoonPhaseTask+0x240>
         {

            TempPhaseNew = faza((RtcDate.Year + 2000), RtcDate.Month, RtcDate.Date, Hours, Minutes, 0);
 800604e:	7cfb      	ldrb	r3, [r7, #19]
 8006050:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8006054:	4618      	mov	r0, r3
 8006056:	f7fa fa7d 	bl	8000554 <__aeabi_i2d>
 800605a:	4604      	mov	r4, r0
 800605c:	460d      	mov	r5, r1
 800605e:	7c7b      	ldrb	r3, [r7, #17]
 8006060:	4618      	mov	r0, r3
 8006062:	f7fa fa67 	bl	8000534 <__aeabi_ui2d>
 8006066:	4680      	mov	r8, r0
 8006068:	4689      	mov	r9, r1
 800606a:	7cbb      	ldrb	r3, [r7, #18]
 800606c:	4618      	mov	r0, r3
 800606e:	f7fa fa61 	bl	8000534 <__aeabi_ui2d>
 8006072:	4682      	mov	sl, r0
 8006074:	468b      	mov	fp, r1
 8006076:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006078:	f7fa fa6c 	bl	8000554 <__aeabi_i2d>
 800607c:	ec41 0b18 	vmov	d8, r0, r1
 8006080:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006082:	f7fa fa67 	bl	8000554 <__aeabi_i2d>
 8006086:	4602      	mov	r2, r0
 8006088:	460b      	mov	r3, r1
 800608a:	ed9f 5b63 	vldr	d5, [pc, #396]	; 8006218 <StartMoonPhaseTask+0x2c8>
 800608e:	ec43 2b14 	vmov	d4, r2, r3
 8006092:	eeb0 3a48 	vmov.f32	s6, s16
 8006096:	eef0 3a68 	vmov.f32	s7, s17
 800609a:	ec4b ab12 	vmov	d2, sl, fp
 800609e:	ec49 8b11 	vmov	d1, r8, r9
 80060a2:	ec45 4b10 	vmov	d0, r4, r5
 80060a6:	f003 fc8f 	bl	80099c8 <faza>
 80060aa:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
            PhaseMoon += TempPhaseNew;
 80060ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80060b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80060b6:	f7fa f901 	bl	80002bc <__adddf3>
 80060ba:	4602      	mov	r2, r0
 80060bc:	460b      	mov	r3, r1
 80060be:	e9c7 2302 	strd	r2, r3, [r7, #8]
            if(TempPhaseNew > -50.5 && TempPhaseNew < -49.5)
 80060c2:	a357      	add	r3, pc, #348	; (adr r3, 8006220 <StartMoonPhaseTask+0x2d0>)
 80060c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80060cc:	f7fa fd3c 	bl	8000b48 <__aeabi_dcmpgt>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00c      	beq.n	80060f0 <StartMoonPhaseTask+0x1a0>
 80060d6:	f04f 0200 	mov.w	r2, #0
 80060da:	4b58      	ldr	r3, [pc, #352]	; (800623c <StartMoonPhaseTask+0x2ec>)
 80060dc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80060e0:	f7fa fd14 	bl	8000b0c <__aeabi_dcmplt>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d002      	beq.n	80060f0 <StartMoonPhaseTask+0x1a0>
            {
               ThirdMoonPhase = 1;
 80060ea:	2301      	movs	r3, #1
 80060ec:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
            }
            if(TempPhaseNew > -0.5 && TempPhaseNew < 0.5)
 80060f0:	f04f 0200 	mov.w	r2, #0
 80060f4:	4b52      	ldr	r3, [pc, #328]	; (8006240 <StartMoonPhaseTask+0x2f0>)
 80060f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80060fa:	f7fa fd25 	bl	8000b48 <__aeabi_dcmpgt>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d00c      	beq.n	800611e <StartMoonPhaseTask+0x1ce>
 8006104:	f04f 0200 	mov.w	r2, #0
 8006108:	4b4e      	ldr	r3, [pc, #312]	; (8006244 <StartMoonPhaseTask+0x2f4>)
 800610a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800610e:	f7fa fcfd 	bl	8000b0c <__aeabi_dcmplt>
 8006112:	4603      	mov	r3, r0
 8006114:	2b00      	cmp	r3, #0
 8006116:	d002      	beq.n	800611e <StartMoonPhaseTask+0x1ce>
            {
               NewMoonPhase = 1;
 8006118:	2301      	movs	r3, #1
 800611a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
            }
            if(TempPhaseNew > 49.5 && TempPhaseNew < 50.5)
 800611e:	a342      	add	r3, pc, #264	; (adr r3, 8006228 <StartMoonPhaseTask+0x2d8>)
 8006120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006124:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006128:	f7fa fd0e 	bl	8000b48 <__aeabi_dcmpgt>
 800612c:	4603      	mov	r3, r0
 800612e:	2b00      	cmp	r3, #0
 8006130:	d00c      	beq.n	800614c <StartMoonPhaseTask+0x1fc>
 8006132:	f04f 0200 	mov.w	r2, #0
 8006136:	4b44      	ldr	r3, [pc, #272]	; (8006248 <StartMoonPhaseTask+0x2f8>)
 8006138:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800613c:	f7fa fce6 	bl	8000b0c <__aeabi_dcmplt>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d002      	beq.n	800614c <StartMoonPhaseTask+0x1fc>
            {
               FirstMoonPhase = 1;
 8006146:	2301      	movs	r3, #1
 8006148:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
            }
            if(TempPhaseNew < TempPhaseOld && FullMoonPhase == 0)
 800614c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006150:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006154:	f7fa fcda 	bl	8000b0c <__aeabi_dcmplt>
 8006158:	4603      	mov	r3, r0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00b      	beq.n	8006176 <StartMoonPhaseTask+0x226>
 800615e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006162:	2b00      	cmp	r3, #0
 8006164:	d107      	bne.n	8006176 <StartMoonPhaseTask+0x226>
            {
               if(NewMoonPhase == 0)
 8006166:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800616a:	2b00      	cmp	r3, #0
 800616c:	d107      	bne.n	800617e <StartMoonPhaseTask+0x22e>
               {
                  FullMoonPhase = 1;
 800616e:	2301      	movs	r3, #1
 8006170:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
               if(NewMoonPhase == 0)
 8006174:	e003      	b.n	800617e <StartMoonPhaseTask+0x22e>
               }
            }
            else
            {
               TempPhaseOld = TempPhaseNew;
 8006176:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800617a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
            }
            Cnt++;
 800617e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006180:	3301      	adds	r3, #1
 8006182:	63fb      	str	r3, [r7, #60]	; 0x3c
            osDelay(5);
 8006184:	2005      	movs	r0, #5
 8006186:	f00f fbcd 	bl	8015924 <osDelay>
         for(int Minutes = 0; Minutes < 60; Minutes++)
 800618a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800618c:	3301      	adds	r3, #1
 800618e:	633b      	str	r3, [r7, #48]	; 0x30
 8006190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006192:	2b3b      	cmp	r3, #59	; 0x3b
 8006194:	f77f af5b 	ble.w	800604e <StartMoonPhaseTask+0xfe>
      for(int Hours = 0; Hours < 24; Hours++)
 8006198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800619a:	3301      	adds	r3, #1
 800619c:	637b      	str	r3, [r7, #52]	; 0x34
 800619e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061a0:	2b17      	cmp	r3, #23
 80061a2:	f77f af51 	ble.w	8006048 <StartMoonPhaseTask+0xf8>
         }
      }
      PhaseMoon /= (Cnt);
 80061a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80061aa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80061ac:	f7fa f9c2 	bl	8000534 <__aeabi_ui2d>
 80061b0:	4602      	mov	r2, r0
 80061b2:	460b      	mov	r3, r1
 80061b4:	4620      	mov	r0, r4
 80061b6:	4629      	mov	r1, r5
 80061b8:	f7fa fb60 	bl	800087c <__aeabi_ddiv>
 80061bc:	4602      	mov	r2, r0
 80061be:	460b      	mov	r3, r1
 80061c0:	e9c7 2302 	strd	r2, r3, [r7, #8]
      if(FullMoonPhase == 1)
 80061c4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d108      	bne.n	80061de <StartMoonPhaseTask+0x28e>
      {
         FullMoonPhase = 0;
 80061cc:	2300      	movs	r3, #0
 80061ce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
         PhaseMoon     = 100;
 80061d2:	f04f 0200 	mov.w	r2, #0
 80061d6:	4b1d      	ldr	r3, [pc, #116]	; (800624c <StartMoonPhaseTask+0x2fc>)
 80061d8:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80061dc:	e046      	b.n	800626c <StartMoonPhaseTask+0x31c>
      }
      else if(ThirdMoonPhase == 1)
 80061de:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d108      	bne.n	80061f8 <StartMoonPhaseTask+0x2a8>
      {
         ThirdMoonPhase = 0;
 80061e6:	2300      	movs	r3, #0
 80061e8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
         PhaseMoon      = -50;
 80061ec:	f04f 0200 	mov.w	r2, #0
 80061f0:	4b17      	ldr	r3, [pc, #92]	; (8006250 <StartMoonPhaseTask+0x300>)
 80061f2:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80061f6:	e039      	b.n	800626c <StartMoonPhaseTask+0x31c>
      }
      else if(NewMoonPhase == 1)
 80061f8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d129      	bne.n	8006254 <StartMoonPhaseTask+0x304>
      {
         NewMoonPhase = 0;
 8006200:	2300      	movs	r3, #0
 8006202:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
         PhaseMoon    = 0;
 8006206:	f04f 0200 	mov.w	r2, #0
 800620a:	f04f 0300 	mov.w	r3, #0
 800620e:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8006212:	e02b      	b.n	800626c <StartMoonPhaseTask+0x31c>
 8006214:	f3af 8000 	nop.w
	...
 8006224:	c0494000 	.word	0xc0494000
 8006228:	00000000 	.word	0x00000000
 800622c:	4048c000 	.word	0x4048c000
 8006230:	200040c4 	.word	0x200040c4
 8006234:	200040bc 	.word	0x200040bc
 8006238:	200041d4 	.word	0x200041d4
 800623c:	c048c000 	.word	0xc048c000
 8006240:	bfe00000 	.word	0xbfe00000
 8006244:	3fe00000 	.word	0x3fe00000
 8006248:	40494000 	.word	0x40494000
 800624c:	40590000 	.word	0x40590000
 8006250:	c0490000 	.word	0xc0490000
      }
      else if(FirstMoonPhase == 1)
 8006254:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8006258:	2b01      	cmp	r3, #1
 800625a:	d107      	bne.n	800626c <StartMoonPhaseTask+0x31c>
      {
         FirstMoonPhase = 0;
 800625c:	2300      	movs	r3, #0
 800625e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
         PhaseMoon      = 50;
 8006262:	f04f 0200 	mov.w	r2, #0
 8006266:	4b08      	ldr	r3, [pc, #32]	; (8006288 <StartMoonPhaseTask+0x338>)
 8006268:	e9c7 2302 	strd	r2, r3, [r7, #8]
      }
      osMessageQueuePut(MoonPhaseQueueHandle, &PhaseMoon, 0, osWaitForever);
 800626c:	4b07      	ldr	r3, [pc, #28]	; (800628c <StartMoonPhaseTask+0x33c>)
 800626e:	6818      	ldr	r0, [r3, #0]
 8006270:	f107 0108 	add.w	r1, r7, #8
 8006274:	f04f 33ff 	mov.w	r3, #4294967295
 8006278:	2200      	movs	r2, #0
 800627a:	f00f fe9d 	bl	8015fb8 <osMessageQueuePut>
      osDelay(1);
 800627e:	2001      	movs	r0, #1
 8006280:	f00f fb50 	bl	8015924 <osDelay>
   {
 8006284:	e673      	b.n	8005f6e <StartMoonPhaseTask+0x1e>
 8006286:	bf00      	nop
 8006288:	40490000 	.word	0x40490000
 800628c:	2000407c 	.word	0x2000407c

08006290 <StartE_PapierDrawingTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartE_PapierDrawingTask */
void StartE_PapierDrawingTask(void *argument)
{
 8006290:	b5b0      	push	{r4, r5, r7, lr}
 8006292:	b0c0      	sub	sp, #256	; 0x100
 8006294:	af04      	add	r7, sp, #16
 8006296:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN StartE_PapierDrawingTask */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 8006298:	4b19      	ldr	r3, [pc, #100]	; (8006300 <StartE_PapierDrawingTask+0x70>)
 800629a:	6818      	ldr	r0, [r3, #0]
 800629c:	f04f 33ff 	mov.w	r3, #4294967295
 80062a0:	2202      	movs	r2, #2
 80062a2:	2102      	movs	r1, #2
 80062a4:	f00f fca0 	bl	8015be8 <osEventFlagsWait>
   RTC_TimeTypeDef RtcTime;
   RTC_DateTypeDef RtcDate;
   MV_TypeDef _Mv          = { 0 };
 80062a8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80062ac:	2230      	movs	r2, #48	; 0x30
 80062ae:	2100      	movs	r1, #0
 80062b0:	4618      	mov	r0, r3
 80062b2:	f013 fb6d 	bl	8019990 <memset>
   double _MoonPhase       = 0;
 80062b6:	f04f 0200 	mov.w	r2, #0
 80062ba:	f04f 0300 	mov.w	r3, #0
 80062be:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
   Sunrise_TypeDef Sunrise = { 0 };
 80062c2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80062c6:	2200      	movs	r2, #0
 80062c8:	601a      	str	r2, [r3, #0]
 80062ca:	605a      	str	r2, [r3, #4]
 80062cc:	609a      	str	r2, [r3, #8]
 80062ce:	60da      	str	r2, [r3, #12]
 80062d0:	611a      	str	r2, [r3, #16]
 80062d2:	615a      	str	r2, [r3, #20]
   /* Infinite loop */
   for(;;)
   {
      osMessageQueueGet(MeasurmentQueueHandle, &_Mv, 0, osWaitForever);
 80062d4:	4b0b      	ldr	r3, [pc, #44]	; (8006304 <StartE_PapierDrawingTask+0x74>)
 80062d6:	6818      	ldr	r0, [r3, #0]
 80062d8:	f107 0194 	add.w	r1, r7, #148	; 0x94
 80062dc:	f04f 33ff 	mov.w	r3, #4294967295
 80062e0:	2200      	movs	r2, #0
 80062e2:	f00f fec9 	bl	8016078 <osMessageQueueGet>
      osMutexAcquire(E_PAPIERMutexHandle, osWaitForever);
 80062e6:	4b08      	ldr	r3, [pc, #32]	; (8006308 <StartE_PapierDrawingTask+0x78>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f04f 31ff 	mov.w	r1, #4294967295
 80062ee:	4618      	mov	r0, r3
 80062f0:	f00f fd66 	bl	8015dc0 <osMutexAcquire>
      e_papier_clear();
 80062f4:	f7fe fd1e 	bl	8004d34 <e_papier_clear>
      for(int i = 1; i < 3; i++)
 80062f8:	2301      	movs	r3, #1
 80062fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80062fe:	e01d      	b.n	800633c <StartE_PapierDrawingTask+0xac>
 8006300:	200040c4 	.word	0x200040c4
 8006304:	20004078 	.word	0x20004078
 8006308:	200040b0 	.word	0x200040b0
      {
         GFX_DrawLine(150 * i, 0, 150 * i, 300, BLACK, E_PAPIER);
 800630c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006310:	2296      	movs	r2, #150	; 0x96
 8006312:	fb02 f003 	mul.w	r0, r2, r3
 8006316:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800631a:	2296      	movs	r2, #150	; 0x96
 800631c:	fb03 f202 	mul.w	r2, r3, r2
 8006320:	2301      	movs	r3, #1
 8006322:	9301      	str	r3, [sp, #4]
 8006324:	2300      	movs	r3, #0
 8006326:	9300      	str	r3, [sp, #0]
 8006328:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800632c:	2100      	movs	r1, #0
 800632e:	f7fb f8e1 	bl	80014f4 <GFX_DrawLine>
      for(int i = 1; i < 3; i++)
 8006332:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006336:	3301      	adds	r3, #1
 8006338:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800633c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006340:	2b02      	cmp	r3, #2
 8006342:	dde3      	ble.n	800630c <StartE_PapierDrawingTask+0x7c>
      }
      GFX_DrawLine(0, 40, 400, 40, BLACK, E_PAPIER);
 8006344:	2301      	movs	r3, #1
 8006346:	9301      	str	r3, [sp, #4]
 8006348:	2300      	movs	r3, #0
 800634a:	9300      	str	r3, [sp, #0]
 800634c:	2328      	movs	r3, #40	; 0x28
 800634e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006352:	2128      	movs	r1, #40	; 0x28
 8006354:	2000      	movs	r0, #0
 8006356:	f7fb f8cd 	bl	80014f4 <GFX_DrawLine>
      char mes[100];
      osMutexAcquire(RTCMutexHandle, osWaitForever);
 800635a:	4bc8      	ldr	r3, [pc, #800]	; (800667c <StartE_PapierDrawingTask+0x3ec>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f04f 31ff 	mov.w	r1, #4294967295
 8006362:	4618      	mov	r0, r3
 8006364:	f00f fd2c 	bl	8015dc0 <osMutexAcquire>
      HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 8006368:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800636c:	2200      	movs	r2, #0
 800636e:	4619      	mov	r1, r3
 8006370:	48c3      	ldr	r0, [pc, #780]	; (8006680 <StartE_PapierDrawingTask+0x3f0>)
 8006372:	f00a fcf3 	bl	8010d5c <HAL_RTC_GetTime>
      HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 8006376:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800637a:	2200      	movs	r2, #0
 800637c:	4619      	mov	r1, r3
 800637e:	48c0      	ldr	r0, [pc, #768]	; (8006680 <StartE_PapierDrawingTask+0x3f0>)
 8006380:	f00a fdd6 	bl	8010f30 <HAL_RTC_GetDate>
      osMutexRelease(RTCMutexHandle);
 8006384:	4bbd      	ldr	r3, [pc, #756]	; (800667c <StartE_PapierDrawingTask+0x3ec>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4618      	mov	r0, r3
 800638a:	f00f fd64 	bl	8015e56 <osMutexRelease>
      osMessageQueueGet(MoonPhaseQueueHandle, &_MoonPhase, 0, 0);
 800638e:	4bbd      	ldr	r3, [pc, #756]	; (8006684 <StartE_PapierDrawingTask+0x3f4>)
 8006390:	6818      	ldr	r0, [r3, #0]
 8006392:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8006396:	2300      	movs	r3, #0
 8006398:	2200      	movs	r2, #0
 800639a:	f00f fe6d 	bl	8016078 <osMessageQueueGet>
      EF_SetFont(&timesNewRoman_12ptFontInfo);
 800639e:	48ba      	ldr	r0, [pc, #744]	; (8006688 <StartE_PapierDrawingTask+0x3f8>)
 80063a0:	f7fb f920 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)"WARUNKI ", 0, 0, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 80063a4:	2301      	movs	r3, #1
 80063a6:	9302      	str	r3, [sp, #8]
 80063a8:	2301      	movs	r3, #1
 80063aa:	9301      	str	r3, [sp, #4]
 80063ac:	2300      	movs	r3, #0
 80063ae:	9300      	str	r3, [sp, #0]
 80063b0:	2300      	movs	r3, #0
 80063b2:	2200      	movs	r2, #0
 80063b4:	2100      	movs	r1, #0
 80063b6:	48b5      	ldr	r0, [pc, #724]	; (800668c <StartE_PapierDrawingTask+0x3fc>)
 80063b8:	f7fb fb2e 	bl	8001a18 <EF_PutString>
      EF_PutString((uint8_t *)"ZEWNĘTRZNE", 0, 20, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 80063bc:	2301      	movs	r3, #1
 80063be:	9302      	str	r3, [sp, #8]
 80063c0:	2301      	movs	r3, #1
 80063c2:	9301      	str	r3, [sp, #4]
 80063c4:	2300      	movs	r3, #0
 80063c6:	9300      	str	r3, [sp, #0]
 80063c8:	2300      	movs	r3, #0
 80063ca:	2214      	movs	r2, #20
 80063cc:	2100      	movs	r1, #0
 80063ce:	48b0      	ldr	r0, [pc, #704]	; (8006690 <StartE_PapierDrawingTask+0x400>)
 80063d0:	f7fb fb22 	bl	8001a18 <EF_PutString>

      EF_PutString((uint8_t *)"PM 1.0", 0, 40, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 80063d4:	2301      	movs	r3, #1
 80063d6:	9302      	str	r3, [sp, #8]
 80063d8:	2301      	movs	r3, #1
 80063da:	9301      	str	r3, [sp, #4]
 80063dc:	2300      	movs	r3, #0
 80063de:	9300      	str	r3, [sp, #0]
 80063e0:	2300      	movs	r3, #0
 80063e2:	2228      	movs	r2, #40	; 0x28
 80063e4:	2100      	movs	r1, #0
 80063e6:	48ab      	ldr	r0, [pc, #684]	; (8006694 <StartE_PapierDrawingTask+0x404>)
 80063e8:	f7fb fb16 	bl	8001a18 <EF_PutString>
      EF_SetFont(&timesNewRoman_16ptFontInfo);
 80063ec:	48aa      	ldr	r0, [pc, #680]	; (8006698 <StartE_PapierDrawingTask+0x408>)
 80063ee:	f7fb f8f9 	bl	80015e4 <EF_SetFont>
      sprintf(mes, "%d ug/m3", _Mv.ExtPM1);
 80063f2:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80063f6:	461a      	mov	r2, r3
 80063f8:	f107 030c 	add.w	r3, r7, #12
 80063fc:	49a7      	ldr	r1, [pc, #668]	; (800669c <StartE_PapierDrawingTask+0x40c>)
 80063fe:	4618      	mov	r0, r3
 8006400:	f006 fbca 	bl	800cb98 <sprintf_>
      EF_PutString((uint8_t *)mes, 0, 55, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006404:	f107 000c 	add.w	r0, r7, #12
 8006408:	2301      	movs	r3, #1
 800640a:	9302      	str	r3, [sp, #8]
 800640c:	2301      	movs	r3, #1
 800640e:	9301      	str	r3, [sp, #4]
 8006410:	2300      	movs	r3, #0
 8006412:	9300      	str	r3, [sp, #0]
 8006414:	2300      	movs	r3, #0
 8006416:	2237      	movs	r2, #55	; 0x37
 8006418:	2100      	movs	r1, #0
 800641a:	f7fb fafd 	bl	8001a18 <EF_PutString>

      EF_SetFont(&timesNewRoman_12ptFontInfo);
 800641e:	489a      	ldr	r0, [pc, #616]	; (8006688 <StartE_PapierDrawingTask+0x3f8>)
 8006420:	f7fb f8e0 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)"PM 2.5", 0, 80, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006424:	2301      	movs	r3, #1
 8006426:	9302      	str	r3, [sp, #8]
 8006428:	2301      	movs	r3, #1
 800642a:	9301      	str	r3, [sp, #4]
 800642c:	2300      	movs	r3, #0
 800642e:	9300      	str	r3, [sp, #0]
 8006430:	2300      	movs	r3, #0
 8006432:	2250      	movs	r2, #80	; 0x50
 8006434:	2100      	movs	r1, #0
 8006436:	489a      	ldr	r0, [pc, #616]	; (80066a0 <StartE_PapierDrawingTask+0x410>)
 8006438:	f7fb faee 	bl	8001a18 <EF_PutString>
      sprintf(mes, "%d ug/m3", _Mv.ExtPM25);
 800643c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006440:	461a      	mov	r2, r3
 8006442:	f107 030c 	add.w	r3, r7, #12
 8006446:	4995      	ldr	r1, [pc, #596]	; (800669c <StartE_PapierDrawingTask+0x40c>)
 8006448:	4618      	mov	r0, r3
 800644a:	f006 fba5 	bl	800cb98 <sprintf_>
      EF_SetFont(&timesNewRoman_16ptFontInfo);
 800644e:	4892      	ldr	r0, [pc, #584]	; (8006698 <StartE_PapierDrawingTask+0x408>)
 8006450:	f7fb f8c8 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)mes, 0, 95, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006454:	f107 000c 	add.w	r0, r7, #12
 8006458:	2301      	movs	r3, #1
 800645a:	9302      	str	r3, [sp, #8]
 800645c:	2301      	movs	r3, #1
 800645e:	9301      	str	r3, [sp, #4]
 8006460:	2300      	movs	r3, #0
 8006462:	9300      	str	r3, [sp, #0]
 8006464:	2300      	movs	r3, #0
 8006466:	225f      	movs	r2, #95	; 0x5f
 8006468:	2100      	movs	r1, #0
 800646a:	f7fb fad5 	bl	8001a18 <EF_PutString>

      EF_SetFont(&timesNewRoman_12ptFontInfo);
 800646e:	4886      	ldr	r0, [pc, #536]	; (8006688 <StartE_PapierDrawingTask+0x3f8>)
 8006470:	f7fb f8b8 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)"PM 10.0", 0, 120, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006474:	2301      	movs	r3, #1
 8006476:	9302      	str	r3, [sp, #8]
 8006478:	2301      	movs	r3, #1
 800647a:	9301      	str	r3, [sp, #4]
 800647c:	2300      	movs	r3, #0
 800647e:	9300      	str	r3, [sp, #0]
 8006480:	2300      	movs	r3, #0
 8006482:	2278      	movs	r2, #120	; 0x78
 8006484:	2100      	movs	r1, #0
 8006486:	4887      	ldr	r0, [pc, #540]	; (80066a4 <StartE_PapierDrawingTask+0x414>)
 8006488:	f7fb fac6 	bl	8001a18 <EF_PutString>
      sprintf(mes, "%d ug/m3", _Mv.ExtPM10);
 800648c:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8006490:	461a      	mov	r2, r3
 8006492:	f107 030c 	add.w	r3, r7, #12
 8006496:	4981      	ldr	r1, [pc, #516]	; (800669c <StartE_PapierDrawingTask+0x40c>)
 8006498:	4618      	mov	r0, r3
 800649a:	f006 fb7d 	bl	800cb98 <sprintf_>
      EF_SetFont(&timesNewRoman_16ptFontInfo);
 800649e:	487e      	ldr	r0, [pc, #504]	; (8006698 <StartE_PapierDrawingTask+0x408>)
 80064a0:	f7fb f8a0 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)mes, 0, 135, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 80064a4:	f107 000c 	add.w	r0, r7, #12
 80064a8:	2301      	movs	r3, #1
 80064aa:	9302      	str	r3, [sp, #8]
 80064ac:	2301      	movs	r3, #1
 80064ae:	9301      	str	r3, [sp, #4]
 80064b0:	2300      	movs	r3, #0
 80064b2:	9300      	str	r3, [sp, #0]
 80064b4:	2300      	movs	r3, #0
 80064b6:	2287      	movs	r2, #135	; 0x87
 80064b8:	2100      	movs	r1, #0
 80064ba:	f7fb faad 	bl	8001a18 <EF_PutString>

      EF_SetFont(&timesNewRoman_12ptFontInfo);
 80064be:	4872      	ldr	r0, [pc, #456]	; (8006688 <StartE_PapierDrawingTask+0x3f8>)
 80064c0:	f7fb f890 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)"TEMPERATURA", 0, 160, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 80064c4:	2301      	movs	r3, #1
 80064c6:	9302      	str	r3, [sp, #8]
 80064c8:	2301      	movs	r3, #1
 80064ca:	9301      	str	r3, [sp, #4]
 80064cc:	2300      	movs	r3, #0
 80064ce:	9300      	str	r3, [sp, #0]
 80064d0:	2300      	movs	r3, #0
 80064d2:	22a0      	movs	r2, #160	; 0xa0
 80064d4:	2100      	movs	r1, #0
 80064d6:	4874      	ldr	r0, [pc, #464]	; (80066a8 <StartE_PapierDrawingTask+0x418>)
 80064d8:	f7fb fa9e 	bl	8001a18 <EF_PutString>
      sprintf(mes, "%0.2f T", _Mv.ExtTemperature);
 80064dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80064e0:	4618      	mov	r0, r3
 80064e2:	f7fa f849 	bl	8000578 <__aeabi_f2d>
 80064e6:	4602      	mov	r2, r0
 80064e8:	460b      	mov	r3, r1
 80064ea:	f107 000c 	add.w	r0, r7, #12
 80064ee:	496f      	ldr	r1, [pc, #444]	; (80066ac <StartE_PapierDrawingTask+0x41c>)
 80064f0:	f006 fb52 	bl	800cb98 <sprintf_>
      EF_SetFont(&timesNewRoman_16ptFontInfo);
 80064f4:	4868      	ldr	r0, [pc, #416]	; (8006698 <StartE_PapierDrawingTask+0x408>)
 80064f6:	f7fb f875 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)mes, 0, 175, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 80064fa:	f107 000c 	add.w	r0, r7, #12
 80064fe:	2301      	movs	r3, #1
 8006500:	9302      	str	r3, [sp, #8]
 8006502:	2301      	movs	r3, #1
 8006504:	9301      	str	r3, [sp, #4]
 8006506:	2300      	movs	r3, #0
 8006508:	9300      	str	r3, [sp, #0]
 800650a:	2300      	movs	r3, #0
 800650c:	22af      	movs	r2, #175	; 0xaf
 800650e:	2100      	movs	r1, #0
 8006510:	f7fb fa82 	bl	8001a18 <EF_PutString>

      EF_SetFont(&timesNewRoman_12ptFontInfo);
 8006514:	485c      	ldr	r0, [pc, #368]	; (8006688 <StartE_PapierDrawingTask+0x3f8>)
 8006516:	f7fb f865 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)"WILGOTNOŚĆ", 0, 200, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 800651a:	2301      	movs	r3, #1
 800651c:	9302      	str	r3, [sp, #8]
 800651e:	2301      	movs	r3, #1
 8006520:	9301      	str	r3, [sp, #4]
 8006522:	2300      	movs	r3, #0
 8006524:	9300      	str	r3, [sp, #0]
 8006526:	2300      	movs	r3, #0
 8006528:	22c8      	movs	r2, #200	; 0xc8
 800652a:	2100      	movs	r1, #0
 800652c:	4860      	ldr	r0, [pc, #384]	; (80066b0 <StartE_PapierDrawingTask+0x420>)
 800652e:	f7fb fa73 	bl	8001a18 <EF_PutString>
      sprintf(mes, "%0.2f %%", _Mv.ExtHumidity);
 8006532:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006536:	4618      	mov	r0, r3
 8006538:	f7fa f81e 	bl	8000578 <__aeabi_f2d>
 800653c:	4602      	mov	r2, r0
 800653e:	460b      	mov	r3, r1
 8006540:	f107 000c 	add.w	r0, r7, #12
 8006544:	495b      	ldr	r1, [pc, #364]	; (80066b4 <StartE_PapierDrawingTask+0x424>)
 8006546:	f006 fb27 	bl	800cb98 <sprintf_>
      EF_SetFont(&timesNewRoman_16ptFontInfo);
 800654a:	4853      	ldr	r0, [pc, #332]	; (8006698 <StartE_PapierDrawingTask+0x408>)
 800654c:	f7fb f84a 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)mes, 0, 215, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006550:	f107 000c 	add.w	r0, r7, #12
 8006554:	2301      	movs	r3, #1
 8006556:	9302      	str	r3, [sp, #8]
 8006558:	2301      	movs	r3, #1
 800655a:	9301      	str	r3, [sp, #4]
 800655c:	2300      	movs	r3, #0
 800655e:	9300      	str	r3, [sp, #0]
 8006560:	2300      	movs	r3, #0
 8006562:	22d7      	movs	r2, #215	; 0xd7
 8006564:	2100      	movs	r1, #0
 8006566:	f7fb fa57 	bl	8001a18 <EF_PutString>

      EF_SetFont(&timesNewRoman_12ptFontInfo);
 800656a:	4847      	ldr	r0, [pc, #284]	; (8006688 <StartE_PapierDrawingTask+0x3f8>)
 800656c:	f7fb f83a 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)"NAPIĘCIE", 0, 240, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006570:	2301      	movs	r3, #1
 8006572:	9302      	str	r3, [sp, #8]
 8006574:	2301      	movs	r3, #1
 8006576:	9301      	str	r3, [sp, #4]
 8006578:	2300      	movs	r3, #0
 800657a:	9300      	str	r3, [sp, #0]
 800657c:	2300      	movs	r3, #0
 800657e:	22f0      	movs	r2, #240	; 0xf0
 8006580:	2100      	movs	r1, #0
 8006582:	484d      	ldr	r0, [pc, #308]	; (80066b8 <StartE_PapierDrawingTask+0x428>)
 8006584:	f7fb fa48 	bl	8001a18 <EF_PutString>
      EF_PutString((uint8_t *)"BATERII", 0, 255, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006588:	2301      	movs	r3, #1
 800658a:	9302      	str	r3, [sp, #8]
 800658c:	2301      	movs	r3, #1
 800658e:	9301      	str	r3, [sp, #4]
 8006590:	2300      	movs	r3, #0
 8006592:	9300      	str	r3, [sp, #0]
 8006594:	2300      	movs	r3, #0
 8006596:	22ff      	movs	r2, #255	; 0xff
 8006598:	2100      	movs	r1, #0
 800659a:	4848      	ldr	r0, [pc, #288]	; (80066bc <StartE_PapierDrawingTask+0x42c>)
 800659c:	f7fb fa3c 	bl	8001a18 <EF_PutString>
      sprintf(mes, "%0.2fV", _Mv.BatteryVoltage);
 80065a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80065a4:	4618      	mov	r0, r3
 80065a6:	f7f9 ffe7 	bl	8000578 <__aeabi_f2d>
 80065aa:	4602      	mov	r2, r0
 80065ac:	460b      	mov	r3, r1
 80065ae:	f107 000c 	add.w	r0, r7, #12
 80065b2:	4943      	ldr	r1, [pc, #268]	; (80066c0 <StartE_PapierDrawingTask+0x430>)
 80065b4:	f006 faf0 	bl	800cb98 <sprintf_>
      EF_SetFont(&timesNewRoman_16ptFontInfo);
 80065b8:	4837      	ldr	r0, [pc, #220]	; (8006698 <StartE_PapierDrawingTask+0x408>)
 80065ba:	f7fb f813 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)mes, 0, 270, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 80065be:	f107 000c 	add.w	r0, r7, #12
 80065c2:	2301      	movs	r3, #1
 80065c4:	9302      	str	r3, [sp, #8]
 80065c6:	2301      	movs	r3, #1
 80065c8:	9301      	str	r3, [sp, #4]
 80065ca:	2300      	movs	r3, #0
 80065cc:	9300      	str	r3, [sp, #0]
 80065ce:	2300      	movs	r3, #0
 80065d0:	f44f 7287 	mov.w	r2, #270	; 0x10e
 80065d4:	2100      	movs	r1, #0
 80065d6:	f7fb fa1f 	bl	8001a18 <EF_PutString>

      EF_SetFont(&timesNewRoman_12ptFontInfo);
 80065da:	482b      	ldr	r0, [pc, #172]	; (8006688 <StartE_PapierDrawingTask+0x3f8>)
 80065dc:	f7fb f802 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)"WARUNKI ", 152, 0, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 80065e0:	2301      	movs	r3, #1
 80065e2:	9302      	str	r3, [sp, #8]
 80065e4:	2301      	movs	r3, #1
 80065e6:	9301      	str	r3, [sp, #4]
 80065e8:	2300      	movs	r3, #0
 80065ea:	9300      	str	r3, [sp, #0]
 80065ec:	2300      	movs	r3, #0
 80065ee:	2200      	movs	r2, #0
 80065f0:	2198      	movs	r1, #152	; 0x98
 80065f2:	4826      	ldr	r0, [pc, #152]	; (800668c <StartE_PapierDrawingTask+0x3fc>)
 80065f4:	f7fb fa10 	bl	8001a18 <EF_PutString>
      EF_PutString((uint8_t *)"WEWNĘTRZNE", 152, 20, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 80065f8:	2301      	movs	r3, #1
 80065fa:	9302      	str	r3, [sp, #8]
 80065fc:	2301      	movs	r3, #1
 80065fe:	9301      	str	r3, [sp, #4]
 8006600:	2300      	movs	r3, #0
 8006602:	9300      	str	r3, [sp, #0]
 8006604:	2300      	movs	r3, #0
 8006606:	2214      	movs	r2, #20
 8006608:	2198      	movs	r1, #152	; 0x98
 800660a:	482e      	ldr	r0, [pc, #184]	; (80066c4 <StartE_PapierDrawingTask+0x434>)
 800660c:	f7fb fa04 	bl	8001a18 <EF_PutString>

      EF_PutString((uint8_t *)"PM 1.0", 152, 40, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006610:	2301      	movs	r3, #1
 8006612:	9302      	str	r3, [sp, #8]
 8006614:	2301      	movs	r3, #1
 8006616:	9301      	str	r3, [sp, #4]
 8006618:	2300      	movs	r3, #0
 800661a:	9300      	str	r3, [sp, #0]
 800661c:	2300      	movs	r3, #0
 800661e:	2228      	movs	r2, #40	; 0x28
 8006620:	2198      	movs	r1, #152	; 0x98
 8006622:	481c      	ldr	r0, [pc, #112]	; (8006694 <StartE_PapierDrawingTask+0x404>)
 8006624:	f7fb f9f8 	bl	8001a18 <EF_PutString>
      EF_SetFont(&timesNewRoman_16ptFontInfo);
 8006628:	481b      	ldr	r0, [pc, #108]	; (8006698 <StartE_PapierDrawingTask+0x408>)
 800662a:	f7fa ffdb 	bl	80015e4 <EF_SetFont>
      sprintf(mes, "%d ug/m3", _Mv.InternalPM1);
 800662e:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8006632:	461a      	mov	r2, r3
 8006634:	f107 030c 	add.w	r3, r7, #12
 8006638:	4918      	ldr	r1, [pc, #96]	; (800669c <StartE_PapierDrawingTask+0x40c>)
 800663a:	4618      	mov	r0, r3
 800663c:	f006 faac 	bl	800cb98 <sprintf_>
      EF_PutString((uint8_t *)mes, 152, 55, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006640:	f107 000c 	add.w	r0, r7, #12
 8006644:	2301      	movs	r3, #1
 8006646:	9302      	str	r3, [sp, #8]
 8006648:	2301      	movs	r3, #1
 800664a:	9301      	str	r3, [sp, #4]
 800664c:	2300      	movs	r3, #0
 800664e:	9300      	str	r3, [sp, #0]
 8006650:	2300      	movs	r3, #0
 8006652:	2237      	movs	r2, #55	; 0x37
 8006654:	2198      	movs	r1, #152	; 0x98
 8006656:	f7fb f9df 	bl	8001a18 <EF_PutString>

      EF_SetFont(&timesNewRoman_12ptFontInfo);
 800665a:	480b      	ldr	r0, [pc, #44]	; (8006688 <StartE_PapierDrawingTask+0x3f8>)
 800665c:	f7fa ffc2 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)"PM 2.5", 152, 80, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006660:	2301      	movs	r3, #1
 8006662:	9302      	str	r3, [sp, #8]
 8006664:	2301      	movs	r3, #1
 8006666:	9301      	str	r3, [sp, #4]
 8006668:	2300      	movs	r3, #0
 800666a:	9300      	str	r3, [sp, #0]
 800666c:	2300      	movs	r3, #0
 800666e:	2250      	movs	r2, #80	; 0x50
 8006670:	2198      	movs	r1, #152	; 0x98
 8006672:	480b      	ldr	r0, [pc, #44]	; (80066a0 <StartE_PapierDrawingTask+0x410>)
 8006674:	f7fb f9d0 	bl	8001a18 <EF_PutString>
 8006678:	e026      	b.n	80066c8 <StartE_PapierDrawingTask+0x438>
 800667a:	bf00      	nop
 800667c:	200040bc 	.word	0x200040bc
 8006680:	200041d4 	.word	0x200041d4
 8006684:	2000407c 	.word	0x2000407c
 8006688:	08021af0 	.word	0x08021af0
 800668c:	080203b8 	.word	0x080203b8
 8006690:	080203c4 	.word	0x080203c4
 8006694:	080203d0 	.word	0x080203d0
 8006698:	08022dfc 	.word	0x08022dfc
 800669c:	080203d8 	.word	0x080203d8
 80066a0:	080203e4 	.word	0x080203e4
 80066a4:	080203ec 	.word	0x080203ec
 80066a8:	080203f4 	.word	0x080203f4
 80066ac:	08020400 	.word	0x08020400
 80066b0:	08020408 	.word	0x08020408
 80066b4:	08020418 	.word	0x08020418
 80066b8:	08020424 	.word	0x08020424
 80066bc:	08020430 	.word	0x08020430
 80066c0:	08020438 	.word	0x08020438
 80066c4:	08020440 	.word	0x08020440
      sprintf(mes, "%d ug/m3", _Mv.InternalPM25);
 80066c8:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 80066cc:	461a      	mov	r2, r3
 80066ce:	f107 030c 	add.w	r3, r7, #12
 80066d2:	49ae      	ldr	r1, [pc, #696]	; (800698c <StartE_PapierDrawingTask+0x6fc>)
 80066d4:	4618      	mov	r0, r3
 80066d6:	f006 fa5f 	bl	800cb98 <sprintf_>
      EF_SetFont(&timesNewRoman_16ptFontInfo);
 80066da:	48ad      	ldr	r0, [pc, #692]	; (8006990 <StartE_PapierDrawingTask+0x700>)
 80066dc:	f7fa ff82 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)mes, 152, 95, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 80066e0:	f107 000c 	add.w	r0, r7, #12
 80066e4:	2301      	movs	r3, #1
 80066e6:	9302      	str	r3, [sp, #8]
 80066e8:	2301      	movs	r3, #1
 80066ea:	9301      	str	r3, [sp, #4]
 80066ec:	2300      	movs	r3, #0
 80066ee:	9300      	str	r3, [sp, #0]
 80066f0:	2300      	movs	r3, #0
 80066f2:	225f      	movs	r2, #95	; 0x5f
 80066f4:	2198      	movs	r1, #152	; 0x98
 80066f6:	f7fb f98f 	bl	8001a18 <EF_PutString>

      EF_SetFont(&timesNewRoman_12ptFontInfo);
 80066fa:	48a6      	ldr	r0, [pc, #664]	; (8006994 <StartE_PapierDrawingTask+0x704>)
 80066fc:	f7fa ff72 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)"PM 10.0", 152, 120, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006700:	2301      	movs	r3, #1
 8006702:	9302      	str	r3, [sp, #8]
 8006704:	2301      	movs	r3, #1
 8006706:	9301      	str	r3, [sp, #4]
 8006708:	2300      	movs	r3, #0
 800670a:	9300      	str	r3, [sp, #0]
 800670c:	2300      	movs	r3, #0
 800670e:	2278      	movs	r2, #120	; 0x78
 8006710:	2198      	movs	r1, #152	; 0x98
 8006712:	48a1      	ldr	r0, [pc, #644]	; (8006998 <StartE_PapierDrawingTask+0x708>)
 8006714:	f7fb f980 	bl	8001a18 <EF_PutString>
      sprintf(mes, "%d ug/m3", _Mv.InternalPM10);
 8006718:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800671c:	461a      	mov	r2, r3
 800671e:	f107 030c 	add.w	r3, r7, #12
 8006722:	499a      	ldr	r1, [pc, #616]	; (800698c <StartE_PapierDrawingTask+0x6fc>)
 8006724:	4618      	mov	r0, r3
 8006726:	f006 fa37 	bl	800cb98 <sprintf_>
      EF_SetFont(&timesNewRoman_16ptFontInfo);
 800672a:	4899      	ldr	r0, [pc, #612]	; (8006990 <StartE_PapierDrawingTask+0x700>)
 800672c:	f7fa ff5a 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)mes, 152, 135, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006730:	f107 000c 	add.w	r0, r7, #12
 8006734:	2301      	movs	r3, #1
 8006736:	9302      	str	r3, [sp, #8]
 8006738:	2301      	movs	r3, #1
 800673a:	9301      	str	r3, [sp, #4]
 800673c:	2300      	movs	r3, #0
 800673e:	9300      	str	r3, [sp, #0]
 8006740:	2300      	movs	r3, #0
 8006742:	2287      	movs	r2, #135	; 0x87
 8006744:	2198      	movs	r1, #152	; 0x98
 8006746:	f7fb f967 	bl	8001a18 <EF_PutString>

      EF_SetFont(&timesNewRoman_12ptFontInfo);
 800674a:	4892      	ldr	r0, [pc, #584]	; (8006994 <StartE_PapierDrawingTask+0x704>)
 800674c:	f7fa ff4a 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)"TEMPERATURA", 152, 160, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006750:	2301      	movs	r3, #1
 8006752:	9302      	str	r3, [sp, #8]
 8006754:	2301      	movs	r3, #1
 8006756:	9301      	str	r3, [sp, #4]
 8006758:	2300      	movs	r3, #0
 800675a:	9300      	str	r3, [sp, #0]
 800675c:	2300      	movs	r3, #0
 800675e:	22a0      	movs	r2, #160	; 0xa0
 8006760:	2198      	movs	r1, #152	; 0x98
 8006762:	488e      	ldr	r0, [pc, #568]	; (800699c <StartE_PapierDrawingTask+0x70c>)
 8006764:	f7fb f958 	bl	8001a18 <EF_PutString>
      sprintf(mes, "%0.2f T", _Mv.InternalTemperature);
 8006768:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800676c:	4618      	mov	r0, r3
 800676e:	f7f9 ff03 	bl	8000578 <__aeabi_f2d>
 8006772:	4602      	mov	r2, r0
 8006774:	460b      	mov	r3, r1
 8006776:	f107 000c 	add.w	r0, r7, #12
 800677a:	4989      	ldr	r1, [pc, #548]	; (80069a0 <StartE_PapierDrawingTask+0x710>)
 800677c:	f006 fa0c 	bl	800cb98 <sprintf_>
      EF_SetFont(&timesNewRoman_16ptFontInfo);
 8006780:	4883      	ldr	r0, [pc, #524]	; (8006990 <StartE_PapierDrawingTask+0x700>)
 8006782:	f7fa ff2f 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)mes, 152, 175, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006786:	f107 000c 	add.w	r0, r7, #12
 800678a:	2301      	movs	r3, #1
 800678c:	9302      	str	r3, [sp, #8]
 800678e:	2301      	movs	r3, #1
 8006790:	9301      	str	r3, [sp, #4]
 8006792:	2300      	movs	r3, #0
 8006794:	9300      	str	r3, [sp, #0]
 8006796:	2300      	movs	r3, #0
 8006798:	22af      	movs	r2, #175	; 0xaf
 800679a:	2198      	movs	r1, #152	; 0x98
 800679c:	f7fb f93c 	bl	8001a18 <EF_PutString>

      EF_SetFont(&timesNewRoman_12ptFontInfo);
 80067a0:	487c      	ldr	r0, [pc, #496]	; (8006994 <StartE_PapierDrawingTask+0x704>)
 80067a2:	f7fa ff1f 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)"WILGOTNOŚĆ", 152, 200, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 80067a6:	2301      	movs	r3, #1
 80067a8:	9302      	str	r3, [sp, #8]
 80067aa:	2301      	movs	r3, #1
 80067ac:	9301      	str	r3, [sp, #4]
 80067ae:	2300      	movs	r3, #0
 80067b0:	9300      	str	r3, [sp, #0]
 80067b2:	2300      	movs	r3, #0
 80067b4:	22c8      	movs	r2, #200	; 0xc8
 80067b6:	2198      	movs	r1, #152	; 0x98
 80067b8:	487a      	ldr	r0, [pc, #488]	; (80069a4 <StartE_PapierDrawingTask+0x714>)
 80067ba:	f7fb f92d 	bl	8001a18 <EF_PutString>
      sprintf(mes, "%0.2f %%", _Mv.InternalHumidity);
 80067be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80067c2:	4618      	mov	r0, r3
 80067c4:	f7f9 fed8 	bl	8000578 <__aeabi_f2d>
 80067c8:	4602      	mov	r2, r0
 80067ca:	460b      	mov	r3, r1
 80067cc:	f107 000c 	add.w	r0, r7, #12
 80067d0:	4975      	ldr	r1, [pc, #468]	; (80069a8 <StartE_PapierDrawingTask+0x718>)
 80067d2:	f006 f9e1 	bl	800cb98 <sprintf_>
      EF_SetFont(&timesNewRoman_16ptFontInfo);
 80067d6:	486e      	ldr	r0, [pc, #440]	; (8006990 <StartE_PapierDrawingTask+0x700>)
 80067d8:	f7fa ff04 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)mes, 152, 215, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 80067dc:	f107 000c 	add.w	r0, r7, #12
 80067e0:	2301      	movs	r3, #1
 80067e2:	9302      	str	r3, [sp, #8]
 80067e4:	2301      	movs	r3, #1
 80067e6:	9301      	str	r3, [sp, #4]
 80067e8:	2300      	movs	r3, #0
 80067ea:	9300      	str	r3, [sp, #0]
 80067ec:	2300      	movs	r3, #0
 80067ee:	22d7      	movs	r2, #215	; 0xd7
 80067f0:	2198      	movs	r1, #152	; 0x98
 80067f2:	f7fb f911 	bl	8001a18 <EF_PutString>

      EF_SetFont(&timesNewRoman_12ptFontInfo);
 80067f6:	4867      	ldr	r0, [pc, #412]	; (8006994 <StartE_PapierDrawingTask+0x704>)
 80067f8:	f7fa fef4 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)"CIŚNIENIE", 152, 240, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 80067fc:	2301      	movs	r3, #1
 80067fe:	9302      	str	r3, [sp, #8]
 8006800:	2301      	movs	r3, #1
 8006802:	9301      	str	r3, [sp, #4]
 8006804:	2300      	movs	r3, #0
 8006806:	9300      	str	r3, [sp, #0]
 8006808:	2300      	movs	r3, #0
 800680a:	22f0      	movs	r2, #240	; 0xf0
 800680c:	2198      	movs	r1, #152	; 0x98
 800680e:	4867      	ldr	r0, [pc, #412]	; (80069ac <StartE_PapierDrawingTask+0x71c>)
 8006810:	f7fb f902 	bl	8001a18 <EF_PutString>
      sprintf(mes, "%0.2f hPa", _Mv.Pressure);
 8006814:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006818:	4618      	mov	r0, r3
 800681a:	f7f9 fead 	bl	8000578 <__aeabi_f2d>
 800681e:	4602      	mov	r2, r0
 8006820:	460b      	mov	r3, r1
 8006822:	f107 000c 	add.w	r0, r7, #12
 8006826:	4962      	ldr	r1, [pc, #392]	; (80069b0 <StartE_PapierDrawingTask+0x720>)
 8006828:	f006 f9b6 	bl	800cb98 <sprintf_>
      EF_SetFont(&timesNewRoman_16ptFontInfo);
 800682c:	4858      	ldr	r0, [pc, #352]	; (8006990 <StartE_PapierDrawingTask+0x700>)
 800682e:	f7fa fed9 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)mes, 152, 255, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006832:	f107 000c 	add.w	r0, r7, #12
 8006836:	2301      	movs	r3, #1
 8006838:	9302      	str	r3, [sp, #8]
 800683a:	2301      	movs	r3, #1
 800683c:	9301      	str	r3, [sp, #4]
 800683e:	2300      	movs	r3, #0
 8006840:	9300      	str	r3, [sp, #0]
 8006842:	2300      	movs	r3, #0
 8006844:	22ff      	movs	r2, #255	; 0xff
 8006846:	2198      	movs	r1, #152	; 0x98
 8006848:	f7fb f8e6 	bl	8001a18 <EF_PutString>

      EF_SetFont(&timesNewRoman_10ptFontInfo);
 800684c:	4859      	ldr	r0, [pc, #356]	; (80069b4 <StartE_PapierDrawingTask+0x724>)
 800684e:	f7fa fec9 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)"SEKCJA", 300, 0, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006852:	2301      	movs	r3, #1
 8006854:	9302      	str	r3, [sp, #8]
 8006856:	2301      	movs	r3, #1
 8006858:	9301      	str	r3, [sp, #4]
 800685a:	2300      	movs	r3, #0
 800685c:	9300      	str	r3, [sp, #0]
 800685e:	2300      	movs	r3, #0
 8006860:	2200      	movs	r2, #0
 8006862:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006866:	4854      	ldr	r0, [pc, #336]	; (80069b8 <StartE_PapierDrawingTask+0x728>)
 8006868:	f7fb f8d6 	bl	8001a18 <EF_PutString>
      EF_PutString((uint8_t *)"DODATKOWA", 300, 20, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 800686c:	2301      	movs	r3, #1
 800686e:	9302      	str	r3, [sp, #8]
 8006870:	2301      	movs	r3, #1
 8006872:	9301      	str	r3, [sp, #4]
 8006874:	2300      	movs	r3, #0
 8006876:	9300      	str	r3, [sp, #0]
 8006878:	2300      	movs	r3, #0
 800687a:	2214      	movs	r2, #20
 800687c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006880:	484e      	ldr	r0, [pc, #312]	; (80069bc <StartE_PapierDrawingTask+0x72c>)
 8006882:	f7fb f8c9 	bl	8001a18 <EF_PutString>

      EF_PutString((uint8_t *)"FAZA", 300, 40, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006886:	2301      	movs	r3, #1
 8006888:	9302      	str	r3, [sp, #8]
 800688a:	2301      	movs	r3, #1
 800688c:	9301      	str	r3, [sp, #4]
 800688e:	2300      	movs	r3, #0
 8006890:	9300      	str	r3, [sp, #0]
 8006892:	2300      	movs	r3, #0
 8006894:	2228      	movs	r2, #40	; 0x28
 8006896:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800689a:	4849      	ldr	r0, [pc, #292]	; (80069c0 <StartE_PapierDrawingTask+0x730>)
 800689c:	f7fb f8bc 	bl	8001a18 <EF_PutString>
      EF_PutString((uint8_t *)"KSIĘŻYCA", 300, 52, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 80068a0:	2301      	movs	r3, #1
 80068a2:	9302      	str	r3, [sp, #8]
 80068a4:	2301      	movs	r3, #1
 80068a6:	9301      	str	r3, [sp, #4]
 80068a8:	2300      	movs	r3, #0
 80068aa:	9300      	str	r3, [sp, #0]
 80068ac:	2300      	movs	r3, #0
 80068ae:	2234      	movs	r2, #52	; 0x34
 80068b0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80068b4:	4843      	ldr	r0, [pc, #268]	; (80069c4 <StartE_PapierDrawingTask+0x734>)
 80068b6:	f7fb f8af 	bl	8001a18 <EF_PutString>
      sprintf(mes, "%0.2f%%", _MoonPhase);
 80068ba:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80068be:	f107 000c 	add.w	r0, r7, #12
 80068c2:	4941      	ldr	r1, [pc, #260]	; (80069c8 <StartE_PapierDrawingTask+0x738>)
 80068c4:	f006 f968 	bl	800cb98 <sprintf_>
      if(_MoonPhase == 100)
 80068c8:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80068cc:	f04f 0200 	mov.w	r2, #0
 80068d0:	4b3e      	ldr	r3, [pc, #248]	; (80069cc <StartE_PapierDrawingTask+0x73c>)
 80068d2:	f7fa f911 	bl	8000af8 <__aeabi_dcmpeq>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d00d      	beq.n	80068f8 <StartE_PapierDrawingTask+0x668>
      {
         EF_PutString((uint8_t *)"PEŁNIA", 300, 64, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 80068dc:	2301      	movs	r3, #1
 80068de:	9302      	str	r3, [sp, #8]
 80068e0:	2301      	movs	r3, #1
 80068e2:	9301      	str	r3, [sp, #4]
 80068e4:	2300      	movs	r3, #0
 80068e6:	9300      	str	r3, [sp, #0]
 80068e8:	2300      	movs	r3, #0
 80068ea:	2240      	movs	r2, #64	; 0x40
 80068ec:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80068f0:	4837      	ldr	r0, [pc, #220]	; (80069d0 <StartE_PapierDrawingTask+0x740>)
 80068f2:	f7fb f891 	bl	8001a18 <EF_PutString>
 80068f6:	e09e      	b.n	8006a36 <StartE_PapierDrawingTask+0x7a6>
      }
      else if(_MoonPhase == -50)
 80068f8:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80068fc:	f04f 0200 	mov.w	r2, #0
 8006900:	4b34      	ldr	r3, [pc, #208]	; (80069d4 <StartE_PapierDrawingTask+0x744>)
 8006902:	f7fa f8f9 	bl	8000af8 <__aeabi_dcmpeq>
 8006906:	4603      	mov	r3, r0
 8006908:	2b00      	cmp	r3, #0
 800690a:	d00d      	beq.n	8006928 <StartE_PapierDrawingTask+0x698>
      {
         EF_PutString((uint8_t *)"3 KWADRA", 300, 64, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 800690c:	2301      	movs	r3, #1
 800690e:	9302      	str	r3, [sp, #8]
 8006910:	2301      	movs	r3, #1
 8006912:	9301      	str	r3, [sp, #4]
 8006914:	2300      	movs	r3, #0
 8006916:	9300      	str	r3, [sp, #0]
 8006918:	2300      	movs	r3, #0
 800691a:	2240      	movs	r2, #64	; 0x40
 800691c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006920:	482d      	ldr	r0, [pc, #180]	; (80069d8 <StartE_PapierDrawingTask+0x748>)
 8006922:	f7fb f879 	bl	8001a18 <EF_PutString>
 8006926:	e086      	b.n	8006a36 <StartE_PapierDrawingTask+0x7a6>
      }
      else if(_MoonPhase == 0)
 8006928:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800692c:	f04f 0200 	mov.w	r2, #0
 8006930:	f04f 0300 	mov.w	r3, #0
 8006934:	f7fa f8e0 	bl	8000af8 <__aeabi_dcmpeq>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00d      	beq.n	800695a <StartE_PapierDrawingTask+0x6ca>
      {
         EF_PutString((uint8_t *)"NÓW", 300, 64, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 800693e:	2301      	movs	r3, #1
 8006940:	9302      	str	r3, [sp, #8]
 8006942:	2301      	movs	r3, #1
 8006944:	9301      	str	r3, [sp, #4]
 8006946:	2300      	movs	r3, #0
 8006948:	9300      	str	r3, [sp, #0]
 800694a:	2300      	movs	r3, #0
 800694c:	2240      	movs	r2, #64	; 0x40
 800694e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006952:	4822      	ldr	r0, [pc, #136]	; (80069dc <StartE_PapierDrawingTask+0x74c>)
 8006954:	f7fb f860 	bl	8001a18 <EF_PutString>
 8006958:	e06d      	b.n	8006a36 <StartE_PapierDrawingTask+0x7a6>
      }
      else if(_MoonPhase == 50)
 800695a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800695e:	f04f 0200 	mov.w	r2, #0
 8006962:	4b1f      	ldr	r3, [pc, #124]	; (80069e0 <StartE_PapierDrawingTask+0x750>)
 8006964:	f7fa f8c8 	bl	8000af8 <__aeabi_dcmpeq>
 8006968:	4603      	mov	r3, r0
 800696a:	2b00      	cmp	r3, #0
 800696c:	d03c      	beq.n	80069e8 <StartE_PapierDrawingTask+0x758>
      {
         EF_PutString((uint8_t *)"1 KWADRA", 300, 64, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 800696e:	2301      	movs	r3, #1
 8006970:	9302      	str	r3, [sp, #8]
 8006972:	2301      	movs	r3, #1
 8006974:	9301      	str	r3, [sp, #4]
 8006976:	2300      	movs	r3, #0
 8006978:	9300      	str	r3, [sp, #0]
 800697a:	2300      	movs	r3, #0
 800697c:	2240      	movs	r2, #64	; 0x40
 800697e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006982:	4818      	ldr	r0, [pc, #96]	; (80069e4 <StartE_PapierDrawingTask+0x754>)
 8006984:	f7fb f848 	bl	8001a18 <EF_PutString>
 8006988:	e055      	b.n	8006a36 <StartE_PapierDrawingTask+0x7a6>
 800698a:	bf00      	nop
 800698c:	080203d8 	.word	0x080203d8
 8006990:	08022dfc 	.word	0x08022dfc
 8006994:	08021af0 	.word	0x08021af0
 8006998:	080203ec 	.word	0x080203ec
 800699c:	080203f4 	.word	0x080203f4
 80069a0:	08020400 	.word	0x08020400
 80069a4:	08020408 	.word	0x08020408
 80069a8:	08020418 	.word	0x08020418
 80069ac:	0802044c 	.word	0x0802044c
 80069b0:	08020458 	.word	0x08020458
 80069b4:	08020e98 	.word	0x08020e98
 80069b8:	08020464 	.word	0x08020464
 80069bc:	0802046c 	.word	0x0802046c
 80069c0:	08020478 	.word	0x08020478
 80069c4:	08020480 	.word	0x08020480
 80069c8:	0802048c 	.word	0x0802048c
 80069cc:	40590000 	.word	0x40590000
 80069d0:	08020494 	.word	0x08020494
 80069d4:	c0490000 	.word	0xc0490000
 80069d8:	0802049c 	.word	0x0802049c
 80069dc:	080204a8 	.word	0x080204a8
 80069e0:	40490000 	.word	0x40490000
 80069e4:	080204b0 	.word	0x080204b0
      }
      else
      {
         if(_MoonPhase < 0)
 80069e8:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80069ec:	f04f 0200 	mov.w	r2, #0
 80069f0:	f04f 0300 	mov.w	r3, #0
 80069f4:	f7fa f88a 	bl	8000b0c <__aeabi_dcmplt>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d006      	beq.n	8006a0c <StartE_PapierDrawingTask+0x77c>
         {
            _MoonPhase = -_MoonPhase;
 80069fe:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006a02:	4614      	mov	r4, r2
 8006a04:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8006a08:	e9c7 4522 	strd	r4, r5, [r7, #136]	; 0x88
         }
         sprintf(mes, "%0.2f%%", _MoonPhase);
 8006a0c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006a10:	f107 000c 	add.w	r0, r7, #12
 8006a14:	49da      	ldr	r1, [pc, #872]	; (8006d80 <StartE_PapierDrawingTask+0xaf0>)
 8006a16:	f006 f8bf 	bl	800cb98 <sprintf_>
         EF_PutString((uint8_t *)mes, 300, 64, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006a1a:	f107 000c 	add.w	r0, r7, #12
 8006a1e:	2301      	movs	r3, #1
 8006a20:	9302      	str	r3, [sp, #8]
 8006a22:	2301      	movs	r3, #1
 8006a24:	9301      	str	r3, [sp, #4]
 8006a26:	2300      	movs	r3, #0
 8006a28:	9300      	str	r3, [sp, #0]
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	2240      	movs	r2, #64	; 0x40
 8006a2e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006a32:	f7fa fff1 	bl	8001a18 <EF_PutString>
      }
      EF_PutString((uint8_t *)"CZAS", 300, 76, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006a36:	2301      	movs	r3, #1
 8006a38:	9302      	str	r3, [sp, #8]
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	9301      	str	r3, [sp, #4]
 8006a3e:	2300      	movs	r3, #0
 8006a40:	9300      	str	r3, [sp, #0]
 8006a42:	2300      	movs	r3, #0
 8006a44:	224c      	movs	r2, #76	; 0x4c
 8006a46:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006a4a:	48ce      	ldr	r0, [pc, #824]	; (8006d84 <StartE_PapierDrawingTask+0xaf4>)
 8006a4c:	f7fa ffe4 	bl	8001a18 <EF_PutString>
      EF_PutString((uint8_t *)"NADEJŚCIA", 300, 88, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006a50:	2301      	movs	r3, #1
 8006a52:	9302      	str	r3, [sp, #8]
 8006a54:	2301      	movs	r3, #1
 8006a56:	9301      	str	r3, [sp, #4]
 8006a58:	2300      	movs	r3, #0
 8006a5a:	9300      	str	r3, [sp, #0]
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	2258      	movs	r2, #88	; 0x58
 8006a60:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006a64:	48c8      	ldr	r0, [pc, #800]	; (8006d88 <StartE_PapierDrawingTask+0xaf8>)
 8006a66:	f7fa ffd7 	bl	8001a18 <EF_PutString>
      EF_PutString((uint8_t *)"DANYCH", 300, 100, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	9302      	str	r3, [sp, #8]
 8006a6e:	2301      	movs	r3, #1
 8006a70:	9301      	str	r3, [sp, #4]
 8006a72:	2300      	movs	r3, #0
 8006a74:	9300      	str	r3, [sp, #0]
 8006a76:	2300      	movs	r3, #0
 8006a78:	2264      	movs	r2, #100	; 0x64
 8006a7a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006a7e:	48c3      	ldr	r0, [pc, #780]	; (8006d8c <StartE_PapierDrawingTask+0xafc>)
 8006a80:	f7fa ffca 	bl	8001a18 <EF_PutString>
      sprintf(mes, "%d : %d : %d", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 8006a84:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
 8006a88:	461a      	mov	r2, r3
 8006a8a:	f897 30c9 	ldrb.w	r3, [r7, #201]	; 0xc9
 8006a8e:	4619      	mov	r1, r3
 8006a90:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 8006a94:	f107 000c 	add.w	r0, r7, #12
 8006a98:	9300      	str	r3, [sp, #0]
 8006a9a:	460b      	mov	r3, r1
 8006a9c:	49bc      	ldr	r1, [pc, #752]	; (8006d90 <StartE_PapierDrawingTask+0xb00>)
 8006a9e:	f006 f87b 	bl	800cb98 <sprintf_>
      EF_PutString((uint8_t *)mes, 300, 112, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006aa2:	f107 000c 	add.w	r0, r7, #12
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	9302      	str	r3, [sp, #8]
 8006aaa:	2301      	movs	r3, #1
 8006aac:	9301      	str	r3, [sp, #4]
 8006aae:	2300      	movs	r3, #0
 8006ab0:	9300      	str	r3, [sp, #0]
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	2270      	movs	r2, #112	; 0x70
 8006ab6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006aba:	f7fa ffad 	bl	8001a18 <EF_PutString>
      sprintf(mes, "%d : %d : 20%d", RtcDate.Date, RtcDate.Month, RtcDate.Year);
 8006abe:	f897 30c6 	ldrb.w	r3, [r7, #198]	; 0xc6
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 8006ac8:	4619      	mov	r1, r3
 8006aca:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006ace:	f107 000c 	add.w	r0, r7, #12
 8006ad2:	9300      	str	r3, [sp, #0]
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	49af      	ldr	r1, [pc, #700]	; (8006d94 <StartE_PapierDrawingTask+0xb04>)
 8006ad8:	f006 f85e 	bl	800cb98 <sprintf_>
      EF_PutString((uint8_t *)mes, 300, 124, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006adc:	f107 000c 	add.w	r0, r7, #12
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	9302      	str	r3, [sp, #8]
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	9301      	str	r3, [sp, #4]
 8006ae8:	2300      	movs	r3, #0
 8006aea:	9300      	str	r3, [sp, #0]
 8006aec:	2300      	movs	r3, #0
 8006aee:	227c      	movs	r2, #124	; 0x7c
 8006af0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006af4:	f7fa ff90 	bl	8001a18 <EF_PutString>

      osMessageQueueGet(SunriseQueueHandle, &Sunrise, 0, 0);
 8006af8:	4ba7      	ldr	r3, [pc, #668]	; (8006d98 <StartE_PapierDrawingTask+0xb08>)
 8006afa:	6818      	ldr	r0, [r3, #0]
 8006afc:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8006b00:	2300      	movs	r3, #0
 8006b02:	2200      	movs	r2, #0
 8006b04:	f00f fab8 	bl	8016078 <osMessageQueueGet>
      uint8_t TempHour     = 0;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
      uint8_t TempMinute   = 0;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	f887 30ea 	strb.w	r3, [r7, #234]	; 0xea
      uint8_t TempSecond   = 0;
 8006b14:	2300      	movs	r3, #0
 8006b16:	f887 30e9 	strb.w	r3, [r7, #233]	; 0xe9
      uint32_t TempSunrise = (Sunrise.Sunrise + 1.0) * 3600;
 8006b1a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8006b1e:	f04f 0200 	mov.w	r2, #0
 8006b22:	4b9e      	ldr	r3, [pc, #632]	; (8006d9c <StartE_PapierDrawingTask+0xb0c>)
 8006b24:	f7f9 fbca 	bl	80002bc <__adddf3>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	460b      	mov	r3, r1
 8006b2c:	4610      	mov	r0, r2
 8006b2e:	4619      	mov	r1, r3
 8006b30:	a391      	add	r3, pc, #580	; (adr r3, 8006d78 <StartE_PapierDrawingTask+0xae8>)
 8006b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b36:	f7f9 fd77 	bl	8000628 <__aeabi_dmul>
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	4610      	mov	r0, r2
 8006b40:	4619      	mov	r1, r3
 8006b42:	f7fa f849 	bl	8000bd8 <__aeabi_d2uiz>
 8006b46:	4603      	mov	r3, r0
 8006b48:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      TempHour             = (TempSunrise / 3600);
 8006b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b50:	4a93      	ldr	r2, [pc, #588]	; (8006da0 <StartE_PapierDrawingTask+0xb10>)
 8006b52:	fba2 2303 	umull	r2, r3, r2, r3
 8006b56:	0adb      	lsrs	r3, r3, #11
 8006b58:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
      TempSunrise -= (TempHour * 3600);
 8006b5c:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 8006b60:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8006b64:	fb02 f303 	mul.w	r3, r2, r3
 8006b68:	461a      	mov	r2, r3
 8006b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b6e:	1a9b      	subs	r3, r3, r2
 8006b70:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      TempMinute = (TempSunrise / 60);
 8006b74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b78:	4a8a      	ldr	r2, [pc, #552]	; (8006da4 <StartE_PapierDrawingTask+0xb14>)
 8006b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b7e:	095b      	lsrs	r3, r3, #5
 8006b80:	f887 30ea 	strb.w	r3, [r7, #234]	; 0xea
      TempSunrise -= (TempMinute * 60);
 8006b84:	f897 20ea 	ldrb.w	r2, [r7, #234]	; 0xea
 8006b88:	4613      	mov	r3, r2
 8006b8a:	011b      	lsls	r3, r3, #4
 8006b8c:	1a9b      	subs	r3, r3, r2
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	461a      	mov	r2, r3
 8006b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b96:	1a9b      	subs	r3, r3, r2
 8006b98:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      TempSecond = TempSunrise;
 8006b9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ba0:	f887 30e9 	strb.w	r3, [r7, #233]	; 0xe9
      EF_PutString((uint8_t *)"WSCHÓD", 300, 136, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	9302      	str	r3, [sp, #8]
 8006ba8:	2301      	movs	r3, #1
 8006baa:	9301      	str	r3, [sp, #4]
 8006bac:	2300      	movs	r3, #0
 8006bae:	9300      	str	r3, [sp, #0]
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	2288      	movs	r2, #136	; 0x88
 8006bb4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006bb8:	487b      	ldr	r0, [pc, #492]	; (8006da8 <StartE_PapierDrawingTask+0xb18>)
 8006bba:	f7fa ff2d 	bl	8001a18 <EF_PutString>
      EF_PutString((uint8_t *)"SŁOŃCA", 300, 148, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	9302      	str	r3, [sp, #8]
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	9301      	str	r3, [sp, #4]
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	9300      	str	r3, [sp, #0]
 8006bca:	2300      	movs	r3, #0
 8006bcc:	2294      	movs	r2, #148	; 0x94
 8006bce:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006bd2:	4876      	ldr	r0, [pc, #472]	; (8006dac <StartE_PapierDrawingTask+0xb1c>)
 8006bd4:	f7fa ff20 	bl	8001a18 <EF_PutString>
      sprintf(mes, "%d : %d : %d", TempHour, TempMinute, TempSecond);
 8006bd8:	f897 20eb 	ldrb.w	r2, [r7, #235]	; 0xeb
 8006bdc:	f897 10ea 	ldrb.w	r1, [r7, #234]	; 0xea
 8006be0:	f897 30e9 	ldrb.w	r3, [r7, #233]	; 0xe9
 8006be4:	f107 000c 	add.w	r0, r7, #12
 8006be8:	9300      	str	r3, [sp, #0]
 8006bea:	460b      	mov	r3, r1
 8006bec:	4968      	ldr	r1, [pc, #416]	; (8006d90 <StartE_PapierDrawingTask+0xb00>)
 8006bee:	f005 ffd3 	bl	800cb98 <sprintf_>
      EF_PutString((uint8_t *)mes, 300, 160, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006bf2:	f107 000c 	add.w	r0, r7, #12
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	9302      	str	r3, [sp, #8]
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	9301      	str	r3, [sp, #4]
 8006bfe:	2300      	movs	r3, #0
 8006c00:	9300      	str	r3, [sp, #0]
 8006c02:	2300      	movs	r3, #0
 8006c04:	22a0      	movs	r2, #160	; 0xa0
 8006c06:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006c0a:	f7fa ff05 	bl	8001a18 <EF_PutString>

      uint32_t TempSunset = (Sunrise.Sunset + 1.0) * 3600;
 8006c0e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8006c12:	f04f 0200 	mov.w	r2, #0
 8006c16:	4b61      	ldr	r3, [pc, #388]	; (8006d9c <StartE_PapierDrawingTask+0xb0c>)
 8006c18:	f7f9 fb50 	bl	80002bc <__adddf3>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	460b      	mov	r3, r1
 8006c20:	4610      	mov	r0, r2
 8006c22:	4619      	mov	r1, r3
 8006c24:	a354      	add	r3, pc, #336	; (adr r3, 8006d78 <StartE_PapierDrawingTask+0xae8>)
 8006c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c2a:	f7f9 fcfd 	bl	8000628 <__aeabi_dmul>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	460b      	mov	r3, r1
 8006c32:	4610      	mov	r0, r2
 8006c34:	4619      	mov	r1, r3
 8006c36:	f7f9 ffcf 	bl	8000bd8 <__aeabi_d2uiz>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      TempHour            = (TempSunset / 3600);
 8006c40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c44:	4a56      	ldr	r2, [pc, #344]	; (8006da0 <StartE_PapierDrawingTask+0xb10>)
 8006c46:	fba2 2303 	umull	r2, r3, r2, r3
 8006c4a:	0adb      	lsrs	r3, r3, #11
 8006c4c:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
      TempSunset -= (TempHour * 3600);
 8006c50:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 8006c54:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8006c58:	fb02 f303 	mul.w	r3, r2, r3
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c62:	1a9b      	subs	r3, r3, r2
 8006c64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      TempMinute = (TempSunset / 60);
 8006c68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c6c:	4a4d      	ldr	r2, [pc, #308]	; (8006da4 <StartE_PapierDrawingTask+0xb14>)
 8006c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c72:	095b      	lsrs	r3, r3, #5
 8006c74:	f887 30ea 	strb.w	r3, [r7, #234]	; 0xea
      TempSunset -= (TempMinute * 60);
 8006c78:	f897 20ea 	ldrb.w	r2, [r7, #234]	; 0xea
 8006c7c:	4613      	mov	r3, r2
 8006c7e:	011b      	lsls	r3, r3, #4
 8006c80:	1a9b      	subs	r3, r3, r2
 8006c82:	009b      	lsls	r3, r3, #2
 8006c84:	461a      	mov	r2, r3
 8006c86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c8a:	1a9b      	subs	r3, r3, r2
 8006c8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      TempSecond = TempSunset;
 8006c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c94:	f887 30e9 	strb.w	r3, [r7, #233]	; 0xe9
      EF_PutString((uint8_t *)"ZACHÓD", 300, 172, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006c98:	2301      	movs	r3, #1
 8006c9a:	9302      	str	r3, [sp, #8]
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	9301      	str	r3, [sp, #4]
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	9300      	str	r3, [sp, #0]
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	22ac      	movs	r2, #172	; 0xac
 8006ca8:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006cac:	4840      	ldr	r0, [pc, #256]	; (8006db0 <StartE_PapierDrawingTask+0xb20>)
 8006cae:	f7fa feb3 	bl	8001a18 <EF_PutString>
      EF_PutString((uint8_t *)"SŁOŃCA", 300, 184, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	9302      	str	r3, [sp, #8]
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	9301      	str	r3, [sp, #4]
 8006cba:	2300      	movs	r3, #0
 8006cbc:	9300      	str	r3, [sp, #0]
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	22b8      	movs	r2, #184	; 0xb8
 8006cc2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006cc6:	4839      	ldr	r0, [pc, #228]	; (8006dac <StartE_PapierDrawingTask+0xb1c>)
 8006cc8:	f7fa fea6 	bl	8001a18 <EF_PutString>
      sprintf(mes, "%d : %d : %d", TempHour, TempMinute, TempSecond);
 8006ccc:	f897 20eb 	ldrb.w	r2, [r7, #235]	; 0xeb
 8006cd0:	f897 10ea 	ldrb.w	r1, [r7, #234]	; 0xea
 8006cd4:	f897 30e9 	ldrb.w	r3, [r7, #233]	; 0xe9
 8006cd8:	f107 000c 	add.w	r0, r7, #12
 8006cdc:	9300      	str	r3, [sp, #0]
 8006cde:	460b      	mov	r3, r1
 8006ce0:	492b      	ldr	r1, [pc, #172]	; (8006d90 <StartE_PapierDrawingTask+0xb00>)
 8006ce2:	f005 ff59 	bl	800cb98 <sprintf_>
      EF_PutString((uint8_t *)mes, 300, 196, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006ce6:	f107 000c 	add.w	r0, r7, #12
 8006cea:	2301      	movs	r3, #1
 8006cec:	9302      	str	r3, [sp, #8]
 8006cee:	2301      	movs	r3, #1
 8006cf0:	9301      	str	r3, [sp, #4]
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	9300      	str	r3, [sp, #0]
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	22c4      	movs	r2, #196	; 0xc4
 8006cfa:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006cfe:	f7fa fe8b 	bl	8001a18 <EF_PutString>

      uint32_t TempSunup = (Sunrise.Sunup + 1.0) * 3600;
 8006d02:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006d06:	f04f 0200 	mov.w	r2, #0
 8006d0a:	4b24      	ldr	r3, [pc, #144]	; (8006d9c <StartE_PapierDrawingTask+0xb0c>)
 8006d0c:	f7f9 fad6 	bl	80002bc <__adddf3>
 8006d10:	4602      	mov	r2, r0
 8006d12:	460b      	mov	r3, r1
 8006d14:	4610      	mov	r0, r2
 8006d16:	4619      	mov	r1, r3
 8006d18:	a317      	add	r3, pc, #92	; (adr r3, 8006d78 <StartE_PapierDrawingTask+0xae8>)
 8006d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d1e:	f7f9 fc83 	bl	8000628 <__aeabi_dmul>
 8006d22:	4602      	mov	r2, r0
 8006d24:	460b      	mov	r3, r1
 8006d26:	4610      	mov	r0, r2
 8006d28:	4619      	mov	r1, r3
 8006d2a:	f7f9 ff55 	bl	8000bd8 <__aeabi_d2uiz>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      TempHour           = (TempSunup / 3600);
 8006d34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d38:	4a19      	ldr	r2, [pc, #100]	; (8006da0 <StartE_PapierDrawingTask+0xb10>)
 8006d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d3e:	0adb      	lsrs	r3, r3, #11
 8006d40:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
      TempSunup -= (TempHour * 3600);
 8006d44:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 8006d48:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8006d4c:	fb02 f303 	mul.w	r3, r2, r3
 8006d50:	461a      	mov	r2, r3
 8006d52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d56:	1a9b      	subs	r3, r3, r2
 8006d58:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      TempMinute = (TempSunup / 60);
 8006d5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d60:	4a10      	ldr	r2, [pc, #64]	; (8006da4 <StartE_PapierDrawingTask+0xb14>)
 8006d62:	fba2 2303 	umull	r2, r3, r2, r3
 8006d66:	095b      	lsrs	r3, r3, #5
 8006d68:	f887 30ea 	strb.w	r3, [r7, #234]	; 0xea
      TempSunup -= (TempMinute * 60);
 8006d6c:	f897 20ea 	ldrb.w	r2, [r7, #234]	; 0xea
 8006d70:	e020      	b.n	8006db4 <StartE_PapierDrawingTask+0xb24>
 8006d72:	bf00      	nop
 8006d74:	f3af 8000 	nop.w
 8006d78:	00000000 	.word	0x00000000
 8006d7c:	40ac2000 	.word	0x40ac2000
 8006d80:	0802048c 	.word	0x0802048c
 8006d84:	080204bc 	.word	0x080204bc
 8006d88:	080204c4 	.word	0x080204c4
 8006d8c:	080204d0 	.word	0x080204d0
 8006d90:	080204d8 	.word	0x080204d8
 8006d94:	080203a8 	.word	0x080203a8
 8006d98:	20004090 	.word	0x20004090
 8006d9c:	3ff00000 	.word	0x3ff00000
 8006da0:	91a2b3c5 	.word	0x91a2b3c5
 8006da4:	88888889 	.word	0x88888889
 8006da8:	080204e8 	.word	0x080204e8
 8006dac:	080204f0 	.word	0x080204f0
 8006db0:	080204fc 	.word	0x080204fc
 8006db4:	4613      	mov	r3, r2
 8006db6:	011b      	lsls	r3, r3, #4
 8006db8:	1a9b      	subs	r3, r3, r2
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dc2:	1a9b      	subs	r3, r3, r2
 8006dc4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      TempSecond = TempSunup;
 8006dc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dcc:	f887 30e9 	strb.w	r3, [r7, #233]	; 0xe9
      EF_PutString((uint8_t *)"GÓROWANIE", 300, 208, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	9302      	str	r3, [sp, #8]
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	9301      	str	r3, [sp, #4]
 8006dd8:	2300      	movs	r3, #0
 8006dda:	9300      	str	r3, [sp, #0]
 8006ddc:	2300      	movs	r3, #0
 8006dde:	22d0      	movs	r2, #208	; 0xd0
 8006de0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006de4:	4829      	ldr	r0, [pc, #164]	; (8006e8c <StartE_PapierDrawingTask+0xbfc>)
 8006de6:	f7fa fe17 	bl	8001a18 <EF_PutString>
      EF_PutString((uint8_t *)"SŁOŃCA", 300, 220, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006dea:	2301      	movs	r3, #1
 8006dec:	9302      	str	r3, [sp, #8]
 8006dee:	2301      	movs	r3, #1
 8006df0:	9301      	str	r3, [sp, #4]
 8006df2:	2300      	movs	r3, #0
 8006df4:	9300      	str	r3, [sp, #0]
 8006df6:	2300      	movs	r3, #0
 8006df8:	22dc      	movs	r2, #220	; 0xdc
 8006dfa:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006dfe:	4824      	ldr	r0, [pc, #144]	; (8006e90 <StartE_PapierDrawingTask+0xc00>)
 8006e00:	f7fa fe0a 	bl	8001a18 <EF_PutString>
      sprintf(mes, "%d : %d : %d", TempHour, TempMinute, TempSecond);
 8006e04:	f897 20eb 	ldrb.w	r2, [r7, #235]	; 0xeb
 8006e08:	f897 10ea 	ldrb.w	r1, [r7, #234]	; 0xea
 8006e0c:	f897 30e9 	ldrb.w	r3, [r7, #233]	; 0xe9
 8006e10:	f107 000c 	add.w	r0, r7, #12
 8006e14:	9300      	str	r3, [sp, #0]
 8006e16:	460b      	mov	r3, r1
 8006e18:	491e      	ldr	r1, [pc, #120]	; (8006e94 <StartE_PapierDrawingTask+0xc04>)
 8006e1a:	f005 febd 	bl	800cb98 <sprintf_>
      EF_PutString((uint8_t *)mes, 300, 236, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006e1e:	f107 000c 	add.w	r0, r7, #12
 8006e22:	2301      	movs	r3, #1
 8006e24:	9302      	str	r3, [sp, #8]
 8006e26:	2301      	movs	r3, #1
 8006e28:	9301      	str	r3, [sp, #4]
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	9300      	str	r3, [sp, #0]
 8006e2e:	2300      	movs	r3, #0
 8006e30:	22ec      	movs	r2, #236	; 0xec
 8006e32:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006e36:	f7fa fdef 	bl	8001a18 <EF_PutString>

      if(!(_Mv.BatteryState & 0x01))
 8006e3a:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 8006e3e:	f003 0301 	and.w	r3, r3, #1
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d10c      	bne.n	8006e60 <StartE_PapierDrawingTask+0xbd0>
      {
         EF_PutString((uint8_t *)"ŁADOWANIE", 300, 248, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006e46:	2301      	movs	r3, #1
 8006e48:	9302      	str	r3, [sp, #8]
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	9301      	str	r3, [sp, #4]
 8006e4e:	2300      	movs	r3, #0
 8006e50:	9300      	str	r3, [sp, #0]
 8006e52:	2300      	movs	r3, #0
 8006e54:	22f8      	movs	r2, #248	; 0xf8
 8006e56:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006e5a:	480f      	ldr	r0, [pc, #60]	; (8006e98 <StartE_PapierDrawingTask+0xc08>)
 8006e5c:	f7fa fddc 	bl	8001a18 <EF_PutString>
      }
      osMutexRelease(E_PAPIERMutexHandle);
 8006e60:	4b0e      	ldr	r3, [pc, #56]	; (8006e9c <StartE_PapierDrawingTask+0xc0c>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4618      	mov	r0, r3
 8006e66:	f00e fff6 	bl	8015e56 <osMutexRelease>
      osEventFlagsSet(C3V1FlagsHandle, E_PAPIER_DISPLAY_FLAG);
 8006e6a:	4b0d      	ldr	r3, [pc, #52]	; (8006ea0 <StartE_PapierDrawingTask+0xc10>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2108      	movs	r1, #8
 8006e70:	4618      	mov	r0, r3
 8006e72:	f00e fe43 	bl	8015afc <osEventFlagsSet>
      osEventFlagsSet(C3V1FlagsHandle, SEND_MEASURMENT_COMMAND_FLAG);
 8006e76:	4b0a      	ldr	r3, [pc, #40]	; (8006ea0 <StartE_PapierDrawingTask+0xc10>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2101      	movs	r1, #1
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f00e fe3d 	bl	8015afc <osEventFlagsSet>

      osDelay(1);
 8006e82:	2001      	movs	r0, #1
 8006e84:	f00e fd4e 	bl	8015924 <osDelay>
   {
 8006e88:	f7ff ba24 	b.w	80062d4 <StartE_PapierDrawingTask+0x44>
 8006e8c:	08020504 	.word	0x08020504
 8006e90:	080204f0 	.word	0x080204f0
 8006e94:	080204d8 	.word	0x080204d8
 8006e98:	08020510 	.word	0x08020510
 8006e9c:	200040b0 	.word	0x200040b0
 8006ea0:	200040c4 	.word	0x200040c4

08006ea4 <StartE_PapierDisplayTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartE_PapierDisplayTask */
void StartE_PapierDisplayTask(void *argument)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b082      	sub	sp, #8
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN StartE_PapierDisplayTask */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 8006eac:	4b1d      	ldr	r3, [pc, #116]	; (8006f24 <StartE_PapierDisplayTask+0x80>)
 8006eae:	6818      	ldr	r0, [r3, #0]
 8006eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8006eb4:	2202      	movs	r2, #2
 8006eb6:	2102      	movs	r1, #2
 8006eb8:	f00e fe96 	bl	8015be8 <osEventFlagsWait>
   /* Infinite loop */
   for(;;)
   {
      osEventFlagsWait(C3V1FlagsHandle, E_PAPIER_DISPLAY_FLAG, osFlagsWaitAny, osWaitForever);
 8006ebc:	4b19      	ldr	r3, [pc, #100]	; (8006f24 <StartE_PapierDisplayTask+0x80>)
 8006ebe:	6818      	ldr	r0, [r3, #0]
 8006ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	2108      	movs	r1, #8
 8006ec8:	f00e fe8e 	bl	8015be8 <osEventFlagsWait>
      osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8006ecc:	4b16      	ldr	r3, [pc, #88]	; (8006f28 <StartE_PapierDisplayTask+0x84>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f04f 31ff 	mov.w	r1, #4294967295
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f00e ff73 	bl	8015dc0 <osMutexAcquire>
      osMutexAcquire(E_PAPIERMutexHandle, osWaitForever);
 8006eda:	4b14      	ldr	r3, [pc, #80]	; (8006f2c <StartE_PapierDisplayTask+0x88>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f04f 31ff 	mov.w	r1, #4294967295
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f00e ff6c 	bl	8015dc0 <osMutexAcquire>
      osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8006ee8:	4b11      	ldr	r3, [pc, #68]	; (8006f30 <StartE_PapierDisplayTask+0x8c>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f04f 31ff 	mov.w	r1, #4294967295
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f00e ff65 	bl	8015dc0 <osMutexAcquire>
      e_papier_display();
 8006ef6:	f7fd feab 	bl	8004c50 <e_papier_display>
      e_papier_clear();
 8006efa:	f7fd ff1b 	bl	8004d34 <e_papier_clear>
      osMutexRelease(SPI1MutexHandle);
 8006efe:	4b0c      	ldr	r3, [pc, #48]	; (8006f30 <StartE_PapierDisplayTask+0x8c>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4618      	mov	r0, r3
 8006f04:	f00e ffa7 	bl	8015e56 <osMutexRelease>
      osMutexRelease(E_PAPIERMutexHandle);
 8006f08:	4b08      	ldr	r3, [pc, #32]	; (8006f2c <StartE_PapierDisplayTask+0x88>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f00e ffa2 	bl	8015e56 <osMutexRelease>
      osMutexRelease(ScreensDcMutexHandle);
 8006f12:	4b05      	ldr	r3, [pc, #20]	; (8006f28 <StartE_PapierDisplayTask+0x84>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4618      	mov	r0, r3
 8006f18:	f00e ff9d 	bl	8015e56 <osMutexRelease>
      osDelay(1);
 8006f1c:	2001      	movs	r0, #1
 8006f1e:	f00e fd01 	bl	8015924 <osDelay>
      osEventFlagsWait(C3V1FlagsHandle, E_PAPIER_DISPLAY_FLAG, osFlagsWaitAny, osWaitForever);
 8006f22:	e7cb      	b.n	8006ebc <StartE_PapierDisplayTask+0x18>
 8006f24:	200040c4 	.word	0x200040c4
 8006f28:	200040a4 	.word	0x200040a4
 8006f2c:	200040b0 	.word	0x200040b0
 8006f30:	200040ac 	.word	0x200040ac

08006f34 <StartMenuTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMenuTask */
void StartMenuTask(void *argument)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b082      	sub	sp, #8
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN StartMenuTask */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 8006f3c:	4b0c      	ldr	r3, [pc, #48]	; (8006f70 <StartMenuTask+0x3c>)
 8006f3e:	6818      	ldr	r0, [r3, #0]
 8006f40:	f04f 33ff 	mov.w	r3, #4294967295
 8006f44:	2202      	movs	r2, #2
 8006f46:	2102      	movs	r1, #2
 8006f48:	f00e fe4e 	bl	8015be8 <osEventFlagsWait>
   /* Infinite loop */
   for(;;)
   {
      osMutexAcquire(EncoderMutexHandle, osWaitForever);
 8006f4c:	4b09      	ldr	r3, [pc, #36]	; (8006f74 <StartMenuTask+0x40>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f04f 31ff 	mov.w	r1, #4294967295
 8006f54:	4618      	mov	r0, r3
 8006f56:	f00e ff33 	bl	8015dc0 <osMutexAcquire>
      MENU_Handler();
 8006f5a:	f7fa fe81 	bl	8001c60 <MENU_Handler>
      osMutexRelease(EncoderMutexHandle);
 8006f5e:	4b05      	ldr	r3, [pc, #20]	; (8006f74 <StartMenuTask+0x40>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4618      	mov	r0, r3
 8006f64:	f00e ff77 	bl	8015e56 <osMutexRelease>
      osDelay(10);
 8006f68:	200a      	movs	r0, #10
 8006f6a:	f00e fcdb 	bl	8015924 <osDelay>
      osMutexAcquire(EncoderMutexHandle, osWaitForever);
 8006f6e:	e7ed      	b.n	8006f4c <StartMenuTask+0x18>
 8006f70:	200040c4 	.word	0x200040c4
 8006f74:	200040c0 	.word	0x200040c0

08006f78 <StartSaveMemoryTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartSaveMemoryTask */
void StartSaveMemoryTask(void *argument)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	f5ad 7d1e 	sub.w	sp, sp, #632	; 0x278
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8006f84:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8006f88:	6018      	str	r0, [r3, #0]
   /* USER CODE BEGIN StartSaveMemoryTask */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 8006f8a:	4b62      	ldr	r3, [pc, #392]	; (8007114 <StartSaveMemoryTask+0x19c>)
 8006f8c:	6818      	ldr	r0, [r3, #0]
 8006f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8006f92:	2202      	movs	r2, #2
 8006f94:	2102      	movs	r1, #2
 8006f96:	f00e fe27 	bl	8015be8 <osEventFlagsWait>
   osEventFlagsWait(C3V1FlagsHandle, NEW_DAY_TO_SAVE, osFlagsWaitAny, osWaitForever);
 8006f9a:	4b5e      	ldr	r3, [pc, #376]	; (8007114 <StartSaveMemoryTask+0x19c>)
 8006f9c:	6818      	ldr	r0, [r3, #0]
 8006f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	2120      	movs	r1, #32
 8006fa6:	f00e fe1f 	bl	8015be8 <osEventFlagsWait>
   PageVariable_TypeDef Pv             = { 0 };
 8006faa:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8006fae:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006fb8:	461a      	mov	r2, r3
 8006fba:	2100      	movs	r1, #0
 8006fbc:	f012 fce8 	bl	8019990 <memset>
   MV_TypeDef _Mv                      = { 0 };
 8006fc0:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8006fc4:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006fc8:	4618      	mov	r0, r3
 8006fca:	2330      	movs	r3, #48	; 0x30
 8006fcc:	461a      	mov	r2, r3
 8006fce:	2100      	movs	r1, #0
 8006fd0:	f012 fcde 	bl	8019990 <memset>
   uint32_t Cnt                        = 0;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
   RTC_TimeTypeDef RtcTime             = { 0 };
 8006fda:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8006fde:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	6013      	str	r3, [r2, #0]
 8006fe8:	6053      	str	r3, [r2, #4]
 8006fea:	6093      	str	r3, [r2, #8]
 8006fec:	60d3      	str	r3, [r2, #12]
 8006fee:	6113      	str	r3, [r2, #16]
   RTC_DateTypeDef RtcDate             = { 0 };
 8006ff0:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8006ff4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	601a      	str	r2, [r3, #0]
   PageVariable_TypeDef ConfirmPv      = { 0 };
 8006ffc:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007000:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007004:	4618      	mov	r0, r3
 8007006:	f44f 7380 	mov.w	r3, #256	; 0x100
 800700a:	461a      	mov	r2, r3
 800700c:	2100      	movs	r1, #0
 800700e:	f012 fcbf 	bl	8019990 <memset>
   FramDateChart_TypeDef FramDateChart = { 0 };
 8007012:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007016:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800701a:	461a      	mov	r2, r3
 800701c:	2300      	movs	r3, #0
 800701e:	6013      	str	r3, [r2, #0]
 8007020:	6053      	str	r3, [r2, #4]
 8007022:	6093      	str	r3, [r2, #8]
 8007024:	60d3      	str	r3, [r2, #12]
   uint8_t FramDataChartExistFlag      = 0;
 8007026:	2300      	movs	r3, #0
 8007028:	f887 3273 	strb.w	r3, [r7, #627]	; 0x273
   osMutexAcquire(SPI1MutexHandle, osWaitForever);
 800702c:	4b3a      	ldr	r3, [pc, #232]	; (8007118 <StartSaveMemoryTask+0x1a0>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f04f 31ff 	mov.w	r1, #4294967295
 8007034:	4618      	mov	r0, r3
 8007036:	f00e fec3 	bl	8015dc0 <osMutexAcquire>
   uint32_t PageCnt          = fram_Read32(&Fram, LAST_PAGE_NUMBER_ADDR);
 800703a:	2100      	movs	r1, #0
 800703c:	4837      	ldr	r0, [pc, #220]	; (800711c <StartSaveMemoryTask+0x1a4>)
 800703e:	f7fe f914 	bl	800526a <fram_Read32>
 8007042:	f8c7 026c 	str.w	r0, [r7, #620]	; 0x26c
   uint32_t FramDateChartCnt = fram_Read32(&Fram, DATE_CHART_CNT_ADDR);
 8007046:	2104      	movs	r1, #4
 8007048:	4834      	ldr	r0, [pc, #208]	; (800711c <StartSaveMemoryTask+0x1a4>)
 800704a:	f7fe f90e 	bl	800526a <fram_Read32>
 800704e:	f8c7 0264 	str.w	r0, [r7, #612]	; 0x264
   osMutexRelease(SPI1MutexHandle);
 8007052:	4b31      	ldr	r3, [pc, #196]	; (8007118 <StartSaveMemoryTask+0x1a0>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4618      	mov	r0, r3
 8007058:	f00e fefd 	bl	8015e56 <osMutexRelease>
   osMutexAcquire(RTCMutexHandle, osWaitForever);
 800705c:	4b30      	ldr	r3, [pc, #192]	; (8007120 <StartSaveMemoryTask+0x1a8>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f04f 31ff 	mov.w	r1, #4294967295
 8007064:	4618      	mov	r0, r3
 8007066:	f00e feab 	bl	8015dc0 <osMutexAcquire>
   HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 800706a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800706e:	2200      	movs	r2, #0
 8007070:	4619      	mov	r1, r3
 8007072:	482c      	ldr	r0, [pc, #176]	; (8007124 <StartSaveMemoryTask+0x1ac>)
 8007074:	f009 fe72 	bl	8010d5c <HAL_RTC_GetTime>
   HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 8007078:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800707c:	2200      	movs	r2, #0
 800707e:	4619      	mov	r1, r3
 8007080:	4828      	ldr	r0, [pc, #160]	; (8007124 <StartSaveMemoryTask+0x1ac>)
 8007082:	f009 ff55 	bl	8010f30 <HAL_RTC_GetDate>
   osMutexRelease(RTCMutexHandle);
 8007086:	4b26      	ldr	r3, [pc, #152]	; (8007120 <StartSaveMemoryTask+0x1a8>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4618      	mov	r0, r3
 800708c:	f00e fee3 	bl	8015e56 <osMutexRelease>

   for(int i = DATE_CHART_ADDR_START; i < DATE_CHART_ADDR_END; i += 12)
 8007090:	2308      	movs	r3, #8
 8007092:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 8007096:	e04c      	b.n	8007132 <StartSaveMemoryTask+0x1ba>
   {
      osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8007098:	4b1f      	ldr	r3, [pc, #124]	; (8007118 <StartSaveMemoryTask+0x1a0>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f04f 31ff 	mov.w	r1, #4294967295
 80070a0:	4618      	mov	r0, r3
 80070a2:	f00e fe8d 	bl	8015dc0 <osMutexAcquire>
      fram_Read(&Fram, i, &FramDateChart, 12);
 80070a6:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 80070aa:	b299      	uxth	r1, r3
 80070ac:	f107 020c 	add.w	r2, r7, #12
 80070b0:	230c      	movs	r3, #12
 80070b2:	481a      	ldr	r0, [pc, #104]	; (800711c <StartSaveMemoryTask+0x1a4>)
 80070b4:	f7fe f9aa 	bl	800540c <fram_Read>
      osMutexRelease(SPI1MutexHandle);
 80070b8:	4b17      	ldr	r3, [pc, #92]	; (8007118 <StartSaveMemoryTask+0x1a0>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4618      	mov	r0, r3
 80070be:	f00e feca 	bl	8015e56 <osMutexRelease>
      if(FramDateChart.Date == RtcDate.Date && FramDateChart.Month == RtcDate.Month && FramDateChart.Year == RtcDate.Year)
 80070c2:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80070c6:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80070ca:	781a      	ldrb	r2, [r3, #0]
 80070cc:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80070d0:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80070d4:	789b      	ldrb	r3, [r3, #2]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d126      	bne.n	8007128 <StartSaveMemoryTask+0x1b0>
 80070da:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80070de:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80070e2:	785a      	ldrb	r2, [r3, #1]
 80070e4:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80070e8:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80070ec:	785b      	ldrb	r3, [r3, #1]
 80070ee:	429a      	cmp	r2, r3
 80070f0:	d11a      	bne.n	8007128 <StartSaveMemoryTask+0x1b0>
 80070f2:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80070f6:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80070fa:	789a      	ldrb	r2, [r3, #2]
 80070fc:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007100:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8007104:	78db      	ldrb	r3, [r3, #3]
 8007106:	429a      	cmp	r2, r3
 8007108:	d10e      	bne.n	8007128 <StartSaveMemoryTask+0x1b0>
      {
         FramDataChartExistFlag = 1;
 800710a:	2301      	movs	r3, #1
 800710c:	f887 3273 	strb.w	r3, [r7, #627]	; 0x273
         // FramDateChart.Length   = 0;
         // fram_Write(&Fram, DATE_CHART_ADDR_START + FramDateChartCnt * sizeof(FramDateChart_TypeDef), &FramDateChart,
         // sizeof(FramDateChart_TypeDef));
         break;
 8007110:	e015      	b.n	800713e <StartSaveMemoryTask+0x1c6>
 8007112:	bf00      	nop
 8007114:	200040c4 	.word	0x200040c4
 8007118:	200040ac 	.word	0x200040ac
 800711c:	20003fbc 	.word	0x20003fbc
 8007120:	200040bc 	.word	0x200040bc
 8007124:	200041d4 	.word	0x200041d4
   for(int i = DATE_CHART_ADDR_START; i < DATE_CHART_ADDR_END; i += 12)
 8007128:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 800712c:	330c      	adds	r3, #12
 800712e:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 8007132:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 8007136:	f241 7277 	movw	r2, #6007	; 0x1777
 800713a:	4293      	cmp	r3, r2
 800713c:	ddac      	ble.n	8007098 <StartSaveMemoryTask+0x120>
      }
   }
   if(FramDataChartExistFlag == 0)
 800713e:	f897 3273 	ldrb.w	r3, [r7, #627]	; 0x273
 8007142:	2b00      	cmp	r3, #0
 8007144:	d157      	bne.n	80071f6 <StartSaveMemoryTask+0x27e>
   {
      osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8007146:	4baf      	ldr	r3, [pc, #700]	; (8007404 <StartSaveMemoryTask+0x48c>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f04f 31ff 	mov.w	r1, #4294967295
 800714e:	4618      	mov	r0, r3
 8007150:	f00e fe36 	bl	8015dc0 <osMutexAcquire>
      fram_Increment32(&Fram, DATE_CHART_CNT_ADDR);
 8007154:	2104      	movs	r1, #4
 8007156:	48ac      	ldr	r0, [pc, #688]	; (8007408 <StartSaveMemoryTask+0x490>)
 8007158:	f7fe f8e0 	bl	800531c <fram_Increment32>
      FramDateChart.Date           = RtcDate.Date;
 800715c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007160:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8007164:	789a      	ldrb	r2, [r3, #2]
 8007166:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800716a:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800716e:	701a      	strb	r2, [r3, #0]
      FramDateChart.Month          = RtcDate.Month;
 8007170:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007174:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8007178:	785a      	ldrb	r2, [r3, #1]
 800717a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800717e:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8007182:	705a      	strb	r2, [r3, #1]
      FramDateChart.Year           = RtcDate.Year;
 8007184:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007188:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800718c:	78da      	ldrb	r2, [r3, #3]
 800718e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007192:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8007196:	709a      	strb	r2, [r3, #2]
      FramDateChart.StartFlashPage = PageCnt;
 8007198:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800719c:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80071a0:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 80071a4:	605a      	str	r2, [r3, #4]
      FramDateChart.Length         = 0;
 80071a6:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80071aa:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80071ae:	2200      	movs	r2, #0
 80071b0:	721a      	strb	r2, [r3, #8]
      FramDateChart.Crc            = CRC_INITIAL_VALUE;
 80071b2:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80071b6:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80071ba:	f04f 32ff 	mov.w	r2, #4294967295
 80071be:	60da      	str	r2, [r3, #12]
      FramDateChartCnt             = fram_Read32(&Fram, DATE_CHART_CNT_ADDR);
 80071c0:	2104      	movs	r1, #4
 80071c2:	4891      	ldr	r0, [pc, #580]	; (8007408 <StartSaveMemoryTask+0x490>)
 80071c4:	f7fe f851 	bl	800526a <fram_Read32>
 80071c8:	f8c7 0264 	str.w	r0, [r7, #612]	; 0x264
      fram_Write(&Fram, DATE_CHART_ADDR_START + FramDateChartCnt * 12, &FramDateChart, 12);
 80071cc:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	461a      	mov	r2, r3
 80071d4:	0052      	lsls	r2, r2, #1
 80071d6:	4413      	add	r3, r2
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	b29b      	uxth	r3, r3
 80071dc:	3308      	adds	r3, #8
 80071de:	b299      	uxth	r1, r3
 80071e0:	f107 020c 	add.w	r2, r7, #12
 80071e4:	230c      	movs	r3, #12
 80071e6:	4888      	ldr	r0, [pc, #544]	; (8007408 <StartSaveMemoryTask+0x490>)
 80071e8:	f7fe f8e1 	bl	80053ae <fram_Write>
      osMutexRelease(SPI1MutexHandle);
 80071ec:	4b85      	ldr	r3, [pc, #532]	; (8007404 <StartSaveMemoryTask+0x48c>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4618      	mov	r0, r3
 80071f2:	f00e fe30 	bl	8015e56 <osMutexRelease>
   }

   /* Infinite loop */
   for(;;)
   {
      osMessageQueueGet(DataToSaveQueueHandle, &_Mv, 0, osWaitForever);
 80071f6:	4b85      	ldr	r3, [pc, #532]	; (800740c <StartSaveMemoryTask+0x494>)
 80071f8:	6818      	ldr	r0, [r3, #0]
 80071fa:	f507 719a 	add.w	r1, r7, #308	; 0x134
 80071fe:	f04f 33ff 	mov.w	r3, #4294967295
 8007202:	2200      	movs	r2, #0
 8007204:	f00e ff38 	bl	8016078 <osMessageQueueGet>
      osMutexAcquire(RTCMutexHandle, osWaitForever);
 8007208:	4b81      	ldr	r3, [pc, #516]	; (8007410 <StartSaveMemoryTask+0x498>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f04f 31ff 	mov.w	r1, #4294967295
 8007210:	4618      	mov	r0, r3
 8007212:	f00e fdd5 	bl	8015dc0 <osMutexAcquire>
      HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 8007216:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800721a:	2200      	movs	r2, #0
 800721c:	4619      	mov	r1, r3
 800721e:	487d      	ldr	r0, [pc, #500]	; (8007414 <StartSaveMemoryTask+0x49c>)
 8007220:	f009 fd9c 	bl	8010d5c <HAL_RTC_GetTime>
      HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 8007224:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8007228:	2200      	movs	r2, #0
 800722a:	4619      	mov	r1, r3
 800722c:	4879      	ldr	r0, [pc, #484]	; (8007414 <StartSaveMemoryTask+0x49c>)
 800722e:	f009 fe7f 	bl	8010f30 <HAL_RTC_GetDate>
      osMutexRelease(RTCMutexHandle);
 8007232:	4b77      	ldr	r3, [pc, #476]	; (8007410 <StartSaveMemoryTask+0x498>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4618      	mov	r0, r3
 8007238:	f00e fe0d 	bl	8015e56 <osMutexRelease>
      if(osEventFlagsWait(C3V1FlagsHandle, NEW_DAY_TO_SAVE, osFlagsWaitAny, 1) != osFlagsErrorTimeout)
 800723c:	4b76      	ldr	r3, [pc, #472]	; (8007418 <StartSaveMemoryTask+0x4a0>)
 800723e:	6818      	ldr	r0, [r3, #0]
 8007240:	2301      	movs	r3, #1
 8007242:	2200      	movs	r2, #0
 8007244:	2120      	movs	r1, #32
 8007246:	f00e fccf 	bl	8015be8 <osEventFlagsWait>
 800724a:	4603      	mov	r3, r0
 800724c:	f113 0f02 	cmn.w	r3, #2
 8007250:	f000 80e6 	beq.w	8007420 <StartSaveMemoryTask+0x4a8>
      {
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8007254:	4b6b      	ldr	r3, [pc, #428]	; (8007404 <StartSaveMemoryTask+0x48c>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f04f 31ff 	mov.w	r1, #4294967295
 800725c:	4618      	mov	r0, r3
 800725e:	f00e fdaf 	bl	8015dc0 <osMutexAcquire>
         PageCnt    = fram_Read32(&Fram, LAST_PAGE_NUMBER_ADDR);
 8007262:	2100      	movs	r1, #0
 8007264:	4868      	ldr	r0, [pc, #416]	; (8007408 <StartSaveMemoryTask+0x490>)
 8007266:	f7fe f800 	bl	800526a <fram_Read32>
 800726a:	f8c7 026c 	str.w	r0, [r7, #620]	; 0x26c
         Pv.PageCRC = Crc(CRC_INITIAL_VALUE, 252, &Pv);
 800726e:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8007272:	461a      	mov	r2, r3
 8007274:	21fc      	movs	r1, #252	; 0xfc
 8007276:	f04f 30ff 	mov.w	r0, #4294967295
 800727a:	f7fd facb 	bl	8004814 <Crc>
 800727e:	4602      	mov	r2, r0
 8007280:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007284:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007288:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
         flash_WritePage(&Flash, PageCnt, &Pv);
 800728c:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8007290:	461a      	mov	r2, r3
 8007292:	f8d7 126c 	ldr.w	r1, [r7, #620]	; 0x26c
 8007296:	4861      	ldr	r0, [pc, #388]	; (800741c <StartSaveMemoryTask+0x4a4>)
 8007298:	f7fd fed5 	bl	8005046 <flash_WritePage>
         flash_ReadPage(&Flash, PageCnt, &ConfirmPv);
 800729c:	f107 031c 	add.w	r3, r7, #28
 80072a0:	461a      	mov	r2, r3
 80072a2:	f8d7 126c 	ldr.w	r1, [r7, #620]	; 0x26c
 80072a6:	485d      	ldr	r0, [pc, #372]	; (800741c <StartSaveMemoryTask+0x4a4>)
 80072a8:	f7fd ff03 	bl	80050b2 <flash_ReadPage>
         if(Pv.PageCRC == ConfirmPv.PageCRC)
 80072ac:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80072b0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80072b4:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 80072b8:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80072bc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80072c0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d147      	bne.n	8007358 <StartSaveMemoryTask+0x3e0>
         {
            fram_Increment32(&Fram, LAST_PAGE_NUMBER_ADDR);
 80072c8:	2100      	movs	r1, #0
 80072ca:	484f      	ldr	r0, [pc, #316]	; (8007408 <StartSaveMemoryTask+0x490>)
 80072cc:	f7fe f826 	bl	800531c <fram_Increment32>
            PageCnt = fram_Read32(&Fram, LAST_PAGE_NUMBER_ADDR);
 80072d0:	2100      	movs	r1, #0
 80072d2:	484d      	ldr	r0, [pc, #308]	; (8007408 <StartSaveMemoryTask+0x490>)
 80072d4:	f7fd ffc9 	bl	800526a <fram_Read32>
 80072d8:	f8c7 026c 	str.w	r0, [r7, #620]	; 0x26c
            FramDateChart.Length++;
 80072dc:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80072e0:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80072e4:	7a1b      	ldrb	r3, [r3, #8]
 80072e6:	3301      	adds	r3, #1
 80072e8:	b2da      	uxtb	r2, r3
 80072ea:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80072ee:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80072f2:	721a      	strb	r2, [r3, #8]
            FramDateChart.Crc = Crc(FramDateChart.Crc, 256, &Pv);
 80072f4:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80072f8:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80072fc:	68db      	ldr	r3, [r3, #12]
 80072fe:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8007302:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007306:	4618      	mov	r0, r3
 8007308:	f7fd fa84 	bl	8004814 <Crc>
 800730c:	4602      	mov	r2, r0
 800730e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007312:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8007316:	60da      	str	r2, [r3, #12]
            FramDateChartCnt  = fram_Read32(&Fram, DATE_CHART_CNT_ADDR);
 8007318:	2104      	movs	r1, #4
 800731a:	483b      	ldr	r0, [pc, #236]	; (8007408 <StartSaveMemoryTask+0x490>)
 800731c:	f7fd ffa5 	bl	800526a <fram_Read32>
 8007320:	f8c7 0264 	str.w	r0, [r7, #612]	; 0x264
            fram_Write(&Fram, DATE_CHART_ADDR_START + FramDateChartCnt * 12, &FramDateChart, 12);
 8007324:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8007328:	b29b      	uxth	r3, r3
 800732a:	461a      	mov	r2, r3
 800732c:	0052      	lsls	r2, r2, #1
 800732e:	4413      	add	r3, r2
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	b29b      	uxth	r3, r3
 8007334:	3308      	adds	r3, #8
 8007336:	b299      	uxth	r1, r3
 8007338:	f107 020c 	add.w	r2, r7, #12
 800733c:	230c      	movs	r3, #12
 800733e:	4832      	ldr	r0, [pc, #200]	; (8007408 <StartSaveMemoryTask+0x490>)
 8007340:	f7fe f835 	bl	80053ae <fram_Write>
            Memory_ClearBuffer(&ConfirmPv);
 8007344:	f107 031c 	add.w	r3, r7, #28
 8007348:	4618      	mov	r0, r3
 800734a:	f002 f96f 	bl	800962c <Memory_ClearBuffer>
            Memory_ClearBuffer(&Pv);
 800734e:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8007352:	4618      	mov	r0, r3
 8007354:	f002 f96a 	bl	800962c <Memory_ClearBuffer>
         }
         fram_Increment32(&Fram, DATE_CHART_CNT_ADDR);
 8007358:	2104      	movs	r1, #4
 800735a:	482b      	ldr	r0, [pc, #172]	; (8007408 <StartSaveMemoryTask+0x490>)
 800735c:	f7fd ffde 	bl	800531c <fram_Increment32>
         FramDateChart.Date           = RtcDate.Date;
 8007360:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007364:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8007368:	789a      	ldrb	r2, [r3, #2]
 800736a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800736e:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8007372:	701a      	strb	r2, [r3, #0]
         FramDateChart.Month          = RtcDate.Month;
 8007374:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007378:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800737c:	785a      	ldrb	r2, [r3, #1]
 800737e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007382:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8007386:	705a      	strb	r2, [r3, #1]
         FramDateChart.Year           = RtcDate.Year;
 8007388:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800738c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8007390:	78da      	ldrb	r2, [r3, #3]
 8007392:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007396:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800739a:	709a      	strb	r2, [r3, #2]
         FramDateChart.StartFlashPage = PageCnt;
 800739c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80073a0:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80073a4:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 80073a8:	605a      	str	r2, [r3, #4]
         FramDateChart.Length         = 0;
 80073aa:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80073ae:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80073b2:	2200      	movs	r2, #0
 80073b4:	721a      	strb	r2, [r3, #8]
         FramDateChart.Crc            = CRC_INITIAL_VALUE;
 80073b6:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80073ba:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80073be:	f04f 32ff 	mov.w	r2, #4294967295
 80073c2:	60da      	str	r2, [r3, #12]
         FramDateChartCnt             = fram_Read32(&Fram, DATE_CHART_CNT_ADDR);
 80073c4:	2104      	movs	r1, #4
 80073c6:	4810      	ldr	r0, [pc, #64]	; (8007408 <StartSaveMemoryTask+0x490>)
 80073c8:	f7fd ff4f 	bl	800526a <fram_Read32>
 80073cc:	f8c7 0264 	str.w	r0, [r7, #612]	; 0x264
         fram_Write(&Fram, DATE_CHART_ADDR_START + FramDateChartCnt * 12, &FramDateChart, 12);
 80073d0:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	461a      	mov	r2, r3
 80073d8:	0052      	lsls	r2, r2, #1
 80073da:	4413      	add	r3, r2
 80073dc:	009b      	lsls	r3, r3, #2
 80073de:	b29b      	uxth	r3, r3
 80073e0:	3308      	adds	r3, #8
 80073e2:	b299      	uxth	r1, r3
 80073e4:	f107 020c 	add.w	r2, r7, #12
 80073e8:	230c      	movs	r3, #12
 80073ea:	4807      	ldr	r0, [pc, #28]	; (8007408 <StartSaveMemoryTask+0x490>)
 80073ec:	f7fd ffdf 	bl	80053ae <fram_Write>
         Cnt = 0;
 80073f0:	2300      	movs	r3, #0
 80073f2:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
         osMutexRelease(SPI1MutexHandle);
 80073f6:	4b03      	ldr	r3, [pc, #12]	; (8007404 <StartSaveMemoryTask+0x48c>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4618      	mov	r0, r3
 80073fc:	f00e fd2b 	bl	8015e56 <osMutexRelease>
 8007400:	e00e      	b.n	8007420 <StartSaveMemoryTask+0x4a8>
 8007402:	bf00      	nop
 8007404:	200040ac 	.word	0x200040ac
 8007408:	20003fbc 	.word	0x20003fbc
 800740c:	20004084 	.word	0x20004084
 8007410:	200040bc 	.word	0x200040bc
 8007414:	200041d4 	.word	0x200041d4
 8007418:	200040c4 	.word	0x200040c4
 800741c:	20003fac 	.word	0x20003fac
      }
      Pv.Record[Cnt].ExternalHumidity    = _Mv.ExtHumidity;
 8007420:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007424:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8007428:	6859      	ldr	r1, [r3, #4]
 800742a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800742e:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8007432:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8007436:	4613      	mov	r3, r2
 8007438:	00db      	lsls	r3, r3, #3
 800743a:	1a9b      	subs	r3, r3, r2
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	4403      	add	r3, r0
 8007440:	3318      	adds	r3, #24
 8007442:	6019      	str	r1, [r3, #0]
      Pv.Record[Cnt].ExternalPM1         = _Mv.ExtPM1;
 8007444:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007448:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800744c:	8a98      	ldrh	r0, [r3, #20]
 800744e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007452:	f5a3 718a 	sub.w	r1, r3, #276	; 0x114
 8007456:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 800745a:	4613      	mov	r3, r2
 800745c:	00db      	lsls	r3, r3, #3
 800745e:	1a9b      	subs	r3, r3, r2
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	440b      	add	r3, r1
 8007464:	330a      	adds	r3, #10
 8007466:	4602      	mov	r2, r0
 8007468:	801a      	strh	r2, [r3, #0]
      Pv.Record[Cnt].ExternalPM10        = _Mv.ExtPM10;
 800746a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800746e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8007472:	8b18      	ldrh	r0, [r3, #24]
 8007474:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007478:	f5a3 718a 	sub.w	r1, r3, #276	; 0x114
 800747c:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8007480:	4613      	mov	r3, r2
 8007482:	00db      	lsls	r3, r3, #3
 8007484:	1a9b      	subs	r3, r3, r2
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	440b      	add	r3, r1
 800748a:	330e      	adds	r3, #14
 800748c:	4602      	mov	r2, r0
 800748e:	801a      	strh	r2, [r3, #0]
      Pv.Record[Cnt].ExternalPM25        = _Mv.ExtPM25;
 8007490:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007494:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8007498:	8ad8      	ldrh	r0, [r3, #22]
 800749a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800749e:	f5a3 718a 	sub.w	r1, r3, #276	; 0x114
 80074a2:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 80074a6:	4613      	mov	r3, r2
 80074a8:	00db      	lsls	r3, r3, #3
 80074aa:	1a9b      	subs	r3, r3, r2
 80074ac:	009b      	lsls	r3, r3, #2
 80074ae:	440b      	add	r3, r1
 80074b0:	330c      	adds	r3, #12
 80074b2:	4602      	mov	r2, r0
 80074b4:	801a      	strh	r2, [r3, #0]
      Pv.Record[Cnt].ExternalTemperature = _Mv.ExtTemperature;
 80074b6:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80074ba:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80074be:	6819      	ldr	r1, [r3, #0]
 80074c0:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80074c4:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 80074c8:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 80074cc:	4613      	mov	r3, r2
 80074ce:	00db      	lsls	r3, r3, #3
 80074d0:	1a9b      	subs	r3, r3, r2
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	4403      	add	r3, r0
 80074d6:	3314      	adds	r3, #20
 80074d8:	6019      	str	r1, [r3, #0]
      Pv.Record[Cnt].Hour                = RtcTime.Hours;
 80074da:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80074de:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80074e2:	7818      	ldrb	r0, [r3, #0]
 80074e4:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80074e8:	f5a3 718a 	sub.w	r1, r3, #276	; 0x114
 80074ec:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 80074f0:	4613      	mov	r3, r2
 80074f2:	00db      	lsls	r3, r3, #3
 80074f4:	1a9b      	subs	r3, r3, r2
 80074f6:	009b      	lsls	r3, r3, #2
 80074f8:	440b      	add	r3, r1
 80074fa:	3303      	adds	r3, #3
 80074fc:	4602      	mov	r2, r0
 80074fe:	701a      	strb	r2, [r3, #0]
      Pv.Record[Cnt].InternalPM1         = _Mv.InternalPM1;
 8007500:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007504:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8007508:	8b58      	ldrh	r0, [r3, #26]
 800750a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800750e:	f5a3 718a 	sub.w	r1, r3, #276	; 0x114
 8007512:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8007516:	4613      	mov	r3, r2
 8007518:	00db      	lsls	r3, r3, #3
 800751a:	1a9b      	subs	r3, r3, r2
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	440b      	add	r3, r1
 8007520:	3304      	adds	r3, #4
 8007522:	4602      	mov	r2, r0
 8007524:	801a      	strh	r2, [r3, #0]
      Pv.Record[Cnt].InternalPM10        = _Mv.InternalPM10;
 8007526:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800752a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800752e:	8bd8      	ldrh	r0, [r3, #30]
 8007530:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007534:	f5a3 718a 	sub.w	r1, r3, #276	; 0x114
 8007538:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 800753c:	4613      	mov	r3, r2
 800753e:	00db      	lsls	r3, r3, #3
 8007540:	1a9b      	subs	r3, r3, r2
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	440b      	add	r3, r1
 8007546:	3308      	adds	r3, #8
 8007548:	4602      	mov	r2, r0
 800754a:	801a      	strh	r2, [r3, #0]
      Pv.Record[Cnt].InternalPM25        = _Mv.InternalPM25;
 800754c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007550:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8007554:	8b98      	ldrh	r0, [r3, #28]
 8007556:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800755a:	f5a3 718a 	sub.w	r1, r3, #276	; 0x114
 800755e:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8007562:	4613      	mov	r3, r2
 8007564:	00db      	lsls	r3, r3, #3
 8007566:	1a9b      	subs	r3, r3, r2
 8007568:	009b      	lsls	r3, r3, #2
 800756a:	440b      	add	r3, r1
 800756c:	3306      	adds	r3, #6
 800756e:	4602      	mov	r2, r0
 8007570:	801a      	strh	r2, [r3, #0]
      Pv.Record[Cnt].Minute              = RtcTime.Minutes;
 8007572:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007576:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800757a:	7858      	ldrb	r0, [r3, #1]
 800757c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007580:	f5a3 718a 	sub.w	r1, r3, #276	; 0x114
 8007584:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8007588:	4613      	mov	r3, r2
 800758a:	00db      	lsls	r3, r3, #3
 800758c:	1a9b      	subs	r3, r3, r2
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	440b      	add	r3, r1
 8007592:	3302      	adds	r3, #2
 8007594:	4602      	mov	r2, r0
 8007596:	701a      	strb	r2, [r3, #0]
      Pv.Record[Cnt].Pressure            = _Mv.Pressure;
 8007598:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800759c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80075a0:	6919      	ldr	r1, [r3, #16]
 80075a2:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80075a6:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 80075aa:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 80075ae:	4613      	mov	r3, r2
 80075b0:	00db      	lsls	r3, r3, #3
 80075b2:	1a9b      	subs	r3, r3, r2
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	4403      	add	r3, r0
 80075b8:	3310      	adds	r3, #16
 80075ba:	6019      	str	r1, [r3, #0]
      Pv.Record[Cnt].Reserved            = Cnt;
 80075bc:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 80075c0:	b2d8      	uxtb	r0, r3
 80075c2:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80075c6:	f5a3 718a 	sub.w	r1, r3, #276	; 0x114
 80075ca:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 80075ce:	4613      	mov	r3, r2
 80075d0:	00db      	lsls	r3, r3, #3
 80075d2:	1a9b      	subs	r3, r3, r2
 80075d4:	009b      	lsls	r3, r3, #2
 80075d6:	440b      	add	r3, r1
 80075d8:	4602      	mov	r2, r0
 80075da:	701a      	strb	r2, [r3, #0]
      Pv.Record[Cnt].Second              = RtcTime.Seconds;
 80075dc:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80075e0:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80075e4:	7898      	ldrb	r0, [r3, #2]
 80075e6:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80075ea:	f5a3 718a 	sub.w	r1, r3, #276	; 0x114
 80075ee:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 80075f2:	4613      	mov	r3, r2
 80075f4:	00db      	lsls	r3, r3, #3
 80075f6:	1a9b      	subs	r3, r3, r2
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	440b      	add	r3, r1
 80075fc:	3301      	adds	r3, #1
 80075fe:	4602      	mov	r2, r0
 8007600:	701a      	strb	r2, [r3, #0]
      Cnt++;
 8007602:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8007606:	3301      	adds	r3, #1
 8007608:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
      if(Cnt == 9)
 800760c:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8007610:	2b09      	cmp	r3, #9
 8007612:	f040 808a 	bne.w	800772a <StartSaveMemoryTask+0x7b2>
      {
         Cnt        = 0;
 8007616:	2300      	movs	r3, #0
 8007618:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
         Pv.PageCRC = Crc(CRC_INITIAL_VALUE, 252, &Pv);
 800761c:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8007620:	461a      	mov	r2, r3
 8007622:	21fc      	movs	r1, #252	; 0xfc
 8007624:	f04f 30ff 	mov.w	r0, #4294967295
 8007628:	f7fd f8f4 	bl	8004814 <Crc>
 800762c:	4602      	mov	r2, r0
 800762e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007632:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007636:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 800763a:	4b3e      	ldr	r3, [pc, #248]	; (8007734 <StartSaveMemoryTask+0x7bc>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f04f 31ff 	mov.w	r1, #4294967295
 8007642:	4618      	mov	r0, r3
 8007644:	f00e fbbc 	bl	8015dc0 <osMutexAcquire>
         PageCnt = fram_Read32(&Fram, LAST_PAGE_NUMBER_ADDR);
 8007648:	2100      	movs	r1, #0
 800764a:	483b      	ldr	r0, [pc, #236]	; (8007738 <StartSaveMemoryTask+0x7c0>)
 800764c:	f7fd fe0d 	bl	800526a <fram_Read32>
 8007650:	f8c7 026c 	str.w	r0, [r7, #620]	; 0x26c
         flash_WritePage(&Flash, PageCnt, &Pv);
 8007654:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8007658:	461a      	mov	r2, r3
 800765a:	f8d7 126c 	ldr.w	r1, [r7, #620]	; 0x26c
 800765e:	4837      	ldr	r0, [pc, #220]	; (800773c <StartSaveMemoryTask+0x7c4>)
 8007660:	f7fd fcf1 	bl	8005046 <flash_WritePage>
         flash_ReadPage(&Flash, PageCnt, &ConfirmPv);
 8007664:	f107 031c 	add.w	r3, r7, #28
 8007668:	461a      	mov	r2, r3
 800766a:	f8d7 126c 	ldr.w	r1, [r7, #620]	; 0x26c
 800766e:	4833      	ldr	r0, [pc, #204]	; (800773c <StartSaveMemoryTask+0x7c4>)
 8007670:	f7fd fd1f 	bl	80050b2 <flash_ReadPage>
         if(Pv.PageCRC == ConfirmPv.PageCRC)
 8007674:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007678:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800767c:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 8007680:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007684:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007688:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800768c:	429a      	cmp	r2, r3
 800768e:	d147      	bne.n	8007720 <StartSaveMemoryTask+0x7a8>
         {
            fram_Increment32(&Fram, LAST_PAGE_NUMBER_ADDR);
 8007690:	2100      	movs	r1, #0
 8007692:	4829      	ldr	r0, [pc, #164]	; (8007738 <StartSaveMemoryTask+0x7c0>)
 8007694:	f7fd fe42 	bl	800531c <fram_Increment32>
            PageCnt = fram_Read32(&Fram, LAST_PAGE_NUMBER_ADDR);
 8007698:	2100      	movs	r1, #0
 800769a:	4827      	ldr	r0, [pc, #156]	; (8007738 <StartSaveMemoryTask+0x7c0>)
 800769c:	f7fd fde5 	bl	800526a <fram_Read32>
 80076a0:	f8c7 026c 	str.w	r0, [r7, #620]	; 0x26c
            FramDateChart.Length++;
 80076a4:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80076a8:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80076ac:	7a1b      	ldrb	r3, [r3, #8]
 80076ae:	3301      	adds	r3, #1
 80076b0:	b2da      	uxtb	r2, r3
 80076b2:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80076b6:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80076ba:	721a      	strb	r2, [r3, #8]
            FramDateChart.Crc = Crc(FramDateChart.Crc, 256, &Pv);
 80076bc:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80076c0:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80076c4:	68db      	ldr	r3, [r3, #12]
 80076c6:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 80076ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80076ce:	4618      	mov	r0, r3
 80076d0:	f7fd f8a0 	bl	8004814 <Crc>
 80076d4:	4602      	mov	r2, r0
 80076d6:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80076da:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80076de:	60da      	str	r2, [r3, #12]
            FramDateChartCnt  = fram_Read32(&Fram, DATE_CHART_CNT_ADDR);
 80076e0:	2104      	movs	r1, #4
 80076e2:	4815      	ldr	r0, [pc, #84]	; (8007738 <StartSaveMemoryTask+0x7c0>)
 80076e4:	f7fd fdc1 	bl	800526a <fram_Read32>
 80076e8:	f8c7 0264 	str.w	r0, [r7, #612]	; 0x264
            fram_Write(&Fram, DATE_CHART_ADDR_START + FramDateChartCnt * 12, &FramDateChart, 12);
 80076ec:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	461a      	mov	r2, r3
 80076f4:	0052      	lsls	r2, r2, #1
 80076f6:	4413      	add	r3, r2
 80076f8:	009b      	lsls	r3, r3, #2
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	3308      	adds	r3, #8
 80076fe:	b299      	uxth	r1, r3
 8007700:	f107 020c 	add.w	r2, r7, #12
 8007704:	230c      	movs	r3, #12
 8007706:	480c      	ldr	r0, [pc, #48]	; (8007738 <StartSaveMemoryTask+0x7c0>)
 8007708:	f7fd fe51 	bl	80053ae <fram_Write>
            Memory_ClearBuffer(&ConfirmPv);
 800770c:	f107 031c 	add.w	r3, r7, #28
 8007710:	4618      	mov	r0, r3
 8007712:	f001 ff8b 	bl	800962c <Memory_ClearBuffer>
            Memory_ClearBuffer(&Pv);
 8007716:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800771a:	4618      	mov	r0, r3
 800771c:	f001 ff86 	bl	800962c <Memory_ClearBuffer>
         }
         osMutexRelease(SPI1MutexHandle);
 8007720:	4b04      	ldr	r3, [pc, #16]	; (8007734 <StartSaveMemoryTask+0x7bc>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4618      	mov	r0, r3
 8007726:	f00e fb96 	bl	8015e56 <osMutexRelease>
      }
      osDelay(1);
 800772a:	2001      	movs	r0, #1
 800772c:	f00e f8fa 	bl	8015924 <osDelay>
      osMessageQueueGet(DataToSaveQueueHandle, &_Mv, 0, osWaitForever);
 8007730:	e561      	b.n	80071f6 <StartSaveMemoryTask+0x27e>
 8007732:	bf00      	nop
 8007734:	200040ac 	.word	0x200040ac
 8007738:	20003fbc 	.word	0x20003fbc
 800773c:	20003fac 	.word	0x20003fac

08007740 <StartChartTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartChartTask */
void StartChartTask(void *argument)
{
 8007740:	b5b0      	push	{r4, r5, r7, lr}
 8007742:	f5ad 5d04 	sub.w	sp, sp, #8448	; 0x2100
 8007746:	b082      	sub	sp, #8
 8007748:	af02      	add	r7, sp, #8
 800774a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800774e:	f843 0cfc 	str.w	r0, [r3, #-252]
   /* USER CODE BEGIN StartChartTask */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 8007752:	4bc5      	ldr	r3, [pc, #788]	; (8007a68 <StartChartTask+0x328>)
 8007754:	6818      	ldr	r0, [r3, #0]
 8007756:	f04f 33ff 	mov.w	r3, #4294967295
 800775a:	2202      	movs	r2, #2
 800775c:	2102      	movs	r1, #2
 800775e:	f00e fa43 	bl	8015be8 <osEventFlagsWait>
   ChartTypeVariable_TypeDef ChartVariable;
   uint8_t Hour[800]                   = { 0 };
 8007762:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007766:	2200      	movs	r2, #0
 8007768:	f843 2c20 	str.w	r2, [r3, #-32]
 800776c:	3b1c      	subs	r3, #28
 800776e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8007772:	2100      	movs	r1, #0
 8007774:	4618      	mov	r0, r3
 8007776:	f012 f90b 	bl	8019990 <memset>
   uint8_t Minute[800]                 = { 0 };
 800777a:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 800777e:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 8007782:	2200      	movs	r2, #0
 8007784:	601a      	str	r2, [r3, #0]
 8007786:	3304      	adds	r3, #4
 8007788:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800778c:	2100      	movs	r1, #0
 800778e:	4618      	mov	r0, r3
 8007790:	f012 f8fe 	bl	8019990 <memset>
   ChartDateAndType_TypeDef Cda        = { 0 };
 8007794:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007798:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 800779c:	2200      	movs	r2, #0
 800779e:	601a      	str	r2, [r3, #0]
 80077a0:	809a      	strh	r2, [r3, #4]
   uint8_t FramDataChartExistFlag      = 0;
 80077a2:	2300      	movs	r3, #0
 80077a4:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 80077a8:	f102 023f 	add.w	r2, r2, #63	; 0x3f
 80077ac:	7013      	strb	r3, [r2, #0]
   FramDateChart_TypeDef FramDateChart = { 0 };
 80077ae:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80077b2:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 80077b6:	461a      	mov	r2, r3
 80077b8:	2300      	movs	r3, #0
 80077ba:	6013      	str	r3, [r2, #0]
 80077bc:	6053      	str	r3, [r2, #4]
 80077be:	6093      	str	r3, [r2, #8]
 80077c0:	60d3      	str	r3, [r2, #12]
   PageVariable_TypeDef Pv             = { 0 };
 80077c2:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80077c6:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 80077ca:	4618      	mov	r0, r3
 80077cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80077d0:	461a      	mov	r2, r3
 80077d2:	2100      	movs	r1, #0
 80077d4:	f012 f8dc 	bl	8019990 <memset>
   uint16_t Y_Axis[800]                = { 0 };
 80077d8:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80077dc:	f6a3 2398 	subw	r3, r3, #2712	; 0xa98
 80077e0:	4618      	mov	r0, r3
 80077e2:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 80077e6:	461a      	mov	r2, r3
 80077e8:	2100      	movs	r1, #0
 80077ea:	f012 f8d1 	bl	8019990 <memset>
   uint16_t X_Axis[800]                = { 0 };
 80077ee:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80077f2:	3bd8      	subs	r3, #216	; 0xd8
 80077f4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80077f8:	2100      	movs	r1, #0
 80077fa:	4618      	mov	r0, r3
 80077fc:	f012 f8c8 	bl	8019990 <memset>
   /* Infinite loop */
   for(;;)
   {
      osMessageQueueGet(ChartQueueHandle, &Cda, 0, osWaitForever);
 8007800:	4b9a      	ldr	r3, [pc, #616]	; (8007a6c <StartChartTask+0x32c>)
 8007802:	6818      	ldr	r0, [r3, #0]
 8007804:	f507 615c 	add.w	r1, r7, #3520	; 0xdc0
 8007808:	3908      	subs	r1, #8
 800780a:	f04f 33ff 	mov.w	r3, #4294967295
 800780e:	2200      	movs	r2, #0
 8007810:	f00e fc32 	bl	8016078 <osMessageQueueGet>
      osMutexAcquire(E_PAPIERMutexHandle, osWaitForever);
 8007814:	4b96      	ldr	r3, [pc, #600]	; (8007a70 <StartChartTask+0x330>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f04f 31ff 	mov.w	r1, #4294967295
 800781c:	4618      	mov	r0, r3
 800781e:	f00e facf 	bl	8015dc0 <osMutexAcquire>
      e_papier_clear();
 8007822:	f7fd fa87 	bl	8004d34 <e_papier_clear>
      GFX_DrawLine(63, 50, 63, 281, BLACK, E_PAPIER);
 8007826:	2301      	movs	r3, #1
 8007828:	9301      	str	r3, [sp, #4]
 800782a:	2300      	movs	r3, #0
 800782c:	9300      	str	r3, [sp, #0]
 800782e:	f240 1319 	movw	r3, #281	; 0x119
 8007832:	223f      	movs	r2, #63	; 0x3f
 8007834:	2132      	movs	r1, #50	; 0x32
 8007836:	203f      	movs	r0, #63	; 0x3f
 8007838:	f7f9 fe5c 	bl	80014f4 <GFX_DrawLine>
      GFX_DrawLine(40, 281, 399, 281, BLACK, E_PAPIER);
 800783c:	2301      	movs	r3, #1
 800783e:	9301      	str	r3, [sp, #4]
 8007840:	2300      	movs	r3, #0
 8007842:	9300      	str	r3, [sp, #0]
 8007844:	f240 1319 	movw	r3, #281	; 0x119
 8007848:	f240 128f 	movw	r2, #399	; 0x18f
 800784c:	f240 1119 	movw	r1, #281	; 0x119
 8007850:	2028      	movs	r0, #40	; 0x28
 8007852:	f7f9 fe4f 	bl	80014f4 <GFX_DrawLine>
      GFX_DrawLine(40, 223, 399, 223, BLACK, E_PAPIER);
 8007856:	2301      	movs	r3, #1
 8007858:	9301      	str	r3, [sp, #4]
 800785a:	2300      	movs	r3, #0
 800785c:	9300      	str	r3, [sp, #0]
 800785e:	23df      	movs	r3, #223	; 0xdf
 8007860:	f240 128f 	movw	r2, #399	; 0x18f
 8007864:	21df      	movs	r1, #223	; 0xdf
 8007866:	2028      	movs	r0, #40	; 0x28
 8007868:	f7f9 fe44 	bl	80014f4 <GFX_DrawLine>
      GFX_DrawLine(40, 165, 399, 165, BLACK, E_PAPIER);
 800786c:	2301      	movs	r3, #1
 800786e:	9301      	str	r3, [sp, #4]
 8007870:	2300      	movs	r3, #0
 8007872:	9300      	str	r3, [sp, #0]
 8007874:	23a5      	movs	r3, #165	; 0xa5
 8007876:	f240 128f 	movw	r2, #399	; 0x18f
 800787a:	21a5      	movs	r1, #165	; 0xa5
 800787c:	2028      	movs	r0, #40	; 0x28
 800787e:	f7f9 fe39 	bl	80014f4 <GFX_DrawLine>
      GFX_DrawLine(40, 108, 399, 108, BLACK, E_PAPIER);
 8007882:	2301      	movs	r3, #1
 8007884:	9301      	str	r3, [sp, #4]
 8007886:	2300      	movs	r3, #0
 8007888:	9300      	str	r3, [sp, #0]
 800788a:	236c      	movs	r3, #108	; 0x6c
 800788c:	f240 128f 	movw	r2, #399	; 0x18f
 8007890:	216c      	movs	r1, #108	; 0x6c
 8007892:	2028      	movs	r0, #40	; 0x28
 8007894:	f7f9 fe2e 	bl	80014f4 <GFX_DrawLine>
      GFX_DrawLine(40, 50, 399, 50, BLACK, E_PAPIER);
 8007898:	2301      	movs	r3, #1
 800789a:	9301      	str	r3, [sp, #4]
 800789c:	2300      	movs	r3, #0
 800789e:	9300      	str	r3, [sp, #0]
 80078a0:	2332      	movs	r3, #50	; 0x32
 80078a2:	f240 128f 	movw	r2, #399	; 0x18f
 80078a6:	2132      	movs	r1, #50	; 0x32
 80078a8:	2028      	movs	r0, #40	; 0x28
 80078aa:	f7f9 fe23 	bl	80014f4 <GFX_DrawLine>
      for(int i = 1; i < 24; i++)
 80078ae:	2301      	movs	r3, #1
 80078b0:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 80078b4:	f102 0238 	add.w	r2, r2, #56	; 0x38
 80078b8:	6013      	str	r3, [r2, #0]
 80078ba:	e02a      	b.n	8007912 <StartChartTask+0x1d2>
      {
         GFX_DrawLine(64 + i * 14, 281, 64 + i * 14, 270, BLACK, E_PAPIER);
 80078bc:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80078c0:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	4613      	mov	r3, r2
 80078c8:	00db      	lsls	r3, r3, #3
 80078ca:	1a9b      	subs	r3, r3, r2
 80078cc:	005b      	lsls	r3, r3, #1
 80078ce:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80078d2:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80078d6:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	4613      	mov	r3, r2
 80078de:	00db      	lsls	r3, r3, #3
 80078e0:	1a9b      	subs	r3, r3, r2
 80078e2:	005b      	lsls	r3, r3, #1
 80078e4:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80078e8:	2301      	movs	r3, #1
 80078ea:	9301      	str	r3, [sp, #4]
 80078ec:	2300      	movs	r3, #0
 80078ee:	9300      	str	r3, [sp, #0]
 80078f0:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80078f4:	f240 1119 	movw	r1, #281	; 0x119
 80078f8:	f7f9 fdfc 	bl	80014f4 <GFX_DrawLine>
      for(int i = 1; i < 24; i++)
 80078fc:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007900:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	3301      	adds	r3, #1
 8007908:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 800790c:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8007910:	6013      	str	r3, [r2, #0]
 8007912:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007916:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2b17      	cmp	r3, #23
 800791e:	ddcd      	ble.n	80078bc <StartChartTask+0x17c>
      }
      for(int i = 1; i < 24; i++)
 8007920:	2301      	movs	r3, #1
 8007922:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8007926:	f102 0234 	add.w	r2, r2, #52	; 0x34
 800792a:	6013      	str	r3, [r2, #0]
 800792c:	e02d      	b.n	800798a <StartChartTask+0x24a>
      {
         char Temp[3];
         sprintf(Temp, "%d", i);
 800792e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007932:	3b1c      	subs	r3, #28
 8007934:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8007938:	f102 0234 	add.w	r2, r2, #52	; 0x34
 800793c:	6812      	ldr	r2, [r2, #0]
 800793e:	494d      	ldr	r1, [pc, #308]	; (8007a74 <StartChartTask+0x334>)
 8007940:	4618      	mov	r0, r3
 8007942:	f005 f929 	bl	800cb98 <sprintf_>
         GFX_DrawString(64 + i * 14 - 5, 290, Temp, BLACK, 1, E_PAPIER);
 8007946:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 800794a:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	4613      	mov	r3, r2
 8007952:	00db      	lsls	r3, r3, #3
 8007954:	1a9b      	subs	r3, r3, r2
 8007956:	005b      	lsls	r3, r3, #1
 8007958:	f103 003b 	add.w	r0, r3, #59	; 0x3b
 800795c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8007960:	3a1c      	subs	r2, #28
 8007962:	2301      	movs	r3, #1
 8007964:	9301      	str	r3, [sp, #4]
 8007966:	2301      	movs	r3, #1
 8007968:	9300      	str	r3, [sp, #0]
 800796a:	2300      	movs	r3, #0
 800796c:	f44f 7191 	mov.w	r1, #290	; 0x122
 8007970:	f7f9 fca0 	bl	80012b4 <GFX_DrawString>
      for(int i = 1; i < 24; i++)
 8007974:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007978:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	3301      	adds	r3, #1
 8007980:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8007984:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8007988:	6013      	str	r3, [r2, #0]
 800798a:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 800798e:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	2b17      	cmp	r3, #23
 8007996:	ddca      	ble.n	800792e <StartChartTask+0x1ee>
      }
      osMutexRelease(E_PAPIERMutexHandle);
 8007998:	4b35      	ldr	r3, [pc, #212]	; (8007a70 <StartChartTask+0x330>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4618      	mov	r0, r3
 800799e:	f00e fa5a 	bl	8015e56 <osMutexRelease>
      if(Cda.ChartType == PRESSURE || Cda.ChartType == EXTERNAL_TEMPERATURE || Cda.ChartType == EXTERNAL_HUMIDITY)
 80079a2:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80079a6:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 80079aa:	791b      	ldrb	r3, [r3, #4]
 80079ac:	2b06      	cmp	r3, #6
 80079ae:	d00e      	beq.n	80079ce <StartChartTask+0x28e>
 80079b0:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80079b4:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 80079b8:	791b      	ldrb	r3, [r3, #4]
 80079ba:	2b07      	cmp	r3, #7
 80079bc:	d007      	beq.n	80079ce <StartChartTask+0x28e>
 80079be:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80079c2:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 80079c6:	791b      	ldrb	r3, [r3, #4]
 80079c8:	2b08      	cmp	r3, #8
 80079ca:	f040 85dc 	bne.w	8008586 <StartChartTask+0xe46>
      {
         for(int i = DATE_CHART_ADDR_START; i < DATE_CHART_ADDR_END; i += 12)
 80079ce:	2308      	movs	r3, #8
 80079d0:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 80079d4:	f102 0230 	add.w	r2, r2, #48	; 0x30
 80079d8:	6013      	str	r3, [r2, #0]
 80079da:	e05c      	b.n	8007a96 <StartChartTask+0x356>
         {
            osMutexAcquire(SPI1MutexHandle, osWaitForever);
 80079dc:	4b26      	ldr	r3, [pc, #152]	; (8007a78 <StartChartTask+0x338>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f04f 31ff 	mov.w	r1, #4294967295
 80079e4:	4618      	mov	r0, r3
 80079e6:	f00e f9eb 	bl	8015dc0 <osMutexAcquire>
            fram_Read(&Fram, i, &FramDateChart, 12);
 80079ea:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80079ee:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	b299      	uxth	r1, r3
 80079f6:	f507 625c 	add.w	r2, r7, #3520	; 0xdc0
 80079fa:	3a18      	subs	r2, #24
 80079fc:	230c      	movs	r3, #12
 80079fe:	481f      	ldr	r0, [pc, #124]	; (8007a7c <StartChartTask+0x33c>)
 8007a00:	f7fd fd04 	bl	800540c <fram_Read>
            osMutexRelease(SPI1MutexHandle);
 8007a04:	4b1c      	ldr	r3, [pc, #112]	; (8007a78 <StartChartTask+0x338>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f00e fa24 	bl	8015e56 <osMutexRelease>
            if(FramDateChart.Date == Cda.Date && FramDateChart.Month == Cda.Month && FramDateChart.Year == Cda.Year)
 8007a0e:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007a12:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8007a16:	781a      	ldrb	r2, [r3, #0]
 8007a18:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007a1c:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8007a20:	78db      	ldrb	r3, [r3, #3]
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d12c      	bne.n	8007a80 <StartChartTask+0x340>
 8007a26:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007a2a:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8007a2e:	785a      	ldrb	r2, [r3, #1]
 8007a30:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007a34:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8007a38:	789b      	ldrb	r3, [r3, #2]
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	d120      	bne.n	8007a80 <StartChartTask+0x340>
 8007a3e:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007a42:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8007a46:	789b      	ldrb	r3, [r3, #2]
 8007a48:	b29a      	uxth	r2, r3
 8007a4a:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007a4e:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8007a52:	881b      	ldrh	r3, [r3, #0]
 8007a54:	429a      	cmp	r2, r3
 8007a56:	d113      	bne.n	8007a80 <StartChartTask+0x340>
            {
               FramDataChartExistFlag = 1;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8007a5e:	f102 023f 	add.w	r2, r2, #63	; 0x3f
 8007a62:	7013      	strb	r3, [r2, #0]
               break;
 8007a64:	e020      	b.n	8007aa8 <StartChartTask+0x368>
 8007a66:	bf00      	nop
 8007a68:	200040c4 	.word	0x200040c4
 8007a6c:	20004080 	.word	0x20004080
 8007a70:	200040b0 	.word	0x200040b0
 8007a74:	0802051c 	.word	0x0802051c
 8007a78:	200040ac 	.word	0x200040ac
 8007a7c:	20003fbc 	.word	0x20003fbc
         for(int i = DATE_CHART_ADDR_START; i < DATE_CHART_ADDR_END; i += 12)
 8007a80:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007a84:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	330c      	adds	r3, #12
 8007a8c:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8007a90:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8007a94:	6013      	str	r3, [r2, #0]
 8007a96:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007a9a:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f241 7277 	movw	r2, #6007	; 0x1777
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	dd99      	ble.n	80079dc <StartChartTask+0x29c>
            }
         }
         if(FramDataChartExistFlag == 1)
 8007aa8:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007aac:	f103 033f 	add.w	r3, r3, #63	; 0x3f
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	f040 813d 	bne.w	8007d32 <StartChartTask+0x5f2>
         {
            FramDataChartExistFlag = 0;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8007abe:	f102 023f 	add.w	r2, r2, #63	; 0x3f
 8007ac2:	7013      	strb	r3, [r2, #0]
            for(int i = 0; i < FramDateChart.Length; i++)
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8007aca:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8007ace:	6013      	str	r3, [r2, #0]
 8007ad0:	e121      	b.n	8007d16 <StartChartTask+0x5d6>
            {
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8007ad2:	4bc7      	ldr	r3, [pc, #796]	; (8007df0 <StartChartTask+0x6b0>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f04f 31ff 	mov.w	r1, #4294967295
 8007ada:	4618      	mov	r0, r3
 8007adc:	f00e f970 	bl	8015dc0 <osMutexAcquire>
               flash_ReadPage(&Flash, i + FramDateChart.StartFlashPage, &Pv);
 8007ae0:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007ae4:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8007ae8:	685a      	ldr	r2, [r3, #4]
 8007aea:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007aee:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	18d1      	adds	r1, r2, r3
 8007af6:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8007afa:	3b18      	subs	r3, #24
 8007afc:	461a      	mov	r2, r3
 8007afe:	48bd      	ldr	r0, [pc, #756]	; (8007df4 <StartChartTask+0x6b4>)
 8007b00:	f7fd fad7 	bl	80050b2 <flash_ReadPage>
               osMutexRelease(SPI1MutexHandle);
 8007b04:	4bba      	ldr	r3, [pc, #744]	; (8007df0 <StartChartTask+0x6b0>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f00e f9a4 	bl	8015e56 <osMutexRelease>
               uint32_t TempCrc = Crc(CRC_INITIAL_VALUE, 252, &Pv);
 8007b0e:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8007b12:	3b18      	subs	r3, #24
 8007b14:	461a      	mov	r2, r3
 8007b16:	21fc      	movs	r1, #252	; 0xfc
 8007b18:	f04f 30ff 	mov.w	r0, #4294967295
 8007b1c:	f7fc fe7a 	bl	8004814 <Crc>
 8007b20:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8007b24:	f103 030c 	add.w	r3, r3, #12
 8007b28:	6018      	str	r0, [r3, #0]
               if(TempCrc == Pv.PageCRC)
 8007b2a:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007b2e:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 8007b32:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8007b36:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8007b3a:	f102 020c 	add.w	r2, r2, #12
 8007b3e:	6812      	ldr	r2, [r2, #0]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	f040 80dd 	bne.w	8007d00 <StartChartTask+0x5c0>
               {
                  for(int j = (i * 9), k = 0; k < 9; k++)
 8007b46:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007b4a:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8007b4e:	681a      	ldr	r2, [r3, #0]
 8007b50:	4613      	mov	r3, r2
 8007b52:	00db      	lsls	r3, r3, #3
 8007b54:	4413      	add	r3, r2
 8007b56:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8007b5a:	f102 0208 	add.w	r2, r2, #8
 8007b5e:	6013      	str	r3, [r2, #0]
 8007b60:	2300      	movs	r3, #0
 8007b62:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8007b66:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8007b6a:	6013      	str	r3, [r2, #0]
 8007b6c:	e0c0      	b.n	8007cf0 <StartChartTask+0x5b0>
                  {
                     if(Cda.ChartType == PRESSURE)
 8007b6e:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007b72:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8007b76:	791b      	ldrb	r3, [r3, #4]
 8007b78:	2b06      	cmp	r3, #6
 8007b7a:	d122      	bne.n	8007bc2 <StartChartTask+0x482>
                     {
                        ChartVariable.FloatingPointType[j + k] = Pv.Record[k].Pressure;
 8007b7c:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8007b80:	f103 0308 	add.w	r3, r3, #8
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007b8a:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	18d0      	adds	r0, r2, r3
 8007b92:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007b96:	f5a3 618b 	sub.w	r1, r3, #1112	; 0x458
 8007b9a:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007b9e:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8007ba2:	681a      	ldr	r2, [r3, #0]
 8007ba4:	4613      	mov	r3, r2
 8007ba6:	00db      	lsls	r3, r3, #3
 8007ba8:	1a9b      	subs	r3, r3, r2
 8007baa:	009b      	lsls	r3, r3, #2
 8007bac:	440b      	add	r3, r1
 8007bae:	3310      	adds	r3, #16
 8007bb0:	681a      	ldr	r2, [r3, #0]
 8007bb2:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8007bb6:	f5a3 6150 	sub.w	r1, r3, #3328	; 0xd00
 8007bba:	0083      	lsls	r3, r0, #2
 8007bbc:	440b      	add	r3, r1
 8007bbe:	601a      	str	r2, [r3, #0]
 8007bc0:	e04b      	b.n	8007c5a <StartChartTask+0x51a>
                     }
                     else if(Cda.ChartType == EXTERNAL_TEMPERATURE)
 8007bc2:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007bc6:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8007bca:	791b      	ldrb	r3, [r3, #4]
 8007bcc:	2b07      	cmp	r3, #7
 8007bce:	d122      	bne.n	8007c16 <StartChartTask+0x4d6>
                     {
                        ChartVariable.FloatingPointType[j + k] = Pv.Record[k].ExternalTemperature;
 8007bd0:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8007bd4:	f103 0308 	add.w	r3, r3, #8
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007bde:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	18d0      	adds	r0, r2, r3
 8007be6:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007bea:	f5a3 618b 	sub.w	r1, r3, #1112	; 0x458
 8007bee:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007bf2:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	4613      	mov	r3, r2
 8007bfa:	00db      	lsls	r3, r3, #3
 8007bfc:	1a9b      	subs	r3, r3, r2
 8007bfe:	009b      	lsls	r3, r3, #2
 8007c00:	440b      	add	r3, r1
 8007c02:	3314      	adds	r3, #20
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8007c0a:	f5a3 6150 	sub.w	r1, r3, #3328	; 0xd00
 8007c0e:	0083      	lsls	r3, r0, #2
 8007c10:	440b      	add	r3, r1
 8007c12:	601a      	str	r2, [r3, #0]
 8007c14:	e021      	b.n	8007c5a <StartChartTask+0x51a>
                     }
                     else
                     {
                        ChartVariable.FloatingPointType[j + k] = Pv.Record[k].ExternalHumidity;
 8007c16:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8007c1a:	f103 0308 	add.w	r3, r3, #8
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007c24:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	18d0      	adds	r0, r2, r3
 8007c2c:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007c30:	f5a3 618b 	sub.w	r1, r3, #1112	; 0x458
 8007c34:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007c38:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8007c3c:	681a      	ldr	r2, [r3, #0]
 8007c3e:	4613      	mov	r3, r2
 8007c40:	00db      	lsls	r3, r3, #3
 8007c42:	1a9b      	subs	r3, r3, r2
 8007c44:	009b      	lsls	r3, r3, #2
 8007c46:	440b      	add	r3, r1
 8007c48:	3318      	adds	r3, #24
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8007c50:	f5a3 6150 	sub.w	r1, r3, #3328	; 0xd00
 8007c54:	0083      	lsls	r3, r0, #2
 8007c56:	440b      	add	r3, r1
 8007c58:	601a      	str	r2, [r3, #0]
                     }
                     Minute[j + k] = Pv.Record[k].Minute;
 8007c5a:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8007c5e:	f103 0308 	add.w	r3, r3, #8
 8007c62:	681a      	ldr	r2, [r3, #0]
 8007c64:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007c68:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	18d1      	adds	r1, r2, r3
 8007c70:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007c74:	f5a3 608b 	sub.w	r0, r3, #1112	; 0x458
 8007c78:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007c7c:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	4613      	mov	r3, r2
 8007c84:	00db      	lsls	r3, r3, #3
 8007c86:	1a9b      	subs	r3, r3, r2
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	4403      	add	r3, r0
 8007c8c:	3302      	adds	r3, #2
 8007c8e:	781a      	ldrb	r2, [r3, #0]
 8007c90:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007c94:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 8007c98:	545a      	strb	r2, [r3, r1]
                     Hour[j + k]   = Pv.Record[k].Hour;
 8007c9a:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8007c9e:	f103 0308 	add.w	r3, r3, #8
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007ca8:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	18d1      	adds	r1, r2, r3
 8007cb0:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007cb4:	f5a3 608b 	sub.w	r0, r3, #1112	; 0x458
 8007cb8:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007cbc:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	4613      	mov	r3, r2
 8007cc4:	00db      	lsls	r3, r3, #3
 8007cc6:	1a9b      	subs	r3, r3, r2
 8007cc8:	009b      	lsls	r3, r3, #2
 8007cca:	4403      	add	r3, r0
 8007ccc:	3303      	adds	r3, #3
 8007cce:	781a      	ldrb	r2, [r3, #0]
 8007cd0:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007cd4:	440b      	add	r3, r1
 8007cd6:	f803 2c20 	strb.w	r2, [r3, #-32]
                  for(int j = (i * 9), k = 0; k < 9; k++)
 8007cda:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007cde:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8007cea:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8007cee:	6013      	str	r3, [r2, #0]
 8007cf0:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007cf4:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	2b08      	cmp	r3, #8
 8007cfc:	f77f af37 	ble.w	8007b6e <StartChartTask+0x42e>
            for(int i = 0; i < FramDateChart.Length; i++)
 8007d00:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007d04:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	3301      	adds	r3, #1
 8007d0c:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8007d10:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8007d14:	6013      	str	r3, [r2, #0]
 8007d16:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007d1a:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8007d1e:	7a1b      	ldrb	r3, [r3, #8]
 8007d20:	461a      	mov	r2, r3
 8007d22:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007d26:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	f6ff aed0 	blt.w	8007ad2 <StartChartTask+0x392>
                  }
               }
            }
         }
         float _Max = 0, _Min = 10000000.0;
 8007d32:	f04f 0300 	mov.w	r3, #0
 8007d36:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8007d3a:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8007d3e:	6013      	str	r3, [r2, #0]
 8007d40:	4b2d      	ldr	r3, [pc, #180]	; (8007df8 <StartChartTask+0x6b8>)
 8007d42:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8007d46:	f102 0220 	add.w	r2, r2, #32
 8007d4a:	6013      	str	r3, [r2, #0]
         int a      = 0;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8007d52:	f102 0204 	add.w	r2, r2, #4
 8007d56:	6013      	str	r3, [r2, #0]
         float _Avg = 0;
 8007d58:	f04f 0300 	mov.w	r3, #0
 8007d5c:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8007d60:	f102 021c 	add.w	r2, r2, #28
 8007d64:	6013      	str	r3, [r2, #0]
         for(int i = 0; i < FramDateChart.Length * 9; i++)
 8007d66:	2300      	movs	r3, #0
 8007d68:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8007d6c:	f102 0218 	add.w	r2, r2, #24
 8007d70:	6013      	str	r3, [r2, #0]
 8007d72:	e025      	b.n	8007dc0 <StartChartTask+0x680>
         {
            _Avg += ChartVariable.FloatingPointType[i];
 8007d74:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8007d78:	f5a3 6250 	sub.w	r2, r3, #3328	; 0xd00
 8007d7c:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007d80:	f103 0318 	add.w	r3, r3, #24
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	4413      	add	r3, r2
 8007d8a:	edd3 7a00 	vldr	s15, [r3]
 8007d8e:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007d92:	f103 031c 	add.w	r3, r3, #28
 8007d96:	ed93 7a00 	vldr	s14, [r3]
 8007d9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d9e:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007da2:	f103 031c 	add.w	r3, r3, #28
 8007da6:	edc3 7a00 	vstr	s15, [r3]
         for(int i = 0; i < FramDateChart.Length * 9; i++)
 8007daa:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007dae:	f103 0318 	add.w	r3, r3, #24
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	3301      	adds	r3, #1
 8007db6:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8007dba:	f102 0218 	add.w	r2, r2, #24
 8007dbe:	6013      	str	r3, [r2, #0]
 8007dc0:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007dc4:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8007dc8:	7a1b      	ldrb	r3, [r3, #8]
 8007dca:	461a      	mov	r2, r3
 8007dcc:	4613      	mov	r3, r2
 8007dce:	00db      	lsls	r3, r3, #3
 8007dd0:	4413      	add	r3, r2
 8007dd2:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8007dd6:	f102 0218 	add.w	r2, r2, #24
 8007dda:	6812      	ldr	r2, [r2, #0]
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	dbc9      	blt.n	8007d74 <StartChartTask+0x634>
         }
         for(int i = 0; i < FramDateChart.Length * 9; i++)
 8007de0:	2300      	movs	r3, #0
 8007de2:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8007de6:	f102 0214 	add.w	r2, r2, #20
 8007dea:	6013      	str	r3, [r2, #0]
 8007dec:	e0b9      	b.n	8007f62 <StartChartTask+0x822>
 8007dee:	bf00      	nop
 8007df0:	200040ac 	.word	0x200040ac
 8007df4:	20003fac 	.word	0x20003fac
 8007df8:	4b189680 	.word	0x4b189680
 8007dfc:	44960000 	.word	0x44960000
 8007e00:	437a0000 	.word	0x437a0000
         {
            if(ChartVariable.FloatingPointType[i] > 1200.0)
 8007e04:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8007e08:	f5a3 6250 	sub.w	r2, r3, #3328	; 0xd00
 8007e0c:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007e10:	f103 0314 	add.w	r3, r3, #20
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	4413      	add	r3, r2
 8007e1a:	edd3 7a00 	vldr	s15, [r3]
 8007e1e:	ed1f 7a09 	vldr	s14, [pc, #-36]	; 8007dfc <StartChartTask+0x6bc>
 8007e22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e2a:	dd21      	ble.n	8007e70 <StartChartTask+0x730>
            {
               ChartVariable.FloatingPointType[i] = (_Avg / (FramDateChart.Length * 9));
 8007e2c:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007e30:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8007e34:	7a1b      	ldrb	r3, [r3, #8]
 8007e36:	461a      	mov	r2, r3
 8007e38:	4613      	mov	r3, r2
 8007e3a:	00db      	lsls	r3, r3, #3
 8007e3c:	4413      	add	r3, r2
 8007e3e:	ee07 3a90 	vmov	s15, r3
 8007e42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007e46:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007e4a:	f103 031c 	add.w	r3, r3, #28
 8007e4e:	edd3 6a00 	vldr	s13, [r3]
 8007e52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e56:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8007e5a:	f5a3 6250 	sub.w	r2, r3, #3328	; 0xd00
 8007e5e:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007e62:	f103 0314 	add.w	r3, r3, #20
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	009b      	lsls	r3, r3, #2
 8007e6a:	4413      	add	r3, r2
 8007e6c:	edc3 7a00 	vstr	s15, [r3]
            }
            if(_Max < ChartVariable.FloatingPointType[i])
 8007e70:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8007e74:	f5a3 6250 	sub.w	r2, r3, #3328	; 0xd00
 8007e78:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007e7c:	f103 0314 	add.w	r3, r3, #20
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	009b      	lsls	r3, r3, #2
 8007e84:	4413      	add	r3, r2
 8007e86:	edd3 7a00 	vldr	s15, [r3]
 8007e8a:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007e8e:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8007e92:	ed93 7a00 	vldr	s14, [r3]
 8007e96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e9e:	d51a      	bpl.n	8007ed6 <StartChartTask+0x796>
            {
               _Max = ChartVariable.FloatingPointType[i];
 8007ea0:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8007ea4:	f5a3 6250 	sub.w	r2, r3, #3328	; 0xd00
 8007ea8:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007eac:	f103 0314 	add.w	r3, r3, #20
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	009b      	lsls	r3, r3, #2
 8007eb4:	4413      	add	r3, r2
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8007ebc:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8007ec0:	6013      	str	r3, [r2, #0]
               a    = i;
 8007ec2:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007ec6:	f103 0314 	add.w	r3, r3, #20
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8007ed0:	f102 0204 	add.w	r2, r2, #4
 8007ed4:	6013      	str	r3, [r2, #0]
            }
            if(_Min > ChartVariable.FloatingPointType[i] && ChartVariable.FloatingPointType[i] != 0.0)
 8007ed6:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8007eda:	f5a3 6250 	sub.w	r2, r3, #3328	; 0xd00
 8007ede:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007ee2:	f103 0314 	add.w	r3, r3, #20
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	009b      	lsls	r3, r3, #2
 8007eea:	4413      	add	r3, r2
 8007eec:	edd3 7a00 	vldr	s15, [r3]
 8007ef0:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007ef4:	f103 0320 	add.w	r3, r3, #32
 8007ef8:	ed93 7a00 	vldr	s14, [r3]
 8007efc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f04:	dd22      	ble.n	8007f4c <StartChartTask+0x80c>
 8007f06:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8007f0a:	f5a3 6250 	sub.w	r2, r3, #3328	; 0xd00
 8007f0e:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007f12:	f103 0314 	add.w	r3, r3, #20
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	4413      	add	r3, r2
 8007f1c:	edd3 7a00 	vldr	s15, [r3]
 8007f20:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f28:	d010      	beq.n	8007f4c <StartChartTask+0x80c>
            {
               _Min = ChartVariable.FloatingPointType[i];
 8007f2a:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8007f2e:	f5a3 6250 	sub.w	r2, r3, #3328	; 0xd00
 8007f32:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007f36:	f103 0314 	add.w	r3, r3, #20
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	009b      	lsls	r3, r3, #2
 8007f3e:	4413      	add	r3, r2
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8007f46:	f102 0220 	add.w	r2, r2, #32
 8007f4a:	6013      	str	r3, [r2, #0]
         for(int i = 0; i < FramDateChart.Length * 9; i++)
 8007f4c:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007f50:	f103 0314 	add.w	r3, r3, #20
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	3301      	adds	r3, #1
 8007f58:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8007f5c:	f102 0214 	add.w	r2, r2, #20
 8007f60:	6013      	str	r3, [r2, #0]
 8007f62:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007f66:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8007f6a:	7a1b      	ldrb	r3, [r3, #8]
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	4613      	mov	r3, r2
 8007f70:	00db      	lsls	r3, r3, #3
 8007f72:	4413      	add	r3, r2
 8007f74:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8007f78:	f102 0214 	add.w	r2, r2, #20
 8007f7c:	6812      	ldr	r2, [r2, #0]
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	f6ff af40 	blt.w	8007e04 <StartChartTask+0x6c4>
            }
         }
         for(int i = 0; i < 800; i++)
 8007f84:	2300      	movs	r3, #0
 8007f86:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8007f8a:	f102 0210 	add.w	r2, r2, #16
 8007f8e:	6013      	str	r3, [r2, #0]
 8007f90:	e079      	b.n	8008086 <StartChartTask+0x946>
         {
            if(ChartVariable.FloatingPointType[i] == 0)
 8007f92:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8007f96:	f5a3 6250 	sub.w	r2, r3, #3328	; 0xd00
 8007f9a:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007f9e:	f103 0310 	add.w	r3, r3, #16
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	4413      	add	r3, r2
 8007fa8:	edd3 7a00 	vldr	s15, [r3]
 8007fac:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fb4:	d110      	bne.n	8007fd8 <StartChartTask+0x898>
            {
               ChartVariable.FloatingPointType[i] = _Min;
 8007fb6:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8007fba:	f5a3 6250 	sub.w	r2, r3, #3328	; 0xd00
 8007fbe:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007fc2:	f103 0310 	add.w	r3, r3, #16
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	4413      	add	r3, r2
 8007fcc:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8007fd0:	f102 0220 	add.w	r2, r2, #32
 8007fd4:	6812      	ldr	r2, [r2, #0]
 8007fd6:	601a      	str	r2, [r3, #0]
            }
            Y_Axis[i] = (uint16_t)mapf(ChartVariable.FloatingPointType[i], _Min, _Max, 20.0, 250.0);
 8007fd8:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8007fdc:	f5a3 6250 	sub.w	r2, r3, #3328	; 0xd00
 8007fe0:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007fe4:	f103 0310 	add.w	r3, r3, #16
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	009b      	lsls	r3, r3, #2
 8007fec:	4413      	add	r3, r2
 8007fee:	edd3 7a00 	vldr	s15, [r3]
 8007ff2:	ed1f 2a7d 	vldr	s4, [pc, #-500]	; 8007e00 <StartChartTask+0x6c0>
 8007ff6:	eef3 1a04 	vmov.f32	s3, #52	; 0x41a00000  20.0
 8007ffa:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007ffe:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8008002:	ed93 1a00 	vldr	s2, [r3]
 8008006:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 800800a:	f103 0320 	add.w	r3, r3, #32
 800800e:	edd3 0a00 	vldr	s1, [r3]
 8008012:	eeb0 0a67 	vmov.f32	s0, s15
 8008016:	f002 ff61 	bl	800aedc <mapf>
 800801a:	eef0 7a40 	vmov.f32	s15, s0
 800801e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008022:	ee17 3a90 	vmov	r3, s15
 8008026:	b299      	uxth	r1, r3
 8008028:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 800802c:	f6a3 2398 	subw	r3, r3, #2712	; 0xa98
 8008030:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8008034:	f102 0210 	add.w	r2, r2, #16
 8008038:	6812      	ldr	r2, [r2, #0]
 800803a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            Y_Axis[i] = 300 - Y_Axis[i];
 800803e:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008042:	f6a3 2398 	subw	r3, r3, #2712	; 0xa98
 8008046:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 800804a:	f102 0210 	add.w	r2, r2, #16
 800804e:	6812      	ldr	r2, [r2, #0]
 8008050:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008054:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 8008058:	b299      	uxth	r1, r3
 800805a:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 800805e:	f6a3 2398 	subw	r3, r3, #2712	; 0xa98
 8008062:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8008066:	f102 0210 	add.w	r2, r2, #16
 800806a:	6812      	ldr	r2, [r2, #0]
 800806c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
         for(int i = 0; i < 800; i++)
 8008070:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8008074:	f103 0310 	add.w	r3, r3, #16
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	3301      	adds	r3, #1
 800807c:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8008080:	f102 0210 	add.w	r2, r2, #16
 8008084:	6013      	str	r3, [r2, #0]
 8008086:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 800808a:	f103 0310 	add.w	r3, r3, #16
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8008094:	f6ff af7d 	blt.w	8007f92 <StartChartTask+0x852>
         }
         for(int i = 0; i < 800; i++)
 8008098:	2300      	movs	r3, #0
 800809a:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 800809e:	f102 020c 	add.w	r2, r2, #12
 80080a2:	6013      	str	r3, [r2, #0]
 80080a4:	e0b7      	b.n	8008216 <StartChartTask+0xad6>
         {
            if(Hour[i] == 0 && Minute[i] == 0 && X_Axis[i] == 0)
 80080a6:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80080aa:	461a      	mov	r2, r3
 80080ac:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80080b0:	f103 030c 	add.w	r3, r3, #12
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4413      	add	r3, r2
 80080b8:	3b20      	subs	r3, #32
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d129      	bne.n	8008114 <StartChartTask+0x9d4>
 80080c0:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80080c4:	f5a3 7250 	sub.w	r2, r3, #832	; 0x340
 80080c8:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80080cc:	f103 030c 	add.w	r3, r3, #12
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4413      	add	r3, r2
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d11c      	bne.n	8008114 <StartChartTask+0x9d4>
 80080da:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80080de:	461a      	mov	r2, r3
 80080e0:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80080e4:	f103 030c 	add.w	r3, r3, #12
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	005b      	lsls	r3, r3, #1
 80080ec:	4413      	add	r3, r2
 80080ee:	f833 3cd8 	ldrh.w	r3, [r3, #-216]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d10e      	bne.n	8008114 <StartChartTask+0x9d4>
            {
               X_Axis[i] = 0xffff;
 80080f6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80080fa:	461a      	mov	r2, r3
 80080fc:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8008100:	f103 030c 	add.w	r3, r3, #12
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	005b      	lsls	r3, r3, #1
 8008108:	4413      	add	r3, r2
 800810a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800810e:	f823 2cd8 	strh.w	r2, [r3, #-216]
 8008112:	e075      	b.n	8008200 <StartChartTask+0xac0>
            }
            else
            {
               X_Axis[i] = map(Hour[i] * 60 + Minute[i], Hour[i] * 60, (Hour[i] + 1) * 60, 64 + (Hour[i] * 14), 64 + ((Hour[i] + 1) * 14));
 8008114:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008118:	461a      	mov	r2, r3
 800811a:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 800811e:	f103 030c 	add.w	r3, r3, #12
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4413      	add	r3, r2
 8008126:	3b20      	subs	r3, #32
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	461a      	mov	r2, r3
 800812c:	4613      	mov	r3, r2
 800812e:	011b      	lsls	r3, r3, #4
 8008130:	1a9b      	subs	r3, r3, r2
 8008132:	009b      	lsls	r3, r3, #2
 8008134:	4619      	mov	r1, r3
 8008136:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 800813a:	f5a3 7250 	sub.w	r2, r3, #832	; 0x340
 800813e:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8008142:	f103 030c 	add.w	r3, r3, #12
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4413      	add	r3, r2
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	440b      	add	r3, r1
 800814e:	4618      	mov	r0, r3
 8008150:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008154:	461a      	mov	r2, r3
 8008156:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 800815a:	f103 030c 	add.w	r3, r3, #12
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4413      	add	r3, r2
 8008162:	3b20      	subs	r3, #32
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	461a      	mov	r2, r3
 8008168:	4613      	mov	r3, r2
 800816a:	011b      	lsls	r3, r3, #4
 800816c:	1a9b      	subs	r3, r3, r2
 800816e:	009b      	lsls	r3, r3, #2
 8008170:	4619      	mov	r1, r3
 8008172:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008176:	461a      	mov	r2, r3
 8008178:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 800817c:	f103 030c 	add.w	r3, r3, #12
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4413      	add	r3, r2
 8008184:	3b20      	subs	r3, #32
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	1c5a      	adds	r2, r3, #1
 800818a:	4613      	mov	r3, r2
 800818c:	011b      	lsls	r3, r3, #4
 800818e:	1a9b      	subs	r3, r3, r2
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	461c      	mov	r4, r3
 8008194:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008198:	461a      	mov	r2, r3
 800819a:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 800819e:	f103 030c 	add.w	r3, r3, #12
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4413      	add	r3, r2
 80081a6:	3b20      	subs	r3, #32
 80081a8:	781b      	ldrb	r3, [r3, #0]
 80081aa:	461a      	mov	r2, r3
 80081ac:	4613      	mov	r3, r2
 80081ae:	00db      	lsls	r3, r3, #3
 80081b0:	1a9b      	subs	r3, r3, r2
 80081b2:	005b      	lsls	r3, r3, #1
 80081b4:	3340      	adds	r3, #64	; 0x40
 80081b6:	461d      	mov	r5, r3
 80081b8:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80081bc:	461a      	mov	r2, r3
 80081be:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80081c2:	f103 030c 	add.w	r3, r3, #12
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4413      	add	r3, r2
 80081ca:	3b20      	subs	r3, #32
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	1c5a      	adds	r2, r3, #1
 80081d0:	4613      	mov	r3, r2
 80081d2:	00db      	lsls	r3, r3, #3
 80081d4:	1a9b      	subs	r3, r3, r2
 80081d6:	005b      	lsls	r3, r3, #1
 80081d8:	3340      	adds	r3, #64	; 0x40
 80081da:	9300      	str	r3, [sp, #0]
 80081dc:	462b      	mov	r3, r5
 80081de:	4622      	mov	r2, r4
 80081e0:	f002 feaa 	bl	800af38 <map>
 80081e4:	4603      	mov	r3, r0
 80081e6:	b29a      	uxth	r2, r3
 80081e8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80081ec:	4619      	mov	r1, r3
 80081ee:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80081f2:	f103 030c 	add.w	r3, r3, #12
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	005b      	lsls	r3, r3, #1
 80081fa:	440b      	add	r3, r1
 80081fc:	f823 2cd8 	strh.w	r2, [r3, #-216]
         for(int i = 0; i < 800; i++)
 8008200:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8008204:	f103 030c 	add.w	r3, r3, #12
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	3301      	adds	r3, #1
 800820c:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8008210:	f102 020c 	add.w	r2, r2, #12
 8008214:	6013      	str	r3, [r2, #0]
 8008216:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 800821a:	f103 030c 	add.w	r3, r3, #12
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8008224:	f6ff af3f 	blt.w	80080a6 <StartChartTask+0x966>
            }
         }
         osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8008228:	4bda      	ldr	r3, [pc, #872]	; (8008594 <StartChartTask+0xe54>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f04f 31ff 	mov.w	r1, #4294967295
 8008230:	4618      	mov	r0, r3
 8008232:	f00d fdc5 	bl	8015dc0 <osMutexAcquire>
         osMutexAcquire(E_PAPIERMutexHandle, osWaitForever);
 8008236:	4bd8      	ldr	r3, [pc, #864]	; (8008598 <StartChartTask+0xe58>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f04f 31ff 	mov.w	r1, #4294967295
 800823e:	4618      	mov	r0, r3
 8008240:	f00d fdbe 	bl	8015dc0 <osMutexAcquire>
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8008244:	4bd5      	ldr	r3, [pc, #852]	; (800859c <StartChartTask+0xe5c>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f04f 31ff 	mov.w	r1, #4294967295
 800824c:	4618      	mov	r0, r3
 800824e:	f00d fdb7 	bl	8015dc0 <osMutexAcquire>
         if(X_Axis[0] != 0xffff && X_Axis[1] != 0xffff)
 8008252:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8008256:	f833 3cd8 	ldrh.w	r3, [r3, #-216]
 800825a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800825e:	4293      	cmp	r3, r2
 8008260:	d024      	beq.n	80082ac <StartChartTask+0xb6c>
 8008262:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8008266:	f833 3cd6 	ldrh.w	r3, [r3, #-214]
 800826a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800826e:	4293      	cmp	r3, r2
 8008270:	d01c      	beq.n	80082ac <StartChartTask+0xb6c>
         {
            GFX_DrawLine(X_Axis[0], Y_Axis[0], X_Axis[1], Y_Axis[1], BLACK, E_PAPIER);
 8008272:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8008276:	f833 3cd8 	ldrh.w	r3, [r3, #-216]
 800827a:	4618      	mov	r0, r3
 800827c:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008280:	f6a3 2398 	subw	r3, r3, #2712	; 0xa98
 8008284:	881b      	ldrh	r3, [r3, #0]
 8008286:	4619      	mov	r1, r3
 8008288:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800828c:	f833 3cd6 	ldrh.w	r3, [r3, #-214]
 8008290:	461a      	mov	r2, r3
 8008292:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008296:	f6a3 2398 	subw	r3, r3, #2712	; 0xa98
 800829a:	885b      	ldrh	r3, [r3, #2]
 800829c:	461c      	mov	r4, r3
 800829e:	2301      	movs	r3, #1
 80082a0:	9301      	str	r3, [sp, #4]
 80082a2:	2300      	movs	r3, #0
 80082a4:	9300      	str	r3, [sp, #0]
 80082a6:	4623      	mov	r3, r4
 80082a8:	f7f9 f924 	bl	80014f4 <GFX_DrawLine>
         }
         for(int i = 1; i < 800; i++)
 80082ac:	2301      	movs	r3, #1
 80082ae:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 80082b2:	f102 0208 	add.w	r2, r2, #8
 80082b6:	6013      	str	r3, [r2, #0]
 80082b8:	e065      	b.n	8008386 <StartChartTask+0xc46>
         {
            if(X_Axis[i + 1] != 0xffff && X_Axis[i] != 0xffff)
 80082ba:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80082be:	f103 0308 	add.w	r3, r3, #8
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	3301      	adds	r3, #1
 80082c6:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80082ca:	005b      	lsls	r3, r3, #1
 80082cc:	4413      	add	r3, r2
 80082ce:	f833 3cd8 	ldrh.w	r3, [r3, #-216]
 80082d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d04a      	beq.n	8008370 <StartChartTask+0xc30>
 80082da:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80082de:	461a      	mov	r2, r3
 80082e0:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80082e4:	f103 0308 	add.w	r3, r3, #8
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	005b      	lsls	r3, r3, #1
 80082ec:	4413      	add	r3, r2
 80082ee:	f833 3cd8 	ldrh.w	r3, [r3, #-216]
 80082f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d03a      	beq.n	8008370 <StartChartTask+0xc30>
            {
               GFX_DrawLine(X_Axis[i], Y_Axis[i], X_Axis[i + 1], Y_Axis[i + 1], BLACK, E_PAPIER);
 80082fa:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80082fe:	461a      	mov	r2, r3
 8008300:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8008304:	f103 0308 	add.w	r3, r3, #8
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	005b      	lsls	r3, r3, #1
 800830c:	4413      	add	r3, r2
 800830e:	f833 3cd8 	ldrh.w	r3, [r3, #-216]
 8008312:	4618      	mov	r0, r3
 8008314:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008318:	f6a3 2398 	subw	r3, r3, #2712	; 0xa98
 800831c:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8008320:	f102 0208 	add.w	r2, r2, #8
 8008324:	6812      	ldr	r2, [r2, #0]
 8008326:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800832a:	4619      	mov	r1, r3
 800832c:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8008330:	f103 0308 	add.w	r3, r3, #8
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	3301      	adds	r3, #1
 8008338:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800833c:	005b      	lsls	r3, r3, #1
 800833e:	4413      	add	r3, r2
 8008340:	f833 3cd8 	ldrh.w	r3, [r3, #-216]
 8008344:	461c      	mov	r4, r3
 8008346:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 800834a:	f103 0308 	add.w	r3, r3, #8
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	1c5a      	adds	r2, r3, #1
 8008352:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008356:	f6a3 2398 	subw	r3, r3, #2712	; 0xa98
 800835a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800835e:	461a      	mov	r2, r3
 8008360:	2301      	movs	r3, #1
 8008362:	9301      	str	r3, [sp, #4]
 8008364:	2300      	movs	r3, #0
 8008366:	9300      	str	r3, [sp, #0]
 8008368:	4613      	mov	r3, r2
 800836a:	4622      	mov	r2, r4
 800836c:	f7f9 f8c2 	bl	80014f4 <GFX_DrawLine>
         for(int i = 1; i < 800; i++)
 8008370:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8008374:	f103 0308 	add.w	r3, r3, #8
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	3301      	adds	r3, #1
 800837c:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8008380:	f102 0208 	add.w	r2, r2, #8
 8008384:	6013      	str	r3, [r2, #0]
 8008386:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 800838a:	f103 0308 	add.w	r3, r3, #8
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8008394:	db91      	blt.n	80082ba <StartChartTask+0xb7a>
            }
         }
         char Temp[10];
         float TempDifferencje = _Max - _Min;
 8008396:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 800839a:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800839e:	ed93 7a00 	vldr	s14, [r3]
 80083a2:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80083a6:	f103 0320 	add.w	r3, r3, #32
 80083aa:	edd3 7a00 	vldr	s15, [r3]
 80083ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80083b2:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80083b6:	edc3 7a00 	vstr	s15, [r3]
         sprintf(Temp, "%0.2f", (_Min + TempDifferencje / 4));
 80083ba:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80083be:	edd3 7a00 	vldr	s15, [r3]
 80083c2:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80083c6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80083ca:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80083ce:	f103 0320 	add.w	r3, r3, #32
 80083d2:	edd3 7a00 	vldr	s15, [r3]
 80083d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80083da:	ee17 0a90 	vmov	r0, s15
 80083de:	f7f8 f8cb 	bl	8000578 <__aeabi_f2d>
 80083e2:	4602      	mov	r2, r0
 80083e4:	460b      	mov	r3, r1
 80083e6:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80083ea:	3828      	subs	r0, #40	; 0x28
 80083ec:	496c      	ldr	r1, [pc, #432]	; (80085a0 <StartChartTask+0xe60>)
 80083ee:	f004 fbd3 	bl	800cb98 <sprintf_>
         GFX_DrawString(0, 218, Temp, BLACK, 1, E_PAPIER);
 80083f2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80083f6:	3a28      	subs	r2, #40	; 0x28
 80083f8:	2301      	movs	r3, #1
 80083fa:	9301      	str	r3, [sp, #4]
 80083fc:	2301      	movs	r3, #1
 80083fe:	9300      	str	r3, [sp, #0]
 8008400:	2300      	movs	r3, #0
 8008402:	21da      	movs	r1, #218	; 0xda
 8008404:	2000      	movs	r0, #0
 8008406:	f7f8 ff55 	bl	80012b4 <GFX_DrawString>
         sprintf(Temp, "%0.2f", (_Min + TempDifferencje / 2));
 800840a:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 800840e:	edd3 7a00 	vldr	s15, [r3]
 8008412:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008416:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800841a:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 800841e:	f103 0320 	add.w	r3, r3, #32
 8008422:	edd3 7a00 	vldr	s15, [r3]
 8008426:	ee77 7a27 	vadd.f32	s15, s14, s15
 800842a:	ee17 0a90 	vmov	r0, s15
 800842e:	f7f8 f8a3 	bl	8000578 <__aeabi_f2d>
 8008432:	4602      	mov	r2, r0
 8008434:	460b      	mov	r3, r1
 8008436:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800843a:	3828      	subs	r0, #40	; 0x28
 800843c:	4958      	ldr	r1, [pc, #352]	; (80085a0 <StartChartTask+0xe60>)
 800843e:	f004 fbab 	bl	800cb98 <sprintf_>
         GFX_DrawString(0, 160, Temp, BLACK, 1, E_PAPIER);
 8008442:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008446:	3a28      	subs	r2, #40	; 0x28
 8008448:	2301      	movs	r3, #1
 800844a:	9301      	str	r3, [sp, #4]
 800844c:	2301      	movs	r3, #1
 800844e:	9300      	str	r3, [sp, #0]
 8008450:	2300      	movs	r3, #0
 8008452:	21a0      	movs	r1, #160	; 0xa0
 8008454:	2000      	movs	r0, #0
 8008456:	f7f8 ff2d 	bl	80012b4 <GFX_DrawString>
         sprintf(Temp, "%0.2f", (_Max - TempDifferencje / 4));
 800845a:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 800845e:	ed93 7a00 	vldr	s14, [r3]
 8008462:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8008466:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800846a:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 800846e:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8008472:	ed93 7a00 	vldr	s14, [r3]
 8008476:	ee77 7a67 	vsub.f32	s15, s14, s15
 800847a:	ee17 0a90 	vmov	r0, s15
 800847e:	f7f8 f87b 	bl	8000578 <__aeabi_f2d>
 8008482:	4602      	mov	r2, r0
 8008484:	460b      	mov	r3, r1
 8008486:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800848a:	3828      	subs	r0, #40	; 0x28
 800848c:	4944      	ldr	r1, [pc, #272]	; (80085a0 <StartChartTask+0xe60>)
 800848e:	f004 fb83 	bl	800cb98 <sprintf_>
         GFX_DrawString(0, 103, Temp, BLACK, 1, E_PAPIER);
 8008492:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008496:	3a28      	subs	r2, #40	; 0x28
 8008498:	2301      	movs	r3, #1
 800849a:	9301      	str	r3, [sp, #4]
 800849c:	2301      	movs	r3, #1
 800849e:	9300      	str	r3, [sp, #0]
 80084a0:	2300      	movs	r3, #0
 80084a2:	2167      	movs	r1, #103	; 0x67
 80084a4:	2000      	movs	r0, #0
 80084a6:	f7f8 ff05 	bl	80012b4 <GFX_DrawString>
         sprintf(Temp, "%0.2f", _Min);
 80084aa:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80084ae:	f103 0320 	add.w	r3, r3, #32
 80084b2:	6818      	ldr	r0, [r3, #0]
 80084b4:	f7f8 f860 	bl	8000578 <__aeabi_f2d>
 80084b8:	4602      	mov	r2, r0
 80084ba:	460b      	mov	r3, r1
 80084bc:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80084c0:	3828      	subs	r0, #40	; 0x28
 80084c2:	4937      	ldr	r1, [pc, #220]	; (80085a0 <StartChartTask+0xe60>)
 80084c4:	f004 fb68 	bl	800cb98 <sprintf_>
         GFX_DrawString(0, 276, Temp, BLACK, 1, E_PAPIER);
 80084c8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80084cc:	3a28      	subs	r2, #40	; 0x28
 80084ce:	2301      	movs	r3, #1
 80084d0:	9301      	str	r3, [sp, #4]
 80084d2:	2301      	movs	r3, #1
 80084d4:	9300      	str	r3, [sp, #0]
 80084d6:	2300      	movs	r3, #0
 80084d8:	f44f 718a 	mov.w	r1, #276	; 0x114
 80084dc:	2000      	movs	r0, #0
 80084de:	f7f8 fee9 	bl	80012b4 <GFX_DrawString>
         sprintf(Temp, "%0.2f", _Max);
 80084e2:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80084e6:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80084ea:	6818      	ldr	r0, [r3, #0]
 80084ec:	f7f8 f844 	bl	8000578 <__aeabi_f2d>
 80084f0:	4602      	mov	r2, r0
 80084f2:	460b      	mov	r3, r1
 80084f4:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80084f8:	3828      	subs	r0, #40	; 0x28
 80084fa:	4929      	ldr	r1, [pc, #164]	; (80085a0 <StartChartTask+0xe60>)
 80084fc:	f004 fb4c 	bl	800cb98 <sprintf_>
         GFX_DrawString(0, 45, Temp, BLACK, 1, E_PAPIER);
 8008500:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008504:	3a28      	subs	r2, #40	; 0x28
 8008506:	2301      	movs	r3, #1
 8008508:	9301      	str	r3, [sp, #4]
 800850a:	2301      	movs	r3, #1
 800850c:	9300      	str	r3, [sp, #0]
 800850e:	2300      	movs	r3, #0
 8008510:	212d      	movs	r1, #45	; 0x2d
 8008512:	2000      	movs	r0, #0
 8008514:	f7f8 fece 	bl	80012b4 <GFX_DrawString>
         e_papier_display();
 8008518:	f7fc fb9a 	bl	8004c50 <e_papier_display>
         osMutexAcquire(EncoderMutexHandle, osWaitForever);
 800851c:	4b21      	ldr	r3, [pc, #132]	; (80085a4 <StartChartTask+0xe64>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f04f 31ff 	mov.w	r1, #4294967295
 8008524:	4618      	mov	r0, r3
 8008526:	f00d fc4b 	bl	8015dc0 <osMutexAcquire>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 1)
 800852a:	e002      	b.n	8008532 <StartChartTask+0xdf2>
         {
            osDelay(100);
 800852c:	2064      	movs	r0, #100	; 0x64
 800852e:	f00d f9f9 	bl	8015924 <osDelay>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 1)
 8008532:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008536:	481c      	ldr	r0, [pc, #112]	; (80085a8 <StartChartTask+0xe68>)
 8008538:	f006 fca2 	bl	800ee80 <HAL_GPIO_ReadPin>
 800853c:	4603      	mov	r3, r0
 800853e:	2b01      	cmp	r3, #1
 8008540:	d0f4      	beq.n	800852c <StartChartTask+0xdec>
         }
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8008542:	e002      	b.n	800854a <StartChartTask+0xe0a>
         {
            osDelay(100);
 8008544:	2064      	movs	r0, #100	; 0x64
 8008546:	f00d f9ed 	bl	8015924 <osDelay>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 800854a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800854e:	4816      	ldr	r0, [pc, #88]	; (80085a8 <StartChartTask+0xe68>)
 8008550:	f006 fc96 	bl	800ee80 <HAL_GPIO_ReadPin>
 8008554:	4603      	mov	r3, r0
 8008556:	2b00      	cmp	r3, #0
 8008558:	d0f4      	beq.n	8008544 <StartChartTask+0xe04>
         }
         osMutexRelease(EncoderMutexHandle);
 800855a:	4b12      	ldr	r3, [pc, #72]	; (80085a4 <StartChartTask+0xe64>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4618      	mov	r0, r3
 8008560:	f00d fc79 	bl	8015e56 <osMutexRelease>
         osMutexRelease(SPI1MutexHandle);
 8008564:	4b0d      	ldr	r3, [pc, #52]	; (800859c <StartChartTask+0xe5c>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4618      	mov	r0, r3
 800856a:	f00d fc74 	bl	8015e56 <osMutexRelease>
         osMutexRelease(E_PAPIERMutexHandle);
 800856e:	4b0a      	ldr	r3, [pc, #40]	; (8008598 <StartChartTask+0xe58>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4618      	mov	r0, r3
 8008574:	f00d fc6f 	bl	8015e56 <osMutexRelease>
         osMutexRelease(ScreensDcMutexHandle);
 8008578:	4b06      	ldr	r3, [pc, #24]	; (8008594 <StartChartTask+0xe54>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4618      	mov	r0, r3
 800857e:	f00d fc6a 	bl	8015e56 <osMutexRelease>
      {
 8008582:	f000 bddc 	b.w	800913e <StartChartTask+0x19fe>
      }
      else
      {
         for(int i = DATE_CHART_ADDR_START; i < DATE_CHART_ADDR_END; i += 12)
 8008586:	2308      	movs	r3, #8
 8008588:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 800858c:	f102 0204 	add.w	r2, r2, #4
 8008590:	6013      	str	r3, [r2, #0]
 8008592:	e05b      	b.n	800864c <StartChartTask+0xf0c>
 8008594:	200040a4 	.word	0x200040a4
 8008598:	200040b0 	.word	0x200040b0
 800859c:	200040ac 	.word	0x200040ac
 80085a0:	08020520 	.word	0x08020520
 80085a4:	200040c0 	.word	0x200040c0
 80085a8:	48000400 	.word	0x48000400
         {
            osMutexAcquire(SPI1MutexHandle, osWaitForever);
 80085ac:	4bc1      	ldr	r3, [pc, #772]	; (80088b4 <StartChartTask+0x1174>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f04f 31ff 	mov.w	r1, #4294967295
 80085b4:	4618      	mov	r0, r3
 80085b6:	f00d fc03 	bl	8015dc0 <osMutexAcquire>
            fram_Read(&Fram, i, &FramDateChart, 12);
 80085ba:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80085be:	f103 0304 	add.w	r3, r3, #4
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	b299      	uxth	r1, r3
 80085c6:	f507 625c 	add.w	r2, r7, #3520	; 0xdc0
 80085ca:	3a18      	subs	r2, #24
 80085cc:	230c      	movs	r3, #12
 80085ce:	48ba      	ldr	r0, [pc, #744]	; (80088b8 <StartChartTask+0x1178>)
 80085d0:	f7fc ff1c 	bl	800540c <fram_Read>
            osMutexRelease(SPI1MutexHandle);
 80085d4:	4bb7      	ldr	r3, [pc, #732]	; (80088b4 <StartChartTask+0x1174>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4618      	mov	r0, r3
 80085da:	f00d fc3c 	bl	8015e56 <osMutexRelease>
            if(FramDateChart.Date == Cda.Date && FramDateChart.Month == Cda.Month && FramDateChart.Year == Cda.Year)
 80085de:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80085e2:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 80085e6:	781a      	ldrb	r2, [r3, #0]
 80085e8:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80085ec:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 80085f0:	78db      	ldrb	r3, [r3, #3]
 80085f2:	429a      	cmp	r2, r3
 80085f4:	d11f      	bne.n	8008636 <StartChartTask+0xef6>
 80085f6:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80085fa:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 80085fe:	785a      	ldrb	r2, [r3, #1]
 8008600:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008604:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8008608:	789b      	ldrb	r3, [r3, #2]
 800860a:	429a      	cmp	r2, r3
 800860c:	d113      	bne.n	8008636 <StartChartTask+0xef6>
 800860e:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008612:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8008616:	789b      	ldrb	r3, [r3, #2]
 8008618:	b29a      	uxth	r2, r3
 800861a:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 800861e:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8008622:	881b      	ldrh	r3, [r3, #0]
 8008624:	429a      	cmp	r2, r3
 8008626:	d106      	bne.n	8008636 <StartChartTask+0xef6>
            {
               FramDataChartExistFlag = 1;
 8008628:	2301      	movs	r3, #1
 800862a:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 800862e:	f102 023f 	add.w	r2, r2, #63	; 0x3f
 8008632:	7013      	strb	r3, [r2, #0]
               break;
 8008634:	e013      	b.n	800865e <StartChartTask+0xf1e>
         for(int i = DATE_CHART_ADDR_START; i < DATE_CHART_ADDR_END; i += 12)
 8008636:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 800863a:	f103 0304 	add.w	r3, r3, #4
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	330c      	adds	r3, #12
 8008642:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8008646:	f102 0204 	add.w	r2, r2, #4
 800864a:	6013      	str	r3, [r2, #0]
 800864c:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8008650:	f103 0304 	add.w	r3, r3, #4
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f241 7277 	movw	r2, #6007	; 0x1777
 800865a:	4293      	cmp	r3, r2
 800865c:	dda6      	ble.n	80085ac <StartChartTask+0xe6c>
            }
         }
         if(FramDataChartExistFlag == 1)
 800865e:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8008662:	f103 033f 	add.w	r3, r3, #63	; 0x3f
 8008666:	781b      	ldrb	r3, [r3, #0]
 8008668:	2b01      	cmp	r3, #1
 800866a:	f040 81b0 	bne.w	80089ce <StartChartTask+0x128e>
         {
            FramDataChartExistFlag = 0;
 800866e:	2300      	movs	r3, #0
 8008670:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8008674:	f102 023f 	add.w	r2, r2, #63	; 0x3f
 8008678:	7013      	strb	r3, [r2, #0]
            for(int i = 0; i < FramDateChart.Length; i++)
 800867a:	2300      	movs	r3, #0
 800867c:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8008680:	6013      	str	r3, [r2, #0]
 8008682:	e198      	b.n	80089b6 <StartChartTask+0x1276>
            {
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8008684:	4b8b      	ldr	r3, [pc, #556]	; (80088b4 <StartChartTask+0x1174>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f04f 31ff 	mov.w	r1, #4294967295
 800868c:	4618      	mov	r0, r3
 800868e:	f00d fb97 	bl	8015dc0 <osMutexAcquire>
               flash_ReadPage(&Flash, i + FramDateChart.StartFlashPage, &Pv);
 8008692:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008696:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 800869a:	685a      	ldr	r2, [r3, #4]
 800869c:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	18d1      	adds	r1, r2, r3
 80086a4:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 80086a8:	3b18      	subs	r3, #24
 80086aa:	461a      	mov	r2, r3
 80086ac:	4883      	ldr	r0, [pc, #524]	; (80088bc <StartChartTask+0x117c>)
 80086ae:	f7fc fd00 	bl	80050b2 <flash_ReadPage>
               osMutexRelease(SPI1MutexHandle);
 80086b2:	4b80      	ldr	r3, [pc, #512]	; (80088b4 <StartChartTask+0x1174>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4618      	mov	r0, r3
 80086b8:	f00d fbcd 	bl	8015e56 <osMutexRelease>
               uint32_t TempCrc = Crc(CRC_INITIAL_VALUE, 252, &Pv);
 80086bc:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 80086c0:	3b18      	subs	r3, #24
 80086c2:	461a      	mov	r2, r3
 80086c4:	21fc      	movs	r1, #252	; 0xfc
 80086c6:	f04f 30ff 	mov.w	r0, #4294967295
 80086ca:	f7fc f8a3 	bl	8004814 <Crc>
 80086ce:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80086d2:	f103 0318 	add.w	r3, r3, #24
 80086d6:	6018      	str	r0, [r3, #0]
               if(TempCrc == Pv.PageCRC)
 80086d8:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80086dc:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 80086e0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80086e4:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 80086e8:	f102 0218 	add.w	r2, r2, #24
 80086ec:	6812      	ldr	r2, [r2, #0]
 80086ee:	429a      	cmp	r2, r3
 80086f0:	f040 815a 	bne.w	80089a8 <StartChartTask+0x1268>
               {
                  for(int j = (i * 9), k = 0; k < 9; k++)
 80086f4:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80086f8:	681a      	ldr	r2, [r3, #0]
 80086fa:	4613      	mov	r3, r2
 80086fc:	00db      	lsls	r3, r3, #3
 80086fe:	4413      	add	r3, r2
 8008700:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008704:	f102 0214 	add.w	r2, r2, #20
 8008708:	6013      	str	r3, [r2, #0]
 800870a:	2300      	movs	r3, #0
 800870c:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008710:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8008714:	6013      	str	r3, [r2, #0]
 8008716:	e13f      	b.n	8008998 <StartChartTask+0x1258>
                  {
                     if(Cda.ChartType == INTERNAL_PM1)
 8008718:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 800871c:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8008720:	791b      	ldrb	r3, [r3, #4]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d121      	bne.n	800876a <StartChartTask+0x102a>
                     {
                        ChartVariable.IntegerType[j + k] = Pv.Record[k].InternalPM1;
 8008726:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 800872a:	f103 0314 	add.w	r3, r3, #20
 800872e:	681a      	ldr	r2, [r3, #0]
 8008730:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008734:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	18d1      	adds	r1, r2, r3
 800873c:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008740:	f5a3 608b 	sub.w	r0, r3, #1112	; 0x458
 8008744:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008748:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 800874c:	681a      	ldr	r2, [r3, #0]
 800874e:	4613      	mov	r3, r2
 8008750:	00db      	lsls	r3, r3, #3
 8008752:	1a9b      	subs	r3, r3, r2
 8008754:	009b      	lsls	r3, r3, #2
 8008756:	4403      	add	r3, r0
 8008758:	3304      	adds	r3, #4
 800875a:	881a      	ldrh	r2, [r3, #0]
 800875c:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8008760:	f5a3 6350 	sub.w	r3, r3, #3328	; 0xd00
 8008764:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 8008768:	e0cb      	b.n	8008902 <StartChartTask+0x11c2>
                     }
                     else if(Cda.ChartType == INTERNAL_PM25)
 800876a:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 800876e:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8008772:	791b      	ldrb	r3, [r3, #4]
 8008774:	2b01      	cmp	r3, #1
 8008776:	d121      	bne.n	80087bc <StartChartTask+0x107c>
                     {
                        ChartVariable.IntegerType[j + k] = Pv.Record[k].InternalPM25;
 8008778:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 800877c:	f103 0314 	add.w	r3, r3, #20
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008786:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	18d1      	adds	r1, r2, r3
 800878e:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008792:	f5a3 608b 	sub.w	r0, r3, #1112	; 0x458
 8008796:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 800879a:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 800879e:	681a      	ldr	r2, [r3, #0]
 80087a0:	4613      	mov	r3, r2
 80087a2:	00db      	lsls	r3, r3, #3
 80087a4:	1a9b      	subs	r3, r3, r2
 80087a6:	009b      	lsls	r3, r3, #2
 80087a8:	4403      	add	r3, r0
 80087aa:	3306      	adds	r3, #6
 80087ac:	881a      	ldrh	r2, [r3, #0]
 80087ae:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80087b2:	f5a3 6350 	sub.w	r3, r3, #3328	; 0xd00
 80087b6:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 80087ba:	e0a2      	b.n	8008902 <StartChartTask+0x11c2>
                     }
                     else if(Cda.ChartType == INTERNAL_PM10)
 80087bc:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80087c0:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 80087c4:	791b      	ldrb	r3, [r3, #4]
 80087c6:	2b02      	cmp	r3, #2
 80087c8:	d121      	bne.n	800880e <StartChartTask+0x10ce>
                     {
                        ChartVariable.IntegerType[j + k] = Pv.Record[k].InternalPM10;
 80087ca:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80087ce:	f103 0314 	add.w	r3, r3, #20
 80087d2:	681a      	ldr	r2, [r3, #0]
 80087d4:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80087d8:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	18d1      	adds	r1, r2, r3
 80087e0:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80087e4:	f5a3 608b 	sub.w	r0, r3, #1112	; 0x458
 80087e8:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80087ec:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80087f0:	681a      	ldr	r2, [r3, #0]
 80087f2:	4613      	mov	r3, r2
 80087f4:	00db      	lsls	r3, r3, #3
 80087f6:	1a9b      	subs	r3, r3, r2
 80087f8:	009b      	lsls	r3, r3, #2
 80087fa:	4403      	add	r3, r0
 80087fc:	3308      	adds	r3, #8
 80087fe:	881a      	ldrh	r2, [r3, #0]
 8008800:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8008804:	f5a3 6350 	sub.w	r3, r3, #3328	; 0xd00
 8008808:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 800880c:	e079      	b.n	8008902 <StartChartTask+0x11c2>
                     }
                     else if(Cda.ChartType == EXTERNAL_PM1)
 800880e:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008812:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8008816:	791b      	ldrb	r3, [r3, #4]
 8008818:	2b03      	cmp	r3, #3
 800881a:	d121      	bne.n	8008860 <StartChartTask+0x1120>
                     {
                        ChartVariable.IntegerType[j + k] = Pv.Record[k].ExternalPM1;
 800881c:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008820:	f103 0314 	add.w	r3, r3, #20
 8008824:	681a      	ldr	r2, [r3, #0]
 8008826:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 800882a:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	18d1      	adds	r1, r2, r3
 8008832:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008836:	f5a3 608b 	sub.w	r0, r3, #1112	; 0x458
 800883a:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 800883e:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8008842:	681a      	ldr	r2, [r3, #0]
 8008844:	4613      	mov	r3, r2
 8008846:	00db      	lsls	r3, r3, #3
 8008848:	1a9b      	subs	r3, r3, r2
 800884a:	009b      	lsls	r3, r3, #2
 800884c:	4403      	add	r3, r0
 800884e:	330a      	adds	r3, #10
 8008850:	881a      	ldrh	r2, [r3, #0]
 8008852:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8008856:	f5a3 6350 	sub.w	r3, r3, #3328	; 0xd00
 800885a:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 800885e:	e050      	b.n	8008902 <StartChartTask+0x11c2>
                     }
                     else if(Cda.ChartType == EXTERNAL_PM25)
 8008860:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008864:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8008868:	791b      	ldrb	r3, [r3, #4]
 800886a:	2b04      	cmp	r3, #4
 800886c:	d128      	bne.n	80088c0 <StartChartTask+0x1180>
                     {
                        ChartVariable.IntegerType[j + k] = Pv.Record[k].ExternalPM25;
 800886e:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008872:	f103 0314 	add.w	r3, r3, #20
 8008876:	681a      	ldr	r2, [r3, #0]
 8008878:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 800887c:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	18d1      	adds	r1, r2, r3
 8008884:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008888:	f5a3 608b 	sub.w	r0, r3, #1112	; 0x458
 800888c:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008890:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8008894:	681a      	ldr	r2, [r3, #0]
 8008896:	4613      	mov	r3, r2
 8008898:	00db      	lsls	r3, r3, #3
 800889a:	1a9b      	subs	r3, r3, r2
 800889c:	009b      	lsls	r3, r3, #2
 800889e:	4403      	add	r3, r0
 80088a0:	330c      	adds	r3, #12
 80088a2:	881a      	ldrh	r2, [r3, #0]
 80088a4:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80088a8:	f5a3 6350 	sub.w	r3, r3, #3328	; 0xd00
 80088ac:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 80088b0:	e027      	b.n	8008902 <StartChartTask+0x11c2>
 80088b2:	bf00      	nop
 80088b4:	200040ac 	.word	0x200040ac
 80088b8:	20003fbc 	.word	0x20003fbc
 80088bc:	20003fac 	.word	0x20003fac
                     }
                     else
                     {
                        ChartVariable.IntegerType[j + k] = Pv.Record[k].ExternalPM10;
 80088c0:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80088c4:	f103 0314 	add.w	r3, r3, #20
 80088c8:	681a      	ldr	r2, [r3, #0]
 80088ca:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80088ce:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	18d1      	adds	r1, r2, r3
 80088d6:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80088da:	f5a3 608b 	sub.w	r0, r3, #1112	; 0x458
 80088de:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80088e2:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80088e6:	681a      	ldr	r2, [r3, #0]
 80088e8:	4613      	mov	r3, r2
 80088ea:	00db      	lsls	r3, r3, #3
 80088ec:	1a9b      	subs	r3, r3, r2
 80088ee:	009b      	lsls	r3, r3, #2
 80088f0:	4403      	add	r3, r0
 80088f2:	330e      	adds	r3, #14
 80088f4:	881a      	ldrh	r2, [r3, #0]
 80088f6:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80088fa:	f5a3 6350 	sub.w	r3, r3, #3328	; 0xd00
 80088fe:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
                     }
                     Minute[j + k] = Pv.Record[k].Minute;
 8008902:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008906:	f103 0314 	add.w	r3, r3, #20
 800890a:	681a      	ldr	r2, [r3, #0]
 800890c:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008910:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	18d1      	adds	r1, r2, r3
 8008918:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 800891c:	f5a3 608b 	sub.w	r0, r3, #1112	; 0x458
 8008920:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008924:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	4613      	mov	r3, r2
 800892c:	00db      	lsls	r3, r3, #3
 800892e:	1a9b      	subs	r3, r3, r2
 8008930:	009b      	lsls	r3, r3, #2
 8008932:	4403      	add	r3, r0
 8008934:	3302      	adds	r3, #2
 8008936:	781a      	ldrb	r2, [r3, #0]
 8008938:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 800893c:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 8008940:	545a      	strb	r2, [r3, r1]
                     Hour[j + k]   = Pv.Record[k].Hour;
 8008942:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008946:	f103 0314 	add.w	r3, r3, #20
 800894a:	681a      	ldr	r2, [r3, #0]
 800894c:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008950:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	18d1      	adds	r1, r2, r3
 8008958:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 800895c:	f5a3 608b 	sub.w	r0, r3, #1112	; 0x458
 8008960:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008964:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8008968:	681a      	ldr	r2, [r3, #0]
 800896a:	4613      	mov	r3, r2
 800896c:	00db      	lsls	r3, r3, #3
 800896e:	1a9b      	subs	r3, r3, r2
 8008970:	009b      	lsls	r3, r3, #2
 8008972:	4403      	add	r3, r0
 8008974:	3303      	adds	r3, #3
 8008976:	781a      	ldrb	r2, [r3, #0]
 8008978:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 800897c:	440b      	add	r3, r1
 800897e:	f803 2c20 	strb.w	r2, [r3, #-32]
                  for(int j = (i * 9), k = 0; k < 9; k++)
 8008982:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008986:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	3301      	adds	r3, #1
 800898e:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008992:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8008996:	6013      	str	r3, [r2, #0]
 8008998:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 800899c:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	2b08      	cmp	r3, #8
 80089a4:	f77f aeb8 	ble.w	8008718 <StartChartTask+0xfd8>
            for(int i = 0; i < FramDateChart.Length; i++)
 80089a8:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	3301      	adds	r3, #1
 80089b0:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 80089b4:	6013      	str	r3, [r2, #0]
 80089b6:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80089ba:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 80089be:	7a1b      	ldrb	r3, [r3, #8]
 80089c0:	461a      	mov	r2, r3
 80089c2:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4293      	cmp	r3, r2
 80089ca:	f6ff ae5b 	blt.w	8008684 <StartChartTask+0xf44>
                  }
               }
            }
         }
         uint16_t _Max = 0, _Min = 65000;
 80089ce:	2300      	movs	r3, #0
 80089d0:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 80089d4:	f102 023a 	add.w	r2, r2, #58	; 0x3a
 80089d8:	8013      	strh	r3, [r2, #0]
 80089da:	f64f 53e8 	movw	r3, #65000	; 0xfde8
 80089de:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 80089e2:	f102 0238 	add.w	r2, r2, #56	; 0x38
 80089e6:	8013      	strh	r3, [r2, #0]
         uint32_t _Avg = 0;
 80089e8:	2300      	movs	r3, #0
 80089ea:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 80089ee:	f102 0234 	add.w	r2, r2, #52	; 0x34
 80089f2:	6013      	str	r3, [r2, #0]
         for(int i = 0; i < FramDateChart.Length * 9; i++)
 80089f4:	2300      	movs	r3, #0
 80089f6:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 80089fa:	f102 0230 	add.w	r2, r2, #48	; 0x30
 80089fe:	6013      	str	r3, [r2, #0]
 8008a00:	e021      	b.n	8008a46 <StartChartTask+0x1306>
         {
            _Avg += ChartVariable.IntegerType[i];
 8008a02:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8008a06:	f5a3 6350 	sub.w	r3, r3, #3328	; 0xd00
 8008a0a:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008a0e:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8008a12:	6812      	ldr	r2, [r2, #0]
 8008a14:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008a18:	461a      	mov	r2, r3
 8008a1a:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008a1e:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	4413      	add	r3, r2
 8008a26:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008a2a:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8008a2e:	6013      	str	r3, [r2, #0]
         for(int i = 0; i < FramDateChart.Length * 9; i++)
 8008a30:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008a34:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	3301      	adds	r3, #1
 8008a3c:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008a40:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8008a44:	6013      	str	r3, [r2, #0]
 8008a46:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008a4a:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8008a4e:	7a1b      	ldrb	r3, [r3, #8]
 8008a50:	461a      	mov	r2, r3
 8008a52:	4613      	mov	r3, r2
 8008a54:	00db      	lsls	r3, r3, #3
 8008a56:	4413      	add	r3, r2
 8008a58:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008a5c:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8008a60:	6812      	ldr	r2, [r2, #0]
 8008a62:	429a      	cmp	r2, r3
 8008a64:	dbcd      	blt.n	8008a02 <StartChartTask+0x12c2>
         }
         for(int i = 0; i < FramDateChart.Length * 9; i++)
 8008a66:	2300      	movs	r3, #0
 8008a68:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008a6c:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8008a70:	6013      	str	r3, [r2, #0]
 8008a72:	e086      	b.n	8008b82 <StartChartTask+0x1442>
         {
            if(ChartVariable.IntegerType[i] > 500)
 8008a74:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8008a78:	f5a3 6350 	sub.w	r3, r3, #3328	; 0xd00
 8008a7c:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008a80:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8008a84:	6812      	ldr	r2, [r2, #0]
 8008a86:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008a8a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008a8e:	d91c      	bls.n	8008aca <StartChartTask+0x138a>
            {
               ChartVariable.IntegerType[i] = _Avg / (FramDateChart.Length * 9);
 8008a90:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008a94:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8008a98:	7a1b      	ldrb	r3, [r3, #8]
 8008a9a:	461a      	mov	r2, r3
 8008a9c:	4613      	mov	r3, r2
 8008a9e:	00db      	lsls	r3, r3, #3
 8008aa0:	4413      	add	r3, r2
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008aa8:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ab2:	b299      	uxth	r1, r3
 8008ab4:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8008ab8:	f5a3 6350 	sub.w	r3, r3, #3328	; 0xd00
 8008abc:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008ac0:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8008ac4:	6812      	ldr	r2, [r2, #0]
 8008ac6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            }
            if(_Max < ChartVariable.IntegerType[i])
 8008aca:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8008ace:	f5a3 6350 	sub.w	r3, r3, #3328	; 0xd00
 8008ad2:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008ad6:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8008ada:	6812      	ldr	r2, [r2, #0]
 8008adc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008ae0:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008ae4:	f102 023a 	add.w	r2, r2, #58	; 0x3a
 8008ae8:	8812      	ldrh	r2, [r2, #0]
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d20f      	bcs.n	8008b0e <StartChartTask+0x13ce>
            {
               _Max = ChartVariable.IntegerType[i];
 8008aee:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8008af2:	f5a3 6350 	sub.w	r3, r3, #3328	; 0xd00
 8008af6:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008afa:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8008afe:	6812      	ldr	r2, [r2, #0]
 8008b00:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008b04:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008b08:	f102 023a 	add.w	r2, r2, #58	; 0x3a
 8008b0c:	8013      	strh	r3, [r2, #0]
            }
            if(_Min > ChartVariable.IntegerType[i] && ChartVariable.IntegerType[i] != 0.0)
 8008b0e:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8008b12:	f5a3 6350 	sub.w	r3, r3, #3328	; 0xd00
 8008b16:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008b1a:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8008b1e:	6812      	ldr	r2, [r2, #0]
 8008b20:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008b24:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008b28:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8008b2c:	8812      	ldrh	r2, [r2, #0]
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d91c      	bls.n	8008b6c <StartChartTask+0x142c>
 8008b32:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8008b36:	f5a3 6350 	sub.w	r3, r3, #3328	; 0xd00
 8008b3a:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008b3e:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8008b42:	6812      	ldr	r2, [r2, #0]
 8008b44:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d00f      	beq.n	8008b6c <StartChartTask+0x142c>
            {
               _Min = ChartVariable.IntegerType[i];
 8008b4c:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8008b50:	f5a3 6350 	sub.w	r3, r3, #3328	; 0xd00
 8008b54:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008b58:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8008b5c:	6812      	ldr	r2, [r2, #0]
 8008b5e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008b62:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008b66:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8008b6a:	8013      	strh	r3, [r2, #0]
         for(int i = 0; i < FramDateChart.Length * 9; i++)
 8008b6c:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008b70:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	3301      	adds	r3, #1
 8008b78:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008b7c:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8008b80:	6013      	str	r3, [r2, #0]
 8008b82:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008b86:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8008b8a:	7a1b      	ldrb	r3, [r3, #8]
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	4613      	mov	r3, r2
 8008b90:	00db      	lsls	r3, r3, #3
 8008b92:	4413      	add	r3, r2
 8008b94:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008b98:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8008b9c:	6812      	ldr	r2, [r2, #0]
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	f6ff af68 	blt.w	8008a74 <StartChartTask+0x1334>
            }
         }
         for(int i = 0; i < 800; i++)
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008baa:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8008bae:	6013      	str	r3, [r2, #0]
 8008bb0:	e068      	b.n	8008c84 <StartChartTask+0x1544>
         {
            if(ChartVariable.IntegerType[i] == 0)
 8008bb2:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8008bb6:	f5a3 6350 	sub.w	r3, r3, #3328	; 0xd00
 8008bba:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008bbe:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8008bc2:	6812      	ldr	r2, [r2, #0]
 8008bc4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d10f      	bne.n	8008bec <StartChartTask+0x14ac>
            {
               ChartVariable.IntegerType[i] = _Min;
 8008bcc:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8008bd0:	f5a3 6350 	sub.w	r3, r3, #3328	; 0xd00
 8008bd4:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008bd8:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8008bdc:	6812      	ldr	r2, [r2, #0]
 8008bde:	f507 5102 	add.w	r1, r7, #8320	; 0x2080
 8008be2:	f101 0138 	add.w	r1, r1, #56	; 0x38
 8008be6:	8809      	ldrh	r1, [r1, #0]
 8008be8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            }
            Y_Axis[i] = (uint16_t)map(ChartVariable.IntegerType[i], _Min, _Max, 20, 250);
 8008bec:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8008bf0:	f5a3 6350 	sub.w	r3, r3, #3328	; 0xd00
 8008bf4:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008bf8:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8008bfc:	6812      	ldr	r2, [r2, #0]
 8008bfe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008c02:	4618      	mov	r0, r3
 8008c04:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008c08:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8008c0c:	8819      	ldrh	r1, [r3, #0]
 8008c0e:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008c12:	f103 033a 	add.w	r3, r3, #58	; 0x3a
 8008c16:	881a      	ldrh	r2, [r3, #0]
 8008c18:	23fa      	movs	r3, #250	; 0xfa
 8008c1a:	9300      	str	r3, [sp, #0]
 8008c1c:	2314      	movs	r3, #20
 8008c1e:	f002 f98b 	bl	800af38 <map>
 8008c22:	4603      	mov	r3, r0
 8008c24:	b299      	uxth	r1, r3
 8008c26:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008c2a:	f6a3 2398 	subw	r3, r3, #2712	; 0xa98
 8008c2e:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008c32:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8008c36:	6812      	ldr	r2, [r2, #0]
 8008c38:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            Y_Axis[i] = 300 - Y_Axis[i];
 8008c3c:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008c40:	f6a3 2398 	subw	r3, r3, #2712	; 0xa98
 8008c44:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008c48:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8008c4c:	6812      	ldr	r2, [r2, #0]
 8008c4e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008c52:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 8008c56:	b299      	uxth	r1, r3
 8008c58:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008c5c:	f6a3 2398 	subw	r3, r3, #2712	; 0xa98
 8008c60:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008c64:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8008c68:	6812      	ldr	r2, [r2, #0]
 8008c6a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
         for(int i = 0; i < 800; i++)
 8008c6e:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008c72:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	3301      	adds	r3, #1
 8008c7a:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008c7e:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8008c82:	6013      	str	r3, [r2, #0]
 8008c84:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008c88:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8008c92:	db8e      	blt.n	8008bb2 <StartChartTask+0x1472>
         }
         for(int i = 0; i < 800; i++)
 8008c94:	2300      	movs	r3, #0
 8008c96:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008c9a:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8008c9e:	6013      	str	r3, [r2, #0]
 8008ca0:	e0b7      	b.n	8008e12 <StartChartTask+0x16d2>
         {
            if(Hour[i] == 0 && Minute[i] == 0 && X_Axis[i] == 0)
 8008ca2:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008cac:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	4413      	add	r3, r2
 8008cb4:	3b20      	subs	r3, #32
 8008cb6:	781b      	ldrb	r3, [r3, #0]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d129      	bne.n	8008d10 <StartChartTask+0x15d0>
 8008cbc:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008cc0:	f5a3 7250 	sub.w	r2, r3, #832	; 0x340
 8008cc4:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008cc8:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4413      	add	r3, r2
 8008cd0:	781b      	ldrb	r3, [r3, #0]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d11c      	bne.n	8008d10 <StartChartTask+0x15d0>
 8008cd6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8008cda:	461a      	mov	r2, r3
 8008cdc:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008ce0:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	005b      	lsls	r3, r3, #1
 8008ce8:	4413      	add	r3, r2
 8008cea:	f833 3cd8 	ldrh.w	r3, [r3, #-216]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d10e      	bne.n	8008d10 <StartChartTask+0x15d0>
            {
               X_Axis[i] = 0xffff;
 8008cf2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008cfc:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	005b      	lsls	r3, r3, #1
 8008d04:	4413      	add	r3, r2
 8008d06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008d0a:	f823 2cd8 	strh.w	r2, [r3, #-216]
 8008d0e:	e075      	b.n	8008dfc <StartChartTask+0x16bc>
            }
            else
            {
               X_Axis[i] = map(Hour[i] * 60 + Minute[i], Hour[i] * 60, (Hour[i] + 1) * 60, 64 + (Hour[i] * 14), 64 + ((Hour[i] + 1) * 14));
 8008d10:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008d14:	461a      	mov	r2, r3
 8008d16:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008d1a:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4413      	add	r3, r2
 8008d22:	3b20      	subs	r3, #32
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	461a      	mov	r2, r3
 8008d28:	4613      	mov	r3, r2
 8008d2a:	011b      	lsls	r3, r3, #4
 8008d2c:	1a9b      	subs	r3, r3, r2
 8008d2e:	009b      	lsls	r3, r3, #2
 8008d30:	4619      	mov	r1, r3
 8008d32:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008d36:	f5a3 7250 	sub.w	r2, r3, #832	; 0x340
 8008d3a:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008d3e:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4413      	add	r3, r2
 8008d46:	781b      	ldrb	r3, [r3, #0]
 8008d48:	440b      	add	r3, r1
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008d50:	461a      	mov	r2, r3
 8008d52:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008d56:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4413      	add	r3, r2
 8008d5e:	3b20      	subs	r3, #32
 8008d60:	781b      	ldrb	r3, [r3, #0]
 8008d62:	461a      	mov	r2, r3
 8008d64:	4613      	mov	r3, r2
 8008d66:	011b      	lsls	r3, r3, #4
 8008d68:	1a9b      	subs	r3, r3, r2
 8008d6a:	009b      	lsls	r3, r3, #2
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008d72:	461a      	mov	r2, r3
 8008d74:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008d78:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4413      	add	r3, r2
 8008d80:	3b20      	subs	r3, #32
 8008d82:	781b      	ldrb	r3, [r3, #0]
 8008d84:	1c5a      	adds	r2, r3, #1
 8008d86:	4613      	mov	r3, r2
 8008d88:	011b      	lsls	r3, r3, #4
 8008d8a:	1a9b      	subs	r3, r3, r2
 8008d8c:	009b      	lsls	r3, r3, #2
 8008d8e:	461c      	mov	r4, r3
 8008d90:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008d94:	461a      	mov	r2, r3
 8008d96:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008d9a:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4413      	add	r3, r2
 8008da2:	3b20      	subs	r3, #32
 8008da4:	781b      	ldrb	r3, [r3, #0]
 8008da6:	461a      	mov	r2, r3
 8008da8:	4613      	mov	r3, r2
 8008daa:	00db      	lsls	r3, r3, #3
 8008dac:	1a9b      	subs	r3, r3, r2
 8008dae:	005b      	lsls	r3, r3, #1
 8008db0:	3340      	adds	r3, #64	; 0x40
 8008db2:	461d      	mov	r5, r3
 8008db4:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008db8:	461a      	mov	r2, r3
 8008dba:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008dbe:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4413      	add	r3, r2
 8008dc6:	3b20      	subs	r3, #32
 8008dc8:	781b      	ldrb	r3, [r3, #0]
 8008dca:	1c5a      	adds	r2, r3, #1
 8008dcc:	4613      	mov	r3, r2
 8008dce:	00db      	lsls	r3, r3, #3
 8008dd0:	1a9b      	subs	r3, r3, r2
 8008dd2:	005b      	lsls	r3, r3, #1
 8008dd4:	3340      	adds	r3, #64	; 0x40
 8008dd6:	9300      	str	r3, [sp, #0]
 8008dd8:	462b      	mov	r3, r5
 8008dda:	4622      	mov	r2, r4
 8008ddc:	f002 f8ac 	bl	800af38 <map>
 8008de0:	4603      	mov	r3, r0
 8008de2:	b29a      	uxth	r2, r3
 8008de4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8008de8:	4619      	mov	r1, r3
 8008dea:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008dee:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	005b      	lsls	r3, r3, #1
 8008df6:	440b      	add	r3, r1
 8008df8:	f823 2cd8 	strh.w	r2, [r3, #-216]
         for(int i = 0; i < 800; i++)
 8008dfc:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008e00:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	3301      	adds	r3, #1
 8008e08:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008e0c:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8008e10:	6013      	str	r3, [r2, #0]
 8008e12:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008e16:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8008e20:	f6ff af3f 	blt.w	8008ca2 <StartChartTask+0x1562>
            }
         }
         osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8008e24:	4bc9      	ldr	r3, [pc, #804]	; (800914c <StartChartTask+0x1a0c>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f04f 31ff 	mov.w	r1, #4294967295
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f00c ffc7 	bl	8015dc0 <osMutexAcquire>
         osMutexAcquire(E_PAPIERMutexHandle, osWaitForever);
 8008e32:	4bc7      	ldr	r3, [pc, #796]	; (8009150 <StartChartTask+0x1a10>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f04f 31ff 	mov.w	r1, #4294967295
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f00c ffc0 	bl	8015dc0 <osMutexAcquire>
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8008e40:	4bc4      	ldr	r3, [pc, #784]	; (8009154 <StartChartTask+0x1a14>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f04f 31ff 	mov.w	r1, #4294967295
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f00c ffb9 	bl	8015dc0 <osMutexAcquire>
         char Temp[10];
         uint16_t TempDifferencje = _Max - _Min;
 8008e4e:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008e52:	f103 033a 	add.w	r3, r3, #58	; 0x3a
 8008e56:	881a      	ldrh	r2, [r3, #0]
 8008e58:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008e5c:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8008e60:	881b      	ldrh	r3, [r3, #0]
 8008e62:	1ad3      	subs	r3, r2, r3
 8008e64:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008e68:	f102 0212 	add.w	r2, r2, #18
 8008e6c:	8013      	strh	r3, [r2, #0]
         sprintf(Temp, "%d", (_Min + TempDifferencje / 4));
 8008e6e:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008e72:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8008e76:	881b      	ldrh	r3, [r3, #0]
 8008e78:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008e7c:	f102 0212 	add.w	r2, r2, #18
 8008e80:	8812      	ldrh	r2, [r2, #0]
 8008e82:	0892      	lsrs	r2, r2, #2
 8008e84:	b292      	uxth	r2, r2
 8008e86:	441a      	add	r2, r3
 8008e88:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008e8c:	3b34      	subs	r3, #52	; 0x34
 8008e8e:	49b2      	ldr	r1, [pc, #712]	; (8009158 <StartChartTask+0x1a18>)
 8008e90:	4618      	mov	r0, r3
 8008e92:	f003 fe81 	bl	800cb98 <sprintf_>
         GFX_DrawString(0, 218, Temp, BLACK, 1, E_PAPIER);
 8008e96:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008e9a:	3a34      	subs	r2, #52	; 0x34
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	9301      	str	r3, [sp, #4]
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	9300      	str	r3, [sp, #0]
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	21da      	movs	r1, #218	; 0xda
 8008ea8:	2000      	movs	r0, #0
 8008eaa:	f7f8 fa03 	bl	80012b4 <GFX_DrawString>
         sprintf(Temp, "%d", (_Min + TempDifferencje / 2));
 8008eae:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008eb2:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8008eb6:	881b      	ldrh	r3, [r3, #0]
 8008eb8:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008ebc:	f102 0212 	add.w	r2, r2, #18
 8008ec0:	8812      	ldrh	r2, [r2, #0]
 8008ec2:	0852      	lsrs	r2, r2, #1
 8008ec4:	b292      	uxth	r2, r2
 8008ec6:	441a      	add	r2, r3
 8008ec8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008ecc:	3b34      	subs	r3, #52	; 0x34
 8008ece:	49a2      	ldr	r1, [pc, #648]	; (8009158 <StartChartTask+0x1a18>)
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f003 fe61 	bl	800cb98 <sprintf_>
         GFX_DrawString(0, 160, Temp, BLACK, 1, E_PAPIER);
 8008ed6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008eda:	3a34      	subs	r2, #52	; 0x34
 8008edc:	2301      	movs	r3, #1
 8008ede:	9301      	str	r3, [sp, #4]
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	9300      	str	r3, [sp, #0]
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	21a0      	movs	r1, #160	; 0xa0
 8008ee8:	2000      	movs	r0, #0
 8008eea:	f7f8 f9e3 	bl	80012b4 <GFX_DrawString>
         sprintf(Temp, "%d", (_Max - TempDifferencje / 4));
 8008eee:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008ef2:	f103 033a 	add.w	r3, r3, #58	; 0x3a
 8008ef6:	881b      	ldrh	r3, [r3, #0]
 8008ef8:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008efc:	f102 0212 	add.w	r2, r2, #18
 8008f00:	8812      	ldrh	r2, [r2, #0]
 8008f02:	0892      	lsrs	r2, r2, #2
 8008f04:	b292      	uxth	r2, r2
 8008f06:	1a9a      	subs	r2, r3, r2
 8008f08:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008f0c:	3b34      	subs	r3, #52	; 0x34
 8008f0e:	4992      	ldr	r1, [pc, #584]	; (8009158 <StartChartTask+0x1a18>)
 8008f10:	4618      	mov	r0, r3
 8008f12:	f003 fe41 	bl	800cb98 <sprintf_>
         GFX_DrawString(0, 103, Temp, BLACK, 1, E_PAPIER);
 8008f16:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008f1a:	3a34      	subs	r2, #52	; 0x34
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	9301      	str	r3, [sp, #4]
 8008f20:	2301      	movs	r3, #1
 8008f22:	9300      	str	r3, [sp, #0]
 8008f24:	2300      	movs	r3, #0
 8008f26:	2167      	movs	r1, #103	; 0x67
 8008f28:	2000      	movs	r0, #0
 8008f2a:	f7f8 f9c3 	bl	80012b4 <GFX_DrawString>
         sprintf(Temp, "%d", _Min);
 8008f2e:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008f32:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8008f36:	881a      	ldrh	r2, [r3, #0]
 8008f38:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008f3c:	3b34      	subs	r3, #52	; 0x34
 8008f3e:	4986      	ldr	r1, [pc, #536]	; (8009158 <StartChartTask+0x1a18>)
 8008f40:	4618      	mov	r0, r3
 8008f42:	f003 fe29 	bl	800cb98 <sprintf_>
         GFX_DrawString(0, 276, Temp, BLACK, 1, E_PAPIER);
 8008f46:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008f4a:	3a34      	subs	r2, #52	; 0x34
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	9301      	str	r3, [sp, #4]
 8008f50:	2301      	movs	r3, #1
 8008f52:	9300      	str	r3, [sp, #0]
 8008f54:	2300      	movs	r3, #0
 8008f56:	f44f 718a 	mov.w	r1, #276	; 0x114
 8008f5a:	2000      	movs	r0, #0
 8008f5c:	f7f8 f9aa 	bl	80012b4 <GFX_DrawString>
         sprintf(Temp, "%d", _Max);
 8008f60:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008f64:	f103 033a 	add.w	r3, r3, #58	; 0x3a
 8008f68:	881a      	ldrh	r2, [r3, #0]
 8008f6a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008f6e:	3b34      	subs	r3, #52	; 0x34
 8008f70:	4979      	ldr	r1, [pc, #484]	; (8009158 <StartChartTask+0x1a18>)
 8008f72:	4618      	mov	r0, r3
 8008f74:	f003 fe10 	bl	800cb98 <sprintf_>
         GFX_DrawString(0, 45, Temp, BLACK, 1, E_PAPIER);
 8008f78:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008f7c:	3a34      	subs	r2, #52	; 0x34
 8008f7e:	2301      	movs	r3, #1
 8008f80:	9301      	str	r3, [sp, #4]
 8008f82:	2301      	movs	r3, #1
 8008f84:	9300      	str	r3, [sp, #0]
 8008f86:	2300      	movs	r3, #0
 8008f88:	212d      	movs	r1, #45	; 0x2d
 8008f8a:	2000      	movs	r0, #0
 8008f8c:	f7f8 f992 	bl	80012b4 <GFX_DrawString>
         if(X_Axis[0] != 0xffff && X_Axis[1] != 0xffff)
 8008f90:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8008f94:	f833 3cd8 	ldrh.w	r3, [r3, #-216]
 8008f98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d024      	beq.n	8008fea <StartChartTask+0x18aa>
 8008fa0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8008fa4:	f833 3cd6 	ldrh.w	r3, [r3, #-214]
 8008fa8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d01c      	beq.n	8008fea <StartChartTask+0x18aa>
         {
            GFX_DrawLine(X_Axis[0], Y_Axis[0], X_Axis[1], Y_Axis[1], BLACK, E_PAPIER);
 8008fb0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8008fb4:	f833 3cd8 	ldrh.w	r3, [r3, #-216]
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008fbe:	f6a3 2398 	subw	r3, r3, #2712	; 0xa98
 8008fc2:	881b      	ldrh	r3, [r3, #0]
 8008fc4:	4619      	mov	r1, r3
 8008fc6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8008fca:	f833 3cd6 	ldrh.w	r3, [r3, #-214]
 8008fce:	461a      	mov	r2, r3
 8008fd0:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008fd4:	f6a3 2398 	subw	r3, r3, #2712	; 0xa98
 8008fd8:	885b      	ldrh	r3, [r3, #2]
 8008fda:	461c      	mov	r4, r3
 8008fdc:	2301      	movs	r3, #1
 8008fde:	9301      	str	r3, [sp, #4]
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	9300      	str	r3, [sp, #0]
 8008fe4:	4623      	mov	r3, r4
 8008fe6:	f7f8 fa85 	bl	80014f4 <GFX_DrawLine>
         }
         for(int i = 1; i < 800; i++)
 8008fea:	2301      	movs	r3, #1
 8008fec:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008ff0:	f102 0220 	add.w	r2, r2, #32
 8008ff4:	6013      	str	r3, [r2, #0]
 8008ff6:	e065      	b.n	80090c4 <StartChartTask+0x1984>
         {
            if(X_Axis[i + 1] != 0xffff && X_Axis[i] != 0xffff)
 8008ff8:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008ffc:	f103 0320 	add.w	r3, r3, #32
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	3301      	adds	r3, #1
 8009004:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8009008:	005b      	lsls	r3, r3, #1
 800900a:	4413      	add	r3, r2
 800900c:	f833 3cd8 	ldrh.w	r3, [r3, #-216]
 8009010:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009014:	4293      	cmp	r3, r2
 8009016:	d04a      	beq.n	80090ae <StartChartTask+0x196e>
 8009018:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800901c:	461a      	mov	r2, r3
 800901e:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8009022:	f103 0320 	add.w	r3, r3, #32
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	005b      	lsls	r3, r3, #1
 800902a:	4413      	add	r3, r2
 800902c:	f833 3cd8 	ldrh.w	r3, [r3, #-216]
 8009030:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009034:	4293      	cmp	r3, r2
 8009036:	d03a      	beq.n	80090ae <StartChartTask+0x196e>
            {
               GFX_DrawLine(X_Axis[i], Y_Axis[i], X_Axis[i + 1], Y_Axis[i + 1], BLACK, E_PAPIER);
 8009038:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800903c:	461a      	mov	r2, r3
 800903e:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8009042:	f103 0320 	add.w	r3, r3, #32
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	005b      	lsls	r3, r3, #1
 800904a:	4413      	add	r3, r2
 800904c:	f833 3cd8 	ldrh.w	r3, [r3, #-216]
 8009050:	4618      	mov	r0, r3
 8009052:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8009056:	f6a3 2398 	subw	r3, r3, #2712	; 0xa98
 800905a:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 800905e:	f102 0220 	add.w	r2, r2, #32
 8009062:	6812      	ldr	r2, [r2, #0]
 8009064:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8009068:	4619      	mov	r1, r3
 800906a:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 800906e:	f103 0320 	add.w	r3, r3, #32
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	3301      	adds	r3, #1
 8009076:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800907a:	005b      	lsls	r3, r3, #1
 800907c:	4413      	add	r3, r2
 800907e:	f833 3cd8 	ldrh.w	r3, [r3, #-216]
 8009082:	461c      	mov	r4, r3
 8009084:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8009088:	f103 0320 	add.w	r3, r3, #32
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	1c5a      	adds	r2, r3, #1
 8009090:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8009094:	f6a3 2398 	subw	r3, r3, #2712	; 0xa98
 8009098:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800909c:	461a      	mov	r2, r3
 800909e:	2301      	movs	r3, #1
 80090a0:	9301      	str	r3, [sp, #4]
 80090a2:	2300      	movs	r3, #0
 80090a4:	9300      	str	r3, [sp, #0]
 80090a6:	4613      	mov	r3, r2
 80090a8:	4622      	mov	r2, r4
 80090aa:	f7f8 fa23 	bl	80014f4 <GFX_DrawLine>
         for(int i = 1; i < 800; i++)
 80090ae:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80090b2:	f103 0320 	add.w	r3, r3, #32
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	3301      	adds	r3, #1
 80090ba:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 80090be:	f102 0220 	add.w	r2, r2, #32
 80090c2:	6013      	str	r3, [r2, #0]
 80090c4:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80090c8:	f103 0320 	add.w	r3, r3, #32
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80090d2:	db91      	blt.n	8008ff8 <StartChartTask+0x18b8>
            }
         }
         e_papier_display();
 80090d4:	f7fb fdbc 	bl	8004c50 <e_papier_display>
         osMutexAcquire(EncoderMutexHandle, osWaitForever);
 80090d8:	4b20      	ldr	r3, [pc, #128]	; (800915c <StartChartTask+0x1a1c>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f04f 31ff 	mov.w	r1, #4294967295
 80090e0:	4618      	mov	r0, r3
 80090e2:	f00c fe6d 	bl	8015dc0 <osMutexAcquire>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 1)
 80090e6:	e002      	b.n	80090ee <StartChartTask+0x19ae>
         {
            osDelay(100);
 80090e8:	2064      	movs	r0, #100	; 0x64
 80090ea:	f00c fc1b 	bl	8015924 <osDelay>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 1)
 80090ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80090f2:	481b      	ldr	r0, [pc, #108]	; (8009160 <StartChartTask+0x1a20>)
 80090f4:	f005 fec4 	bl	800ee80 <HAL_GPIO_ReadPin>
 80090f8:	4603      	mov	r3, r0
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	d0f4      	beq.n	80090e8 <StartChartTask+0x19a8>
         }
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 80090fe:	e002      	b.n	8009106 <StartChartTask+0x19c6>
         {
            osDelay(100);
 8009100:	2064      	movs	r0, #100	; 0x64
 8009102:	f00c fc0f 	bl	8015924 <osDelay>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8009106:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800910a:	4815      	ldr	r0, [pc, #84]	; (8009160 <StartChartTask+0x1a20>)
 800910c:	f005 feb8 	bl	800ee80 <HAL_GPIO_ReadPin>
 8009110:	4603      	mov	r3, r0
 8009112:	2b00      	cmp	r3, #0
 8009114:	d0f4      	beq.n	8009100 <StartChartTask+0x19c0>
         }
         osMutexRelease(EncoderMutexHandle);
 8009116:	4b11      	ldr	r3, [pc, #68]	; (800915c <StartChartTask+0x1a1c>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	4618      	mov	r0, r3
 800911c:	f00c fe9b 	bl	8015e56 <osMutexRelease>
         osMutexRelease(SPI1MutexHandle);
 8009120:	4b0c      	ldr	r3, [pc, #48]	; (8009154 <StartChartTask+0x1a14>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4618      	mov	r0, r3
 8009126:	f00c fe96 	bl	8015e56 <osMutexRelease>
         osMutexRelease(E_PAPIERMutexHandle);
 800912a:	4b09      	ldr	r3, [pc, #36]	; (8009150 <StartChartTask+0x1a10>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4618      	mov	r0, r3
 8009130:	f00c fe91 	bl	8015e56 <osMutexRelease>
         osMutexRelease(ScreensDcMutexHandle);
 8009134:	4b05      	ldr	r3, [pc, #20]	; (800914c <StartChartTask+0x1a0c>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4618      	mov	r0, r3
 800913a:	f00c fe8c 	bl	8015e56 <osMutexRelease>
      }
      for(int i = 0; i < 800; i++)
 800913e:	2300      	movs	r3, #0
 8009140:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8009144:	f102 021c 	add.w	r2, r2, #28
 8009148:	6013      	str	r3, [r2, #0]
 800914a:	e061      	b.n	8009210 <StartChartTask+0x1ad0>
 800914c:	200040a4 	.word	0x200040a4
 8009150:	200040b0 	.word	0x200040b0
 8009154:	200040ac 	.word	0x200040ac
 8009158:	0802051c 	.word	0x0802051c
 800915c:	200040c0 	.word	0x200040c0
 8009160:	48000400 	.word	0x48000400
      {
         ChartVariable.IntegerType[i]       = 0;
 8009164:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8009168:	f5a3 6350 	sub.w	r3, r3, #3328	; 0xd00
 800916c:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8009170:	f102 021c 	add.w	r2, r2, #28
 8009174:	6812      	ldr	r2, [r2, #0]
 8009176:	2100      	movs	r1, #0
 8009178:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
         ChartVariable.FloatingPointType[i] = 0;
 800917c:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8009180:	f5a3 6250 	sub.w	r2, r3, #3328	; 0xd00
 8009184:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8009188:	f103 031c 	add.w	r3, r3, #28
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	009b      	lsls	r3, r3, #2
 8009190:	4413      	add	r3, r2
 8009192:	f04f 0200 	mov.w	r2, #0
 8009196:	601a      	str	r2, [r3, #0]
         Y_Axis[i]                          = 0;
 8009198:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 800919c:	f6a3 2398 	subw	r3, r3, #2712	; 0xa98
 80091a0:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 80091a4:	f102 021c 	add.w	r2, r2, #28
 80091a8:	6812      	ldr	r2, [r2, #0]
 80091aa:	2100      	movs	r1, #0
 80091ac:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
         X_Axis[i]                          = 0;
 80091b0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80091b4:	461a      	mov	r2, r3
 80091b6:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80091ba:	f103 031c 	add.w	r3, r3, #28
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	005b      	lsls	r3, r3, #1
 80091c2:	4413      	add	r3, r2
 80091c4:	2200      	movs	r2, #0
 80091c6:	f823 2cd8 	strh.w	r2, [r3, #-216]
         Hour[i]                            = 0;
 80091ca:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80091ce:	461a      	mov	r2, r3
 80091d0:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80091d4:	f103 031c 	add.w	r3, r3, #28
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	4413      	add	r3, r2
 80091dc:	3b20      	subs	r3, #32
 80091de:	2200      	movs	r2, #0
 80091e0:	701a      	strb	r2, [r3, #0]
         Minute[i]                          = 0;
 80091e2:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80091e6:	f5a3 7250 	sub.w	r2, r3, #832	; 0x340
 80091ea:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80091ee:	f103 031c 	add.w	r3, r3, #28
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4413      	add	r3, r2
 80091f6:	2200      	movs	r2, #0
 80091f8:	701a      	strb	r2, [r3, #0]
      for(int i = 0; i < 800; i++)
 80091fa:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80091fe:	f103 031c 	add.w	r3, r3, #28
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	3301      	adds	r3, #1
 8009206:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 800920a:	f102 021c 	add.w	r2, r2, #28
 800920e:	6013      	str	r3, [r2, #0]
 8009210:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8009214:	f103 031c 	add.w	r3, r3, #28
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800921e:	dba1      	blt.n	8009164 <StartChartTask+0x1a24>
      }
      FramDataChartExistFlag = 0;
 8009220:	2300      	movs	r3, #0
 8009222:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8009226:	f102 023f 	add.w	r2, r2, #63	; 0x3f
 800922a:	7013      	strb	r3, [r2, #0]
      osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 800922c:	4b16      	ldr	r3, [pc, #88]	; (8009288 <StartChartTask+0x1b48>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f04f 31ff 	mov.w	r1, #4294967295
 8009234:	4618      	mov	r0, r3
 8009236:	f00c fdc3 	bl	8015dc0 <osMutexAcquire>
      osMutexAcquire(E_PAPIERMutexHandle, osWaitForever);
 800923a:	4b14      	ldr	r3, [pc, #80]	; (800928c <StartChartTask+0x1b4c>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f04f 31ff 	mov.w	r1, #4294967295
 8009242:	4618      	mov	r0, r3
 8009244:	f00c fdbc 	bl	8015dc0 <osMutexAcquire>
      osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8009248:	4b11      	ldr	r3, [pc, #68]	; (8009290 <StartChartTask+0x1b50>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f04f 31ff 	mov.w	r1, #4294967295
 8009250:	4618      	mov	r0, r3
 8009252:	f00c fdb5 	bl	8015dc0 <osMutexAcquire>
      e_papier_clear();
 8009256:	f7fb fd6d 	bl	8004d34 <e_papier_clear>
      e_papier_display();
 800925a:	f7fb fcf9 	bl	8004c50 <e_papier_display>
      osMutexRelease(SPI1MutexHandle);
 800925e:	4b0c      	ldr	r3, [pc, #48]	; (8009290 <StartChartTask+0x1b50>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	4618      	mov	r0, r3
 8009264:	f00c fdf7 	bl	8015e56 <osMutexRelease>
      osMutexRelease(E_PAPIERMutexHandle);
 8009268:	4b08      	ldr	r3, [pc, #32]	; (800928c <StartChartTask+0x1b4c>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	4618      	mov	r0, r3
 800926e:	f00c fdf2 	bl	8015e56 <osMutexRelease>
      osMutexRelease(ScreensDcMutexHandle);
 8009272:	4b05      	ldr	r3, [pc, #20]	; (8009288 <StartChartTask+0x1b48>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4618      	mov	r0, r3
 8009278:	f00c fded 	bl	8015e56 <osMutexRelease>
      osDelay(1);
 800927c:	2001      	movs	r0, #1
 800927e:	f00c fb51 	bl	8015924 <osDelay>
      osMessageQueueGet(ChartQueueHandle, &Cda, 0, osWaitForever);
 8009282:	f7fe babd 	b.w	8007800 <StartChartTask+0xc0>
 8009286:	bf00      	nop
 8009288:	200040a4 	.word	0x200040a4
 800928c:	200040b0 	.word	0x200040b0
 8009290:	200040ac 	.word	0x200040ac

08009294 <StartRfpMessageTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartRfpMessageTask */
void StartRfpMessageTask(void *argument)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b084      	sub	sp, #16
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN StartRfpMessageTask */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 800929c:	4b20      	ldr	r3, [pc, #128]	; (8009320 <StartRfpMessageTask+0x8c>)
 800929e:	6818      	ldr	r0, [r3, #0]
 80092a0:	f04f 33ff 	mov.w	r3, #4294967295
 80092a4:	2202      	movs	r2, #2
 80092a6:	2102      	movs	r1, #2
 80092a8:	f00c fc9e 	bl	8015be8 <osEventFlagsWait>
   RfpMessage_TypeDef RfpMessage = { 0 };
 80092ac:	2300      	movs	r3, #0
 80092ae:	60fb      	str	r3, [r7, #12]
   /* Infinite loop */
   for(;;)
   {
      osMessageQueueGet(RfpMessageQueueHandle, &RfpMessage, 0, osWaitForever);
 80092b0:	4b1c      	ldr	r3, [pc, #112]	; (8009324 <StartRfpMessageTask+0x90>)
 80092b2:	6818      	ldr	r0, [r3, #0]
 80092b4:	f107 010c 	add.w	r1, r7, #12
 80092b8:	f04f 33ff 	mov.w	r3, #4294967295
 80092bc:	2200      	movs	r2, #0
 80092be:	f00c fedb 	bl	8016078 <osMessageQueueGet>
      while(Rfp.State != RFP_STATE_IDLE)
 80092c2:	e002      	b.n	80092ca <StartRfpMessageTask+0x36>
      {
         osDelay(100);
 80092c4:	2064      	movs	r0, #100	; 0x64
 80092c6:	f00c fb2d 	bl	8015924 <osDelay>
      while(Rfp.State != RFP_STATE_IDLE)
 80092ca:	4b17      	ldr	r3, [pc, #92]	; (8009328 <StartRfpMessageTask+0x94>)
 80092cc:	781b      	ldrb	r3, [r3, #0]
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	d1f8      	bne.n	80092c4 <StartRfpMessageTask+0x30>
      }
      if(RfpMessage.AdditionalData == 0)
 80092d2:	89fb      	ldrh	r3, [r7, #14]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d108      	bne.n	80092ea <StartRfpMessageTask+0x56>
      {
         RFP_SendData(RFP_ODWS, RfpMessage.MessageType, &RfpMessage.Data, 1);
 80092d8:	7b39      	ldrb	r1, [r7, #12]
 80092da:	f107 030c 	add.w	r3, r7, #12
 80092de:	1c5a      	adds	r2, r3, #1
 80092e0:	2301      	movs	r3, #1
 80092e2:	2002      	movs	r0, #2
 80092e4:	f003 fd2e 	bl	800cd44 <RFP_SendData>
 80092e8:	e011      	b.n	800930e <StartRfpMessageTask+0x7a>
      }
      else
      {
         uint8_t Temp[3];
         Temp[0] = RfpMessage.Data;
 80092ea:	7b7b      	ldrb	r3, [r7, #13]
 80092ec:	723b      	strb	r3, [r7, #8]
         Temp[1] = ((RfpMessage.AdditionalData & 0xff) >> 8);
 80092ee:	2300      	movs	r3, #0
 80092f0:	727b      	strb	r3, [r7, #9]
         Temp[2] = (RfpMessage.AdditionalData & 0xff);
 80092f2:	89fb      	ldrh	r3, [r7, #14]
 80092f4:	b2db      	uxtb	r3, r3
 80092f6:	72bb      	strb	r3, [r7, #10]
         RFP_SendData(RFP_ODWS, RfpMessage.MessageType, Temp, 3);
 80092f8:	7b39      	ldrb	r1, [r7, #12]
 80092fa:	f107 0208 	add.w	r2, r7, #8
 80092fe:	2303      	movs	r3, #3
 8009300:	2002      	movs	r0, #2
 8009302:	f003 fd1f 	bl	800cd44 <RFP_SendData>
      }
      while(Rfp.State != RFP_STATE_IDLE)
 8009306:	e002      	b.n	800930e <StartRfpMessageTask+0x7a>
      {
         osDelay(100);
 8009308:	2064      	movs	r0, #100	; 0x64
 800930a:	f00c fb0b 	bl	8015924 <osDelay>
      while(Rfp.State != RFP_STATE_IDLE)
 800930e:	4b06      	ldr	r3, [pc, #24]	; (8009328 <StartRfpMessageTask+0x94>)
 8009310:	781b      	ldrb	r3, [r3, #0]
 8009312:	2b01      	cmp	r3, #1
 8009314:	d1f8      	bne.n	8009308 <StartRfpMessageTask+0x74>
      }
      osDelay(1);
 8009316:	2001      	movs	r0, #1
 8009318:	f00c fb04 	bl	8015924 <osDelay>
      osMessageQueueGet(RfpMessageQueueHandle, &RfpMessage, 0, osWaitForever);
 800931c:	e7c8      	b.n	80092b0 <StartRfpMessageTask+0x1c>
 800931e:	bf00      	nop
 8009320:	200040c4 	.word	0x200040c4
 8009324:	20004088 	.word	0x20004088
 8009328:	20003f60 	.word	0x20003f60

0800932c <StartSunriseAndSunsetTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartSunriseAndSunsetTask */
void StartSunriseAndSunsetTask(void *argument)
{
 800932c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009330:	b08e      	sub	sp, #56	; 0x38
 8009332:	af00      	add	r7, sp, #0
 8009334:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN StartSunriseAndSunsetTask */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 8009336:	4b3e      	ldr	r3, [pc, #248]	; (8009430 <StartSunriseAndSunsetTask+0x104>)
 8009338:	6818      	ldr	r0, [r3, #0]
 800933a:	f04f 33ff 	mov.w	r3, #4294967295
 800933e:	2202      	movs	r2, #2
 8009340:	2102      	movs	r1, #2
 8009342:	f00c fc51 	bl	8015be8 <osEventFlagsWait>
   RTC_TimeTypeDef RtcTime = { 0 };
 8009346:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800934a:	2200      	movs	r2, #0
 800934c:	601a      	str	r2, [r3, #0]
 800934e:	605a      	str	r2, [r3, #4]
 8009350:	609a      	str	r2, [r3, #8]
 8009352:	60da      	str	r2, [r3, #12]
 8009354:	611a      	str	r2, [r3, #16]
   RTC_DateTypeDef RtcDate = { 0 };
 8009356:	2300      	movs	r3, #0
 8009358:	623b      	str	r3, [r7, #32]
   Sunrise_TypeDef Sunrise = { 0 };
 800935a:	f107 0308 	add.w	r3, r7, #8
 800935e:	2200      	movs	r2, #0
 8009360:	601a      	str	r2, [r3, #0]
 8009362:	605a      	str	r2, [r3, #4]
 8009364:	609a      	str	r2, [r3, #8]
 8009366:	60da      	str	r2, [r3, #12]
 8009368:	611a      	str	r2, [r3, #16]
 800936a:	615a      	str	r2, [r3, #20]
   /* Infinite loop */
   for(;;)
   {
      osEventFlagsWait(C3V1FlagsHandle, NEW_DAY_FLAG, osFlagsWaitAny, osWaitForever);
 800936c:	4b30      	ldr	r3, [pc, #192]	; (8009430 <StartSunriseAndSunsetTask+0x104>)
 800936e:	6818      	ldr	r0, [r3, #0]
 8009370:	f04f 33ff 	mov.w	r3, #4294967295
 8009374:	2200      	movs	r2, #0
 8009376:	2180      	movs	r1, #128	; 0x80
 8009378:	f00c fc36 	bl	8015be8 <osEventFlagsWait>
      osMutexAcquire(RTCMutexHandle, osWaitForever);
 800937c:	4b2d      	ldr	r3, [pc, #180]	; (8009434 <StartSunriseAndSunsetTask+0x108>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f04f 31ff 	mov.w	r1, #4294967295
 8009384:	4618      	mov	r0, r3
 8009386:	f00c fd1b 	bl	8015dc0 <osMutexAcquire>
      HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 800938a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800938e:	2200      	movs	r2, #0
 8009390:	4619      	mov	r1, r3
 8009392:	4829      	ldr	r0, [pc, #164]	; (8009438 <StartSunriseAndSunsetTask+0x10c>)
 8009394:	f007 fce2 	bl	8010d5c <HAL_RTC_GetTime>
      HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 8009398:	f107 0320 	add.w	r3, r7, #32
 800939c:	2200      	movs	r2, #0
 800939e:	4619      	mov	r1, r3
 80093a0:	4825      	ldr	r0, [pc, #148]	; (8009438 <StartSunriseAndSunsetTask+0x10c>)
 80093a2:	f007 fdc5 	bl	8010f30 <HAL_RTC_GetDate>
      osMutexRelease(RTCMutexHandle);
 80093a6:	4b23      	ldr	r3, [pc, #140]	; (8009434 <StartSunriseAndSunsetTask+0x108>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	4618      	mov	r0, r3
 80093ac:	f00c fd53 	bl	8015e56 <osMutexRelease>
      Wschod(RtcDate.Year + 2000, RtcDate.Month, RtcDate.Date, &Sunrise.Sunrise, &Sunrise.Sunup, &Sunrise.Sunset);
 80093b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80093b4:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80093b8:	4618      	mov	r0, r3
 80093ba:	f7f7 f8cb 	bl	8000554 <__aeabi_i2d>
 80093be:	4604      	mov	r4, r0
 80093c0:	460d      	mov	r5, r1
 80093c2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80093c6:	4618      	mov	r0, r3
 80093c8:	f7f7 f8b4 	bl	8000534 <__aeabi_ui2d>
 80093cc:	4680      	mov	r8, r0
 80093ce:	4689      	mov	r9, r1
 80093d0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80093d4:	4618      	mov	r0, r3
 80093d6:	f7f7 f8ad 	bl	8000534 <__aeabi_ui2d>
 80093da:	4682      	mov	sl, r0
 80093dc:	468b      	mov	fp, r1
 80093de:	f107 0308 	add.w	r3, r7, #8
 80093e2:	f103 0208 	add.w	r2, r3, #8
 80093e6:	f107 0308 	add.w	r3, r7, #8
 80093ea:	f103 0110 	add.w	r1, r3, #16
 80093ee:	f107 0308 	add.w	r3, r7, #8
 80093f2:	4618      	mov	r0, r3
 80093f4:	ec4b ab12 	vmov	d2, sl, fp
 80093f8:	ec49 8b11 	vmov	d1, r8, r9
 80093fc:	ec45 4b10 	vmov	d0, r4, r5
 8009400:	f001 fa42 	bl	800a888 <Wschod>
      osMessageQueuePut(SunriseQueueHandle, &Sunrise, 0, osWaitForever);
 8009404:	4b0d      	ldr	r3, [pc, #52]	; (800943c <StartSunriseAndSunsetTask+0x110>)
 8009406:	6818      	ldr	r0, [r3, #0]
 8009408:	f107 0108 	add.w	r1, r7, #8
 800940c:	f04f 33ff 	mov.w	r3, #4294967295
 8009410:	2200      	movs	r2, #0
 8009412:	f00c fdd1 	bl	8015fb8 <osMessageQueuePut>
      osMessageQueuePut(WS2812QueueHandle, &Sunrise, 0, osWaitForever);
 8009416:	4b0a      	ldr	r3, [pc, #40]	; (8009440 <StartSunriseAndSunsetTask+0x114>)
 8009418:	6818      	ldr	r0, [r3, #0]
 800941a:	f107 0108 	add.w	r1, r7, #8
 800941e:	f04f 33ff 	mov.w	r3, #4294967295
 8009422:	2200      	movs	r2, #0
 8009424:	f00c fdc8 	bl	8015fb8 <osMessageQueuePut>
      osDelay(1);
 8009428:	2001      	movs	r0, #1
 800942a:	f00c fa7b 	bl	8015924 <osDelay>
      osEventFlagsWait(C3V1FlagsHandle, NEW_DAY_FLAG, osFlagsWaitAny, osWaitForever);
 800942e:	e79d      	b.n	800936c <StartSunriseAndSunsetTask+0x40>
 8009430:	200040c4 	.word	0x200040c4
 8009434:	200040bc 	.word	0x200040bc
 8009438:	200041d4 	.word	0x200041d4
 800943c:	20004090 	.word	0x20004090
 8009440:	20004094 	.word	0x20004094
 8009444:	00000000 	.word	0x00000000

08009448 <StartWS2812Task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartWS2812Task */
void StartWS2812Task(void *argument)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b0a0      	sub	sp, #128	; 0x80
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN StartWS2812Task */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 8009450:	4b6b      	ldr	r3, [pc, #428]	; (8009600 <StartWS2812Task+0x1b8>)
 8009452:	6818      	ldr	r0, [r3, #0]
 8009454:	f04f 33ff 	mov.w	r3, #4294967295
 8009458:	2202      	movs	r2, #2
 800945a:	2102      	movs	r1, #2
 800945c:	f00c fbc4 	bl	8015be8 <osEventFlagsWait>
   Sunrise_TypeDef Sunrise = { 0 };
 8009460:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009464:	2200      	movs	r2, #0
 8009466:	601a      	str	r2, [r3, #0]
 8009468:	605a      	str	r2, [r3, #4]
 800946a:	609a      	str	r2, [r3, #8]
 800946c:	60da      	str	r2, [r3, #12]
 800946e:	611a      	str	r2, [r3, #16]
 8009470:	615a      	str	r2, [r3, #20]
   MV_TypeDef Mv           = { 0 };
 8009472:	f107 0320 	add.w	r3, r7, #32
 8009476:	2230      	movs	r2, #48	; 0x30
 8009478:	2100      	movs	r1, #0
 800947a:	4618      	mov	r0, r3
 800947c:	f010 fa88 	bl	8019990 <memset>
   RTC_TimeTypeDef RtcTime = { 0 };
 8009480:	f107 030c 	add.w	r3, r7, #12
 8009484:	2200      	movs	r2, #0
 8009486:	601a      	str	r2, [r3, #0]
 8009488:	605a      	str	r2, [r3, #4]
 800948a:	609a      	str	r2, [r3, #8]
 800948c:	60da      	str	r2, [r3, #12]
 800948e:	611a      	str	r2, [r3, #16]
   RTC_DateTypeDef RtcDate = { 0 };
 8009490:	2300      	movs	r3, #0
 8009492:	60bb      	str	r3, [r7, #8]
   /* Infinite loop */
   for(;;)
   {
      osMessageQueueGet(WS2812bMeasurmentQueueHandle, &Mv, 0, 0);
 8009494:	4b5b      	ldr	r3, [pc, #364]	; (8009604 <StartWS2812Task+0x1bc>)
 8009496:	6818      	ldr	r0, [r3, #0]
 8009498:	f107 0120 	add.w	r1, r7, #32
 800949c:	2300      	movs	r3, #0
 800949e:	2200      	movs	r2, #0
 80094a0:	f00c fdea 	bl	8016078 <osMessageQueueGet>
      osMessageQueueGet(WS2812QueueHandle, &Sunrise, 0, 0);
 80094a4:	4b58      	ldr	r3, [pc, #352]	; (8009608 <StartWS2812Task+0x1c0>)
 80094a6:	6818      	ldr	r0, [r3, #0]
 80094a8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80094ac:	2300      	movs	r3, #0
 80094ae:	2200      	movs	r2, #0
 80094b0:	f00c fde2 	bl	8016078 <osMessageQueueGet>
      osMutexAcquire(RTCMutexHandle, osWaitForever);
 80094b4:	4b55      	ldr	r3, [pc, #340]	; (800960c <StartWS2812Task+0x1c4>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f04f 31ff 	mov.w	r1, #4294967295
 80094bc:	4618      	mov	r0, r3
 80094be:	f00c fc7f 	bl	8015dc0 <osMutexAcquire>
      HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 80094c2:	f107 030c 	add.w	r3, r7, #12
 80094c6:	2200      	movs	r2, #0
 80094c8:	4619      	mov	r1, r3
 80094ca:	4851      	ldr	r0, [pc, #324]	; (8009610 <StartWS2812Task+0x1c8>)
 80094cc:	f007 fc46 	bl	8010d5c <HAL_RTC_GetTime>
      HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 80094d0:	f107 0308 	add.w	r3, r7, #8
 80094d4:	2200      	movs	r2, #0
 80094d6:	4619      	mov	r1, r3
 80094d8:	484d      	ldr	r0, [pc, #308]	; (8009610 <StartWS2812Task+0x1c8>)
 80094da:	f007 fd29 	bl	8010f30 <HAL_RTC_GetDate>
      osMutexRelease(RTCMutexHandle);
 80094de:	4b4b      	ldr	r3, [pc, #300]	; (800960c <StartWS2812Task+0x1c4>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	4618      	mov	r0, r3
 80094e4:	f00c fcb7 	bl	8015e56 <osMutexRelease>
      uint32_t TempTimeSunrise = (Sunrise.Sunrise + 1.0) * 3600;
 80094e8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80094ec:	f04f 0200 	mov.w	r2, #0
 80094f0:	4b48      	ldr	r3, [pc, #288]	; (8009614 <StartWS2812Task+0x1cc>)
 80094f2:	f7f6 fee3 	bl	80002bc <__adddf3>
 80094f6:	4602      	mov	r2, r0
 80094f8:	460b      	mov	r3, r1
 80094fa:	4610      	mov	r0, r2
 80094fc:	4619      	mov	r1, r3
 80094fe:	a33e      	add	r3, pc, #248	; (adr r3, 80095f8 <StartWS2812Task+0x1b0>)
 8009500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009504:	f7f7 f890 	bl	8000628 <__aeabi_dmul>
 8009508:	4602      	mov	r2, r0
 800950a:	460b      	mov	r3, r1
 800950c:	4610      	mov	r0, r2
 800950e:	4619      	mov	r1, r3
 8009510:	f7f7 fb62 	bl	8000bd8 <__aeabi_d2uiz>
 8009514:	4603      	mov	r3, r0
 8009516:	67bb      	str	r3, [r7, #120]	; 0x78
      uint32_t TempTimeSunset  = (Sunrise.Sunset + 1.0) * 3600;
 8009518:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800951c:	f04f 0200 	mov.w	r2, #0
 8009520:	4b3c      	ldr	r3, [pc, #240]	; (8009614 <StartWS2812Task+0x1cc>)
 8009522:	f7f6 fecb 	bl	80002bc <__adddf3>
 8009526:	4602      	mov	r2, r0
 8009528:	460b      	mov	r3, r1
 800952a:	4610      	mov	r0, r2
 800952c:	4619      	mov	r1, r3
 800952e:	a332      	add	r3, pc, #200	; (adr r3, 80095f8 <StartWS2812Task+0x1b0>)
 8009530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009534:	f7f7 f878 	bl	8000628 <__aeabi_dmul>
 8009538:	4602      	mov	r2, r0
 800953a:	460b      	mov	r3, r1
 800953c:	4610      	mov	r0, r2
 800953e:	4619      	mov	r1, r3
 8009540:	f7f7 fb4a 	bl	8000bd8 <__aeabi_d2uiz>
 8009544:	4603      	mov	r3, r0
 8009546:	677b      	str	r3, [r7, #116]	; 0x74
      uint32_t ActualTime      = RtcTime.Hours * 3600 + RtcTime.Minutes * 60 + RtcTime.Seconds;
 8009548:	7b3b      	ldrb	r3, [r7, #12]
 800954a:	461a      	mov	r2, r3
 800954c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8009550:	fb03 f202 	mul.w	r2, r3, r2
 8009554:	7b7b      	ldrb	r3, [r7, #13]
 8009556:	4619      	mov	r1, r3
 8009558:	460b      	mov	r3, r1
 800955a:	011b      	lsls	r3, r3, #4
 800955c:	1a5b      	subs	r3, r3, r1
 800955e:	009b      	lsls	r3, r3, #2
 8009560:	4413      	add	r3, r2
 8009562:	7bba      	ldrb	r2, [r7, #14]
 8009564:	4413      	add	r3, r2
 8009566:	673b      	str	r3, [r7, #112]	; 0x70
      uint8_t r = 0, g = 0, b = 0;
 8009568:	2300      	movs	r3, #0
 800956a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800956e:	2300      	movs	r3, #0
 8009570:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8009574:	2300      	movs	r3, #0
 8009576:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      if(ActualTime >= TempTimeSunrise && ActualTime <= TempTimeSunset)
 800957a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800957c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800957e:	429a      	cmp	r2, r3
 8009580:	d331      	bcc.n	80095e6 <StartWS2812Task+0x19e>
 8009582:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009584:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009586:	429a      	cmp	r2, r3
 8009588:	d82d      	bhi.n	80095e6 <StartWS2812Task+0x19e>
      {
         g = 10;
 800958a:	230a      	movs	r3, #10
 800958c:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
         if(Mv.ExtPM10 > PM10_VERY_GOOD_TRESHOLD || Mv.ExtPM25 > PM25_VERY_GOOD_TRESHOLD)
 8009590:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009592:	2b14      	cmp	r3, #20
 8009594:	d802      	bhi.n	800959c <StartWS2812Task+0x154>
 8009596:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009598:	2b0d      	cmp	r3, #13
 800959a:	d902      	bls.n	80095a2 <StartWS2812Task+0x15a>
         {
            r = 10;
 800959c:	230a      	movs	r3, #10
 800959e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
         }
         if(Mv.ExtPM10 > PM10_SUFFICIENT_TRESHOLD || Mv.ExtPM25 > PM25_SUFFICIENT_TRESHOLD)
 80095a2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80095a4:	2b6e      	cmp	r3, #110	; 0x6e
 80095a6:	d802      	bhi.n	80095ae <StartWS2812Task+0x166>
 80095a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80095aa:	2b37      	cmp	r3, #55	; 0x37
 80095ac:	d905      	bls.n	80095ba <StartWS2812Task+0x172>
         {
            r = 10;
 80095ae:	230a      	movs	r3, #10
 80095b0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            g = 5;
 80095b4:	2305      	movs	r3, #5
 80095b6:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
         }
         if(Mv.ExtPM10 > PM10_VERY_BAD_TRESHOLD || Mv.ExtPM25 > PM25_VERY_BAD_TRESHOLD)
 80095ba:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80095bc:	2b96      	cmp	r3, #150	; 0x96
 80095be:	d802      	bhi.n	80095c6 <StartWS2812Task+0x17e>
 80095c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80095c2:	2b6e      	cmp	r3, #110	; 0x6e
 80095c4:	d905      	bls.n	80095d2 <StartWS2812Task+0x18a>
         {
            r = 10;
 80095c6:	230a      	movs	r3, #10
 80095c8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            g = 0;
 80095cc:	2300      	movs	r3, #0
 80095ce:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
         }
         WS2812_SetPixel(r, g, b);
 80095d2:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80095d6:	f897 107e 	ldrb.w	r1, [r7, #126]	; 0x7e
 80095da:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80095de:	4618      	mov	r0, r3
 80095e0:	f7fa fae8 	bl	8003bb4 <WS2812_SetPixel>
 80095e4:	e004      	b.n	80095f0 <StartWS2812Task+0x1a8>
      }
      else
      {
         WS2812_SetPixel(0, 0, 0);
 80095e6:	2200      	movs	r2, #0
 80095e8:	2100      	movs	r1, #0
 80095ea:	2000      	movs	r0, #0
 80095ec:	f7fa fae2 	bl	8003bb4 <WS2812_SetPixel>
      }
      osDelay(100);
 80095f0:	2064      	movs	r0, #100	; 0x64
 80095f2:	f00c f997 	bl	8015924 <osDelay>
   {
 80095f6:	e74d      	b.n	8009494 <StartWS2812Task+0x4c>
 80095f8:	00000000 	.word	0x00000000
 80095fc:	40ac2000 	.word	0x40ac2000
 8009600:	200040c4 	.word	0x200040c4
 8009604:	20004098 	.word	0x20004098
 8009608:	20004094 	.word	0x20004094
 800960c:	200040bc 	.word	0x200040bc
 8009610:	200041d4 	.word	0x200041d4
 8009614:	3ff00000 	.word	0x3ff00000

08009618 <MenuTimerCallback>:
   /* USER CODE END StartWS2812Task */
}

/* MenuTimerCallback function */
void MenuTimerCallback(void *argument)
{
 8009618:	b480      	push	{r7}
 800961a:	b083      	sub	sp, #12
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN MenuTimerCallback */

   /* USER CODE END MenuTimerCallback */
}
 8009620:	bf00      	nop
 8009622:	370c      	adds	r7, #12
 8009624:	46bd      	mov	sp, r7
 8009626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962a:	4770      	bx	lr

0800962c <Memory_ClearBuffer>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
static void Memory_ClearBuffer(PageVariable_TypeDef *Pv)
{
 800962c:	b480      	push	{r7}
 800962e:	b085      	sub	sp, #20
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
   for(int i = 0; i < 9; i++)
 8009634:	2300      	movs	r3, #0
 8009636:	60fb      	str	r3, [r7, #12]
 8009638:	e08f      	b.n	800975a <Memory_ClearBuffer+0x12e>
   {
      Pv->Record[i].ExternalHumidity    = 0;
 800963a:	6879      	ldr	r1, [r7, #4]
 800963c:	68fa      	ldr	r2, [r7, #12]
 800963e:	4613      	mov	r3, r2
 8009640:	00db      	lsls	r3, r3, #3
 8009642:	1a9b      	subs	r3, r3, r2
 8009644:	009b      	lsls	r3, r3, #2
 8009646:	440b      	add	r3, r1
 8009648:	3318      	adds	r3, #24
 800964a:	f04f 0200 	mov.w	r2, #0
 800964e:	601a      	str	r2, [r3, #0]
      Pv->Record[i].ExternalPM1         = 0;
 8009650:	6879      	ldr	r1, [r7, #4]
 8009652:	68fa      	ldr	r2, [r7, #12]
 8009654:	4613      	mov	r3, r2
 8009656:	00db      	lsls	r3, r3, #3
 8009658:	1a9b      	subs	r3, r3, r2
 800965a:	009b      	lsls	r3, r3, #2
 800965c:	440b      	add	r3, r1
 800965e:	330a      	adds	r3, #10
 8009660:	2200      	movs	r2, #0
 8009662:	801a      	strh	r2, [r3, #0]
      Pv->Record[i].ExternalPM10        = 0;
 8009664:	6879      	ldr	r1, [r7, #4]
 8009666:	68fa      	ldr	r2, [r7, #12]
 8009668:	4613      	mov	r3, r2
 800966a:	00db      	lsls	r3, r3, #3
 800966c:	1a9b      	subs	r3, r3, r2
 800966e:	009b      	lsls	r3, r3, #2
 8009670:	440b      	add	r3, r1
 8009672:	330e      	adds	r3, #14
 8009674:	2200      	movs	r2, #0
 8009676:	801a      	strh	r2, [r3, #0]
      Pv->Record[i].ExternalPM25        = 0;
 8009678:	6879      	ldr	r1, [r7, #4]
 800967a:	68fa      	ldr	r2, [r7, #12]
 800967c:	4613      	mov	r3, r2
 800967e:	00db      	lsls	r3, r3, #3
 8009680:	1a9b      	subs	r3, r3, r2
 8009682:	009b      	lsls	r3, r3, #2
 8009684:	440b      	add	r3, r1
 8009686:	330c      	adds	r3, #12
 8009688:	2200      	movs	r2, #0
 800968a:	801a      	strh	r2, [r3, #0]
      Pv->Record[i].ExternalTemperature = 0;
 800968c:	6879      	ldr	r1, [r7, #4]
 800968e:	68fa      	ldr	r2, [r7, #12]
 8009690:	4613      	mov	r3, r2
 8009692:	00db      	lsls	r3, r3, #3
 8009694:	1a9b      	subs	r3, r3, r2
 8009696:	009b      	lsls	r3, r3, #2
 8009698:	440b      	add	r3, r1
 800969a:	3314      	adds	r3, #20
 800969c:	f04f 0200 	mov.w	r2, #0
 80096a0:	601a      	str	r2, [r3, #0]
      Pv->Record[i].Hour                = 0;
 80096a2:	6879      	ldr	r1, [r7, #4]
 80096a4:	68fa      	ldr	r2, [r7, #12]
 80096a6:	4613      	mov	r3, r2
 80096a8:	00db      	lsls	r3, r3, #3
 80096aa:	1a9b      	subs	r3, r3, r2
 80096ac:	009b      	lsls	r3, r3, #2
 80096ae:	440b      	add	r3, r1
 80096b0:	3303      	adds	r3, #3
 80096b2:	2200      	movs	r2, #0
 80096b4:	701a      	strb	r2, [r3, #0]
      Pv->Record[i].InternalPM1         = 0;
 80096b6:	6879      	ldr	r1, [r7, #4]
 80096b8:	68fa      	ldr	r2, [r7, #12]
 80096ba:	4613      	mov	r3, r2
 80096bc:	00db      	lsls	r3, r3, #3
 80096be:	1a9b      	subs	r3, r3, r2
 80096c0:	009b      	lsls	r3, r3, #2
 80096c2:	440b      	add	r3, r1
 80096c4:	3304      	adds	r3, #4
 80096c6:	2200      	movs	r2, #0
 80096c8:	801a      	strh	r2, [r3, #0]
      Pv->Record[i].InternalPM10        = 0;
 80096ca:	6879      	ldr	r1, [r7, #4]
 80096cc:	68fa      	ldr	r2, [r7, #12]
 80096ce:	4613      	mov	r3, r2
 80096d0:	00db      	lsls	r3, r3, #3
 80096d2:	1a9b      	subs	r3, r3, r2
 80096d4:	009b      	lsls	r3, r3, #2
 80096d6:	440b      	add	r3, r1
 80096d8:	3308      	adds	r3, #8
 80096da:	2200      	movs	r2, #0
 80096dc:	801a      	strh	r2, [r3, #0]
      Pv->Record[i].InternalPM25        = 0;
 80096de:	6879      	ldr	r1, [r7, #4]
 80096e0:	68fa      	ldr	r2, [r7, #12]
 80096e2:	4613      	mov	r3, r2
 80096e4:	00db      	lsls	r3, r3, #3
 80096e6:	1a9b      	subs	r3, r3, r2
 80096e8:	009b      	lsls	r3, r3, #2
 80096ea:	440b      	add	r3, r1
 80096ec:	3306      	adds	r3, #6
 80096ee:	2200      	movs	r2, #0
 80096f0:	801a      	strh	r2, [r3, #0]
      Pv->Record[i].Minute              = 0;
 80096f2:	6879      	ldr	r1, [r7, #4]
 80096f4:	68fa      	ldr	r2, [r7, #12]
 80096f6:	4613      	mov	r3, r2
 80096f8:	00db      	lsls	r3, r3, #3
 80096fa:	1a9b      	subs	r3, r3, r2
 80096fc:	009b      	lsls	r3, r3, #2
 80096fe:	440b      	add	r3, r1
 8009700:	3302      	adds	r3, #2
 8009702:	2200      	movs	r2, #0
 8009704:	701a      	strb	r2, [r3, #0]
      Pv->Record[i].Pressure            = 0;
 8009706:	6879      	ldr	r1, [r7, #4]
 8009708:	68fa      	ldr	r2, [r7, #12]
 800970a:	4613      	mov	r3, r2
 800970c:	00db      	lsls	r3, r3, #3
 800970e:	1a9b      	subs	r3, r3, r2
 8009710:	009b      	lsls	r3, r3, #2
 8009712:	440b      	add	r3, r1
 8009714:	3310      	adds	r3, #16
 8009716:	f04f 0200 	mov.w	r2, #0
 800971a:	601a      	str	r2, [r3, #0]
      Pv->Record[i].Reserved            = 0;
 800971c:	6879      	ldr	r1, [r7, #4]
 800971e:	68fa      	ldr	r2, [r7, #12]
 8009720:	4613      	mov	r3, r2
 8009722:	00db      	lsls	r3, r3, #3
 8009724:	1a9b      	subs	r3, r3, r2
 8009726:	009b      	lsls	r3, r3, #2
 8009728:	440b      	add	r3, r1
 800972a:	2200      	movs	r2, #0
 800972c:	701a      	strb	r2, [r3, #0]
      Pv->Record[i].Second              = 0;
 800972e:	6879      	ldr	r1, [r7, #4]
 8009730:	68fa      	ldr	r2, [r7, #12]
 8009732:	4613      	mov	r3, r2
 8009734:	00db      	lsls	r3, r3, #3
 8009736:	1a9b      	subs	r3, r3, r2
 8009738:	009b      	lsls	r3, r3, #2
 800973a:	440b      	add	r3, r1
 800973c:	3301      	adds	r3, #1
 800973e:	2200      	movs	r2, #0
 8009740:	701a      	strb	r2, [r3, #0]
      Pv->Record[i].Reserved            = 0;
 8009742:	6879      	ldr	r1, [r7, #4]
 8009744:	68fa      	ldr	r2, [r7, #12]
 8009746:	4613      	mov	r3, r2
 8009748:	00db      	lsls	r3, r3, #3
 800974a:	1a9b      	subs	r3, r3, r2
 800974c:	009b      	lsls	r3, r3, #2
 800974e:	440b      	add	r3, r1
 8009750:	2200      	movs	r2, #0
 8009752:	701a      	strb	r2, [r3, #0]
   for(int i = 0; i < 9; i++)
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	3301      	adds	r3, #1
 8009758:	60fb      	str	r3, [r7, #12]
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	2b08      	cmp	r3, #8
 800975e:	f77f af6c 	ble.w	800963a <Memory_ClearBuffer+0xe>
   }
   Pv->PageCRC = CRC_INITIAL_VALUE;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f04f 32ff 	mov.w	r2, #4294967295
 8009768:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
}
 800976c:	bf00      	nop
 800976e:	3714      	adds	r7, #20
 8009770:	46bd      	mov	sp, r7
 8009772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009776:	4770      	bx	lr

08009778 <RFP_DataFunction>:
static void RFP_DataFunction(uint8_t *Data, uint32_t DataLength, uint32_t DataStart)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b092      	sub	sp, #72	; 0x48
 800977c:	af00      	add	r7, sp, #0
 800977e:	60f8      	str	r0, [r7, #12]
 8009780:	60b9      	str	r1, [r7, #8]
 8009782:	607a      	str	r2, [r7, #4]
   uint8_t *TempPtr;
   MV_TypeDef Mv = { 0 };
 8009784:	f107 0314 	add.w	r3, r7, #20
 8009788:	2230      	movs	r2, #48	; 0x30
 800978a:	2100      	movs	r1, #0
 800978c:	4618      	mov	r0, r3
 800978e:	f010 f8ff 	bl	8019990 <memset>
   TempPtr       = &Mv.ExtHumidity;
 8009792:	f107 0314 	add.w	r3, r7, #20
 8009796:	3304      	adds	r3, #4
 8009798:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr      = Data[DataStart];
 800979a:	68fa      	ldr	r2, [r7, #12]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	4413      	add	r3, r2
 80097a0:	781a      	ldrb	r2, [r3, #0]
 80097a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097a4:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 80097a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097a8:	3301      	adds	r3, #1
 80097aa:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 1];
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	3301      	adds	r3, #1
 80097b0:	68fa      	ldr	r2, [r7, #12]
 80097b2:	4413      	add	r3, r2
 80097b4:	781a      	ldrb	r2, [r3, #0]
 80097b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097b8:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 80097ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097bc:	3301      	adds	r3, #1
 80097be:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 2];
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	3302      	adds	r3, #2
 80097c4:	68fa      	ldr	r2, [r7, #12]
 80097c6:	4413      	add	r3, r2
 80097c8:	781a      	ldrb	r2, [r3, #0]
 80097ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097cc:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 80097ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097d0:	3301      	adds	r3, #1
 80097d2:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 3];
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	3303      	adds	r3, #3
 80097d8:	68fa      	ldr	r2, [r7, #12]
 80097da:	4413      	add	r3, r2
 80097dc:	781a      	ldrb	r2, [r3, #0]
 80097de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097e0:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 80097e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097e4:	3301      	adds	r3, #1
 80097e6:	647b      	str	r3, [r7, #68]	; 0x44
   TempPtr  = &Mv.ExtTemperature;
 80097e8:	f107 0314 	add.w	r3, r7, #20
 80097ec:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 5];
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	3305      	adds	r3, #5
 80097f2:	68fa      	ldr	r2, [r7, #12]
 80097f4:	4413      	add	r3, r2
 80097f6:	781a      	ldrb	r2, [r3, #0]
 80097f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097fa:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 80097fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097fe:	3301      	adds	r3, #1
 8009800:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 6];
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	3306      	adds	r3, #6
 8009806:	68fa      	ldr	r2, [r7, #12]
 8009808:	4413      	add	r3, r2
 800980a:	781a      	ldrb	r2, [r3, #0]
 800980c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800980e:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 8009810:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009812:	3301      	adds	r3, #1
 8009814:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 7];
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	3307      	adds	r3, #7
 800981a:	68fa      	ldr	r2, [r7, #12]
 800981c:	4413      	add	r3, r2
 800981e:	781a      	ldrb	r2, [r3, #0]
 8009820:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009822:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 8009824:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009826:	3301      	adds	r3, #1
 8009828:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr      = Data[DataStart + 8];
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	3308      	adds	r3, #8
 800982e:	68fa      	ldr	r2, [r7, #12]
 8009830:	4413      	add	r3, r2
 8009832:	781a      	ldrb	r2, [r3, #0]
 8009834:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009836:	701a      	strb	r2, [r3, #0]
   Mv.Brightness = ((Data[DataStart + 10] << 8) | Data[DataStart + 11]);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	330a      	adds	r3, #10
 800983c:	68fa      	ldr	r2, [r7, #12]
 800983e:	4413      	add	r3, r2
 8009840:	781b      	ldrb	r3, [r3, #0]
 8009842:	021b      	lsls	r3, r3, #8
 8009844:	b21a      	sxth	r2, r3
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	330b      	adds	r3, #11
 800984a:	68f9      	ldr	r1, [r7, #12]
 800984c:	440b      	add	r3, r1
 800984e:	781b      	ldrb	r3, [r3, #0]
 8009850:	b21b      	sxth	r3, r3
 8009852:	4313      	orrs	r3, r2
 8009854:	b21b      	sxth	r3, r3
 8009856:	b29b      	uxth	r3, r3
 8009858:	873b      	strh	r3, [r7, #56]	; 0x38
   TempPtr       = &Mv.BatteryVoltage;
 800985a:	f107 0314 	add.w	r3, r7, #20
 800985e:	3328      	adds	r3, #40	; 0x28
 8009860:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr      = Data[DataStart + 13];
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	330d      	adds	r3, #13
 8009866:	68fa      	ldr	r2, [r7, #12]
 8009868:	4413      	add	r3, r2
 800986a:	781a      	ldrb	r2, [r3, #0]
 800986c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800986e:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 8009870:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009872:	3301      	adds	r3, #1
 8009874:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 14];
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	330e      	adds	r3, #14
 800987a:	68fa      	ldr	r2, [r7, #12]
 800987c:	4413      	add	r3, r2
 800987e:	781a      	ldrb	r2, [r3, #0]
 8009880:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009882:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 8009884:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009886:	3301      	adds	r3, #1
 8009888:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 15];
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	330f      	adds	r3, #15
 800988e:	68fa      	ldr	r2, [r7, #12]
 8009890:	4413      	add	r3, r2
 8009892:	781a      	ldrb	r2, [r3, #0]
 8009894:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009896:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 8009898:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800989a:	3301      	adds	r3, #1
 800989c:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr        = Data[DataStart + 16];
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	3310      	adds	r3, #16
 80098a2:	68fa      	ldr	r2, [r7, #12]
 80098a4:	4413      	add	r3, r2
 80098a6:	781a      	ldrb	r2, [r3, #0]
 80098a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098aa:	701a      	strb	r2, [r3, #0]
   TempPtr         = NULL;
 80098ac:	2300      	movs	r3, #0
 80098ae:	647b      	str	r3, [r7, #68]	; 0x44
   Mv.ExtPM1       = (Data[22 + 3] | (Data[21 + 3] << 8));
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	3319      	adds	r3, #25
 80098b4:	781b      	ldrb	r3, [r3, #0]
 80098b6:	b21a      	sxth	r2, r3
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	3318      	adds	r3, #24
 80098bc:	781b      	ldrb	r3, [r3, #0]
 80098be:	021b      	lsls	r3, r3, #8
 80098c0:	b21b      	sxth	r3, r3
 80098c2:	4313      	orrs	r3, r2
 80098c4:	b21b      	sxth	r3, r3
 80098c6:	b29b      	uxth	r3, r3
 80098c8:	853b      	strh	r3, [r7, #40]	; 0x28
   Mv.ExtPM25      = (Data[28 + 3] | (Data[27 + 3] << 8));
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	331f      	adds	r3, #31
 80098ce:	781b      	ldrb	r3, [r3, #0]
 80098d0:	b21a      	sxth	r2, r3
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	331e      	adds	r3, #30
 80098d6:	781b      	ldrb	r3, [r3, #0]
 80098d8:	021b      	lsls	r3, r3, #8
 80098da:	b21b      	sxth	r3, r3
 80098dc:	4313      	orrs	r3, r2
 80098de:	b21b      	sxth	r3, r3
 80098e0:	b29b      	uxth	r3, r3
 80098e2:	857b      	strh	r3, [r7, #42]	; 0x2a
   Mv.ExtPM10      = (Data[25 + 3] | (Data[24 + 3] << 8));
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	331c      	adds	r3, #28
 80098e8:	781b      	ldrb	r3, [r3, #0]
 80098ea:	b21a      	sxth	r2, r3
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	331b      	adds	r3, #27
 80098f0:	781b      	ldrb	r3, [r3, #0]
 80098f2:	021b      	lsls	r3, r3, #8
 80098f4:	b21b      	sxth	r3, r3
 80098f6:	4313      	orrs	r3, r2
 80098f8:	b21b      	sxth	r3, r3
 80098fa:	b29b      	uxth	r3, r3
 80098fc:	85bb      	strh	r3, [r7, #44]	; 0x2c
   Mv.BatteryState = Data[DataStart + 18];
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	3312      	adds	r3, #18
 8009902:	68fa      	ldr	r2, [r7, #12]
 8009904:	4413      	add	r3, r2
 8009906:	781b      	ldrb	r3, [r3, #0]
 8009908:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
   osMessageQueuePut(ExternalMeasurmentQueueHandle, &Mv, 0, osWaitForever);
 800990c:	4b06      	ldr	r3, [pc, #24]	; (8009928 <RFP_DataFunction+0x1b0>)
 800990e:	6818      	ldr	r0, [r3, #0]
 8009910:	f107 0114 	add.w	r1, r7, #20
 8009914:	f04f 33ff 	mov.w	r3, #4294967295
 8009918:	2200      	movs	r2, #0
 800991a:	f00c fb4d 	bl	8015fb8 <osMessageQueuePut>
}
 800991e:	bf00      	nop
 8009920:	3748      	adds	r7, #72	; 0x48
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}
 8009926:	bf00      	nop
 8009928:	2000408c 	.word	0x2000408c

0800992c <rang>:
static double rang(double x)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b086      	sub	sp, #24
 8009930:	af00      	add	r7, sp, #0
 8009932:	ed87 0b00 	vstr	d0, [r7]
   double A, b;
   b = x / 360;
 8009936:	f04f 0200 	mov.w	r2, #0
 800993a:	4b22      	ldr	r3, [pc, #136]	; (80099c4 <rang+0x98>)
 800993c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009940:	f7f6 ff9c 	bl	800087c <__aeabi_ddiv>
 8009944:	4602      	mov	r2, r0
 8009946:	460b      	mov	r3, r1
 8009948:	e9c7 2302 	strd	r2, r3, [r7, #8]
   A = 360 * (b - (int)b);
 800994c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009950:	f7f7 f91a 	bl	8000b88 <__aeabi_d2iz>
 8009954:	4603      	mov	r3, r0
 8009956:	4618      	mov	r0, r3
 8009958:	f7f6 fdfc 	bl	8000554 <__aeabi_i2d>
 800995c:	4602      	mov	r2, r0
 800995e:	460b      	mov	r3, r1
 8009960:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009964:	f7f6 fca8 	bl	80002b8 <__aeabi_dsub>
 8009968:	4602      	mov	r2, r0
 800996a:	460b      	mov	r3, r1
 800996c:	4610      	mov	r0, r2
 800996e:	4619      	mov	r1, r3
 8009970:	f04f 0200 	mov.w	r2, #0
 8009974:	4b13      	ldr	r3, [pc, #76]	; (80099c4 <rang+0x98>)
 8009976:	f7f6 fe57 	bl	8000628 <__aeabi_dmul>
 800997a:	4602      	mov	r2, r0
 800997c:	460b      	mov	r3, r1
 800997e:	e9c7 2304 	strd	r2, r3, [r7, #16]
   if(A < 0)
 8009982:	f04f 0200 	mov.w	r2, #0
 8009986:	f04f 0300 	mov.w	r3, #0
 800998a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800998e:	f7f7 f8bd 	bl	8000b0c <__aeabi_dcmplt>
 8009992:	4603      	mov	r3, r0
 8009994:	2b00      	cmp	r3, #0
 8009996:	d00a      	beq.n	80099ae <rang+0x82>
      A = A + 360;
 8009998:	f04f 0200 	mov.w	r2, #0
 800999c:	4b09      	ldr	r3, [pc, #36]	; (80099c4 <rang+0x98>)
 800999e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80099a2:	f7f6 fc8b 	bl	80002bc <__adddf3>
 80099a6:	4602      	mov	r2, r0
 80099a8:	460b      	mov	r3, r1
 80099aa:	e9c7 2304 	strd	r2, r3, [r7, #16]
   return A;
 80099ae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80099b2:	ec43 2b17 	vmov	d7, r2, r3
}
 80099b6:	eeb0 0a47 	vmov.f32	s0, s14
 80099ba:	eef0 0a67 	vmov.f32	s1, s15
 80099be:	3718      	adds	r7, #24
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}
 80099c4:	40768000 	.word	0x40768000

080099c8 <faza>:
static double faza(double Rok, double Miesiac, double Dzien, double godzina, double min, double sec)
{
 80099c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099cc:	b0a1      	sub	sp, #132	; 0x84
 80099ce:	af00      	add	r7, sp, #0
 80099d0:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 80099d4:	ed87 1b08 	vstr	d1, [r7, #32]
 80099d8:	ed87 2b06 	vstr	d2, [r7, #24]
 80099dc:	ed87 3b04 	vstr	d3, [r7, #16]
 80099e0:	ed87 4b02 	vstr	d4, [r7, #8]
 80099e4:	ed87 5b00 	vstr	d5, [r7]
   if(Miesiac > 2)
 80099e8:	f04f 0200 	mov.w	r2, #0
 80099ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80099f0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80099f4:	f7f7 f8a8 	bl	8000b48 <__aeabi_dcmpgt>
 80099f8:	4603      	mov	r3, r0
 80099fa:	2b00      	cmp	r3, #0
   {
      Miesiac = Miesiac;
      Rok     = Rok;
   }
   if(Miesiac <= 2)
 80099fc:	f04f 0200 	mov.w	r2, #0
 8009a00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009a04:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009a08:	f7f7 f88a 	bl	8000b20 <__aeabi_dcmple>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d015      	beq.n	8009a3e <faza+0x76>
   {
      Miesiac = Miesiac + 12;
 8009a12:	f04f 0200 	mov.w	r2, #0
 8009a16:	4bd6      	ldr	r3, [pc, #856]	; (8009d70 <faza+0x3a8>)
 8009a18:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009a1c:	f7f6 fc4e 	bl	80002bc <__adddf3>
 8009a20:	4602      	mov	r2, r0
 8009a22:	460b      	mov	r3, r1
 8009a24:	e9c7 2308 	strd	r2, r3, [r7, #32]
      Rok     = Rok - 1;
 8009a28:	f04f 0200 	mov.w	r2, #0
 8009a2c:	4bd1      	ldr	r3, [pc, #836]	; (8009d74 <faza+0x3ac>)
 8009a2e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8009a32:	f7f6 fc41 	bl	80002b8 <__aeabi_dsub>
 8009a36:	4602      	mov	r2, r0
 8009a38:	460b      	mov	r3, r1
 8009a3a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   }
   double A, b, phi1, phi2, jdp, tzd, elm, ams, aml, asd;
   A   = (int)(Rok / 100);
 8009a3e:	f04f 0200 	mov.w	r2, #0
 8009a42:	4bcd      	ldr	r3, [pc, #820]	; (8009d78 <faza+0x3b0>)
 8009a44:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8009a48:	f7f6 ff18 	bl	800087c <__aeabi_ddiv>
 8009a4c:	4602      	mov	r2, r0
 8009a4e:	460b      	mov	r3, r1
 8009a50:	4610      	mov	r0, r2
 8009a52:	4619      	mov	r1, r3
 8009a54:	f7f7 f898 	bl	8000b88 <__aeabi_d2iz>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f7f6 fd7a 	bl	8000554 <__aeabi_i2d>
 8009a60:	4602      	mov	r2, r0
 8009a62:	460b      	mov	r3, r1
 8009a64:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
   b   = 2 - A + (int)(A / 4);
 8009a68:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8009a6c:	f04f 0000 	mov.w	r0, #0
 8009a70:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8009a74:	f7f6 fc20 	bl	80002b8 <__aeabi_dsub>
 8009a78:	4602      	mov	r2, r0
 8009a7a:	460b      	mov	r3, r1
 8009a7c:	4690      	mov	r8, r2
 8009a7e:	4699      	mov	r9, r3
 8009a80:	f04f 0200 	mov.w	r2, #0
 8009a84:	4bbd      	ldr	r3, [pc, #756]	; (8009d7c <faza+0x3b4>)
 8009a86:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8009a8a:	f7f6 fef7 	bl	800087c <__aeabi_ddiv>
 8009a8e:	4602      	mov	r2, r0
 8009a90:	460b      	mov	r3, r1
 8009a92:	4610      	mov	r0, r2
 8009a94:	4619      	mov	r1, r3
 8009a96:	f7f7 f877 	bl	8000b88 <__aeabi_d2iz>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f7f6 fd59 	bl	8000554 <__aeabi_i2d>
 8009aa2:	4602      	mov	r2, r0
 8009aa4:	460b      	mov	r3, r1
 8009aa6:	4640      	mov	r0, r8
 8009aa8:	4649      	mov	r1, r9
 8009aaa:	f7f6 fc07 	bl	80002bc <__adddf3>
 8009aae:	4602      	mov	r2, r0
 8009ab0:	460b      	mov	r3, r1
 8009ab2:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
   jdp = (int)(365.25 * (Rok + 4716)) + (int)(30.6001 * (Miesiac + 1)) + Dzien + b + ((godzina + min / 60 + sec / 3600) / 24) - 1524.5;
 8009ab6:	a392      	add	r3, pc, #584	; (adr r3, 8009d00 <faza+0x338>)
 8009ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009abc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8009ac0:	f7f6 fbfc 	bl	80002bc <__adddf3>
 8009ac4:	4602      	mov	r2, r0
 8009ac6:	460b      	mov	r3, r1
 8009ac8:	4610      	mov	r0, r2
 8009aca:	4619      	mov	r1, r3
 8009acc:	a38e      	add	r3, pc, #568	; (adr r3, 8009d08 <faza+0x340>)
 8009ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad2:	f7f6 fda9 	bl	8000628 <__aeabi_dmul>
 8009ad6:	4602      	mov	r2, r0
 8009ad8:	460b      	mov	r3, r1
 8009ada:	4610      	mov	r0, r2
 8009adc:	4619      	mov	r1, r3
 8009ade:	f7f7 f853 	bl	8000b88 <__aeabi_d2iz>
 8009ae2:	4606      	mov	r6, r0
 8009ae4:	f04f 0200 	mov.w	r2, #0
 8009ae8:	4ba2      	ldr	r3, [pc, #648]	; (8009d74 <faza+0x3ac>)
 8009aea:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009aee:	f7f6 fbe5 	bl	80002bc <__adddf3>
 8009af2:	4602      	mov	r2, r0
 8009af4:	460b      	mov	r3, r1
 8009af6:	4610      	mov	r0, r2
 8009af8:	4619      	mov	r1, r3
 8009afa:	a385      	add	r3, pc, #532	; (adr r3, 8009d10 <faza+0x348>)
 8009afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b00:	f7f6 fd92 	bl	8000628 <__aeabi_dmul>
 8009b04:	4602      	mov	r2, r0
 8009b06:	460b      	mov	r3, r1
 8009b08:	4610      	mov	r0, r2
 8009b0a:	4619      	mov	r1, r3
 8009b0c:	f7f7 f83c 	bl	8000b88 <__aeabi_d2iz>
 8009b10:	4603      	mov	r3, r0
 8009b12:	4433      	add	r3, r6
 8009b14:	4618      	mov	r0, r3
 8009b16:	f7f6 fd1d 	bl	8000554 <__aeabi_i2d>
 8009b1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009b1e:	f7f6 fbcd 	bl	80002bc <__adddf3>
 8009b22:	4602      	mov	r2, r0
 8009b24:	460b      	mov	r3, r1
 8009b26:	4610      	mov	r0, r2
 8009b28:	4619      	mov	r1, r3
 8009b2a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8009b2e:	f7f6 fbc5 	bl	80002bc <__adddf3>
 8009b32:	4602      	mov	r2, r0
 8009b34:	460b      	mov	r3, r1
 8009b36:	4690      	mov	r8, r2
 8009b38:	4699      	mov	r9, r3
 8009b3a:	f04f 0200 	mov.w	r2, #0
 8009b3e:	4b90      	ldr	r3, [pc, #576]	; (8009d80 <faza+0x3b8>)
 8009b40:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009b44:	f7f6 fe9a 	bl	800087c <__aeabi_ddiv>
 8009b48:	4602      	mov	r2, r0
 8009b4a:	460b      	mov	r3, r1
 8009b4c:	4610      	mov	r0, r2
 8009b4e:	4619      	mov	r1, r3
 8009b50:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009b54:	f7f6 fbb2 	bl	80002bc <__adddf3>
 8009b58:	4602      	mov	r2, r0
 8009b5a:	460b      	mov	r3, r1
 8009b5c:	4692      	mov	sl, r2
 8009b5e:	469b      	mov	fp, r3
 8009b60:	a36d      	add	r3, pc, #436	; (adr r3, 8009d18 <faza+0x350>)
 8009b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009b6a:	f7f6 fe87 	bl	800087c <__aeabi_ddiv>
 8009b6e:	4602      	mov	r2, r0
 8009b70:	460b      	mov	r3, r1
 8009b72:	4650      	mov	r0, sl
 8009b74:	4659      	mov	r1, fp
 8009b76:	f7f6 fba1 	bl	80002bc <__adddf3>
 8009b7a:	4602      	mov	r2, r0
 8009b7c:	460b      	mov	r3, r1
 8009b7e:	4610      	mov	r0, r2
 8009b80:	4619      	mov	r1, r3
 8009b82:	f04f 0200 	mov.w	r2, #0
 8009b86:	4b7f      	ldr	r3, [pc, #508]	; (8009d84 <faza+0x3bc>)
 8009b88:	f7f6 fe78 	bl	800087c <__aeabi_ddiv>
 8009b8c:	4602      	mov	r2, r0
 8009b8e:	460b      	mov	r3, r1
 8009b90:	4640      	mov	r0, r8
 8009b92:	4649      	mov	r1, r9
 8009b94:	f7f6 fb92 	bl	80002bc <__adddf3>
 8009b98:	4602      	mov	r2, r0
 8009b9a:	460b      	mov	r3, r1
 8009b9c:	4610      	mov	r0, r2
 8009b9e:	4619      	mov	r1, r3
 8009ba0:	a35f      	add	r3, pc, #380	; (adr r3, 8009d20 <faza+0x358>)
 8009ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba6:	f7f6 fb87 	bl	80002b8 <__aeabi_dsub>
 8009baa:	4602      	mov	r2, r0
 8009bac:	460b      	mov	r3, r1
 8009bae:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
   jdp = jdp;
   tzd = (jdp - 2451545) / 36525;
 8009bb2:	a35d      	add	r3, pc, #372	; (adr r3, 8009d28 <faza+0x360>)
 8009bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009bbc:	f7f6 fb7c 	bl	80002b8 <__aeabi_dsub>
 8009bc0:	4602      	mov	r2, r0
 8009bc2:	460b      	mov	r3, r1
 8009bc4:	4610      	mov	r0, r2
 8009bc6:	4619      	mov	r1, r3
 8009bc8:	a359      	add	r3, pc, #356	; (adr r3, 8009d30 <faza+0x368>)
 8009bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bce:	f7f6 fe55 	bl	800087c <__aeabi_ddiv>
 8009bd2:	4602      	mov	r2, r0
 8009bd4:	460b      	mov	r3, r1
 8009bd6:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
   elm = rang(297.8502042 + 445267.1115168 * tzd - (0.00163 * tzd * tzd) + tzd * tzd * tzd / 545868 - tzd * tzd * tzd * tzd / 113065000);
 8009bda:	a357      	add	r3, pc, #348	; (adr r3, 8009d38 <faza+0x370>)
 8009bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009be4:	f7f6 fd20 	bl	8000628 <__aeabi_dmul>
 8009be8:	4602      	mov	r2, r0
 8009bea:	460b      	mov	r3, r1
 8009bec:	4610      	mov	r0, r2
 8009bee:	4619      	mov	r1, r3
 8009bf0:	a353      	add	r3, pc, #332	; (adr r3, 8009d40 <faza+0x378>)
 8009bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf6:	f7f6 fb61 	bl	80002bc <__adddf3>
 8009bfa:	4602      	mov	r2, r0
 8009bfc:	460b      	mov	r3, r1
 8009bfe:	4690      	mov	r8, r2
 8009c00:	4699      	mov	r9, r3
 8009c02:	a351      	add	r3, pc, #324	; (adr r3, 8009d48 <faza+0x380>)
 8009c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c08:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009c0c:	f7f6 fd0c 	bl	8000628 <__aeabi_dmul>
 8009c10:	4602      	mov	r2, r0
 8009c12:	460b      	mov	r3, r1
 8009c14:	4610      	mov	r0, r2
 8009c16:	4619      	mov	r1, r3
 8009c18:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009c1c:	f7f6 fd04 	bl	8000628 <__aeabi_dmul>
 8009c20:	4602      	mov	r2, r0
 8009c22:	460b      	mov	r3, r1
 8009c24:	4640      	mov	r0, r8
 8009c26:	4649      	mov	r1, r9
 8009c28:	f7f6 fb46 	bl	80002b8 <__aeabi_dsub>
 8009c2c:	4602      	mov	r2, r0
 8009c2e:	460b      	mov	r3, r1
 8009c30:	4690      	mov	r8, r2
 8009c32:	4699      	mov	r9, r3
 8009c34:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009c38:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009c3c:	f7f6 fcf4 	bl	8000628 <__aeabi_dmul>
 8009c40:	4602      	mov	r2, r0
 8009c42:	460b      	mov	r3, r1
 8009c44:	4610      	mov	r0, r2
 8009c46:	4619      	mov	r1, r3
 8009c48:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009c4c:	f7f6 fcec 	bl	8000628 <__aeabi_dmul>
 8009c50:	4602      	mov	r2, r0
 8009c52:	460b      	mov	r3, r1
 8009c54:	4610      	mov	r0, r2
 8009c56:	4619      	mov	r1, r3
 8009c58:	a33d      	add	r3, pc, #244	; (adr r3, 8009d50 <faza+0x388>)
 8009c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c5e:	f7f6 fe0d 	bl	800087c <__aeabi_ddiv>
 8009c62:	4602      	mov	r2, r0
 8009c64:	460b      	mov	r3, r1
 8009c66:	4640      	mov	r0, r8
 8009c68:	4649      	mov	r1, r9
 8009c6a:	f7f6 fb27 	bl	80002bc <__adddf3>
 8009c6e:	4602      	mov	r2, r0
 8009c70:	460b      	mov	r3, r1
 8009c72:	4690      	mov	r8, r2
 8009c74:	4699      	mov	r9, r3
 8009c76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009c7a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009c7e:	f7f6 fcd3 	bl	8000628 <__aeabi_dmul>
 8009c82:	4602      	mov	r2, r0
 8009c84:	460b      	mov	r3, r1
 8009c86:	4610      	mov	r0, r2
 8009c88:	4619      	mov	r1, r3
 8009c8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009c8e:	f7f6 fccb 	bl	8000628 <__aeabi_dmul>
 8009c92:	4602      	mov	r2, r0
 8009c94:	460b      	mov	r3, r1
 8009c96:	4610      	mov	r0, r2
 8009c98:	4619      	mov	r1, r3
 8009c9a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009c9e:	f7f6 fcc3 	bl	8000628 <__aeabi_dmul>
 8009ca2:	4602      	mov	r2, r0
 8009ca4:	460b      	mov	r3, r1
 8009ca6:	4610      	mov	r0, r2
 8009ca8:	4619      	mov	r1, r3
 8009caa:	a32b      	add	r3, pc, #172	; (adr r3, 8009d58 <faza+0x390>)
 8009cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb0:	f7f6 fde4 	bl	800087c <__aeabi_ddiv>
 8009cb4:	4602      	mov	r2, r0
 8009cb6:	460b      	mov	r3, r1
 8009cb8:	4640      	mov	r0, r8
 8009cba:	4649      	mov	r1, r9
 8009cbc:	f7f6 fafc 	bl	80002b8 <__aeabi_dsub>
 8009cc0:	4602      	mov	r2, r0
 8009cc2:	460b      	mov	r3, r1
 8009cc4:	ec43 2b17 	vmov	d7, r2, r3
 8009cc8:	eeb0 0a47 	vmov.f32	s0, s14
 8009ccc:	eef0 0a67 	vmov.f32	s1, s15
 8009cd0:	f7ff fe2c 	bl	800992c <rang>
 8009cd4:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
   ams = rang(357.5291092 + 35999.0502909 * tzd - 0.0001536 * tzd * tzd + tzd * tzd * tzd / 24490000);
 8009cd8:	a321      	add	r3, pc, #132	; (adr r3, 8009d60 <faza+0x398>)
 8009cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cde:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009ce2:	f7f6 fca1 	bl	8000628 <__aeabi_dmul>
 8009ce6:	4602      	mov	r2, r0
 8009ce8:	460b      	mov	r3, r1
 8009cea:	4610      	mov	r0, r2
 8009cec:	4619      	mov	r1, r3
 8009cee:	a31e      	add	r3, pc, #120	; (adr r3, 8009d68 <faza+0x3a0>)
 8009cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf4:	f7f6 fae2 	bl	80002bc <__adddf3>
 8009cf8:	e046      	b.n	8009d88 <faza+0x3c0>
 8009cfa:	bf00      	nop
 8009cfc:	f3af 8000 	nop.w
 8009d00:	00000000 	.word	0x00000000
 8009d04:	40b26c00 	.word	0x40b26c00
 8009d08:	00000000 	.word	0x00000000
 8009d0c:	4076d400 	.word	0x4076d400
 8009d10:	27525461 	.word	0x27525461
 8009d14:	403e99a0 	.word	0x403e99a0
 8009d18:	00000000 	.word	0x00000000
 8009d1c:	40ac2000 	.word	0x40ac2000
 8009d20:	00000000 	.word	0x00000000
 8009d24:	4097d200 	.word	0x4097d200
 8009d28:	80000000 	.word	0x80000000
 8009d2c:	4142b42c 	.word	0x4142b42c
 8009d30:	00000000 	.word	0x00000000
 8009d34:	40e1d5a0 	.word	0x40e1d5a0
 8009d38:	723175c4 	.word	0x723175c4
 8009d3c:	411b2d4c 	.word	0x411b2d4c
 8009d40:	6fb81ec0 	.word	0x6fb81ec0
 8009d44:	40729d9a 	.word	0x40729d9a
 8009d48:	2c5197a2 	.word	0x2c5197a2
 8009d4c:	3f5ab4b7 	.word	0x3f5ab4b7
 8009d50:	00000000 	.word	0x00000000
 8009d54:	4120a898 	.word	0x4120a898
 8009d58:	a0000000 	.word	0xa0000000
 8009d5c:	419af4f0 	.word	0x419af4f0
 8009d60:	9bfba959 	.word	0x9bfba959
 8009d64:	40e193e1 	.word	0x40e193e1
 8009d68:	3b356034 	.word	0x3b356034
 8009d6c:	40765877 	.word	0x40765877
 8009d70:	40280000 	.word	0x40280000
 8009d74:	3ff00000 	.word	0x3ff00000
 8009d78:	40590000 	.word	0x40590000
 8009d7c:	40100000 	.word	0x40100000
 8009d80:	404e0000 	.word	0x404e0000
 8009d84:	40380000 	.word	0x40380000
 8009d88:	4602      	mov	r2, r0
 8009d8a:	460b      	mov	r3, r1
 8009d8c:	4690      	mov	r8, r2
 8009d8e:	4699      	mov	r9, r3
 8009d90:	f20f 531c 	addw	r3, pc, #1308	; 0x51c
 8009d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d98:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009d9c:	f7f6 fc44 	bl	8000628 <__aeabi_dmul>
 8009da0:	4602      	mov	r2, r0
 8009da2:	460b      	mov	r3, r1
 8009da4:	4610      	mov	r0, r2
 8009da6:	4619      	mov	r1, r3
 8009da8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009dac:	f7f6 fc3c 	bl	8000628 <__aeabi_dmul>
 8009db0:	4602      	mov	r2, r0
 8009db2:	460b      	mov	r3, r1
 8009db4:	4640      	mov	r0, r8
 8009db6:	4649      	mov	r1, r9
 8009db8:	f7f6 fa7e 	bl	80002b8 <__aeabi_dsub>
 8009dbc:	4602      	mov	r2, r0
 8009dbe:	460b      	mov	r3, r1
 8009dc0:	4690      	mov	r8, r2
 8009dc2:	4699      	mov	r9, r3
 8009dc4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009dc8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009dcc:	f7f6 fc2c 	bl	8000628 <__aeabi_dmul>
 8009dd0:	4602      	mov	r2, r0
 8009dd2:	460b      	mov	r3, r1
 8009dd4:	4610      	mov	r0, r2
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009ddc:	f7f6 fc24 	bl	8000628 <__aeabi_dmul>
 8009de0:	4602      	mov	r2, r0
 8009de2:	460b      	mov	r3, r1
 8009de4:	4610      	mov	r0, r2
 8009de6:	4619      	mov	r1, r3
 8009de8:	f20f 43cc 	addw	r3, pc, #1228	; 0x4cc
 8009dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df0:	f7f6 fd44 	bl	800087c <__aeabi_ddiv>
 8009df4:	4602      	mov	r2, r0
 8009df6:	460b      	mov	r3, r1
 8009df8:	4640      	mov	r0, r8
 8009dfa:	4649      	mov	r1, r9
 8009dfc:	f7f6 fa5e 	bl	80002bc <__adddf3>
 8009e00:	4602      	mov	r2, r0
 8009e02:	460b      	mov	r3, r1
 8009e04:	ec43 2b17 	vmov	d7, r2, r3
 8009e08:	eeb0 0a47 	vmov.f32	s0, s14
 8009e0c:	eef0 0a67 	vmov.f32	s1, s15
 8009e10:	f7ff fd8c 	bl	800992c <rang>
 8009e14:	ed87 0b12 	vstr	d0, [r7, #72]	; 0x48
   aml = rang(134.9634114 + 477198.8676313 * tzd - 0.008997 * tzd * tzd + tzd * tzd * tzd / 69699 - tzd * tzd * tzd * tzd / 14712000);
 8009e18:	f20f 43a4 	addw	r3, pc, #1188	; 0x4a4
 8009e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e20:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009e24:	f7f6 fc00 	bl	8000628 <__aeabi_dmul>
 8009e28:	4602      	mov	r2, r0
 8009e2a:	460b      	mov	r3, r1
 8009e2c:	4610      	mov	r0, r2
 8009e2e:	4619      	mov	r1, r3
 8009e30:	f20f 4394 	addw	r3, pc, #1172	; 0x494
 8009e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e38:	f7f6 fa40 	bl	80002bc <__adddf3>
 8009e3c:	4602      	mov	r2, r0
 8009e3e:	460b      	mov	r3, r1
 8009e40:	4690      	mov	r8, r2
 8009e42:	4699      	mov	r9, r3
 8009e44:	f20f 4388 	addw	r3, pc, #1160	; 0x488
 8009e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e4c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009e50:	f7f6 fbea 	bl	8000628 <__aeabi_dmul>
 8009e54:	4602      	mov	r2, r0
 8009e56:	460b      	mov	r3, r1
 8009e58:	4610      	mov	r0, r2
 8009e5a:	4619      	mov	r1, r3
 8009e5c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009e60:	f7f6 fbe2 	bl	8000628 <__aeabi_dmul>
 8009e64:	4602      	mov	r2, r0
 8009e66:	460b      	mov	r3, r1
 8009e68:	4640      	mov	r0, r8
 8009e6a:	4649      	mov	r1, r9
 8009e6c:	f7f6 fa24 	bl	80002b8 <__aeabi_dsub>
 8009e70:	4602      	mov	r2, r0
 8009e72:	460b      	mov	r3, r1
 8009e74:	4690      	mov	r8, r2
 8009e76:	4699      	mov	r9, r3
 8009e78:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009e7c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009e80:	f7f6 fbd2 	bl	8000628 <__aeabi_dmul>
 8009e84:	4602      	mov	r2, r0
 8009e86:	460b      	mov	r3, r1
 8009e88:	4610      	mov	r0, r2
 8009e8a:	4619      	mov	r1, r3
 8009e8c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009e90:	f7f6 fbca 	bl	8000628 <__aeabi_dmul>
 8009e94:	4602      	mov	r2, r0
 8009e96:	460b      	mov	r3, r1
 8009e98:	4610      	mov	r0, r2
 8009e9a:	4619      	mov	r1, r3
 8009e9c:	f20f 4338 	addw	r3, pc, #1080	; 0x438
 8009ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea4:	f7f6 fcea 	bl	800087c <__aeabi_ddiv>
 8009ea8:	4602      	mov	r2, r0
 8009eaa:	460b      	mov	r3, r1
 8009eac:	4640      	mov	r0, r8
 8009eae:	4649      	mov	r1, r9
 8009eb0:	f7f6 fa04 	bl	80002bc <__adddf3>
 8009eb4:	4602      	mov	r2, r0
 8009eb6:	460b      	mov	r3, r1
 8009eb8:	4690      	mov	r8, r2
 8009eba:	4699      	mov	r9, r3
 8009ebc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009ec0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009ec4:	f7f6 fbb0 	bl	8000628 <__aeabi_dmul>
 8009ec8:	4602      	mov	r2, r0
 8009eca:	460b      	mov	r3, r1
 8009ecc:	4610      	mov	r0, r2
 8009ece:	4619      	mov	r1, r3
 8009ed0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009ed4:	f7f6 fba8 	bl	8000628 <__aeabi_dmul>
 8009ed8:	4602      	mov	r2, r0
 8009eda:	460b      	mov	r3, r1
 8009edc:	4610      	mov	r0, r2
 8009ede:	4619      	mov	r1, r3
 8009ee0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009ee4:	f7f6 fba0 	bl	8000628 <__aeabi_dmul>
 8009ee8:	4602      	mov	r2, r0
 8009eea:	460b      	mov	r3, r1
 8009eec:	4610      	mov	r0, r2
 8009eee:	4619      	mov	r1, r3
 8009ef0:	a3fb      	add	r3, pc, #1004	; (adr r3, 800a2e0 <faza+0x918>)
 8009ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef6:	f7f6 fcc1 	bl	800087c <__aeabi_ddiv>
 8009efa:	4602      	mov	r2, r0
 8009efc:	460b      	mov	r3, r1
 8009efe:	4640      	mov	r0, r8
 8009f00:	4649      	mov	r1, r9
 8009f02:	f7f6 f9d9 	bl	80002b8 <__aeabi_dsub>
 8009f06:	4602      	mov	r2, r0
 8009f08:	460b      	mov	r3, r1
 8009f0a:	ec43 2b17 	vmov	d7, r2, r3
 8009f0e:	eeb0 0a47 	vmov.f32	s0, s14
 8009f12:	eef0 0a67 	vmov.f32	s1, s15
 8009f16:	f7ff fd09 	bl	800992c <rang>
 8009f1a:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
   asd = 180 - elm - (6.289 * sin((M_PI / 180) * ((aml)))) + (2.1 * sin((M_PI / 180) * ((ams)))) - (1.274 * sin((M_PI / 180) * (((2 * elm) - aml))))
 8009f1e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009f22:	f04f 0000 	mov.w	r0, #0
 8009f26:	49e0      	ldr	r1, [pc, #896]	; (800a2a8 <faza+0x8e0>)
 8009f28:	f7f6 f9c6 	bl	80002b8 <__aeabi_dsub>
 8009f2c:	4602      	mov	r2, r0
 8009f2e:	460b      	mov	r3, r1
 8009f30:	4690      	mov	r8, r2
 8009f32:	4699      	mov	r9, r3
 8009f34:	a3c0      	add	r3, pc, #768	; (adr r3, 800a238 <faza+0x870>)
 8009f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f3a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009f3e:	f7f6 fb73 	bl	8000628 <__aeabi_dmul>
 8009f42:	4602      	mov	r2, r0
 8009f44:	460b      	mov	r3, r1
 8009f46:	ec43 2b17 	vmov	d7, r2, r3
 8009f4a:	eeb0 0a47 	vmov.f32	s0, s14
 8009f4e:	eef0 0a67 	vmov.f32	s1, s15
 8009f52:	f014 f9d9 	bl	801e308 <sin>
 8009f56:	ec51 0b10 	vmov	r0, r1, d0
 8009f5a:	a3b9      	add	r3, pc, #740	; (adr r3, 800a240 <faza+0x878>)
 8009f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f60:	f7f6 fb62 	bl	8000628 <__aeabi_dmul>
 8009f64:	4602      	mov	r2, r0
 8009f66:	460b      	mov	r3, r1
 8009f68:	4640      	mov	r0, r8
 8009f6a:	4649      	mov	r1, r9
 8009f6c:	f7f6 f9a4 	bl	80002b8 <__aeabi_dsub>
 8009f70:	4602      	mov	r2, r0
 8009f72:	460b      	mov	r3, r1
 8009f74:	4690      	mov	r8, r2
 8009f76:	4699      	mov	r9, r3
 8009f78:	a3af      	add	r3, pc, #700	; (adr r3, 800a238 <faza+0x870>)
 8009f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f7e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009f82:	f7f6 fb51 	bl	8000628 <__aeabi_dmul>
 8009f86:	4602      	mov	r2, r0
 8009f88:	460b      	mov	r3, r1
 8009f8a:	ec43 2b17 	vmov	d7, r2, r3
 8009f8e:	eeb0 0a47 	vmov.f32	s0, s14
 8009f92:	eef0 0a67 	vmov.f32	s1, s15
 8009f96:	f014 f9b7 	bl	801e308 <sin>
 8009f9a:	ec51 0b10 	vmov	r0, r1, d0
 8009f9e:	a3aa      	add	r3, pc, #680	; (adr r3, 800a248 <faza+0x880>)
 8009fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa4:	f7f6 fb40 	bl	8000628 <__aeabi_dmul>
 8009fa8:	4602      	mov	r2, r0
 8009faa:	460b      	mov	r3, r1
 8009fac:	4640      	mov	r0, r8
 8009fae:	4649      	mov	r1, r9
 8009fb0:	f7f6 f984 	bl	80002bc <__adddf3>
 8009fb4:	4602      	mov	r2, r0
 8009fb6:	460b      	mov	r3, r1
 8009fb8:	4690      	mov	r8, r2
 8009fba:	4699      	mov	r9, r3
 8009fbc:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009fc0:	4602      	mov	r2, r0
 8009fc2:	460b      	mov	r3, r1
 8009fc4:	f7f6 f97a 	bl	80002bc <__adddf3>
 8009fc8:	4602      	mov	r2, r0
 8009fca:	460b      	mov	r3, r1
 8009fcc:	4610      	mov	r0, r2
 8009fce:	4619      	mov	r1, r3
 8009fd0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009fd4:	f7f6 f970 	bl	80002b8 <__aeabi_dsub>
 8009fd8:	4602      	mov	r2, r0
 8009fda:	460b      	mov	r3, r1
 8009fdc:	4610      	mov	r0, r2
 8009fde:	4619      	mov	r1, r3
 8009fe0:	a395      	add	r3, pc, #596	; (adr r3, 800a238 <faza+0x870>)
 8009fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe6:	f7f6 fb1f 	bl	8000628 <__aeabi_dmul>
 8009fea:	4602      	mov	r2, r0
 8009fec:	460b      	mov	r3, r1
 8009fee:	ec43 2b17 	vmov	d7, r2, r3
 8009ff2:	eeb0 0a47 	vmov.f32	s0, s14
 8009ff6:	eef0 0a67 	vmov.f32	s1, s15
 8009ffa:	f014 f985 	bl	801e308 <sin>
 8009ffe:	ec51 0b10 	vmov	r0, r1, d0
 800a002:	a393      	add	r3, pc, #588	; (adr r3, 800a250 <faza+0x888>)
 800a004:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a008:	f7f6 fb0e 	bl	8000628 <__aeabi_dmul>
 800a00c:	4602      	mov	r2, r0
 800a00e:	460b      	mov	r3, r1
 800a010:	4640      	mov	r0, r8
 800a012:	4649      	mov	r1, r9
 800a014:	f7f6 f950 	bl	80002b8 <__aeabi_dsub>
 800a018:	4602      	mov	r2, r0
 800a01a:	460b      	mov	r3, r1
 800a01c:	4690      	mov	r8, r2
 800a01e:	4699      	mov	r9, r3
         - (0.658 * sin((M_PI / 180) * ((2 * elm)))) - (0.214 * sin((M_PI / 180) * ((2 * aml)))) - (0.11 * sin((M_PI / 180) * ((elm))));
 800a020:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800a024:	4602      	mov	r2, r0
 800a026:	460b      	mov	r3, r1
 800a028:	f7f6 f948 	bl	80002bc <__adddf3>
 800a02c:	4602      	mov	r2, r0
 800a02e:	460b      	mov	r3, r1
 800a030:	4610      	mov	r0, r2
 800a032:	4619      	mov	r1, r3
 800a034:	a380      	add	r3, pc, #512	; (adr r3, 800a238 <faza+0x870>)
 800a036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a03a:	f7f6 faf5 	bl	8000628 <__aeabi_dmul>
 800a03e:	4602      	mov	r2, r0
 800a040:	460b      	mov	r3, r1
 800a042:	ec43 2b17 	vmov	d7, r2, r3
 800a046:	eeb0 0a47 	vmov.f32	s0, s14
 800a04a:	eef0 0a67 	vmov.f32	s1, s15
 800a04e:	f014 f95b 	bl	801e308 <sin>
 800a052:	ec51 0b10 	vmov	r0, r1, d0
 800a056:	a380      	add	r3, pc, #512	; (adr r3, 800a258 <faza+0x890>)
 800a058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a05c:	f7f6 fae4 	bl	8000628 <__aeabi_dmul>
 800a060:	4602      	mov	r2, r0
 800a062:	460b      	mov	r3, r1
 800a064:	4640      	mov	r0, r8
 800a066:	4649      	mov	r1, r9
 800a068:	f7f6 f926 	bl	80002b8 <__aeabi_dsub>
 800a06c:	4602      	mov	r2, r0
 800a06e:	460b      	mov	r3, r1
 800a070:	4690      	mov	r8, r2
 800a072:	4699      	mov	r9, r3
 800a074:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800a078:	4602      	mov	r2, r0
 800a07a:	460b      	mov	r3, r1
 800a07c:	f7f6 f91e 	bl	80002bc <__adddf3>
 800a080:	4602      	mov	r2, r0
 800a082:	460b      	mov	r3, r1
 800a084:	4610      	mov	r0, r2
 800a086:	4619      	mov	r1, r3
 800a088:	a36b      	add	r3, pc, #428	; (adr r3, 800a238 <faza+0x870>)
 800a08a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a08e:	f7f6 facb 	bl	8000628 <__aeabi_dmul>
 800a092:	4602      	mov	r2, r0
 800a094:	460b      	mov	r3, r1
 800a096:	ec43 2b17 	vmov	d7, r2, r3
 800a09a:	eeb0 0a47 	vmov.f32	s0, s14
 800a09e:	eef0 0a67 	vmov.f32	s1, s15
 800a0a2:	f014 f931 	bl	801e308 <sin>
 800a0a6:	ec51 0b10 	vmov	r0, r1, d0
 800a0aa:	a36d      	add	r3, pc, #436	; (adr r3, 800a260 <faza+0x898>)
 800a0ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b0:	f7f6 faba 	bl	8000628 <__aeabi_dmul>
 800a0b4:	4602      	mov	r2, r0
 800a0b6:	460b      	mov	r3, r1
 800a0b8:	4640      	mov	r0, r8
 800a0ba:	4649      	mov	r1, r9
 800a0bc:	f7f6 f8fc 	bl	80002b8 <__aeabi_dsub>
 800a0c0:	4602      	mov	r2, r0
 800a0c2:	460b      	mov	r3, r1
 800a0c4:	4690      	mov	r8, r2
 800a0c6:	4699      	mov	r9, r3
 800a0c8:	a35b      	add	r3, pc, #364	; (adr r3, 800a238 <faza+0x870>)
 800a0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ce:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800a0d2:	f7f6 faa9 	bl	8000628 <__aeabi_dmul>
 800a0d6:	4602      	mov	r2, r0
 800a0d8:	460b      	mov	r3, r1
 800a0da:	ec43 2b17 	vmov	d7, r2, r3
 800a0de:	eeb0 0a47 	vmov.f32	s0, s14
 800a0e2:	eef0 0a67 	vmov.f32	s1, s15
 800a0e6:	f014 f90f 	bl	801e308 <sin>
 800a0ea:	ec51 0b10 	vmov	r0, r1, d0
 800a0ee:	a35e      	add	r3, pc, #376	; (adr r3, 800a268 <faza+0x8a0>)
 800a0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f4:	f7f6 fa98 	bl	8000628 <__aeabi_dmul>
 800a0f8:	4602      	mov	r2, r0
 800a0fa:	460b      	mov	r3, r1
   asd = 180 - elm - (6.289 * sin((M_PI / 180) * ((aml)))) + (2.1 * sin((M_PI / 180) * ((ams)))) - (1.274 * sin((M_PI / 180) * (((2 * elm) - aml))))
 800a0fc:	4640      	mov	r0, r8
 800a0fe:	4649      	mov	r1, r9
 800a100:	f7f6 f8da 	bl	80002b8 <__aeabi_dsub>
 800a104:	4602      	mov	r2, r0
 800a106:	460b      	mov	r3, r1
 800a108:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
   phi1 = (1 + cos((M_PI / 180) * (asd))) / 2;
 800a10c:	a34a      	add	r3, pc, #296	; (adr r3, 800a238 <faza+0x870>)
 800a10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a112:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a116:	f7f6 fa87 	bl	8000628 <__aeabi_dmul>
 800a11a:	4602      	mov	r2, r0
 800a11c:	460b      	mov	r3, r1
 800a11e:	ec43 2b17 	vmov	d7, r2, r3
 800a122:	eeb0 0a47 	vmov.f32	s0, s14
 800a126:	eef0 0a67 	vmov.f32	s1, s15
 800a12a:	f014 f899 	bl	801e260 <cos>
 800a12e:	ec51 0b10 	vmov	r0, r1, d0
 800a132:	f04f 0200 	mov.w	r2, #0
 800a136:	4b5d      	ldr	r3, [pc, #372]	; (800a2ac <faza+0x8e4>)
 800a138:	f7f6 f8c0 	bl	80002bc <__adddf3>
 800a13c:	4602      	mov	r2, r0
 800a13e:	460b      	mov	r3, r1
 800a140:	4610      	mov	r0, r2
 800a142:	4619      	mov	r1, r3
 800a144:	f04f 0200 	mov.w	r2, #0
 800a148:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a14c:	f7f6 fb96 	bl	800087c <__aeabi_ddiv>
 800a150:	4602      	mov	r2, r0
 800a152:	460b      	mov	r3, r1
 800a154:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78

   tzd = (jdp + (0.5 / 24) - 2451545) / 36525;
 800a158:	a345      	add	r3, pc, #276	; (adr r3, 800a270 <faza+0x8a8>)
 800a15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a15e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800a162:	f7f6 f8ab 	bl	80002bc <__adddf3>
 800a166:	4602      	mov	r2, r0
 800a168:	460b      	mov	r3, r1
 800a16a:	4610      	mov	r0, r2
 800a16c:	4619      	mov	r1, r3
 800a16e:	a342      	add	r3, pc, #264	; (adr r3, 800a278 <faza+0x8b0>)
 800a170:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a174:	f7f6 f8a0 	bl	80002b8 <__aeabi_dsub>
 800a178:	4602      	mov	r2, r0
 800a17a:	460b      	mov	r3, r1
 800a17c:	4610      	mov	r0, r2
 800a17e:	4619      	mov	r1, r3
 800a180:	a33f      	add	r3, pc, #252	; (adr r3, 800a280 <faza+0x8b8>)
 800a182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a186:	f7f6 fb79 	bl	800087c <__aeabi_ddiv>
 800a18a:	4602      	mov	r2, r0
 800a18c:	460b      	mov	r3, r1
 800a18e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
   elm = rang(297.8502042 + 445267.1115168 * tzd - (0.00163 * tzd * tzd) + tzd * tzd * tzd / 545868 - tzd * tzd * tzd * tzd / 113065000);
 800a192:	a33d      	add	r3, pc, #244	; (adr r3, 800a288 <faza+0x8c0>)
 800a194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a198:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a19c:	f7f6 fa44 	bl	8000628 <__aeabi_dmul>
 800a1a0:	4602      	mov	r2, r0
 800a1a2:	460b      	mov	r3, r1
 800a1a4:	4610      	mov	r0, r2
 800a1a6:	4619      	mov	r1, r3
 800a1a8:	a339      	add	r3, pc, #228	; (adr r3, 800a290 <faza+0x8c8>)
 800a1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ae:	f7f6 f885 	bl	80002bc <__adddf3>
 800a1b2:	4602      	mov	r2, r0
 800a1b4:	460b      	mov	r3, r1
 800a1b6:	4690      	mov	r8, r2
 800a1b8:	4699      	mov	r9, r3
 800a1ba:	a337      	add	r3, pc, #220	; (adr r3, 800a298 <faza+0x8d0>)
 800a1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a1c4:	f7f6 fa30 	bl	8000628 <__aeabi_dmul>
 800a1c8:	4602      	mov	r2, r0
 800a1ca:	460b      	mov	r3, r1
 800a1cc:	4610      	mov	r0, r2
 800a1ce:	4619      	mov	r1, r3
 800a1d0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a1d4:	f7f6 fa28 	bl	8000628 <__aeabi_dmul>
 800a1d8:	4602      	mov	r2, r0
 800a1da:	460b      	mov	r3, r1
 800a1dc:	4640      	mov	r0, r8
 800a1de:	4649      	mov	r1, r9
 800a1e0:	f7f6 f86a 	bl	80002b8 <__aeabi_dsub>
 800a1e4:	4602      	mov	r2, r0
 800a1e6:	460b      	mov	r3, r1
 800a1e8:	4690      	mov	r8, r2
 800a1ea:	4699      	mov	r9, r3
 800a1ec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a1f0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a1f4:	f7f6 fa18 	bl	8000628 <__aeabi_dmul>
 800a1f8:	4602      	mov	r2, r0
 800a1fa:	460b      	mov	r3, r1
 800a1fc:	4610      	mov	r0, r2
 800a1fe:	4619      	mov	r1, r3
 800a200:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a204:	f7f6 fa10 	bl	8000628 <__aeabi_dmul>
 800a208:	4602      	mov	r2, r0
 800a20a:	460b      	mov	r3, r1
 800a20c:	4610      	mov	r0, r2
 800a20e:	4619      	mov	r1, r3
 800a210:	a323      	add	r3, pc, #140	; (adr r3, 800a2a0 <faza+0x8d8>)
 800a212:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a216:	f7f6 fb31 	bl	800087c <__aeabi_ddiv>
 800a21a:	4602      	mov	r2, r0
 800a21c:	460b      	mov	r3, r1
 800a21e:	4640      	mov	r0, r8
 800a220:	4649      	mov	r1, r9
 800a222:	f7f6 f84b 	bl	80002bc <__adddf3>
 800a226:	4602      	mov	r2, r0
 800a228:	460b      	mov	r3, r1
 800a22a:	4690      	mov	r8, r2
 800a22c:	4699      	mov	r9, r3
 800a22e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a232:	e059      	b.n	800a2e8 <faza+0x920>
 800a234:	f3af 8000 	nop.w
 800a238:	a2529d39 	.word	0xa2529d39
 800a23c:	3f91df46 	.word	0x3f91df46
 800a240:	9db22d0e 	.word	0x9db22d0e
 800a244:	401927ef 	.word	0x401927ef
 800a248:	cccccccd 	.word	0xcccccccd
 800a24c:	4000cccc 	.word	0x4000cccc
 800a250:	d2f1a9fc 	.word	0xd2f1a9fc
 800a254:	3ff4624d 	.word	0x3ff4624d
 800a258:	04189375 	.word	0x04189375
 800a25c:	3fe50e56 	.word	0x3fe50e56
 800a260:	1cac0831 	.word	0x1cac0831
 800a264:	3fcb645a 	.word	0x3fcb645a
 800a268:	c28f5c29 	.word	0xc28f5c29
 800a26c:	3fbc28f5 	.word	0x3fbc28f5
 800a270:	55555555 	.word	0x55555555
 800a274:	3f955555 	.word	0x3f955555
 800a278:	80000000 	.word	0x80000000
 800a27c:	4142b42c 	.word	0x4142b42c
 800a280:	00000000 	.word	0x00000000
 800a284:	40e1d5a0 	.word	0x40e1d5a0
 800a288:	723175c4 	.word	0x723175c4
 800a28c:	411b2d4c 	.word	0x411b2d4c
 800a290:	6fb81ec0 	.word	0x6fb81ec0
 800a294:	40729d9a 	.word	0x40729d9a
 800a298:	2c5197a2 	.word	0x2c5197a2
 800a29c:	3f5ab4b7 	.word	0x3f5ab4b7
 800a2a0:	00000000 	.word	0x00000000
 800a2a4:	4120a898 	.word	0x4120a898
 800a2a8:	40668000 	.word	0x40668000
 800a2ac:	3ff00000 	.word	0x3ff00000
 800a2b0:	f40d8376 	.word	0xf40d8376
 800a2b4:	3f2421f5 	.word	0x3f2421f5
 800a2b8:	00000000 	.word	0x00000000
 800a2bc:	41775b01 	.word	0x41775b01
 800a2c0:	787456ea 	.word	0x787456ea
 800a2c4:	411d203b 	.word	0x411d203b
 800a2c8:	4424f2ff 	.word	0x4424f2ff
 800a2cc:	4060ded4 	.word	0x4060ded4
 800a2d0:	e618ce2d 	.word	0xe618ce2d
 800a2d4:	3f826d04 	.word	0x3f826d04
 800a2d8:	00000000 	.word	0x00000000
 800a2dc:	40f10430 	.word	0x40f10430
 800a2e0:	00000000 	.word	0x00000000
 800a2e4:	416c0f98 	.word	0x416c0f98
 800a2e8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a2ec:	f7f6 f99c 	bl	8000628 <__aeabi_dmul>
 800a2f0:	4602      	mov	r2, r0
 800a2f2:	460b      	mov	r3, r1
 800a2f4:	4610      	mov	r0, r2
 800a2f6:	4619      	mov	r1, r3
 800a2f8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a2fc:	f7f6 f994 	bl	8000628 <__aeabi_dmul>
 800a300:	4602      	mov	r2, r0
 800a302:	460b      	mov	r3, r1
 800a304:	4610      	mov	r0, r2
 800a306:	4619      	mov	r1, r3
 800a308:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a30c:	f7f6 f98c 	bl	8000628 <__aeabi_dmul>
 800a310:	4602      	mov	r2, r0
 800a312:	460b      	mov	r3, r1
 800a314:	4610      	mov	r0, r2
 800a316:	4619      	mov	r1, r3
 800a318:	f20f 43b8 	addw	r3, pc, #1208	; 0x4b8
 800a31c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a320:	f7f6 faac 	bl	800087c <__aeabi_ddiv>
 800a324:	4602      	mov	r2, r0
 800a326:	460b      	mov	r3, r1
 800a328:	4640      	mov	r0, r8
 800a32a:	4649      	mov	r1, r9
 800a32c:	f7f5 ffc4 	bl	80002b8 <__aeabi_dsub>
 800a330:	4602      	mov	r2, r0
 800a332:	460b      	mov	r3, r1
 800a334:	ec43 2b17 	vmov	d7, r2, r3
 800a338:	eeb0 0a47 	vmov.f32	s0, s14
 800a33c:	eef0 0a67 	vmov.f32	s1, s15
 800a340:	f7ff faf4 	bl	800992c <rang>
 800a344:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
   ams = rang(357.5291092 + 35999.0502909 * tzd - 0.0001536 * tzd * tzd + tzd * tzd * tzd / 24490000);
 800a348:	f20f 4390 	addw	r3, pc, #1168	; 0x490
 800a34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a350:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a354:	f7f6 f968 	bl	8000628 <__aeabi_dmul>
 800a358:	4602      	mov	r2, r0
 800a35a:	460b      	mov	r3, r1
 800a35c:	4610      	mov	r0, r2
 800a35e:	4619      	mov	r1, r3
 800a360:	f20f 4380 	addw	r3, pc, #1152	; 0x480
 800a364:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a368:	f7f5 ffa8 	bl	80002bc <__adddf3>
 800a36c:	4602      	mov	r2, r0
 800a36e:	460b      	mov	r3, r1
 800a370:	4690      	mov	r8, r2
 800a372:	4699      	mov	r9, r3
 800a374:	f20f 4374 	addw	r3, pc, #1140	; 0x474
 800a378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a37c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a380:	f7f6 f952 	bl	8000628 <__aeabi_dmul>
 800a384:	4602      	mov	r2, r0
 800a386:	460b      	mov	r3, r1
 800a388:	4610      	mov	r0, r2
 800a38a:	4619      	mov	r1, r3
 800a38c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a390:	f7f6 f94a 	bl	8000628 <__aeabi_dmul>
 800a394:	4602      	mov	r2, r0
 800a396:	460b      	mov	r3, r1
 800a398:	4640      	mov	r0, r8
 800a39a:	4649      	mov	r1, r9
 800a39c:	f7f5 ff8c 	bl	80002b8 <__aeabi_dsub>
 800a3a0:	4602      	mov	r2, r0
 800a3a2:	460b      	mov	r3, r1
 800a3a4:	4690      	mov	r8, r2
 800a3a6:	4699      	mov	r9, r3
 800a3a8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a3ac:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a3b0:	f7f6 f93a 	bl	8000628 <__aeabi_dmul>
 800a3b4:	4602      	mov	r2, r0
 800a3b6:	460b      	mov	r3, r1
 800a3b8:	4610      	mov	r0, r2
 800a3ba:	4619      	mov	r1, r3
 800a3bc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a3c0:	f7f6 f932 	bl	8000628 <__aeabi_dmul>
 800a3c4:	4602      	mov	r2, r0
 800a3c6:	460b      	mov	r3, r1
 800a3c8:	4610      	mov	r0, r2
 800a3ca:	4619      	mov	r1, r3
 800a3cc:	f20f 4324 	addw	r3, pc, #1060	; 0x424
 800a3d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d4:	f7f6 fa52 	bl	800087c <__aeabi_ddiv>
 800a3d8:	4602      	mov	r2, r0
 800a3da:	460b      	mov	r3, r1
 800a3dc:	4640      	mov	r0, r8
 800a3de:	4649      	mov	r1, r9
 800a3e0:	f7f5 ff6c 	bl	80002bc <__adddf3>
 800a3e4:	4602      	mov	r2, r0
 800a3e6:	460b      	mov	r3, r1
 800a3e8:	ec43 2b17 	vmov	d7, r2, r3
 800a3ec:	eeb0 0a47 	vmov.f32	s0, s14
 800a3f0:	eef0 0a67 	vmov.f32	s1, s15
 800a3f4:	f7ff fa9a 	bl	800992c <rang>
 800a3f8:	ed87 0b12 	vstr	d0, [r7, #72]	; 0x48
   aml = rang(134.9634114 + 477198.8676313 * tzd - 0.008997 * tzd * tzd + tzd * tzd * tzd / 69699 - tzd * tzd * tzd * tzd / 14712000);
 800a3fc:	a3ff      	add	r3, pc, #1020	; (adr r3, 800a7fc <faza+0xe34>)
 800a3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a402:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a406:	f7f6 f90f 	bl	8000628 <__aeabi_dmul>
 800a40a:	4602      	mov	r2, r0
 800a40c:	460b      	mov	r3, r1
 800a40e:	4610      	mov	r0, r2
 800a410:	4619      	mov	r1, r3
 800a412:	a3fc      	add	r3, pc, #1008	; (adr r3, 800a804 <faza+0xe3c>)
 800a414:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a418:	f7f5 ff50 	bl	80002bc <__adddf3>
 800a41c:	4602      	mov	r2, r0
 800a41e:	460b      	mov	r3, r1
 800a420:	4690      	mov	r8, r2
 800a422:	4699      	mov	r9, r3
 800a424:	a3f9      	add	r3, pc, #996	; (adr r3, 800a80c <faza+0xe44>)
 800a426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a42a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a42e:	f7f6 f8fb 	bl	8000628 <__aeabi_dmul>
 800a432:	4602      	mov	r2, r0
 800a434:	460b      	mov	r3, r1
 800a436:	4610      	mov	r0, r2
 800a438:	4619      	mov	r1, r3
 800a43a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a43e:	f7f6 f8f3 	bl	8000628 <__aeabi_dmul>
 800a442:	4602      	mov	r2, r0
 800a444:	460b      	mov	r3, r1
 800a446:	4640      	mov	r0, r8
 800a448:	4649      	mov	r1, r9
 800a44a:	f7f5 ff35 	bl	80002b8 <__aeabi_dsub>
 800a44e:	4602      	mov	r2, r0
 800a450:	460b      	mov	r3, r1
 800a452:	4690      	mov	r8, r2
 800a454:	4699      	mov	r9, r3
 800a456:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a45a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a45e:	f7f6 f8e3 	bl	8000628 <__aeabi_dmul>
 800a462:	4602      	mov	r2, r0
 800a464:	460b      	mov	r3, r1
 800a466:	4610      	mov	r0, r2
 800a468:	4619      	mov	r1, r3
 800a46a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a46e:	f7f6 f8db 	bl	8000628 <__aeabi_dmul>
 800a472:	4602      	mov	r2, r0
 800a474:	460b      	mov	r3, r1
 800a476:	4610      	mov	r0, r2
 800a478:	4619      	mov	r1, r3
 800a47a:	a3e6      	add	r3, pc, #920	; (adr r3, 800a814 <faza+0xe4c>)
 800a47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a480:	f7f6 f9fc 	bl	800087c <__aeabi_ddiv>
 800a484:	4602      	mov	r2, r0
 800a486:	460b      	mov	r3, r1
 800a488:	4640      	mov	r0, r8
 800a48a:	4649      	mov	r1, r9
 800a48c:	f7f5 ff16 	bl	80002bc <__adddf3>
 800a490:	4602      	mov	r2, r0
 800a492:	460b      	mov	r3, r1
 800a494:	4690      	mov	r8, r2
 800a496:	4699      	mov	r9, r3
 800a498:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a49c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a4a0:	f7f6 f8c2 	bl	8000628 <__aeabi_dmul>
 800a4a4:	4602      	mov	r2, r0
 800a4a6:	460b      	mov	r3, r1
 800a4a8:	4610      	mov	r0, r2
 800a4aa:	4619      	mov	r1, r3
 800a4ac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a4b0:	f7f6 f8ba 	bl	8000628 <__aeabi_dmul>
 800a4b4:	4602      	mov	r2, r0
 800a4b6:	460b      	mov	r3, r1
 800a4b8:	4610      	mov	r0, r2
 800a4ba:	4619      	mov	r1, r3
 800a4bc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a4c0:	f7f6 f8b2 	bl	8000628 <__aeabi_dmul>
 800a4c4:	4602      	mov	r2, r0
 800a4c6:	460b      	mov	r3, r1
 800a4c8:	4610      	mov	r0, r2
 800a4ca:	4619      	mov	r1, r3
 800a4cc:	a3d3      	add	r3, pc, #844	; (adr r3, 800a81c <faza+0xe54>)
 800a4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d2:	f7f6 f9d3 	bl	800087c <__aeabi_ddiv>
 800a4d6:	4602      	mov	r2, r0
 800a4d8:	460b      	mov	r3, r1
 800a4da:	4640      	mov	r0, r8
 800a4dc:	4649      	mov	r1, r9
 800a4de:	f7f5 feeb 	bl	80002b8 <__aeabi_dsub>
 800a4e2:	4602      	mov	r2, r0
 800a4e4:	460b      	mov	r3, r1
 800a4e6:	ec43 2b17 	vmov	d7, r2, r3
 800a4ea:	eeb0 0a47 	vmov.f32	s0, s14
 800a4ee:	eef0 0a67 	vmov.f32	s1, s15
 800a4f2:	f7ff fa1b 	bl	800992c <rang>
 800a4f6:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
   asd = 180 - elm - (6.289 * sin((M_PI / 180) * ((aml)))) + (2.1 * sin((M_PI / 180) * ((ams)))) - (1.274 * sin((M_PI / 180) * (((2 * elm) - aml))))
 800a4fa:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a4fe:	f04f 0000 	mov.w	r0, #0
 800a502:	49b1      	ldr	r1, [pc, #708]	; (800a7c8 <faza+0xe00>)
 800a504:	f7f5 fed8 	bl	80002b8 <__aeabi_dsub>
 800a508:	4602      	mov	r2, r0
 800a50a:	460b      	mov	r3, r1
 800a50c:	4690      	mov	r8, r2
 800a50e:	4699      	mov	r9, r3
 800a510:	a39f      	add	r3, pc, #636	; (adr r3, 800a790 <faza+0xdc8>)
 800a512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a516:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800a51a:	f7f6 f885 	bl	8000628 <__aeabi_dmul>
 800a51e:	4602      	mov	r2, r0
 800a520:	460b      	mov	r3, r1
 800a522:	ec43 2b17 	vmov	d7, r2, r3
 800a526:	eeb0 0a47 	vmov.f32	s0, s14
 800a52a:	eef0 0a67 	vmov.f32	s1, s15
 800a52e:	f013 feeb 	bl	801e308 <sin>
 800a532:	ec51 0b10 	vmov	r0, r1, d0
 800a536:	a398      	add	r3, pc, #608	; (adr r3, 800a798 <faza+0xdd0>)
 800a538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a53c:	f7f6 f874 	bl	8000628 <__aeabi_dmul>
 800a540:	4602      	mov	r2, r0
 800a542:	460b      	mov	r3, r1
 800a544:	4640      	mov	r0, r8
 800a546:	4649      	mov	r1, r9
 800a548:	f7f5 feb6 	bl	80002b8 <__aeabi_dsub>
 800a54c:	4602      	mov	r2, r0
 800a54e:	460b      	mov	r3, r1
 800a550:	4690      	mov	r8, r2
 800a552:	4699      	mov	r9, r3
 800a554:	a38e      	add	r3, pc, #568	; (adr r3, 800a790 <faza+0xdc8>)
 800a556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a55a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800a55e:	f7f6 f863 	bl	8000628 <__aeabi_dmul>
 800a562:	4602      	mov	r2, r0
 800a564:	460b      	mov	r3, r1
 800a566:	ec43 2b17 	vmov	d7, r2, r3
 800a56a:	eeb0 0a47 	vmov.f32	s0, s14
 800a56e:	eef0 0a67 	vmov.f32	s1, s15
 800a572:	f013 fec9 	bl	801e308 <sin>
 800a576:	ec51 0b10 	vmov	r0, r1, d0
 800a57a:	a389      	add	r3, pc, #548	; (adr r3, 800a7a0 <faza+0xdd8>)
 800a57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a580:	f7f6 f852 	bl	8000628 <__aeabi_dmul>
 800a584:	4602      	mov	r2, r0
 800a586:	460b      	mov	r3, r1
 800a588:	4640      	mov	r0, r8
 800a58a:	4649      	mov	r1, r9
 800a58c:	f7f5 fe96 	bl	80002bc <__adddf3>
 800a590:	4602      	mov	r2, r0
 800a592:	460b      	mov	r3, r1
 800a594:	4690      	mov	r8, r2
 800a596:	4699      	mov	r9, r3
 800a598:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800a59c:	4602      	mov	r2, r0
 800a59e:	460b      	mov	r3, r1
 800a5a0:	f7f5 fe8c 	bl	80002bc <__adddf3>
 800a5a4:	4602      	mov	r2, r0
 800a5a6:	460b      	mov	r3, r1
 800a5a8:	4610      	mov	r0, r2
 800a5aa:	4619      	mov	r1, r3
 800a5ac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a5b0:	f7f5 fe82 	bl	80002b8 <__aeabi_dsub>
 800a5b4:	4602      	mov	r2, r0
 800a5b6:	460b      	mov	r3, r1
 800a5b8:	4610      	mov	r0, r2
 800a5ba:	4619      	mov	r1, r3
 800a5bc:	a374      	add	r3, pc, #464	; (adr r3, 800a790 <faza+0xdc8>)
 800a5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c2:	f7f6 f831 	bl	8000628 <__aeabi_dmul>
 800a5c6:	4602      	mov	r2, r0
 800a5c8:	460b      	mov	r3, r1
 800a5ca:	ec43 2b17 	vmov	d7, r2, r3
 800a5ce:	eeb0 0a47 	vmov.f32	s0, s14
 800a5d2:	eef0 0a67 	vmov.f32	s1, s15
 800a5d6:	f013 fe97 	bl	801e308 <sin>
 800a5da:	ec51 0b10 	vmov	r0, r1, d0
 800a5de:	a372      	add	r3, pc, #456	; (adr r3, 800a7a8 <faza+0xde0>)
 800a5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5e4:	f7f6 f820 	bl	8000628 <__aeabi_dmul>
 800a5e8:	4602      	mov	r2, r0
 800a5ea:	460b      	mov	r3, r1
 800a5ec:	4640      	mov	r0, r8
 800a5ee:	4649      	mov	r1, r9
 800a5f0:	f7f5 fe62 	bl	80002b8 <__aeabi_dsub>
 800a5f4:	4602      	mov	r2, r0
 800a5f6:	460b      	mov	r3, r1
 800a5f8:	4690      	mov	r8, r2
 800a5fa:	4699      	mov	r9, r3
         - (0.658 * sin((M_PI / 180) * ((2 * elm)))) - (0.214 * sin((M_PI / 180) * ((2 * aml)))) - (0.11 * sin((M_PI / 180) * ((elm))));
 800a5fc:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800a600:	4602      	mov	r2, r0
 800a602:	460b      	mov	r3, r1
 800a604:	f7f5 fe5a 	bl	80002bc <__adddf3>
 800a608:	4602      	mov	r2, r0
 800a60a:	460b      	mov	r3, r1
 800a60c:	4610      	mov	r0, r2
 800a60e:	4619      	mov	r1, r3
 800a610:	a35f      	add	r3, pc, #380	; (adr r3, 800a790 <faza+0xdc8>)
 800a612:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a616:	f7f6 f807 	bl	8000628 <__aeabi_dmul>
 800a61a:	4602      	mov	r2, r0
 800a61c:	460b      	mov	r3, r1
 800a61e:	ec43 2b17 	vmov	d7, r2, r3
 800a622:	eeb0 0a47 	vmov.f32	s0, s14
 800a626:	eef0 0a67 	vmov.f32	s1, s15
 800a62a:	f013 fe6d 	bl	801e308 <sin>
 800a62e:	ec51 0b10 	vmov	r0, r1, d0
 800a632:	a35f      	add	r3, pc, #380	; (adr r3, 800a7b0 <faza+0xde8>)
 800a634:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a638:	f7f5 fff6 	bl	8000628 <__aeabi_dmul>
 800a63c:	4602      	mov	r2, r0
 800a63e:	460b      	mov	r3, r1
 800a640:	4640      	mov	r0, r8
 800a642:	4649      	mov	r1, r9
 800a644:	f7f5 fe38 	bl	80002b8 <__aeabi_dsub>
 800a648:	4602      	mov	r2, r0
 800a64a:	460b      	mov	r3, r1
 800a64c:	4690      	mov	r8, r2
 800a64e:	4699      	mov	r9, r3
 800a650:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800a654:	4602      	mov	r2, r0
 800a656:	460b      	mov	r3, r1
 800a658:	f7f5 fe30 	bl	80002bc <__adddf3>
 800a65c:	4602      	mov	r2, r0
 800a65e:	460b      	mov	r3, r1
 800a660:	4610      	mov	r0, r2
 800a662:	4619      	mov	r1, r3
 800a664:	a34a      	add	r3, pc, #296	; (adr r3, 800a790 <faza+0xdc8>)
 800a666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a66a:	f7f5 ffdd 	bl	8000628 <__aeabi_dmul>
 800a66e:	4602      	mov	r2, r0
 800a670:	460b      	mov	r3, r1
 800a672:	ec43 2b17 	vmov	d7, r2, r3
 800a676:	eeb0 0a47 	vmov.f32	s0, s14
 800a67a:	eef0 0a67 	vmov.f32	s1, s15
 800a67e:	f013 fe43 	bl	801e308 <sin>
 800a682:	ec51 0b10 	vmov	r0, r1, d0
 800a686:	a34c      	add	r3, pc, #304	; (adr r3, 800a7b8 <faza+0xdf0>)
 800a688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a68c:	f7f5 ffcc 	bl	8000628 <__aeabi_dmul>
 800a690:	4602      	mov	r2, r0
 800a692:	460b      	mov	r3, r1
 800a694:	4640      	mov	r0, r8
 800a696:	4649      	mov	r1, r9
 800a698:	f7f5 fe0e 	bl	80002b8 <__aeabi_dsub>
 800a69c:	4602      	mov	r2, r0
 800a69e:	460b      	mov	r3, r1
 800a6a0:	4690      	mov	r8, r2
 800a6a2:	4699      	mov	r9, r3
 800a6a4:	a33a      	add	r3, pc, #232	; (adr r3, 800a790 <faza+0xdc8>)
 800a6a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6aa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800a6ae:	f7f5 ffbb 	bl	8000628 <__aeabi_dmul>
 800a6b2:	4602      	mov	r2, r0
 800a6b4:	460b      	mov	r3, r1
 800a6b6:	ec43 2b17 	vmov	d7, r2, r3
 800a6ba:	eeb0 0a47 	vmov.f32	s0, s14
 800a6be:	eef0 0a67 	vmov.f32	s1, s15
 800a6c2:	f013 fe21 	bl	801e308 <sin>
 800a6c6:	ec51 0b10 	vmov	r0, r1, d0
 800a6ca:	a33d      	add	r3, pc, #244	; (adr r3, 800a7c0 <faza+0xdf8>)
 800a6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6d0:	f7f5 ffaa 	bl	8000628 <__aeabi_dmul>
 800a6d4:	4602      	mov	r2, r0
 800a6d6:	460b      	mov	r3, r1
   asd = 180 - elm - (6.289 * sin((M_PI / 180) * ((aml)))) + (2.1 * sin((M_PI / 180) * ((ams)))) - (1.274 * sin((M_PI / 180) * (((2 * elm) - aml))))
 800a6d8:	4640      	mov	r0, r8
 800a6da:	4649      	mov	r1, r9
 800a6dc:	f7f5 fdec 	bl	80002b8 <__aeabi_dsub>
 800a6e0:	4602      	mov	r2, r0
 800a6e2:	460b      	mov	r3, r1
 800a6e4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
   phi2 = (1 + cos((M_PI / 180) * (asd))) / 2;
 800a6e8:	a329      	add	r3, pc, #164	; (adr r3, 800a790 <faza+0xdc8>)
 800a6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ee:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a6f2:	f7f5 ff99 	bl	8000628 <__aeabi_dmul>
 800a6f6:	4602      	mov	r2, r0
 800a6f8:	460b      	mov	r3, r1
 800a6fa:	ec43 2b17 	vmov	d7, r2, r3
 800a6fe:	eeb0 0a47 	vmov.f32	s0, s14
 800a702:	eef0 0a67 	vmov.f32	s1, s15
 800a706:	f013 fdab 	bl	801e260 <cos>
 800a70a:	ec51 0b10 	vmov	r0, r1, d0
 800a70e:	f04f 0200 	mov.w	r2, #0
 800a712:	4b2e      	ldr	r3, [pc, #184]	; (800a7cc <faza+0xe04>)
 800a714:	f7f5 fdd2 	bl	80002bc <__adddf3>
 800a718:	4602      	mov	r2, r0
 800a71a:	460b      	mov	r3, r1
 800a71c:	4610      	mov	r0, r2
 800a71e:	4619      	mov	r1, r3
 800a720:	f04f 0200 	mov.w	r2, #0
 800a724:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a728:	f7f6 f8a8 	bl	800087c <__aeabi_ddiv>
 800a72c:	4602      	mov	r2, r0
 800a72e:	460b      	mov	r3, r1
 800a730:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

   if((phi2 - phi1) < 0)
 800a734:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800a738:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800a73c:	f7f5 fdbc 	bl	80002b8 <__aeabi_dsub>
 800a740:	4602      	mov	r2, r0
 800a742:	460b      	mov	r3, r1
 800a744:	4610      	mov	r0, r2
 800a746:	4619      	mov	r1, r3
 800a748:	f04f 0200 	mov.w	r2, #0
 800a74c:	f04f 0300 	mov.w	r3, #0
 800a750:	f7f6 f9dc 	bl	8000b0c <__aeabi_dcmplt>
 800a754:	4603      	mov	r3, r0
 800a756:	2b00      	cmp	r3, #0
 800a758:	d005      	beq.n	800a766 <faza+0xd9e>
   {
      phi1 = -1 * phi1;
 800a75a:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 800a75c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a75e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800a762:	e9c7 451e 	strd	r4, r5, [r7, #120]	; 0x78
   }
   return (100 * phi1);
 800a766:	f04f 0200 	mov.w	r2, #0
 800a76a:	4b19      	ldr	r3, [pc, #100]	; (800a7d0 <faza+0xe08>)
 800a76c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800a770:	f7f5 ff5a 	bl	8000628 <__aeabi_dmul>
 800a774:	4602      	mov	r2, r0
 800a776:	460b      	mov	r3, r1
 800a778:	ec43 2b17 	vmov	d7, r2, r3
}
 800a77c:	eeb0 0a47 	vmov.f32	s0, s14
 800a780:	eef0 0a67 	vmov.f32	s1, s15
 800a784:	3784      	adds	r7, #132	; 0x84
 800a786:	46bd      	mov	sp, r7
 800a788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a78c:	f3af 8000 	nop.w
 800a790:	a2529d39 	.word	0xa2529d39
 800a794:	3f91df46 	.word	0x3f91df46
 800a798:	9db22d0e 	.word	0x9db22d0e
 800a79c:	401927ef 	.word	0x401927ef
 800a7a0:	cccccccd 	.word	0xcccccccd
 800a7a4:	4000cccc 	.word	0x4000cccc
 800a7a8:	d2f1a9fc 	.word	0xd2f1a9fc
 800a7ac:	3ff4624d 	.word	0x3ff4624d
 800a7b0:	04189375 	.word	0x04189375
 800a7b4:	3fe50e56 	.word	0x3fe50e56
 800a7b8:	1cac0831 	.word	0x1cac0831
 800a7bc:	3fcb645a 	.word	0x3fcb645a
 800a7c0:	c28f5c29 	.word	0xc28f5c29
 800a7c4:	3fbc28f5 	.word	0x3fbc28f5
 800a7c8:	40668000 	.word	0x40668000
 800a7cc:	3ff00000 	.word	0x3ff00000
 800a7d0:	40590000 	.word	0x40590000
 800a7d4:	a0000000 	.word	0xa0000000
 800a7d8:	419af4f0 	.word	0x419af4f0
 800a7dc:	9bfba959 	.word	0x9bfba959
 800a7e0:	40e193e1 	.word	0x40e193e1
 800a7e4:	3b356034 	.word	0x3b356034
 800a7e8:	40765877 	.word	0x40765877
 800a7ec:	f40d8376 	.word	0xf40d8376
 800a7f0:	3f2421f5 	.word	0x3f2421f5
 800a7f4:	00000000 	.word	0x00000000
 800a7f8:	41775b01 	.word	0x41775b01
 800a7fc:	787456ea 	.word	0x787456ea
 800a800:	411d203b 	.word	0x411d203b
 800a804:	4424f2ff 	.word	0x4424f2ff
 800a808:	4060ded4 	.word	0x4060ded4
 800a80c:	e618ce2d 	.word	0xe618ce2d
 800a810:	3f826d04 	.word	0x3f826d04
 800a814:	00000000 	.word	0x00000000
 800a818:	40f10430 	.word	0x40f10430
 800a81c:	00000000 	.word	0x00000000
 800a820:	416c0f98 	.word	0x416c0f98

0800a824 <modd>:
double modd(double x, double y)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b086      	sub	sp, #24
 800a828:	af00      	add	r7, sp, #0
 800a82a:	ed87 0b02 	vstr	d0, [r7, #8]
 800a82e:	ed87 1b00 	vstr	d1, [r7]
   double il;

   il = (int32_t)(x / y);
 800a832:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a836:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a83a:	f7f6 f81f 	bl	800087c <__aeabi_ddiv>
 800a83e:	4602      	mov	r2, r0
 800a840:	460b      	mov	r3, r1
 800a842:	4610      	mov	r0, r2
 800a844:	4619      	mov	r1, r3
 800a846:	f7f6 f99f 	bl	8000b88 <__aeabi_d2iz>
 800a84a:	4603      	mov	r3, r0
 800a84c:	4618      	mov	r0, r3
 800a84e:	f7f5 fe81 	bl	8000554 <__aeabi_i2d>
 800a852:	4602      	mov	r2, r0
 800a854:	460b      	mov	r3, r1
 800a856:	e9c7 2304 	strd	r2, r3, [r7, #16]
   return (x - (il * y));
 800a85a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a85e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a862:	f7f5 fee1 	bl	8000628 <__aeabi_dmul>
 800a866:	4602      	mov	r2, r0
 800a868:	460b      	mov	r3, r1
 800a86a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a86e:	f7f5 fd23 	bl	80002b8 <__aeabi_dsub>
 800a872:	4602      	mov	r2, r0
 800a874:	460b      	mov	r3, r1
 800a876:	ec43 2b17 	vmov	d7, r2, r3
}
 800a87a:	eeb0 0a47 	vmov.f32	s0, s14
 800a87e:	eef0 0a67 	vmov.f32	s1, s15
 800a882:	3718      	adds	r7, #24
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}

0800a888 <Wschod>:
void Wschod(double R, double M, double D, double *Wsch, double *Tran, double *Zach)
{
 800a888:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a88c:	b0a2      	sub	sp, #136	; 0x88
 800a88e:	af00      	add	r7, sp, #0
 800a890:	ed87 0b08 	vstr	d0, [r7, #32]
 800a894:	ed87 1b06 	vstr	d1, [r7, #24]
 800a898:	ed87 2b04 	vstr	d2, [r7, #16]
 800a89c:	60f8      	str	r0, [r7, #12]
 800a89e:	60b9      	str	r1, [r7, #8]
 800a8a0:	607a      	str	r2, [r7, #4]
   double J, Cent, L, G, O, F, E, A, C, U, UD, P, Lat, Long, Req;
   Lat  = 52.291452;
 800a8a2:	a3f1      	add	r3, pc, #964	; (adr r3, 800ac68 <Wschod+0x3e0>)
 800a8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a8:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
   Long = 17.363596;
 800a8ac:	a3f0      	add	r3, pc, #960	; (adr r3, 800ac70 <Wschod+0x3e8>)
 800a8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b2:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
   Req  = -0.833;
 800a8b6:	a3f0      	add	r3, pc, #960	; (adr r3, 800ac78 <Wschod+0x3f0>)
 800a8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8bc:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
   J    = 367 * R - (int32_t)(7 * (R + (int32_t)((M + 9) / 12)) / 4) + (int32_t)(275 * M / 9) + D - 730531.5;
 800a8c0:	a3ef      	add	r3, pc, #956	; (adr r3, 800ac80 <Wschod+0x3f8>)
 800a8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800a8ca:	f7f5 fead 	bl	8000628 <__aeabi_dmul>
 800a8ce:	4602      	mov	r2, r0
 800a8d0:	460b      	mov	r3, r1
 800a8d2:	4614      	mov	r4, r2
 800a8d4:	461d      	mov	r5, r3
 800a8d6:	f04f 0200 	mov.w	r2, #0
 800a8da:	4bdf      	ldr	r3, [pc, #892]	; (800ac58 <Wschod+0x3d0>)
 800a8dc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a8e0:	f7f5 fcec 	bl	80002bc <__adddf3>
 800a8e4:	4602      	mov	r2, r0
 800a8e6:	460b      	mov	r3, r1
 800a8e8:	4610      	mov	r0, r2
 800a8ea:	4619      	mov	r1, r3
 800a8ec:	f04f 0200 	mov.w	r2, #0
 800a8f0:	4bda      	ldr	r3, [pc, #872]	; (800ac5c <Wschod+0x3d4>)
 800a8f2:	f7f5 ffc3 	bl	800087c <__aeabi_ddiv>
 800a8f6:	4602      	mov	r2, r0
 800a8f8:	460b      	mov	r3, r1
 800a8fa:	4610      	mov	r0, r2
 800a8fc:	4619      	mov	r1, r3
 800a8fe:	f7f6 f943 	bl	8000b88 <__aeabi_d2iz>
 800a902:	4603      	mov	r3, r0
 800a904:	4618      	mov	r0, r3
 800a906:	f7f5 fe25 	bl	8000554 <__aeabi_i2d>
 800a90a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a90e:	f7f5 fcd5 	bl	80002bc <__adddf3>
 800a912:	4602      	mov	r2, r0
 800a914:	460b      	mov	r3, r1
 800a916:	4610      	mov	r0, r2
 800a918:	4619      	mov	r1, r3
 800a91a:	f04f 0200 	mov.w	r2, #0
 800a91e:	4bd0      	ldr	r3, [pc, #832]	; (800ac60 <Wschod+0x3d8>)
 800a920:	f7f5 fe82 	bl	8000628 <__aeabi_dmul>
 800a924:	4602      	mov	r2, r0
 800a926:	460b      	mov	r3, r1
 800a928:	4610      	mov	r0, r2
 800a92a:	4619      	mov	r1, r3
 800a92c:	f04f 0200 	mov.w	r2, #0
 800a930:	4bcc      	ldr	r3, [pc, #816]	; (800ac64 <Wschod+0x3dc>)
 800a932:	f7f5 ffa3 	bl	800087c <__aeabi_ddiv>
 800a936:	4602      	mov	r2, r0
 800a938:	460b      	mov	r3, r1
 800a93a:	4610      	mov	r0, r2
 800a93c:	4619      	mov	r1, r3
 800a93e:	f7f6 f923 	bl	8000b88 <__aeabi_d2iz>
 800a942:	4603      	mov	r3, r0
 800a944:	4618      	mov	r0, r3
 800a946:	f7f5 fe05 	bl	8000554 <__aeabi_i2d>
 800a94a:	4602      	mov	r2, r0
 800a94c:	460b      	mov	r3, r1
 800a94e:	4620      	mov	r0, r4
 800a950:	4629      	mov	r1, r5
 800a952:	f7f5 fcb1 	bl	80002b8 <__aeabi_dsub>
 800a956:	4602      	mov	r2, r0
 800a958:	460b      	mov	r3, r1
 800a95a:	4614      	mov	r4, r2
 800a95c:	461d      	mov	r5, r3
 800a95e:	a3a0      	add	r3, pc, #640	; (adr r3, 800abe0 <Wschod+0x358>)
 800a960:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a964:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a968:	f7f5 fe5e 	bl	8000628 <__aeabi_dmul>
 800a96c:	4602      	mov	r2, r0
 800a96e:	460b      	mov	r3, r1
 800a970:	4610      	mov	r0, r2
 800a972:	4619      	mov	r1, r3
 800a974:	f04f 0200 	mov.w	r2, #0
 800a978:	4bb7      	ldr	r3, [pc, #732]	; (800ac58 <Wschod+0x3d0>)
 800a97a:	f7f5 ff7f 	bl	800087c <__aeabi_ddiv>
 800a97e:	4602      	mov	r2, r0
 800a980:	460b      	mov	r3, r1
 800a982:	4610      	mov	r0, r2
 800a984:	4619      	mov	r1, r3
 800a986:	f7f6 f8ff 	bl	8000b88 <__aeabi_d2iz>
 800a98a:	4603      	mov	r3, r0
 800a98c:	4618      	mov	r0, r3
 800a98e:	f7f5 fde1 	bl	8000554 <__aeabi_i2d>
 800a992:	4602      	mov	r2, r0
 800a994:	460b      	mov	r3, r1
 800a996:	4620      	mov	r0, r4
 800a998:	4629      	mov	r1, r5
 800a99a:	f7f5 fc8f 	bl	80002bc <__adddf3>
 800a99e:	4602      	mov	r2, r0
 800a9a0:	460b      	mov	r3, r1
 800a9a2:	4610      	mov	r0, r2
 800a9a4:	4619      	mov	r1, r3
 800a9a6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a9aa:	f7f5 fc87 	bl	80002bc <__adddf3>
 800a9ae:	4602      	mov	r2, r0
 800a9b0:	460b      	mov	r3, r1
 800a9b2:	4610      	mov	r0, r2
 800a9b4:	4619      	mov	r1, r3
 800a9b6:	a38c      	add	r3, pc, #560	; (adr r3, 800abe8 <Wschod+0x360>)
 800a9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9bc:	f7f5 fc7c 	bl	80002b8 <__aeabi_dsub>
 800a9c0:	4602      	mov	r2, r0
 800a9c2:	460b      	mov	r3, r1
 800a9c4:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
   Cent = J / 36525;
 800a9c8:	a389      	add	r3, pc, #548	; (adr r3, 800abf0 <Wschod+0x368>)
 800a9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a9d2:	f7f5 ff53 	bl	800087c <__aeabi_ddiv>
 800a9d6:	4602      	mov	r2, r0
 800a9d8:	460b      	mov	r3, r1
 800a9da:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
   L    = modd((4.8949504201433 + 628.331969753199 * Cent), 6.28318530718);
 800a9de:	a386      	add	r3, pc, #536	; (adr r3, 800abf8 <Wschod+0x370>)
 800a9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800a9e8:	f7f5 fe1e 	bl	8000628 <__aeabi_dmul>
 800a9ec:	4602      	mov	r2, r0
 800a9ee:	460b      	mov	r3, r1
 800a9f0:	4610      	mov	r0, r2
 800a9f2:	4619      	mov	r1, r3
 800a9f4:	a382      	add	r3, pc, #520	; (adr r3, 800ac00 <Wschod+0x378>)
 800a9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9fa:	f7f5 fc5f 	bl	80002bc <__adddf3>
 800a9fe:	4602      	mov	r2, r0
 800aa00:	460b      	mov	r3, r1
 800aa02:	ec43 2b17 	vmov	d7, r2, r3
 800aa06:	ed9f 1b80 	vldr	d1, [pc, #512]	; 800ac08 <Wschod+0x380>
 800aa0a:	eeb0 0a47 	vmov.f32	s0, s14
 800aa0e:	eef0 0a67 	vmov.f32	s1, s15
 800aa12:	f7ff ff07 	bl	800a824 <modd>
 800aa16:	ed87 0b16 	vstr	d0, [r7, #88]	; 0x58
   G    = modd((6.2400408 + 628.3019501 * Cent), 6.28318530718);
 800aa1a:	a37d      	add	r3, pc, #500	; (adr r3, 800ac10 <Wschod+0x388>)
 800aa1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa20:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800aa24:	f7f5 fe00 	bl	8000628 <__aeabi_dmul>
 800aa28:	4602      	mov	r2, r0
 800aa2a:	460b      	mov	r3, r1
 800aa2c:	4610      	mov	r0, r2
 800aa2e:	4619      	mov	r1, r3
 800aa30:	a379      	add	r3, pc, #484	; (adr r3, 800ac18 <Wschod+0x390>)
 800aa32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa36:	f7f5 fc41 	bl	80002bc <__adddf3>
 800aa3a:	4602      	mov	r2, r0
 800aa3c:	460b      	mov	r3, r1
 800aa3e:	ec43 2b17 	vmov	d7, r2, r3
 800aa42:	ed9f 1b71 	vldr	d1, [pc, #452]	; 800ac08 <Wschod+0x380>
 800aa46:	eeb0 0a47 	vmov.f32	s0, s14
 800aa4a:	eef0 0a67 	vmov.f32	s1, s15
 800aa4e:	f7ff fee9 	bl	800a824 <modd>
 800aa52:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
   O    = 0.409093 - 0.0002269 * Cent;
 800aa56:	a372      	add	r3, pc, #456	; (adr r3, 800ac20 <Wschod+0x398>)
 800aa58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa5c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800aa60:	f7f5 fde2 	bl	8000628 <__aeabi_dmul>
 800aa64:	4602      	mov	r2, r0
 800aa66:	460b      	mov	r3, r1
 800aa68:	a16f      	add	r1, pc, #444	; (adr r1, 800ac28 <Wschod+0x3a0>)
 800aa6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa6e:	f7f5 fc23 	bl	80002b8 <__aeabi_dsub>
 800aa72:	4602      	mov	r2, r0
 800aa74:	460b      	mov	r3, r1
 800aa76:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
   F    = 0.033423 * sin(G) + 0.00034907 * sin(2 * G);
 800aa7a:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 800aa7e:	f013 fc43 	bl	801e308 <sin>
 800aa82:	ec51 0b10 	vmov	r0, r1, d0
 800aa86:	a36a      	add	r3, pc, #424	; (adr r3, 800ac30 <Wschod+0x3a8>)
 800aa88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa8c:	f7f5 fdcc 	bl	8000628 <__aeabi_dmul>
 800aa90:	4602      	mov	r2, r0
 800aa92:	460b      	mov	r3, r1
 800aa94:	4614      	mov	r4, r2
 800aa96:	461d      	mov	r5, r3
 800aa98:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800aa9c:	4602      	mov	r2, r0
 800aa9e:	460b      	mov	r3, r1
 800aaa0:	f7f5 fc0c 	bl	80002bc <__adddf3>
 800aaa4:	4602      	mov	r2, r0
 800aaa6:	460b      	mov	r3, r1
 800aaa8:	ec43 2b17 	vmov	d7, r2, r3
 800aaac:	eeb0 0a47 	vmov.f32	s0, s14
 800aab0:	eef0 0a67 	vmov.f32	s1, s15
 800aab4:	f013 fc28 	bl	801e308 <sin>
 800aab8:	ec51 0b10 	vmov	r0, r1, d0
 800aabc:	a35e      	add	r3, pc, #376	; (adr r3, 800ac38 <Wschod+0x3b0>)
 800aabe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac2:	f7f5 fdb1 	bl	8000628 <__aeabi_dmul>
 800aac6:	4602      	mov	r2, r0
 800aac8:	460b      	mov	r3, r1
 800aaca:	4620      	mov	r0, r4
 800aacc:	4629      	mov	r1, r5
 800aace:	f7f5 fbf5 	bl	80002bc <__adddf3>
 800aad2:	4602      	mov	r2, r0
 800aad4:	460b      	mov	r3, r1
 800aad6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
   E    = 0.0430398 * sin(2 * (L + F)) - 0.00092502 * sin(4 * (L + F)) - F;
 800aada:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800aade:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800aae2:	f7f5 fbeb 	bl	80002bc <__adddf3>
 800aae6:	4602      	mov	r2, r0
 800aae8:	460b      	mov	r3, r1
 800aaea:	4610      	mov	r0, r2
 800aaec:	4619      	mov	r1, r3
 800aaee:	4602      	mov	r2, r0
 800aaf0:	460b      	mov	r3, r1
 800aaf2:	f7f5 fbe3 	bl	80002bc <__adddf3>
 800aaf6:	4602      	mov	r2, r0
 800aaf8:	460b      	mov	r3, r1
 800aafa:	ec43 2b17 	vmov	d7, r2, r3
 800aafe:	eeb0 0a47 	vmov.f32	s0, s14
 800ab02:	eef0 0a67 	vmov.f32	s1, s15
 800ab06:	f013 fbff 	bl	801e308 <sin>
 800ab0a:	ec51 0b10 	vmov	r0, r1, d0
 800ab0e:	a34c      	add	r3, pc, #304	; (adr r3, 800ac40 <Wschod+0x3b8>)
 800ab10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab14:	f7f5 fd88 	bl	8000628 <__aeabi_dmul>
 800ab18:	4602      	mov	r2, r0
 800ab1a:	460b      	mov	r3, r1
 800ab1c:	4614      	mov	r4, r2
 800ab1e:	461d      	mov	r5, r3
 800ab20:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ab24:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800ab28:	f7f5 fbc8 	bl	80002bc <__adddf3>
 800ab2c:	4602      	mov	r2, r0
 800ab2e:	460b      	mov	r3, r1
 800ab30:	4610      	mov	r0, r2
 800ab32:	4619      	mov	r1, r3
 800ab34:	f04f 0200 	mov.w	r2, #0
 800ab38:	4b4a      	ldr	r3, [pc, #296]	; (800ac64 <Wschod+0x3dc>)
 800ab3a:	f7f5 fd75 	bl	8000628 <__aeabi_dmul>
 800ab3e:	4602      	mov	r2, r0
 800ab40:	460b      	mov	r3, r1
 800ab42:	ec43 2b17 	vmov	d7, r2, r3
 800ab46:	eeb0 0a47 	vmov.f32	s0, s14
 800ab4a:	eef0 0a67 	vmov.f32	s1, s15
 800ab4e:	f013 fbdb 	bl	801e308 <sin>
 800ab52:	ec51 0b10 	vmov	r0, r1, d0
 800ab56:	a33c      	add	r3, pc, #240	; (adr r3, 800ac48 <Wschod+0x3c0>)
 800ab58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab5c:	f7f5 fd64 	bl	8000628 <__aeabi_dmul>
 800ab60:	4602      	mov	r2, r0
 800ab62:	460b      	mov	r3, r1
 800ab64:	4620      	mov	r0, r4
 800ab66:	4629      	mov	r1, r5
 800ab68:	f7f5 fba6 	bl	80002b8 <__aeabi_dsub>
 800ab6c:	4602      	mov	r2, r0
 800ab6e:	460b      	mov	r3, r1
 800ab70:	4610      	mov	r0, r2
 800ab72:	4619      	mov	r1, r3
 800ab74:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ab78:	f7f5 fb9e 	bl	80002b8 <__aeabi_dsub>
 800ab7c:	4602      	mov	r2, r0
 800ab7e:	460b      	mov	r3, r1
 800ab80:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
   A    = asin(sin(O) * sin(L + F));
 800ab84:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 800ab88:	f013 fbbe 	bl	801e308 <sin>
 800ab8c:	ec55 4b10 	vmov	r4, r5, d0
 800ab90:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ab94:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800ab98:	f7f5 fb90 	bl	80002bc <__adddf3>
 800ab9c:	4602      	mov	r2, r0
 800ab9e:	460b      	mov	r3, r1
 800aba0:	ec43 2b17 	vmov	d7, r2, r3
 800aba4:	eeb0 0a47 	vmov.f32	s0, s14
 800aba8:	eef0 0a67 	vmov.f32	s1, s15
 800abac:	f013 fbac 	bl	801e308 <sin>
 800abb0:	ec53 2b10 	vmov	r2, r3, d0
 800abb4:	4620      	mov	r0, r4
 800abb6:	4629      	mov	r1, r5
 800abb8:	f7f5 fd36 	bl	8000628 <__aeabi_dmul>
 800abbc:	4602      	mov	r2, r0
 800abbe:	460b      	mov	r3, r1
 800abc0:	ec43 2b17 	vmov	d7, r2, r3
 800abc4:	eeb0 0a47 	vmov.f32	s0, s14
 800abc8:	eef0 0a67 	vmov.f32	s1, s15
 800abcc:	f013 fc28 	bl	801e420 <asin>
 800abd0:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
   C    = (sin(0.017453293 * Req) - sin(0.017453293 * Lat) * sin(A)) / (cos(0.017453293 * Lat) * cos(A));
 800abd4:	a31e      	add	r3, pc, #120	; (adr r3, 800ac50 <Wschod+0x3c8>)
 800abd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abda:	e055      	b.n	800ac88 <Wschod+0x400>
 800abdc:	f3af 8000 	nop.w
 800abe0:	00000000 	.word	0x00000000
 800abe4:	40713000 	.word	0x40713000
 800abe8:	00000000 	.word	0x00000000
 800abec:	41264b47 	.word	0x41264b47
 800abf0:	00000000 	.word	0x00000000
 800abf4:	40e1d5a0 	.word	0x40e1d5a0
 800abf8:	dfc20a02 	.word	0xdfc20a02
 800abfc:	4083a2a7 	.word	0x4083a2a7
 800ac00:	e2083a4d 	.word	0xe2083a4d
 800ac04:	4013946d 	.word	0x4013946d
 800ac08:	54442eea 	.word	0x54442eea
 800ac0c:	401921fb 	.word	0x401921fb
 800ac10:	64d06431 	.word	0x64d06431
 800ac14:	4083a26a 	.word	0x4083a26a
 800ac18:	4166d29d 	.word	0x4166d29d
 800ac1c:	4018f5cd 	.word	0x4018f5cd
 800ac20:	28af4bb3 	.word	0x28af4bb3
 800ac24:	3f2dbd80 	.word	0x3f2dbd80
 800ac28:	68017119 	.word	0x68017119
 800ac2c:	3fda2e94 	.word	0x3fda2e94
 800ac30:	c7de5083 	.word	0xc7de5083
 800ac34:	3fa11cd1 	.word	0x3fa11cd1
 800ac38:	3be86381 	.word	0x3be86381
 800ac3c:	3f36e06c 	.word	0x3f36e06c
 800ac40:	0ada4e96 	.word	0x0ada4e96
 800ac44:	3fa60950 	.word	0x3fa60950
 800ac48:	52f6720d 	.word	0x52f6720d
 800ac4c:	3f4e4fa1 	.word	0x3f4e4fa1
 800ac50:	aa91ed06 	.word	0xaa91ed06
 800ac54:	3f91df46 	.word	0x3f91df46
 800ac58:	40220000 	.word	0x40220000
 800ac5c:	40280000 	.word	0x40280000
 800ac60:	401c0000 	.word	0x401c0000
 800ac64:	40100000 	.word	0x40100000
 800ac68:	4c942d49 	.word	0x4c942d49
 800ac6c:	404a254e 	.word	0x404a254e
 800ac70:	a0a0f4d8 	.word	0xa0a0f4d8
 800ac74:	40315d14 	.word	0x40315d14
 800ac78:	9db22d0e 	.word	0x9db22d0e
 800ac7c:	bfeaa7ef 	.word	0xbfeaa7ef
 800ac80:	00000000 	.word	0x00000000
 800ac84:	4076f000 	.word	0x4076f000
 800ac88:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800ac8c:	f7f5 fccc 	bl	8000628 <__aeabi_dmul>
 800ac90:	4602      	mov	r2, r0
 800ac92:	460b      	mov	r3, r1
 800ac94:	ec43 2b17 	vmov	d7, r2, r3
 800ac98:	eeb0 0a47 	vmov.f32	s0, s14
 800ac9c:	eef0 0a67 	vmov.f32	s1, s15
 800aca0:	f013 fb32 	bl	801e308 <sin>
 800aca4:	ec55 4b10 	vmov	r4, r5, d0
 800aca8:	a385      	add	r3, pc, #532	; (adr r3, 800aec0 <Wschod+0x638>)
 800acaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800acb2:	f7f5 fcb9 	bl	8000628 <__aeabi_dmul>
 800acb6:	4602      	mov	r2, r0
 800acb8:	460b      	mov	r3, r1
 800acba:	ec43 2b17 	vmov	d7, r2, r3
 800acbe:	eeb0 0a47 	vmov.f32	s0, s14
 800acc2:	eef0 0a67 	vmov.f32	s1, s15
 800acc6:	f013 fb1f 	bl	801e308 <sin>
 800acca:	ec59 8b10 	vmov	r8, r9, d0
 800acce:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800acd2:	f013 fb19 	bl	801e308 <sin>
 800acd6:	ec53 2b10 	vmov	r2, r3, d0
 800acda:	4640      	mov	r0, r8
 800acdc:	4649      	mov	r1, r9
 800acde:	f7f5 fca3 	bl	8000628 <__aeabi_dmul>
 800ace2:	4602      	mov	r2, r0
 800ace4:	460b      	mov	r3, r1
 800ace6:	4620      	mov	r0, r4
 800ace8:	4629      	mov	r1, r5
 800acea:	f7f5 fae5 	bl	80002b8 <__aeabi_dsub>
 800acee:	4602      	mov	r2, r0
 800acf0:	460b      	mov	r3, r1
 800acf2:	4614      	mov	r4, r2
 800acf4:	461d      	mov	r5, r3
 800acf6:	a372      	add	r3, pc, #456	; (adr r3, 800aec0 <Wschod+0x638>)
 800acf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acfc:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800ad00:	f7f5 fc92 	bl	8000628 <__aeabi_dmul>
 800ad04:	4602      	mov	r2, r0
 800ad06:	460b      	mov	r3, r1
 800ad08:	ec43 2b17 	vmov	d7, r2, r3
 800ad0c:	eeb0 0a47 	vmov.f32	s0, s14
 800ad10:	eef0 0a67 	vmov.f32	s1, s15
 800ad14:	f013 faa4 	bl	801e260 <cos>
 800ad18:	ec59 8b10 	vmov	r8, r9, d0
 800ad1c:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800ad20:	f013 fa9e 	bl	801e260 <cos>
 800ad24:	ec53 2b10 	vmov	r2, r3, d0
 800ad28:	4640      	mov	r0, r8
 800ad2a:	4649      	mov	r1, r9
 800ad2c:	f7f5 fc7c 	bl	8000628 <__aeabi_dmul>
 800ad30:	4602      	mov	r2, r0
 800ad32:	460b      	mov	r3, r1
 800ad34:	4620      	mov	r0, r4
 800ad36:	4629      	mov	r1, r5
 800ad38:	f7f5 fda0 	bl	800087c <__aeabi_ddiv>
 800ad3c:	4602      	mov	r2, r0
 800ad3e:	460b      	mov	r3, r1
 800ad40:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

   *Wsch = (3.14159 - (E + 0.017453293 * Long + 1 * acos(C))) * 57.29577951 / 15;
 800ad44:	a35e      	add	r3, pc, #376	; (adr r3, 800aec0 <Wschod+0x638>)
 800ad46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad4a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800ad4e:	f7f5 fc6b 	bl	8000628 <__aeabi_dmul>
 800ad52:	4602      	mov	r2, r0
 800ad54:	460b      	mov	r3, r1
 800ad56:	4610      	mov	r0, r2
 800ad58:	4619      	mov	r1, r3
 800ad5a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ad5e:	f7f5 faad 	bl	80002bc <__adddf3>
 800ad62:	4602      	mov	r2, r0
 800ad64:	460b      	mov	r3, r1
 800ad66:	4614      	mov	r4, r2
 800ad68:	461d      	mov	r5, r3
 800ad6a:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 800ad6e:	f013 fb23 	bl	801e3b8 <acos>
 800ad72:	ec53 2b10 	vmov	r2, r3, d0
 800ad76:	4620      	mov	r0, r4
 800ad78:	4629      	mov	r1, r5
 800ad7a:	f7f5 fa9f 	bl	80002bc <__adddf3>
 800ad7e:	4602      	mov	r2, r0
 800ad80:	460b      	mov	r3, r1
 800ad82:	a151      	add	r1, pc, #324	; (adr r1, 800aec8 <Wschod+0x640>)
 800ad84:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad88:	f7f5 fa96 	bl	80002b8 <__aeabi_dsub>
 800ad8c:	4602      	mov	r2, r0
 800ad8e:	460b      	mov	r3, r1
 800ad90:	4610      	mov	r0, r2
 800ad92:	4619      	mov	r1, r3
 800ad94:	a34e      	add	r3, pc, #312	; (adr r3, 800aed0 <Wschod+0x648>)
 800ad96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad9a:	f7f5 fc45 	bl	8000628 <__aeabi_dmul>
 800ad9e:	4602      	mov	r2, r0
 800ada0:	460b      	mov	r3, r1
 800ada2:	4610      	mov	r0, r2
 800ada4:	4619      	mov	r1, r3
 800ada6:	f04f 0200 	mov.w	r2, #0
 800adaa:	4b4b      	ldr	r3, [pc, #300]	; (800aed8 <Wschod+0x650>)
 800adac:	f7f5 fd66 	bl	800087c <__aeabi_ddiv>
 800adb0:	4602      	mov	r2, r0
 800adb2:	460b      	mov	r3, r1
 800adb4:	68f9      	ldr	r1, [r7, #12]
 800adb6:	e9c1 2300 	strd	r2, r3, [r1]
   *Tran = (3.14159 - (E + 0.017453293 * Long + 0 * acos(C))) * 57.29577951 / 15;
 800adba:	a341      	add	r3, pc, #260	; (adr r3, 800aec0 <Wschod+0x638>)
 800adbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800adc4:	f7f5 fc30 	bl	8000628 <__aeabi_dmul>
 800adc8:	4602      	mov	r2, r0
 800adca:	460b      	mov	r3, r1
 800adcc:	4610      	mov	r0, r2
 800adce:	4619      	mov	r1, r3
 800add0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800add4:	f7f5 fa72 	bl	80002bc <__adddf3>
 800add8:	4602      	mov	r2, r0
 800adda:	460b      	mov	r3, r1
 800addc:	4614      	mov	r4, r2
 800adde:	461d      	mov	r5, r3
 800ade0:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 800ade4:	f013 fae8 	bl	801e3b8 <acos>
 800ade8:	ec51 0b10 	vmov	r0, r1, d0
 800adec:	f04f 0200 	mov.w	r2, #0
 800adf0:	f04f 0300 	mov.w	r3, #0
 800adf4:	f7f5 fc18 	bl	8000628 <__aeabi_dmul>
 800adf8:	4602      	mov	r2, r0
 800adfa:	460b      	mov	r3, r1
 800adfc:	4620      	mov	r0, r4
 800adfe:	4629      	mov	r1, r5
 800ae00:	f7f5 fa5c 	bl	80002bc <__adddf3>
 800ae04:	4602      	mov	r2, r0
 800ae06:	460b      	mov	r3, r1
 800ae08:	a12f      	add	r1, pc, #188	; (adr r1, 800aec8 <Wschod+0x640>)
 800ae0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae0e:	f7f5 fa53 	bl	80002b8 <__aeabi_dsub>
 800ae12:	4602      	mov	r2, r0
 800ae14:	460b      	mov	r3, r1
 800ae16:	4610      	mov	r0, r2
 800ae18:	4619      	mov	r1, r3
 800ae1a:	a32d      	add	r3, pc, #180	; (adr r3, 800aed0 <Wschod+0x648>)
 800ae1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae20:	f7f5 fc02 	bl	8000628 <__aeabi_dmul>
 800ae24:	4602      	mov	r2, r0
 800ae26:	460b      	mov	r3, r1
 800ae28:	4610      	mov	r0, r2
 800ae2a:	4619      	mov	r1, r3
 800ae2c:	f04f 0200 	mov.w	r2, #0
 800ae30:	4b29      	ldr	r3, [pc, #164]	; (800aed8 <Wschod+0x650>)
 800ae32:	f7f5 fd23 	bl	800087c <__aeabi_ddiv>
 800ae36:	4602      	mov	r2, r0
 800ae38:	460b      	mov	r3, r1
 800ae3a:	68b9      	ldr	r1, [r7, #8]
 800ae3c:	e9c1 2300 	strd	r2, r3, [r1]
   *Zach = (3.14159 - (E + 0.017453293 * Long + -1 * acos(C))) * 57.29577951 / 15;
 800ae40:	a31f      	add	r3, pc, #124	; (adr r3, 800aec0 <Wschod+0x638>)
 800ae42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae46:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800ae4a:	f7f5 fbed 	bl	8000628 <__aeabi_dmul>
 800ae4e:	4602      	mov	r2, r0
 800ae50:	460b      	mov	r3, r1
 800ae52:	4610      	mov	r0, r2
 800ae54:	4619      	mov	r1, r3
 800ae56:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ae5a:	f7f5 fa2f 	bl	80002bc <__adddf3>
 800ae5e:	4602      	mov	r2, r0
 800ae60:	460b      	mov	r3, r1
 800ae62:	4614      	mov	r4, r2
 800ae64:	461d      	mov	r5, r3
 800ae66:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 800ae6a:	f013 faa5 	bl	801e3b8 <acos>
 800ae6e:	ec53 2b10 	vmov	r2, r3, d0
 800ae72:	4620      	mov	r0, r4
 800ae74:	4629      	mov	r1, r5
 800ae76:	f7f5 fa1f 	bl	80002b8 <__aeabi_dsub>
 800ae7a:	4602      	mov	r2, r0
 800ae7c:	460b      	mov	r3, r1
 800ae7e:	a112      	add	r1, pc, #72	; (adr r1, 800aec8 <Wschod+0x640>)
 800ae80:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae84:	f7f5 fa18 	bl	80002b8 <__aeabi_dsub>
 800ae88:	4602      	mov	r2, r0
 800ae8a:	460b      	mov	r3, r1
 800ae8c:	4610      	mov	r0, r2
 800ae8e:	4619      	mov	r1, r3
 800ae90:	a30f      	add	r3, pc, #60	; (adr r3, 800aed0 <Wschod+0x648>)
 800ae92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae96:	f7f5 fbc7 	bl	8000628 <__aeabi_dmul>
 800ae9a:	4602      	mov	r2, r0
 800ae9c:	460b      	mov	r3, r1
 800ae9e:	4610      	mov	r0, r2
 800aea0:	4619      	mov	r1, r3
 800aea2:	f04f 0200 	mov.w	r2, #0
 800aea6:	4b0c      	ldr	r3, [pc, #48]	; (800aed8 <Wschod+0x650>)
 800aea8:	f7f5 fce8 	bl	800087c <__aeabi_ddiv>
 800aeac:	4602      	mov	r2, r0
 800aeae:	460b      	mov	r3, r1
 800aeb0:	6879      	ldr	r1, [r7, #4]
 800aeb2:	e9c1 2300 	strd	r2, r3, [r1]
}
 800aeb6:	bf00      	nop
 800aeb8:	3788      	adds	r7, #136	; 0x88
 800aeba:	46bd      	mov	sp, r7
 800aebc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800aec0:	aa91ed06 	.word	0xaa91ed06
 800aec4:	3f91df46 	.word	0x3f91df46
 800aec8:	f01b866e 	.word	0xf01b866e
 800aecc:	400921f9 	.word	0x400921f9
 800aed0:	1a5d2372 	.word	0x1a5d2372
 800aed4:	404ca5dc 	.word	0x404ca5dc
 800aed8:	402e0000 	.word	0x402e0000

0800aedc <mapf>:
static float mapf(float val, float in_min, float in_max, float out_min, float out_max)
{
 800aedc:	b480      	push	{r7}
 800aede:	b087      	sub	sp, #28
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	ed87 0a05 	vstr	s0, [r7, #20]
 800aee6:	edc7 0a04 	vstr	s1, [r7, #16]
 800aeea:	ed87 1a03 	vstr	s2, [r7, #12]
 800aeee:	edc7 1a02 	vstr	s3, [r7, #8]
 800aef2:	ed87 2a01 	vstr	s4, [r7, #4]
   return (val - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800aef6:	ed97 7a05 	vldr	s14, [r7, #20]
 800aefa:	edd7 7a04 	vldr	s15, [r7, #16]
 800aefe:	ee37 7a67 	vsub.f32	s14, s14, s15
 800af02:	edd7 6a01 	vldr	s13, [r7, #4]
 800af06:	edd7 7a02 	vldr	s15, [r7, #8]
 800af0a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800af0e:	ee67 6a27 	vmul.f32	s13, s14, s15
 800af12:	ed97 7a03 	vldr	s14, [r7, #12]
 800af16:	edd7 7a04 	vldr	s15, [r7, #16]
 800af1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800af1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af22:	edd7 7a02 	vldr	s15, [r7, #8]
 800af26:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800af2a:	eeb0 0a67 	vmov.f32	s0, s15
 800af2e:	371c      	adds	r7, #28
 800af30:	46bd      	mov	sp, r7
 800af32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af36:	4770      	bx	lr

0800af38 <map>:
static uint32_t map(uint32_t val, uint32_t in_min, uint32_t in_max, uint32_t out_min, uint32_t out_max)
{
 800af38:	b480      	push	{r7}
 800af3a:	b085      	sub	sp, #20
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	60f8      	str	r0, [r7, #12]
 800af40:	60b9      	str	r1, [r7, #8]
 800af42:	607a      	str	r2, [r7, #4]
 800af44:	603b      	str	r3, [r7, #0]
   return (val - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800af46:	68fa      	ldr	r2, [r7, #12]
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	1ad3      	subs	r3, r2, r3
 800af4c:	69b9      	ldr	r1, [r7, #24]
 800af4e:	683a      	ldr	r2, [r7, #0]
 800af50:	1a8a      	subs	r2, r1, r2
 800af52:	fb03 f202 	mul.w	r2, r3, r2
 800af56:	6879      	ldr	r1, [r7, #4]
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	1acb      	subs	r3, r1, r3
 800af5c:	fbb2 f2f3 	udiv	r2, r2, r3
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	4413      	add	r3, r2
}
 800af64:	4618      	mov	r0, r3
 800af66:	3714      	adds	r7, #20
 800af68:	46bd      	mov	sp, r7
 800af6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6e:	4770      	bx	lr

0800af70 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b082      	sub	sp, #8
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
 800af78:	460b      	mov	r3, r1
 800af7a:	807b      	strh	r3, [r7, #2]
   if(huart->Instance == USART1)
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	4a12      	ldr	r2, [pc, #72]	; (800afcc <HAL_UARTEx_RxEventCallback+0x5c>)
 800af82:	4293      	cmp	r3, r2
 800af84:	d10b      	bne.n	800af9e <HAL_UARTEx_RxEventCallback+0x2e>
   {
      Rfp.DataSize = Size;
 800af86:	887b      	ldrh	r3, [r7, #2]
 800af88:	4a11      	ldr	r2, [pc, #68]	; (800afd0 <HAL_UARTEx_RxEventCallback+0x60>)
 800af8a:	6093      	str	r3, [r2, #8]
      RFP_InterruptTask();
 800af8c:	f001 fecc 	bl	800cd28 <RFP_InterruptTask>
      HAL_GPIO_TogglePin(SIGNAL_GPIO_Port, SIGNAL_Pin);
 800af90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800af94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800af98:	f003 ffa2 	bl	800eee0 <HAL_GPIO_TogglePin>
      else
      {
         HAL_UARTEx_ReceiveToIdle_DMA(&huart2, PMSData, 100);
      }
   }
}
 800af9c:	e011      	b.n	800afc2 <HAL_UARTEx_RxEventCallback+0x52>
   else if(huart->Instance == USART2)
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	4a0c      	ldr	r2, [pc, #48]	; (800afd4 <HAL_UARTEx_RxEventCallback+0x64>)
 800afa4:	4293      	cmp	r3, r2
 800afa6:	d10c      	bne.n	800afc2 <HAL_UARTEx_RxEventCallback+0x52>
      if(PMSData[0] == 0x42)
 800afa8:	4b0b      	ldr	r3, [pc, #44]	; (800afd8 <HAL_UARTEx_RxEventCallback+0x68>)
 800afaa:	781b      	ldrb	r3, [r3, #0]
 800afac:	2b42      	cmp	r3, #66	; 0x42
 800afae:	d103      	bne.n	800afb8 <HAL_UARTEx_RxEventCallback+0x48>
         PMSFlag = 1;
 800afb0:	4b0a      	ldr	r3, [pc, #40]	; (800afdc <HAL_UARTEx_RxEventCallback+0x6c>)
 800afb2:	2201      	movs	r2, #1
 800afb4:	701a      	strb	r2, [r3, #0]
}
 800afb6:	e004      	b.n	800afc2 <HAL_UARTEx_RxEventCallback+0x52>
         HAL_UARTEx_ReceiveToIdle_DMA(&huart2, PMSData, 100);
 800afb8:	2264      	movs	r2, #100	; 0x64
 800afba:	4907      	ldr	r1, [pc, #28]	; (800afd8 <HAL_UARTEx_RxEventCallback+0x68>)
 800afbc:	4808      	ldr	r0, [pc, #32]	; (800afe0 <HAL_UARTEx_RxEventCallback+0x70>)
 800afbe:	f00a fae7 	bl	8015590 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 800afc2:	bf00      	nop
 800afc4:	3708      	adds	r7, #8
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bd80      	pop	{r7, pc}
 800afca:	bf00      	nop
 800afcc:	40013800 	.word	0x40013800
 800afd0:	20003f60 	.word	0x20003f60
 800afd4:	40004400 	.word	0x40004400
 800afd8:	20003fd8 	.word	0x20003fd8
 800afdc:	2000403c 	.word	0x2000403c
 800afe0:	20004894 	.word	0x20004894

0800afe4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b088      	sub	sp, #32
 800afe8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800afea:	f107 030c 	add.w	r3, r7, #12
 800afee:	2200      	movs	r2, #0
 800aff0:	601a      	str	r2, [r3, #0]
 800aff2:	605a      	str	r2, [r3, #4]
 800aff4:	609a      	str	r2, [r3, #8]
 800aff6:	60da      	str	r2, [r3, #12]
 800aff8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800affa:	4b46      	ldr	r3, [pc, #280]	; (800b114 <MX_GPIO_Init+0x130>)
 800affc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800affe:	4a45      	ldr	r2, [pc, #276]	; (800b114 <MX_GPIO_Init+0x130>)
 800b000:	f043 0304 	orr.w	r3, r3, #4
 800b004:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b006:	4b43      	ldr	r3, [pc, #268]	; (800b114 <MX_GPIO_Init+0x130>)
 800b008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b00a:	f003 0304 	and.w	r3, r3, #4
 800b00e:	60bb      	str	r3, [r7, #8]
 800b010:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b012:	4b40      	ldr	r3, [pc, #256]	; (800b114 <MX_GPIO_Init+0x130>)
 800b014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b016:	4a3f      	ldr	r2, [pc, #252]	; (800b114 <MX_GPIO_Init+0x130>)
 800b018:	f043 0301 	orr.w	r3, r3, #1
 800b01c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b01e:	4b3d      	ldr	r3, [pc, #244]	; (800b114 <MX_GPIO_Init+0x130>)
 800b020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b022:	f003 0301 	and.w	r3, r3, #1
 800b026:	607b      	str	r3, [r7, #4]
 800b028:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800b02a:	4b3a      	ldr	r3, [pc, #232]	; (800b114 <MX_GPIO_Init+0x130>)
 800b02c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b02e:	4a39      	ldr	r2, [pc, #228]	; (800b114 <MX_GPIO_Init+0x130>)
 800b030:	f043 0302 	orr.w	r3, r3, #2
 800b034:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b036:	4b37      	ldr	r3, [pc, #220]	; (800b114 <MX_GPIO_Init+0x130>)
 800b038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b03a:	f003 0302 	and.w	r3, r3, #2
 800b03e:	603b      	str	r3, [r7, #0]
 800b040:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SSD1306_CS_Pin|PMS3003_RST_Pin, GPIO_PIN_SET);
 800b042:	2201      	movs	r2, #1
 800b044:	f241 0110 	movw	r1, #4112	; 0x1010
 800b048:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b04c:	f003 ff30 	bl	800eeb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SCREENS_DC_Pin|EPAPIER_CS_Pin|EPAPIER_RST_Pin|SSD1306_RST_Pin
 800b050:	2201      	movs	r2, #1
 800b052:	f648 61c3 	movw	r1, #36547	; 0x8ec3
 800b056:	4830      	ldr	r0, [pc, #192]	; (800b118 <MX_GPIO_Init+0x134>)
 800b058:	f003 ff2a 	bl	800eeb0 <HAL_GPIO_WritePin>
                          |PMS3003_SET_Pin|FRAM_CS_Pin|FRAM_WP_Pin|FLASH_CS_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HEARTBEAT_Pin|BME280_CS_Pin|FRAM_HOLD_Pin, GPIO_PIN_RESET);
 800b05c:	2200      	movs	r2, #0
 800b05e:	f44f 5144 	mov.w	r1, #12544	; 0x3100
 800b062:	482d      	ldr	r0, [pc, #180]	; (800b118 <MX_GPIO_Init+0x134>)
 800b064:	f003 ff24 	bl	800eeb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, HC12_SET_Pin|SIGNAL_Pin, GPIO_PIN_RESET);
 800b068:	2200      	movs	r2, #0
 800b06a:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 800b06e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b072:	f003 ff1d 	bl	800eeb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SSD1306_CS_Pin|PMS3003_RST_Pin|SIGNAL_Pin;
 800b076:	f249 0310 	movw	r3, #36880	; 0x9010
 800b07a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b07c:	2301      	movs	r3, #1
 800b07e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b080:	2300      	movs	r3, #0
 800b082:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b084:	2303      	movs	r3, #3
 800b086:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b088:	f107 030c 	add.w	r3, r7, #12
 800b08c:	4619      	mov	r1, r3
 800b08e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b092:	f003 fd63 	bl	800eb5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SCREENS_DC_Pin|EPAPIER_CS_Pin|EPAPIER_RST_Pin|SSD1306_RST_Pin
 800b096:	f649 63c3 	movw	r3, #40643	; 0x9ec3
 800b09a:	60fb      	str	r3, [r7, #12]
                          |HEARTBEAT_Pin|PMS3003_SET_Pin|FRAM_CS_Pin|FRAM_WP_Pin
                          |FLASH_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b09c:	2301      	movs	r3, #1
 800b09e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b0a4:	2303      	movs	r3, #3
 800b0a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b0a8:	f107 030c 	add.w	r3, r7, #12
 800b0ac:	4619      	mov	r1, r3
 800b0ae:	481a      	ldr	r0, [pc, #104]	; (800b118 <MX_GPIO_Init+0x134>)
 800b0b0:	f003 fd54 	bl	800eb5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = EPAPIER_BUSY_Pin|ENCODER_SWITCH_Pin;
 800b0b4:	f244 0304 	movw	r3, #16388	; 0x4004
 800b0b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b0c2:	f107 030c 	add.w	r3, r7, #12
 800b0c6:	4619      	mov	r1, r3
 800b0c8:	4813      	ldr	r0, [pc, #76]	; (800b118 <MX_GPIO_Init+0x134>)
 800b0ca:	f003 fd47 	bl	800eb5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BME280_CS_Pin|FRAM_HOLD_Pin;
 800b0ce:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 800b0d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0d8:	2300      	movs	r3, #0
 800b0da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b0dc:	2300      	movs	r3, #0
 800b0de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b0e0:	f107 030c 	add.w	r3, r7, #12
 800b0e4:	4619      	mov	r1, r3
 800b0e6:	480c      	ldr	r0, [pc, #48]	; (800b118 <MX_GPIO_Init+0x134>)
 800b0e8:	f003 fd38 	bl	800eb5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HC12_SET_Pin;
 800b0ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b0f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b0f2:	2301      	movs	r3, #1
 800b0f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HC12_SET_GPIO_Port, &GPIO_InitStruct);
 800b0fe:	f107 030c 	add.w	r3, r7, #12
 800b102:	4619      	mov	r1, r3
 800b104:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b108:	f003 fd28 	bl	800eb5c <HAL_GPIO_Init>

}
 800b10c:	bf00      	nop
 800b10e:	3720      	adds	r7, #32
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}
 800b114:	40021000 	.word	0x40021000
 800b118:	48000400 	.word	0x48000400

0800b11c <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800b120:	4b0b      	ldr	r3, [pc, #44]	; (800b150 <MX_IWDG_Init+0x34>)
 800b122:	4a0c      	ldr	r2, [pc, #48]	; (800b154 <MX_IWDG_Init+0x38>)
 800b124:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 800b126:	4b0a      	ldr	r3, [pc, #40]	; (800b150 <MX_IWDG_Init+0x34>)
 800b128:	2206      	movs	r2, #6
 800b12a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 800b12c:	4b08      	ldr	r3, [pc, #32]	; (800b150 <MX_IWDG_Init+0x34>)
 800b12e:	f640 72ff 	movw	r2, #4095	; 0xfff
 800b132:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 800b134:	4b06      	ldr	r3, [pc, #24]	; (800b150 <MX_IWDG_Init+0x34>)
 800b136:	f640 72ff 	movw	r2, #4095	; 0xfff
 800b13a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800b13c:	4804      	ldr	r0, [pc, #16]	; (800b150 <MX_IWDG_Init+0x34>)
 800b13e:	f003 fee9 	bl	800ef14 <HAL_IWDG_Init>
 800b142:	4603      	mov	r3, r0
 800b144:	2b00      	cmp	r3, #0
 800b146:	d001      	beq.n	800b14c <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 800b148:	f000 f8de 	bl	800b308 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800b14c:	bf00      	nop
 800b14e:	bd80      	pop	{r7, pc}
 800b150:	200040c8 	.word	0x200040c8
 800b154:	40003000 	.word	0x40003000

0800b158 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800b15c:	f003 f88b 	bl	800e276 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800b160:	f000 f820 	bl	800b1a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800b164:	f7ff ff3e 	bl	800afe4 <MX_GPIO_Init>
  MX_DMA_Init();
 800b168:	f7f9 fbfe 	bl	8004968 <MX_DMA_Init>
  MX_RTC_Init();
 800b16c:	f002 f8a0 	bl	800d2b0 <MX_RTC_Init>
  MX_SPI1_Init();
 800b170:	f002 f914 	bl	800d39c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800b174:	f002 feba 	bl	800deec <MX_USART1_UART_Init>
  MX_TIM5_Init();
 800b178:	f002 fd50 	bl	800dc1c <MX_TIM5_Init>
  MX_IWDG_Init();
 800b17c:	f7ff ffce 	bl	800b11c <MX_IWDG_Init>
  MX_TIM16_Init();
 800b180:	f002 fda2 	bl	800dcc8 <MX_TIM16_Init>
  MX_TIM1_Init();
 800b184:	f002 fc9e 	bl	800dac4 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800b188:	f002 ff00 	bl	800df8c <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800b18c:	f000 f86c 	bl	800b268 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800b190:	f00a faec 	bl	801576c <osKernelInitialize>
  MX_FREERTOS_Init();
 800b194:	f7fa f9d6 	bl	8005544 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800b198:	f00a fb0c 	bl	80157b4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   HAL_NVIC_SystemReset();
 800b19c:	f003 f99d 	bl	800e4da <HAL_NVIC_SystemReset>
   while(1)
 800b1a0:	e7fe      	b.n	800b1a0 <main+0x48>
	...

0800b1a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b098      	sub	sp, #96	; 0x60
 800b1a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800b1aa:	f107 0318 	add.w	r3, r7, #24
 800b1ae:	2248      	movs	r2, #72	; 0x48
 800b1b0:	2100      	movs	r1, #0
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	f00e fbec 	bl	8019990 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800b1b8:	1d3b      	adds	r3, r7, #4
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	601a      	str	r2, [r3, #0]
 800b1be:	605a      	str	r2, [r3, #4]
 800b1c0:	609a      	str	r2, [r3, #8]
 800b1c2:	60da      	str	r2, [r3, #12]
 800b1c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800b1c6:	2000      	movs	r0, #0
 800b1c8:	f003 ff34 	bl	800f034 <HAL_PWREx_ControlVoltageScaling>
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d001      	beq.n	800b1d6 <SystemClock_Config+0x32>
  {
    Error_Handler();
 800b1d2:	f000 f899 	bl	800b308 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800b1d6:	f003 fefd 	bl	800efd4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800b1da:	4b22      	ldr	r3, [pc, #136]	; (800b264 <SystemClock_Config+0xc0>)
 800b1dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1e0:	4a20      	ldr	r2, [pc, #128]	; (800b264 <SystemClock_Config+0xc0>)
 800b1e2:	f023 0318 	bic.w	r3, r3, #24
 800b1e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 800b1ea:	231c      	movs	r3, #28
 800b1ec:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800b1ee:	2301      	movs	r3, #1
 800b1f0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800b1fe:	2360      	movs	r3, #96	; 0x60
 800b200:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b202:	2302      	movs	r3, #2
 800b204:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800b206:	2301      	movs	r3, #1
 800b208:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 800b20a:	2301      	movs	r3, #1
 800b20c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 60;
 800b20e:	233c      	movs	r3, #60	; 0x3c
 800b210:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800b212:	2302      	movs	r3, #2
 800b214:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800b216:	2302      	movs	r3, #2
 800b218:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800b21a:	2302      	movs	r3, #2
 800b21c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800b21e:	f107 0318 	add.w	r3, r7, #24
 800b222:	4618      	mov	r0, r3
 800b224:	f003 ffaa 	bl	800f17c <HAL_RCC_OscConfig>
 800b228:	4603      	mov	r3, r0
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d001      	beq.n	800b232 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800b22e:	f000 f86b 	bl	800b308 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800b232:	230f      	movs	r3, #15
 800b234:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b236:	2303      	movs	r3, #3
 800b238:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b23a:	2300      	movs	r3, #0
 800b23c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800b23e:	2300      	movs	r3, #0
 800b240:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800b242:	2300      	movs	r3, #0
 800b244:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800b246:	1d3b      	adds	r3, r7, #4
 800b248:	2105      	movs	r1, #5
 800b24a:	4618      	mov	r0, r3
 800b24c:	f004 fc12 	bl	800fa74 <HAL_RCC_ClockConfig>
 800b250:	4603      	mov	r3, r0
 800b252:	2b00      	cmp	r3, #0
 800b254:	d001      	beq.n	800b25a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800b256:	f000 f857 	bl	800b308 <Error_Handler>
  }
}
 800b25a:	bf00      	nop
 800b25c:	3760      	adds	r7, #96	; 0x60
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd80      	pop	{r7, pc}
 800b262:	bf00      	nop
 800b264:	40021000 	.word	0x40021000

0800b268 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	af00      	add	r7, sp, #0
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800b26c:	2200      	movs	r2, #0
 800b26e:	2105      	movs	r1, #5
 800b270:	200b      	movs	r0, #11
 800b272:	f003 f908 	bl	800e486 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800b276:	200b      	movs	r0, #11
 800b278:	f003 f921 	bl	800e4be <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800b27c:	2200      	movs	r2, #0
 800b27e:	2105      	movs	r1, #5
 800b280:	2025      	movs	r0, #37	; 0x25
 800b282:	f003 f900 	bl	800e486 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800b286:	2025      	movs	r0, #37	; 0x25
 800b288:	f003 f919 	bl	800e4be <HAL_NVIC_EnableIRQ>
  /* TIM1_UP_TIM16_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 800b28c:	2200      	movs	r2, #0
 800b28e:	2105      	movs	r1, #5
 800b290:	2019      	movs	r0, #25
 800b292:	f003 f8f8 	bl	800e486 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800b296:	2019      	movs	r0, #25
 800b298:	f003 f911 	bl	800e4be <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 800b29c:	2200      	movs	r2, #0
 800b29e:	2105      	movs	r1, #5
 800b2a0:	200c      	movs	r0, #12
 800b2a2:	f003 f8f0 	bl	800e486 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800b2a6:	200c      	movs	r0, #12
 800b2a8:	f003 f909 	bl	800e4be <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	2105      	movs	r1, #5
 800b2b0:	2026      	movs	r0, #38	; 0x26
 800b2b2:	f003 f8e8 	bl	800e486 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800b2b6:	2026      	movs	r0, #38	; 0x26
 800b2b8:	f003 f901 	bl	800e4be <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 800b2bc:	2200      	movs	r2, #0
 800b2be:	2105      	movs	r1, #5
 800b2c0:	200d      	movs	r0, #13
 800b2c2:	f003 f8e0 	bl	800e486 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800b2c6:	200d      	movs	r0, #13
 800b2c8:	f003 f8f9 	bl	800e4be <HAL_NVIC_EnableIRQ>
}
 800b2cc:	bf00      	nop
 800b2ce:	bd80      	pop	{r7, pc}

0800b2d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b082      	sub	sp, #8
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM15) {
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	4a08      	ldr	r2, [pc, #32]	; (800b300 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800b2de:	4293      	cmp	r3, r2
 800b2e0:	d102      	bne.n	800b2e8 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 800b2e2:	f002 ffe1 	bl	800e2a8 <HAL_IncTick>
  /* USER CODE BEGIN Callback 1 */
  else if (htim->Instance == TIM16) {
    HAL_IncTick();
  }
  /* USER CODE END Callback 1 */
}
 800b2e6:	e006      	b.n	800b2f6 <HAL_TIM_PeriodElapsedCallback+0x26>
  else if (htim->Instance == TIM16) {
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	4a05      	ldr	r2, [pc, #20]	; (800b304 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800b2ee:	4293      	cmp	r3, r2
 800b2f0:	d101      	bne.n	800b2f6 <HAL_TIM_PeriodElapsedCallback+0x26>
    HAL_IncTick();
 800b2f2:	f002 ffd9 	bl	800e2a8 <HAL_IncTick>
}
 800b2f6:	bf00      	nop
 800b2f8:	3708      	adds	r7, #8
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}
 800b2fe:	bf00      	nop
 800b300:	40014000 	.word	0x40014000
 800b304:	40014400 	.word	0x40014400

0800b308 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
   /* User can add his own implementation to report the HAL error return state */
   HAL_NVIC_SystemReset();
 800b30c:	f003 f8e5 	bl	800e4da <HAL_NVIC_SystemReset>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800b310:	b672      	cpsid	i
}
 800b312:	bf00      	nop
   __disable_irq();
   while(1)
 800b314:	e7fe      	b.n	800b314 <Error_Handler+0xc>

0800b316 <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 800b316:	b480      	push	{r7}
 800b318:	b085      	sub	sp, #20
 800b31a:	af00      	add	r7, sp, #0
 800b31c:	60b9      	str	r1, [r7, #8]
 800b31e:	607a      	str	r2, [r7, #4]
 800b320:	603b      	str	r3, [r7, #0]
 800b322:	4603      	mov	r3, r0
 800b324:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 800b326:	687a      	ldr	r2, [r7, #4]
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	429a      	cmp	r2, r3
 800b32c:	d204      	bcs.n	800b338 <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 800b32e:	68ba      	ldr	r2, [r7, #8]
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	4413      	add	r3, r2
 800b334:	7bfa      	ldrb	r2, [r7, #15]
 800b336:	701a      	strb	r2, [r3, #0]
  }
}
 800b338:	bf00      	nop
 800b33a:	3714      	adds	r7, #20
 800b33c:	46bd      	mov	sp, r7
 800b33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b342:	4770      	bx	lr

0800b344 <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 800b344:	b480      	push	{r7}
 800b346:	b085      	sub	sp, #20
 800b348:	af00      	add	r7, sp, #0
 800b34a:	60b9      	str	r1, [r7, #8]
 800b34c:	607a      	str	r2, [r7, #4]
 800b34e:	603b      	str	r3, [r7, #0]
 800b350:	4603      	mov	r3, r0
 800b352:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 800b354:	bf00      	nop
 800b356:	3714      	adds	r7, #20
 800b358:	46bd      	mov	sp, r7
 800b35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35e:	4770      	bx	lr

0800b360 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 800b360:	b480      	push	{r7}
 800b362:	b085      	sub	sp, #20
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
 800b368:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	60fb      	str	r3, [r7, #12]
 800b36e:	e002      	b.n	800b376 <_strnlen_s+0x16>
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	3301      	adds	r3, #1
 800b374:	60fb      	str	r3, [r7, #12]
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	781b      	ldrb	r3, [r3, #0]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d004      	beq.n	800b388 <_strnlen_s+0x28>
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	1e5a      	subs	r2, r3, #1
 800b382:	603a      	str	r2, [r7, #0]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d1f3      	bne.n	800b370 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 800b388:	68fa      	ldr	r2, [r7, #12]
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	1ad3      	subs	r3, r2, r3
}
 800b38e:	4618      	mov	r0, r3
 800b390:	3714      	adds	r7, #20
 800b392:	46bd      	mov	sp, r7
 800b394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b398:	4770      	bx	lr

0800b39a <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 800b39a:	b480      	push	{r7}
 800b39c:	b083      	sub	sp, #12
 800b39e:	af00      	add	r7, sp, #0
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 800b3a4:	79fb      	ldrb	r3, [r7, #7]
 800b3a6:	2b2f      	cmp	r3, #47	; 0x2f
 800b3a8:	d904      	bls.n	800b3b4 <_is_digit+0x1a>
 800b3aa:	79fb      	ldrb	r3, [r7, #7]
 800b3ac:	2b39      	cmp	r3, #57	; 0x39
 800b3ae:	d801      	bhi.n	800b3b4 <_is_digit+0x1a>
 800b3b0:	2301      	movs	r3, #1
 800b3b2:	e000      	b.n	800b3b6 <_is_digit+0x1c>
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	f003 0301 	and.w	r3, r3, #1
 800b3ba:	b2db      	uxtb	r3, r3
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	370c      	adds	r7, #12
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c6:	4770      	bx	lr

0800b3c8 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b084      	sub	sp, #16
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800b3d4:	e00e      	b.n	800b3f4 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 800b3d6:	68fa      	ldr	r2, [r7, #12]
 800b3d8:	4613      	mov	r3, r2
 800b3da:	009b      	lsls	r3, r3, #2
 800b3dc:	4413      	add	r3, r2
 800b3de:	005b      	lsls	r3, r3, #1
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	1c59      	adds	r1, r3, #1
 800b3e8:	687a      	ldr	r2, [r7, #4]
 800b3ea:	6011      	str	r1, [r2, #0]
 800b3ec:	781b      	ldrb	r3, [r3, #0]
 800b3ee:	4403      	add	r3, r0
 800b3f0:	3b30      	subs	r3, #48	; 0x30
 800b3f2:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	781b      	ldrb	r3, [r3, #0]
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	f7ff ffcd 	bl	800b39a <_is_digit>
 800b400:	4603      	mov	r3, r0
 800b402:	2b00      	cmp	r3, #0
 800b404:	d1e7      	bne.n	800b3d6 <_atoi+0xe>
  }
  return i;
 800b406:	68fb      	ldr	r3, [r7, #12]
}
 800b408:	4618      	mov	r0, r3
 800b40a:	3710      	adds	r7, #16
 800b40c:	46bd      	mov	sp, r7
 800b40e:	bd80      	pop	{r7, pc}

0800b410 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 800b410:	b590      	push	{r4, r7, lr}
 800b412:	b087      	sub	sp, #28
 800b414:	af00      	add	r7, sp, #0
 800b416:	60f8      	str	r0, [r7, #12]
 800b418:	60b9      	str	r1, [r7, #8]
 800b41a:	607a      	str	r2, [r7, #4]
 800b41c:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 800b422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b424:	f003 0302 	and.w	r3, r3, #2
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d125      	bne.n	800b478 <_out_rev+0x68>
 800b42c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b42e:	f003 0301 	and.w	r3, r3, #1
 800b432:	2b00      	cmp	r3, #0
 800b434:	d120      	bne.n	800b478 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 800b436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b438:	617b      	str	r3, [r7, #20]
 800b43a:	e00a      	b.n	800b452 <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 800b43c:	687a      	ldr	r2, [r7, #4]
 800b43e:	1c53      	adds	r3, r2, #1
 800b440:	607b      	str	r3, [r7, #4]
 800b442:	68fc      	ldr	r4, [r7, #12]
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	68b9      	ldr	r1, [r7, #8]
 800b448:	2020      	movs	r0, #32
 800b44a:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 800b44c:	697b      	ldr	r3, [r7, #20]
 800b44e:	3301      	adds	r3, #1
 800b450:	617b      	str	r3, [r7, #20]
 800b452:	697a      	ldr	r2, [r7, #20]
 800b454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b456:	429a      	cmp	r2, r3
 800b458:	d3f0      	bcc.n	800b43c <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 800b45a:	e00d      	b.n	800b478 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 800b45c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b45e:	3b01      	subs	r3, #1
 800b460:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b462:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b466:	4413      	add	r3, r2
 800b468:	7818      	ldrb	r0, [r3, #0]
 800b46a:	687a      	ldr	r2, [r7, #4]
 800b46c:	1c53      	adds	r3, r2, #1
 800b46e:	607b      	str	r3, [r7, #4]
 800b470:	68fc      	ldr	r4, [r7, #12]
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	68b9      	ldr	r1, [r7, #8]
 800b476:	47a0      	blx	r4
  while (len) {
 800b478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d1ee      	bne.n	800b45c <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 800b47e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b480:	f003 0302 	and.w	r3, r3, #2
 800b484:	2b00      	cmp	r3, #0
 800b486:	d00e      	beq.n	800b4a6 <_out_rev+0x96>
    while (idx - start_idx < width) {
 800b488:	e007      	b.n	800b49a <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 800b48a:	687a      	ldr	r2, [r7, #4]
 800b48c:	1c53      	adds	r3, r2, #1
 800b48e:	607b      	str	r3, [r7, #4]
 800b490:	68fc      	ldr	r4, [r7, #12]
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	68b9      	ldr	r1, [r7, #8]
 800b496:	2020      	movs	r0, #32
 800b498:	47a0      	blx	r4
    while (idx - start_idx < width) {
 800b49a:	687a      	ldr	r2, [r7, #4]
 800b49c:	693b      	ldr	r3, [r7, #16]
 800b49e:	1ad3      	subs	r3, r2, r3
 800b4a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4a2:	429a      	cmp	r2, r3
 800b4a4:	d8f1      	bhi.n	800b48a <_out_rev+0x7a>
    }
  }

  return idx;
 800b4a6:	687b      	ldr	r3, [r7, #4]
}
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	371c      	adds	r7, #28
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	bd90      	pop	{r4, r7, pc}

0800b4b0 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b088      	sub	sp, #32
 800b4b4:	af04      	add	r7, sp, #16
 800b4b6:	60f8      	str	r0, [r7, #12]
 800b4b8:	60b9      	str	r1, [r7, #8]
 800b4ba:	607a      	str	r2, [r7, #4]
 800b4bc:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 800b4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c0:	f003 0302 	and.w	r3, r3, #2
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d136      	bne.n	800b536 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800b4c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d018      	beq.n	800b500 <_ntoa_format+0x50>
 800b4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4d0:	f003 0301 	and.w	r3, r3, #1
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d013      	beq.n	800b500 <_ntoa_format+0x50>
 800b4d8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d104      	bne.n	800b4ea <_ntoa_format+0x3a>
 800b4e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4e2:	f003 030c 	and.w	r3, r3, #12
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d00a      	beq.n	800b500 <_ntoa_format+0x50>
      width--;
 800b4ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4ec:	3b01      	subs	r3, #1
 800b4ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800b4f0:	e006      	b.n	800b500 <_ntoa_format+0x50>
      buf[len++] = '0';
 800b4f2:	69fb      	ldr	r3, [r7, #28]
 800b4f4:	1c5a      	adds	r2, r3, #1
 800b4f6:	61fa      	str	r2, [r7, #28]
 800b4f8:	69ba      	ldr	r2, [r7, #24]
 800b4fa:	4413      	add	r3, r2
 800b4fc:	2230      	movs	r2, #48	; 0x30
 800b4fe:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800b500:	69fa      	ldr	r2, [r7, #28]
 800b502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b504:	429a      	cmp	r2, r3
 800b506:	d20a      	bcs.n	800b51e <_ntoa_format+0x6e>
 800b508:	69fb      	ldr	r3, [r7, #28]
 800b50a:	2b1f      	cmp	r3, #31
 800b50c:	d9f1      	bls.n	800b4f2 <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800b50e:	e006      	b.n	800b51e <_ntoa_format+0x6e>
      buf[len++] = '0';
 800b510:	69fb      	ldr	r3, [r7, #28]
 800b512:	1c5a      	adds	r2, r3, #1
 800b514:	61fa      	str	r2, [r7, #28]
 800b516:	69ba      	ldr	r2, [r7, #24]
 800b518:	4413      	add	r3, r2
 800b51a:	2230      	movs	r2, #48	; 0x30
 800b51c:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800b51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b520:	f003 0301 	and.w	r3, r3, #1
 800b524:	2b00      	cmp	r3, #0
 800b526:	d006      	beq.n	800b536 <_ntoa_format+0x86>
 800b528:	69fa      	ldr	r2, [r7, #28]
 800b52a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b52c:	429a      	cmp	r2, r3
 800b52e:	d202      	bcs.n	800b536 <_ntoa_format+0x86>
 800b530:	69fb      	ldr	r3, [r7, #28]
 800b532:	2b1f      	cmp	r3, #31
 800b534:	d9ec      	bls.n	800b510 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 800b536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b538:	f003 0310 	and.w	r3, r3, #16
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d058      	beq.n	800b5f2 <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 800b540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b542:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b546:	2b00      	cmp	r3, #0
 800b548:	d116      	bne.n	800b578 <_ntoa_format+0xc8>
 800b54a:	69fb      	ldr	r3, [r7, #28]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d013      	beq.n	800b578 <_ntoa_format+0xc8>
 800b550:	69fa      	ldr	r2, [r7, #28]
 800b552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b554:	429a      	cmp	r2, r3
 800b556:	d003      	beq.n	800b560 <_ntoa_format+0xb0>
 800b558:	69fa      	ldr	r2, [r7, #28]
 800b55a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b55c:	429a      	cmp	r2, r3
 800b55e:	d10b      	bne.n	800b578 <_ntoa_format+0xc8>
      len--;
 800b560:	69fb      	ldr	r3, [r7, #28]
 800b562:	3b01      	subs	r3, #1
 800b564:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 800b566:	69fb      	ldr	r3, [r7, #28]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d005      	beq.n	800b578 <_ntoa_format+0xc8>
 800b56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b56e:	2b10      	cmp	r3, #16
 800b570:	d102      	bne.n	800b578 <_ntoa_format+0xc8>
        len--;
 800b572:	69fb      	ldr	r3, [r7, #28]
 800b574:	3b01      	subs	r3, #1
 800b576:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800b578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b57a:	2b10      	cmp	r3, #16
 800b57c:	d10f      	bne.n	800b59e <_ntoa_format+0xee>
 800b57e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b580:	f003 0320 	and.w	r3, r3, #32
 800b584:	2b00      	cmp	r3, #0
 800b586:	d10a      	bne.n	800b59e <_ntoa_format+0xee>
 800b588:	69fb      	ldr	r3, [r7, #28]
 800b58a:	2b1f      	cmp	r3, #31
 800b58c:	d807      	bhi.n	800b59e <_ntoa_format+0xee>
      buf[len++] = 'x';
 800b58e:	69fb      	ldr	r3, [r7, #28]
 800b590:	1c5a      	adds	r2, r3, #1
 800b592:	61fa      	str	r2, [r7, #28]
 800b594:	69ba      	ldr	r2, [r7, #24]
 800b596:	4413      	add	r3, r2
 800b598:	2278      	movs	r2, #120	; 0x78
 800b59a:	701a      	strb	r2, [r3, #0]
 800b59c:	e01f      	b.n	800b5de <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800b59e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5a0:	2b10      	cmp	r3, #16
 800b5a2:	d10f      	bne.n	800b5c4 <_ntoa_format+0x114>
 800b5a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5a6:	f003 0320 	and.w	r3, r3, #32
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d00a      	beq.n	800b5c4 <_ntoa_format+0x114>
 800b5ae:	69fb      	ldr	r3, [r7, #28]
 800b5b0:	2b1f      	cmp	r3, #31
 800b5b2:	d807      	bhi.n	800b5c4 <_ntoa_format+0x114>
      buf[len++] = 'X';
 800b5b4:	69fb      	ldr	r3, [r7, #28]
 800b5b6:	1c5a      	adds	r2, r3, #1
 800b5b8:	61fa      	str	r2, [r7, #28]
 800b5ba:	69ba      	ldr	r2, [r7, #24]
 800b5bc:	4413      	add	r3, r2
 800b5be:	2258      	movs	r2, #88	; 0x58
 800b5c0:	701a      	strb	r2, [r3, #0]
 800b5c2:	e00c      	b.n	800b5de <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800b5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5c6:	2b02      	cmp	r3, #2
 800b5c8:	d109      	bne.n	800b5de <_ntoa_format+0x12e>
 800b5ca:	69fb      	ldr	r3, [r7, #28]
 800b5cc:	2b1f      	cmp	r3, #31
 800b5ce:	d806      	bhi.n	800b5de <_ntoa_format+0x12e>
      buf[len++] = 'b';
 800b5d0:	69fb      	ldr	r3, [r7, #28]
 800b5d2:	1c5a      	adds	r2, r3, #1
 800b5d4:	61fa      	str	r2, [r7, #28]
 800b5d6:	69ba      	ldr	r2, [r7, #24]
 800b5d8:	4413      	add	r3, r2
 800b5da:	2262      	movs	r2, #98	; 0x62
 800b5dc:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800b5de:	69fb      	ldr	r3, [r7, #28]
 800b5e0:	2b1f      	cmp	r3, #31
 800b5e2:	d806      	bhi.n	800b5f2 <_ntoa_format+0x142>
      buf[len++] = '0';
 800b5e4:	69fb      	ldr	r3, [r7, #28]
 800b5e6:	1c5a      	adds	r2, r3, #1
 800b5e8:	61fa      	str	r2, [r7, #28]
 800b5ea:	69ba      	ldr	r2, [r7, #24]
 800b5ec:	4413      	add	r3, r2
 800b5ee:	2230      	movs	r2, #48	; 0x30
 800b5f0:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800b5f2:	69fb      	ldr	r3, [r7, #28]
 800b5f4:	2b1f      	cmp	r3, #31
 800b5f6:	d824      	bhi.n	800b642 <_ntoa_format+0x192>
    if (negative) {
 800b5f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d007      	beq.n	800b610 <_ntoa_format+0x160>
      buf[len++] = '-';
 800b600:	69fb      	ldr	r3, [r7, #28]
 800b602:	1c5a      	adds	r2, r3, #1
 800b604:	61fa      	str	r2, [r7, #28]
 800b606:	69ba      	ldr	r2, [r7, #24]
 800b608:	4413      	add	r3, r2
 800b60a:	222d      	movs	r2, #45	; 0x2d
 800b60c:	701a      	strb	r2, [r3, #0]
 800b60e:	e018      	b.n	800b642 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 800b610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b612:	f003 0304 	and.w	r3, r3, #4
 800b616:	2b00      	cmp	r3, #0
 800b618:	d007      	beq.n	800b62a <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800b61a:	69fb      	ldr	r3, [r7, #28]
 800b61c:	1c5a      	adds	r2, r3, #1
 800b61e:	61fa      	str	r2, [r7, #28]
 800b620:	69ba      	ldr	r2, [r7, #24]
 800b622:	4413      	add	r3, r2
 800b624:	222b      	movs	r2, #43	; 0x2b
 800b626:	701a      	strb	r2, [r3, #0]
 800b628:	e00b      	b.n	800b642 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 800b62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b62c:	f003 0308 	and.w	r3, r3, #8
 800b630:	2b00      	cmp	r3, #0
 800b632:	d006      	beq.n	800b642 <_ntoa_format+0x192>
      buf[len++] = ' ';
 800b634:	69fb      	ldr	r3, [r7, #28]
 800b636:	1c5a      	adds	r2, r3, #1
 800b638:	61fa      	str	r2, [r7, #28]
 800b63a:	69ba      	ldr	r2, [r7, #24]
 800b63c:	4413      	add	r3, r2
 800b63e:	2220      	movs	r2, #32
 800b640:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800b642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b644:	9303      	str	r3, [sp, #12]
 800b646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b648:	9302      	str	r3, [sp, #8]
 800b64a:	69fb      	ldr	r3, [r7, #28]
 800b64c:	9301      	str	r3, [sp, #4]
 800b64e:	69bb      	ldr	r3, [r7, #24]
 800b650:	9300      	str	r3, [sp, #0]
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	687a      	ldr	r2, [r7, #4]
 800b656:	68b9      	ldr	r1, [r7, #8]
 800b658:	68f8      	ldr	r0, [r7, #12]
 800b65a:	f7ff fed9 	bl	800b410 <_out_rev>
 800b65e:	4603      	mov	r3, r0
}
 800b660:	4618      	mov	r0, r3
 800b662:	3710      	adds	r7, #16
 800b664:	46bd      	mov	sp, r7
 800b666:	bd80      	pop	{r7, pc}

0800b668 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b096      	sub	sp, #88	; 0x58
 800b66c:	af08      	add	r7, sp, #32
 800b66e:	60f8      	str	r0, [r7, #12]
 800b670:	60b9      	str	r1, [r7, #8]
 800b672:	607a      	str	r2, [r7, #4]
 800b674:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800b676:	2300      	movs	r3, #0
 800b678:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800b67a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d103      	bne.n	800b688 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 800b680:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b682:	f023 0310 	bic.w	r3, r3, #16
 800b686:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800b688:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b68a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d002      	beq.n	800b698 <_ntoa_long+0x30>
 800b692:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b694:	2b00      	cmp	r3, #0
 800b696:	d032      	beq.n	800b6fe <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 800b698:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b69a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b69c:	fbb3 f2f2 	udiv	r2, r3, r2
 800b6a0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b6a2:	fb01 f202 	mul.w	r2, r1, r2
 800b6a6:	1a9b      	subs	r3, r3, r2
 800b6a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800b6ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b6b0:	2b09      	cmp	r3, #9
 800b6b2:	d804      	bhi.n	800b6be <_ntoa_long+0x56>
 800b6b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b6b8:	3330      	adds	r3, #48	; 0x30
 800b6ba:	b2da      	uxtb	r2, r3
 800b6bc:	e00d      	b.n	800b6da <_ntoa_long+0x72>
 800b6be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b6c0:	f003 0320 	and.w	r3, r3, #32
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d001      	beq.n	800b6cc <_ntoa_long+0x64>
 800b6c8:	2241      	movs	r2, #65	; 0x41
 800b6ca:	e000      	b.n	800b6ce <_ntoa_long+0x66>
 800b6cc:	2261      	movs	r2, #97	; 0x61
 800b6ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b6d2:	4413      	add	r3, r2
 800b6d4:	b2db      	uxtb	r3, r3
 800b6d6:	3b0a      	subs	r3, #10
 800b6d8:	b2da      	uxtb	r2, r3
 800b6da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6dc:	1c59      	adds	r1, r3, #1
 800b6de:	6379      	str	r1, [r7, #52]	; 0x34
 800b6e0:	3338      	adds	r3, #56	; 0x38
 800b6e2:	443b      	add	r3, r7
 800b6e4:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800b6e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b6ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b6ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6f0:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800b6f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d002      	beq.n	800b6fe <_ntoa_long+0x96>
 800b6f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6fa:	2b1f      	cmp	r3, #31
 800b6fc:	d9cc      	bls.n	800b698 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800b6fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b700:	9306      	str	r3, [sp, #24]
 800b702:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b704:	9305      	str	r3, [sp, #20]
 800b706:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b708:	9304      	str	r3, [sp, #16]
 800b70a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b70c:	9303      	str	r3, [sp, #12]
 800b70e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800b712:	9302      	str	r3, [sp, #8]
 800b714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b716:	9301      	str	r3, [sp, #4]
 800b718:	f107 0310 	add.w	r3, r7, #16
 800b71c:	9300      	str	r3, [sp, #0]
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	687a      	ldr	r2, [r7, #4]
 800b722:	68b9      	ldr	r1, [r7, #8]
 800b724:	68f8      	ldr	r0, [r7, #12]
 800b726:	f7ff fec3 	bl	800b4b0 <_ntoa_format>
 800b72a:	4603      	mov	r3, r0
}
 800b72c:	4618      	mov	r0, r3
 800b72e:	3738      	adds	r7, #56	; 0x38
 800b730:	46bd      	mov	sp, r7
 800b732:	bd80      	pop	{r7, pc}

0800b734 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b096      	sub	sp, #88	; 0x58
 800b738:	af08      	add	r7, sp, #32
 800b73a:	60f8      	str	r0, [r7, #12]
 800b73c:	60b9      	str	r1, [r7, #8]
 800b73e:	607a      	str	r2, [r7, #4]
 800b740:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800b742:	2300      	movs	r3, #0
 800b744:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800b746:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b74a:	4313      	orrs	r3, r2
 800b74c:	d103      	bne.n	800b756 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 800b74e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b750:	f023 0310 	bic.w	r3, r3, #16
 800b754:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800b756:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b758:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d003      	beq.n	800b768 <_ntoa_long_long+0x34>
 800b760:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b764:	4313      	orrs	r3, r2
 800b766:	d037      	beq.n	800b7d8 <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 800b768:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800b76c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b770:	f7f5 faf2 	bl	8000d58 <__aeabi_uldivmod>
 800b774:	4613      	mov	r3, r2
 800b776:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800b77a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b77e:	2b09      	cmp	r3, #9
 800b780:	d804      	bhi.n	800b78c <_ntoa_long_long+0x58>
 800b782:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b786:	3330      	adds	r3, #48	; 0x30
 800b788:	b2da      	uxtb	r2, r3
 800b78a:	e00d      	b.n	800b7a8 <_ntoa_long_long+0x74>
 800b78c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b78e:	f003 0320 	and.w	r3, r3, #32
 800b792:	2b00      	cmp	r3, #0
 800b794:	d001      	beq.n	800b79a <_ntoa_long_long+0x66>
 800b796:	2241      	movs	r2, #65	; 0x41
 800b798:	e000      	b.n	800b79c <_ntoa_long_long+0x68>
 800b79a:	2261      	movs	r2, #97	; 0x61
 800b79c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b7a0:	4413      	add	r3, r2
 800b7a2:	b2db      	uxtb	r3, r3
 800b7a4:	3b0a      	subs	r3, #10
 800b7a6:	b2da      	uxtb	r2, r3
 800b7a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7aa:	1c59      	adds	r1, r3, #1
 800b7ac:	6379      	str	r1, [r7, #52]	; 0x34
 800b7ae:	3338      	adds	r3, #56	; 0x38
 800b7b0:	443b      	add	r3, r7
 800b7b2:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800b7b6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b7ba:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800b7be:	f7f5 facb 	bl	8000d58 <__aeabi_uldivmod>
 800b7c2:	4602      	mov	r2, r0
 800b7c4:	460b      	mov	r3, r1
 800b7c6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800b7ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b7ce:	4313      	orrs	r3, r2
 800b7d0:	d002      	beq.n	800b7d8 <_ntoa_long_long+0xa4>
 800b7d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7d4:	2b1f      	cmp	r3, #31
 800b7d6:	d9c7      	bls.n	800b768 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800b7d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b7da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b7dc:	9206      	str	r2, [sp, #24]
 800b7de:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b7e0:	9205      	str	r2, [sp, #20]
 800b7e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b7e4:	9204      	str	r2, [sp, #16]
 800b7e6:	9303      	str	r3, [sp, #12]
 800b7e8:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800b7ec:	9302      	str	r3, [sp, #8]
 800b7ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7f0:	9301      	str	r3, [sp, #4]
 800b7f2:	f107 0310 	add.w	r3, r7, #16
 800b7f6:	9300      	str	r3, [sp, #0]
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	687a      	ldr	r2, [r7, #4]
 800b7fc:	68b9      	ldr	r1, [r7, #8]
 800b7fe:	68f8      	ldr	r0, [r7, #12]
 800b800:	f7ff fe56 	bl	800b4b0 <_ntoa_format>
 800b804:	4603      	mov	r3, r0
}
 800b806:	4618      	mov	r0, r3
 800b808:	3738      	adds	r7, #56	; 0x38
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bd80      	pop	{r7, pc}
	...

0800b810 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 800b810:	b590      	push	{r4, r7, lr}
 800b812:	b09d      	sub	sp, #116	; 0x74
 800b814:	af04      	add	r7, sp, #16
 800b816:	6178      	str	r0, [r7, #20]
 800b818:	6139      	str	r1, [r7, #16]
 800b81a:	60fa      	str	r2, [r7, #12]
 800b81c:	60bb      	str	r3, [r7, #8]
 800b81e:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 800b822:	2300      	movs	r3, #0
 800b824:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 800b826:	f04f 0200 	mov.w	r2, #0
 800b82a:	f04f 0300 	mov.w	r3, #0
 800b82e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 800b832:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b836:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b83a:	f7f5 f95d 	bl	8000af8 <__aeabi_dcmpeq>
 800b83e:	4603      	mov	r3, r0
 800b840:	2b00      	cmp	r3, #0
 800b842:	d10f      	bne.n	800b864 <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 800b844:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b846:	9303      	str	r3, [sp, #12]
 800b848:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b84a:	9302      	str	r3, [sp, #8]
 800b84c:	2303      	movs	r3, #3
 800b84e:	9301      	str	r3, [sp, #4]
 800b850:	4ba7      	ldr	r3, [pc, #668]	; (800baf0 <_ftoa+0x2e0>)
 800b852:	9300      	str	r3, [sp, #0]
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	68fa      	ldr	r2, [r7, #12]
 800b858:	6939      	ldr	r1, [r7, #16]
 800b85a:	6978      	ldr	r0, [r7, #20]
 800b85c:	f7ff fdd8 	bl	800b410 <_out_rev>
 800b860:	4603      	mov	r3, r0
 800b862:	e222      	b.n	800bcaa <_ftoa+0x49a>
  if (value < -DBL_MAX)
 800b864:	f04f 32ff 	mov.w	r2, #4294967295
 800b868:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800b86c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b870:	f7f5 f94c 	bl	8000b0c <__aeabi_dcmplt>
 800b874:	4603      	mov	r3, r0
 800b876:	2b00      	cmp	r3, #0
 800b878:	d00f      	beq.n	800b89a <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 800b87a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b87c:	9303      	str	r3, [sp, #12]
 800b87e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b880:	9302      	str	r3, [sp, #8]
 800b882:	2304      	movs	r3, #4
 800b884:	9301      	str	r3, [sp, #4]
 800b886:	4b9b      	ldr	r3, [pc, #620]	; (800baf4 <_ftoa+0x2e4>)
 800b888:	9300      	str	r3, [sp, #0]
 800b88a:	68bb      	ldr	r3, [r7, #8]
 800b88c:	68fa      	ldr	r2, [r7, #12]
 800b88e:	6939      	ldr	r1, [r7, #16]
 800b890:	6978      	ldr	r0, [r7, #20]
 800b892:	f7ff fdbd 	bl	800b410 <_out_rev>
 800b896:	4603      	mov	r3, r0
 800b898:	e207      	b.n	800bcaa <_ftoa+0x49a>
  if (value > DBL_MAX)
 800b89a:	f04f 32ff 	mov.w	r2, #4294967295
 800b89e:	4b96      	ldr	r3, [pc, #600]	; (800baf8 <_ftoa+0x2e8>)
 800b8a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b8a4:	f7f5 f950 	bl	8000b48 <__aeabi_dcmpgt>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d01d      	beq.n	800b8ea <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 800b8ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b8b0:	f003 0304 	and.w	r3, r3, #4
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d001      	beq.n	800b8bc <_ftoa+0xac>
 800b8b8:	4b90      	ldr	r3, [pc, #576]	; (800bafc <_ftoa+0x2ec>)
 800b8ba:	e000      	b.n	800b8be <_ftoa+0xae>
 800b8bc:	4b90      	ldr	r3, [pc, #576]	; (800bb00 <_ftoa+0x2f0>)
 800b8be:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b8c0:	f002 0204 	and.w	r2, r2, #4
 800b8c4:	2a00      	cmp	r2, #0
 800b8c6:	d001      	beq.n	800b8cc <_ftoa+0xbc>
 800b8c8:	2204      	movs	r2, #4
 800b8ca:	e000      	b.n	800b8ce <_ftoa+0xbe>
 800b8cc:	2203      	movs	r2, #3
 800b8ce:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800b8d0:	9103      	str	r1, [sp, #12]
 800b8d2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800b8d4:	9102      	str	r1, [sp, #8]
 800b8d6:	9201      	str	r2, [sp, #4]
 800b8d8:	9300      	str	r3, [sp, #0]
 800b8da:	68bb      	ldr	r3, [r7, #8]
 800b8dc:	68fa      	ldr	r2, [r7, #12]
 800b8de:	6939      	ldr	r1, [r7, #16]
 800b8e0:	6978      	ldr	r0, [r7, #20]
 800b8e2:	f7ff fd95 	bl	800b410 <_out_rev>
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	e1df      	b.n	800bcaa <_ftoa+0x49a>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 800b8ea:	a37d      	add	r3, pc, #500	; (adr r3, 800bae0 <_ftoa+0x2d0>)
 800b8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b8f4:	f7f5 f928 	bl	8000b48 <__aeabi_dcmpgt>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d109      	bne.n	800b912 <_ftoa+0x102>
 800b8fe:	a37a      	add	r3, pc, #488	; (adr r3, 800bae8 <_ftoa+0x2d8>)
 800b900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b904:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b908:	f7f5 f900 	bl	8000b0c <__aeabi_dcmplt>
 800b90c:	4603      	mov	r3, r0
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d00f      	beq.n	800b932 <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800b912:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b914:	9302      	str	r3, [sp, #8]
 800b916:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b918:	9301      	str	r3, [sp, #4]
 800b91a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b91c:	9300      	str	r3, [sp, #0]
 800b91e:	ed97 0b00 	vldr	d0, [r7]
 800b922:	68bb      	ldr	r3, [r7, #8]
 800b924:	68fa      	ldr	r2, [r7, #12]
 800b926:	6939      	ldr	r1, [r7, #16]
 800b928:	6978      	ldr	r0, [r7, #20]
 800b92a:	f000 f9c9 	bl	800bcc0 <_etoa>
 800b92e:	4603      	mov	r3, r0
 800b930:	e1bb      	b.n	800bcaa <_ftoa+0x49a>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 800b932:	2300      	movs	r3, #0
 800b934:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 800b938:	f04f 0200 	mov.w	r2, #0
 800b93c:	f04f 0300 	mov.w	r3, #0
 800b940:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b944:	f7f5 f8e2 	bl	8000b0c <__aeabi_dcmplt>
 800b948:	4603      	mov	r3, r0
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d00e      	beq.n	800b96c <_ftoa+0x15c>
    negative = true;
 800b94e:	2301      	movs	r3, #1
 800b950:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 800b954:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b958:	f04f 0000 	mov.w	r0, #0
 800b95c:	f04f 0100 	mov.w	r1, #0
 800b960:	f7f4 fcaa 	bl	80002b8 <__aeabi_dsub>
 800b964:	4602      	mov	r2, r0
 800b966:	460b      	mov	r3, r1
 800b968:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 800b96c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b96e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b972:	2b00      	cmp	r3, #0
 800b974:	d10d      	bne.n	800b992 <_ftoa+0x182>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800b976:	2306      	movs	r3, #6
 800b978:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800b97a:	e00a      	b.n	800b992 <_ftoa+0x182>
    buf[len++] = '0';
 800b97c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b97e:	1c5a      	adds	r2, r3, #1
 800b980:	65fa      	str	r2, [r7, #92]	; 0x5c
 800b982:	3360      	adds	r3, #96	; 0x60
 800b984:	443b      	add	r3, r7
 800b986:	2230      	movs	r2, #48	; 0x30
 800b988:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 800b98c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b98e:	3b01      	subs	r3, #1
 800b990:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800b992:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b994:	2b1f      	cmp	r3, #31
 800b996:	d802      	bhi.n	800b99e <_ftoa+0x18e>
 800b998:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b99a:	2b09      	cmp	r3, #9
 800b99c:	d8ee      	bhi.n	800b97c <_ftoa+0x16c>
  }

  int whole = (int)value;
 800b99e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b9a2:	f7f5 f8f1 	bl	8000b88 <__aeabi_d2iz>
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 800b9aa:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b9ac:	f7f4 fdd2 	bl	8000554 <__aeabi_i2d>
 800b9b0:	4602      	mov	r2, r0
 800b9b2:	460b      	mov	r3, r1
 800b9b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b9b8:	f7f4 fc7e 	bl	80002b8 <__aeabi_dsub>
 800b9bc:	4602      	mov	r2, r0
 800b9be:	460b      	mov	r3, r1
 800b9c0:	4610      	mov	r0, r2
 800b9c2:	4619      	mov	r1, r3
 800b9c4:	4a4f      	ldr	r2, [pc, #316]	; (800bb04 <_ftoa+0x2f4>)
 800b9c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b9c8:	00db      	lsls	r3, r3, #3
 800b9ca:	4413      	add	r3, r2
 800b9cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d0:	f7f4 fe2a 	bl	8000628 <__aeabi_dmul>
 800b9d4:	4602      	mov	r2, r0
 800b9d6:	460b      	mov	r3, r1
 800b9d8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 800b9dc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800b9e0:	f7f5 f8fa 	bl	8000bd8 <__aeabi_d2uiz>
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 800b9e8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b9ea:	f7f4 fda3 	bl	8000534 <__aeabi_ui2d>
 800b9ee:	4602      	mov	r2, r0
 800b9f0:	460b      	mov	r3, r1
 800b9f2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800b9f6:	f7f4 fc5f 	bl	80002b8 <__aeabi_dsub>
 800b9fa:	4602      	mov	r2, r0
 800b9fc:	460b      	mov	r3, r1
 800b9fe:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 800ba02:	f04f 0200 	mov.w	r2, #0
 800ba06:	4b40      	ldr	r3, [pc, #256]	; (800bb08 <_ftoa+0x2f8>)
 800ba08:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800ba0c:	f7f5 f89c 	bl	8000b48 <__aeabi_dcmpgt>
 800ba10:	4603      	mov	r3, r0
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d016      	beq.n	800ba44 <_ftoa+0x234>
    ++frac;
 800ba16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba18:	3301      	adds	r3, #1
 800ba1a:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 800ba1c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800ba1e:	f7f4 fd89 	bl	8000534 <__aeabi_ui2d>
 800ba22:	4a38      	ldr	r2, [pc, #224]	; (800bb04 <_ftoa+0x2f4>)
 800ba24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ba26:	00db      	lsls	r3, r3, #3
 800ba28:	4413      	add	r3, r2
 800ba2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba2e:	f7f5 f881 	bl	8000b34 <__aeabi_dcmpge>
 800ba32:	4603      	mov	r3, r0
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d01a      	beq.n	800ba6e <_ftoa+0x25e>
      frac = 0;
 800ba38:	2300      	movs	r3, #0
 800ba3a:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 800ba3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba3e:	3301      	adds	r3, #1
 800ba40:	657b      	str	r3, [r7, #84]	; 0x54
 800ba42:	e014      	b.n	800ba6e <_ftoa+0x25e>
    }
  }
  else if (diff < 0.5) {
 800ba44:	f04f 0200 	mov.w	r2, #0
 800ba48:	4b2f      	ldr	r3, [pc, #188]	; (800bb08 <_ftoa+0x2f8>)
 800ba4a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800ba4e:	f7f5 f85d 	bl	8000b0c <__aeabi_dcmplt>
 800ba52:	4603      	mov	r3, r0
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d10a      	bne.n	800ba6e <_ftoa+0x25e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 800ba58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d004      	beq.n	800ba68 <_ftoa+0x258>
 800ba5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba60:	f003 0301 	and.w	r3, r3, #1
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d002      	beq.n	800ba6e <_ftoa+0x25e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 800ba68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba6a:	3301      	adds	r3, #1
 800ba6c:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 800ba6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d14b      	bne.n	800bb0c <_ftoa+0x2fc>
    diff = value - (double)whole;
 800ba74:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ba76:	f7f4 fd6d 	bl	8000554 <__aeabi_i2d>
 800ba7a:	4602      	mov	r2, r0
 800ba7c:	460b      	mov	r3, r1
 800ba7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ba82:	f7f4 fc19 	bl	80002b8 <__aeabi_dsub>
 800ba86:	4602      	mov	r2, r0
 800ba88:	460b      	mov	r3, r1
 800ba8a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 800ba8e:	2301      	movs	r3, #1
 800ba90:	461c      	mov	r4, r3
 800ba92:	f04f 0200 	mov.w	r2, #0
 800ba96:	4b1c      	ldr	r3, [pc, #112]	; (800bb08 <_ftoa+0x2f8>)
 800ba98:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800ba9c:	f7f5 f836 	bl	8000b0c <__aeabi_dcmplt>
 800baa0:	4603      	mov	r3, r0
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d101      	bne.n	800baaa <_ftoa+0x29a>
 800baa6:	2300      	movs	r3, #0
 800baa8:	461c      	mov	r4, r3
 800baaa:	b2e3      	uxtb	r3, r4
 800baac:	f083 0301 	eor.w	r3, r3, #1
 800bab0:	b2db      	uxtb	r3, r3
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d109      	bne.n	800baca <_ftoa+0x2ba>
 800bab6:	f04f 0200 	mov.w	r2, #0
 800baba:	4b13      	ldr	r3, [pc, #76]	; (800bb08 <_ftoa+0x2f8>)
 800babc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800bac0:	f7f5 f842 	bl	8000b48 <__aeabi_dcmpgt>
 800bac4:	4603      	mov	r3, r0
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d064      	beq.n	800bb94 <_ftoa+0x384>
 800baca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bacc:	f003 0301 	and.w	r3, r3, #1
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	f000 8081 	beq.w	800bbd8 <_ftoa+0x3c8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 800bad6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bad8:	3301      	adds	r3, #1
 800bada:	657b      	str	r3, [r7, #84]	; 0x54
 800badc:	e07c      	b.n	800bbd8 <_ftoa+0x3c8>
 800bade:	bf00      	nop
 800bae0:	00000000 	.word	0x00000000
 800bae4:	41cdcd65 	.word	0x41cdcd65
 800bae8:	00000000 	.word	0x00000000
 800baec:	c1cdcd65 	.word	0xc1cdcd65
 800baf0:	08020528 	.word	0x08020528
 800baf4:	0802052c 	.word	0x0802052c
 800baf8:	7fefffff 	.word	0x7fefffff
 800bafc:	08020534 	.word	0x08020534
 800bb00:	0802053c 	.word	0x0802053c
 800bb04:	080253a8 	.word	0x080253a8
 800bb08:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 800bb0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bb0e:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800bb10:	e01f      	b.n	800bb52 <_ftoa+0x342>
      --count;
 800bb12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb14:	3b01      	subs	r3, #1
 800bb16:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 800bb18:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bb1a:	4b66      	ldr	r3, [pc, #408]	; (800bcb4 <_ftoa+0x4a4>)
 800bb1c:	fba3 2301 	umull	r2, r3, r3, r1
 800bb20:	08da      	lsrs	r2, r3, #3
 800bb22:	4613      	mov	r3, r2
 800bb24:	009b      	lsls	r3, r3, #2
 800bb26:	4413      	add	r3, r2
 800bb28:	005b      	lsls	r3, r3, #1
 800bb2a:	1aca      	subs	r2, r1, r3
 800bb2c:	b2d2      	uxtb	r2, r2
 800bb2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb30:	1c59      	adds	r1, r3, #1
 800bb32:	65f9      	str	r1, [r7, #92]	; 0x5c
 800bb34:	3230      	adds	r2, #48	; 0x30
 800bb36:	b2d2      	uxtb	r2, r2
 800bb38:	3360      	adds	r3, #96	; 0x60
 800bb3a:	443b      	add	r3, r7
 800bb3c:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 800bb40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb42:	4a5c      	ldr	r2, [pc, #368]	; (800bcb4 <_ftoa+0x4a4>)
 800bb44:	fba2 2303 	umull	r2, r3, r2, r3
 800bb48:	08db      	lsrs	r3, r3, #3
 800bb4a:	653b      	str	r3, [r7, #80]	; 0x50
 800bb4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d003      	beq.n	800bb5a <_ftoa+0x34a>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800bb52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb54:	2b1f      	cmp	r3, #31
 800bb56:	d9dc      	bls.n	800bb12 <_ftoa+0x302>
 800bb58:	e009      	b.n	800bb6e <_ftoa+0x35e>
        break;
 800bb5a:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800bb5c:	e007      	b.n	800bb6e <_ftoa+0x35e>
      buf[len++] = '0';
 800bb5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb60:	1c5a      	adds	r2, r3, #1
 800bb62:	65fa      	str	r2, [r7, #92]	; 0x5c
 800bb64:	3360      	adds	r3, #96	; 0x60
 800bb66:	443b      	add	r3, r7
 800bb68:	2230      	movs	r2, #48	; 0x30
 800bb6a:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800bb6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb70:	2b1f      	cmp	r3, #31
 800bb72:	d804      	bhi.n	800bb7e <_ftoa+0x36e>
 800bb74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb76:	1e5a      	subs	r2, r3, #1
 800bb78:	64fa      	str	r2, [r7, #76]	; 0x4c
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d1ef      	bne.n	800bb5e <_ftoa+0x34e>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800bb7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb80:	2b1f      	cmp	r3, #31
 800bb82:	d829      	bhi.n	800bbd8 <_ftoa+0x3c8>
      // add decimal
      buf[len++] = '.';
 800bb84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb86:	1c5a      	adds	r2, r3, #1
 800bb88:	65fa      	str	r2, [r7, #92]	; 0x5c
 800bb8a:	3360      	adds	r3, #96	; 0x60
 800bb8c:	443b      	add	r3, r7
 800bb8e:	222e      	movs	r2, #46	; 0x2e
 800bb90:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800bb94:	e020      	b.n	800bbd8 <_ftoa+0x3c8>
    buf[len++] = (char)(48 + (whole % 10));
 800bb96:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bb98:	4b47      	ldr	r3, [pc, #284]	; (800bcb8 <_ftoa+0x4a8>)
 800bb9a:	fb83 1302 	smull	r1, r3, r3, r2
 800bb9e:	1099      	asrs	r1, r3, #2
 800bba0:	17d3      	asrs	r3, r2, #31
 800bba2:	1ac9      	subs	r1, r1, r3
 800bba4:	460b      	mov	r3, r1
 800bba6:	009b      	lsls	r3, r3, #2
 800bba8:	440b      	add	r3, r1
 800bbaa:	005b      	lsls	r3, r3, #1
 800bbac:	1ad1      	subs	r1, r2, r3
 800bbae:	b2ca      	uxtb	r2, r1
 800bbb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bbb2:	1c59      	adds	r1, r3, #1
 800bbb4:	65f9      	str	r1, [r7, #92]	; 0x5c
 800bbb6:	3230      	adds	r2, #48	; 0x30
 800bbb8:	b2d2      	uxtb	r2, r2
 800bbba:	3360      	adds	r3, #96	; 0x60
 800bbbc:	443b      	add	r3, r7
 800bbbe:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 800bbc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bbc4:	4a3c      	ldr	r2, [pc, #240]	; (800bcb8 <_ftoa+0x4a8>)
 800bbc6:	fb82 1203 	smull	r1, r2, r2, r3
 800bbca:	1092      	asrs	r2, r2, #2
 800bbcc:	17db      	asrs	r3, r3, #31
 800bbce:	1ad3      	subs	r3, r2, r3
 800bbd0:	657b      	str	r3, [r7, #84]	; 0x54
 800bbd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d003      	beq.n	800bbe0 <_ftoa+0x3d0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800bbd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bbda:	2b1f      	cmp	r3, #31
 800bbdc:	d9db      	bls.n	800bb96 <_ftoa+0x386>
 800bbde:	e000      	b.n	800bbe2 <_ftoa+0x3d2>
      break;
 800bbe0:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 800bbe2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bbe4:	f003 0302 	and.w	r3, r3, #2
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d123      	bne.n	800bc34 <_ftoa+0x424>
 800bbec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bbee:	f003 0301 	and.w	r3, r3, #1
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d01e      	beq.n	800bc34 <_ftoa+0x424>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800bbf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d014      	beq.n	800bc26 <_ftoa+0x416>
 800bbfc:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d104      	bne.n	800bc0e <_ftoa+0x3fe>
 800bc04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc06:	f003 030c 	and.w	r3, r3, #12
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d00b      	beq.n	800bc26 <_ftoa+0x416>
      width--;
 800bc0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bc10:	3b01      	subs	r3, #1
 800bc12:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800bc14:	e007      	b.n	800bc26 <_ftoa+0x416>
      buf[len++] = '0';
 800bc16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc18:	1c5a      	adds	r2, r3, #1
 800bc1a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800bc1c:	3360      	adds	r3, #96	; 0x60
 800bc1e:	443b      	add	r3, r7
 800bc20:	2230      	movs	r2, #48	; 0x30
 800bc22:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800bc26:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bc28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bc2a:	429a      	cmp	r2, r3
 800bc2c:	d202      	bcs.n	800bc34 <_ftoa+0x424>
 800bc2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc30:	2b1f      	cmp	r3, #31
 800bc32:	d9f0      	bls.n	800bc16 <_ftoa+0x406>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800bc34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc36:	2b1f      	cmp	r3, #31
 800bc38:	d827      	bhi.n	800bc8a <_ftoa+0x47a>
    if (negative) {
 800bc3a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d008      	beq.n	800bc54 <_ftoa+0x444>
      buf[len++] = '-';
 800bc42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc44:	1c5a      	adds	r2, r3, #1
 800bc46:	65fa      	str	r2, [r7, #92]	; 0x5c
 800bc48:	3360      	adds	r3, #96	; 0x60
 800bc4a:	443b      	add	r3, r7
 800bc4c:	222d      	movs	r2, #45	; 0x2d
 800bc4e:	f803 2c48 	strb.w	r2, [r3, #-72]
 800bc52:	e01a      	b.n	800bc8a <_ftoa+0x47a>
    }
    else if (flags & FLAGS_PLUS) {
 800bc54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc56:	f003 0304 	and.w	r3, r3, #4
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d008      	beq.n	800bc70 <_ftoa+0x460>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800bc5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc60:	1c5a      	adds	r2, r3, #1
 800bc62:	65fa      	str	r2, [r7, #92]	; 0x5c
 800bc64:	3360      	adds	r3, #96	; 0x60
 800bc66:	443b      	add	r3, r7
 800bc68:	222b      	movs	r2, #43	; 0x2b
 800bc6a:	f803 2c48 	strb.w	r2, [r3, #-72]
 800bc6e:	e00c      	b.n	800bc8a <_ftoa+0x47a>
    }
    else if (flags & FLAGS_SPACE) {
 800bc70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc72:	f003 0308 	and.w	r3, r3, #8
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d007      	beq.n	800bc8a <_ftoa+0x47a>
      buf[len++] = ' ';
 800bc7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc7c:	1c5a      	adds	r2, r3, #1
 800bc7e:	65fa      	str	r2, [r7, #92]	; 0x5c
 800bc80:	3360      	adds	r3, #96	; 0x60
 800bc82:	443b      	add	r3, r7
 800bc84:	2220      	movs	r2, #32
 800bc86:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800bc8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc8c:	9303      	str	r3, [sp, #12]
 800bc8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bc90:	9302      	str	r3, [sp, #8]
 800bc92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc94:	9301      	str	r3, [sp, #4]
 800bc96:	f107 0318 	add.w	r3, r7, #24
 800bc9a:	9300      	str	r3, [sp, #0]
 800bc9c:	68bb      	ldr	r3, [r7, #8]
 800bc9e:	68fa      	ldr	r2, [r7, #12]
 800bca0:	6939      	ldr	r1, [r7, #16]
 800bca2:	6978      	ldr	r0, [r7, #20]
 800bca4:	f7ff fbb4 	bl	800b410 <_out_rev>
 800bca8:	4603      	mov	r3, r0
}
 800bcaa:	4618      	mov	r0, r3
 800bcac:	3764      	adds	r7, #100	; 0x64
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	bd90      	pop	{r4, r7, pc}
 800bcb2:	bf00      	nop
 800bcb4:	cccccccd 	.word	0xcccccccd
 800bcb8:	66666667 	.word	0x66666667
 800bcbc:	00000000 	.word	0x00000000

0800bcc0 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 800bcc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcc4:	b09f      	sub	sp, #124	; 0x7c
 800bcc6:	af06      	add	r7, sp, #24
 800bcc8:	6278      	str	r0, [r7, #36]	; 0x24
 800bcca:	6239      	str	r1, [r7, #32]
 800bccc:	61fa      	str	r2, [r7, #28]
 800bcce:	61bb      	str	r3, [r7, #24]
 800bcd0:	ed87 0b04 	vstr	d0, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 800bcd4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bcd8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800bcdc:	f7f4 ff0c 	bl	8000af8 <__aeabi_dcmpeq>
 800bce0:	4603      	mov	r3, r0
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d014      	beq.n	800bd10 <_etoa+0x50>
 800bce6:	f04f 32ff 	mov.w	r2, #4294967295
 800bcea:	4bc1      	ldr	r3, [pc, #772]	; (800bff0 <_etoa+0x330>)
 800bcec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800bcf0:	f7f4 ff2a 	bl	8000b48 <__aeabi_dcmpgt>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d10a      	bne.n	800bd10 <_etoa+0x50>
 800bcfa:	f04f 32ff 	mov.w	r2, #4294967295
 800bcfe:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800bd02:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800bd06:	f7f4 ff01 	bl	8000b0c <__aeabi_dcmplt>
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d012      	beq.n	800bd36 <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800bd10:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bd14:	9302      	str	r3, [sp, #8]
 800bd16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bd1a:	9301      	str	r3, [sp, #4]
 800bd1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bd20:	9300      	str	r3, [sp, #0]
 800bd22:	ed97 0b04 	vldr	d0, [r7, #16]
 800bd26:	69bb      	ldr	r3, [r7, #24]
 800bd28:	69fa      	ldr	r2, [r7, #28]
 800bd2a:	6a39      	ldr	r1, [r7, #32]
 800bd2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bd2e:	f7ff fd6f 	bl	800b810 <_ftoa>
 800bd32:	4603      	mov	r3, r0
 800bd34:	e23f      	b.n	800c1b6 <_etoa+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 800bd36:	2301      	movs	r3, #1
 800bd38:	461e      	mov	r6, r3
 800bd3a:	f04f 0200 	mov.w	r2, #0
 800bd3e:	f04f 0300 	mov.w	r3, #0
 800bd42:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800bd46:	f7f4 fee1 	bl	8000b0c <__aeabi_dcmplt>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d101      	bne.n	800bd54 <_etoa+0x94>
 800bd50:	2300      	movs	r3, #0
 800bd52:	461e      	mov	r6, r3
 800bd54:	f887 6053 	strb.w	r6, [r7, #83]	; 0x53
  if (negative) {
 800bd58:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d009      	beq.n	800bd74 <_etoa+0xb4>
    value = -value;
 800bd60:	693b      	ldr	r3, [r7, #16]
 800bd62:	603b      	str	r3, [r7, #0]
 800bd64:	697b      	ldr	r3, [r7, #20]
 800bd66:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800bd6a:	607b      	str	r3, [r7, #4]
 800bd6c:	ed97 7b00 	vldr	d7, [r7]
 800bd70:	ed87 7b04 	vstr	d7, [r7, #16]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 800bd74:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bd78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d102      	bne.n	800bd86 <_etoa+0xc6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800bd80:	2306      	movs	r3, #6
 800bd82:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 800bd86:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bd8a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 800bd8e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800bd92:	f04f 0200 	mov.w	r2, #0
 800bd96:	f04f 0300 	mov.w	r3, #0
 800bd9a:	0d0a      	lsrs	r2, r1, #20
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	4613      	mov	r3, r2
 800bda0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bda4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bda8:	64fb      	str	r3, [r7, #76]	; 0x4c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 800bdaa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bdae:	4690      	mov	r8, r2
 800bdb0:	f3c3 0913 	ubfx	r9, r3, #0, #20
 800bdb4:	4644      	mov	r4, r8
 800bdb6:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 800bdba:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bdbe:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 800bdc2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800bdc4:	f7f4 fbc6 	bl	8000554 <__aeabi_i2d>
 800bdc8:	a37d      	add	r3, pc, #500	; (adr r3, 800bfc0 <_etoa+0x300>)
 800bdca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdce:	f7f4 fc2b 	bl	8000628 <__aeabi_dmul>
 800bdd2:	4602      	mov	r2, r0
 800bdd4:	460b      	mov	r3, r1
 800bdd6:	4610      	mov	r0, r2
 800bdd8:	4619      	mov	r1, r3
 800bdda:	a37b      	add	r3, pc, #492	; (adr r3, 800bfc8 <_etoa+0x308>)
 800bddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bde0:	f7f4 fa6c 	bl	80002bc <__adddf3>
 800bde4:	4602      	mov	r2, r0
 800bde6:	460b      	mov	r3, r1
 800bde8:	4614      	mov	r4, r2
 800bdea:	461d      	mov	r5, r3
 800bdec:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800bdf0:	f04f 0200 	mov.w	r2, #0
 800bdf4:	4b7f      	ldr	r3, [pc, #508]	; (800bff4 <_etoa+0x334>)
 800bdf6:	f7f4 fa5f 	bl	80002b8 <__aeabi_dsub>
 800bdfa:	4602      	mov	r2, r0
 800bdfc:	460b      	mov	r3, r1
 800bdfe:	4610      	mov	r0, r2
 800be00:	4619      	mov	r1, r3
 800be02:	a373      	add	r3, pc, #460	; (adr r3, 800bfd0 <_etoa+0x310>)
 800be04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be08:	f7f4 fc0e 	bl	8000628 <__aeabi_dmul>
 800be0c:	4602      	mov	r2, r0
 800be0e:	460b      	mov	r3, r1
 800be10:	4620      	mov	r0, r4
 800be12:	4629      	mov	r1, r5
 800be14:	f7f4 fa52 	bl	80002bc <__adddf3>
 800be18:	4602      	mov	r2, r0
 800be1a:	460b      	mov	r3, r1
 800be1c:	4610      	mov	r0, r2
 800be1e:	4619      	mov	r1, r3
 800be20:	f7f4 feb2 	bl	8000b88 <__aeabi_d2iz>
 800be24:	4603      	mov	r3, r0
 800be26:	65fb      	str	r3, [r7, #92]	; 0x5c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 800be28:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800be2a:	f7f4 fb93 	bl	8000554 <__aeabi_i2d>
 800be2e:	a36a      	add	r3, pc, #424	; (adr r3, 800bfd8 <_etoa+0x318>)
 800be30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be34:	f7f4 fbf8 	bl	8000628 <__aeabi_dmul>
 800be38:	4602      	mov	r2, r0
 800be3a:	460b      	mov	r3, r1
 800be3c:	4610      	mov	r0, r2
 800be3e:	4619      	mov	r1, r3
 800be40:	f04f 0200 	mov.w	r2, #0
 800be44:	4b6c      	ldr	r3, [pc, #432]	; (800bff8 <_etoa+0x338>)
 800be46:	f7f4 fa39 	bl	80002bc <__adddf3>
 800be4a:	4602      	mov	r2, r0
 800be4c:	460b      	mov	r3, r1
 800be4e:	4610      	mov	r0, r2
 800be50:	4619      	mov	r1, r3
 800be52:	f7f4 fe99 	bl	8000b88 <__aeabi_d2iz>
 800be56:	4603      	mov	r3, r0
 800be58:	64fb      	str	r3, [r7, #76]	; 0x4c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 800be5a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800be5c:	f7f4 fb7a 	bl	8000554 <__aeabi_i2d>
 800be60:	a35f      	add	r3, pc, #380	; (adr r3, 800bfe0 <_etoa+0x320>)
 800be62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be66:	f7f4 fbdf 	bl	8000628 <__aeabi_dmul>
 800be6a:	4602      	mov	r2, r0
 800be6c:	460b      	mov	r3, r1
 800be6e:	4614      	mov	r4, r2
 800be70:	461d      	mov	r5, r3
 800be72:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800be74:	f7f4 fb6e 	bl	8000554 <__aeabi_i2d>
 800be78:	a35b      	add	r3, pc, #364	; (adr r3, 800bfe8 <_etoa+0x328>)
 800be7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be7e:	f7f4 fbd3 	bl	8000628 <__aeabi_dmul>
 800be82:	4602      	mov	r2, r0
 800be84:	460b      	mov	r3, r1
 800be86:	4620      	mov	r0, r4
 800be88:	4629      	mov	r1, r5
 800be8a:	f7f4 fa15 	bl	80002b8 <__aeabi_dsub>
 800be8e:	4602      	mov	r2, r0
 800be90:	460b      	mov	r3, r1
 800be92:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  const double z2 = z * z;
 800be96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800be9a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800be9e:	f7f4 fbc3 	bl	8000628 <__aeabi_dmul>
 800bea2:	4602      	mov	r2, r0
 800bea4:	460b      	mov	r3, r1
 800bea6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 800beaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800beac:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800beb0:	17da      	asrs	r2, r3, #31
 800beb2:	469a      	mov	sl, r3
 800beb4:	4693      	mov	fp, r2
 800beb6:	f04f 0200 	mov.w	r2, #0
 800beba:	f04f 0300 	mov.w	r3, #0
 800bebe:	ea4f 530a 	mov.w	r3, sl, lsl #20
 800bec2:	2200      	movs	r2, #0
 800bec4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 800bec8:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800becc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800bed0:	4602      	mov	r2, r0
 800bed2:	460b      	mov	r3, r1
 800bed4:	f7f4 f9f2 	bl	80002bc <__adddf3>
 800bed8:	4602      	mov	r2, r0
 800beda:	460b      	mov	r3, r1
 800bedc:	4690      	mov	r8, r2
 800bede:	4699      	mov	r9, r3
 800bee0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800bee4:	f04f 0000 	mov.w	r0, #0
 800bee8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800beec:	f7f4 f9e4 	bl	80002b8 <__aeabi_dsub>
 800bef0:	4602      	mov	r2, r0
 800bef2:	460b      	mov	r3, r1
 800bef4:	4692      	mov	sl, r2
 800bef6:	469b      	mov	fp, r3
 800bef8:	f04f 0200 	mov.w	r2, #0
 800befc:	4b3f      	ldr	r3, [pc, #252]	; (800bffc <_etoa+0x33c>)
 800befe:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800bf02:	f7f4 fcbb 	bl	800087c <__aeabi_ddiv>
 800bf06:	4602      	mov	r2, r0
 800bf08:	460b      	mov	r3, r1
 800bf0a:	4610      	mov	r0, r2
 800bf0c:	4619      	mov	r1, r3
 800bf0e:	f04f 0200 	mov.w	r2, #0
 800bf12:	4b3b      	ldr	r3, [pc, #236]	; (800c000 <_etoa+0x340>)
 800bf14:	f7f4 f9d2 	bl	80002bc <__adddf3>
 800bf18:	4602      	mov	r2, r0
 800bf1a:	460b      	mov	r3, r1
 800bf1c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800bf20:	f7f4 fcac 	bl	800087c <__aeabi_ddiv>
 800bf24:	4602      	mov	r2, r0
 800bf26:	460b      	mov	r3, r1
 800bf28:	4610      	mov	r0, r2
 800bf2a:	4619      	mov	r1, r3
 800bf2c:	f04f 0200 	mov.w	r2, #0
 800bf30:	4b34      	ldr	r3, [pc, #208]	; (800c004 <_etoa+0x344>)
 800bf32:	f7f4 f9c3 	bl	80002bc <__adddf3>
 800bf36:	4602      	mov	r2, r0
 800bf38:	460b      	mov	r3, r1
 800bf3a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800bf3e:	f7f4 fc9d 	bl	800087c <__aeabi_ddiv>
 800bf42:	4602      	mov	r2, r0
 800bf44:	460b      	mov	r3, r1
 800bf46:	4650      	mov	r0, sl
 800bf48:	4659      	mov	r1, fp
 800bf4a:	f7f4 f9b7 	bl	80002bc <__adddf3>
 800bf4e:	4602      	mov	r2, r0
 800bf50:	460b      	mov	r3, r1
 800bf52:	4640      	mov	r0, r8
 800bf54:	4649      	mov	r1, r9
 800bf56:	f7f4 fc91 	bl	800087c <__aeabi_ddiv>
 800bf5a:	4602      	mov	r2, r0
 800bf5c:	460b      	mov	r3, r1
 800bf5e:	4610      	mov	r0, r2
 800bf60:	4619      	mov	r1, r3
 800bf62:	f04f 0200 	mov.w	r2, #0
 800bf66:	4b28      	ldr	r3, [pc, #160]	; (800c008 <_etoa+0x348>)
 800bf68:	f7f4 f9a8 	bl	80002bc <__adddf3>
 800bf6c:	4602      	mov	r2, r0
 800bf6e:	460b      	mov	r3, r1
 800bf70:	4620      	mov	r0, r4
 800bf72:	4629      	mov	r1, r5
 800bf74:	f7f4 fb58 	bl	8000628 <__aeabi_dmul>
 800bf78:	4602      	mov	r2, r0
 800bf7a:	460b      	mov	r3, r1
 800bf7c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // correct for rounding errors
  if (value < conv.F) {
 800bf80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bf84:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800bf88:	f7f4 fdc0 	bl	8000b0c <__aeabi_dcmplt>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d00d      	beq.n	800bfae <_etoa+0x2ee>
    expval--;
 800bf92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf94:	3b01      	subs	r3, #1
 800bf96:	65fb      	str	r3, [r7, #92]	; 0x5c
    conv.F /= 10;
 800bf98:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800bf9c:	f04f 0200 	mov.w	r2, #0
 800bfa0:	4b17      	ldr	r3, [pc, #92]	; (800c000 <_etoa+0x340>)
 800bfa2:	f7f4 fc6b 	bl	800087c <__aeabi_ddiv>
 800bfa6:	4602      	mov	r2, r0
 800bfa8:	460b      	mov	r3, r1
 800bfaa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 800bfae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bfb0:	2b63      	cmp	r3, #99	; 0x63
 800bfb2:	dc2b      	bgt.n	800c00c <_etoa+0x34c>
 800bfb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bfb6:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800bfba:	db27      	blt.n	800c00c <_etoa+0x34c>
 800bfbc:	2304      	movs	r3, #4
 800bfbe:	e026      	b.n	800c00e <_etoa+0x34e>
 800bfc0:	509f79fb 	.word	0x509f79fb
 800bfc4:	3fd34413 	.word	0x3fd34413
 800bfc8:	8b60c8b3 	.word	0x8b60c8b3
 800bfcc:	3fc68a28 	.word	0x3fc68a28
 800bfd0:	636f4361 	.word	0x636f4361
 800bfd4:	3fd287a7 	.word	0x3fd287a7
 800bfd8:	0979a371 	.word	0x0979a371
 800bfdc:	400a934f 	.word	0x400a934f
 800bfe0:	bbb55516 	.word	0xbbb55516
 800bfe4:	40026bb1 	.word	0x40026bb1
 800bfe8:	fefa39ef 	.word	0xfefa39ef
 800bfec:	3fe62e42 	.word	0x3fe62e42
 800bff0:	7fefffff 	.word	0x7fefffff
 800bff4:	3ff80000 	.word	0x3ff80000
 800bff8:	3fe00000 	.word	0x3fe00000
 800bffc:	402c0000 	.word	0x402c0000
 800c000:	40240000 	.word	0x40240000
 800c004:	40180000 	.word	0x40180000
 800c008:	3ff00000 	.word	0x3ff00000
 800c00c:	2305      	movs	r3, #5
 800c00e:	65bb      	str	r3, [r7, #88]	; 0x58

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 800c010:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c014:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d03d      	beq.n	800c098 <_etoa+0x3d8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 800c01c:	a368      	add	r3, pc, #416	; (adr r3, 800c1c0 <_etoa+0x500>)
 800c01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c022:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c026:	f7f4 fd85 	bl	8000b34 <__aeabi_dcmpge>
 800c02a:	4603      	mov	r3, r0
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d024      	beq.n	800c07a <_etoa+0x3ba>
 800c030:	a365      	add	r3, pc, #404	; (adr r3, 800c1c8 <_etoa+0x508>)
 800c032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c036:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c03a:	f7f4 fd67 	bl	8000b0c <__aeabi_dcmplt>
 800c03e:	4603      	mov	r3, r0
 800c040:	2b00      	cmp	r3, #0
 800c042:	d01a      	beq.n	800c07a <_etoa+0x3ba>
      if ((int)prec > expval) {
 800c044:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c048:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c04a:	429a      	cmp	r2, r3
 800c04c:	da07      	bge.n	800c05e <_etoa+0x39e>
        prec = (unsigned)((int)prec - expval - 1);
 800c04e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c052:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c054:	1ad3      	subs	r3, r2, r3
 800c056:	3b01      	subs	r3, #1
 800c058:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c05c:	e002      	b.n	800c064 <_etoa+0x3a4>
      }
      else {
        prec = 0;
 800c05e:	2300      	movs	r3, #0
 800c060:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 800c064:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c068:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c06c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 800c070:	2300      	movs	r3, #0
 800c072:	65bb      	str	r3, [r7, #88]	; 0x58
      expval   = 0;
 800c074:	2300      	movs	r3, #0
 800c076:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c078:	e00e      	b.n	800c098 <_etoa+0x3d8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 800c07a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d00a      	beq.n	800c098 <_etoa+0x3d8>
 800c082:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c086:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d004      	beq.n	800c098 <_etoa+0x3d8>
        --prec;
 800c08e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c092:	3b01      	subs	r3, #1
 800c094:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 800c098:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c09c:	657b      	str	r3, [r7, #84]	; 0x54
  if (width > minwidth) {
 800c09e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800c0a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c0a4:	429a      	cmp	r2, r3
 800c0a6:	d904      	bls.n	800c0b2 <_etoa+0x3f2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 800c0a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c0aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c0ac:	1ad3      	subs	r3, r2, r3
 800c0ae:	657b      	str	r3, [r7, #84]	; 0x54
 800c0b0:	e001      	b.n	800c0b6 <_etoa+0x3f6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	657b      	str	r3, [r7, #84]	; 0x54
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 800c0b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c0ba:	f003 0302 	and.w	r3, r3, #2
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d004      	beq.n	800c0cc <_etoa+0x40c>
 800c0c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d001      	beq.n	800c0cc <_etoa+0x40c>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // rescale the float value
  if (expval) {
 800c0cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d009      	beq.n	800c0e6 <_etoa+0x426>
    value /= conv.F;
 800c0d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c0d6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c0da:	f7f4 fbcf 	bl	800087c <__aeabi_ddiv>
 800c0de:	4602      	mov	r2, r0
 800c0e0:	460b      	mov	r3, r1
 800c0e2:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  // output the floating part
  const size_t start_idx = idx;
 800c0e6:	69fb      	ldr	r3, [r7, #28]
 800c0e8:	637b      	str	r3, [r7, #52]	; 0x34
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 800c0ea:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d006      	beq.n	800c100 <_etoa+0x440>
 800c0f2:	693b      	ldr	r3, [r7, #16]
 800c0f4:	60bb      	str	r3, [r7, #8]
 800c0f6:	697b      	ldr	r3, [r7, #20]
 800c0f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c0fc:	60fb      	str	r3, [r7, #12]
 800c0fe:	e003      	b.n	800c108 <_etoa+0x448>
 800c100:	ed97 7b04 	vldr	d7, [r7, #16]
 800c104:	ed87 7b02 	vstr	d7, [r7, #8]
 800c108:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c10c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c110:	9302      	str	r3, [sp, #8]
 800c112:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c114:	9301      	str	r3, [sp, #4]
 800c116:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c11a:	9300      	str	r3, [sp, #0]
 800c11c:	ed97 0b02 	vldr	d0, [r7, #8]
 800c120:	69bb      	ldr	r3, [r7, #24]
 800c122:	69fa      	ldr	r2, [r7, #28]
 800c124:	6a39      	ldr	r1, [r7, #32]
 800c126:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c128:	f7ff fb72 	bl	800b810 <_ftoa>
 800c12c:	61f8      	str	r0, [r7, #28]

  // output the exponent part
  if (minwidth) {
 800c12e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c130:	2b00      	cmp	r3, #0
 800c132:	d03f      	beq.n	800c1b4 <_etoa+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 800c134:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c138:	f003 0320 	and.w	r3, r3, #32
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d001      	beq.n	800c144 <_etoa+0x484>
 800c140:	2045      	movs	r0, #69	; 0x45
 800c142:	e000      	b.n	800c146 <_etoa+0x486>
 800c144:	2065      	movs	r0, #101	; 0x65
 800c146:	69fa      	ldr	r2, [r7, #28]
 800c148:	1c53      	adds	r3, r2, #1
 800c14a:	61fb      	str	r3, [r7, #28]
 800c14c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800c14e:	69bb      	ldr	r3, [r7, #24]
 800c150:	6a39      	ldr	r1, [r7, #32]
 800c152:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 800c154:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c156:	2b00      	cmp	r3, #0
 800c158:	bfb8      	it	lt
 800c15a:	425b      	neglt	r3, r3
 800c15c:	4618      	mov	r0, r3
 800c15e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c160:	0fdb      	lsrs	r3, r3, #31
 800c162:	b2db      	uxtb	r3, r3
 800c164:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c166:	3a01      	subs	r2, #1
 800c168:	2105      	movs	r1, #5
 800c16a:	9105      	str	r1, [sp, #20]
 800c16c:	9204      	str	r2, [sp, #16]
 800c16e:	2200      	movs	r2, #0
 800c170:	9203      	str	r2, [sp, #12]
 800c172:	220a      	movs	r2, #10
 800c174:	9202      	str	r2, [sp, #8]
 800c176:	9301      	str	r3, [sp, #4]
 800c178:	9000      	str	r0, [sp, #0]
 800c17a:	69bb      	ldr	r3, [r7, #24]
 800c17c:	69fa      	ldr	r2, [r7, #28]
 800c17e:	6a39      	ldr	r1, [r7, #32]
 800c180:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c182:	f7ff fa71 	bl	800b668 <_ntoa_long>
 800c186:	61f8      	str	r0, [r7, #28]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 800c188:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c18c:	f003 0302 	and.w	r3, r3, #2
 800c190:	2b00      	cmp	r3, #0
 800c192:	d00f      	beq.n	800c1b4 <_etoa+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 800c194:	e007      	b.n	800c1a6 <_etoa+0x4e6>
 800c196:	69fa      	ldr	r2, [r7, #28]
 800c198:	1c53      	adds	r3, r2, #1
 800c19a:	61fb      	str	r3, [r7, #28]
 800c19c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800c19e:	69bb      	ldr	r3, [r7, #24]
 800c1a0:	6a39      	ldr	r1, [r7, #32]
 800c1a2:	2020      	movs	r0, #32
 800c1a4:	47a0      	blx	r4
 800c1a6:	69fa      	ldr	r2, [r7, #28]
 800c1a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1aa:	1ad3      	subs	r3, r2, r3
 800c1ac:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800c1b0:	429a      	cmp	r2, r3
 800c1b2:	d8f0      	bhi.n	800c196 <_etoa+0x4d6>
    }
  }
  return idx;
 800c1b4:	69fb      	ldr	r3, [r7, #28]
}
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	3764      	adds	r7, #100	; 0x64
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1c0:	eb1c432d 	.word	0xeb1c432d
 800c1c4:	3f1a36e2 	.word	0x3f1a36e2
 800c1c8:	00000000 	.word	0x00000000
 800c1cc:	412e8480 	.word	0x412e8480

0800c1d0 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 800c1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1d4:	b0a3      	sub	sp, #140	; 0x8c
 800c1d6:	af0a      	add	r7, sp, #40	; 0x28
 800c1d8:	6178      	str	r0, [r7, #20]
 800c1da:	6139      	str	r1, [r7, #16]
 800c1dc:	60fa      	str	r2, [r7, #12]
 800c1de:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!buffer) {
 800c1e4:	693b      	ldr	r3, [r7, #16]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	f040 84be 	bne.w	800cb68 <_vsnprintf+0x998>
    // use null output function
    out = _out_null;
 800c1ec:	4ba3      	ldr	r3, [pc, #652]	; (800c47c <_vsnprintf+0x2ac>)
 800c1ee:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 800c1f0:	f000 bcba 	b.w	800cb68 <_vsnprintf+0x998>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 800c1f4:	68bb      	ldr	r3, [r7, #8]
 800c1f6:	781b      	ldrb	r3, [r3, #0]
 800c1f8:	2b25      	cmp	r3, #37	; 0x25
 800c1fa:	d00d      	beq.n	800c218 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 800c1fc:	68bb      	ldr	r3, [r7, #8]
 800c1fe:	7818      	ldrb	r0, [r3, #0]
 800c200:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c202:	1c53      	adds	r3, r2, #1
 800c204:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c206:	697c      	ldr	r4, [r7, #20]
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	6939      	ldr	r1, [r7, #16]
 800c20c:	47a0      	blx	r4
      format++;
 800c20e:	68bb      	ldr	r3, [r7, #8]
 800c210:	3301      	adds	r3, #1
 800c212:	60bb      	str	r3, [r7, #8]
      continue;
 800c214:	f000 bca8 	b.w	800cb68 <_vsnprintf+0x998>
    }
    else {
      // yes, evaluate it
      format++;
 800c218:	68bb      	ldr	r3, [r7, #8]
 800c21a:	3301      	adds	r3, #1
 800c21c:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 800c21e:	2300      	movs	r3, #0
 800c220:	65fb      	str	r3, [r7, #92]	; 0x5c
    do {
      switch (*format) {
 800c222:	68bb      	ldr	r3, [r7, #8]
 800c224:	781b      	ldrb	r3, [r3, #0]
 800c226:	3b20      	subs	r3, #32
 800c228:	2b10      	cmp	r3, #16
 800c22a:	d857      	bhi.n	800c2dc <_vsnprintf+0x10c>
 800c22c:	a201      	add	r2, pc, #4	; (adr r2, 800c234 <_vsnprintf+0x64>)
 800c22e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c232:	bf00      	nop
 800c234:	0800c2b5 	.word	0x0800c2b5
 800c238:	0800c2dd 	.word	0x0800c2dd
 800c23c:	0800c2dd 	.word	0x0800c2dd
 800c240:	0800c2c9 	.word	0x0800c2c9
 800c244:	0800c2dd 	.word	0x0800c2dd
 800c248:	0800c2dd 	.word	0x0800c2dd
 800c24c:	0800c2dd 	.word	0x0800c2dd
 800c250:	0800c2dd 	.word	0x0800c2dd
 800c254:	0800c2dd 	.word	0x0800c2dd
 800c258:	0800c2dd 	.word	0x0800c2dd
 800c25c:	0800c2dd 	.word	0x0800c2dd
 800c260:	0800c2a1 	.word	0x0800c2a1
 800c264:	0800c2dd 	.word	0x0800c2dd
 800c268:	0800c28d 	.word	0x0800c28d
 800c26c:	0800c2dd 	.word	0x0800c2dd
 800c270:	0800c2dd 	.word	0x0800c2dd
 800c274:	0800c279 	.word	0x0800c279
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 800c278:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c27a:	f043 0301 	orr.w	r3, r3, #1
 800c27e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c280:	68bb      	ldr	r3, [r7, #8]
 800c282:	3301      	adds	r3, #1
 800c284:	60bb      	str	r3, [r7, #8]
 800c286:	2301      	movs	r3, #1
 800c288:	653b      	str	r3, [r7, #80]	; 0x50
 800c28a:	e02a      	b.n	800c2e2 <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 800c28c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c28e:	f043 0302 	orr.w	r3, r3, #2
 800c292:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c294:	68bb      	ldr	r3, [r7, #8]
 800c296:	3301      	adds	r3, #1
 800c298:	60bb      	str	r3, [r7, #8]
 800c29a:	2301      	movs	r3, #1
 800c29c:	653b      	str	r3, [r7, #80]	; 0x50
 800c29e:	e020      	b.n	800c2e2 <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 800c2a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c2a2:	f043 0304 	orr.w	r3, r3, #4
 800c2a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	3301      	adds	r3, #1
 800c2ac:	60bb      	str	r3, [r7, #8]
 800c2ae:	2301      	movs	r3, #1
 800c2b0:	653b      	str	r3, [r7, #80]	; 0x50
 800c2b2:	e016      	b.n	800c2e2 <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 800c2b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c2b6:	f043 0308 	orr.w	r3, r3, #8
 800c2ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c2bc:	68bb      	ldr	r3, [r7, #8]
 800c2be:	3301      	adds	r3, #1
 800c2c0:	60bb      	str	r3, [r7, #8]
 800c2c2:	2301      	movs	r3, #1
 800c2c4:	653b      	str	r3, [r7, #80]	; 0x50
 800c2c6:	e00c      	b.n	800c2e2 <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 800c2c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c2ca:	f043 0310 	orr.w	r3, r3, #16
 800c2ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c2d0:	68bb      	ldr	r3, [r7, #8]
 800c2d2:	3301      	adds	r3, #1
 800c2d4:	60bb      	str	r3, [r7, #8]
 800c2d6:	2301      	movs	r3, #1
 800c2d8:	653b      	str	r3, [r7, #80]	; 0x50
 800c2da:	e002      	b.n	800c2e2 <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 800c2dc:	2300      	movs	r3, #0
 800c2de:	653b      	str	r3, [r7, #80]	; 0x50
 800c2e0:	bf00      	nop
      }
    } while (n);
 800c2e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d19c      	bne.n	800c222 <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	65bb      	str	r3, [r7, #88]	; 0x58
    if (_is_digit(*format)) {
 800c2ec:	68bb      	ldr	r3, [r7, #8]
 800c2ee:	781b      	ldrb	r3, [r3, #0]
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	f7ff f852 	bl	800b39a <_is_digit>
 800c2f6:	4603      	mov	r3, r0
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d006      	beq.n	800c30a <_vsnprintf+0x13a>
      width = _atoi(&format);
 800c2fc:	f107 0308 	add.w	r3, r7, #8
 800c300:	4618      	mov	r0, r3
 800c302:	f7ff f861 	bl	800b3c8 <_atoi>
 800c306:	65b8      	str	r0, [r7, #88]	; 0x58
 800c308:	e01a      	b.n	800c340 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 800c30a:	68bb      	ldr	r3, [r7, #8]
 800c30c:	781b      	ldrb	r3, [r3, #0]
 800c30e:	2b2a      	cmp	r3, #42	; 0x2a
 800c310:	d116      	bne.n	800c340 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 800c312:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c316:	1d1a      	adds	r2, r3, #4
 800c318:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	63bb      	str	r3, [r7, #56]	; 0x38
      if (w < 0) {
 800c320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c322:	2b00      	cmp	r3, #0
 800c324:	da07      	bge.n	800c336 <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 800c326:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c328:	f043 0302 	orr.w	r3, r3, #2
 800c32c:	65fb      	str	r3, [r7, #92]	; 0x5c
        width = (unsigned int)-w;
 800c32e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c330:	425b      	negs	r3, r3
 800c332:	65bb      	str	r3, [r7, #88]	; 0x58
 800c334:	e001      	b.n	800c33a <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 800c336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c338:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      format++;
 800c33a:	68bb      	ldr	r3, [r7, #8]
 800c33c:	3301      	adds	r3, #1
 800c33e:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 800c340:	2300      	movs	r3, #0
 800c342:	657b      	str	r3, [r7, #84]	; 0x54
    if (*format == '.') {
 800c344:	68bb      	ldr	r3, [r7, #8]
 800c346:	781b      	ldrb	r3, [r3, #0]
 800c348:	2b2e      	cmp	r3, #46	; 0x2e
 800c34a:	d127      	bne.n	800c39c <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 800c34c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c34e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c352:	65fb      	str	r3, [r7, #92]	; 0x5c
      format++;
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	3301      	adds	r3, #1
 800c358:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 800c35a:	68bb      	ldr	r3, [r7, #8]
 800c35c:	781b      	ldrb	r3, [r3, #0]
 800c35e:	4618      	mov	r0, r3
 800c360:	f7ff f81b 	bl	800b39a <_is_digit>
 800c364:	4603      	mov	r3, r0
 800c366:	2b00      	cmp	r3, #0
 800c368:	d006      	beq.n	800c378 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 800c36a:	f107 0308 	add.w	r3, r7, #8
 800c36e:	4618      	mov	r0, r3
 800c370:	f7ff f82a 	bl	800b3c8 <_atoi>
 800c374:	6578      	str	r0, [r7, #84]	; 0x54
 800c376:	e011      	b.n	800c39c <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 800c378:	68bb      	ldr	r3, [r7, #8]
 800c37a:	781b      	ldrb	r3, [r3, #0]
 800c37c:	2b2a      	cmp	r3, #42	; 0x2a
 800c37e:	d10d      	bne.n	800c39c <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 800c380:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c384:	1d1a      	adds	r2, r3, #4
 800c386:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	637b      	str	r3, [r7, #52]	; 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 800c38e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c390:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c394:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	3301      	adds	r3, #1
 800c39a:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 800c39c:	68bb      	ldr	r3, [r7, #8]
 800c39e:	781b      	ldrb	r3, [r3, #0]
 800c3a0:	3b68      	subs	r3, #104	; 0x68
 800c3a2:	2b12      	cmp	r3, #18
 800c3a4:	d866      	bhi.n	800c474 <_vsnprintf+0x2a4>
 800c3a6:	a201      	add	r2, pc, #4	; (adr r2, 800c3ac <_vsnprintf+0x1dc>)
 800c3a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3ac:	0800c41f 	.word	0x0800c41f
 800c3b0:	0800c475 	.word	0x0800c475
 800c3b4:	0800c455 	.word	0x0800c455
 800c3b8:	0800c475 	.word	0x0800c475
 800c3bc:	0800c3f9 	.word	0x0800c3f9
 800c3c0:	0800c475 	.word	0x0800c475
 800c3c4:	0800c475 	.word	0x0800c475
 800c3c8:	0800c475 	.word	0x0800c475
 800c3cc:	0800c475 	.word	0x0800c475
 800c3d0:	0800c475 	.word	0x0800c475
 800c3d4:	0800c475 	.word	0x0800c475
 800c3d8:	0800c475 	.word	0x0800c475
 800c3dc:	0800c445 	.word	0x0800c445
 800c3e0:	0800c475 	.word	0x0800c475
 800c3e4:	0800c475 	.word	0x0800c475
 800c3e8:	0800c475 	.word	0x0800c475
 800c3ec:	0800c475 	.word	0x0800c475
 800c3f0:	0800c475 	.word	0x0800c475
 800c3f4:	0800c465 	.word	0x0800c465
      case 'l' :
        flags |= FLAGS_LONG;
 800c3f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c3fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c3fe:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 800c400:	68bb      	ldr	r3, [r7, #8]
 800c402:	3301      	adds	r3, #1
 800c404:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 800c406:	68bb      	ldr	r3, [r7, #8]
 800c408:	781b      	ldrb	r3, [r3, #0]
 800c40a:	2b6c      	cmp	r3, #108	; 0x6c
 800c40c:	d134      	bne.n	800c478 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 800c40e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c410:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c414:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 800c416:	68bb      	ldr	r3, [r7, #8]
 800c418:	3301      	adds	r3, #1
 800c41a:	60bb      	str	r3, [r7, #8]
        }
        break;
 800c41c:	e02c      	b.n	800c478 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 800c41e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c424:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 800c426:	68bb      	ldr	r3, [r7, #8]
 800c428:	3301      	adds	r3, #1
 800c42a:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 800c42c:	68bb      	ldr	r3, [r7, #8]
 800c42e:	781b      	ldrb	r3, [r3, #0]
 800c430:	2b68      	cmp	r3, #104	; 0x68
 800c432:	d125      	bne.n	800c480 <_vsnprintf+0x2b0>
          flags |= FLAGS_CHAR;
 800c434:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c436:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c43a:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 800c43c:	68bb      	ldr	r3, [r7, #8]
 800c43e:	3301      	adds	r3, #1
 800c440:	60bb      	str	r3, [r7, #8]
        }
        break;
 800c442:	e01d      	b.n	800c480 <_vsnprintf+0x2b0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800c444:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c446:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c44a:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 800c44c:	68bb      	ldr	r3, [r7, #8]
 800c44e:	3301      	adds	r3, #1
 800c450:	60bb      	str	r3, [r7, #8]
        break;
 800c452:	e016      	b.n	800c482 <_vsnprintf+0x2b2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800c454:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c456:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c45a:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 800c45c:	68bb      	ldr	r3, [r7, #8]
 800c45e:	3301      	adds	r3, #1
 800c460:	60bb      	str	r3, [r7, #8]
        break;
 800c462:	e00e      	b.n	800c482 <_vsnprintf+0x2b2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800c464:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c466:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c46a:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 800c46c:	68bb      	ldr	r3, [r7, #8]
 800c46e:	3301      	adds	r3, #1
 800c470:	60bb      	str	r3, [r7, #8]
        break;
 800c472:	e006      	b.n	800c482 <_vsnprintf+0x2b2>
      default :
        break;
 800c474:	bf00      	nop
 800c476:	e004      	b.n	800c482 <_vsnprintf+0x2b2>
        break;
 800c478:	bf00      	nop
 800c47a:	e002      	b.n	800c482 <_vsnprintf+0x2b2>
 800c47c:	0800b345 	.word	0x0800b345
        break;
 800c480:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 800c482:	68bb      	ldr	r3, [r7, #8]
 800c484:	781b      	ldrb	r3, [r3, #0]
 800c486:	3b25      	subs	r3, #37	; 0x25
 800c488:	2b53      	cmp	r3, #83	; 0x53
 800c48a:	f200 8360 	bhi.w	800cb4e <_vsnprintf+0x97e>
 800c48e:	a201      	add	r2, pc, #4	; (adr r2, 800c494 <_vsnprintf+0x2c4>)
 800c490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c494:	0800cb37 	.word	0x0800cb37
 800c498:	0800cb4f 	.word	0x0800cb4f
 800c49c:	0800cb4f 	.word	0x0800cb4f
 800c4a0:	0800cb4f 	.word	0x0800cb4f
 800c4a4:	0800cb4f 	.word	0x0800cb4f
 800c4a8:	0800cb4f 	.word	0x0800cb4f
 800c4ac:	0800cb4f 	.word	0x0800cb4f
 800c4b0:	0800cb4f 	.word	0x0800cb4f
 800c4b4:	0800cb4f 	.word	0x0800cb4f
 800c4b8:	0800cb4f 	.word	0x0800cb4f
 800c4bc:	0800cb4f 	.word	0x0800cb4f
 800c4c0:	0800cb4f 	.word	0x0800cb4f
 800c4c4:	0800cb4f 	.word	0x0800cb4f
 800c4c8:	0800cb4f 	.word	0x0800cb4f
 800c4cc:	0800cb4f 	.word	0x0800cb4f
 800c4d0:	0800cb4f 	.word	0x0800cb4f
 800c4d4:	0800cb4f 	.word	0x0800cb4f
 800c4d8:	0800cb4f 	.word	0x0800cb4f
 800c4dc:	0800cb4f 	.word	0x0800cb4f
 800c4e0:	0800cb4f 	.word	0x0800cb4f
 800c4e4:	0800cb4f 	.word	0x0800cb4f
 800c4e8:	0800cb4f 	.word	0x0800cb4f
 800c4ec:	0800cb4f 	.word	0x0800cb4f
 800c4f0:	0800cb4f 	.word	0x0800cb4f
 800c4f4:	0800cb4f 	.word	0x0800cb4f
 800c4f8:	0800cb4f 	.word	0x0800cb4f
 800c4fc:	0800cb4f 	.word	0x0800cb4f
 800c500:	0800cb4f 	.word	0x0800cb4f
 800c504:	0800cb4f 	.word	0x0800cb4f
 800c508:	0800cb4f 	.word	0x0800cb4f
 800c50c:	0800cb4f 	.word	0x0800cb4f
 800c510:	0800cb4f 	.word	0x0800cb4f
 800c514:	0800c8eb 	.word	0x0800c8eb
 800c518:	0800c89b 	.word	0x0800c89b
 800c51c:	0800c8eb 	.word	0x0800c8eb
 800c520:	0800cb4f 	.word	0x0800cb4f
 800c524:	0800cb4f 	.word	0x0800cb4f
 800c528:	0800cb4f 	.word	0x0800cb4f
 800c52c:	0800cb4f 	.word	0x0800cb4f
 800c530:	0800cb4f 	.word	0x0800cb4f
 800c534:	0800cb4f 	.word	0x0800cb4f
 800c538:	0800cb4f 	.word	0x0800cb4f
 800c53c:	0800cb4f 	.word	0x0800cb4f
 800c540:	0800cb4f 	.word	0x0800cb4f
 800c544:	0800cb4f 	.word	0x0800cb4f
 800c548:	0800cb4f 	.word	0x0800cb4f
 800c54c:	0800cb4f 	.word	0x0800cb4f
 800c550:	0800cb4f 	.word	0x0800cb4f
 800c554:	0800cb4f 	.word	0x0800cb4f
 800c558:	0800cb4f 	.word	0x0800cb4f
 800c55c:	0800cb4f 	.word	0x0800cb4f
 800c560:	0800c5e5 	.word	0x0800c5e5
 800c564:	0800cb4f 	.word	0x0800cb4f
 800c568:	0800cb4f 	.word	0x0800cb4f
 800c56c:	0800cb4f 	.word	0x0800cb4f
 800c570:	0800cb4f 	.word	0x0800cb4f
 800c574:	0800cb4f 	.word	0x0800cb4f
 800c578:	0800cb4f 	.word	0x0800cb4f
 800c57c:	0800cb4f 	.word	0x0800cb4f
 800c580:	0800cb4f 	.word	0x0800cb4f
 800c584:	0800cb4f 	.word	0x0800cb4f
 800c588:	0800c5e5 	.word	0x0800c5e5
 800c58c:	0800c95b 	.word	0x0800c95b
 800c590:	0800c5e5 	.word	0x0800c5e5
 800c594:	0800c8eb 	.word	0x0800c8eb
 800c598:	0800c89b 	.word	0x0800c89b
 800c59c:	0800c8eb 	.word	0x0800c8eb
 800c5a0:	0800cb4f 	.word	0x0800cb4f
 800c5a4:	0800c5e5 	.word	0x0800c5e5
 800c5a8:	0800cb4f 	.word	0x0800cb4f
 800c5ac:	0800cb4f 	.word	0x0800cb4f
 800c5b0:	0800cb4f 	.word	0x0800cb4f
 800c5b4:	0800cb4f 	.word	0x0800cb4f
 800c5b8:	0800cb4f 	.word	0x0800cb4f
 800c5bc:	0800c5e5 	.word	0x0800c5e5
 800c5c0:	0800ca9b 	.word	0x0800ca9b
 800c5c4:	0800cb4f 	.word	0x0800cb4f
 800c5c8:	0800cb4f 	.word	0x0800cb4f
 800c5cc:	0800c9d3 	.word	0x0800c9d3
 800c5d0:	0800cb4f 	.word	0x0800cb4f
 800c5d4:	0800c5e5 	.word	0x0800c5e5
 800c5d8:	0800cb4f 	.word	0x0800cb4f
 800c5dc:	0800cb4f 	.word	0x0800cb4f
 800c5e0:	0800c5e5 	.word	0x0800c5e5
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 800c5e4:	68bb      	ldr	r3, [r7, #8]
 800c5e6:	781b      	ldrb	r3, [r3, #0]
 800c5e8:	2b78      	cmp	r3, #120	; 0x78
 800c5ea:	d003      	beq.n	800c5f4 <_vsnprintf+0x424>
 800c5ec:	68bb      	ldr	r3, [r7, #8]
 800c5ee:	781b      	ldrb	r3, [r3, #0]
 800c5f0:	2b58      	cmp	r3, #88	; 0x58
 800c5f2:	d102      	bne.n	800c5fa <_vsnprintf+0x42a>
          base = 16U;
 800c5f4:	2310      	movs	r3, #16
 800c5f6:	64bb      	str	r3, [r7, #72]	; 0x48
 800c5f8:	e013      	b.n	800c622 <_vsnprintf+0x452>
        }
        else if (*format == 'o') {
 800c5fa:	68bb      	ldr	r3, [r7, #8]
 800c5fc:	781b      	ldrb	r3, [r3, #0]
 800c5fe:	2b6f      	cmp	r3, #111	; 0x6f
 800c600:	d102      	bne.n	800c608 <_vsnprintf+0x438>
          base =  8U;
 800c602:	2308      	movs	r3, #8
 800c604:	64bb      	str	r3, [r7, #72]	; 0x48
 800c606:	e00c      	b.n	800c622 <_vsnprintf+0x452>
        }
        else if (*format == 'b') {
 800c608:	68bb      	ldr	r3, [r7, #8]
 800c60a:	781b      	ldrb	r3, [r3, #0]
 800c60c:	2b62      	cmp	r3, #98	; 0x62
 800c60e:	d102      	bne.n	800c616 <_vsnprintf+0x446>
          base =  2U;
 800c610:	2302      	movs	r3, #2
 800c612:	64bb      	str	r3, [r7, #72]	; 0x48
 800c614:	e005      	b.n	800c622 <_vsnprintf+0x452>
        }
        else {
          base = 10U;
 800c616:	230a      	movs	r3, #10
 800c618:	64bb      	str	r3, [r7, #72]	; 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 800c61a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c61c:	f023 0310 	bic.w	r3, r3, #16
 800c620:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        // uppercase
        if (*format == 'X') {
 800c622:	68bb      	ldr	r3, [r7, #8]
 800c624:	781b      	ldrb	r3, [r3, #0]
 800c626:	2b58      	cmp	r3, #88	; 0x58
 800c628:	d103      	bne.n	800c632 <_vsnprintf+0x462>
          flags |= FLAGS_UPPERCASE;
 800c62a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c62c:	f043 0320 	orr.w	r3, r3, #32
 800c630:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 800c632:	68bb      	ldr	r3, [r7, #8]
 800c634:	781b      	ldrb	r3, [r3, #0]
 800c636:	2b69      	cmp	r3, #105	; 0x69
 800c638:	d007      	beq.n	800c64a <_vsnprintf+0x47a>
 800c63a:	68bb      	ldr	r3, [r7, #8]
 800c63c:	781b      	ldrb	r3, [r3, #0]
 800c63e:	2b64      	cmp	r3, #100	; 0x64
 800c640:	d003      	beq.n	800c64a <_vsnprintf+0x47a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 800c642:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c644:	f023 030c 	bic.w	r3, r3, #12
 800c648:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 800c64a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c64c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c650:	2b00      	cmp	r3, #0
 800c652:	d003      	beq.n	800c65c <_vsnprintf+0x48c>
          flags &= ~FLAGS_ZEROPAD;
 800c654:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c656:	f023 0301 	bic.w	r3, r3, #1
 800c65a:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 800c65c:	68bb      	ldr	r3, [r7, #8]
 800c65e:	781b      	ldrb	r3, [r3, #0]
 800c660:	2b69      	cmp	r3, #105	; 0x69
 800c662:	d004      	beq.n	800c66e <_vsnprintf+0x49e>
 800c664:	68bb      	ldr	r3, [r7, #8]
 800c666:	781b      	ldrb	r3, [r3, #0]
 800c668:	2b64      	cmp	r3, #100	; 0x64
 800c66a:	f040 8098 	bne.w	800c79e <_vsnprintf+0x5ce>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 800c66e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c670:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c674:	2b00      	cmp	r3, #0
 800c676:	d031      	beq.n	800c6dc <_vsnprintf+0x50c>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 800c678:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c67c:	3307      	adds	r3, #7
 800c67e:	f023 0307 	bic.w	r3, r3, #7
 800c682:	f103 0208 	add.w	r2, r3, #8
 800c686:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800c68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c68e:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800c692:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c696:	2b00      	cmp	r3, #0
 800c698:	da06      	bge.n	800c6a8 <_vsnprintf+0x4d8>
 800c69a:	2100      	movs	r1, #0
 800c69c:	f1d2 0800 	rsbs	r8, r2, #0
 800c6a0:	eb61 0903 	sbc.w	r9, r1, r3
 800c6a4:	4642      	mov	r2, r8
 800c6a6:	464b      	mov	r3, r9
 800c6a8:	69f9      	ldr	r1, [r7, #28]
 800c6aa:	0fc9      	lsrs	r1, r1, #31
 800c6ac:	b2c9      	uxtb	r1, r1
 800c6ae:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c6b0:	2400      	movs	r4, #0
 800c6b2:	4682      	mov	sl, r0
 800c6b4:	46a3      	mov	fp, r4
 800c6b6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800c6b8:	9008      	str	r0, [sp, #32]
 800c6ba:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800c6bc:	9007      	str	r0, [sp, #28]
 800c6be:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c6c0:	9006      	str	r0, [sp, #24]
 800c6c2:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800c6c6:	9102      	str	r1, [sp, #8]
 800c6c8:	e9cd 2300 	strd	r2, r3, [sp]
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c6d0:	6939      	ldr	r1, [r7, #16]
 800c6d2:	6978      	ldr	r0, [r7, #20]
 800c6d4:	f7ff f82e 	bl	800b734 <_ntoa_long_long>
 800c6d8:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 800c6da:	e0da      	b.n	800c892 <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800c6dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c6de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d020      	beq.n	800c728 <_vsnprintf+0x558>
            const long value = va_arg(va, long);
 800c6e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c6ea:	1d1a      	adds	r2, r3, #4
 800c6ec:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800c6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	bfb8      	it	lt
 800c6fa:	425b      	neglt	r3, r3
 800c6fc:	4619      	mov	r1, r3
 800c6fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c700:	0fdb      	lsrs	r3, r3, #31
 800c702:	b2db      	uxtb	r3, r3
 800c704:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c706:	9205      	str	r2, [sp, #20]
 800c708:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c70a:	9204      	str	r2, [sp, #16]
 800c70c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c70e:	9203      	str	r2, [sp, #12]
 800c710:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c712:	9202      	str	r2, [sp, #8]
 800c714:	9301      	str	r3, [sp, #4]
 800c716:	9100      	str	r1, [sp, #0]
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c71c:	6939      	ldr	r1, [r7, #16]
 800c71e:	6978      	ldr	r0, [r7, #20]
 800c720:	f7fe ffa2 	bl	800b668 <_ntoa_long>
 800c724:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 800c726:	e0b4      	b.n	800c892 <_vsnprintf+0x6c2>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 800c728:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c72a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d007      	beq.n	800c742 <_vsnprintf+0x572>
 800c732:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c736:	1d1a      	adds	r2, r3, #4
 800c738:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	b2db      	uxtb	r3, r3
 800c740:	e012      	b.n	800c768 <_vsnprintf+0x598>
 800c742:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d007      	beq.n	800c75c <_vsnprintf+0x58c>
 800c74c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c750:	1d1a      	adds	r2, r3, #4
 800c752:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	b21b      	sxth	r3, r3
 800c75a:	e005      	b.n	800c768 <_vsnprintf+0x598>
 800c75c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c760:	1d1a      	adds	r2, r3, #4
 800c762:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800c76a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	bfb8      	it	lt
 800c770:	425b      	neglt	r3, r3
 800c772:	4619      	mov	r1, r3
 800c774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c776:	0fdb      	lsrs	r3, r3, #31
 800c778:	b2db      	uxtb	r3, r3
 800c77a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c77c:	9205      	str	r2, [sp, #20]
 800c77e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c780:	9204      	str	r2, [sp, #16]
 800c782:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c784:	9203      	str	r2, [sp, #12]
 800c786:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c788:	9202      	str	r2, [sp, #8]
 800c78a:	9301      	str	r3, [sp, #4]
 800c78c:	9100      	str	r1, [sp, #0]
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c792:	6939      	ldr	r1, [r7, #16]
 800c794:	6978      	ldr	r0, [r7, #20]
 800c796:	f7fe ff67 	bl	800b668 <_ntoa_long>
 800c79a:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 800c79c:	e079      	b.n	800c892 <_vsnprintf+0x6c2>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 800c79e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c7a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d022      	beq.n	800c7ee <_vsnprintf+0x61e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 800c7a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c7ac:	3307      	adds	r3, #7
 800c7ae:	f023 0307 	bic.w	r3, r3, #7
 800c7b2:	f103 0208 	add.w	r2, r3, #8
 800c7b6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800c7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7be:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c7c0:	2000      	movs	r0, #0
 800c7c2:	460d      	mov	r5, r1
 800c7c4:	4606      	mov	r6, r0
 800c7c6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800c7c8:	9108      	str	r1, [sp, #32]
 800c7ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c7cc:	9107      	str	r1, [sp, #28]
 800c7ce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c7d0:	9106      	str	r1, [sp, #24]
 800c7d2:	e9cd 5604 	strd	r5, r6, [sp, #16]
 800c7d6:	2100      	movs	r1, #0
 800c7d8:	9102      	str	r1, [sp, #8]
 800c7da:	e9cd 2300 	strd	r2, r3, [sp]
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c7e2:	6939      	ldr	r1, [r7, #16]
 800c7e4:	6978      	ldr	r0, [r7, #20]
 800c7e6:	f7fe ffa5 	bl	800b734 <_ntoa_long_long>
 800c7ea:	64f8      	str	r0, [r7, #76]	; 0x4c
 800c7ec:	e051      	b.n	800c892 <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800c7ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c7f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d018      	beq.n	800c82a <_vsnprintf+0x65a>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 800c7f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c7fc:	1d1a      	adds	r2, r3, #4
 800c7fe:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c806:	9205      	str	r2, [sp, #20]
 800c808:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c80a:	9204      	str	r2, [sp, #16]
 800c80c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c80e:	9203      	str	r2, [sp, #12]
 800c810:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c812:	9202      	str	r2, [sp, #8]
 800c814:	2200      	movs	r2, #0
 800c816:	9201      	str	r2, [sp, #4]
 800c818:	9300      	str	r3, [sp, #0]
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c81e:	6939      	ldr	r1, [r7, #16]
 800c820:	6978      	ldr	r0, [r7, #20]
 800c822:	f7fe ff21 	bl	800b668 <_ntoa_long>
 800c826:	64f8      	str	r0, [r7, #76]	; 0x4c
 800c828:	e033      	b.n	800c892 <_vsnprintf+0x6c2>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 800c82a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c82c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c830:	2b00      	cmp	r3, #0
 800c832:	d007      	beq.n	800c844 <_vsnprintf+0x674>
 800c834:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c838:	1d1a      	adds	r2, r3, #4
 800c83a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	b2db      	uxtb	r3, r3
 800c842:	e012      	b.n	800c86a <_vsnprintf+0x69a>
 800c844:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d007      	beq.n	800c85e <_vsnprintf+0x68e>
 800c84e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c852:	1d1a      	adds	r2, r3, #4
 800c854:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	b29b      	uxth	r3, r3
 800c85c:	e005      	b.n	800c86a <_vsnprintf+0x69a>
 800c85e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c862:	1d1a      	adds	r2, r3, #4
 800c864:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	62fb      	str	r3, [r7, #44]	; 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 800c86c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c86e:	9305      	str	r3, [sp, #20]
 800c870:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c872:	9304      	str	r3, [sp, #16]
 800c874:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c876:	9303      	str	r3, [sp, #12]
 800c878:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c87a:	9302      	str	r3, [sp, #8]
 800c87c:	2300      	movs	r3, #0
 800c87e:	9301      	str	r3, [sp, #4]
 800c880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c882:	9300      	str	r3, [sp, #0]
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c888:	6939      	ldr	r1, [r7, #16]
 800c88a:	6978      	ldr	r0, [r7, #20]
 800c88c:	f7fe feec 	bl	800b668 <_ntoa_long>
 800c890:	64f8      	str	r0, [r7, #76]	; 0x4c
          }
        }
        format++;
 800c892:	68bb      	ldr	r3, [r7, #8]
 800c894:	3301      	adds	r3, #1
 800c896:	60bb      	str	r3, [r7, #8]
        break;
 800c898:	e166      	b.n	800cb68 <_vsnprintf+0x998>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 800c89a:	68bb      	ldr	r3, [r7, #8]
 800c89c:	781b      	ldrb	r3, [r3, #0]
 800c89e:	2b46      	cmp	r3, #70	; 0x46
 800c8a0:	d103      	bne.n	800c8aa <_vsnprintf+0x6da>
 800c8a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c8a4:	f043 0320 	orr.w	r3, r3, #32
 800c8a8:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800c8aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c8ae:	3307      	adds	r3, #7
 800c8b0:	f023 0307 	bic.w	r3, r3, #7
 800c8b4:	f103 0208 	add.w	r2, r3, #8
 800c8b8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800c8bc:	ed93 7b00 	vldr	d7, [r3]
 800c8c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c8c2:	9302      	str	r3, [sp, #8]
 800c8c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c8c6:	9301      	str	r3, [sp, #4]
 800c8c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c8ca:	9300      	str	r3, [sp, #0]
 800c8cc:	eeb0 0a47 	vmov.f32	s0, s14
 800c8d0:	eef0 0a67 	vmov.f32	s1, s15
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c8d8:	6939      	ldr	r1, [r7, #16]
 800c8da:	6978      	ldr	r0, [r7, #20]
 800c8dc:	f7fe ff98 	bl	800b810 <_ftoa>
 800c8e0:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 800c8e2:	68bb      	ldr	r3, [r7, #8]
 800c8e4:	3301      	adds	r3, #1
 800c8e6:	60bb      	str	r3, [r7, #8]
        break;
 800c8e8:	e13e      	b.n	800cb68 <_vsnprintf+0x998>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 800c8ea:	68bb      	ldr	r3, [r7, #8]
 800c8ec:	781b      	ldrb	r3, [r3, #0]
 800c8ee:	2b67      	cmp	r3, #103	; 0x67
 800c8f0:	d003      	beq.n	800c8fa <_vsnprintf+0x72a>
 800c8f2:	68bb      	ldr	r3, [r7, #8]
 800c8f4:	781b      	ldrb	r3, [r3, #0]
 800c8f6:	2b47      	cmp	r3, #71	; 0x47
 800c8f8:	d103      	bne.n	800c902 <_vsnprintf+0x732>
 800c8fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c8fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c900:	65fb      	str	r3, [r7, #92]	; 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 800c902:	68bb      	ldr	r3, [r7, #8]
 800c904:	781b      	ldrb	r3, [r3, #0]
 800c906:	2b45      	cmp	r3, #69	; 0x45
 800c908:	d003      	beq.n	800c912 <_vsnprintf+0x742>
 800c90a:	68bb      	ldr	r3, [r7, #8]
 800c90c:	781b      	ldrb	r3, [r3, #0]
 800c90e:	2b47      	cmp	r3, #71	; 0x47
 800c910:	d103      	bne.n	800c91a <_vsnprintf+0x74a>
 800c912:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c914:	f043 0320 	orr.w	r3, r3, #32
 800c918:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800c91a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c91e:	3307      	adds	r3, #7
 800c920:	f023 0307 	bic.w	r3, r3, #7
 800c924:	f103 0208 	add.w	r2, r3, #8
 800c928:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800c92c:	ed93 7b00 	vldr	d7, [r3]
 800c930:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c932:	9302      	str	r3, [sp, #8]
 800c934:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c936:	9301      	str	r3, [sp, #4]
 800c938:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c93a:	9300      	str	r3, [sp, #0]
 800c93c:	eeb0 0a47 	vmov.f32	s0, s14
 800c940:	eef0 0a67 	vmov.f32	s1, s15
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c948:	6939      	ldr	r1, [r7, #16]
 800c94a:	6978      	ldr	r0, [r7, #20]
 800c94c:	f7ff f9b8 	bl	800bcc0 <_etoa>
 800c950:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 800c952:	68bb      	ldr	r3, [r7, #8]
 800c954:	3301      	adds	r3, #1
 800c956:	60bb      	str	r3, [r7, #8]
        break;
 800c958:	e106      	b.n	800cb68 <_vsnprintf+0x998>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 800c95a:	2301      	movs	r3, #1
 800c95c:	647b      	str	r3, [r7, #68]	; 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 800c95e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c960:	f003 0302 	and.w	r3, r3, #2
 800c964:	2b00      	cmp	r3, #0
 800c966:	d10e      	bne.n	800c986 <_vsnprintf+0x7b6>
          while (l++ < width) {
 800c968:	e007      	b.n	800c97a <_vsnprintf+0x7aa>
            out(' ', buffer, idx++, maxlen);
 800c96a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c96c:	1c53      	adds	r3, r2, #1
 800c96e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c970:	697c      	ldr	r4, [r7, #20]
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	6939      	ldr	r1, [r7, #16]
 800c976:	2020      	movs	r0, #32
 800c978:	47a0      	blx	r4
          while (l++ < width) {
 800c97a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c97c:	1c5a      	adds	r2, r3, #1
 800c97e:	647a      	str	r2, [r7, #68]	; 0x44
 800c980:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c982:	429a      	cmp	r2, r3
 800c984:	d8f1      	bhi.n	800c96a <_vsnprintf+0x79a>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 800c986:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c98a:	1d1a      	adds	r2, r3, #4
 800c98c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	b2d8      	uxtb	r0, r3
 800c994:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c996:	1c53      	adds	r3, r2, #1
 800c998:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c99a:	697c      	ldr	r4, [r7, #20]
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	6939      	ldr	r1, [r7, #16]
 800c9a0:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 800c9a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c9a4:	f003 0302 	and.w	r3, r3, #2
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d00e      	beq.n	800c9ca <_vsnprintf+0x7fa>
          while (l++ < width) {
 800c9ac:	e007      	b.n	800c9be <_vsnprintf+0x7ee>
            out(' ', buffer, idx++, maxlen);
 800c9ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c9b0:	1c53      	adds	r3, r2, #1
 800c9b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c9b4:	697c      	ldr	r4, [r7, #20]
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	6939      	ldr	r1, [r7, #16]
 800c9ba:	2020      	movs	r0, #32
 800c9bc:	47a0      	blx	r4
          while (l++ < width) {
 800c9be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c9c0:	1c5a      	adds	r2, r3, #1
 800c9c2:	647a      	str	r2, [r7, #68]	; 0x44
 800c9c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c9c6:	429a      	cmp	r2, r3
 800c9c8:	d8f1      	bhi.n	800c9ae <_vsnprintf+0x7de>
          }
        }
        format++;
 800c9ca:	68bb      	ldr	r3, [r7, #8]
 800c9cc:	3301      	adds	r3, #1
 800c9ce:	60bb      	str	r3, [r7, #8]
        break;
 800c9d0:	e0ca      	b.n	800cb68 <_vsnprintf+0x998>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 800c9d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c9d6:	1d1a      	adds	r2, r3, #4
 800c9d8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	643b      	str	r3, [r7, #64]	; 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 800c9e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d001      	beq.n	800c9ea <_vsnprintf+0x81a>
 800c9e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c9e8:	e001      	b.n	800c9ee <_vsnprintf+0x81e>
 800c9ea:	f04f 33ff 	mov.w	r3, #4294967295
 800c9ee:	4619      	mov	r1, r3
 800c9f0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c9f2:	f7fe fcb5 	bl	800b360 <_strnlen_s>
 800c9f6:	63f8      	str	r0, [r7, #60]	; 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 800c9f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c9fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d005      	beq.n	800ca0e <_vsnprintf+0x83e>
          l = (l < precision ? l : precision);
 800ca02:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ca04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca06:	4293      	cmp	r3, r2
 800ca08:	bf28      	it	cs
 800ca0a:	4613      	movcs	r3, r2
 800ca0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 800ca0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca10:	f003 0302 	and.w	r3, r3, #2
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d11a      	bne.n	800ca4e <_vsnprintf+0x87e>
          while (l++ < width) {
 800ca18:	e007      	b.n	800ca2a <_vsnprintf+0x85a>
            out(' ', buffer, idx++, maxlen);
 800ca1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ca1c:	1c53      	adds	r3, r2, #1
 800ca1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ca20:	697c      	ldr	r4, [r7, #20]
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	6939      	ldr	r1, [r7, #16]
 800ca26:	2020      	movs	r0, #32
 800ca28:	47a0      	blx	r4
          while (l++ < width) {
 800ca2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca2c:	1c5a      	adds	r2, r3, #1
 800ca2e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ca30:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ca32:	429a      	cmp	r2, r3
 800ca34:	d8f1      	bhi.n	800ca1a <_vsnprintf+0x84a>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800ca36:	e00a      	b.n	800ca4e <_vsnprintf+0x87e>
          out(*(p++), buffer, idx++, maxlen);
 800ca38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca3a:	1c5a      	adds	r2, r3, #1
 800ca3c:	643a      	str	r2, [r7, #64]	; 0x40
 800ca3e:	7818      	ldrb	r0, [r3, #0]
 800ca40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ca42:	1c53      	adds	r3, r2, #1
 800ca44:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ca46:	697c      	ldr	r4, [r7, #20]
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	6939      	ldr	r1, [r7, #16]
 800ca4c:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800ca4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca50:	781b      	ldrb	r3, [r3, #0]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d009      	beq.n	800ca6a <_vsnprintf+0x89a>
 800ca56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d0eb      	beq.n	800ca38 <_vsnprintf+0x868>
 800ca60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca62:	1e5a      	subs	r2, r3, #1
 800ca64:	657a      	str	r2, [r7, #84]	; 0x54
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d1e6      	bne.n	800ca38 <_vsnprintf+0x868>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 800ca6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca6c:	f003 0302 	and.w	r3, r3, #2
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d00e      	beq.n	800ca92 <_vsnprintf+0x8c2>
          while (l++ < width) {
 800ca74:	e007      	b.n	800ca86 <_vsnprintf+0x8b6>
            out(' ', buffer, idx++, maxlen);
 800ca76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ca78:	1c53      	adds	r3, r2, #1
 800ca7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ca7c:	697c      	ldr	r4, [r7, #20]
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	6939      	ldr	r1, [r7, #16]
 800ca82:	2020      	movs	r0, #32
 800ca84:	47a0      	blx	r4
          while (l++ < width) {
 800ca86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca88:	1c5a      	adds	r2, r3, #1
 800ca8a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ca8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ca8e:	429a      	cmp	r2, r3
 800ca90:	d8f1      	bhi.n	800ca76 <_vsnprintf+0x8a6>
          }
        }
        format++;
 800ca92:	68bb      	ldr	r3, [r7, #8]
 800ca94:	3301      	adds	r3, #1
 800ca96:	60bb      	str	r3, [r7, #8]
        break;
 800ca98:	e066      	b.n	800cb68 <_vsnprintf+0x998>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 800ca9a:	2308      	movs	r3, #8
 800ca9c:	65bb      	str	r3, [r7, #88]	; 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 800ca9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800caa0:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 800caa4:	65fb      	str	r3, [r7, #92]	; 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 800caa6:	2300      	movs	r3, #0
 800caa8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (is_ll) {
 800caac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d023      	beq.n	800cafc <_vsnprintf+0x92c>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 800cab4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cab8:	1d1a      	adds	r2, r3, #4
 800caba:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	461a      	mov	r2, r3
 800cac2:	2300      	movs	r3, #0
 800cac4:	603a      	str	r2, [r7, #0]
 800cac6:	607b      	str	r3, [r7, #4]
 800cac8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800caca:	9308      	str	r3, [sp, #32]
 800cacc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cace:	9307      	str	r3, [sp, #28]
 800cad0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cad2:	9306      	str	r3, [sp, #24]
 800cad4:	f04f 0210 	mov.w	r2, #16
 800cad8:	f04f 0300 	mov.w	r3, #0
 800cadc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cae0:	2300      	movs	r3, #0
 800cae2:	9302      	str	r3, [sp, #8]
 800cae4:	e9d7 3400 	ldrd	r3, r4, [r7]
 800cae8:	e9cd 3400 	strd	r3, r4, [sp]
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800caf0:	6939      	ldr	r1, [r7, #16]
 800caf2:	6978      	ldr	r0, [r7, #20]
 800caf4:	f7fe fe1e 	bl	800b734 <_ntoa_long_long>
 800caf8:	64f8      	str	r0, [r7, #76]	; 0x4c
 800cafa:	e018      	b.n	800cb2e <_vsnprintf+0x95e>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 800cafc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cb00:	1d1a      	adds	r2, r3, #4
 800cb02:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	461a      	mov	r2, r3
 800cb0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cb0c:	9305      	str	r3, [sp, #20]
 800cb0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cb10:	9304      	str	r3, [sp, #16]
 800cb12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb14:	9303      	str	r3, [sp, #12]
 800cb16:	2310      	movs	r3, #16
 800cb18:	9302      	str	r3, [sp, #8]
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	9301      	str	r3, [sp, #4]
 800cb1e:	9200      	str	r2, [sp, #0]
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cb24:	6939      	ldr	r1, [r7, #16]
 800cb26:	6978      	ldr	r0, [r7, #20]
 800cb28:	f7fe fd9e 	bl	800b668 <_ntoa_long>
 800cb2c:	64f8      	str	r0, [r7, #76]	; 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 800cb2e:	68bb      	ldr	r3, [r7, #8]
 800cb30:	3301      	adds	r3, #1
 800cb32:	60bb      	str	r3, [r7, #8]
        break;
 800cb34:	e018      	b.n	800cb68 <_vsnprintf+0x998>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 800cb36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cb38:	1c53      	adds	r3, r2, #1
 800cb3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cb3c:	697c      	ldr	r4, [r7, #20]
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	6939      	ldr	r1, [r7, #16]
 800cb42:	2025      	movs	r0, #37	; 0x25
 800cb44:	47a0      	blx	r4
        format++;
 800cb46:	68bb      	ldr	r3, [r7, #8]
 800cb48:	3301      	adds	r3, #1
 800cb4a:	60bb      	str	r3, [r7, #8]
        break;
 800cb4c:	e00c      	b.n	800cb68 <_vsnprintf+0x998>

      default :
        out(*format, buffer, idx++, maxlen);
 800cb4e:	68bb      	ldr	r3, [r7, #8]
 800cb50:	7818      	ldrb	r0, [r3, #0]
 800cb52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cb54:	1c53      	adds	r3, r2, #1
 800cb56:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cb58:	697c      	ldr	r4, [r7, #20]
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	6939      	ldr	r1, [r7, #16]
 800cb5e:	47a0      	blx	r4
        format++;
 800cb60:	68bb      	ldr	r3, [r7, #8]
 800cb62:	3301      	adds	r3, #1
 800cb64:	60bb      	str	r3, [r7, #8]
        break;
 800cb66:	bf00      	nop
  while (*format)
 800cb68:	68bb      	ldr	r3, [r7, #8]
 800cb6a:	781b      	ldrb	r3, [r3, #0]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	f47f ab41 	bne.w	800c1f4 <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 800cb72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	429a      	cmp	r2, r3
 800cb78:	d302      	bcc.n	800cb80 <_vsnprintf+0x9b0>
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	1e5a      	subs	r2, r3, #1
 800cb7e:	e000      	b.n	800cb82 <_vsnprintf+0x9b2>
 800cb80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cb82:	697c      	ldr	r4, [r7, #20]
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	6939      	ldr	r1, [r7, #16]
 800cb88:	2000      	movs	r0, #0
 800cb8a:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 800cb8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800cb8e:	4618      	mov	r0, r3
 800cb90:	3764      	adds	r7, #100	; 0x64
 800cb92:	46bd      	mov	sp, r7
 800cb94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cb98 <sprintf_>:
  return ret;
}


int sprintf_(char* buffer, const char* format, ...)
{
 800cb98:	b40e      	push	{r1, r2, r3}
 800cb9a:	b580      	push	{r7, lr}
 800cb9c:	b087      	sub	sp, #28
 800cb9e:	af02      	add	r7, sp, #8
 800cba0:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, format);
 800cba2:	f107 0320 	add.w	r3, r7, #32
 800cba6:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 800cba8:	68bb      	ldr	r3, [r7, #8]
 800cbaa:	9300      	str	r3, [sp, #0]
 800cbac:	69fb      	ldr	r3, [r7, #28]
 800cbae:	f04f 32ff 	mov.w	r2, #4294967295
 800cbb2:	6879      	ldr	r1, [r7, #4]
 800cbb4:	4805      	ldr	r0, [pc, #20]	; (800cbcc <sprintf_+0x34>)
 800cbb6:	f7ff fb0b 	bl	800c1d0 <_vsnprintf>
 800cbba:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 800cbbc:	68fb      	ldr	r3, [r7, #12]
}
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	3714      	adds	r7, #20
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cbc8:	b003      	add	sp, #12
 800cbca:	4770      	bx	lr
 800cbcc:	0800b317 	.word	0x0800b317

0800cbd0 <RFP_Handle>:
        { RFP_WaitForResponseFunction }, { RFP_ParseResponseFunction } };
RFPCommandFunctions_TypeDef RfpCommandFunction[RFP_COMMAND_CNT];
RFPDataFunctions_TypeDef RfpDataFunctions;
RFPMessageFunctions_TypeDef RfpMessageFunction[RFP_MESSAGE_CNT];
void RFP_Handle(void)
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	af00      	add	r7, sp, #0
   RFP_ChangeState();
 800cbd4:	f000 f856 	bl	800cc84 <RFP_ChangeState>
   if(RfpFunction[Rfp->State].RfpFunction != NULL)
 800cbd8:	4b09      	ldr	r3, [pc, #36]	; (800cc00 <RFP_Handle+0x30>)
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	781b      	ldrb	r3, [r3, #0]
 800cbde:	461a      	mov	r2, r3
 800cbe0:	4b08      	ldr	r3, [pc, #32]	; (800cc04 <RFP_Handle+0x34>)
 800cbe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d007      	beq.n	800cbfa <RFP_Handle+0x2a>
   {
      RfpFunction[Rfp->State].RfpFunction();
 800cbea:	4b05      	ldr	r3, [pc, #20]	; (800cc00 <RFP_Handle+0x30>)
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	781b      	ldrb	r3, [r3, #0]
 800cbf0:	461a      	mov	r2, r3
 800cbf2:	4b04      	ldr	r3, [pc, #16]	; (800cc04 <RFP_Handle+0x34>)
 800cbf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbf8:	4798      	blx	r3
   }
}
 800cbfa:	bf00      	nop
 800cbfc:	bd80      	pop	{r7, pc}
 800cbfe:	bf00      	nop
 800cc00:	200041a0 	.word	0x200041a0
 800cc04:	20000078 	.word	0x20000078

0800cc08 <RFP_Init>:
void RFP_Init(RFP_TypeDef *RadioProtocol, RFPDeviceID_TypeDef Device)
{
 800cc08:	b480      	push	{r7}
 800cc0a:	b085      	sub	sp, #20
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
 800cc10:	460b      	mov	r3, r1
 800cc12:	70fb      	strb	r3, [r7, #3]
   Rfp             = RadioProtocol;
 800cc14:	4a17      	ldr	r2, [pc, #92]	; (800cc74 <RFP_Init+0x6c>)
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	6013      	str	r3, [r2, #0]
   Rfp->Initialize = RFP_INITIALIZE;
 800cc1a:	4b16      	ldr	r3, [pc, #88]	; (800cc74 <RFP_Init+0x6c>)
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	2201      	movs	r2, #1
 800cc20:	70da      	strb	r2, [r3, #3]
   Rfp->DeviceType = Device;
 800cc22:	4b14      	ldr	r3, [pc, #80]	; (800cc74 <RFP_Init+0x6c>)
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	78fa      	ldrb	r2, [r7, #3]
 800cc28:	715a      	strb	r2, [r3, #5]
   for(int i = 0; i < RFP_COMMAND_CNT; i++)
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	60fb      	str	r3, [r7, #12]
 800cc2e:	e007      	b.n	800cc40 <RFP_Init+0x38>
   {
      RfpCommandFunction[i].RfpCommandFunction = NULL;
 800cc30:	4a11      	ldr	r2, [pc, #68]	; (800cc78 <RFP_Init+0x70>)
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	2100      	movs	r1, #0
 800cc36:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   for(int i = 0; i < RFP_COMMAND_CNT; i++)
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	3301      	adds	r3, #1
 800cc3e:	60fb      	str	r3, [r7, #12]
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	2b05      	cmp	r3, #5
 800cc44:	ddf4      	ble.n	800cc30 <RFP_Init+0x28>
   }
   for(int i = 0; i < RFP_MESSAGE_CNT; i++)
 800cc46:	2300      	movs	r3, #0
 800cc48:	60bb      	str	r3, [r7, #8]
 800cc4a:	e007      	b.n	800cc5c <RFP_Init+0x54>
   {
      RfpMessageFunction[i].RfpMessageFunction = NULL;
 800cc4c:	4a0b      	ldr	r2, [pc, #44]	; (800cc7c <RFP_Init+0x74>)
 800cc4e:	68bb      	ldr	r3, [r7, #8]
 800cc50:	2100      	movs	r1, #0
 800cc52:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   for(int i = 0; i < RFP_MESSAGE_CNT; i++)
 800cc56:	68bb      	ldr	r3, [r7, #8]
 800cc58:	3301      	adds	r3, #1
 800cc5a:	60bb      	str	r3, [r7, #8]
 800cc5c:	68bb      	ldr	r3, [r7, #8]
 800cc5e:	2b04      	cmp	r3, #4
 800cc60:	ddf4      	ble.n	800cc4c <RFP_Init+0x44>
   }
   RfpDataFunctions.RfpDataFunction = NULL;
 800cc62:	4b07      	ldr	r3, [pc, #28]	; (800cc80 <RFP_Init+0x78>)
 800cc64:	2200      	movs	r2, #0
 800cc66:	601a      	str	r2, [r3, #0]
}
 800cc68:	bf00      	nop
 800cc6a:	3714      	adds	r7, #20
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc72:	4770      	bx	lr
 800cc74:	200041a0 	.word	0x200041a0
 800cc78:	200041a4 	.word	0x200041a4
 800cc7c:	200041c0 	.word	0x200041c0
 800cc80:	200041bc 	.word	0x200041bc

0800cc84 <RFP_ChangeState>:
static void RFP_ChangeState(void)
{
 800cc84:	b480      	push	{r7}
 800cc86:	b083      	sub	sp, #12
 800cc88:	af00      	add	r7, sp, #0
   for(int i = 0; i < RFP_TRANSITION_TABLE_SIZE; i++)
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	607b      	str	r3, [r7, #4]
 800cc8e:	e02b      	b.n	800cce8 <RFP_ChangeState+0x64>
   {
      if(Rfp->State == RfpTransitionTable[i].Source && Rfp->NewEvent == RfpTransitionTable[i].Event)
 800cc90:	4b1b      	ldr	r3, [pc, #108]	; (800cd00 <RFP_ChangeState+0x7c>)
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	7819      	ldrb	r1, [r3, #0]
 800cc96:	481b      	ldr	r0, [pc, #108]	; (800cd04 <RFP_ChangeState+0x80>)
 800cc98:	687a      	ldr	r2, [r7, #4]
 800cc9a:	4613      	mov	r3, r2
 800cc9c:	005b      	lsls	r3, r3, #1
 800cc9e:	4413      	add	r3, r2
 800cca0:	4403      	add	r3, r0
 800cca2:	781b      	ldrb	r3, [r3, #0]
 800cca4:	4299      	cmp	r1, r3
 800cca6:	d11c      	bne.n	800cce2 <RFP_ChangeState+0x5e>
 800cca8:	4b15      	ldr	r3, [pc, #84]	; (800cd00 <RFP_ChangeState+0x7c>)
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	7859      	ldrb	r1, [r3, #1]
 800ccae:	4815      	ldr	r0, [pc, #84]	; (800cd04 <RFP_ChangeState+0x80>)
 800ccb0:	687a      	ldr	r2, [r7, #4]
 800ccb2:	4613      	mov	r3, r2
 800ccb4:	005b      	lsls	r3, r3, #1
 800ccb6:	4413      	add	r3, r2
 800ccb8:	4403      	add	r3, r0
 800ccba:	3302      	adds	r3, #2
 800ccbc:	781b      	ldrb	r3, [r3, #0]
 800ccbe:	4299      	cmp	r1, r3
 800ccc0:	d10f      	bne.n	800cce2 <RFP_ChangeState+0x5e>
      {
         Rfp->State    = RfpTransitionTable[i].Destination;
 800ccc2:	4b0f      	ldr	r3, [pc, #60]	; (800cd00 <RFP_ChangeState+0x7c>)
 800ccc4:	6819      	ldr	r1, [r3, #0]
 800ccc6:	480f      	ldr	r0, [pc, #60]	; (800cd04 <RFP_ChangeState+0x80>)
 800ccc8:	687a      	ldr	r2, [r7, #4]
 800ccca:	4613      	mov	r3, r2
 800cccc:	005b      	lsls	r3, r3, #1
 800ccce:	4413      	add	r3, r2
 800ccd0:	4403      	add	r3, r0
 800ccd2:	3301      	adds	r3, #1
 800ccd4:	781b      	ldrb	r3, [r3, #0]
 800ccd6:	700b      	strb	r3, [r1, #0]
         Rfp->NewEvent = RFP_EVENT_NOTHING;
 800ccd8:	4b09      	ldr	r3, [pc, #36]	; (800cd00 <RFP_ChangeState+0x7c>)
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	2200      	movs	r2, #0
 800ccde:	705a      	strb	r2, [r3, #1]
         return;
 800cce0:	e009      	b.n	800ccf6 <RFP_ChangeState+0x72>
   for(int i = 0; i < RFP_TRANSITION_TABLE_SIZE; i++)
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	3301      	adds	r3, #1
 800cce6:	607b      	str	r3, [r7, #4]
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	2b0b      	cmp	r3, #11
 800ccec:	d9d0      	bls.n	800cc90 <RFP_ChangeState+0xc>
      }
   }
   Rfp->NewEvent = RFP_EVENT_NOTHING;
 800ccee:	4b04      	ldr	r3, [pc, #16]	; (800cd00 <RFP_ChangeState+0x7c>)
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	705a      	strb	r2, [r3, #1]
}
 800ccf6:	370c      	adds	r7, #12
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfe:	4770      	bx	lr
 800cd00:	200041a0 	.word	0x200041a0
 800cd04:	20000054 	.word	0x20000054

0800cd08 <RFP_RegisterDataFunction>:
void RFP_RegisterCommandFunction(RFPCommands_TypeDef Command, void (*Callback)(uint8_t *, uint32_t, uint32_t))
{
   RfpCommandFunction[Command - 1].RfpCommandFunction = Callback;
}
void RFP_RegisterDataFunction(void (*Callback)(uint8_t *, uint32_t, uint32_t))
{
 800cd08:	b480      	push	{r7}
 800cd0a:	b083      	sub	sp, #12
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
   RfpDataFunctions.RfpDataFunction = Callback;
 800cd10:	4a04      	ldr	r2, [pc, #16]	; (800cd24 <RFP_RegisterDataFunction+0x1c>)
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	6013      	str	r3, [r2, #0]
}
 800cd16:	bf00      	nop
 800cd18:	370c      	adds	r7, #12
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd20:	4770      	bx	lr
 800cd22:	bf00      	nop
 800cd24:	200041bc 	.word	0x200041bc

0800cd28 <RFP_InterruptTask>:
void RFP_RegisterMessageFunction(RFPMessage_TypeDef Message, void (*Callback)(uint8_t *, uint32_t, uint32_t))
{
   RfpMessageFunction[Message - 1].RfpMessageFunction = Callback;
}
void RFP_InterruptTask(void)
{
 800cd28:	b480      	push	{r7}
 800cd2a:	af00      	add	r7, sp, #0
   Rfp->NewDataFlag = RFP_NEW_DATA_FLAG_SET;
 800cd2c:	4b04      	ldr	r3, [pc, #16]	; (800cd40 <RFP_InterruptTask+0x18>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	2201      	movs	r2, #1
 800cd32:	711a      	strb	r2, [r3, #4]
}
 800cd34:	bf00      	nop
 800cd36:	46bd      	mov	sp, r7
 800cd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3c:	4770      	bx	lr
 800cd3e:	bf00      	nop
 800cd40:	200041a0 	.word	0x200041a0

0800cd44 <RFP_SendData>:
void RFP_SendData(RFPDeviceID_TypeDef Destination, RFPMessageType_TypeDef Type, uint8_t *Data, uint32_t Length)
{
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b086      	sub	sp, #24
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	60ba      	str	r2, [r7, #8]
 800cd4c:	607b      	str	r3, [r7, #4]
 800cd4e:	4603      	mov	r3, r0
 800cd50:	73fb      	strb	r3, [r7, #15]
 800cd52:	460b      	mov	r3, r1
 800cd54:	73bb      	strb	r3, [r7, #14]
   RfpDataTransmit[0] = Destination;
 800cd56:	4a27      	ldr	r2, [pc, #156]	; (800cdf4 <RFP_SendData+0xb0>)
 800cd58:	7bfb      	ldrb	r3, [r7, #15]
 800cd5a:	7013      	strb	r3, [r2, #0]
   RfpDataTransmit[1] = Rfp->DeviceType;
 800cd5c:	4b26      	ldr	r3, [pc, #152]	; (800cdf8 <RFP_SendData+0xb4>)
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	795a      	ldrb	r2, [r3, #5]
 800cd62:	4b24      	ldr	r3, [pc, #144]	; (800cdf4 <RFP_SendData+0xb0>)
 800cd64:	705a      	strb	r2, [r3, #1]
   RfpDataTransmit[2] = Type;
 800cd66:	4a23      	ldr	r2, [pc, #140]	; (800cdf4 <RFP_SendData+0xb0>)
 800cd68:	7bbb      	ldrb	r3, [r7, #14]
 800cd6a:	7093      	strb	r3, [r2, #2]
   for(int i = 0; i < Length; i++)
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	617b      	str	r3, [r7, #20]
 800cd70:	e00a      	b.n	800cd88 <RFP_SendData+0x44>
   {
      RfpDataTransmit[i + 3] = Data[i];
 800cd72:	697b      	ldr	r3, [r7, #20]
 800cd74:	68ba      	ldr	r2, [r7, #8]
 800cd76:	441a      	add	r2, r3
 800cd78:	697b      	ldr	r3, [r7, #20]
 800cd7a:	3303      	adds	r3, #3
 800cd7c:	7811      	ldrb	r1, [r2, #0]
 800cd7e:	4a1d      	ldr	r2, [pc, #116]	; (800cdf4 <RFP_SendData+0xb0>)
 800cd80:	54d1      	strb	r1, [r2, r3]
   for(int i = 0; i < Length; i++)
 800cd82:	697b      	ldr	r3, [r7, #20]
 800cd84:	3301      	adds	r3, #1
 800cd86:	617b      	str	r3, [r7, #20]
 800cd88:	697b      	ldr	r3, [r7, #20]
 800cd8a:	687a      	ldr	r2, [r7, #4]
 800cd8c:	429a      	cmp	r2, r3
 800cd8e:	d8f0      	bhi.n	800cd72 <RFP_SendData+0x2e>
   }
   uint32_t crc                    = Crc(CRC_INITIAL_VALUE, 3 + Length, RfpDataTransmit);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	3303      	adds	r3, #3
 800cd94:	4a17      	ldr	r2, [pc, #92]	; (800cdf4 <RFP_SendData+0xb0>)
 800cd96:	4619      	mov	r1, r3
 800cd98:	f04f 30ff 	mov.w	r0, #4294967295
 800cd9c:	f7f7 fd3a 	bl	8004814 <Crc>
 800cda0:	6138      	str	r0, [r7, #16]
   RfpDataTransmit[3 + Length]     = ((crc >> 24) & 0xff);
 800cda2:	693b      	ldr	r3, [r7, #16]
 800cda4:	0e1a      	lsrs	r2, r3, #24
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	3303      	adds	r3, #3
 800cdaa:	b2d1      	uxtb	r1, r2
 800cdac:	4a11      	ldr	r2, [pc, #68]	; (800cdf4 <RFP_SendData+0xb0>)
 800cdae:	54d1      	strb	r1, [r2, r3]
   RfpDataTransmit[3 + Length + 1] = ((crc >> 16) & 0xff);
 800cdb0:	693b      	ldr	r3, [r7, #16]
 800cdb2:	0c1a      	lsrs	r2, r3, #16
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	3304      	adds	r3, #4
 800cdb8:	b2d1      	uxtb	r1, r2
 800cdba:	4a0e      	ldr	r2, [pc, #56]	; (800cdf4 <RFP_SendData+0xb0>)
 800cdbc:	54d1      	strb	r1, [r2, r3]
   RfpDataTransmit[3 + Length + 2] = ((crc >> 8) & 0xff);
 800cdbe:	693b      	ldr	r3, [r7, #16]
 800cdc0:	0a1a      	lsrs	r2, r3, #8
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	3305      	adds	r3, #5
 800cdc6:	b2d1      	uxtb	r1, r2
 800cdc8:	4a0a      	ldr	r2, [pc, #40]	; (800cdf4 <RFP_SendData+0xb0>)
 800cdca:	54d1      	strb	r1, [r2, r3]
   RfpDataTransmit[3 + Length + 3] = (crc & 0xff);
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	3306      	adds	r3, #6
 800cdd0:	693a      	ldr	r2, [r7, #16]
 800cdd2:	b2d1      	uxtb	r1, r2
 800cdd4:	4a07      	ldr	r2, [pc, #28]	; (800cdf4 <RFP_SendData+0xb0>)
 800cdd6:	54d1      	strb	r1, [r2, r3]
   Rfp->SendFlag                   = RFP_SEND_FLAG_SET;
 800cdd8:	4b07      	ldr	r3, [pc, #28]	; (800cdf8 <RFP_SendData+0xb4>)
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	2201      	movs	r2, #1
 800cdde:	745a      	strb	r2, [r3, #17]
   Rfp->DataSizeTransmit           = 3 + Length + 4;
 800cde0:	4b05      	ldr	r3, [pc, #20]	; (800cdf8 <RFP_SendData+0xb4>)
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	687a      	ldr	r2, [r7, #4]
 800cde6:	3207      	adds	r2, #7
 800cde8:	60da      	str	r2, [r3, #12]
}
 800cdea:	bf00      	nop
 800cdec:	3718      	adds	r7, #24
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	bd80      	pop	{r7, pc}
 800cdf2:	bf00      	nop
 800cdf4:	2000413c 	.word	0x2000413c
 800cdf8:	200041a0 	.word	0x200041a0

0800cdfc <RFP_SendResponseFunction>:
static void RFP_SendResponseFunction(RFPMessageType_TypeDef Response)
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b084      	sub	sp, #16
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	4603      	mov	r3, r0
 800ce04:	71fb      	strb	r3, [r7, #7]
   osDelay(200);
 800ce06:	20c8      	movs	r0, #200	; 0xc8
 800ce08:	f008 fd8c 	bl	8015924 <osDelay>
   RfpDataTransmit[0] = Rfp->SourceMessage;
 800ce0c:	4b18      	ldr	r3, [pc, #96]	; (800ce70 <RFP_SendResponseFunction+0x74>)
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	7c1a      	ldrb	r2, [r3, #16]
 800ce12:	4b18      	ldr	r3, [pc, #96]	; (800ce74 <RFP_SendResponseFunction+0x78>)
 800ce14:	701a      	strb	r2, [r3, #0]
   RfpDataTransmit[1] = Rfp->DeviceType;
 800ce16:	4b16      	ldr	r3, [pc, #88]	; (800ce70 <RFP_SendResponseFunction+0x74>)
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	795a      	ldrb	r2, [r3, #5]
 800ce1c:	4b15      	ldr	r3, [pc, #84]	; (800ce74 <RFP_SendResponseFunction+0x78>)
 800ce1e:	705a      	strb	r2, [r3, #1]
   RfpDataTransmit[2] = RFP_MESSAGE;
 800ce20:	4b14      	ldr	r3, [pc, #80]	; (800ce74 <RFP_SendResponseFunction+0x78>)
 800ce22:	2203      	movs	r2, #3
 800ce24:	709a      	strb	r2, [r3, #2]
   RfpDataTransmit[3] = Response;
 800ce26:	4a13      	ldr	r2, [pc, #76]	; (800ce74 <RFP_SendResponseFunction+0x78>)
 800ce28:	79fb      	ldrb	r3, [r7, #7]
 800ce2a:	70d3      	strb	r3, [r2, #3]
   uint32_t crc       = Crc(CRC_INITIAL_VALUE, 4, RfpDataTransmit);
 800ce2c:	4a11      	ldr	r2, [pc, #68]	; (800ce74 <RFP_SendResponseFunction+0x78>)
 800ce2e:	2104      	movs	r1, #4
 800ce30:	f04f 30ff 	mov.w	r0, #4294967295
 800ce34:	f7f7 fcee 	bl	8004814 <Crc>
 800ce38:	60f8      	str	r0, [r7, #12]
   RfpDataTransmit[4] = ((crc >> 24) & 0xff);
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	0e1b      	lsrs	r3, r3, #24
 800ce3e:	b2da      	uxtb	r2, r3
 800ce40:	4b0c      	ldr	r3, [pc, #48]	; (800ce74 <RFP_SendResponseFunction+0x78>)
 800ce42:	711a      	strb	r2, [r3, #4]
   RfpDataTransmit[5] = ((crc >> 16) & 0xff);
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	0c1b      	lsrs	r3, r3, #16
 800ce48:	b2da      	uxtb	r2, r3
 800ce4a:	4b0a      	ldr	r3, [pc, #40]	; (800ce74 <RFP_SendResponseFunction+0x78>)
 800ce4c:	715a      	strb	r2, [r3, #5]
   RfpDataTransmit[6] = ((crc >> 8) & 0xff);
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	0a1b      	lsrs	r3, r3, #8
 800ce52:	b2da      	uxtb	r2, r3
 800ce54:	4b07      	ldr	r3, [pc, #28]	; (800ce74 <RFP_SendResponseFunction+0x78>)
 800ce56:	719a      	strb	r2, [r3, #6]
   RfpDataTransmit[7] = (crc & 0xff);
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	b2da      	uxtb	r2, r3
 800ce5c:	4b05      	ldr	r3, [pc, #20]	; (800ce74 <RFP_SendResponseFunction+0x78>)
 800ce5e:	71da      	strb	r2, [r3, #7]
   HC12_TransmitData(RfpDataTransmit, 8);
 800ce60:	2108      	movs	r1, #8
 800ce62:	4804      	ldr	r0, [pc, #16]	; (800ce74 <RFP_SendResponseFunction+0x78>)
 800ce64:	f7f4 fe74 	bl	8001b50 <HC12_TransmitData>
}
 800ce68:	bf00      	nop
 800ce6a:	3710      	adds	r7, #16
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	bd80      	pop	{r7, pc}
 800ce70:	200041a0 	.word	0x200041a0
 800ce74:	2000413c 	.word	0x2000413c

0800ce78 <RFP_InitializeFunction>:
static void RFP_InitializeFunction(void)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	af00      	add	r7, sp, #0
   Rfp->NewEvent = RFP_EVENT_END_INITIALIZE;
 800ce7c:	4b08      	ldr	r3, [pc, #32]	; (800cea0 <RFP_InitializeFunction+0x28>)
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	2202      	movs	r2, #2
 800ce82:	705a      	strb	r2, [r3, #1]
   HC12_ExitCommandMode();
 800ce84:	f7f4 fe59 	bl	8001b3a <HC12_ExitCommandMode>
   HC12_Init(Rfp, RfpDataRecive);
 800ce88:	4b05      	ldr	r3, [pc, #20]	; (800cea0 <RFP_InitializeFunction+0x28>)
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	4905      	ldr	r1, [pc, #20]	; (800cea4 <RFP_InitializeFunction+0x2c>)
 800ce8e:	4618      	mov	r0, r3
 800ce90:	f7f4 fe88 	bl	8001ba4 <HC12_Init>
   HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800ce94:	2164      	movs	r1, #100	; 0x64
 800ce96:	4803      	ldr	r0, [pc, #12]	; (800cea4 <RFP_InitializeFunction+0x2c>)
 800ce98:	f7f4 fe72 	bl	8001b80 <HC12_ReciveToIdleDMA>
}
 800ce9c:	bf00      	nop
 800ce9e:	bd80      	pop	{r7, pc}
 800cea0:	200041a0 	.word	0x200041a0
 800cea4:	200040d8 	.word	0x200040d8

0800cea8 <RFP_IdleFunction>:
static void RFP_IdleFunction(void)
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	af00      	add	r7, sp, #0
   if(Rfp->NewDataFlag == RFP_NEW_DATA_FLAG_SET)
 800ceac:	4b10      	ldr	r3, [pc, #64]	; (800cef0 <RFP_IdleFunction+0x48>)
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	791b      	ldrb	r3, [r3, #4]
 800ceb2:	b2db      	uxtb	r3, r3
 800ceb4:	2b01      	cmp	r3, #1
 800ceb6:	d108      	bne.n	800ceca <RFP_IdleFunction+0x22>
   {
      Rfp->NewDataFlag = RFP_NEW_DATA_FLAG_RESET;
 800ceb8:	4b0d      	ldr	r3, [pc, #52]	; (800cef0 <RFP_IdleFunction+0x48>)
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	2200      	movs	r2, #0
 800cebe:	711a      	strb	r2, [r3, #4]
      Rfp->NewEvent    = RFP_EVENT_NEW_DATA;
 800cec0:	4b0b      	ldr	r3, [pc, #44]	; (800cef0 <RFP_IdleFunction+0x48>)
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	2201      	movs	r2, #1
 800cec6:	705a      	strb	r2, [r3, #1]
   {
      Rfp->SendFlag = RFP_SEND_FLAG_RESET;
      Rfp->NewEvent = RFP_EVENT_SEND;
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
   }
}
 800cec8:	e010      	b.n	800ceec <RFP_IdleFunction+0x44>
   else if(Rfp->SendFlag == RFP_SEND_FLAG_SET)
 800ceca:	4b09      	ldr	r3, [pc, #36]	; (800cef0 <RFP_IdleFunction+0x48>)
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	7c5b      	ldrb	r3, [r3, #17]
 800ced0:	2b01      	cmp	r3, #1
 800ced2:	d10b      	bne.n	800ceec <RFP_IdleFunction+0x44>
      Rfp->SendFlag = RFP_SEND_FLAG_RESET;
 800ced4:	4b06      	ldr	r3, [pc, #24]	; (800cef0 <RFP_IdleFunction+0x48>)
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	2200      	movs	r2, #0
 800ceda:	745a      	strb	r2, [r3, #17]
      Rfp->NewEvent = RFP_EVENT_SEND;
 800cedc:	4b04      	ldr	r3, [pc, #16]	; (800cef0 <RFP_IdleFunction+0x48>)
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	2206      	movs	r2, #6
 800cee2:	705a      	strb	r2, [r3, #1]
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800cee4:	2164      	movs	r1, #100	; 0x64
 800cee6:	4803      	ldr	r0, [pc, #12]	; (800cef4 <RFP_IdleFunction+0x4c>)
 800cee8:	f7f4 fe4a 	bl	8001b80 <HC12_ReciveToIdleDMA>
}
 800ceec:	bf00      	nop
 800ceee:	bd80      	pop	{r7, pc}
 800cef0:	200041a0 	.word	0x200041a0
 800cef4:	200040d8 	.word	0x200040d8

0800cef8 <RFP_ParseFunction>:
static void RFP_ParseFunction(void)
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b082      	sub	sp, #8
 800cefc:	af00      	add	r7, sp, #0
   uint32_t MessageCRC = 0;
 800cefe:	2300      	movs	r3, #0
 800cf00:	607b      	str	r3, [r7, #4]
   Rfp->SourceMessage  = RfpDataRecive[1];
 800cf02:	4b3a      	ldr	r3, [pc, #232]	; (800cfec <RFP_ParseFunction+0xf4>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	4a3a      	ldr	r2, [pc, #232]	; (800cff0 <RFP_ParseFunction+0xf8>)
 800cf08:	7852      	ldrb	r2, [r2, #1]
 800cf0a:	741a      	strb	r2, [r3, #16]
   if(RfpDataRecive[0] != Rfp->DeviceType)
 800cf0c:	4b38      	ldr	r3, [pc, #224]	; (800cff0 <RFP_ParseFunction+0xf8>)
 800cf0e:	781a      	ldrb	r2, [r3, #0]
 800cf10:	4b36      	ldr	r3, [pc, #216]	; (800cfec <RFP_ParseFunction+0xf4>)
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	795b      	ldrb	r3, [r3, #5]
 800cf16:	429a      	cmp	r2, r3
 800cf18:	d00b      	beq.n	800cf32 <RFP_ParseFunction+0x3a>
   {
      Rfp->NewEvent = RFP_EVENT_ERROR;
 800cf1a:	4b34      	ldr	r3, [pc, #208]	; (800cfec <RFP_ParseFunction+0xf4>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	2203      	movs	r2, #3
 800cf20:	705a      	strb	r2, [r3, #1]
      RFP_SendResponseFunction(RFP_ERROR);
 800cf22:	2001      	movs	r0, #1
 800cf24:	f7ff ff6a 	bl	800cdfc <RFP_SendResponseFunction>
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800cf28:	2164      	movs	r1, #100	; 0x64
 800cf2a:	4831      	ldr	r0, [pc, #196]	; (800cff0 <RFP_ParseFunction+0xf8>)
 800cf2c:	f7f4 fe28 	bl	8001b80 <HC12_ReciveToIdleDMA>
               HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
            }
         }
      }
   }
}
 800cf30:	e057      	b.n	800cfe2 <RFP_ParseFunction+0xea>
      if(Rfp->DataSize != 0)
 800cf32:	4b2e      	ldr	r3, [pc, #184]	; (800cfec <RFP_ParseFunction+0xf4>)
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	689b      	ldr	r3, [r3, #8]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d052      	beq.n	800cfe2 <RFP_ParseFunction+0xea>
         MessageCRC = (((uint32_t)RfpDataRecive[Rfp->DataSize - 4] << 24) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 3] << 16)
 800cf3c:	4b2b      	ldr	r3, [pc, #172]	; (800cfec <RFP_ParseFunction+0xf4>)
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	689b      	ldr	r3, [r3, #8]
 800cf42:	3b04      	subs	r3, #4
 800cf44:	4a2a      	ldr	r2, [pc, #168]	; (800cff0 <RFP_ParseFunction+0xf8>)
 800cf46:	5cd3      	ldrb	r3, [r2, r3]
 800cf48:	061a      	lsls	r2, r3, #24
 800cf4a:	4b28      	ldr	r3, [pc, #160]	; (800cfec <RFP_ParseFunction+0xf4>)
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	689b      	ldr	r3, [r3, #8]
 800cf50:	3b03      	subs	r3, #3
 800cf52:	4927      	ldr	r1, [pc, #156]	; (800cff0 <RFP_ParseFunction+0xf8>)
 800cf54:	5ccb      	ldrb	r3, [r1, r3]
 800cf56:	041b      	lsls	r3, r3, #16
 800cf58:	431a      	orrs	r2, r3
                       | ((uint32_t)RfpDataRecive[Rfp->DataSize - 2] << 8) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 1]));
 800cf5a:	4b24      	ldr	r3, [pc, #144]	; (800cfec <RFP_ParseFunction+0xf4>)
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	689b      	ldr	r3, [r3, #8]
 800cf60:	3b02      	subs	r3, #2
 800cf62:	4923      	ldr	r1, [pc, #140]	; (800cff0 <RFP_ParseFunction+0xf8>)
 800cf64:	5ccb      	ldrb	r3, [r1, r3]
 800cf66:	021b      	lsls	r3, r3, #8
 800cf68:	4313      	orrs	r3, r2
 800cf6a:	4a20      	ldr	r2, [pc, #128]	; (800cfec <RFP_ParseFunction+0xf4>)
 800cf6c:	6812      	ldr	r2, [r2, #0]
 800cf6e:	6892      	ldr	r2, [r2, #8]
 800cf70:	3a01      	subs	r2, #1
 800cf72:	491f      	ldr	r1, [pc, #124]	; (800cff0 <RFP_ParseFunction+0xf8>)
 800cf74:	5c8a      	ldrb	r2, [r1, r2]
         MessageCRC = (((uint32_t)RfpDataRecive[Rfp->DataSize - 4] << 24) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 3] << 16)
 800cf76:	4313      	orrs	r3, r2
 800cf78:	607b      	str	r3, [r7, #4]
         if(MessageCRC == Crc(CRC_INITIAL_VALUE, Rfp->DataSize - 4, RfpDataRecive))
 800cf7a:	4b1c      	ldr	r3, [pc, #112]	; (800cfec <RFP_ParseFunction+0xf4>)
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	689b      	ldr	r3, [r3, #8]
 800cf80:	3b04      	subs	r3, #4
 800cf82:	4a1b      	ldr	r2, [pc, #108]	; (800cff0 <RFP_ParseFunction+0xf8>)
 800cf84:	4619      	mov	r1, r3
 800cf86:	f04f 30ff 	mov.w	r0, #4294967295
 800cf8a:	f7f7 fc43 	bl	8004814 <Crc>
 800cf8e:	4602      	mov	r2, r0
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	4293      	cmp	r3, r2
 800cf94:	d107      	bne.n	800cfa6 <RFP_ParseFunction+0xae>
            Rfp->NewEvent = RFP_EVENT_DATA_OK;
 800cf96:	4b15      	ldr	r3, [pc, #84]	; (800cfec <RFP_ParseFunction+0xf4>)
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	2204      	movs	r2, #4
 800cf9c:	705a      	strb	r2, [r3, #1]
            RFP_SendResponseFunction(RFP_OK);
 800cf9e:	2004      	movs	r0, #4
 800cfa0:	f7ff ff2c 	bl	800cdfc <RFP_SendResponseFunction>
}
 800cfa4:	e01d      	b.n	800cfe2 <RFP_ParseFunction+0xea>
            if(RepareMessage(MessageCRC, RfpDataRecive, Rfp->DataSize) == CRC_OK)
 800cfa6:	4b11      	ldr	r3, [pc, #68]	; (800cfec <RFP_ParseFunction+0xf4>)
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	689b      	ldr	r3, [r3, #8]
 800cfac:	461a      	mov	r2, r3
 800cfae:	4910      	ldr	r1, [pc, #64]	; (800cff0 <RFP_ParseFunction+0xf8>)
 800cfb0:	6878      	ldr	r0, [r7, #4]
 800cfb2:	f7f7 fc89 	bl	80048c8 <RepareMessage>
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	2b01      	cmp	r3, #1
 800cfba:	d107      	bne.n	800cfcc <RFP_ParseFunction+0xd4>
               Rfp->NewEvent = RFP_EVENT_DATA_OK;
 800cfbc:	4b0b      	ldr	r3, [pc, #44]	; (800cfec <RFP_ParseFunction+0xf4>)
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	2204      	movs	r2, #4
 800cfc2:	705a      	strb	r2, [r3, #1]
               RFP_SendResponseFunction(RFP_OK);
 800cfc4:	2004      	movs	r0, #4
 800cfc6:	f7ff ff19 	bl	800cdfc <RFP_SendResponseFunction>
}
 800cfca:	e00a      	b.n	800cfe2 <RFP_ParseFunction+0xea>
               Rfp->NewEvent = RFP_EVENT_ERROR;
 800cfcc:	4b07      	ldr	r3, [pc, #28]	; (800cfec <RFP_ParseFunction+0xf4>)
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	2203      	movs	r2, #3
 800cfd2:	705a      	strb	r2, [r3, #1]
               RFP_SendResponseFunction(RFP_CRC_ERROR);
 800cfd4:	2002      	movs	r0, #2
 800cfd6:	f7ff ff11 	bl	800cdfc <RFP_SendResponseFunction>
               HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800cfda:	2164      	movs	r1, #100	; 0x64
 800cfdc:	4804      	ldr	r0, [pc, #16]	; (800cff0 <RFP_ParseFunction+0xf8>)
 800cfde:	f7f4 fdcf 	bl	8001b80 <HC12_ReciveToIdleDMA>
}
 800cfe2:	bf00      	nop
 800cfe4:	3708      	adds	r7, #8
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	bd80      	pop	{r7, pc}
 800cfea:	bf00      	nop
 800cfec:	200041a0 	.word	0x200041a0
 800cff0:	200040d8 	.word	0x200040d8

0800cff4 <RFP_RunningFunction>:
static void RFP_RunningFunction(void)
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	af00      	add	r7, sp, #0
   switch(RfpDataRecive[2])
 800cff8:	4b27      	ldr	r3, [pc, #156]	; (800d098 <RFP_RunningFunction+0xa4>)
 800cffa:	789b      	ldrb	r3, [r3, #2]
 800cffc:	2b03      	cmp	r3, #3
 800cffe:	d028      	beq.n	800d052 <RFP_RunningFunction+0x5e>
 800d000:	2b03      	cmp	r3, #3
 800d002:	dc3b      	bgt.n	800d07c <RFP_RunningFunction+0x88>
 800d004:	2b01      	cmp	r3, #1
 800d006:	d002      	beq.n	800d00e <RFP_RunningFunction+0x1a>
 800d008:	2b02      	cmp	r3, #2
 800d00a:	d015      	beq.n	800d038 <RFP_RunningFunction+0x44>
         }
         break;
      }
      default:
      {
         break;
 800d00c:	e036      	b.n	800d07c <RFP_RunningFunction+0x88>
         if(RfpCommandFunction[RfpDataRecive[3] - 1].RfpCommandFunction != NULL)
 800d00e:	4b22      	ldr	r3, [pc, #136]	; (800d098 <RFP_RunningFunction+0xa4>)
 800d010:	78db      	ldrb	r3, [r3, #3]
 800d012:	3b01      	subs	r3, #1
 800d014:	4a21      	ldr	r2, [pc, #132]	; (800d09c <RFP_RunningFunction+0xa8>)
 800d016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d030      	beq.n	800d080 <RFP_RunningFunction+0x8c>
            RfpCommandFunction[RfpDataRecive[3] - 1].RfpCommandFunction(RfpDataRecive, Rfp->DataSize, 4);
 800d01e:	4b1e      	ldr	r3, [pc, #120]	; (800d098 <RFP_RunningFunction+0xa4>)
 800d020:	78db      	ldrb	r3, [r3, #3]
 800d022:	3b01      	subs	r3, #1
 800d024:	4a1d      	ldr	r2, [pc, #116]	; (800d09c <RFP_RunningFunction+0xa8>)
 800d026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d02a:	4a1d      	ldr	r2, [pc, #116]	; (800d0a0 <RFP_RunningFunction+0xac>)
 800d02c:	6812      	ldr	r2, [r2, #0]
 800d02e:	6891      	ldr	r1, [r2, #8]
 800d030:	2204      	movs	r2, #4
 800d032:	4819      	ldr	r0, [pc, #100]	; (800d098 <RFP_RunningFunction+0xa4>)
 800d034:	4798      	blx	r3
         break;
 800d036:	e023      	b.n	800d080 <RFP_RunningFunction+0x8c>
         if(RfpDataFunctions.RfpDataFunction != NULL)
 800d038:	4b1a      	ldr	r3, [pc, #104]	; (800d0a4 <RFP_RunningFunction+0xb0>)
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d021      	beq.n	800d084 <RFP_RunningFunction+0x90>
            RfpDataFunctions.RfpDataFunction(RfpDataRecive, Rfp->DataSize, 4);
 800d040:	4b18      	ldr	r3, [pc, #96]	; (800d0a4 <RFP_RunningFunction+0xb0>)
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	4a16      	ldr	r2, [pc, #88]	; (800d0a0 <RFP_RunningFunction+0xac>)
 800d046:	6812      	ldr	r2, [r2, #0]
 800d048:	6891      	ldr	r1, [r2, #8]
 800d04a:	2204      	movs	r2, #4
 800d04c:	4812      	ldr	r0, [pc, #72]	; (800d098 <RFP_RunningFunction+0xa4>)
 800d04e:	4798      	blx	r3
         break;
 800d050:	e018      	b.n	800d084 <RFP_RunningFunction+0x90>
         if(RfpMessageFunction[RfpDataRecive[3] - 1].RfpMessageFunction != NULL)
 800d052:	4b11      	ldr	r3, [pc, #68]	; (800d098 <RFP_RunningFunction+0xa4>)
 800d054:	78db      	ldrb	r3, [r3, #3]
 800d056:	3b01      	subs	r3, #1
 800d058:	4a13      	ldr	r2, [pc, #76]	; (800d0a8 <RFP_RunningFunction+0xb4>)
 800d05a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d012      	beq.n	800d088 <RFP_RunningFunction+0x94>
            RfpMessageFunction[RfpDataRecive[3] - 1].RfpMessageFunction(RfpDataRecive, Rfp->DataSize, 4);
 800d062:	4b0d      	ldr	r3, [pc, #52]	; (800d098 <RFP_RunningFunction+0xa4>)
 800d064:	78db      	ldrb	r3, [r3, #3]
 800d066:	3b01      	subs	r3, #1
 800d068:	4a0f      	ldr	r2, [pc, #60]	; (800d0a8 <RFP_RunningFunction+0xb4>)
 800d06a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d06e:	4a0c      	ldr	r2, [pc, #48]	; (800d0a0 <RFP_RunningFunction+0xac>)
 800d070:	6812      	ldr	r2, [r2, #0]
 800d072:	6891      	ldr	r1, [r2, #8]
 800d074:	2204      	movs	r2, #4
 800d076:	4808      	ldr	r0, [pc, #32]	; (800d098 <RFP_RunningFunction+0xa4>)
 800d078:	4798      	blx	r3
         break;
 800d07a:	e005      	b.n	800d088 <RFP_RunningFunction+0x94>
         break;
 800d07c:	bf00      	nop
 800d07e:	e004      	b.n	800d08a <RFP_RunningFunction+0x96>
         break;
 800d080:	bf00      	nop
 800d082:	e002      	b.n	800d08a <RFP_RunningFunction+0x96>
         break;
 800d084:	bf00      	nop
 800d086:	e000      	b.n	800d08a <RFP_RunningFunction+0x96>
         break;
 800d088:	bf00      	nop
      }
   }
   HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800d08a:	2164      	movs	r1, #100	; 0x64
 800d08c:	4802      	ldr	r0, [pc, #8]	; (800d098 <RFP_RunningFunction+0xa4>)
 800d08e:	f7f4 fd77 	bl	8001b80 <HC12_ReciveToIdleDMA>
}
 800d092:	bf00      	nop
 800d094:	bd80      	pop	{r7, pc}
 800d096:	bf00      	nop
 800d098:	200040d8 	.word	0x200040d8
 800d09c:	200041a4 	.word	0x200041a4
 800d0a0:	200041a0 	.word	0x200041a0
 800d0a4:	200041bc 	.word	0x200041bc
 800d0a8:	200041c0 	.word	0x200041c0

0800d0ac <RFP_SendFunction>:
static void RFP_SendFunction(void)
{
 800d0ac:	b598      	push	{r3, r4, r7, lr}
 800d0ae:	af00      	add	r7, sp, #0
   if(Rfp->Cnt < 5)
 800d0b0:	4b16      	ldr	r3, [pc, #88]	; (800d10c <RFP_SendFunction+0x60>)
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	695b      	ldr	r3, [r3, #20]
 800d0b6:	2b04      	cmp	r3, #4
 800d0b8:	d819      	bhi.n	800d0ee <RFP_SendFunction+0x42>
   {
      osDelay(200);
 800d0ba:	20c8      	movs	r0, #200	; 0xc8
 800d0bc:	f008 fc32 	bl	8015924 <osDelay>
      HC12_TransmitData(RfpDataTransmit, Rfp->DataSizeTransmit);
 800d0c0:	4b12      	ldr	r3, [pc, #72]	; (800d10c <RFP_SendFunction+0x60>)
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	68db      	ldr	r3, [r3, #12]
 800d0c6:	4619      	mov	r1, r3
 800d0c8:	4811      	ldr	r0, [pc, #68]	; (800d110 <RFP_SendFunction+0x64>)
 800d0ca:	f7f4 fd41 	bl	8001b50 <HC12_TransmitData>
      Rfp->Cnt++;
 800d0ce:	4b0f      	ldr	r3, [pc, #60]	; (800d10c <RFP_SendFunction+0x60>)
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	695a      	ldr	r2, [r3, #20]
 800d0d4:	3201      	adds	r2, #1
 800d0d6:	615a      	str	r2, [r3, #20]
      Rfp->NewEvent = RFP_EVENT_WAIT_FOR_RESPONSE;
 800d0d8:	4b0c      	ldr	r3, [pc, #48]	; (800d10c <RFP_SendFunction+0x60>)
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	2205      	movs	r2, #5
 800d0de:	705a      	strb	r2, [r3, #1]
      Rfp->LastTick = HAL_GetTick();
 800d0e0:	4b0a      	ldr	r3, [pc, #40]	; (800d10c <RFP_SendFunction+0x60>)
 800d0e2:	681c      	ldr	r4, [r3, #0]
 800d0e4:	f001 f8f4 	bl	800e2d0 <HAL_GetTick>
 800d0e8:	4603      	mov	r3, r0
 800d0ea:	61a3      	str	r3, [r4, #24]
   {
      Rfp->Cnt      = 0;
      Rfp->NewEvent = RFP_EVENT_ERROR;
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
   }
}
 800d0ec:	e00b      	b.n	800d106 <RFP_SendFunction+0x5a>
      Rfp->Cnt      = 0;
 800d0ee:	4b07      	ldr	r3, [pc, #28]	; (800d10c <RFP_SendFunction+0x60>)
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	615a      	str	r2, [r3, #20]
      Rfp->NewEvent = RFP_EVENT_ERROR;
 800d0f6:	4b05      	ldr	r3, [pc, #20]	; (800d10c <RFP_SendFunction+0x60>)
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	2203      	movs	r2, #3
 800d0fc:	705a      	strb	r2, [r3, #1]
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800d0fe:	2164      	movs	r1, #100	; 0x64
 800d100:	4804      	ldr	r0, [pc, #16]	; (800d114 <RFP_SendFunction+0x68>)
 800d102:	f7f4 fd3d 	bl	8001b80 <HC12_ReciveToIdleDMA>
}
 800d106:	bf00      	nop
 800d108:	bd98      	pop	{r3, r4, r7, pc}
 800d10a:	bf00      	nop
 800d10c:	200041a0 	.word	0x200041a0
 800d110:	2000413c 	.word	0x2000413c
 800d114:	200040d8 	.word	0x200040d8

0800d118 <RFP_WaitForResponseFunction>:
static void RFP_WaitForResponseFunction(void)
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	af00      	add	r7, sp, #0
   if(HAL_GetTick() - Rfp->LastTick > 2000)
 800d11c:	f001 f8d8 	bl	800e2d0 <HAL_GetTick>
 800d120:	4602      	mov	r2, r0
 800d122:	4b0e      	ldr	r3, [pc, #56]	; (800d15c <RFP_WaitForResponseFunction+0x44>)
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	699b      	ldr	r3, [r3, #24]
 800d128:	1ad3      	subs	r3, r2, r3
 800d12a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800d12e:	d904      	bls.n	800d13a <RFP_WaitForResponseFunction+0x22>
   {
      Rfp->NewEvent = RFP_EVENT_ERROR;
 800d130:	4b0a      	ldr	r3, [pc, #40]	; (800d15c <RFP_WaitForResponseFunction+0x44>)
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	2203      	movs	r2, #3
 800d136:	705a      	strb	r2, [r3, #1]
   else if(Rfp->NewDataFlag == RFP_NEW_DATA_FLAG_SET)
   {
      Rfp->NewDataFlag = RFP_NEW_DATA_FLAG_RESET;
      Rfp->NewEvent    = RFP_EVENT_NEW_DATA;
   }
}
 800d138:	e00d      	b.n	800d156 <RFP_WaitForResponseFunction+0x3e>
   else if(Rfp->NewDataFlag == RFP_NEW_DATA_FLAG_SET)
 800d13a:	4b08      	ldr	r3, [pc, #32]	; (800d15c <RFP_WaitForResponseFunction+0x44>)
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	791b      	ldrb	r3, [r3, #4]
 800d140:	b2db      	uxtb	r3, r3
 800d142:	2b01      	cmp	r3, #1
 800d144:	d107      	bne.n	800d156 <RFP_WaitForResponseFunction+0x3e>
      Rfp->NewDataFlag = RFP_NEW_DATA_FLAG_RESET;
 800d146:	4b05      	ldr	r3, [pc, #20]	; (800d15c <RFP_WaitForResponseFunction+0x44>)
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	2200      	movs	r2, #0
 800d14c:	711a      	strb	r2, [r3, #4]
      Rfp->NewEvent    = RFP_EVENT_NEW_DATA;
 800d14e:	4b03      	ldr	r3, [pc, #12]	; (800d15c <RFP_WaitForResponseFunction+0x44>)
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	2201      	movs	r2, #1
 800d154:	705a      	strb	r2, [r3, #1]
}
 800d156:	bf00      	nop
 800d158:	bd80      	pop	{r7, pc}
 800d15a:	bf00      	nop
 800d15c:	200041a0 	.word	0x200041a0

0800d160 <RFP_ParseResponseFunction>:
static void RFP_ParseResponseFunction(void)
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b082      	sub	sp, #8
 800d164:	af00      	add	r7, sp, #0
   uint32_t MessageCRC = (((uint32_t)RfpDataRecive[Rfp->DataSize - 4] << 24) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 3] << 16)
 800d166:	4b50      	ldr	r3, [pc, #320]	; (800d2a8 <RFP_ParseResponseFunction+0x148>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	689b      	ldr	r3, [r3, #8]
 800d16c:	3b04      	subs	r3, #4
 800d16e:	4a4f      	ldr	r2, [pc, #316]	; (800d2ac <RFP_ParseResponseFunction+0x14c>)
 800d170:	5cd3      	ldrb	r3, [r2, r3]
 800d172:	061a      	lsls	r2, r3, #24
 800d174:	4b4c      	ldr	r3, [pc, #304]	; (800d2a8 <RFP_ParseResponseFunction+0x148>)
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	689b      	ldr	r3, [r3, #8]
 800d17a:	3b03      	subs	r3, #3
 800d17c:	494b      	ldr	r1, [pc, #300]	; (800d2ac <RFP_ParseResponseFunction+0x14c>)
 800d17e:	5ccb      	ldrb	r3, [r1, r3]
 800d180:	041b      	lsls	r3, r3, #16
 800d182:	431a      	orrs	r2, r3
                          | ((uint32_t)RfpDataRecive[Rfp->DataSize - 2] << 8) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 1]));
 800d184:	4b48      	ldr	r3, [pc, #288]	; (800d2a8 <RFP_ParseResponseFunction+0x148>)
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	689b      	ldr	r3, [r3, #8]
 800d18a:	3b02      	subs	r3, #2
 800d18c:	4947      	ldr	r1, [pc, #284]	; (800d2ac <RFP_ParseResponseFunction+0x14c>)
 800d18e:	5ccb      	ldrb	r3, [r1, r3]
 800d190:	021b      	lsls	r3, r3, #8
 800d192:	4313      	orrs	r3, r2
 800d194:	4a44      	ldr	r2, [pc, #272]	; (800d2a8 <RFP_ParseResponseFunction+0x148>)
 800d196:	6812      	ldr	r2, [r2, #0]
 800d198:	6892      	ldr	r2, [r2, #8]
 800d19a:	3a01      	subs	r2, #1
 800d19c:	4943      	ldr	r1, [pc, #268]	; (800d2ac <RFP_ParseResponseFunction+0x14c>)
 800d19e:	5c8a      	ldrb	r2, [r1, r2]
   uint32_t MessageCRC = (((uint32_t)RfpDataRecive[Rfp->DataSize - 4] << 24) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 3] << 16)
 800d1a0:	4313      	orrs	r3, r2
 800d1a2:	607b      	str	r3, [r7, #4]
   if(MessageCRC == Crc(CRC_INITIAL_VALUE, Rfp->DataSize - 4, RfpDataRecive))
 800d1a4:	4b40      	ldr	r3, [pc, #256]	; (800d2a8 <RFP_ParseResponseFunction+0x148>)
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	689b      	ldr	r3, [r3, #8]
 800d1aa:	3b04      	subs	r3, #4
 800d1ac:	4a3f      	ldr	r2, [pc, #252]	; (800d2ac <RFP_ParseResponseFunction+0x14c>)
 800d1ae:	4619      	mov	r1, r3
 800d1b0:	f04f 30ff 	mov.w	r0, #4294967295
 800d1b4:	f7f7 fb2e 	bl	8004814 <Crc>
 800d1b8:	4602      	mov	r2, r0
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	4293      	cmp	r3, r2
 800d1be:	d12d      	bne.n	800d21c <RFP_ParseResponseFunction+0xbc>
   {
      if(RfpDataRecive[0] == Rfp->DeviceType && RfpDataRecive[2] == RFP_MESSAGE)
 800d1c0:	4b3a      	ldr	r3, [pc, #232]	; (800d2ac <RFP_ParseResponseFunction+0x14c>)
 800d1c2:	781a      	ldrb	r2, [r3, #0]
 800d1c4:	4b38      	ldr	r3, [pc, #224]	; (800d2a8 <RFP_ParseResponseFunction+0x148>)
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	795b      	ldrb	r3, [r3, #5]
 800d1ca:	429a      	cmp	r2, r3
 800d1cc:	d11d      	bne.n	800d20a <RFP_ParseResponseFunction+0xaa>
 800d1ce:	4b37      	ldr	r3, [pc, #220]	; (800d2ac <RFP_ParseResponseFunction+0x14c>)
 800d1d0:	789b      	ldrb	r3, [r3, #2]
 800d1d2:	2b03      	cmp	r3, #3
 800d1d4:	d119      	bne.n	800d20a <RFP_ParseResponseFunction+0xaa>
      {
         if(RfpDataRecive[3] == RFP_OK)
 800d1d6:	4b35      	ldr	r3, [pc, #212]	; (800d2ac <RFP_ParseResponseFunction+0x14c>)
 800d1d8:	78db      	ldrb	r3, [r3, #3]
 800d1da:	2b04      	cmp	r3, #4
 800d1dc:	d10c      	bne.n	800d1f8 <RFP_ParseResponseFunction+0x98>
         {
            Rfp->NewEvent = RFP_EVENT_DATA_OK;
 800d1de:	4b32      	ldr	r3, [pc, #200]	; (800d2a8 <RFP_ParseResponseFunction+0x148>)
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	2204      	movs	r2, #4
 800d1e4:	705a      	strb	r2, [r3, #1]
            Rfp->Cnt      = 0;
 800d1e6:	4b30      	ldr	r3, [pc, #192]	; (800d2a8 <RFP_ParseResponseFunction+0x148>)
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	615a      	str	r2, [r3, #20]
            HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800d1ee:	2164      	movs	r1, #100	; 0x64
 800d1f0:	482e      	ldr	r0, [pc, #184]	; (800d2ac <RFP_ParseResponseFunction+0x14c>)
 800d1f2:	f7f4 fcc5 	bl	8001b80 <HC12_ReciveToIdleDMA>
         if(RfpDataRecive[3] == RFP_OK)
 800d1f6:	e053      	b.n	800d2a0 <RFP_ParseResponseFunction+0x140>
         }
         else
         {
            Rfp->NewEvent = RFP_EVENT_ERROR;
 800d1f8:	4b2b      	ldr	r3, [pc, #172]	; (800d2a8 <RFP_ParseResponseFunction+0x148>)
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	2203      	movs	r2, #3
 800d1fe:	705a      	strb	r2, [r3, #1]
            HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800d200:	2164      	movs	r1, #100	; 0x64
 800d202:	482a      	ldr	r0, [pc, #168]	; (800d2ac <RFP_ParseResponseFunction+0x14c>)
 800d204:	f7f4 fcbc 	bl	8001b80 <HC12_ReciveToIdleDMA>
         if(RfpDataRecive[3] == RFP_OK)
 800d208:	e04a      	b.n	800d2a0 <RFP_ParseResponseFunction+0x140>
         }
      }
      else
      {
         Rfp->NewEvent = RFP_EVENT_ERROR;
 800d20a:	4b27      	ldr	r3, [pc, #156]	; (800d2a8 <RFP_ParseResponseFunction+0x148>)
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	2203      	movs	r2, #3
 800d210:	705a      	strb	r2, [r3, #1]
         HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800d212:	2164      	movs	r1, #100	; 0x64
 800d214:	4825      	ldr	r0, [pc, #148]	; (800d2ac <RFP_ParseResponseFunction+0x14c>)
 800d216:	f7f4 fcb3 	bl	8001b80 <HC12_ReciveToIdleDMA>
   else
   {
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
      Rfp->NewEvent = RFP_EVENT_ERROR;
   }
}
 800d21a:	e041      	b.n	800d2a0 <RFP_ParseResponseFunction+0x140>
   else if(RepareMessage(MessageCRC, RfpDataRecive, Rfp->DataSize) == CRC_OK)
 800d21c:	4b22      	ldr	r3, [pc, #136]	; (800d2a8 <RFP_ParseResponseFunction+0x148>)
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	689b      	ldr	r3, [r3, #8]
 800d222:	461a      	mov	r2, r3
 800d224:	4921      	ldr	r1, [pc, #132]	; (800d2ac <RFP_ParseResponseFunction+0x14c>)
 800d226:	6878      	ldr	r0, [r7, #4]
 800d228:	f7f7 fb4e 	bl	80048c8 <RepareMessage>
 800d22c:	4603      	mov	r3, r0
 800d22e:	2b01      	cmp	r3, #1
 800d230:	d12d      	bne.n	800d28e <RFP_ParseResponseFunction+0x12e>
      if(RfpDataRecive[0] == Rfp->DeviceType && RfpDataRecive[2] == RFP_MESSAGE)
 800d232:	4b1e      	ldr	r3, [pc, #120]	; (800d2ac <RFP_ParseResponseFunction+0x14c>)
 800d234:	781a      	ldrb	r2, [r3, #0]
 800d236:	4b1c      	ldr	r3, [pc, #112]	; (800d2a8 <RFP_ParseResponseFunction+0x148>)
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	795b      	ldrb	r3, [r3, #5]
 800d23c:	429a      	cmp	r2, r3
 800d23e:	d11d      	bne.n	800d27c <RFP_ParseResponseFunction+0x11c>
 800d240:	4b1a      	ldr	r3, [pc, #104]	; (800d2ac <RFP_ParseResponseFunction+0x14c>)
 800d242:	789b      	ldrb	r3, [r3, #2]
 800d244:	2b03      	cmp	r3, #3
 800d246:	d119      	bne.n	800d27c <RFP_ParseResponseFunction+0x11c>
         if(RfpDataRecive[3] == RFP_OK)
 800d248:	4b18      	ldr	r3, [pc, #96]	; (800d2ac <RFP_ParseResponseFunction+0x14c>)
 800d24a:	78db      	ldrb	r3, [r3, #3]
 800d24c:	2b04      	cmp	r3, #4
 800d24e:	d10c      	bne.n	800d26a <RFP_ParseResponseFunction+0x10a>
            Rfp->NewEvent = RFP_EVENT_DATA_OK;
 800d250:	4b15      	ldr	r3, [pc, #84]	; (800d2a8 <RFP_ParseResponseFunction+0x148>)
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	2204      	movs	r2, #4
 800d256:	705a      	strb	r2, [r3, #1]
            Rfp->Cnt      = 0;
 800d258:	4b13      	ldr	r3, [pc, #76]	; (800d2a8 <RFP_ParseResponseFunction+0x148>)
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	2200      	movs	r2, #0
 800d25e:	615a      	str	r2, [r3, #20]
            HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800d260:	2164      	movs	r1, #100	; 0x64
 800d262:	4812      	ldr	r0, [pc, #72]	; (800d2ac <RFP_ParseResponseFunction+0x14c>)
 800d264:	f7f4 fc8c 	bl	8001b80 <HC12_ReciveToIdleDMA>
         if(RfpDataRecive[3] == RFP_OK)
 800d268:	e01a      	b.n	800d2a0 <RFP_ParseResponseFunction+0x140>
            Rfp->NewEvent = RFP_EVENT_ERROR;
 800d26a:	4b0f      	ldr	r3, [pc, #60]	; (800d2a8 <RFP_ParseResponseFunction+0x148>)
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	2203      	movs	r2, #3
 800d270:	705a      	strb	r2, [r3, #1]
            HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800d272:	2164      	movs	r1, #100	; 0x64
 800d274:	480d      	ldr	r0, [pc, #52]	; (800d2ac <RFP_ParseResponseFunction+0x14c>)
 800d276:	f7f4 fc83 	bl	8001b80 <HC12_ReciveToIdleDMA>
         if(RfpDataRecive[3] == RFP_OK)
 800d27a:	e011      	b.n	800d2a0 <RFP_ParseResponseFunction+0x140>
         Rfp->NewEvent = RFP_EVENT_ERROR;
 800d27c:	4b0a      	ldr	r3, [pc, #40]	; (800d2a8 <RFP_ParseResponseFunction+0x148>)
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	2203      	movs	r2, #3
 800d282:	705a      	strb	r2, [r3, #1]
         HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800d284:	2164      	movs	r1, #100	; 0x64
 800d286:	4809      	ldr	r0, [pc, #36]	; (800d2ac <RFP_ParseResponseFunction+0x14c>)
 800d288:	f7f4 fc7a 	bl	8001b80 <HC12_ReciveToIdleDMA>
}
 800d28c:	e008      	b.n	800d2a0 <RFP_ParseResponseFunction+0x140>
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800d28e:	2164      	movs	r1, #100	; 0x64
 800d290:	4806      	ldr	r0, [pc, #24]	; (800d2ac <RFP_ParseResponseFunction+0x14c>)
 800d292:	f7f4 fc75 	bl	8001b80 <HC12_ReciveToIdleDMA>
      Rfp->NewEvent = RFP_EVENT_ERROR;
 800d296:	4b04      	ldr	r3, [pc, #16]	; (800d2a8 <RFP_ParseResponseFunction+0x148>)
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	2203      	movs	r2, #3
 800d29c:	705a      	strb	r2, [r3, #1]
}
 800d29e:	e7ff      	b.n	800d2a0 <RFP_ParseResponseFunction+0x140>
 800d2a0:	bf00      	nop
 800d2a2:	3708      	adds	r7, #8
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	bd80      	pop	{r7, pc}
 800d2a8:	200041a0 	.word	0x200041a0
 800d2ac:	200040d8 	.word	0x200040d8

0800d2b0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b086      	sub	sp, #24
 800d2b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800d2b6:	1d3b      	adds	r3, r7, #4
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	601a      	str	r2, [r3, #0]
 800d2bc:	605a      	str	r2, [r3, #4]
 800d2be:	609a      	str	r2, [r3, #8]
 800d2c0:	60da      	str	r2, [r3, #12]
 800d2c2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800d2c8:	4b13      	ldr	r3, [pc, #76]	; (800d318 <MX_RTC_Init+0x68>)
 800d2ca:	4a14      	ldr	r2, [pc, #80]	; (800d31c <MX_RTC_Init+0x6c>)
 800d2cc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800d2ce:	4b12      	ldr	r3, [pc, #72]	; (800d318 <MX_RTC_Init+0x68>)
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 800d2d4:	4b10      	ldr	r3, [pc, #64]	; (800d318 <MX_RTC_Init+0x68>)
 800d2d6:	227f      	movs	r2, #127	; 0x7f
 800d2d8:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 800d2da:	4b0f      	ldr	r3, [pc, #60]	; (800d318 <MX_RTC_Init+0x68>)
 800d2dc:	22ff      	movs	r2, #255	; 0xff
 800d2de:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800d2e0:	4b0d      	ldr	r3, [pc, #52]	; (800d318 <MX_RTC_Init+0x68>)
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800d2e6:	4b0c      	ldr	r3, [pc, #48]	; (800d318 <MX_RTC_Init+0x68>)
 800d2e8:	2200      	movs	r2, #0
 800d2ea:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800d2ec:	4b0a      	ldr	r3, [pc, #40]	; (800d318 <MX_RTC_Init+0x68>)
 800d2ee:	2200      	movs	r2, #0
 800d2f0:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800d2f2:	4b09      	ldr	r3, [pc, #36]	; (800d318 <MX_RTC_Init+0x68>)
 800d2f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800d2f8:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 800d2fa:	4b07      	ldr	r3, [pc, #28]	; (800d318 <MX_RTC_Init+0x68>)
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800d300:	4805      	ldr	r0, [pc, #20]	; (800d318 <MX_RTC_Init+0x68>)
 800d302:	f003 fbfb 	bl	8010afc <HAL_RTC_Init>
 800d306:	4603      	mov	r3, r0
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d001      	beq.n	800d310 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 800d30c:	f7fd fffc 	bl	800b308 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800d310:	3718      	adds	r7, #24
 800d312:	46bd      	mov	sp, r7
 800d314:	bd80      	pop	{r7, pc}
 800d316:	bf00      	nop
 800d318:	200041d4 	.word	0x200041d4
 800d31c:	40002800 	.word	0x40002800

0800d320 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b0aa      	sub	sp, #168	; 0xa8
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800d328:	f107 0310 	add.w	r3, r7, #16
 800d32c:	2298      	movs	r2, #152	; 0x98
 800d32e:	2100      	movs	r1, #0
 800d330:	4618      	mov	r0, r3
 800d332:	f00c fb2d 	bl	8019990 <memset>
  if(rtcHandle->Instance==RTC)
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	4a16      	ldr	r2, [pc, #88]	; (800d394 <HAL_RTC_MspInit+0x74>)
 800d33c:	4293      	cmp	r3, r2
 800d33e:	d124      	bne.n	800d38a <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800d340:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d344:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800d346:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d34a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800d34e:	f107 0310 	add.w	r3, r7, #16
 800d352:	4618      	mov	r0, r3
 800d354:	f002 fe7e 	bl	8010054 <HAL_RCCEx_PeriphCLKConfig>
 800d358:	4603      	mov	r3, r0
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d001      	beq.n	800d362 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800d35e:	f7fd ffd3 	bl	800b308 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800d362:	4b0d      	ldr	r3, [pc, #52]	; (800d398 <HAL_RTC_MspInit+0x78>)
 800d364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d368:	4a0b      	ldr	r2, [pc, #44]	; (800d398 <HAL_RTC_MspInit+0x78>)
 800d36a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d36e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800d372:	4b09      	ldr	r3, [pc, #36]	; (800d398 <HAL_RTC_MspInit+0x78>)
 800d374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d376:	4a08      	ldr	r2, [pc, #32]	; (800d398 <HAL_RTC_MspInit+0x78>)
 800d378:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d37c:	6593      	str	r3, [r2, #88]	; 0x58
 800d37e:	4b06      	ldr	r3, [pc, #24]	; (800d398 <HAL_RTC_MspInit+0x78>)
 800d380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d382:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d386:	60fb      	str	r3, [r7, #12]
 800d388:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800d38a:	bf00      	nop
 800d38c:	37a8      	adds	r7, #168	; 0xa8
 800d38e:	46bd      	mov	sp, r7
 800d390:	bd80      	pop	{r7, pc}
 800d392:	bf00      	nop
 800d394:	40002800 	.word	0x40002800
 800d398:	40021000 	.word	0x40021000

0800d39c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800d3a0:	4b1b      	ldr	r3, [pc, #108]	; (800d410 <MX_SPI1_Init+0x74>)
 800d3a2:	4a1c      	ldr	r2, [pc, #112]	; (800d414 <MX_SPI1_Init+0x78>)
 800d3a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800d3a6:	4b1a      	ldr	r3, [pc, #104]	; (800d410 <MX_SPI1_Init+0x74>)
 800d3a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 800d3ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800d3ae:	4b18      	ldr	r3, [pc, #96]	; (800d410 <MX_SPI1_Init+0x74>)
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800d3b4:	4b16      	ldr	r3, [pc, #88]	; (800d410 <MX_SPI1_Init+0x74>)
 800d3b6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800d3ba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800d3bc:	4b14      	ldr	r3, [pc, #80]	; (800d410 <MX_SPI1_Init+0x74>)
 800d3be:	2200      	movs	r2, #0
 800d3c0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800d3c2:	4b13      	ldr	r3, [pc, #76]	; (800d410 <MX_SPI1_Init+0x74>)
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800d3c8:	4b11      	ldr	r3, [pc, #68]	; (800d410 <MX_SPI1_Init+0x74>)
 800d3ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d3ce:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800d3d0:	4b0f      	ldr	r3, [pc, #60]	; (800d410 <MX_SPI1_Init+0x74>)
 800d3d2:	2228      	movs	r2, #40	; 0x28
 800d3d4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800d3d6:	4b0e      	ldr	r3, [pc, #56]	; (800d410 <MX_SPI1_Init+0x74>)
 800d3d8:	2200      	movs	r2, #0
 800d3da:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800d3dc:	4b0c      	ldr	r3, [pc, #48]	; (800d410 <MX_SPI1_Init+0x74>)
 800d3de:	2200      	movs	r2, #0
 800d3e0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d3e2:	4b0b      	ldr	r3, [pc, #44]	; (800d410 <MX_SPI1_Init+0x74>)
 800d3e4:	2200      	movs	r2, #0
 800d3e6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800d3e8:	4b09      	ldr	r3, [pc, #36]	; (800d410 <MX_SPI1_Init+0x74>)
 800d3ea:	2207      	movs	r2, #7
 800d3ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800d3ee:	4b08      	ldr	r3, [pc, #32]	; (800d410 <MX_SPI1_Init+0x74>)
 800d3f0:	2200      	movs	r2, #0
 800d3f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800d3f4:	4b06      	ldr	r3, [pc, #24]	; (800d410 <MX_SPI1_Init+0x74>)
 800d3f6:	2208      	movs	r2, #8
 800d3f8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800d3fa:	4805      	ldr	r0, [pc, #20]	; (800d410 <MX_SPI1_Init+0x74>)
 800d3fc:	f003 feba 	bl	8011174 <HAL_SPI_Init>
 800d400:	4603      	mov	r3, r0
 800d402:	2b00      	cmp	r3, #0
 800d404:	d001      	beq.n	800d40a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800d406:	f7fd ff7f 	bl	800b308 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800d40a:	bf00      	nop
 800d40c:	bd80      	pop	{r7, pc}
 800d40e:	bf00      	nop
 800d410:	20004208 	.word	0x20004208
 800d414:	40013000 	.word	0x40013000

0800d418 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b08a      	sub	sp, #40	; 0x28
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d420:	f107 0314 	add.w	r3, r7, #20
 800d424:	2200      	movs	r2, #0
 800d426:	601a      	str	r2, [r3, #0]
 800d428:	605a      	str	r2, [r3, #4]
 800d42a:	609a      	str	r2, [r3, #8]
 800d42c:	60da      	str	r2, [r3, #12]
 800d42e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	4a17      	ldr	r2, [pc, #92]	; (800d494 <HAL_SPI_MspInit+0x7c>)
 800d436:	4293      	cmp	r3, r2
 800d438:	d128      	bne.n	800d48c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800d43a:	4b17      	ldr	r3, [pc, #92]	; (800d498 <HAL_SPI_MspInit+0x80>)
 800d43c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d43e:	4a16      	ldr	r2, [pc, #88]	; (800d498 <HAL_SPI_MspInit+0x80>)
 800d440:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d444:	6613      	str	r3, [r2, #96]	; 0x60
 800d446:	4b14      	ldr	r3, [pc, #80]	; (800d498 <HAL_SPI_MspInit+0x80>)
 800d448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d44a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d44e:	613b      	str	r3, [r7, #16]
 800d450:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d452:	4b11      	ldr	r3, [pc, #68]	; (800d498 <HAL_SPI_MspInit+0x80>)
 800d454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d456:	4a10      	ldr	r2, [pc, #64]	; (800d498 <HAL_SPI_MspInit+0x80>)
 800d458:	f043 0301 	orr.w	r3, r3, #1
 800d45c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d45e:	4b0e      	ldr	r3, [pc, #56]	; (800d498 <HAL_SPI_MspInit+0x80>)
 800d460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d462:	f003 0301 	and.w	r3, r3, #1
 800d466:	60fb      	str	r3, [r7, #12]
 800d468:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800d46a:	23e0      	movs	r3, #224	; 0xe0
 800d46c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d46e:	2302      	movs	r3, #2
 800d470:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d472:	2300      	movs	r3, #0
 800d474:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d476:	2303      	movs	r3, #3
 800d478:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800d47a:	2305      	movs	r3, #5
 800d47c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d47e:	f107 0314 	add.w	r3, r7, #20
 800d482:	4619      	mov	r1, r3
 800d484:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d488:	f001 fb68 	bl	800eb5c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800d48c:	bf00      	nop
 800d48e:	3728      	adds	r7, #40	; 0x28
 800d490:	46bd      	mov	sp, r7
 800d492:	bd80      	pop	{r7, pc}
 800d494:	40013000 	.word	0x40013000
 800d498:	40021000 	.word	0x40021000

0800d49c <ssd1306_command>:
#include "string.h"
#include "cmsis_os.h"
SPI_HandleTypeDef *ssd1306_spi;
static uint8_t buffer[(SSD1306_LCDWIDTH * SSD1306_LCDHEIGHT) / 8];
static void ssd1306_command(uint8_t command)
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b082      	sub	sp, #8
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	4603      	mov	r3, r0
 800d4a4:	71fb      	strb	r3, [r7, #7]
   HAL_GPIO_WritePin(ssd1306_dc_GPIO_Port, ssd1306_dc_Pin, GPIO_PIN_RESET);
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	2101      	movs	r1, #1
 800d4aa:	480d      	ldr	r0, [pc, #52]	; (800d4e0 <ssd1306_command+0x44>)
 800d4ac:	f001 fd00 	bl	800eeb0 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(ssd1306_cs_GPIO_Port, ssd1306_cs_Pin, GPIO_PIN_RESET);
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	2110      	movs	r1, #16
 800d4b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d4b8:	f001 fcfa 	bl	800eeb0 <HAL_GPIO_WritePin>
   HAL_SPI_Transmit(ssd1306_spi, &command, 1, 10);
 800d4bc:	4b09      	ldr	r3, [pc, #36]	; (800d4e4 <ssd1306_command+0x48>)
 800d4be:	6818      	ldr	r0, [r3, #0]
 800d4c0:	1df9      	adds	r1, r7, #7
 800d4c2:	230a      	movs	r3, #10
 800d4c4:	2201      	movs	r2, #1
 800d4c6:	f003 fef8 	bl	80112ba <HAL_SPI_Transmit>
   HAL_GPIO_WritePin(ssd1306_cs_GPIO_Port, ssd1306_cs_Pin, GPIO_PIN_SET);
 800d4ca:	2201      	movs	r2, #1
 800d4cc:	2110      	movs	r1, #16
 800d4ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d4d2:	f001 fced 	bl	800eeb0 <HAL_GPIO_WritePin>
}
 800d4d6:	bf00      	nop
 800d4d8:	3708      	adds	r7, #8
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	bd80      	pop	{r7, pc}
 800d4de:	bf00      	nop
 800d4e0:	48000400 	.word	0x48000400
 800d4e4:	2000426c 	.word	0x2000426c

0800d4e8 <ssd1306_set_pixel>:
//    HAL_GPIO_WritePin(ssd1306_cs_GPIO_Port, ssd1306_cs_Pin, GPIO_PIN_RESET);
//    HAL_SPI_Transmit(ssd1306_spi, &data, 1, 10);
//    HAL_GPIO_WritePin(ssd1306_cs_GPIO_Port, ssd1306_cs_Pin, GPIO_PIN_SET);
// }
void ssd1306_set_pixel(uint8_t x, uint8_t y, uint8_t color)
{
 800d4e8:	b480      	push	{r7}
 800d4ea:	b083      	sub	sp, #12
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	4603      	mov	r3, r0
 800d4f0:	71fb      	strb	r3, [r7, #7]
 800d4f2:	460b      	mov	r3, r1
 800d4f4:	71bb      	strb	r3, [r7, #6]
 800d4f6:	4613      	mov	r3, r2
 800d4f8:	717b      	strb	r3, [r7, #5]
   if((x < 0) || (x >= SSD1306_LCDWIDTH) || (y < 0) || (y >= SSD1306_LCDHEIGHT))
 800d4fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	db43      	blt.n	800d58a <ssd1306_set_pixel+0xa2>
 800d502:	79bb      	ldrb	r3, [r7, #6]
 800d504:	2b3f      	cmp	r3, #63	; 0x3f
 800d506:	d840      	bhi.n	800d58a <ssd1306_set_pixel+0xa2>
   {
      return;
   }
   if(color != 0 && color != 1)
 800d508:	797b      	ldrb	r3, [r7, #5]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d002      	beq.n	800d514 <ssd1306_set_pixel+0x2c>
 800d50e:	797b      	ldrb	r3, [r7, #5]
 800d510:	2b01      	cmp	r3, #1
 800d512:	d13c      	bne.n	800d58e <ssd1306_set_pixel+0xa6>
   {
      return;
   }
   if(color == 0)
 800d514:	797b      	ldrb	r3, [r7, #5]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d11c      	bne.n	800d554 <ssd1306_set_pixel+0x6c>
   {
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] &= ~(1 << (y & 7));
 800d51a:	79fa      	ldrb	r2, [r7, #7]
 800d51c:	79bb      	ldrb	r3, [r7, #6]
 800d51e:	08db      	lsrs	r3, r3, #3
 800d520:	b2d8      	uxtb	r0, r3
 800d522:	4603      	mov	r3, r0
 800d524:	01db      	lsls	r3, r3, #7
 800d526:	4413      	add	r3, r2
 800d528:	4a1c      	ldr	r2, [pc, #112]	; (800d59c <ssd1306_set_pixel+0xb4>)
 800d52a:	5cd3      	ldrb	r3, [r2, r3]
 800d52c:	b25a      	sxtb	r2, r3
 800d52e:	79bb      	ldrb	r3, [r7, #6]
 800d530:	f003 0307 	and.w	r3, r3, #7
 800d534:	2101      	movs	r1, #1
 800d536:	fa01 f303 	lsl.w	r3, r1, r3
 800d53a:	b25b      	sxtb	r3, r3
 800d53c:	43db      	mvns	r3, r3
 800d53e:	b25b      	sxtb	r3, r3
 800d540:	4013      	ands	r3, r2
 800d542:	b259      	sxtb	r1, r3
 800d544:	79fa      	ldrb	r2, [r7, #7]
 800d546:	4603      	mov	r3, r0
 800d548:	01db      	lsls	r3, r3, #7
 800d54a:	4413      	add	r3, r2
 800d54c:	b2c9      	uxtb	r1, r1
 800d54e:	4a13      	ldr	r2, [pc, #76]	; (800d59c <ssd1306_set_pixel+0xb4>)
 800d550:	54d1      	strb	r1, [r2, r3]
 800d552:	e01d      	b.n	800d590 <ssd1306_set_pixel+0xa8>
   }
   else
   {
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] |= (1 << (y & 7));
 800d554:	79fa      	ldrb	r2, [r7, #7]
 800d556:	79bb      	ldrb	r3, [r7, #6]
 800d558:	08db      	lsrs	r3, r3, #3
 800d55a:	b2d8      	uxtb	r0, r3
 800d55c:	4603      	mov	r3, r0
 800d55e:	01db      	lsls	r3, r3, #7
 800d560:	4413      	add	r3, r2
 800d562:	4a0e      	ldr	r2, [pc, #56]	; (800d59c <ssd1306_set_pixel+0xb4>)
 800d564:	5cd3      	ldrb	r3, [r2, r3]
 800d566:	b25a      	sxtb	r2, r3
 800d568:	79bb      	ldrb	r3, [r7, #6]
 800d56a:	f003 0307 	and.w	r3, r3, #7
 800d56e:	2101      	movs	r1, #1
 800d570:	fa01 f303 	lsl.w	r3, r1, r3
 800d574:	b25b      	sxtb	r3, r3
 800d576:	4313      	orrs	r3, r2
 800d578:	b259      	sxtb	r1, r3
 800d57a:	79fa      	ldrb	r2, [r7, #7]
 800d57c:	4603      	mov	r3, r0
 800d57e:	01db      	lsls	r3, r3, #7
 800d580:	4413      	add	r3, r2
 800d582:	b2c9      	uxtb	r1, r1
 800d584:	4a05      	ldr	r2, [pc, #20]	; (800d59c <ssd1306_set_pixel+0xb4>)
 800d586:	54d1      	strb	r1, [r2, r3]
 800d588:	e002      	b.n	800d590 <ssd1306_set_pixel+0xa8>
      return;
 800d58a:	bf00      	nop
 800d58c:	e000      	b.n	800d590 <ssd1306_set_pixel+0xa8>
      return;
 800d58e:	bf00      	nop
   }
}
 800d590:	370c      	adds	r7, #12
 800d592:	46bd      	mov	sp, r7
 800d594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d598:	4770      	bx	lr
 800d59a:	bf00      	nop
 800d59c:	20004270 	.word	0x20004270

0800d5a0 <ssd1306_display>:
void ssd1306_display()
{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	af00      	add	r7, sp, #0
   ssd1306_command(0x22);
 800d5a4:	2022      	movs	r0, #34	; 0x22
 800d5a6:	f7ff ff79 	bl	800d49c <ssd1306_command>
   ssd1306_command(0x00);
 800d5aa:	2000      	movs	r0, #0
 800d5ac:	f7ff ff76 	bl	800d49c <ssd1306_command>
   ssd1306_command(0x07);
 800d5b0:	2007      	movs	r0, #7
 800d5b2:	f7ff ff73 	bl	800d49c <ssd1306_command>
   HAL_GPIO_WritePin(ssd1306_dc_GPIO_Port, ssd1306_dc_Pin, GPIO_PIN_SET);
 800d5b6:	2201      	movs	r2, #1
 800d5b8:	2101      	movs	r1, #1
 800d5ba:	480c      	ldr	r0, [pc, #48]	; (800d5ec <ssd1306_display+0x4c>)
 800d5bc:	f001 fc78 	bl	800eeb0 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(ssd1306_cs_GPIO_Port, ssd1306_cs_Pin, GPIO_PIN_RESET);
 800d5c0:	2200      	movs	r2, #0
 800d5c2:	2110      	movs	r1, #16
 800d5c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d5c8:	f001 fc72 	bl	800eeb0 <HAL_GPIO_WritePin>
   HAL_SPI_Transmit(ssd1306_spi, (uint8_t *)&buffer, (SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH / 8), 100);
 800d5cc:	4b08      	ldr	r3, [pc, #32]	; (800d5f0 <ssd1306_display+0x50>)
 800d5ce:	6818      	ldr	r0, [r3, #0]
 800d5d0:	2364      	movs	r3, #100	; 0x64
 800d5d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d5d6:	4907      	ldr	r1, [pc, #28]	; (800d5f4 <ssd1306_display+0x54>)
 800d5d8:	f003 fe6f 	bl	80112ba <HAL_SPI_Transmit>
   HAL_GPIO_WritePin(ssd1306_cs_GPIO_Port, ssd1306_cs_Pin, GPIO_PIN_SET);
 800d5dc:	2201      	movs	r2, #1
 800d5de:	2110      	movs	r1, #16
 800d5e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d5e4:	f001 fc64 	bl	800eeb0 <HAL_GPIO_WritePin>
}
 800d5e8:	bf00      	nop
 800d5ea:	bd80      	pop	{r7, pc}
 800d5ec:	48000400 	.word	0x48000400
 800d5f0:	2000426c 	.word	0x2000426c
 800d5f4:	20004270 	.word	0x20004270

0800d5f8 <ssd1306_clear>:
void ssd1306_clear()
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	af00      	add	r7, sp, #0
   memset(buffer, 0x00, (SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH / 8));
 800d5fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d600:	2100      	movs	r1, #0
 800d602:	4802      	ldr	r0, [pc, #8]	; (800d60c <ssd1306_clear+0x14>)
 800d604:	f00c f9c4 	bl	8019990 <memset>
}
 800d608:	bf00      	nop
 800d60a:	bd80      	pop	{r7, pc}
 800d60c:	20004270 	.word	0x20004270

0800d610 <ssd1306_init>:
void ssd1306_init(SPI_HandleTypeDef *spi)
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b082      	sub	sp, #8
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
   HAL_GPIO_WritePin(ssd1306_res_GPIO_Port, ssd1306_res_Pin, GPIO_PIN_RESET);
 800d618:	2200      	movs	r2, #0
 800d61a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d61e:	4833      	ldr	r0, [pc, #204]	; (800d6ec <ssd1306_init+0xdc>)
 800d620:	f001 fc46 	bl	800eeb0 <HAL_GPIO_WritePin>
   osDelay(150);
 800d624:	2096      	movs	r0, #150	; 0x96
 800d626:	f008 f97d 	bl	8015924 <osDelay>
   HAL_GPIO_WritePin(ssd1306_res_GPIO_Port, ssd1306_res_Pin, GPIO_PIN_SET);
 800d62a:	2201      	movs	r2, #1
 800d62c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d630:	482e      	ldr	r0, [pc, #184]	; (800d6ec <ssd1306_init+0xdc>)
 800d632:	f001 fc3d 	bl	800eeb0 <HAL_GPIO_WritePin>
   osDelay(100);
 800d636:	2064      	movs	r0, #100	; 0x64
 800d638:	f008 f974 	bl	8015924 <osDelay>
   ssd1306_spi = spi;
 800d63c:	4a2c      	ldr	r2, [pc, #176]	; (800d6f0 <ssd1306_init+0xe0>)
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	6013      	str	r3, [r2, #0]
   ssd1306_command(0xAE); // Display Off
 800d642:	20ae      	movs	r0, #174	; 0xae
 800d644:	f7ff ff2a 	bl	800d49c <ssd1306_command>

   ssd1306_command(0x00);
 800d648:	2000      	movs	r0, #0
 800d64a:	f7ff ff27 	bl	800d49c <ssd1306_command>
   ssd1306_command(0x10);
 800d64e:	2010      	movs	r0, #16
 800d650:	f7ff ff24 	bl	800d49c <ssd1306_command>
   ssd1306_command(0x40);
 800d654:	2040      	movs	r0, #64	; 0x40
 800d656:	f7ff ff21 	bl	800d49c <ssd1306_command>
   ssd1306_command(0x20); // Set addressing mode
 800d65a:	2020      	movs	r0, #32
 800d65c:	f7ff ff1e 	bl	800d49c <ssd1306_command>
   ssd1306_command(0x00); // Horizontal Addressing Mode
 800d660:	2000      	movs	r0, #0
 800d662:	f7ff ff1b 	bl	800d49c <ssd1306_command>

   ssd1306_command(0x81); // Set Contrast Control
 800d666:	2081      	movs	r0, #129	; 0x81
 800d668:	f7ff ff18 	bl	800d49c <ssd1306_command>
   ssd1306_command(0xff);
 800d66c:	20ff      	movs	r0, #255	; 0xff
 800d66e:	f7ff ff15 	bl	800d49c <ssd1306_command>
   ssd1306_command(0xA0 | (0x01 & 1));
 800d672:	20a1      	movs	r0, #161	; 0xa1
 800d674:	f7ff ff12 	bl	800d49c <ssd1306_command>
   ssd1306_command(0xC0 | (0x08 & (1 << 3)));
 800d678:	20c8      	movs	r0, #200	; 0xc8
 800d67a:	f7ff ff0f 	bl	800d49c <ssd1306_command>

   ssd1306_command(0xA6); // Set Normal Display
 800d67e:	20a6      	movs	r0, #166	; 0xa6
 800d680:	f7ff ff0c 	bl	800d49c <ssd1306_command>

   ssd1306_command(0xA8); // Select Multiplex Ratio
 800d684:	20a8      	movs	r0, #168	; 0xa8
 800d686:	f7ff ff09 	bl	800d49c <ssd1306_command>
   ssd1306_command(0x3F); // Default => 0x3F (1/64 Duty)	0x1F(1/32 Duty)
 800d68a:	203f      	movs	r0, #63	; 0x3f
 800d68c:	f7ff ff06 	bl	800d49c <ssd1306_command>

   ssd1306_command(0xD3); // Setting Display Offset
 800d690:	20d3      	movs	r0, #211	; 0xd3
 800d692:	f7ff ff03 	bl	800d49c <ssd1306_command>
   ssd1306_command(0x00); // 00H Reset
 800d696:	2000      	movs	r0, #0
 800d698:	f7ff ff00 	bl	800d49c <ssd1306_command>

   ssd1306_command(0xD5); // SET DISPLAY CLOCK
 800d69c:	20d5      	movs	r0, #213	; 0xd5
 800d69e:	f7ff fefd 	bl	800d49c <ssd1306_command>
   ssd1306_command(0x80); // 105HZ
 800d6a2:	2080      	movs	r0, #128	; 0x80
 800d6a4:	f7ff fefa 	bl	800d49c <ssd1306_command>

   ssd1306_command(0xD9); // Set Pre-Charge period
 800d6a8:	20d9      	movs	r0, #217	; 0xd9
 800d6aa:	f7ff fef7 	bl	800d49c <ssd1306_command>
   ssd1306_command(0x22);
 800d6ae:	2022      	movs	r0, #34	; 0x22
 800d6b0:	f7ff fef4 	bl	800d49c <ssd1306_command>

   ssd1306_command(0xDA); // Set COM Hardware Configuration
 800d6b4:	20da      	movs	r0, #218	; 0xda
 800d6b6:	f7ff fef1 	bl	800d49c <ssd1306_command>
   ssd1306_command(0x12); // Alternative COM Pin---See IC Spec page 34
 800d6ba:	2012      	movs	r0, #18
 800d6bc:	f7ff feee 	bl	800d49c <ssd1306_command>
                          // (0x02)=> A4=0;Sequential COM pin configuration;A5=0;Disable COM Left/Right remap

   ssd1306_command(0xDB); // Set Deselect Vcomh level
 800d6c0:	20db      	movs	r0, #219	; 0xdb
 800d6c2:	f7ff feeb 	bl	800d49c <ssd1306_command>
   ssd1306_command(0x40);
 800d6c6:	2040      	movs	r0, #64	; 0x40
 800d6c8:	f7ff fee8 	bl	800d49c <ssd1306_command>

   ssd1306_command(0x8D); // Set Charge Pump
 800d6cc:	208d      	movs	r0, #141	; 0x8d
 800d6ce:	f7ff fee5 	bl	800d49c <ssd1306_command>
   // ssd1306_command(0x10);  // Disable Charge Pump
   ssd1306_command(0x14); // Endable Charge Pump
 800d6d2:	2014      	movs	r0, #20
 800d6d4:	f7ff fee2 	bl	800d49c <ssd1306_command>

   ssd1306_command(0xA4); // Entire Display ON
 800d6d8:	20a4      	movs	r0, #164	; 0xa4
 800d6da:	f7ff fedf 	bl	800d49c <ssd1306_command>
   ssd1306_command(SSD1306_DISPLAYON);
 800d6de:	20af      	movs	r0, #175	; 0xaf
 800d6e0:	f7ff fedc 	bl	800d49c <ssd1306_command>
}
 800d6e4:	bf00      	nop
 800d6e6:	3708      	adds	r7, #8
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	bd80      	pop	{r7, pc}
 800d6ec:	48000400 	.word	0x48000400
 800d6f0:	2000426c 	.word	0x2000426c

0800d6f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b082      	sub	sp, #8
 800d6f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d6fa:	4b11      	ldr	r3, [pc, #68]	; (800d740 <HAL_MspInit+0x4c>)
 800d6fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d6fe:	4a10      	ldr	r2, [pc, #64]	; (800d740 <HAL_MspInit+0x4c>)
 800d700:	f043 0301 	orr.w	r3, r3, #1
 800d704:	6613      	str	r3, [r2, #96]	; 0x60
 800d706:	4b0e      	ldr	r3, [pc, #56]	; (800d740 <HAL_MspInit+0x4c>)
 800d708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d70a:	f003 0301 	and.w	r3, r3, #1
 800d70e:	607b      	str	r3, [r7, #4]
 800d710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800d712:	4b0b      	ldr	r3, [pc, #44]	; (800d740 <HAL_MspInit+0x4c>)
 800d714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d716:	4a0a      	ldr	r2, [pc, #40]	; (800d740 <HAL_MspInit+0x4c>)
 800d718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d71c:	6593      	str	r3, [r2, #88]	; 0x58
 800d71e:	4b08      	ldr	r3, [pc, #32]	; (800d740 <HAL_MspInit+0x4c>)
 800d720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d726:	603b      	str	r3, [r7, #0]
 800d728:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800d72a:	2200      	movs	r2, #0
 800d72c:	210f      	movs	r1, #15
 800d72e:	f06f 0001 	mvn.w	r0, #1
 800d732:	f000 fea8 	bl	800e486 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800d736:	bf00      	nop
 800d738:	3708      	adds	r7, #8
 800d73a:	46bd      	mov	sp, r7
 800d73c:	bd80      	pop	{r7, pc}
 800d73e:	bf00      	nop
 800d740:	40021000 	.word	0x40021000

0800d744 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b08c      	sub	sp, #48	; 0x30
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800d74c:	2300      	movs	r3, #0
 800d74e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM15 clock */
  __HAL_RCC_TIM15_CLK_ENABLE();
 800d752:	4b2e      	ldr	r3, [pc, #184]	; (800d80c <HAL_InitTick+0xc8>)
 800d754:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d756:	4a2d      	ldr	r2, [pc, #180]	; (800d80c <HAL_InitTick+0xc8>)
 800d758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d75c:	6613      	str	r3, [r2, #96]	; 0x60
 800d75e:	4b2b      	ldr	r3, [pc, #172]	; (800d80c <HAL_InitTick+0xc8>)
 800d760:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d762:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d766:	60bb      	str	r3, [r7, #8]
 800d768:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800d76a:	f107 020c 	add.w	r2, r7, #12
 800d76e:	f107 0310 	add.w	r3, r7, #16
 800d772:	4611      	mov	r1, r2
 800d774:	4618      	mov	r0, r3
 800d776:	f002 fb7b 	bl	800fe70 <HAL_RCC_GetClockConfig>

  /* Compute TIM15 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800d77a:	f002 fb63 	bl	800fe44 <HAL_RCC_GetPCLK2Freq>
 800d77e:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM15 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800d780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d782:	4a23      	ldr	r2, [pc, #140]	; (800d810 <HAL_InitTick+0xcc>)
 800d784:	fba2 2303 	umull	r2, r3, r2, r3
 800d788:	0c9b      	lsrs	r3, r3, #18
 800d78a:	3b01      	subs	r3, #1
 800d78c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM15 */
  htim15.Instance = TIM15;
 800d78e:	4b21      	ldr	r3, [pc, #132]	; (800d814 <HAL_InitTick+0xd0>)
 800d790:	4a21      	ldr	r2, [pc, #132]	; (800d818 <HAL_InitTick+0xd4>)
 800d792:	601a      	str	r2, [r3, #0]
  + Period = [(TIM15CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim15.Init.Period = (1000000U / 1000U) - 1U;
 800d794:	4b1f      	ldr	r3, [pc, #124]	; (800d814 <HAL_InitTick+0xd0>)
 800d796:	f240 32e7 	movw	r2, #999	; 0x3e7
 800d79a:	60da      	str	r2, [r3, #12]
  htim15.Init.Prescaler = uwPrescalerValue;
 800d79c:	4a1d      	ldr	r2, [pc, #116]	; (800d814 <HAL_InitTick+0xd0>)
 800d79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7a0:	6053      	str	r3, [r2, #4]
  htim15.Init.ClockDivision = 0;
 800d7a2:	4b1c      	ldr	r3, [pc, #112]	; (800d814 <HAL_InitTick+0xd0>)
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	611a      	str	r2, [r3, #16]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d7a8:	4b1a      	ldr	r3, [pc, #104]	; (800d814 <HAL_InitTick+0xd0>)
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	609a      	str	r2, [r3, #8]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d7ae:	4b19      	ldr	r3, [pc, #100]	; (800d814 <HAL_InitTick+0xd0>)
 800d7b0:	2200      	movs	r2, #0
 800d7b2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim15);
 800d7b4:	4817      	ldr	r0, [pc, #92]	; (800d814 <HAL_InitTick+0xd0>)
 800d7b6:	f004 fbed 	bl	8011f94 <HAL_TIM_Base_Init>
 800d7ba:	4603      	mov	r3, r0
 800d7bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800d7c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d11b      	bne.n	800d800 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim15);
 800d7c8:	4812      	ldr	r0, [pc, #72]	; (800d814 <HAL_InitTick+0xd0>)
 800d7ca:	f004 fc3b 	bl	8012044 <HAL_TIM_Base_Start_IT>
 800d7ce:	4603      	mov	r3, r0
 800d7d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800d7d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d111      	bne.n	800d800 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM15 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800d7dc:	2018      	movs	r0, #24
 800d7de:	f000 fe6e 	bl	800e4be <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	2b0f      	cmp	r3, #15
 800d7e6:	d808      	bhi.n	800d7fa <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, TickPriority, 0U);
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	6879      	ldr	r1, [r7, #4]
 800d7ec:	2018      	movs	r0, #24
 800d7ee:	f000 fe4a 	bl	800e486 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800d7f2:	4a0a      	ldr	r2, [pc, #40]	; (800d81c <HAL_InitTick+0xd8>)
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	6013      	str	r3, [r2, #0]
 800d7f8:	e002      	b.n	800d800 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 800d7fa:	2301      	movs	r3, #1
 800d7fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800d800:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d804:	4618      	mov	r0, r3
 800d806:	3730      	adds	r7, #48	; 0x30
 800d808:	46bd      	mov	sp, r7
 800d80a:	bd80      	pop	{r7, pc}
 800d80c:	40021000 	.word	0x40021000
 800d810:	431bde83 	.word	0x431bde83
 800d814:	20004670 	.word	0x20004670
 800d818:	40014000 	.word	0x40014000
 800d81c:	20000098 	.word	0x20000098

0800d820 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800d820:	b580      	push	{r7, lr}
 800d822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
   HAL_NVIC_SystemReset();
 800d824:	f000 fe59 	bl	800e4da <HAL_NVIC_SystemReset>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while(1)
   {
      HAL_NVIC_SystemReset();
 800d828:	f000 fe57 	bl	800e4da <HAL_NVIC_SystemReset>
 800d82c:	e7fc      	b.n	800d828 <NMI_Handler+0x8>

0800d82e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800d82e:	b580      	push	{r7, lr}
 800d830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 800d832:	f000 fe52 	bl	800e4da <HAL_NVIC_SystemReset>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_NVIC_SystemReset();
 800d836:	f000 fe50 	bl	800e4da <HAL_NVIC_SystemReset>
 800d83a:	e7fc      	b.n	800d836 <HardFault_Handler+0x8>

0800d83c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800d83c:	b480      	push	{r7}
 800d83e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800d840:	e7fe      	b.n	800d840 <MemManage_Handler+0x4>

0800d842 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800d842:	b480      	push	{r7}
 800d844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800d846:	e7fe      	b.n	800d846 <BusFault_Handler+0x4>

0800d848 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800d848:	b480      	push	{r7}
 800d84a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800d84c:	e7fe      	b.n	800d84c <UsageFault_Handler+0x4>

0800d84e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800d84e:	b480      	push	{r7}
 800d850:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800d852:	bf00      	nop
 800d854:	46bd      	mov	sp, r7
 800d856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85a:	4770      	bx	lr

0800d85c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800d860:	4802      	ldr	r0, [pc, #8]	; (800d86c <DMA1_Channel1_IRQHandler+0x10>)
 800d862:	f001 f81d 	bl	800e8a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800d866:	bf00      	nop
 800d868:	bd80      	pop	{r7, pc}
 800d86a:	bf00      	nop
 800d86c:	20004924 	.word	0x20004924

0800d870 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800d870:	b580      	push	{r7, lr}
 800d872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 800d874:	4802      	ldr	r0, [pc, #8]	; (800d880 <DMA1_Channel2_IRQHandler+0x10>)
 800d876:	f001 f813 	bl	800e8a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800d87a:	bf00      	nop
 800d87c:	bd80      	pop	{r7, pc}
 800d87e:	bf00      	nop
 800d880:	200047a4 	.word	0x200047a4

0800d884 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800d884:	b580      	push	{r7, lr}
 800d886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800d888:	4802      	ldr	r0, [pc, #8]	; (800d894 <DMA1_Channel3_IRQHandler+0x10>)
 800d88a:	f001 f809 	bl	800e8a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800d88e:	bf00      	nop
 800d890:	bd80      	pop	{r7, pc}
 800d892:	bf00      	nop
 800d894:	20004984 	.word	0x20004984

0800d898 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800d89c:	4803      	ldr	r0, [pc, #12]	; (800d8ac <TIM1_BRK_TIM15_IRQHandler+0x14>)
 800d89e:	f005 f8ef 	bl	8012a80 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 800d8a2:	4803      	ldr	r0, [pc, #12]	; (800d8b0 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 800d8a4:	f005 f8ec 	bl	8012a80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800d8a8:	bf00      	nop
 800d8aa:	bd80      	pop	{r7, pc}
 800d8ac:	200046c0 	.word	0x200046c0
 800d8b0:	20004670 	.word	0x20004670

0800d8b4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800d8b8:	4803      	ldr	r0, [pc, #12]	; (800d8c8 <TIM1_UP_TIM16_IRQHandler+0x14>)
 800d8ba:	f005 f8e1 	bl	8012a80 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800d8be:	4803      	ldr	r0, [pc, #12]	; (800d8cc <TIM1_UP_TIM16_IRQHandler+0x18>)
 800d8c0:	f005 f8de 	bl	8012a80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800d8c4:	bf00      	nop
 800d8c6:	bd80      	pop	{r7, pc}
 800d8c8:	200046c0 	.word	0x200046c0
 800d8cc:	20004758 	.word	0x20004758

0800d8d0 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800d8d4:	4802      	ldr	r0, [pc, #8]	; (800d8e0 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800d8d6:	f005 f8d3 	bl	8012a80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800d8da:	bf00      	nop
 800d8dc:	bd80      	pop	{r7, pc}
 800d8de:	bf00      	nop
 800d8e0:	200046c0 	.word	0x200046c0

0800d8e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800d8e8:	4802      	ldr	r0, [pc, #8]	; (800d8f4 <USART1_IRQHandler+0x10>)
 800d8ea:	f006 fb0d 	bl	8013f08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800d8ee:	bf00      	nop
 800d8f0:	bd80      	pop	{r7, pc}
 800d8f2:	bf00      	nop
 800d8f4:	20004804 	.word	0x20004804

0800d8f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800d8fc:	4802      	ldr	r0, [pc, #8]	; (800d908 <USART2_IRQHandler+0x10>)
 800d8fe:	f006 fb03 	bl	8013f08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800d902:	bf00      	nop
 800d904:	bd80      	pop	{r7, pc}
 800d906:	bf00      	nop
 800d908:	20004894 	.word	0x20004894

0800d90c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800d90c:	b480      	push	{r7}
 800d90e:	af00      	add	r7, sp, #0
  return 1;
 800d910:	2301      	movs	r3, #1
}
 800d912:	4618      	mov	r0, r3
 800d914:	46bd      	mov	sp, r7
 800d916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91a:	4770      	bx	lr

0800d91c <_kill>:

int _kill(int pid, int sig)
{
 800d91c:	b580      	push	{r7, lr}
 800d91e:	b082      	sub	sp, #8
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
 800d924:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800d926:	f00b fffb 	bl	8019920 <__errno>
 800d92a:	4603      	mov	r3, r0
 800d92c:	2216      	movs	r2, #22
 800d92e:	601a      	str	r2, [r3, #0]
  return -1;
 800d930:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d934:	4618      	mov	r0, r3
 800d936:	3708      	adds	r7, #8
 800d938:	46bd      	mov	sp, r7
 800d93a:	bd80      	pop	{r7, pc}

0800d93c <_exit>:

void _exit (int status)
{
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b082      	sub	sp, #8
 800d940:	af00      	add	r7, sp, #0
 800d942:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800d944:	f04f 31ff 	mov.w	r1, #4294967295
 800d948:	6878      	ldr	r0, [r7, #4]
 800d94a:	f7ff ffe7 	bl	800d91c <_kill>
  while (1) {}    /* Make sure we hang here */
 800d94e:	e7fe      	b.n	800d94e <_exit+0x12>

0800d950 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800d950:	b580      	push	{r7, lr}
 800d952:	b086      	sub	sp, #24
 800d954:	af00      	add	r7, sp, #0
 800d956:	60f8      	str	r0, [r7, #12]
 800d958:	60b9      	str	r1, [r7, #8]
 800d95a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d95c:	2300      	movs	r3, #0
 800d95e:	617b      	str	r3, [r7, #20]
 800d960:	e00a      	b.n	800d978 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800d962:	f3af 8000 	nop.w
 800d966:	4601      	mov	r1, r0
 800d968:	68bb      	ldr	r3, [r7, #8]
 800d96a:	1c5a      	adds	r2, r3, #1
 800d96c:	60ba      	str	r2, [r7, #8]
 800d96e:	b2ca      	uxtb	r2, r1
 800d970:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d972:	697b      	ldr	r3, [r7, #20]
 800d974:	3301      	adds	r3, #1
 800d976:	617b      	str	r3, [r7, #20]
 800d978:	697a      	ldr	r2, [r7, #20]
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	429a      	cmp	r2, r3
 800d97e:	dbf0      	blt.n	800d962 <_read+0x12>
  }

  return len;
 800d980:	687b      	ldr	r3, [r7, #4]
}
 800d982:	4618      	mov	r0, r3
 800d984:	3718      	adds	r7, #24
 800d986:	46bd      	mov	sp, r7
 800d988:	bd80      	pop	{r7, pc}

0800d98a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800d98a:	b580      	push	{r7, lr}
 800d98c:	b086      	sub	sp, #24
 800d98e:	af00      	add	r7, sp, #0
 800d990:	60f8      	str	r0, [r7, #12]
 800d992:	60b9      	str	r1, [r7, #8]
 800d994:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d996:	2300      	movs	r3, #0
 800d998:	617b      	str	r3, [r7, #20]
 800d99a:	e009      	b.n	800d9b0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800d99c:	68bb      	ldr	r3, [r7, #8]
 800d99e:	1c5a      	adds	r2, r3, #1
 800d9a0:	60ba      	str	r2, [r7, #8]
 800d9a2:	781b      	ldrb	r3, [r3, #0]
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d9aa:	697b      	ldr	r3, [r7, #20]
 800d9ac:	3301      	adds	r3, #1
 800d9ae:	617b      	str	r3, [r7, #20]
 800d9b0:	697a      	ldr	r2, [r7, #20]
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	429a      	cmp	r2, r3
 800d9b6:	dbf1      	blt.n	800d99c <_write+0x12>
  }
  return len;
 800d9b8:	687b      	ldr	r3, [r7, #4]
}
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	3718      	adds	r7, #24
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	bd80      	pop	{r7, pc}

0800d9c2 <_close>:

int _close(int file)
{
 800d9c2:	b480      	push	{r7}
 800d9c4:	b083      	sub	sp, #12
 800d9c6:	af00      	add	r7, sp, #0
 800d9c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800d9ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	370c      	adds	r7, #12
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d8:	4770      	bx	lr

0800d9da <_fstat>:


int _fstat(int file, struct stat *st)
{
 800d9da:	b480      	push	{r7}
 800d9dc:	b083      	sub	sp, #12
 800d9de:	af00      	add	r7, sp, #0
 800d9e0:	6078      	str	r0, [r7, #4]
 800d9e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800d9e4:	683b      	ldr	r3, [r7, #0]
 800d9e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800d9ea:	605a      	str	r2, [r3, #4]
  return 0;
 800d9ec:	2300      	movs	r3, #0
}
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	370c      	adds	r7, #12
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f8:	4770      	bx	lr

0800d9fa <_isatty>:

int _isatty(int file)
{
 800d9fa:	b480      	push	{r7}
 800d9fc:	b083      	sub	sp, #12
 800d9fe:	af00      	add	r7, sp, #0
 800da00:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800da02:	2301      	movs	r3, #1
}
 800da04:	4618      	mov	r0, r3
 800da06:	370c      	adds	r7, #12
 800da08:	46bd      	mov	sp, r7
 800da0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0e:	4770      	bx	lr

0800da10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800da10:	b480      	push	{r7}
 800da12:	b085      	sub	sp, #20
 800da14:	af00      	add	r7, sp, #0
 800da16:	60f8      	str	r0, [r7, #12]
 800da18:	60b9      	str	r1, [r7, #8]
 800da1a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800da1c:	2300      	movs	r3, #0
}
 800da1e:	4618      	mov	r0, r3
 800da20:	3714      	adds	r7, #20
 800da22:	46bd      	mov	sp, r7
 800da24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da28:	4770      	bx	lr
	...

0800da2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b086      	sub	sp, #24
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800da34:	4a14      	ldr	r2, [pc, #80]	; (800da88 <_sbrk+0x5c>)
 800da36:	4b15      	ldr	r3, [pc, #84]	; (800da8c <_sbrk+0x60>)
 800da38:	1ad3      	subs	r3, r2, r3
 800da3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800da3c:	697b      	ldr	r3, [r7, #20]
 800da3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800da40:	4b13      	ldr	r3, [pc, #76]	; (800da90 <_sbrk+0x64>)
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d102      	bne.n	800da4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800da48:	4b11      	ldr	r3, [pc, #68]	; (800da90 <_sbrk+0x64>)
 800da4a:	4a12      	ldr	r2, [pc, #72]	; (800da94 <_sbrk+0x68>)
 800da4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800da4e:	4b10      	ldr	r3, [pc, #64]	; (800da90 <_sbrk+0x64>)
 800da50:	681a      	ldr	r2, [r3, #0]
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	4413      	add	r3, r2
 800da56:	693a      	ldr	r2, [r7, #16]
 800da58:	429a      	cmp	r2, r3
 800da5a:	d207      	bcs.n	800da6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800da5c:	f00b ff60 	bl	8019920 <__errno>
 800da60:	4603      	mov	r3, r0
 800da62:	220c      	movs	r2, #12
 800da64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800da66:	f04f 33ff 	mov.w	r3, #4294967295
 800da6a:	e009      	b.n	800da80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800da6c:	4b08      	ldr	r3, [pc, #32]	; (800da90 <_sbrk+0x64>)
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800da72:	4b07      	ldr	r3, [pc, #28]	; (800da90 <_sbrk+0x64>)
 800da74:	681a      	ldr	r2, [r3, #0]
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	4413      	add	r3, r2
 800da7a:	4a05      	ldr	r2, [pc, #20]	; (800da90 <_sbrk+0x64>)
 800da7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800da7e:	68fb      	ldr	r3, [r7, #12]
}
 800da80:	4618      	mov	r0, r3
 800da82:	3718      	adds	r7, #24
 800da84:	46bd      	mov	sp, r7
 800da86:	bd80      	pop	{r7, pc}
 800da88:	20050000 	.word	0x20050000
 800da8c:	00000c00 	.word	0x00000c00
 800da90:	200046bc 	.word	0x200046bc
 800da94:	20037408 	.word	0x20037408

0800da98 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800da98:	b480      	push	{r7}
 800da9a:	af00      	add	r7, sp, #0
#if defined(USER_VECT_TAB_ADDRESS)
  /* Configure the Vector Table location -------------------------------------*/
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
 800da9c:	4b08      	ldr	r3, [pc, #32]	; (800dac0 <SystemInit+0x28>)
 800da9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800daa2:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800daa4:	4b06      	ldr	r3, [pc, #24]	; (800dac0 <SystemInit+0x28>)
 800daa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800daaa:	4a05      	ldr	r2, [pc, #20]	; (800dac0 <SystemInit+0x28>)
 800daac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800dab0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800dab4:	bf00      	nop
 800dab6:	46bd      	mov	sp, r7
 800dab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dabc:	4770      	bx	lr
 800dabe:	bf00      	nop
 800dac0:	e000ed00 	.word	0xe000ed00

0800dac4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b09a      	sub	sp, #104	; 0x68
 800dac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800daca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800dace:	2200      	movs	r2, #0
 800dad0:	601a      	str	r2, [r3, #0]
 800dad2:	605a      	str	r2, [r3, #4]
 800dad4:	609a      	str	r2, [r3, #8]
 800dad6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800dad8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800dadc:	2200      	movs	r2, #0
 800dade:	601a      	str	r2, [r3, #0]
 800dae0:	605a      	str	r2, [r3, #4]
 800dae2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800dae4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dae8:	2200      	movs	r2, #0
 800daea:	601a      	str	r2, [r3, #0]
 800daec:	605a      	str	r2, [r3, #4]
 800daee:	609a      	str	r2, [r3, #8]
 800daf0:	60da      	str	r2, [r3, #12]
 800daf2:	611a      	str	r2, [r3, #16]
 800daf4:	615a      	str	r2, [r3, #20]
 800daf6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800daf8:	1d3b      	adds	r3, r7, #4
 800dafa:	222c      	movs	r2, #44	; 0x2c
 800dafc:	2100      	movs	r1, #0
 800dafe:	4618      	mov	r0, r3
 800db00:	f00b ff46 	bl	8019990 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800db04:	4b43      	ldr	r3, [pc, #268]	; (800dc14 <MX_TIM1_Init+0x150>)
 800db06:	4a44      	ldr	r2, [pc, #272]	; (800dc18 <MX_TIM1_Init+0x154>)
 800db08:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800db0a:	4b42      	ldr	r3, [pc, #264]	; (800dc14 <MX_TIM1_Init+0x150>)
 800db0c:	2200      	movs	r2, #0
 800db0e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800db10:	4b40      	ldr	r3, [pc, #256]	; (800dc14 <MX_TIM1_Init+0x150>)
 800db12:	2200      	movs	r2, #0
 800db14:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 149;
 800db16:	4b3f      	ldr	r3, [pc, #252]	; (800dc14 <MX_TIM1_Init+0x150>)
 800db18:	2295      	movs	r2, #149	; 0x95
 800db1a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800db1c:	4b3d      	ldr	r3, [pc, #244]	; (800dc14 <MX_TIM1_Init+0x150>)
 800db1e:	2200      	movs	r2, #0
 800db20:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800db22:	4b3c      	ldr	r3, [pc, #240]	; (800dc14 <MX_TIM1_Init+0x150>)
 800db24:	2200      	movs	r2, #0
 800db26:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800db28:	4b3a      	ldr	r3, [pc, #232]	; (800dc14 <MX_TIM1_Init+0x150>)
 800db2a:	2200      	movs	r2, #0
 800db2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800db2e:	4839      	ldr	r0, [pc, #228]	; (800dc14 <MX_TIM1_Init+0x150>)
 800db30:	f004 fa30 	bl	8011f94 <HAL_TIM_Base_Init>
 800db34:	4603      	mov	r3, r0
 800db36:	2b00      	cmp	r3, #0
 800db38:	d001      	beq.n	800db3e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800db3a:	f7fd fbe5 	bl	800b308 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800db3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800db42:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800db44:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800db48:	4619      	mov	r1, r3
 800db4a:	4832      	ldr	r0, [pc, #200]	; (800dc14 <MX_TIM1_Init+0x150>)
 800db4c:	f005 f9cc 	bl	8012ee8 <HAL_TIM_ConfigClockSource>
 800db50:	4603      	mov	r3, r0
 800db52:	2b00      	cmp	r3, #0
 800db54:	d001      	beq.n	800db5a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800db56:	f7fd fbd7 	bl	800b308 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800db5a:	482e      	ldr	r0, [pc, #184]	; (800dc14 <MX_TIM1_Init+0x150>)
 800db5c:	f004 fae2 	bl	8012124 <HAL_TIM_PWM_Init>
 800db60:	4603      	mov	r3, r0
 800db62:	2b00      	cmp	r3, #0
 800db64:	d001      	beq.n	800db6a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800db66:	f7fd fbcf 	bl	800b308 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800db6a:	2300      	movs	r3, #0
 800db6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800db6e:	2300      	movs	r3, #0
 800db70:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800db72:	2300      	movs	r3, #0
 800db74:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800db76:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800db7a:	4619      	mov	r1, r3
 800db7c:	4825      	ldr	r0, [pc, #148]	; (800dc14 <MX_TIM1_Init+0x150>)
 800db7e:	f005 ffb9 	bl	8013af4 <HAL_TIMEx_MasterConfigSynchronization>
 800db82:	4603      	mov	r3, r0
 800db84:	2b00      	cmp	r3, #0
 800db86:	d001      	beq.n	800db8c <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 800db88:	f7fd fbbe 	bl	800b308 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800db8c:	2360      	movs	r3, #96	; 0x60
 800db8e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800db90:	2300      	movs	r3, #0
 800db92:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800db94:	2300      	movs	r3, #0
 800db96:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800db98:	2300      	movs	r3, #0
 800db9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800db9c:	2300      	movs	r3, #0
 800db9e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 800dba0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dba4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800dba6:	2300      	movs	r3, #0
 800dba8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800dbaa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dbae:	2200      	movs	r2, #0
 800dbb0:	4619      	mov	r1, r3
 800dbb2:	4818      	ldr	r0, [pc, #96]	; (800dc14 <MX_TIM1_Init+0x150>)
 800dbb4:	f005 f884 	bl	8012cc0 <HAL_TIM_PWM_ConfigChannel>
 800dbb8:	4603      	mov	r3, r0
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d001      	beq.n	800dbc2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800dbbe:	f7fd fba3 	bl	800b308 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800dbca:	2300      	movs	r3, #0
 800dbcc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800dbce:	2300      	movs	r3, #0
 800dbd0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800dbd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dbda:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800dbdc:	2300      	movs	r3, #0
 800dbde:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800dbe4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800dbe8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800dbea:	2300      	movs	r3, #0
 800dbec:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800dbee:	2300      	movs	r3, #0
 800dbf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800dbf2:	1d3b      	adds	r3, r7, #4
 800dbf4:	4619      	mov	r1, r3
 800dbf6:	4807      	ldr	r0, [pc, #28]	; (800dc14 <MX_TIM1_Init+0x150>)
 800dbf8:	f006 f804 	bl	8013c04 <HAL_TIMEx_ConfigBreakDeadTime>
 800dbfc:	4603      	mov	r3, r0
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d001      	beq.n	800dc06 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800dc02:	f7fd fb81 	bl	800b308 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800dc06:	4803      	ldr	r0, [pc, #12]	; (800dc14 <MX_TIM1_Init+0x150>)
 800dc08:	f000 f938 	bl	800de7c <HAL_TIM_MspPostInit>

}
 800dc0c:	bf00      	nop
 800dc0e:	3768      	adds	r7, #104	; 0x68
 800dc10:	46bd      	mov	sp, r7
 800dc12:	bd80      	pop	{r7, pc}
 800dc14:	200046c0 	.word	0x200046c0
 800dc18:	40012c00 	.word	0x40012c00

0800dc1c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b08c      	sub	sp, #48	; 0x30
 800dc20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800dc22:	f107 030c 	add.w	r3, r7, #12
 800dc26:	2224      	movs	r2, #36	; 0x24
 800dc28:	2100      	movs	r1, #0
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	f00b feb0 	bl	8019990 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800dc30:	463b      	mov	r3, r7
 800dc32:	2200      	movs	r2, #0
 800dc34:	601a      	str	r2, [r3, #0]
 800dc36:	605a      	str	r2, [r3, #4]
 800dc38:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800dc3a:	4b21      	ldr	r3, [pc, #132]	; (800dcc0 <MX_TIM5_Init+0xa4>)
 800dc3c:	4a21      	ldr	r2, [pc, #132]	; (800dcc4 <MX_TIM5_Init+0xa8>)
 800dc3e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800dc40:	4b1f      	ldr	r3, [pc, #124]	; (800dcc0 <MX_TIM5_Init+0xa4>)
 800dc42:	2200      	movs	r2, #0
 800dc44:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dc46:	4b1e      	ldr	r3, [pc, #120]	; (800dcc0 <MX_TIM5_Init+0xa4>)
 800dc48:	2200      	movs	r2, #0
 800dc4a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800dc4c:	4b1c      	ldr	r3, [pc, #112]	; (800dcc0 <MX_TIM5_Init+0xa4>)
 800dc4e:	f04f 32ff 	mov.w	r2, #4294967295
 800dc52:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800dc54:	4b1a      	ldr	r3, [pc, #104]	; (800dcc0 <MX_TIM5_Init+0xa4>)
 800dc56:	2200      	movs	r2, #0
 800dc58:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800dc5a:	4b19      	ldr	r3, [pc, #100]	; (800dcc0 <MX_TIM5_Init+0xa4>)
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800dc60:	2303      	movs	r3, #3
 800dc62:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800dc64:	2300      	movs	r3, #0
 800dc66:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800dc68:	2301      	movs	r3, #1
 800dc6a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800dc70:	230f      	movs	r3, #15
 800dc72:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800dc74:	2300      	movs	r3, #0
 800dc76:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800dc78:	2301      	movs	r3, #1
 800dc7a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 800dc80:	230f      	movs	r3, #15
 800dc82:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800dc84:	f107 030c 	add.w	r3, r7, #12
 800dc88:	4619      	mov	r1, r3
 800dc8a:	480d      	ldr	r0, [pc, #52]	; (800dcc0 <MX_TIM5_Init+0xa4>)
 800dc8c:	f004 fdc4 	bl	8012818 <HAL_TIM_Encoder_Init>
 800dc90:	4603      	mov	r3, r0
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d001      	beq.n	800dc9a <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 800dc96:	f7fd fb37 	bl	800b308 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dc9e:	2300      	movs	r3, #0
 800dca0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800dca2:	463b      	mov	r3, r7
 800dca4:	4619      	mov	r1, r3
 800dca6:	4806      	ldr	r0, [pc, #24]	; (800dcc0 <MX_TIM5_Init+0xa4>)
 800dca8:	f005 ff24 	bl	8013af4 <HAL_TIMEx_MasterConfigSynchronization>
 800dcac:	4603      	mov	r3, r0
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d001      	beq.n	800dcb6 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 800dcb2:	f7fd fb29 	bl	800b308 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800dcb6:	bf00      	nop
 800dcb8:	3730      	adds	r7, #48	; 0x30
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	bd80      	pop	{r7, pc}
 800dcbe:	bf00      	nop
 800dcc0:	2000470c 	.word	0x2000470c
 800dcc4:	40000c00 	.word	0x40000c00

0800dcc8 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800dccc:	4b0f      	ldr	r3, [pc, #60]	; (800dd0c <MX_TIM16_Init+0x44>)
 800dcce:	4a10      	ldr	r2, [pc, #64]	; (800dd10 <MX_TIM16_Init+0x48>)
 800dcd0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 119;
 800dcd2:	4b0e      	ldr	r3, [pc, #56]	; (800dd0c <MX_TIM16_Init+0x44>)
 800dcd4:	2277      	movs	r2, #119	; 0x77
 800dcd6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dcd8:	4b0c      	ldr	r3, [pc, #48]	; (800dd0c <MX_TIM16_Init+0x44>)
 800dcda:	2200      	movs	r2, #0
 800dcdc:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;
 800dcde:	4b0b      	ldr	r3, [pc, #44]	; (800dd0c <MX_TIM16_Init+0x44>)
 800dce0:	f240 32e7 	movw	r2, #999	; 0x3e7
 800dce4:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800dce6:	4b09      	ldr	r3, [pc, #36]	; (800dd0c <MX_TIM16_Init+0x44>)
 800dce8:	2200      	movs	r2, #0
 800dcea:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800dcec:	4b07      	ldr	r3, [pc, #28]	; (800dd0c <MX_TIM16_Init+0x44>)
 800dcee:	2200      	movs	r2, #0
 800dcf0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800dcf2:	4b06      	ldr	r3, [pc, #24]	; (800dd0c <MX_TIM16_Init+0x44>)
 800dcf4:	2200      	movs	r2, #0
 800dcf6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800dcf8:	4804      	ldr	r0, [pc, #16]	; (800dd0c <MX_TIM16_Init+0x44>)
 800dcfa:	f004 f94b 	bl	8011f94 <HAL_TIM_Base_Init>
 800dcfe:	4603      	mov	r3, r0
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d001      	beq.n	800dd08 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 800dd04:	f7fd fb00 	bl	800b308 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800dd08:	bf00      	nop
 800dd0a:	bd80      	pop	{r7, pc}
 800dd0c:	20004758 	.word	0x20004758
 800dd10:	40014400 	.word	0x40014400

0800dd14 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b084      	sub	sp, #16
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	4a30      	ldr	r2, [pc, #192]	; (800dde4 <HAL_TIM_Base_MspInit+0xd0>)
 800dd22:	4293      	cmp	r3, r2
 800dd24:	d148      	bne.n	800ddb8 <HAL_TIM_Base_MspInit+0xa4>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800dd26:	4b30      	ldr	r3, [pc, #192]	; (800dde8 <HAL_TIM_Base_MspInit+0xd4>)
 800dd28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dd2a:	4a2f      	ldr	r2, [pc, #188]	; (800dde8 <HAL_TIM_Base_MspInit+0xd4>)
 800dd2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800dd30:	6613      	str	r3, [r2, #96]	; 0x60
 800dd32:	4b2d      	ldr	r3, [pc, #180]	; (800dde8 <HAL_TIM_Base_MspInit+0xd4>)
 800dd34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dd36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dd3a:	60fb      	str	r3, [r7, #12]
 800dd3c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 800dd3e:	4b2b      	ldr	r3, [pc, #172]	; (800ddec <HAL_TIM_Base_MspInit+0xd8>)
 800dd40:	4a2b      	ldr	r2, [pc, #172]	; (800ddf0 <HAL_TIM_Base_MspInit+0xdc>)
 800dd42:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 800dd44:	4b29      	ldr	r3, [pc, #164]	; (800ddec <HAL_TIM_Base_MspInit+0xd8>)
 800dd46:	222b      	movs	r2, #43	; 0x2b
 800dd48:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800dd4a:	4b28      	ldr	r3, [pc, #160]	; (800ddec <HAL_TIM_Base_MspInit+0xd8>)
 800dd4c:	2210      	movs	r2, #16
 800dd4e:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800dd50:	4b26      	ldr	r3, [pc, #152]	; (800ddec <HAL_TIM_Base_MspInit+0xd8>)
 800dd52:	2200      	movs	r2, #0
 800dd54:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800dd56:	4b25      	ldr	r3, [pc, #148]	; (800ddec <HAL_TIM_Base_MspInit+0xd8>)
 800dd58:	2280      	movs	r2, #128	; 0x80
 800dd5a:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800dd5c:	4b23      	ldr	r3, [pc, #140]	; (800ddec <HAL_TIM_Base_MspInit+0xd8>)
 800dd5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dd62:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800dd64:	4b21      	ldr	r3, [pc, #132]	; (800ddec <HAL_TIM_Base_MspInit+0xd8>)
 800dd66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800dd6a:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 800dd6c:	4b1f      	ldr	r3, [pc, #124]	; (800ddec <HAL_TIM_Base_MspInit+0xd8>)
 800dd6e:	2200      	movs	r2, #0
 800dd70:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800dd72:	4b1e      	ldr	r3, [pc, #120]	; (800ddec <HAL_TIM_Base_MspInit+0xd8>)
 800dd74:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800dd78:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800dd7a:	481c      	ldr	r0, [pc, #112]	; (800ddec <HAL_TIM_Base_MspInit+0xd8>)
 800dd7c:	f000 fbb2 	bl	800e4e4 <HAL_DMA_Init>
 800dd80:	4603      	mov	r3, r0
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d001      	beq.n	800dd8a <HAL_TIM_Base_MspInit+0x76>
    {
      Error_Handler();
 800dd86:	f7fd fabf 	bl	800b308 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	4a17      	ldr	r2, [pc, #92]	; (800ddec <HAL_TIM_Base_MspInit+0xd8>)
 800dd8e:	625a      	str	r2, [r3, #36]	; 0x24
 800dd90:	4a16      	ldr	r2, [pc, #88]	; (800ddec <HAL_TIM_Base_MspInit+0xd8>)
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 15, 0);
 800dd96:	2200      	movs	r2, #0
 800dd98:	210f      	movs	r1, #15
 800dd9a:	2018      	movs	r0, #24
 800dd9c:	f000 fb73 	bl	800e486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800dda0:	2018      	movs	r0, #24
 800dda2:	f000 fb8c 	bl	800e4be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 5, 0);
 800dda6:	2200      	movs	r2, #0
 800dda8:	2105      	movs	r1, #5
 800ddaa:	201a      	movs	r0, #26
 800ddac:	f000 fb6b 	bl	800e486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800ddb0:	201a      	movs	r0, #26
 800ddb2:	f000 fb84 	bl	800e4be <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800ddb6:	e010      	b.n	800ddda <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM16)
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	4a0d      	ldr	r2, [pc, #52]	; (800ddf4 <HAL_TIM_Base_MspInit+0xe0>)
 800ddbe:	4293      	cmp	r3, r2
 800ddc0:	d10b      	bne.n	800ddda <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800ddc2:	4b09      	ldr	r3, [pc, #36]	; (800dde8 <HAL_TIM_Base_MspInit+0xd4>)
 800ddc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ddc6:	4a08      	ldr	r2, [pc, #32]	; (800dde8 <HAL_TIM_Base_MspInit+0xd4>)
 800ddc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ddcc:	6613      	str	r3, [r2, #96]	; 0x60
 800ddce:	4b06      	ldr	r3, [pc, #24]	; (800dde8 <HAL_TIM_Base_MspInit+0xd4>)
 800ddd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ddd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ddd6:	60bb      	str	r3, [r7, #8]
 800ddd8:	68bb      	ldr	r3, [r7, #8]
}
 800ddda:	bf00      	nop
 800dddc:	3710      	adds	r7, #16
 800ddde:	46bd      	mov	sp, r7
 800dde0:	bd80      	pop	{r7, pc}
 800dde2:	bf00      	nop
 800dde4:	40012c00 	.word	0x40012c00
 800dde8:	40021000 	.word	0x40021000
 800ddec:	200047a4 	.word	0x200047a4
 800ddf0:	4002001c 	.word	0x4002001c
 800ddf4:	40014400 	.word	0x40014400

0800ddf8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b08a      	sub	sp, #40	; 0x28
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800de00:	f107 0314 	add.w	r3, r7, #20
 800de04:	2200      	movs	r2, #0
 800de06:	601a      	str	r2, [r3, #0]
 800de08:	605a      	str	r2, [r3, #4]
 800de0a:	609a      	str	r2, [r3, #8]
 800de0c:	60da      	str	r2, [r3, #12]
 800de0e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM5)
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	4a17      	ldr	r2, [pc, #92]	; (800de74 <HAL_TIM_Encoder_MspInit+0x7c>)
 800de16:	4293      	cmp	r3, r2
 800de18:	d128      	bne.n	800de6c <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800de1a:	4b17      	ldr	r3, [pc, #92]	; (800de78 <HAL_TIM_Encoder_MspInit+0x80>)
 800de1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de1e:	4a16      	ldr	r2, [pc, #88]	; (800de78 <HAL_TIM_Encoder_MspInit+0x80>)
 800de20:	f043 0308 	orr.w	r3, r3, #8
 800de24:	6593      	str	r3, [r2, #88]	; 0x58
 800de26:	4b14      	ldr	r3, [pc, #80]	; (800de78 <HAL_TIM_Encoder_MspInit+0x80>)
 800de28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de2a:	f003 0308 	and.w	r3, r3, #8
 800de2e:	613b      	str	r3, [r7, #16]
 800de30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800de32:	4b11      	ldr	r3, [pc, #68]	; (800de78 <HAL_TIM_Encoder_MspInit+0x80>)
 800de34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800de36:	4a10      	ldr	r2, [pc, #64]	; (800de78 <HAL_TIM_Encoder_MspInit+0x80>)
 800de38:	f043 0301 	orr.w	r3, r3, #1
 800de3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800de3e:	4b0e      	ldr	r3, [pc, #56]	; (800de78 <HAL_TIM_Encoder_MspInit+0x80>)
 800de40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800de42:	f003 0301 	and.w	r3, r3, #1
 800de46:	60fb      	str	r3, [r7, #12]
 800de48:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800de4a:	2303      	movs	r3, #3
 800de4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de4e:	2302      	movs	r3, #2
 800de50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800de52:	2300      	movs	r3, #0
 800de54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800de56:	2300      	movs	r3, #0
 800de58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800de5a:	2302      	movs	r3, #2
 800de5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800de5e:	f107 0314 	add.w	r3, r7, #20
 800de62:	4619      	mov	r1, r3
 800de64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800de68:	f000 fe78 	bl	800eb5c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800de6c:	bf00      	nop
 800de6e:	3728      	adds	r7, #40	; 0x28
 800de70:	46bd      	mov	sp, r7
 800de72:	bd80      	pop	{r7, pc}
 800de74:	40000c00 	.word	0x40000c00
 800de78:	40021000 	.word	0x40021000

0800de7c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b088      	sub	sp, #32
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800de84:	f107 030c 	add.w	r3, r7, #12
 800de88:	2200      	movs	r2, #0
 800de8a:	601a      	str	r2, [r3, #0]
 800de8c:	605a      	str	r2, [r3, #4]
 800de8e:	609a      	str	r2, [r3, #8]
 800de90:	60da      	str	r2, [r3, #12]
 800de92:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	4a12      	ldr	r2, [pc, #72]	; (800dee4 <HAL_TIM_MspPostInit+0x68>)
 800de9a:	4293      	cmp	r3, r2
 800de9c:	d11d      	bne.n	800deda <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800de9e:	4b12      	ldr	r3, [pc, #72]	; (800dee8 <HAL_TIM_MspPostInit+0x6c>)
 800dea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dea2:	4a11      	ldr	r2, [pc, #68]	; (800dee8 <HAL_TIM_MspPostInit+0x6c>)
 800dea4:	f043 0301 	orr.w	r3, r3, #1
 800dea8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800deaa:	4b0f      	ldr	r3, [pc, #60]	; (800dee8 <HAL_TIM_MspPostInit+0x6c>)
 800deac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800deae:	f003 0301 	and.w	r3, r3, #1
 800deb2:	60bb      	str	r3, [r7, #8]
 800deb4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800deb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800deba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800debc:	2302      	movs	r3, #2
 800debe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dec0:	2300      	movs	r3, #0
 800dec2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dec4:	2300      	movs	r3, #0
 800dec6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800dec8:	2301      	movs	r3, #1
 800deca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800decc:	f107 030c 	add.w	r3, r7, #12
 800ded0:	4619      	mov	r1, r3
 800ded2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ded6:	f000 fe41 	bl	800eb5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800deda:	bf00      	nop
 800dedc:	3720      	adds	r7, #32
 800dede:	46bd      	mov	sp, r7
 800dee0:	bd80      	pop	{r7, pc}
 800dee2:	bf00      	nop
 800dee4:	40012c00 	.word	0x40012c00
 800dee8:	40021000 	.word	0x40021000

0800deec <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800deec:	b580      	push	{r7, lr}
 800deee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800def0:	4b24      	ldr	r3, [pc, #144]	; (800df84 <MX_USART1_UART_Init+0x98>)
 800def2:	4a25      	ldr	r2, [pc, #148]	; (800df88 <MX_USART1_UART_Init+0x9c>)
 800def4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2400;
 800def6:	4b23      	ldr	r3, [pc, #140]	; (800df84 <MX_USART1_UART_Init+0x98>)
 800def8:	f44f 6216 	mov.w	r2, #2400	; 0x960
 800defc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800defe:	4b21      	ldr	r3, [pc, #132]	; (800df84 <MX_USART1_UART_Init+0x98>)
 800df00:	2200      	movs	r2, #0
 800df02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800df04:	4b1f      	ldr	r3, [pc, #124]	; (800df84 <MX_USART1_UART_Init+0x98>)
 800df06:	2200      	movs	r2, #0
 800df08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800df0a:	4b1e      	ldr	r3, [pc, #120]	; (800df84 <MX_USART1_UART_Init+0x98>)
 800df0c:	2200      	movs	r2, #0
 800df0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800df10:	4b1c      	ldr	r3, [pc, #112]	; (800df84 <MX_USART1_UART_Init+0x98>)
 800df12:	220c      	movs	r2, #12
 800df14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800df16:	4b1b      	ldr	r3, [pc, #108]	; (800df84 <MX_USART1_UART_Init+0x98>)
 800df18:	2200      	movs	r2, #0
 800df1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800df1c:	4b19      	ldr	r3, [pc, #100]	; (800df84 <MX_USART1_UART_Init+0x98>)
 800df1e:	2200      	movs	r2, #0
 800df20:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800df22:	4b18      	ldr	r3, [pc, #96]	; (800df84 <MX_USART1_UART_Init+0x98>)
 800df24:	2200      	movs	r2, #0
 800df26:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800df28:	4b16      	ldr	r3, [pc, #88]	; (800df84 <MX_USART1_UART_Init+0x98>)
 800df2a:	2200      	movs	r2, #0
 800df2c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800df2e:	4b15      	ldr	r3, [pc, #84]	; (800df84 <MX_USART1_UART_Init+0x98>)
 800df30:	2210      	movs	r2, #16
 800df32:	629a      	str	r2, [r3, #40]	; 0x28
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800df34:	4b13      	ldr	r3, [pc, #76]	; (800df84 <MX_USART1_UART_Init+0x98>)
 800df36:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800df3a:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800df3c:	4811      	ldr	r0, [pc, #68]	; (800df84 <MX_USART1_UART_Init+0x98>)
 800df3e:	f005 fefd 	bl	8013d3c <HAL_UART_Init>
 800df42:	4603      	mov	r3, r0
 800df44:	2b00      	cmp	r3, #0
 800df46:	d001      	beq.n	800df4c <MX_USART1_UART_Init+0x60>
  {
    Error_Handler();
 800df48:	f7fd f9de 	bl	800b308 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800df4c:	2100      	movs	r1, #0
 800df4e:	480d      	ldr	r0, [pc, #52]	; (800df84 <MX_USART1_UART_Init+0x98>)
 800df50:	f007 faa2 	bl	8015498 <HAL_UARTEx_SetTxFifoThreshold>
 800df54:	4603      	mov	r3, r0
 800df56:	2b00      	cmp	r3, #0
 800df58:	d001      	beq.n	800df5e <MX_USART1_UART_Init+0x72>
  {
    Error_Handler();
 800df5a:	f7fd f9d5 	bl	800b308 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800df5e:	2100      	movs	r1, #0
 800df60:	4808      	ldr	r0, [pc, #32]	; (800df84 <MX_USART1_UART_Init+0x98>)
 800df62:	f007 fad7 	bl	8015514 <HAL_UARTEx_SetRxFifoThreshold>
 800df66:	4603      	mov	r3, r0
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d001      	beq.n	800df70 <MX_USART1_UART_Init+0x84>
  {
    Error_Handler();
 800df6c:	f7fd f9cc 	bl	800b308 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800df70:	4804      	ldr	r0, [pc, #16]	; (800df84 <MX_USART1_UART_Init+0x98>)
 800df72:	f007 fa58 	bl	8015426 <HAL_UARTEx_DisableFifoMode>
 800df76:	4603      	mov	r3, r0
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d001      	beq.n	800df80 <MX_USART1_UART_Init+0x94>
  {
    Error_Handler();
 800df7c:	f7fd f9c4 	bl	800b308 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800df80:	bf00      	nop
 800df82:	bd80      	pop	{r7, pc}
 800df84:	20004804 	.word	0x20004804
 800df88:	40013800 	.word	0x40013800

0800df8c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800df90:	4b24      	ldr	r3, [pc, #144]	; (800e024 <MX_USART2_UART_Init+0x98>)
 800df92:	4a25      	ldr	r2, [pc, #148]	; (800e028 <MX_USART2_UART_Init+0x9c>)
 800df94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800df96:	4b23      	ldr	r3, [pc, #140]	; (800e024 <MX_USART2_UART_Init+0x98>)
 800df98:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800df9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800df9e:	4b21      	ldr	r3, [pc, #132]	; (800e024 <MX_USART2_UART_Init+0x98>)
 800dfa0:	2200      	movs	r2, #0
 800dfa2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800dfa4:	4b1f      	ldr	r3, [pc, #124]	; (800e024 <MX_USART2_UART_Init+0x98>)
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800dfaa:	4b1e      	ldr	r3, [pc, #120]	; (800e024 <MX_USART2_UART_Init+0x98>)
 800dfac:	2200      	movs	r2, #0
 800dfae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800dfb0:	4b1c      	ldr	r3, [pc, #112]	; (800e024 <MX_USART2_UART_Init+0x98>)
 800dfb2:	220c      	movs	r2, #12
 800dfb4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dfb6:	4b1b      	ldr	r3, [pc, #108]	; (800e024 <MX_USART2_UART_Init+0x98>)
 800dfb8:	2200      	movs	r2, #0
 800dfba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800dfbc:	4b19      	ldr	r3, [pc, #100]	; (800e024 <MX_USART2_UART_Init+0x98>)
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800dfc2:	4b18      	ldr	r3, [pc, #96]	; (800e024 <MX_USART2_UART_Init+0x98>)
 800dfc4:	2200      	movs	r2, #0
 800dfc6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800dfc8:	4b16      	ldr	r3, [pc, #88]	; (800e024 <MX_USART2_UART_Init+0x98>)
 800dfca:	2200      	movs	r2, #0
 800dfcc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800dfce:	4b15      	ldr	r3, [pc, #84]	; (800e024 <MX_USART2_UART_Init+0x98>)
 800dfd0:	2210      	movs	r2, #16
 800dfd2:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800dfd4:	4b13      	ldr	r3, [pc, #76]	; (800e024 <MX_USART2_UART_Init+0x98>)
 800dfd6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800dfda:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800dfdc:	4811      	ldr	r0, [pc, #68]	; (800e024 <MX_USART2_UART_Init+0x98>)
 800dfde:	f005 fead 	bl	8013d3c <HAL_UART_Init>
 800dfe2:	4603      	mov	r3, r0
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d001      	beq.n	800dfec <MX_USART2_UART_Init+0x60>
  {
    Error_Handler();
 800dfe8:	f7fd f98e 	bl	800b308 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800dfec:	2100      	movs	r1, #0
 800dfee:	480d      	ldr	r0, [pc, #52]	; (800e024 <MX_USART2_UART_Init+0x98>)
 800dff0:	f007 fa52 	bl	8015498 <HAL_UARTEx_SetTxFifoThreshold>
 800dff4:	4603      	mov	r3, r0
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d001      	beq.n	800dffe <MX_USART2_UART_Init+0x72>
  {
    Error_Handler();
 800dffa:	f7fd f985 	bl	800b308 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800dffe:	2100      	movs	r1, #0
 800e000:	4808      	ldr	r0, [pc, #32]	; (800e024 <MX_USART2_UART_Init+0x98>)
 800e002:	f007 fa87 	bl	8015514 <HAL_UARTEx_SetRxFifoThreshold>
 800e006:	4603      	mov	r3, r0
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d001      	beq.n	800e010 <MX_USART2_UART_Init+0x84>
  {
    Error_Handler();
 800e00c:	f7fd f97c 	bl	800b308 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800e010:	4804      	ldr	r0, [pc, #16]	; (800e024 <MX_USART2_UART_Init+0x98>)
 800e012:	f007 fa08 	bl	8015426 <HAL_UARTEx_DisableFifoMode>
 800e016:	4603      	mov	r3, r0
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d001      	beq.n	800e020 <MX_USART2_UART_Init+0x94>
  {
    Error_Handler();
 800e01c:	f7fd f974 	bl	800b308 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800e020:	bf00      	nop
 800e022:	bd80      	pop	{r7, pc}
 800e024:	20004894 	.word	0x20004894
 800e028:	40004400 	.word	0x40004400

0800e02c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b0b2      	sub	sp, #200	; 0xc8
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e034:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800e038:	2200      	movs	r2, #0
 800e03a:	601a      	str	r2, [r3, #0]
 800e03c:	605a      	str	r2, [r3, #4]
 800e03e:	609a      	str	r2, [r3, #8]
 800e040:	60da      	str	r2, [r3, #12]
 800e042:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800e044:	f107 031c 	add.w	r3, r7, #28
 800e048:	2298      	movs	r2, #152	; 0x98
 800e04a:	2100      	movs	r1, #0
 800e04c:	4618      	mov	r0, r3
 800e04e:	f00b fc9f 	bl	8019990 <memset>
  if(uartHandle->Instance==USART1)
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	4a6c      	ldr	r2, [pc, #432]	; (800e208 <HAL_UART_MspInit+0x1dc>)
 800e058:	4293      	cmp	r3, r2
 800e05a:	d166      	bne.n	800e12a <HAL_UART_MspInit+0xfe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800e05c:	2301      	movs	r3, #1
 800e05e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800e060:	2300      	movs	r3, #0
 800e062:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800e064:	f107 031c 	add.w	r3, r7, #28
 800e068:	4618      	mov	r0, r3
 800e06a:	f001 fff3 	bl	8010054 <HAL_RCCEx_PeriphCLKConfig>
 800e06e:	4603      	mov	r3, r0
 800e070:	2b00      	cmp	r3, #0
 800e072:	d001      	beq.n	800e078 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800e074:	f7fd f948 	bl	800b308 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800e078:	4b64      	ldr	r3, [pc, #400]	; (800e20c <HAL_UART_MspInit+0x1e0>)
 800e07a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e07c:	4a63      	ldr	r2, [pc, #396]	; (800e20c <HAL_UART_MspInit+0x1e0>)
 800e07e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e082:	6613      	str	r3, [r2, #96]	; 0x60
 800e084:	4b61      	ldr	r3, [pc, #388]	; (800e20c <HAL_UART_MspInit+0x1e0>)
 800e086:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e088:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e08c:	61bb      	str	r3, [r7, #24]
 800e08e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e090:	4b5e      	ldr	r3, [pc, #376]	; (800e20c <HAL_UART_MspInit+0x1e0>)
 800e092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e094:	4a5d      	ldr	r2, [pc, #372]	; (800e20c <HAL_UART_MspInit+0x1e0>)
 800e096:	f043 0301 	orr.w	r3, r3, #1
 800e09a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e09c:	4b5b      	ldr	r3, [pc, #364]	; (800e20c <HAL_UART_MspInit+0x1e0>)
 800e09e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e0a0:	f003 0301 	and.w	r3, r3, #1
 800e0a4:	617b      	str	r3, [r7, #20]
 800e0a6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800e0a8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800e0ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e0b0:	2302      	movs	r3, #2
 800e0b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e0bc:	2303      	movs	r3, #3
 800e0be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800e0c2:	2307      	movs	r3, #7
 800e0c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e0c8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800e0cc:	4619      	mov	r1, r3
 800e0ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800e0d2:	f000 fd43 	bl	800eb5c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 800e0d6:	4b4e      	ldr	r3, [pc, #312]	; (800e210 <HAL_UART_MspInit+0x1e4>)
 800e0d8:	4a4e      	ldr	r2, [pc, #312]	; (800e214 <HAL_UART_MspInit+0x1e8>)
 800e0da:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800e0dc:	4b4c      	ldr	r3, [pc, #304]	; (800e210 <HAL_UART_MspInit+0x1e4>)
 800e0de:	2219      	movs	r2, #25
 800e0e0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e0e2:	4b4b      	ldr	r3, [pc, #300]	; (800e210 <HAL_UART_MspInit+0x1e4>)
 800e0e4:	2200      	movs	r2, #0
 800e0e6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e0e8:	4b49      	ldr	r3, [pc, #292]	; (800e210 <HAL_UART_MspInit+0x1e4>)
 800e0ea:	2200      	movs	r2, #0
 800e0ec:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800e0ee:	4b48      	ldr	r3, [pc, #288]	; (800e210 <HAL_UART_MspInit+0x1e4>)
 800e0f0:	2280      	movs	r2, #128	; 0x80
 800e0f2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e0f4:	4b46      	ldr	r3, [pc, #280]	; (800e210 <HAL_UART_MspInit+0x1e4>)
 800e0f6:	2200      	movs	r2, #0
 800e0f8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800e0fa:	4b45      	ldr	r3, [pc, #276]	; (800e210 <HAL_UART_MspInit+0x1e4>)
 800e0fc:	2200      	movs	r2, #0
 800e0fe:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800e100:	4b43      	ldr	r3, [pc, #268]	; (800e210 <HAL_UART_MspInit+0x1e4>)
 800e102:	2200      	movs	r2, #0
 800e104:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800e106:	4b42      	ldr	r3, [pc, #264]	; (800e210 <HAL_UART_MspInit+0x1e4>)
 800e108:	2200      	movs	r2, #0
 800e10a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800e10c:	4840      	ldr	r0, [pc, #256]	; (800e210 <HAL_UART_MspInit+0x1e4>)
 800e10e:	f000 f9e9 	bl	800e4e4 <HAL_DMA_Init>
 800e112:	4603      	mov	r3, r0
 800e114:	2b00      	cmp	r3, #0
 800e116:	d001      	beq.n	800e11c <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 800e118:	f7fd f8f6 	bl	800b308 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	4a3c      	ldr	r2, [pc, #240]	; (800e210 <HAL_UART_MspInit+0x1e4>)
 800e120:	67da      	str	r2, [r3, #124]	; 0x7c
 800e122:	4a3b      	ldr	r2, [pc, #236]	; (800e210 <HAL_UART_MspInit+0x1e4>)
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800e128:	e069      	b.n	800e1fe <HAL_UART_MspInit+0x1d2>
  else if(uartHandle->Instance==USART2)
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	4a3a      	ldr	r2, [pc, #232]	; (800e218 <HAL_UART_MspInit+0x1ec>)
 800e130:	4293      	cmp	r3, r2
 800e132:	d164      	bne.n	800e1fe <HAL_UART_MspInit+0x1d2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800e134:	2302      	movs	r3, #2
 800e136:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800e138:	2300      	movs	r3, #0
 800e13a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800e13c:	f107 031c 	add.w	r3, r7, #28
 800e140:	4618      	mov	r0, r3
 800e142:	f001 ff87 	bl	8010054 <HAL_RCCEx_PeriphCLKConfig>
 800e146:	4603      	mov	r3, r0
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d001      	beq.n	800e150 <HAL_UART_MspInit+0x124>
      Error_Handler();
 800e14c:	f7fd f8dc 	bl	800b308 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800e150:	4b2e      	ldr	r3, [pc, #184]	; (800e20c <HAL_UART_MspInit+0x1e0>)
 800e152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e154:	4a2d      	ldr	r2, [pc, #180]	; (800e20c <HAL_UART_MspInit+0x1e0>)
 800e156:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e15a:	6593      	str	r3, [r2, #88]	; 0x58
 800e15c:	4b2b      	ldr	r3, [pc, #172]	; (800e20c <HAL_UART_MspInit+0x1e0>)
 800e15e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e164:	613b      	str	r3, [r7, #16]
 800e166:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e168:	4b28      	ldr	r3, [pc, #160]	; (800e20c <HAL_UART_MspInit+0x1e0>)
 800e16a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e16c:	4a27      	ldr	r2, [pc, #156]	; (800e20c <HAL_UART_MspInit+0x1e0>)
 800e16e:	f043 0301 	orr.w	r3, r3, #1
 800e172:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e174:	4b25      	ldr	r3, [pc, #148]	; (800e20c <HAL_UART_MspInit+0x1e0>)
 800e176:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e178:	f003 0301 	and.w	r3, r3, #1
 800e17c:	60fb      	str	r3, [r7, #12]
 800e17e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800e180:	230c      	movs	r3, #12
 800e182:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e186:	2302      	movs	r3, #2
 800e188:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e18c:	2300      	movs	r3, #0
 800e18e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e192:	2303      	movs	r3, #3
 800e194:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800e198:	2307      	movs	r3, #7
 800e19a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e19e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800e1a2:	4619      	mov	r1, r3
 800e1a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800e1a8:	f000 fcd8 	bl	800eb5c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel3;
 800e1ac:	4b1b      	ldr	r3, [pc, #108]	; (800e21c <HAL_UART_MspInit+0x1f0>)
 800e1ae:	4a1c      	ldr	r2, [pc, #112]	; (800e220 <HAL_UART_MspInit+0x1f4>)
 800e1b0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800e1b2:	4b1a      	ldr	r3, [pc, #104]	; (800e21c <HAL_UART_MspInit+0x1f0>)
 800e1b4:	221b      	movs	r2, #27
 800e1b6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e1b8:	4b18      	ldr	r3, [pc, #96]	; (800e21c <HAL_UART_MspInit+0x1f0>)
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e1be:	4b17      	ldr	r3, [pc, #92]	; (800e21c <HAL_UART_MspInit+0x1f0>)
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800e1c4:	4b15      	ldr	r3, [pc, #84]	; (800e21c <HAL_UART_MspInit+0x1f0>)
 800e1c6:	2280      	movs	r2, #128	; 0x80
 800e1c8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e1ca:	4b14      	ldr	r3, [pc, #80]	; (800e21c <HAL_UART_MspInit+0x1f0>)
 800e1cc:	2200      	movs	r2, #0
 800e1ce:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800e1d0:	4b12      	ldr	r3, [pc, #72]	; (800e21c <HAL_UART_MspInit+0x1f0>)
 800e1d2:	2200      	movs	r2, #0
 800e1d4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800e1d6:	4b11      	ldr	r3, [pc, #68]	; (800e21c <HAL_UART_MspInit+0x1f0>)
 800e1d8:	2200      	movs	r2, #0
 800e1da:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800e1dc:	4b0f      	ldr	r3, [pc, #60]	; (800e21c <HAL_UART_MspInit+0x1f0>)
 800e1de:	2200      	movs	r2, #0
 800e1e0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800e1e2:	480e      	ldr	r0, [pc, #56]	; (800e21c <HAL_UART_MspInit+0x1f0>)
 800e1e4:	f000 f97e 	bl	800e4e4 <HAL_DMA_Init>
 800e1e8:	4603      	mov	r3, r0
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d001      	beq.n	800e1f2 <HAL_UART_MspInit+0x1c6>
      Error_Handler();
 800e1ee:	f7fd f88b 	bl	800b308 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	4a09      	ldr	r2, [pc, #36]	; (800e21c <HAL_UART_MspInit+0x1f0>)
 800e1f6:	67da      	str	r2, [r3, #124]	; 0x7c
 800e1f8:	4a08      	ldr	r2, [pc, #32]	; (800e21c <HAL_UART_MspInit+0x1f0>)
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	6293      	str	r3, [r2, #40]	; 0x28
}
 800e1fe:	bf00      	nop
 800e200:	37c8      	adds	r7, #200	; 0xc8
 800e202:	46bd      	mov	sp, r7
 800e204:	bd80      	pop	{r7, pc}
 800e206:	bf00      	nop
 800e208:	40013800 	.word	0x40013800
 800e20c:	40021000 	.word	0x40021000
 800e210:	20004924 	.word	0x20004924
 800e214:	40020008 	.word	0x40020008
 800e218:	40004400 	.word	0x40004400
 800e21c:	20004984 	.word	0x20004984
 800e220:	40020030 	.word	0x40020030

0800e224 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800e224:	f8df d034 	ldr.w	sp, [pc, #52]	; 800e25c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800e228:	f7ff fc36 	bl	800da98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800e22c:	480c      	ldr	r0, [pc, #48]	; (800e260 <LoopForever+0x6>)
  ldr r1, =_edata
 800e22e:	490d      	ldr	r1, [pc, #52]	; (800e264 <LoopForever+0xa>)
  ldr r2, =_sidata
 800e230:	4a0d      	ldr	r2, [pc, #52]	; (800e268 <LoopForever+0xe>)
  movs r3, #0
 800e232:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800e234:	e002      	b.n	800e23c <LoopCopyDataInit>

0800e236 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800e236:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800e238:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800e23a:	3304      	adds	r3, #4

0800e23c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800e23c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800e23e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800e240:	d3f9      	bcc.n	800e236 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800e242:	4a0a      	ldr	r2, [pc, #40]	; (800e26c <LoopForever+0x12>)
  ldr r4, =_ebss
 800e244:	4c0a      	ldr	r4, [pc, #40]	; (800e270 <LoopForever+0x16>)
  movs r3, #0
 800e246:	2300      	movs	r3, #0
  b LoopFillZerobss
 800e248:	e001      	b.n	800e24e <LoopFillZerobss>

0800e24a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800e24a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800e24c:	3204      	adds	r2, #4

0800e24e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800e24e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800e250:	d3fb      	bcc.n	800e24a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800e252:	f00b fb6b 	bl	801992c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800e256:	f7fc ff7f 	bl	800b158 <main>

0800e25a <LoopForever>:

LoopForever:
    b LoopForever
 800e25a:	e7fe      	b.n	800e25a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800e25c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800e260:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800e264:	20000278 	.word	0x20000278
  ldr r2, =_sidata
 800e268:	08025af8 	.word	0x08025af8
  ldr r2, =_sbss
 800e26c:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 800e270:	20037408 	.word	0x20037408

0800e274 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800e274:	e7fe      	b.n	800e274 <ADC1_2_IRQHandler>

0800e276 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800e276:	b580      	push	{r7, lr}
 800e278:	b082      	sub	sp, #8
 800e27a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800e27c:	2300      	movs	r3, #0
 800e27e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800e280:	2003      	movs	r0, #3
 800e282:	f000 f8f5 	bl	800e470 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800e286:	200f      	movs	r0, #15
 800e288:	f7ff fa5c 	bl	800d744 <HAL_InitTick>
 800e28c:	4603      	mov	r3, r0
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d002      	beq.n	800e298 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800e292:	2301      	movs	r3, #1
 800e294:	71fb      	strb	r3, [r7, #7]
 800e296:	e001      	b.n	800e29c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800e298:	f7ff fa2c 	bl	800d6f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800e29c:	79fb      	ldrb	r3, [r7, #7]
}
 800e29e:	4618      	mov	r0, r3
 800e2a0:	3708      	adds	r7, #8
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	bd80      	pop	{r7, pc}
	...

0800e2a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800e2a8:	b480      	push	{r7}
 800e2aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800e2ac:	4b06      	ldr	r3, [pc, #24]	; (800e2c8 <HAL_IncTick+0x20>)
 800e2ae:	781b      	ldrb	r3, [r3, #0]
 800e2b0:	461a      	mov	r2, r3
 800e2b2:	4b06      	ldr	r3, [pc, #24]	; (800e2cc <HAL_IncTick+0x24>)
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	4413      	add	r3, r2
 800e2b8:	4a04      	ldr	r2, [pc, #16]	; (800e2cc <HAL_IncTick+0x24>)
 800e2ba:	6013      	str	r3, [r2, #0]
}
 800e2bc:	bf00      	nop
 800e2be:	46bd      	mov	sp, r7
 800e2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c4:	4770      	bx	lr
 800e2c6:	bf00      	nop
 800e2c8:	2000009c 	.word	0x2000009c
 800e2cc:	200049e4 	.word	0x200049e4

0800e2d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800e2d0:	b480      	push	{r7}
 800e2d2:	af00      	add	r7, sp, #0
  return uwTick;
 800e2d4:	4b03      	ldr	r3, [pc, #12]	; (800e2e4 <HAL_GetTick+0x14>)
 800e2d6:	681b      	ldr	r3, [r3, #0]
}
 800e2d8:	4618      	mov	r0, r3
 800e2da:	46bd      	mov	sp, r7
 800e2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e0:	4770      	bx	lr
 800e2e2:	bf00      	nop
 800e2e4:	200049e4 	.word	0x200049e4

0800e2e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800e2e8:	b480      	push	{r7}
 800e2ea:	b085      	sub	sp, #20
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	f003 0307 	and.w	r3, r3, #7
 800e2f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800e2f8:	4b0c      	ldr	r3, [pc, #48]	; (800e32c <__NVIC_SetPriorityGrouping+0x44>)
 800e2fa:	68db      	ldr	r3, [r3, #12]
 800e2fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800e2fe:	68ba      	ldr	r2, [r7, #8]
 800e300:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800e304:	4013      	ands	r3, r2
 800e306:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800e30c:	68bb      	ldr	r3, [r7, #8]
 800e30e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800e310:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800e314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e318:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800e31a:	4a04      	ldr	r2, [pc, #16]	; (800e32c <__NVIC_SetPriorityGrouping+0x44>)
 800e31c:	68bb      	ldr	r3, [r7, #8]
 800e31e:	60d3      	str	r3, [r2, #12]
}
 800e320:	bf00      	nop
 800e322:	3714      	adds	r7, #20
 800e324:	46bd      	mov	sp, r7
 800e326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32a:	4770      	bx	lr
 800e32c:	e000ed00 	.word	0xe000ed00

0800e330 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800e330:	b480      	push	{r7}
 800e332:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800e334:	4b04      	ldr	r3, [pc, #16]	; (800e348 <__NVIC_GetPriorityGrouping+0x18>)
 800e336:	68db      	ldr	r3, [r3, #12]
 800e338:	0a1b      	lsrs	r3, r3, #8
 800e33a:	f003 0307 	and.w	r3, r3, #7
}
 800e33e:	4618      	mov	r0, r3
 800e340:	46bd      	mov	sp, r7
 800e342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e346:	4770      	bx	lr
 800e348:	e000ed00 	.word	0xe000ed00

0800e34c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800e34c:	b480      	push	{r7}
 800e34e:	b083      	sub	sp, #12
 800e350:	af00      	add	r7, sp, #0
 800e352:	4603      	mov	r3, r0
 800e354:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	db0b      	blt.n	800e376 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e35e:	79fb      	ldrb	r3, [r7, #7]
 800e360:	f003 021f 	and.w	r2, r3, #31
 800e364:	4907      	ldr	r1, [pc, #28]	; (800e384 <__NVIC_EnableIRQ+0x38>)
 800e366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e36a:	095b      	lsrs	r3, r3, #5
 800e36c:	2001      	movs	r0, #1
 800e36e:	fa00 f202 	lsl.w	r2, r0, r2
 800e372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800e376:	bf00      	nop
 800e378:	370c      	adds	r7, #12
 800e37a:	46bd      	mov	sp, r7
 800e37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e380:	4770      	bx	lr
 800e382:	bf00      	nop
 800e384:	e000e100 	.word	0xe000e100

0800e388 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800e388:	b480      	push	{r7}
 800e38a:	b083      	sub	sp, #12
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	4603      	mov	r3, r0
 800e390:	6039      	str	r1, [r7, #0]
 800e392:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	db0a      	blt.n	800e3b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e39c:	683b      	ldr	r3, [r7, #0]
 800e39e:	b2da      	uxtb	r2, r3
 800e3a0:	490c      	ldr	r1, [pc, #48]	; (800e3d4 <__NVIC_SetPriority+0x4c>)
 800e3a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e3a6:	0112      	lsls	r2, r2, #4
 800e3a8:	b2d2      	uxtb	r2, r2
 800e3aa:	440b      	add	r3, r1
 800e3ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800e3b0:	e00a      	b.n	800e3c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e3b2:	683b      	ldr	r3, [r7, #0]
 800e3b4:	b2da      	uxtb	r2, r3
 800e3b6:	4908      	ldr	r1, [pc, #32]	; (800e3d8 <__NVIC_SetPriority+0x50>)
 800e3b8:	79fb      	ldrb	r3, [r7, #7]
 800e3ba:	f003 030f 	and.w	r3, r3, #15
 800e3be:	3b04      	subs	r3, #4
 800e3c0:	0112      	lsls	r2, r2, #4
 800e3c2:	b2d2      	uxtb	r2, r2
 800e3c4:	440b      	add	r3, r1
 800e3c6:	761a      	strb	r2, [r3, #24]
}
 800e3c8:	bf00      	nop
 800e3ca:	370c      	adds	r7, #12
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d2:	4770      	bx	lr
 800e3d4:	e000e100 	.word	0xe000e100
 800e3d8:	e000ed00 	.word	0xe000ed00

0800e3dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800e3dc:	b480      	push	{r7}
 800e3de:	b089      	sub	sp, #36	; 0x24
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	60f8      	str	r0, [r7, #12]
 800e3e4:	60b9      	str	r1, [r7, #8]
 800e3e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	f003 0307 	and.w	r3, r3, #7
 800e3ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800e3f0:	69fb      	ldr	r3, [r7, #28]
 800e3f2:	f1c3 0307 	rsb	r3, r3, #7
 800e3f6:	2b04      	cmp	r3, #4
 800e3f8:	bf28      	it	cs
 800e3fa:	2304      	movcs	r3, #4
 800e3fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800e3fe:	69fb      	ldr	r3, [r7, #28]
 800e400:	3304      	adds	r3, #4
 800e402:	2b06      	cmp	r3, #6
 800e404:	d902      	bls.n	800e40c <NVIC_EncodePriority+0x30>
 800e406:	69fb      	ldr	r3, [r7, #28]
 800e408:	3b03      	subs	r3, #3
 800e40a:	e000      	b.n	800e40e <NVIC_EncodePriority+0x32>
 800e40c:	2300      	movs	r3, #0
 800e40e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e410:	f04f 32ff 	mov.w	r2, #4294967295
 800e414:	69bb      	ldr	r3, [r7, #24]
 800e416:	fa02 f303 	lsl.w	r3, r2, r3
 800e41a:	43da      	mvns	r2, r3
 800e41c:	68bb      	ldr	r3, [r7, #8]
 800e41e:	401a      	ands	r2, r3
 800e420:	697b      	ldr	r3, [r7, #20]
 800e422:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800e424:	f04f 31ff 	mov.w	r1, #4294967295
 800e428:	697b      	ldr	r3, [r7, #20]
 800e42a:	fa01 f303 	lsl.w	r3, r1, r3
 800e42e:	43d9      	mvns	r1, r3
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e434:	4313      	orrs	r3, r2
         );
}
 800e436:	4618      	mov	r0, r3
 800e438:	3724      	adds	r7, #36	; 0x24
 800e43a:	46bd      	mov	sp, r7
 800e43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e440:	4770      	bx	lr
	...

0800e444 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800e444:	b480      	push	{r7}
 800e446:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800e448:	f3bf 8f4f 	dsb	sy
}
 800e44c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800e44e:	4b06      	ldr	r3, [pc, #24]	; (800e468 <__NVIC_SystemReset+0x24>)
 800e450:	68db      	ldr	r3, [r3, #12]
 800e452:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800e456:	4904      	ldr	r1, [pc, #16]	; (800e468 <__NVIC_SystemReset+0x24>)
 800e458:	4b04      	ldr	r3, [pc, #16]	; (800e46c <__NVIC_SystemReset+0x28>)
 800e45a:	4313      	orrs	r3, r2
 800e45c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800e45e:	f3bf 8f4f 	dsb	sy
}
 800e462:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800e464:	bf00      	nop
 800e466:	e7fd      	b.n	800e464 <__NVIC_SystemReset+0x20>
 800e468:	e000ed00 	.word	0xe000ed00
 800e46c:	05fa0004 	.word	0x05fa0004

0800e470 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800e470:	b580      	push	{r7, lr}
 800e472:	b082      	sub	sp, #8
 800e474:	af00      	add	r7, sp, #0
 800e476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800e478:	6878      	ldr	r0, [r7, #4]
 800e47a:	f7ff ff35 	bl	800e2e8 <__NVIC_SetPriorityGrouping>
}
 800e47e:	bf00      	nop
 800e480:	3708      	adds	r7, #8
 800e482:	46bd      	mov	sp, r7
 800e484:	bd80      	pop	{r7, pc}

0800e486 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800e486:	b580      	push	{r7, lr}
 800e488:	b086      	sub	sp, #24
 800e48a:	af00      	add	r7, sp, #0
 800e48c:	4603      	mov	r3, r0
 800e48e:	60b9      	str	r1, [r7, #8]
 800e490:	607a      	str	r2, [r7, #4]
 800e492:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800e494:	2300      	movs	r3, #0
 800e496:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800e498:	f7ff ff4a 	bl	800e330 <__NVIC_GetPriorityGrouping>
 800e49c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800e49e:	687a      	ldr	r2, [r7, #4]
 800e4a0:	68b9      	ldr	r1, [r7, #8]
 800e4a2:	6978      	ldr	r0, [r7, #20]
 800e4a4:	f7ff ff9a 	bl	800e3dc <NVIC_EncodePriority>
 800e4a8:	4602      	mov	r2, r0
 800e4aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e4ae:	4611      	mov	r1, r2
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	f7ff ff69 	bl	800e388 <__NVIC_SetPriority>
}
 800e4b6:	bf00      	nop
 800e4b8:	3718      	adds	r7, #24
 800e4ba:	46bd      	mov	sp, r7
 800e4bc:	bd80      	pop	{r7, pc}

0800e4be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800e4be:	b580      	push	{r7, lr}
 800e4c0:	b082      	sub	sp, #8
 800e4c2:	af00      	add	r7, sp, #0
 800e4c4:	4603      	mov	r3, r0
 800e4c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800e4c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	f7ff ff3d 	bl	800e34c <__NVIC_EnableIRQ>
}
 800e4d2:	bf00      	nop
 800e4d4:	3708      	adds	r7, #8
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	bd80      	pop	{r7, pc}

0800e4da <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800e4da:	b580      	push	{r7, lr}
 800e4dc:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800e4de:	f7ff ffb1 	bl	800e444 <__NVIC_SystemReset>
	...

0800e4e4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b084      	sub	sp, #16
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d101      	bne.n	800e4f6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800e4f2:	2301      	movs	r3, #1
 800e4f4:	e08d      	b.n	800e612 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	461a      	mov	r2, r3
 800e4fc:	4b47      	ldr	r3, [pc, #284]	; (800e61c <HAL_DMA_Init+0x138>)
 800e4fe:	429a      	cmp	r2, r3
 800e500:	d80f      	bhi.n	800e522 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	461a      	mov	r2, r3
 800e508:	4b45      	ldr	r3, [pc, #276]	; (800e620 <HAL_DMA_Init+0x13c>)
 800e50a:	4413      	add	r3, r2
 800e50c:	4a45      	ldr	r2, [pc, #276]	; (800e624 <HAL_DMA_Init+0x140>)
 800e50e:	fba2 2303 	umull	r2, r3, r2, r3
 800e512:	091b      	lsrs	r3, r3, #4
 800e514:	009a      	lsls	r2, r3, #2
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	4a42      	ldr	r2, [pc, #264]	; (800e628 <HAL_DMA_Init+0x144>)
 800e51e:	641a      	str	r2, [r3, #64]	; 0x40
 800e520:	e00e      	b.n	800e540 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	461a      	mov	r2, r3
 800e528:	4b40      	ldr	r3, [pc, #256]	; (800e62c <HAL_DMA_Init+0x148>)
 800e52a:	4413      	add	r3, r2
 800e52c:	4a3d      	ldr	r2, [pc, #244]	; (800e624 <HAL_DMA_Init+0x140>)
 800e52e:	fba2 2303 	umull	r2, r3, r2, r3
 800e532:	091b      	lsrs	r3, r3, #4
 800e534:	009a      	lsls	r2, r3, #2
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	4a3c      	ldr	r2, [pc, #240]	; (800e630 <HAL_DMA_Init+0x14c>)
 800e53e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	2202      	movs	r2, #2
 800e544:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800e556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e55a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800e564:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	691b      	ldr	r3, [r3, #16]
 800e56a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800e570:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	699b      	ldr	r3, [r3, #24]
 800e576:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800e57c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	6a1b      	ldr	r3, [r3, #32]
 800e582:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800e584:	68fa      	ldr	r2, [r7, #12]
 800e586:	4313      	orrs	r3, r2
 800e588:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	68fa      	ldr	r2, [r7, #12]
 800e590:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800e592:	6878      	ldr	r0, [r7, #4]
 800e594:	f000 fa80 	bl	800ea98 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	689b      	ldr	r3, [r3, #8]
 800e59c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e5a0:	d102      	bne.n	800e5a8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	2200      	movs	r2, #0
 800e5a6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	685a      	ldr	r2, [r3, #4]
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e5b0:	b2d2      	uxtb	r2, r2
 800e5b2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e5b8:	687a      	ldr	r2, [r7, #4]
 800e5ba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800e5bc:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	685b      	ldr	r3, [r3, #4]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d010      	beq.n	800e5e8 <HAL_DMA_Init+0x104>
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	685b      	ldr	r3, [r3, #4]
 800e5ca:	2b04      	cmp	r3, #4
 800e5cc:	d80c      	bhi.n	800e5e8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800e5ce:	6878      	ldr	r0, [r7, #4]
 800e5d0:	f000 faa0 	bl	800eb14 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e5d8:	2200      	movs	r2, #0
 800e5da:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e5e0:	687a      	ldr	r2, [r7, #4]
 800e5e2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800e5e4:	605a      	str	r2, [r3, #4]
 800e5e6:	e008      	b.n	800e5fa <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	2200      	movs	r2, #0
 800e5ec:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	2200      	movs	r2, #0
 800e5f2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	2200      	movs	r2, #0
 800e5fe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	2201      	movs	r2, #1
 800e604:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	2200      	movs	r2, #0
 800e60c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800e610:	2300      	movs	r3, #0
}
 800e612:	4618      	mov	r0, r3
 800e614:	3710      	adds	r7, #16
 800e616:	46bd      	mov	sp, r7
 800e618:	bd80      	pop	{r7, pc}
 800e61a:	bf00      	nop
 800e61c:	40020407 	.word	0x40020407
 800e620:	bffdfff8 	.word	0xbffdfff8
 800e624:	cccccccd 	.word	0xcccccccd
 800e628:	40020000 	.word	0x40020000
 800e62c:	bffdfbf8 	.word	0xbffdfbf8
 800e630:	40020400 	.word	0x40020400

0800e634 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800e634:	b580      	push	{r7, lr}
 800e636:	b086      	sub	sp, #24
 800e638:	af00      	add	r7, sp, #0
 800e63a:	60f8      	str	r0, [r7, #12]
 800e63c:	60b9      	str	r1, [r7, #8]
 800e63e:	607a      	str	r2, [r7, #4]
 800e640:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e642:	2300      	movs	r3, #0
 800e644:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e64c:	2b01      	cmp	r3, #1
 800e64e:	d101      	bne.n	800e654 <HAL_DMA_Start_IT+0x20>
 800e650:	2302      	movs	r3, #2
 800e652:	e066      	b.n	800e722 <HAL_DMA_Start_IT+0xee>
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	2201      	movs	r2, #1
 800e658:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800e662:	b2db      	uxtb	r3, r3
 800e664:	2b01      	cmp	r3, #1
 800e666:	d155      	bne.n	800e714 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	2202      	movs	r2, #2
 800e66c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	2200      	movs	r2, #0
 800e674:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	681a      	ldr	r2, [r3, #0]
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	f022 0201 	bic.w	r2, r2, #1
 800e684:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800e686:	683b      	ldr	r3, [r7, #0]
 800e688:	687a      	ldr	r2, [r7, #4]
 800e68a:	68b9      	ldr	r1, [r7, #8]
 800e68c:	68f8      	ldr	r0, [r7, #12]
 800e68e:	f000 f9c4 	bl	800ea1a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e696:	2b00      	cmp	r3, #0
 800e698:	d008      	beq.n	800e6ac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	681a      	ldr	r2, [r3, #0]
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	f042 020e 	orr.w	r2, r2, #14
 800e6a8:	601a      	str	r2, [r3, #0]
 800e6aa:	e00f      	b.n	800e6cc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	681a      	ldr	r2, [r3, #0]
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	f022 0204 	bic.w	r2, r2, #4
 800e6ba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	681a      	ldr	r2, [r3, #0]
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	f042 020a 	orr.w	r2, r2, #10
 800e6ca:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d007      	beq.n	800e6ea <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e6de:	681a      	ldr	r2, [r3, #0]
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e6e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e6e8:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d007      	beq.n	800e702 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e6f6:	681a      	ldr	r2, [r3, #0]
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e6fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e700:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	681a      	ldr	r2, [r3, #0]
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	f042 0201 	orr.w	r2, r2, #1
 800e710:	601a      	str	r2, [r3, #0]
 800e712:	e005      	b.n	800e720 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	2200      	movs	r2, #0
 800e718:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800e71c:	2302      	movs	r3, #2
 800e71e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800e720:	7dfb      	ldrb	r3, [r7, #23]
}
 800e722:	4618      	mov	r0, r3
 800e724:	3718      	adds	r7, #24
 800e726:	46bd      	mov	sp, r7
 800e728:	bd80      	pop	{r7, pc}

0800e72a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800e72a:	b480      	push	{r7}
 800e72c:	b085      	sub	sp, #20
 800e72e:	af00      	add	r7, sp, #0
 800e730:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e732:	2300      	movs	r3, #0
 800e734:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800e73c:	b2db      	uxtb	r3, r3
 800e73e:	2b02      	cmp	r3, #2
 800e740:	d008      	beq.n	800e754 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	2204      	movs	r2, #4
 800e746:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	2200      	movs	r2, #0
 800e74c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800e750:	2301      	movs	r3, #1
 800e752:	e040      	b.n	800e7d6 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	681a      	ldr	r2, [r3, #0]
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	f022 020e 	bic.w	r2, r2, #14
 800e762:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e768:	681a      	ldr	r2, [r3, #0]
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e76e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e772:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	681a      	ldr	r2, [r3, #0]
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	f022 0201 	bic.w	r2, r2, #1
 800e782:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e788:	f003 021c 	and.w	r2, r3, #28
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e790:	2101      	movs	r1, #1
 800e792:	fa01 f202 	lsl.w	r2, r1, r2
 800e796:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e79c:	687a      	ldr	r2, [r7, #4]
 800e79e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800e7a0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d00c      	beq.n	800e7c4 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e7ae:	681a      	ldr	r2, [r3, #0]
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e7b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e7b8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e7be:	687a      	ldr	r2, [r7, #4]
 800e7c0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800e7c2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	2201      	movs	r2, #1
 800e7c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	2200      	movs	r2, #0
 800e7d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800e7d4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	3714      	adds	r7, #20
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e0:	4770      	bx	lr

0800e7e2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800e7e2:	b580      	push	{r7, lr}
 800e7e4:	b084      	sub	sp, #16
 800e7e6:	af00      	add	r7, sp, #0
 800e7e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e7ea:	2300      	movs	r3, #0
 800e7ec:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800e7f4:	b2db      	uxtb	r3, r3
 800e7f6:	2b02      	cmp	r3, #2
 800e7f8:	d005      	beq.n	800e806 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	2204      	movs	r2, #4
 800e7fe:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800e800:	2301      	movs	r3, #1
 800e802:	73fb      	strb	r3, [r7, #15]
 800e804:	e047      	b.n	800e896 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	681a      	ldr	r2, [r3, #0]
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	f022 020e 	bic.w	r2, r2, #14
 800e814:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	681a      	ldr	r2, [r3, #0]
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	f022 0201 	bic.w	r2, r2, #1
 800e824:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e82a:	681a      	ldr	r2, [r3, #0]
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e830:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e834:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e83a:	f003 021c 	and.w	r2, r3, #28
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e842:	2101      	movs	r1, #1
 800e844:	fa01 f202 	lsl.w	r2, r1, r2
 800e848:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e84e:	687a      	ldr	r2, [r7, #4]
 800e850:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800e852:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d00c      	beq.n	800e876 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e860:	681a      	ldr	r2, [r3, #0]
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e866:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e86a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e870:	687a      	ldr	r2, [r7, #4]
 800e872:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800e874:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	2201      	movs	r2, #1
 800e87a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	2200      	movs	r2, #0
 800e882:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d003      	beq.n	800e896 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e892:	6878      	ldr	r0, [r7, #4]
 800e894:	4798      	blx	r3
    }
  }
  return status;
 800e896:	7bfb      	ldrb	r3, [r7, #15]
}
 800e898:	4618      	mov	r0, r3
 800e89a:	3710      	adds	r7, #16
 800e89c:	46bd      	mov	sp, r7
 800e89e:	bd80      	pop	{r7, pc}

0800e8a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800e8a0:	b580      	push	{r7, lr}
 800e8a2:	b084      	sub	sp, #16
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8bc:	f003 031c 	and.w	r3, r3, #28
 800e8c0:	2204      	movs	r2, #4
 800e8c2:	409a      	lsls	r2, r3
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	4013      	ands	r3, r2
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d026      	beq.n	800e91a <HAL_DMA_IRQHandler+0x7a>
 800e8cc:	68bb      	ldr	r3, [r7, #8]
 800e8ce:	f003 0304 	and.w	r3, r3, #4
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d021      	beq.n	800e91a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	f003 0320 	and.w	r3, r3, #32
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d107      	bne.n	800e8f4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	681a      	ldr	r2, [r3, #0]
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	f022 0204 	bic.w	r2, r2, #4
 800e8f2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8f8:	f003 021c 	and.w	r2, r3, #28
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e900:	2104      	movs	r1, #4
 800e902:	fa01 f202 	lsl.w	r2, r1, r2
 800e906:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d071      	beq.n	800e9f4 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e914:	6878      	ldr	r0, [r7, #4]
 800e916:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800e918:	e06c      	b.n	800e9f4 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e91e:	f003 031c 	and.w	r3, r3, #28
 800e922:	2202      	movs	r2, #2
 800e924:	409a      	lsls	r2, r3
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	4013      	ands	r3, r2
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d02e      	beq.n	800e98c <HAL_DMA_IRQHandler+0xec>
 800e92e:	68bb      	ldr	r3, [r7, #8]
 800e930:	f003 0302 	and.w	r3, r3, #2
 800e934:	2b00      	cmp	r3, #0
 800e936:	d029      	beq.n	800e98c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	f003 0320 	and.w	r3, r3, #32
 800e942:	2b00      	cmp	r3, #0
 800e944:	d10b      	bne.n	800e95e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	681a      	ldr	r2, [r3, #0]
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	f022 020a 	bic.w	r2, r2, #10
 800e954:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	2201      	movs	r2, #1
 800e95a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e962:	f003 021c 	and.w	r2, r3, #28
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e96a:	2102      	movs	r1, #2
 800e96c:	fa01 f202 	lsl.w	r2, r1, r2
 800e970:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	2200      	movs	r2, #0
 800e976:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d038      	beq.n	800e9f4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e986:	6878      	ldr	r0, [r7, #4]
 800e988:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800e98a:	e033      	b.n	800e9f4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e990:	f003 031c 	and.w	r3, r3, #28
 800e994:	2208      	movs	r2, #8
 800e996:	409a      	lsls	r2, r3
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	4013      	ands	r3, r2
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d02a      	beq.n	800e9f6 <HAL_DMA_IRQHandler+0x156>
 800e9a0:	68bb      	ldr	r3, [r7, #8]
 800e9a2:	f003 0308 	and.w	r3, r3, #8
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d025      	beq.n	800e9f6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	681a      	ldr	r2, [r3, #0]
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	f022 020e 	bic.w	r2, r2, #14
 800e9b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e9be:	f003 021c 	and.w	r2, r3, #28
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9c6:	2101      	movs	r1, #1
 800e9c8:	fa01 f202 	lsl.w	r2, r1, r2
 800e9cc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	2201      	movs	r2, #1
 800e9d2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	2201      	movs	r2, #1
 800e9d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	2200      	movs	r2, #0
 800e9e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d004      	beq.n	800e9f6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9f0:	6878      	ldr	r0, [r7, #4]
 800e9f2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800e9f4:	bf00      	nop
 800e9f6:	bf00      	nop
}
 800e9f8:	3710      	adds	r7, #16
 800e9fa:	46bd      	mov	sp, r7
 800e9fc:	bd80      	pop	{r7, pc}

0800e9fe <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800e9fe:	b480      	push	{r7}
 800ea00:	b083      	sub	sp, #12
 800ea02:	af00      	add	r7, sp, #0
 800ea04:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800ea0c:	b2db      	uxtb	r3, r3
}
 800ea0e:	4618      	mov	r0, r3
 800ea10:	370c      	adds	r7, #12
 800ea12:	46bd      	mov	sp, r7
 800ea14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea18:	4770      	bx	lr

0800ea1a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ea1a:	b480      	push	{r7}
 800ea1c:	b085      	sub	sp, #20
 800ea1e:	af00      	add	r7, sp, #0
 800ea20:	60f8      	str	r0, [r7, #12]
 800ea22:	60b9      	str	r1, [r7, #8]
 800ea24:	607a      	str	r2, [r7, #4]
 800ea26:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ea2c:	68fa      	ldr	r2, [r7, #12]
 800ea2e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800ea30:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d004      	beq.n	800ea44 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea3e:	68fa      	ldr	r2, [r7, #12]
 800ea40:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800ea42:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea48:	f003 021c 	and.w	r2, r3, #28
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea50:	2101      	movs	r1, #1
 800ea52:	fa01 f202 	lsl.w	r2, r1, r2
 800ea56:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	683a      	ldr	r2, [r7, #0]
 800ea5e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	689b      	ldr	r3, [r3, #8]
 800ea64:	2b10      	cmp	r3, #16
 800ea66:	d108      	bne.n	800ea7a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	687a      	ldr	r2, [r7, #4]
 800ea6e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	68ba      	ldr	r2, [r7, #8]
 800ea76:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800ea78:	e007      	b.n	800ea8a <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	68ba      	ldr	r2, [r7, #8]
 800ea80:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	687a      	ldr	r2, [r7, #4]
 800ea88:	60da      	str	r2, [r3, #12]
}
 800ea8a:	bf00      	nop
 800ea8c:	3714      	adds	r7, #20
 800ea8e:	46bd      	mov	sp, r7
 800ea90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea94:	4770      	bx	lr
	...

0800ea98 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800ea98:	b480      	push	{r7}
 800ea9a:	b085      	sub	sp, #20
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	461a      	mov	r2, r3
 800eaa6:	4b17      	ldr	r3, [pc, #92]	; (800eb04 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800eaa8:	429a      	cmp	r2, r3
 800eaaa:	d80a      	bhi.n	800eac2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eab0:	089b      	lsrs	r3, r3, #2
 800eab2:	009b      	lsls	r3, r3, #2
 800eab4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800eab8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800eabc:	687a      	ldr	r2, [r7, #4]
 800eabe:	6493      	str	r3, [r2, #72]	; 0x48
 800eac0:	e007      	b.n	800ead2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eac6:	089b      	lsrs	r3, r3, #2
 800eac8:	009a      	lsls	r2, r3, #2
 800eaca:	4b0f      	ldr	r3, [pc, #60]	; (800eb08 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800eacc:	4413      	add	r3, r2
 800eace:	687a      	ldr	r2, [r7, #4]
 800ead0:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	b2db      	uxtb	r3, r3
 800ead8:	3b08      	subs	r3, #8
 800eada:	4a0c      	ldr	r2, [pc, #48]	; (800eb0c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800eadc:	fba2 2303 	umull	r2, r3, r2, r3
 800eae0:	091b      	lsrs	r3, r3, #4
 800eae2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	4a0a      	ldr	r2, [pc, #40]	; (800eb10 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800eae8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	f003 031f 	and.w	r3, r3, #31
 800eaf0:	2201      	movs	r2, #1
 800eaf2:	409a      	lsls	r2, r3
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	651a      	str	r2, [r3, #80]	; 0x50
}
 800eaf8:	bf00      	nop
 800eafa:	3714      	adds	r7, #20
 800eafc:	46bd      	mov	sp, r7
 800eafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb02:	4770      	bx	lr
 800eb04:	40020407 	.word	0x40020407
 800eb08:	4002081c 	.word	0x4002081c
 800eb0c:	cccccccd 	.word	0xcccccccd
 800eb10:	40020880 	.word	0x40020880

0800eb14 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800eb14:	b480      	push	{r7}
 800eb16:	b085      	sub	sp, #20
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	685b      	ldr	r3, [r3, #4]
 800eb20:	b2db      	uxtb	r3, r3
 800eb22:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800eb24:	68fa      	ldr	r2, [r7, #12]
 800eb26:	4b0b      	ldr	r3, [pc, #44]	; (800eb54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800eb28:	4413      	add	r3, r2
 800eb2a:	009b      	lsls	r3, r3, #2
 800eb2c:	461a      	mov	r2, r3
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	4a08      	ldr	r2, [pc, #32]	; (800eb58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800eb36:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	3b01      	subs	r3, #1
 800eb3c:	f003 0303 	and.w	r3, r3, #3
 800eb40:	2201      	movs	r2, #1
 800eb42:	409a      	lsls	r2, r3
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800eb48:	bf00      	nop
 800eb4a:	3714      	adds	r7, #20
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb52:	4770      	bx	lr
 800eb54:	1000823f 	.word	0x1000823f
 800eb58:	40020940 	.word	0x40020940

0800eb5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800eb5c:	b480      	push	{r7}
 800eb5e:	b087      	sub	sp, #28
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	6078      	str	r0, [r7, #4]
 800eb64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800eb66:	2300      	movs	r3, #0
 800eb68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800eb6a:	e166      	b.n	800ee3a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800eb6c:	683b      	ldr	r3, [r7, #0]
 800eb6e:	681a      	ldr	r2, [r3, #0]
 800eb70:	2101      	movs	r1, #1
 800eb72:	697b      	ldr	r3, [r7, #20]
 800eb74:	fa01 f303 	lsl.w	r3, r1, r3
 800eb78:	4013      	ands	r3, r2
 800eb7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	f000 8158 	beq.w	800ee34 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800eb84:	683b      	ldr	r3, [r7, #0]
 800eb86:	685b      	ldr	r3, [r3, #4]
 800eb88:	f003 0303 	and.w	r3, r3, #3
 800eb8c:	2b01      	cmp	r3, #1
 800eb8e:	d005      	beq.n	800eb9c <HAL_GPIO_Init+0x40>
 800eb90:	683b      	ldr	r3, [r7, #0]
 800eb92:	685b      	ldr	r3, [r3, #4]
 800eb94:	f003 0303 	and.w	r3, r3, #3
 800eb98:	2b02      	cmp	r3, #2
 800eb9a:	d130      	bne.n	800ebfe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	689b      	ldr	r3, [r3, #8]
 800eba0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800eba2:	697b      	ldr	r3, [r7, #20]
 800eba4:	005b      	lsls	r3, r3, #1
 800eba6:	2203      	movs	r2, #3
 800eba8:	fa02 f303 	lsl.w	r3, r2, r3
 800ebac:	43db      	mvns	r3, r3
 800ebae:	693a      	ldr	r2, [r7, #16]
 800ebb0:	4013      	ands	r3, r2
 800ebb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800ebb4:	683b      	ldr	r3, [r7, #0]
 800ebb6:	68da      	ldr	r2, [r3, #12]
 800ebb8:	697b      	ldr	r3, [r7, #20]
 800ebba:	005b      	lsls	r3, r3, #1
 800ebbc:	fa02 f303 	lsl.w	r3, r2, r3
 800ebc0:	693a      	ldr	r2, [r7, #16]
 800ebc2:	4313      	orrs	r3, r2
 800ebc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	693a      	ldr	r2, [r7, #16]
 800ebca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	685b      	ldr	r3, [r3, #4]
 800ebd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800ebd2:	2201      	movs	r2, #1
 800ebd4:	697b      	ldr	r3, [r7, #20]
 800ebd6:	fa02 f303 	lsl.w	r3, r2, r3
 800ebda:	43db      	mvns	r3, r3
 800ebdc:	693a      	ldr	r2, [r7, #16]
 800ebde:	4013      	ands	r3, r2
 800ebe0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ebe2:	683b      	ldr	r3, [r7, #0]
 800ebe4:	685b      	ldr	r3, [r3, #4]
 800ebe6:	091b      	lsrs	r3, r3, #4
 800ebe8:	f003 0201 	and.w	r2, r3, #1
 800ebec:	697b      	ldr	r3, [r7, #20]
 800ebee:	fa02 f303 	lsl.w	r3, r2, r3
 800ebf2:	693a      	ldr	r2, [r7, #16]
 800ebf4:	4313      	orrs	r3, r2
 800ebf6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	693a      	ldr	r2, [r7, #16]
 800ebfc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800ebfe:	683b      	ldr	r3, [r7, #0]
 800ec00:	685b      	ldr	r3, [r3, #4]
 800ec02:	f003 0303 	and.w	r3, r3, #3
 800ec06:	2b03      	cmp	r3, #3
 800ec08:	d017      	beq.n	800ec3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	68db      	ldr	r3, [r3, #12]
 800ec0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800ec10:	697b      	ldr	r3, [r7, #20]
 800ec12:	005b      	lsls	r3, r3, #1
 800ec14:	2203      	movs	r2, #3
 800ec16:	fa02 f303 	lsl.w	r3, r2, r3
 800ec1a:	43db      	mvns	r3, r3
 800ec1c:	693a      	ldr	r2, [r7, #16]
 800ec1e:	4013      	ands	r3, r2
 800ec20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ec22:	683b      	ldr	r3, [r7, #0]
 800ec24:	689a      	ldr	r2, [r3, #8]
 800ec26:	697b      	ldr	r3, [r7, #20]
 800ec28:	005b      	lsls	r3, r3, #1
 800ec2a:	fa02 f303 	lsl.w	r3, r2, r3
 800ec2e:	693a      	ldr	r2, [r7, #16]
 800ec30:	4313      	orrs	r3, r2
 800ec32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	693a      	ldr	r2, [r7, #16]
 800ec38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ec3a:	683b      	ldr	r3, [r7, #0]
 800ec3c:	685b      	ldr	r3, [r3, #4]
 800ec3e:	f003 0303 	and.w	r3, r3, #3
 800ec42:	2b02      	cmp	r3, #2
 800ec44:	d123      	bne.n	800ec8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800ec46:	697b      	ldr	r3, [r7, #20]
 800ec48:	08da      	lsrs	r2, r3, #3
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	3208      	adds	r2, #8
 800ec4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800ec54:	697b      	ldr	r3, [r7, #20]
 800ec56:	f003 0307 	and.w	r3, r3, #7
 800ec5a:	009b      	lsls	r3, r3, #2
 800ec5c:	220f      	movs	r2, #15
 800ec5e:	fa02 f303 	lsl.w	r3, r2, r3
 800ec62:	43db      	mvns	r3, r3
 800ec64:	693a      	ldr	r2, [r7, #16]
 800ec66:	4013      	ands	r3, r2
 800ec68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800ec6a:	683b      	ldr	r3, [r7, #0]
 800ec6c:	691a      	ldr	r2, [r3, #16]
 800ec6e:	697b      	ldr	r3, [r7, #20]
 800ec70:	f003 0307 	and.w	r3, r3, #7
 800ec74:	009b      	lsls	r3, r3, #2
 800ec76:	fa02 f303 	lsl.w	r3, r2, r3
 800ec7a:	693a      	ldr	r2, [r7, #16]
 800ec7c:	4313      	orrs	r3, r2
 800ec7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800ec80:	697b      	ldr	r3, [r7, #20]
 800ec82:	08da      	lsrs	r2, r3, #3
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	3208      	adds	r2, #8
 800ec88:	6939      	ldr	r1, [r7, #16]
 800ec8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800ec94:	697b      	ldr	r3, [r7, #20]
 800ec96:	005b      	lsls	r3, r3, #1
 800ec98:	2203      	movs	r2, #3
 800ec9a:	fa02 f303 	lsl.w	r3, r2, r3
 800ec9e:	43db      	mvns	r3, r3
 800eca0:	693a      	ldr	r2, [r7, #16]
 800eca2:	4013      	ands	r3, r2
 800eca4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800eca6:	683b      	ldr	r3, [r7, #0]
 800eca8:	685b      	ldr	r3, [r3, #4]
 800ecaa:	f003 0203 	and.w	r2, r3, #3
 800ecae:	697b      	ldr	r3, [r7, #20]
 800ecb0:	005b      	lsls	r3, r3, #1
 800ecb2:	fa02 f303 	lsl.w	r3, r2, r3
 800ecb6:	693a      	ldr	r2, [r7, #16]
 800ecb8:	4313      	orrs	r3, r2
 800ecba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	693a      	ldr	r2, [r7, #16]
 800ecc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800ecc2:	683b      	ldr	r3, [r7, #0]
 800ecc4:	685b      	ldr	r3, [r3, #4]
 800ecc6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	f000 80b2 	beq.w	800ee34 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ecd0:	4b61      	ldr	r3, [pc, #388]	; (800ee58 <HAL_GPIO_Init+0x2fc>)
 800ecd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ecd4:	4a60      	ldr	r2, [pc, #384]	; (800ee58 <HAL_GPIO_Init+0x2fc>)
 800ecd6:	f043 0301 	orr.w	r3, r3, #1
 800ecda:	6613      	str	r3, [r2, #96]	; 0x60
 800ecdc:	4b5e      	ldr	r3, [pc, #376]	; (800ee58 <HAL_GPIO_Init+0x2fc>)
 800ecde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ece0:	f003 0301 	and.w	r3, r3, #1
 800ece4:	60bb      	str	r3, [r7, #8]
 800ece6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800ece8:	4a5c      	ldr	r2, [pc, #368]	; (800ee5c <HAL_GPIO_Init+0x300>)
 800ecea:	697b      	ldr	r3, [r7, #20]
 800ecec:	089b      	lsrs	r3, r3, #2
 800ecee:	3302      	adds	r3, #2
 800ecf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ecf4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800ecf6:	697b      	ldr	r3, [r7, #20]
 800ecf8:	f003 0303 	and.w	r3, r3, #3
 800ecfc:	009b      	lsls	r3, r3, #2
 800ecfe:	220f      	movs	r2, #15
 800ed00:	fa02 f303 	lsl.w	r3, r2, r3
 800ed04:	43db      	mvns	r3, r3
 800ed06:	693a      	ldr	r2, [r7, #16]
 800ed08:	4013      	ands	r3, r2
 800ed0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800ed12:	d02b      	beq.n	800ed6c <HAL_GPIO_Init+0x210>
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	4a52      	ldr	r2, [pc, #328]	; (800ee60 <HAL_GPIO_Init+0x304>)
 800ed18:	4293      	cmp	r3, r2
 800ed1a:	d025      	beq.n	800ed68 <HAL_GPIO_Init+0x20c>
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	4a51      	ldr	r2, [pc, #324]	; (800ee64 <HAL_GPIO_Init+0x308>)
 800ed20:	4293      	cmp	r3, r2
 800ed22:	d01f      	beq.n	800ed64 <HAL_GPIO_Init+0x208>
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	4a50      	ldr	r2, [pc, #320]	; (800ee68 <HAL_GPIO_Init+0x30c>)
 800ed28:	4293      	cmp	r3, r2
 800ed2a:	d019      	beq.n	800ed60 <HAL_GPIO_Init+0x204>
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	4a4f      	ldr	r2, [pc, #316]	; (800ee6c <HAL_GPIO_Init+0x310>)
 800ed30:	4293      	cmp	r3, r2
 800ed32:	d013      	beq.n	800ed5c <HAL_GPIO_Init+0x200>
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	4a4e      	ldr	r2, [pc, #312]	; (800ee70 <HAL_GPIO_Init+0x314>)
 800ed38:	4293      	cmp	r3, r2
 800ed3a:	d00d      	beq.n	800ed58 <HAL_GPIO_Init+0x1fc>
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	4a4d      	ldr	r2, [pc, #308]	; (800ee74 <HAL_GPIO_Init+0x318>)
 800ed40:	4293      	cmp	r3, r2
 800ed42:	d007      	beq.n	800ed54 <HAL_GPIO_Init+0x1f8>
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	4a4c      	ldr	r2, [pc, #304]	; (800ee78 <HAL_GPIO_Init+0x31c>)
 800ed48:	4293      	cmp	r3, r2
 800ed4a:	d101      	bne.n	800ed50 <HAL_GPIO_Init+0x1f4>
 800ed4c:	2307      	movs	r3, #7
 800ed4e:	e00e      	b.n	800ed6e <HAL_GPIO_Init+0x212>
 800ed50:	2308      	movs	r3, #8
 800ed52:	e00c      	b.n	800ed6e <HAL_GPIO_Init+0x212>
 800ed54:	2306      	movs	r3, #6
 800ed56:	e00a      	b.n	800ed6e <HAL_GPIO_Init+0x212>
 800ed58:	2305      	movs	r3, #5
 800ed5a:	e008      	b.n	800ed6e <HAL_GPIO_Init+0x212>
 800ed5c:	2304      	movs	r3, #4
 800ed5e:	e006      	b.n	800ed6e <HAL_GPIO_Init+0x212>
 800ed60:	2303      	movs	r3, #3
 800ed62:	e004      	b.n	800ed6e <HAL_GPIO_Init+0x212>
 800ed64:	2302      	movs	r3, #2
 800ed66:	e002      	b.n	800ed6e <HAL_GPIO_Init+0x212>
 800ed68:	2301      	movs	r3, #1
 800ed6a:	e000      	b.n	800ed6e <HAL_GPIO_Init+0x212>
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	697a      	ldr	r2, [r7, #20]
 800ed70:	f002 0203 	and.w	r2, r2, #3
 800ed74:	0092      	lsls	r2, r2, #2
 800ed76:	4093      	lsls	r3, r2
 800ed78:	693a      	ldr	r2, [r7, #16]
 800ed7a:	4313      	orrs	r3, r2
 800ed7c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800ed7e:	4937      	ldr	r1, [pc, #220]	; (800ee5c <HAL_GPIO_Init+0x300>)
 800ed80:	697b      	ldr	r3, [r7, #20]
 800ed82:	089b      	lsrs	r3, r3, #2
 800ed84:	3302      	adds	r3, #2
 800ed86:	693a      	ldr	r2, [r7, #16]
 800ed88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800ed8c:	4b3b      	ldr	r3, [pc, #236]	; (800ee7c <HAL_GPIO_Init+0x320>)
 800ed8e:	689b      	ldr	r3, [r3, #8]
 800ed90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	43db      	mvns	r3, r3
 800ed96:	693a      	ldr	r2, [r7, #16]
 800ed98:	4013      	ands	r3, r2
 800ed9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800ed9c:	683b      	ldr	r3, [r7, #0]
 800ed9e:	685b      	ldr	r3, [r3, #4]
 800eda0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d003      	beq.n	800edb0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800eda8:	693a      	ldr	r2, [r7, #16]
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	4313      	orrs	r3, r2
 800edae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800edb0:	4a32      	ldr	r2, [pc, #200]	; (800ee7c <HAL_GPIO_Init+0x320>)
 800edb2:	693b      	ldr	r3, [r7, #16]
 800edb4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800edb6:	4b31      	ldr	r3, [pc, #196]	; (800ee7c <HAL_GPIO_Init+0x320>)
 800edb8:	68db      	ldr	r3, [r3, #12]
 800edba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	43db      	mvns	r3, r3
 800edc0:	693a      	ldr	r2, [r7, #16]
 800edc2:	4013      	ands	r3, r2
 800edc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800edc6:	683b      	ldr	r3, [r7, #0]
 800edc8:	685b      	ldr	r3, [r3, #4]
 800edca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d003      	beq.n	800edda <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800edd2:	693a      	ldr	r2, [r7, #16]
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	4313      	orrs	r3, r2
 800edd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800edda:	4a28      	ldr	r2, [pc, #160]	; (800ee7c <HAL_GPIO_Init+0x320>)
 800eddc:	693b      	ldr	r3, [r7, #16]
 800edde:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800ede0:	4b26      	ldr	r3, [pc, #152]	; (800ee7c <HAL_GPIO_Init+0x320>)
 800ede2:	685b      	ldr	r3, [r3, #4]
 800ede4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	43db      	mvns	r3, r3
 800edea:	693a      	ldr	r2, [r7, #16]
 800edec:	4013      	ands	r3, r2
 800edee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800edf0:	683b      	ldr	r3, [r7, #0]
 800edf2:	685b      	ldr	r3, [r3, #4]
 800edf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d003      	beq.n	800ee04 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800edfc:	693a      	ldr	r2, [r7, #16]
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	4313      	orrs	r3, r2
 800ee02:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800ee04:	4a1d      	ldr	r2, [pc, #116]	; (800ee7c <HAL_GPIO_Init+0x320>)
 800ee06:	693b      	ldr	r3, [r7, #16]
 800ee08:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800ee0a:	4b1c      	ldr	r3, [pc, #112]	; (800ee7c <HAL_GPIO_Init+0x320>)
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	43db      	mvns	r3, r3
 800ee14:	693a      	ldr	r2, [r7, #16]
 800ee16:	4013      	ands	r3, r2
 800ee18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800ee1a:	683b      	ldr	r3, [r7, #0]
 800ee1c:	685b      	ldr	r3, [r3, #4]
 800ee1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d003      	beq.n	800ee2e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800ee26:	693a      	ldr	r2, [r7, #16]
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	4313      	orrs	r3, r2
 800ee2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800ee2e:	4a13      	ldr	r2, [pc, #76]	; (800ee7c <HAL_GPIO_Init+0x320>)
 800ee30:	693b      	ldr	r3, [r7, #16]
 800ee32:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800ee34:	697b      	ldr	r3, [r7, #20]
 800ee36:	3301      	adds	r3, #1
 800ee38:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800ee3a:	683b      	ldr	r3, [r7, #0]
 800ee3c:	681a      	ldr	r2, [r3, #0]
 800ee3e:	697b      	ldr	r3, [r7, #20]
 800ee40:	fa22 f303 	lsr.w	r3, r2, r3
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	f47f ae91 	bne.w	800eb6c <HAL_GPIO_Init+0x10>
  }
}
 800ee4a:	bf00      	nop
 800ee4c:	bf00      	nop
 800ee4e:	371c      	adds	r7, #28
 800ee50:	46bd      	mov	sp, r7
 800ee52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee56:	4770      	bx	lr
 800ee58:	40021000 	.word	0x40021000
 800ee5c:	40010000 	.word	0x40010000
 800ee60:	48000400 	.word	0x48000400
 800ee64:	48000800 	.word	0x48000800
 800ee68:	48000c00 	.word	0x48000c00
 800ee6c:	48001000 	.word	0x48001000
 800ee70:	48001400 	.word	0x48001400
 800ee74:	48001800 	.word	0x48001800
 800ee78:	48001c00 	.word	0x48001c00
 800ee7c:	40010400 	.word	0x40010400

0800ee80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ee80:	b480      	push	{r7}
 800ee82:	b085      	sub	sp, #20
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	6078      	str	r0, [r7, #4]
 800ee88:	460b      	mov	r3, r1
 800ee8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	691a      	ldr	r2, [r3, #16]
 800ee90:	887b      	ldrh	r3, [r7, #2]
 800ee92:	4013      	ands	r3, r2
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d002      	beq.n	800ee9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800ee98:	2301      	movs	r3, #1
 800ee9a:	73fb      	strb	r3, [r7, #15]
 800ee9c:	e001      	b.n	800eea2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ee9e:	2300      	movs	r3, #0
 800eea0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800eea2:	7bfb      	ldrb	r3, [r7, #15]
}
 800eea4:	4618      	mov	r0, r3
 800eea6:	3714      	adds	r7, #20
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeae:	4770      	bx	lr

0800eeb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800eeb0:	b480      	push	{r7}
 800eeb2:	b083      	sub	sp, #12
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	6078      	str	r0, [r7, #4]
 800eeb8:	460b      	mov	r3, r1
 800eeba:	807b      	strh	r3, [r7, #2]
 800eebc:	4613      	mov	r3, r2
 800eebe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800eec0:	787b      	ldrb	r3, [r7, #1]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d003      	beq.n	800eece <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800eec6:	887a      	ldrh	r2, [r7, #2]
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800eecc:	e002      	b.n	800eed4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800eece:	887a      	ldrh	r2, [r7, #2]
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	629a      	str	r2, [r3, #40]	; 0x28
}
 800eed4:	bf00      	nop
 800eed6:	370c      	adds	r7, #12
 800eed8:	46bd      	mov	sp, r7
 800eeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eede:	4770      	bx	lr

0800eee0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800eee0:	b480      	push	{r7}
 800eee2:	b085      	sub	sp, #20
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]
 800eee8:	460b      	mov	r3, r1
 800eeea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	695b      	ldr	r3, [r3, #20]
 800eef0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800eef2:	887a      	ldrh	r2, [r7, #2]
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	4013      	ands	r3, r2
 800eef8:	041a      	lsls	r2, r3, #16
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	43d9      	mvns	r1, r3
 800eefe:	887b      	ldrh	r3, [r7, #2]
 800ef00:	400b      	ands	r3, r1
 800ef02:	431a      	orrs	r2, r3
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	619a      	str	r2, [r3, #24]
}
 800ef08:	bf00      	nop
 800ef0a:	3714      	adds	r7, #20
 800ef0c:	46bd      	mov	sp, r7
 800ef0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef12:	4770      	bx	lr

0800ef14 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800ef14:	b580      	push	{r7, lr}
 800ef16:	b084      	sub	sp, #16
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d101      	bne.n	800ef26 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800ef22:	2301      	movs	r3, #1
 800ef24:	e041      	b.n	800efaa <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800ef2e:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	f245 5255 	movw	r2, #21845	; 0x5555
 800ef38:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	687a      	ldr	r2, [r7, #4]
 800ef40:	6852      	ldr	r2, [r2, #4]
 800ef42:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	687a      	ldr	r2, [r7, #4]
 800ef4a:	6892      	ldr	r2, [r2, #8]
 800ef4c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800ef4e:	f7ff f9bf 	bl	800e2d0 <HAL_GetTick>
 800ef52:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800ef54:	e00f      	b.n	800ef76 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800ef56:	f7ff f9bb 	bl	800e2d0 <HAL_GetTick>
 800ef5a:	4602      	mov	r2, r0
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	1ad3      	subs	r3, r2, r3
 800ef60:	2b31      	cmp	r3, #49	; 0x31
 800ef62:	d908      	bls.n	800ef76 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	68db      	ldr	r3, [r3, #12]
 800ef6a:	f003 0307 	and.w	r3, r3, #7
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d001      	beq.n	800ef76 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800ef72:	2303      	movs	r3, #3
 800ef74:	e019      	b.n	800efaa <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	68db      	ldr	r3, [r3, #12]
 800ef7c:	f003 0307 	and.w	r3, r3, #7
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d1e8      	bne.n	800ef56 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	691a      	ldr	r2, [r3, #16]
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	68db      	ldr	r3, [r3, #12]
 800ef8e:	429a      	cmp	r2, r3
 800ef90:	d005      	beq.n	800ef9e <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	687a      	ldr	r2, [r7, #4]
 800ef98:	68d2      	ldr	r2, [r2, #12]
 800ef9a:	611a      	str	r2, [r3, #16]
 800ef9c:	e004      	b.n	800efa8 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800efa6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800efa8:	2300      	movs	r3, #0
}
 800efaa:	4618      	mov	r0, r3
 800efac:	3710      	adds	r7, #16
 800efae:	46bd      	mov	sp, r7
 800efb0:	bd80      	pop	{r7, pc}

0800efb2 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800efb2:	b480      	push	{r7}
 800efb4:	b083      	sub	sp, #12
 800efb6:	af00      	add	r7, sp, #0
 800efb8:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800efc2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800efc4:	2300      	movs	r3, #0
}
 800efc6:	4618      	mov	r0, r3
 800efc8:	370c      	adds	r7, #12
 800efca:	46bd      	mov	sp, r7
 800efcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd0:	4770      	bx	lr
	...

0800efd4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800efd4:	b480      	push	{r7}
 800efd6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800efd8:	4b05      	ldr	r3, [pc, #20]	; (800eff0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	4a04      	ldr	r2, [pc, #16]	; (800eff0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800efde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800efe2:	6013      	str	r3, [r2, #0]
}
 800efe4:	bf00      	nop
 800efe6:	46bd      	mov	sp, r7
 800efe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efec:	4770      	bx	lr
 800efee:	bf00      	nop
 800eff0:	40007000 	.word	0x40007000

0800eff4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800eff4:	b480      	push	{r7}
 800eff6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800eff8:	4b0d      	ldr	r3, [pc, #52]	; (800f030 <HAL_PWREx_GetVoltageRange+0x3c>)
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f000:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f004:	d102      	bne.n	800f00c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800f006:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f00a:	e00b      	b.n	800f024 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800f00c:	4b08      	ldr	r3, [pc, #32]	; (800f030 <HAL_PWREx_GetVoltageRange+0x3c>)
 800f00e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f016:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f01a:	d102      	bne.n	800f022 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800f01c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f020:	e000      	b.n	800f024 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800f022:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800f024:	4618      	mov	r0, r3
 800f026:	46bd      	mov	sp, r7
 800f028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f02c:	4770      	bx	lr
 800f02e:	bf00      	nop
 800f030:	40007000 	.word	0x40007000

0800f034 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800f034:	b480      	push	{r7}
 800f036:	b085      	sub	sp, #20
 800f038:	af00      	add	r7, sp, #0
 800f03a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d141      	bne.n	800f0c6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800f042:	4b4b      	ldr	r3, [pc, #300]	; (800f170 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f04a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f04e:	d131      	bne.n	800f0b4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800f050:	4b47      	ldr	r3, [pc, #284]	; (800f170 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800f052:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f056:	4a46      	ldr	r2, [pc, #280]	; (800f170 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800f058:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f05c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800f060:	4b43      	ldr	r3, [pc, #268]	; (800f170 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800f068:	4a41      	ldr	r2, [pc, #260]	; (800f170 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800f06a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f06e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800f070:	4b40      	ldr	r3, [pc, #256]	; (800f174 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	2232      	movs	r2, #50	; 0x32
 800f076:	fb02 f303 	mul.w	r3, r2, r3
 800f07a:	4a3f      	ldr	r2, [pc, #252]	; (800f178 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800f07c:	fba2 2303 	umull	r2, r3, r2, r3
 800f080:	0c9b      	lsrs	r3, r3, #18
 800f082:	3301      	adds	r3, #1
 800f084:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800f086:	e002      	b.n	800f08e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	3b01      	subs	r3, #1
 800f08c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800f08e:	4b38      	ldr	r3, [pc, #224]	; (800f170 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800f090:	695b      	ldr	r3, [r3, #20]
 800f092:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f096:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f09a:	d102      	bne.n	800f0a2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d1f2      	bne.n	800f088 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800f0a2:	4b33      	ldr	r3, [pc, #204]	; (800f170 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800f0a4:	695b      	ldr	r3, [r3, #20]
 800f0a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f0aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f0ae:	d158      	bne.n	800f162 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800f0b0:	2303      	movs	r3, #3
 800f0b2:	e057      	b.n	800f164 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800f0b4:	4b2e      	ldr	r3, [pc, #184]	; (800f170 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800f0b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f0ba:	4a2d      	ldr	r2, [pc, #180]	; (800f170 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800f0bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f0c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800f0c4:	e04d      	b.n	800f162 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f0cc:	d141      	bne.n	800f152 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800f0ce:	4b28      	ldr	r3, [pc, #160]	; (800f170 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f0d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f0da:	d131      	bne.n	800f140 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800f0dc:	4b24      	ldr	r3, [pc, #144]	; (800f170 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800f0de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f0e2:	4a23      	ldr	r2, [pc, #140]	; (800f170 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800f0e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f0e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800f0ec:	4b20      	ldr	r3, [pc, #128]	; (800f170 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800f0f4:	4a1e      	ldr	r2, [pc, #120]	; (800f170 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800f0f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f0fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800f0fc:	4b1d      	ldr	r3, [pc, #116]	; (800f174 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	2232      	movs	r2, #50	; 0x32
 800f102:	fb02 f303 	mul.w	r3, r2, r3
 800f106:	4a1c      	ldr	r2, [pc, #112]	; (800f178 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800f108:	fba2 2303 	umull	r2, r3, r2, r3
 800f10c:	0c9b      	lsrs	r3, r3, #18
 800f10e:	3301      	adds	r3, #1
 800f110:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800f112:	e002      	b.n	800f11a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	3b01      	subs	r3, #1
 800f118:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800f11a:	4b15      	ldr	r3, [pc, #84]	; (800f170 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800f11c:	695b      	ldr	r3, [r3, #20]
 800f11e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f122:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f126:	d102      	bne.n	800f12e <HAL_PWREx_ControlVoltageScaling+0xfa>
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d1f2      	bne.n	800f114 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800f12e:	4b10      	ldr	r3, [pc, #64]	; (800f170 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800f130:	695b      	ldr	r3, [r3, #20]
 800f132:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f136:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f13a:	d112      	bne.n	800f162 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800f13c:	2303      	movs	r3, #3
 800f13e:	e011      	b.n	800f164 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800f140:	4b0b      	ldr	r3, [pc, #44]	; (800f170 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800f142:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f146:	4a0a      	ldr	r2, [pc, #40]	; (800f170 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800f148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f14c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800f150:	e007      	b.n	800f162 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800f152:	4b07      	ldr	r3, [pc, #28]	; (800f170 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800f15a:	4a05      	ldr	r2, [pc, #20]	; (800f170 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800f15c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f160:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800f162:	2300      	movs	r3, #0
}
 800f164:	4618      	mov	r0, r3
 800f166:	3714      	adds	r7, #20
 800f168:	46bd      	mov	sp, r7
 800f16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16e:	4770      	bx	lr
 800f170:	40007000 	.word	0x40007000
 800f174:	20000094 	.word	0x20000094
 800f178:	431bde83 	.word	0x431bde83

0800f17c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800f17c:	b580      	push	{r7, lr}
 800f17e:	b08a      	sub	sp, #40	; 0x28
 800f180:	af00      	add	r7, sp, #0
 800f182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	2b00      	cmp	r3, #0
 800f188:	d102      	bne.n	800f190 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800f18a:	2301      	movs	r3, #1
 800f18c:	f000 bc68 	b.w	800fa60 <HAL_RCC_OscConfig+0x8e4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f190:	4b97      	ldr	r3, [pc, #604]	; (800f3f0 <HAL_RCC_OscConfig+0x274>)
 800f192:	689b      	ldr	r3, [r3, #8]
 800f194:	f003 030c 	and.w	r3, r3, #12
 800f198:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800f19a:	4b95      	ldr	r3, [pc, #596]	; (800f3f0 <HAL_RCC_OscConfig+0x274>)
 800f19c:	68db      	ldr	r3, [r3, #12]
 800f19e:	f003 0303 	and.w	r3, r3, #3
 800f1a2:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	f003 0310 	and.w	r3, r3, #16
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	f000 80e6 	beq.w	800f37e <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800f1b2:	6a3b      	ldr	r3, [r7, #32]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d007      	beq.n	800f1c8 <HAL_RCC_OscConfig+0x4c>
 800f1b8:	6a3b      	ldr	r3, [r7, #32]
 800f1ba:	2b0c      	cmp	r3, #12
 800f1bc:	f040 808d 	bne.w	800f2da <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800f1c0:	69fb      	ldr	r3, [r7, #28]
 800f1c2:	2b01      	cmp	r3, #1
 800f1c4:	f040 8089 	bne.w	800f2da <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800f1c8:	4b89      	ldr	r3, [pc, #548]	; (800f3f0 <HAL_RCC_OscConfig+0x274>)
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	f003 0302 	and.w	r3, r3, #2
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d006      	beq.n	800f1e2 <HAL_RCC_OscConfig+0x66>
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	69db      	ldr	r3, [r3, #28]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d102      	bne.n	800f1e2 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 800f1dc:	2301      	movs	r3, #1
 800f1de:	f000 bc3f 	b.w	800fa60 <HAL_RCC_OscConfig+0x8e4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f1e6:	4b82      	ldr	r3, [pc, #520]	; (800f3f0 <HAL_RCC_OscConfig+0x274>)
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	f003 0308 	and.w	r3, r3, #8
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d004      	beq.n	800f1fc <HAL_RCC_OscConfig+0x80>
 800f1f2:	4b7f      	ldr	r3, [pc, #508]	; (800f3f0 <HAL_RCC_OscConfig+0x274>)
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f1fa:	e005      	b.n	800f208 <HAL_RCC_OscConfig+0x8c>
 800f1fc:	4b7c      	ldr	r3, [pc, #496]	; (800f3f0 <HAL_RCC_OscConfig+0x274>)
 800f1fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f202:	091b      	lsrs	r3, r3, #4
 800f204:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f208:	4293      	cmp	r3, r2
 800f20a:	d224      	bcs.n	800f256 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f210:	4618      	mov	r0, r3
 800f212:	f000 fe5f 	bl	800fed4 <RCC_SetFlashLatencyFromMSIRange>
 800f216:	4603      	mov	r3, r0
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d002      	beq.n	800f222 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 800f21c:	2301      	movs	r3, #1
 800f21e:	f000 bc1f 	b.w	800fa60 <HAL_RCC_OscConfig+0x8e4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800f222:	4b73      	ldr	r3, [pc, #460]	; (800f3f0 <HAL_RCC_OscConfig+0x274>)
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	4a72      	ldr	r2, [pc, #456]	; (800f3f0 <HAL_RCC_OscConfig+0x274>)
 800f228:	f043 0308 	orr.w	r3, r3, #8
 800f22c:	6013      	str	r3, [r2, #0]
 800f22e:	4b70      	ldr	r3, [pc, #448]	; (800f3f0 <HAL_RCC_OscConfig+0x274>)
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f23a:	496d      	ldr	r1, [pc, #436]	; (800f3f0 <HAL_RCC_OscConfig+0x274>)
 800f23c:	4313      	orrs	r3, r2
 800f23e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800f240:	4b6b      	ldr	r3, [pc, #428]	; (800f3f0 <HAL_RCC_OscConfig+0x274>)
 800f242:	685b      	ldr	r3, [r3, #4]
 800f244:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	6a1b      	ldr	r3, [r3, #32]
 800f24c:	021b      	lsls	r3, r3, #8
 800f24e:	4968      	ldr	r1, [pc, #416]	; (800f3f0 <HAL_RCC_OscConfig+0x274>)
 800f250:	4313      	orrs	r3, r2
 800f252:	604b      	str	r3, [r1, #4]
 800f254:	e025      	b.n	800f2a2 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800f256:	4b66      	ldr	r3, [pc, #408]	; (800f3f0 <HAL_RCC_OscConfig+0x274>)
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	4a65      	ldr	r2, [pc, #404]	; (800f3f0 <HAL_RCC_OscConfig+0x274>)
 800f25c:	f043 0308 	orr.w	r3, r3, #8
 800f260:	6013      	str	r3, [r2, #0]
 800f262:	4b63      	ldr	r3, [pc, #396]	; (800f3f0 <HAL_RCC_OscConfig+0x274>)
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f26e:	4960      	ldr	r1, [pc, #384]	; (800f3f0 <HAL_RCC_OscConfig+0x274>)
 800f270:	4313      	orrs	r3, r2
 800f272:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800f274:	4b5e      	ldr	r3, [pc, #376]	; (800f3f0 <HAL_RCC_OscConfig+0x274>)
 800f276:	685b      	ldr	r3, [r3, #4]
 800f278:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	6a1b      	ldr	r3, [r3, #32]
 800f280:	021b      	lsls	r3, r3, #8
 800f282:	495b      	ldr	r1, [pc, #364]	; (800f3f0 <HAL_RCC_OscConfig+0x274>)
 800f284:	4313      	orrs	r3, r2
 800f286:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800f288:	6a3b      	ldr	r3, [r7, #32]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d109      	bne.n	800f2a2 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f292:	4618      	mov	r0, r3
 800f294:	f000 fe1e 	bl	800fed4 <RCC_SetFlashLatencyFromMSIRange>
 800f298:	4603      	mov	r3, r0
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d001      	beq.n	800f2a2 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800f29e:	2301      	movs	r3, #1
 800f2a0:	e3de      	b.n	800fa60 <HAL_RCC_OscConfig+0x8e4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800f2a2:	f000 fd21 	bl	800fce8 <HAL_RCC_GetSysClockFreq>
 800f2a6:	4602      	mov	r2, r0
 800f2a8:	4b51      	ldr	r3, [pc, #324]	; (800f3f0 <HAL_RCC_OscConfig+0x274>)
 800f2aa:	689b      	ldr	r3, [r3, #8]
 800f2ac:	091b      	lsrs	r3, r3, #4
 800f2ae:	f003 030f 	and.w	r3, r3, #15
 800f2b2:	4950      	ldr	r1, [pc, #320]	; (800f3f4 <HAL_RCC_OscConfig+0x278>)
 800f2b4:	5ccb      	ldrb	r3, [r1, r3]
 800f2b6:	f003 031f 	and.w	r3, r3, #31
 800f2ba:	fa22 f303 	lsr.w	r3, r2, r3
 800f2be:	4a4e      	ldr	r2, [pc, #312]	; (800f3f8 <HAL_RCC_OscConfig+0x27c>)
 800f2c0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800f2c2:	4b4e      	ldr	r3, [pc, #312]	; (800f3fc <HAL_RCC_OscConfig+0x280>)
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	f7fe fa3c 	bl	800d744 <HAL_InitTick>
 800f2cc:	4603      	mov	r3, r0
 800f2ce:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 800f2d0:	7dfb      	ldrb	r3, [r7, #23]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d052      	beq.n	800f37c <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800f2d6:	7dfb      	ldrb	r3, [r7, #23]
 800f2d8:	e3c2      	b.n	800fa60 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	69db      	ldr	r3, [r3, #28]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d032      	beq.n	800f348 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800f2e2:	4b43      	ldr	r3, [pc, #268]	; (800f3f0 <HAL_RCC_OscConfig+0x274>)
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	4a42      	ldr	r2, [pc, #264]	; (800f3f0 <HAL_RCC_OscConfig+0x274>)
 800f2e8:	f043 0301 	orr.w	r3, r3, #1
 800f2ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800f2ee:	f7fe ffef 	bl	800e2d0 <HAL_GetTick>
 800f2f2:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800f2f4:	e008      	b.n	800f308 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800f2f6:	f7fe ffeb 	bl	800e2d0 <HAL_GetTick>
 800f2fa:	4602      	mov	r2, r0
 800f2fc:	69bb      	ldr	r3, [r7, #24]
 800f2fe:	1ad3      	subs	r3, r2, r3
 800f300:	2b02      	cmp	r3, #2
 800f302:	d901      	bls.n	800f308 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 800f304:	2303      	movs	r3, #3
 800f306:	e3ab      	b.n	800fa60 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800f308:	4b39      	ldr	r3, [pc, #228]	; (800f3f0 <HAL_RCC_OscConfig+0x274>)
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	f003 0302 	and.w	r3, r3, #2
 800f310:	2b00      	cmp	r3, #0
 800f312:	d0f0      	beq.n	800f2f6 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800f314:	4b36      	ldr	r3, [pc, #216]	; (800f3f0 <HAL_RCC_OscConfig+0x274>)
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	4a35      	ldr	r2, [pc, #212]	; (800f3f0 <HAL_RCC_OscConfig+0x274>)
 800f31a:	f043 0308 	orr.w	r3, r3, #8
 800f31e:	6013      	str	r3, [r2, #0]
 800f320:	4b33      	ldr	r3, [pc, #204]	; (800f3f0 <HAL_RCC_OscConfig+0x274>)
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f32c:	4930      	ldr	r1, [pc, #192]	; (800f3f0 <HAL_RCC_OscConfig+0x274>)
 800f32e:	4313      	orrs	r3, r2
 800f330:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800f332:	4b2f      	ldr	r3, [pc, #188]	; (800f3f0 <HAL_RCC_OscConfig+0x274>)
 800f334:	685b      	ldr	r3, [r3, #4]
 800f336:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	6a1b      	ldr	r3, [r3, #32]
 800f33e:	021b      	lsls	r3, r3, #8
 800f340:	492b      	ldr	r1, [pc, #172]	; (800f3f0 <HAL_RCC_OscConfig+0x274>)
 800f342:	4313      	orrs	r3, r2
 800f344:	604b      	str	r3, [r1, #4]
 800f346:	e01a      	b.n	800f37e <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800f348:	4b29      	ldr	r3, [pc, #164]	; (800f3f0 <HAL_RCC_OscConfig+0x274>)
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	4a28      	ldr	r2, [pc, #160]	; (800f3f0 <HAL_RCC_OscConfig+0x274>)
 800f34e:	f023 0301 	bic.w	r3, r3, #1
 800f352:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800f354:	f7fe ffbc 	bl	800e2d0 <HAL_GetTick>
 800f358:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800f35a:	e008      	b.n	800f36e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800f35c:	f7fe ffb8 	bl	800e2d0 <HAL_GetTick>
 800f360:	4602      	mov	r2, r0
 800f362:	69bb      	ldr	r3, [r7, #24]
 800f364:	1ad3      	subs	r3, r2, r3
 800f366:	2b02      	cmp	r3, #2
 800f368:	d901      	bls.n	800f36e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800f36a:	2303      	movs	r3, #3
 800f36c:	e378      	b.n	800fa60 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800f36e:	4b20      	ldr	r3, [pc, #128]	; (800f3f0 <HAL_RCC_OscConfig+0x274>)
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	f003 0302 	and.w	r3, r3, #2
 800f376:	2b00      	cmp	r3, #0
 800f378:	d1f0      	bne.n	800f35c <HAL_RCC_OscConfig+0x1e0>
 800f37a:	e000      	b.n	800f37e <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800f37c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	f003 0301 	and.w	r3, r3, #1
 800f386:	2b00      	cmp	r3, #0
 800f388:	d073      	beq.n	800f472 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800f38a:	6a3b      	ldr	r3, [r7, #32]
 800f38c:	2b08      	cmp	r3, #8
 800f38e:	d005      	beq.n	800f39c <HAL_RCC_OscConfig+0x220>
 800f390:	6a3b      	ldr	r3, [r7, #32]
 800f392:	2b0c      	cmp	r3, #12
 800f394:	d10e      	bne.n	800f3b4 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800f396:	69fb      	ldr	r3, [r7, #28]
 800f398:	2b03      	cmp	r3, #3
 800f39a:	d10b      	bne.n	800f3b4 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f39c:	4b14      	ldr	r3, [pc, #80]	; (800f3f0 <HAL_RCC_OscConfig+0x274>)
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d063      	beq.n	800f470 <HAL_RCC_OscConfig+0x2f4>
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	685b      	ldr	r3, [r3, #4]
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d15f      	bne.n	800f470 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800f3b0:	2301      	movs	r3, #1
 800f3b2:	e355      	b.n	800fa60 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	685b      	ldr	r3, [r3, #4]
 800f3b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f3bc:	d106      	bne.n	800f3cc <HAL_RCC_OscConfig+0x250>
 800f3be:	4b0c      	ldr	r3, [pc, #48]	; (800f3f0 <HAL_RCC_OscConfig+0x274>)
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	4a0b      	ldr	r2, [pc, #44]	; (800f3f0 <HAL_RCC_OscConfig+0x274>)
 800f3c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f3c8:	6013      	str	r3, [r2, #0]
 800f3ca:	e025      	b.n	800f418 <HAL_RCC_OscConfig+0x29c>
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	685b      	ldr	r3, [r3, #4]
 800f3d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f3d4:	d114      	bne.n	800f400 <HAL_RCC_OscConfig+0x284>
 800f3d6:	4b06      	ldr	r3, [pc, #24]	; (800f3f0 <HAL_RCC_OscConfig+0x274>)
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	4a05      	ldr	r2, [pc, #20]	; (800f3f0 <HAL_RCC_OscConfig+0x274>)
 800f3dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800f3e0:	6013      	str	r3, [r2, #0]
 800f3e2:	4b03      	ldr	r3, [pc, #12]	; (800f3f0 <HAL_RCC_OscConfig+0x274>)
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	4a02      	ldr	r2, [pc, #8]	; (800f3f0 <HAL_RCC_OscConfig+0x274>)
 800f3e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f3ec:	6013      	str	r3, [r2, #0]
 800f3ee:	e013      	b.n	800f418 <HAL_RCC_OscConfig+0x29c>
 800f3f0:	40021000 	.word	0x40021000
 800f3f4:	080253f8 	.word	0x080253f8
 800f3f8:	20000094 	.word	0x20000094
 800f3fc:	20000098 	.word	0x20000098
 800f400:	4b8f      	ldr	r3, [pc, #572]	; (800f640 <HAL_RCC_OscConfig+0x4c4>)
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	4a8e      	ldr	r2, [pc, #568]	; (800f640 <HAL_RCC_OscConfig+0x4c4>)
 800f406:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f40a:	6013      	str	r3, [r2, #0]
 800f40c:	4b8c      	ldr	r3, [pc, #560]	; (800f640 <HAL_RCC_OscConfig+0x4c4>)
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	4a8b      	ldr	r2, [pc, #556]	; (800f640 <HAL_RCC_OscConfig+0x4c4>)
 800f412:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f416:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	685b      	ldr	r3, [r3, #4]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d013      	beq.n	800f448 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f420:	f7fe ff56 	bl	800e2d0 <HAL_GetTick>
 800f424:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800f426:	e008      	b.n	800f43a <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f428:	f7fe ff52 	bl	800e2d0 <HAL_GetTick>
 800f42c:	4602      	mov	r2, r0
 800f42e:	69bb      	ldr	r3, [r7, #24]
 800f430:	1ad3      	subs	r3, r2, r3
 800f432:	2b64      	cmp	r3, #100	; 0x64
 800f434:	d901      	bls.n	800f43a <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 800f436:	2303      	movs	r3, #3
 800f438:	e312      	b.n	800fa60 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800f43a:	4b81      	ldr	r3, [pc, #516]	; (800f640 <HAL_RCC_OscConfig+0x4c4>)
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f442:	2b00      	cmp	r3, #0
 800f444:	d0f0      	beq.n	800f428 <HAL_RCC_OscConfig+0x2ac>
 800f446:	e014      	b.n	800f472 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f448:	f7fe ff42 	bl	800e2d0 <HAL_GetTick>
 800f44c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800f44e:	e008      	b.n	800f462 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f450:	f7fe ff3e 	bl	800e2d0 <HAL_GetTick>
 800f454:	4602      	mov	r2, r0
 800f456:	69bb      	ldr	r3, [r7, #24]
 800f458:	1ad3      	subs	r3, r2, r3
 800f45a:	2b64      	cmp	r3, #100	; 0x64
 800f45c:	d901      	bls.n	800f462 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800f45e:	2303      	movs	r3, #3
 800f460:	e2fe      	b.n	800fa60 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800f462:	4b77      	ldr	r3, [pc, #476]	; (800f640 <HAL_RCC_OscConfig+0x4c4>)
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d1f0      	bne.n	800f450 <HAL_RCC_OscConfig+0x2d4>
 800f46e:	e000      	b.n	800f472 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f470:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	f003 0302 	and.w	r3, r3, #2
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d060      	beq.n	800f540 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800f47e:	6a3b      	ldr	r3, [r7, #32]
 800f480:	2b04      	cmp	r3, #4
 800f482:	d005      	beq.n	800f490 <HAL_RCC_OscConfig+0x314>
 800f484:	6a3b      	ldr	r3, [r7, #32]
 800f486:	2b0c      	cmp	r3, #12
 800f488:	d119      	bne.n	800f4be <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800f48a:	69fb      	ldr	r3, [r7, #28]
 800f48c:	2b02      	cmp	r3, #2
 800f48e:	d116      	bne.n	800f4be <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f490:	4b6b      	ldr	r3, [pc, #428]	; (800f640 <HAL_RCC_OscConfig+0x4c4>)
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d005      	beq.n	800f4a8 <HAL_RCC_OscConfig+0x32c>
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	68db      	ldr	r3, [r3, #12]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d101      	bne.n	800f4a8 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 800f4a4:	2301      	movs	r3, #1
 800f4a6:	e2db      	b.n	800fa60 <HAL_RCC_OscConfig+0x8e4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f4a8:	4b65      	ldr	r3, [pc, #404]	; (800f640 <HAL_RCC_OscConfig+0x4c4>)
 800f4aa:	685b      	ldr	r3, [r3, #4]
 800f4ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	691b      	ldr	r3, [r3, #16]
 800f4b4:	061b      	lsls	r3, r3, #24
 800f4b6:	4962      	ldr	r1, [pc, #392]	; (800f640 <HAL_RCC_OscConfig+0x4c4>)
 800f4b8:	4313      	orrs	r3, r2
 800f4ba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f4bc:	e040      	b.n	800f540 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	68db      	ldr	r3, [r3, #12]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d023      	beq.n	800f50e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800f4c6:	4b5e      	ldr	r3, [pc, #376]	; (800f640 <HAL_RCC_OscConfig+0x4c4>)
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	4a5d      	ldr	r2, [pc, #372]	; (800f640 <HAL_RCC_OscConfig+0x4c4>)
 800f4cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f4d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f4d2:	f7fe fefd 	bl	800e2d0 <HAL_GetTick>
 800f4d6:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800f4d8:	e008      	b.n	800f4ec <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f4da:	f7fe fef9 	bl	800e2d0 <HAL_GetTick>
 800f4de:	4602      	mov	r2, r0
 800f4e0:	69bb      	ldr	r3, [r7, #24]
 800f4e2:	1ad3      	subs	r3, r2, r3
 800f4e4:	2b02      	cmp	r3, #2
 800f4e6:	d901      	bls.n	800f4ec <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 800f4e8:	2303      	movs	r3, #3
 800f4ea:	e2b9      	b.n	800fa60 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800f4ec:	4b54      	ldr	r3, [pc, #336]	; (800f640 <HAL_RCC_OscConfig+0x4c4>)
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d0f0      	beq.n	800f4da <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f4f8:	4b51      	ldr	r3, [pc, #324]	; (800f640 <HAL_RCC_OscConfig+0x4c4>)
 800f4fa:	685b      	ldr	r3, [r3, #4]
 800f4fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	691b      	ldr	r3, [r3, #16]
 800f504:	061b      	lsls	r3, r3, #24
 800f506:	494e      	ldr	r1, [pc, #312]	; (800f640 <HAL_RCC_OscConfig+0x4c4>)
 800f508:	4313      	orrs	r3, r2
 800f50a:	604b      	str	r3, [r1, #4]
 800f50c:	e018      	b.n	800f540 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800f50e:	4b4c      	ldr	r3, [pc, #304]	; (800f640 <HAL_RCC_OscConfig+0x4c4>)
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	4a4b      	ldr	r2, [pc, #300]	; (800f640 <HAL_RCC_OscConfig+0x4c4>)
 800f514:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f518:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f51a:	f7fe fed9 	bl	800e2d0 <HAL_GetTick>
 800f51e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800f520:	e008      	b.n	800f534 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f522:	f7fe fed5 	bl	800e2d0 <HAL_GetTick>
 800f526:	4602      	mov	r2, r0
 800f528:	69bb      	ldr	r3, [r7, #24]
 800f52a:	1ad3      	subs	r3, r2, r3
 800f52c:	2b02      	cmp	r3, #2
 800f52e:	d901      	bls.n	800f534 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 800f530:	2303      	movs	r3, #3
 800f532:	e295      	b.n	800fa60 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800f534:	4b42      	ldr	r3, [pc, #264]	; (800f640 <HAL_RCC_OscConfig+0x4c4>)
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d1f0      	bne.n	800f522 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	f003 0308 	and.w	r3, r3, #8
 800f548:	2b00      	cmp	r3, #0
 800f54a:	f000 8082 	beq.w	800f652 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	695b      	ldr	r3, [r3, #20]
 800f552:	2b00      	cmp	r3, #0
 800f554:	d05f      	beq.n	800f616 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 800f556:	4b3a      	ldr	r3, [pc, #232]	; (800f640 <HAL_RCC_OscConfig+0x4c4>)
 800f558:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f55c:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	699a      	ldr	r2, [r3, #24]
 800f562:	693b      	ldr	r3, [r7, #16]
 800f564:	f003 0310 	and.w	r3, r3, #16
 800f568:	429a      	cmp	r2, r3
 800f56a:	d037      	beq.n	800f5dc <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800f56c:	693b      	ldr	r3, [r7, #16]
 800f56e:	f003 0302 	and.w	r3, r3, #2
 800f572:	2b00      	cmp	r3, #0
 800f574:	d006      	beq.n	800f584 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800f576:	693b      	ldr	r3, [r7, #16]
 800f578:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d101      	bne.n	800f584 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 800f580:	2301      	movs	r3, #1
 800f582:	e26d      	b.n	800fa60 <HAL_RCC_OscConfig+0x8e4>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800f584:	693b      	ldr	r3, [r7, #16]
 800f586:	f003 0301 	and.w	r3, r3, #1
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d01b      	beq.n	800f5c6 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 800f58e:	4b2c      	ldr	r3, [pc, #176]	; (800f640 <HAL_RCC_OscConfig+0x4c4>)
 800f590:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f594:	4a2a      	ldr	r2, [pc, #168]	; (800f640 <HAL_RCC_OscConfig+0x4c4>)
 800f596:	f023 0301 	bic.w	r3, r3, #1
 800f59a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800f59e:	f7fe fe97 	bl	800e2d0 <HAL_GetTick>
 800f5a2:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800f5a4:	e008      	b.n	800f5b8 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f5a6:	f7fe fe93 	bl	800e2d0 <HAL_GetTick>
 800f5aa:	4602      	mov	r2, r0
 800f5ac:	69bb      	ldr	r3, [r7, #24]
 800f5ae:	1ad3      	subs	r3, r2, r3
 800f5b0:	2b11      	cmp	r3, #17
 800f5b2:	d901      	bls.n	800f5b8 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 800f5b4:	2303      	movs	r3, #3
 800f5b6:	e253      	b.n	800fa60 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800f5b8:	4b21      	ldr	r3, [pc, #132]	; (800f640 <HAL_RCC_OscConfig+0x4c4>)
 800f5ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f5be:	f003 0302 	and.w	r3, r3, #2
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d1ef      	bne.n	800f5a6 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 800f5c6:	4b1e      	ldr	r3, [pc, #120]	; (800f640 <HAL_RCC_OscConfig+0x4c4>)
 800f5c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f5cc:	f023 0210 	bic.w	r2, r3, #16
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	699b      	ldr	r3, [r3, #24]
 800f5d4:	491a      	ldr	r1, [pc, #104]	; (800f640 <HAL_RCC_OscConfig+0x4c4>)
 800f5d6:	4313      	orrs	r3, r2
 800f5d8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800f5dc:	4b18      	ldr	r3, [pc, #96]	; (800f640 <HAL_RCC_OscConfig+0x4c4>)
 800f5de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f5e2:	4a17      	ldr	r2, [pc, #92]	; (800f640 <HAL_RCC_OscConfig+0x4c4>)
 800f5e4:	f043 0301 	orr.w	r3, r3, #1
 800f5e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f5ec:	f7fe fe70 	bl	800e2d0 <HAL_GetTick>
 800f5f0:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800f5f2:	e008      	b.n	800f606 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f5f4:	f7fe fe6c 	bl	800e2d0 <HAL_GetTick>
 800f5f8:	4602      	mov	r2, r0
 800f5fa:	69bb      	ldr	r3, [r7, #24]
 800f5fc:	1ad3      	subs	r3, r2, r3
 800f5fe:	2b11      	cmp	r3, #17
 800f600:	d901      	bls.n	800f606 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800f602:	2303      	movs	r3, #3
 800f604:	e22c      	b.n	800fa60 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800f606:	4b0e      	ldr	r3, [pc, #56]	; (800f640 <HAL_RCC_OscConfig+0x4c4>)
 800f608:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f60c:	f003 0302 	and.w	r3, r3, #2
 800f610:	2b00      	cmp	r3, #0
 800f612:	d0ef      	beq.n	800f5f4 <HAL_RCC_OscConfig+0x478>
 800f614:	e01d      	b.n	800f652 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800f616:	4b0a      	ldr	r3, [pc, #40]	; (800f640 <HAL_RCC_OscConfig+0x4c4>)
 800f618:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f61c:	4a08      	ldr	r2, [pc, #32]	; (800f640 <HAL_RCC_OscConfig+0x4c4>)
 800f61e:	f023 0301 	bic.w	r3, r3, #1
 800f622:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f626:	f7fe fe53 	bl	800e2d0 <HAL_GetTick>
 800f62a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800f62c:	e00a      	b.n	800f644 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f62e:	f7fe fe4f 	bl	800e2d0 <HAL_GetTick>
 800f632:	4602      	mov	r2, r0
 800f634:	69bb      	ldr	r3, [r7, #24]
 800f636:	1ad3      	subs	r3, r2, r3
 800f638:	2b11      	cmp	r3, #17
 800f63a:	d903      	bls.n	800f644 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 800f63c:	2303      	movs	r3, #3
 800f63e:	e20f      	b.n	800fa60 <HAL_RCC_OscConfig+0x8e4>
 800f640:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800f644:	4b83      	ldr	r3, [pc, #524]	; (800f854 <HAL_RCC_OscConfig+0x6d8>)
 800f646:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f64a:	f003 0302 	and.w	r3, r3, #2
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d1ed      	bne.n	800f62e <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	f003 0304 	and.w	r3, r3, #4
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	f000 80bd 	beq.w	800f7da <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800f660:	2300      	movs	r3, #0
 800f662:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800f666:	4b7b      	ldr	r3, [pc, #492]	; (800f854 <HAL_RCC_OscConfig+0x6d8>)
 800f668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f66a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d10e      	bne.n	800f690 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f672:	4b78      	ldr	r3, [pc, #480]	; (800f854 <HAL_RCC_OscConfig+0x6d8>)
 800f674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f676:	4a77      	ldr	r2, [pc, #476]	; (800f854 <HAL_RCC_OscConfig+0x6d8>)
 800f678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f67c:	6593      	str	r3, [r2, #88]	; 0x58
 800f67e:	4b75      	ldr	r3, [pc, #468]	; (800f854 <HAL_RCC_OscConfig+0x6d8>)
 800f680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f686:	60fb      	str	r3, [r7, #12]
 800f688:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800f68a:	2301      	movs	r3, #1
 800f68c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800f690:	4b71      	ldr	r3, [pc, #452]	; (800f858 <HAL_RCC_OscConfig+0x6dc>)
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d118      	bne.n	800f6ce <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800f69c:	4b6e      	ldr	r3, [pc, #440]	; (800f858 <HAL_RCC_OscConfig+0x6dc>)
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	4a6d      	ldr	r2, [pc, #436]	; (800f858 <HAL_RCC_OscConfig+0x6dc>)
 800f6a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f6a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800f6a8:	f7fe fe12 	bl	800e2d0 <HAL_GetTick>
 800f6ac:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800f6ae:	e008      	b.n	800f6c2 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f6b0:	f7fe fe0e 	bl	800e2d0 <HAL_GetTick>
 800f6b4:	4602      	mov	r2, r0
 800f6b6:	69bb      	ldr	r3, [r7, #24]
 800f6b8:	1ad3      	subs	r3, r2, r3
 800f6ba:	2b02      	cmp	r3, #2
 800f6bc:	d901      	bls.n	800f6c2 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 800f6be:	2303      	movs	r3, #3
 800f6c0:	e1ce      	b.n	800fa60 <HAL_RCC_OscConfig+0x8e4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800f6c2:	4b65      	ldr	r3, [pc, #404]	; (800f858 <HAL_RCC_OscConfig+0x6dc>)
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d0f0      	beq.n	800f6b0 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	689b      	ldr	r3, [r3, #8]
 800f6d2:	f003 0301 	and.w	r3, r3, #1
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d02c      	beq.n	800f734 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800f6da:	4b5e      	ldr	r3, [pc, #376]	; (800f854 <HAL_RCC_OscConfig+0x6d8>)
 800f6dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f6e0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	689b      	ldr	r3, [r3, #8]
 800f6e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f6ec:	4959      	ldr	r1, [pc, #356]	; (800f854 <HAL_RCC_OscConfig+0x6d8>)
 800f6ee:	4313      	orrs	r3, r2
 800f6f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	689b      	ldr	r3, [r3, #8]
 800f6f8:	f003 0304 	and.w	r3, r3, #4
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d010      	beq.n	800f722 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800f700:	4b54      	ldr	r3, [pc, #336]	; (800f854 <HAL_RCC_OscConfig+0x6d8>)
 800f702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f706:	4a53      	ldr	r2, [pc, #332]	; (800f854 <HAL_RCC_OscConfig+0x6d8>)
 800f708:	f043 0304 	orr.w	r3, r3, #4
 800f70c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800f710:	4b50      	ldr	r3, [pc, #320]	; (800f854 <HAL_RCC_OscConfig+0x6d8>)
 800f712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f716:	4a4f      	ldr	r2, [pc, #316]	; (800f854 <HAL_RCC_OscConfig+0x6d8>)
 800f718:	f043 0301 	orr.w	r3, r3, #1
 800f71c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800f720:	e018      	b.n	800f754 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800f722:	4b4c      	ldr	r3, [pc, #304]	; (800f854 <HAL_RCC_OscConfig+0x6d8>)
 800f724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f728:	4a4a      	ldr	r2, [pc, #296]	; (800f854 <HAL_RCC_OscConfig+0x6d8>)
 800f72a:	f043 0301 	orr.w	r3, r3, #1
 800f72e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800f732:	e00f      	b.n	800f754 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800f734:	4b47      	ldr	r3, [pc, #284]	; (800f854 <HAL_RCC_OscConfig+0x6d8>)
 800f736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f73a:	4a46      	ldr	r2, [pc, #280]	; (800f854 <HAL_RCC_OscConfig+0x6d8>)
 800f73c:	f023 0301 	bic.w	r3, r3, #1
 800f740:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800f744:	4b43      	ldr	r3, [pc, #268]	; (800f854 <HAL_RCC_OscConfig+0x6d8>)
 800f746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f74a:	4a42      	ldr	r2, [pc, #264]	; (800f854 <HAL_RCC_OscConfig+0x6d8>)
 800f74c:	f023 0304 	bic.w	r3, r3, #4
 800f750:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	689b      	ldr	r3, [r3, #8]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d016      	beq.n	800f78a <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f75c:	f7fe fdb8 	bl	800e2d0 <HAL_GetTick>
 800f760:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800f762:	e00a      	b.n	800f77a <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f764:	f7fe fdb4 	bl	800e2d0 <HAL_GetTick>
 800f768:	4602      	mov	r2, r0
 800f76a:	69bb      	ldr	r3, [r7, #24]
 800f76c:	1ad3      	subs	r3, r2, r3
 800f76e:	f241 3288 	movw	r2, #5000	; 0x1388
 800f772:	4293      	cmp	r3, r2
 800f774:	d901      	bls.n	800f77a <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 800f776:	2303      	movs	r3, #3
 800f778:	e172      	b.n	800fa60 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800f77a:	4b36      	ldr	r3, [pc, #216]	; (800f854 <HAL_RCC_OscConfig+0x6d8>)
 800f77c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f780:	f003 0302 	and.w	r3, r3, #2
 800f784:	2b00      	cmp	r3, #0
 800f786:	d0ed      	beq.n	800f764 <HAL_RCC_OscConfig+0x5e8>
 800f788:	e01d      	b.n	800f7c6 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f78a:	f7fe fda1 	bl	800e2d0 <HAL_GetTick>
 800f78e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800f790:	e00a      	b.n	800f7a8 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f792:	f7fe fd9d 	bl	800e2d0 <HAL_GetTick>
 800f796:	4602      	mov	r2, r0
 800f798:	69bb      	ldr	r3, [r7, #24]
 800f79a:	1ad3      	subs	r3, r2, r3
 800f79c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f7a0:	4293      	cmp	r3, r2
 800f7a2:	d901      	bls.n	800f7a8 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 800f7a4:	2303      	movs	r3, #3
 800f7a6:	e15b      	b.n	800fa60 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800f7a8:	4b2a      	ldr	r3, [pc, #168]	; (800f854 <HAL_RCC_OscConfig+0x6d8>)
 800f7aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f7ae:	f003 0302 	and.w	r3, r3, #2
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d1ed      	bne.n	800f792 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800f7b6:	4b27      	ldr	r3, [pc, #156]	; (800f854 <HAL_RCC_OscConfig+0x6d8>)
 800f7b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f7bc:	4a25      	ldr	r2, [pc, #148]	; (800f854 <HAL_RCC_OscConfig+0x6d8>)
 800f7be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f7c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800f7c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f7ca:	2b01      	cmp	r3, #1
 800f7cc:	d105      	bne.n	800f7da <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800f7ce:	4b21      	ldr	r3, [pc, #132]	; (800f854 <HAL_RCC_OscConfig+0x6d8>)
 800f7d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f7d2:	4a20      	ldr	r2, [pc, #128]	; (800f854 <HAL_RCC_OscConfig+0x6d8>)
 800f7d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f7d8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	f003 0320 	and.w	r3, r3, #32
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d041      	beq.n	800f86a <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d01c      	beq.n	800f828 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800f7ee:	4b19      	ldr	r3, [pc, #100]	; (800f854 <HAL_RCC_OscConfig+0x6d8>)
 800f7f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f7f4:	4a17      	ldr	r2, [pc, #92]	; (800f854 <HAL_RCC_OscConfig+0x6d8>)
 800f7f6:	f043 0301 	orr.w	r3, r3, #1
 800f7fa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f7fe:	f7fe fd67 	bl	800e2d0 <HAL_GetTick>
 800f802:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800f804:	e008      	b.n	800f818 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800f806:	f7fe fd63 	bl	800e2d0 <HAL_GetTick>
 800f80a:	4602      	mov	r2, r0
 800f80c:	69bb      	ldr	r3, [r7, #24]
 800f80e:	1ad3      	subs	r3, r2, r3
 800f810:	2b02      	cmp	r3, #2
 800f812:	d901      	bls.n	800f818 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 800f814:	2303      	movs	r3, #3
 800f816:	e123      	b.n	800fa60 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800f818:	4b0e      	ldr	r3, [pc, #56]	; (800f854 <HAL_RCC_OscConfig+0x6d8>)
 800f81a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f81e:	f003 0302 	and.w	r3, r3, #2
 800f822:	2b00      	cmp	r3, #0
 800f824:	d0ef      	beq.n	800f806 <HAL_RCC_OscConfig+0x68a>
 800f826:	e020      	b.n	800f86a <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800f828:	4b0a      	ldr	r3, [pc, #40]	; (800f854 <HAL_RCC_OscConfig+0x6d8>)
 800f82a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f82e:	4a09      	ldr	r2, [pc, #36]	; (800f854 <HAL_RCC_OscConfig+0x6d8>)
 800f830:	f023 0301 	bic.w	r3, r3, #1
 800f834:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f838:	f7fe fd4a 	bl	800e2d0 <HAL_GetTick>
 800f83c:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800f83e:	e00d      	b.n	800f85c <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800f840:	f7fe fd46 	bl	800e2d0 <HAL_GetTick>
 800f844:	4602      	mov	r2, r0
 800f846:	69bb      	ldr	r3, [r7, #24]
 800f848:	1ad3      	subs	r3, r2, r3
 800f84a:	2b02      	cmp	r3, #2
 800f84c:	d906      	bls.n	800f85c <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 800f84e:	2303      	movs	r3, #3
 800f850:	e106      	b.n	800fa60 <HAL_RCC_OscConfig+0x8e4>
 800f852:	bf00      	nop
 800f854:	40021000 	.word	0x40021000
 800f858:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800f85c:	4b82      	ldr	r3, [pc, #520]	; (800fa68 <HAL_RCC_OscConfig+0x8ec>)
 800f85e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f862:	f003 0302 	and.w	r3, r3, #2
 800f866:	2b00      	cmp	r3, #0
 800f868:	d1ea      	bne.n	800f840 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f86e:	2b00      	cmp	r3, #0
 800f870:	f000 80f5 	beq.w	800fa5e <HAL_RCC_OscConfig+0x8e2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f878:	2b02      	cmp	r3, #2
 800f87a:	f040 80cb 	bne.w	800fa14 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800f87e:	4b7a      	ldr	r3, [pc, #488]	; (800fa68 <HAL_RCC_OscConfig+0x8ec>)
 800f880:	68db      	ldr	r3, [r3, #12]
 800f882:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800f884:	69fb      	ldr	r3, [r7, #28]
 800f886:	f003 0203 	and.w	r2, r3, #3
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f88e:	429a      	cmp	r2, r3
 800f890:	d12c      	bne.n	800f8ec <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800f892:	69fb      	ldr	r3, [r7, #28]
 800f894:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f89c:	3b01      	subs	r3, #1
 800f89e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800f8a0:	429a      	cmp	r2, r3
 800f8a2:	d123      	bne.n	800f8ec <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800f8a4:	69fb      	ldr	r3, [r7, #28]
 800f8a6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8ae:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800f8b0:	429a      	cmp	r2, r3
 800f8b2:	d11b      	bne.n	800f8ec <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800f8b4:	69fb      	ldr	r3, [r7, #28]
 800f8b6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f8be:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800f8c0:	429a      	cmp	r2, r3
 800f8c2:	d113      	bne.n	800f8ec <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800f8c4:	69fb      	ldr	r3, [r7, #28]
 800f8c6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8ce:	085b      	lsrs	r3, r3, #1
 800f8d0:	3b01      	subs	r3, #1
 800f8d2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800f8d4:	429a      	cmp	r2, r3
 800f8d6:	d109      	bne.n	800f8ec <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800f8d8:	69fb      	ldr	r3, [r7, #28]
 800f8da:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f8e2:	085b      	lsrs	r3, r3, #1
 800f8e4:	3b01      	subs	r3, #1
 800f8e6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800f8e8:	429a      	cmp	r2, r3
 800f8ea:	d06d      	beq.n	800f9c8 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800f8ec:	6a3b      	ldr	r3, [r7, #32]
 800f8ee:	2b0c      	cmp	r3, #12
 800f8f0:	d068      	beq.n	800f9c4 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800f8f2:	4b5d      	ldr	r3, [pc, #372]	; (800fa68 <HAL_RCC_OscConfig+0x8ec>)
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d105      	bne.n	800f90a <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800f8fe:	4b5a      	ldr	r3, [pc, #360]	; (800fa68 <HAL_RCC_OscConfig+0x8ec>)
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f906:	2b00      	cmp	r3, #0
 800f908:	d001      	beq.n	800f90e <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 800f90a:	2301      	movs	r3, #1
 800f90c:	e0a8      	b.n	800fa60 <HAL_RCC_OscConfig+0x8e4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800f90e:	4b56      	ldr	r3, [pc, #344]	; (800fa68 <HAL_RCC_OscConfig+0x8ec>)
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	4a55      	ldr	r2, [pc, #340]	; (800fa68 <HAL_RCC_OscConfig+0x8ec>)
 800f914:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f918:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800f91a:	f7fe fcd9 	bl	800e2d0 <HAL_GetTick>
 800f91e:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800f920:	e008      	b.n	800f934 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f922:	f7fe fcd5 	bl	800e2d0 <HAL_GetTick>
 800f926:	4602      	mov	r2, r0
 800f928:	69bb      	ldr	r3, [r7, #24]
 800f92a:	1ad3      	subs	r3, r2, r3
 800f92c:	2b02      	cmp	r3, #2
 800f92e:	d901      	bls.n	800f934 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 800f930:	2303      	movs	r3, #3
 800f932:	e095      	b.n	800fa60 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800f934:	4b4c      	ldr	r3, [pc, #304]	; (800fa68 <HAL_RCC_OscConfig+0x8ec>)
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d1f0      	bne.n	800f922 <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800f940:	4b49      	ldr	r3, [pc, #292]	; (800fa68 <HAL_RCC_OscConfig+0x8ec>)
 800f942:	68da      	ldr	r2, [r3, #12]
 800f944:	4b49      	ldr	r3, [pc, #292]	; (800fa6c <HAL_RCC_OscConfig+0x8f0>)
 800f946:	4013      	ands	r3, r2
 800f948:	687a      	ldr	r2, [r7, #4]
 800f94a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800f94c:	687a      	ldr	r2, [r7, #4]
 800f94e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800f950:	3a01      	subs	r2, #1
 800f952:	0112      	lsls	r2, r2, #4
 800f954:	4311      	orrs	r1, r2
 800f956:	687a      	ldr	r2, [r7, #4]
 800f958:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800f95a:	0212      	lsls	r2, r2, #8
 800f95c:	4311      	orrs	r1, r2
 800f95e:	687a      	ldr	r2, [r7, #4]
 800f960:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800f962:	0852      	lsrs	r2, r2, #1
 800f964:	3a01      	subs	r2, #1
 800f966:	0552      	lsls	r2, r2, #21
 800f968:	4311      	orrs	r1, r2
 800f96a:	687a      	ldr	r2, [r7, #4]
 800f96c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800f96e:	0852      	lsrs	r2, r2, #1
 800f970:	3a01      	subs	r2, #1
 800f972:	0652      	lsls	r2, r2, #25
 800f974:	4311      	orrs	r1, r2
 800f976:	687a      	ldr	r2, [r7, #4]
 800f978:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800f97a:	06d2      	lsls	r2, r2, #27
 800f97c:	430a      	orrs	r2, r1
 800f97e:	493a      	ldr	r1, [pc, #232]	; (800fa68 <HAL_RCC_OscConfig+0x8ec>)
 800f980:	4313      	orrs	r3, r2
 800f982:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800f984:	4b38      	ldr	r3, [pc, #224]	; (800fa68 <HAL_RCC_OscConfig+0x8ec>)
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	4a37      	ldr	r2, [pc, #220]	; (800fa68 <HAL_RCC_OscConfig+0x8ec>)
 800f98a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f98e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800f990:	4b35      	ldr	r3, [pc, #212]	; (800fa68 <HAL_RCC_OscConfig+0x8ec>)
 800f992:	68db      	ldr	r3, [r3, #12]
 800f994:	4a34      	ldr	r2, [pc, #208]	; (800fa68 <HAL_RCC_OscConfig+0x8ec>)
 800f996:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f99a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800f99c:	f7fe fc98 	bl	800e2d0 <HAL_GetTick>
 800f9a0:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f9a2:	e008      	b.n	800f9b6 <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f9a4:	f7fe fc94 	bl	800e2d0 <HAL_GetTick>
 800f9a8:	4602      	mov	r2, r0
 800f9aa:	69bb      	ldr	r3, [r7, #24]
 800f9ac:	1ad3      	subs	r3, r2, r3
 800f9ae:	2b02      	cmp	r3, #2
 800f9b0:	d901      	bls.n	800f9b6 <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 800f9b2:	2303      	movs	r3, #3
 800f9b4:	e054      	b.n	800fa60 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f9b6:	4b2c      	ldr	r3, [pc, #176]	; (800fa68 <HAL_RCC_OscConfig+0x8ec>)
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d0f0      	beq.n	800f9a4 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800f9c2:	e04c      	b.n	800fa5e <HAL_RCC_OscConfig+0x8e2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800f9c4:	2301      	movs	r3, #1
 800f9c6:	e04b      	b.n	800fa60 <HAL_RCC_OscConfig+0x8e4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f9c8:	4b27      	ldr	r3, [pc, #156]	; (800fa68 <HAL_RCC_OscConfig+0x8ec>)
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d144      	bne.n	800fa5e <HAL_RCC_OscConfig+0x8e2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800f9d4:	4b24      	ldr	r3, [pc, #144]	; (800fa68 <HAL_RCC_OscConfig+0x8ec>)
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	4a23      	ldr	r2, [pc, #140]	; (800fa68 <HAL_RCC_OscConfig+0x8ec>)
 800f9da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f9de:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800f9e0:	4b21      	ldr	r3, [pc, #132]	; (800fa68 <HAL_RCC_OscConfig+0x8ec>)
 800f9e2:	68db      	ldr	r3, [r3, #12]
 800f9e4:	4a20      	ldr	r2, [pc, #128]	; (800fa68 <HAL_RCC_OscConfig+0x8ec>)
 800f9e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f9ea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800f9ec:	f7fe fc70 	bl	800e2d0 <HAL_GetTick>
 800f9f0:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f9f2:	e008      	b.n	800fa06 <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f9f4:	f7fe fc6c 	bl	800e2d0 <HAL_GetTick>
 800f9f8:	4602      	mov	r2, r0
 800f9fa:	69bb      	ldr	r3, [r7, #24]
 800f9fc:	1ad3      	subs	r3, r2, r3
 800f9fe:	2b02      	cmp	r3, #2
 800fa00:	d901      	bls.n	800fa06 <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 800fa02:	2303      	movs	r3, #3
 800fa04:	e02c      	b.n	800fa60 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800fa06:	4b18      	ldr	r3, [pc, #96]	; (800fa68 <HAL_RCC_OscConfig+0x8ec>)
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d0f0      	beq.n	800f9f4 <HAL_RCC_OscConfig+0x878>
 800fa12:	e024      	b.n	800fa5e <HAL_RCC_OscConfig+0x8e2>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800fa14:	6a3b      	ldr	r3, [r7, #32]
 800fa16:	2b0c      	cmp	r3, #12
 800fa18:	d01f      	beq.n	800fa5a <HAL_RCC_OscConfig+0x8de>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800fa1a:	4b13      	ldr	r3, [pc, #76]	; (800fa68 <HAL_RCC_OscConfig+0x8ec>)
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	4a12      	ldr	r2, [pc, #72]	; (800fa68 <HAL_RCC_OscConfig+0x8ec>)
 800fa20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800fa24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fa26:	f7fe fc53 	bl	800e2d0 <HAL_GetTick>
 800fa2a:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800fa2c:	e008      	b.n	800fa40 <HAL_RCC_OscConfig+0x8c4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fa2e:	f7fe fc4f 	bl	800e2d0 <HAL_GetTick>
 800fa32:	4602      	mov	r2, r0
 800fa34:	69bb      	ldr	r3, [r7, #24]
 800fa36:	1ad3      	subs	r3, r2, r3
 800fa38:	2b02      	cmp	r3, #2
 800fa3a:	d901      	bls.n	800fa40 <HAL_RCC_OscConfig+0x8c4>
          {
            return HAL_TIMEOUT;
 800fa3c:	2303      	movs	r3, #3
 800fa3e:	e00f      	b.n	800fa60 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800fa40:	4b09      	ldr	r3, [pc, #36]	; (800fa68 <HAL_RCC_OscConfig+0x8ec>)
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d1f0      	bne.n	800fa2e <HAL_RCC_OscConfig+0x8b2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800fa4c:	4b06      	ldr	r3, [pc, #24]	; (800fa68 <HAL_RCC_OscConfig+0x8ec>)
 800fa4e:	68da      	ldr	r2, [r3, #12]
 800fa50:	4905      	ldr	r1, [pc, #20]	; (800fa68 <HAL_RCC_OscConfig+0x8ec>)
 800fa52:	4b07      	ldr	r3, [pc, #28]	; (800fa70 <HAL_RCC_OscConfig+0x8f4>)
 800fa54:	4013      	ands	r3, r2
 800fa56:	60cb      	str	r3, [r1, #12]
 800fa58:	e001      	b.n	800fa5e <HAL_RCC_OscConfig+0x8e2>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800fa5a:	2301      	movs	r3, #1
 800fa5c:	e000      	b.n	800fa60 <HAL_RCC_OscConfig+0x8e4>
      }
    }
  }
  return HAL_OK;
 800fa5e:	2300      	movs	r3, #0
}
 800fa60:	4618      	mov	r0, r3
 800fa62:	3728      	adds	r7, #40	; 0x28
 800fa64:	46bd      	mov	sp, r7
 800fa66:	bd80      	pop	{r7, pc}
 800fa68:	40021000 	.word	0x40021000
 800fa6c:	019d800c 	.word	0x019d800c
 800fa70:	feeefffc 	.word	0xfeeefffc

0800fa74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b086      	sub	sp, #24
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
 800fa7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800fa7e:	2300      	movs	r3, #0
 800fa80:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d101      	bne.n	800fa8c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800fa88:	2301      	movs	r3, #1
 800fa8a:	e11d      	b.n	800fcc8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800fa8c:	4b90      	ldr	r3, [pc, #576]	; (800fcd0 <HAL_RCC_ClockConfig+0x25c>)
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	f003 030f 	and.w	r3, r3, #15
 800fa94:	683a      	ldr	r2, [r7, #0]
 800fa96:	429a      	cmp	r2, r3
 800fa98:	d910      	bls.n	800fabc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fa9a:	4b8d      	ldr	r3, [pc, #564]	; (800fcd0 <HAL_RCC_ClockConfig+0x25c>)
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	f023 020f 	bic.w	r2, r3, #15
 800faa2:	498b      	ldr	r1, [pc, #556]	; (800fcd0 <HAL_RCC_ClockConfig+0x25c>)
 800faa4:	683b      	ldr	r3, [r7, #0]
 800faa6:	4313      	orrs	r3, r2
 800faa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800faaa:	4b89      	ldr	r3, [pc, #548]	; (800fcd0 <HAL_RCC_ClockConfig+0x25c>)
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	f003 030f 	and.w	r3, r3, #15
 800fab2:	683a      	ldr	r2, [r7, #0]
 800fab4:	429a      	cmp	r2, r3
 800fab6:	d001      	beq.n	800fabc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800fab8:	2301      	movs	r3, #1
 800faba:	e105      	b.n	800fcc8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	f003 0302 	and.w	r3, r3, #2
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d010      	beq.n	800faea <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	689a      	ldr	r2, [r3, #8]
 800facc:	4b81      	ldr	r3, [pc, #516]	; (800fcd4 <HAL_RCC_ClockConfig+0x260>)
 800face:	689b      	ldr	r3, [r3, #8]
 800fad0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fad4:	429a      	cmp	r2, r3
 800fad6:	d908      	bls.n	800faea <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800fad8:	4b7e      	ldr	r3, [pc, #504]	; (800fcd4 <HAL_RCC_ClockConfig+0x260>)
 800fada:	689b      	ldr	r3, [r3, #8]
 800fadc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	689b      	ldr	r3, [r3, #8]
 800fae4:	497b      	ldr	r1, [pc, #492]	; (800fcd4 <HAL_RCC_ClockConfig+0x260>)
 800fae6:	4313      	orrs	r3, r2
 800fae8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	f003 0301 	and.w	r3, r3, #1
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d079      	beq.n	800fbea <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	685b      	ldr	r3, [r3, #4]
 800fafa:	2b03      	cmp	r3, #3
 800fafc:	d11e      	bne.n	800fb3c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800fafe:	4b75      	ldr	r3, [pc, #468]	; (800fcd4 <HAL_RCC_ClockConfig+0x260>)
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d101      	bne.n	800fb0e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800fb0a:	2301      	movs	r3, #1
 800fb0c:	e0dc      	b.n	800fcc8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800fb0e:	f000 fa3b 	bl	800ff88 <RCC_GetSysClockFreqFromPLLSource>
 800fb12:	4603      	mov	r3, r0
 800fb14:	4a70      	ldr	r2, [pc, #448]	; (800fcd8 <HAL_RCC_ClockConfig+0x264>)
 800fb16:	4293      	cmp	r3, r2
 800fb18:	d946      	bls.n	800fba8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800fb1a:	4b6e      	ldr	r3, [pc, #440]	; (800fcd4 <HAL_RCC_ClockConfig+0x260>)
 800fb1c:	689b      	ldr	r3, [r3, #8]
 800fb1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d140      	bne.n	800fba8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800fb26:	4b6b      	ldr	r3, [pc, #428]	; (800fcd4 <HAL_RCC_ClockConfig+0x260>)
 800fb28:	689b      	ldr	r3, [r3, #8]
 800fb2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fb2e:	4a69      	ldr	r2, [pc, #420]	; (800fcd4 <HAL_RCC_ClockConfig+0x260>)
 800fb30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb34:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800fb36:	2380      	movs	r3, #128	; 0x80
 800fb38:	617b      	str	r3, [r7, #20]
 800fb3a:	e035      	b.n	800fba8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	685b      	ldr	r3, [r3, #4]
 800fb40:	2b02      	cmp	r3, #2
 800fb42:	d107      	bne.n	800fb54 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800fb44:	4b63      	ldr	r3, [pc, #396]	; (800fcd4 <HAL_RCC_ClockConfig+0x260>)
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d115      	bne.n	800fb7c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800fb50:	2301      	movs	r3, #1
 800fb52:	e0b9      	b.n	800fcc8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	685b      	ldr	r3, [r3, #4]
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d107      	bne.n	800fb6c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800fb5c:	4b5d      	ldr	r3, [pc, #372]	; (800fcd4 <HAL_RCC_ClockConfig+0x260>)
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	f003 0302 	and.w	r3, r3, #2
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d109      	bne.n	800fb7c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800fb68:	2301      	movs	r3, #1
 800fb6a:	e0ad      	b.n	800fcc8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800fb6c:	4b59      	ldr	r3, [pc, #356]	; (800fcd4 <HAL_RCC_ClockConfig+0x260>)
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d101      	bne.n	800fb7c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800fb78:	2301      	movs	r3, #1
 800fb7a:	e0a5      	b.n	800fcc8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800fb7c:	f000 f8b4 	bl	800fce8 <HAL_RCC_GetSysClockFreq>
 800fb80:	4603      	mov	r3, r0
 800fb82:	4a55      	ldr	r2, [pc, #340]	; (800fcd8 <HAL_RCC_ClockConfig+0x264>)
 800fb84:	4293      	cmp	r3, r2
 800fb86:	d90f      	bls.n	800fba8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800fb88:	4b52      	ldr	r3, [pc, #328]	; (800fcd4 <HAL_RCC_ClockConfig+0x260>)
 800fb8a:	689b      	ldr	r3, [r3, #8]
 800fb8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d109      	bne.n	800fba8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800fb94:	4b4f      	ldr	r3, [pc, #316]	; (800fcd4 <HAL_RCC_ClockConfig+0x260>)
 800fb96:	689b      	ldr	r3, [r3, #8]
 800fb98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fb9c:	4a4d      	ldr	r2, [pc, #308]	; (800fcd4 <HAL_RCC_ClockConfig+0x260>)
 800fb9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fba2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800fba4:	2380      	movs	r3, #128	; 0x80
 800fba6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800fba8:	4b4a      	ldr	r3, [pc, #296]	; (800fcd4 <HAL_RCC_ClockConfig+0x260>)
 800fbaa:	689b      	ldr	r3, [r3, #8]
 800fbac:	f023 0203 	bic.w	r2, r3, #3
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	685b      	ldr	r3, [r3, #4]
 800fbb4:	4947      	ldr	r1, [pc, #284]	; (800fcd4 <HAL_RCC_ClockConfig+0x260>)
 800fbb6:	4313      	orrs	r3, r2
 800fbb8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fbba:	f7fe fb89 	bl	800e2d0 <HAL_GetTick>
 800fbbe:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fbc0:	e00a      	b.n	800fbd8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800fbc2:	f7fe fb85 	bl	800e2d0 <HAL_GetTick>
 800fbc6:	4602      	mov	r2, r0
 800fbc8:	693b      	ldr	r3, [r7, #16]
 800fbca:	1ad3      	subs	r3, r2, r3
 800fbcc:	f241 3288 	movw	r2, #5000	; 0x1388
 800fbd0:	4293      	cmp	r3, r2
 800fbd2:	d901      	bls.n	800fbd8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800fbd4:	2303      	movs	r3, #3
 800fbd6:	e077      	b.n	800fcc8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fbd8:	4b3e      	ldr	r3, [pc, #248]	; (800fcd4 <HAL_RCC_ClockConfig+0x260>)
 800fbda:	689b      	ldr	r3, [r3, #8]
 800fbdc:	f003 020c 	and.w	r2, r3, #12
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	685b      	ldr	r3, [r3, #4]
 800fbe4:	009b      	lsls	r3, r3, #2
 800fbe6:	429a      	cmp	r2, r3
 800fbe8:	d1eb      	bne.n	800fbc2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800fbea:	697b      	ldr	r3, [r7, #20]
 800fbec:	2b80      	cmp	r3, #128	; 0x80
 800fbee:	d105      	bne.n	800fbfc <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800fbf0:	4b38      	ldr	r3, [pc, #224]	; (800fcd4 <HAL_RCC_ClockConfig+0x260>)
 800fbf2:	689b      	ldr	r3, [r3, #8]
 800fbf4:	4a37      	ldr	r2, [pc, #220]	; (800fcd4 <HAL_RCC_ClockConfig+0x260>)
 800fbf6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fbfa:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	f003 0302 	and.w	r3, r3, #2
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d010      	beq.n	800fc2a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	689a      	ldr	r2, [r3, #8]
 800fc0c:	4b31      	ldr	r3, [pc, #196]	; (800fcd4 <HAL_RCC_ClockConfig+0x260>)
 800fc0e:	689b      	ldr	r3, [r3, #8]
 800fc10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fc14:	429a      	cmp	r2, r3
 800fc16:	d208      	bcs.n	800fc2a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800fc18:	4b2e      	ldr	r3, [pc, #184]	; (800fcd4 <HAL_RCC_ClockConfig+0x260>)
 800fc1a:	689b      	ldr	r3, [r3, #8]
 800fc1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	689b      	ldr	r3, [r3, #8]
 800fc24:	492b      	ldr	r1, [pc, #172]	; (800fcd4 <HAL_RCC_ClockConfig+0x260>)
 800fc26:	4313      	orrs	r3, r2
 800fc28:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800fc2a:	4b29      	ldr	r3, [pc, #164]	; (800fcd0 <HAL_RCC_ClockConfig+0x25c>)
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	f003 030f 	and.w	r3, r3, #15
 800fc32:	683a      	ldr	r2, [r7, #0]
 800fc34:	429a      	cmp	r2, r3
 800fc36:	d210      	bcs.n	800fc5a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fc38:	4b25      	ldr	r3, [pc, #148]	; (800fcd0 <HAL_RCC_ClockConfig+0x25c>)
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	f023 020f 	bic.w	r2, r3, #15
 800fc40:	4923      	ldr	r1, [pc, #140]	; (800fcd0 <HAL_RCC_ClockConfig+0x25c>)
 800fc42:	683b      	ldr	r3, [r7, #0]
 800fc44:	4313      	orrs	r3, r2
 800fc46:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800fc48:	4b21      	ldr	r3, [pc, #132]	; (800fcd0 <HAL_RCC_ClockConfig+0x25c>)
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	f003 030f 	and.w	r3, r3, #15
 800fc50:	683a      	ldr	r2, [r7, #0]
 800fc52:	429a      	cmp	r2, r3
 800fc54:	d001      	beq.n	800fc5a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800fc56:	2301      	movs	r3, #1
 800fc58:	e036      	b.n	800fcc8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	f003 0304 	and.w	r3, r3, #4
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d008      	beq.n	800fc78 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800fc66:	4b1b      	ldr	r3, [pc, #108]	; (800fcd4 <HAL_RCC_ClockConfig+0x260>)
 800fc68:	689b      	ldr	r3, [r3, #8]
 800fc6a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	68db      	ldr	r3, [r3, #12]
 800fc72:	4918      	ldr	r1, [pc, #96]	; (800fcd4 <HAL_RCC_ClockConfig+0x260>)
 800fc74:	4313      	orrs	r3, r2
 800fc76:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	f003 0308 	and.w	r3, r3, #8
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d009      	beq.n	800fc98 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800fc84:	4b13      	ldr	r3, [pc, #76]	; (800fcd4 <HAL_RCC_ClockConfig+0x260>)
 800fc86:	689b      	ldr	r3, [r3, #8]
 800fc88:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	691b      	ldr	r3, [r3, #16]
 800fc90:	00db      	lsls	r3, r3, #3
 800fc92:	4910      	ldr	r1, [pc, #64]	; (800fcd4 <HAL_RCC_ClockConfig+0x260>)
 800fc94:	4313      	orrs	r3, r2
 800fc96:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800fc98:	f000 f826 	bl	800fce8 <HAL_RCC_GetSysClockFreq>
 800fc9c:	4602      	mov	r2, r0
 800fc9e:	4b0d      	ldr	r3, [pc, #52]	; (800fcd4 <HAL_RCC_ClockConfig+0x260>)
 800fca0:	689b      	ldr	r3, [r3, #8]
 800fca2:	091b      	lsrs	r3, r3, #4
 800fca4:	f003 030f 	and.w	r3, r3, #15
 800fca8:	490c      	ldr	r1, [pc, #48]	; (800fcdc <HAL_RCC_ClockConfig+0x268>)
 800fcaa:	5ccb      	ldrb	r3, [r1, r3]
 800fcac:	f003 031f 	and.w	r3, r3, #31
 800fcb0:	fa22 f303 	lsr.w	r3, r2, r3
 800fcb4:	4a0a      	ldr	r2, [pc, #40]	; (800fce0 <HAL_RCC_ClockConfig+0x26c>)
 800fcb6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800fcb8:	4b0a      	ldr	r3, [pc, #40]	; (800fce4 <HAL_RCC_ClockConfig+0x270>)
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	f7fd fd41 	bl	800d744 <HAL_InitTick>
 800fcc2:	4603      	mov	r3, r0
 800fcc4:	73fb      	strb	r3, [r7, #15]

  return status;
 800fcc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800fcc8:	4618      	mov	r0, r3
 800fcca:	3718      	adds	r7, #24
 800fccc:	46bd      	mov	sp, r7
 800fcce:	bd80      	pop	{r7, pc}
 800fcd0:	40022000 	.word	0x40022000
 800fcd4:	40021000 	.word	0x40021000
 800fcd8:	04c4b400 	.word	0x04c4b400
 800fcdc:	080253f8 	.word	0x080253f8
 800fce0:	20000094 	.word	0x20000094
 800fce4:	20000098 	.word	0x20000098

0800fce8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800fce8:	b480      	push	{r7}
 800fcea:	b089      	sub	sp, #36	; 0x24
 800fcec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800fcee:	2300      	movs	r3, #0
 800fcf0:	61fb      	str	r3, [r7, #28]
 800fcf2:	2300      	movs	r3, #0
 800fcf4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800fcf6:	4b3e      	ldr	r3, [pc, #248]	; (800fdf0 <HAL_RCC_GetSysClockFreq+0x108>)
 800fcf8:	689b      	ldr	r3, [r3, #8]
 800fcfa:	f003 030c 	and.w	r3, r3, #12
 800fcfe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800fd00:	4b3b      	ldr	r3, [pc, #236]	; (800fdf0 <HAL_RCC_GetSysClockFreq+0x108>)
 800fd02:	68db      	ldr	r3, [r3, #12]
 800fd04:	f003 0303 	and.w	r3, r3, #3
 800fd08:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800fd0a:	693b      	ldr	r3, [r7, #16]
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d005      	beq.n	800fd1c <HAL_RCC_GetSysClockFreq+0x34>
 800fd10:	693b      	ldr	r3, [r7, #16]
 800fd12:	2b0c      	cmp	r3, #12
 800fd14:	d121      	bne.n	800fd5a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	2b01      	cmp	r3, #1
 800fd1a:	d11e      	bne.n	800fd5a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800fd1c:	4b34      	ldr	r3, [pc, #208]	; (800fdf0 <HAL_RCC_GetSysClockFreq+0x108>)
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	f003 0308 	and.w	r3, r3, #8
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d107      	bne.n	800fd38 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800fd28:	4b31      	ldr	r3, [pc, #196]	; (800fdf0 <HAL_RCC_GetSysClockFreq+0x108>)
 800fd2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fd2e:	0a1b      	lsrs	r3, r3, #8
 800fd30:	f003 030f 	and.w	r3, r3, #15
 800fd34:	61fb      	str	r3, [r7, #28]
 800fd36:	e005      	b.n	800fd44 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800fd38:	4b2d      	ldr	r3, [pc, #180]	; (800fdf0 <HAL_RCC_GetSysClockFreq+0x108>)
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	091b      	lsrs	r3, r3, #4
 800fd3e:	f003 030f 	and.w	r3, r3, #15
 800fd42:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800fd44:	4a2b      	ldr	r2, [pc, #172]	; (800fdf4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800fd46:	69fb      	ldr	r3, [r7, #28]
 800fd48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd4c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800fd4e:	693b      	ldr	r3, [r7, #16]
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d10d      	bne.n	800fd70 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800fd54:	69fb      	ldr	r3, [r7, #28]
 800fd56:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800fd58:	e00a      	b.n	800fd70 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800fd5a:	693b      	ldr	r3, [r7, #16]
 800fd5c:	2b04      	cmp	r3, #4
 800fd5e:	d102      	bne.n	800fd66 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800fd60:	4b25      	ldr	r3, [pc, #148]	; (800fdf8 <HAL_RCC_GetSysClockFreq+0x110>)
 800fd62:	61bb      	str	r3, [r7, #24]
 800fd64:	e004      	b.n	800fd70 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800fd66:	693b      	ldr	r3, [r7, #16]
 800fd68:	2b08      	cmp	r3, #8
 800fd6a:	d101      	bne.n	800fd70 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800fd6c:	4b23      	ldr	r3, [pc, #140]	; (800fdfc <HAL_RCC_GetSysClockFreq+0x114>)
 800fd6e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800fd70:	693b      	ldr	r3, [r7, #16]
 800fd72:	2b0c      	cmp	r3, #12
 800fd74:	d134      	bne.n	800fde0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800fd76:	4b1e      	ldr	r3, [pc, #120]	; (800fdf0 <HAL_RCC_GetSysClockFreq+0x108>)
 800fd78:	68db      	ldr	r3, [r3, #12]
 800fd7a:	f003 0303 	and.w	r3, r3, #3
 800fd7e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800fd80:	68bb      	ldr	r3, [r7, #8]
 800fd82:	2b02      	cmp	r3, #2
 800fd84:	d003      	beq.n	800fd8e <HAL_RCC_GetSysClockFreq+0xa6>
 800fd86:	68bb      	ldr	r3, [r7, #8]
 800fd88:	2b03      	cmp	r3, #3
 800fd8a:	d003      	beq.n	800fd94 <HAL_RCC_GetSysClockFreq+0xac>
 800fd8c:	e005      	b.n	800fd9a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800fd8e:	4b1a      	ldr	r3, [pc, #104]	; (800fdf8 <HAL_RCC_GetSysClockFreq+0x110>)
 800fd90:	617b      	str	r3, [r7, #20]
      break;
 800fd92:	e005      	b.n	800fda0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800fd94:	4b19      	ldr	r3, [pc, #100]	; (800fdfc <HAL_RCC_GetSysClockFreq+0x114>)
 800fd96:	617b      	str	r3, [r7, #20]
      break;
 800fd98:	e002      	b.n	800fda0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800fd9a:	69fb      	ldr	r3, [r7, #28]
 800fd9c:	617b      	str	r3, [r7, #20]
      break;
 800fd9e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800fda0:	4b13      	ldr	r3, [pc, #76]	; (800fdf0 <HAL_RCC_GetSysClockFreq+0x108>)
 800fda2:	68db      	ldr	r3, [r3, #12]
 800fda4:	091b      	lsrs	r3, r3, #4
 800fda6:	f003 030f 	and.w	r3, r3, #15
 800fdaa:	3301      	adds	r3, #1
 800fdac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800fdae:	4b10      	ldr	r3, [pc, #64]	; (800fdf0 <HAL_RCC_GetSysClockFreq+0x108>)
 800fdb0:	68db      	ldr	r3, [r3, #12]
 800fdb2:	0a1b      	lsrs	r3, r3, #8
 800fdb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fdb8:	697a      	ldr	r2, [r7, #20]
 800fdba:	fb03 f202 	mul.w	r2, r3, r2
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	fbb2 f3f3 	udiv	r3, r2, r3
 800fdc4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800fdc6:	4b0a      	ldr	r3, [pc, #40]	; (800fdf0 <HAL_RCC_GetSysClockFreq+0x108>)
 800fdc8:	68db      	ldr	r3, [r3, #12]
 800fdca:	0e5b      	lsrs	r3, r3, #25
 800fdcc:	f003 0303 	and.w	r3, r3, #3
 800fdd0:	3301      	adds	r3, #1
 800fdd2:	005b      	lsls	r3, r3, #1
 800fdd4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800fdd6:	697a      	ldr	r2, [r7, #20]
 800fdd8:	683b      	ldr	r3, [r7, #0]
 800fdda:	fbb2 f3f3 	udiv	r3, r2, r3
 800fdde:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800fde0:	69bb      	ldr	r3, [r7, #24]
}
 800fde2:	4618      	mov	r0, r3
 800fde4:	3724      	adds	r7, #36	; 0x24
 800fde6:	46bd      	mov	sp, r7
 800fde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdec:	4770      	bx	lr
 800fdee:	bf00      	nop
 800fdf0:	40021000 	.word	0x40021000
 800fdf4:	08025410 	.word	0x08025410
 800fdf8:	00f42400 	.word	0x00f42400
 800fdfc:	007a1200 	.word	0x007a1200

0800fe00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800fe00:	b480      	push	{r7}
 800fe02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800fe04:	4b03      	ldr	r3, [pc, #12]	; (800fe14 <HAL_RCC_GetHCLKFreq+0x14>)
 800fe06:	681b      	ldr	r3, [r3, #0]
}
 800fe08:	4618      	mov	r0, r3
 800fe0a:	46bd      	mov	sp, r7
 800fe0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe10:	4770      	bx	lr
 800fe12:	bf00      	nop
 800fe14:	20000094 	.word	0x20000094

0800fe18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800fe18:	b580      	push	{r7, lr}
 800fe1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800fe1c:	f7ff fff0 	bl	800fe00 <HAL_RCC_GetHCLKFreq>
 800fe20:	4602      	mov	r2, r0
 800fe22:	4b06      	ldr	r3, [pc, #24]	; (800fe3c <HAL_RCC_GetPCLK1Freq+0x24>)
 800fe24:	689b      	ldr	r3, [r3, #8]
 800fe26:	0a1b      	lsrs	r3, r3, #8
 800fe28:	f003 0307 	and.w	r3, r3, #7
 800fe2c:	4904      	ldr	r1, [pc, #16]	; (800fe40 <HAL_RCC_GetPCLK1Freq+0x28>)
 800fe2e:	5ccb      	ldrb	r3, [r1, r3]
 800fe30:	f003 031f 	and.w	r3, r3, #31
 800fe34:	fa22 f303 	lsr.w	r3, r2, r3
}
 800fe38:	4618      	mov	r0, r3
 800fe3a:	bd80      	pop	{r7, pc}
 800fe3c:	40021000 	.word	0x40021000
 800fe40:	08025408 	.word	0x08025408

0800fe44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800fe44:	b580      	push	{r7, lr}
 800fe46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800fe48:	f7ff ffda 	bl	800fe00 <HAL_RCC_GetHCLKFreq>
 800fe4c:	4602      	mov	r2, r0
 800fe4e:	4b06      	ldr	r3, [pc, #24]	; (800fe68 <HAL_RCC_GetPCLK2Freq+0x24>)
 800fe50:	689b      	ldr	r3, [r3, #8]
 800fe52:	0adb      	lsrs	r3, r3, #11
 800fe54:	f003 0307 	and.w	r3, r3, #7
 800fe58:	4904      	ldr	r1, [pc, #16]	; (800fe6c <HAL_RCC_GetPCLK2Freq+0x28>)
 800fe5a:	5ccb      	ldrb	r3, [r1, r3]
 800fe5c:	f003 031f 	and.w	r3, r3, #31
 800fe60:	fa22 f303 	lsr.w	r3, r2, r3
}
 800fe64:	4618      	mov	r0, r3
 800fe66:	bd80      	pop	{r7, pc}
 800fe68:	40021000 	.word	0x40021000
 800fe6c:	08025408 	.word	0x08025408

0800fe70 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800fe70:	b480      	push	{r7}
 800fe72:	b083      	sub	sp, #12
 800fe74:	af00      	add	r7, sp, #0
 800fe76:	6078      	str	r0, [r7, #4]
 800fe78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	220f      	movs	r2, #15
 800fe7e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800fe80:	4b12      	ldr	r3, [pc, #72]	; (800fecc <HAL_RCC_GetClockConfig+0x5c>)
 800fe82:	689b      	ldr	r3, [r3, #8]
 800fe84:	f003 0203 	and.w	r2, r3, #3
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800fe8c:	4b0f      	ldr	r3, [pc, #60]	; (800fecc <HAL_RCC_GetClockConfig+0x5c>)
 800fe8e:	689b      	ldr	r3, [r3, #8]
 800fe90:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800fe98:	4b0c      	ldr	r3, [pc, #48]	; (800fecc <HAL_RCC_GetClockConfig+0x5c>)
 800fe9a:	689b      	ldr	r3, [r3, #8]
 800fe9c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800fea4:	4b09      	ldr	r3, [pc, #36]	; (800fecc <HAL_RCC_GetClockConfig+0x5c>)
 800fea6:	689b      	ldr	r3, [r3, #8]
 800fea8:	08db      	lsrs	r3, r3, #3
 800feaa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800feb2:	4b07      	ldr	r3, [pc, #28]	; (800fed0 <HAL_RCC_GetClockConfig+0x60>)
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	f003 020f 	and.w	r2, r3, #15
 800feba:	683b      	ldr	r3, [r7, #0]
 800febc:	601a      	str	r2, [r3, #0]
}
 800febe:	bf00      	nop
 800fec0:	370c      	adds	r7, #12
 800fec2:	46bd      	mov	sp, r7
 800fec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec8:	4770      	bx	lr
 800feca:	bf00      	nop
 800fecc:	40021000 	.word	0x40021000
 800fed0:	40022000 	.word	0x40022000

0800fed4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800fed4:	b580      	push	{r7, lr}
 800fed6:	b086      	sub	sp, #24
 800fed8:	af00      	add	r7, sp, #0
 800feda:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800fedc:	2300      	movs	r3, #0
 800fede:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800fee0:	4b27      	ldr	r3, [pc, #156]	; (800ff80 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800fee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fee4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d003      	beq.n	800fef4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800feec:	f7ff f882 	bl	800eff4 <HAL_PWREx_GetVoltageRange>
 800fef0:	6178      	str	r0, [r7, #20]
 800fef2:	e014      	b.n	800ff1e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800fef4:	4b22      	ldr	r3, [pc, #136]	; (800ff80 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800fef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fef8:	4a21      	ldr	r2, [pc, #132]	; (800ff80 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800fefa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fefe:	6593      	str	r3, [r2, #88]	; 0x58
 800ff00:	4b1f      	ldr	r3, [pc, #124]	; (800ff80 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800ff02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ff08:	60fb      	str	r3, [r7, #12]
 800ff0a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800ff0c:	f7ff f872 	bl	800eff4 <HAL_PWREx_GetVoltageRange>
 800ff10:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800ff12:	4b1b      	ldr	r3, [pc, #108]	; (800ff80 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800ff14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff16:	4a1a      	ldr	r2, [pc, #104]	; (800ff80 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800ff18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ff1c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800ff1e:	697b      	ldr	r3, [r7, #20]
 800ff20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ff24:	d10b      	bne.n	800ff3e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	2b80      	cmp	r3, #128	; 0x80
 800ff2a:	d913      	bls.n	800ff54 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	2ba0      	cmp	r3, #160	; 0xa0
 800ff30:	d902      	bls.n	800ff38 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800ff32:	2302      	movs	r3, #2
 800ff34:	613b      	str	r3, [r7, #16]
 800ff36:	e00d      	b.n	800ff54 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800ff38:	2301      	movs	r3, #1
 800ff3a:	613b      	str	r3, [r7, #16]
 800ff3c:	e00a      	b.n	800ff54 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	2b7f      	cmp	r3, #127	; 0x7f
 800ff42:	d902      	bls.n	800ff4a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800ff44:	2302      	movs	r3, #2
 800ff46:	613b      	str	r3, [r7, #16]
 800ff48:	e004      	b.n	800ff54 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	2b70      	cmp	r3, #112	; 0x70
 800ff4e:	d101      	bne.n	800ff54 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800ff50:	2301      	movs	r3, #1
 800ff52:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800ff54:	4b0b      	ldr	r3, [pc, #44]	; (800ff84 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	f023 020f 	bic.w	r2, r3, #15
 800ff5c:	4909      	ldr	r1, [pc, #36]	; (800ff84 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800ff5e:	693b      	ldr	r3, [r7, #16]
 800ff60:	4313      	orrs	r3, r2
 800ff62:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800ff64:	4b07      	ldr	r3, [pc, #28]	; (800ff84 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	f003 030f 	and.w	r3, r3, #15
 800ff6c:	693a      	ldr	r2, [r7, #16]
 800ff6e:	429a      	cmp	r2, r3
 800ff70:	d001      	beq.n	800ff76 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800ff72:	2301      	movs	r3, #1
 800ff74:	e000      	b.n	800ff78 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800ff76:	2300      	movs	r3, #0
}
 800ff78:	4618      	mov	r0, r3
 800ff7a:	3718      	adds	r7, #24
 800ff7c:	46bd      	mov	sp, r7
 800ff7e:	bd80      	pop	{r7, pc}
 800ff80:	40021000 	.word	0x40021000
 800ff84:	40022000 	.word	0x40022000

0800ff88 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800ff88:	b480      	push	{r7}
 800ff8a:	b087      	sub	sp, #28
 800ff8c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ff8e:	4b2d      	ldr	r3, [pc, #180]	; (8010044 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800ff90:	68db      	ldr	r3, [r3, #12]
 800ff92:	f003 0303 	and.w	r3, r3, #3
 800ff96:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	2b03      	cmp	r3, #3
 800ff9c:	d00b      	beq.n	800ffb6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	2b03      	cmp	r3, #3
 800ffa2:	d825      	bhi.n	800fff0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	2b01      	cmp	r3, #1
 800ffa8:	d008      	beq.n	800ffbc <RCC_GetSysClockFreqFromPLLSource+0x34>
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	2b02      	cmp	r3, #2
 800ffae:	d11f      	bne.n	800fff0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800ffb0:	4b25      	ldr	r3, [pc, #148]	; (8010048 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800ffb2:	613b      	str	r3, [r7, #16]
    break;
 800ffb4:	e01f      	b.n	800fff6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800ffb6:	4b25      	ldr	r3, [pc, #148]	; (801004c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800ffb8:	613b      	str	r3, [r7, #16]
    break;
 800ffba:	e01c      	b.n	800fff6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800ffbc:	4b21      	ldr	r3, [pc, #132]	; (8010044 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	f003 0308 	and.w	r3, r3, #8
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d107      	bne.n	800ffd8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800ffc8:	4b1e      	ldr	r3, [pc, #120]	; (8010044 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800ffca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ffce:	0a1b      	lsrs	r3, r3, #8
 800ffd0:	f003 030f 	and.w	r3, r3, #15
 800ffd4:	617b      	str	r3, [r7, #20]
 800ffd6:	e005      	b.n	800ffe4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800ffd8:	4b1a      	ldr	r3, [pc, #104]	; (8010044 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	091b      	lsrs	r3, r3, #4
 800ffde:	f003 030f 	and.w	r3, r3, #15
 800ffe2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800ffe4:	4a1a      	ldr	r2, [pc, #104]	; (8010050 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800ffe6:	697b      	ldr	r3, [r7, #20]
 800ffe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ffec:	613b      	str	r3, [r7, #16]
    break;
 800ffee:	e002      	b.n	800fff6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800fff0:	2300      	movs	r3, #0
 800fff2:	613b      	str	r3, [r7, #16]
    break;
 800fff4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800fff6:	4b13      	ldr	r3, [pc, #76]	; (8010044 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800fff8:	68db      	ldr	r3, [r3, #12]
 800fffa:	091b      	lsrs	r3, r3, #4
 800fffc:	f003 030f 	and.w	r3, r3, #15
 8010000:	3301      	adds	r3, #1
 8010002:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8010004:	4b0f      	ldr	r3, [pc, #60]	; (8010044 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8010006:	68db      	ldr	r3, [r3, #12]
 8010008:	0a1b      	lsrs	r3, r3, #8
 801000a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801000e:	693a      	ldr	r2, [r7, #16]
 8010010:	fb03 f202 	mul.w	r2, r3, r2
 8010014:	68bb      	ldr	r3, [r7, #8]
 8010016:	fbb2 f3f3 	udiv	r3, r2, r3
 801001a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 801001c:	4b09      	ldr	r3, [pc, #36]	; (8010044 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 801001e:	68db      	ldr	r3, [r3, #12]
 8010020:	0e5b      	lsrs	r3, r3, #25
 8010022:	f003 0303 	and.w	r3, r3, #3
 8010026:	3301      	adds	r3, #1
 8010028:	005b      	lsls	r3, r3, #1
 801002a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 801002c:	693a      	ldr	r2, [r7, #16]
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	fbb2 f3f3 	udiv	r3, r2, r3
 8010034:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8010036:	683b      	ldr	r3, [r7, #0]
}
 8010038:	4618      	mov	r0, r3
 801003a:	371c      	adds	r7, #28
 801003c:	46bd      	mov	sp, r7
 801003e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010042:	4770      	bx	lr
 8010044:	40021000 	.word	0x40021000
 8010048:	00f42400 	.word	0x00f42400
 801004c:	007a1200 	.word	0x007a1200
 8010050:	08025410 	.word	0x08025410

08010054 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8010054:	b580      	push	{r7, lr}
 8010056:	b086      	sub	sp, #24
 8010058:	af00      	add	r7, sp, #0
 801005a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801005c:	2300      	movs	r3, #0
 801005e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8010060:	2300      	movs	r3, #0
 8010062:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801006c:	2b00      	cmp	r3, #0
 801006e:	d040      	beq.n	80100f2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010074:	2b80      	cmp	r3, #128	; 0x80
 8010076:	d02a      	beq.n	80100ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8010078:	2b80      	cmp	r3, #128	; 0x80
 801007a:	d825      	bhi.n	80100c8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 801007c:	2b60      	cmp	r3, #96	; 0x60
 801007e:	d026      	beq.n	80100ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8010080:	2b60      	cmp	r3, #96	; 0x60
 8010082:	d821      	bhi.n	80100c8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8010084:	2b40      	cmp	r3, #64	; 0x40
 8010086:	d006      	beq.n	8010096 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8010088:	2b40      	cmp	r3, #64	; 0x40
 801008a:	d81d      	bhi.n	80100c8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 801008c:	2b00      	cmp	r3, #0
 801008e:	d009      	beq.n	80100a4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8010090:	2b20      	cmp	r3, #32
 8010092:	d010      	beq.n	80100b6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8010094:	e018      	b.n	80100c8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8010096:	4b89      	ldr	r3, [pc, #548]	; (80102bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8010098:	68db      	ldr	r3, [r3, #12]
 801009a:	4a88      	ldr	r2, [pc, #544]	; (80102bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 801009c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80100a0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80100a2:	e015      	b.n	80100d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	3304      	adds	r3, #4
 80100a8:	2100      	movs	r1, #0
 80100aa:	4618      	mov	r0, r3
 80100ac:	f000 fb3e 	bl	801072c <RCCEx_PLLSAI1_Config>
 80100b0:	4603      	mov	r3, r0
 80100b2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80100b4:	e00c      	b.n	80100d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	3320      	adds	r3, #32
 80100ba:	2100      	movs	r1, #0
 80100bc:	4618      	mov	r0, r3
 80100be:	f000 fc29 	bl	8010914 <RCCEx_PLLSAI2_Config>
 80100c2:	4603      	mov	r3, r0
 80100c4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80100c6:	e003      	b.n	80100d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80100c8:	2301      	movs	r3, #1
 80100ca:	74fb      	strb	r3, [r7, #19]
      break;
 80100cc:	e000      	b.n	80100d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80100ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80100d0:	7cfb      	ldrb	r3, [r7, #19]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d10b      	bne.n	80100ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80100d6:	4b79      	ldr	r3, [pc, #484]	; (80102bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80100d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80100dc:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80100e4:	4975      	ldr	r1, [pc, #468]	; (80102bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80100e6:	4313      	orrs	r3, r2
 80100e8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80100ec:	e001      	b.n	80100f2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80100ee:	7cfb      	ldrb	r3, [r7, #19]
 80100f0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d047      	beq.n	801018e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010102:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010106:	d030      	beq.n	801016a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8010108:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801010c:	d82a      	bhi.n	8010164 <HAL_RCCEx_PeriphCLKConfig+0x110>
 801010e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010112:	d02a      	beq.n	801016a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8010114:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010118:	d824      	bhi.n	8010164 <HAL_RCCEx_PeriphCLKConfig+0x110>
 801011a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801011e:	d008      	beq.n	8010132 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8010120:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010124:	d81e      	bhi.n	8010164 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8010126:	2b00      	cmp	r3, #0
 8010128:	d00a      	beq.n	8010140 <HAL_RCCEx_PeriphCLKConfig+0xec>
 801012a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801012e:	d010      	beq.n	8010152 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8010130:	e018      	b.n	8010164 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8010132:	4b62      	ldr	r3, [pc, #392]	; (80102bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8010134:	68db      	ldr	r3, [r3, #12]
 8010136:	4a61      	ldr	r2, [pc, #388]	; (80102bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8010138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801013c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 801013e:	e015      	b.n	801016c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	3304      	adds	r3, #4
 8010144:	2100      	movs	r1, #0
 8010146:	4618      	mov	r0, r3
 8010148:	f000 faf0 	bl	801072c <RCCEx_PLLSAI1_Config>
 801014c:	4603      	mov	r3, r0
 801014e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8010150:	e00c      	b.n	801016c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	3320      	adds	r3, #32
 8010156:	2100      	movs	r1, #0
 8010158:	4618      	mov	r0, r3
 801015a:	f000 fbdb 	bl	8010914 <RCCEx_PLLSAI2_Config>
 801015e:	4603      	mov	r3, r0
 8010160:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8010162:	e003      	b.n	801016c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010164:	2301      	movs	r3, #1
 8010166:	74fb      	strb	r3, [r7, #19]
      break;
 8010168:	e000      	b.n	801016c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 801016a:	bf00      	nop
    }

    if(ret == HAL_OK)
 801016c:	7cfb      	ldrb	r3, [r7, #19]
 801016e:	2b00      	cmp	r3, #0
 8010170:	d10b      	bne.n	801018a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8010172:	4b52      	ldr	r3, [pc, #328]	; (80102bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8010174:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8010178:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010180:	494e      	ldr	r1, [pc, #312]	; (80102bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8010182:	4313      	orrs	r3, r2
 8010184:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8010188:	e001      	b.n	801018e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801018a:	7cfb      	ldrb	r3, [r7, #19]
 801018c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010196:	2b00      	cmp	r3, #0
 8010198:	f000 809f 	beq.w	80102da <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 801019c:	2300      	movs	r3, #0
 801019e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80101a0:	4b46      	ldr	r3, [pc, #280]	; (80102bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80101a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80101a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d101      	bne.n	80101b0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80101ac:	2301      	movs	r3, #1
 80101ae:	e000      	b.n	80101b2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80101b0:	2300      	movs	r3, #0
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d00d      	beq.n	80101d2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80101b6:	4b41      	ldr	r3, [pc, #260]	; (80102bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80101b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80101ba:	4a40      	ldr	r2, [pc, #256]	; (80102bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80101bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80101c0:	6593      	str	r3, [r2, #88]	; 0x58
 80101c2:	4b3e      	ldr	r3, [pc, #248]	; (80102bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80101c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80101c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80101ca:	60bb      	str	r3, [r7, #8]
 80101cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80101ce:	2301      	movs	r3, #1
 80101d0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80101d2:	4b3b      	ldr	r3, [pc, #236]	; (80102c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	4a3a      	ldr	r2, [pc, #232]	; (80102c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80101d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80101dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80101de:	f7fe f877 	bl	800e2d0 <HAL_GetTick>
 80101e2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80101e4:	e009      	b.n	80101fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80101e6:	f7fe f873 	bl	800e2d0 <HAL_GetTick>
 80101ea:	4602      	mov	r2, r0
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	1ad3      	subs	r3, r2, r3
 80101f0:	2b02      	cmp	r3, #2
 80101f2:	d902      	bls.n	80101fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80101f4:	2303      	movs	r3, #3
 80101f6:	74fb      	strb	r3, [r7, #19]
        break;
 80101f8:	e005      	b.n	8010206 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80101fa:	4b31      	ldr	r3, [pc, #196]	; (80102c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010202:	2b00      	cmp	r3, #0
 8010204:	d0ef      	beq.n	80101e6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8010206:	7cfb      	ldrb	r3, [r7, #19]
 8010208:	2b00      	cmp	r3, #0
 801020a:	d15b      	bne.n	80102c4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 801020c:	4b2b      	ldr	r3, [pc, #172]	; (80102bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 801020e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010212:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010216:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8010218:	697b      	ldr	r3, [r7, #20]
 801021a:	2b00      	cmp	r3, #0
 801021c:	d01f      	beq.n	801025e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010224:	697a      	ldr	r2, [r7, #20]
 8010226:	429a      	cmp	r2, r3
 8010228:	d019      	beq.n	801025e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 801022a:	4b24      	ldr	r3, [pc, #144]	; (80102bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 801022c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010230:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010234:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8010236:	4b21      	ldr	r3, [pc, #132]	; (80102bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8010238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801023c:	4a1f      	ldr	r2, [pc, #124]	; (80102bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 801023e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010242:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8010246:	4b1d      	ldr	r3, [pc, #116]	; (80102bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8010248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801024c:	4a1b      	ldr	r2, [pc, #108]	; (80102bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 801024e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010252:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8010256:	4a19      	ldr	r2, [pc, #100]	; (80102bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8010258:	697b      	ldr	r3, [r7, #20]
 801025a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 801025e:	697b      	ldr	r3, [r7, #20]
 8010260:	f003 0301 	and.w	r3, r3, #1
 8010264:	2b00      	cmp	r3, #0
 8010266:	d016      	beq.n	8010296 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010268:	f7fe f832 	bl	800e2d0 <HAL_GetTick>
 801026c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801026e:	e00b      	b.n	8010288 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010270:	f7fe f82e 	bl	800e2d0 <HAL_GetTick>
 8010274:	4602      	mov	r2, r0
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	1ad3      	subs	r3, r2, r3
 801027a:	f241 3288 	movw	r2, #5000	; 0x1388
 801027e:	4293      	cmp	r3, r2
 8010280:	d902      	bls.n	8010288 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8010282:	2303      	movs	r3, #3
 8010284:	74fb      	strb	r3, [r7, #19]
            break;
 8010286:	e006      	b.n	8010296 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8010288:	4b0c      	ldr	r3, [pc, #48]	; (80102bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 801028a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801028e:	f003 0302 	and.w	r3, r3, #2
 8010292:	2b00      	cmp	r3, #0
 8010294:	d0ec      	beq.n	8010270 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8010296:	7cfb      	ldrb	r3, [r7, #19]
 8010298:	2b00      	cmp	r3, #0
 801029a:	d10c      	bne.n	80102b6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801029c:	4b07      	ldr	r3, [pc, #28]	; (80102bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 801029e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80102a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80102ac:	4903      	ldr	r1, [pc, #12]	; (80102bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80102ae:	4313      	orrs	r3, r2
 80102b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80102b4:	e008      	b.n	80102c8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80102b6:	7cfb      	ldrb	r3, [r7, #19]
 80102b8:	74bb      	strb	r3, [r7, #18]
 80102ba:	e005      	b.n	80102c8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80102bc:	40021000 	.word	0x40021000
 80102c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80102c4:	7cfb      	ldrb	r3, [r7, #19]
 80102c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80102c8:	7c7b      	ldrb	r3, [r7, #17]
 80102ca:	2b01      	cmp	r3, #1
 80102cc:	d105      	bne.n	80102da <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80102ce:	4ba0      	ldr	r3, [pc, #640]	; (8010550 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80102d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80102d2:	4a9f      	ldr	r2, [pc, #636]	; (8010550 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80102d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80102d8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	f003 0301 	and.w	r3, r3, #1
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d00a      	beq.n	80102fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80102e6:	4b9a      	ldr	r3, [pc, #616]	; (8010550 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80102e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80102ec:	f023 0203 	bic.w	r2, r3, #3
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80102f4:	4996      	ldr	r1, [pc, #600]	; (8010550 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80102f6:	4313      	orrs	r3, r2
 80102f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	f003 0302 	and.w	r3, r3, #2
 8010304:	2b00      	cmp	r3, #0
 8010306:	d00a      	beq.n	801031e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8010308:	4b91      	ldr	r3, [pc, #580]	; (8010550 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 801030a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801030e:	f023 020c 	bic.w	r2, r3, #12
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010316:	498e      	ldr	r1, [pc, #568]	; (8010550 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8010318:	4313      	orrs	r3, r2
 801031a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	f003 0304 	and.w	r3, r3, #4
 8010326:	2b00      	cmp	r3, #0
 8010328:	d00a      	beq.n	8010340 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 801032a:	4b89      	ldr	r3, [pc, #548]	; (8010550 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 801032c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010330:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010338:	4985      	ldr	r1, [pc, #532]	; (8010550 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 801033a:	4313      	orrs	r3, r2
 801033c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	f003 0308 	and.w	r3, r3, #8
 8010348:	2b00      	cmp	r3, #0
 801034a:	d00a      	beq.n	8010362 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 801034c:	4b80      	ldr	r3, [pc, #512]	; (8010550 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 801034e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010352:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801035a:	497d      	ldr	r1, [pc, #500]	; (8010550 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 801035c:	4313      	orrs	r3, r2
 801035e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	f003 0310 	and.w	r3, r3, #16
 801036a:	2b00      	cmp	r3, #0
 801036c:	d00a      	beq.n	8010384 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 801036e:	4b78      	ldr	r3, [pc, #480]	; (8010550 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8010370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010374:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801037c:	4974      	ldr	r1, [pc, #464]	; (8010550 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 801037e:	4313      	orrs	r3, r2
 8010380:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	f003 0320 	and.w	r3, r3, #32
 801038c:	2b00      	cmp	r3, #0
 801038e:	d00a      	beq.n	80103a6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8010390:	4b6f      	ldr	r3, [pc, #444]	; (8010550 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8010392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010396:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801039e:	496c      	ldr	r1, [pc, #432]	; (8010550 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80103a0:	4313      	orrs	r3, r2
 80103a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d00a      	beq.n	80103c8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80103b2:	4b67      	ldr	r3, [pc, #412]	; (8010550 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80103b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80103b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80103c0:	4963      	ldr	r1, [pc, #396]	; (8010550 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80103c2:	4313      	orrs	r3, r2
 80103c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d00a      	beq.n	80103ea <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80103d4:	4b5e      	ldr	r3, [pc, #376]	; (8010550 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80103d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80103da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80103e2:	495b      	ldr	r1, [pc, #364]	; (8010550 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80103e4:	4313      	orrs	r3, r2
 80103e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d00a      	beq.n	801040c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80103f6:	4b56      	ldr	r3, [pc, #344]	; (8010550 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80103f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80103fc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010404:	4952      	ldr	r1, [pc, #328]	; (8010550 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8010406:	4313      	orrs	r3, r2
 8010408:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010414:	2b00      	cmp	r3, #0
 8010416:	d00a      	beq.n	801042e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8010418:	4b4d      	ldr	r3, [pc, #308]	; (8010550 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 801041a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801041e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010426:	494a      	ldr	r1, [pc, #296]	; (8010550 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8010428:	4313      	orrs	r3, r2
 801042a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010436:	2b00      	cmp	r3, #0
 8010438:	d00a      	beq.n	8010450 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801043a:	4b45      	ldr	r3, [pc, #276]	; (8010550 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 801043c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010440:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010448:	4941      	ldr	r1, [pc, #260]	; (8010550 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 801044a:	4313      	orrs	r3, r2
 801044c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010458:	2b00      	cmp	r3, #0
 801045a:	d00a      	beq.n	8010472 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801045c:	4b3c      	ldr	r3, [pc, #240]	; (8010550 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 801045e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8010462:	f023 0203 	bic.w	r2, r3, #3
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801046a:	4939      	ldr	r1, [pc, #228]	; (8010550 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 801046c:	4313      	orrs	r3, r2
 801046e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801047a:	2b00      	cmp	r3, #0
 801047c:	d028      	beq.n	80104d0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801047e:	4b34      	ldr	r3, [pc, #208]	; (8010550 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8010480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010484:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801048c:	4930      	ldr	r1, [pc, #192]	; (8010550 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 801048e:	4313      	orrs	r3, r2
 8010490:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010498:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801049c:	d106      	bne.n	80104ac <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801049e:	4b2c      	ldr	r3, [pc, #176]	; (8010550 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80104a0:	68db      	ldr	r3, [r3, #12]
 80104a2:	4a2b      	ldr	r2, [pc, #172]	; (8010550 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80104a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80104a8:	60d3      	str	r3, [r2, #12]
 80104aa:	e011      	b.n	80104d0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80104b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80104b4:	d10c      	bne.n	80104d0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	3304      	adds	r3, #4
 80104ba:	2101      	movs	r1, #1
 80104bc:	4618      	mov	r0, r3
 80104be:	f000 f935 	bl	801072c <RCCEx_PLLSAI1_Config>
 80104c2:	4603      	mov	r3, r0
 80104c4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80104c6:	7cfb      	ldrb	r3, [r7, #19]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d001      	beq.n	80104d0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80104cc:	7cfb      	ldrb	r3, [r7, #19]
 80104ce:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d04d      	beq.n	8010578 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80104e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80104e4:	d108      	bne.n	80104f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80104e6:	4b1a      	ldr	r3, [pc, #104]	; (8010550 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80104e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80104ec:	4a18      	ldr	r2, [pc, #96]	; (8010550 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80104ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80104f2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80104f6:	e012      	b.n	801051e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80104f8:	4b15      	ldr	r3, [pc, #84]	; (8010550 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80104fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80104fe:	4a14      	ldr	r2, [pc, #80]	; (8010550 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8010500:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010504:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8010508:	4b11      	ldr	r3, [pc, #68]	; (8010550 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 801050a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801050e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010516:	490e      	ldr	r1, [pc, #56]	; (8010550 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8010518:	4313      	orrs	r3, r2
 801051a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010522:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010526:	d106      	bne.n	8010536 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8010528:	4b09      	ldr	r3, [pc, #36]	; (8010550 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 801052a:	68db      	ldr	r3, [r3, #12]
 801052c:	4a08      	ldr	r2, [pc, #32]	; (8010550 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 801052e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010532:	60d3      	str	r3, [r2, #12]
 8010534:	e020      	b.n	8010578 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801053a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801053e:	d109      	bne.n	8010554 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8010540:	4b03      	ldr	r3, [pc, #12]	; (8010550 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8010542:	68db      	ldr	r3, [r3, #12]
 8010544:	4a02      	ldr	r2, [pc, #8]	; (8010550 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8010546:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801054a:	60d3      	str	r3, [r2, #12]
 801054c:	e014      	b.n	8010578 <HAL_RCCEx_PeriphCLKConfig+0x524>
 801054e:	bf00      	nop
 8010550:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010558:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801055c:	d10c      	bne.n	8010578 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	3304      	adds	r3, #4
 8010562:	2101      	movs	r1, #1
 8010564:	4618      	mov	r0, r3
 8010566:	f000 f8e1 	bl	801072c <RCCEx_PLLSAI1_Config>
 801056a:	4603      	mov	r3, r0
 801056c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 801056e:	7cfb      	ldrb	r3, [r7, #19]
 8010570:	2b00      	cmp	r3, #0
 8010572:	d001      	beq.n	8010578 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8010574:	7cfb      	ldrb	r3, [r7, #19]
 8010576:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010580:	2b00      	cmp	r3, #0
 8010582:	d028      	beq.n	80105d6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8010584:	4b68      	ldr	r3, [pc, #416]	; (8010728 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8010586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801058a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010592:	4965      	ldr	r1, [pc, #404]	; (8010728 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8010594:	4313      	orrs	r3, r2
 8010596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801059e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80105a2:	d106      	bne.n	80105b2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80105a4:	4b60      	ldr	r3, [pc, #384]	; (8010728 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80105a6:	68db      	ldr	r3, [r3, #12]
 80105a8:	4a5f      	ldr	r2, [pc, #380]	; (8010728 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80105aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80105ae:	60d3      	str	r3, [r2, #12]
 80105b0:	e011      	b.n	80105d6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80105b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80105ba:	d10c      	bne.n	80105d6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	3304      	adds	r3, #4
 80105c0:	2101      	movs	r1, #1
 80105c2:	4618      	mov	r0, r3
 80105c4:	f000 f8b2 	bl	801072c <RCCEx_PLLSAI1_Config>
 80105c8:	4603      	mov	r3, r0
 80105ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80105cc:	7cfb      	ldrb	r3, [r7, #19]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d001      	beq.n	80105d6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80105d2:	7cfb      	ldrb	r3, [r7, #19]
 80105d4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d01e      	beq.n	8010620 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80105e2:	4b51      	ldr	r3, [pc, #324]	; (8010728 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80105e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80105e8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80105f2:	494d      	ldr	r1, [pc, #308]	; (8010728 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80105f4:	4313      	orrs	r3, r2
 80105f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010600:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010604:	d10c      	bne.n	8010620 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	3304      	adds	r3, #4
 801060a:	2102      	movs	r1, #2
 801060c:	4618      	mov	r0, r3
 801060e:	f000 f88d 	bl	801072c <RCCEx_PLLSAI1_Config>
 8010612:	4603      	mov	r3, r0
 8010614:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8010616:	7cfb      	ldrb	r3, [r7, #19]
 8010618:	2b00      	cmp	r3, #0
 801061a:	d001      	beq.n	8010620 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 801061c:	7cfb      	ldrb	r3, [r7, #19]
 801061e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010628:	2b00      	cmp	r3, #0
 801062a:	d00b      	beq.n	8010644 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801062c:	4b3e      	ldr	r3, [pc, #248]	; (8010728 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 801062e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8010632:	f023 0204 	bic.w	r2, r3, #4
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801063c:	493a      	ldr	r1, [pc, #232]	; (8010728 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 801063e:	4313      	orrs	r3, r2
 8010640:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801064c:	2b00      	cmp	r3, #0
 801064e:	d00b      	beq.n	8010668 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8010650:	4b35      	ldr	r3, [pc, #212]	; (8010728 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8010652:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8010656:	f023 0218 	bic.w	r2, r3, #24
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010660:	4931      	ldr	r1, [pc, #196]	; (8010728 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8010662:	4313      	orrs	r3, r2
 8010664:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010670:	2b00      	cmp	r3, #0
 8010672:	d035      	beq.n	80106e0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8010674:	4b2c      	ldr	r3, [pc, #176]	; (8010728 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	4a2b      	ldr	r2, [pc, #172]	; (8010728 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 801067a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801067e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010680:	f7fd fe26 	bl	800e2d0 <HAL_GetTick>
 8010684:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8010686:	e009      	b.n	801069c <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8010688:	f7fd fe22 	bl	800e2d0 <HAL_GetTick>
 801068c:	4602      	mov	r2, r0
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	1ad3      	subs	r3, r2, r3
 8010692:	2b02      	cmp	r3, #2
 8010694:	d902      	bls.n	801069c <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8010696:	2303      	movs	r3, #3
 8010698:	74fb      	strb	r3, [r7, #19]
        break;
 801069a:	e005      	b.n	80106a8 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 801069c:	4b22      	ldr	r3, [pc, #136]	; (8010728 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d1ef      	bne.n	8010688 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 80106a8:	7cfb      	ldrb	r3, [r7, #19]
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d113      	bne.n	80106d6 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 80106ae:	4b1e      	ldr	r3, [pc, #120]	; (8010728 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80106b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80106b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80106be:	491a      	ldr	r1, [pc, #104]	; (8010728 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80106c0:	4313      	orrs	r3, r2
 80106c2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	3320      	adds	r3, #32
 80106ca:	2102      	movs	r1, #2
 80106cc:	4618      	mov	r0, r3
 80106ce:	f000 f921 	bl	8010914 <RCCEx_PLLSAI2_Config>
 80106d2:	4603      	mov	r3, r0
 80106d4:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 80106d6:	7cfb      	ldrb	r3, [r7, #19]
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d001      	beq.n	80106e0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 80106dc:	7cfb      	ldrb	r3, [r7, #19]
 80106de:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d017      	beq.n	801071c <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80106ec:	4b0e      	ldr	r3, [pc, #56]	; (8010728 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80106ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80106f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80106fc:	490a      	ldr	r1, [pc, #40]	; (8010728 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80106fe:	4313      	orrs	r3, r2
 8010700:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801070a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801070e:	d105      	bne.n	801071c <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8010710:	4b05      	ldr	r3, [pc, #20]	; (8010728 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8010712:	68db      	ldr	r3, [r3, #12]
 8010714:	4a04      	ldr	r2, [pc, #16]	; (8010728 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8010716:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801071a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 801071c:	7cbb      	ldrb	r3, [r7, #18]
}
 801071e:	4618      	mov	r0, r3
 8010720:	3718      	adds	r7, #24
 8010722:	46bd      	mov	sp, r7
 8010724:	bd80      	pop	{r7, pc}
 8010726:	bf00      	nop
 8010728:	40021000 	.word	0x40021000

0801072c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 801072c:	b580      	push	{r7, lr}
 801072e:	b084      	sub	sp, #16
 8010730:	af00      	add	r7, sp, #0
 8010732:	6078      	str	r0, [r7, #4]
 8010734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8010736:	2300      	movs	r3, #0
 8010738:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 801073a:	4b72      	ldr	r3, [pc, #456]	; (8010904 <RCCEx_PLLSAI1_Config+0x1d8>)
 801073c:	68db      	ldr	r3, [r3, #12]
 801073e:	f003 0303 	and.w	r3, r3, #3
 8010742:	2b00      	cmp	r3, #0
 8010744:	d00e      	beq.n	8010764 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8010746:	4b6f      	ldr	r3, [pc, #444]	; (8010904 <RCCEx_PLLSAI1_Config+0x1d8>)
 8010748:	68db      	ldr	r3, [r3, #12]
 801074a:	f003 0203 	and.w	r2, r3, #3
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	429a      	cmp	r2, r3
 8010754:	d103      	bne.n	801075e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	681b      	ldr	r3, [r3, #0]
       ||
 801075a:	2b00      	cmp	r3, #0
 801075c:	d142      	bne.n	80107e4 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 801075e:	2301      	movs	r3, #1
 8010760:	73fb      	strb	r3, [r7, #15]
 8010762:	e03f      	b.n	80107e4 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	2b03      	cmp	r3, #3
 801076a:	d018      	beq.n	801079e <RCCEx_PLLSAI1_Config+0x72>
 801076c:	2b03      	cmp	r3, #3
 801076e:	d825      	bhi.n	80107bc <RCCEx_PLLSAI1_Config+0x90>
 8010770:	2b01      	cmp	r3, #1
 8010772:	d002      	beq.n	801077a <RCCEx_PLLSAI1_Config+0x4e>
 8010774:	2b02      	cmp	r3, #2
 8010776:	d009      	beq.n	801078c <RCCEx_PLLSAI1_Config+0x60>
 8010778:	e020      	b.n	80107bc <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 801077a:	4b62      	ldr	r3, [pc, #392]	; (8010904 <RCCEx_PLLSAI1_Config+0x1d8>)
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	f003 0302 	and.w	r3, r3, #2
 8010782:	2b00      	cmp	r3, #0
 8010784:	d11d      	bne.n	80107c2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8010786:	2301      	movs	r3, #1
 8010788:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801078a:	e01a      	b.n	80107c2 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 801078c:	4b5d      	ldr	r3, [pc, #372]	; (8010904 <RCCEx_PLLSAI1_Config+0x1d8>)
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010794:	2b00      	cmp	r3, #0
 8010796:	d116      	bne.n	80107c6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8010798:	2301      	movs	r3, #1
 801079a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801079c:	e013      	b.n	80107c6 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 801079e:	4b59      	ldr	r3, [pc, #356]	; (8010904 <RCCEx_PLLSAI1_Config+0x1d8>)
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d10f      	bne.n	80107ca <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80107aa:	4b56      	ldr	r3, [pc, #344]	; (8010904 <RCCEx_PLLSAI1_Config+0x1d8>)
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d109      	bne.n	80107ca <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80107b6:	2301      	movs	r3, #1
 80107b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80107ba:	e006      	b.n	80107ca <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80107bc:	2301      	movs	r3, #1
 80107be:	73fb      	strb	r3, [r7, #15]
      break;
 80107c0:	e004      	b.n	80107cc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80107c2:	bf00      	nop
 80107c4:	e002      	b.n	80107cc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80107c6:	bf00      	nop
 80107c8:	e000      	b.n	80107cc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80107ca:	bf00      	nop
    }

    if(status == HAL_OK)
 80107cc:	7bfb      	ldrb	r3, [r7, #15]
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d108      	bne.n	80107e4 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80107d2:	4b4c      	ldr	r3, [pc, #304]	; (8010904 <RCCEx_PLLSAI1_Config+0x1d8>)
 80107d4:	68db      	ldr	r3, [r3, #12]
 80107d6:	f023 0203 	bic.w	r2, r3, #3
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	4949      	ldr	r1, [pc, #292]	; (8010904 <RCCEx_PLLSAI1_Config+0x1d8>)
 80107e0:	4313      	orrs	r3, r2
 80107e2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80107e4:	7bfb      	ldrb	r3, [r7, #15]
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	f040 8086 	bne.w	80108f8 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80107ec:	4b45      	ldr	r3, [pc, #276]	; (8010904 <RCCEx_PLLSAI1_Config+0x1d8>)
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	4a44      	ldr	r2, [pc, #272]	; (8010904 <RCCEx_PLLSAI1_Config+0x1d8>)
 80107f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80107f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80107f8:	f7fd fd6a 	bl	800e2d0 <HAL_GetTick>
 80107fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80107fe:	e009      	b.n	8010814 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8010800:	f7fd fd66 	bl	800e2d0 <HAL_GetTick>
 8010804:	4602      	mov	r2, r0
 8010806:	68bb      	ldr	r3, [r7, #8]
 8010808:	1ad3      	subs	r3, r2, r3
 801080a:	2b02      	cmp	r3, #2
 801080c:	d902      	bls.n	8010814 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 801080e:	2303      	movs	r3, #3
 8010810:	73fb      	strb	r3, [r7, #15]
        break;
 8010812:	e005      	b.n	8010820 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8010814:	4b3b      	ldr	r3, [pc, #236]	; (8010904 <RCCEx_PLLSAI1_Config+0x1d8>)
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801081c:	2b00      	cmp	r3, #0
 801081e:	d1ef      	bne.n	8010800 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8010820:	7bfb      	ldrb	r3, [r7, #15]
 8010822:	2b00      	cmp	r3, #0
 8010824:	d168      	bne.n	80108f8 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8010826:	683b      	ldr	r3, [r7, #0]
 8010828:	2b00      	cmp	r3, #0
 801082a:	d113      	bne.n	8010854 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 801082c:	4b35      	ldr	r3, [pc, #212]	; (8010904 <RCCEx_PLLSAI1_Config+0x1d8>)
 801082e:	691a      	ldr	r2, [r3, #16]
 8010830:	4b35      	ldr	r3, [pc, #212]	; (8010908 <RCCEx_PLLSAI1_Config+0x1dc>)
 8010832:	4013      	ands	r3, r2
 8010834:	687a      	ldr	r2, [r7, #4]
 8010836:	6892      	ldr	r2, [r2, #8]
 8010838:	0211      	lsls	r1, r2, #8
 801083a:	687a      	ldr	r2, [r7, #4]
 801083c:	68d2      	ldr	r2, [r2, #12]
 801083e:	06d2      	lsls	r2, r2, #27
 8010840:	4311      	orrs	r1, r2
 8010842:	687a      	ldr	r2, [r7, #4]
 8010844:	6852      	ldr	r2, [r2, #4]
 8010846:	3a01      	subs	r2, #1
 8010848:	0112      	lsls	r2, r2, #4
 801084a:	430a      	orrs	r2, r1
 801084c:	492d      	ldr	r1, [pc, #180]	; (8010904 <RCCEx_PLLSAI1_Config+0x1d8>)
 801084e:	4313      	orrs	r3, r2
 8010850:	610b      	str	r3, [r1, #16]
 8010852:	e02d      	b.n	80108b0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8010854:	683b      	ldr	r3, [r7, #0]
 8010856:	2b01      	cmp	r3, #1
 8010858:	d115      	bne.n	8010886 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 801085a:	4b2a      	ldr	r3, [pc, #168]	; (8010904 <RCCEx_PLLSAI1_Config+0x1d8>)
 801085c:	691a      	ldr	r2, [r3, #16]
 801085e:	4b2b      	ldr	r3, [pc, #172]	; (801090c <RCCEx_PLLSAI1_Config+0x1e0>)
 8010860:	4013      	ands	r3, r2
 8010862:	687a      	ldr	r2, [r7, #4]
 8010864:	6892      	ldr	r2, [r2, #8]
 8010866:	0211      	lsls	r1, r2, #8
 8010868:	687a      	ldr	r2, [r7, #4]
 801086a:	6912      	ldr	r2, [r2, #16]
 801086c:	0852      	lsrs	r2, r2, #1
 801086e:	3a01      	subs	r2, #1
 8010870:	0552      	lsls	r2, r2, #21
 8010872:	4311      	orrs	r1, r2
 8010874:	687a      	ldr	r2, [r7, #4]
 8010876:	6852      	ldr	r2, [r2, #4]
 8010878:	3a01      	subs	r2, #1
 801087a:	0112      	lsls	r2, r2, #4
 801087c:	430a      	orrs	r2, r1
 801087e:	4921      	ldr	r1, [pc, #132]	; (8010904 <RCCEx_PLLSAI1_Config+0x1d8>)
 8010880:	4313      	orrs	r3, r2
 8010882:	610b      	str	r3, [r1, #16]
 8010884:	e014      	b.n	80108b0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8010886:	4b1f      	ldr	r3, [pc, #124]	; (8010904 <RCCEx_PLLSAI1_Config+0x1d8>)
 8010888:	691a      	ldr	r2, [r3, #16]
 801088a:	4b21      	ldr	r3, [pc, #132]	; (8010910 <RCCEx_PLLSAI1_Config+0x1e4>)
 801088c:	4013      	ands	r3, r2
 801088e:	687a      	ldr	r2, [r7, #4]
 8010890:	6892      	ldr	r2, [r2, #8]
 8010892:	0211      	lsls	r1, r2, #8
 8010894:	687a      	ldr	r2, [r7, #4]
 8010896:	6952      	ldr	r2, [r2, #20]
 8010898:	0852      	lsrs	r2, r2, #1
 801089a:	3a01      	subs	r2, #1
 801089c:	0652      	lsls	r2, r2, #25
 801089e:	4311      	orrs	r1, r2
 80108a0:	687a      	ldr	r2, [r7, #4]
 80108a2:	6852      	ldr	r2, [r2, #4]
 80108a4:	3a01      	subs	r2, #1
 80108a6:	0112      	lsls	r2, r2, #4
 80108a8:	430a      	orrs	r2, r1
 80108aa:	4916      	ldr	r1, [pc, #88]	; (8010904 <RCCEx_PLLSAI1_Config+0x1d8>)
 80108ac:	4313      	orrs	r3, r2
 80108ae:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80108b0:	4b14      	ldr	r3, [pc, #80]	; (8010904 <RCCEx_PLLSAI1_Config+0x1d8>)
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	4a13      	ldr	r2, [pc, #76]	; (8010904 <RCCEx_PLLSAI1_Config+0x1d8>)
 80108b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80108ba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80108bc:	f7fd fd08 	bl	800e2d0 <HAL_GetTick>
 80108c0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80108c2:	e009      	b.n	80108d8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80108c4:	f7fd fd04 	bl	800e2d0 <HAL_GetTick>
 80108c8:	4602      	mov	r2, r0
 80108ca:	68bb      	ldr	r3, [r7, #8]
 80108cc:	1ad3      	subs	r3, r2, r3
 80108ce:	2b02      	cmp	r3, #2
 80108d0:	d902      	bls.n	80108d8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80108d2:	2303      	movs	r3, #3
 80108d4:	73fb      	strb	r3, [r7, #15]
          break;
 80108d6:	e005      	b.n	80108e4 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80108d8:	4b0a      	ldr	r3, [pc, #40]	; (8010904 <RCCEx_PLLSAI1_Config+0x1d8>)
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d0ef      	beq.n	80108c4 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80108e4:	7bfb      	ldrb	r3, [r7, #15]
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d106      	bne.n	80108f8 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80108ea:	4b06      	ldr	r3, [pc, #24]	; (8010904 <RCCEx_PLLSAI1_Config+0x1d8>)
 80108ec:	691a      	ldr	r2, [r3, #16]
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	699b      	ldr	r3, [r3, #24]
 80108f2:	4904      	ldr	r1, [pc, #16]	; (8010904 <RCCEx_PLLSAI1_Config+0x1d8>)
 80108f4:	4313      	orrs	r3, r2
 80108f6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80108f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80108fa:	4618      	mov	r0, r3
 80108fc:	3710      	adds	r7, #16
 80108fe:	46bd      	mov	sp, r7
 8010900:	bd80      	pop	{r7, pc}
 8010902:	bf00      	nop
 8010904:	40021000 	.word	0x40021000
 8010908:	07ff800f 	.word	0x07ff800f
 801090c:	ff9f800f 	.word	0xff9f800f
 8010910:	f9ff800f 	.word	0xf9ff800f

08010914 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8010914:	b580      	push	{r7, lr}
 8010916:	b084      	sub	sp, #16
 8010918:	af00      	add	r7, sp, #0
 801091a:	6078      	str	r0, [r7, #4]
 801091c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801091e:	2300      	movs	r3, #0
 8010920:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8010922:	4b72      	ldr	r3, [pc, #456]	; (8010aec <RCCEx_PLLSAI2_Config+0x1d8>)
 8010924:	68db      	ldr	r3, [r3, #12]
 8010926:	f003 0303 	and.w	r3, r3, #3
 801092a:	2b00      	cmp	r3, #0
 801092c:	d00e      	beq.n	801094c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 801092e:	4b6f      	ldr	r3, [pc, #444]	; (8010aec <RCCEx_PLLSAI2_Config+0x1d8>)
 8010930:	68db      	ldr	r3, [r3, #12]
 8010932:	f003 0203 	and.w	r2, r3, #3
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	429a      	cmp	r2, r3
 801093c:	d103      	bne.n	8010946 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	681b      	ldr	r3, [r3, #0]
       ||
 8010942:	2b00      	cmp	r3, #0
 8010944:	d142      	bne.n	80109cc <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8010946:	2301      	movs	r3, #1
 8010948:	73fb      	strb	r3, [r7, #15]
 801094a:	e03f      	b.n	80109cc <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	2b03      	cmp	r3, #3
 8010952:	d018      	beq.n	8010986 <RCCEx_PLLSAI2_Config+0x72>
 8010954:	2b03      	cmp	r3, #3
 8010956:	d825      	bhi.n	80109a4 <RCCEx_PLLSAI2_Config+0x90>
 8010958:	2b01      	cmp	r3, #1
 801095a:	d002      	beq.n	8010962 <RCCEx_PLLSAI2_Config+0x4e>
 801095c:	2b02      	cmp	r3, #2
 801095e:	d009      	beq.n	8010974 <RCCEx_PLLSAI2_Config+0x60>
 8010960:	e020      	b.n	80109a4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8010962:	4b62      	ldr	r3, [pc, #392]	; (8010aec <RCCEx_PLLSAI2_Config+0x1d8>)
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	f003 0302 	and.w	r3, r3, #2
 801096a:	2b00      	cmp	r3, #0
 801096c:	d11d      	bne.n	80109aa <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 801096e:	2301      	movs	r3, #1
 8010970:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010972:	e01a      	b.n	80109aa <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8010974:	4b5d      	ldr	r3, [pc, #372]	; (8010aec <RCCEx_PLLSAI2_Config+0x1d8>)
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801097c:	2b00      	cmp	r3, #0
 801097e:	d116      	bne.n	80109ae <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8010980:	2301      	movs	r3, #1
 8010982:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010984:	e013      	b.n	80109ae <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8010986:	4b59      	ldr	r3, [pc, #356]	; (8010aec <RCCEx_PLLSAI2_Config+0x1d8>)
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801098e:	2b00      	cmp	r3, #0
 8010990:	d10f      	bne.n	80109b2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8010992:	4b56      	ldr	r3, [pc, #344]	; (8010aec <RCCEx_PLLSAI2_Config+0x1d8>)
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801099a:	2b00      	cmp	r3, #0
 801099c:	d109      	bne.n	80109b2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 801099e:	2301      	movs	r3, #1
 80109a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80109a2:	e006      	b.n	80109b2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80109a4:	2301      	movs	r3, #1
 80109a6:	73fb      	strb	r3, [r7, #15]
      break;
 80109a8:	e004      	b.n	80109b4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80109aa:	bf00      	nop
 80109ac:	e002      	b.n	80109b4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80109ae:	bf00      	nop
 80109b0:	e000      	b.n	80109b4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80109b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80109b4:	7bfb      	ldrb	r3, [r7, #15]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d108      	bne.n	80109cc <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80109ba:	4b4c      	ldr	r3, [pc, #304]	; (8010aec <RCCEx_PLLSAI2_Config+0x1d8>)
 80109bc:	68db      	ldr	r3, [r3, #12]
 80109be:	f023 0203 	bic.w	r2, r3, #3
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	4949      	ldr	r1, [pc, #292]	; (8010aec <RCCEx_PLLSAI2_Config+0x1d8>)
 80109c8:	4313      	orrs	r3, r2
 80109ca:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80109cc:	7bfb      	ldrb	r3, [r7, #15]
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	f040 8086 	bne.w	8010ae0 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80109d4:	4b45      	ldr	r3, [pc, #276]	; (8010aec <RCCEx_PLLSAI2_Config+0x1d8>)
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	4a44      	ldr	r2, [pc, #272]	; (8010aec <RCCEx_PLLSAI2_Config+0x1d8>)
 80109da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80109de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80109e0:	f7fd fc76 	bl	800e2d0 <HAL_GetTick>
 80109e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80109e6:	e009      	b.n	80109fc <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80109e8:	f7fd fc72 	bl	800e2d0 <HAL_GetTick>
 80109ec:	4602      	mov	r2, r0
 80109ee:	68bb      	ldr	r3, [r7, #8]
 80109f0:	1ad3      	subs	r3, r2, r3
 80109f2:	2b02      	cmp	r3, #2
 80109f4:	d902      	bls.n	80109fc <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80109f6:	2303      	movs	r3, #3
 80109f8:	73fb      	strb	r3, [r7, #15]
        break;
 80109fa:	e005      	b.n	8010a08 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80109fc:	4b3b      	ldr	r3, [pc, #236]	; (8010aec <RCCEx_PLLSAI2_Config+0x1d8>)
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d1ef      	bne.n	80109e8 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8010a08:	7bfb      	ldrb	r3, [r7, #15]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d168      	bne.n	8010ae0 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8010a0e:	683b      	ldr	r3, [r7, #0]
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d113      	bne.n	8010a3c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8010a14:	4b35      	ldr	r3, [pc, #212]	; (8010aec <RCCEx_PLLSAI2_Config+0x1d8>)
 8010a16:	695a      	ldr	r2, [r3, #20]
 8010a18:	4b35      	ldr	r3, [pc, #212]	; (8010af0 <RCCEx_PLLSAI2_Config+0x1dc>)
 8010a1a:	4013      	ands	r3, r2
 8010a1c:	687a      	ldr	r2, [r7, #4]
 8010a1e:	6892      	ldr	r2, [r2, #8]
 8010a20:	0211      	lsls	r1, r2, #8
 8010a22:	687a      	ldr	r2, [r7, #4]
 8010a24:	68d2      	ldr	r2, [r2, #12]
 8010a26:	06d2      	lsls	r2, r2, #27
 8010a28:	4311      	orrs	r1, r2
 8010a2a:	687a      	ldr	r2, [r7, #4]
 8010a2c:	6852      	ldr	r2, [r2, #4]
 8010a2e:	3a01      	subs	r2, #1
 8010a30:	0112      	lsls	r2, r2, #4
 8010a32:	430a      	orrs	r2, r1
 8010a34:	492d      	ldr	r1, [pc, #180]	; (8010aec <RCCEx_PLLSAI2_Config+0x1d8>)
 8010a36:	4313      	orrs	r3, r2
 8010a38:	614b      	str	r3, [r1, #20]
 8010a3a:	e02d      	b.n	8010a98 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8010a3c:	683b      	ldr	r3, [r7, #0]
 8010a3e:	2b01      	cmp	r3, #1
 8010a40:	d115      	bne.n	8010a6e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8010a42:	4b2a      	ldr	r3, [pc, #168]	; (8010aec <RCCEx_PLLSAI2_Config+0x1d8>)
 8010a44:	695a      	ldr	r2, [r3, #20]
 8010a46:	4b2b      	ldr	r3, [pc, #172]	; (8010af4 <RCCEx_PLLSAI2_Config+0x1e0>)
 8010a48:	4013      	ands	r3, r2
 8010a4a:	687a      	ldr	r2, [r7, #4]
 8010a4c:	6892      	ldr	r2, [r2, #8]
 8010a4e:	0211      	lsls	r1, r2, #8
 8010a50:	687a      	ldr	r2, [r7, #4]
 8010a52:	6912      	ldr	r2, [r2, #16]
 8010a54:	0852      	lsrs	r2, r2, #1
 8010a56:	3a01      	subs	r2, #1
 8010a58:	0552      	lsls	r2, r2, #21
 8010a5a:	4311      	orrs	r1, r2
 8010a5c:	687a      	ldr	r2, [r7, #4]
 8010a5e:	6852      	ldr	r2, [r2, #4]
 8010a60:	3a01      	subs	r2, #1
 8010a62:	0112      	lsls	r2, r2, #4
 8010a64:	430a      	orrs	r2, r1
 8010a66:	4921      	ldr	r1, [pc, #132]	; (8010aec <RCCEx_PLLSAI2_Config+0x1d8>)
 8010a68:	4313      	orrs	r3, r2
 8010a6a:	614b      	str	r3, [r1, #20]
 8010a6c:	e014      	b.n	8010a98 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8010a6e:	4b1f      	ldr	r3, [pc, #124]	; (8010aec <RCCEx_PLLSAI2_Config+0x1d8>)
 8010a70:	695a      	ldr	r2, [r3, #20]
 8010a72:	4b21      	ldr	r3, [pc, #132]	; (8010af8 <RCCEx_PLLSAI2_Config+0x1e4>)
 8010a74:	4013      	ands	r3, r2
 8010a76:	687a      	ldr	r2, [r7, #4]
 8010a78:	6892      	ldr	r2, [r2, #8]
 8010a7a:	0211      	lsls	r1, r2, #8
 8010a7c:	687a      	ldr	r2, [r7, #4]
 8010a7e:	6952      	ldr	r2, [r2, #20]
 8010a80:	0852      	lsrs	r2, r2, #1
 8010a82:	3a01      	subs	r2, #1
 8010a84:	0652      	lsls	r2, r2, #25
 8010a86:	4311      	orrs	r1, r2
 8010a88:	687a      	ldr	r2, [r7, #4]
 8010a8a:	6852      	ldr	r2, [r2, #4]
 8010a8c:	3a01      	subs	r2, #1
 8010a8e:	0112      	lsls	r2, r2, #4
 8010a90:	430a      	orrs	r2, r1
 8010a92:	4916      	ldr	r1, [pc, #88]	; (8010aec <RCCEx_PLLSAI2_Config+0x1d8>)
 8010a94:	4313      	orrs	r3, r2
 8010a96:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8010a98:	4b14      	ldr	r3, [pc, #80]	; (8010aec <RCCEx_PLLSAI2_Config+0x1d8>)
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	4a13      	ldr	r2, [pc, #76]	; (8010aec <RCCEx_PLLSAI2_Config+0x1d8>)
 8010a9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010aa2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010aa4:	f7fd fc14 	bl	800e2d0 <HAL_GetTick>
 8010aa8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8010aaa:	e009      	b.n	8010ac0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8010aac:	f7fd fc10 	bl	800e2d0 <HAL_GetTick>
 8010ab0:	4602      	mov	r2, r0
 8010ab2:	68bb      	ldr	r3, [r7, #8]
 8010ab4:	1ad3      	subs	r3, r2, r3
 8010ab6:	2b02      	cmp	r3, #2
 8010ab8:	d902      	bls.n	8010ac0 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8010aba:	2303      	movs	r3, #3
 8010abc:	73fb      	strb	r3, [r7, #15]
          break;
 8010abe:	e005      	b.n	8010acc <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8010ac0:	4b0a      	ldr	r3, [pc, #40]	; (8010aec <RCCEx_PLLSAI2_Config+0x1d8>)
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d0ef      	beq.n	8010aac <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8010acc:	7bfb      	ldrb	r3, [r7, #15]
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d106      	bne.n	8010ae0 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8010ad2:	4b06      	ldr	r3, [pc, #24]	; (8010aec <RCCEx_PLLSAI2_Config+0x1d8>)
 8010ad4:	695a      	ldr	r2, [r3, #20]
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	699b      	ldr	r3, [r3, #24]
 8010ada:	4904      	ldr	r1, [pc, #16]	; (8010aec <RCCEx_PLLSAI2_Config+0x1d8>)
 8010adc:	4313      	orrs	r3, r2
 8010ade:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8010ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	3710      	adds	r7, #16
 8010ae6:	46bd      	mov	sp, r7
 8010ae8:	bd80      	pop	{r7, pc}
 8010aea:	bf00      	nop
 8010aec:	40021000 	.word	0x40021000
 8010af0:	07ff800f 	.word	0x07ff800f
 8010af4:	ff9f800f 	.word	0xff9f800f
 8010af8:	f9ff800f 	.word	0xf9ff800f

08010afc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8010afc:	b580      	push	{r7, lr}
 8010afe:	b084      	sub	sp, #16
 8010b00:	af00      	add	r7, sp, #0
 8010b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8010b04:	2301      	movs	r3, #1
 8010b06:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d07f      	beq.n	8010c0e <HAL_RTC_Init+0x112>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010b14:	b2db      	uxtb	r3, r3
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d106      	bne.n	8010b28 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	2200      	movs	r2, #0
 8010b1e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8010b22:	6878      	ldr	r0, [r7, #4]
 8010b24:	f7fc fbfc 	bl	800d320 <HAL_RTC_MspInit>
    }
#endif /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8010b2e:	605a      	str	r2, [r3, #4]
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	2202      	movs	r2, #2
 8010b34:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	22ca      	movs	r2, #202	; 0xca
 8010b3e:	625a      	str	r2, [r3, #36]	; 0x24
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	2253      	movs	r2, #83	; 0x53
 8010b46:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8010b48:	6878      	ldr	r0, [r7, #4]
 8010b4a:	f000 fa65 	bl	8011018 <RTC_EnterInitMode>
 8010b4e:	4603      	mov	r3, r0
 8010b50:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8010b52:	7bfb      	ldrb	r3, [r7, #15]
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d15a      	bne.n	8010c0e <HAL_RTC_Init+0x112>
    {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	699b      	ldr	r3, [r3, #24]
 8010b5e:	687a      	ldr	r2, [r7, #4]
 8010b60:	6812      	ldr	r2, [r2, #0]
 8010b62:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8010b66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010b6a:	6193      	str	r3, [r2, #24]
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	6999      	ldr	r1, [r3, #24]
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	689a      	ldr	r2, [r3, #8]
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	695b      	ldr	r3, [r3, #20]
 8010b7a:	431a      	orrs	r2, r3
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	69db      	ldr	r3, [r3, #28]
 8010b80:	431a      	orrs	r2, r3
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	430a      	orrs	r2, r1
 8010b88:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	687a      	ldr	r2, [r7, #4]
 8010b90:	6912      	ldr	r2, [r2, #16]
 8010b92:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	6919      	ldr	r1, [r3, #16]
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	68db      	ldr	r3, [r3, #12]
 8010b9e:	041a      	lsls	r2, r3, #16
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	430a      	orrs	r2, r1
 8010ba6:	611a      	str	r2, [r3, #16]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8010ba8:	4b1b      	ldr	r3, [pc, #108]	; (8010c18 <HAL_RTC_Init+0x11c>)
 8010baa:	68db      	ldr	r3, [r3, #12]
 8010bac:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010bb8:	430b      	orrs	r3, r1
 8010bba:	4917      	ldr	r1, [pc, #92]	; (8010c18 <HAL_RTC_Init+0x11c>)
 8010bbc:	4313      	orrs	r3, r2
 8010bbe:	60cb      	str	r3, [r1, #12]
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8010bc0:	6878      	ldr	r0, [r7, #4]
 8010bc2:	f000 fa5f 	bl	8011084 <RTC_ExitInitMode>
 8010bc6:	4603      	mov	r3, r0
 8010bc8:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8010bca:	7bfb      	ldrb	r3, [r7, #15]
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d11e      	bne.n	8010c0e <HAL_RTC_Init+0x112>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	699a      	ldr	r2, [r3, #24]
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8010bde:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	6999      	ldr	r1, [r3, #24]
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	6a1b      	ldr	r3, [r3, #32]
 8010bee:	431a      	orrs	r2, r3
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	699b      	ldr	r3, [r3, #24]
 8010bf4:	431a      	orrs	r2, r3
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	430a      	orrs	r2, r1
 8010bfc:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	22ff      	movs	r2, #255	; 0xff
 8010c04:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	2201      	movs	r2, #1
 8010c0a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      }
    }
  }

  return status;
 8010c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c10:	4618      	mov	r0, r3
 8010c12:	3710      	adds	r7, #16
 8010c14:	46bd      	mov	sp, r7
 8010c16:	bd80      	pop	{r7, pc}
 8010c18:	40002800 	.word	0x40002800

08010c1c <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8010c1c:	b590      	push	{r4, r7, lr}
 8010c1e:	b087      	sub	sp, #28
 8010c20:	af00      	add	r7, sp, #0
 8010c22:	60f8      	str	r0, [r7, #12]
 8010c24:	60b9      	str	r1, [r7, #8]
 8010c26:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010c2e:	2b01      	cmp	r3, #1
 8010c30:	d101      	bne.n	8010c36 <HAL_RTC_SetTime+0x1a>
 8010c32:	2302      	movs	r3, #2
 8010c34:	e08b      	b.n	8010d4e <HAL_RTC_SetTime+0x132>
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	2201      	movs	r2, #1
 8010c3a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  hrtc->State = HAL_RTC_STATE_BUSY;
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	2202      	movs	r2, #2
 8010c42:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	22ca      	movs	r2, #202	; 0xca
 8010c4c:	625a      	str	r2, [r3, #36]	; 0x24
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	2253      	movs	r2, #83	; 0x53
 8010c54:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8010c56:	68f8      	ldr	r0, [r7, #12]
 8010c58:	f000 f9de 	bl	8011018 <RTC_EnterInitMode>
 8010c5c:	4603      	mov	r3, r0
 8010c5e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8010c60:	7cfb      	ldrb	r3, [r7, #19]
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d15e      	bne.n	8010d24 <HAL_RTC_SetTime+0x108>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8010c66:	4b3c      	ldr	r3, [pc, #240]	; (8010d58 <HAL_RTC_SetTime+0x13c>)
 8010c68:	68db      	ldr	r3, [r3, #12]
 8010c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010c6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010c72:	d057      	beq.n	8010d24 <HAL_RTC_SetTime+0x108>
    {
      if (Format == RTC_FORMAT_BIN)
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d125      	bne.n	8010cc6 <HAL_RTC_SetTime+0xaa>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8010c7a:	4b37      	ldr	r3, [pc, #220]	; (8010d58 <HAL_RTC_SetTime+0x13c>)
 8010c7c:	699b      	ldr	r3, [r3, #24]
 8010c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d102      	bne.n	8010c8c <HAL_RTC_SetTime+0x70>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8010c86:	68bb      	ldr	r3, [r7, #8]
 8010c88:	2200      	movs	r2, #0
 8010c8a:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8010c8c:	68bb      	ldr	r3, [r7, #8]
 8010c8e:	781b      	ldrb	r3, [r3, #0]
 8010c90:	4618      	mov	r0, r3
 8010c92:	f000 fa35 	bl	8011100 <RTC_ByteToBcd2>
 8010c96:	4603      	mov	r3, r0
 8010c98:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8010c9a:	68bb      	ldr	r3, [r7, #8]
 8010c9c:	785b      	ldrb	r3, [r3, #1]
 8010c9e:	4618      	mov	r0, r3
 8010ca0:	f000 fa2e 	bl	8011100 <RTC_ByteToBcd2>
 8010ca4:	4603      	mov	r3, r0
 8010ca6:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8010ca8:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8010caa:	68bb      	ldr	r3, [r7, #8]
 8010cac:	789b      	ldrb	r3, [r3, #2]
 8010cae:	4618      	mov	r0, r3
 8010cb0:	f000 fa26 	bl	8011100 <RTC_ByteToBcd2>
 8010cb4:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8010cb6:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8010cba:	68bb      	ldr	r3, [r7, #8]
 8010cbc:	78db      	ldrb	r3, [r3, #3]
 8010cbe:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8010cc0:	4313      	orrs	r3, r2
 8010cc2:	617b      	str	r3, [r7, #20]
 8010cc4:	e017      	b.n	8010cf6 <HAL_RTC_SetTime+0xda>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8010cc6:	4b24      	ldr	r3, [pc, #144]	; (8010d58 <HAL_RTC_SetTime+0x13c>)
 8010cc8:	699b      	ldr	r3, [r3, #24]
 8010cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d102      	bne.n	8010cd8 <HAL_RTC_SetTime+0xbc>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8010cd2:	68bb      	ldr	r3, [r7, #8]
 8010cd4:	2200      	movs	r2, #0
 8010cd6:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8010cd8:	68bb      	ldr	r3, [r7, #8]
 8010cda:	781b      	ldrb	r3, [r3, #0]
 8010cdc:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8010cde:	68bb      	ldr	r3, [r7, #8]
 8010ce0:	785b      	ldrb	r3, [r3, #1]
 8010ce2:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8010ce4:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8010ce6:	68ba      	ldr	r2, [r7, #8]
 8010ce8:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8010cea:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8010cec:	68bb      	ldr	r3, [r7, #8]
 8010cee:	78db      	ldrb	r3, [r3, #3]
 8010cf0:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8010cf2:	4313      	orrs	r3, r2
 8010cf4:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8010cf6:	4a18      	ldr	r2, [pc, #96]	; (8010d58 <HAL_RTC_SetTime+0x13c>)
 8010cf8:	697b      	ldr	r3, [r7, #20]
 8010cfa:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8010cfe:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8010d02:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8010d04:	4b14      	ldr	r3, [pc, #80]	; (8010d58 <HAL_RTC_SetTime+0x13c>)
 8010d06:	699b      	ldr	r3, [r3, #24]
 8010d08:	4a13      	ldr	r2, [pc, #76]	; (8010d58 <HAL_RTC_SetTime+0x13c>)
 8010d0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010d0e:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8010d10:	4b11      	ldr	r3, [pc, #68]	; (8010d58 <HAL_RTC_SetTime+0x13c>)
 8010d12:	699a      	ldr	r2, [r3, #24]
 8010d14:	68bb      	ldr	r3, [r7, #8]
 8010d16:	68d9      	ldr	r1, [r3, #12]
 8010d18:	68bb      	ldr	r3, [r7, #8]
 8010d1a:	691b      	ldr	r3, [r3, #16]
 8010d1c:	430b      	orrs	r3, r1
 8010d1e:	490e      	ldr	r1, [pc, #56]	; (8010d58 <HAL_RTC_SetTime+0x13c>)
 8010d20:	4313      	orrs	r3, r2
 8010d22:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 8010d24:	68f8      	ldr	r0, [r7, #12]
 8010d26:	f000 f9ad 	bl	8011084 <RTC_ExitInitMode>
 8010d2a:	4603      	mov	r3, r0
 8010d2c:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	22ff      	movs	r2, #255	; 0xff
 8010d34:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8010d36:	7cfb      	ldrb	r3, [r7, #19]
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d103      	bne.n	8010d44 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8010d3c:	68fb      	ldr	r3, [r7, #12]
 8010d3e:	2201      	movs	r2, #1
 8010d40:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	2200      	movs	r2, #0
 8010d48:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8010d4c:	7cfb      	ldrb	r3, [r7, #19]
}
 8010d4e:	4618      	mov	r0, r3
 8010d50:	371c      	adds	r7, #28
 8010d52:	46bd      	mov	sp, r7
 8010d54:	bd90      	pop	{r4, r7, pc}
 8010d56:	bf00      	nop
 8010d58:	40002800 	.word	0x40002800

08010d5c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8010d5c:	b580      	push	{r7, lr}
 8010d5e:	b086      	sub	sp, #24
 8010d60:	af00      	add	r7, sp, #0
 8010d62:	60f8      	str	r0, [r7, #12]
 8010d64:	60b9      	str	r1, [r7, #8]
 8010d66:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 8010d68:	4b2c      	ldr	r3, [pc, #176]	; (8010e1c <HAL_RTC_GetTime+0xc0>)
 8010d6a:	689a      	ldr	r2, [r3, #8]
 8010d6c:	68bb      	ldr	r3, [r7, #8]
 8010d6e:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8010d70:	4b2a      	ldr	r3, [pc, #168]	; (8010e1c <HAL_RTC_GetTime+0xc0>)
 8010d72:	68db      	ldr	r3, [r3, #12]
 8010d74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010d78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010d7c:	d049      	beq.n	8010e12 <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field*/
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 8010d7e:	4b27      	ldr	r3, [pc, #156]	; (8010e1c <HAL_RTC_GetTime+0xc0>)
 8010d80:	691b      	ldr	r3, [r3, #16]
 8010d82:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8010d86:	68bb      	ldr	r3, [r7, #8]
 8010d88:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 8010d8a:	4b24      	ldr	r3, [pc, #144]	; (8010e1c <HAL_RTC_GetTime+0xc0>)
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8010d92:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8010d96:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8010d98:	697b      	ldr	r3, [r7, #20]
 8010d9a:	0c1b      	lsrs	r3, r3, #16
 8010d9c:	b2db      	uxtb	r3, r3
 8010d9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010da2:	b2da      	uxtb	r2, r3
 8010da4:	68bb      	ldr	r3, [r7, #8]
 8010da6:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8010da8:	697b      	ldr	r3, [r7, #20]
 8010daa:	0a1b      	lsrs	r3, r3, #8
 8010dac:	b2db      	uxtb	r3, r3
 8010dae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010db2:	b2da      	uxtb	r2, r3
 8010db4:	68bb      	ldr	r3, [r7, #8]
 8010db6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8010db8:	697b      	ldr	r3, [r7, #20]
 8010dba:	b2db      	uxtb	r3, r3
 8010dbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010dc0:	b2da      	uxtb	r2, r3
 8010dc2:	68bb      	ldr	r3, [r7, #8]
 8010dc4:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8010dc6:	697b      	ldr	r3, [r7, #20]
 8010dc8:	0d9b      	lsrs	r3, r3, #22
 8010dca:	b2db      	uxtb	r3, r3
 8010dcc:	f003 0301 	and.w	r3, r3, #1
 8010dd0:	b2da      	uxtb	r2, r3
 8010dd2:	68bb      	ldr	r3, [r7, #8]
 8010dd4:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d11a      	bne.n	8010e12 <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8010ddc:	68bb      	ldr	r3, [r7, #8]
 8010dde:	781b      	ldrb	r3, [r3, #0]
 8010de0:	4618      	mov	r0, r3
 8010de2:	f000 f9ad 	bl	8011140 <RTC_Bcd2ToByte>
 8010de6:	4603      	mov	r3, r0
 8010de8:	461a      	mov	r2, r3
 8010dea:	68bb      	ldr	r3, [r7, #8]
 8010dec:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8010dee:	68bb      	ldr	r3, [r7, #8]
 8010df0:	785b      	ldrb	r3, [r3, #1]
 8010df2:	4618      	mov	r0, r3
 8010df4:	f000 f9a4 	bl	8011140 <RTC_Bcd2ToByte>
 8010df8:	4603      	mov	r3, r0
 8010dfa:	461a      	mov	r2, r3
 8010dfc:	68bb      	ldr	r3, [r7, #8]
 8010dfe:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8010e00:	68bb      	ldr	r3, [r7, #8]
 8010e02:	789b      	ldrb	r3, [r3, #2]
 8010e04:	4618      	mov	r0, r3
 8010e06:	f000 f99b 	bl	8011140 <RTC_Bcd2ToByte>
 8010e0a:	4603      	mov	r3, r0
 8010e0c:	461a      	mov	r2, r3
 8010e0e:	68bb      	ldr	r3, [r7, #8]
 8010e10:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 8010e12:	2300      	movs	r3, #0
}
 8010e14:	4618      	mov	r0, r3
 8010e16:	3718      	adds	r7, #24
 8010e18:	46bd      	mov	sp, r7
 8010e1a:	bd80      	pop	{r7, pc}
 8010e1c:	40002800 	.word	0x40002800

08010e20 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8010e20:	b590      	push	{r4, r7, lr}
 8010e22:	b087      	sub	sp, #28
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	60f8      	str	r0, [r7, #12]
 8010e28:	60b9      	str	r1, [r7, #8]
 8010e2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8010e2c:	68fb      	ldr	r3, [r7, #12]
 8010e2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010e32:	2b01      	cmp	r3, #1
 8010e34:	d101      	bne.n	8010e3a <HAL_RTC_SetDate+0x1a>
 8010e36:	2302      	movs	r3, #2
 8010e38:	e074      	b.n	8010f24 <HAL_RTC_SetDate+0x104>
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	2201      	movs	r2, #1
 8010e3e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  hrtc->State = HAL_RTC_STATE_BUSY;
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	2202      	movs	r2, #2
 8010e46:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d10e      	bne.n	8010e6e <HAL_RTC_SetDate+0x4e>
 8010e50:	68bb      	ldr	r3, [r7, #8]
 8010e52:	785b      	ldrb	r3, [r3, #1]
 8010e54:	f003 0310 	and.w	r3, r3, #16
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d008      	beq.n	8010e6e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8010e5c:	68bb      	ldr	r3, [r7, #8]
 8010e5e:	785b      	ldrb	r3, [r3, #1]
 8010e60:	f023 0310 	bic.w	r3, r3, #16
 8010e64:	b2db      	uxtb	r3, r3
 8010e66:	330a      	adds	r3, #10
 8010e68:	b2da      	uxtb	r2, r3
 8010e6a:	68bb      	ldr	r3, [r7, #8]
 8010e6c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d11c      	bne.n	8010eae <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8010e74:	68bb      	ldr	r3, [r7, #8]
 8010e76:	78db      	ldrb	r3, [r3, #3]
 8010e78:	4618      	mov	r0, r3
 8010e7a:	f000 f941 	bl	8011100 <RTC_ByteToBcd2>
 8010e7e:	4603      	mov	r3, r0
 8010e80:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8010e82:	68bb      	ldr	r3, [r7, #8]
 8010e84:	785b      	ldrb	r3, [r3, #1]
 8010e86:	4618      	mov	r0, r3
 8010e88:	f000 f93a 	bl	8011100 <RTC_ByteToBcd2>
 8010e8c:	4603      	mov	r3, r0
 8010e8e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8010e90:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8010e92:	68bb      	ldr	r3, [r7, #8]
 8010e94:	789b      	ldrb	r3, [r3, #2]
 8010e96:	4618      	mov	r0, r3
 8010e98:	f000 f932 	bl	8011100 <RTC_ByteToBcd2>
 8010e9c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8010e9e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8010ea2:	68bb      	ldr	r3, [r7, #8]
 8010ea4:	781b      	ldrb	r3, [r3, #0]
 8010ea6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8010ea8:	4313      	orrs	r3, r2
 8010eaa:	617b      	str	r3, [r7, #20]
 8010eac:	e00e      	b.n	8010ecc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8010eae:	68bb      	ldr	r3, [r7, #8]
 8010eb0:	78db      	ldrb	r3, [r3, #3]
 8010eb2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8010eb4:	68bb      	ldr	r3, [r7, #8]
 8010eb6:	785b      	ldrb	r3, [r3, #1]
 8010eb8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8010eba:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8010ebc:	68ba      	ldr	r2, [r7, #8]
 8010ebe:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8010ec0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8010ec2:	68bb      	ldr	r3, [r7, #8]
 8010ec4:	781b      	ldrb	r3, [r3, #0]
 8010ec6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8010ec8:	4313      	orrs	r3, r2
 8010eca:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010ecc:	68fb      	ldr	r3, [r7, #12]
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	22ca      	movs	r2, #202	; 0xca
 8010ed2:	625a      	str	r2, [r3, #36]	; 0x24
 8010ed4:	68fb      	ldr	r3, [r7, #12]
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	2253      	movs	r2, #83	; 0x53
 8010eda:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8010edc:	68f8      	ldr	r0, [r7, #12]
 8010ede:	f000 f89b 	bl	8011018 <RTC_EnterInitMode>
 8010ee2:	4603      	mov	r3, r0
 8010ee4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8010ee6:	7cfb      	ldrb	r3, [r7, #19]
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d10b      	bne.n	8010f04 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8010eec:	4a0f      	ldr	r2, [pc, #60]	; (8010f2c <HAL_RTC_SetDate+0x10c>)
 8010eee:	697b      	ldr	r3, [r7, #20]
 8010ef0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010ef4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8010ef8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8010efa:	68f8      	ldr	r0, [r7, #12]
 8010efc:	f000 f8c2 	bl	8011084 <RTC_ExitInitMode>
 8010f00:	4603      	mov	r3, r0
 8010f02:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	22ff      	movs	r2, #255	; 0xff
 8010f0a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8010f0c:	7cfb      	ldrb	r3, [r7, #19]
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d103      	bne.n	8010f1a <HAL_RTC_SetDate+0xfa>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	2201      	movs	r2, #1
 8010f16:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	2200      	movs	r2, #0
 8010f1e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8010f22:	7cfb      	ldrb	r3, [r7, #19]
}
 8010f24:	4618      	mov	r0, r3
 8010f26:	371c      	adds	r7, #28
 8010f28:	46bd      	mov	sp, r7
 8010f2a:	bd90      	pop	{r4, r7, pc}
 8010f2c:	40002800 	.word	0x40002800

08010f30 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8010f30:	b580      	push	{r7, lr}
 8010f32:	b086      	sub	sp, #24
 8010f34:	af00      	add	r7, sp, #0
 8010f36:	60f8      	str	r0, [r7, #12]
 8010f38:	60b9      	str	r1, [r7, #8]
 8010f3a:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 8010f3c:	4b22      	ldr	r3, [pc, #136]	; (8010fc8 <HAL_RTC_GetDate+0x98>)
 8010f3e:	685b      	ldr	r3, [r3, #4]
 8010f40:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010f44:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8010f48:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8010f4a:	697b      	ldr	r3, [r7, #20]
 8010f4c:	0c1b      	lsrs	r3, r3, #16
 8010f4e:	b2da      	uxtb	r2, r3
 8010f50:	68bb      	ldr	r3, [r7, #8]
 8010f52:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8010f54:	697b      	ldr	r3, [r7, #20]
 8010f56:	0a1b      	lsrs	r3, r3, #8
 8010f58:	b2db      	uxtb	r3, r3
 8010f5a:	f003 031f 	and.w	r3, r3, #31
 8010f5e:	b2da      	uxtb	r2, r3
 8010f60:	68bb      	ldr	r3, [r7, #8]
 8010f62:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8010f64:	697b      	ldr	r3, [r7, #20]
 8010f66:	b2db      	uxtb	r3, r3
 8010f68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010f6c:	b2da      	uxtb	r2, r3
 8010f6e:	68bb      	ldr	r3, [r7, #8]
 8010f70:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8010f72:	697b      	ldr	r3, [r7, #20]
 8010f74:	0b5b      	lsrs	r3, r3, #13
 8010f76:	b2db      	uxtb	r3, r3
 8010f78:	f003 0307 	and.w	r3, r3, #7
 8010f7c:	b2da      	uxtb	r2, r3
 8010f7e:	68bb      	ldr	r3, [r7, #8]
 8010f80:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d11a      	bne.n	8010fbe <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8010f88:	68bb      	ldr	r3, [r7, #8]
 8010f8a:	78db      	ldrb	r3, [r3, #3]
 8010f8c:	4618      	mov	r0, r3
 8010f8e:	f000 f8d7 	bl	8011140 <RTC_Bcd2ToByte>
 8010f92:	4603      	mov	r3, r0
 8010f94:	461a      	mov	r2, r3
 8010f96:	68bb      	ldr	r3, [r7, #8]
 8010f98:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8010f9a:	68bb      	ldr	r3, [r7, #8]
 8010f9c:	785b      	ldrb	r3, [r3, #1]
 8010f9e:	4618      	mov	r0, r3
 8010fa0:	f000 f8ce 	bl	8011140 <RTC_Bcd2ToByte>
 8010fa4:	4603      	mov	r3, r0
 8010fa6:	461a      	mov	r2, r3
 8010fa8:	68bb      	ldr	r3, [r7, #8]
 8010faa:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8010fac:	68bb      	ldr	r3, [r7, #8]
 8010fae:	789b      	ldrb	r3, [r3, #2]
 8010fb0:	4618      	mov	r0, r3
 8010fb2:	f000 f8c5 	bl	8011140 <RTC_Bcd2ToByte>
 8010fb6:	4603      	mov	r3, r0
 8010fb8:	461a      	mov	r2, r3
 8010fba:	68bb      	ldr	r3, [r7, #8]
 8010fbc:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8010fbe:	2300      	movs	r3, #0
}
 8010fc0:	4618      	mov	r0, r3
 8010fc2:	3718      	adds	r7, #24
 8010fc4:	46bd      	mov	sp, r7
 8010fc6:	bd80      	pop	{r7, pc}
 8010fc8:	40002800 	.word	0x40002800

08010fcc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8010fcc:	b580      	push	{r7, lr}
 8010fce:	b084      	sub	sp, #16
 8010fd0:	af00      	add	r7, sp, #0
 8010fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	68da      	ldr	r2, [r3, #12]
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8010fe2:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
#endif

  tickstart = HAL_GetTick();
 8010fe4:	f7fd f974 	bl	800e2d0 <HAL_GetTick>
 8010fe8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8010fea:	e009      	b.n	8011000 <HAL_RTC_WaitForSynchro+0x34>
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8010fec:	f7fd f970 	bl	800e2d0 <HAL_GetTick>
 8010ff0:	4602      	mov	r2, r0
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	1ad3      	subs	r3, r2, r3
 8010ff6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010ffa:	d901      	bls.n	8011000 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8010ffc:	2303      	movs	r3, #3
 8010ffe:	e007      	b.n	8011010 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	68db      	ldr	r3, [r3, #12]
 8011006:	f003 0320 	and.w	r3, r3, #32
 801100a:	2b00      	cmp	r3, #0
 801100c:	d0ee      	beq.n	8010fec <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 801100e:	2300      	movs	r3, #0
}
 8011010:	4618      	mov	r0, r3
 8011012:	3710      	adds	r7, #16
 8011014:	46bd      	mov	sp, r7
 8011016:	bd80      	pop	{r7, pc}

08011018 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8011018:	b580      	push	{r7, lr}
 801101a:	b084      	sub	sp, #16
 801101c:	af00      	add	r7, sp, #0
 801101e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8011020:	2300      	movs	r3, #0
 8011022:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	68db      	ldr	r3, [r3, #12]
 801102a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801102e:	2b00      	cmp	r3, #0
 8011030:	d123      	bne.n	801107a <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	68da      	ldr	r2, [r3, #12]
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8011040:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8011042:	f7fd f945 	bl	800e2d0 <HAL_GetTick>
 8011046:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8011048:	e00d      	b.n	8011066 <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 801104a:	f7fd f941 	bl	800e2d0 <HAL_GetTick>
 801104e:	4602      	mov	r2, r0
 8011050:	68bb      	ldr	r3, [r7, #8]
 8011052:	1ad3      	subs	r3, r2, r3
 8011054:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011058:	d905      	bls.n	8011066 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 801105a:	2303      	movs	r3, #3
 801105c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	2203      	movs	r2, #3
 8011062:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	68db      	ldr	r3, [r3, #12]
 801106c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011070:	2b00      	cmp	r3, #0
 8011072:	d102      	bne.n	801107a <RTC_EnterInitMode+0x62>
 8011074:	7bfb      	ldrb	r3, [r7, #15]
 8011076:	2b03      	cmp	r3, #3
 8011078:	d1e7      	bne.n	801104a <RTC_EnterInitMode+0x32>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 801107a:	7bfb      	ldrb	r3, [r7, #15]
}
 801107c:	4618      	mov	r0, r3
 801107e:	3710      	adds	r7, #16
 8011080:	46bd      	mov	sp, r7
 8011082:	bd80      	pop	{r7, pc}

08011084 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8011084:	b580      	push	{r7, lr}
 8011086:	b084      	sub	sp, #16
 8011088:	af00      	add	r7, sp, #0
 801108a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801108c:	2300      	movs	r3, #0
 801108e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8011090:	4b1a      	ldr	r3, [pc, #104]	; (80110fc <RTC_ExitInitMode+0x78>)
 8011092:	68db      	ldr	r3, [r3, #12]
 8011094:	4a19      	ldr	r2, [pc, #100]	; (80110fc <RTC_ExitInitMode+0x78>)
 8011096:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801109a:	60d3      	str	r3, [r2, #12]
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 801109c:	4b17      	ldr	r3, [pc, #92]	; (80110fc <RTC_ExitInitMode+0x78>)
 801109e:	699b      	ldr	r3, [r3, #24]
 80110a0:	f003 0320 	and.w	r3, r3, #32
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d10c      	bne.n	80110c2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80110a8:	6878      	ldr	r0, [r7, #4]
 80110aa:	f7ff ff8f 	bl	8010fcc <HAL_RTC_WaitForSynchro>
 80110ae:	4603      	mov	r3, r0
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d01e      	beq.n	80110f2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	2203      	movs	r2, #3
 80110b8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      status = HAL_TIMEOUT;
 80110bc:	2303      	movs	r3, #3
 80110be:	73fb      	strb	r3, [r7, #15]
 80110c0:	e017      	b.n	80110f2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80110c2:	4b0e      	ldr	r3, [pc, #56]	; (80110fc <RTC_ExitInitMode+0x78>)
 80110c4:	699b      	ldr	r3, [r3, #24]
 80110c6:	4a0d      	ldr	r2, [pc, #52]	; (80110fc <RTC_ExitInitMode+0x78>)
 80110c8:	f023 0320 	bic.w	r3, r3, #32
 80110cc:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80110ce:	6878      	ldr	r0, [r7, #4]
 80110d0:	f7ff ff7c 	bl	8010fcc <HAL_RTC_WaitForSynchro>
 80110d4:	4603      	mov	r3, r0
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d005      	beq.n	80110e6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	2203      	movs	r2, #3
 80110de:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      status = HAL_TIMEOUT;
 80110e2:	2303      	movs	r3, #3
 80110e4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80110e6:	4b05      	ldr	r3, [pc, #20]	; (80110fc <RTC_ExitInitMode+0x78>)
 80110e8:	699b      	ldr	r3, [r3, #24]
 80110ea:	4a04      	ldr	r2, [pc, #16]	; (80110fc <RTC_ExitInitMode+0x78>)
 80110ec:	f043 0320 	orr.w	r3, r3, #32
 80110f0:	6193      	str	r3, [r2, #24]
  }

  return status;
 80110f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80110f4:	4618      	mov	r0, r3
 80110f6:	3710      	adds	r7, #16
 80110f8:	46bd      	mov	sp, r7
 80110fa:	bd80      	pop	{r7, pc}
 80110fc:	40002800 	.word	0x40002800

08011100 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8011100:	b480      	push	{r7}
 8011102:	b085      	sub	sp, #20
 8011104:	af00      	add	r7, sp, #0
 8011106:	4603      	mov	r3, r0
 8011108:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 801110a:	2300      	movs	r3, #0
 801110c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 801110e:	79fb      	ldrb	r3, [r7, #7]
 8011110:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8011112:	e005      	b.n	8011120 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	3301      	adds	r3, #1
 8011118:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 801111a:	7afb      	ldrb	r3, [r7, #11]
 801111c:	3b0a      	subs	r3, #10
 801111e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8011120:	7afb      	ldrb	r3, [r7, #11]
 8011122:	2b09      	cmp	r3, #9
 8011124:	d8f6      	bhi.n	8011114 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	b2db      	uxtb	r3, r3
 801112a:	011b      	lsls	r3, r3, #4
 801112c:	b2da      	uxtb	r2, r3
 801112e:	7afb      	ldrb	r3, [r7, #11]
 8011130:	4313      	orrs	r3, r2
 8011132:	b2db      	uxtb	r3, r3
}
 8011134:	4618      	mov	r0, r3
 8011136:	3714      	adds	r7, #20
 8011138:	46bd      	mov	sp, r7
 801113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801113e:	4770      	bx	lr

08011140 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8011140:	b480      	push	{r7}
 8011142:	b085      	sub	sp, #20
 8011144:	af00      	add	r7, sp, #0
 8011146:	4603      	mov	r3, r0
 8011148:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 801114a:	79fb      	ldrb	r3, [r7, #7]
 801114c:	091b      	lsrs	r3, r3, #4
 801114e:	b2db      	uxtb	r3, r3
 8011150:	461a      	mov	r2, r3
 8011152:	0092      	lsls	r2, r2, #2
 8011154:	4413      	add	r3, r2
 8011156:	005b      	lsls	r3, r3, #1
 8011158:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 801115a:	79fb      	ldrb	r3, [r7, #7]
 801115c:	f003 030f 	and.w	r3, r3, #15
 8011160:	b2da      	uxtb	r2, r3
 8011162:	7bfb      	ldrb	r3, [r7, #15]
 8011164:	4413      	add	r3, r2
 8011166:	b2db      	uxtb	r3, r3
}
 8011168:	4618      	mov	r0, r3
 801116a:	3714      	adds	r7, #20
 801116c:	46bd      	mov	sp, r7
 801116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011172:	4770      	bx	lr

08011174 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8011174:	b580      	push	{r7, lr}
 8011176:	b084      	sub	sp, #16
 8011178:	af00      	add	r7, sp, #0
 801117a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	2b00      	cmp	r3, #0
 8011180:	d101      	bne.n	8011186 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8011182:	2301      	movs	r3, #1
 8011184:	e095      	b.n	80112b2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801118a:	2b00      	cmp	r3, #0
 801118c:	d108      	bne.n	80111a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	685b      	ldr	r3, [r3, #4]
 8011192:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011196:	d009      	beq.n	80111ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	2200      	movs	r2, #0
 801119c:	61da      	str	r2, [r3, #28]
 801119e:	e005      	b.n	80111ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	2200      	movs	r2, #0
 80111a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	2200      	movs	r2, #0
 80111aa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	2200      	movs	r2, #0
 80111b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80111b8:	b2db      	uxtb	r3, r3
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d106      	bne.n	80111cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	2200      	movs	r2, #0
 80111c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80111c6:	6878      	ldr	r0, [r7, #4]
 80111c8:	f7fc f926 	bl	800d418 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	2202      	movs	r2, #2
 80111d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	681a      	ldr	r2, [r3, #0]
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	681b      	ldr	r3, [r3, #0]
 80111de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80111e2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	68db      	ldr	r3, [r3, #12]
 80111e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80111ec:	d902      	bls.n	80111f4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80111ee:	2300      	movs	r3, #0
 80111f0:	60fb      	str	r3, [r7, #12]
 80111f2:	e002      	b.n	80111fa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80111f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80111f8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	68db      	ldr	r3, [r3, #12]
 80111fe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8011202:	d007      	beq.n	8011214 <HAL_SPI_Init+0xa0>
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	68db      	ldr	r3, [r3, #12]
 8011208:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801120c:	d002      	beq.n	8011214 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	2200      	movs	r2, #0
 8011212:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	685b      	ldr	r3, [r3, #4]
 8011218:	f403 7282 	and.w	r2, r3, #260	; 0x104
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	689b      	ldr	r3, [r3, #8]
 8011220:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8011224:	431a      	orrs	r2, r3
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	691b      	ldr	r3, [r3, #16]
 801122a:	f003 0302 	and.w	r3, r3, #2
 801122e:	431a      	orrs	r2, r3
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	695b      	ldr	r3, [r3, #20]
 8011234:	f003 0301 	and.w	r3, r3, #1
 8011238:	431a      	orrs	r2, r3
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	699b      	ldr	r3, [r3, #24]
 801123e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011242:	431a      	orrs	r2, r3
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	69db      	ldr	r3, [r3, #28]
 8011248:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801124c:	431a      	orrs	r2, r3
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	6a1b      	ldr	r3, [r3, #32]
 8011252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011256:	ea42 0103 	orr.w	r1, r2, r3
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801125e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	430a      	orrs	r2, r1
 8011268:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	699b      	ldr	r3, [r3, #24]
 801126e:	0c1b      	lsrs	r3, r3, #16
 8011270:	f003 0204 	and.w	r2, r3, #4
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011278:	f003 0310 	and.w	r3, r3, #16
 801127c:	431a      	orrs	r2, r3
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011282:	f003 0308 	and.w	r3, r3, #8
 8011286:	431a      	orrs	r2, r3
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	68db      	ldr	r3, [r3, #12]
 801128c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8011290:	ea42 0103 	orr.w	r1, r2, r3
 8011294:	68fb      	ldr	r3, [r7, #12]
 8011296:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	430a      	orrs	r2, r1
 80112a0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	2200      	movs	r2, #0
 80112a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	2201      	movs	r2, #1
 80112ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80112b0:	2300      	movs	r3, #0
}
 80112b2:	4618      	mov	r0, r3
 80112b4:	3710      	adds	r7, #16
 80112b6:	46bd      	mov	sp, r7
 80112b8:	bd80      	pop	{r7, pc}

080112ba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80112ba:	b580      	push	{r7, lr}
 80112bc:	b088      	sub	sp, #32
 80112be:	af00      	add	r7, sp, #0
 80112c0:	60f8      	str	r0, [r7, #12]
 80112c2:	60b9      	str	r1, [r7, #8]
 80112c4:	603b      	str	r3, [r7, #0]
 80112c6:	4613      	mov	r3, r2
 80112c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80112ca:	2300      	movs	r3, #0
 80112cc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80112d4:	2b01      	cmp	r3, #1
 80112d6:	d101      	bne.n	80112dc <HAL_SPI_Transmit+0x22>
 80112d8:	2302      	movs	r3, #2
 80112da:	e158      	b.n	801158e <HAL_SPI_Transmit+0x2d4>
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	2201      	movs	r2, #1
 80112e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80112e4:	f7fc fff4 	bl	800e2d0 <HAL_GetTick>
 80112e8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80112ea:	88fb      	ldrh	r3, [r7, #6]
 80112ec:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80112f4:	b2db      	uxtb	r3, r3
 80112f6:	2b01      	cmp	r3, #1
 80112f8:	d002      	beq.n	8011300 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80112fa:	2302      	movs	r3, #2
 80112fc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80112fe:	e13d      	b.n	801157c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8011300:	68bb      	ldr	r3, [r7, #8]
 8011302:	2b00      	cmp	r3, #0
 8011304:	d002      	beq.n	801130c <HAL_SPI_Transmit+0x52>
 8011306:	88fb      	ldrh	r3, [r7, #6]
 8011308:	2b00      	cmp	r3, #0
 801130a:	d102      	bne.n	8011312 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 801130c:	2301      	movs	r3, #1
 801130e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8011310:	e134      	b.n	801157c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	2203      	movs	r2, #3
 8011316:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	2200      	movs	r2, #0
 801131e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	68ba      	ldr	r2, [r7, #8]
 8011324:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	88fa      	ldrh	r2, [r7, #6]
 801132a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	88fa      	ldrh	r2, [r7, #6]
 8011330:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	2200      	movs	r2, #0
 8011336:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	2200      	movs	r2, #0
 801133c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	2200      	movs	r2, #0
 8011344:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	2200      	movs	r2, #0
 801134c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	2200      	movs	r2, #0
 8011352:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	689b      	ldr	r3, [r3, #8]
 8011358:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801135c:	d10f      	bne.n	801137e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	681a      	ldr	r2, [r3, #0]
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801136c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	681a      	ldr	r2, [r3, #0]
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801137c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011388:	2b40      	cmp	r3, #64	; 0x40
 801138a:	d007      	beq.n	801139c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	681a      	ldr	r2, [r3, #0]
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801139a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	68db      	ldr	r3, [r3, #12]
 80113a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80113a4:	d94b      	bls.n	801143e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	685b      	ldr	r3, [r3, #4]
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d002      	beq.n	80113b4 <HAL_SPI_Transmit+0xfa>
 80113ae:	8afb      	ldrh	r3, [r7, #22]
 80113b0:	2b01      	cmp	r3, #1
 80113b2:	d13e      	bne.n	8011432 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113b8:	881a      	ldrh	r2, [r3, #0]
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113c4:	1c9a      	adds	r2, r3, #2
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80113ce:	b29b      	uxth	r3, r3
 80113d0:	3b01      	subs	r3, #1
 80113d2:	b29a      	uxth	r2, r3
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80113d8:	e02b      	b.n	8011432 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	689b      	ldr	r3, [r3, #8]
 80113e0:	f003 0302 	and.w	r3, r3, #2
 80113e4:	2b02      	cmp	r3, #2
 80113e6:	d112      	bne.n	801140e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113ec:	881a      	ldrh	r2, [r3, #0]
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80113f4:	68fb      	ldr	r3, [r7, #12]
 80113f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113f8:	1c9a      	adds	r2, r3, #2
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011402:	b29b      	uxth	r3, r3
 8011404:	3b01      	subs	r3, #1
 8011406:	b29a      	uxth	r2, r3
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	87da      	strh	r2, [r3, #62]	; 0x3e
 801140c:	e011      	b.n	8011432 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801140e:	f7fc ff5f 	bl	800e2d0 <HAL_GetTick>
 8011412:	4602      	mov	r2, r0
 8011414:	69bb      	ldr	r3, [r7, #24]
 8011416:	1ad3      	subs	r3, r2, r3
 8011418:	683a      	ldr	r2, [r7, #0]
 801141a:	429a      	cmp	r2, r3
 801141c:	d803      	bhi.n	8011426 <HAL_SPI_Transmit+0x16c>
 801141e:	683b      	ldr	r3, [r7, #0]
 8011420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011424:	d102      	bne.n	801142c <HAL_SPI_Transmit+0x172>
 8011426:	683b      	ldr	r3, [r7, #0]
 8011428:	2b00      	cmp	r3, #0
 801142a:	d102      	bne.n	8011432 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 801142c:	2303      	movs	r3, #3
 801142e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8011430:	e0a4      	b.n	801157c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011436:	b29b      	uxth	r3, r3
 8011438:	2b00      	cmp	r3, #0
 801143a:	d1ce      	bne.n	80113da <HAL_SPI_Transmit+0x120>
 801143c:	e07c      	b.n	8011538 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	685b      	ldr	r3, [r3, #4]
 8011442:	2b00      	cmp	r3, #0
 8011444:	d002      	beq.n	801144c <HAL_SPI_Transmit+0x192>
 8011446:	8afb      	ldrh	r3, [r7, #22]
 8011448:	2b01      	cmp	r3, #1
 801144a:	d170      	bne.n	801152e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 801144c:	68fb      	ldr	r3, [r7, #12]
 801144e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011450:	b29b      	uxth	r3, r3
 8011452:	2b01      	cmp	r3, #1
 8011454:	d912      	bls.n	801147c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801145a:	881a      	ldrh	r2, [r3, #0]
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011466:	1c9a      	adds	r2, r3, #2
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011470:	b29b      	uxth	r3, r3
 8011472:	3b02      	subs	r3, #2
 8011474:	b29a      	uxth	r2, r3
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	87da      	strh	r2, [r3, #62]	; 0x3e
 801147a:	e058      	b.n	801152e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011480:	68fb      	ldr	r3, [r7, #12]
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	330c      	adds	r3, #12
 8011486:	7812      	ldrb	r2, [r2, #0]
 8011488:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801148e:	1c5a      	adds	r2, r3, #1
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011498:	b29b      	uxth	r3, r3
 801149a:	3b01      	subs	r3, #1
 801149c:	b29a      	uxth	r2, r3
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80114a2:	e044      	b.n	801152e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	689b      	ldr	r3, [r3, #8]
 80114aa:	f003 0302 	and.w	r3, r3, #2
 80114ae:	2b02      	cmp	r3, #2
 80114b0:	d12b      	bne.n	801150a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80114b6:	b29b      	uxth	r3, r3
 80114b8:	2b01      	cmp	r3, #1
 80114ba:	d912      	bls.n	80114e2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114c0:	881a      	ldrh	r2, [r3, #0]
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114cc:	1c9a      	adds	r2, r3, #2
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80114d6:	b29b      	uxth	r3, r3
 80114d8:	3b02      	subs	r3, #2
 80114da:	b29a      	uxth	r2, r3
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80114e0:	e025      	b.n	801152e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80114e6:	68fb      	ldr	r3, [r7, #12]
 80114e8:	681b      	ldr	r3, [r3, #0]
 80114ea:	330c      	adds	r3, #12
 80114ec:	7812      	ldrb	r2, [r2, #0]
 80114ee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114f4:	1c5a      	adds	r2, r3, #1
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80114fe:	b29b      	uxth	r3, r3
 8011500:	3b01      	subs	r3, #1
 8011502:	b29a      	uxth	r2, r3
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	87da      	strh	r2, [r3, #62]	; 0x3e
 8011508:	e011      	b.n	801152e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801150a:	f7fc fee1 	bl	800e2d0 <HAL_GetTick>
 801150e:	4602      	mov	r2, r0
 8011510:	69bb      	ldr	r3, [r7, #24]
 8011512:	1ad3      	subs	r3, r2, r3
 8011514:	683a      	ldr	r2, [r7, #0]
 8011516:	429a      	cmp	r2, r3
 8011518:	d803      	bhi.n	8011522 <HAL_SPI_Transmit+0x268>
 801151a:	683b      	ldr	r3, [r7, #0]
 801151c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011520:	d102      	bne.n	8011528 <HAL_SPI_Transmit+0x26e>
 8011522:	683b      	ldr	r3, [r7, #0]
 8011524:	2b00      	cmp	r3, #0
 8011526:	d102      	bne.n	801152e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8011528:	2303      	movs	r3, #3
 801152a:	77fb      	strb	r3, [r7, #31]
          goto error;
 801152c:	e026      	b.n	801157c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011532:	b29b      	uxth	r3, r3
 8011534:	2b00      	cmp	r3, #0
 8011536:	d1b5      	bne.n	80114a4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8011538:	69ba      	ldr	r2, [r7, #24]
 801153a:	6839      	ldr	r1, [r7, #0]
 801153c:	68f8      	ldr	r0, [r7, #12]
 801153e:	f000 fce3 	bl	8011f08 <SPI_EndRxTxTransaction>
 8011542:	4603      	mov	r3, r0
 8011544:	2b00      	cmp	r3, #0
 8011546:	d002      	beq.n	801154e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	2220      	movs	r2, #32
 801154c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	689b      	ldr	r3, [r3, #8]
 8011552:	2b00      	cmp	r3, #0
 8011554:	d10a      	bne.n	801156c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011556:	2300      	movs	r3, #0
 8011558:	613b      	str	r3, [r7, #16]
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	68db      	ldr	r3, [r3, #12]
 8011560:	613b      	str	r3, [r7, #16]
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	689b      	ldr	r3, [r3, #8]
 8011568:	613b      	str	r3, [r7, #16]
 801156a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011570:	2b00      	cmp	r3, #0
 8011572:	d002      	beq.n	801157a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8011574:	2301      	movs	r3, #1
 8011576:	77fb      	strb	r3, [r7, #31]
 8011578:	e000      	b.n	801157c <HAL_SPI_Transmit+0x2c2>
  }

error:
 801157a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	2201      	movs	r2, #1
 8011580:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	2200      	movs	r2, #0
 8011588:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801158c:	7ffb      	ldrb	r3, [r7, #31]
}
 801158e:	4618      	mov	r0, r3
 8011590:	3720      	adds	r7, #32
 8011592:	46bd      	mov	sp, r7
 8011594:	bd80      	pop	{r7, pc}

08011596 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011596:	b580      	push	{r7, lr}
 8011598:	b088      	sub	sp, #32
 801159a:	af02      	add	r7, sp, #8
 801159c:	60f8      	str	r0, [r7, #12]
 801159e:	60b9      	str	r1, [r7, #8]
 80115a0:	603b      	str	r3, [r7, #0]
 80115a2:	4613      	mov	r3, r2
 80115a4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80115a6:	2300      	movs	r3, #0
 80115a8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	685b      	ldr	r3, [r3, #4]
 80115ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80115b2:	d112      	bne.n	80115da <HAL_SPI_Receive+0x44>
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	689b      	ldr	r3, [r3, #8]
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d10e      	bne.n	80115da <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	2204      	movs	r2, #4
 80115c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80115c4:	88fa      	ldrh	r2, [r7, #6]
 80115c6:	683b      	ldr	r3, [r7, #0]
 80115c8:	9300      	str	r3, [sp, #0]
 80115ca:	4613      	mov	r3, r2
 80115cc:	68ba      	ldr	r2, [r7, #8]
 80115ce:	68b9      	ldr	r1, [r7, #8]
 80115d0:	68f8      	ldr	r0, [r7, #12]
 80115d2:	f000 f910 	bl	80117f6 <HAL_SPI_TransmitReceive>
 80115d6:	4603      	mov	r3, r0
 80115d8:	e109      	b.n	80117ee <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80115e0:	2b01      	cmp	r3, #1
 80115e2:	d101      	bne.n	80115e8 <HAL_SPI_Receive+0x52>
 80115e4:	2302      	movs	r3, #2
 80115e6:	e102      	b.n	80117ee <HAL_SPI_Receive+0x258>
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	2201      	movs	r2, #1
 80115ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80115f0:	f7fc fe6e 	bl	800e2d0 <HAL_GetTick>
 80115f4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80115fc:	b2db      	uxtb	r3, r3
 80115fe:	2b01      	cmp	r3, #1
 8011600:	d002      	beq.n	8011608 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8011602:	2302      	movs	r3, #2
 8011604:	75fb      	strb	r3, [r7, #23]
    goto error;
 8011606:	e0e9      	b.n	80117dc <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8011608:	68bb      	ldr	r3, [r7, #8]
 801160a:	2b00      	cmp	r3, #0
 801160c:	d002      	beq.n	8011614 <HAL_SPI_Receive+0x7e>
 801160e:	88fb      	ldrh	r3, [r7, #6]
 8011610:	2b00      	cmp	r3, #0
 8011612:	d102      	bne.n	801161a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8011614:	2301      	movs	r3, #1
 8011616:	75fb      	strb	r3, [r7, #23]
    goto error;
 8011618:	e0e0      	b.n	80117dc <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	2204      	movs	r2, #4
 801161e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	2200      	movs	r2, #0
 8011626:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8011628:	68fb      	ldr	r3, [r7, #12]
 801162a:	68ba      	ldr	r2, [r7, #8]
 801162c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	88fa      	ldrh	r2, [r7, #6]
 8011632:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	88fa      	ldrh	r2, [r7, #6]
 801163a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	2200      	movs	r2, #0
 8011642:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8011644:	68fb      	ldr	r3, [r7, #12]
 8011646:	2200      	movs	r2, #0
 8011648:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	2200      	movs	r2, #0
 801164e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	2200      	movs	r2, #0
 8011654:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8011656:	68fb      	ldr	r3, [r7, #12]
 8011658:	2200      	movs	r2, #0
 801165a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	68db      	ldr	r3, [r3, #12]
 8011660:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8011664:	d908      	bls.n	8011678 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	685a      	ldr	r2, [r3, #4]
 801166c:	68fb      	ldr	r3, [r7, #12]
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8011674:	605a      	str	r2, [r3, #4]
 8011676:	e007      	b.n	8011688 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011678:	68fb      	ldr	r3, [r7, #12]
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	685a      	ldr	r2, [r3, #4]
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8011686:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	689b      	ldr	r3, [r3, #8]
 801168c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011690:	d10f      	bne.n	80116b2 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	681a      	ldr	r2, [r3, #0]
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80116a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	681a      	ldr	r2, [r3, #0]
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80116b0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80116bc:	2b40      	cmp	r3, #64	; 0x40
 80116be:	d007      	beq.n	80116d0 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	681a      	ldr	r2, [r3, #0]
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80116ce:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	68db      	ldr	r3, [r3, #12]
 80116d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80116d8:	d867      	bhi.n	80117aa <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80116da:	e030      	b.n	801173e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	689b      	ldr	r3, [r3, #8]
 80116e2:	f003 0301 	and.w	r3, r3, #1
 80116e6:	2b01      	cmp	r3, #1
 80116e8:	d117      	bne.n	801171a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	f103 020c 	add.w	r2, r3, #12
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80116f6:	7812      	ldrb	r2, [r2, #0]
 80116f8:	b2d2      	uxtb	r2, r2
 80116fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011700:	1c5a      	adds	r2, r3, #1
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801170c:	b29b      	uxth	r3, r3
 801170e:	3b01      	subs	r3, #1
 8011710:	b29a      	uxth	r2, r3
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8011718:	e011      	b.n	801173e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801171a:	f7fc fdd9 	bl	800e2d0 <HAL_GetTick>
 801171e:	4602      	mov	r2, r0
 8011720:	693b      	ldr	r3, [r7, #16]
 8011722:	1ad3      	subs	r3, r2, r3
 8011724:	683a      	ldr	r2, [r7, #0]
 8011726:	429a      	cmp	r2, r3
 8011728:	d803      	bhi.n	8011732 <HAL_SPI_Receive+0x19c>
 801172a:	683b      	ldr	r3, [r7, #0]
 801172c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011730:	d102      	bne.n	8011738 <HAL_SPI_Receive+0x1a2>
 8011732:	683b      	ldr	r3, [r7, #0]
 8011734:	2b00      	cmp	r3, #0
 8011736:	d102      	bne.n	801173e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8011738:	2303      	movs	r3, #3
 801173a:	75fb      	strb	r3, [r7, #23]
          goto error;
 801173c:	e04e      	b.n	80117dc <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8011744:	b29b      	uxth	r3, r3
 8011746:	2b00      	cmp	r3, #0
 8011748:	d1c8      	bne.n	80116dc <HAL_SPI_Receive+0x146>
 801174a:	e034      	b.n	80117b6 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	689b      	ldr	r3, [r3, #8]
 8011752:	f003 0301 	and.w	r3, r3, #1
 8011756:	2b01      	cmp	r3, #1
 8011758:	d115      	bne.n	8011786 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	68da      	ldr	r2, [r3, #12]
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011764:	b292      	uxth	r2, r2
 8011766:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801176c:	1c9a      	adds	r2, r3, #2
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8011778:	b29b      	uxth	r3, r3
 801177a:	3b01      	subs	r3, #1
 801177c:	b29a      	uxth	r2, r3
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8011784:	e011      	b.n	80117aa <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011786:	f7fc fda3 	bl	800e2d0 <HAL_GetTick>
 801178a:	4602      	mov	r2, r0
 801178c:	693b      	ldr	r3, [r7, #16]
 801178e:	1ad3      	subs	r3, r2, r3
 8011790:	683a      	ldr	r2, [r7, #0]
 8011792:	429a      	cmp	r2, r3
 8011794:	d803      	bhi.n	801179e <HAL_SPI_Receive+0x208>
 8011796:	683b      	ldr	r3, [r7, #0]
 8011798:	f1b3 3fff 	cmp.w	r3, #4294967295
 801179c:	d102      	bne.n	80117a4 <HAL_SPI_Receive+0x20e>
 801179e:	683b      	ldr	r3, [r7, #0]
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d102      	bne.n	80117aa <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80117a4:	2303      	movs	r3, #3
 80117a6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80117a8:	e018      	b.n	80117dc <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80117b0:	b29b      	uxth	r3, r3
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d1ca      	bne.n	801174c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80117b6:	693a      	ldr	r2, [r7, #16]
 80117b8:	6839      	ldr	r1, [r7, #0]
 80117ba:	68f8      	ldr	r0, [r7, #12]
 80117bc:	f000 fb4c 	bl	8011e58 <SPI_EndRxTransaction>
 80117c0:	4603      	mov	r3, r0
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d002      	beq.n	80117cc <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	2220      	movs	r2, #32
 80117ca:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d002      	beq.n	80117da <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80117d4:	2301      	movs	r3, #1
 80117d6:	75fb      	strb	r3, [r7, #23]
 80117d8:	e000      	b.n	80117dc <HAL_SPI_Receive+0x246>
  }

error :
 80117da:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	2201      	movs	r2, #1
 80117e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	2200      	movs	r2, #0
 80117e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80117ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80117ee:	4618      	mov	r0, r3
 80117f0:	3718      	adds	r7, #24
 80117f2:	46bd      	mov	sp, r7
 80117f4:	bd80      	pop	{r7, pc}

080117f6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80117f6:	b580      	push	{r7, lr}
 80117f8:	b08a      	sub	sp, #40	; 0x28
 80117fa:	af00      	add	r7, sp, #0
 80117fc:	60f8      	str	r0, [r7, #12]
 80117fe:	60b9      	str	r1, [r7, #8]
 8011800:	607a      	str	r2, [r7, #4]
 8011802:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8011804:	2301      	movs	r3, #1
 8011806:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8011808:	2300      	movs	r3, #0
 801180a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8011814:	2b01      	cmp	r3, #1
 8011816:	d101      	bne.n	801181c <HAL_SPI_TransmitReceive+0x26>
 8011818:	2302      	movs	r3, #2
 801181a:	e1fb      	b.n	8011c14 <HAL_SPI_TransmitReceive+0x41e>
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	2201      	movs	r2, #1
 8011820:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8011824:	f7fc fd54 	bl	800e2d0 <HAL_GetTick>
 8011828:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8011830:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	685b      	ldr	r3, [r3, #4]
 8011836:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8011838:	887b      	ldrh	r3, [r7, #2]
 801183a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 801183c:	887b      	ldrh	r3, [r7, #2]
 801183e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8011840:	7efb      	ldrb	r3, [r7, #27]
 8011842:	2b01      	cmp	r3, #1
 8011844:	d00e      	beq.n	8011864 <HAL_SPI_TransmitReceive+0x6e>
 8011846:	697b      	ldr	r3, [r7, #20]
 8011848:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801184c:	d106      	bne.n	801185c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801184e:	68fb      	ldr	r3, [r7, #12]
 8011850:	689b      	ldr	r3, [r3, #8]
 8011852:	2b00      	cmp	r3, #0
 8011854:	d102      	bne.n	801185c <HAL_SPI_TransmitReceive+0x66>
 8011856:	7efb      	ldrb	r3, [r7, #27]
 8011858:	2b04      	cmp	r3, #4
 801185a:	d003      	beq.n	8011864 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 801185c:	2302      	movs	r3, #2
 801185e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8011862:	e1cd      	b.n	8011c00 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8011864:	68bb      	ldr	r3, [r7, #8]
 8011866:	2b00      	cmp	r3, #0
 8011868:	d005      	beq.n	8011876 <HAL_SPI_TransmitReceive+0x80>
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	2b00      	cmp	r3, #0
 801186e:	d002      	beq.n	8011876 <HAL_SPI_TransmitReceive+0x80>
 8011870:	887b      	ldrh	r3, [r7, #2]
 8011872:	2b00      	cmp	r3, #0
 8011874:	d103      	bne.n	801187e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8011876:	2301      	movs	r3, #1
 8011878:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801187c:	e1c0      	b.n	8011c00 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8011884:	b2db      	uxtb	r3, r3
 8011886:	2b04      	cmp	r3, #4
 8011888:	d003      	beq.n	8011892 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	2205      	movs	r2, #5
 801188e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	2200      	movs	r2, #0
 8011896:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	687a      	ldr	r2, [r7, #4]
 801189c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	887a      	ldrh	r2, [r7, #2]
 80118a2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	887a      	ldrh	r2, [r7, #2]
 80118aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80118ae:	68fb      	ldr	r3, [r7, #12]
 80118b0:	68ba      	ldr	r2, [r7, #8]
 80118b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	887a      	ldrh	r2, [r7, #2]
 80118b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	887a      	ldrh	r2, [r7, #2]
 80118be:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80118c0:	68fb      	ldr	r3, [r7, #12]
 80118c2:	2200      	movs	r2, #0
 80118c4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	2200      	movs	r2, #0
 80118ca:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	68db      	ldr	r3, [r3, #12]
 80118d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80118d4:	d802      	bhi.n	80118dc <HAL_SPI_TransmitReceive+0xe6>
 80118d6:	8a3b      	ldrh	r3, [r7, #16]
 80118d8:	2b01      	cmp	r3, #1
 80118da:	d908      	bls.n	80118ee <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	685a      	ldr	r2, [r3, #4]
 80118e2:	68fb      	ldr	r3, [r7, #12]
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80118ea:	605a      	str	r2, [r3, #4]
 80118ec:	e007      	b.n	80118fe <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80118ee:	68fb      	ldr	r3, [r7, #12]
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	685a      	ldr	r2, [r3, #4]
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80118fc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80118fe:	68fb      	ldr	r3, [r7, #12]
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011908:	2b40      	cmp	r3, #64	; 0x40
 801190a:	d007      	beq.n	801191c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	681a      	ldr	r2, [r3, #0]
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801191a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	68db      	ldr	r3, [r3, #12]
 8011920:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8011924:	d97c      	bls.n	8011a20 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	685b      	ldr	r3, [r3, #4]
 801192a:	2b00      	cmp	r3, #0
 801192c:	d002      	beq.n	8011934 <HAL_SPI_TransmitReceive+0x13e>
 801192e:	8a7b      	ldrh	r3, [r7, #18]
 8011930:	2b01      	cmp	r3, #1
 8011932:	d169      	bne.n	8011a08 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011934:	68fb      	ldr	r3, [r7, #12]
 8011936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011938:	881a      	ldrh	r2, [r3, #0]
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8011940:	68fb      	ldr	r3, [r7, #12]
 8011942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011944:	1c9a      	adds	r2, r3, #2
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801194a:	68fb      	ldr	r3, [r7, #12]
 801194c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801194e:	b29b      	uxth	r3, r3
 8011950:	3b01      	subs	r3, #1
 8011952:	b29a      	uxth	r2, r3
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011958:	e056      	b.n	8011a08 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	689b      	ldr	r3, [r3, #8]
 8011960:	f003 0302 	and.w	r3, r3, #2
 8011964:	2b02      	cmp	r3, #2
 8011966:	d11b      	bne.n	80119a0 <HAL_SPI_TransmitReceive+0x1aa>
 8011968:	68fb      	ldr	r3, [r7, #12]
 801196a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801196c:	b29b      	uxth	r3, r3
 801196e:	2b00      	cmp	r3, #0
 8011970:	d016      	beq.n	80119a0 <HAL_SPI_TransmitReceive+0x1aa>
 8011972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011974:	2b01      	cmp	r3, #1
 8011976:	d113      	bne.n	80119a0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011978:	68fb      	ldr	r3, [r7, #12]
 801197a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801197c:	881a      	ldrh	r2, [r3, #0]
 801197e:	68fb      	ldr	r3, [r7, #12]
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011984:	68fb      	ldr	r3, [r7, #12]
 8011986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011988:	1c9a      	adds	r2, r3, #2
 801198a:	68fb      	ldr	r3, [r7, #12]
 801198c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801198e:	68fb      	ldr	r3, [r7, #12]
 8011990:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011992:	b29b      	uxth	r3, r3
 8011994:	3b01      	subs	r3, #1
 8011996:	b29a      	uxth	r2, r3
 8011998:	68fb      	ldr	r3, [r7, #12]
 801199a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801199c:	2300      	movs	r3, #0
 801199e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80119a0:	68fb      	ldr	r3, [r7, #12]
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	689b      	ldr	r3, [r3, #8]
 80119a6:	f003 0301 	and.w	r3, r3, #1
 80119aa:	2b01      	cmp	r3, #1
 80119ac:	d11c      	bne.n	80119e8 <HAL_SPI_TransmitReceive+0x1f2>
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80119b4:	b29b      	uxth	r3, r3
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d016      	beq.n	80119e8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80119ba:	68fb      	ldr	r3, [r7, #12]
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	68da      	ldr	r2, [r3, #12]
 80119c0:	68fb      	ldr	r3, [r7, #12]
 80119c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80119c4:	b292      	uxth	r2, r2
 80119c6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80119c8:	68fb      	ldr	r3, [r7, #12]
 80119ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80119cc:	1c9a      	adds	r2, r3, #2
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80119d8:	b29b      	uxth	r3, r3
 80119da:	3b01      	subs	r3, #1
 80119dc:	b29a      	uxth	r2, r3
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80119e4:	2301      	movs	r3, #1
 80119e6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80119e8:	f7fc fc72 	bl	800e2d0 <HAL_GetTick>
 80119ec:	4602      	mov	r2, r0
 80119ee:	69fb      	ldr	r3, [r7, #28]
 80119f0:	1ad3      	subs	r3, r2, r3
 80119f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80119f4:	429a      	cmp	r2, r3
 80119f6:	d807      	bhi.n	8011a08 <HAL_SPI_TransmitReceive+0x212>
 80119f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119fe:	d003      	beq.n	8011a08 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8011a00:	2303      	movs	r3, #3
 8011a02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8011a06:	e0fb      	b.n	8011c00 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011a08:	68fb      	ldr	r3, [r7, #12]
 8011a0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011a0c:	b29b      	uxth	r3, r3
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d1a3      	bne.n	801195a <HAL_SPI_TransmitReceive+0x164>
 8011a12:	68fb      	ldr	r3, [r7, #12]
 8011a14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8011a18:	b29b      	uxth	r3, r3
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d19d      	bne.n	801195a <HAL_SPI_TransmitReceive+0x164>
 8011a1e:	e0df      	b.n	8011be0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	685b      	ldr	r3, [r3, #4]
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d003      	beq.n	8011a30 <HAL_SPI_TransmitReceive+0x23a>
 8011a28:	8a7b      	ldrh	r3, [r7, #18]
 8011a2a:	2b01      	cmp	r3, #1
 8011a2c:	f040 80cb 	bne.w	8011bc6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8011a30:	68fb      	ldr	r3, [r7, #12]
 8011a32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011a34:	b29b      	uxth	r3, r3
 8011a36:	2b01      	cmp	r3, #1
 8011a38:	d912      	bls.n	8011a60 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011a3a:	68fb      	ldr	r3, [r7, #12]
 8011a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a3e:	881a      	ldrh	r2, [r3, #0]
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011a46:	68fb      	ldr	r3, [r7, #12]
 8011a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a4a:	1c9a      	adds	r2, r3, #2
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8011a50:	68fb      	ldr	r3, [r7, #12]
 8011a52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011a54:	b29b      	uxth	r3, r3
 8011a56:	3b02      	subs	r3, #2
 8011a58:	b29a      	uxth	r2, r3
 8011a5a:	68fb      	ldr	r3, [r7, #12]
 8011a5c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8011a5e:	e0b2      	b.n	8011bc6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011a64:	68fb      	ldr	r3, [r7, #12]
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	330c      	adds	r3, #12
 8011a6a:	7812      	ldrb	r2, [r2, #0]
 8011a6c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a72:	1c5a      	adds	r2, r3, #1
 8011a74:	68fb      	ldr	r3, [r7, #12]
 8011a76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8011a78:	68fb      	ldr	r3, [r7, #12]
 8011a7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011a7c:	b29b      	uxth	r3, r3
 8011a7e:	3b01      	subs	r3, #1
 8011a80:	b29a      	uxth	r2, r3
 8011a82:	68fb      	ldr	r3, [r7, #12]
 8011a84:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011a86:	e09e      	b.n	8011bc6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	689b      	ldr	r3, [r3, #8]
 8011a8e:	f003 0302 	and.w	r3, r3, #2
 8011a92:	2b02      	cmp	r3, #2
 8011a94:	d134      	bne.n	8011b00 <HAL_SPI_TransmitReceive+0x30a>
 8011a96:	68fb      	ldr	r3, [r7, #12]
 8011a98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011a9a:	b29b      	uxth	r3, r3
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d02f      	beq.n	8011b00 <HAL_SPI_TransmitReceive+0x30a>
 8011aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011aa2:	2b01      	cmp	r3, #1
 8011aa4:	d12c      	bne.n	8011b00 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011aaa:	b29b      	uxth	r3, r3
 8011aac:	2b01      	cmp	r3, #1
 8011aae:	d912      	bls.n	8011ad6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ab4:	881a      	ldrh	r2, [r3, #0]
 8011ab6:	68fb      	ldr	r3, [r7, #12]
 8011ab8:	681b      	ldr	r3, [r3, #0]
 8011aba:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ac0:	1c9a      	adds	r2, r3, #2
 8011ac2:	68fb      	ldr	r3, [r7, #12]
 8011ac4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011aca:	b29b      	uxth	r3, r3
 8011acc:	3b02      	subs	r3, #2
 8011ace:	b29a      	uxth	r2, r3
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8011ad4:	e012      	b.n	8011afc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	330c      	adds	r3, #12
 8011ae0:	7812      	ldrb	r2, [r2, #0]
 8011ae2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ae8:	1c5a      	adds	r2, r3, #1
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8011aee:	68fb      	ldr	r3, [r7, #12]
 8011af0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011af2:	b29b      	uxth	r3, r3
 8011af4:	3b01      	subs	r3, #1
 8011af6:	b29a      	uxth	r2, r3
 8011af8:	68fb      	ldr	r3, [r7, #12]
 8011afa:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8011afc:	2300      	movs	r3, #0
 8011afe:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8011b00:	68fb      	ldr	r3, [r7, #12]
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	689b      	ldr	r3, [r3, #8]
 8011b06:	f003 0301 	and.w	r3, r3, #1
 8011b0a:	2b01      	cmp	r3, #1
 8011b0c:	d148      	bne.n	8011ba0 <HAL_SPI_TransmitReceive+0x3aa>
 8011b0e:	68fb      	ldr	r3, [r7, #12]
 8011b10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8011b14:	b29b      	uxth	r3, r3
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d042      	beq.n	8011ba0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8011b20:	b29b      	uxth	r3, r3
 8011b22:	2b01      	cmp	r3, #1
 8011b24:	d923      	bls.n	8011b6e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	68da      	ldr	r2, [r3, #12]
 8011b2c:	68fb      	ldr	r3, [r7, #12]
 8011b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b30:	b292      	uxth	r2, r2
 8011b32:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8011b34:	68fb      	ldr	r3, [r7, #12]
 8011b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b38:	1c9a      	adds	r2, r3, #2
 8011b3a:	68fb      	ldr	r3, [r7, #12]
 8011b3c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8011b44:	b29b      	uxth	r3, r3
 8011b46:	3b02      	subs	r3, #2
 8011b48:	b29a      	uxth	r2, r3
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8011b50:	68fb      	ldr	r3, [r7, #12]
 8011b52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8011b56:	b29b      	uxth	r3, r3
 8011b58:	2b01      	cmp	r3, #1
 8011b5a:	d81f      	bhi.n	8011b9c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011b5c:	68fb      	ldr	r3, [r7, #12]
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	685a      	ldr	r2, [r3, #4]
 8011b62:	68fb      	ldr	r3, [r7, #12]
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8011b6a:	605a      	str	r2, [r3, #4]
 8011b6c:	e016      	b.n	8011b9c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	681b      	ldr	r3, [r3, #0]
 8011b72:	f103 020c 	add.w	r2, r3, #12
 8011b76:	68fb      	ldr	r3, [r7, #12]
 8011b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b7a:	7812      	ldrb	r2, [r2, #0]
 8011b7c:	b2d2      	uxtb	r2, r2
 8011b7e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b84:	1c5a      	adds	r2, r3, #1
 8011b86:	68fb      	ldr	r3, [r7, #12]
 8011b88:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8011b90:	b29b      	uxth	r3, r3
 8011b92:	3b01      	subs	r3, #1
 8011b94:	b29a      	uxth	r2, r3
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8011b9c:	2301      	movs	r3, #1
 8011b9e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8011ba0:	f7fc fb96 	bl	800e2d0 <HAL_GetTick>
 8011ba4:	4602      	mov	r2, r0
 8011ba6:	69fb      	ldr	r3, [r7, #28]
 8011ba8:	1ad3      	subs	r3, r2, r3
 8011baa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011bac:	429a      	cmp	r2, r3
 8011bae:	d803      	bhi.n	8011bb8 <HAL_SPI_TransmitReceive+0x3c2>
 8011bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011bb6:	d102      	bne.n	8011bbe <HAL_SPI_TransmitReceive+0x3c8>
 8011bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d103      	bne.n	8011bc6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8011bbe:	2303      	movs	r3, #3
 8011bc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8011bc4:	e01c      	b.n	8011c00 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011bca:	b29b      	uxth	r3, r3
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	f47f af5b 	bne.w	8011a88 <HAL_SPI_TransmitReceive+0x292>
 8011bd2:	68fb      	ldr	r3, [r7, #12]
 8011bd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8011bd8:	b29b      	uxth	r3, r3
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	f47f af54 	bne.w	8011a88 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8011be0:	69fa      	ldr	r2, [r7, #28]
 8011be2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011be4:	68f8      	ldr	r0, [r7, #12]
 8011be6:	f000 f98f 	bl	8011f08 <SPI_EndRxTxTransaction>
 8011bea:	4603      	mov	r3, r0
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d006      	beq.n	8011bfe <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8011bf0:	2301      	movs	r3, #1
 8011bf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8011bf6:	68fb      	ldr	r3, [r7, #12]
 8011bf8:	2220      	movs	r2, #32
 8011bfa:	661a      	str	r2, [r3, #96]	; 0x60
 8011bfc:	e000      	b.n	8011c00 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8011bfe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	2201      	movs	r2, #1
 8011c04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	2200      	movs	r2, #0
 8011c0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8011c10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8011c14:	4618      	mov	r0, r3
 8011c16:	3728      	adds	r7, #40	; 0x28
 8011c18:	46bd      	mov	sp, r7
 8011c1a:	bd80      	pop	{r7, pc}

08011c1c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8011c1c:	b580      	push	{r7, lr}
 8011c1e:	b088      	sub	sp, #32
 8011c20:	af00      	add	r7, sp, #0
 8011c22:	60f8      	str	r0, [r7, #12]
 8011c24:	60b9      	str	r1, [r7, #8]
 8011c26:	603b      	str	r3, [r7, #0]
 8011c28:	4613      	mov	r3, r2
 8011c2a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8011c2c:	f7fc fb50 	bl	800e2d0 <HAL_GetTick>
 8011c30:	4602      	mov	r2, r0
 8011c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c34:	1a9b      	subs	r3, r3, r2
 8011c36:	683a      	ldr	r2, [r7, #0]
 8011c38:	4413      	add	r3, r2
 8011c3a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8011c3c:	f7fc fb48 	bl	800e2d0 <HAL_GetTick>
 8011c40:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8011c42:	4b39      	ldr	r3, [pc, #228]	; (8011d28 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8011c44:	681b      	ldr	r3, [r3, #0]
 8011c46:	015b      	lsls	r3, r3, #5
 8011c48:	0d1b      	lsrs	r3, r3, #20
 8011c4a:	69fa      	ldr	r2, [r7, #28]
 8011c4c:	fb02 f303 	mul.w	r3, r2, r3
 8011c50:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8011c52:	e054      	b.n	8011cfe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8011c54:	683b      	ldr	r3, [r7, #0]
 8011c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c5a:	d050      	beq.n	8011cfe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8011c5c:	f7fc fb38 	bl	800e2d0 <HAL_GetTick>
 8011c60:	4602      	mov	r2, r0
 8011c62:	69bb      	ldr	r3, [r7, #24]
 8011c64:	1ad3      	subs	r3, r2, r3
 8011c66:	69fa      	ldr	r2, [r7, #28]
 8011c68:	429a      	cmp	r2, r3
 8011c6a:	d902      	bls.n	8011c72 <SPI_WaitFlagStateUntilTimeout+0x56>
 8011c6c:	69fb      	ldr	r3, [r7, #28]
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d13d      	bne.n	8011cee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	685a      	ldr	r2, [r3, #4]
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	681b      	ldr	r3, [r3, #0]
 8011c7c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8011c80:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	685b      	ldr	r3, [r3, #4]
 8011c86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011c8a:	d111      	bne.n	8011cb0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	689b      	ldr	r3, [r3, #8]
 8011c90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011c94:	d004      	beq.n	8011ca0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	689b      	ldr	r3, [r3, #8]
 8011c9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011c9e:	d107      	bne.n	8011cb0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	681a      	ldr	r2, [r3, #0]
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011cae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011cb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011cb8:	d10f      	bne.n	8011cda <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	681a      	ldr	r2, [r3, #0]
 8011cc0:	68fb      	ldr	r3, [r7, #12]
 8011cc2:	681b      	ldr	r3, [r3, #0]
 8011cc4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8011cc8:	601a      	str	r2, [r3, #0]
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	681a      	ldr	r2, [r3, #0]
 8011cd0:	68fb      	ldr	r3, [r7, #12]
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8011cd8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	2201      	movs	r2, #1
 8011cde:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8011ce2:	68fb      	ldr	r3, [r7, #12]
 8011ce4:	2200      	movs	r2, #0
 8011ce6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8011cea:	2303      	movs	r3, #3
 8011cec:	e017      	b.n	8011d1e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8011cee:	697b      	ldr	r3, [r7, #20]
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d101      	bne.n	8011cf8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8011cf4:	2300      	movs	r3, #0
 8011cf6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8011cf8:	697b      	ldr	r3, [r7, #20]
 8011cfa:	3b01      	subs	r3, #1
 8011cfc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	689a      	ldr	r2, [r3, #8]
 8011d04:	68bb      	ldr	r3, [r7, #8]
 8011d06:	4013      	ands	r3, r2
 8011d08:	68ba      	ldr	r2, [r7, #8]
 8011d0a:	429a      	cmp	r2, r3
 8011d0c:	bf0c      	ite	eq
 8011d0e:	2301      	moveq	r3, #1
 8011d10:	2300      	movne	r3, #0
 8011d12:	b2db      	uxtb	r3, r3
 8011d14:	461a      	mov	r2, r3
 8011d16:	79fb      	ldrb	r3, [r7, #7]
 8011d18:	429a      	cmp	r2, r3
 8011d1a:	d19b      	bne.n	8011c54 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8011d1c:	2300      	movs	r3, #0
}
 8011d1e:	4618      	mov	r0, r3
 8011d20:	3720      	adds	r7, #32
 8011d22:	46bd      	mov	sp, r7
 8011d24:	bd80      	pop	{r7, pc}
 8011d26:	bf00      	nop
 8011d28:	20000094 	.word	0x20000094

08011d2c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8011d2c:	b580      	push	{r7, lr}
 8011d2e:	b08a      	sub	sp, #40	; 0x28
 8011d30:	af00      	add	r7, sp, #0
 8011d32:	60f8      	str	r0, [r7, #12]
 8011d34:	60b9      	str	r1, [r7, #8]
 8011d36:	607a      	str	r2, [r7, #4]
 8011d38:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8011d3a:	2300      	movs	r3, #0
 8011d3c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8011d3e:	f7fc fac7 	bl	800e2d0 <HAL_GetTick>
 8011d42:	4602      	mov	r2, r0
 8011d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d46:	1a9b      	subs	r3, r3, r2
 8011d48:	683a      	ldr	r2, [r7, #0]
 8011d4a:	4413      	add	r3, r2
 8011d4c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8011d4e:	f7fc fabf 	bl	800e2d0 <HAL_GetTick>
 8011d52:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8011d54:	68fb      	ldr	r3, [r7, #12]
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	330c      	adds	r3, #12
 8011d5a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8011d5c:	4b3d      	ldr	r3, [pc, #244]	; (8011e54 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8011d5e:	681a      	ldr	r2, [r3, #0]
 8011d60:	4613      	mov	r3, r2
 8011d62:	009b      	lsls	r3, r3, #2
 8011d64:	4413      	add	r3, r2
 8011d66:	00da      	lsls	r2, r3, #3
 8011d68:	1ad3      	subs	r3, r2, r3
 8011d6a:	0d1b      	lsrs	r3, r3, #20
 8011d6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d6e:	fb02 f303 	mul.w	r3, r2, r3
 8011d72:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8011d74:	e060      	b.n	8011e38 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8011d76:	68bb      	ldr	r3, [r7, #8]
 8011d78:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8011d7c:	d107      	bne.n	8011d8e <SPI_WaitFifoStateUntilTimeout+0x62>
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d104      	bne.n	8011d8e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8011d84:	69fb      	ldr	r3, [r7, #28]
 8011d86:	781b      	ldrb	r3, [r3, #0]
 8011d88:	b2db      	uxtb	r3, r3
 8011d8a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8011d8c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8011d8e:	683b      	ldr	r3, [r7, #0]
 8011d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d94:	d050      	beq.n	8011e38 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8011d96:	f7fc fa9b 	bl	800e2d0 <HAL_GetTick>
 8011d9a:	4602      	mov	r2, r0
 8011d9c:	6a3b      	ldr	r3, [r7, #32]
 8011d9e:	1ad3      	subs	r3, r2, r3
 8011da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011da2:	429a      	cmp	r2, r3
 8011da4:	d902      	bls.n	8011dac <SPI_WaitFifoStateUntilTimeout+0x80>
 8011da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d13d      	bne.n	8011e28 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	685a      	ldr	r2, [r3, #4]
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	681b      	ldr	r3, [r3, #0]
 8011db6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8011dba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	685b      	ldr	r3, [r3, #4]
 8011dc0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011dc4:	d111      	bne.n	8011dea <SPI_WaitFifoStateUntilTimeout+0xbe>
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	689b      	ldr	r3, [r3, #8]
 8011dca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011dce:	d004      	beq.n	8011dda <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	689b      	ldr	r3, [r3, #8]
 8011dd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011dd8:	d107      	bne.n	8011dea <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	681a      	ldr	r2, [r3, #0]
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011de8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011dee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011df2:	d10f      	bne.n	8011e14 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8011df4:	68fb      	ldr	r3, [r7, #12]
 8011df6:	681b      	ldr	r3, [r3, #0]
 8011df8:	681a      	ldr	r2, [r3, #0]
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8011e02:	601a      	str	r2, [r3, #0]
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	681a      	ldr	r2, [r3, #0]
 8011e0a:	68fb      	ldr	r3, [r7, #12]
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8011e12:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	2201      	movs	r2, #1
 8011e18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	2200      	movs	r2, #0
 8011e20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8011e24:	2303      	movs	r3, #3
 8011e26:	e010      	b.n	8011e4a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8011e28:	69bb      	ldr	r3, [r7, #24]
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d101      	bne.n	8011e32 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8011e2e:	2300      	movs	r3, #0
 8011e30:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8011e32:	69bb      	ldr	r3, [r7, #24]
 8011e34:	3b01      	subs	r3, #1
 8011e36:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8011e38:	68fb      	ldr	r3, [r7, #12]
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	689a      	ldr	r2, [r3, #8]
 8011e3e:	68bb      	ldr	r3, [r7, #8]
 8011e40:	4013      	ands	r3, r2
 8011e42:	687a      	ldr	r2, [r7, #4]
 8011e44:	429a      	cmp	r2, r3
 8011e46:	d196      	bne.n	8011d76 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8011e48:	2300      	movs	r3, #0
}
 8011e4a:	4618      	mov	r0, r3
 8011e4c:	3728      	adds	r7, #40	; 0x28
 8011e4e:	46bd      	mov	sp, r7
 8011e50:	bd80      	pop	{r7, pc}
 8011e52:	bf00      	nop
 8011e54:	20000094 	.word	0x20000094

08011e58 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8011e58:	b580      	push	{r7, lr}
 8011e5a:	b086      	sub	sp, #24
 8011e5c:	af02      	add	r7, sp, #8
 8011e5e:	60f8      	str	r0, [r7, #12]
 8011e60:	60b9      	str	r1, [r7, #8]
 8011e62:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	685b      	ldr	r3, [r3, #4]
 8011e68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011e6c:	d111      	bne.n	8011e92 <SPI_EndRxTransaction+0x3a>
 8011e6e:	68fb      	ldr	r3, [r7, #12]
 8011e70:	689b      	ldr	r3, [r3, #8]
 8011e72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011e76:	d004      	beq.n	8011e82 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8011e78:	68fb      	ldr	r3, [r7, #12]
 8011e7a:	689b      	ldr	r3, [r3, #8]
 8011e7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011e80:	d107      	bne.n	8011e92 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8011e82:	68fb      	ldr	r3, [r7, #12]
 8011e84:	681b      	ldr	r3, [r3, #0]
 8011e86:	681a      	ldr	r2, [r3, #0]
 8011e88:	68fb      	ldr	r3, [r7, #12]
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011e90:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	9300      	str	r3, [sp, #0]
 8011e96:	68bb      	ldr	r3, [r7, #8]
 8011e98:	2200      	movs	r2, #0
 8011e9a:	2180      	movs	r1, #128	; 0x80
 8011e9c:	68f8      	ldr	r0, [r7, #12]
 8011e9e:	f7ff febd 	bl	8011c1c <SPI_WaitFlagStateUntilTimeout>
 8011ea2:	4603      	mov	r3, r0
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d007      	beq.n	8011eb8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011eac:	f043 0220 	orr.w	r2, r3, #32
 8011eb0:	68fb      	ldr	r3, [r7, #12]
 8011eb2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8011eb4:	2303      	movs	r3, #3
 8011eb6:	e023      	b.n	8011f00 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	685b      	ldr	r3, [r3, #4]
 8011ebc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011ec0:	d11d      	bne.n	8011efe <SPI_EndRxTransaction+0xa6>
 8011ec2:	68fb      	ldr	r3, [r7, #12]
 8011ec4:	689b      	ldr	r3, [r3, #8]
 8011ec6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011eca:	d004      	beq.n	8011ed6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	689b      	ldr	r3, [r3, #8]
 8011ed0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011ed4:	d113      	bne.n	8011efe <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	9300      	str	r3, [sp, #0]
 8011eda:	68bb      	ldr	r3, [r7, #8]
 8011edc:	2200      	movs	r2, #0
 8011ede:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8011ee2:	68f8      	ldr	r0, [r7, #12]
 8011ee4:	f7ff ff22 	bl	8011d2c <SPI_WaitFifoStateUntilTimeout>
 8011ee8:	4603      	mov	r3, r0
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d007      	beq.n	8011efe <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011ef2:	f043 0220 	orr.w	r2, r3, #32
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8011efa:	2303      	movs	r3, #3
 8011efc:	e000      	b.n	8011f00 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8011efe:	2300      	movs	r3, #0
}
 8011f00:	4618      	mov	r0, r3
 8011f02:	3710      	adds	r7, #16
 8011f04:	46bd      	mov	sp, r7
 8011f06:	bd80      	pop	{r7, pc}

08011f08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8011f08:	b580      	push	{r7, lr}
 8011f0a:	b086      	sub	sp, #24
 8011f0c:	af02      	add	r7, sp, #8
 8011f0e:	60f8      	str	r0, [r7, #12]
 8011f10:	60b9      	str	r1, [r7, #8]
 8011f12:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	9300      	str	r3, [sp, #0]
 8011f18:	68bb      	ldr	r3, [r7, #8]
 8011f1a:	2200      	movs	r2, #0
 8011f1c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8011f20:	68f8      	ldr	r0, [r7, #12]
 8011f22:	f7ff ff03 	bl	8011d2c <SPI_WaitFifoStateUntilTimeout>
 8011f26:	4603      	mov	r3, r0
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d007      	beq.n	8011f3c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011f2c:	68fb      	ldr	r3, [r7, #12]
 8011f2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011f30:	f043 0220 	orr.w	r2, r3, #32
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8011f38:	2303      	movs	r3, #3
 8011f3a:	e027      	b.n	8011f8c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	9300      	str	r3, [sp, #0]
 8011f40:	68bb      	ldr	r3, [r7, #8]
 8011f42:	2200      	movs	r2, #0
 8011f44:	2180      	movs	r1, #128	; 0x80
 8011f46:	68f8      	ldr	r0, [r7, #12]
 8011f48:	f7ff fe68 	bl	8011c1c <SPI_WaitFlagStateUntilTimeout>
 8011f4c:	4603      	mov	r3, r0
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d007      	beq.n	8011f62 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011f56:	f043 0220 	orr.w	r2, r3, #32
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8011f5e:	2303      	movs	r3, #3
 8011f60:	e014      	b.n	8011f8c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	9300      	str	r3, [sp, #0]
 8011f66:	68bb      	ldr	r3, [r7, #8]
 8011f68:	2200      	movs	r2, #0
 8011f6a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8011f6e:	68f8      	ldr	r0, [r7, #12]
 8011f70:	f7ff fedc 	bl	8011d2c <SPI_WaitFifoStateUntilTimeout>
 8011f74:	4603      	mov	r3, r0
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d007      	beq.n	8011f8a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011f7a:	68fb      	ldr	r3, [r7, #12]
 8011f7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011f7e:	f043 0220 	orr.w	r2, r3, #32
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8011f86:	2303      	movs	r3, #3
 8011f88:	e000      	b.n	8011f8c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8011f8a:	2300      	movs	r3, #0
}
 8011f8c:	4618      	mov	r0, r3
 8011f8e:	3710      	adds	r7, #16
 8011f90:	46bd      	mov	sp, r7
 8011f92:	bd80      	pop	{r7, pc}

08011f94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8011f94:	b580      	push	{r7, lr}
 8011f96:	b082      	sub	sp, #8
 8011f98:	af00      	add	r7, sp, #0
 8011f9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d101      	bne.n	8011fa6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8011fa2:	2301      	movs	r3, #1
 8011fa4:	e049      	b.n	801203a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011fac:	b2db      	uxtb	r3, r3
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d106      	bne.n	8011fc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	2200      	movs	r2, #0
 8011fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8011fba:	6878      	ldr	r0, [r7, #4]
 8011fbc:	f7fb feaa 	bl	800dd14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	2202      	movs	r2, #2
 8011fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	681a      	ldr	r2, [r3, #0]
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	3304      	adds	r3, #4
 8011fd0:	4619      	mov	r1, r3
 8011fd2:	4610      	mov	r0, r2
 8011fd4:	f001 f95e 	bl	8013294 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	2201      	movs	r2, #1
 8011fdc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	2201      	movs	r2, #1
 8011fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	2201      	movs	r2, #1
 8011fec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	2201      	movs	r2, #1
 8011ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	2201      	movs	r2, #1
 8011ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	2201      	movs	r2, #1
 8012004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	2201      	movs	r2, #1
 801200c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	2201      	movs	r2, #1
 8012014:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	2201      	movs	r2, #1
 801201c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	2201      	movs	r2, #1
 8012024:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	2201      	movs	r2, #1
 801202c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	2201      	movs	r2, #1
 8012034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8012038:	2300      	movs	r3, #0
}
 801203a:	4618      	mov	r0, r3
 801203c:	3708      	adds	r7, #8
 801203e:	46bd      	mov	sp, r7
 8012040:	bd80      	pop	{r7, pc}
	...

08012044 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8012044:	b480      	push	{r7}
 8012046:	b085      	sub	sp, #20
 8012048:	af00      	add	r7, sp, #0
 801204a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012052:	b2db      	uxtb	r3, r3
 8012054:	2b01      	cmp	r3, #1
 8012056:	d001      	beq.n	801205c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8012058:	2301      	movs	r3, #1
 801205a:	e04f      	b.n	80120fc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	2202      	movs	r2, #2
 8012060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	68da      	ldr	r2, [r3, #12]
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	681b      	ldr	r3, [r3, #0]
 801206e:	f042 0201 	orr.w	r2, r2, #1
 8012072:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	681b      	ldr	r3, [r3, #0]
 8012078:	4a23      	ldr	r2, [pc, #140]	; (8012108 <HAL_TIM_Base_Start_IT+0xc4>)
 801207a:	4293      	cmp	r3, r2
 801207c:	d01d      	beq.n	80120ba <HAL_TIM_Base_Start_IT+0x76>
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012086:	d018      	beq.n	80120ba <HAL_TIM_Base_Start_IT+0x76>
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	4a1f      	ldr	r2, [pc, #124]	; (801210c <HAL_TIM_Base_Start_IT+0xc8>)
 801208e:	4293      	cmp	r3, r2
 8012090:	d013      	beq.n	80120ba <HAL_TIM_Base_Start_IT+0x76>
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	681b      	ldr	r3, [r3, #0]
 8012096:	4a1e      	ldr	r2, [pc, #120]	; (8012110 <HAL_TIM_Base_Start_IT+0xcc>)
 8012098:	4293      	cmp	r3, r2
 801209a:	d00e      	beq.n	80120ba <HAL_TIM_Base_Start_IT+0x76>
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	4a1c      	ldr	r2, [pc, #112]	; (8012114 <HAL_TIM_Base_Start_IT+0xd0>)
 80120a2:	4293      	cmp	r3, r2
 80120a4:	d009      	beq.n	80120ba <HAL_TIM_Base_Start_IT+0x76>
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	4a1b      	ldr	r2, [pc, #108]	; (8012118 <HAL_TIM_Base_Start_IT+0xd4>)
 80120ac:	4293      	cmp	r3, r2
 80120ae:	d004      	beq.n	80120ba <HAL_TIM_Base_Start_IT+0x76>
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	681b      	ldr	r3, [r3, #0]
 80120b4:	4a19      	ldr	r2, [pc, #100]	; (801211c <HAL_TIM_Base_Start_IT+0xd8>)
 80120b6:	4293      	cmp	r3, r2
 80120b8:	d115      	bne.n	80120e6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	681b      	ldr	r3, [r3, #0]
 80120be:	689a      	ldr	r2, [r3, #8]
 80120c0:	4b17      	ldr	r3, [pc, #92]	; (8012120 <HAL_TIM_Base_Start_IT+0xdc>)
 80120c2:	4013      	ands	r3, r2
 80120c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	2b06      	cmp	r3, #6
 80120ca:	d015      	beq.n	80120f8 <HAL_TIM_Base_Start_IT+0xb4>
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80120d2:	d011      	beq.n	80120f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	681b      	ldr	r3, [r3, #0]
 80120d8:	681a      	ldr	r2, [r3, #0]
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	681b      	ldr	r3, [r3, #0]
 80120de:	f042 0201 	orr.w	r2, r2, #1
 80120e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80120e4:	e008      	b.n	80120f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	681b      	ldr	r3, [r3, #0]
 80120ea:	681a      	ldr	r2, [r3, #0]
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	f042 0201 	orr.w	r2, r2, #1
 80120f4:	601a      	str	r2, [r3, #0]
 80120f6:	e000      	b.n	80120fa <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80120f8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80120fa:	2300      	movs	r3, #0
}
 80120fc:	4618      	mov	r0, r3
 80120fe:	3714      	adds	r7, #20
 8012100:	46bd      	mov	sp, r7
 8012102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012106:	4770      	bx	lr
 8012108:	40012c00 	.word	0x40012c00
 801210c:	40000400 	.word	0x40000400
 8012110:	40000800 	.word	0x40000800
 8012114:	40000c00 	.word	0x40000c00
 8012118:	40013400 	.word	0x40013400
 801211c:	40014000 	.word	0x40014000
 8012120:	00010007 	.word	0x00010007

08012124 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8012124:	b580      	push	{r7, lr}
 8012126:	b082      	sub	sp, #8
 8012128:	af00      	add	r7, sp, #0
 801212a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	2b00      	cmp	r3, #0
 8012130:	d101      	bne.n	8012136 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8012132:	2301      	movs	r3, #1
 8012134:	e049      	b.n	80121ca <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801213c:	b2db      	uxtb	r3, r3
 801213e:	2b00      	cmp	r3, #0
 8012140:	d106      	bne.n	8012150 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	2200      	movs	r2, #0
 8012146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801214a:	6878      	ldr	r0, [r7, #4]
 801214c:	f000 f841 	bl	80121d2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	2202      	movs	r2, #2
 8012154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	681a      	ldr	r2, [r3, #0]
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	3304      	adds	r3, #4
 8012160:	4619      	mov	r1, r3
 8012162:	4610      	mov	r0, r2
 8012164:	f001 f896 	bl	8013294 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	2201      	movs	r2, #1
 801216c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	2201      	movs	r2, #1
 8012174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	2201      	movs	r2, #1
 801217c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	2201      	movs	r2, #1
 8012184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	2201      	movs	r2, #1
 801218c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	2201      	movs	r2, #1
 8012194:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	2201      	movs	r2, #1
 801219c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	2201      	movs	r2, #1
 80121a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	2201      	movs	r2, #1
 80121ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	2201      	movs	r2, #1
 80121b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	2201      	movs	r2, #1
 80121bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	2201      	movs	r2, #1
 80121c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80121c8:	2300      	movs	r3, #0
}
 80121ca:	4618      	mov	r0, r3
 80121cc:	3708      	adds	r7, #8
 80121ce:	46bd      	mov	sp, r7
 80121d0:	bd80      	pop	{r7, pc}

080121d2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80121d2:	b480      	push	{r7}
 80121d4:	b083      	sub	sp, #12
 80121d6:	af00      	add	r7, sp, #0
 80121d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80121da:	bf00      	nop
 80121dc:	370c      	adds	r7, #12
 80121de:	46bd      	mov	sp, r7
 80121e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121e4:	4770      	bx	lr
	...

080121e8 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80121e8:	b580      	push	{r7, lr}
 80121ea:	b086      	sub	sp, #24
 80121ec:	af00      	add	r7, sp, #0
 80121ee:	60f8      	str	r0, [r7, #12]
 80121f0:	60b9      	str	r1, [r7, #8]
 80121f2:	607a      	str	r2, [r7, #4]
 80121f4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80121f6:	2300      	movs	r3, #0
 80121f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80121fa:	68bb      	ldr	r3, [r7, #8]
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d109      	bne.n	8012214 <HAL_TIM_PWM_Start_DMA+0x2c>
 8012200:	68fb      	ldr	r3, [r7, #12]
 8012202:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8012206:	b2db      	uxtb	r3, r3
 8012208:	2b02      	cmp	r3, #2
 801220a:	bf0c      	ite	eq
 801220c:	2301      	moveq	r3, #1
 801220e:	2300      	movne	r3, #0
 8012210:	b2db      	uxtb	r3, r3
 8012212:	e03c      	b.n	801228e <HAL_TIM_PWM_Start_DMA+0xa6>
 8012214:	68bb      	ldr	r3, [r7, #8]
 8012216:	2b04      	cmp	r3, #4
 8012218:	d109      	bne.n	801222e <HAL_TIM_PWM_Start_DMA+0x46>
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8012220:	b2db      	uxtb	r3, r3
 8012222:	2b02      	cmp	r3, #2
 8012224:	bf0c      	ite	eq
 8012226:	2301      	moveq	r3, #1
 8012228:	2300      	movne	r3, #0
 801222a:	b2db      	uxtb	r3, r3
 801222c:	e02f      	b.n	801228e <HAL_TIM_PWM_Start_DMA+0xa6>
 801222e:	68bb      	ldr	r3, [r7, #8]
 8012230:	2b08      	cmp	r3, #8
 8012232:	d109      	bne.n	8012248 <HAL_TIM_PWM_Start_DMA+0x60>
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801223a:	b2db      	uxtb	r3, r3
 801223c:	2b02      	cmp	r3, #2
 801223e:	bf0c      	ite	eq
 8012240:	2301      	moveq	r3, #1
 8012242:	2300      	movne	r3, #0
 8012244:	b2db      	uxtb	r3, r3
 8012246:	e022      	b.n	801228e <HAL_TIM_PWM_Start_DMA+0xa6>
 8012248:	68bb      	ldr	r3, [r7, #8]
 801224a:	2b0c      	cmp	r3, #12
 801224c:	d109      	bne.n	8012262 <HAL_TIM_PWM_Start_DMA+0x7a>
 801224e:	68fb      	ldr	r3, [r7, #12]
 8012250:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012254:	b2db      	uxtb	r3, r3
 8012256:	2b02      	cmp	r3, #2
 8012258:	bf0c      	ite	eq
 801225a:	2301      	moveq	r3, #1
 801225c:	2300      	movne	r3, #0
 801225e:	b2db      	uxtb	r3, r3
 8012260:	e015      	b.n	801228e <HAL_TIM_PWM_Start_DMA+0xa6>
 8012262:	68bb      	ldr	r3, [r7, #8]
 8012264:	2b10      	cmp	r3, #16
 8012266:	d109      	bne.n	801227c <HAL_TIM_PWM_Start_DMA+0x94>
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801226e:	b2db      	uxtb	r3, r3
 8012270:	2b02      	cmp	r3, #2
 8012272:	bf0c      	ite	eq
 8012274:	2301      	moveq	r3, #1
 8012276:	2300      	movne	r3, #0
 8012278:	b2db      	uxtb	r3, r3
 801227a:	e008      	b.n	801228e <HAL_TIM_PWM_Start_DMA+0xa6>
 801227c:	68fb      	ldr	r3, [r7, #12]
 801227e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012282:	b2db      	uxtb	r3, r3
 8012284:	2b02      	cmp	r3, #2
 8012286:	bf0c      	ite	eq
 8012288:	2301      	moveq	r3, #1
 801228a:	2300      	movne	r3, #0
 801228c:	b2db      	uxtb	r3, r3
 801228e:	2b00      	cmp	r3, #0
 8012290:	d001      	beq.n	8012296 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8012292:	2302      	movs	r3, #2
 8012294:	e1ab      	b.n	80125ee <HAL_TIM_PWM_Start_DMA+0x406>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8012296:	68bb      	ldr	r3, [r7, #8]
 8012298:	2b00      	cmp	r3, #0
 801229a:	d109      	bne.n	80122b0 <HAL_TIM_PWM_Start_DMA+0xc8>
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80122a2:	b2db      	uxtb	r3, r3
 80122a4:	2b01      	cmp	r3, #1
 80122a6:	bf0c      	ite	eq
 80122a8:	2301      	moveq	r3, #1
 80122aa:	2300      	movne	r3, #0
 80122ac:	b2db      	uxtb	r3, r3
 80122ae:	e03c      	b.n	801232a <HAL_TIM_PWM_Start_DMA+0x142>
 80122b0:	68bb      	ldr	r3, [r7, #8]
 80122b2:	2b04      	cmp	r3, #4
 80122b4:	d109      	bne.n	80122ca <HAL_TIM_PWM_Start_DMA+0xe2>
 80122b6:	68fb      	ldr	r3, [r7, #12]
 80122b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80122bc:	b2db      	uxtb	r3, r3
 80122be:	2b01      	cmp	r3, #1
 80122c0:	bf0c      	ite	eq
 80122c2:	2301      	moveq	r3, #1
 80122c4:	2300      	movne	r3, #0
 80122c6:	b2db      	uxtb	r3, r3
 80122c8:	e02f      	b.n	801232a <HAL_TIM_PWM_Start_DMA+0x142>
 80122ca:	68bb      	ldr	r3, [r7, #8]
 80122cc:	2b08      	cmp	r3, #8
 80122ce:	d109      	bne.n	80122e4 <HAL_TIM_PWM_Start_DMA+0xfc>
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80122d6:	b2db      	uxtb	r3, r3
 80122d8:	2b01      	cmp	r3, #1
 80122da:	bf0c      	ite	eq
 80122dc:	2301      	moveq	r3, #1
 80122de:	2300      	movne	r3, #0
 80122e0:	b2db      	uxtb	r3, r3
 80122e2:	e022      	b.n	801232a <HAL_TIM_PWM_Start_DMA+0x142>
 80122e4:	68bb      	ldr	r3, [r7, #8]
 80122e6:	2b0c      	cmp	r3, #12
 80122e8:	d109      	bne.n	80122fe <HAL_TIM_PWM_Start_DMA+0x116>
 80122ea:	68fb      	ldr	r3, [r7, #12]
 80122ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80122f0:	b2db      	uxtb	r3, r3
 80122f2:	2b01      	cmp	r3, #1
 80122f4:	bf0c      	ite	eq
 80122f6:	2301      	moveq	r3, #1
 80122f8:	2300      	movne	r3, #0
 80122fa:	b2db      	uxtb	r3, r3
 80122fc:	e015      	b.n	801232a <HAL_TIM_PWM_Start_DMA+0x142>
 80122fe:	68bb      	ldr	r3, [r7, #8]
 8012300:	2b10      	cmp	r3, #16
 8012302:	d109      	bne.n	8012318 <HAL_TIM_PWM_Start_DMA+0x130>
 8012304:	68fb      	ldr	r3, [r7, #12]
 8012306:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801230a:	b2db      	uxtb	r3, r3
 801230c:	2b01      	cmp	r3, #1
 801230e:	bf0c      	ite	eq
 8012310:	2301      	moveq	r3, #1
 8012312:	2300      	movne	r3, #0
 8012314:	b2db      	uxtb	r3, r3
 8012316:	e008      	b.n	801232a <HAL_TIM_PWM_Start_DMA+0x142>
 8012318:	68fb      	ldr	r3, [r7, #12]
 801231a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801231e:	b2db      	uxtb	r3, r3
 8012320:	2b01      	cmp	r3, #1
 8012322:	bf0c      	ite	eq
 8012324:	2301      	moveq	r3, #1
 8012326:	2300      	movne	r3, #0
 8012328:	b2db      	uxtb	r3, r3
 801232a:	2b00      	cmp	r3, #0
 801232c:	d034      	beq.n	8012398 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	2b00      	cmp	r3, #0
 8012332:	d002      	beq.n	801233a <HAL_TIM_PWM_Start_DMA+0x152>
 8012334:	887b      	ldrh	r3, [r7, #2]
 8012336:	2b00      	cmp	r3, #0
 8012338:	d101      	bne.n	801233e <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 801233a:	2301      	movs	r3, #1
 801233c:	e157      	b.n	80125ee <HAL_TIM_PWM_Start_DMA+0x406>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801233e:	68bb      	ldr	r3, [r7, #8]
 8012340:	2b00      	cmp	r3, #0
 8012342:	d104      	bne.n	801234e <HAL_TIM_PWM_Start_DMA+0x166>
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	2202      	movs	r2, #2
 8012348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801234c:	e026      	b.n	801239c <HAL_TIM_PWM_Start_DMA+0x1b4>
 801234e:	68bb      	ldr	r3, [r7, #8]
 8012350:	2b04      	cmp	r3, #4
 8012352:	d104      	bne.n	801235e <HAL_TIM_PWM_Start_DMA+0x176>
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	2202      	movs	r2, #2
 8012358:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801235c:	e01e      	b.n	801239c <HAL_TIM_PWM_Start_DMA+0x1b4>
 801235e:	68bb      	ldr	r3, [r7, #8]
 8012360:	2b08      	cmp	r3, #8
 8012362:	d104      	bne.n	801236e <HAL_TIM_PWM_Start_DMA+0x186>
 8012364:	68fb      	ldr	r3, [r7, #12]
 8012366:	2202      	movs	r2, #2
 8012368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801236c:	e016      	b.n	801239c <HAL_TIM_PWM_Start_DMA+0x1b4>
 801236e:	68bb      	ldr	r3, [r7, #8]
 8012370:	2b0c      	cmp	r3, #12
 8012372:	d104      	bne.n	801237e <HAL_TIM_PWM_Start_DMA+0x196>
 8012374:	68fb      	ldr	r3, [r7, #12]
 8012376:	2202      	movs	r2, #2
 8012378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801237c:	e00e      	b.n	801239c <HAL_TIM_PWM_Start_DMA+0x1b4>
 801237e:	68bb      	ldr	r3, [r7, #8]
 8012380:	2b10      	cmp	r3, #16
 8012382:	d104      	bne.n	801238e <HAL_TIM_PWM_Start_DMA+0x1a6>
 8012384:	68fb      	ldr	r3, [r7, #12]
 8012386:	2202      	movs	r2, #2
 8012388:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801238c:	e006      	b.n	801239c <HAL_TIM_PWM_Start_DMA+0x1b4>
 801238e:	68fb      	ldr	r3, [r7, #12]
 8012390:	2202      	movs	r2, #2
 8012392:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012396:	e001      	b.n	801239c <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8012398:	2301      	movs	r3, #1
 801239a:	e128      	b.n	80125ee <HAL_TIM_PWM_Start_DMA+0x406>
  }

  switch (Channel)
 801239c:	68bb      	ldr	r3, [r7, #8]
 801239e:	2b0c      	cmp	r3, #12
 80123a0:	f200 80ae 	bhi.w	8012500 <HAL_TIM_PWM_Start_DMA+0x318>
 80123a4:	a201      	add	r2, pc, #4	; (adr r2, 80123ac <HAL_TIM_PWM_Start_DMA+0x1c4>)
 80123a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80123aa:	bf00      	nop
 80123ac:	080123e1 	.word	0x080123e1
 80123b0:	08012501 	.word	0x08012501
 80123b4:	08012501 	.word	0x08012501
 80123b8:	08012501 	.word	0x08012501
 80123bc:	08012429 	.word	0x08012429
 80123c0:	08012501 	.word	0x08012501
 80123c4:	08012501 	.word	0x08012501
 80123c8:	08012501 	.word	0x08012501
 80123cc:	08012471 	.word	0x08012471
 80123d0:	08012501 	.word	0x08012501
 80123d4:	08012501 	.word	0x08012501
 80123d8:	08012501 	.word	0x08012501
 80123dc:	080124b9 	.word	0x080124b9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80123e0:	68fb      	ldr	r3, [r7, #12]
 80123e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123e4:	4a84      	ldr	r2, [pc, #528]	; (80125f8 <HAL_TIM_PWM_Start_DMA+0x410>)
 80123e6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80123e8:	68fb      	ldr	r3, [r7, #12]
 80123ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123ec:	4a83      	ldr	r2, [pc, #524]	; (80125fc <HAL_TIM_PWM_Start_DMA+0x414>)
 80123ee:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80123f0:	68fb      	ldr	r3, [r7, #12]
 80123f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123f4:	4a82      	ldr	r2, [pc, #520]	; (8012600 <HAL_TIM_PWM_Start_DMA+0x418>)
 80123f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80123f8:	68fb      	ldr	r3, [r7, #12]
 80123fa:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80123fc:	6879      	ldr	r1, [r7, #4]
 80123fe:	68fb      	ldr	r3, [r7, #12]
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	3334      	adds	r3, #52	; 0x34
 8012404:	461a      	mov	r2, r3
 8012406:	887b      	ldrh	r3, [r7, #2]
 8012408:	f7fc f914 	bl	800e634 <HAL_DMA_Start_IT>
 801240c:	4603      	mov	r3, r0
 801240e:	2b00      	cmp	r3, #0
 8012410:	d001      	beq.n	8012416 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8012412:	2301      	movs	r3, #1
 8012414:	e0eb      	b.n	80125ee <HAL_TIM_PWM_Start_DMA+0x406>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8012416:	68fb      	ldr	r3, [r7, #12]
 8012418:	681b      	ldr	r3, [r3, #0]
 801241a:	68da      	ldr	r2, [r3, #12]
 801241c:	68fb      	ldr	r3, [r7, #12]
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012424:	60da      	str	r2, [r3, #12]
      break;
 8012426:	e06e      	b.n	8012506 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801242c:	4a72      	ldr	r2, [pc, #456]	; (80125f8 <HAL_TIM_PWM_Start_DMA+0x410>)
 801242e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012434:	4a71      	ldr	r2, [pc, #452]	; (80125fc <HAL_TIM_PWM_Start_DMA+0x414>)
 8012436:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801243c:	4a70      	ldr	r2, [pc, #448]	; (8012600 <HAL_TIM_PWM_Start_DMA+0x418>)
 801243e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8012440:	68fb      	ldr	r3, [r7, #12]
 8012442:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8012444:	6879      	ldr	r1, [r7, #4]
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	3338      	adds	r3, #56	; 0x38
 801244c:	461a      	mov	r2, r3
 801244e:	887b      	ldrh	r3, [r7, #2]
 8012450:	f7fc f8f0 	bl	800e634 <HAL_DMA_Start_IT>
 8012454:	4603      	mov	r3, r0
 8012456:	2b00      	cmp	r3, #0
 8012458:	d001      	beq.n	801245e <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 801245a:	2301      	movs	r3, #1
 801245c:	e0c7      	b.n	80125ee <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	681b      	ldr	r3, [r3, #0]
 8012462:	68da      	ldr	r2, [r3, #12]
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	681b      	ldr	r3, [r3, #0]
 8012468:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801246c:	60da      	str	r2, [r3, #12]
      break;
 801246e:	e04a      	b.n	8012506 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012474:	4a60      	ldr	r2, [pc, #384]	; (80125f8 <HAL_TIM_PWM_Start_DMA+0x410>)
 8012476:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8012478:	68fb      	ldr	r3, [r7, #12]
 801247a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801247c:	4a5f      	ldr	r2, [pc, #380]	; (80125fc <HAL_TIM_PWM_Start_DMA+0x414>)
 801247e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8012480:	68fb      	ldr	r3, [r7, #12]
 8012482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012484:	4a5e      	ldr	r2, [pc, #376]	; (8012600 <HAL_TIM_PWM_Start_DMA+0x418>)
 8012486:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8012488:	68fb      	ldr	r3, [r7, #12]
 801248a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801248c:	6879      	ldr	r1, [r7, #4]
 801248e:	68fb      	ldr	r3, [r7, #12]
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	333c      	adds	r3, #60	; 0x3c
 8012494:	461a      	mov	r2, r3
 8012496:	887b      	ldrh	r3, [r7, #2]
 8012498:	f7fc f8cc 	bl	800e634 <HAL_DMA_Start_IT>
 801249c:	4603      	mov	r3, r0
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d001      	beq.n	80124a6 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80124a2:	2301      	movs	r3, #1
 80124a4:	e0a3      	b.n	80125ee <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	68da      	ldr	r2, [r3, #12]
 80124ac:	68fb      	ldr	r3, [r7, #12]
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80124b4:	60da      	str	r2, [r3, #12]
      break;
 80124b6:	e026      	b.n	8012506 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80124bc:	4a4e      	ldr	r2, [pc, #312]	; (80125f8 <HAL_TIM_PWM_Start_DMA+0x410>)
 80124be:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80124c4:	4a4d      	ldr	r2, [pc, #308]	; (80125fc <HAL_TIM_PWM_Start_DMA+0x414>)
 80124c6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80124c8:	68fb      	ldr	r3, [r7, #12]
 80124ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80124cc:	4a4c      	ldr	r2, [pc, #304]	; (8012600 <HAL_TIM_PWM_Start_DMA+0x418>)
 80124ce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80124d0:	68fb      	ldr	r3, [r7, #12]
 80124d2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80124d4:	6879      	ldr	r1, [r7, #4]
 80124d6:	68fb      	ldr	r3, [r7, #12]
 80124d8:	681b      	ldr	r3, [r3, #0]
 80124da:	3340      	adds	r3, #64	; 0x40
 80124dc:	461a      	mov	r2, r3
 80124de:	887b      	ldrh	r3, [r7, #2]
 80124e0:	f7fc f8a8 	bl	800e634 <HAL_DMA_Start_IT>
 80124e4:	4603      	mov	r3, r0
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d001      	beq.n	80124ee <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80124ea:	2301      	movs	r3, #1
 80124ec:	e07f      	b.n	80125ee <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80124ee:	68fb      	ldr	r3, [r7, #12]
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	68da      	ldr	r2, [r3, #12]
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	681b      	ldr	r3, [r3, #0]
 80124f8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80124fc:	60da      	str	r2, [r3, #12]
      break;
 80124fe:	e002      	b.n	8012506 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8012500:	2301      	movs	r3, #1
 8012502:	75fb      	strb	r3, [r7, #23]
      break;
 8012504:	bf00      	nop
  }

  if (status == HAL_OK)
 8012506:	7dfb      	ldrb	r3, [r7, #23]
 8012508:	2b00      	cmp	r3, #0
 801250a:	d16f      	bne.n	80125ec <HAL_TIM_PWM_Start_DMA+0x404>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801250c:	68fb      	ldr	r3, [r7, #12]
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	2201      	movs	r2, #1
 8012512:	68b9      	ldr	r1, [r7, #8]
 8012514:	4618      	mov	r0, r3
 8012516:	f001 fac7 	bl	8013aa8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	4a39      	ldr	r2, [pc, #228]	; (8012604 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8012520:	4293      	cmp	r3, r2
 8012522:	d013      	beq.n	801254c <HAL_TIM_PWM_Start_DMA+0x364>
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	681b      	ldr	r3, [r3, #0]
 8012528:	4a37      	ldr	r2, [pc, #220]	; (8012608 <HAL_TIM_PWM_Start_DMA+0x420>)
 801252a:	4293      	cmp	r3, r2
 801252c:	d00e      	beq.n	801254c <HAL_TIM_PWM_Start_DMA+0x364>
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	681b      	ldr	r3, [r3, #0]
 8012532:	4a36      	ldr	r2, [pc, #216]	; (801260c <HAL_TIM_PWM_Start_DMA+0x424>)
 8012534:	4293      	cmp	r3, r2
 8012536:	d009      	beq.n	801254c <HAL_TIM_PWM_Start_DMA+0x364>
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	681b      	ldr	r3, [r3, #0]
 801253c:	4a34      	ldr	r2, [pc, #208]	; (8012610 <HAL_TIM_PWM_Start_DMA+0x428>)
 801253e:	4293      	cmp	r3, r2
 8012540:	d004      	beq.n	801254c <HAL_TIM_PWM_Start_DMA+0x364>
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	4a33      	ldr	r2, [pc, #204]	; (8012614 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8012548:	4293      	cmp	r3, r2
 801254a:	d101      	bne.n	8012550 <HAL_TIM_PWM_Start_DMA+0x368>
 801254c:	2301      	movs	r3, #1
 801254e:	e000      	b.n	8012552 <HAL_TIM_PWM_Start_DMA+0x36a>
 8012550:	2300      	movs	r3, #0
 8012552:	2b00      	cmp	r3, #0
 8012554:	d007      	beq.n	8012566 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8012556:	68fb      	ldr	r3, [r7, #12]
 8012558:	681b      	ldr	r3, [r3, #0]
 801255a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8012564:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	681b      	ldr	r3, [r3, #0]
 801256a:	4a26      	ldr	r2, [pc, #152]	; (8012604 <HAL_TIM_PWM_Start_DMA+0x41c>)
 801256c:	4293      	cmp	r3, r2
 801256e:	d01d      	beq.n	80125ac <HAL_TIM_PWM_Start_DMA+0x3c4>
 8012570:	68fb      	ldr	r3, [r7, #12]
 8012572:	681b      	ldr	r3, [r3, #0]
 8012574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012578:	d018      	beq.n	80125ac <HAL_TIM_PWM_Start_DMA+0x3c4>
 801257a:	68fb      	ldr	r3, [r7, #12]
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	4a26      	ldr	r2, [pc, #152]	; (8012618 <HAL_TIM_PWM_Start_DMA+0x430>)
 8012580:	4293      	cmp	r3, r2
 8012582:	d013      	beq.n	80125ac <HAL_TIM_PWM_Start_DMA+0x3c4>
 8012584:	68fb      	ldr	r3, [r7, #12]
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	4a24      	ldr	r2, [pc, #144]	; (801261c <HAL_TIM_PWM_Start_DMA+0x434>)
 801258a:	4293      	cmp	r3, r2
 801258c:	d00e      	beq.n	80125ac <HAL_TIM_PWM_Start_DMA+0x3c4>
 801258e:	68fb      	ldr	r3, [r7, #12]
 8012590:	681b      	ldr	r3, [r3, #0]
 8012592:	4a23      	ldr	r2, [pc, #140]	; (8012620 <HAL_TIM_PWM_Start_DMA+0x438>)
 8012594:	4293      	cmp	r3, r2
 8012596:	d009      	beq.n	80125ac <HAL_TIM_PWM_Start_DMA+0x3c4>
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	681b      	ldr	r3, [r3, #0]
 801259c:	4a1a      	ldr	r2, [pc, #104]	; (8012608 <HAL_TIM_PWM_Start_DMA+0x420>)
 801259e:	4293      	cmp	r3, r2
 80125a0:	d004      	beq.n	80125ac <HAL_TIM_PWM_Start_DMA+0x3c4>
 80125a2:	68fb      	ldr	r3, [r7, #12]
 80125a4:	681b      	ldr	r3, [r3, #0]
 80125a6:	4a19      	ldr	r2, [pc, #100]	; (801260c <HAL_TIM_PWM_Start_DMA+0x424>)
 80125a8:	4293      	cmp	r3, r2
 80125aa:	d115      	bne.n	80125d8 <HAL_TIM_PWM_Start_DMA+0x3f0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80125ac:	68fb      	ldr	r3, [r7, #12]
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	689a      	ldr	r2, [r3, #8]
 80125b2:	4b1c      	ldr	r3, [pc, #112]	; (8012624 <HAL_TIM_PWM_Start_DMA+0x43c>)
 80125b4:	4013      	ands	r3, r2
 80125b6:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80125b8:	693b      	ldr	r3, [r7, #16]
 80125ba:	2b06      	cmp	r3, #6
 80125bc:	d015      	beq.n	80125ea <HAL_TIM_PWM_Start_DMA+0x402>
 80125be:	693b      	ldr	r3, [r7, #16]
 80125c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80125c4:	d011      	beq.n	80125ea <HAL_TIM_PWM_Start_DMA+0x402>
      {
        __HAL_TIM_ENABLE(htim);
 80125c6:	68fb      	ldr	r3, [r7, #12]
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	681a      	ldr	r2, [r3, #0]
 80125cc:	68fb      	ldr	r3, [r7, #12]
 80125ce:	681b      	ldr	r3, [r3, #0]
 80125d0:	f042 0201 	orr.w	r2, r2, #1
 80125d4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80125d6:	e008      	b.n	80125ea <HAL_TIM_PWM_Start_DMA+0x402>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80125d8:	68fb      	ldr	r3, [r7, #12]
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	681a      	ldr	r2, [r3, #0]
 80125de:	68fb      	ldr	r3, [r7, #12]
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	f042 0201 	orr.w	r2, r2, #1
 80125e6:	601a      	str	r2, [r3, #0]
 80125e8:	e000      	b.n	80125ec <HAL_TIM_PWM_Start_DMA+0x404>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80125ea:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80125ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80125ee:	4618      	mov	r0, r3
 80125f0:	3718      	adds	r7, #24
 80125f2:	46bd      	mov	sp, r7
 80125f4:	bd80      	pop	{r7, pc}
 80125f6:	bf00      	nop
 80125f8:	08013185 	.word	0x08013185
 80125fc:	0801322d 	.word	0x0801322d
 8012600:	080130f3 	.word	0x080130f3
 8012604:	40012c00 	.word	0x40012c00
 8012608:	40013400 	.word	0x40013400
 801260c:	40014000 	.word	0x40014000
 8012610:	40014400 	.word	0x40014400
 8012614:	40014800 	.word	0x40014800
 8012618:	40000400 	.word	0x40000400
 801261c:	40000800 	.word	0x40000800
 8012620:	40000c00 	.word	0x40000c00
 8012624:	00010007 	.word	0x00010007

08012628 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012628:	b580      	push	{r7, lr}
 801262a:	b084      	sub	sp, #16
 801262c:	af00      	add	r7, sp, #0
 801262e:	6078      	str	r0, [r7, #4]
 8012630:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012632:	2300      	movs	r3, #0
 8012634:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8012636:	683b      	ldr	r3, [r7, #0]
 8012638:	2b0c      	cmp	r3, #12
 801263a:	d855      	bhi.n	80126e8 <HAL_TIM_PWM_Stop_DMA+0xc0>
 801263c:	a201      	add	r2, pc, #4	; (adr r2, 8012644 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 801263e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012642:	bf00      	nop
 8012644:	08012679 	.word	0x08012679
 8012648:	080126e9 	.word	0x080126e9
 801264c:	080126e9 	.word	0x080126e9
 8012650:	080126e9 	.word	0x080126e9
 8012654:	08012695 	.word	0x08012695
 8012658:	080126e9 	.word	0x080126e9
 801265c:	080126e9 	.word	0x080126e9
 8012660:	080126e9 	.word	0x080126e9
 8012664:	080126b1 	.word	0x080126b1
 8012668:	080126e9 	.word	0x080126e9
 801266c:	080126e9 	.word	0x080126e9
 8012670:	080126e9 	.word	0x080126e9
 8012674:	080126cd 	.word	0x080126cd
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	68da      	ldr	r2, [r3, #12]
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8012686:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801268c:	4618      	mov	r0, r3
 801268e:	f7fc f8a8 	bl	800e7e2 <HAL_DMA_Abort_IT>
      break;
 8012692:	e02c      	b.n	80126ee <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	68da      	ldr	r2, [r3, #12]
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	681b      	ldr	r3, [r3, #0]
 801269e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80126a2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80126a8:	4618      	mov	r0, r3
 80126aa:	f7fc f89a 	bl	800e7e2 <HAL_DMA_Abort_IT>
      break;
 80126ae:	e01e      	b.n	80126ee <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	68da      	ldr	r2, [r3, #12]
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	681b      	ldr	r3, [r3, #0]
 80126ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80126be:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80126c4:	4618      	mov	r0, r3
 80126c6:	f7fc f88c 	bl	800e7e2 <HAL_DMA_Abort_IT>
      break;
 80126ca:	e010      	b.n	80126ee <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	68da      	ldr	r2, [r3, #12]
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	681b      	ldr	r3, [r3, #0]
 80126d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80126da:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80126e0:	4618      	mov	r0, r3
 80126e2:	f7fc f87e 	bl	800e7e2 <HAL_DMA_Abort_IT>
      break;
 80126e6:	e002      	b.n	80126ee <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80126e8:	2301      	movs	r3, #1
 80126ea:	73fb      	strb	r3, [r7, #15]
      break;
 80126ec:	bf00      	nop
  }

  if (status == HAL_OK)
 80126ee:	7bfb      	ldrb	r3, [r7, #15]
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	f040 8081 	bne.w	80127f8 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	681b      	ldr	r3, [r3, #0]
 80126fa:	2200      	movs	r2, #0
 80126fc:	6839      	ldr	r1, [r7, #0]
 80126fe:	4618      	mov	r0, r3
 8012700:	f001 f9d2 	bl	8013aa8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	681b      	ldr	r3, [r3, #0]
 8012708:	4a3e      	ldr	r2, [pc, #248]	; (8012804 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 801270a:	4293      	cmp	r3, r2
 801270c:	d013      	beq.n	8012736 <HAL_TIM_PWM_Stop_DMA+0x10e>
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	681b      	ldr	r3, [r3, #0]
 8012712:	4a3d      	ldr	r2, [pc, #244]	; (8012808 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 8012714:	4293      	cmp	r3, r2
 8012716:	d00e      	beq.n	8012736 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	681b      	ldr	r3, [r3, #0]
 801271c:	4a3b      	ldr	r2, [pc, #236]	; (801280c <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 801271e:	4293      	cmp	r3, r2
 8012720:	d009      	beq.n	8012736 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	681b      	ldr	r3, [r3, #0]
 8012726:	4a3a      	ldr	r2, [pc, #232]	; (8012810 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 8012728:	4293      	cmp	r3, r2
 801272a:	d004      	beq.n	8012736 <HAL_TIM_PWM_Stop_DMA+0x10e>
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	4a38      	ldr	r2, [pc, #224]	; (8012814 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 8012732:	4293      	cmp	r3, r2
 8012734:	d101      	bne.n	801273a <HAL_TIM_PWM_Stop_DMA+0x112>
 8012736:	2301      	movs	r3, #1
 8012738:	e000      	b.n	801273c <HAL_TIM_PWM_Stop_DMA+0x114>
 801273a:	2300      	movs	r3, #0
 801273c:	2b00      	cmp	r3, #0
 801273e:	d017      	beq.n	8012770 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	6a1a      	ldr	r2, [r3, #32]
 8012746:	f241 1311 	movw	r3, #4369	; 0x1111
 801274a:	4013      	ands	r3, r2
 801274c:	2b00      	cmp	r3, #0
 801274e:	d10f      	bne.n	8012770 <HAL_TIM_PWM_Stop_DMA+0x148>
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	681b      	ldr	r3, [r3, #0]
 8012754:	6a1a      	ldr	r2, [r3, #32]
 8012756:	f240 4344 	movw	r3, #1092	; 0x444
 801275a:	4013      	ands	r3, r2
 801275c:	2b00      	cmp	r3, #0
 801275e:	d107      	bne.n	8012770 <HAL_TIM_PWM_Stop_DMA+0x148>
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	681b      	ldr	r3, [r3, #0]
 8012764:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801276e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	681b      	ldr	r3, [r3, #0]
 8012774:	6a1a      	ldr	r2, [r3, #32]
 8012776:	f241 1311 	movw	r3, #4369	; 0x1111
 801277a:	4013      	ands	r3, r2
 801277c:	2b00      	cmp	r3, #0
 801277e:	d10f      	bne.n	80127a0 <HAL_TIM_PWM_Stop_DMA+0x178>
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	6a1a      	ldr	r2, [r3, #32]
 8012786:	f240 4344 	movw	r3, #1092	; 0x444
 801278a:	4013      	ands	r3, r2
 801278c:	2b00      	cmp	r3, #0
 801278e:	d107      	bne.n	80127a0 <HAL_TIM_PWM_Stop_DMA+0x178>
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	681b      	ldr	r3, [r3, #0]
 8012794:	681a      	ldr	r2, [r3, #0]
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	f022 0201 	bic.w	r2, r2, #1
 801279e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80127a0:	683b      	ldr	r3, [r7, #0]
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d104      	bne.n	80127b0 <HAL_TIM_PWM_Stop_DMA+0x188>
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	2201      	movs	r2, #1
 80127aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80127ae:	e023      	b.n	80127f8 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80127b0:	683b      	ldr	r3, [r7, #0]
 80127b2:	2b04      	cmp	r3, #4
 80127b4:	d104      	bne.n	80127c0 <HAL_TIM_PWM_Stop_DMA+0x198>
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	2201      	movs	r2, #1
 80127ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80127be:	e01b      	b.n	80127f8 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80127c0:	683b      	ldr	r3, [r7, #0]
 80127c2:	2b08      	cmp	r3, #8
 80127c4:	d104      	bne.n	80127d0 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	2201      	movs	r2, #1
 80127ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80127ce:	e013      	b.n	80127f8 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80127d0:	683b      	ldr	r3, [r7, #0]
 80127d2:	2b0c      	cmp	r3, #12
 80127d4:	d104      	bne.n	80127e0 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	2201      	movs	r2, #1
 80127da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80127de:	e00b      	b.n	80127f8 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80127e0:	683b      	ldr	r3, [r7, #0]
 80127e2:	2b10      	cmp	r3, #16
 80127e4:	d104      	bne.n	80127f0 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	2201      	movs	r2, #1
 80127ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80127ee:	e003      	b.n	80127f8 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	2201      	movs	r2, #1
 80127f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 80127f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80127fa:	4618      	mov	r0, r3
 80127fc:	3710      	adds	r7, #16
 80127fe:	46bd      	mov	sp, r7
 8012800:	bd80      	pop	{r7, pc}
 8012802:	bf00      	nop
 8012804:	40012c00 	.word	0x40012c00
 8012808:	40013400 	.word	0x40013400
 801280c:	40014000 	.word	0x40014000
 8012810:	40014400 	.word	0x40014400
 8012814:	40014800 	.word	0x40014800

08012818 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8012818:	b580      	push	{r7, lr}
 801281a:	b086      	sub	sp, #24
 801281c:	af00      	add	r7, sp, #0
 801281e:	6078      	str	r0, [r7, #4]
 8012820:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	2b00      	cmp	r3, #0
 8012826:	d101      	bne.n	801282c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8012828:	2301      	movs	r3, #1
 801282a:	e097      	b.n	801295c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012832:	b2db      	uxtb	r3, r3
 8012834:	2b00      	cmp	r3, #0
 8012836:	d106      	bne.n	8012846 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	2200      	movs	r2, #0
 801283c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8012840:	6878      	ldr	r0, [r7, #4]
 8012842:	f7fb fad9 	bl	800ddf8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	2202      	movs	r2, #2
 801284a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	681b      	ldr	r3, [r3, #0]
 8012852:	689b      	ldr	r3, [r3, #8]
 8012854:	687a      	ldr	r2, [r7, #4]
 8012856:	6812      	ldr	r2, [r2, #0]
 8012858:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 801285c:	f023 0307 	bic.w	r3, r3, #7
 8012860:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	681a      	ldr	r2, [r3, #0]
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	3304      	adds	r3, #4
 801286a:	4619      	mov	r1, r3
 801286c:	4610      	mov	r0, r2
 801286e:	f000 fd11 	bl	8013294 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	689b      	ldr	r3, [r3, #8]
 8012878:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	681b      	ldr	r3, [r3, #0]
 801287e:	699b      	ldr	r3, [r3, #24]
 8012880:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	681b      	ldr	r3, [r3, #0]
 8012886:	6a1b      	ldr	r3, [r3, #32]
 8012888:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 801288a:	683b      	ldr	r3, [r7, #0]
 801288c:	681b      	ldr	r3, [r3, #0]
 801288e:	697a      	ldr	r2, [r7, #20]
 8012890:	4313      	orrs	r3, r2
 8012892:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8012894:	693b      	ldr	r3, [r7, #16]
 8012896:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801289a:	f023 0303 	bic.w	r3, r3, #3
 801289e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80128a0:	683b      	ldr	r3, [r7, #0]
 80128a2:	689a      	ldr	r2, [r3, #8]
 80128a4:	683b      	ldr	r3, [r7, #0]
 80128a6:	699b      	ldr	r3, [r3, #24]
 80128a8:	021b      	lsls	r3, r3, #8
 80128aa:	4313      	orrs	r3, r2
 80128ac:	693a      	ldr	r2, [r7, #16]
 80128ae:	4313      	orrs	r3, r2
 80128b0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80128b2:	693b      	ldr	r3, [r7, #16]
 80128b4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80128b8:	f023 030c 	bic.w	r3, r3, #12
 80128bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80128be:	693b      	ldr	r3, [r7, #16]
 80128c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80128c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80128c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80128ca:	683b      	ldr	r3, [r7, #0]
 80128cc:	68da      	ldr	r2, [r3, #12]
 80128ce:	683b      	ldr	r3, [r7, #0]
 80128d0:	69db      	ldr	r3, [r3, #28]
 80128d2:	021b      	lsls	r3, r3, #8
 80128d4:	4313      	orrs	r3, r2
 80128d6:	693a      	ldr	r2, [r7, #16]
 80128d8:	4313      	orrs	r3, r2
 80128da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80128dc:	683b      	ldr	r3, [r7, #0]
 80128de:	691b      	ldr	r3, [r3, #16]
 80128e0:	011a      	lsls	r2, r3, #4
 80128e2:	683b      	ldr	r3, [r7, #0]
 80128e4:	6a1b      	ldr	r3, [r3, #32]
 80128e6:	031b      	lsls	r3, r3, #12
 80128e8:	4313      	orrs	r3, r2
 80128ea:	693a      	ldr	r2, [r7, #16]
 80128ec:	4313      	orrs	r3, r2
 80128ee:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80128f0:	68fb      	ldr	r3, [r7, #12]
 80128f2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80128f6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80128f8:	68fb      	ldr	r3, [r7, #12]
 80128fa:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80128fe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8012900:	683b      	ldr	r3, [r7, #0]
 8012902:	685a      	ldr	r2, [r3, #4]
 8012904:	683b      	ldr	r3, [r7, #0]
 8012906:	695b      	ldr	r3, [r3, #20]
 8012908:	011b      	lsls	r3, r3, #4
 801290a:	4313      	orrs	r3, r2
 801290c:	68fa      	ldr	r2, [r7, #12]
 801290e:	4313      	orrs	r3, r2
 8012910:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	681b      	ldr	r3, [r3, #0]
 8012916:	697a      	ldr	r2, [r7, #20]
 8012918:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	681b      	ldr	r3, [r3, #0]
 801291e:	693a      	ldr	r2, [r7, #16]
 8012920:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	681b      	ldr	r3, [r3, #0]
 8012926:	68fa      	ldr	r2, [r7, #12]
 8012928:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	2201      	movs	r2, #1
 801292e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	2201      	movs	r2, #1
 8012936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	2201      	movs	r2, #1
 801293e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	2201      	movs	r2, #1
 8012946:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	2201      	movs	r2, #1
 801294e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	2201      	movs	r2, #1
 8012956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801295a:	2300      	movs	r3, #0
}
 801295c:	4618      	mov	r0, r3
 801295e:	3718      	adds	r7, #24
 8012960:	46bd      	mov	sp, r7
 8012962:	bd80      	pop	{r7, pc}

08012964 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012964:	b580      	push	{r7, lr}
 8012966:	b084      	sub	sp, #16
 8012968:	af00      	add	r7, sp, #0
 801296a:	6078      	str	r0, [r7, #4]
 801296c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8012974:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801297c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012984:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801298c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 801298e:	683b      	ldr	r3, [r7, #0]
 8012990:	2b00      	cmp	r3, #0
 8012992:	d110      	bne.n	80129b6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8012994:	7bfb      	ldrb	r3, [r7, #15]
 8012996:	2b01      	cmp	r3, #1
 8012998:	d102      	bne.n	80129a0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 801299a:	7b7b      	ldrb	r3, [r7, #13]
 801299c:	2b01      	cmp	r3, #1
 801299e:	d001      	beq.n	80129a4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80129a0:	2301      	movs	r3, #1
 80129a2:	e069      	b.n	8012a78 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	2202      	movs	r2, #2
 80129a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	2202      	movs	r2, #2
 80129b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80129b4:	e031      	b.n	8012a1a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80129b6:	683b      	ldr	r3, [r7, #0]
 80129b8:	2b04      	cmp	r3, #4
 80129ba:	d110      	bne.n	80129de <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80129bc:	7bbb      	ldrb	r3, [r7, #14]
 80129be:	2b01      	cmp	r3, #1
 80129c0:	d102      	bne.n	80129c8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80129c2:	7b3b      	ldrb	r3, [r7, #12]
 80129c4:	2b01      	cmp	r3, #1
 80129c6:	d001      	beq.n	80129cc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80129c8:	2301      	movs	r3, #1
 80129ca:	e055      	b.n	8012a78 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	2202      	movs	r2, #2
 80129d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	2202      	movs	r2, #2
 80129d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80129dc:	e01d      	b.n	8012a1a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80129de:	7bfb      	ldrb	r3, [r7, #15]
 80129e0:	2b01      	cmp	r3, #1
 80129e2:	d108      	bne.n	80129f6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80129e4:	7bbb      	ldrb	r3, [r7, #14]
 80129e6:	2b01      	cmp	r3, #1
 80129e8:	d105      	bne.n	80129f6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80129ea:	7b7b      	ldrb	r3, [r7, #13]
 80129ec:	2b01      	cmp	r3, #1
 80129ee:	d102      	bne.n	80129f6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80129f0:	7b3b      	ldrb	r3, [r7, #12]
 80129f2:	2b01      	cmp	r3, #1
 80129f4:	d001      	beq.n	80129fa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80129f6:	2301      	movs	r3, #1
 80129f8:	e03e      	b.n	8012a78 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	2202      	movs	r2, #2
 80129fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	2202      	movs	r2, #2
 8012a06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	2202      	movs	r2, #2
 8012a0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	2202      	movs	r2, #2
 8012a16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8012a1a:	683b      	ldr	r3, [r7, #0]
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d003      	beq.n	8012a28 <HAL_TIM_Encoder_Start+0xc4>
 8012a20:	683b      	ldr	r3, [r7, #0]
 8012a22:	2b04      	cmp	r3, #4
 8012a24:	d008      	beq.n	8012a38 <HAL_TIM_Encoder_Start+0xd4>
 8012a26:	e00f      	b.n	8012a48 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	2201      	movs	r2, #1
 8012a2e:	2100      	movs	r1, #0
 8012a30:	4618      	mov	r0, r3
 8012a32:	f001 f839 	bl	8013aa8 <TIM_CCxChannelCmd>
      break;
 8012a36:	e016      	b.n	8012a66 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	681b      	ldr	r3, [r3, #0]
 8012a3c:	2201      	movs	r2, #1
 8012a3e:	2104      	movs	r1, #4
 8012a40:	4618      	mov	r0, r3
 8012a42:	f001 f831 	bl	8013aa8 <TIM_CCxChannelCmd>
      break;
 8012a46:	e00e      	b.n	8012a66 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	2201      	movs	r2, #1
 8012a4e:	2100      	movs	r1, #0
 8012a50:	4618      	mov	r0, r3
 8012a52:	f001 f829 	bl	8013aa8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	681b      	ldr	r3, [r3, #0]
 8012a5a:	2201      	movs	r2, #1
 8012a5c:	2104      	movs	r1, #4
 8012a5e:	4618      	mov	r0, r3
 8012a60:	f001 f822 	bl	8013aa8 <TIM_CCxChannelCmd>
      break;
 8012a64:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	681b      	ldr	r3, [r3, #0]
 8012a6a:	681a      	ldr	r2, [r3, #0]
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	681b      	ldr	r3, [r3, #0]
 8012a70:	f042 0201 	orr.w	r2, r2, #1
 8012a74:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8012a76:	2300      	movs	r3, #0
}
 8012a78:	4618      	mov	r0, r3
 8012a7a:	3710      	adds	r7, #16
 8012a7c:	46bd      	mov	sp, r7
 8012a7e:	bd80      	pop	{r7, pc}

08012a80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8012a80:	b580      	push	{r7, lr}
 8012a82:	b082      	sub	sp, #8
 8012a84:	af00      	add	r7, sp, #0
 8012a86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	681b      	ldr	r3, [r3, #0]
 8012a8c:	691b      	ldr	r3, [r3, #16]
 8012a8e:	f003 0302 	and.w	r3, r3, #2
 8012a92:	2b02      	cmp	r3, #2
 8012a94:	d122      	bne.n	8012adc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	681b      	ldr	r3, [r3, #0]
 8012a9a:	68db      	ldr	r3, [r3, #12]
 8012a9c:	f003 0302 	and.w	r3, r3, #2
 8012aa0:	2b02      	cmp	r3, #2
 8012aa2:	d11b      	bne.n	8012adc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	681b      	ldr	r3, [r3, #0]
 8012aa8:	f06f 0202 	mvn.w	r2, #2
 8012aac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	2201      	movs	r2, #1
 8012ab2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	681b      	ldr	r3, [r3, #0]
 8012ab8:	699b      	ldr	r3, [r3, #24]
 8012aba:	f003 0303 	and.w	r3, r3, #3
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d003      	beq.n	8012aca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8012ac2:	6878      	ldr	r0, [r7, #4]
 8012ac4:	f000 fae3 	bl	801308e <HAL_TIM_IC_CaptureCallback>
 8012ac8:	e005      	b.n	8012ad6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8012aca:	6878      	ldr	r0, [r7, #4]
 8012acc:	f000 fad5 	bl	801307a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012ad0:	6878      	ldr	r0, [r7, #4]
 8012ad2:	f000 fae6 	bl	80130a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	2200      	movs	r2, #0
 8012ada:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	691b      	ldr	r3, [r3, #16]
 8012ae2:	f003 0304 	and.w	r3, r3, #4
 8012ae6:	2b04      	cmp	r3, #4
 8012ae8:	d122      	bne.n	8012b30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	68db      	ldr	r3, [r3, #12]
 8012af0:	f003 0304 	and.w	r3, r3, #4
 8012af4:	2b04      	cmp	r3, #4
 8012af6:	d11b      	bne.n	8012b30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	f06f 0204 	mvn.w	r2, #4
 8012b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	2202      	movs	r2, #2
 8012b06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	699b      	ldr	r3, [r3, #24]
 8012b0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d003      	beq.n	8012b1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012b16:	6878      	ldr	r0, [r7, #4]
 8012b18:	f000 fab9 	bl	801308e <HAL_TIM_IC_CaptureCallback>
 8012b1c:	e005      	b.n	8012b2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012b1e:	6878      	ldr	r0, [r7, #4]
 8012b20:	f000 faab 	bl	801307a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012b24:	6878      	ldr	r0, [r7, #4]
 8012b26:	f000 fabc 	bl	80130a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	2200      	movs	r2, #0
 8012b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	681b      	ldr	r3, [r3, #0]
 8012b34:	691b      	ldr	r3, [r3, #16]
 8012b36:	f003 0308 	and.w	r3, r3, #8
 8012b3a:	2b08      	cmp	r3, #8
 8012b3c:	d122      	bne.n	8012b84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	681b      	ldr	r3, [r3, #0]
 8012b42:	68db      	ldr	r3, [r3, #12]
 8012b44:	f003 0308 	and.w	r3, r3, #8
 8012b48:	2b08      	cmp	r3, #8
 8012b4a:	d11b      	bne.n	8012b84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	f06f 0208 	mvn.w	r2, #8
 8012b54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	2204      	movs	r2, #4
 8012b5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	69db      	ldr	r3, [r3, #28]
 8012b62:	f003 0303 	and.w	r3, r3, #3
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d003      	beq.n	8012b72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012b6a:	6878      	ldr	r0, [r7, #4]
 8012b6c:	f000 fa8f 	bl	801308e <HAL_TIM_IC_CaptureCallback>
 8012b70:	e005      	b.n	8012b7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012b72:	6878      	ldr	r0, [r7, #4]
 8012b74:	f000 fa81 	bl	801307a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012b78:	6878      	ldr	r0, [r7, #4]
 8012b7a:	f000 fa92 	bl	80130a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	2200      	movs	r2, #0
 8012b82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	681b      	ldr	r3, [r3, #0]
 8012b88:	691b      	ldr	r3, [r3, #16]
 8012b8a:	f003 0310 	and.w	r3, r3, #16
 8012b8e:	2b10      	cmp	r3, #16
 8012b90:	d122      	bne.n	8012bd8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	68db      	ldr	r3, [r3, #12]
 8012b98:	f003 0310 	and.w	r3, r3, #16
 8012b9c:	2b10      	cmp	r3, #16
 8012b9e:	d11b      	bne.n	8012bd8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	f06f 0210 	mvn.w	r2, #16
 8012ba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	2208      	movs	r2, #8
 8012bae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	681b      	ldr	r3, [r3, #0]
 8012bb4:	69db      	ldr	r3, [r3, #28]
 8012bb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d003      	beq.n	8012bc6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012bbe:	6878      	ldr	r0, [r7, #4]
 8012bc0:	f000 fa65 	bl	801308e <HAL_TIM_IC_CaptureCallback>
 8012bc4:	e005      	b.n	8012bd2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012bc6:	6878      	ldr	r0, [r7, #4]
 8012bc8:	f000 fa57 	bl	801307a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012bcc:	6878      	ldr	r0, [r7, #4]
 8012bce:	f000 fa68 	bl	80130a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	2200      	movs	r2, #0
 8012bd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	681b      	ldr	r3, [r3, #0]
 8012bdc:	691b      	ldr	r3, [r3, #16]
 8012bde:	f003 0301 	and.w	r3, r3, #1
 8012be2:	2b01      	cmp	r3, #1
 8012be4:	d10e      	bne.n	8012c04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	681b      	ldr	r3, [r3, #0]
 8012bea:	68db      	ldr	r3, [r3, #12]
 8012bec:	f003 0301 	and.w	r3, r3, #1
 8012bf0:	2b01      	cmp	r3, #1
 8012bf2:	d107      	bne.n	8012c04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	681b      	ldr	r3, [r3, #0]
 8012bf8:	f06f 0201 	mvn.w	r2, #1
 8012bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8012bfe:	6878      	ldr	r0, [r7, #4]
 8012c00:	f7f8 fb66 	bl	800b2d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	681b      	ldr	r3, [r3, #0]
 8012c08:	691b      	ldr	r3, [r3, #16]
 8012c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012c0e:	2b80      	cmp	r3, #128	; 0x80
 8012c10:	d10e      	bne.n	8012c30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	68db      	ldr	r3, [r3, #12]
 8012c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012c1c:	2b80      	cmp	r3, #128	; 0x80
 8012c1e:	d107      	bne.n	8012c30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8012c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8012c2a:	6878      	ldr	r0, [r7, #4]
 8012c2c:	f001 f872 	bl	8013d14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	681b      	ldr	r3, [r3, #0]
 8012c34:	691b      	ldr	r3, [r3, #16]
 8012c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012c3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012c3e:	d10e      	bne.n	8012c5e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	68db      	ldr	r3, [r3, #12]
 8012c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012c4a:	2b80      	cmp	r3, #128	; 0x80
 8012c4c:	d107      	bne.n	8012c5e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8012c56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8012c58:	6878      	ldr	r0, [r7, #4]
 8012c5a:	f001 f865 	bl	8013d28 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	681b      	ldr	r3, [r3, #0]
 8012c62:	691b      	ldr	r3, [r3, #16]
 8012c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012c68:	2b40      	cmp	r3, #64	; 0x40
 8012c6a:	d10e      	bne.n	8012c8a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	68db      	ldr	r3, [r3, #12]
 8012c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012c76:	2b40      	cmp	r3, #64	; 0x40
 8012c78:	d107      	bne.n	8012c8a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	681b      	ldr	r3, [r3, #0]
 8012c7e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8012c82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8012c84:	6878      	ldr	r0, [r7, #4]
 8012c86:	f000 fa20 	bl	80130ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	681b      	ldr	r3, [r3, #0]
 8012c8e:	691b      	ldr	r3, [r3, #16]
 8012c90:	f003 0320 	and.w	r3, r3, #32
 8012c94:	2b20      	cmp	r3, #32
 8012c96:	d10e      	bne.n	8012cb6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	681b      	ldr	r3, [r3, #0]
 8012c9c:	68db      	ldr	r3, [r3, #12]
 8012c9e:	f003 0320 	and.w	r3, r3, #32
 8012ca2:	2b20      	cmp	r3, #32
 8012ca4:	d107      	bne.n	8012cb6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	f06f 0220 	mvn.w	r2, #32
 8012cae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8012cb0:	6878      	ldr	r0, [r7, #4]
 8012cb2:	f001 f825 	bl	8013d00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8012cb6:	bf00      	nop
 8012cb8:	3708      	adds	r7, #8
 8012cba:	46bd      	mov	sp, r7
 8012cbc:	bd80      	pop	{r7, pc}
	...

08012cc0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8012cc0:	b580      	push	{r7, lr}
 8012cc2:	b086      	sub	sp, #24
 8012cc4:	af00      	add	r7, sp, #0
 8012cc6:	60f8      	str	r0, [r7, #12]
 8012cc8:	60b9      	str	r1, [r7, #8]
 8012cca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012ccc:	2300      	movs	r3, #0
 8012cce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012cd6:	2b01      	cmp	r3, #1
 8012cd8:	d101      	bne.n	8012cde <HAL_TIM_PWM_ConfigChannel+0x1e>
 8012cda:	2302      	movs	r3, #2
 8012cdc:	e0ff      	b.n	8012ede <HAL_TIM_PWM_ConfigChannel+0x21e>
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	2201      	movs	r2, #1
 8012ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	2b14      	cmp	r3, #20
 8012cea:	f200 80f0 	bhi.w	8012ece <HAL_TIM_PWM_ConfigChannel+0x20e>
 8012cee:	a201      	add	r2, pc, #4	; (adr r2, 8012cf4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8012cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012cf4:	08012d49 	.word	0x08012d49
 8012cf8:	08012ecf 	.word	0x08012ecf
 8012cfc:	08012ecf 	.word	0x08012ecf
 8012d00:	08012ecf 	.word	0x08012ecf
 8012d04:	08012d89 	.word	0x08012d89
 8012d08:	08012ecf 	.word	0x08012ecf
 8012d0c:	08012ecf 	.word	0x08012ecf
 8012d10:	08012ecf 	.word	0x08012ecf
 8012d14:	08012dcb 	.word	0x08012dcb
 8012d18:	08012ecf 	.word	0x08012ecf
 8012d1c:	08012ecf 	.word	0x08012ecf
 8012d20:	08012ecf 	.word	0x08012ecf
 8012d24:	08012e0b 	.word	0x08012e0b
 8012d28:	08012ecf 	.word	0x08012ecf
 8012d2c:	08012ecf 	.word	0x08012ecf
 8012d30:	08012ecf 	.word	0x08012ecf
 8012d34:	08012e4d 	.word	0x08012e4d
 8012d38:	08012ecf 	.word	0x08012ecf
 8012d3c:	08012ecf 	.word	0x08012ecf
 8012d40:	08012ecf 	.word	0x08012ecf
 8012d44:	08012e8d 	.word	0x08012e8d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8012d48:	68fb      	ldr	r3, [r7, #12]
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	68b9      	ldr	r1, [r7, #8]
 8012d4e:	4618      	mov	r0, r3
 8012d50:	f000 fb3a 	bl	80133c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	681b      	ldr	r3, [r3, #0]
 8012d58:	699a      	ldr	r2, [r3, #24]
 8012d5a:	68fb      	ldr	r3, [r7, #12]
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	f042 0208 	orr.w	r2, r2, #8
 8012d62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8012d64:	68fb      	ldr	r3, [r7, #12]
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	699a      	ldr	r2, [r3, #24]
 8012d6a:	68fb      	ldr	r3, [r7, #12]
 8012d6c:	681b      	ldr	r3, [r3, #0]
 8012d6e:	f022 0204 	bic.w	r2, r2, #4
 8012d72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8012d74:	68fb      	ldr	r3, [r7, #12]
 8012d76:	681b      	ldr	r3, [r3, #0]
 8012d78:	6999      	ldr	r1, [r3, #24]
 8012d7a:	68bb      	ldr	r3, [r7, #8]
 8012d7c:	691a      	ldr	r2, [r3, #16]
 8012d7e:	68fb      	ldr	r3, [r7, #12]
 8012d80:	681b      	ldr	r3, [r3, #0]
 8012d82:	430a      	orrs	r2, r1
 8012d84:	619a      	str	r2, [r3, #24]
      break;
 8012d86:	e0a5      	b.n	8012ed4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8012d88:	68fb      	ldr	r3, [r7, #12]
 8012d8a:	681b      	ldr	r3, [r3, #0]
 8012d8c:	68b9      	ldr	r1, [r7, #8]
 8012d8e:	4618      	mov	r0, r3
 8012d90:	f000 fbaa 	bl	80134e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8012d94:	68fb      	ldr	r3, [r7, #12]
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	699a      	ldr	r2, [r3, #24]
 8012d9a:	68fb      	ldr	r3, [r7, #12]
 8012d9c:	681b      	ldr	r3, [r3, #0]
 8012d9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012da2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8012da4:	68fb      	ldr	r3, [r7, #12]
 8012da6:	681b      	ldr	r3, [r3, #0]
 8012da8:	699a      	ldr	r2, [r3, #24]
 8012daa:	68fb      	ldr	r3, [r7, #12]
 8012dac:	681b      	ldr	r3, [r3, #0]
 8012dae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012db2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8012db4:	68fb      	ldr	r3, [r7, #12]
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	6999      	ldr	r1, [r3, #24]
 8012dba:	68bb      	ldr	r3, [r7, #8]
 8012dbc:	691b      	ldr	r3, [r3, #16]
 8012dbe:	021a      	lsls	r2, r3, #8
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	681b      	ldr	r3, [r3, #0]
 8012dc4:	430a      	orrs	r2, r1
 8012dc6:	619a      	str	r2, [r3, #24]
      break;
 8012dc8:	e084      	b.n	8012ed4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	681b      	ldr	r3, [r3, #0]
 8012dce:	68b9      	ldr	r1, [r7, #8]
 8012dd0:	4618      	mov	r0, r3
 8012dd2:	f000 fc13 	bl	80135fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8012dd6:	68fb      	ldr	r3, [r7, #12]
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	69da      	ldr	r2, [r3, #28]
 8012ddc:	68fb      	ldr	r3, [r7, #12]
 8012dde:	681b      	ldr	r3, [r3, #0]
 8012de0:	f042 0208 	orr.w	r2, r2, #8
 8012de4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	681b      	ldr	r3, [r3, #0]
 8012dea:	69da      	ldr	r2, [r3, #28]
 8012dec:	68fb      	ldr	r3, [r7, #12]
 8012dee:	681b      	ldr	r3, [r3, #0]
 8012df0:	f022 0204 	bic.w	r2, r2, #4
 8012df4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	681b      	ldr	r3, [r3, #0]
 8012dfa:	69d9      	ldr	r1, [r3, #28]
 8012dfc:	68bb      	ldr	r3, [r7, #8]
 8012dfe:	691a      	ldr	r2, [r3, #16]
 8012e00:	68fb      	ldr	r3, [r7, #12]
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	430a      	orrs	r2, r1
 8012e06:	61da      	str	r2, [r3, #28]
      break;
 8012e08:	e064      	b.n	8012ed4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8012e0a:	68fb      	ldr	r3, [r7, #12]
 8012e0c:	681b      	ldr	r3, [r3, #0]
 8012e0e:	68b9      	ldr	r1, [r7, #8]
 8012e10:	4618      	mov	r0, r3
 8012e12:	f000 fc7b 	bl	801370c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	69da      	ldr	r2, [r3, #28]
 8012e1c:	68fb      	ldr	r3, [r7, #12]
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012e24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8012e26:	68fb      	ldr	r3, [r7, #12]
 8012e28:	681b      	ldr	r3, [r3, #0]
 8012e2a:	69da      	ldr	r2, [r3, #28]
 8012e2c:	68fb      	ldr	r3, [r7, #12]
 8012e2e:	681b      	ldr	r3, [r3, #0]
 8012e30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012e34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8012e36:	68fb      	ldr	r3, [r7, #12]
 8012e38:	681b      	ldr	r3, [r3, #0]
 8012e3a:	69d9      	ldr	r1, [r3, #28]
 8012e3c:	68bb      	ldr	r3, [r7, #8]
 8012e3e:	691b      	ldr	r3, [r3, #16]
 8012e40:	021a      	lsls	r2, r3, #8
 8012e42:	68fb      	ldr	r3, [r7, #12]
 8012e44:	681b      	ldr	r3, [r3, #0]
 8012e46:	430a      	orrs	r2, r1
 8012e48:	61da      	str	r2, [r3, #28]
      break;
 8012e4a:	e043      	b.n	8012ed4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	681b      	ldr	r3, [r3, #0]
 8012e50:	68b9      	ldr	r1, [r7, #8]
 8012e52:	4618      	mov	r0, r3
 8012e54:	f000 fcc4 	bl	80137e0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8012e58:	68fb      	ldr	r3, [r7, #12]
 8012e5a:	681b      	ldr	r3, [r3, #0]
 8012e5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	681b      	ldr	r3, [r3, #0]
 8012e62:	f042 0208 	orr.w	r2, r2, #8
 8012e66:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8012e68:	68fb      	ldr	r3, [r7, #12]
 8012e6a:	681b      	ldr	r3, [r3, #0]
 8012e6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012e6e:	68fb      	ldr	r3, [r7, #12]
 8012e70:	681b      	ldr	r3, [r3, #0]
 8012e72:	f022 0204 	bic.w	r2, r2, #4
 8012e76:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8012e78:	68fb      	ldr	r3, [r7, #12]
 8012e7a:	681b      	ldr	r3, [r3, #0]
 8012e7c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8012e7e:	68bb      	ldr	r3, [r7, #8]
 8012e80:	691a      	ldr	r2, [r3, #16]
 8012e82:	68fb      	ldr	r3, [r7, #12]
 8012e84:	681b      	ldr	r3, [r3, #0]
 8012e86:	430a      	orrs	r2, r1
 8012e88:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8012e8a:	e023      	b.n	8012ed4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8012e8c:	68fb      	ldr	r3, [r7, #12]
 8012e8e:	681b      	ldr	r3, [r3, #0]
 8012e90:	68b9      	ldr	r1, [r7, #8]
 8012e92:	4618      	mov	r0, r3
 8012e94:	f000 fd08 	bl	80138a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8012e98:	68fb      	ldr	r3, [r7, #12]
 8012e9a:	681b      	ldr	r3, [r3, #0]
 8012e9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012e9e:	68fb      	ldr	r3, [r7, #12]
 8012ea0:	681b      	ldr	r3, [r3, #0]
 8012ea2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012ea6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	681b      	ldr	r3, [r3, #0]
 8012eac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012eae:	68fb      	ldr	r3, [r7, #12]
 8012eb0:	681b      	ldr	r3, [r3, #0]
 8012eb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012eb6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8012eb8:	68fb      	ldr	r3, [r7, #12]
 8012eba:	681b      	ldr	r3, [r3, #0]
 8012ebc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8012ebe:	68bb      	ldr	r3, [r7, #8]
 8012ec0:	691b      	ldr	r3, [r3, #16]
 8012ec2:	021a      	lsls	r2, r3, #8
 8012ec4:	68fb      	ldr	r3, [r7, #12]
 8012ec6:	681b      	ldr	r3, [r3, #0]
 8012ec8:	430a      	orrs	r2, r1
 8012eca:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8012ecc:	e002      	b.n	8012ed4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8012ece:	2301      	movs	r3, #1
 8012ed0:	75fb      	strb	r3, [r7, #23]
      break;
 8012ed2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8012ed4:	68fb      	ldr	r3, [r7, #12]
 8012ed6:	2200      	movs	r2, #0
 8012ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8012edc:	7dfb      	ldrb	r3, [r7, #23]
}
 8012ede:	4618      	mov	r0, r3
 8012ee0:	3718      	adds	r7, #24
 8012ee2:	46bd      	mov	sp, r7
 8012ee4:	bd80      	pop	{r7, pc}
 8012ee6:	bf00      	nop

08012ee8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8012ee8:	b580      	push	{r7, lr}
 8012eea:	b084      	sub	sp, #16
 8012eec:	af00      	add	r7, sp, #0
 8012eee:	6078      	str	r0, [r7, #4]
 8012ef0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012ef2:	2300      	movs	r3, #0
 8012ef4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012efc:	2b01      	cmp	r3, #1
 8012efe:	d101      	bne.n	8012f04 <HAL_TIM_ConfigClockSource+0x1c>
 8012f00:	2302      	movs	r3, #2
 8012f02:	e0b6      	b.n	8013072 <HAL_TIM_ConfigClockSource+0x18a>
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	2201      	movs	r2, #1
 8012f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	2202      	movs	r2, #2
 8012f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	681b      	ldr	r3, [r3, #0]
 8012f18:	689b      	ldr	r3, [r3, #8]
 8012f1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8012f1c:	68bb      	ldr	r3, [r7, #8]
 8012f1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012f22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8012f26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012f28:	68bb      	ldr	r3, [r7, #8]
 8012f2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8012f2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	681b      	ldr	r3, [r3, #0]
 8012f34:	68ba      	ldr	r2, [r7, #8]
 8012f36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8012f38:	683b      	ldr	r3, [r7, #0]
 8012f3a:	681b      	ldr	r3, [r3, #0]
 8012f3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012f40:	d03e      	beq.n	8012fc0 <HAL_TIM_ConfigClockSource+0xd8>
 8012f42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012f46:	f200 8087 	bhi.w	8013058 <HAL_TIM_ConfigClockSource+0x170>
 8012f4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012f4e:	f000 8086 	beq.w	801305e <HAL_TIM_ConfigClockSource+0x176>
 8012f52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012f56:	d87f      	bhi.n	8013058 <HAL_TIM_ConfigClockSource+0x170>
 8012f58:	2b70      	cmp	r3, #112	; 0x70
 8012f5a:	d01a      	beq.n	8012f92 <HAL_TIM_ConfigClockSource+0xaa>
 8012f5c:	2b70      	cmp	r3, #112	; 0x70
 8012f5e:	d87b      	bhi.n	8013058 <HAL_TIM_ConfigClockSource+0x170>
 8012f60:	2b60      	cmp	r3, #96	; 0x60
 8012f62:	d050      	beq.n	8013006 <HAL_TIM_ConfigClockSource+0x11e>
 8012f64:	2b60      	cmp	r3, #96	; 0x60
 8012f66:	d877      	bhi.n	8013058 <HAL_TIM_ConfigClockSource+0x170>
 8012f68:	2b50      	cmp	r3, #80	; 0x50
 8012f6a:	d03c      	beq.n	8012fe6 <HAL_TIM_ConfigClockSource+0xfe>
 8012f6c:	2b50      	cmp	r3, #80	; 0x50
 8012f6e:	d873      	bhi.n	8013058 <HAL_TIM_ConfigClockSource+0x170>
 8012f70:	2b40      	cmp	r3, #64	; 0x40
 8012f72:	d058      	beq.n	8013026 <HAL_TIM_ConfigClockSource+0x13e>
 8012f74:	2b40      	cmp	r3, #64	; 0x40
 8012f76:	d86f      	bhi.n	8013058 <HAL_TIM_ConfigClockSource+0x170>
 8012f78:	2b30      	cmp	r3, #48	; 0x30
 8012f7a:	d064      	beq.n	8013046 <HAL_TIM_ConfigClockSource+0x15e>
 8012f7c:	2b30      	cmp	r3, #48	; 0x30
 8012f7e:	d86b      	bhi.n	8013058 <HAL_TIM_ConfigClockSource+0x170>
 8012f80:	2b20      	cmp	r3, #32
 8012f82:	d060      	beq.n	8013046 <HAL_TIM_ConfigClockSource+0x15e>
 8012f84:	2b20      	cmp	r3, #32
 8012f86:	d867      	bhi.n	8013058 <HAL_TIM_ConfigClockSource+0x170>
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d05c      	beq.n	8013046 <HAL_TIM_ConfigClockSource+0x15e>
 8012f8c:	2b10      	cmp	r3, #16
 8012f8e:	d05a      	beq.n	8013046 <HAL_TIM_ConfigClockSource+0x15e>
 8012f90:	e062      	b.n	8013058 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	6818      	ldr	r0, [r3, #0]
 8012f96:	683b      	ldr	r3, [r7, #0]
 8012f98:	6899      	ldr	r1, [r3, #8]
 8012f9a:	683b      	ldr	r3, [r7, #0]
 8012f9c:	685a      	ldr	r2, [r3, #4]
 8012f9e:	683b      	ldr	r3, [r7, #0]
 8012fa0:	68db      	ldr	r3, [r3, #12]
 8012fa2:	f000 fd61 	bl	8013a68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	681b      	ldr	r3, [r3, #0]
 8012faa:	689b      	ldr	r3, [r3, #8]
 8012fac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8012fae:	68bb      	ldr	r3, [r7, #8]
 8012fb0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8012fb4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	681b      	ldr	r3, [r3, #0]
 8012fba:	68ba      	ldr	r2, [r7, #8]
 8012fbc:	609a      	str	r2, [r3, #8]
      break;
 8012fbe:	e04f      	b.n	8013060 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	6818      	ldr	r0, [r3, #0]
 8012fc4:	683b      	ldr	r3, [r7, #0]
 8012fc6:	6899      	ldr	r1, [r3, #8]
 8012fc8:	683b      	ldr	r3, [r7, #0]
 8012fca:	685a      	ldr	r2, [r3, #4]
 8012fcc:	683b      	ldr	r3, [r7, #0]
 8012fce:	68db      	ldr	r3, [r3, #12]
 8012fd0:	f000 fd4a 	bl	8013a68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	681b      	ldr	r3, [r3, #0]
 8012fd8:	689a      	ldr	r2, [r3, #8]
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	681b      	ldr	r3, [r3, #0]
 8012fde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8012fe2:	609a      	str	r2, [r3, #8]
      break;
 8012fe4:	e03c      	b.n	8013060 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	6818      	ldr	r0, [r3, #0]
 8012fea:	683b      	ldr	r3, [r7, #0]
 8012fec:	6859      	ldr	r1, [r3, #4]
 8012fee:	683b      	ldr	r3, [r7, #0]
 8012ff0:	68db      	ldr	r3, [r3, #12]
 8012ff2:	461a      	mov	r2, r3
 8012ff4:	f000 fcbe 	bl	8013974 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	681b      	ldr	r3, [r3, #0]
 8012ffc:	2150      	movs	r1, #80	; 0x50
 8012ffe:	4618      	mov	r0, r3
 8013000:	f000 fd17 	bl	8013a32 <TIM_ITRx_SetConfig>
      break;
 8013004:	e02c      	b.n	8013060 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	6818      	ldr	r0, [r3, #0]
 801300a:	683b      	ldr	r3, [r7, #0]
 801300c:	6859      	ldr	r1, [r3, #4]
 801300e:	683b      	ldr	r3, [r7, #0]
 8013010:	68db      	ldr	r3, [r3, #12]
 8013012:	461a      	mov	r2, r3
 8013014:	f000 fcdd 	bl	80139d2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	681b      	ldr	r3, [r3, #0]
 801301c:	2160      	movs	r1, #96	; 0x60
 801301e:	4618      	mov	r0, r3
 8013020:	f000 fd07 	bl	8013a32 <TIM_ITRx_SetConfig>
      break;
 8013024:	e01c      	b.n	8013060 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	6818      	ldr	r0, [r3, #0]
 801302a:	683b      	ldr	r3, [r7, #0]
 801302c:	6859      	ldr	r1, [r3, #4]
 801302e:	683b      	ldr	r3, [r7, #0]
 8013030:	68db      	ldr	r3, [r3, #12]
 8013032:	461a      	mov	r2, r3
 8013034:	f000 fc9e 	bl	8013974 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	681b      	ldr	r3, [r3, #0]
 801303c:	2140      	movs	r1, #64	; 0x40
 801303e:	4618      	mov	r0, r3
 8013040:	f000 fcf7 	bl	8013a32 <TIM_ITRx_SetConfig>
      break;
 8013044:	e00c      	b.n	8013060 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	681a      	ldr	r2, [r3, #0]
 801304a:	683b      	ldr	r3, [r7, #0]
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	4619      	mov	r1, r3
 8013050:	4610      	mov	r0, r2
 8013052:	f000 fcee 	bl	8013a32 <TIM_ITRx_SetConfig>
      break;
 8013056:	e003      	b.n	8013060 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8013058:	2301      	movs	r3, #1
 801305a:	73fb      	strb	r3, [r7, #15]
      break;
 801305c:	e000      	b.n	8013060 <HAL_TIM_ConfigClockSource+0x178>
      break;
 801305e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	2201      	movs	r2, #1
 8013064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	2200      	movs	r2, #0
 801306c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8013070:	7bfb      	ldrb	r3, [r7, #15]
}
 8013072:	4618      	mov	r0, r3
 8013074:	3710      	adds	r7, #16
 8013076:	46bd      	mov	sp, r7
 8013078:	bd80      	pop	{r7, pc}

0801307a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801307a:	b480      	push	{r7}
 801307c:	b083      	sub	sp, #12
 801307e:	af00      	add	r7, sp, #0
 8013080:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8013082:	bf00      	nop
 8013084:	370c      	adds	r7, #12
 8013086:	46bd      	mov	sp, r7
 8013088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801308c:	4770      	bx	lr

0801308e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801308e:	b480      	push	{r7}
 8013090:	b083      	sub	sp, #12
 8013092:	af00      	add	r7, sp, #0
 8013094:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8013096:	bf00      	nop
 8013098:	370c      	adds	r7, #12
 801309a:	46bd      	mov	sp, r7
 801309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130a0:	4770      	bx	lr

080130a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80130a2:	b480      	push	{r7}
 80130a4:	b083      	sub	sp, #12
 80130a6:	af00      	add	r7, sp, #0
 80130a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80130aa:	bf00      	nop
 80130ac:	370c      	adds	r7, #12
 80130ae:	46bd      	mov	sp, r7
 80130b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130b4:	4770      	bx	lr

080130b6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80130b6:	b480      	push	{r7}
 80130b8:	b083      	sub	sp, #12
 80130ba:	af00      	add	r7, sp, #0
 80130bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80130be:	bf00      	nop
 80130c0:	370c      	adds	r7, #12
 80130c2:	46bd      	mov	sp, r7
 80130c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130c8:	4770      	bx	lr

080130ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80130ca:	b480      	push	{r7}
 80130cc:	b083      	sub	sp, #12
 80130ce:	af00      	add	r7, sp, #0
 80130d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80130d2:	bf00      	nop
 80130d4:	370c      	adds	r7, #12
 80130d6:	46bd      	mov	sp, r7
 80130d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130dc:	4770      	bx	lr

080130de <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80130de:	b480      	push	{r7}
 80130e0:	b083      	sub	sp, #12
 80130e2:	af00      	add	r7, sp, #0
 80130e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80130e6:	bf00      	nop
 80130e8:	370c      	adds	r7, #12
 80130ea:	46bd      	mov	sp, r7
 80130ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130f0:	4770      	bx	lr

080130f2 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80130f2:	b580      	push	{r7, lr}
 80130f4:	b084      	sub	sp, #16
 80130f6:	af00      	add	r7, sp, #0
 80130f8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80130fe:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8013100:	68fb      	ldr	r3, [r7, #12]
 8013102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013104:	687a      	ldr	r2, [r7, #4]
 8013106:	429a      	cmp	r2, r3
 8013108:	d107      	bne.n	801311a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801310a:	68fb      	ldr	r3, [r7, #12]
 801310c:	2201      	movs	r2, #1
 801310e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8013110:	68fb      	ldr	r3, [r7, #12]
 8013112:	2201      	movs	r2, #1
 8013114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8013118:	e02a      	b.n	8013170 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 801311a:	68fb      	ldr	r3, [r7, #12]
 801311c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801311e:	687a      	ldr	r2, [r7, #4]
 8013120:	429a      	cmp	r2, r3
 8013122:	d107      	bne.n	8013134 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8013124:	68fb      	ldr	r3, [r7, #12]
 8013126:	2202      	movs	r2, #2
 8013128:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	2201      	movs	r2, #1
 801312e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8013132:	e01d      	b.n	8013170 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013138:	687a      	ldr	r2, [r7, #4]
 801313a:	429a      	cmp	r2, r3
 801313c:	d107      	bne.n	801314e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801313e:	68fb      	ldr	r3, [r7, #12]
 8013140:	2204      	movs	r2, #4
 8013142:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8013144:	68fb      	ldr	r3, [r7, #12]
 8013146:	2201      	movs	r2, #1
 8013148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801314c:	e010      	b.n	8013170 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 801314e:	68fb      	ldr	r3, [r7, #12]
 8013150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013152:	687a      	ldr	r2, [r7, #4]
 8013154:	429a      	cmp	r2, r3
 8013156:	d107      	bne.n	8013168 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8013158:	68fb      	ldr	r3, [r7, #12]
 801315a:	2208      	movs	r2, #8
 801315c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 801315e:	68fb      	ldr	r3, [r7, #12]
 8013160:	2201      	movs	r2, #1
 8013162:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8013166:	e003      	b.n	8013170 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8013168:	68fb      	ldr	r3, [r7, #12]
 801316a:	2201      	movs	r2, #1
 801316c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8013170:	68f8      	ldr	r0, [r7, #12]
 8013172:	f7ff ffb4 	bl	80130de <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013176:	68fb      	ldr	r3, [r7, #12]
 8013178:	2200      	movs	r2, #0
 801317a:	771a      	strb	r2, [r3, #28]
}
 801317c:	bf00      	nop
 801317e:	3710      	adds	r7, #16
 8013180:	46bd      	mov	sp, r7
 8013182:	bd80      	pop	{r7, pc}

08013184 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8013184:	b580      	push	{r7, lr}
 8013186:	b084      	sub	sp, #16
 8013188:	af00      	add	r7, sp, #0
 801318a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013190:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8013192:	68fb      	ldr	r3, [r7, #12]
 8013194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013196:	687a      	ldr	r2, [r7, #4]
 8013198:	429a      	cmp	r2, r3
 801319a:	d10b      	bne.n	80131b4 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801319c:	68fb      	ldr	r3, [r7, #12]
 801319e:	2201      	movs	r2, #1
 80131a0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	69db      	ldr	r3, [r3, #28]
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d136      	bne.n	8013218 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80131aa:	68fb      	ldr	r3, [r7, #12]
 80131ac:	2201      	movs	r2, #1
 80131ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80131b2:	e031      	b.n	8013218 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80131b4:	68fb      	ldr	r3, [r7, #12]
 80131b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80131b8:	687a      	ldr	r2, [r7, #4]
 80131ba:	429a      	cmp	r2, r3
 80131bc:	d10b      	bne.n	80131d6 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	2202      	movs	r2, #2
 80131c2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	69db      	ldr	r3, [r3, #28]
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d125      	bne.n	8013218 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80131cc:	68fb      	ldr	r3, [r7, #12]
 80131ce:	2201      	movs	r2, #1
 80131d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80131d4:	e020      	b.n	8013218 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80131d6:	68fb      	ldr	r3, [r7, #12]
 80131d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131da:	687a      	ldr	r2, [r7, #4]
 80131dc:	429a      	cmp	r2, r3
 80131de:	d10b      	bne.n	80131f8 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80131e0:	68fb      	ldr	r3, [r7, #12]
 80131e2:	2204      	movs	r2, #4
 80131e4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	69db      	ldr	r3, [r3, #28]
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d114      	bne.n	8013218 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80131ee:	68fb      	ldr	r3, [r7, #12]
 80131f0:	2201      	movs	r2, #1
 80131f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80131f6:	e00f      	b.n	8013218 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80131f8:	68fb      	ldr	r3, [r7, #12]
 80131fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80131fc:	687a      	ldr	r2, [r7, #4]
 80131fe:	429a      	cmp	r2, r3
 8013200:	d10a      	bne.n	8013218 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8013202:	68fb      	ldr	r3, [r7, #12]
 8013204:	2208      	movs	r2, #8
 8013206:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	69db      	ldr	r3, [r3, #28]
 801320c:	2b00      	cmp	r3, #0
 801320e:	d103      	bne.n	8013218 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8013210:	68fb      	ldr	r3, [r7, #12]
 8013212:	2201      	movs	r2, #1
 8013214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013218:	68f8      	ldr	r0, [r7, #12]
 801321a:	f7ff ff42 	bl	80130a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801321e:	68fb      	ldr	r3, [r7, #12]
 8013220:	2200      	movs	r2, #0
 8013222:	771a      	strb	r2, [r3, #28]
}
 8013224:	bf00      	nop
 8013226:	3710      	adds	r7, #16
 8013228:	46bd      	mov	sp, r7
 801322a:	bd80      	pop	{r7, pc}

0801322c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 801322c:	b580      	push	{r7, lr}
 801322e:	b084      	sub	sp, #16
 8013230:	af00      	add	r7, sp, #0
 8013232:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013238:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 801323a:	68fb      	ldr	r3, [r7, #12]
 801323c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801323e:	687a      	ldr	r2, [r7, #4]
 8013240:	429a      	cmp	r2, r3
 8013242:	d103      	bne.n	801324c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8013244:	68fb      	ldr	r3, [r7, #12]
 8013246:	2201      	movs	r2, #1
 8013248:	771a      	strb	r2, [r3, #28]
 801324a:	e019      	b.n	8013280 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013250:	687a      	ldr	r2, [r7, #4]
 8013252:	429a      	cmp	r2, r3
 8013254:	d103      	bne.n	801325e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8013256:	68fb      	ldr	r3, [r7, #12]
 8013258:	2202      	movs	r2, #2
 801325a:	771a      	strb	r2, [r3, #28]
 801325c:	e010      	b.n	8013280 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013262:	687a      	ldr	r2, [r7, #4]
 8013264:	429a      	cmp	r2, r3
 8013266:	d103      	bne.n	8013270 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8013268:	68fb      	ldr	r3, [r7, #12]
 801326a:	2204      	movs	r2, #4
 801326c:	771a      	strb	r2, [r3, #28]
 801326e:	e007      	b.n	8013280 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8013270:	68fb      	ldr	r3, [r7, #12]
 8013272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013274:	687a      	ldr	r2, [r7, #4]
 8013276:	429a      	cmp	r2, r3
 8013278:	d102      	bne.n	8013280 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801327a:	68fb      	ldr	r3, [r7, #12]
 801327c:	2208      	movs	r2, #8
 801327e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8013280:	68f8      	ldr	r0, [r7, #12]
 8013282:	f7ff ff18 	bl	80130b6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013286:	68fb      	ldr	r3, [r7, #12]
 8013288:	2200      	movs	r2, #0
 801328a:	771a      	strb	r2, [r3, #28]
}
 801328c:	bf00      	nop
 801328e:	3710      	adds	r7, #16
 8013290:	46bd      	mov	sp, r7
 8013292:	bd80      	pop	{r7, pc}

08013294 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8013294:	b480      	push	{r7}
 8013296:	b085      	sub	sp, #20
 8013298:	af00      	add	r7, sp, #0
 801329a:	6078      	str	r0, [r7, #4]
 801329c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	681b      	ldr	r3, [r3, #0]
 80132a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	4a40      	ldr	r2, [pc, #256]	; (80133a8 <TIM_Base_SetConfig+0x114>)
 80132a8:	4293      	cmp	r3, r2
 80132aa:	d013      	beq.n	80132d4 <TIM_Base_SetConfig+0x40>
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80132b2:	d00f      	beq.n	80132d4 <TIM_Base_SetConfig+0x40>
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	4a3d      	ldr	r2, [pc, #244]	; (80133ac <TIM_Base_SetConfig+0x118>)
 80132b8:	4293      	cmp	r3, r2
 80132ba:	d00b      	beq.n	80132d4 <TIM_Base_SetConfig+0x40>
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	4a3c      	ldr	r2, [pc, #240]	; (80133b0 <TIM_Base_SetConfig+0x11c>)
 80132c0:	4293      	cmp	r3, r2
 80132c2:	d007      	beq.n	80132d4 <TIM_Base_SetConfig+0x40>
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	4a3b      	ldr	r2, [pc, #236]	; (80133b4 <TIM_Base_SetConfig+0x120>)
 80132c8:	4293      	cmp	r3, r2
 80132ca:	d003      	beq.n	80132d4 <TIM_Base_SetConfig+0x40>
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	4a3a      	ldr	r2, [pc, #232]	; (80133b8 <TIM_Base_SetConfig+0x124>)
 80132d0:	4293      	cmp	r3, r2
 80132d2:	d108      	bne.n	80132e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80132d4:	68fb      	ldr	r3, [r7, #12]
 80132d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80132da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80132dc:	683b      	ldr	r3, [r7, #0]
 80132de:	685b      	ldr	r3, [r3, #4]
 80132e0:	68fa      	ldr	r2, [r7, #12]
 80132e2:	4313      	orrs	r3, r2
 80132e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	4a2f      	ldr	r2, [pc, #188]	; (80133a8 <TIM_Base_SetConfig+0x114>)
 80132ea:	4293      	cmp	r3, r2
 80132ec:	d01f      	beq.n	801332e <TIM_Base_SetConfig+0x9a>
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80132f4:	d01b      	beq.n	801332e <TIM_Base_SetConfig+0x9a>
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	4a2c      	ldr	r2, [pc, #176]	; (80133ac <TIM_Base_SetConfig+0x118>)
 80132fa:	4293      	cmp	r3, r2
 80132fc:	d017      	beq.n	801332e <TIM_Base_SetConfig+0x9a>
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	4a2b      	ldr	r2, [pc, #172]	; (80133b0 <TIM_Base_SetConfig+0x11c>)
 8013302:	4293      	cmp	r3, r2
 8013304:	d013      	beq.n	801332e <TIM_Base_SetConfig+0x9a>
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	4a2a      	ldr	r2, [pc, #168]	; (80133b4 <TIM_Base_SetConfig+0x120>)
 801330a:	4293      	cmp	r3, r2
 801330c:	d00f      	beq.n	801332e <TIM_Base_SetConfig+0x9a>
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	4a29      	ldr	r2, [pc, #164]	; (80133b8 <TIM_Base_SetConfig+0x124>)
 8013312:	4293      	cmp	r3, r2
 8013314:	d00b      	beq.n	801332e <TIM_Base_SetConfig+0x9a>
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	4a28      	ldr	r2, [pc, #160]	; (80133bc <TIM_Base_SetConfig+0x128>)
 801331a:	4293      	cmp	r3, r2
 801331c:	d007      	beq.n	801332e <TIM_Base_SetConfig+0x9a>
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	4a27      	ldr	r2, [pc, #156]	; (80133c0 <TIM_Base_SetConfig+0x12c>)
 8013322:	4293      	cmp	r3, r2
 8013324:	d003      	beq.n	801332e <TIM_Base_SetConfig+0x9a>
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	4a26      	ldr	r2, [pc, #152]	; (80133c4 <TIM_Base_SetConfig+0x130>)
 801332a:	4293      	cmp	r3, r2
 801332c:	d108      	bne.n	8013340 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013334:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8013336:	683b      	ldr	r3, [r7, #0]
 8013338:	68db      	ldr	r3, [r3, #12]
 801333a:	68fa      	ldr	r2, [r7, #12]
 801333c:	4313      	orrs	r3, r2
 801333e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8013340:	68fb      	ldr	r3, [r7, #12]
 8013342:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8013346:	683b      	ldr	r3, [r7, #0]
 8013348:	695b      	ldr	r3, [r3, #20]
 801334a:	4313      	orrs	r3, r2
 801334c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	68fa      	ldr	r2, [r7, #12]
 8013352:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013354:	683b      	ldr	r3, [r7, #0]
 8013356:	689a      	ldr	r2, [r3, #8]
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801335c:	683b      	ldr	r3, [r7, #0]
 801335e:	681a      	ldr	r2, [r3, #0]
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	4a10      	ldr	r2, [pc, #64]	; (80133a8 <TIM_Base_SetConfig+0x114>)
 8013368:	4293      	cmp	r3, r2
 801336a:	d00f      	beq.n	801338c <TIM_Base_SetConfig+0xf8>
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	4a12      	ldr	r2, [pc, #72]	; (80133b8 <TIM_Base_SetConfig+0x124>)
 8013370:	4293      	cmp	r3, r2
 8013372:	d00b      	beq.n	801338c <TIM_Base_SetConfig+0xf8>
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	4a11      	ldr	r2, [pc, #68]	; (80133bc <TIM_Base_SetConfig+0x128>)
 8013378:	4293      	cmp	r3, r2
 801337a:	d007      	beq.n	801338c <TIM_Base_SetConfig+0xf8>
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	4a10      	ldr	r2, [pc, #64]	; (80133c0 <TIM_Base_SetConfig+0x12c>)
 8013380:	4293      	cmp	r3, r2
 8013382:	d003      	beq.n	801338c <TIM_Base_SetConfig+0xf8>
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	4a0f      	ldr	r2, [pc, #60]	; (80133c4 <TIM_Base_SetConfig+0x130>)
 8013388:	4293      	cmp	r3, r2
 801338a:	d103      	bne.n	8013394 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801338c:	683b      	ldr	r3, [r7, #0]
 801338e:	691a      	ldr	r2, [r3, #16]
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	2201      	movs	r2, #1
 8013398:	615a      	str	r2, [r3, #20]
}
 801339a:	bf00      	nop
 801339c:	3714      	adds	r7, #20
 801339e:	46bd      	mov	sp, r7
 80133a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133a4:	4770      	bx	lr
 80133a6:	bf00      	nop
 80133a8:	40012c00 	.word	0x40012c00
 80133ac:	40000400 	.word	0x40000400
 80133b0:	40000800 	.word	0x40000800
 80133b4:	40000c00 	.word	0x40000c00
 80133b8:	40013400 	.word	0x40013400
 80133bc:	40014000 	.word	0x40014000
 80133c0:	40014400 	.word	0x40014400
 80133c4:	40014800 	.word	0x40014800

080133c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80133c8:	b480      	push	{r7}
 80133ca:	b087      	sub	sp, #28
 80133cc:	af00      	add	r7, sp, #0
 80133ce:	6078      	str	r0, [r7, #4]
 80133d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	6a1b      	ldr	r3, [r3, #32]
 80133d6:	f023 0201 	bic.w	r2, r3, #1
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	6a1b      	ldr	r3, [r3, #32]
 80133e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	685b      	ldr	r3, [r3, #4]
 80133e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	699b      	ldr	r3, [r3, #24]
 80133ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80133f0:	68fb      	ldr	r3, [r7, #12]
 80133f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80133f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80133fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80133fc:	68fb      	ldr	r3, [r7, #12]
 80133fe:	f023 0303 	bic.w	r3, r3, #3
 8013402:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013404:	683b      	ldr	r3, [r7, #0]
 8013406:	681b      	ldr	r3, [r3, #0]
 8013408:	68fa      	ldr	r2, [r7, #12]
 801340a:	4313      	orrs	r3, r2
 801340c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801340e:	697b      	ldr	r3, [r7, #20]
 8013410:	f023 0302 	bic.w	r3, r3, #2
 8013414:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8013416:	683b      	ldr	r3, [r7, #0]
 8013418:	689b      	ldr	r3, [r3, #8]
 801341a:	697a      	ldr	r2, [r7, #20]
 801341c:	4313      	orrs	r3, r2
 801341e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	4a2c      	ldr	r2, [pc, #176]	; (80134d4 <TIM_OC1_SetConfig+0x10c>)
 8013424:	4293      	cmp	r3, r2
 8013426:	d00f      	beq.n	8013448 <TIM_OC1_SetConfig+0x80>
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	4a2b      	ldr	r2, [pc, #172]	; (80134d8 <TIM_OC1_SetConfig+0x110>)
 801342c:	4293      	cmp	r3, r2
 801342e:	d00b      	beq.n	8013448 <TIM_OC1_SetConfig+0x80>
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	4a2a      	ldr	r2, [pc, #168]	; (80134dc <TIM_OC1_SetConfig+0x114>)
 8013434:	4293      	cmp	r3, r2
 8013436:	d007      	beq.n	8013448 <TIM_OC1_SetConfig+0x80>
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	4a29      	ldr	r2, [pc, #164]	; (80134e0 <TIM_OC1_SetConfig+0x118>)
 801343c:	4293      	cmp	r3, r2
 801343e:	d003      	beq.n	8013448 <TIM_OC1_SetConfig+0x80>
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	4a28      	ldr	r2, [pc, #160]	; (80134e4 <TIM_OC1_SetConfig+0x11c>)
 8013444:	4293      	cmp	r3, r2
 8013446:	d10c      	bne.n	8013462 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8013448:	697b      	ldr	r3, [r7, #20]
 801344a:	f023 0308 	bic.w	r3, r3, #8
 801344e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8013450:	683b      	ldr	r3, [r7, #0]
 8013452:	68db      	ldr	r3, [r3, #12]
 8013454:	697a      	ldr	r2, [r7, #20]
 8013456:	4313      	orrs	r3, r2
 8013458:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801345a:	697b      	ldr	r3, [r7, #20]
 801345c:	f023 0304 	bic.w	r3, r3, #4
 8013460:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	4a1b      	ldr	r2, [pc, #108]	; (80134d4 <TIM_OC1_SetConfig+0x10c>)
 8013466:	4293      	cmp	r3, r2
 8013468:	d00f      	beq.n	801348a <TIM_OC1_SetConfig+0xc2>
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	4a1a      	ldr	r2, [pc, #104]	; (80134d8 <TIM_OC1_SetConfig+0x110>)
 801346e:	4293      	cmp	r3, r2
 8013470:	d00b      	beq.n	801348a <TIM_OC1_SetConfig+0xc2>
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	4a19      	ldr	r2, [pc, #100]	; (80134dc <TIM_OC1_SetConfig+0x114>)
 8013476:	4293      	cmp	r3, r2
 8013478:	d007      	beq.n	801348a <TIM_OC1_SetConfig+0xc2>
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	4a18      	ldr	r2, [pc, #96]	; (80134e0 <TIM_OC1_SetConfig+0x118>)
 801347e:	4293      	cmp	r3, r2
 8013480:	d003      	beq.n	801348a <TIM_OC1_SetConfig+0xc2>
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	4a17      	ldr	r2, [pc, #92]	; (80134e4 <TIM_OC1_SetConfig+0x11c>)
 8013486:	4293      	cmp	r3, r2
 8013488:	d111      	bne.n	80134ae <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801348a:	693b      	ldr	r3, [r7, #16]
 801348c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013490:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8013492:	693b      	ldr	r3, [r7, #16]
 8013494:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013498:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801349a:	683b      	ldr	r3, [r7, #0]
 801349c:	695b      	ldr	r3, [r3, #20]
 801349e:	693a      	ldr	r2, [r7, #16]
 80134a0:	4313      	orrs	r3, r2
 80134a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80134a4:	683b      	ldr	r3, [r7, #0]
 80134a6:	699b      	ldr	r3, [r3, #24]
 80134a8:	693a      	ldr	r2, [r7, #16]
 80134aa:	4313      	orrs	r3, r2
 80134ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	693a      	ldr	r2, [r7, #16]
 80134b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	68fa      	ldr	r2, [r7, #12]
 80134b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80134ba:	683b      	ldr	r3, [r7, #0]
 80134bc:	685a      	ldr	r2, [r3, #4]
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	697a      	ldr	r2, [r7, #20]
 80134c6:	621a      	str	r2, [r3, #32]
}
 80134c8:	bf00      	nop
 80134ca:	371c      	adds	r7, #28
 80134cc:	46bd      	mov	sp, r7
 80134ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134d2:	4770      	bx	lr
 80134d4:	40012c00 	.word	0x40012c00
 80134d8:	40013400 	.word	0x40013400
 80134dc:	40014000 	.word	0x40014000
 80134e0:	40014400 	.word	0x40014400
 80134e4:	40014800 	.word	0x40014800

080134e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80134e8:	b480      	push	{r7}
 80134ea:	b087      	sub	sp, #28
 80134ec:	af00      	add	r7, sp, #0
 80134ee:	6078      	str	r0, [r7, #4]
 80134f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	6a1b      	ldr	r3, [r3, #32]
 80134f6:	f023 0210 	bic.w	r2, r3, #16
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	6a1b      	ldr	r3, [r3, #32]
 8013502:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	685b      	ldr	r3, [r3, #4]
 8013508:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	699b      	ldr	r3, [r3, #24]
 801350e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8013510:	68fb      	ldr	r3, [r7, #12]
 8013512:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8013516:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801351a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801351c:	68fb      	ldr	r3, [r7, #12]
 801351e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013522:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013524:	683b      	ldr	r3, [r7, #0]
 8013526:	681b      	ldr	r3, [r3, #0]
 8013528:	021b      	lsls	r3, r3, #8
 801352a:	68fa      	ldr	r2, [r7, #12]
 801352c:	4313      	orrs	r3, r2
 801352e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8013530:	697b      	ldr	r3, [r7, #20]
 8013532:	f023 0320 	bic.w	r3, r3, #32
 8013536:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8013538:	683b      	ldr	r3, [r7, #0]
 801353a:	689b      	ldr	r3, [r3, #8]
 801353c:	011b      	lsls	r3, r3, #4
 801353e:	697a      	ldr	r2, [r7, #20]
 8013540:	4313      	orrs	r3, r2
 8013542:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	4a28      	ldr	r2, [pc, #160]	; (80135e8 <TIM_OC2_SetConfig+0x100>)
 8013548:	4293      	cmp	r3, r2
 801354a:	d003      	beq.n	8013554 <TIM_OC2_SetConfig+0x6c>
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	4a27      	ldr	r2, [pc, #156]	; (80135ec <TIM_OC2_SetConfig+0x104>)
 8013550:	4293      	cmp	r3, r2
 8013552:	d10d      	bne.n	8013570 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8013554:	697b      	ldr	r3, [r7, #20]
 8013556:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801355a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801355c:	683b      	ldr	r3, [r7, #0]
 801355e:	68db      	ldr	r3, [r3, #12]
 8013560:	011b      	lsls	r3, r3, #4
 8013562:	697a      	ldr	r2, [r7, #20]
 8013564:	4313      	orrs	r3, r2
 8013566:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8013568:	697b      	ldr	r3, [r7, #20]
 801356a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801356e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	4a1d      	ldr	r2, [pc, #116]	; (80135e8 <TIM_OC2_SetConfig+0x100>)
 8013574:	4293      	cmp	r3, r2
 8013576:	d00f      	beq.n	8013598 <TIM_OC2_SetConfig+0xb0>
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	4a1c      	ldr	r2, [pc, #112]	; (80135ec <TIM_OC2_SetConfig+0x104>)
 801357c:	4293      	cmp	r3, r2
 801357e:	d00b      	beq.n	8013598 <TIM_OC2_SetConfig+0xb0>
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	4a1b      	ldr	r2, [pc, #108]	; (80135f0 <TIM_OC2_SetConfig+0x108>)
 8013584:	4293      	cmp	r3, r2
 8013586:	d007      	beq.n	8013598 <TIM_OC2_SetConfig+0xb0>
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	4a1a      	ldr	r2, [pc, #104]	; (80135f4 <TIM_OC2_SetConfig+0x10c>)
 801358c:	4293      	cmp	r3, r2
 801358e:	d003      	beq.n	8013598 <TIM_OC2_SetConfig+0xb0>
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	4a19      	ldr	r2, [pc, #100]	; (80135f8 <TIM_OC2_SetConfig+0x110>)
 8013594:	4293      	cmp	r3, r2
 8013596:	d113      	bne.n	80135c0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8013598:	693b      	ldr	r3, [r7, #16]
 801359a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801359e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80135a0:	693b      	ldr	r3, [r7, #16]
 80135a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80135a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80135a8:	683b      	ldr	r3, [r7, #0]
 80135aa:	695b      	ldr	r3, [r3, #20]
 80135ac:	009b      	lsls	r3, r3, #2
 80135ae:	693a      	ldr	r2, [r7, #16]
 80135b0:	4313      	orrs	r3, r2
 80135b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80135b4:	683b      	ldr	r3, [r7, #0]
 80135b6:	699b      	ldr	r3, [r3, #24]
 80135b8:	009b      	lsls	r3, r3, #2
 80135ba:	693a      	ldr	r2, [r7, #16]
 80135bc:	4313      	orrs	r3, r2
 80135be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	693a      	ldr	r2, [r7, #16]
 80135c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	68fa      	ldr	r2, [r7, #12]
 80135ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80135cc:	683b      	ldr	r3, [r7, #0]
 80135ce:	685a      	ldr	r2, [r3, #4]
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	697a      	ldr	r2, [r7, #20]
 80135d8:	621a      	str	r2, [r3, #32]
}
 80135da:	bf00      	nop
 80135dc:	371c      	adds	r7, #28
 80135de:	46bd      	mov	sp, r7
 80135e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135e4:	4770      	bx	lr
 80135e6:	bf00      	nop
 80135e8:	40012c00 	.word	0x40012c00
 80135ec:	40013400 	.word	0x40013400
 80135f0:	40014000 	.word	0x40014000
 80135f4:	40014400 	.word	0x40014400
 80135f8:	40014800 	.word	0x40014800

080135fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80135fc:	b480      	push	{r7}
 80135fe:	b087      	sub	sp, #28
 8013600:	af00      	add	r7, sp, #0
 8013602:	6078      	str	r0, [r7, #4]
 8013604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	6a1b      	ldr	r3, [r3, #32]
 801360a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	6a1b      	ldr	r3, [r3, #32]
 8013616:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	685b      	ldr	r3, [r3, #4]
 801361c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	69db      	ldr	r3, [r3, #28]
 8013622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8013624:	68fb      	ldr	r3, [r7, #12]
 8013626:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801362a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801362e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8013630:	68fb      	ldr	r3, [r7, #12]
 8013632:	f023 0303 	bic.w	r3, r3, #3
 8013636:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013638:	683b      	ldr	r3, [r7, #0]
 801363a:	681b      	ldr	r3, [r3, #0]
 801363c:	68fa      	ldr	r2, [r7, #12]
 801363e:	4313      	orrs	r3, r2
 8013640:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8013642:	697b      	ldr	r3, [r7, #20]
 8013644:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013648:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801364a:	683b      	ldr	r3, [r7, #0]
 801364c:	689b      	ldr	r3, [r3, #8]
 801364e:	021b      	lsls	r3, r3, #8
 8013650:	697a      	ldr	r2, [r7, #20]
 8013652:	4313      	orrs	r3, r2
 8013654:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	4a27      	ldr	r2, [pc, #156]	; (80136f8 <TIM_OC3_SetConfig+0xfc>)
 801365a:	4293      	cmp	r3, r2
 801365c:	d003      	beq.n	8013666 <TIM_OC3_SetConfig+0x6a>
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	4a26      	ldr	r2, [pc, #152]	; (80136fc <TIM_OC3_SetConfig+0x100>)
 8013662:	4293      	cmp	r3, r2
 8013664:	d10d      	bne.n	8013682 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8013666:	697b      	ldr	r3, [r7, #20]
 8013668:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801366c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801366e:	683b      	ldr	r3, [r7, #0]
 8013670:	68db      	ldr	r3, [r3, #12]
 8013672:	021b      	lsls	r3, r3, #8
 8013674:	697a      	ldr	r2, [r7, #20]
 8013676:	4313      	orrs	r3, r2
 8013678:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801367a:	697b      	ldr	r3, [r7, #20]
 801367c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013680:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	4a1c      	ldr	r2, [pc, #112]	; (80136f8 <TIM_OC3_SetConfig+0xfc>)
 8013686:	4293      	cmp	r3, r2
 8013688:	d00f      	beq.n	80136aa <TIM_OC3_SetConfig+0xae>
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	4a1b      	ldr	r2, [pc, #108]	; (80136fc <TIM_OC3_SetConfig+0x100>)
 801368e:	4293      	cmp	r3, r2
 8013690:	d00b      	beq.n	80136aa <TIM_OC3_SetConfig+0xae>
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	4a1a      	ldr	r2, [pc, #104]	; (8013700 <TIM_OC3_SetConfig+0x104>)
 8013696:	4293      	cmp	r3, r2
 8013698:	d007      	beq.n	80136aa <TIM_OC3_SetConfig+0xae>
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	4a19      	ldr	r2, [pc, #100]	; (8013704 <TIM_OC3_SetConfig+0x108>)
 801369e:	4293      	cmp	r3, r2
 80136a0:	d003      	beq.n	80136aa <TIM_OC3_SetConfig+0xae>
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	4a18      	ldr	r2, [pc, #96]	; (8013708 <TIM_OC3_SetConfig+0x10c>)
 80136a6:	4293      	cmp	r3, r2
 80136a8:	d113      	bne.n	80136d2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80136aa:	693b      	ldr	r3, [r7, #16]
 80136ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80136b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80136b2:	693b      	ldr	r3, [r7, #16]
 80136b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80136b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80136ba:	683b      	ldr	r3, [r7, #0]
 80136bc:	695b      	ldr	r3, [r3, #20]
 80136be:	011b      	lsls	r3, r3, #4
 80136c0:	693a      	ldr	r2, [r7, #16]
 80136c2:	4313      	orrs	r3, r2
 80136c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80136c6:	683b      	ldr	r3, [r7, #0]
 80136c8:	699b      	ldr	r3, [r3, #24]
 80136ca:	011b      	lsls	r3, r3, #4
 80136cc:	693a      	ldr	r2, [r7, #16]
 80136ce:	4313      	orrs	r3, r2
 80136d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	693a      	ldr	r2, [r7, #16]
 80136d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	68fa      	ldr	r2, [r7, #12]
 80136dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80136de:	683b      	ldr	r3, [r7, #0]
 80136e0:	685a      	ldr	r2, [r3, #4]
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	697a      	ldr	r2, [r7, #20]
 80136ea:	621a      	str	r2, [r3, #32]
}
 80136ec:	bf00      	nop
 80136ee:	371c      	adds	r7, #28
 80136f0:	46bd      	mov	sp, r7
 80136f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136f6:	4770      	bx	lr
 80136f8:	40012c00 	.word	0x40012c00
 80136fc:	40013400 	.word	0x40013400
 8013700:	40014000 	.word	0x40014000
 8013704:	40014400 	.word	0x40014400
 8013708:	40014800 	.word	0x40014800

0801370c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801370c:	b480      	push	{r7}
 801370e:	b087      	sub	sp, #28
 8013710:	af00      	add	r7, sp, #0
 8013712:	6078      	str	r0, [r7, #4]
 8013714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	6a1b      	ldr	r3, [r3, #32]
 801371a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	6a1b      	ldr	r3, [r3, #32]
 8013726:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	685b      	ldr	r3, [r3, #4]
 801372c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	69db      	ldr	r3, [r3, #28]
 8013732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8013734:	68fb      	ldr	r3, [r7, #12]
 8013736:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801373a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801373e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8013740:	68fb      	ldr	r3, [r7, #12]
 8013742:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013746:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013748:	683b      	ldr	r3, [r7, #0]
 801374a:	681b      	ldr	r3, [r3, #0]
 801374c:	021b      	lsls	r3, r3, #8
 801374e:	68fa      	ldr	r2, [r7, #12]
 8013750:	4313      	orrs	r3, r2
 8013752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8013754:	693b      	ldr	r3, [r7, #16]
 8013756:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801375a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801375c:	683b      	ldr	r3, [r7, #0]
 801375e:	689b      	ldr	r3, [r3, #8]
 8013760:	031b      	lsls	r3, r3, #12
 8013762:	693a      	ldr	r2, [r7, #16]
 8013764:	4313      	orrs	r3, r2
 8013766:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	4a18      	ldr	r2, [pc, #96]	; (80137cc <TIM_OC4_SetConfig+0xc0>)
 801376c:	4293      	cmp	r3, r2
 801376e:	d00f      	beq.n	8013790 <TIM_OC4_SetConfig+0x84>
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	4a17      	ldr	r2, [pc, #92]	; (80137d0 <TIM_OC4_SetConfig+0xc4>)
 8013774:	4293      	cmp	r3, r2
 8013776:	d00b      	beq.n	8013790 <TIM_OC4_SetConfig+0x84>
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	4a16      	ldr	r2, [pc, #88]	; (80137d4 <TIM_OC4_SetConfig+0xc8>)
 801377c:	4293      	cmp	r3, r2
 801377e:	d007      	beq.n	8013790 <TIM_OC4_SetConfig+0x84>
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	4a15      	ldr	r2, [pc, #84]	; (80137d8 <TIM_OC4_SetConfig+0xcc>)
 8013784:	4293      	cmp	r3, r2
 8013786:	d003      	beq.n	8013790 <TIM_OC4_SetConfig+0x84>
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	4a14      	ldr	r2, [pc, #80]	; (80137dc <TIM_OC4_SetConfig+0xd0>)
 801378c:	4293      	cmp	r3, r2
 801378e:	d109      	bne.n	80137a4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8013790:	697b      	ldr	r3, [r7, #20]
 8013792:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013796:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8013798:	683b      	ldr	r3, [r7, #0]
 801379a:	695b      	ldr	r3, [r3, #20]
 801379c:	019b      	lsls	r3, r3, #6
 801379e:	697a      	ldr	r2, [r7, #20]
 80137a0:	4313      	orrs	r3, r2
 80137a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	697a      	ldr	r2, [r7, #20]
 80137a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	68fa      	ldr	r2, [r7, #12]
 80137ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80137b0:	683b      	ldr	r3, [r7, #0]
 80137b2:	685a      	ldr	r2, [r3, #4]
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	693a      	ldr	r2, [r7, #16]
 80137bc:	621a      	str	r2, [r3, #32]
}
 80137be:	bf00      	nop
 80137c0:	371c      	adds	r7, #28
 80137c2:	46bd      	mov	sp, r7
 80137c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137c8:	4770      	bx	lr
 80137ca:	bf00      	nop
 80137cc:	40012c00 	.word	0x40012c00
 80137d0:	40013400 	.word	0x40013400
 80137d4:	40014000 	.word	0x40014000
 80137d8:	40014400 	.word	0x40014400
 80137dc:	40014800 	.word	0x40014800

080137e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80137e0:	b480      	push	{r7}
 80137e2:	b087      	sub	sp, #28
 80137e4:	af00      	add	r7, sp, #0
 80137e6:	6078      	str	r0, [r7, #4]
 80137e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	6a1b      	ldr	r3, [r3, #32]
 80137ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	6a1b      	ldr	r3, [r3, #32]
 80137fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	685b      	ldr	r3, [r3, #4]
 8013800:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8013808:	68fb      	ldr	r3, [r7, #12]
 801380a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801380e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013812:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013814:	683b      	ldr	r3, [r7, #0]
 8013816:	681b      	ldr	r3, [r3, #0]
 8013818:	68fa      	ldr	r2, [r7, #12]
 801381a:	4313      	orrs	r3, r2
 801381c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801381e:	693b      	ldr	r3, [r7, #16]
 8013820:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8013824:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8013826:	683b      	ldr	r3, [r7, #0]
 8013828:	689b      	ldr	r3, [r3, #8]
 801382a:	041b      	lsls	r3, r3, #16
 801382c:	693a      	ldr	r2, [r7, #16]
 801382e:	4313      	orrs	r3, r2
 8013830:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	4a17      	ldr	r2, [pc, #92]	; (8013894 <TIM_OC5_SetConfig+0xb4>)
 8013836:	4293      	cmp	r3, r2
 8013838:	d00f      	beq.n	801385a <TIM_OC5_SetConfig+0x7a>
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	4a16      	ldr	r2, [pc, #88]	; (8013898 <TIM_OC5_SetConfig+0xb8>)
 801383e:	4293      	cmp	r3, r2
 8013840:	d00b      	beq.n	801385a <TIM_OC5_SetConfig+0x7a>
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	4a15      	ldr	r2, [pc, #84]	; (801389c <TIM_OC5_SetConfig+0xbc>)
 8013846:	4293      	cmp	r3, r2
 8013848:	d007      	beq.n	801385a <TIM_OC5_SetConfig+0x7a>
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	4a14      	ldr	r2, [pc, #80]	; (80138a0 <TIM_OC5_SetConfig+0xc0>)
 801384e:	4293      	cmp	r3, r2
 8013850:	d003      	beq.n	801385a <TIM_OC5_SetConfig+0x7a>
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	4a13      	ldr	r2, [pc, #76]	; (80138a4 <TIM_OC5_SetConfig+0xc4>)
 8013856:	4293      	cmp	r3, r2
 8013858:	d109      	bne.n	801386e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801385a:	697b      	ldr	r3, [r7, #20]
 801385c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013860:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8013862:	683b      	ldr	r3, [r7, #0]
 8013864:	695b      	ldr	r3, [r3, #20]
 8013866:	021b      	lsls	r3, r3, #8
 8013868:	697a      	ldr	r2, [r7, #20]
 801386a:	4313      	orrs	r3, r2
 801386c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	697a      	ldr	r2, [r7, #20]
 8013872:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	68fa      	ldr	r2, [r7, #12]
 8013878:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801387a:	683b      	ldr	r3, [r7, #0]
 801387c:	685a      	ldr	r2, [r3, #4]
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	693a      	ldr	r2, [r7, #16]
 8013886:	621a      	str	r2, [r3, #32]
}
 8013888:	bf00      	nop
 801388a:	371c      	adds	r7, #28
 801388c:	46bd      	mov	sp, r7
 801388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013892:	4770      	bx	lr
 8013894:	40012c00 	.word	0x40012c00
 8013898:	40013400 	.word	0x40013400
 801389c:	40014000 	.word	0x40014000
 80138a0:	40014400 	.word	0x40014400
 80138a4:	40014800 	.word	0x40014800

080138a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80138a8:	b480      	push	{r7}
 80138aa:	b087      	sub	sp, #28
 80138ac:	af00      	add	r7, sp, #0
 80138ae:	6078      	str	r0, [r7, #4]
 80138b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	6a1b      	ldr	r3, [r3, #32]
 80138b6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	6a1b      	ldr	r3, [r3, #32]
 80138c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	685b      	ldr	r3, [r3, #4]
 80138c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80138ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80138d0:	68fb      	ldr	r3, [r7, #12]
 80138d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80138d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80138da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80138dc:	683b      	ldr	r3, [r7, #0]
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	021b      	lsls	r3, r3, #8
 80138e2:	68fa      	ldr	r2, [r7, #12]
 80138e4:	4313      	orrs	r3, r2
 80138e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80138e8:	693b      	ldr	r3, [r7, #16]
 80138ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80138ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80138f0:	683b      	ldr	r3, [r7, #0]
 80138f2:	689b      	ldr	r3, [r3, #8]
 80138f4:	051b      	lsls	r3, r3, #20
 80138f6:	693a      	ldr	r2, [r7, #16]
 80138f8:	4313      	orrs	r3, r2
 80138fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	4a18      	ldr	r2, [pc, #96]	; (8013960 <TIM_OC6_SetConfig+0xb8>)
 8013900:	4293      	cmp	r3, r2
 8013902:	d00f      	beq.n	8013924 <TIM_OC6_SetConfig+0x7c>
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	4a17      	ldr	r2, [pc, #92]	; (8013964 <TIM_OC6_SetConfig+0xbc>)
 8013908:	4293      	cmp	r3, r2
 801390a:	d00b      	beq.n	8013924 <TIM_OC6_SetConfig+0x7c>
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	4a16      	ldr	r2, [pc, #88]	; (8013968 <TIM_OC6_SetConfig+0xc0>)
 8013910:	4293      	cmp	r3, r2
 8013912:	d007      	beq.n	8013924 <TIM_OC6_SetConfig+0x7c>
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	4a15      	ldr	r2, [pc, #84]	; (801396c <TIM_OC6_SetConfig+0xc4>)
 8013918:	4293      	cmp	r3, r2
 801391a:	d003      	beq.n	8013924 <TIM_OC6_SetConfig+0x7c>
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	4a14      	ldr	r2, [pc, #80]	; (8013970 <TIM_OC6_SetConfig+0xc8>)
 8013920:	4293      	cmp	r3, r2
 8013922:	d109      	bne.n	8013938 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8013924:	697b      	ldr	r3, [r7, #20]
 8013926:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801392a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 801392c:	683b      	ldr	r3, [r7, #0]
 801392e:	695b      	ldr	r3, [r3, #20]
 8013930:	029b      	lsls	r3, r3, #10
 8013932:	697a      	ldr	r2, [r7, #20]
 8013934:	4313      	orrs	r3, r2
 8013936:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	697a      	ldr	r2, [r7, #20]
 801393c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	68fa      	ldr	r2, [r7, #12]
 8013942:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8013944:	683b      	ldr	r3, [r7, #0]
 8013946:	685a      	ldr	r2, [r3, #4]
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	693a      	ldr	r2, [r7, #16]
 8013950:	621a      	str	r2, [r3, #32]
}
 8013952:	bf00      	nop
 8013954:	371c      	adds	r7, #28
 8013956:	46bd      	mov	sp, r7
 8013958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801395c:	4770      	bx	lr
 801395e:	bf00      	nop
 8013960:	40012c00 	.word	0x40012c00
 8013964:	40013400 	.word	0x40013400
 8013968:	40014000 	.word	0x40014000
 801396c:	40014400 	.word	0x40014400
 8013970:	40014800 	.word	0x40014800

08013974 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013974:	b480      	push	{r7}
 8013976:	b087      	sub	sp, #28
 8013978:	af00      	add	r7, sp, #0
 801397a:	60f8      	str	r0, [r7, #12]
 801397c:	60b9      	str	r1, [r7, #8]
 801397e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8013980:	68fb      	ldr	r3, [r7, #12]
 8013982:	6a1b      	ldr	r3, [r3, #32]
 8013984:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013986:	68fb      	ldr	r3, [r7, #12]
 8013988:	6a1b      	ldr	r3, [r3, #32]
 801398a:	f023 0201 	bic.w	r2, r3, #1
 801398e:	68fb      	ldr	r3, [r7, #12]
 8013990:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013992:	68fb      	ldr	r3, [r7, #12]
 8013994:	699b      	ldr	r3, [r3, #24]
 8013996:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8013998:	693b      	ldr	r3, [r7, #16]
 801399a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801399e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	011b      	lsls	r3, r3, #4
 80139a4:	693a      	ldr	r2, [r7, #16]
 80139a6:	4313      	orrs	r3, r2
 80139a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80139aa:	697b      	ldr	r3, [r7, #20]
 80139ac:	f023 030a 	bic.w	r3, r3, #10
 80139b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80139b2:	697a      	ldr	r2, [r7, #20]
 80139b4:	68bb      	ldr	r3, [r7, #8]
 80139b6:	4313      	orrs	r3, r2
 80139b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80139ba:	68fb      	ldr	r3, [r7, #12]
 80139bc:	693a      	ldr	r2, [r7, #16]
 80139be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80139c0:	68fb      	ldr	r3, [r7, #12]
 80139c2:	697a      	ldr	r2, [r7, #20]
 80139c4:	621a      	str	r2, [r3, #32]
}
 80139c6:	bf00      	nop
 80139c8:	371c      	adds	r7, #28
 80139ca:	46bd      	mov	sp, r7
 80139cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139d0:	4770      	bx	lr

080139d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80139d2:	b480      	push	{r7}
 80139d4:	b087      	sub	sp, #28
 80139d6:	af00      	add	r7, sp, #0
 80139d8:	60f8      	str	r0, [r7, #12]
 80139da:	60b9      	str	r1, [r7, #8]
 80139dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80139de:	68fb      	ldr	r3, [r7, #12]
 80139e0:	6a1b      	ldr	r3, [r3, #32]
 80139e2:	f023 0210 	bic.w	r2, r3, #16
 80139e6:	68fb      	ldr	r3, [r7, #12]
 80139e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80139ea:	68fb      	ldr	r3, [r7, #12]
 80139ec:	699b      	ldr	r3, [r3, #24]
 80139ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80139f0:	68fb      	ldr	r3, [r7, #12]
 80139f2:	6a1b      	ldr	r3, [r3, #32]
 80139f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80139f6:	697b      	ldr	r3, [r7, #20]
 80139f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80139fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	031b      	lsls	r3, r3, #12
 8013a02:	697a      	ldr	r2, [r7, #20]
 8013a04:	4313      	orrs	r3, r2
 8013a06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8013a08:	693b      	ldr	r3, [r7, #16]
 8013a0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8013a0e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8013a10:	68bb      	ldr	r3, [r7, #8]
 8013a12:	011b      	lsls	r3, r3, #4
 8013a14:	693a      	ldr	r2, [r7, #16]
 8013a16:	4313      	orrs	r3, r2
 8013a18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8013a1a:	68fb      	ldr	r3, [r7, #12]
 8013a1c:	697a      	ldr	r2, [r7, #20]
 8013a1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013a20:	68fb      	ldr	r3, [r7, #12]
 8013a22:	693a      	ldr	r2, [r7, #16]
 8013a24:	621a      	str	r2, [r3, #32]
}
 8013a26:	bf00      	nop
 8013a28:	371c      	adds	r7, #28
 8013a2a:	46bd      	mov	sp, r7
 8013a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a30:	4770      	bx	lr

08013a32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8013a32:	b480      	push	{r7}
 8013a34:	b085      	sub	sp, #20
 8013a36:	af00      	add	r7, sp, #0
 8013a38:	6078      	str	r0, [r7, #4]
 8013a3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	689b      	ldr	r3, [r3, #8]
 8013a40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8013a42:	68fb      	ldr	r3, [r7, #12]
 8013a44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013a48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8013a4a:	683a      	ldr	r2, [r7, #0]
 8013a4c:	68fb      	ldr	r3, [r7, #12]
 8013a4e:	4313      	orrs	r3, r2
 8013a50:	f043 0307 	orr.w	r3, r3, #7
 8013a54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	68fa      	ldr	r2, [r7, #12]
 8013a5a:	609a      	str	r2, [r3, #8]
}
 8013a5c:	bf00      	nop
 8013a5e:	3714      	adds	r7, #20
 8013a60:	46bd      	mov	sp, r7
 8013a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a66:	4770      	bx	lr

08013a68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8013a68:	b480      	push	{r7}
 8013a6a:	b087      	sub	sp, #28
 8013a6c:	af00      	add	r7, sp, #0
 8013a6e:	60f8      	str	r0, [r7, #12]
 8013a70:	60b9      	str	r1, [r7, #8]
 8013a72:	607a      	str	r2, [r7, #4]
 8013a74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8013a76:	68fb      	ldr	r3, [r7, #12]
 8013a78:	689b      	ldr	r3, [r3, #8]
 8013a7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013a7c:	697b      	ldr	r3, [r7, #20]
 8013a7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8013a82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8013a84:	683b      	ldr	r3, [r7, #0]
 8013a86:	021a      	lsls	r2, r3, #8
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	431a      	orrs	r2, r3
 8013a8c:	68bb      	ldr	r3, [r7, #8]
 8013a8e:	4313      	orrs	r3, r2
 8013a90:	697a      	ldr	r2, [r7, #20]
 8013a92:	4313      	orrs	r3, r2
 8013a94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013a96:	68fb      	ldr	r3, [r7, #12]
 8013a98:	697a      	ldr	r2, [r7, #20]
 8013a9a:	609a      	str	r2, [r3, #8]
}
 8013a9c:	bf00      	nop
 8013a9e:	371c      	adds	r7, #28
 8013aa0:	46bd      	mov	sp, r7
 8013aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aa6:	4770      	bx	lr

08013aa8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8013aa8:	b480      	push	{r7}
 8013aaa:	b087      	sub	sp, #28
 8013aac:	af00      	add	r7, sp, #0
 8013aae:	60f8      	str	r0, [r7, #12]
 8013ab0:	60b9      	str	r1, [r7, #8]
 8013ab2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8013ab4:	68bb      	ldr	r3, [r7, #8]
 8013ab6:	f003 031f 	and.w	r3, r3, #31
 8013aba:	2201      	movs	r2, #1
 8013abc:	fa02 f303 	lsl.w	r3, r2, r3
 8013ac0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8013ac2:	68fb      	ldr	r3, [r7, #12]
 8013ac4:	6a1a      	ldr	r2, [r3, #32]
 8013ac6:	697b      	ldr	r3, [r7, #20]
 8013ac8:	43db      	mvns	r3, r3
 8013aca:	401a      	ands	r2, r3
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8013ad0:	68fb      	ldr	r3, [r7, #12]
 8013ad2:	6a1a      	ldr	r2, [r3, #32]
 8013ad4:	68bb      	ldr	r3, [r7, #8]
 8013ad6:	f003 031f 	and.w	r3, r3, #31
 8013ada:	6879      	ldr	r1, [r7, #4]
 8013adc:	fa01 f303 	lsl.w	r3, r1, r3
 8013ae0:	431a      	orrs	r2, r3
 8013ae2:	68fb      	ldr	r3, [r7, #12]
 8013ae4:	621a      	str	r2, [r3, #32]
}
 8013ae6:	bf00      	nop
 8013ae8:	371c      	adds	r7, #28
 8013aea:	46bd      	mov	sp, r7
 8013aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013af0:	4770      	bx	lr
	...

08013af4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8013af4:	b480      	push	{r7}
 8013af6:	b085      	sub	sp, #20
 8013af8:	af00      	add	r7, sp, #0
 8013afa:	6078      	str	r0, [r7, #4]
 8013afc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013b04:	2b01      	cmp	r3, #1
 8013b06:	d101      	bne.n	8013b0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8013b08:	2302      	movs	r3, #2
 8013b0a:	e068      	b.n	8013bde <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	2201      	movs	r2, #1
 8013b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	2202      	movs	r2, #2
 8013b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	681b      	ldr	r3, [r3, #0]
 8013b20:	685b      	ldr	r3, [r3, #4]
 8013b22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	681b      	ldr	r3, [r3, #0]
 8013b28:	689b      	ldr	r3, [r3, #8]
 8013b2a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	681b      	ldr	r3, [r3, #0]
 8013b30:	4a2e      	ldr	r2, [pc, #184]	; (8013bec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8013b32:	4293      	cmp	r3, r2
 8013b34:	d004      	beq.n	8013b40 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	681b      	ldr	r3, [r3, #0]
 8013b3a:	4a2d      	ldr	r2, [pc, #180]	; (8013bf0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8013b3c:	4293      	cmp	r3, r2
 8013b3e:	d108      	bne.n	8013b52 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8013b40:	68fb      	ldr	r3, [r7, #12]
 8013b42:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8013b46:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8013b48:	683b      	ldr	r3, [r7, #0]
 8013b4a:	685b      	ldr	r3, [r3, #4]
 8013b4c:	68fa      	ldr	r2, [r7, #12]
 8013b4e:	4313      	orrs	r3, r2
 8013b50:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8013b52:	68fb      	ldr	r3, [r7, #12]
 8013b54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013b58:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8013b5a:	683b      	ldr	r3, [r7, #0]
 8013b5c:	681b      	ldr	r3, [r3, #0]
 8013b5e:	68fa      	ldr	r2, [r7, #12]
 8013b60:	4313      	orrs	r3, r2
 8013b62:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	681b      	ldr	r3, [r3, #0]
 8013b68:	68fa      	ldr	r2, [r7, #12]
 8013b6a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	681b      	ldr	r3, [r3, #0]
 8013b70:	4a1e      	ldr	r2, [pc, #120]	; (8013bec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8013b72:	4293      	cmp	r3, r2
 8013b74:	d01d      	beq.n	8013bb2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	681b      	ldr	r3, [r3, #0]
 8013b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013b7e:	d018      	beq.n	8013bb2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	681b      	ldr	r3, [r3, #0]
 8013b84:	4a1b      	ldr	r2, [pc, #108]	; (8013bf4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8013b86:	4293      	cmp	r3, r2
 8013b88:	d013      	beq.n	8013bb2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	681b      	ldr	r3, [r3, #0]
 8013b8e:	4a1a      	ldr	r2, [pc, #104]	; (8013bf8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8013b90:	4293      	cmp	r3, r2
 8013b92:	d00e      	beq.n	8013bb2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	681b      	ldr	r3, [r3, #0]
 8013b98:	4a18      	ldr	r2, [pc, #96]	; (8013bfc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8013b9a:	4293      	cmp	r3, r2
 8013b9c:	d009      	beq.n	8013bb2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	681b      	ldr	r3, [r3, #0]
 8013ba2:	4a13      	ldr	r2, [pc, #76]	; (8013bf0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8013ba4:	4293      	cmp	r3, r2
 8013ba6:	d004      	beq.n	8013bb2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	681b      	ldr	r3, [r3, #0]
 8013bac:	4a14      	ldr	r2, [pc, #80]	; (8013c00 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8013bae:	4293      	cmp	r3, r2
 8013bb0:	d10c      	bne.n	8013bcc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8013bb2:	68bb      	ldr	r3, [r7, #8]
 8013bb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013bb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8013bba:	683b      	ldr	r3, [r7, #0]
 8013bbc:	689b      	ldr	r3, [r3, #8]
 8013bbe:	68ba      	ldr	r2, [r7, #8]
 8013bc0:	4313      	orrs	r3, r2
 8013bc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	681b      	ldr	r3, [r3, #0]
 8013bc8:	68ba      	ldr	r2, [r7, #8]
 8013bca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	2201      	movs	r2, #1
 8013bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	2200      	movs	r2, #0
 8013bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8013bdc:	2300      	movs	r3, #0
}
 8013bde:	4618      	mov	r0, r3
 8013be0:	3714      	adds	r7, #20
 8013be2:	46bd      	mov	sp, r7
 8013be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013be8:	4770      	bx	lr
 8013bea:	bf00      	nop
 8013bec:	40012c00 	.word	0x40012c00
 8013bf0:	40013400 	.word	0x40013400
 8013bf4:	40000400 	.word	0x40000400
 8013bf8:	40000800 	.word	0x40000800
 8013bfc:	40000c00 	.word	0x40000c00
 8013c00:	40014000 	.word	0x40014000

08013c04 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8013c04:	b480      	push	{r7}
 8013c06:	b085      	sub	sp, #20
 8013c08:	af00      	add	r7, sp, #0
 8013c0a:	6078      	str	r0, [r7, #4]
 8013c0c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8013c0e:	2300      	movs	r3, #0
 8013c10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013c18:	2b01      	cmp	r3, #1
 8013c1a:	d101      	bne.n	8013c20 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8013c1c:	2302      	movs	r3, #2
 8013c1e:	e065      	b.n	8013cec <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	2201      	movs	r2, #1
 8013c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8013c28:	68fb      	ldr	r3, [r7, #12]
 8013c2a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8013c2e:	683b      	ldr	r3, [r7, #0]
 8013c30:	68db      	ldr	r3, [r3, #12]
 8013c32:	4313      	orrs	r3, r2
 8013c34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8013c36:	68fb      	ldr	r3, [r7, #12]
 8013c38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8013c3c:	683b      	ldr	r3, [r7, #0]
 8013c3e:	689b      	ldr	r3, [r3, #8]
 8013c40:	4313      	orrs	r3, r2
 8013c42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8013c44:	68fb      	ldr	r3, [r7, #12]
 8013c46:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8013c4a:	683b      	ldr	r3, [r7, #0]
 8013c4c:	685b      	ldr	r3, [r3, #4]
 8013c4e:	4313      	orrs	r3, r2
 8013c50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8013c52:	68fb      	ldr	r3, [r7, #12]
 8013c54:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8013c58:	683b      	ldr	r3, [r7, #0]
 8013c5a:	681b      	ldr	r3, [r3, #0]
 8013c5c:	4313      	orrs	r3, r2
 8013c5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8013c60:	68fb      	ldr	r3, [r7, #12]
 8013c62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8013c66:	683b      	ldr	r3, [r7, #0]
 8013c68:	691b      	ldr	r3, [r3, #16]
 8013c6a:	4313      	orrs	r3, r2
 8013c6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8013c6e:	68fb      	ldr	r3, [r7, #12]
 8013c70:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8013c74:	683b      	ldr	r3, [r7, #0]
 8013c76:	695b      	ldr	r3, [r3, #20]
 8013c78:	4313      	orrs	r3, r2
 8013c7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8013c7c:	68fb      	ldr	r3, [r7, #12]
 8013c7e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8013c82:	683b      	ldr	r3, [r7, #0]
 8013c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c86:	4313      	orrs	r3, r2
 8013c88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8013c8a:	68fb      	ldr	r3, [r7, #12]
 8013c8c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8013c90:	683b      	ldr	r3, [r7, #0]
 8013c92:	699b      	ldr	r3, [r3, #24]
 8013c94:	041b      	lsls	r3, r3, #16
 8013c96:	4313      	orrs	r3, r2
 8013c98:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	681b      	ldr	r3, [r3, #0]
 8013c9e:	4a16      	ldr	r2, [pc, #88]	; (8013cf8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8013ca0:	4293      	cmp	r3, r2
 8013ca2:	d004      	beq.n	8013cae <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	681b      	ldr	r3, [r3, #0]
 8013ca8:	4a14      	ldr	r2, [pc, #80]	; (8013cfc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8013caa:	4293      	cmp	r3, r2
 8013cac:	d115      	bne.n	8013cda <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8013cae:	68fb      	ldr	r3, [r7, #12]
 8013cb0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8013cb4:	683b      	ldr	r3, [r7, #0]
 8013cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cb8:	051b      	lsls	r3, r3, #20
 8013cba:	4313      	orrs	r3, r2
 8013cbc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8013cbe:	68fb      	ldr	r3, [r7, #12]
 8013cc0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8013cc4:	683b      	ldr	r3, [r7, #0]
 8013cc6:	69db      	ldr	r3, [r3, #28]
 8013cc8:	4313      	orrs	r3, r2
 8013cca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8013ccc:	68fb      	ldr	r3, [r7, #12]
 8013cce:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8013cd2:	683b      	ldr	r3, [r7, #0]
 8013cd4:	6a1b      	ldr	r3, [r3, #32]
 8013cd6:	4313      	orrs	r3, r2
 8013cd8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	681b      	ldr	r3, [r3, #0]
 8013cde:	68fa      	ldr	r2, [r7, #12]
 8013ce0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	2200      	movs	r2, #0
 8013ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8013cea:	2300      	movs	r3, #0
}
 8013cec:	4618      	mov	r0, r3
 8013cee:	3714      	adds	r7, #20
 8013cf0:	46bd      	mov	sp, r7
 8013cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cf6:	4770      	bx	lr
 8013cf8:	40012c00 	.word	0x40012c00
 8013cfc:	40013400 	.word	0x40013400

08013d00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8013d00:	b480      	push	{r7}
 8013d02:	b083      	sub	sp, #12
 8013d04:	af00      	add	r7, sp, #0
 8013d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8013d08:	bf00      	nop
 8013d0a:	370c      	adds	r7, #12
 8013d0c:	46bd      	mov	sp, r7
 8013d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d12:	4770      	bx	lr

08013d14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8013d14:	b480      	push	{r7}
 8013d16:	b083      	sub	sp, #12
 8013d18:	af00      	add	r7, sp, #0
 8013d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8013d1c:	bf00      	nop
 8013d1e:	370c      	adds	r7, #12
 8013d20:	46bd      	mov	sp, r7
 8013d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d26:	4770      	bx	lr

08013d28 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8013d28:	b480      	push	{r7}
 8013d2a:	b083      	sub	sp, #12
 8013d2c:	af00      	add	r7, sp, #0
 8013d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8013d30:	bf00      	nop
 8013d32:	370c      	adds	r7, #12
 8013d34:	46bd      	mov	sp, r7
 8013d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d3a:	4770      	bx	lr

08013d3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8013d3c:	b580      	push	{r7, lr}
 8013d3e:	b082      	sub	sp, #8
 8013d40:	af00      	add	r7, sp, #0
 8013d42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	d101      	bne.n	8013d4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8013d4a:	2301      	movs	r3, #1
 8013d4c:	e042      	b.n	8013dd4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d106      	bne.n	8013d66 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	2200      	movs	r2, #0
 8013d5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8013d60:	6878      	ldr	r0, [r7, #4]
 8013d62:	f7fa f963 	bl	800e02c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	2224      	movs	r2, #36	; 0x24
 8013d6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	681b      	ldr	r3, [r3, #0]
 8013d72:	681a      	ldr	r2, [r3, #0]
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	681b      	ldr	r3, [r3, #0]
 8013d78:	f022 0201 	bic.w	r2, r2, #1
 8013d7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013d7e:	6878      	ldr	r0, [r7, #4]
 8013d80:	f000 fc02 	bl	8014588 <UART_SetConfig>
 8013d84:	4603      	mov	r3, r0
 8013d86:	2b01      	cmp	r3, #1
 8013d88:	d101      	bne.n	8013d8e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8013d8a:	2301      	movs	r3, #1
 8013d8c:	e022      	b.n	8013dd4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d002      	beq.n	8013d9c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8013d96:	6878      	ldr	r0, [r7, #4]
 8013d98:	f000 fef2 	bl	8014b80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	681b      	ldr	r3, [r3, #0]
 8013da0:	685a      	ldr	r2, [r3, #4]
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	681b      	ldr	r3, [r3, #0]
 8013da6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8013daa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	681b      	ldr	r3, [r3, #0]
 8013db0:	689a      	ldr	r2, [r3, #8]
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	681b      	ldr	r3, [r3, #0]
 8013db6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8013dba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	681b      	ldr	r3, [r3, #0]
 8013dc0:	681a      	ldr	r2, [r3, #0]
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	f042 0201 	orr.w	r2, r2, #1
 8013dca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8013dcc:	6878      	ldr	r0, [r7, #4]
 8013dce:	f000 ff79 	bl	8014cc4 <UART_CheckIdleState>
 8013dd2:	4603      	mov	r3, r0
}
 8013dd4:	4618      	mov	r0, r3
 8013dd6:	3708      	adds	r7, #8
 8013dd8:	46bd      	mov	sp, r7
 8013dda:	bd80      	pop	{r7, pc}

08013ddc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013ddc:	b580      	push	{r7, lr}
 8013dde:	b08a      	sub	sp, #40	; 0x28
 8013de0:	af02      	add	r7, sp, #8
 8013de2:	60f8      	str	r0, [r7, #12]
 8013de4:	60b9      	str	r1, [r7, #8]
 8013de6:	603b      	str	r3, [r7, #0]
 8013de8:	4613      	mov	r3, r2
 8013dea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8013dec:	68fb      	ldr	r3, [r7, #12]
 8013dee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013df2:	2b20      	cmp	r3, #32
 8013df4:	f040 8083 	bne.w	8013efe <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8013df8:	68bb      	ldr	r3, [r7, #8]
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d002      	beq.n	8013e04 <HAL_UART_Transmit+0x28>
 8013dfe:	88fb      	ldrh	r3, [r7, #6]
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	d101      	bne.n	8013e08 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8013e04:	2301      	movs	r3, #1
 8013e06:	e07b      	b.n	8013f00 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8013e08:	68fb      	ldr	r3, [r7, #12]
 8013e0a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8013e0e:	2b01      	cmp	r3, #1
 8013e10:	d101      	bne.n	8013e16 <HAL_UART_Transmit+0x3a>
 8013e12:	2302      	movs	r3, #2
 8013e14:	e074      	b.n	8013f00 <HAL_UART_Transmit+0x124>
 8013e16:	68fb      	ldr	r3, [r7, #12]
 8013e18:	2201      	movs	r2, #1
 8013e1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013e1e:	68fb      	ldr	r3, [r7, #12]
 8013e20:	2200      	movs	r2, #0
 8013e22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8013e26:	68fb      	ldr	r3, [r7, #12]
 8013e28:	2221      	movs	r2, #33	; 0x21
 8013e2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8013e2e:	f7fa fa4f 	bl	800e2d0 <HAL_GetTick>
 8013e32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8013e34:	68fb      	ldr	r3, [r7, #12]
 8013e36:	88fa      	ldrh	r2, [r7, #6]
 8013e38:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8013e3c:	68fb      	ldr	r3, [r7, #12]
 8013e3e:	88fa      	ldrh	r2, [r7, #6]
 8013e40:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013e44:	68fb      	ldr	r3, [r7, #12]
 8013e46:	689b      	ldr	r3, [r3, #8]
 8013e48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013e4c:	d108      	bne.n	8013e60 <HAL_UART_Transmit+0x84>
 8013e4e:	68fb      	ldr	r3, [r7, #12]
 8013e50:	691b      	ldr	r3, [r3, #16]
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	d104      	bne.n	8013e60 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8013e56:	2300      	movs	r3, #0
 8013e58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8013e5a:	68bb      	ldr	r3, [r7, #8]
 8013e5c:	61bb      	str	r3, [r7, #24]
 8013e5e:	e003      	b.n	8013e68 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8013e60:	68bb      	ldr	r3, [r7, #8]
 8013e62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8013e64:	2300      	movs	r3, #0
 8013e66:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8013e68:	68fb      	ldr	r3, [r7, #12]
 8013e6a:	2200      	movs	r2, #0
 8013e6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8013e70:	e02c      	b.n	8013ecc <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8013e72:	683b      	ldr	r3, [r7, #0]
 8013e74:	9300      	str	r3, [sp, #0]
 8013e76:	697b      	ldr	r3, [r7, #20]
 8013e78:	2200      	movs	r2, #0
 8013e7a:	2180      	movs	r1, #128	; 0x80
 8013e7c:	68f8      	ldr	r0, [r7, #12]
 8013e7e:	f000 ff6c 	bl	8014d5a <UART_WaitOnFlagUntilTimeout>
 8013e82:	4603      	mov	r3, r0
 8013e84:	2b00      	cmp	r3, #0
 8013e86:	d001      	beq.n	8013e8c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8013e88:	2303      	movs	r3, #3
 8013e8a:	e039      	b.n	8013f00 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8013e8c:	69fb      	ldr	r3, [r7, #28]
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d10b      	bne.n	8013eaa <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8013e92:	69bb      	ldr	r3, [r7, #24]
 8013e94:	881b      	ldrh	r3, [r3, #0]
 8013e96:	461a      	mov	r2, r3
 8013e98:	68fb      	ldr	r3, [r7, #12]
 8013e9a:	681b      	ldr	r3, [r3, #0]
 8013e9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8013ea0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8013ea2:	69bb      	ldr	r3, [r7, #24]
 8013ea4:	3302      	adds	r3, #2
 8013ea6:	61bb      	str	r3, [r7, #24]
 8013ea8:	e007      	b.n	8013eba <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8013eaa:	69fb      	ldr	r3, [r7, #28]
 8013eac:	781a      	ldrb	r2, [r3, #0]
 8013eae:	68fb      	ldr	r3, [r7, #12]
 8013eb0:	681b      	ldr	r3, [r3, #0]
 8013eb2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8013eb4:	69fb      	ldr	r3, [r7, #28]
 8013eb6:	3301      	adds	r3, #1
 8013eb8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8013eba:	68fb      	ldr	r3, [r7, #12]
 8013ebc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8013ec0:	b29b      	uxth	r3, r3
 8013ec2:	3b01      	subs	r3, #1
 8013ec4:	b29a      	uxth	r2, r3
 8013ec6:	68fb      	ldr	r3, [r7, #12]
 8013ec8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8013ecc:	68fb      	ldr	r3, [r7, #12]
 8013ece:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8013ed2:	b29b      	uxth	r3, r3
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d1cc      	bne.n	8013e72 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8013ed8:	683b      	ldr	r3, [r7, #0]
 8013eda:	9300      	str	r3, [sp, #0]
 8013edc:	697b      	ldr	r3, [r7, #20]
 8013ede:	2200      	movs	r2, #0
 8013ee0:	2140      	movs	r1, #64	; 0x40
 8013ee2:	68f8      	ldr	r0, [r7, #12]
 8013ee4:	f000 ff39 	bl	8014d5a <UART_WaitOnFlagUntilTimeout>
 8013ee8:	4603      	mov	r3, r0
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d001      	beq.n	8013ef2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8013eee:	2303      	movs	r3, #3
 8013ef0:	e006      	b.n	8013f00 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8013ef2:	68fb      	ldr	r3, [r7, #12]
 8013ef4:	2220      	movs	r2, #32
 8013ef6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8013efa:	2300      	movs	r3, #0
 8013efc:	e000      	b.n	8013f00 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8013efe:	2302      	movs	r3, #2
  }
}
 8013f00:	4618      	mov	r0, r3
 8013f02:	3720      	adds	r7, #32
 8013f04:	46bd      	mov	sp, r7
 8013f06:	bd80      	pop	{r7, pc}

08013f08 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8013f08:	b580      	push	{r7, lr}
 8013f0a:	b0ba      	sub	sp, #232	; 0xe8
 8013f0c:	af00      	add	r7, sp, #0
 8013f0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	681b      	ldr	r3, [r3, #0]
 8013f14:	69db      	ldr	r3, [r3, #28]
 8013f16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	681b      	ldr	r3, [r3, #0]
 8013f1e:	681b      	ldr	r3, [r3, #0]
 8013f20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	681b      	ldr	r3, [r3, #0]
 8013f28:	689b      	ldr	r3, [r3, #8]
 8013f2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8013f2e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8013f32:	f640 030f 	movw	r3, #2063	; 0x80f
 8013f36:	4013      	ands	r3, r2
 8013f38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8013f3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d11b      	bne.n	8013f7c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8013f44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013f48:	f003 0320 	and.w	r3, r3, #32
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d015      	beq.n	8013f7c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8013f50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013f54:	f003 0320 	and.w	r3, r3, #32
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	d105      	bne.n	8013f68 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8013f5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d009      	beq.n	8013f7c <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	f000 82d6 	beq.w	801451e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013f76:	6878      	ldr	r0, [r7, #4]
 8013f78:	4798      	blx	r3
      }
      return;
 8013f7a:	e2d0      	b.n	801451e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8013f7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	f000 811f 	beq.w	80141c4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8013f86:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8013f8a:	4b8b      	ldr	r3, [pc, #556]	; (80141b8 <HAL_UART_IRQHandler+0x2b0>)
 8013f8c:	4013      	ands	r3, r2
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d106      	bne.n	8013fa0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8013f92:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8013f96:	4b89      	ldr	r3, [pc, #548]	; (80141bc <HAL_UART_IRQHandler+0x2b4>)
 8013f98:	4013      	ands	r3, r2
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	f000 8112 	beq.w	80141c4 <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8013fa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013fa4:	f003 0301 	and.w	r3, r3, #1
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	d011      	beq.n	8013fd0 <HAL_UART_IRQHandler+0xc8>
 8013fac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	d00b      	beq.n	8013fd0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	681b      	ldr	r3, [r3, #0]
 8013fbc:	2201      	movs	r2, #1
 8013fbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013fc6:	f043 0201 	orr.w	r2, r3, #1
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013fd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013fd4:	f003 0302 	and.w	r3, r3, #2
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d011      	beq.n	8014000 <HAL_UART_IRQHandler+0xf8>
 8013fdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013fe0:	f003 0301 	and.w	r3, r3, #1
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d00b      	beq.n	8014000 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	681b      	ldr	r3, [r3, #0]
 8013fec:	2202      	movs	r2, #2
 8013fee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013ff6:	f043 0204 	orr.w	r2, r3, #4
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8014000:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014004:	f003 0304 	and.w	r3, r3, #4
 8014008:	2b00      	cmp	r3, #0
 801400a:	d011      	beq.n	8014030 <HAL_UART_IRQHandler+0x128>
 801400c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014010:	f003 0301 	and.w	r3, r3, #1
 8014014:	2b00      	cmp	r3, #0
 8014016:	d00b      	beq.n	8014030 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	681b      	ldr	r3, [r3, #0]
 801401c:	2204      	movs	r2, #4
 801401e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014026:	f043 0202 	orr.w	r2, r3, #2
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8014030:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014034:	f003 0308 	and.w	r3, r3, #8
 8014038:	2b00      	cmp	r3, #0
 801403a:	d017      	beq.n	801406c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801403c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014040:	f003 0320 	and.w	r3, r3, #32
 8014044:	2b00      	cmp	r3, #0
 8014046:	d105      	bne.n	8014054 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8014048:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801404c:	4b5a      	ldr	r3, [pc, #360]	; (80141b8 <HAL_UART_IRQHandler+0x2b0>)
 801404e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8014050:	2b00      	cmp	r3, #0
 8014052:	d00b      	beq.n	801406c <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	681b      	ldr	r3, [r3, #0]
 8014058:	2208      	movs	r2, #8
 801405a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014062:	f043 0208 	orr.w	r2, r3, #8
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801406c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014070:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014074:	2b00      	cmp	r3, #0
 8014076:	d012      	beq.n	801409e <HAL_UART_IRQHandler+0x196>
 8014078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801407c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8014080:	2b00      	cmp	r3, #0
 8014082:	d00c      	beq.n	801409e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	681b      	ldr	r3, [r3, #0]
 8014088:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801408c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014094:	f043 0220 	orr.w	r2, r3, #32
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	f000 823c 	beq.w	8014522 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80140aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80140ae:	f003 0320 	and.w	r3, r3, #32
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d013      	beq.n	80140de <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80140b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80140ba:	f003 0320 	and.w	r3, r3, #32
 80140be:	2b00      	cmp	r3, #0
 80140c0:	d105      	bne.n	80140ce <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80140c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80140c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	d007      	beq.n	80140de <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	d003      	beq.n	80140de <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80140da:	6878      	ldr	r0, [r7, #4]
 80140dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80140e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	681b      	ldr	r3, [r3, #0]
 80140ec:	689b      	ldr	r3, [r3, #8]
 80140ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80140f2:	2b40      	cmp	r3, #64	; 0x40
 80140f4:	d005      	beq.n	8014102 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80140f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80140fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d04f      	beq.n	80141a2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8014102:	6878      	ldr	r0, [r7, #4]
 8014104:	f000 ffdb 	bl	80150be <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	681b      	ldr	r3, [r3, #0]
 801410c:	689b      	ldr	r3, [r3, #8]
 801410e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014112:	2b40      	cmp	r3, #64	; 0x40
 8014114:	d141      	bne.n	801419a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	681b      	ldr	r3, [r3, #0]
 801411a:	3308      	adds	r3, #8
 801411c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014120:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014124:	e853 3f00 	ldrex	r3, [r3]
 8014128:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 801412c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8014130:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014134:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	681b      	ldr	r3, [r3, #0]
 801413c:	3308      	adds	r3, #8
 801413e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8014142:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8014146:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801414a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801414e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8014152:	e841 2300 	strex	r3, r2, [r1]
 8014156:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801415a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801415e:	2b00      	cmp	r3, #0
 8014160:	d1d9      	bne.n	8014116 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014166:	2b00      	cmp	r3, #0
 8014168:	d013      	beq.n	8014192 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801416e:	4a14      	ldr	r2, [pc, #80]	; (80141c0 <HAL_UART_IRQHandler+0x2b8>)
 8014170:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014176:	4618      	mov	r0, r3
 8014178:	f7fa fb33 	bl	800e7e2 <HAL_DMA_Abort_IT>
 801417c:	4603      	mov	r3, r0
 801417e:	2b00      	cmp	r3, #0
 8014180:	d017      	beq.n	80141b2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014188:	687a      	ldr	r2, [r7, #4]
 801418a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 801418c:	4610      	mov	r0, r2
 801418e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014190:	e00f      	b.n	80141b2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8014192:	6878      	ldr	r0, [r7, #4]
 8014194:	f000 f9ee 	bl	8014574 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014198:	e00b      	b.n	80141b2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801419a:	6878      	ldr	r0, [r7, #4]
 801419c:	f000 f9ea 	bl	8014574 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80141a0:	e007      	b.n	80141b2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80141a2:	6878      	ldr	r0, [r7, #4]
 80141a4:	f000 f9e6 	bl	8014574 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	2200      	movs	r2, #0
 80141ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80141b0:	e1b7      	b.n	8014522 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80141b2:	bf00      	nop
    return;
 80141b4:	e1b5      	b.n	8014522 <HAL_UART_IRQHandler+0x61a>
 80141b6:	bf00      	nop
 80141b8:	10000001 	.word	0x10000001
 80141bc:	04000120 	.word	0x04000120
 80141c0:	08015369 	.word	0x08015369

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80141c8:	2b01      	cmp	r3, #1
 80141ca:	f040 814a 	bne.w	8014462 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80141ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80141d2:	f003 0310 	and.w	r3, r3, #16
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	f000 8143 	beq.w	8014462 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80141dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80141e0:	f003 0310 	and.w	r3, r3, #16
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	f000 813c 	beq.w	8014462 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	681b      	ldr	r3, [r3, #0]
 80141ee:	2210      	movs	r2, #16
 80141f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	681b      	ldr	r3, [r3, #0]
 80141f6:	689b      	ldr	r3, [r3, #8]
 80141f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80141fc:	2b40      	cmp	r3, #64	; 0x40
 80141fe:	f040 80b5 	bne.w	801436c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014206:	681b      	ldr	r3, [r3, #0]
 8014208:	685b      	ldr	r3, [r3, #4]
 801420a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801420e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8014212:	2b00      	cmp	r3, #0
 8014214:	f000 8187 	beq.w	8014526 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801421e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8014222:	429a      	cmp	r2, r3
 8014224:	f080 817f 	bcs.w	8014526 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801422e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014236:	681b      	ldr	r3, [r3, #0]
 8014238:	681b      	ldr	r3, [r3, #0]
 801423a:	f003 0320 	and.w	r3, r3, #32
 801423e:	2b00      	cmp	r3, #0
 8014240:	f040 8086 	bne.w	8014350 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	681b      	ldr	r3, [r3, #0]
 8014248:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801424c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014250:	e853 3f00 	ldrex	r3, [r3]
 8014254:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8014258:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801425c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014260:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	681b      	ldr	r3, [r3, #0]
 8014268:	461a      	mov	r2, r3
 801426a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801426e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8014272:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014276:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801427a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801427e:	e841 2300 	strex	r3, r2, [r1]
 8014282:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8014286:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801428a:	2b00      	cmp	r3, #0
 801428c:	d1da      	bne.n	8014244 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	681b      	ldr	r3, [r3, #0]
 8014292:	3308      	adds	r3, #8
 8014294:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014296:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014298:	e853 3f00 	ldrex	r3, [r3]
 801429c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801429e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80142a0:	f023 0301 	bic.w	r3, r3, #1
 80142a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	681b      	ldr	r3, [r3, #0]
 80142ac:	3308      	adds	r3, #8
 80142ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80142b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80142b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80142b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80142ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80142be:	e841 2300 	strex	r3, r2, [r1]
 80142c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80142c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d1e1      	bne.n	801428e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	681b      	ldr	r3, [r3, #0]
 80142ce:	3308      	adds	r3, #8
 80142d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80142d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80142d4:	e853 3f00 	ldrex	r3, [r3]
 80142d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80142da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80142dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80142e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	681b      	ldr	r3, [r3, #0]
 80142e8:	3308      	adds	r3, #8
 80142ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80142ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80142f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80142f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80142f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80142f6:	e841 2300 	strex	r3, r2, [r1]
 80142fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80142fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80142fe:	2b00      	cmp	r3, #0
 8014300:	d1e3      	bne.n	80142ca <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	2220      	movs	r2, #32
 8014306:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	2200      	movs	r2, #0
 801430e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	681b      	ldr	r3, [r3, #0]
 8014314:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014318:	e853 3f00 	ldrex	r3, [r3]
 801431c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801431e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014320:	f023 0310 	bic.w	r3, r3, #16
 8014324:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	681b      	ldr	r3, [r3, #0]
 801432c:	461a      	mov	r2, r3
 801432e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014332:	65bb      	str	r3, [r7, #88]	; 0x58
 8014334:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014336:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8014338:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801433a:	e841 2300 	strex	r3, r2, [r1]
 801433e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8014340:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014342:	2b00      	cmp	r3, #0
 8014344:	d1e4      	bne.n	8014310 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801434a:	4618      	mov	r0, r3
 801434c:	f7fa f9ed 	bl	800e72a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801435c:	b29b      	uxth	r3, r3
 801435e:	1ad3      	subs	r3, r2, r3
 8014360:	b29b      	uxth	r3, r3
 8014362:	4619      	mov	r1, r3
 8014364:	6878      	ldr	r0, [r7, #4]
 8014366:	f7f6 fe03 	bl	800af70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801436a:	e0dc      	b.n	8014526 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014378:	b29b      	uxth	r3, r3
 801437a:	1ad3      	subs	r3, r2, r3
 801437c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014386:	b29b      	uxth	r3, r3
 8014388:	2b00      	cmp	r3, #0
 801438a:	f000 80ce 	beq.w	801452a <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 801438e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8014392:	2b00      	cmp	r3, #0
 8014394:	f000 80c9 	beq.w	801452a <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	681b      	ldr	r3, [r3, #0]
 801439c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801439e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143a0:	e853 3f00 	ldrex	r3, [r3]
 80143a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80143a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80143a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80143ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	681b      	ldr	r3, [r3, #0]
 80143b4:	461a      	mov	r2, r3
 80143b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80143ba:	647b      	str	r3, [r7, #68]	; 0x44
 80143bc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80143be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80143c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80143c2:	e841 2300 	strex	r3, r2, [r1]
 80143c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80143c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	d1e4      	bne.n	8014398 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	681b      	ldr	r3, [r3, #0]
 80143d2:	3308      	adds	r3, #8
 80143d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80143d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143d8:	e853 3f00 	ldrex	r3, [r3]
 80143dc:	623b      	str	r3, [r7, #32]
   return(result);
 80143de:	6a3b      	ldr	r3, [r7, #32]
 80143e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80143e4:	f023 0301 	bic.w	r3, r3, #1
 80143e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	681b      	ldr	r3, [r3, #0]
 80143f0:	3308      	adds	r3, #8
 80143f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80143f6:	633a      	str	r2, [r7, #48]	; 0x30
 80143f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80143fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80143fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80143fe:	e841 2300 	strex	r3, r2, [r1]
 8014402:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8014404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014406:	2b00      	cmp	r3, #0
 8014408:	d1e1      	bne.n	80143ce <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	2220      	movs	r2, #32
 801440e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	2200      	movs	r2, #0
 8014416:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	2200      	movs	r2, #0
 801441c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	681b      	ldr	r3, [r3, #0]
 8014422:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014424:	693b      	ldr	r3, [r7, #16]
 8014426:	e853 3f00 	ldrex	r3, [r3]
 801442a:	60fb      	str	r3, [r7, #12]
   return(result);
 801442c:	68fb      	ldr	r3, [r7, #12]
 801442e:	f023 0310 	bic.w	r3, r3, #16
 8014432:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	681b      	ldr	r3, [r3, #0]
 801443a:	461a      	mov	r2, r3
 801443c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014440:	61fb      	str	r3, [r7, #28]
 8014442:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014444:	69b9      	ldr	r1, [r7, #24]
 8014446:	69fa      	ldr	r2, [r7, #28]
 8014448:	e841 2300 	strex	r3, r2, [r1]
 801444c:	617b      	str	r3, [r7, #20]
   return(result);
 801444e:	697b      	ldr	r3, [r7, #20]
 8014450:	2b00      	cmp	r3, #0
 8014452:	d1e4      	bne.n	801441e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8014454:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8014458:	4619      	mov	r1, r3
 801445a:	6878      	ldr	r0, [r7, #4]
 801445c:	f7f6 fd88 	bl	800af70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8014460:	e063      	b.n	801452a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8014462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014466:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801446a:	2b00      	cmp	r3, #0
 801446c:	d00e      	beq.n	801448c <HAL_UART_IRQHandler+0x584>
 801446e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014476:	2b00      	cmp	r3, #0
 8014478:	d008      	beq.n	801448c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	681b      	ldr	r3, [r3, #0]
 801447e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8014482:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8014484:	6878      	ldr	r0, [r7, #4]
 8014486:	f000 ffb0 	bl	80153ea <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801448a:	e051      	b.n	8014530 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801448c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014494:	2b00      	cmp	r3, #0
 8014496:	d014      	beq.n	80144c2 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8014498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801449c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d105      	bne.n	80144b0 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80144a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80144a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	d008      	beq.n	80144c2 <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	d03a      	beq.n	801452e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80144bc:	6878      	ldr	r0, [r7, #4]
 80144be:	4798      	blx	r3
    }
    return;
 80144c0:	e035      	b.n	801452e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80144c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80144c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	d009      	beq.n	80144e2 <HAL_UART_IRQHandler+0x5da>
 80144ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80144d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	d003      	beq.n	80144e2 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80144da:	6878      	ldr	r0, [r7, #4]
 80144dc:	f000 ff5a 	bl	8015394 <UART_EndTransmit_IT>
    return;
 80144e0:	e026      	b.n	8014530 <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80144e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80144e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d009      	beq.n	8014502 <HAL_UART_IRQHandler+0x5fa>
 80144ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80144f2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	d003      	beq.n	8014502 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80144fa:	6878      	ldr	r0, [r7, #4]
 80144fc:	f000 ff89 	bl	8015412 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8014500:	e016      	b.n	8014530 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8014502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014506:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801450a:	2b00      	cmp	r3, #0
 801450c:	d010      	beq.n	8014530 <HAL_UART_IRQHandler+0x628>
 801450e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014512:	2b00      	cmp	r3, #0
 8014514:	da0c      	bge.n	8014530 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8014516:	6878      	ldr	r0, [r7, #4]
 8014518:	f000 ff71 	bl	80153fe <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801451c:	e008      	b.n	8014530 <HAL_UART_IRQHandler+0x628>
      return;
 801451e:	bf00      	nop
 8014520:	e006      	b.n	8014530 <HAL_UART_IRQHandler+0x628>
    return;
 8014522:	bf00      	nop
 8014524:	e004      	b.n	8014530 <HAL_UART_IRQHandler+0x628>
      return;
 8014526:	bf00      	nop
 8014528:	e002      	b.n	8014530 <HAL_UART_IRQHandler+0x628>
      return;
 801452a:	bf00      	nop
 801452c:	e000      	b.n	8014530 <HAL_UART_IRQHandler+0x628>
    return;
 801452e:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8014530:	37e8      	adds	r7, #232	; 0xe8
 8014532:	46bd      	mov	sp, r7
 8014534:	bd80      	pop	{r7, pc}
 8014536:	bf00      	nop

08014538 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8014538:	b480      	push	{r7}
 801453a:	b083      	sub	sp, #12
 801453c:	af00      	add	r7, sp, #0
 801453e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8014540:	bf00      	nop
 8014542:	370c      	adds	r7, #12
 8014544:	46bd      	mov	sp, r7
 8014546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801454a:	4770      	bx	lr

0801454c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 801454c:	b480      	push	{r7}
 801454e:	b083      	sub	sp, #12
 8014550:	af00      	add	r7, sp, #0
 8014552:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8014554:	bf00      	nop
 8014556:	370c      	adds	r7, #12
 8014558:	46bd      	mov	sp, r7
 801455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801455e:	4770      	bx	lr

08014560 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8014560:	b480      	push	{r7}
 8014562:	b083      	sub	sp, #12
 8014564:	af00      	add	r7, sp, #0
 8014566:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8014568:	bf00      	nop
 801456a:	370c      	adds	r7, #12
 801456c:	46bd      	mov	sp, r7
 801456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014572:	4770      	bx	lr

08014574 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8014574:	b480      	push	{r7}
 8014576:	b083      	sub	sp, #12
 8014578:	af00      	add	r7, sp, #0
 801457a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801457c:	bf00      	nop
 801457e:	370c      	adds	r7, #12
 8014580:	46bd      	mov	sp, r7
 8014582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014586:	4770      	bx	lr

08014588 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8014588:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801458c:	b08c      	sub	sp, #48	; 0x30
 801458e:	af00      	add	r7, sp, #0
 8014590:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8014592:	2300      	movs	r3, #0
 8014594:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8014598:	697b      	ldr	r3, [r7, #20]
 801459a:	689a      	ldr	r2, [r3, #8]
 801459c:	697b      	ldr	r3, [r7, #20]
 801459e:	691b      	ldr	r3, [r3, #16]
 80145a0:	431a      	orrs	r2, r3
 80145a2:	697b      	ldr	r3, [r7, #20]
 80145a4:	695b      	ldr	r3, [r3, #20]
 80145a6:	431a      	orrs	r2, r3
 80145a8:	697b      	ldr	r3, [r7, #20]
 80145aa:	69db      	ldr	r3, [r3, #28]
 80145ac:	4313      	orrs	r3, r2
 80145ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80145b0:	697b      	ldr	r3, [r7, #20]
 80145b2:	681b      	ldr	r3, [r3, #0]
 80145b4:	681a      	ldr	r2, [r3, #0]
 80145b6:	4baa      	ldr	r3, [pc, #680]	; (8014860 <UART_SetConfig+0x2d8>)
 80145b8:	4013      	ands	r3, r2
 80145ba:	697a      	ldr	r2, [r7, #20]
 80145bc:	6812      	ldr	r2, [r2, #0]
 80145be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80145c0:	430b      	orrs	r3, r1
 80145c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80145c4:	697b      	ldr	r3, [r7, #20]
 80145c6:	681b      	ldr	r3, [r3, #0]
 80145c8:	685b      	ldr	r3, [r3, #4]
 80145ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80145ce:	697b      	ldr	r3, [r7, #20]
 80145d0:	68da      	ldr	r2, [r3, #12]
 80145d2:	697b      	ldr	r3, [r7, #20]
 80145d4:	681b      	ldr	r3, [r3, #0]
 80145d6:	430a      	orrs	r2, r1
 80145d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80145da:	697b      	ldr	r3, [r7, #20]
 80145dc:	699b      	ldr	r3, [r3, #24]
 80145de:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80145e0:	697b      	ldr	r3, [r7, #20]
 80145e2:	681b      	ldr	r3, [r3, #0]
 80145e4:	4a9f      	ldr	r2, [pc, #636]	; (8014864 <UART_SetConfig+0x2dc>)
 80145e6:	4293      	cmp	r3, r2
 80145e8:	d004      	beq.n	80145f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80145ea:	697b      	ldr	r3, [r7, #20]
 80145ec:	6a1b      	ldr	r3, [r3, #32]
 80145ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80145f0:	4313      	orrs	r3, r2
 80145f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80145f4:	697b      	ldr	r3, [r7, #20]
 80145f6:	681b      	ldr	r3, [r3, #0]
 80145f8:	689b      	ldr	r3, [r3, #8]
 80145fa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80145fe:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8014602:	697a      	ldr	r2, [r7, #20]
 8014604:	6812      	ldr	r2, [r2, #0]
 8014606:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014608:	430b      	orrs	r3, r1
 801460a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801460c:	697b      	ldr	r3, [r7, #20]
 801460e:	681b      	ldr	r3, [r3, #0]
 8014610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014612:	f023 010f 	bic.w	r1, r3, #15
 8014616:	697b      	ldr	r3, [r7, #20]
 8014618:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801461a:	697b      	ldr	r3, [r7, #20]
 801461c:	681b      	ldr	r3, [r3, #0]
 801461e:	430a      	orrs	r2, r1
 8014620:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8014622:	697b      	ldr	r3, [r7, #20]
 8014624:	681b      	ldr	r3, [r3, #0]
 8014626:	4a90      	ldr	r2, [pc, #576]	; (8014868 <UART_SetConfig+0x2e0>)
 8014628:	4293      	cmp	r3, r2
 801462a:	d125      	bne.n	8014678 <UART_SetConfig+0xf0>
 801462c:	4b8f      	ldr	r3, [pc, #572]	; (801486c <UART_SetConfig+0x2e4>)
 801462e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014632:	f003 0303 	and.w	r3, r3, #3
 8014636:	2b03      	cmp	r3, #3
 8014638:	d81a      	bhi.n	8014670 <UART_SetConfig+0xe8>
 801463a:	a201      	add	r2, pc, #4	; (adr r2, 8014640 <UART_SetConfig+0xb8>)
 801463c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014640:	08014651 	.word	0x08014651
 8014644:	08014661 	.word	0x08014661
 8014648:	08014659 	.word	0x08014659
 801464c:	08014669 	.word	0x08014669
 8014650:	2301      	movs	r3, #1
 8014652:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8014656:	e116      	b.n	8014886 <UART_SetConfig+0x2fe>
 8014658:	2302      	movs	r3, #2
 801465a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801465e:	e112      	b.n	8014886 <UART_SetConfig+0x2fe>
 8014660:	2304      	movs	r3, #4
 8014662:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8014666:	e10e      	b.n	8014886 <UART_SetConfig+0x2fe>
 8014668:	2308      	movs	r3, #8
 801466a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801466e:	e10a      	b.n	8014886 <UART_SetConfig+0x2fe>
 8014670:	2310      	movs	r3, #16
 8014672:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8014676:	e106      	b.n	8014886 <UART_SetConfig+0x2fe>
 8014678:	697b      	ldr	r3, [r7, #20]
 801467a:	681b      	ldr	r3, [r3, #0]
 801467c:	4a7c      	ldr	r2, [pc, #496]	; (8014870 <UART_SetConfig+0x2e8>)
 801467e:	4293      	cmp	r3, r2
 8014680:	d138      	bne.n	80146f4 <UART_SetConfig+0x16c>
 8014682:	4b7a      	ldr	r3, [pc, #488]	; (801486c <UART_SetConfig+0x2e4>)
 8014684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014688:	f003 030c 	and.w	r3, r3, #12
 801468c:	2b0c      	cmp	r3, #12
 801468e:	d82d      	bhi.n	80146ec <UART_SetConfig+0x164>
 8014690:	a201      	add	r2, pc, #4	; (adr r2, 8014698 <UART_SetConfig+0x110>)
 8014692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014696:	bf00      	nop
 8014698:	080146cd 	.word	0x080146cd
 801469c:	080146ed 	.word	0x080146ed
 80146a0:	080146ed 	.word	0x080146ed
 80146a4:	080146ed 	.word	0x080146ed
 80146a8:	080146dd 	.word	0x080146dd
 80146ac:	080146ed 	.word	0x080146ed
 80146b0:	080146ed 	.word	0x080146ed
 80146b4:	080146ed 	.word	0x080146ed
 80146b8:	080146d5 	.word	0x080146d5
 80146bc:	080146ed 	.word	0x080146ed
 80146c0:	080146ed 	.word	0x080146ed
 80146c4:	080146ed 	.word	0x080146ed
 80146c8:	080146e5 	.word	0x080146e5
 80146cc:	2300      	movs	r3, #0
 80146ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80146d2:	e0d8      	b.n	8014886 <UART_SetConfig+0x2fe>
 80146d4:	2302      	movs	r3, #2
 80146d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80146da:	e0d4      	b.n	8014886 <UART_SetConfig+0x2fe>
 80146dc:	2304      	movs	r3, #4
 80146de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80146e2:	e0d0      	b.n	8014886 <UART_SetConfig+0x2fe>
 80146e4:	2308      	movs	r3, #8
 80146e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80146ea:	e0cc      	b.n	8014886 <UART_SetConfig+0x2fe>
 80146ec:	2310      	movs	r3, #16
 80146ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80146f2:	e0c8      	b.n	8014886 <UART_SetConfig+0x2fe>
 80146f4:	697b      	ldr	r3, [r7, #20]
 80146f6:	681b      	ldr	r3, [r3, #0]
 80146f8:	4a5e      	ldr	r2, [pc, #376]	; (8014874 <UART_SetConfig+0x2ec>)
 80146fa:	4293      	cmp	r3, r2
 80146fc:	d125      	bne.n	801474a <UART_SetConfig+0x1c2>
 80146fe:	4b5b      	ldr	r3, [pc, #364]	; (801486c <UART_SetConfig+0x2e4>)
 8014700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014704:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8014708:	2b30      	cmp	r3, #48	; 0x30
 801470a:	d016      	beq.n	801473a <UART_SetConfig+0x1b2>
 801470c:	2b30      	cmp	r3, #48	; 0x30
 801470e:	d818      	bhi.n	8014742 <UART_SetConfig+0x1ba>
 8014710:	2b20      	cmp	r3, #32
 8014712:	d00a      	beq.n	801472a <UART_SetConfig+0x1a2>
 8014714:	2b20      	cmp	r3, #32
 8014716:	d814      	bhi.n	8014742 <UART_SetConfig+0x1ba>
 8014718:	2b00      	cmp	r3, #0
 801471a:	d002      	beq.n	8014722 <UART_SetConfig+0x19a>
 801471c:	2b10      	cmp	r3, #16
 801471e:	d008      	beq.n	8014732 <UART_SetConfig+0x1aa>
 8014720:	e00f      	b.n	8014742 <UART_SetConfig+0x1ba>
 8014722:	2300      	movs	r3, #0
 8014724:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8014728:	e0ad      	b.n	8014886 <UART_SetConfig+0x2fe>
 801472a:	2302      	movs	r3, #2
 801472c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8014730:	e0a9      	b.n	8014886 <UART_SetConfig+0x2fe>
 8014732:	2304      	movs	r3, #4
 8014734:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8014738:	e0a5      	b.n	8014886 <UART_SetConfig+0x2fe>
 801473a:	2308      	movs	r3, #8
 801473c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8014740:	e0a1      	b.n	8014886 <UART_SetConfig+0x2fe>
 8014742:	2310      	movs	r3, #16
 8014744:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8014748:	e09d      	b.n	8014886 <UART_SetConfig+0x2fe>
 801474a:	697b      	ldr	r3, [r7, #20]
 801474c:	681b      	ldr	r3, [r3, #0]
 801474e:	4a4a      	ldr	r2, [pc, #296]	; (8014878 <UART_SetConfig+0x2f0>)
 8014750:	4293      	cmp	r3, r2
 8014752:	d125      	bne.n	80147a0 <UART_SetConfig+0x218>
 8014754:	4b45      	ldr	r3, [pc, #276]	; (801486c <UART_SetConfig+0x2e4>)
 8014756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801475a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801475e:	2bc0      	cmp	r3, #192	; 0xc0
 8014760:	d016      	beq.n	8014790 <UART_SetConfig+0x208>
 8014762:	2bc0      	cmp	r3, #192	; 0xc0
 8014764:	d818      	bhi.n	8014798 <UART_SetConfig+0x210>
 8014766:	2b80      	cmp	r3, #128	; 0x80
 8014768:	d00a      	beq.n	8014780 <UART_SetConfig+0x1f8>
 801476a:	2b80      	cmp	r3, #128	; 0x80
 801476c:	d814      	bhi.n	8014798 <UART_SetConfig+0x210>
 801476e:	2b00      	cmp	r3, #0
 8014770:	d002      	beq.n	8014778 <UART_SetConfig+0x1f0>
 8014772:	2b40      	cmp	r3, #64	; 0x40
 8014774:	d008      	beq.n	8014788 <UART_SetConfig+0x200>
 8014776:	e00f      	b.n	8014798 <UART_SetConfig+0x210>
 8014778:	2300      	movs	r3, #0
 801477a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801477e:	e082      	b.n	8014886 <UART_SetConfig+0x2fe>
 8014780:	2302      	movs	r3, #2
 8014782:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8014786:	e07e      	b.n	8014886 <UART_SetConfig+0x2fe>
 8014788:	2304      	movs	r3, #4
 801478a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801478e:	e07a      	b.n	8014886 <UART_SetConfig+0x2fe>
 8014790:	2308      	movs	r3, #8
 8014792:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8014796:	e076      	b.n	8014886 <UART_SetConfig+0x2fe>
 8014798:	2310      	movs	r3, #16
 801479a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801479e:	e072      	b.n	8014886 <UART_SetConfig+0x2fe>
 80147a0:	697b      	ldr	r3, [r7, #20]
 80147a2:	681b      	ldr	r3, [r3, #0]
 80147a4:	4a35      	ldr	r2, [pc, #212]	; (801487c <UART_SetConfig+0x2f4>)
 80147a6:	4293      	cmp	r3, r2
 80147a8:	d12a      	bne.n	8014800 <UART_SetConfig+0x278>
 80147aa:	4b30      	ldr	r3, [pc, #192]	; (801486c <UART_SetConfig+0x2e4>)
 80147ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80147b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80147b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80147b8:	d01a      	beq.n	80147f0 <UART_SetConfig+0x268>
 80147ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80147be:	d81b      	bhi.n	80147f8 <UART_SetConfig+0x270>
 80147c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80147c4:	d00c      	beq.n	80147e0 <UART_SetConfig+0x258>
 80147c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80147ca:	d815      	bhi.n	80147f8 <UART_SetConfig+0x270>
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d003      	beq.n	80147d8 <UART_SetConfig+0x250>
 80147d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80147d4:	d008      	beq.n	80147e8 <UART_SetConfig+0x260>
 80147d6:	e00f      	b.n	80147f8 <UART_SetConfig+0x270>
 80147d8:	2300      	movs	r3, #0
 80147da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80147de:	e052      	b.n	8014886 <UART_SetConfig+0x2fe>
 80147e0:	2302      	movs	r3, #2
 80147e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80147e6:	e04e      	b.n	8014886 <UART_SetConfig+0x2fe>
 80147e8:	2304      	movs	r3, #4
 80147ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80147ee:	e04a      	b.n	8014886 <UART_SetConfig+0x2fe>
 80147f0:	2308      	movs	r3, #8
 80147f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80147f6:	e046      	b.n	8014886 <UART_SetConfig+0x2fe>
 80147f8:	2310      	movs	r3, #16
 80147fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80147fe:	e042      	b.n	8014886 <UART_SetConfig+0x2fe>
 8014800:	697b      	ldr	r3, [r7, #20]
 8014802:	681b      	ldr	r3, [r3, #0]
 8014804:	4a17      	ldr	r2, [pc, #92]	; (8014864 <UART_SetConfig+0x2dc>)
 8014806:	4293      	cmp	r3, r2
 8014808:	d13a      	bne.n	8014880 <UART_SetConfig+0x2f8>
 801480a:	4b18      	ldr	r3, [pc, #96]	; (801486c <UART_SetConfig+0x2e4>)
 801480c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014810:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8014814:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8014818:	d01a      	beq.n	8014850 <UART_SetConfig+0x2c8>
 801481a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801481e:	d81b      	bhi.n	8014858 <UART_SetConfig+0x2d0>
 8014820:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014824:	d00c      	beq.n	8014840 <UART_SetConfig+0x2b8>
 8014826:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801482a:	d815      	bhi.n	8014858 <UART_SetConfig+0x2d0>
 801482c:	2b00      	cmp	r3, #0
 801482e:	d003      	beq.n	8014838 <UART_SetConfig+0x2b0>
 8014830:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014834:	d008      	beq.n	8014848 <UART_SetConfig+0x2c0>
 8014836:	e00f      	b.n	8014858 <UART_SetConfig+0x2d0>
 8014838:	2300      	movs	r3, #0
 801483a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801483e:	e022      	b.n	8014886 <UART_SetConfig+0x2fe>
 8014840:	2302      	movs	r3, #2
 8014842:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8014846:	e01e      	b.n	8014886 <UART_SetConfig+0x2fe>
 8014848:	2304      	movs	r3, #4
 801484a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801484e:	e01a      	b.n	8014886 <UART_SetConfig+0x2fe>
 8014850:	2308      	movs	r3, #8
 8014852:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8014856:	e016      	b.n	8014886 <UART_SetConfig+0x2fe>
 8014858:	2310      	movs	r3, #16
 801485a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801485e:	e012      	b.n	8014886 <UART_SetConfig+0x2fe>
 8014860:	cfff69f3 	.word	0xcfff69f3
 8014864:	40008000 	.word	0x40008000
 8014868:	40013800 	.word	0x40013800
 801486c:	40021000 	.word	0x40021000
 8014870:	40004400 	.word	0x40004400
 8014874:	40004800 	.word	0x40004800
 8014878:	40004c00 	.word	0x40004c00
 801487c:	40005000 	.word	0x40005000
 8014880:	2310      	movs	r3, #16
 8014882:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8014886:	697b      	ldr	r3, [r7, #20]
 8014888:	681b      	ldr	r3, [r3, #0]
 801488a:	4aae      	ldr	r2, [pc, #696]	; (8014b44 <UART_SetConfig+0x5bc>)
 801488c:	4293      	cmp	r3, r2
 801488e:	f040 8097 	bne.w	80149c0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8014892:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8014896:	2b08      	cmp	r3, #8
 8014898:	d823      	bhi.n	80148e2 <UART_SetConfig+0x35a>
 801489a:	a201      	add	r2, pc, #4	; (adr r2, 80148a0 <UART_SetConfig+0x318>)
 801489c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80148a0:	080148c5 	.word	0x080148c5
 80148a4:	080148e3 	.word	0x080148e3
 80148a8:	080148cd 	.word	0x080148cd
 80148ac:	080148e3 	.word	0x080148e3
 80148b0:	080148d3 	.word	0x080148d3
 80148b4:	080148e3 	.word	0x080148e3
 80148b8:	080148e3 	.word	0x080148e3
 80148bc:	080148e3 	.word	0x080148e3
 80148c0:	080148db 	.word	0x080148db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80148c4:	f7fb faa8 	bl	800fe18 <HAL_RCC_GetPCLK1Freq>
 80148c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80148ca:	e010      	b.n	80148ee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80148cc:	4b9e      	ldr	r3, [pc, #632]	; (8014b48 <UART_SetConfig+0x5c0>)
 80148ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80148d0:	e00d      	b.n	80148ee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80148d2:	f7fb fa09 	bl	800fce8 <HAL_RCC_GetSysClockFreq>
 80148d6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80148d8:	e009      	b.n	80148ee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80148da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80148de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80148e0:	e005      	b.n	80148ee <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80148e2:	2300      	movs	r3, #0
 80148e4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80148e6:	2301      	movs	r3, #1
 80148e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80148ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80148ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	f000 8130 	beq.w	8014b56 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80148f6:	697b      	ldr	r3, [r7, #20]
 80148f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148fa:	4a94      	ldr	r2, [pc, #592]	; (8014b4c <UART_SetConfig+0x5c4>)
 80148fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014900:	461a      	mov	r2, r3
 8014902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014904:	fbb3 f3f2 	udiv	r3, r3, r2
 8014908:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801490a:	697b      	ldr	r3, [r7, #20]
 801490c:	685a      	ldr	r2, [r3, #4]
 801490e:	4613      	mov	r3, r2
 8014910:	005b      	lsls	r3, r3, #1
 8014912:	4413      	add	r3, r2
 8014914:	69ba      	ldr	r2, [r7, #24]
 8014916:	429a      	cmp	r2, r3
 8014918:	d305      	bcc.n	8014926 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801491a:	697b      	ldr	r3, [r7, #20]
 801491c:	685b      	ldr	r3, [r3, #4]
 801491e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8014920:	69ba      	ldr	r2, [r7, #24]
 8014922:	429a      	cmp	r2, r3
 8014924:	d903      	bls.n	801492e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8014926:	2301      	movs	r3, #1
 8014928:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801492c:	e113      	b.n	8014b56 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801492e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014930:	2200      	movs	r2, #0
 8014932:	60bb      	str	r3, [r7, #8]
 8014934:	60fa      	str	r2, [r7, #12]
 8014936:	697b      	ldr	r3, [r7, #20]
 8014938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801493a:	4a84      	ldr	r2, [pc, #528]	; (8014b4c <UART_SetConfig+0x5c4>)
 801493c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014940:	b29b      	uxth	r3, r3
 8014942:	2200      	movs	r2, #0
 8014944:	603b      	str	r3, [r7, #0]
 8014946:	607a      	str	r2, [r7, #4]
 8014948:	e9d7 2300 	ldrd	r2, r3, [r7]
 801494c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8014950:	f7ec fa02 	bl	8000d58 <__aeabi_uldivmod>
 8014954:	4602      	mov	r2, r0
 8014956:	460b      	mov	r3, r1
 8014958:	4610      	mov	r0, r2
 801495a:	4619      	mov	r1, r3
 801495c:	f04f 0200 	mov.w	r2, #0
 8014960:	f04f 0300 	mov.w	r3, #0
 8014964:	020b      	lsls	r3, r1, #8
 8014966:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801496a:	0202      	lsls	r2, r0, #8
 801496c:	6979      	ldr	r1, [r7, #20]
 801496e:	6849      	ldr	r1, [r1, #4]
 8014970:	0849      	lsrs	r1, r1, #1
 8014972:	2000      	movs	r0, #0
 8014974:	460c      	mov	r4, r1
 8014976:	4605      	mov	r5, r0
 8014978:	eb12 0804 	adds.w	r8, r2, r4
 801497c:	eb43 0905 	adc.w	r9, r3, r5
 8014980:	697b      	ldr	r3, [r7, #20]
 8014982:	685b      	ldr	r3, [r3, #4]
 8014984:	2200      	movs	r2, #0
 8014986:	469a      	mov	sl, r3
 8014988:	4693      	mov	fp, r2
 801498a:	4652      	mov	r2, sl
 801498c:	465b      	mov	r3, fp
 801498e:	4640      	mov	r0, r8
 8014990:	4649      	mov	r1, r9
 8014992:	f7ec f9e1 	bl	8000d58 <__aeabi_uldivmod>
 8014996:	4602      	mov	r2, r0
 8014998:	460b      	mov	r3, r1
 801499a:	4613      	mov	r3, r2
 801499c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801499e:	6a3b      	ldr	r3, [r7, #32]
 80149a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80149a4:	d308      	bcc.n	80149b8 <UART_SetConfig+0x430>
 80149a6:	6a3b      	ldr	r3, [r7, #32]
 80149a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80149ac:	d204      	bcs.n	80149b8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80149ae:	697b      	ldr	r3, [r7, #20]
 80149b0:	681b      	ldr	r3, [r3, #0]
 80149b2:	6a3a      	ldr	r2, [r7, #32]
 80149b4:	60da      	str	r2, [r3, #12]
 80149b6:	e0ce      	b.n	8014b56 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80149b8:	2301      	movs	r3, #1
 80149ba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80149be:	e0ca      	b.n	8014b56 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80149c0:	697b      	ldr	r3, [r7, #20]
 80149c2:	69db      	ldr	r3, [r3, #28]
 80149c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80149c8:	d166      	bne.n	8014a98 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80149ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80149ce:	2b08      	cmp	r3, #8
 80149d0:	d827      	bhi.n	8014a22 <UART_SetConfig+0x49a>
 80149d2:	a201      	add	r2, pc, #4	; (adr r2, 80149d8 <UART_SetConfig+0x450>)
 80149d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80149d8:	080149fd 	.word	0x080149fd
 80149dc:	08014a05 	.word	0x08014a05
 80149e0:	08014a0d 	.word	0x08014a0d
 80149e4:	08014a23 	.word	0x08014a23
 80149e8:	08014a13 	.word	0x08014a13
 80149ec:	08014a23 	.word	0x08014a23
 80149f0:	08014a23 	.word	0x08014a23
 80149f4:	08014a23 	.word	0x08014a23
 80149f8:	08014a1b 	.word	0x08014a1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80149fc:	f7fb fa0c 	bl	800fe18 <HAL_RCC_GetPCLK1Freq>
 8014a00:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8014a02:	e014      	b.n	8014a2e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8014a04:	f7fb fa1e 	bl	800fe44 <HAL_RCC_GetPCLK2Freq>
 8014a08:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8014a0a:	e010      	b.n	8014a2e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8014a0c:	4b4e      	ldr	r3, [pc, #312]	; (8014b48 <UART_SetConfig+0x5c0>)
 8014a0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8014a10:	e00d      	b.n	8014a2e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8014a12:	f7fb f969 	bl	800fce8 <HAL_RCC_GetSysClockFreq>
 8014a16:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8014a18:	e009      	b.n	8014a2e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014a1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014a1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8014a20:	e005      	b.n	8014a2e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8014a22:	2300      	movs	r3, #0
 8014a24:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8014a26:	2301      	movs	r3, #1
 8014a28:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8014a2c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8014a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	f000 8090 	beq.w	8014b56 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8014a36:	697b      	ldr	r3, [r7, #20]
 8014a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a3a:	4a44      	ldr	r2, [pc, #272]	; (8014b4c <UART_SetConfig+0x5c4>)
 8014a3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014a40:	461a      	mov	r2, r3
 8014a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a44:	fbb3 f3f2 	udiv	r3, r3, r2
 8014a48:	005a      	lsls	r2, r3, #1
 8014a4a:	697b      	ldr	r3, [r7, #20]
 8014a4c:	685b      	ldr	r3, [r3, #4]
 8014a4e:	085b      	lsrs	r3, r3, #1
 8014a50:	441a      	add	r2, r3
 8014a52:	697b      	ldr	r3, [r7, #20]
 8014a54:	685b      	ldr	r3, [r3, #4]
 8014a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8014a5a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8014a5c:	6a3b      	ldr	r3, [r7, #32]
 8014a5e:	2b0f      	cmp	r3, #15
 8014a60:	d916      	bls.n	8014a90 <UART_SetConfig+0x508>
 8014a62:	6a3b      	ldr	r3, [r7, #32]
 8014a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014a68:	d212      	bcs.n	8014a90 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8014a6a:	6a3b      	ldr	r3, [r7, #32]
 8014a6c:	b29b      	uxth	r3, r3
 8014a6e:	f023 030f 	bic.w	r3, r3, #15
 8014a72:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8014a74:	6a3b      	ldr	r3, [r7, #32]
 8014a76:	085b      	lsrs	r3, r3, #1
 8014a78:	b29b      	uxth	r3, r3
 8014a7a:	f003 0307 	and.w	r3, r3, #7
 8014a7e:	b29a      	uxth	r2, r3
 8014a80:	8bfb      	ldrh	r3, [r7, #30]
 8014a82:	4313      	orrs	r3, r2
 8014a84:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8014a86:	697b      	ldr	r3, [r7, #20]
 8014a88:	681b      	ldr	r3, [r3, #0]
 8014a8a:	8bfa      	ldrh	r2, [r7, #30]
 8014a8c:	60da      	str	r2, [r3, #12]
 8014a8e:	e062      	b.n	8014b56 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8014a90:	2301      	movs	r3, #1
 8014a92:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8014a96:	e05e      	b.n	8014b56 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8014a98:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8014a9c:	2b08      	cmp	r3, #8
 8014a9e:	d828      	bhi.n	8014af2 <UART_SetConfig+0x56a>
 8014aa0:	a201      	add	r2, pc, #4	; (adr r2, 8014aa8 <UART_SetConfig+0x520>)
 8014aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014aa6:	bf00      	nop
 8014aa8:	08014acd 	.word	0x08014acd
 8014aac:	08014ad5 	.word	0x08014ad5
 8014ab0:	08014add 	.word	0x08014add
 8014ab4:	08014af3 	.word	0x08014af3
 8014ab8:	08014ae3 	.word	0x08014ae3
 8014abc:	08014af3 	.word	0x08014af3
 8014ac0:	08014af3 	.word	0x08014af3
 8014ac4:	08014af3 	.word	0x08014af3
 8014ac8:	08014aeb 	.word	0x08014aeb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8014acc:	f7fb f9a4 	bl	800fe18 <HAL_RCC_GetPCLK1Freq>
 8014ad0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8014ad2:	e014      	b.n	8014afe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8014ad4:	f7fb f9b6 	bl	800fe44 <HAL_RCC_GetPCLK2Freq>
 8014ad8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8014ada:	e010      	b.n	8014afe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8014adc:	4b1a      	ldr	r3, [pc, #104]	; (8014b48 <UART_SetConfig+0x5c0>)
 8014ade:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8014ae0:	e00d      	b.n	8014afe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8014ae2:	f7fb f901 	bl	800fce8 <HAL_RCC_GetSysClockFreq>
 8014ae6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8014ae8:	e009      	b.n	8014afe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014aea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014aee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8014af0:	e005      	b.n	8014afe <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8014af2:	2300      	movs	r3, #0
 8014af4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8014af6:	2301      	movs	r3, #1
 8014af8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8014afc:	bf00      	nop
    }

    if (pclk != 0U)
 8014afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	d028      	beq.n	8014b56 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8014b04:	697b      	ldr	r3, [r7, #20]
 8014b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b08:	4a10      	ldr	r2, [pc, #64]	; (8014b4c <UART_SetConfig+0x5c4>)
 8014b0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014b0e:	461a      	mov	r2, r3
 8014b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b12:	fbb3 f2f2 	udiv	r2, r3, r2
 8014b16:	697b      	ldr	r3, [r7, #20]
 8014b18:	685b      	ldr	r3, [r3, #4]
 8014b1a:	085b      	lsrs	r3, r3, #1
 8014b1c:	441a      	add	r2, r3
 8014b1e:	697b      	ldr	r3, [r7, #20]
 8014b20:	685b      	ldr	r3, [r3, #4]
 8014b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8014b26:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8014b28:	6a3b      	ldr	r3, [r7, #32]
 8014b2a:	2b0f      	cmp	r3, #15
 8014b2c:	d910      	bls.n	8014b50 <UART_SetConfig+0x5c8>
 8014b2e:	6a3b      	ldr	r3, [r7, #32]
 8014b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014b34:	d20c      	bcs.n	8014b50 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8014b36:	6a3b      	ldr	r3, [r7, #32]
 8014b38:	b29a      	uxth	r2, r3
 8014b3a:	697b      	ldr	r3, [r7, #20]
 8014b3c:	681b      	ldr	r3, [r3, #0]
 8014b3e:	60da      	str	r2, [r3, #12]
 8014b40:	e009      	b.n	8014b56 <UART_SetConfig+0x5ce>
 8014b42:	bf00      	nop
 8014b44:	40008000 	.word	0x40008000
 8014b48:	00f42400 	.word	0x00f42400
 8014b4c:	08025440 	.word	0x08025440
      }
      else
      {
        ret = HAL_ERROR;
 8014b50:	2301      	movs	r3, #1
 8014b52:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8014b56:	697b      	ldr	r3, [r7, #20]
 8014b58:	2201      	movs	r2, #1
 8014b5a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8014b5e:	697b      	ldr	r3, [r7, #20]
 8014b60:	2201      	movs	r2, #1
 8014b62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8014b66:	697b      	ldr	r3, [r7, #20]
 8014b68:	2200      	movs	r2, #0
 8014b6a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8014b6c:	697b      	ldr	r3, [r7, #20]
 8014b6e:	2200      	movs	r2, #0
 8014b70:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8014b72:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8014b76:	4618      	mov	r0, r3
 8014b78:	3730      	adds	r7, #48	; 0x30
 8014b7a:	46bd      	mov	sp, r7
 8014b7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08014b80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8014b80:	b480      	push	{r7}
 8014b82:	b083      	sub	sp, #12
 8014b84:	af00      	add	r7, sp, #0
 8014b86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014b8c:	f003 0301 	and.w	r3, r3, #1
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	d00a      	beq.n	8014baa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	681b      	ldr	r3, [r3, #0]
 8014b98:	685b      	ldr	r3, [r3, #4]
 8014b9a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	681b      	ldr	r3, [r3, #0]
 8014ba6:	430a      	orrs	r2, r1
 8014ba8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014bae:	f003 0302 	and.w	r3, r3, #2
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	d00a      	beq.n	8014bcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	681b      	ldr	r3, [r3, #0]
 8014bba:	685b      	ldr	r3, [r3, #4]
 8014bbc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	681b      	ldr	r3, [r3, #0]
 8014bc8:	430a      	orrs	r2, r1
 8014bca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014bd0:	f003 0304 	and.w	r3, r3, #4
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d00a      	beq.n	8014bee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	681b      	ldr	r3, [r3, #0]
 8014bdc:	685b      	ldr	r3, [r3, #4]
 8014bde:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014be6:	687b      	ldr	r3, [r7, #4]
 8014be8:	681b      	ldr	r3, [r3, #0]
 8014bea:	430a      	orrs	r2, r1
 8014bec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014bf2:	f003 0308 	and.w	r3, r3, #8
 8014bf6:	2b00      	cmp	r3, #0
 8014bf8:	d00a      	beq.n	8014c10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	681b      	ldr	r3, [r3, #0]
 8014bfe:	685b      	ldr	r3, [r3, #4]
 8014c00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	681b      	ldr	r3, [r3, #0]
 8014c0c:	430a      	orrs	r2, r1
 8014c0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014c14:	f003 0310 	and.w	r3, r3, #16
 8014c18:	2b00      	cmp	r3, #0
 8014c1a:	d00a      	beq.n	8014c32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	681b      	ldr	r3, [r3, #0]
 8014c20:	689b      	ldr	r3, [r3, #8]
 8014c22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8014c26:	687b      	ldr	r3, [r7, #4]
 8014c28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	681b      	ldr	r3, [r3, #0]
 8014c2e:	430a      	orrs	r2, r1
 8014c30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014c36:	f003 0320 	and.w	r3, r3, #32
 8014c3a:	2b00      	cmp	r3, #0
 8014c3c:	d00a      	beq.n	8014c54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	681b      	ldr	r3, [r3, #0]
 8014c42:	689b      	ldr	r3, [r3, #8]
 8014c44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8014c48:	687b      	ldr	r3, [r7, #4]
 8014c4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	681b      	ldr	r3, [r3, #0]
 8014c50:	430a      	orrs	r2, r1
 8014c52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	d01a      	beq.n	8014c96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	681b      	ldr	r3, [r3, #0]
 8014c64:	685b      	ldr	r3, [r3, #4]
 8014c66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8014c6a:	687b      	ldr	r3, [r7, #4]
 8014c6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	681b      	ldr	r3, [r3, #0]
 8014c72:	430a      	orrs	r2, r1
 8014c74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014c7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8014c7e:	d10a      	bne.n	8014c96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	681b      	ldr	r3, [r3, #0]
 8014c84:	685b      	ldr	r3, [r3, #4]
 8014c86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	681b      	ldr	r3, [r3, #0]
 8014c92:	430a      	orrs	r2, r1
 8014c94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d00a      	beq.n	8014cb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	681b      	ldr	r3, [r3, #0]
 8014ca6:	685b      	ldr	r3, [r3, #4]
 8014ca8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	681b      	ldr	r3, [r3, #0]
 8014cb4:	430a      	orrs	r2, r1
 8014cb6:	605a      	str	r2, [r3, #4]
  }
}
 8014cb8:	bf00      	nop
 8014cba:	370c      	adds	r7, #12
 8014cbc:	46bd      	mov	sp, r7
 8014cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cc2:	4770      	bx	lr

08014cc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8014cc4:	b580      	push	{r7, lr}
 8014cc6:	b086      	sub	sp, #24
 8014cc8:	af02      	add	r7, sp, #8
 8014cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	2200      	movs	r2, #0
 8014cd0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8014cd4:	f7f9 fafc 	bl	800e2d0 <HAL_GetTick>
 8014cd8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	681b      	ldr	r3, [r3, #0]
 8014cde:	681b      	ldr	r3, [r3, #0]
 8014ce0:	f003 0308 	and.w	r3, r3, #8
 8014ce4:	2b08      	cmp	r3, #8
 8014ce6:	d10e      	bne.n	8014d06 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8014ce8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8014cec:	9300      	str	r3, [sp, #0]
 8014cee:	68fb      	ldr	r3, [r7, #12]
 8014cf0:	2200      	movs	r2, #0
 8014cf2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8014cf6:	6878      	ldr	r0, [r7, #4]
 8014cf8:	f000 f82f 	bl	8014d5a <UART_WaitOnFlagUntilTimeout>
 8014cfc:	4603      	mov	r3, r0
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d001      	beq.n	8014d06 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8014d02:	2303      	movs	r3, #3
 8014d04:	e025      	b.n	8014d52 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	681b      	ldr	r3, [r3, #0]
 8014d0a:	681b      	ldr	r3, [r3, #0]
 8014d0c:	f003 0304 	and.w	r3, r3, #4
 8014d10:	2b04      	cmp	r3, #4
 8014d12:	d10e      	bne.n	8014d32 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8014d14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8014d18:	9300      	str	r3, [sp, #0]
 8014d1a:	68fb      	ldr	r3, [r7, #12]
 8014d1c:	2200      	movs	r2, #0
 8014d1e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8014d22:	6878      	ldr	r0, [r7, #4]
 8014d24:	f000 f819 	bl	8014d5a <UART_WaitOnFlagUntilTimeout>
 8014d28:	4603      	mov	r3, r0
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	d001      	beq.n	8014d32 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8014d2e:	2303      	movs	r3, #3
 8014d30:	e00f      	b.n	8014d52 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	2220      	movs	r2, #32
 8014d36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	2220      	movs	r2, #32
 8014d3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	2200      	movs	r2, #0
 8014d46:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	2200      	movs	r2, #0
 8014d4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8014d50:	2300      	movs	r3, #0
}
 8014d52:	4618      	mov	r0, r3
 8014d54:	3710      	adds	r7, #16
 8014d56:	46bd      	mov	sp, r7
 8014d58:	bd80      	pop	{r7, pc}

08014d5a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8014d5a:	b580      	push	{r7, lr}
 8014d5c:	b09c      	sub	sp, #112	; 0x70
 8014d5e:	af00      	add	r7, sp, #0
 8014d60:	60f8      	str	r0, [r7, #12]
 8014d62:	60b9      	str	r1, [r7, #8]
 8014d64:	603b      	str	r3, [r7, #0]
 8014d66:	4613      	mov	r3, r2
 8014d68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014d6a:	e0a9      	b.n	8014ec0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014d6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d72:	f000 80a5 	beq.w	8014ec0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014d76:	f7f9 faab 	bl	800e2d0 <HAL_GetTick>
 8014d7a:	4602      	mov	r2, r0
 8014d7c:	683b      	ldr	r3, [r7, #0]
 8014d7e:	1ad3      	subs	r3, r2, r3
 8014d80:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8014d82:	429a      	cmp	r2, r3
 8014d84:	d302      	bcc.n	8014d8c <UART_WaitOnFlagUntilTimeout+0x32>
 8014d86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	d140      	bne.n	8014e0e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8014d8c:	68fb      	ldr	r3, [r7, #12]
 8014d8e:	681b      	ldr	r3, [r3, #0]
 8014d90:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014d92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014d94:	e853 3f00 	ldrex	r3, [r3]
 8014d98:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8014d9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014d9c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8014da0:	667b      	str	r3, [r7, #100]	; 0x64
 8014da2:	68fb      	ldr	r3, [r7, #12]
 8014da4:	681b      	ldr	r3, [r3, #0]
 8014da6:	461a      	mov	r2, r3
 8014da8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014daa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014dac:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014dae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014db0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8014db2:	e841 2300 	strex	r3, r2, [r1]
 8014db6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8014db8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	d1e6      	bne.n	8014d8c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014dbe:	68fb      	ldr	r3, [r7, #12]
 8014dc0:	681b      	ldr	r3, [r3, #0]
 8014dc2:	3308      	adds	r3, #8
 8014dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014dc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014dc8:	e853 3f00 	ldrex	r3, [r3]
 8014dcc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8014dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014dd0:	f023 0301 	bic.w	r3, r3, #1
 8014dd4:	663b      	str	r3, [r7, #96]	; 0x60
 8014dd6:	68fb      	ldr	r3, [r7, #12]
 8014dd8:	681b      	ldr	r3, [r3, #0]
 8014dda:	3308      	adds	r3, #8
 8014ddc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014dde:	64ba      	str	r2, [r7, #72]	; 0x48
 8014de0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014de2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014de4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014de6:	e841 2300 	strex	r3, r2, [r1]
 8014dea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8014dec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d1e5      	bne.n	8014dbe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8014df2:	68fb      	ldr	r3, [r7, #12]
 8014df4:	2220      	movs	r2, #32
 8014df6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8014dfa:	68fb      	ldr	r3, [r7, #12]
 8014dfc:	2220      	movs	r2, #32
 8014dfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8014e02:	68fb      	ldr	r3, [r7, #12]
 8014e04:	2200      	movs	r2, #0
 8014e06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8014e0a:	2303      	movs	r3, #3
 8014e0c:	e069      	b.n	8014ee2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8014e0e:	68fb      	ldr	r3, [r7, #12]
 8014e10:	681b      	ldr	r3, [r3, #0]
 8014e12:	681b      	ldr	r3, [r3, #0]
 8014e14:	f003 0304 	and.w	r3, r3, #4
 8014e18:	2b00      	cmp	r3, #0
 8014e1a:	d051      	beq.n	8014ec0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8014e1c:	68fb      	ldr	r3, [r7, #12]
 8014e1e:	681b      	ldr	r3, [r3, #0]
 8014e20:	69db      	ldr	r3, [r3, #28]
 8014e22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014e26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014e2a:	d149      	bne.n	8014ec0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8014e2c:	68fb      	ldr	r3, [r7, #12]
 8014e2e:	681b      	ldr	r3, [r3, #0]
 8014e30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014e34:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8014e36:	68fb      	ldr	r3, [r7, #12]
 8014e38:	681b      	ldr	r3, [r3, #0]
 8014e3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e3e:	e853 3f00 	ldrex	r3, [r3]
 8014e42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8014e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e46:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8014e4a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8014e4c:	68fb      	ldr	r3, [r7, #12]
 8014e4e:	681b      	ldr	r3, [r3, #0]
 8014e50:	461a      	mov	r2, r3
 8014e52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014e54:	637b      	str	r3, [r7, #52]	; 0x34
 8014e56:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014e58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014e5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014e5c:	e841 2300 	strex	r3, r2, [r1]
 8014e60:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8014e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	d1e6      	bne.n	8014e36 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014e68:	68fb      	ldr	r3, [r7, #12]
 8014e6a:	681b      	ldr	r3, [r3, #0]
 8014e6c:	3308      	adds	r3, #8
 8014e6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014e70:	697b      	ldr	r3, [r7, #20]
 8014e72:	e853 3f00 	ldrex	r3, [r3]
 8014e76:	613b      	str	r3, [r7, #16]
   return(result);
 8014e78:	693b      	ldr	r3, [r7, #16]
 8014e7a:	f023 0301 	bic.w	r3, r3, #1
 8014e7e:	66bb      	str	r3, [r7, #104]	; 0x68
 8014e80:	68fb      	ldr	r3, [r7, #12]
 8014e82:	681b      	ldr	r3, [r3, #0]
 8014e84:	3308      	adds	r3, #8
 8014e86:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8014e88:	623a      	str	r2, [r7, #32]
 8014e8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014e8c:	69f9      	ldr	r1, [r7, #28]
 8014e8e:	6a3a      	ldr	r2, [r7, #32]
 8014e90:	e841 2300 	strex	r3, r2, [r1]
 8014e94:	61bb      	str	r3, [r7, #24]
   return(result);
 8014e96:	69bb      	ldr	r3, [r7, #24]
 8014e98:	2b00      	cmp	r3, #0
 8014e9a:	d1e5      	bne.n	8014e68 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8014e9c:	68fb      	ldr	r3, [r7, #12]
 8014e9e:	2220      	movs	r2, #32
 8014ea0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8014ea4:	68fb      	ldr	r3, [r7, #12]
 8014ea6:	2220      	movs	r2, #32
 8014ea8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8014eac:	68fb      	ldr	r3, [r7, #12]
 8014eae:	2220      	movs	r2, #32
 8014eb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8014eb4:	68fb      	ldr	r3, [r7, #12]
 8014eb6:	2200      	movs	r2, #0
 8014eb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8014ebc:	2303      	movs	r3, #3
 8014ebe:	e010      	b.n	8014ee2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014ec0:	68fb      	ldr	r3, [r7, #12]
 8014ec2:	681b      	ldr	r3, [r3, #0]
 8014ec4:	69da      	ldr	r2, [r3, #28]
 8014ec6:	68bb      	ldr	r3, [r7, #8]
 8014ec8:	4013      	ands	r3, r2
 8014eca:	68ba      	ldr	r2, [r7, #8]
 8014ecc:	429a      	cmp	r2, r3
 8014ece:	bf0c      	ite	eq
 8014ed0:	2301      	moveq	r3, #1
 8014ed2:	2300      	movne	r3, #0
 8014ed4:	b2db      	uxtb	r3, r3
 8014ed6:	461a      	mov	r2, r3
 8014ed8:	79fb      	ldrb	r3, [r7, #7]
 8014eda:	429a      	cmp	r2, r3
 8014edc:	f43f af46 	beq.w	8014d6c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8014ee0:	2300      	movs	r3, #0
}
 8014ee2:	4618      	mov	r0, r3
 8014ee4:	3770      	adds	r7, #112	; 0x70
 8014ee6:	46bd      	mov	sp, r7
 8014ee8:	bd80      	pop	{r7, pc}
	...

08014eec <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8014eec:	b580      	push	{r7, lr}
 8014eee:	b096      	sub	sp, #88	; 0x58
 8014ef0:	af00      	add	r7, sp, #0
 8014ef2:	60f8      	str	r0, [r7, #12]
 8014ef4:	60b9      	str	r1, [r7, #8]
 8014ef6:	4613      	mov	r3, r2
 8014ef8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8014efa:	68fb      	ldr	r3, [r7, #12]
 8014efc:	68ba      	ldr	r2, [r7, #8]
 8014efe:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8014f00:	68fb      	ldr	r3, [r7, #12]
 8014f02:	88fa      	ldrh	r2, [r7, #6]
 8014f04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014f08:	68fb      	ldr	r3, [r7, #12]
 8014f0a:	2200      	movs	r2, #0
 8014f0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8014f10:	68fb      	ldr	r3, [r7, #12]
 8014f12:	2222      	movs	r2, #34	; 0x22
 8014f14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8014f18:	68fb      	ldr	r3, [r7, #12]
 8014f1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	d02c      	beq.n	8014f7a <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8014f20:	68fb      	ldr	r3, [r7, #12]
 8014f22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014f24:	4a42      	ldr	r2, [pc, #264]	; (8015030 <UART_Start_Receive_DMA+0x144>)
 8014f26:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8014f28:	68fb      	ldr	r3, [r7, #12]
 8014f2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014f2c:	4a41      	ldr	r2, [pc, #260]	; (8015034 <UART_Start_Receive_DMA+0x148>)
 8014f2e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8014f30:	68fb      	ldr	r3, [r7, #12]
 8014f32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014f34:	4a40      	ldr	r2, [pc, #256]	; (8015038 <UART_Start_Receive_DMA+0x14c>)
 8014f36:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8014f38:	68fb      	ldr	r3, [r7, #12]
 8014f3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014f3c:	2200      	movs	r2, #0
 8014f3e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8014f40:	68fb      	ldr	r3, [r7, #12]
 8014f42:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8014f44:	68fb      	ldr	r3, [r7, #12]
 8014f46:	681b      	ldr	r3, [r3, #0]
 8014f48:	3324      	adds	r3, #36	; 0x24
 8014f4a:	4619      	mov	r1, r3
 8014f4c:	68fb      	ldr	r3, [r7, #12]
 8014f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014f50:	461a      	mov	r2, r3
 8014f52:	88fb      	ldrh	r3, [r7, #6]
 8014f54:	f7f9 fb6e 	bl	800e634 <HAL_DMA_Start_IT>
 8014f58:	4603      	mov	r3, r0
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	d00d      	beq.n	8014f7a <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8014f5e:	68fb      	ldr	r3, [r7, #12]
 8014f60:	2210      	movs	r2, #16
 8014f62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8014f66:	68fb      	ldr	r3, [r7, #12]
 8014f68:	2200      	movs	r2, #0
 8014f6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8014f6e:	68fb      	ldr	r3, [r7, #12]
 8014f70:	2220      	movs	r2, #32
 8014f72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 8014f76:	2301      	movs	r3, #1
 8014f78:	e055      	b.n	8015026 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 8014f7a:	68fb      	ldr	r3, [r7, #12]
 8014f7c:	2200      	movs	r2, #0
 8014f7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8014f82:	68fb      	ldr	r3, [r7, #12]
 8014f84:	691b      	ldr	r3, [r3, #16]
 8014f86:	2b00      	cmp	r3, #0
 8014f88:	d018      	beq.n	8014fbc <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014f8a:	68fb      	ldr	r3, [r7, #12]
 8014f8c:	681b      	ldr	r3, [r3, #0]
 8014f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014f90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014f92:	e853 3f00 	ldrex	r3, [r3]
 8014f96:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8014f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014f9e:	657b      	str	r3, [r7, #84]	; 0x54
 8014fa0:	68fb      	ldr	r3, [r7, #12]
 8014fa2:	681b      	ldr	r3, [r3, #0]
 8014fa4:	461a      	mov	r2, r3
 8014fa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014fa8:	64bb      	str	r3, [r7, #72]	; 0x48
 8014faa:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014fac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014fae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014fb0:	e841 2300 	strex	r3, r2, [r1]
 8014fb4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8014fb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	d1e6      	bne.n	8014f8a <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014fbc:	68fb      	ldr	r3, [r7, #12]
 8014fbe:	681b      	ldr	r3, [r3, #0]
 8014fc0:	3308      	adds	r3, #8
 8014fc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fc6:	e853 3f00 	ldrex	r3, [r3]
 8014fca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8014fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fce:	f043 0301 	orr.w	r3, r3, #1
 8014fd2:	653b      	str	r3, [r7, #80]	; 0x50
 8014fd4:	68fb      	ldr	r3, [r7, #12]
 8014fd6:	681b      	ldr	r3, [r3, #0]
 8014fd8:	3308      	adds	r3, #8
 8014fda:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014fdc:	637a      	str	r2, [r7, #52]	; 0x34
 8014fde:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014fe0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014fe2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014fe4:	e841 2300 	strex	r3, r2, [r1]
 8014fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8014fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d1e5      	bne.n	8014fbc <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014ff0:	68fb      	ldr	r3, [r7, #12]
 8014ff2:	681b      	ldr	r3, [r3, #0]
 8014ff4:	3308      	adds	r3, #8
 8014ff6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014ff8:	697b      	ldr	r3, [r7, #20]
 8014ffa:	e853 3f00 	ldrex	r3, [r3]
 8014ffe:	613b      	str	r3, [r7, #16]
   return(result);
 8015000:	693b      	ldr	r3, [r7, #16]
 8015002:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015006:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015008:	68fb      	ldr	r3, [r7, #12]
 801500a:	681b      	ldr	r3, [r3, #0]
 801500c:	3308      	adds	r3, #8
 801500e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015010:	623a      	str	r2, [r7, #32]
 8015012:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015014:	69f9      	ldr	r1, [r7, #28]
 8015016:	6a3a      	ldr	r2, [r7, #32]
 8015018:	e841 2300 	strex	r3, r2, [r1]
 801501c:	61bb      	str	r3, [r7, #24]
   return(result);
 801501e:	69bb      	ldr	r3, [r7, #24]
 8015020:	2b00      	cmp	r3, #0
 8015022:	d1e5      	bne.n	8014ff0 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 8015024:	2300      	movs	r3, #0
}
 8015026:	4618      	mov	r0, r3
 8015028:	3758      	adds	r7, #88	; 0x58
 801502a:	46bd      	mov	sp, r7
 801502c:	bd80      	pop	{r7, pc}
 801502e:	bf00      	nop
 8015030:	0801518b 	.word	0x0801518b
 8015034:	080152b1 	.word	0x080152b1
 8015038:	080152e9 	.word	0x080152e9

0801503c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801503c:	b480      	push	{r7}
 801503e:	b08f      	sub	sp, #60	; 0x3c
 8015040:	af00      	add	r7, sp, #0
 8015042:	6078      	str	r0, [r7, #4]
#if defined(USART_CR1_FIFOEN)
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	681b      	ldr	r3, [r3, #0]
 8015048:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801504a:	6a3b      	ldr	r3, [r7, #32]
 801504c:	e853 3f00 	ldrex	r3, [r3]
 8015050:	61fb      	str	r3, [r7, #28]
   return(result);
 8015052:	69fb      	ldr	r3, [r7, #28]
 8015054:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8015058:	637b      	str	r3, [r7, #52]	; 0x34
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	681b      	ldr	r3, [r3, #0]
 801505e:	461a      	mov	r2, r3
 8015060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015062:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015064:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015066:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015068:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801506a:	e841 2300 	strex	r3, r2, [r1]
 801506e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8015070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015072:	2b00      	cmp	r3, #0
 8015074:	d1e6      	bne.n	8015044 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	681b      	ldr	r3, [r3, #0]
 801507a:	3308      	adds	r3, #8
 801507c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801507e:	68fb      	ldr	r3, [r7, #12]
 8015080:	e853 3f00 	ldrex	r3, [r3]
 8015084:	60bb      	str	r3, [r7, #8]
   return(result);
 8015086:	68bb      	ldr	r3, [r7, #8]
 8015088:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 801508c:	633b      	str	r3, [r7, #48]	; 0x30
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	681b      	ldr	r3, [r3, #0]
 8015092:	3308      	adds	r3, #8
 8015094:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015096:	61ba      	str	r2, [r7, #24]
 8015098:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801509a:	6979      	ldr	r1, [r7, #20]
 801509c:	69ba      	ldr	r2, [r7, #24]
 801509e:	e841 2300 	strex	r3, r2, [r1]
 80150a2:	613b      	str	r3, [r7, #16]
   return(result);
 80150a4:	693b      	ldr	r3, [r7, #16]
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	d1e5      	bne.n	8015076 <UART_EndTxTransfer+0x3a>
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	2220      	movs	r2, #32
 80150ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80150b2:	bf00      	nop
 80150b4:	373c      	adds	r7, #60	; 0x3c
 80150b6:	46bd      	mov	sp, r7
 80150b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150bc:	4770      	bx	lr

080150be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80150be:	b480      	push	{r7}
 80150c0:	b095      	sub	sp, #84	; 0x54
 80150c2:	af00      	add	r7, sp, #0
 80150c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	681b      	ldr	r3, [r3, #0]
 80150ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80150cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80150ce:	e853 3f00 	ldrex	r3, [r3]
 80150d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80150d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80150da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	681b      	ldr	r3, [r3, #0]
 80150e0:	461a      	mov	r2, r3
 80150e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80150e4:	643b      	str	r3, [r7, #64]	; 0x40
 80150e6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80150e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80150ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80150ec:	e841 2300 	strex	r3, r2, [r1]
 80150f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80150f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150f4:	2b00      	cmp	r3, #0
 80150f6:	d1e6      	bne.n	80150c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	681b      	ldr	r3, [r3, #0]
 80150fc:	3308      	adds	r3, #8
 80150fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015100:	6a3b      	ldr	r3, [r7, #32]
 8015102:	e853 3f00 	ldrex	r3, [r3]
 8015106:	61fb      	str	r3, [r7, #28]
   return(result);
 8015108:	69fb      	ldr	r3, [r7, #28]
 801510a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801510e:	f023 0301 	bic.w	r3, r3, #1
 8015112:	64bb      	str	r3, [r7, #72]	; 0x48
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	681b      	ldr	r3, [r3, #0]
 8015118:	3308      	adds	r3, #8
 801511a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801511c:	62fa      	str	r2, [r7, #44]	; 0x2c
 801511e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015120:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015122:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015124:	e841 2300 	strex	r3, r2, [r1]
 8015128:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801512a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801512c:	2b00      	cmp	r3, #0
 801512e:	d1e3      	bne.n	80150f8 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015134:	2b01      	cmp	r3, #1
 8015136:	d118      	bne.n	801516a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	681b      	ldr	r3, [r3, #0]
 801513c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801513e:	68fb      	ldr	r3, [r7, #12]
 8015140:	e853 3f00 	ldrex	r3, [r3]
 8015144:	60bb      	str	r3, [r7, #8]
   return(result);
 8015146:	68bb      	ldr	r3, [r7, #8]
 8015148:	f023 0310 	bic.w	r3, r3, #16
 801514c:	647b      	str	r3, [r7, #68]	; 0x44
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	681b      	ldr	r3, [r3, #0]
 8015152:	461a      	mov	r2, r3
 8015154:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015156:	61bb      	str	r3, [r7, #24]
 8015158:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801515a:	6979      	ldr	r1, [r7, #20]
 801515c:	69ba      	ldr	r2, [r7, #24]
 801515e:	e841 2300 	strex	r3, r2, [r1]
 8015162:	613b      	str	r3, [r7, #16]
   return(result);
 8015164:	693b      	ldr	r3, [r7, #16]
 8015166:	2b00      	cmp	r3, #0
 8015168:	d1e6      	bne.n	8015138 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	2220      	movs	r2, #32
 801516e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	2200      	movs	r2, #0
 8015176:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	2200      	movs	r2, #0
 801517c:	671a      	str	r2, [r3, #112]	; 0x70
}
 801517e:	bf00      	nop
 8015180:	3754      	adds	r7, #84	; 0x54
 8015182:	46bd      	mov	sp, r7
 8015184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015188:	4770      	bx	lr

0801518a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801518a:	b580      	push	{r7, lr}
 801518c:	b09c      	sub	sp, #112	; 0x70
 801518e:	af00      	add	r7, sp, #0
 8015190:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015196:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	681b      	ldr	r3, [r3, #0]
 801519c:	681b      	ldr	r3, [r3, #0]
 801519e:	f003 0320 	and.w	r3, r3, #32
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	d171      	bne.n	801528a <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80151a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80151a8:	2200      	movs	r2, #0
 80151aa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80151ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80151b0:	681b      	ldr	r3, [r3, #0]
 80151b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80151b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80151b6:	e853 3f00 	ldrex	r3, [r3]
 80151ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80151bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80151be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80151c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80151c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80151c6:	681b      	ldr	r3, [r3, #0]
 80151c8:	461a      	mov	r2, r3
 80151ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80151cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80151ce:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80151d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80151d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80151d4:	e841 2300 	strex	r3, r2, [r1]
 80151d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80151da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80151dc:	2b00      	cmp	r3, #0
 80151de:	d1e6      	bne.n	80151ae <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80151e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80151e2:	681b      	ldr	r3, [r3, #0]
 80151e4:	3308      	adds	r3, #8
 80151e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80151e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151ea:	e853 3f00 	ldrex	r3, [r3]
 80151ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80151f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80151f2:	f023 0301 	bic.w	r3, r3, #1
 80151f6:	667b      	str	r3, [r7, #100]	; 0x64
 80151f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80151fa:	681b      	ldr	r3, [r3, #0]
 80151fc:	3308      	adds	r3, #8
 80151fe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015200:	647a      	str	r2, [r7, #68]	; 0x44
 8015202:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015204:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015206:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015208:	e841 2300 	strex	r3, r2, [r1]
 801520c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801520e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015210:	2b00      	cmp	r3, #0
 8015212:	d1e5      	bne.n	80151e0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015214:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015216:	681b      	ldr	r3, [r3, #0]
 8015218:	3308      	adds	r3, #8
 801521a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801521c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801521e:	e853 3f00 	ldrex	r3, [r3]
 8015222:	623b      	str	r3, [r7, #32]
   return(result);
 8015224:	6a3b      	ldr	r3, [r7, #32]
 8015226:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801522a:	663b      	str	r3, [r7, #96]	; 0x60
 801522c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801522e:	681b      	ldr	r3, [r3, #0]
 8015230:	3308      	adds	r3, #8
 8015232:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015234:	633a      	str	r2, [r7, #48]	; 0x30
 8015236:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015238:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801523a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801523c:	e841 2300 	strex	r3, r2, [r1]
 8015240:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8015242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015244:	2b00      	cmp	r3, #0
 8015246:	d1e5      	bne.n	8015214 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8015248:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801524a:	2220      	movs	r2, #32
 801524c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015250:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015252:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015254:	2b01      	cmp	r3, #1
 8015256:	d118      	bne.n	801528a <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015258:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801525a:	681b      	ldr	r3, [r3, #0]
 801525c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801525e:	693b      	ldr	r3, [r7, #16]
 8015260:	e853 3f00 	ldrex	r3, [r3]
 8015264:	60fb      	str	r3, [r7, #12]
   return(result);
 8015266:	68fb      	ldr	r3, [r7, #12]
 8015268:	f023 0310 	bic.w	r3, r3, #16
 801526c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801526e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015270:	681b      	ldr	r3, [r3, #0]
 8015272:	461a      	mov	r2, r3
 8015274:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015276:	61fb      	str	r3, [r7, #28]
 8015278:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801527a:	69b9      	ldr	r1, [r7, #24]
 801527c:	69fa      	ldr	r2, [r7, #28]
 801527e:	e841 2300 	strex	r3, r2, [r1]
 8015282:	617b      	str	r3, [r7, #20]
   return(result);
 8015284:	697b      	ldr	r3, [r7, #20]
 8015286:	2b00      	cmp	r3, #0
 8015288:	d1e6      	bne.n	8015258 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801528a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801528c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801528e:	2b01      	cmp	r3, #1
 8015290:	d107      	bne.n	80152a2 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8015292:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015294:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8015298:	4619      	mov	r1, r3
 801529a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801529c:	f7f5 fe68 	bl	800af70 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80152a0:	e002      	b.n	80152a8 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80152a2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80152a4:	f7ff f952 	bl	801454c <HAL_UART_RxCpltCallback>
}
 80152a8:	bf00      	nop
 80152aa:	3770      	adds	r7, #112	; 0x70
 80152ac:	46bd      	mov	sp, r7
 80152ae:	bd80      	pop	{r7, pc}

080152b0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80152b0:	b580      	push	{r7, lr}
 80152b2:	b084      	sub	sp, #16
 80152b4:	af00      	add	r7, sp, #0
 80152b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80152bc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80152be:	68fb      	ldr	r3, [r7, #12]
 80152c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80152c2:	2b01      	cmp	r3, #1
 80152c4:	d109      	bne.n	80152da <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80152c6:	68fb      	ldr	r3, [r7, #12]
 80152c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80152cc:	085b      	lsrs	r3, r3, #1
 80152ce:	b29b      	uxth	r3, r3
 80152d0:	4619      	mov	r1, r3
 80152d2:	68f8      	ldr	r0, [r7, #12]
 80152d4:	f7f5 fe4c 	bl	800af70 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80152d8:	e002      	b.n	80152e0 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 80152da:	68f8      	ldr	r0, [r7, #12]
 80152dc:	f7ff f940 	bl	8014560 <HAL_UART_RxHalfCpltCallback>
}
 80152e0:	bf00      	nop
 80152e2:	3710      	adds	r7, #16
 80152e4:	46bd      	mov	sp, r7
 80152e6:	bd80      	pop	{r7, pc}

080152e8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80152e8:	b580      	push	{r7, lr}
 80152ea:	b086      	sub	sp, #24
 80152ec:	af00      	add	r7, sp, #0
 80152ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80152f4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80152f6:	697b      	ldr	r3, [r7, #20]
 80152f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80152fc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80152fe:	697b      	ldr	r3, [r7, #20]
 8015300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015304:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8015306:	697b      	ldr	r3, [r7, #20]
 8015308:	681b      	ldr	r3, [r3, #0]
 801530a:	689b      	ldr	r3, [r3, #8]
 801530c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015310:	2b80      	cmp	r3, #128	; 0x80
 8015312:	d109      	bne.n	8015328 <UART_DMAError+0x40>
 8015314:	693b      	ldr	r3, [r7, #16]
 8015316:	2b21      	cmp	r3, #33	; 0x21
 8015318:	d106      	bne.n	8015328 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801531a:	697b      	ldr	r3, [r7, #20]
 801531c:	2200      	movs	r2, #0
 801531e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8015322:	6978      	ldr	r0, [r7, #20]
 8015324:	f7ff fe8a 	bl	801503c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8015328:	697b      	ldr	r3, [r7, #20]
 801532a:	681b      	ldr	r3, [r3, #0]
 801532c:	689b      	ldr	r3, [r3, #8]
 801532e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015332:	2b40      	cmp	r3, #64	; 0x40
 8015334:	d109      	bne.n	801534a <UART_DMAError+0x62>
 8015336:	68fb      	ldr	r3, [r7, #12]
 8015338:	2b22      	cmp	r3, #34	; 0x22
 801533a:	d106      	bne.n	801534a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801533c:	697b      	ldr	r3, [r7, #20]
 801533e:	2200      	movs	r2, #0
 8015340:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8015344:	6978      	ldr	r0, [r7, #20]
 8015346:	f7ff feba 	bl	80150be <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801534a:	697b      	ldr	r3, [r7, #20]
 801534c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015350:	f043 0210 	orr.w	r2, r3, #16
 8015354:	697b      	ldr	r3, [r7, #20]
 8015356:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801535a:	6978      	ldr	r0, [r7, #20]
 801535c:	f7ff f90a 	bl	8014574 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8015360:	bf00      	nop
 8015362:	3718      	adds	r7, #24
 8015364:	46bd      	mov	sp, r7
 8015366:	bd80      	pop	{r7, pc}

08015368 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8015368:	b580      	push	{r7, lr}
 801536a:	b084      	sub	sp, #16
 801536c:	af00      	add	r7, sp, #0
 801536e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015374:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8015376:	68fb      	ldr	r3, [r7, #12]
 8015378:	2200      	movs	r2, #0
 801537a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 801537e:	68fb      	ldr	r3, [r7, #12]
 8015380:	2200      	movs	r2, #0
 8015382:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8015386:	68f8      	ldr	r0, [r7, #12]
 8015388:	f7ff f8f4 	bl	8014574 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801538c:	bf00      	nop
 801538e:	3710      	adds	r7, #16
 8015390:	46bd      	mov	sp, r7
 8015392:	bd80      	pop	{r7, pc}

08015394 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8015394:	b580      	push	{r7, lr}
 8015396:	b088      	sub	sp, #32
 8015398:	af00      	add	r7, sp, #0
 801539a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	681b      	ldr	r3, [r3, #0]
 80153a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80153a2:	68fb      	ldr	r3, [r7, #12]
 80153a4:	e853 3f00 	ldrex	r3, [r3]
 80153a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80153aa:	68bb      	ldr	r3, [r7, #8]
 80153ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80153b0:	61fb      	str	r3, [r7, #28]
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	681b      	ldr	r3, [r3, #0]
 80153b6:	461a      	mov	r2, r3
 80153b8:	69fb      	ldr	r3, [r7, #28]
 80153ba:	61bb      	str	r3, [r7, #24]
 80153bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80153be:	6979      	ldr	r1, [r7, #20]
 80153c0:	69ba      	ldr	r2, [r7, #24]
 80153c2:	e841 2300 	strex	r3, r2, [r1]
 80153c6:	613b      	str	r3, [r7, #16]
   return(result);
 80153c8:	693b      	ldr	r3, [r7, #16]
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	d1e6      	bne.n	801539c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	2220      	movs	r2, #32
 80153d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	2200      	movs	r2, #0
 80153da:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80153dc:	6878      	ldr	r0, [r7, #4]
 80153de:	f7ff f8ab 	bl	8014538 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80153e2:	bf00      	nop
 80153e4:	3720      	adds	r7, #32
 80153e6:	46bd      	mov	sp, r7
 80153e8:	bd80      	pop	{r7, pc}

080153ea <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80153ea:	b480      	push	{r7}
 80153ec:	b083      	sub	sp, #12
 80153ee:	af00      	add	r7, sp, #0
 80153f0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80153f2:	bf00      	nop
 80153f4:	370c      	adds	r7, #12
 80153f6:	46bd      	mov	sp, r7
 80153f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153fc:	4770      	bx	lr

080153fe <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80153fe:	b480      	push	{r7}
 8015400:	b083      	sub	sp, #12
 8015402:	af00      	add	r7, sp, #0
 8015404:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8015406:	bf00      	nop
 8015408:	370c      	adds	r7, #12
 801540a:	46bd      	mov	sp, r7
 801540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015410:	4770      	bx	lr

08015412 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8015412:	b480      	push	{r7}
 8015414:	b083      	sub	sp, #12
 8015416:	af00      	add	r7, sp, #0
 8015418:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801541a:	bf00      	nop
 801541c:	370c      	adds	r7, #12
 801541e:	46bd      	mov	sp, r7
 8015420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015424:	4770      	bx	lr

08015426 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8015426:	b480      	push	{r7}
 8015428:	b085      	sub	sp, #20
 801542a:	af00      	add	r7, sp, #0
 801542c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8015434:	2b01      	cmp	r3, #1
 8015436:	d101      	bne.n	801543c <HAL_UARTEx_DisableFifoMode+0x16>
 8015438:	2302      	movs	r3, #2
 801543a:	e027      	b.n	801548c <HAL_UARTEx_DisableFifoMode+0x66>
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	2201      	movs	r2, #1
 8015440:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	2224      	movs	r2, #36	; 0x24
 8015448:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	681b      	ldr	r3, [r3, #0]
 8015450:	681b      	ldr	r3, [r3, #0]
 8015452:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	681b      	ldr	r3, [r3, #0]
 8015458:	681a      	ldr	r2, [r3, #0]
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	681b      	ldr	r3, [r3, #0]
 801545e:	f022 0201 	bic.w	r2, r2, #1
 8015462:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8015464:	68fb      	ldr	r3, [r7, #12]
 8015466:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801546a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	2200      	movs	r2, #0
 8015470:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	681b      	ldr	r3, [r3, #0]
 8015476:	68fa      	ldr	r2, [r7, #12]
 8015478:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	2220      	movs	r2, #32
 801547e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	2200      	movs	r2, #0
 8015486:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801548a:	2300      	movs	r3, #0
}
 801548c:	4618      	mov	r0, r3
 801548e:	3714      	adds	r7, #20
 8015490:	46bd      	mov	sp, r7
 8015492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015496:	4770      	bx	lr

08015498 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8015498:	b580      	push	{r7, lr}
 801549a:	b084      	sub	sp, #16
 801549c:	af00      	add	r7, sp, #0
 801549e:	6078      	str	r0, [r7, #4]
 80154a0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80154a8:	2b01      	cmp	r3, #1
 80154aa:	d101      	bne.n	80154b0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80154ac:	2302      	movs	r3, #2
 80154ae:	e02d      	b.n	801550c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	2201      	movs	r2, #1
 80154b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80154b8:	687b      	ldr	r3, [r7, #4]
 80154ba:	2224      	movs	r2, #36	; 0x24
 80154bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	681b      	ldr	r3, [r3, #0]
 80154c4:	681b      	ldr	r3, [r3, #0]
 80154c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	681b      	ldr	r3, [r3, #0]
 80154cc:	681a      	ldr	r2, [r3, #0]
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	681b      	ldr	r3, [r3, #0]
 80154d2:	f022 0201 	bic.w	r2, r2, #1
 80154d6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	681b      	ldr	r3, [r3, #0]
 80154dc:	689b      	ldr	r3, [r3, #8]
 80154de:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	681b      	ldr	r3, [r3, #0]
 80154e6:	683a      	ldr	r2, [r7, #0]
 80154e8:	430a      	orrs	r2, r1
 80154ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80154ec:	6878      	ldr	r0, [r7, #4]
 80154ee:	f000 f8ab 	bl	8015648 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	681b      	ldr	r3, [r3, #0]
 80154f6:	68fa      	ldr	r2, [r7, #12]
 80154f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	2220      	movs	r2, #32
 80154fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8015502:	687b      	ldr	r3, [r7, #4]
 8015504:	2200      	movs	r2, #0
 8015506:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801550a:	2300      	movs	r3, #0
}
 801550c:	4618      	mov	r0, r3
 801550e:	3710      	adds	r7, #16
 8015510:	46bd      	mov	sp, r7
 8015512:	bd80      	pop	{r7, pc}

08015514 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8015514:	b580      	push	{r7, lr}
 8015516:	b084      	sub	sp, #16
 8015518:	af00      	add	r7, sp, #0
 801551a:	6078      	str	r0, [r7, #4]
 801551c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8015524:	2b01      	cmp	r3, #1
 8015526:	d101      	bne.n	801552c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8015528:	2302      	movs	r3, #2
 801552a:	e02d      	b.n	8015588 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	2201      	movs	r2, #1
 8015530:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	2224      	movs	r2, #36	; 0x24
 8015538:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	681b      	ldr	r3, [r3, #0]
 8015540:	681b      	ldr	r3, [r3, #0]
 8015542:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	681b      	ldr	r3, [r3, #0]
 8015548:	681a      	ldr	r2, [r3, #0]
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	681b      	ldr	r3, [r3, #0]
 801554e:	f022 0201 	bic.w	r2, r2, #1
 8015552:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	681b      	ldr	r3, [r3, #0]
 8015558:	689b      	ldr	r3, [r3, #8]
 801555a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	681b      	ldr	r3, [r3, #0]
 8015562:	683a      	ldr	r2, [r7, #0]
 8015564:	430a      	orrs	r2, r1
 8015566:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8015568:	6878      	ldr	r0, [r7, #4]
 801556a:	f000 f86d 	bl	8015648 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	681b      	ldr	r3, [r3, #0]
 8015572:	68fa      	ldr	r2, [r7, #12]
 8015574:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	2220      	movs	r2, #32
 801557a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	2200      	movs	r2, #0
 8015582:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8015586:	2300      	movs	r3, #0
}
 8015588:	4618      	mov	r0, r3
 801558a:	3710      	adds	r7, #16
 801558c:	46bd      	mov	sp, r7
 801558e:	bd80      	pop	{r7, pc}

08015590 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015590:	b580      	push	{r7, lr}
 8015592:	b08c      	sub	sp, #48	; 0x30
 8015594:	af00      	add	r7, sp, #0
 8015596:	60f8      	str	r0, [r7, #12]
 8015598:	60b9      	str	r1, [r7, #8]
 801559a:	4613      	mov	r3, r2
 801559c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801559e:	68fb      	ldr	r3, [r7, #12]
 80155a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80155a4:	2b20      	cmp	r3, #32
 80155a6:	d14a      	bne.n	801563e <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80155a8:	68bb      	ldr	r3, [r7, #8]
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	d002      	beq.n	80155b4 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80155ae:	88fb      	ldrh	r3, [r7, #6]
 80155b0:	2b00      	cmp	r3, #0
 80155b2:	d101      	bne.n	80155b8 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 80155b4:	2301      	movs	r3, #1
 80155b6:	e043      	b.n	8015640 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
    }

    __HAL_LOCK(huart);
 80155b8:	68fb      	ldr	r3, [r7, #12]
 80155ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80155be:	2b01      	cmp	r3, #1
 80155c0:	d101      	bne.n	80155c6 <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 80155c2:	2302      	movs	r3, #2
 80155c4:	e03c      	b.n	8015640 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 80155c6:	68fb      	ldr	r3, [r7, #12]
 80155c8:	2201      	movs	r2, #1
 80155ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80155ce:	68fb      	ldr	r3, [r7, #12]
 80155d0:	2201      	movs	r2, #1
 80155d2:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80155d4:	88fb      	ldrh	r3, [r7, #6]
 80155d6:	461a      	mov	r2, r3
 80155d8:	68b9      	ldr	r1, [r7, #8]
 80155da:	68f8      	ldr	r0, [r7, #12]
 80155dc:	f7ff fc86 	bl	8014eec <UART_Start_Receive_DMA>
 80155e0:	4603      	mov	r3, r0
 80155e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80155e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80155ea:	2b00      	cmp	r3, #0
 80155ec:	d124      	bne.n	8015638 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80155ee:	68fb      	ldr	r3, [r7, #12]
 80155f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80155f2:	2b01      	cmp	r3, #1
 80155f4:	d11d      	bne.n	8015632 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80155f6:	68fb      	ldr	r3, [r7, #12]
 80155f8:	681b      	ldr	r3, [r3, #0]
 80155fa:	2210      	movs	r2, #16
 80155fc:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80155fe:	68fb      	ldr	r3, [r7, #12]
 8015600:	681b      	ldr	r3, [r3, #0]
 8015602:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015604:	69bb      	ldr	r3, [r7, #24]
 8015606:	e853 3f00 	ldrex	r3, [r3]
 801560a:	617b      	str	r3, [r7, #20]
   return(result);
 801560c:	697b      	ldr	r3, [r7, #20]
 801560e:	f043 0310 	orr.w	r3, r3, #16
 8015612:	62bb      	str	r3, [r7, #40]	; 0x28
 8015614:	68fb      	ldr	r3, [r7, #12]
 8015616:	681b      	ldr	r3, [r3, #0]
 8015618:	461a      	mov	r2, r3
 801561a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801561c:	627b      	str	r3, [r7, #36]	; 0x24
 801561e:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015620:	6a39      	ldr	r1, [r7, #32]
 8015622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015624:	e841 2300 	strex	r3, r2, [r1]
 8015628:	61fb      	str	r3, [r7, #28]
   return(result);
 801562a:	69fb      	ldr	r3, [r7, #28]
 801562c:	2b00      	cmp	r3, #0
 801562e:	d1e6      	bne.n	80155fe <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8015630:	e002      	b.n	8015638 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8015632:	2301      	movs	r3, #1
 8015634:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8015638:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801563c:	e000      	b.n	8015640 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 801563e:	2302      	movs	r3, #2
  }
}
 8015640:	4618      	mov	r0, r3
 8015642:	3730      	adds	r7, #48	; 0x30
 8015644:	46bd      	mov	sp, r7
 8015646:	bd80      	pop	{r7, pc}

08015648 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8015648:	b480      	push	{r7}
 801564a:	b085      	sub	sp, #20
 801564c:	af00      	add	r7, sp, #0
 801564e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8015650:	687b      	ldr	r3, [r7, #4]
 8015652:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015654:	2b00      	cmp	r3, #0
 8015656:	d108      	bne.n	801566a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	2201      	movs	r2, #1
 801565c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	2201      	movs	r2, #1
 8015664:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8015668:	e031      	b.n	80156ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801566a:	2308      	movs	r3, #8
 801566c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801566e:	2308      	movs	r3, #8
 8015670:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	681b      	ldr	r3, [r3, #0]
 8015676:	689b      	ldr	r3, [r3, #8]
 8015678:	0e5b      	lsrs	r3, r3, #25
 801567a:	b2db      	uxtb	r3, r3
 801567c:	f003 0307 	and.w	r3, r3, #7
 8015680:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	681b      	ldr	r3, [r3, #0]
 8015686:	689b      	ldr	r3, [r3, #8]
 8015688:	0f5b      	lsrs	r3, r3, #29
 801568a:	b2db      	uxtb	r3, r3
 801568c:	f003 0307 	and.w	r3, r3, #7
 8015690:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8015692:	7bbb      	ldrb	r3, [r7, #14]
 8015694:	7b3a      	ldrb	r2, [r7, #12]
 8015696:	4911      	ldr	r1, [pc, #68]	; (80156dc <UARTEx_SetNbDataToProcess+0x94>)
 8015698:	5c8a      	ldrb	r2, [r1, r2]
 801569a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801569e:	7b3a      	ldrb	r2, [r7, #12]
 80156a0:	490f      	ldr	r1, [pc, #60]	; (80156e0 <UARTEx_SetNbDataToProcess+0x98>)
 80156a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80156a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80156a8:	b29a      	uxth	r2, r3
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80156b0:	7bfb      	ldrb	r3, [r7, #15]
 80156b2:	7b7a      	ldrb	r2, [r7, #13]
 80156b4:	4909      	ldr	r1, [pc, #36]	; (80156dc <UARTEx_SetNbDataToProcess+0x94>)
 80156b6:	5c8a      	ldrb	r2, [r1, r2]
 80156b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80156bc:	7b7a      	ldrb	r2, [r7, #13]
 80156be:	4908      	ldr	r1, [pc, #32]	; (80156e0 <UARTEx_SetNbDataToProcess+0x98>)
 80156c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80156c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80156c6:	b29a      	uxth	r2, r3
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80156ce:	bf00      	nop
 80156d0:	3714      	adds	r7, #20
 80156d2:	46bd      	mov	sp, r7
 80156d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156d8:	4770      	bx	lr
 80156da:	bf00      	nop
 80156dc:	08025458 	.word	0x08025458
 80156e0:	08025460 	.word	0x08025460

080156e4 <__NVIC_SetPriority>:
{
 80156e4:	b480      	push	{r7}
 80156e6:	b083      	sub	sp, #12
 80156e8:	af00      	add	r7, sp, #0
 80156ea:	4603      	mov	r3, r0
 80156ec:	6039      	str	r1, [r7, #0]
 80156ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80156f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80156f4:	2b00      	cmp	r3, #0
 80156f6:	db0a      	blt.n	801570e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80156f8:	683b      	ldr	r3, [r7, #0]
 80156fa:	b2da      	uxtb	r2, r3
 80156fc:	490c      	ldr	r1, [pc, #48]	; (8015730 <__NVIC_SetPriority+0x4c>)
 80156fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015702:	0112      	lsls	r2, r2, #4
 8015704:	b2d2      	uxtb	r2, r2
 8015706:	440b      	add	r3, r1
 8015708:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801570c:	e00a      	b.n	8015724 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801570e:	683b      	ldr	r3, [r7, #0]
 8015710:	b2da      	uxtb	r2, r3
 8015712:	4908      	ldr	r1, [pc, #32]	; (8015734 <__NVIC_SetPriority+0x50>)
 8015714:	79fb      	ldrb	r3, [r7, #7]
 8015716:	f003 030f 	and.w	r3, r3, #15
 801571a:	3b04      	subs	r3, #4
 801571c:	0112      	lsls	r2, r2, #4
 801571e:	b2d2      	uxtb	r2, r2
 8015720:	440b      	add	r3, r1
 8015722:	761a      	strb	r2, [r3, #24]
}
 8015724:	bf00      	nop
 8015726:	370c      	adds	r7, #12
 8015728:	46bd      	mov	sp, r7
 801572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801572e:	4770      	bx	lr
 8015730:	e000e100 	.word	0xe000e100
 8015734:	e000ed00 	.word	0xe000ed00

08015738 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8015738:	b580      	push	{r7, lr}
 801573a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 801573c:	4b05      	ldr	r3, [pc, #20]	; (8015754 <SysTick_Handler+0x1c>)
 801573e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8015740:	f002 fe98 	bl	8018474 <xTaskGetSchedulerState>
 8015744:	4603      	mov	r3, r0
 8015746:	2b01      	cmp	r3, #1
 8015748:	d001      	beq.n	801574e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801574a:	f003 fe6d 	bl	8019428 <xPortSysTickHandler>
  }
}
 801574e:	bf00      	nop
 8015750:	bd80      	pop	{r7, pc}
 8015752:	bf00      	nop
 8015754:	e000e010 	.word	0xe000e010

08015758 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8015758:	b580      	push	{r7, lr}
 801575a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 801575c:	2100      	movs	r1, #0
 801575e:	f06f 0004 	mvn.w	r0, #4
 8015762:	f7ff ffbf 	bl	80156e4 <__NVIC_SetPriority>
#endif
}
 8015766:	bf00      	nop
 8015768:	bd80      	pop	{r7, pc}
	...

0801576c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 801576c:	b480      	push	{r7}
 801576e:	b083      	sub	sp, #12
 8015770:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015772:	f3ef 8305 	mrs	r3, IPSR
 8015776:	603b      	str	r3, [r7, #0]
  return(result);
 8015778:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801577a:	2b00      	cmp	r3, #0
 801577c:	d003      	beq.n	8015786 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801577e:	f06f 0305 	mvn.w	r3, #5
 8015782:	607b      	str	r3, [r7, #4]
 8015784:	e00c      	b.n	80157a0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8015786:	4b0a      	ldr	r3, [pc, #40]	; (80157b0 <osKernelInitialize+0x44>)
 8015788:	681b      	ldr	r3, [r3, #0]
 801578a:	2b00      	cmp	r3, #0
 801578c:	d105      	bne.n	801579a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801578e:	4b08      	ldr	r3, [pc, #32]	; (80157b0 <osKernelInitialize+0x44>)
 8015790:	2201      	movs	r2, #1
 8015792:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8015794:	2300      	movs	r3, #0
 8015796:	607b      	str	r3, [r7, #4]
 8015798:	e002      	b.n	80157a0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 801579a:	f04f 33ff 	mov.w	r3, #4294967295
 801579e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80157a0:	687b      	ldr	r3, [r7, #4]
}
 80157a2:	4618      	mov	r0, r3
 80157a4:	370c      	adds	r7, #12
 80157a6:	46bd      	mov	sp, r7
 80157a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157ac:	4770      	bx	lr
 80157ae:	bf00      	nop
 80157b0:	200049e8 	.word	0x200049e8

080157b4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80157b4:	b580      	push	{r7, lr}
 80157b6:	b082      	sub	sp, #8
 80157b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80157ba:	f3ef 8305 	mrs	r3, IPSR
 80157be:	603b      	str	r3, [r7, #0]
  return(result);
 80157c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80157c2:	2b00      	cmp	r3, #0
 80157c4:	d003      	beq.n	80157ce <osKernelStart+0x1a>
    stat = osErrorISR;
 80157c6:	f06f 0305 	mvn.w	r3, #5
 80157ca:	607b      	str	r3, [r7, #4]
 80157cc:	e010      	b.n	80157f0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80157ce:	4b0b      	ldr	r3, [pc, #44]	; (80157fc <osKernelStart+0x48>)
 80157d0:	681b      	ldr	r3, [r3, #0]
 80157d2:	2b01      	cmp	r3, #1
 80157d4:	d109      	bne.n	80157ea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80157d6:	f7ff ffbf 	bl	8015758 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80157da:	4b08      	ldr	r3, [pc, #32]	; (80157fc <osKernelStart+0x48>)
 80157dc:	2202      	movs	r2, #2
 80157de:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80157e0:	f002 f952 	bl	8017a88 <vTaskStartScheduler>
      stat = osOK;
 80157e4:	2300      	movs	r3, #0
 80157e6:	607b      	str	r3, [r7, #4]
 80157e8:	e002      	b.n	80157f0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80157ea:	f04f 33ff 	mov.w	r3, #4294967295
 80157ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80157f0:	687b      	ldr	r3, [r7, #4]
}
 80157f2:	4618      	mov	r0, r3
 80157f4:	3708      	adds	r7, #8
 80157f6:	46bd      	mov	sp, r7
 80157f8:	bd80      	pop	{r7, pc}
 80157fa:	bf00      	nop
 80157fc:	200049e8 	.word	0x200049e8

08015800 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8015800:	b580      	push	{r7, lr}
 8015802:	b08e      	sub	sp, #56	; 0x38
 8015804:	af04      	add	r7, sp, #16
 8015806:	60f8      	str	r0, [r7, #12]
 8015808:	60b9      	str	r1, [r7, #8]
 801580a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 801580c:	2300      	movs	r3, #0
 801580e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015810:	f3ef 8305 	mrs	r3, IPSR
 8015814:	617b      	str	r3, [r7, #20]
  return(result);
 8015816:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8015818:	2b00      	cmp	r3, #0
 801581a:	d17e      	bne.n	801591a <osThreadNew+0x11a>
 801581c:	68fb      	ldr	r3, [r7, #12]
 801581e:	2b00      	cmp	r3, #0
 8015820:	d07b      	beq.n	801591a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8015822:	2380      	movs	r3, #128	; 0x80
 8015824:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8015826:	2318      	movs	r3, #24
 8015828:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801582a:	2300      	movs	r3, #0
 801582c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 801582e:	f04f 33ff 	mov.w	r3, #4294967295
 8015832:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	2b00      	cmp	r3, #0
 8015838:	d045      	beq.n	80158c6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	681b      	ldr	r3, [r3, #0]
 801583e:	2b00      	cmp	r3, #0
 8015840:	d002      	beq.n	8015848 <osThreadNew+0x48>
        name = attr->name;
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	681b      	ldr	r3, [r3, #0]
 8015846:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	699b      	ldr	r3, [r3, #24]
 801584c:	2b00      	cmp	r3, #0
 801584e:	d002      	beq.n	8015856 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	699b      	ldr	r3, [r3, #24]
 8015854:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8015856:	69fb      	ldr	r3, [r7, #28]
 8015858:	2b00      	cmp	r3, #0
 801585a:	d008      	beq.n	801586e <osThreadNew+0x6e>
 801585c:	69fb      	ldr	r3, [r7, #28]
 801585e:	2b38      	cmp	r3, #56	; 0x38
 8015860:	d805      	bhi.n	801586e <osThreadNew+0x6e>
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	685b      	ldr	r3, [r3, #4]
 8015866:	f003 0301 	and.w	r3, r3, #1
 801586a:	2b00      	cmp	r3, #0
 801586c:	d001      	beq.n	8015872 <osThreadNew+0x72>
        return (NULL);
 801586e:	2300      	movs	r3, #0
 8015870:	e054      	b.n	801591c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	695b      	ldr	r3, [r3, #20]
 8015876:	2b00      	cmp	r3, #0
 8015878:	d003      	beq.n	8015882 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801587a:	687b      	ldr	r3, [r7, #4]
 801587c:	695b      	ldr	r3, [r3, #20]
 801587e:	089b      	lsrs	r3, r3, #2
 8015880:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	689b      	ldr	r3, [r3, #8]
 8015886:	2b00      	cmp	r3, #0
 8015888:	d00e      	beq.n	80158a8 <osThreadNew+0xa8>
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	68db      	ldr	r3, [r3, #12]
 801588e:	2b6b      	cmp	r3, #107	; 0x6b
 8015890:	d90a      	bls.n	80158a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8015896:	2b00      	cmp	r3, #0
 8015898:	d006      	beq.n	80158a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	695b      	ldr	r3, [r3, #20]
 801589e:	2b00      	cmp	r3, #0
 80158a0:	d002      	beq.n	80158a8 <osThreadNew+0xa8>
        mem = 1;
 80158a2:	2301      	movs	r3, #1
 80158a4:	61bb      	str	r3, [r7, #24]
 80158a6:	e010      	b.n	80158ca <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	689b      	ldr	r3, [r3, #8]
 80158ac:	2b00      	cmp	r3, #0
 80158ae:	d10c      	bne.n	80158ca <osThreadNew+0xca>
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	68db      	ldr	r3, [r3, #12]
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	d108      	bne.n	80158ca <osThreadNew+0xca>
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	691b      	ldr	r3, [r3, #16]
 80158bc:	2b00      	cmp	r3, #0
 80158be:	d104      	bne.n	80158ca <osThreadNew+0xca>
          mem = 0;
 80158c0:	2300      	movs	r3, #0
 80158c2:	61bb      	str	r3, [r7, #24]
 80158c4:	e001      	b.n	80158ca <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80158c6:	2300      	movs	r3, #0
 80158c8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80158ca:	69bb      	ldr	r3, [r7, #24]
 80158cc:	2b01      	cmp	r3, #1
 80158ce:	d110      	bne.n	80158f2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80158d0:	687b      	ldr	r3, [r7, #4]
 80158d2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80158d4:	687a      	ldr	r2, [r7, #4]
 80158d6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80158d8:	9202      	str	r2, [sp, #8]
 80158da:	9301      	str	r3, [sp, #4]
 80158dc:	69fb      	ldr	r3, [r7, #28]
 80158de:	9300      	str	r3, [sp, #0]
 80158e0:	68bb      	ldr	r3, [r7, #8]
 80158e2:	6a3a      	ldr	r2, [r7, #32]
 80158e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80158e6:	68f8      	ldr	r0, [r7, #12]
 80158e8:	f001 fef8 	bl	80176dc <xTaskCreateStatic>
 80158ec:	4603      	mov	r3, r0
 80158ee:	613b      	str	r3, [r7, #16]
 80158f0:	e013      	b.n	801591a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80158f2:	69bb      	ldr	r3, [r7, #24]
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	d110      	bne.n	801591a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80158f8:	6a3b      	ldr	r3, [r7, #32]
 80158fa:	b29a      	uxth	r2, r3
 80158fc:	f107 0310 	add.w	r3, r7, #16
 8015900:	9301      	str	r3, [sp, #4]
 8015902:	69fb      	ldr	r3, [r7, #28]
 8015904:	9300      	str	r3, [sp, #0]
 8015906:	68bb      	ldr	r3, [r7, #8]
 8015908:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801590a:	68f8      	ldr	r0, [r7, #12]
 801590c:	f001 ff43 	bl	8017796 <xTaskCreate>
 8015910:	4603      	mov	r3, r0
 8015912:	2b01      	cmp	r3, #1
 8015914:	d001      	beq.n	801591a <osThreadNew+0x11a>
            hTask = NULL;
 8015916:	2300      	movs	r3, #0
 8015918:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801591a:	693b      	ldr	r3, [r7, #16]
}
 801591c:	4618      	mov	r0, r3
 801591e:	3728      	adds	r7, #40	; 0x28
 8015920:	46bd      	mov	sp, r7
 8015922:	bd80      	pop	{r7, pc}

08015924 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8015924:	b580      	push	{r7, lr}
 8015926:	b084      	sub	sp, #16
 8015928:	af00      	add	r7, sp, #0
 801592a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801592c:	f3ef 8305 	mrs	r3, IPSR
 8015930:	60bb      	str	r3, [r7, #8]
  return(result);
 8015932:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015934:	2b00      	cmp	r3, #0
 8015936:	d003      	beq.n	8015940 <osDelay+0x1c>
    stat = osErrorISR;
 8015938:	f06f 0305 	mvn.w	r3, #5
 801593c:	60fb      	str	r3, [r7, #12]
 801593e:	e007      	b.n	8015950 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8015940:	2300      	movs	r3, #0
 8015942:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	2b00      	cmp	r3, #0
 8015948:	d002      	beq.n	8015950 <osDelay+0x2c>
      vTaskDelay(ticks);
 801594a:	6878      	ldr	r0, [r7, #4]
 801594c:	f002 f868 	bl	8017a20 <vTaskDelay>
    }
  }

  return (stat);
 8015950:	68fb      	ldr	r3, [r7, #12]
}
 8015952:	4618      	mov	r0, r3
 8015954:	3710      	adds	r7, #16
 8015956:	46bd      	mov	sp, r7
 8015958:	bd80      	pop	{r7, pc}

0801595a <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 801595a:	b580      	push	{r7, lr}
 801595c:	b084      	sub	sp, #16
 801595e:	af00      	add	r7, sp, #0
 8015960:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8015962:	6878      	ldr	r0, [r7, #4]
 8015964:	f003 fb64 	bl	8019030 <pvTimerGetTimerID>
 8015968:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 801596a:	68fb      	ldr	r3, [r7, #12]
 801596c:	2b00      	cmp	r3, #0
 801596e:	d005      	beq.n	801597c <TimerCallback+0x22>
    callb->func (callb->arg);
 8015970:	68fb      	ldr	r3, [r7, #12]
 8015972:	681b      	ldr	r3, [r3, #0]
 8015974:	68fa      	ldr	r2, [r7, #12]
 8015976:	6852      	ldr	r2, [r2, #4]
 8015978:	4610      	mov	r0, r2
 801597a:	4798      	blx	r3
  }
}
 801597c:	bf00      	nop
 801597e:	3710      	adds	r7, #16
 8015980:	46bd      	mov	sp, r7
 8015982:	bd80      	pop	{r7, pc}

08015984 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8015984:	b580      	push	{r7, lr}
 8015986:	b08c      	sub	sp, #48	; 0x30
 8015988:	af02      	add	r7, sp, #8
 801598a:	60f8      	str	r0, [r7, #12]
 801598c:	607a      	str	r2, [r7, #4]
 801598e:	603b      	str	r3, [r7, #0]
 8015990:	460b      	mov	r3, r1
 8015992:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8015994:	2300      	movs	r3, #0
 8015996:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015998:	f3ef 8305 	mrs	r3, IPSR
 801599c:	613b      	str	r3, [r7, #16]
  return(result);
 801599e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	d163      	bne.n	8015a6c <osTimerNew+0xe8>
 80159a4:	68fb      	ldr	r3, [r7, #12]
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d060      	beq.n	8015a6c <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 80159aa:	2008      	movs	r0, #8
 80159ac:	f003 fdcc 	bl	8019548 <pvPortMalloc>
 80159b0:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 80159b2:	697b      	ldr	r3, [r7, #20]
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	d059      	beq.n	8015a6c <osTimerNew+0xe8>
      callb->func = func;
 80159b8:	697b      	ldr	r3, [r7, #20]
 80159ba:	68fa      	ldr	r2, [r7, #12]
 80159bc:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 80159be:	697b      	ldr	r3, [r7, #20]
 80159c0:	687a      	ldr	r2, [r7, #4]
 80159c2:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 80159c4:	7afb      	ldrb	r3, [r7, #11]
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	d102      	bne.n	80159d0 <osTimerNew+0x4c>
        reload = pdFALSE;
 80159ca:	2300      	movs	r3, #0
 80159cc:	61fb      	str	r3, [r7, #28]
 80159ce:	e001      	b.n	80159d4 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 80159d0:	2301      	movs	r3, #1
 80159d2:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 80159d4:	f04f 33ff 	mov.w	r3, #4294967295
 80159d8:	61bb      	str	r3, [r7, #24]
      name = NULL;
 80159da:	2300      	movs	r3, #0
 80159dc:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 80159de:	683b      	ldr	r3, [r7, #0]
 80159e0:	2b00      	cmp	r3, #0
 80159e2:	d01c      	beq.n	8015a1e <osTimerNew+0x9a>
        if (attr->name != NULL) {
 80159e4:	683b      	ldr	r3, [r7, #0]
 80159e6:	681b      	ldr	r3, [r3, #0]
 80159e8:	2b00      	cmp	r3, #0
 80159ea:	d002      	beq.n	80159f2 <osTimerNew+0x6e>
          name = attr->name;
 80159ec:	683b      	ldr	r3, [r7, #0]
 80159ee:	681b      	ldr	r3, [r3, #0]
 80159f0:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 80159f2:	683b      	ldr	r3, [r7, #0]
 80159f4:	689b      	ldr	r3, [r3, #8]
 80159f6:	2b00      	cmp	r3, #0
 80159f8:	d006      	beq.n	8015a08 <osTimerNew+0x84>
 80159fa:	683b      	ldr	r3, [r7, #0]
 80159fc:	68db      	ldr	r3, [r3, #12]
 80159fe:	2b2b      	cmp	r3, #43	; 0x2b
 8015a00:	d902      	bls.n	8015a08 <osTimerNew+0x84>
          mem = 1;
 8015a02:	2301      	movs	r3, #1
 8015a04:	61bb      	str	r3, [r7, #24]
 8015a06:	e00c      	b.n	8015a22 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8015a08:	683b      	ldr	r3, [r7, #0]
 8015a0a:	689b      	ldr	r3, [r3, #8]
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	d108      	bne.n	8015a22 <osTimerNew+0x9e>
 8015a10:	683b      	ldr	r3, [r7, #0]
 8015a12:	68db      	ldr	r3, [r3, #12]
 8015a14:	2b00      	cmp	r3, #0
 8015a16:	d104      	bne.n	8015a22 <osTimerNew+0x9e>
            mem = 0;
 8015a18:	2300      	movs	r3, #0
 8015a1a:	61bb      	str	r3, [r7, #24]
 8015a1c:	e001      	b.n	8015a22 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8015a1e:	2300      	movs	r3, #0
 8015a20:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8015a22:	69bb      	ldr	r3, [r7, #24]
 8015a24:	2b01      	cmp	r3, #1
 8015a26:	d10c      	bne.n	8015a42 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8015a28:	683b      	ldr	r3, [r7, #0]
 8015a2a:	689b      	ldr	r3, [r3, #8]
 8015a2c:	9301      	str	r3, [sp, #4]
 8015a2e:	4b12      	ldr	r3, [pc, #72]	; (8015a78 <osTimerNew+0xf4>)
 8015a30:	9300      	str	r3, [sp, #0]
 8015a32:	697b      	ldr	r3, [r7, #20]
 8015a34:	69fa      	ldr	r2, [r7, #28]
 8015a36:	2101      	movs	r1, #1
 8015a38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015a3a:	f002 ff7a 	bl	8018932 <xTimerCreateStatic>
 8015a3e:	6238      	str	r0, [r7, #32]
 8015a40:	e00b      	b.n	8015a5a <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8015a42:	69bb      	ldr	r3, [r7, #24]
 8015a44:	2b00      	cmp	r3, #0
 8015a46:	d108      	bne.n	8015a5a <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8015a48:	4b0b      	ldr	r3, [pc, #44]	; (8015a78 <osTimerNew+0xf4>)
 8015a4a:	9300      	str	r3, [sp, #0]
 8015a4c:	697b      	ldr	r3, [r7, #20]
 8015a4e:	69fa      	ldr	r2, [r7, #28]
 8015a50:	2101      	movs	r1, #1
 8015a52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015a54:	f002 ff4c 	bl	80188f0 <xTimerCreate>
 8015a58:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8015a5a:	6a3b      	ldr	r3, [r7, #32]
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	d105      	bne.n	8015a6c <osTimerNew+0xe8>
 8015a60:	697b      	ldr	r3, [r7, #20]
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	d002      	beq.n	8015a6c <osTimerNew+0xe8>
        vPortFree (callb);
 8015a66:	6978      	ldr	r0, [r7, #20]
 8015a68:	f003 fe3a 	bl	80196e0 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8015a6c:	6a3b      	ldr	r3, [r7, #32]
}
 8015a6e:	4618      	mov	r0, r3
 8015a70:	3728      	adds	r7, #40	; 0x28
 8015a72:	46bd      	mov	sp, r7
 8015a74:	bd80      	pop	{r7, pc}
 8015a76:	bf00      	nop
 8015a78:	0801595b 	.word	0x0801595b

08015a7c <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8015a7c:	b580      	push	{r7, lr}
 8015a7e:	b086      	sub	sp, #24
 8015a80:	af00      	add	r7, sp, #0
 8015a82:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8015a84:	2300      	movs	r3, #0
 8015a86:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015a88:	f3ef 8305 	mrs	r3, IPSR
 8015a8c:	60fb      	str	r3, [r7, #12]
  return(result);
 8015a8e:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	d12d      	bne.n	8015af0 <osEventFlagsNew+0x74>
    mem = -1;
 8015a94:	f04f 33ff 	mov.w	r3, #4294967295
 8015a98:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	d015      	beq.n	8015acc <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	689b      	ldr	r3, [r3, #8]
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	d006      	beq.n	8015ab6 <osEventFlagsNew+0x3a>
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	68db      	ldr	r3, [r3, #12]
 8015aac:	2b1f      	cmp	r3, #31
 8015aae:	d902      	bls.n	8015ab6 <osEventFlagsNew+0x3a>
        mem = 1;
 8015ab0:	2301      	movs	r3, #1
 8015ab2:	613b      	str	r3, [r7, #16]
 8015ab4:	e00c      	b.n	8015ad0 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	689b      	ldr	r3, [r3, #8]
 8015aba:	2b00      	cmp	r3, #0
 8015abc:	d108      	bne.n	8015ad0 <osEventFlagsNew+0x54>
 8015abe:	687b      	ldr	r3, [r7, #4]
 8015ac0:	68db      	ldr	r3, [r3, #12]
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	d104      	bne.n	8015ad0 <osEventFlagsNew+0x54>
          mem = 0;
 8015ac6:	2300      	movs	r3, #0
 8015ac8:	613b      	str	r3, [r7, #16]
 8015aca:	e001      	b.n	8015ad0 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8015acc:	2300      	movs	r3, #0
 8015ace:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8015ad0:	693b      	ldr	r3, [r7, #16]
 8015ad2:	2b01      	cmp	r3, #1
 8015ad4:	d106      	bne.n	8015ae4 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8015ad6:	687b      	ldr	r3, [r7, #4]
 8015ad8:	689b      	ldr	r3, [r3, #8]
 8015ada:	4618      	mov	r0, r3
 8015adc:	f000 fb5e 	bl	801619c <xEventGroupCreateStatic>
 8015ae0:	6178      	str	r0, [r7, #20]
 8015ae2:	e005      	b.n	8015af0 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8015ae4:	693b      	ldr	r3, [r7, #16]
 8015ae6:	2b00      	cmp	r3, #0
 8015ae8:	d102      	bne.n	8015af0 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8015aea:	f000 fb8e 	bl	801620a <xEventGroupCreate>
 8015aee:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8015af0:	697b      	ldr	r3, [r7, #20]
}
 8015af2:	4618      	mov	r0, r3
 8015af4:	3718      	adds	r7, #24
 8015af6:	46bd      	mov	sp, r7
 8015af8:	bd80      	pop	{r7, pc}
	...

08015afc <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8015afc:	b580      	push	{r7, lr}
 8015afe:	b086      	sub	sp, #24
 8015b00:	af00      	add	r7, sp, #0
 8015b02:	6078      	str	r0, [r7, #4]
 8015b04:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8015b0a:	693b      	ldr	r3, [r7, #16]
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	d004      	beq.n	8015b1a <osEventFlagsSet+0x1e>
 8015b10:	683b      	ldr	r3, [r7, #0]
 8015b12:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8015b16:	2b00      	cmp	r3, #0
 8015b18:	d003      	beq.n	8015b22 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8015b1a:	f06f 0303 	mvn.w	r3, #3
 8015b1e:	617b      	str	r3, [r7, #20]
 8015b20:	e028      	b.n	8015b74 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015b22:	f3ef 8305 	mrs	r3, IPSR
 8015b26:	60fb      	str	r3, [r7, #12]
  return(result);
 8015b28:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	d01d      	beq.n	8015b6a <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8015b2e:	2300      	movs	r3, #0
 8015b30:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8015b32:	f107 0308 	add.w	r3, r7, #8
 8015b36:	461a      	mov	r2, r3
 8015b38:	6839      	ldr	r1, [r7, #0]
 8015b3a:	6938      	ldr	r0, [r7, #16]
 8015b3c:	f000 fd86 	bl	801664c <xEventGroupSetBitsFromISR>
 8015b40:	4603      	mov	r3, r0
 8015b42:	2b00      	cmp	r3, #0
 8015b44:	d103      	bne.n	8015b4e <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8015b46:	f06f 0302 	mvn.w	r3, #2
 8015b4a:	617b      	str	r3, [r7, #20]
 8015b4c:	e012      	b.n	8015b74 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8015b4e:	683b      	ldr	r3, [r7, #0]
 8015b50:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8015b52:	68bb      	ldr	r3, [r7, #8]
 8015b54:	2b00      	cmp	r3, #0
 8015b56:	d00d      	beq.n	8015b74 <osEventFlagsSet+0x78>
 8015b58:	4b09      	ldr	r3, [pc, #36]	; (8015b80 <osEventFlagsSet+0x84>)
 8015b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015b5e:	601a      	str	r2, [r3, #0]
 8015b60:	f3bf 8f4f 	dsb	sy
 8015b64:	f3bf 8f6f 	isb	sy
 8015b68:	e004      	b.n	8015b74 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8015b6a:	6839      	ldr	r1, [r7, #0]
 8015b6c:	6938      	ldr	r0, [r7, #16]
 8015b6e:	f000 fca5 	bl	80164bc <xEventGroupSetBits>
 8015b72:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8015b74:	697b      	ldr	r3, [r7, #20]
}
 8015b76:	4618      	mov	r0, r3
 8015b78:	3718      	adds	r7, #24
 8015b7a:	46bd      	mov	sp, r7
 8015b7c:	bd80      	pop	{r7, pc}
 8015b7e:	bf00      	nop
 8015b80:	e000ed04 	.word	0xe000ed04

08015b84 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8015b84:	b580      	push	{r7, lr}
 8015b86:	b086      	sub	sp, #24
 8015b88:	af00      	add	r7, sp, #0
 8015b8a:	6078      	str	r0, [r7, #4]
 8015b8c:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8015b92:	693b      	ldr	r3, [r7, #16]
 8015b94:	2b00      	cmp	r3, #0
 8015b96:	d004      	beq.n	8015ba2 <osEventFlagsClear+0x1e>
 8015b98:	683b      	ldr	r3, [r7, #0]
 8015b9a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	d003      	beq.n	8015baa <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 8015ba2:	f06f 0303 	mvn.w	r3, #3
 8015ba6:	617b      	str	r3, [r7, #20]
 8015ba8:	e019      	b.n	8015bde <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015baa:	f3ef 8305 	mrs	r3, IPSR
 8015bae:	60fb      	str	r3, [r7, #12]
  return(result);
 8015bb0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8015bb2:	2b00      	cmp	r3, #0
 8015bb4:	d00e      	beq.n	8015bd4 <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8015bb6:	6938      	ldr	r0, [r7, #16]
 8015bb8:	f000 fc5c 	bl	8016474 <xEventGroupGetBitsFromISR>
 8015bbc:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8015bbe:	6839      	ldr	r1, [r7, #0]
 8015bc0:	6938      	ldr	r0, [r7, #16]
 8015bc2:	f000 fc43 	bl	801644c <xEventGroupClearBitsFromISR>
 8015bc6:	4603      	mov	r3, r0
 8015bc8:	2b00      	cmp	r3, #0
 8015bca:	d108      	bne.n	8015bde <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 8015bcc:	f06f 0302 	mvn.w	r3, #2
 8015bd0:	617b      	str	r3, [r7, #20]
 8015bd2:	e004      	b.n	8015bde <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8015bd4:	6839      	ldr	r1, [r7, #0]
 8015bd6:	6938      	ldr	r0, [r7, #16]
 8015bd8:	f000 fc00 	bl	80163dc <xEventGroupClearBits>
 8015bdc:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8015bde:	697b      	ldr	r3, [r7, #20]
}
 8015be0:	4618      	mov	r0, r3
 8015be2:	3718      	adds	r7, #24
 8015be4:	46bd      	mov	sp, r7
 8015be6:	bd80      	pop	{r7, pc}

08015be8 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8015be8:	b580      	push	{r7, lr}
 8015bea:	b08c      	sub	sp, #48	; 0x30
 8015bec:	af02      	add	r7, sp, #8
 8015bee:	60f8      	str	r0, [r7, #12]
 8015bf0:	60b9      	str	r1, [r7, #8]
 8015bf2:	607a      	str	r2, [r7, #4]
 8015bf4:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8015bf6:	68fb      	ldr	r3, [r7, #12]
 8015bf8:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8015bfa:	69bb      	ldr	r3, [r7, #24]
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	d004      	beq.n	8015c0a <osEventFlagsWait+0x22>
 8015c00:	68bb      	ldr	r3, [r7, #8]
 8015c02:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8015c06:	2b00      	cmp	r3, #0
 8015c08:	d003      	beq.n	8015c12 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8015c0a:	f06f 0303 	mvn.w	r3, #3
 8015c0e:	61fb      	str	r3, [r7, #28]
 8015c10:	e04b      	b.n	8015caa <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015c12:	f3ef 8305 	mrs	r3, IPSR
 8015c16:	617b      	str	r3, [r7, #20]
  return(result);
 8015c18:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d003      	beq.n	8015c26 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8015c1e:	f06f 0305 	mvn.w	r3, #5
 8015c22:	61fb      	str	r3, [r7, #28]
 8015c24:	e041      	b.n	8015caa <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	f003 0301 	and.w	r3, r3, #1
 8015c2c:	2b00      	cmp	r3, #0
 8015c2e:	d002      	beq.n	8015c36 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8015c30:	2301      	movs	r3, #1
 8015c32:	627b      	str	r3, [r7, #36]	; 0x24
 8015c34:	e001      	b.n	8015c3a <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8015c36:	2300      	movs	r3, #0
 8015c38:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8015c3a:	687b      	ldr	r3, [r7, #4]
 8015c3c:	f003 0302 	and.w	r3, r3, #2
 8015c40:	2b00      	cmp	r3, #0
 8015c42:	d002      	beq.n	8015c4a <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8015c44:	2300      	movs	r3, #0
 8015c46:	623b      	str	r3, [r7, #32]
 8015c48:	e001      	b.n	8015c4e <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8015c4a:	2301      	movs	r3, #1
 8015c4c:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8015c4e:	683b      	ldr	r3, [r7, #0]
 8015c50:	9300      	str	r3, [sp, #0]
 8015c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c54:	6a3a      	ldr	r2, [r7, #32]
 8015c56:	68b9      	ldr	r1, [r7, #8]
 8015c58:	69b8      	ldr	r0, [r7, #24]
 8015c5a:	f000 faf1 	bl	8016240 <xEventGroupWaitBits>
 8015c5e:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8015c60:	687b      	ldr	r3, [r7, #4]
 8015c62:	f003 0301 	and.w	r3, r3, #1
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	d010      	beq.n	8015c8c <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8015c6a:	68ba      	ldr	r2, [r7, #8]
 8015c6c:	69fb      	ldr	r3, [r7, #28]
 8015c6e:	4013      	ands	r3, r2
 8015c70:	68ba      	ldr	r2, [r7, #8]
 8015c72:	429a      	cmp	r2, r3
 8015c74:	d019      	beq.n	8015caa <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8015c76:	683b      	ldr	r3, [r7, #0]
 8015c78:	2b00      	cmp	r3, #0
 8015c7a:	d003      	beq.n	8015c84 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8015c7c:	f06f 0301 	mvn.w	r3, #1
 8015c80:	61fb      	str	r3, [r7, #28]
 8015c82:	e012      	b.n	8015caa <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8015c84:	f06f 0302 	mvn.w	r3, #2
 8015c88:	61fb      	str	r3, [r7, #28]
 8015c8a:	e00e      	b.n	8015caa <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8015c8c:	68ba      	ldr	r2, [r7, #8]
 8015c8e:	69fb      	ldr	r3, [r7, #28]
 8015c90:	4013      	ands	r3, r2
 8015c92:	2b00      	cmp	r3, #0
 8015c94:	d109      	bne.n	8015caa <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8015c96:	683b      	ldr	r3, [r7, #0]
 8015c98:	2b00      	cmp	r3, #0
 8015c9a:	d003      	beq.n	8015ca4 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8015c9c:	f06f 0301 	mvn.w	r3, #1
 8015ca0:	61fb      	str	r3, [r7, #28]
 8015ca2:	e002      	b.n	8015caa <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8015ca4:	f06f 0302 	mvn.w	r3, #2
 8015ca8:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8015caa:	69fb      	ldr	r3, [r7, #28]
}
 8015cac:	4618      	mov	r0, r3
 8015cae:	3728      	adds	r7, #40	; 0x28
 8015cb0:	46bd      	mov	sp, r7
 8015cb2:	bd80      	pop	{r7, pc}

08015cb4 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8015cb4:	b580      	push	{r7, lr}
 8015cb6:	b088      	sub	sp, #32
 8015cb8:	af00      	add	r7, sp, #0
 8015cba:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8015cbc:	2300      	movs	r3, #0
 8015cbe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015cc0:	f3ef 8305 	mrs	r3, IPSR
 8015cc4:	60bb      	str	r3, [r7, #8]
  return(result);
 8015cc6:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8015cc8:	2b00      	cmp	r3, #0
 8015cca:	d174      	bne.n	8015db6 <osMutexNew+0x102>
    if (attr != NULL) {
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	d003      	beq.n	8015cda <osMutexNew+0x26>
      type = attr->attr_bits;
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	685b      	ldr	r3, [r3, #4]
 8015cd6:	61bb      	str	r3, [r7, #24]
 8015cd8:	e001      	b.n	8015cde <osMutexNew+0x2a>
    } else {
      type = 0U;
 8015cda:	2300      	movs	r3, #0
 8015cdc:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8015cde:	69bb      	ldr	r3, [r7, #24]
 8015ce0:	f003 0301 	and.w	r3, r3, #1
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d002      	beq.n	8015cee <osMutexNew+0x3a>
      rmtx = 1U;
 8015ce8:	2301      	movs	r3, #1
 8015cea:	617b      	str	r3, [r7, #20]
 8015cec:	e001      	b.n	8015cf2 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8015cee:	2300      	movs	r3, #0
 8015cf0:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8015cf2:	69bb      	ldr	r3, [r7, #24]
 8015cf4:	f003 0308 	and.w	r3, r3, #8
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	d15c      	bne.n	8015db6 <osMutexNew+0x102>
      mem = -1;
 8015cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8015d00:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8015d02:	687b      	ldr	r3, [r7, #4]
 8015d04:	2b00      	cmp	r3, #0
 8015d06:	d015      	beq.n	8015d34 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	689b      	ldr	r3, [r3, #8]
 8015d0c:	2b00      	cmp	r3, #0
 8015d0e:	d006      	beq.n	8015d1e <osMutexNew+0x6a>
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	68db      	ldr	r3, [r3, #12]
 8015d14:	2b4f      	cmp	r3, #79	; 0x4f
 8015d16:	d902      	bls.n	8015d1e <osMutexNew+0x6a>
          mem = 1;
 8015d18:	2301      	movs	r3, #1
 8015d1a:	613b      	str	r3, [r7, #16]
 8015d1c:	e00c      	b.n	8015d38 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	689b      	ldr	r3, [r3, #8]
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	d108      	bne.n	8015d38 <osMutexNew+0x84>
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	68db      	ldr	r3, [r3, #12]
 8015d2a:	2b00      	cmp	r3, #0
 8015d2c:	d104      	bne.n	8015d38 <osMutexNew+0x84>
            mem = 0;
 8015d2e:	2300      	movs	r3, #0
 8015d30:	613b      	str	r3, [r7, #16]
 8015d32:	e001      	b.n	8015d38 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8015d34:	2300      	movs	r3, #0
 8015d36:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8015d38:	693b      	ldr	r3, [r7, #16]
 8015d3a:	2b01      	cmp	r3, #1
 8015d3c:	d112      	bne.n	8015d64 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8015d3e:	697b      	ldr	r3, [r7, #20]
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	d007      	beq.n	8015d54 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	689b      	ldr	r3, [r3, #8]
 8015d48:	4619      	mov	r1, r3
 8015d4a:	2004      	movs	r0, #4
 8015d4c:	f000 feb5 	bl	8016aba <xQueueCreateMutexStatic>
 8015d50:	61f8      	str	r0, [r7, #28]
 8015d52:	e016      	b.n	8015d82 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	689b      	ldr	r3, [r3, #8]
 8015d58:	4619      	mov	r1, r3
 8015d5a:	2001      	movs	r0, #1
 8015d5c:	f000 fead 	bl	8016aba <xQueueCreateMutexStatic>
 8015d60:	61f8      	str	r0, [r7, #28]
 8015d62:	e00e      	b.n	8015d82 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8015d64:	693b      	ldr	r3, [r7, #16]
 8015d66:	2b00      	cmp	r3, #0
 8015d68:	d10b      	bne.n	8015d82 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8015d6a:	697b      	ldr	r3, [r7, #20]
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	d004      	beq.n	8015d7a <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8015d70:	2004      	movs	r0, #4
 8015d72:	f000 fe8a 	bl	8016a8a <xQueueCreateMutex>
 8015d76:	61f8      	str	r0, [r7, #28]
 8015d78:	e003      	b.n	8015d82 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8015d7a:	2001      	movs	r0, #1
 8015d7c:	f000 fe85 	bl	8016a8a <xQueueCreateMutex>
 8015d80:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8015d82:	69fb      	ldr	r3, [r7, #28]
 8015d84:	2b00      	cmp	r3, #0
 8015d86:	d00c      	beq.n	8015da2 <osMutexNew+0xee>
        if (attr != NULL) {
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	d003      	beq.n	8015d96 <osMutexNew+0xe2>
          name = attr->name;
 8015d8e:	687b      	ldr	r3, [r7, #4]
 8015d90:	681b      	ldr	r3, [r3, #0]
 8015d92:	60fb      	str	r3, [r7, #12]
 8015d94:	e001      	b.n	8015d9a <osMutexNew+0xe6>
        } else {
          name = NULL;
 8015d96:	2300      	movs	r3, #0
 8015d98:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8015d9a:	68f9      	ldr	r1, [r7, #12]
 8015d9c:	69f8      	ldr	r0, [r7, #28]
 8015d9e:	f001 fc3f 	bl	8017620 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8015da2:	69fb      	ldr	r3, [r7, #28]
 8015da4:	2b00      	cmp	r3, #0
 8015da6:	d006      	beq.n	8015db6 <osMutexNew+0x102>
 8015da8:	697b      	ldr	r3, [r7, #20]
 8015daa:	2b00      	cmp	r3, #0
 8015dac:	d003      	beq.n	8015db6 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8015dae:	69fb      	ldr	r3, [r7, #28]
 8015db0:	f043 0301 	orr.w	r3, r3, #1
 8015db4:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8015db6:	69fb      	ldr	r3, [r7, #28]
}
 8015db8:	4618      	mov	r0, r3
 8015dba:	3720      	adds	r7, #32
 8015dbc:	46bd      	mov	sp, r7
 8015dbe:	bd80      	pop	{r7, pc}

08015dc0 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8015dc0:	b580      	push	{r7, lr}
 8015dc2:	b086      	sub	sp, #24
 8015dc4:	af00      	add	r7, sp, #0
 8015dc6:	6078      	str	r0, [r7, #4]
 8015dc8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	f023 0301 	bic.w	r3, r3, #1
 8015dd0:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	f003 0301 	and.w	r3, r3, #1
 8015dd8:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8015dda:	2300      	movs	r3, #0
 8015ddc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015dde:	f3ef 8305 	mrs	r3, IPSR
 8015de2:	60bb      	str	r3, [r7, #8]
  return(result);
 8015de4:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	d003      	beq.n	8015df2 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8015dea:	f06f 0305 	mvn.w	r3, #5
 8015dee:	617b      	str	r3, [r7, #20]
 8015df0:	e02c      	b.n	8015e4c <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8015df2:	693b      	ldr	r3, [r7, #16]
 8015df4:	2b00      	cmp	r3, #0
 8015df6:	d103      	bne.n	8015e00 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8015df8:	f06f 0303 	mvn.w	r3, #3
 8015dfc:	617b      	str	r3, [r7, #20]
 8015dfe:	e025      	b.n	8015e4c <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8015e00:	68fb      	ldr	r3, [r7, #12]
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	d011      	beq.n	8015e2a <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8015e06:	6839      	ldr	r1, [r7, #0]
 8015e08:	6938      	ldr	r0, [r7, #16]
 8015e0a:	f000 fea5 	bl	8016b58 <xQueueTakeMutexRecursive>
 8015e0e:	4603      	mov	r3, r0
 8015e10:	2b01      	cmp	r3, #1
 8015e12:	d01b      	beq.n	8015e4c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8015e14:	683b      	ldr	r3, [r7, #0]
 8015e16:	2b00      	cmp	r3, #0
 8015e18:	d003      	beq.n	8015e22 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8015e1a:	f06f 0301 	mvn.w	r3, #1
 8015e1e:	617b      	str	r3, [r7, #20]
 8015e20:	e014      	b.n	8015e4c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8015e22:	f06f 0302 	mvn.w	r3, #2
 8015e26:	617b      	str	r3, [r7, #20]
 8015e28:	e010      	b.n	8015e4c <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8015e2a:	6839      	ldr	r1, [r7, #0]
 8015e2c:	6938      	ldr	r0, [r7, #16]
 8015e2e:	f001 f943 	bl	80170b8 <xQueueSemaphoreTake>
 8015e32:	4603      	mov	r3, r0
 8015e34:	2b01      	cmp	r3, #1
 8015e36:	d009      	beq.n	8015e4c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8015e38:	683b      	ldr	r3, [r7, #0]
 8015e3a:	2b00      	cmp	r3, #0
 8015e3c:	d003      	beq.n	8015e46 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8015e3e:	f06f 0301 	mvn.w	r3, #1
 8015e42:	617b      	str	r3, [r7, #20]
 8015e44:	e002      	b.n	8015e4c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8015e46:	f06f 0302 	mvn.w	r3, #2
 8015e4a:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8015e4c:	697b      	ldr	r3, [r7, #20]
}
 8015e4e:	4618      	mov	r0, r3
 8015e50:	3718      	adds	r7, #24
 8015e52:	46bd      	mov	sp, r7
 8015e54:	bd80      	pop	{r7, pc}

08015e56 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8015e56:	b580      	push	{r7, lr}
 8015e58:	b086      	sub	sp, #24
 8015e5a:	af00      	add	r7, sp, #0
 8015e5c:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	f023 0301 	bic.w	r3, r3, #1
 8015e64:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	f003 0301 	and.w	r3, r3, #1
 8015e6c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8015e6e:	2300      	movs	r3, #0
 8015e70:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015e72:	f3ef 8305 	mrs	r3, IPSR
 8015e76:	60bb      	str	r3, [r7, #8]
  return(result);
 8015e78:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8015e7a:	2b00      	cmp	r3, #0
 8015e7c:	d003      	beq.n	8015e86 <osMutexRelease+0x30>
    stat = osErrorISR;
 8015e7e:	f06f 0305 	mvn.w	r3, #5
 8015e82:	617b      	str	r3, [r7, #20]
 8015e84:	e01f      	b.n	8015ec6 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8015e86:	693b      	ldr	r3, [r7, #16]
 8015e88:	2b00      	cmp	r3, #0
 8015e8a:	d103      	bne.n	8015e94 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8015e8c:	f06f 0303 	mvn.w	r3, #3
 8015e90:	617b      	str	r3, [r7, #20]
 8015e92:	e018      	b.n	8015ec6 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8015e94:	68fb      	ldr	r3, [r7, #12]
 8015e96:	2b00      	cmp	r3, #0
 8015e98:	d009      	beq.n	8015eae <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8015e9a:	6938      	ldr	r0, [r7, #16]
 8015e9c:	f000 fe28 	bl	8016af0 <xQueueGiveMutexRecursive>
 8015ea0:	4603      	mov	r3, r0
 8015ea2:	2b01      	cmp	r3, #1
 8015ea4:	d00f      	beq.n	8015ec6 <osMutexRelease+0x70>
        stat = osErrorResource;
 8015ea6:	f06f 0302 	mvn.w	r3, #2
 8015eaa:	617b      	str	r3, [r7, #20]
 8015eac:	e00b      	b.n	8015ec6 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8015eae:	2300      	movs	r3, #0
 8015eb0:	2200      	movs	r2, #0
 8015eb2:	2100      	movs	r1, #0
 8015eb4:	6938      	ldr	r0, [r7, #16]
 8015eb6:	f000 fe85 	bl	8016bc4 <xQueueGenericSend>
 8015eba:	4603      	mov	r3, r0
 8015ebc:	2b01      	cmp	r3, #1
 8015ebe:	d002      	beq.n	8015ec6 <osMutexRelease+0x70>
        stat = osErrorResource;
 8015ec0:	f06f 0302 	mvn.w	r3, #2
 8015ec4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8015ec6:	697b      	ldr	r3, [r7, #20]
}
 8015ec8:	4618      	mov	r0, r3
 8015eca:	3718      	adds	r7, #24
 8015ecc:	46bd      	mov	sp, r7
 8015ece:	bd80      	pop	{r7, pc}

08015ed0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8015ed0:	b580      	push	{r7, lr}
 8015ed2:	b08a      	sub	sp, #40	; 0x28
 8015ed4:	af02      	add	r7, sp, #8
 8015ed6:	60f8      	str	r0, [r7, #12]
 8015ed8:	60b9      	str	r1, [r7, #8]
 8015eda:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8015edc:	2300      	movs	r3, #0
 8015ede:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015ee0:	f3ef 8305 	mrs	r3, IPSR
 8015ee4:	613b      	str	r3, [r7, #16]
  return(result);
 8015ee6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8015ee8:	2b00      	cmp	r3, #0
 8015eea:	d15f      	bne.n	8015fac <osMessageQueueNew+0xdc>
 8015eec:	68fb      	ldr	r3, [r7, #12]
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	d05c      	beq.n	8015fac <osMessageQueueNew+0xdc>
 8015ef2:	68bb      	ldr	r3, [r7, #8]
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	d059      	beq.n	8015fac <osMessageQueueNew+0xdc>
    mem = -1;
 8015ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8015efc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	d029      	beq.n	8015f58 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	689b      	ldr	r3, [r3, #8]
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	d012      	beq.n	8015f32 <osMessageQueueNew+0x62>
 8015f0c:	687b      	ldr	r3, [r7, #4]
 8015f0e:	68db      	ldr	r3, [r3, #12]
 8015f10:	2b4f      	cmp	r3, #79	; 0x4f
 8015f12:	d90e      	bls.n	8015f32 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8015f14:	687b      	ldr	r3, [r7, #4]
 8015f16:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	d00a      	beq.n	8015f32 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	695a      	ldr	r2, [r3, #20]
 8015f20:	68fb      	ldr	r3, [r7, #12]
 8015f22:	68b9      	ldr	r1, [r7, #8]
 8015f24:	fb01 f303 	mul.w	r3, r1, r3
 8015f28:	429a      	cmp	r2, r3
 8015f2a:	d302      	bcc.n	8015f32 <osMessageQueueNew+0x62>
        mem = 1;
 8015f2c:	2301      	movs	r3, #1
 8015f2e:	61bb      	str	r3, [r7, #24]
 8015f30:	e014      	b.n	8015f5c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	689b      	ldr	r3, [r3, #8]
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	d110      	bne.n	8015f5c <osMessageQueueNew+0x8c>
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	68db      	ldr	r3, [r3, #12]
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	d10c      	bne.n	8015f5c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8015f42:	687b      	ldr	r3, [r7, #4]
 8015f44:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8015f46:	2b00      	cmp	r3, #0
 8015f48:	d108      	bne.n	8015f5c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	695b      	ldr	r3, [r3, #20]
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	d104      	bne.n	8015f5c <osMessageQueueNew+0x8c>
          mem = 0;
 8015f52:	2300      	movs	r3, #0
 8015f54:	61bb      	str	r3, [r7, #24]
 8015f56:	e001      	b.n	8015f5c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8015f58:	2300      	movs	r3, #0
 8015f5a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8015f5c:	69bb      	ldr	r3, [r7, #24]
 8015f5e:	2b01      	cmp	r3, #1
 8015f60:	d10b      	bne.n	8015f7a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	691a      	ldr	r2, [r3, #16]
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	689b      	ldr	r3, [r3, #8]
 8015f6a:	2100      	movs	r1, #0
 8015f6c:	9100      	str	r1, [sp, #0]
 8015f6e:	68b9      	ldr	r1, [r7, #8]
 8015f70:	68f8      	ldr	r0, [r7, #12]
 8015f72:	f000 fc9b 	bl	80168ac <xQueueGenericCreateStatic>
 8015f76:	61f8      	str	r0, [r7, #28]
 8015f78:	e008      	b.n	8015f8c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8015f7a:	69bb      	ldr	r3, [r7, #24]
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	d105      	bne.n	8015f8c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8015f80:	2200      	movs	r2, #0
 8015f82:	68b9      	ldr	r1, [r7, #8]
 8015f84:	68f8      	ldr	r0, [r7, #12]
 8015f86:	f000 fd09 	bl	801699c <xQueueGenericCreate>
 8015f8a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8015f8c:	69fb      	ldr	r3, [r7, #28]
 8015f8e:	2b00      	cmp	r3, #0
 8015f90:	d00c      	beq.n	8015fac <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	2b00      	cmp	r3, #0
 8015f96:	d003      	beq.n	8015fa0 <osMessageQueueNew+0xd0>
        name = attr->name;
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	681b      	ldr	r3, [r3, #0]
 8015f9c:	617b      	str	r3, [r7, #20]
 8015f9e:	e001      	b.n	8015fa4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8015fa0:	2300      	movs	r3, #0
 8015fa2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8015fa4:	6979      	ldr	r1, [r7, #20]
 8015fa6:	69f8      	ldr	r0, [r7, #28]
 8015fa8:	f001 fb3a 	bl	8017620 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8015fac:	69fb      	ldr	r3, [r7, #28]
}
 8015fae:	4618      	mov	r0, r3
 8015fb0:	3720      	adds	r7, #32
 8015fb2:	46bd      	mov	sp, r7
 8015fb4:	bd80      	pop	{r7, pc}
	...

08015fb8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8015fb8:	b580      	push	{r7, lr}
 8015fba:	b088      	sub	sp, #32
 8015fbc:	af00      	add	r7, sp, #0
 8015fbe:	60f8      	str	r0, [r7, #12]
 8015fc0:	60b9      	str	r1, [r7, #8]
 8015fc2:	603b      	str	r3, [r7, #0]
 8015fc4:	4613      	mov	r3, r2
 8015fc6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8015fc8:	68fb      	ldr	r3, [r7, #12]
 8015fca:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8015fcc:	2300      	movs	r3, #0
 8015fce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015fd0:	f3ef 8305 	mrs	r3, IPSR
 8015fd4:	617b      	str	r3, [r7, #20]
  return(result);
 8015fd6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8015fd8:	2b00      	cmp	r3, #0
 8015fda:	d028      	beq.n	801602e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8015fdc:	69bb      	ldr	r3, [r7, #24]
 8015fde:	2b00      	cmp	r3, #0
 8015fe0:	d005      	beq.n	8015fee <osMessageQueuePut+0x36>
 8015fe2:	68bb      	ldr	r3, [r7, #8]
 8015fe4:	2b00      	cmp	r3, #0
 8015fe6:	d002      	beq.n	8015fee <osMessageQueuePut+0x36>
 8015fe8:	683b      	ldr	r3, [r7, #0]
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	d003      	beq.n	8015ff6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8015fee:	f06f 0303 	mvn.w	r3, #3
 8015ff2:	61fb      	str	r3, [r7, #28]
 8015ff4:	e038      	b.n	8016068 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8015ff6:	2300      	movs	r3, #0
 8015ff8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8015ffa:	f107 0210 	add.w	r2, r7, #16
 8015ffe:	2300      	movs	r3, #0
 8016000:	68b9      	ldr	r1, [r7, #8]
 8016002:	69b8      	ldr	r0, [r7, #24]
 8016004:	f000 fedc 	bl	8016dc0 <xQueueGenericSendFromISR>
 8016008:	4603      	mov	r3, r0
 801600a:	2b01      	cmp	r3, #1
 801600c:	d003      	beq.n	8016016 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 801600e:	f06f 0302 	mvn.w	r3, #2
 8016012:	61fb      	str	r3, [r7, #28]
 8016014:	e028      	b.n	8016068 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8016016:	693b      	ldr	r3, [r7, #16]
 8016018:	2b00      	cmp	r3, #0
 801601a:	d025      	beq.n	8016068 <osMessageQueuePut+0xb0>
 801601c:	4b15      	ldr	r3, [pc, #84]	; (8016074 <osMessageQueuePut+0xbc>)
 801601e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016022:	601a      	str	r2, [r3, #0]
 8016024:	f3bf 8f4f 	dsb	sy
 8016028:	f3bf 8f6f 	isb	sy
 801602c:	e01c      	b.n	8016068 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801602e:	69bb      	ldr	r3, [r7, #24]
 8016030:	2b00      	cmp	r3, #0
 8016032:	d002      	beq.n	801603a <osMessageQueuePut+0x82>
 8016034:	68bb      	ldr	r3, [r7, #8]
 8016036:	2b00      	cmp	r3, #0
 8016038:	d103      	bne.n	8016042 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 801603a:	f06f 0303 	mvn.w	r3, #3
 801603e:	61fb      	str	r3, [r7, #28]
 8016040:	e012      	b.n	8016068 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8016042:	2300      	movs	r3, #0
 8016044:	683a      	ldr	r2, [r7, #0]
 8016046:	68b9      	ldr	r1, [r7, #8]
 8016048:	69b8      	ldr	r0, [r7, #24]
 801604a:	f000 fdbb 	bl	8016bc4 <xQueueGenericSend>
 801604e:	4603      	mov	r3, r0
 8016050:	2b01      	cmp	r3, #1
 8016052:	d009      	beq.n	8016068 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8016054:	683b      	ldr	r3, [r7, #0]
 8016056:	2b00      	cmp	r3, #0
 8016058:	d003      	beq.n	8016062 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 801605a:	f06f 0301 	mvn.w	r3, #1
 801605e:	61fb      	str	r3, [r7, #28]
 8016060:	e002      	b.n	8016068 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8016062:	f06f 0302 	mvn.w	r3, #2
 8016066:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8016068:	69fb      	ldr	r3, [r7, #28]
}
 801606a:	4618      	mov	r0, r3
 801606c:	3720      	adds	r7, #32
 801606e:	46bd      	mov	sp, r7
 8016070:	bd80      	pop	{r7, pc}
 8016072:	bf00      	nop
 8016074:	e000ed04 	.word	0xe000ed04

08016078 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8016078:	b580      	push	{r7, lr}
 801607a:	b088      	sub	sp, #32
 801607c:	af00      	add	r7, sp, #0
 801607e:	60f8      	str	r0, [r7, #12]
 8016080:	60b9      	str	r1, [r7, #8]
 8016082:	607a      	str	r2, [r7, #4]
 8016084:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8016086:	68fb      	ldr	r3, [r7, #12]
 8016088:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801608a:	2300      	movs	r3, #0
 801608c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801608e:	f3ef 8305 	mrs	r3, IPSR
 8016092:	617b      	str	r3, [r7, #20]
  return(result);
 8016094:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8016096:	2b00      	cmp	r3, #0
 8016098:	d028      	beq.n	80160ec <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801609a:	69bb      	ldr	r3, [r7, #24]
 801609c:	2b00      	cmp	r3, #0
 801609e:	d005      	beq.n	80160ac <osMessageQueueGet+0x34>
 80160a0:	68bb      	ldr	r3, [r7, #8]
 80160a2:	2b00      	cmp	r3, #0
 80160a4:	d002      	beq.n	80160ac <osMessageQueueGet+0x34>
 80160a6:	683b      	ldr	r3, [r7, #0]
 80160a8:	2b00      	cmp	r3, #0
 80160aa:	d003      	beq.n	80160b4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80160ac:	f06f 0303 	mvn.w	r3, #3
 80160b0:	61fb      	str	r3, [r7, #28]
 80160b2:	e037      	b.n	8016124 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80160b4:	2300      	movs	r3, #0
 80160b6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80160b8:	f107 0310 	add.w	r3, r7, #16
 80160bc:	461a      	mov	r2, r3
 80160be:	68b9      	ldr	r1, [r7, #8]
 80160c0:	69b8      	ldr	r0, [r7, #24]
 80160c2:	f001 f905 	bl	80172d0 <xQueueReceiveFromISR>
 80160c6:	4603      	mov	r3, r0
 80160c8:	2b01      	cmp	r3, #1
 80160ca:	d003      	beq.n	80160d4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80160cc:	f06f 0302 	mvn.w	r3, #2
 80160d0:	61fb      	str	r3, [r7, #28]
 80160d2:	e027      	b.n	8016124 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80160d4:	693b      	ldr	r3, [r7, #16]
 80160d6:	2b00      	cmp	r3, #0
 80160d8:	d024      	beq.n	8016124 <osMessageQueueGet+0xac>
 80160da:	4b15      	ldr	r3, [pc, #84]	; (8016130 <osMessageQueueGet+0xb8>)
 80160dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80160e0:	601a      	str	r2, [r3, #0]
 80160e2:	f3bf 8f4f 	dsb	sy
 80160e6:	f3bf 8f6f 	isb	sy
 80160ea:	e01b      	b.n	8016124 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80160ec:	69bb      	ldr	r3, [r7, #24]
 80160ee:	2b00      	cmp	r3, #0
 80160f0:	d002      	beq.n	80160f8 <osMessageQueueGet+0x80>
 80160f2:	68bb      	ldr	r3, [r7, #8]
 80160f4:	2b00      	cmp	r3, #0
 80160f6:	d103      	bne.n	8016100 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80160f8:	f06f 0303 	mvn.w	r3, #3
 80160fc:	61fb      	str	r3, [r7, #28]
 80160fe:	e011      	b.n	8016124 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8016100:	683a      	ldr	r2, [r7, #0]
 8016102:	68b9      	ldr	r1, [r7, #8]
 8016104:	69b8      	ldr	r0, [r7, #24]
 8016106:	f000 fef7 	bl	8016ef8 <xQueueReceive>
 801610a:	4603      	mov	r3, r0
 801610c:	2b01      	cmp	r3, #1
 801610e:	d009      	beq.n	8016124 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8016110:	683b      	ldr	r3, [r7, #0]
 8016112:	2b00      	cmp	r3, #0
 8016114:	d003      	beq.n	801611e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8016116:	f06f 0301 	mvn.w	r3, #1
 801611a:	61fb      	str	r3, [r7, #28]
 801611c:	e002      	b.n	8016124 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 801611e:	f06f 0302 	mvn.w	r3, #2
 8016122:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8016124:	69fb      	ldr	r3, [r7, #28]
}
 8016126:	4618      	mov	r0, r3
 8016128:	3720      	adds	r7, #32
 801612a:	46bd      	mov	sp, r7
 801612c:	bd80      	pop	{r7, pc}
 801612e:	bf00      	nop
 8016130:	e000ed04 	.word	0xe000ed04

08016134 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8016134:	b480      	push	{r7}
 8016136:	b085      	sub	sp, #20
 8016138:	af00      	add	r7, sp, #0
 801613a:	60f8      	str	r0, [r7, #12]
 801613c:	60b9      	str	r1, [r7, #8]
 801613e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8016140:	68fb      	ldr	r3, [r7, #12]
 8016142:	4a07      	ldr	r2, [pc, #28]	; (8016160 <vApplicationGetIdleTaskMemory+0x2c>)
 8016144:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8016146:	68bb      	ldr	r3, [r7, #8]
 8016148:	4a06      	ldr	r2, [pc, #24]	; (8016164 <vApplicationGetIdleTaskMemory+0x30>)
 801614a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	2280      	movs	r2, #128	; 0x80
 8016150:	601a      	str	r2, [r3, #0]
}
 8016152:	bf00      	nop
 8016154:	3714      	adds	r7, #20
 8016156:	46bd      	mov	sp, r7
 8016158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801615c:	4770      	bx	lr
 801615e:	bf00      	nop
 8016160:	200049ec 	.word	0x200049ec
 8016164:	20004a58 	.word	0x20004a58

08016168 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8016168:	b480      	push	{r7}
 801616a:	b085      	sub	sp, #20
 801616c:	af00      	add	r7, sp, #0
 801616e:	60f8      	str	r0, [r7, #12]
 8016170:	60b9      	str	r1, [r7, #8]
 8016172:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8016174:	68fb      	ldr	r3, [r7, #12]
 8016176:	4a07      	ldr	r2, [pc, #28]	; (8016194 <vApplicationGetTimerTaskMemory+0x2c>)
 8016178:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801617a:	68bb      	ldr	r3, [r7, #8]
 801617c:	4a06      	ldr	r2, [pc, #24]	; (8016198 <vApplicationGetTimerTaskMemory+0x30>)
 801617e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8016186:	601a      	str	r2, [r3, #0]
}
 8016188:	bf00      	nop
 801618a:	3714      	adds	r7, #20
 801618c:	46bd      	mov	sp, r7
 801618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016192:	4770      	bx	lr
 8016194:	20004c58 	.word	0x20004c58
 8016198:	20004cc4 	.word	0x20004cc4

0801619c <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 801619c:	b580      	push	{r7, lr}
 801619e:	b086      	sub	sp, #24
 80161a0:	af00      	add	r7, sp, #0
 80161a2:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80161a4:	687b      	ldr	r3, [r7, #4]
 80161a6:	2b00      	cmp	r3, #0
 80161a8:	d10a      	bne.n	80161c0 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80161aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161ae:	f383 8811 	msr	BASEPRI, r3
 80161b2:	f3bf 8f6f 	isb	sy
 80161b6:	f3bf 8f4f 	dsb	sy
 80161ba:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80161bc:	bf00      	nop
 80161be:	e7fe      	b.n	80161be <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80161c0:	2320      	movs	r3, #32
 80161c2:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80161c4:	68bb      	ldr	r3, [r7, #8]
 80161c6:	2b20      	cmp	r3, #32
 80161c8:	d00a      	beq.n	80161e0 <xEventGroupCreateStatic+0x44>
	__asm volatile
 80161ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161ce:	f383 8811 	msr	BASEPRI, r3
 80161d2:	f3bf 8f6f 	isb	sy
 80161d6:	f3bf 8f4f 	dsb	sy
 80161da:	60fb      	str	r3, [r7, #12]
}
 80161dc:	bf00      	nop
 80161de:	e7fe      	b.n	80161de <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80161e0:	687b      	ldr	r3, [r7, #4]
 80161e2:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 80161e4:	697b      	ldr	r3, [r7, #20]
 80161e6:	2b00      	cmp	r3, #0
 80161e8:	d00a      	beq.n	8016200 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 80161ea:	697b      	ldr	r3, [r7, #20]
 80161ec:	2200      	movs	r2, #0
 80161ee:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80161f0:	697b      	ldr	r3, [r7, #20]
 80161f2:	3304      	adds	r3, #4
 80161f4:	4618      	mov	r0, r3
 80161f6:	f000 fa3d 	bl	8016674 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80161fa:	697b      	ldr	r3, [r7, #20]
 80161fc:	2201      	movs	r2, #1
 80161fe:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8016200:	697b      	ldr	r3, [r7, #20]
	}
 8016202:	4618      	mov	r0, r3
 8016204:	3718      	adds	r7, #24
 8016206:	46bd      	mov	sp, r7
 8016208:	bd80      	pop	{r7, pc}

0801620a <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 801620a:	b580      	push	{r7, lr}
 801620c:	b082      	sub	sp, #8
 801620e:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8016210:	2020      	movs	r0, #32
 8016212:	f003 f999 	bl	8019548 <pvPortMalloc>
 8016216:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	2b00      	cmp	r3, #0
 801621c:	d00a      	beq.n	8016234 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	2200      	movs	r2, #0
 8016222:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	3304      	adds	r3, #4
 8016228:	4618      	mov	r0, r3
 801622a:	f000 fa23 	bl	8016674 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 801622e:	687b      	ldr	r3, [r7, #4]
 8016230:	2200      	movs	r2, #0
 8016232:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8016234:	687b      	ldr	r3, [r7, #4]
	}
 8016236:	4618      	mov	r0, r3
 8016238:	3708      	adds	r7, #8
 801623a:	46bd      	mov	sp, r7
 801623c:	bd80      	pop	{r7, pc}
	...

08016240 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8016240:	b580      	push	{r7, lr}
 8016242:	b090      	sub	sp, #64	; 0x40
 8016244:	af00      	add	r7, sp, #0
 8016246:	60f8      	str	r0, [r7, #12]
 8016248:	60b9      	str	r1, [r7, #8]
 801624a:	607a      	str	r2, [r7, #4]
 801624c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 801624e:	68fb      	ldr	r3, [r7, #12]
 8016250:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8016252:	2300      	movs	r3, #0
 8016254:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8016256:	2300      	movs	r3, #0
 8016258:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 801625a:	68fb      	ldr	r3, [r7, #12]
 801625c:	2b00      	cmp	r3, #0
 801625e:	d10a      	bne.n	8016276 <xEventGroupWaitBits+0x36>
	__asm volatile
 8016260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016264:	f383 8811 	msr	BASEPRI, r3
 8016268:	f3bf 8f6f 	isb	sy
 801626c:	f3bf 8f4f 	dsb	sy
 8016270:	623b      	str	r3, [r7, #32]
}
 8016272:	bf00      	nop
 8016274:	e7fe      	b.n	8016274 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8016276:	68bb      	ldr	r3, [r7, #8]
 8016278:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801627c:	2b00      	cmp	r3, #0
 801627e:	d00a      	beq.n	8016296 <xEventGroupWaitBits+0x56>
	__asm volatile
 8016280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016284:	f383 8811 	msr	BASEPRI, r3
 8016288:	f3bf 8f6f 	isb	sy
 801628c:	f3bf 8f4f 	dsb	sy
 8016290:	61fb      	str	r3, [r7, #28]
}
 8016292:	bf00      	nop
 8016294:	e7fe      	b.n	8016294 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8016296:	68bb      	ldr	r3, [r7, #8]
 8016298:	2b00      	cmp	r3, #0
 801629a:	d10a      	bne.n	80162b2 <xEventGroupWaitBits+0x72>
	__asm volatile
 801629c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162a0:	f383 8811 	msr	BASEPRI, r3
 80162a4:	f3bf 8f6f 	isb	sy
 80162a8:	f3bf 8f4f 	dsb	sy
 80162ac:	61bb      	str	r3, [r7, #24]
}
 80162ae:	bf00      	nop
 80162b0:	e7fe      	b.n	80162b0 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80162b2:	f002 f8df 	bl	8018474 <xTaskGetSchedulerState>
 80162b6:	4603      	mov	r3, r0
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	d102      	bne.n	80162c2 <xEventGroupWaitBits+0x82>
 80162bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80162be:	2b00      	cmp	r3, #0
 80162c0:	d101      	bne.n	80162c6 <xEventGroupWaitBits+0x86>
 80162c2:	2301      	movs	r3, #1
 80162c4:	e000      	b.n	80162c8 <xEventGroupWaitBits+0x88>
 80162c6:	2300      	movs	r3, #0
 80162c8:	2b00      	cmp	r3, #0
 80162ca:	d10a      	bne.n	80162e2 <xEventGroupWaitBits+0xa2>
	__asm volatile
 80162cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162d0:	f383 8811 	msr	BASEPRI, r3
 80162d4:	f3bf 8f6f 	isb	sy
 80162d8:	f3bf 8f4f 	dsb	sy
 80162dc:	617b      	str	r3, [r7, #20]
}
 80162de:	bf00      	nop
 80162e0:	e7fe      	b.n	80162e0 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 80162e2:	f001 fc37 	bl	8017b54 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80162e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80162e8:	681b      	ldr	r3, [r3, #0]
 80162ea:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80162ec:	683a      	ldr	r2, [r7, #0]
 80162ee:	68b9      	ldr	r1, [r7, #8]
 80162f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80162f2:	f000 f988 	bl	8016606 <prvTestWaitCondition>
 80162f6:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80162f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	d00e      	beq.n	801631c <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80162fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016300:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8016302:	2300      	movs	r3, #0
 8016304:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	2b00      	cmp	r3, #0
 801630a:	d028      	beq.n	801635e <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 801630c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801630e:	681a      	ldr	r2, [r3, #0]
 8016310:	68bb      	ldr	r3, [r7, #8]
 8016312:	43db      	mvns	r3, r3
 8016314:	401a      	ands	r2, r3
 8016316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016318:	601a      	str	r2, [r3, #0]
 801631a:	e020      	b.n	801635e <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 801631c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801631e:	2b00      	cmp	r3, #0
 8016320:	d104      	bne.n	801632c <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8016322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016324:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8016326:	2301      	movs	r3, #1
 8016328:	633b      	str	r3, [r7, #48]	; 0x30
 801632a:	e018      	b.n	801635e <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 801632c:	687b      	ldr	r3, [r7, #4]
 801632e:	2b00      	cmp	r3, #0
 8016330:	d003      	beq.n	801633a <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8016332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016334:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8016338:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 801633a:	683b      	ldr	r3, [r7, #0]
 801633c:	2b00      	cmp	r3, #0
 801633e:	d003      	beq.n	8016348 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8016340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016342:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8016346:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8016348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801634a:	1d18      	adds	r0, r3, #4
 801634c:	68ba      	ldr	r2, [r7, #8]
 801634e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016350:	4313      	orrs	r3, r2
 8016352:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016354:	4619      	mov	r1, r3
 8016356:	f001 fdf5 	bl	8017f44 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 801635a:	2300      	movs	r3, #0
 801635c:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 801635e:	f001 fc07 	bl	8017b70 <xTaskResumeAll>
 8016362:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8016364:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016366:	2b00      	cmp	r3, #0
 8016368:	d031      	beq.n	80163ce <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 801636a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801636c:	2b00      	cmp	r3, #0
 801636e:	d107      	bne.n	8016380 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8016370:	4b19      	ldr	r3, [pc, #100]	; (80163d8 <xEventGroupWaitBits+0x198>)
 8016372:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016376:	601a      	str	r2, [r3, #0]
 8016378:	f3bf 8f4f 	dsb	sy
 801637c:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8016380:	f002 f9ee 	bl	8018760 <uxTaskResetEventItemValue>
 8016384:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8016386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801638c:	2b00      	cmp	r3, #0
 801638e:	d11a      	bne.n	80163c6 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8016390:	f002 ffb8 	bl	8019304 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8016394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016396:	681b      	ldr	r3, [r3, #0]
 8016398:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 801639a:	683a      	ldr	r2, [r7, #0]
 801639c:	68b9      	ldr	r1, [r7, #8]
 801639e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80163a0:	f000 f931 	bl	8016606 <prvTestWaitCondition>
 80163a4:	4603      	mov	r3, r0
 80163a6:	2b00      	cmp	r3, #0
 80163a8:	d009      	beq.n	80163be <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	2b00      	cmp	r3, #0
 80163ae:	d006      	beq.n	80163be <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80163b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80163b2:	681a      	ldr	r2, [r3, #0]
 80163b4:	68bb      	ldr	r3, [r7, #8]
 80163b6:	43db      	mvns	r3, r3
 80163b8:	401a      	ands	r2, r3
 80163ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80163bc:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80163be:	2301      	movs	r3, #1
 80163c0:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80163c2:	f002 ffcf 	bl	8019364 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80163c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80163c8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80163cc:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80163ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80163d0:	4618      	mov	r0, r3
 80163d2:	3740      	adds	r7, #64	; 0x40
 80163d4:	46bd      	mov	sp, r7
 80163d6:	bd80      	pop	{r7, pc}
 80163d8:	e000ed04 	.word	0xe000ed04

080163dc <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 80163dc:	b580      	push	{r7, lr}
 80163de:	b086      	sub	sp, #24
 80163e0:	af00      	add	r7, sp, #0
 80163e2:	6078      	str	r0, [r7, #4]
 80163e4:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80163ea:	687b      	ldr	r3, [r7, #4]
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	d10a      	bne.n	8016406 <xEventGroupClearBits+0x2a>
	__asm volatile
 80163f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163f4:	f383 8811 	msr	BASEPRI, r3
 80163f8:	f3bf 8f6f 	isb	sy
 80163fc:	f3bf 8f4f 	dsb	sy
 8016400:	60fb      	str	r3, [r7, #12]
}
 8016402:	bf00      	nop
 8016404:	e7fe      	b.n	8016404 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8016406:	683b      	ldr	r3, [r7, #0]
 8016408:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801640c:	2b00      	cmp	r3, #0
 801640e:	d00a      	beq.n	8016426 <xEventGroupClearBits+0x4a>
	__asm volatile
 8016410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016414:	f383 8811 	msr	BASEPRI, r3
 8016418:	f3bf 8f6f 	isb	sy
 801641c:	f3bf 8f4f 	dsb	sy
 8016420:	60bb      	str	r3, [r7, #8]
}
 8016422:	bf00      	nop
 8016424:	e7fe      	b.n	8016424 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8016426:	f002 ff6d 	bl	8019304 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 801642a:	697b      	ldr	r3, [r7, #20]
 801642c:	681b      	ldr	r3, [r3, #0]
 801642e:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8016430:	697b      	ldr	r3, [r7, #20]
 8016432:	681a      	ldr	r2, [r3, #0]
 8016434:	683b      	ldr	r3, [r7, #0]
 8016436:	43db      	mvns	r3, r3
 8016438:	401a      	ands	r2, r3
 801643a:	697b      	ldr	r3, [r7, #20]
 801643c:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 801643e:	f002 ff91 	bl	8019364 <vPortExitCritical>

	return uxReturn;
 8016442:	693b      	ldr	r3, [r7, #16]
}
 8016444:	4618      	mov	r0, r3
 8016446:	3718      	adds	r7, #24
 8016448:	46bd      	mov	sp, r7
 801644a:	bd80      	pop	{r7, pc}

0801644c <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 801644c:	b580      	push	{r7, lr}
 801644e:	b084      	sub	sp, #16
 8016450:	af00      	add	r7, sp, #0
 8016452:	6078      	str	r0, [r7, #4]
 8016454:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8016456:	2300      	movs	r3, #0
 8016458:	683a      	ldr	r2, [r7, #0]
 801645a:	6879      	ldr	r1, [r7, #4]
 801645c:	4804      	ldr	r0, [pc, #16]	; (8016470 <xEventGroupClearBitsFromISR+0x24>)
 801645e:	f002 fe07 	bl	8019070 <xTimerPendFunctionCallFromISR>
 8016462:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8016464:	68fb      	ldr	r3, [r7, #12]
	}
 8016466:	4618      	mov	r0, r3
 8016468:	3710      	adds	r7, #16
 801646a:	46bd      	mov	sp, r7
 801646c:	bd80      	pop	{r7, pc}
 801646e:	bf00      	nop
 8016470:	080165ed 	.word	0x080165ed

08016474 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8016474:	b480      	push	{r7}
 8016476:	b089      	sub	sp, #36	; 0x24
 8016478:	af00      	add	r7, sp, #0
 801647a:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8016480:	f3ef 8211 	mrs	r2, BASEPRI
 8016484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016488:	f383 8811 	msr	BASEPRI, r3
 801648c:	f3bf 8f6f 	isb	sy
 8016490:	f3bf 8f4f 	dsb	sy
 8016494:	60fa      	str	r2, [r7, #12]
 8016496:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8016498:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801649a:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 801649c:	69fb      	ldr	r3, [r7, #28]
 801649e:	681b      	ldr	r3, [r3, #0]
 80164a0:	617b      	str	r3, [r7, #20]
 80164a2:	69bb      	ldr	r3, [r7, #24]
 80164a4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80164a6:	693b      	ldr	r3, [r7, #16]
 80164a8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80164ac:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 80164ae:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 80164b0:	4618      	mov	r0, r3
 80164b2:	3724      	adds	r7, #36	; 0x24
 80164b4:	46bd      	mov	sp, r7
 80164b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164ba:	4770      	bx	lr

080164bc <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80164bc:	b580      	push	{r7, lr}
 80164be:	b08e      	sub	sp, #56	; 0x38
 80164c0:	af00      	add	r7, sp, #0
 80164c2:	6078      	str	r0, [r7, #4]
 80164c4:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80164c6:	2300      	movs	r3, #0
 80164c8:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80164ce:	2300      	movs	r3, #0
 80164d0:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80164d2:	687b      	ldr	r3, [r7, #4]
 80164d4:	2b00      	cmp	r3, #0
 80164d6:	d10a      	bne.n	80164ee <xEventGroupSetBits+0x32>
	__asm volatile
 80164d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164dc:	f383 8811 	msr	BASEPRI, r3
 80164e0:	f3bf 8f6f 	isb	sy
 80164e4:	f3bf 8f4f 	dsb	sy
 80164e8:	613b      	str	r3, [r7, #16]
}
 80164ea:	bf00      	nop
 80164ec:	e7fe      	b.n	80164ec <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80164ee:	683b      	ldr	r3, [r7, #0]
 80164f0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	d00a      	beq.n	801650e <xEventGroupSetBits+0x52>
	__asm volatile
 80164f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164fc:	f383 8811 	msr	BASEPRI, r3
 8016500:	f3bf 8f6f 	isb	sy
 8016504:	f3bf 8f4f 	dsb	sy
 8016508:	60fb      	str	r3, [r7, #12]
}
 801650a:	bf00      	nop
 801650c:	e7fe      	b.n	801650c <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 801650e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016510:	3304      	adds	r3, #4
 8016512:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016516:	3308      	adds	r3, #8
 8016518:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 801651a:	f001 fb1b 	bl	8017b54 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 801651e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016520:	68db      	ldr	r3, [r3, #12]
 8016522:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8016524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016526:	681a      	ldr	r2, [r3, #0]
 8016528:	683b      	ldr	r3, [r7, #0]
 801652a:	431a      	orrs	r2, r3
 801652c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801652e:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8016530:	e03c      	b.n	80165ac <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8016532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016534:	685b      	ldr	r3, [r3, #4]
 8016536:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8016538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801653a:	681b      	ldr	r3, [r3, #0]
 801653c:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 801653e:	2300      	movs	r3, #0
 8016540:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8016542:	69bb      	ldr	r3, [r7, #24]
 8016544:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8016548:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 801654a:	69bb      	ldr	r3, [r7, #24]
 801654c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8016550:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8016552:	697b      	ldr	r3, [r7, #20]
 8016554:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8016558:	2b00      	cmp	r3, #0
 801655a:	d108      	bne.n	801656e <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 801655c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801655e:	681a      	ldr	r2, [r3, #0]
 8016560:	69bb      	ldr	r3, [r7, #24]
 8016562:	4013      	ands	r3, r2
 8016564:	2b00      	cmp	r3, #0
 8016566:	d00b      	beq.n	8016580 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8016568:	2301      	movs	r3, #1
 801656a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801656c:	e008      	b.n	8016580 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 801656e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016570:	681a      	ldr	r2, [r3, #0]
 8016572:	69bb      	ldr	r3, [r7, #24]
 8016574:	4013      	ands	r3, r2
 8016576:	69ba      	ldr	r2, [r7, #24]
 8016578:	429a      	cmp	r2, r3
 801657a:	d101      	bne.n	8016580 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 801657c:	2301      	movs	r3, #1
 801657e:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8016580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016582:	2b00      	cmp	r3, #0
 8016584:	d010      	beq.n	80165a8 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8016586:	697b      	ldr	r3, [r7, #20]
 8016588:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801658c:	2b00      	cmp	r3, #0
 801658e:	d003      	beq.n	8016598 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8016590:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016592:	69bb      	ldr	r3, [r7, #24]
 8016594:	4313      	orrs	r3, r2
 8016596:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8016598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801659a:	681b      	ldr	r3, [r3, #0]
 801659c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80165a0:	4619      	mov	r1, r3
 80165a2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80165a4:	f001 fd9a 	bl	80180dc <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80165a8:	69fb      	ldr	r3, [r7, #28]
 80165aa:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80165ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80165ae:	6a3b      	ldr	r3, [r7, #32]
 80165b0:	429a      	cmp	r2, r3
 80165b2:	d1be      	bne.n	8016532 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80165b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165b6:	681a      	ldr	r2, [r3, #0]
 80165b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165ba:	43db      	mvns	r3, r3
 80165bc:	401a      	ands	r2, r3
 80165be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165c0:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80165c2:	f001 fad5 	bl	8017b70 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80165c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165c8:	681b      	ldr	r3, [r3, #0]
}
 80165ca:	4618      	mov	r0, r3
 80165cc:	3738      	adds	r7, #56	; 0x38
 80165ce:	46bd      	mov	sp, r7
 80165d0:	bd80      	pop	{r7, pc}

080165d2 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80165d2:	b580      	push	{r7, lr}
 80165d4:	b082      	sub	sp, #8
 80165d6:	af00      	add	r7, sp, #0
 80165d8:	6078      	str	r0, [r7, #4]
 80165da:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80165dc:	6839      	ldr	r1, [r7, #0]
 80165de:	6878      	ldr	r0, [r7, #4]
 80165e0:	f7ff ff6c 	bl	80164bc <xEventGroupSetBits>
}
 80165e4:	bf00      	nop
 80165e6:	3708      	adds	r7, #8
 80165e8:	46bd      	mov	sp, r7
 80165ea:	bd80      	pop	{r7, pc}

080165ec <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 80165ec:	b580      	push	{r7, lr}
 80165ee:	b082      	sub	sp, #8
 80165f0:	af00      	add	r7, sp, #0
 80165f2:	6078      	str	r0, [r7, #4]
 80165f4:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80165f6:	6839      	ldr	r1, [r7, #0]
 80165f8:	6878      	ldr	r0, [r7, #4]
 80165fa:	f7ff feef 	bl	80163dc <xEventGroupClearBits>
}
 80165fe:	bf00      	nop
 8016600:	3708      	adds	r7, #8
 8016602:	46bd      	mov	sp, r7
 8016604:	bd80      	pop	{r7, pc}

08016606 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8016606:	b480      	push	{r7}
 8016608:	b087      	sub	sp, #28
 801660a:	af00      	add	r7, sp, #0
 801660c:	60f8      	str	r0, [r7, #12]
 801660e:	60b9      	str	r1, [r7, #8]
 8016610:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8016612:	2300      	movs	r3, #0
 8016614:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8016616:	687b      	ldr	r3, [r7, #4]
 8016618:	2b00      	cmp	r3, #0
 801661a:	d107      	bne.n	801662c <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 801661c:	68fa      	ldr	r2, [r7, #12]
 801661e:	68bb      	ldr	r3, [r7, #8]
 8016620:	4013      	ands	r3, r2
 8016622:	2b00      	cmp	r3, #0
 8016624:	d00a      	beq.n	801663c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8016626:	2301      	movs	r3, #1
 8016628:	617b      	str	r3, [r7, #20]
 801662a:	e007      	b.n	801663c <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 801662c:	68fa      	ldr	r2, [r7, #12]
 801662e:	68bb      	ldr	r3, [r7, #8]
 8016630:	4013      	ands	r3, r2
 8016632:	68ba      	ldr	r2, [r7, #8]
 8016634:	429a      	cmp	r2, r3
 8016636:	d101      	bne.n	801663c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8016638:	2301      	movs	r3, #1
 801663a:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 801663c:	697b      	ldr	r3, [r7, #20]
}
 801663e:	4618      	mov	r0, r3
 8016640:	371c      	adds	r7, #28
 8016642:	46bd      	mov	sp, r7
 8016644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016648:	4770      	bx	lr
	...

0801664c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801664c:	b580      	push	{r7, lr}
 801664e:	b086      	sub	sp, #24
 8016650:	af00      	add	r7, sp, #0
 8016652:	60f8      	str	r0, [r7, #12]
 8016654:	60b9      	str	r1, [r7, #8]
 8016656:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	68ba      	ldr	r2, [r7, #8]
 801665c:	68f9      	ldr	r1, [r7, #12]
 801665e:	4804      	ldr	r0, [pc, #16]	; (8016670 <xEventGroupSetBitsFromISR+0x24>)
 8016660:	f002 fd06 	bl	8019070 <xTimerPendFunctionCallFromISR>
 8016664:	6178      	str	r0, [r7, #20]

		return xReturn;
 8016666:	697b      	ldr	r3, [r7, #20]
	}
 8016668:	4618      	mov	r0, r3
 801666a:	3718      	adds	r7, #24
 801666c:	46bd      	mov	sp, r7
 801666e:	bd80      	pop	{r7, pc}
 8016670:	080165d3 	.word	0x080165d3

08016674 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8016674:	b480      	push	{r7}
 8016676:	b083      	sub	sp, #12
 8016678:	af00      	add	r7, sp, #0
 801667a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801667c:	687b      	ldr	r3, [r7, #4]
 801667e:	f103 0208 	add.w	r2, r3, #8
 8016682:	687b      	ldr	r3, [r7, #4]
 8016684:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8016686:	687b      	ldr	r3, [r7, #4]
 8016688:	f04f 32ff 	mov.w	r2, #4294967295
 801668c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801668e:	687b      	ldr	r3, [r7, #4]
 8016690:	f103 0208 	add.w	r2, r3, #8
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016698:	687b      	ldr	r3, [r7, #4]
 801669a:	f103 0208 	add.w	r2, r3, #8
 801669e:	687b      	ldr	r3, [r7, #4]
 80166a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	2200      	movs	r2, #0
 80166a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80166a8:	bf00      	nop
 80166aa:	370c      	adds	r7, #12
 80166ac:	46bd      	mov	sp, r7
 80166ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166b2:	4770      	bx	lr

080166b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80166b4:	b480      	push	{r7}
 80166b6:	b083      	sub	sp, #12
 80166b8:	af00      	add	r7, sp, #0
 80166ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	2200      	movs	r2, #0
 80166c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80166c2:	bf00      	nop
 80166c4:	370c      	adds	r7, #12
 80166c6:	46bd      	mov	sp, r7
 80166c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166cc:	4770      	bx	lr

080166ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80166ce:	b480      	push	{r7}
 80166d0:	b085      	sub	sp, #20
 80166d2:	af00      	add	r7, sp, #0
 80166d4:	6078      	str	r0, [r7, #4]
 80166d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80166d8:	687b      	ldr	r3, [r7, #4]
 80166da:	685b      	ldr	r3, [r3, #4]
 80166dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80166de:	683b      	ldr	r3, [r7, #0]
 80166e0:	68fa      	ldr	r2, [r7, #12]
 80166e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80166e4:	68fb      	ldr	r3, [r7, #12]
 80166e6:	689a      	ldr	r2, [r3, #8]
 80166e8:	683b      	ldr	r3, [r7, #0]
 80166ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80166ec:	68fb      	ldr	r3, [r7, #12]
 80166ee:	689b      	ldr	r3, [r3, #8]
 80166f0:	683a      	ldr	r2, [r7, #0]
 80166f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80166f4:	68fb      	ldr	r3, [r7, #12]
 80166f6:	683a      	ldr	r2, [r7, #0]
 80166f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80166fa:	683b      	ldr	r3, [r7, #0]
 80166fc:	687a      	ldr	r2, [r7, #4]
 80166fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8016700:	687b      	ldr	r3, [r7, #4]
 8016702:	681b      	ldr	r3, [r3, #0]
 8016704:	1c5a      	adds	r2, r3, #1
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	601a      	str	r2, [r3, #0]
}
 801670a:	bf00      	nop
 801670c:	3714      	adds	r7, #20
 801670e:	46bd      	mov	sp, r7
 8016710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016714:	4770      	bx	lr

08016716 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8016716:	b480      	push	{r7}
 8016718:	b085      	sub	sp, #20
 801671a:	af00      	add	r7, sp, #0
 801671c:	6078      	str	r0, [r7, #4]
 801671e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8016720:	683b      	ldr	r3, [r7, #0]
 8016722:	681b      	ldr	r3, [r3, #0]
 8016724:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8016726:	68bb      	ldr	r3, [r7, #8]
 8016728:	f1b3 3fff 	cmp.w	r3, #4294967295
 801672c:	d103      	bne.n	8016736 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	691b      	ldr	r3, [r3, #16]
 8016732:	60fb      	str	r3, [r7, #12]
 8016734:	e00c      	b.n	8016750 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8016736:	687b      	ldr	r3, [r7, #4]
 8016738:	3308      	adds	r3, #8
 801673a:	60fb      	str	r3, [r7, #12]
 801673c:	e002      	b.n	8016744 <vListInsert+0x2e>
 801673e:	68fb      	ldr	r3, [r7, #12]
 8016740:	685b      	ldr	r3, [r3, #4]
 8016742:	60fb      	str	r3, [r7, #12]
 8016744:	68fb      	ldr	r3, [r7, #12]
 8016746:	685b      	ldr	r3, [r3, #4]
 8016748:	681b      	ldr	r3, [r3, #0]
 801674a:	68ba      	ldr	r2, [r7, #8]
 801674c:	429a      	cmp	r2, r3
 801674e:	d2f6      	bcs.n	801673e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8016750:	68fb      	ldr	r3, [r7, #12]
 8016752:	685a      	ldr	r2, [r3, #4]
 8016754:	683b      	ldr	r3, [r7, #0]
 8016756:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8016758:	683b      	ldr	r3, [r7, #0]
 801675a:	685b      	ldr	r3, [r3, #4]
 801675c:	683a      	ldr	r2, [r7, #0]
 801675e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8016760:	683b      	ldr	r3, [r7, #0]
 8016762:	68fa      	ldr	r2, [r7, #12]
 8016764:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8016766:	68fb      	ldr	r3, [r7, #12]
 8016768:	683a      	ldr	r2, [r7, #0]
 801676a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801676c:	683b      	ldr	r3, [r7, #0]
 801676e:	687a      	ldr	r2, [r7, #4]
 8016770:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	681b      	ldr	r3, [r3, #0]
 8016776:	1c5a      	adds	r2, r3, #1
 8016778:	687b      	ldr	r3, [r7, #4]
 801677a:	601a      	str	r2, [r3, #0]
}
 801677c:	bf00      	nop
 801677e:	3714      	adds	r7, #20
 8016780:	46bd      	mov	sp, r7
 8016782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016786:	4770      	bx	lr

08016788 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8016788:	b480      	push	{r7}
 801678a:	b085      	sub	sp, #20
 801678c:	af00      	add	r7, sp, #0
 801678e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	691b      	ldr	r3, [r3, #16]
 8016794:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8016796:	687b      	ldr	r3, [r7, #4]
 8016798:	685b      	ldr	r3, [r3, #4]
 801679a:	687a      	ldr	r2, [r7, #4]
 801679c:	6892      	ldr	r2, [r2, #8]
 801679e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	689b      	ldr	r3, [r3, #8]
 80167a4:	687a      	ldr	r2, [r7, #4]
 80167a6:	6852      	ldr	r2, [r2, #4]
 80167a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80167aa:	68fb      	ldr	r3, [r7, #12]
 80167ac:	685b      	ldr	r3, [r3, #4]
 80167ae:	687a      	ldr	r2, [r7, #4]
 80167b0:	429a      	cmp	r2, r3
 80167b2:	d103      	bne.n	80167bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	689a      	ldr	r2, [r3, #8]
 80167b8:	68fb      	ldr	r3, [r7, #12]
 80167ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80167bc:	687b      	ldr	r3, [r7, #4]
 80167be:	2200      	movs	r2, #0
 80167c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80167c2:	68fb      	ldr	r3, [r7, #12]
 80167c4:	681b      	ldr	r3, [r3, #0]
 80167c6:	1e5a      	subs	r2, r3, #1
 80167c8:	68fb      	ldr	r3, [r7, #12]
 80167ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80167cc:	68fb      	ldr	r3, [r7, #12]
 80167ce:	681b      	ldr	r3, [r3, #0]
}
 80167d0:	4618      	mov	r0, r3
 80167d2:	3714      	adds	r7, #20
 80167d4:	46bd      	mov	sp, r7
 80167d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167da:	4770      	bx	lr

080167dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80167dc:	b580      	push	{r7, lr}
 80167de:	b084      	sub	sp, #16
 80167e0:	af00      	add	r7, sp, #0
 80167e2:	6078      	str	r0, [r7, #4]
 80167e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80167ea:	68fb      	ldr	r3, [r7, #12]
 80167ec:	2b00      	cmp	r3, #0
 80167ee:	d10a      	bne.n	8016806 <xQueueGenericReset+0x2a>
	__asm volatile
 80167f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167f4:	f383 8811 	msr	BASEPRI, r3
 80167f8:	f3bf 8f6f 	isb	sy
 80167fc:	f3bf 8f4f 	dsb	sy
 8016800:	60bb      	str	r3, [r7, #8]
}
 8016802:	bf00      	nop
 8016804:	e7fe      	b.n	8016804 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8016806:	f002 fd7d 	bl	8019304 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801680a:	68fb      	ldr	r3, [r7, #12]
 801680c:	681a      	ldr	r2, [r3, #0]
 801680e:	68fb      	ldr	r3, [r7, #12]
 8016810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016812:	68f9      	ldr	r1, [r7, #12]
 8016814:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8016816:	fb01 f303 	mul.w	r3, r1, r3
 801681a:	441a      	add	r2, r3
 801681c:	68fb      	ldr	r3, [r7, #12]
 801681e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8016820:	68fb      	ldr	r3, [r7, #12]
 8016822:	2200      	movs	r2, #0
 8016824:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8016826:	68fb      	ldr	r3, [r7, #12]
 8016828:	681a      	ldr	r2, [r3, #0]
 801682a:	68fb      	ldr	r3, [r7, #12]
 801682c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801682e:	68fb      	ldr	r3, [r7, #12]
 8016830:	681a      	ldr	r2, [r3, #0]
 8016832:	68fb      	ldr	r3, [r7, #12]
 8016834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016836:	3b01      	subs	r3, #1
 8016838:	68f9      	ldr	r1, [r7, #12]
 801683a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801683c:	fb01 f303 	mul.w	r3, r1, r3
 8016840:	441a      	add	r2, r3
 8016842:	68fb      	ldr	r3, [r7, #12]
 8016844:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8016846:	68fb      	ldr	r3, [r7, #12]
 8016848:	22ff      	movs	r2, #255	; 0xff
 801684a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801684e:	68fb      	ldr	r3, [r7, #12]
 8016850:	22ff      	movs	r2, #255	; 0xff
 8016852:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8016856:	683b      	ldr	r3, [r7, #0]
 8016858:	2b00      	cmp	r3, #0
 801685a:	d114      	bne.n	8016886 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801685c:	68fb      	ldr	r3, [r7, #12]
 801685e:	691b      	ldr	r3, [r3, #16]
 8016860:	2b00      	cmp	r3, #0
 8016862:	d01a      	beq.n	801689a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016864:	68fb      	ldr	r3, [r7, #12]
 8016866:	3310      	adds	r3, #16
 8016868:	4618      	mov	r0, r3
 801686a:	f001 fbd3 	bl	8018014 <xTaskRemoveFromEventList>
 801686e:	4603      	mov	r3, r0
 8016870:	2b00      	cmp	r3, #0
 8016872:	d012      	beq.n	801689a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8016874:	4b0c      	ldr	r3, [pc, #48]	; (80168a8 <xQueueGenericReset+0xcc>)
 8016876:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801687a:	601a      	str	r2, [r3, #0]
 801687c:	f3bf 8f4f 	dsb	sy
 8016880:	f3bf 8f6f 	isb	sy
 8016884:	e009      	b.n	801689a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8016886:	68fb      	ldr	r3, [r7, #12]
 8016888:	3310      	adds	r3, #16
 801688a:	4618      	mov	r0, r3
 801688c:	f7ff fef2 	bl	8016674 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8016890:	68fb      	ldr	r3, [r7, #12]
 8016892:	3324      	adds	r3, #36	; 0x24
 8016894:	4618      	mov	r0, r3
 8016896:	f7ff feed 	bl	8016674 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801689a:	f002 fd63 	bl	8019364 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801689e:	2301      	movs	r3, #1
}
 80168a0:	4618      	mov	r0, r3
 80168a2:	3710      	adds	r7, #16
 80168a4:	46bd      	mov	sp, r7
 80168a6:	bd80      	pop	{r7, pc}
 80168a8:	e000ed04 	.word	0xe000ed04

080168ac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80168ac:	b580      	push	{r7, lr}
 80168ae:	b08e      	sub	sp, #56	; 0x38
 80168b0:	af02      	add	r7, sp, #8
 80168b2:	60f8      	str	r0, [r7, #12]
 80168b4:	60b9      	str	r1, [r7, #8]
 80168b6:	607a      	str	r2, [r7, #4]
 80168b8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80168ba:	68fb      	ldr	r3, [r7, #12]
 80168bc:	2b00      	cmp	r3, #0
 80168be:	d10a      	bne.n	80168d6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80168c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168c4:	f383 8811 	msr	BASEPRI, r3
 80168c8:	f3bf 8f6f 	isb	sy
 80168cc:	f3bf 8f4f 	dsb	sy
 80168d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80168d2:	bf00      	nop
 80168d4:	e7fe      	b.n	80168d4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80168d6:	683b      	ldr	r3, [r7, #0]
 80168d8:	2b00      	cmp	r3, #0
 80168da:	d10a      	bne.n	80168f2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80168dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168e0:	f383 8811 	msr	BASEPRI, r3
 80168e4:	f3bf 8f6f 	isb	sy
 80168e8:	f3bf 8f4f 	dsb	sy
 80168ec:	627b      	str	r3, [r7, #36]	; 0x24
}
 80168ee:	bf00      	nop
 80168f0:	e7fe      	b.n	80168f0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80168f2:	687b      	ldr	r3, [r7, #4]
 80168f4:	2b00      	cmp	r3, #0
 80168f6:	d002      	beq.n	80168fe <xQueueGenericCreateStatic+0x52>
 80168f8:	68bb      	ldr	r3, [r7, #8]
 80168fa:	2b00      	cmp	r3, #0
 80168fc:	d001      	beq.n	8016902 <xQueueGenericCreateStatic+0x56>
 80168fe:	2301      	movs	r3, #1
 8016900:	e000      	b.n	8016904 <xQueueGenericCreateStatic+0x58>
 8016902:	2300      	movs	r3, #0
 8016904:	2b00      	cmp	r3, #0
 8016906:	d10a      	bne.n	801691e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8016908:	f04f 0350 	mov.w	r3, #80	; 0x50
 801690c:	f383 8811 	msr	BASEPRI, r3
 8016910:	f3bf 8f6f 	isb	sy
 8016914:	f3bf 8f4f 	dsb	sy
 8016918:	623b      	str	r3, [r7, #32]
}
 801691a:	bf00      	nop
 801691c:	e7fe      	b.n	801691c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	2b00      	cmp	r3, #0
 8016922:	d102      	bne.n	801692a <xQueueGenericCreateStatic+0x7e>
 8016924:	68bb      	ldr	r3, [r7, #8]
 8016926:	2b00      	cmp	r3, #0
 8016928:	d101      	bne.n	801692e <xQueueGenericCreateStatic+0x82>
 801692a:	2301      	movs	r3, #1
 801692c:	e000      	b.n	8016930 <xQueueGenericCreateStatic+0x84>
 801692e:	2300      	movs	r3, #0
 8016930:	2b00      	cmp	r3, #0
 8016932:	d10a      	bne.n	801694a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8016934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016938:	f383 8811 	msr	BASEPRI, r3
 801693c:	f3bf 8f6f 	isb	sy
 8016940:	f3bf 8f4f 	dsb	sy
 8016944:	61fb      	str	r3, [r7, #28]
}
 8016946:	bf00      	nop
 8016948:	e7fe      	b.n	8016948 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801694a:	2350      	movs	r3, #80	; 0x50
 801694c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801694e:	697b      	ldr	r3, [r7, #20]
 8016950:	2b50      	cmp	r3, #80	; 0x50
 8016952:	d00a      	beq.n	801696a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8016954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016958:	f383 8811 	msr	BASEPRI, r3
 801695c:	f3bf 8f6f 	isb	sy
 8016960:	f3bf 8f4f 	dsb	sy
 8016964:	61bb      	str	r3, [r7, #24]
}
 8016966:	bf00      	nop
 8016968:	e7fe      	b.n	8016968 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801696a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801696c:	683b      	ldr	r3, [r7, #0]
 801696e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8016970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016972:	2b00      	cmp	r3, #0
 8016974:	d00d      	beq.n	8016992 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8016976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016978:	2201      	movs	r2, #1
 801697a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801697e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8016982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016984:	9300      	str	r3, [sp, #0]
 8016986:	4613      	mov	r3, r2
 8016988:	687a      	ldr	r2, [r7, #4]
 801698a:	68b9      	ldr	r1, [r7, #8]
 801698c:	68f8      	ldr	r0, [r7, #12]
 801698e:	f000 f83f 	bl	8016a10 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8016992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8016994:	4618      	mov	r0, r3
 8016996:	3730      	adds	r7, #48	; 0x30
 8016998:	46bd      	mov	sp, r7
 801699a:	bd80      	pop	{r7, pc}

0801699c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801699c:	b580      	push	{r7, lr}
 801699e:	b08a      	sub	sp, #40	; 0x28
 80169a0:	af02      	add	r7, sp, #8
 80169a2:	60f8      	str	r0, [r7, #12]
 80169a4:	60b9      	str	r1, [r7, #8]
 80169a6:	4613      	mov	r3, r2
 80169a8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80169aa:	68fb      	ldr	r3, [r7, #12]
 80169ac:	2b00      	cmp	r3, #0
 80169ae:	d10a      	bne.n	80169c6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80169b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169b4:	f383 8811 	msr	BASEPRI, r3
 80169b8:	f3bf 8f6f 	isb	sy
 80169bc:	f3bf 8f4f 	dsb	sy
 80169c0:	613b      	str	r3, [r7, #16]
}
 80169c2:	bf00      	nop
 80169c4:	e7fe      	b.n	80169c4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80169c6:	68fb      	ldr	r3, [r7, #12]
 80169c8:	68ba      	ldr	r2, [r7, #8]
 80169ca:	fb02 f303 	mul.w	r3, r2, r3
 80169ce:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80169d0:	69fb      	ldr	r3, [r7, #28]
 80169d2:	3350      	adds	r3, #80	; 0x50
 80169d4:	4618      	mov	r0, r3
 80169d6:	f002 fdb7 	bl	8019548 <pvPortMalloc>
 80169da:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80169dc:	69bb      	ldr	r3, [r7, #24]
 80169de:	2b00      	cmp	r3, #0
 80169e0:	d011      	beq.n	8016a06 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80169e2:	69bb      	ldr	r3, [r7, #24]
 80169e4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80169e6:	697b      	ldr	r3, [r7, #20]
 80169e8:	3350      	adds	r3, #80	; 0x50
 80169ea:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80169ec:	69bb      	ldr	r3, [r7, #24]
 80169ee:	2200      	movs	r2, #0
 80169f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80169f4:	79fa      	ldrb	r2, [r7, #7]
 80169f6:	69bb      	ldr	r3, [r7, #24]
 80169f8:	9300      	str	r3, [sp, #0]
 80169fa:	4613      	mov	r3, r2
 80169fc:	697a      	ldr	r2, [r7, #20]
 80169fe:	68b9      	ldr	r1, [r7, #8]
 8016a00:	68f8      	ldr	r0, [r7, #12]
 8016a02:	f000 f805 	bl	8016a10 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8016a06:	69bb      	ldr	r3, [r7, #24]
	}
 8016a08:	4618      	mov	r0, r3
 8016a0a:	3720      	adds	r7, #32
 8016a0c:	46bd      	mov	sp, r7
 8016a0e:	bd80      	pop	{r7, pc}

08016a10 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8016a10:	b580      	push	{r7, lr}
 8016a12:	b084      	sub	sp, #16
 8016a14:	af00      	add	r7, sp, #0
 8016a16:	60f8      	str	r0, [r7, #12]
 8016a18:	60b9      	str	r1, [r7, #8]
 8016a1a:	607a      	str	r2, [r7, #4]
 8016a1c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8016a1e:	68bb      	ldr	r3, [r7, #8]
 8016a20:	2b00      	cmp	r3, #0
 8016a22:	d103      	bne.n	8016a2c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8016a24:	69bb      	ldr	r3, [r7, #24]
 8016a26:	69ba      	ldr	r2, [r7, #24]
 8016a28:	601a      	str	r2, [r3, #0]
 8016a2a:	e002      	b.n	8016a32 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8016a2c:	69bb      	ldr	r3, [r7, #24]
 8016a2e:	687a      	ldr	r2, [r7, #4]
 8016a30:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8016a32:	69bb      	ldr	r3, [r7, #24]
 8016a34:	68fa      	ldr	r2, [r7, #12]
 8016a36:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8016a38:	69bb      	ldr	r3, [r7, #24]
 8016a3a:	68ba      	ldr	r2, [r7, #8]
 8016a3c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8016a3e:	2101      	movs	r1, #1
 8016a40:	69b8      	ldr	r0, [r7, #24]
 8016a42:	f7ff fecb 	bl	80167dc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8016a46:	69bb      	ldr	r3, [r7, #24]
 8016a48:	78fa      	ldrb	r2, [r7, #3]
 8016a4a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8016a4e:	bf00      	nop
 8016a50:	3710      	adds	r7, #16
 8016a52:	46bd      	mov	sp, r7
 8016a54:	bd80      	pop	{r7, pc}

08016a56 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8016a56:	b580      	push	{r7, lr}
 8016a58:	b082      	sub	sp, #8
 8016a5a:	af00      	add	r7, sp, #0
 8016a5c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8016a5e:	687b      	ldr	r3, [r7, #4]
 8016a60:	2b00      	cmp	r3, #0
 8016a62:	d00e      	beq.n	8016a82 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	2200      	movs	r2, #0
 8016a68:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8016a6a:	687b      	ldr	r3, [r7, #4]
 8016a6c:	2200      	movs	r2, #0
 8016a6e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8016a70:	687b      	ldr	r3, [r7, #4]
 8016a72:	2200      	movs	r2, #0
 8016a74:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8016a76:	2300      	movs	r3, #0
 8016a78:	2200      	movs	r2, #0
 8016a7a:	2100      	movs	r1, #0
 8016a7c:	6878      	ldr	r0, [r7, #4]
 8016a7e:	f000 f8a1 	bl	8016bc4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8016a82:	bf00      	nop
 8016a84:	3708      	adds	r7, #8
 8016a86:	46bd      	mov	sp, r7
 8016a88:	bd80      	pop	{r7, pc}

08016a8a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8016a8a:	b580      	push	{r7, lr}
 8016a8c:	b086      	sub	sp, #24
 8016a8e:	af00      	add	r7, sp, #0
 8016a90:	4603      	mov	r3, r0
 8016a92:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8016a94:	2301      	movs	r3, #1
 8016a96:	617b      	str	r3, [r7, #20]
 8016a98:	2300      	movs	r3, #0
 8016a9a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8016a9c:	79fb      	ldrb	r3, [r7, #7]
 8016a9e:	461a      	mov	r2, r3
 8016aa0:	6939      	ldr	r1, [r7, #16]
 8016aa2:	6978      	ldr	r0, [r7, #20]
 8016aa4:	f7ff ff7a 	bl	801699c <xQueueGenericCreate>
 8016aa8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8016aaa:	68f8      	ldr	r0, [r7, #12]
 8016aac:	f7ff ffd3 	bl	8016a56 <prvInitialiseMutex>

		return xNewQueue;
 8016ab0:	68fb      	ldr	r3, [r7, #12]
	}
 8016ab2:	4618      	mov	r0, r3
 8016ab4:	3718      	adds	r7, #24
 8016ab6:	46bd      	mov	sp, r7
 8016ab8:	bd80      	pop	{r7, pc}

08016aba <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8016aba:	b580      	push	{r7, lr}
 8016abc:	b088      	sub	sp, #32
 8016abe:	af02      	add	r7, sp, #8
 8016ac0:	4603      	mov	r3, r0
 8016ac2:	6039      	str	r1, [r7, #0]
 8016ac4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8016ac6:	2301      	movs	r3, #1
 8016ac8:	617b      	str	r3, [r7, #20]
 8016aca:	2300      	movs	r3, #0
 8016acc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8016ace:	79fb      	ldrb	r3, [r7, #7]
 8016ad0:	9300      	str	r3, [sp, #0]
 8016ad2:	683b      	ldr	r3, [r7, #0]
 8016ad4:	2200      	movs	r2, #0
 8016ad6:	6939      	ldr	r1, [r7, #16]
 8016ad8:	6978      	ldr	r0, [r7, #20]
 8016ada:	f7ff fee7 	bl	80168ac <xQueueGenericCreateStatic>
 8016ade:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8016ae0:	68f8      	ldr	r0, [r7, #12]
 8016ae2:	f7ff ffb8 	bl	8016a56 <prvInitialiseMutex>

		return xNewQueue;
 8016ae6:	68fb      	ldr	r3, [r7, #12]
	}
 8016ae8:	4618      	mov	r0, r3
 8016aea:	3718      	adds	r7, #24
 8016aec:	46bd      	mov	sp, r7
 8016aee:	bd80      	pop	{r7, pc}

08016af0 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8016af0:	b590      	push	{r4, r7, lr}
 8016af2:	b087      	sub	sp, #28
 8016af4:	af00      	add	r7, sp, #0
 8016af6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8016af8:	687b      	ldr	r3, [r7, #4]
 8016afa:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8016afc:	693b      	ldr	r3, [r7, #16]
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	d10a      	bne.n	8016b18 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8016b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b06:	f383 8811 	msr	BASEPRI, r3
 8016b0a:	f3bf 8f6f 	isb	sy
 8016b0e:	f3bf 8f4f 	dsb	sy
 8016b12:	60fb      	str	r3, [r7, #12]
}
 8016b14:	bf00      	nop
 8016b16:	e7fe      	b.n	8016b16 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8016b18:	693b      	ldr	r3, [r7, #16]
 8016b1a:	689c      	ldr	r4, [r3, #8]
 8016b1c:	f001 fc9a 	bl	8018454 <xTaskGetCurrentTaskHandle>
 8016b20:	4603      	mov	r3, r0
 8016b22:	429c      	cmp	r4, r3
 8016b24:	d111      	bne.n	8016b4a <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8016b26:	693b      	ldr	r3, [r7, #16]
 8016b28:	68db      	ldr	r3, [r3, #12]
 8016b2a:	1e5a      	subs	r2, r3, #1
 8016b2c:	693b      	ldr	r3, [r7, #16]
 8016b2e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8016b30:	693b      	ldr	r3, [r7, #16]
 8016b32:	68db      	ldr	r3, [r3, #12]
 8016b34:	2b00      	cmp	r3, #0
 8016b36:	d105      	bne.n	8016b44 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8016b38:	2300      	movs	r3, #0
 8016b3a:	2200      	movs	r2, #0
 8016b3c:	2100      	movs	r1, #0
 8016b3e:	6938      	ldr	r0, [r7, #16]
 8016b40:	f000 f840 	bl	8016bc4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8016b44:	2301      	movs	r3, #1
 8016b46:	617b      	str	r3, [r7, #20]
 8016b48:	e001      	b.n	8016b4e <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8016b4a:	2300      	movs	r3, #0
 8016b4c:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8016b4e:	697b      	ldr	r3, [r7, #20]
	}
 8016b50:	4618      	mov	r0, r3
 8016b52:	371c      	adds	r7, #28
 8016b54:	46bd      	mov	sp, r7
 8016b56:	bd90      	pop	{r4, r7, pc}

08016b58 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8016b58:	b590      	push	{r4, r7, lr}
 8016b5a:	b087      	sub	sp, #28
 8016b5c:	af00      	add	r7, sp, #0
 8016b5e:	6078      	str	r0, [r7, #4]
 8016b60:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8016b62:	687b      	ldr	r3, [r7, #4]
 8016b64:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8016b66:	693b      	ldr	r3, [r7, #16]
 8016b68:	2b00      	cmp	r3, #0
 8016b6a:	d10a      	bne.n	8016b82 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8016b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b70:	f383 8811 	msr	BASEPRI, r3
 8016b74:	f3bf 8f6f 	isb	sy
 8016b78:	f3bf 8f4f 	dsb	sy
 8016b7c:	60fb      	str	r3, [r7, #12]
}
 8016b7e:	bf00      	nop
 8016b80:	e7fe      	b.n	8016b80 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8016b82:	693b      	ldr	r3, [r7, #16]
 8016b84:	689c      	ldr	r4, [r3, #8]
 8016b86:	f001 fc65 	bl	8018454 <xTaskGetCurrentTaskHandle>
 8016b8a:	4603      	mov	r3, r0
 8016b8c:	429c      	cmp	r4, r3
 8016b8e:	d107      	bne.n	8016ba0 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8016b90:	693b      	ldr	r3, [r7, #16]
 8016b92:	68db      	ldr	r3, [r3, #12]
 8016b94:	1c5a      	adds	r2, r3, #1
 8016b96:	693b      	ldr	r3, [r7, #16]
 8016b98:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8016b9a:	2301      	movs	r3, #1
 8016b9c:	617b      	str	r3, [r7, #20]
 8016b9e:	e00c      	b.n	8016bba <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8016ba0:	6839      	ldr	r1, [r7, #0]
 8016ba2:	6938      	ldr	r0, [r7, #16]
 8016ba4:	f000 fa88 	bl	80170b8 <xQueueSemaphoreTake>
 8016ba8:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8016baa:	697b      	ldr	r3, [r7, #20]
 8016bac:	2b00      	cmp	r3, #0
 8016bae:	d004      	beq.n	8016bba <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8016bb0:	693b      	ldr	r3, [r7, #16]
 8016bb2:	68db      	ldr	r3, [r3, #12]
 8016bb4:	1c5a      	adds	r2, r3, #1
 8016bb6:	693b      	ldr	r3, [r7, #16]
 8016bb8:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8016bba:	697b      	ldr	r3, [r7, #20]
	}
 8016bbc:	4618      	mov	r0, r3
 8016bbe:	371c      	adds	r7, #28
 8016bc0:	46bd      	mov	sp, r7
 8016bc2:	bd90      	pop	{r4, r7, pc}

08016bc4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8016bc4:	b580      	push	{r7, lr}
 8016bc6:	b08e      	sub	sp, #56	; 0x38
 8016bc8:	af00      	add	r7, sp, #0
 8016bca:	60f8      	str	r0, [r7, #12]
 8016bcc:	60b9      	str	r1, [r7, #8]
 8016bce:	607a      	str	r2, [r7, #4]
 8016bd0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8016bd2:	2300      	movs	r3, #0
 8016bd4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016bd6:	68fb      	ldr	r3, [r7, #12]
 8016bd8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8016bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bdc:	2b00      	cmp	r3, #0
 8016bde:	d10a      	bne.n	8016bf6 <xQueueGenericSend+0x32>
	__asm volatile
 8016be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016be4:	f383 8811 	msr	BASEPRI, r3
 8016be8:	f3bf 8f6f 	isb	sy
 8016bec:	f3bf 8f4f 	dsb	sy
 8016bf0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8016bf2:	bf00      	nop
 8016bf4:	e7fe      	b.n	8016bf4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016bf6:	68bb      	ldr	r3, [r7, #8]
 8016bf8:	2b00      	cmp	r3, #0
 8016bfa:	d103      	bne.n	8016c04 <xQueueGenericSend+0x40>
 8016bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016c00:	2b00      	cmp	r3, #0
 8016c02:	d101      	bne.n	8016c08 <xQueueGenericSend+0x44>
 8016c04:	2301      	movs	r3, #1
 8016c06:	e000      	b.n	8016c0a <xQueueGenericSend+0x46>
 8016c08:	2300      	movs	r3, #0
 8016c0a:	2b00      	cmp	r3, #0
 8016c0c:	d10a      	bne.n	8016c24 <xQueueGenericSend+0x60>
	__asm volatile
 8016c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c12:	f383 8811 	msr	BASEPRI, r3
 8016c16:	f3bf 8f6f 	isb	sy
 8016c1a:	f3bf 8f4f 	dsb	sy
 8016c1e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8016c20:	bf00      	nop
 8016c22:	e7fe      	b.n	8016c22 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016c24:	683b      	ldr	r3, [r7, #0]
 8016c26:	2b02      	cmp	r3, #2
 8016c28:	d103      	bne.n	8016c32 <xQueueGenericSend+0x6e>
 8016c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016c2e:	2b01      	cmp	r3, #1
 8016c30:	d101      	bne.n	8016c36 <xQueueGenericSend+0x72>
 8016c32:	2301      	movs	r3, #1
 8016c34:	e000      	b.n	8016c38 <xQueueGenericSend+0x74>
 8016c36:	2300      	movs	r3, #0
 8016c38:	2b00      	cmp	r3, #0
 8016c3a:	d10a      	bne.n	8016c52 <xQueueGenericSend+0x8e>
	__asm volatile
 8016c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c40:	f383 8811 	msr	BASEPRI, r3
 8016c44:	f3bf 8f6f 	isb	sy
 8016c48:	f3bf 8f4f 	dsb	sy
 8016c4c:	623b      	str	r3, [r7, #32]
}
 8016c4e:	bf00      	nop
 8016c50:	e7fe      	b.n	8016c50 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016c52:	f001 fc0f 	bl	8018474 <xTaskGetSchedulerState>
 8016c56:	4603      	mov	r3, r0
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	d102      	bne.n	8016c62 <xQueueGenericSend+0x9e>
 8016c5c:	687b      	ldr	r3, [r7, #4]
 8016c5e:	2b00      	cmp	r3, #0
 8016c60:	d101      	bne.n	8016c66 <xQueueGenericSend+0xa2>
 8016c62:	2301      	movs	r3, #1
 8016c64:	e000      	b.n	8016c68 <xQueueGenericSend+0xa4>
 8016c66:	2300      	movs	r3, #0
 8016c68:	2b00      	cmp	r3, #0
 8016c6a:	d10a      	bne.n	8016c82 <xQueueGenericSend+0xbe>
	__asm volatile
 8016c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c70:	f383 8811 	msr	BASEPRI, r3
 8016c74:	f3bf 8f6f 	isb	sy
 8016c78:	f3bf 8f4f 	dsb	sy
 8016c7c:	61fb      	str	r3, [r7, #28]
}
 8016c7e:	bf00      	nop
 8016c80:	e7fe      	b.n	8016c80 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016c82:	f002 fb3f 	bl	8019304 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016c8e:	429a      	cmp	r2, r3
 8016c90:	d302      	bcc.n	8016c98 <xQueueGenericSend+0xd4>
 8016c92:	683b      	ldr	r3, [r7, #0]
 8016c94:	2b02      	cmp	r3, #2
 8016c96:	d129      	bne.n	8016cec <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016c98:	683a      	ldr	r2, [r7, #0]
 8016c9a:	68b9      	ldr	r1, [r7, #8]
 8016c9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016c9e:	f000 fbaf 	bl	8017400 <prvCopyDataToQueue>
 8016ca2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ca8:	2b00      	cmp	r3, #0
 8016caa:	d010      	beq.n	8016cce <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cae:	3324      	adds	r3, #36	; 0x24
 8016cb0:	4618      	mov	r0, r3
 8016cb2:	f001 f9af 	bl	8018014 <xTaskRemoveFromEventList>
 8016cb6:	4603      	mov	r3, r0
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	d013      	beq.n	8016ce4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8016cbc:	4b3f      	ldr	r3, [pc, #252]	; (8016dbc <xQueueGenericSend+0x1f8>)
 8016cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016cc2:	601a      	str	r2, [r3, #0]
 8016cc4:	f3bf 8f4f 	dsb	sy
 8016cc8:	f3bf 8f6f 	isb	sy
 8016ccc:	e00a      	b.n	8016ce4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8016cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cd0:	2b00      	cmp	r3, #0
 8016cd2:	d007      	beq.n	8016ce4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8016cd4:	4b39      	ldr	r3, [pc, #228]	; (8016dbc <xQueueGenericSend+0x1f8>)
 8016cd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016cda:	601a      	str	r2, [r3, #0]
 8016cdc:	f3bf 8f4f 	dsb	sy
 8016ce0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8016ce4:	f002 fb3e 	bl	8019364 <vPortExitCritical>
				return pdPASS;
 8016ce8:	2301      	movs	r3, #1
 8016cea:	e063      	b.n	8016db4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	2b00      	cmp	r3, #0
 8016cf0:	d103      	bne.n	8016cfa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8016cf2:	f002 fb37 	bl	8019364 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8016cf6:	2300      	movs	r3, #0
 8016cf8:	e05c      	b.n	8016db4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016cfc:	2b00      	cmp	r3, #0
 8016cfe:	d106      	bne.n	8016d0e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016d00:	f107 0314 	add.w	r3, r7, #20
 8016d04:	4618      	mov	r0, r3
 8016d06:	f001 fa4b 	bl	80181a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016d0a:	2301      	movs	r3, #1
 8016d0c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016d0e:	f002 fb29 	bl	8019364 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016d12:	f000 ff1f 	bl	8017b54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016d16:	f002 faf5 	bl	8019304 <vPortEnterCritical>
 8016d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016d20:	b25b      	sxtb	r3, r3
 8016d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016d26:	d103      	bne.n	8016d30 <xQueueGenericSend+0x16c>
 8016d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d2a:	2200      	movs	r2, #0
 8016d2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016d36:	b25b      	sxtb	r3, r3
 8016d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016d3c:	d103      	bne.n	8016d46 <xQueueGenericSend+0x182>
 8016d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d40:	2200      	movs	r2, #0
 8016d42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016d46:	f002 fb0d 	bl	8019364 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016d4a:	1d3a      	adds	r2, r7, #4
 8016d4c:	f107 0314 	add.w	r3, r7, #20
 8016d50:	4611      	mov	r1, r2
 8016d52:	4618      	mov	r0, r3
 8016d54:	f001 fa3a 	bl	80181cc <xTaskCheckForTimeOut>
 8016d58:	4603      	mov	r3, r0
 8016d5a:	2b00      	cmp	r3, #0
 8016d5c:	d124      	bne.n	8016da8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8016d5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016d60:	f000 fc46 	bl	80175f0 <prvIsQueueFull>
 8016d64:	4603      	mov	r3, r0
 8016d66:	2b00      	cmp	r3, #0
 8016d68:	d018      	beq.n	8016d9c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8016d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d6c:	3310      	adds	r3, #16
 8016d6e:	687a      	ldr	r2, [r7, #4]
 8016d70:	4611      	mov	r1, r2
 8016d72:	4618      	mov	r0, r3
 8016d74:	f001 f8c2 	bl	8017efc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8016d78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016d7a:	f000 fbd1 	bl	8017520 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8016d7e:	f000 fef7 	bl	8017b70 <xTaskResumeAll>
 8016d82:	4603      	mov	r3, r0
 8016d84:	2b00      	cmp	r3, #0
 8016d86:	f47f af7c 	bne.w	8016c82 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8016d8a:	4b0c      	ldr	r3, [pc, #48]	; (8016dbc <xQueueGenericSend+0x1f8>)
 8016d8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016d90:	601a      	str	r2, [r3, #0]
 8016d92:	f3bf 8f4f 	dsb	sy
 8016d96:	f3bf 8f6f 	isb	sy
 8016d9a:	e772      	b.n	8016c82 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8016d9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016d9e:	f000 fbbf 	bl	8017520 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016da2:	f000 fee5 	bl	8017b70 <xTaskResumeAll>
 8016da6:	e76c      	b.n	8016c82 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8016da8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016daa:	f000 fbb9 	bl	8017520 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016dae:	f000 fedf 	bl	8017b70 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8016db2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8016db4:	4618      	mov	r0, r3
 8016db6:	3738      	adds	r7, #56	; 0x38
 8016db8:	46bd      	mov	sp, r7
 8016dba:	bd80      	pop	{r7, pc}
 8016dbc:	e000ed04 	.word	0xe000ed04

08016dc0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8016dc0:	b580      	push	{r7, lr}
 8016dc2:	b090      	sub	sp, #64	; 0x40
 8016dc4:	af00      	add	r7, sp, #0
 8016dc6:	60f8      	str	r0, [r7, #12]
 8016dc8:	60b9      	str	r1, [r7, #8]
 8016dca:	607a      	str	r2, [r7, #4]
 8016dcc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016dce:	68fb      	ldr	r3, [r7, #12]
 8016dd0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8016dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016dd4:	2b00      	cmp	r3, #0
 8016dd6:	d10a      	bne.n	8016dee <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8016dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ddc:	f383 8811 	msr	BASEPRI, r3
 8016de0:	f3bf 8f6f 	isb	sy
 8016de4:	f3bf 8f4f 	dsb	sy
 8016de8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8016dea:	bf00      	nop
 8016dec:	e7fe      	b.n	8016dec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016dee:	68bb      	ldr	r3, [r7, #8]
 8016df0:	2b00      	cmp	r3, #0
 8016df2:	d103      	bne.n	8016dfc <xQueueGenericSendFromISR+0x3c>
 8016df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016df8:	2b00      	cmp	r3, #0
 8016dfa:	d101      	bne.n	8016e00 <xQueueGenericSendFromISR+0x40>
 8016dfc:	2301      	movs	r3, #1
 8016dfe:	e000      	b.n	8016e02 <xQueueGenericSendFromISR+0x42>
 8016e00:	2300      	movs	r3, #0
 8016e02:	2b00      	cmp	r3, #0
 8016e04:	d10a      	bne.n	8016e1c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8016e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e0a:	f383 8811 	msr	BASEPRI, r3
 8016e0e:	f3bf 8f6f 	isb	sy
 8016e12:	f3bf 8f4f 	dsb	sy
 8016e16:	627b      	str	r3, [r7, #36]	; 0x24
}
 8016e18:	bf00      	nop
 8016e1a:	e7fe      	b.n	8016e1a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016e1c:	683b      	ldr	r3, [r7, #0]
 8016e1e:	2b02      	cmp	r3, #2
 8016e20:	d103      	bne.n	8016e2a <xQueueGenericSendFromISR+0x6a>
 8016e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016e26:	2b01      	cmp	r3, #1
 8016e28:	d101      	bne.n	8016e2e <xQueueGenericSendFromISR+0x6e>
 8016e2a:	2301      	movs	r3, #1
 8016e2c:	e000      	b.n	8016e30 <xQueueGenericSendFromISR+0x70>
 8016e2e:	2300      	movs	r3, #0
 8016e30:	2b00      	cmp	r3, #0
 8016e32:	d10a      	bne.n	8016e4a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8016e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e38:	f383 8811 	msr	BASEPRI, r3
 8016e3c:	f3bf 8f6f 	isb	sy
 8016e40:	f3bf 8f4f 	dsb	sy
 8016e44:	623b      	str	r3, [r7, #32]
}
 8016e46:	bf00      	nop
 8016e48:	e7fe      	b.n	8016e48 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016e4a:	f002 fb3d 	bl	80194c8 <vPortValidateInterruptPriority>
	__asm volatile
 8016e4e:	f3ef 8211 	mrs	r2, BASEPRI
 8016e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e56:	f383 8811 	msr	BASEPRI, r3
 8016e5a:	f3bf 8f6f 	isb	sy
 8016e5e:	f3bf 8f4f 	dsb	sy
 8016e62:	61fa      	str	r2, [r7, #28]
 8016e64:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8016e66:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016e68:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016e72:	429a      	cmp	r2, r3
 8016e74:	d302      	bcc.n	8016e7c <xQueueGenericSendFromISR+0xbc>
 8016e76:	683b      	ldr	r3, [r7, #0]
 8016e78:	2b02      	cmp	r3, #2
 8016e7a:	d12f      	bne.n	8016edc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8016e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016e82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016e8c:	683a      	ldr	r2, [r7, #0]
 8016e8e:	68b9      	ldr	r1, [r7, #8]
 8016e90:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016e92:	f000 fab5 	bl	8017400 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8016e96:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8016e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016e9e:	d112      	bne.n	8016ec6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ea4:	2b00      	cmp	r3, #0
 8016ea6:	d016      	beq.n	8016ed6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016eaa:	3324      	adds	r3, #36	; 0x24
 8016eac:	4618      	mov	r0, r3
 8016eae:	f001 f8b1 	bl	8018014 <xTaskRemoveFromEventList>
 8016eb2:	4603      	mov	r3, r0
 8016eb4:	2b00      	cmp	r3, #0
 8016eb6:	d00e      	beq.n	8016ed6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	2b00      	cmp	r3, #0
 8016ebc:	d00b      	beq.n	8016ed6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	2201      	movs	r2, #1
 8016ec2:	601a      	str	r2, [r3, #0]
 8016ec4:	e007      	b.n	8016ed6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8016ec6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8016eca:	3301      	adds	r3, #1
 8016ecc:	b2db      	uxtb	r3, r3
 8016ece:	b25a      	sxtb	r2, r3
 8016ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ed2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8016ed6:	2301      	movs	r3, #1
 8016ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8016eda:	e001      	b.n	8016ee0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8016edc:	2300      	movs	r3, #0
 8016ede:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016ee2:	617b      	str	r3, [r7, #20]
	__asm volatile
 8016ee4:	697b      	ldr	r3, [r7, #20]
 8016ee6:	f383 8811 	msr	BASEPRI, r3
}
 8016eea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016eec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8016eee:	4618      	mov	r0, r3
 8016ef0:	3740      	adds	r7, #64	; 0x40
 8016ef2:	46bd      	mov	sp, r7
 8016ef4:	bd80      	pop	{r7, pc}
	...

08016ef8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8016ef8:	b580      	push	{r7, lr}
 8016efa:	b08c      	sub	sp, #48	; 0x30
 8016efc:	af00      	add	r7, sp, #0
 8016efe:	60f8      	str	r0, [r7, #12]
 8016f00:	60b9      	str	r1, [r7, #8]
 8016f02:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8016f04:	2300      	movs	r3, #0
 8016f06:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016f08:	68fb      	ldr	r3, [r7, #12]
 8016f0a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8016f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f0e:	2b00      	cmp	r3, #0
 8016f10:	d10a      	bne.n	8016f28 <xQueueReceive+0x30>
	__asm volatile
 8016f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f16:	f383 8811 	msr	BASEPRI, r3
 8016f1a:	f3bf 8f6f 	isb	sy
 8016f1e:	f3bf 8f4f 	dsb	sy
 8016f22:	623b      	str	r3, [r7, #32]
}
 8016f24:	bf00      	nop
 8016f26:	e7fe      	b.n	8016f26 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016f28:	68bb      	ldr	r3, [r7, #8]
 8016f2a:	2b00      	cmp	r3, #0
 8016f2c:	d103      	bne.n	8016f36 <xQueueReceive+0x3e>
 8016f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016f32:	2b00      	cmp	r3, #0
 8016f34:	d101      	bne.n	8016f3a <xQueueReceive+0x42>
 8016f36:	2301      	movs	r3, #1
 8016f38:	e000      	b.n	8016f3c <xQueueReceive+0x44>
 8016f3a:	2300      	movs	r3, #0
 8016f3c:	2b00      	cmp	r3, #0
 8016f3e:	d10a      	bne.n	8016f56 <xQueueReceive+0x5e>
	__asm volatile
 8016f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f44:	f383 8811 	msr	BASEPRI, r3
 8016f48:	f3bf 8f6f 	isb	sy
 8016f4c:	f3bf 8f4f 	dsb	sy
 8016f50:	61fb      	str	r3, [r7, #28]
}
 8016f52:	bf00      	nop
 8016f54:	e7fe      	b.n	8016f54 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016f56:	f001 fa8d 	bl	8018474 <xTaskGetSchedulerState>
 8016f5a:	4603      	mov	r3, r0
 8016f5c:	2b00      	cmp	r3, #0
 8016f5e:	d102      	bne.n	8016f66 <xQueueReceive+0x6e>
 8016f60:	687b      	ldr	r3, [r7, #4]
 8016f62:	2b00      	cmp	r3, #0
 8016f64:	d101      	bne.n	8016f6a <xQueueReceive+0x72>
 8016f66:	2301      	movs	r3, #1
 8016f68:	e000      	b.n	8016f6c <xQueueReceive+0x74>
 8016f6a:	2300      	movs	r3, #0
 8016f6c:	2b00      	cmp	r3, #0
 8016f6e:	d10a      	bne.n	8016f86 <xQueueReceive+0x8e>
	__asm volatile
 8016f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f74:	f383 8811 	msr	BASEPRI, r3
 8016f78:	f3bf 8f6f 	isb	sy
 8016f7c:	f3bf 8f4f 	dsb	sy
 8016f80:	61bb      	str	r3, [r7, #24]
}
 8016f82:	bf00      	nop
 8016f84:	e7fe      	b.n	8016f84 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016f86:	f002 f9bd 	bl	8019304 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016f8e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f92:	2b00      	cmp	r3, #0
 8016f94:	d01f      	beq.n	8016fd6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8016f96:	68b9      	ldr	r1, [r7, #8]
 8016f98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016f9a:	f000 fa9b 	bl	80174d4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8016f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fa0:	1e5a      	subs	r2, r3, #1
 8016fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fa4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fa8:	691b      	ldr	r3, [r3, #16]
 8016faa:	2b00      	cmp	r3, #0
 8016fac:	d00f      	beq.n	8016fce <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fb0:	3310      	adds	r3, #16
 8016fb2:	4618      	mov	r0, r3
 8016fb4:	f001 f82e 	bl	8018014 <xTaskRemoveFromEventList>
 8016fb8:	4603      	mov	r3, r0
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	d007      	beq.n	8016fce <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8016fbe:	4b3d      	ldr	r3, [pc, #244]	; (80170b4 <xQueueReceive+0x1bc>)
 8016fc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016fc4:	601a      	str	r2, [r3, #0]
 8016fc6:	f3bf 8f4f 	dsb	sy
 8016fca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8016fce:	f002 f9c9 	bl	8019364 <vPortExitCritical>
				return pdPASS;
 8016fd2:	2301      	movs	r3, #1
 8016fd4:	e069      	b.n	80170aa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016fd6:	687b      	ldr	r3, [r7, #4]
 8016fd8:	2b00      	cmp	r3, #0
 8016fda:	d103      	bne.n	8016fe4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8016fdc:	f002 f9c2 	bl	8019364 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8016fe0:	2300      	movs	r3, #0
 8016fe2:	e062      	b.n	80170aa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fe6:	2b00      	cmp	r3, #0
 8016fe8:	d106      	bne.n	8016ff8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016fea:	f107 0310 	add.w	r3, r7, #16
 8016fee:	4618      	mov	r0, r3
 8016ff0:	f001 f8d6 	bl	80181a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016ff4:	2301      	movs	r3, #1
 8016ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016ff8:	f002 f9b4 	bl	8019364 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016ffc:	f000 fdaa 	bl	8017b54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017000:	f002 f980 	bl	8019304 <vPortEnterCritical>
 8017004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017006:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801700a:	b25b      	sxtb	r3, r3
 801700c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017010:	d103      	bne.n	801701a <xQueueReceive+0x122>
 8017012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017014:	2200      	movs	r2, #0
 8017016:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801701a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801701c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017020:	b25b      	sxtb	r3, r3
 8017022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017026:	d103      	bne.n	8017030 <xQueueReceive+0x138>
 8017028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801702a:	2200      	movs	r2, #0
 801702c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017030:	f002 f998 	bl	8019364 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017034:	1d3a      	adds	r2, r7, #4
 8017036:	f107 0310 	add.w	r3, r7, #16
 801703a:	4611      	mov	r1, r2
 801703c:	4618      	mov	r0, r3
 801703e:	f001 f8c5 	bl	80181cc <xTaskCheckForTimeOut>
 8017042:	4603      	mov	r3, r0
 8017044:	2b00      	cmp	r3, #0
 8017046:	d123      	bne.n	8017090 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017048:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801704a:	f000 fabb 	bl	80175c4 <prvIsQueueEmpty>
 801704e:	4603      	mov	r3, r0
 8017050:	2b00      	cmp	r3, #0
 8017052:	d017      	beq.n	8017084 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8017054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017056:	3324      	adds	r3, #36	; 0x24
 8017058:	687a      	ldr	r2, [r7, #4]
 801705a:	4611      	mov	r1, r2
 801705c:	4618      	mov	r0, r3
 801705e:	f000 ff4d 	bl	8017efc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8017062:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017064:	f000 fa5c 	bl	8017520 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8017068:	f000 fd82 	bl	8017b70 <xTaskResumeAll>
 801706c:	4603      	mov	r3, r0
 801706e:	2b00      	cmp	r3, #0
 8017070:	d189      	bne.n	8016f86 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8017072:	4b10      	ldr	r3, [pc, #64]	; (80170b4 <xQueueReceive+0x1bc>)
 8017074:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017078:	601a      	str	r2, [r3, #0]
 801707a:	f3bf 8f4f 	dsb	sy
 801707e:	f3bf 8f6f 	isb	sy
 8017082:	e780      	b.n	8016f86 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8017084:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017086:	f000 fa4b 	bl	8017520 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801708a:	f000 fd71 	bl	8017b70 <xTaskResumeAll>
 801708e:	e77a      	b.n	8016f86 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8017090:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017092:	f000 fa45 	bl	8017520 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017096:	f000 fd6b 	bl	8017b70 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801709a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801709c:	f000 fa92 	bl	80175c4 <prvIsQueueEmpty>
 80170a0:	4603      	mov	r3, r0
 80170a2:	2b00      	cmp	r3, #0
 80170a4:	f43f af6f 	beq.w	8016f86 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80170a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80170aa:	4618      	mov	r0, r3
 80170ac:	3730      	adds	r7, #48	; 0x30
 80170ae:	46bd      	mov	sp, r7
 80170b0:	bd80      	pop	{r7, pc}
 80170b2:	bf00      	nop
 80170b4:	e000ed04 	.word	0xe000ed04

080170b8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80170b8:	b580      	push	{r7, lr}
 80170ba:	b08e      	sub	sp, #56	; 0x38
 80170bc:	af00      	add	r7, sp, #0
 80170be:	6078      	str	r0, [r7, #4]
 80170c0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80170c2:	2300      	movs	r3, #0
 80170c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80170c6:	687b      	ldr	r3, [r7, #4]
 80170c8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80170ca:	2300      	movs	r3, #0
 80170cc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80170ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170d0:	2b00      	cmp	r3, #0
 80170d2:	d10a      	bne.n	80170ea <xQueueSemaphoreTake+0x32>
	__asm volatile
 80170d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170d8:	f383 8811 	msr	BASEPRI, r3
 80170dc:	f3bf 8f6f 	isb	sy
 80170e0:	f3bf 8f4f 	dsb	sy
 80170e4:	623b      	str	r3, [r7, #32]
}
 80170e6:	bf00      	nop
 80170e8:	e7fe      	b.n	80170e8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80170ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80170ee:	2b00      	cmp	r3, #0
 80170f0:	d00a      	beq.n	8017108 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80170f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170f6:	f383 8811 	msr	BASEPRI, r3
 80170fa:	f3bf 8f6f 	isb	sy
 80170fe:	f3bf 8f4f 	dsb	sy
 8017102:	61fb      	str	r3, [r7, #28]
}
 8017104:	bf00      	nop
 8017106:	e7fe      	b.n	8017106 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017108:	f001 f9b4 	bl	8018474 <xTaskGetSchedulerState>
 801710c:	4603      	mov	r3, r0
 801710e:	2b00      	cmp	r3, #0
 8017110:	d102      	bne.n	8017118 <xQueueSemaphoreTake+0x60>
 8017112:	683b      	ldr	r3, [r7, #0]
 8017114:	2b00      	cmp	r3, #0
 8017116:	d101      	bne.n	801711c <xQueueSemaphoreTake+0x64>
 8017118:	2301      	movs	r3, #1
 801711a:	e000      	b.n	801711e <xQueueSemaphoreTake+0x66>
 801711c:	2300      	movs	r3, #0
 801711e:	2b00      	cmp	r3, #0
 8017120:	d10a      	bne.n	8017138 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8017122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017126:	f383 8811 	msr	BASEPRI, r3
 801712a:	f3bf 8f6f 	isb	sy
 801712e:	f3bf 8f4f 	dsb	sy
 8017132:	61bb      	str	r3, [r7, #24]
}
 8017134:	bf00      	nop
 8017136:	e7fe      	b.n	8017136 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017138:	f002 f8e4 	bl	8019304 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801713c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801713e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017140:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8017142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017144:	2b00      	cmp	r3, #0
 8017146:	d024      	beq.n	8017192 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8017148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801714a:	1e5a      	subs	r2, r3, #1
 801714c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801714e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017152:	681b      	ldr	r3, [r3, #0]
 8017154:	2b00      	cmp	r3, #0
 8017156:	d104      	bne.n	8017162 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8017158:	f001 fb1a 	bl	8018790 <pvTaskIncrementMutexHeldCount>
 801715c:	4602      	mov	r2, r0
 801715e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017160:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017164:	691b      	ldr	r3, [r3, #16]
 8017166:	2b00      	cmp	r3, #0
 8017168:	d00f      	beq.n	801718a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801716a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801716c:	3310      	adds	r3, #16
 801716e:	4618      	mov	r0, r3
 8017170:	f000 ff50 	bl	8018014 <xTaskRemoveFromEventList>
 8017174:	4603      	mov	r3, r0
 8017176:	2b00      	cmp	r3, #0
 8017178:	d007      	beq.n	801718a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801717a:	4b54      	ldr	r3, [pc, #336]	; (80172cc <xQueueSemaphoreTake+0x214>)
 801717c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017180:	601a      	str	r2, [r3, #0]
 8017182:	f3bf 8f4f 	dsb	sy
 8017186:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801718a:	f002 f8eb 	bl	8019364 <vPortExitCritical>
				return pdPASS;
 801718e:	2301      	movs	r3, #1
 8017190:	e097      	b.n	80172c2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017192:	683b      	ldr	r3, [r7, #0]
 8017194:	2b00      	cmp	r3, #0
 8017196:	d111      	bne.n	80171bc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8017198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801719a:	2b00      	cmp	r3, #0
 801719c:	d00a      	beq.n	80171b4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 801719e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80171a2:	f383 8811 	msr	BASEPRI, r3
 80171a6:	f3bf 8f6f 	isb	sy
 80171aa:	f3bf 8f4f 	dsb	sy
 80171ae:	617b      	str	r3, [r7, #20]
}
 80171b0:	bf00      	nop
 80171b2:	e7fe      	b.n	80171b2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80171b4:	f002 f8d6 	bl	8019364 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80171b8:	2300      	movs	r3, #0
 80171ba:	e082      	b.n	80172c2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80171bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80171be:	2b00      	cmp	r3, #0
 80171c0:	d106      	bne.n	80171d0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80171c2:	f107 030c 	add.w	r3, r7, #12
 80171c6:	4618      	mov	r0, r3
 80171c8:	f000 ffea 	bl	80181a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80171cc:	2301      	movs	r3, #1
 80171ce:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80171d0:	f002 f8c8 	bl	8019364 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80171d4:	f000 fcbe 	bl	8017b54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80171d8:	f002 f894 	bl	8019304 <vPortEnterCritical>
 80171dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80171e2:	b25b      	sxtb	r3, r3
 80171e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80171e8:	d103      	bne.n	80171f2 <xQueueSemaphoreTake+0x13a>
 80171ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171ec:	2200      	movs	r2, #0
 80171ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80171f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80171f8:	b25b      	sxtb	r3, r3
 80171fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80171fe:	d103      	bne.n	8017208 <xQueueSemaphoreTake+0x150>
 8017200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017202:	2200      	movs	r2, #0
 8017204:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017208:	f002 f8ac 	bl	8019364 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801720c:	463a      	mov	r2, r7
 801720e:	f107 030c 	add.w	r3, r7, #12
 8017212:	4611      	mov	r1, r2
 8017214:	4618      	mov	r0, r3
 8017216:	f000 ffd9 	bl	80181cc <xTaskCheckForTimeOut>
 801721a:	4603      	mov	r3, r0
 801721c:	2b00      	cmp	r3, #0
 801721e:	d132      	bne.n	8017286 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017220:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017222:	f000 f9cf 	bl	80175c4 <prvIsQueueEmpty>
 8017226:	4603      	mov	r3, r0
 8017228:	2b00      	cmp	r3, #0
 801722a:	d026      	beq.n	801727a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801722c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801722e:	681b      	ldr	r3, [r3, #0]
 8017230:	2b00      	cmp	r3, #0
 8017232:	d109      	bne.n	8017248 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8017234:	f002 f866 	bl	8019304 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8017238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801723a:	689b      	ldr	r3, [r3, #8]
 801723c:	4618      	mov	r0, r3
 801723e:	f001 f937 	bl	80184b0 <xTaskPriorityInherit>
 8017242:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8017244:	f002 f88e 	bl	8019364 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8017248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801724a:	3324      	adds	r3, #36	; 0x24
 801724c:	683a      	ldr	r2, [r7, #0]
 801724e:	4611      	mov	r1, r2
 8017250:	4618      	mov	r0, r3
 8017252:	f000 fe53 	bl	8017efc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8017256:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017258:	f000 f962 	bl	8017520 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801725c:	f000 fc88 	bl	8017b70 <xTaskResumeAll>
 8017260:	4603      	mov	r3, r0
 8017262:	2b00      	cmp	r3, #0
 8017264:	f47f af68 	bne.w	8017138 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8017268:	4b18      	ldr	r3, [pc, #96]	; (80172cc <xQueueSemaphoreTake+0x214>)
 801726a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801726e:	601a      	str	r2, [r3, #0]
 8017270:	f3bf 8f4f 	dsb	sy
 8017274:	f3bf 8f6f 	isb	sy
 8017278:	e75e      	b.n	8017138 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801727a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801727c:	f000 f950 	bl	8017520 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017280:	f000 fc76 	bl	8017b70 <xTaskResumeAll>
 8017284:	e758      	b.n	8017138 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8017286:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017288:	f000 f94a 	bl	8017520 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801728c:	f000 fc70 	bl	8017b70 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017290:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017292:	f000 f997 	bl	80175c4 <prvIsQueueEmpty>
 8017296:	4603      	mov	r3, r0
 8017298:	2b00      	cmp	r3, #0
 801729a:	f43f af4d 	beq.w	8017138 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801729e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172a0:	2b00      	cmp	r3, #0
 80172a2:	d00d      	beq.n	80172c0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80172a4:	f002 f82e 	bl	8019304 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80172a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80172aa:	f000 f891 	bl	80173d0 <prvGetDisinheritPriorityAfterTimeout>
 80172ae:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80172b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172b2:	689b      	ldr	r3, [r3, #8]
 80172b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80172b6:	4618      	mov	r0, r3
 80172b8:	f001 f9d0 	bl	801865c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80172bc:	f002 f852 	bl	8019364 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80172c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80172c2:	4618      	mov	r0, r3
 80172c4:	3738      	adds	r7, #56	; 0x38
 80172c6:	46bd      	mov	sp, r7
 80172c8:	bd80      	pop	{r7, pc}
 80172ca:	bf00      	nop
 80172cc:	e000ed04 	.word	0xe000ed04

080172d0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80172d0:	b580      	push	{r7, lr}
 80172d2:	b08e      	sub	sp, #56	; 0x38
 80172d4:	af00      	add	r7, sp, #0
 80172d6:	60f8      	str	r0, [r7, #12]
 80172d8:	60b9      	str	r1, [r7, #8]
 80172da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80172dc:	68fb      	ldr	r3, [r7, #12]
 80172de:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80172e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172e2:	2b00      	cmp	r3, #0
 80172e4:	d10a      	bne.n	80172fc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80172e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80172ea:	f383 8811 	msr	BASEPRI, r3
 80172ee:	f3bf 8f6f 	isb	sy
 80172f2:	f3bf 8f4f 	dsb	sy
 80172f6:	623b      	str	r3, [r7, #32]
}
 80172f8:	bf00      	nop
 80172fa:	e7fe      	b.n	80172fa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80172fc:	68bb      	ldr	r3, [r7, #8]
 80172fe:	2b00      	cmp	r3, #0
 8017300:	d103      	bne.n	801730a <xQueueReceiveFromISR+0x3a>
 8017302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017306:	2b00      	cmp	r3, #0
 8017308:	d101      	bne.n	801730e <xQueueReceiveFromISR+0x3e>
 801730a:	2301      	movs	r3, #1
 801730c:	e000      	b.n	8017310 <xQueueReceiveFromISR+0x40>
 801730e:	2300      	movs	r3, #0
 8017310:	2b00      	cmp	r3, #0
 8017312:	d10a      	bne.n	801732a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8017314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017318:	f383 8811 	msr	BASEPRI, r3
 801731c:	f3bf 8f6f 	isb	sy
 8017320:	f3bf 8f4f 	dsb	sy
 8017324:	61fb      	str	r3, [r7, #28]
}
 8017326:	bf00      	nop
 8017328:	e7fe      	b.n	8017328 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801732a:	f002 f8cd 	bl	80194c8 <vPortValidateInterruptPriority>
	__asm volatile
 801732e:	f3ef 8211 	mrs	r2, BASEPRI
 8017332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017336:	f383 8811 	msr	BASEPRI, r3
 801733a:	f3bf 8f6f 	isb	sy
 801733e:	f3bf 8f4f 	dsb	sy
 8017342:	61ba      	str	r2, [r7, #24]
 8017344:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8017346:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017348:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801734a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801734c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801734e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017352:	2b00      	cmp	r3, #0
 8017354:	d02f      	beq.n	80173b6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8017356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017358:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801735c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8017360:	68b9      	ldr	r1, [r7, #8]
 8017362:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017364:	f000 f8b6 	bl	80174d4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8017368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801736a:	1e5a      	subs	r2, r3, #1
 801736c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801736e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8017370:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8017374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017378:	d112      	bne.n	80173a0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801737a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801737c:	691b      	ldr	r3, [r3, #16]
 801737e:	2b00      	cmp	r3, #0
 8017380:	d016      	beq.n	80173b0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017384:	3310      	adds	r3, #16
 8017386:	4618      	mov	r0, r3
 8017388:	f000 fe44 	bl	8018014 <xTaskRemoveFromEventList>
 801738c:	4603      	mov	r3, r0
 801738e:	2b00      	cmp	r3, #0
 8017390:	d00e      	beq.n	80173b0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8017392:	687b      	ldr	r3, [r7, #4]
 8017394:	2b00      	cmp	r3, #0
 8017396:	d00b      	beq.n	80173b0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8017398:	687b      	ldr	r3, [r7, #4]
 801739a:	2201      	movs	r2, #1
 801739c:	601a      	str	r2, [r3, #0]
 801739e:	e007      	b.n	80173b0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80173a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80173a4:	3301      	adds	r3, #1
 80173a6:	b2db      	uxtb	r3, r3
 80173a8:	b25a      	sxtb	r2, r3
 80173aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80173b0:	2301      	movs	r3, #1
 80173b2:	637b      	str	r3, [r7, #52]	; 0x34
 80173b4:	e001      	b.n	80173ba <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80173b6:	2300      	movs	r3, #0
 80173b8:	637b      	str	r3, [r7, #52]	; 0x34
 80173ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173bc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80173be:	693b      	ldr	r3, [r7, #16]
 80173c0:	f383 8811 	msr	BASEPRI, r3
}
 80173c4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80173c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80173c8:	4618      	mov	r0, r3
 80173ca:	3738      	adds	r7, #56	; 0x38
 80173cc:	46bd      	mov	sp, r7
 80173ce:	bd80      	pop	{r7, pc}

080173d0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80173d0:	b480      	push	{r7}
 80173d2:	b085      	sub	sp, #20
 80173d4:	af00      	add	r7, sp, #0
 80173d6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80173d8:	687b      	ldr	r3, [r7, #4]
 80173da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80173dc:	2b00      	cmp	r3, #0
 80173de:	d006      	beq.n	80173ee <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80173e0:	687b      	ldr	r3, [r7, #4]
 80173e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80173e4:	681b      	ldr	r3, [r3, #0]
 80173e6:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80173ea:	60fb      	str	r3, [r7, #12]
 80173ec:	e001      	b.n	80173f2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80173ee:	2300      	movs	r3, #0
 80173f0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80173f2:	68fb      	ldr	r3, [r7, #12]
	}
 80173f4:	4618      	mov	r0, r3
 80173f6:	3714      	adds	r7, #20
 80173f8:	46bd      	mov	sp, r7
 80173fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173fe:	4770      	bx	lr

08017400 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8017400:	b580      	push	{r7, lr}
 8017402:	b086      	sub	sp, #24
 8017404:	af00      	add	r7, sp, #0
 8017406:	60f8      	str	r0, [r7, #12]
 8017408:	60b9      	str	r1, [r7, #8]
 801740a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801740c:	2300      	movs	r3, #0
 801740e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017410:	68fb      	ldr	r3, [r7, #12]
 8017412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017414:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8017416:	68fb      	ldr	r3, [r7, #12]
 8017418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801741a:	2b00      	cmp	r3, #0
 801741c:	d10d      	bne.n	801743a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801741e:	68fb      	ldr	r3, [r7, #12]
 8017420:	681b      	ldr	r3, [r3, #0]
 8017422:	2b00      	cmp	r3, #0
 8017424:	d14d      	bne.n	80174c2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8017426:	68fb      	ldr	r3, [r7, #12]
 8017428:	689b      	ldr	r3, [r3, #8]
 801742a:	4618      	mov	r0, r3
 801742c:	f001 f8a8 	bl	8018580 <xTaskPriorityDisinherit>
 8017430:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8017432:	68fb      	ldr	r3, [r7, #12]
 8017434:	2200      	movs	r2, #0
 8017436:	609a      	str	r2, [r3, #8]
 8017438:	e043      	b.n	80174c2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801743a:	687b      	ldr	r3, [r7, #4]
 801743c:	2b00      	cmp	r3, #0
 801743e:	d119      	bne.n	8017474 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017440:	68fb      	ldr	r3, [r7, #12]
 8017442:	6858      	ldr	r0, [r3, #4]
 8017444:	68fb      	ldr	r3, [r7, #12]
 8017446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017448:	461a      	mov	r2, r3
 801744a:	68b9      	ldr	r1, [r7, #8]
 801744c:	f002 fa92 	bl	8019974 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017450:	68fb      	ldr	r3, [r7, #12]
 8017452:	685a      	ldr	r2, [r3, #4]
 8017454:	68fb      	ldr	r3, [r7, #12]
 8017456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017458:	441a      	add	r2, r3
 801745a:	68fb      	ldr	r3, [r7, #12]
 801745c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801745e:	68fb      	ldr	r3, [r7, #12]
 8017460:	685a      	ldr	r2, [r3, #4]
 8017462:	68fb      	ldr	r3, [r7, #12]
 8017464:	689b      	ldr	r3, [r3, #8]
 8017466:	429a      	cmp	r2, r3
 8017468:	d32b      	bcc.n	80174c2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801746a:	68fb      	ldr	r3, [r7, #12]
 801746c:	681a      	ldr	r2, [r3, #0]
 801746e:	68fb      	ldr	r3, [r7, #12]
 8017470:	605a      	str	r2, [r3, #4]
 8017472:	e026      	b.n	80174c2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8017474:	68fb      	ldr	r3, [r7, #12]
 8017476:	68d8      	ldr	r0, [r3, #12]
 8017478:	68fb      	ldr	r3, [r7, #12]
 801747a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801747c:	461a      	mov	r2, r3
 801747e:	68b9      	ldr	r1, [r7, #8]
 8017480:	f002 fa78 	bl	8019974 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8017484:	68fb      	ldr	r3, [r7, #12]
 8017486:	68da      	ldr	r2, [r3, #12]
 8017488:	68fb      	ldr	r3, [r7, #12]
 801748a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801748c:	425b      	negs	r3, r3
 801748e:	441a      	add	r2, r3
 8017490:	68fb      	ldr	r3, [r7, #12]
 8017492:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017494:	68fb      	ldr	r3, [r7, #12]
 8017496:	68da      	ldr	r2, [r3, #12]
 8017498:	68fb      	ldr	r3, [r7, #12]
 801749a:	681b      	ldr	r3, [r3, #0]
 801749c:	429a      	cmp	r2, r3
 801749e:	d207      	bcs.n	80174b0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80174a0:	68fb      	ldr	r3, [r7, #12]
 80174a2:	689a      	ldr	r2, [r3, #8]
 80174a4:	68fb      	ldr	r3, [r7, #12]
 80174a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80174a8:	425b      	negs	r3, r3
 80174aa:	441a      	add	r2, r3
 80174ac:	68fb      	ldr	r3, [r7, #12]
 80174ae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80174b0:	687b      	ldr	r3, [r7, #4]
 80174b2:	2b02      	cmp	r3, #2
 80174b4:	d105      	bne.n	80174c2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80174b6:	693b      	ldr	r3, [r7, #16]
 80174b8:	2b00      	cmp	r3, #0
 80174ba:	d002      	beq.n	80174c2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80174bc:	693b      	ldr	r3, [r7, #16]
 80174be:	3b01      	subs	r3, #1
 80174c0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80174c2:	693b      	ldr	r3, [r7, #16]
 80174c4:	1c5a      	adds	r2, r3, #1
 80174c6:	68fb      	ldr	r3, [r7, #12]
 80174c8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80174ca:	697b      	ldr	r3, [r7, #20]
}
 80174cc:	4618      	mov	r0, r3
 80174ce:	3718      	adds	r7, #24
 80174d0:	46bd      	mov	sp, r7
 80174d2:	bd80      	pop	{r7, pc}

080174d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80174d4:	b580      	push	{r7, lr}
 80174d6:	b082      	sub	sp, #8
 80174d8:	af00      	add	r7, sp, #0
 80174da:	6078      	str	r0, [r7, #4]
 80174dc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80174de:	687b      	ldr	r3, [r7, #4]
 80174e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80174e2:	2b00      	cmp	r3, #0
 80174e4:	d018      	beq.n	8017518 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80174e6:	687b      	ldr	r3, [r7, #4]
 80174e8:	68da      	ldr	r2, [r3, #12]
 80174ea:	687b      	ldr	r3, [r7, #4]
 80174ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80174ee:	441a      	add	r2, r3
 80174f0:	687b      	ldr	r3, [r7, #4]
 80174f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80174f4:	687b      	ldr	r3, [r7, #4]
 80174f6:	68da      	ldr	r2, [r3, #12]
 80174f8:	687b      	ldr	r3, [r7, #4]
 80174fa:	689b      	ldr	r3, [r3, #8]
 80174fc:	429a      	cmp	r2, r3
 80174fe:	d303      	bcc.n	8017508 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8017500:	687b      	ldr	r3, [r7, #4]
 8017502:	681a      	ldr	r2, [r3, #0]
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017508:	687b      	ldr	r3, [r7, #4]
 801750a:	68d9      	ldr	r1, [r3, #12]
 801750c:	687b      	ldr	r3, [r7, #4]
 801750e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017510:	461a      	mov	r2, r3
 8017512:	6838      	ldr	r0, [r7, #0]
 8017514:	f002 fa2e 	bl	8019974 <memcpy>
	}
}
 8017518:	bf00      	nop
 801751a:	3708      	adds	r7, #8
 801751c:	46bd      	mov	sp, r7
 801751e:	bd80      	pop	{r7, pc}

08017520 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8017520:	b580      	push	{r7, lr}
 8017522:	b084      	sub	sp, #16
 8017524:	af00      	add	r7, sp, #0
 8017526:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8017528:	f001 feec 	bl	8019304 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801752c:	687b      	ldr	r3, [r7, #4]
 801752e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017532:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017534:	e011      	b.n	801755a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017536:	687b      	ldr	r3, [r7, #4]
 8017538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801753a:	2b00      	cmp	r3, #0
 801753c:	d012      	beq.n	8017564 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801753e:	687b      	ldr	r3, [r7, #4]
 8017540:	3324      	adds	r3, #36	; 0x24
 8017542:	4618      	mov	r0, r3
 8017544:	f000 fd66 	bl	8018014 <xTaskRemoveFromEventList>
 8017548:	4603      	mov	r3, r0
 801754a:	2b00      	cmp	r3, #0
 801754c:	d001      	beq.n	8017552 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801754e:	f000 fe9f 	bl	8018290 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8017552:	7bfb      	ldrb	r3, [r7, #15]
 8017554:	3b01      	subs	r3, #1
 8017556:	b2db      	uxtb	r3, r3
 8017558:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801755a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801755e:	2b00      	cmp	r3, #0
 8017560:	dce9      	bgt.n	8017536 <prvUnlockQueue+0x16>
 8017562:	e000      	b.n	8017566 <prvUnlockQueue+0x46>
					break;
 8017564:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8017566:	687b      	ldr	r3, [r7, #4]
 8017568:	22ff      	movs	r2, #255	; 0xff
 801756a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801756e:	f001 fef9 	bl	8019364 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8017572:	f001 fec7 	bl	8019304 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8017576:	687b      	ldr	r3, [r7, #4]
 8017578:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801757c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801757e:	e011      	b.n	80175a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	691b      	ldr	r3, [r3, #16]
 8017584:	2b00      	cmp	r3, #0
 8017586:	d012      	beq.n	80175ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017588:	687b      	ldr	r3, [r7, #4]
 801758a:	3310      	adds	r3, #16
 801758c:	4618      	mov	r0, r3
 801758e:	f000 fd41 	bl	8018014 <xTaskRemoveFromEventList>
 8017592:	4603      	mov	r3, r0
 8017594:	2b00      	cmp	r3, #0
 8017596:	d001      	beq.n	801759c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8017598:	f000 fe7a 	bl	8018290 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801759c:	7bbb      	ldrb	r3, [r7, #14]
 801759e:	3b01      	subs	r3, #1
 80175a0:	b2db      	uxtb	r3, r3
 80175a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80175a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80175a8:	2b00      	cmp	r3, #0
 80175aa:	dce9      	bgt.n	8017580 <prvUnlockQueue+0x60>
 80175ac:	e000      	b.n	80175b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80175ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	22ff      	movs	r2, #255	; 0xff
 80175b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80175b8:	f001 fed4 	bl	8019364 <vPortExitCritical>
}
 80175bc:	bf00      	nop
 80175be:	3710      	adds	r7, #16
 80175c0:	46bd      	mov	sp, r7
 80175c2:	bd80      	pop	{r7, pc}

080175c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80175c4:	b580      	push	{r7, lr}
 80175c6:	b084      	sub	sp, #16
 80175c8:	af00      	add	r7, sp, #0
 80175ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80175cc:	f001 fe9a 	bl	8019304 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80175d0:	687b      	ldr	r3, [r7, #4]
 80175d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80175d4:	2b00      	cmp	r3, #0
 80175d6:	d102      	bne.n	80175de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80175d8:	2301      	movs	r3, #1
 80175da:	60fb      	str	r3, [r7, #12]
 80175dc:	e001      	b.n	80175e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80175de:	2300      	movs	r3, #0
 80175e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80175e2:	f001 febf 	bl	8019364 <vPortExitCritical>

	return xReturn;
 80175e6:	68fb      	ldr	r3, [r7, #12]
}
 80175e8:	4618      	mov	r0, r3
 80175ea:	3710      	adds	r7, #16
 80175ec:	46bd      	mov	sp, r7
 80175ee:	bd80      	pop	{r7, pc}

080175f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80175f0:	b580      	push	{r7, lr}
 80175f2:	b084      	sub	sp, #16
 80175f4:	af00      	add	r7, sp, #0
 80175f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80175f8:	f001 fe84 	bl	8019304 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80175fc:	687b      	ldr	r3, [r7, #4]
 80175fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017600:	687b      	ldr	r3, [r7, #4]
 8017602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017604:	429a      	cmp	r2, r3
 8017606:	d102      	bne.n	801760e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8017608:	2301      	movs	r3, #1
 801760a:	60fb      	str	r3, [r7, #12]
 801760c:	e001      	b.n	8017612 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801760e:	2300      	movs	r3, #0
 8017610:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017612:	f001 fea7 	bl	8019364 <vPortExitCritical>

	return xReturn;
 8017616:	68fb      	ldr	r3, [r7, #12]
}
 8017618:	4618      	mov	r0, r3
 801761a:	3710      	adds	r7, #16
 801761c:	46bd      	mov	sp, r7
 801761e:	bd80      	pop	{r7, pc}

08017620 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8017620:	b480      	push	{r7}
 8017622:	b085      	sub	sp, #20
 8017624:	af00      	add	r7, sp, #0
 8017626:	6078      	str	r0, [r7, #4]
 8017628:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801762a:	2300      	movs	r3, #0
 801762c:	60fb      	str	r3, [r7, #12]
 801762e:	e014      	b.n	801765a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8017630:	4a0f      	ldr	r2, [pc, #60]	; (8017670 <vQueueAddToRegistry+0x50>)
 8017632:	68fb      	ldr	r3, [r7, #12]
 8017634:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8017638:	2b00      	cmp	r3, #0
 801763a:	d10b      	bne.n	8017654 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801763c:	490c      	ldr	r1, [pc, #48]	; (8017670 <vQueueAddToRegistry+0x50>)
 801763e:	68fb      	ldr	r3, [r7, #12]
 8017640:	683a      	ldr	r2, [r7, #0]
 8017642:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8017646:	4a0a      	ldr	r2, [pc, #40]	; (8017670 <vQueueAddToRegistry+0x50>)
 8017648:	68fb      	ldr	r3, [r7, #12]
 801764a:	00db      	lsls	r3, r3, #3
 801764c:	4413      	add	r3, r2
 801764e:	687a      	ldr	r2, [r7, #4]
 8017650:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8017652:	e006      	b.n	8017662 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017654:	68fb      	ldr	r3, [r7, #12]
 8017656:	3301      	adds	r3, #1
 8017658:	60fb      	str	r3, [r7, #12]
 801765a:	68fb      	ldr	r3, [r7, #12]
 801765c:	2b07      	cmp	r3, #7
 801765e:	d9e7      	bls.n	8017630 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8017660:	bf00      	nop
 8017662:	bf00      	nop
 8017664:	3714      	adds	r7, #20
 8017666:	46bd      	mov	sp, r7
 8017668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801766c:	4770      	bx	lr
 801766e:	bf00      	nop
 8017670:	20005cc4 	.word	0x20005cc4

08017674 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8017674:	b580      	push	{r7, lr}
 8017676:	b086      	sub	sp, #24
 8017678:	af00      	add	r7, sp, #0
 801767a:	60f8      	str	r0, [r7, #12]
 801767c:	60b9      	str	r1, [r7, #8]
 801767e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8017680:	68fb      	ldr	r3, [r7, #12]
 8017682:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8017684:	f001 fe3e 	bl	8019304 <vPortEnterCritical>
 8017688:	697b      	ldr	r3, [r7, #20]
 801768a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801768e:	b25b      	sxtb	r3, r3
 8017690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017694:	d103      	bne.n	801769e <vQueueWaitForMessageRestricted+0x2a>
 8017696:	697b      	ldr	r3, [r7, #20]
 8017698:	2200      	movs	r2, #0
 801769a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801769e:	697b      	ldr	r3, [r7, #20]
 80176a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80176a4:	b25b      	sxtb	r3, r3
 80176a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80176aa:	d103      	bne.n	80176b4 <vQueueWaitForMessageRestricted+0x40>
 80176ac:	697b      	ldr	r3, [r7, #20]
 80176ae:	2200      	movs	r2, #0
 80176b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80176b4:	f001 fe56 	bl	8019364 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80176b8:	697b      	ldr	r3, [r7, #20]
 80176ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80176bc:	2b00      	cmp	r3, #0
 80176be:	d106      	bne.n	80176ce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80176c0:	697b      	ldr	r3, [r7, #20]
 80176c2:	3324      	adds	r3, #36	; 0x24
 80176c4:	687a      	ldr	r2, [r7, #4]
 80176c6:	68b9      	ldr	r1, [r7, #8]
 80176c8:	4618      	mov	r0, r3
 80176ca:	f000 fc77 	bl	8017fbc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80176ce:	6978      	ldr	r0, [r7, #20]
 80176d0:	f7ff ff26 	bl	8017520 <prvUnlockQueue>
	}
 80176d4:	bf00      	nop
 80176d6:	3718      	adds	r7, #24
 80176d8:	46bd      	mov	sp, r7
 80176da:	bd80      	pop	{r7, pc}

080176dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80176dc:	b580      	push	{r7, lr}
 80176de:	b08e      	sub	sp, #56	; 0x38
 80176e0:	af04      	add	r7, sp, #16
 80176e2:	60f8      	str	r0, [r7, #12]
 80176e4:	60b9      	str	r1, [r7, #8]
 80176e6:	607a      	str	r2, [r7, #4]
 80176e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80176ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80176ec:	2b00      	cmp	r3, #0
 80176ee:	d10a      	bne.n	8017706 <xTaskCreateStatic+0x2a>
	__asm volatile
 80176f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176f4:	f383 8811 	msr	BASEPRI, r3
 80176f8:	f3bf 8f6f 	isb	sy
 80176fc:	f3bf 8f4f 	dsb	sy
 8017700:	623b      	str	r3, [r7, #32]
}
 8017702:	bf00      	nop
 8017704:	e7fe      	b.n	8017704 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8017706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017708:	2b00      	cmp	r3, #0
 801770a:	d10a      	bne.n	8017722 <xTaskCreateStatic+0x46>
	__asm volatile
 801770c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017710:	f383 8811 	msr	BASEPRI, r3
 8017714:	f3bf 8f6f 	isb	sy
 8017718:	f3bf 8f4f 	dsb	sy
 801771c:	61fb      	str	r3, [r7, #28]
}
 801771e:	bf00      	nop
 8017720:	e7fe      	b.n	8017720 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8017722:	236c      	movs	r3, #108	; 0x6c
 8017724:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8017726:	693b      	ldr	r3, [r7, #16]
 8017728:	2b6c      	cmp	r3, #108	; 0x6c
 801772a:	d00a      	beq.n	8017742 <xTaskCreateStatic+0x66>
	__asm volatile
 801772c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017730:	f383 8811 	msr	BASEPRI, r3
 8017734:	f3bf 8f6f 	isb	sy
 8017738:	f3bf 8f4f 	dsb	sy
 801773c:	61bb      	str	r3, [r7, #24]
}
 801773e:	bf00      	nop
 8017740:	e7fe      	b.n	8017740 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8017742:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8017744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017746:	2b00      	cmp	r3, #0
 8017748:	d01e      	beq.n	8017788 <xTaskCreateStatic+0xac>
 801774a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801774c:	2b00      	cmp	r3, #0
 801774e:	d01b      	beq.n	8017788 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8017750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017752:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8017754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017756:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017758:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801775a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801775c:	2202      	movs	r2, #2
 801775e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8017762:	2300      	movs	r3, #0
 8017764:	9303      	str	r3, [sp, #12]
 8017766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017768:	9302      	str	r3, [sp, #8]
 801776a:	f107 0314 	add.w	r3, r7, #20
 801776e:	9301      	str	r3, [sp, #4]
 8017770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017772:	9300      	str	r3, [sp, #0]
 8017774:	683b      	ldr	r3, [r7, #0]
 8017776:	687a      	ldr	r2, [r7, #4]
 8017778:	68b9      	ldr	r1, [r7, #8]
 801777a:	68f8      	ldr	r0, [r7, #12]
 801777c:	f000 f850 	bl	8017820 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017780:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017782:	f000 f8dd 	bl	8017940 <prvAddNewTaskToReadyList>
 8017786:	e001      	b.n	801778c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8017788:	2300      	movs	r3, #0
 801778a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801778c:	697b      	ldr	r3, [r7, #20]
	}
 801778e:	4618      	mov	r0, r3
 8017790:	3728      	adds	r7, #40	; 0x28
 8017792:	46bd      	mov	sp, r7
 8017794:	bd80      	pop	{r7, pc}

08017796 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8017796:	b580      	push	{r7, lr}
 8017798:	b08c      	sub	sp, #48	; 0x30
 801779a:	af04      	add	r7, sp, #16
 801779c:	60f8      	str	r0, [r7, #12]
 801779e:	60b9      	str	r1, [r7, #8]
 80177a0:	603b      	str	r3, [r7, #0]
 80177a2:	4613      	mov	r3, r2
 80177a4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80177a6:	88fb      	ldrh	r3, [r7, #6]
 80177a8:	009b      	lsls	r3, r3, #2
 80177aa:	4618      	mov	r0, r3
 80177ac:	f001 fecc 	bl	8019548 <pvPortMalloc>
 80177b0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80177b2:	697b      	ldr	r3, [r7, #20]
 80177b4:	2b00      	cmp	r3, #0
 80177b6:	d00e      	beq.n	80177d6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80177b8:	206c      	movs	r0, #108	; 0x6c
 80177ba:	f001 fec5 	bl	8019548 <pvPortMalloc>
 80177be:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80177c0:	69fb      	ldr	r3, [r7, #28]
 80177c2:	2b00      	cmp	r3, #0
 80177c4:	d003      	beq.n	80177ce <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80177c6:	69fb      	ldr	r3, [r7, #28]
 80177c8:	697a      	ldr	r2, [r7, #20]
 80177ca:	631a      	str	r2, [r3, #48]	; 0x30
 80177cc:	e005      	b.n	80177da <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80177ce:	6978      	ldr	r0, [r7, #20]
 80177d0:	f001 ff86 	bl	80196e0 <vPortFree>
 80177d4:	e001      	b.n	80177da <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80177d6:	2300      	movs	r3, #0
 80177d8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80177da:	69fb      	ldr	r3, [r7, #28]
 80177dc:	2b00      	cmp	r3, #0
 80177de:	d017      	beq.n	8017810 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80177e0:	69fb      	ldr	r3, [r7, #28]
 80177e2:	2200      	movs	r2, #0
 80177e4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80177e8:	88fa      	ldrh	r2, [r7, #6]
 80177ea:	2300      	movs	r3, #0
 80177ec:	9303      	str	r3, [sp, #12]
 80177ee:	69fb      	ldr	r3, [r7, #28]
 80177f0:	9302      	str	r3, [sp, #8]
 80177f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177f4:	9301      	str	r3, [sp, #4]
 80177f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177f8:	9300      	str	r3, [sp, #0]
 80177fa:	683b      	ldr	r3, [r7, #0]
 80177fc:	68b9      	ldr	r1, [r7, #8]
 80177fe:	68f8      	ldr	r0, [r7, #12]
 8017800:	f000 f80e 	bl	8017820 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017804:	69f8      	ldr	r0, [r7, #28]
 8017806:	f000 f89b 	bl	8017940 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801780a:	2301      	movs	r3, #1
 801780c:	61bb      	str	r3, [r7, #24]
 801780e:	e002      	b.n	8017816 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8017810:	f04f 33ff 	mov.w	r3, #4294967295
 8017814:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8017816:	69bb      	ldr	r3, [r7, #24]
	}
 8017818:	4618      	mov	r0, r3
 801781a:	3720      	adds	r7, #32
 801781c:	46bd      	mov	sp, r7
 801781e:	bd80      	pop	{r7, pc}

08017820 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8017820:	b580      	push	{r7, lr}
 8017822:	b088      	sub	sp, #32
 8017824:	af00      	add	r7, sp, #0
 8017826:	60f8      	str	r0, [r7, #12]
 8017828:	60b9      	str	r1, [r7, #8]
 801782a:	607a      	str	r2, [r7, #4]
 801782c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801782e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017830:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8017832:	687b      	ldr	r3, [r7, #4]
 8017834:	009b      	lsls	r3, r3, #2
 8017836:	461a      	mov	r2, r3
 8017838:	21a5      	movs	r1, #165	; 0xa5
 801783a:	f002 f8a9 	bl	8019990 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801783e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017840:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017842:	687b      	ldr	r3, [r7, #4]
 8017844:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8017848:	3b01      	subs	r3, #1
 801784a:	009b      	lsls	r3, r3, #2
 801784c:	4413      	add	r3, r2
 801784e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8017850:	69bb      	ldr	r3, [r7, #24]
 8017852:	f023 0307 	bic.w	r3, r3, #7
 8017856:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8017858:	69bb      	ldr	r3, [r7, #24]
 801785a:	f003 0307 	and.w	r3, r3, #7
 801785e:	2b00      	cmp	r3, #0
 8017860:	d00a      	beq.n	8017878 <prvInitialiseNewTask+0x58>
	__asm volatile
 8017862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017866:	f383 8811 	msr	BASEPRI, r3
 801786a:	f3bf 8f6f 	isb	sy
 801786e:	f3bf 8f4f 	dsb	sy
 8017872:	617b      	str	r3, [r7, #20]
}
 8017874:	bf00      	nop
 8017876:	e7fe      	b.n	8017876 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8017878:	68bb      	ldr	r3, [r7, #8]
 801787a:	2b00      	cmp	r3, #0
 801787c:	d01f      	beq.n	80178be <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801787e:	2300      	movs	r3, #0
 8017880:	61fb      	str	r3, [r7, #28]
 8017882:	e012      	b.n	80178aa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8017884:	68ba      	ldr	r2, [r7, #8]
 8017886:	69fb      	ldr	r3, [r7, #28]
 8017888:	4413      	add	r3, r2
 801788a:	7819      	ldrb	r1, [r3, #0]
 801788c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801788e:	69fb      	ldr	r3, [r7, #28]
 8017890:	4413      	add	r3, r2
 8017892:	3334      	adds	r3, #52	; 0x34
 8017894:	460a      	mov	r2, r1
 8017896:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8017898:	68ba      	ldr	r2, [r7, #8]
 801789a:	69fb      	ldr	r3, [r7, #28]
 801789c:	4413      	add	r3, r2
 801789e:	781b      	ldrb	r3, [r3, #0]
 80178a0:	2b00      	cmp	r3, #0
 80178a2:	d006      	beq.n	80178b2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80178a4:	69fb      	ldr	r3, [r7, #28]
 80178a6:	3301      	adds	r3, #1
 80178a8:	61fb      	str	r3, [r7, #28]
 80178aa:	69fb      	ldr	r3, [r7, #28]
 80178ac:	2b1f      	cmp	r3, #31
 80178ae:	d9e9      	bls.n	8017884 <prvInitialiseNewTask+0x64>
 80178b0:	e000      	b.n	80178b4 <prvInitialiseNewTask+0x94>
			{
				break;
 80178b2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80178b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178b6:	2200      	movs	r2, #0
 80178b8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80178bc:	e003      	b.n	80178c6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80178be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178c0:	2200      	movs	r2, #0
 80178c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80178c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178c8:	2b37      	cmp	r3, #55	; 0x37
 80178ca:	d901      	bls.n	80178d0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80178cc:	2337      	movs	r3, #55	; 0x37
 80178ce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80178d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80178d4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80178d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80178da:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 80178dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178de:	2200      	movs	r2, #0
 80178e0:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80178e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178e4:	3304      	adds	r3, #4
 80178e6:	4618      	mov	r0, r3
 80178e8:	f7fe fee4 	bl	80166b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80178ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178ee:	3318      	adds	r3, #24
 80178f0:	4618      	mov	r0, r3
 80178f2:	f7fe fedf 	bl	80166b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80178f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80178fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80178fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017904:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8017906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017908:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801790a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801790c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801790e:	2200      	movs	r2, #0
 8017910:	665a      	str	r2, [r3, #100]	; 0x64
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8017912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017914:	2200      	movs	r2, #0
 8017916:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801791a:	683a      	ldr	r2, [r7, #0]
 801791c:	68f9      	ldr	r1, [r7, #12]
 801791e:	69b8      	ldr	r0, [r7, #24]
 8017920:	f001 fbc6 	bl	80190b0 <pxPortInitialiseStack>
 8017924:	4602      	mov	r2, r0
 8017926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017928:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801792a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801792c:	2b00      	cmp	r3, #0
 801792e:	d002      	beq.n	8017936 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8017930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017932:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017934:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017936:	bf00      	nop
 8017938:	3720      	adds	r7, #32
 801793a:	46bd      	mov	sp, r7
 801793c:	bd80      	pop	{r7, pc}
	...

08017940 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8017940:	b580      	push	{r7, lr}
 8017942:	b082      	sub	sp, #8
 8017944:	af00      	add	r7, sp, #0
 8017946:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8017948:	f001 fcdc 	bl	8019304 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801794c:	4b2d      	ldr	r3, [pc, #180]	; (8017a04 <prvAddNewTaskToReadyList+0xc4>)
 801794e:	681b      	ldr	r3, [r3, #0]
 8017950:	3301      	adds	r3, #1
 8017952:	4a2c      	ldr	r2, [pc, #176]	; (8017a04 <prvAddNewTaskToReadyList+0xc4>)
 8017954:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8017956:	4b2c      	ldr	r3, [pc, #176]	; (8017a08 <prvAddNewTaskToReadyList+0xc8>)
 8017958:	681b      	ldr	r3, [r3, #0]
 801795a:	2b00      	cmp	r3, #0
 801795c:	d109      	bne.n	8017972 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801795e:	4a2a      	ldr	r2, [pc, #168]	; (8017a08 <prvAddNewTaskToReadyList+0xc8>)
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8017964:	4b27      	ldr	r3, [pc, #156]	; (8017a04 <prvAddNewTaskToReadyList+0xc4>)
 8017966:	681b      	ldr	r3, [r3, #0]
 8017968:	2b01      	cmp	r3, #1
 801796a:	d110      	bne.n	801798e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801796c:	f000 fcb4 	bl	80182d8 <prvInitialiseTaskLists>
 8017970:	e00d      	b.n	801798e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8017972:	4b26      	ldr	r3, [pc, #152]	; (8017a0c <prvAddNewTaskToReadyList+0xcc>)
 8017974:	681b      	ldr	r3, [r3, #0]
 8017976:	2b00      	cmp	r3, #0
 8017978:	d109      	bne.n	801798e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801797a:	4b23      	ldr	r3, [pc, #140]	; (8017a08 <prvAddNewTaskToReadyList+0xc8>)
 801797c:	681b      	ldr	r3, [r3, #0]
 801797e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017980:	687b      	ldr	r3, [r7, #4]
 8017982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017984:	429a      	cmp	r2, r3
 8017986:	d802      	bhi.n	801798e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8017988:	4a1f      	ldr	r2, [pc, #124]	; (8017a08 <prvAddNewTaskToReadyList+0xc8>)
 801798a:	687b      	ldr	r3, [r7, #4]
 801798c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801798e:	4b20      	ldr	r3, [pc, #128]	; (8017a10 <prvAddNewTaskToReadyList+0xd0>)
 8017990:	681b      	ldr	r3, [r3, #0]
 8017992:	3301      	adds	r3, #1
 8017994:	4a1e      	ldr	r2, [pc, #120]	; (8017a10 <prvAddNewTaskToReadyList+0xd0>)
 8017996:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8017998:	4b1d      	ldr	r3, [pc, #116]	; (8017a10 <prvAddNewTaskToReadyList+0xd0>)
 801799a:	681a      	ldr	r2, [r3, #0]
 801799c:	687b      	ldr	r3, [r7, #4]
 801799e:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80179a0:	687b      	ldr	r3, [r7, #4]
 80179a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80179a4:	4b1b      	ldr	r3, [pc, #108]	; (8017a14 <prvAddNewTaskToReadyList+0xd4>)
 80179a6:	681b      	ldr	r3, [r3, #0]
 80179a8:	429a      	cmp	r2, r3
 80179aa:	d903      	bls.n	80179b4 <prvAddNewTaskToReadyList+0x74>
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80179b0:	4a18      	ldr	r2, [pc, #96]	; (8017a14 <prvAddNewTaskToReadyList+0xd4>)
 80179b2:	6013      	str	r3, [r2, #0]
 80179b4:	687b      	ldr	r3, [r7, #4]
 80179b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80179b8:	4613      	mov	r3, r2
 80179ba:	009b      	lsls	r3, r3, #2
 80179bc:	4413      	add	r3, r2
 80179be:	009b      	lsls	r3, r3, #2
 80179c0:	4a15      	ldr	r2, [pc, #84]	; (8017a18 <prvAddNewTaskToReadyList+0xd8>)
 80179c2:	441a      	add	r2, r3
 80179c4:	687b      	ldr	r3, [r7, #4]
 80179c6:	3304      	adds	r3, #4
 80179c8:	4619      	mov	r1, r3
 80179ca:	4610      	mov	r0, r2
 80179cc:	f7fe fe7f 	bl	80166ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80179d0:	f001 fcc8 	bl	8019364 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80179d4:	4b0d      	ldr	r3, [pc, #52]	; (8017a0c <prvAddNewTaskToReadyList+0xcc>)
 80179d6:	681b      	ldr	r3, [r3, #0]
 80179d8:	2b00      	cmp	r3, #0
 80179da:	d00e      	beq.n	80179fa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80179dc:	4b0a      	ldr	r3, [pc, #40]	; (8017a08 <prvAddNewTaskToReadyList+0xc8>)
 80179de:	681b      	ldr	r3, [r3, #0]
 80179e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80179e2:	687b      	ldr	r3, [r7, #4]
 80179e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80179e6:	429a      	cmp	r2, r3
 80179e8:	d207      	bcs.n	80179fa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80179ea:	4b0c      	ldr	r3, [pc, #48]	; (8017a1c <prvAddNewTaskToReadyList+0xdc>)
 80179ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80179f0:	601a      	str	r2, [r3, #0]
 80179f2:	f3bf 8f4f 	dsb	sy
 80179f6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80179fa:	bf00      	nop
 80179fc:	3708      	adds	r7, #8
 80179fe:	46bd      	mov	sp, r7
 8017a00:	bd80      	pop	{r7, pc}
 8017a02:	bf00      	nop
 8017a04:	200061d8 	.word	0x200061d8
 8017a08:	20005d04 	.word	0x20005d04
 8017a0c:	200061e4 	.word	0x200061e4
 8017a10:	200061f4 	.word	0x200061f4
 8017a14:	200061e0 	.word	0x200061e0
 8017a18:	20005d08 	.word	0x20005d08
 8017a1c:	e000ed04 	.word	0xe000ed04

08017a20 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8017a20:	b580      	push	{r7, lr}
 8017a22:	b084      	sub	sp, #16
 8017a24:	af00      	add	r7, sp, #0
 8017a26:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8017a28:	2300      	movs	r3, #0
 8017a2a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8017a2c:	687b      	ldr	r3, [r7, #4]
 8017a2e:	2b00      	cmp	r3, #0
 8017a30:	d017      	beq.n	8017a62 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8017a32:	4b13      	ldr	r3, [pc, #76]	; (8017a80 <vTaskDelay+0x60>)
 8017a34:	681b      	ldr	r3, [r3, #0]
 8017a36:	2b00      	cmp	r3, #0
 8017a38:	d00a      	beq.n	8017a50 <vTaskDelay+0x30>
	__asm volatile
 8017a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a3e:	f383 8811 	msr	BASEPRI, r3
 8017a42:	f3bf 8f6f 	isb	sy
 8017a46:	f3bf 8f4f 	dsb	sy
 8017a4a:	60bb      	str	r3, [r7, #8]
}
 8017a4c:	bf00      	nop
 8017a4e:	e7fe      	b.n	8017a4e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8017a50:	f000 f880 	bl	8017b54 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8017a54:	2100      	movs	r1, #0
 8017a56:	6878      	ldr	r0, [r7, #4]
 8017a58:	f000 feae 	bl	80187b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8017a5c:	f000 f888 	bl	8017b70 <xTaskResumeAll>
 8017a60:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8017a62:	68fb      	ldr	r3, [r7, #12]
 8017a64:	2b00      	cmp	r3, #0
 8017a66:	d107      	bne.n	8017a78 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8017a68:	4b06      	ldr	r3, [pc, #24]	; (8017a84 <vTaskDelay+0x64>)
 8017a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017a6e:	601a      	str	r2, [r3, #0]
 8017a70:	f3bf 8f4f 	dsb	sy
 8017a74:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017a78:	bf00      	nop
 8017a7a:	3710      	adds	r7, #16
 8017a7c:	46bd      	mov	sp, r7
 8017a7e:	bd80      	pop	{r7, pc}
 8017a80:	20006200 	.word	0x20006200
 8017a84:	e000ed04 	.word	0xe000ed04

08017a88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8017a88:	b580      	push	{r7, lr}
 8017a8a:	b08a      	sub	sp, #40	; 0x28
 8017a8c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8017a8e:	2300      	movs	r3, #0
 8017a90:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8017a92:	2300      	movs	r3, #0
 8017a94:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8017a96:	463a      	mov	r2, r7
 8017a98:	1d39      	adds	r1, r7, #4
 8017a9a:	f107 0308 	add.w	r3, r7, #8
 8017a9e:	4618      	mov	r0, r3
 8017aa0:	f7fe fb48 	bl	8016134 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8017aa4:	6839      	ldr	r1, [r7, #0]
 8017aa6:	687b      	ldr	r3, [r7, #4]
 8017aa8:	68ba      	ldr	r2, [r7, #8]
 8017aaa:	9202      	str	r2, [sp, #8]
 8017aac:	9301      	str	r3, [sp, #4]
 8017aae:	2300      	movs	r3, #0
 8017ab0:	9300      	str	r3, [sp, #0]
 8017ab2:	2300      	movs	r3, #0
 8017ab4:	460a      	mov	r2, r1
 8017ab6:	4921      	ldr	r1, [pc, #132]	; (8017b3c <vTaskStartScheduler+0xb4>)
 8017ab8:	4821      	ldr	r0, [pc, #132]	; (8017b40 <vTaskStartScheduler+0xb8>)
 8017aba:	f7ff fe0f 	bl	80176dc <xTaskCreateStatic>
 8017abe:	4603      	mov	r3, r0
 8017ac0:	4a20      	ldr	r2, [pc, #128]	; (8017b44 <vTaskStartScheduler+0xbc>)
 8017ac2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8017ac4:	4b1f      	ldr	r3, [pc, #124]	; (8017b44 <vTaskStartScheduler+0xbc>)
 8017ac6:	681b      	ldr	r3, [r3, #0]
 8017ac8:	2b00      	cmp	r3, #0
 8017aca:	d002      	beq.n	8017ad2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8017acc:	2301      	movs	r3, #1
 8017ace:	617b      	str	r3, [r7, #20]
 8017ad0:	e001      	b.n	8017ad6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8017ad2:	2300      	movs	r3, #0
 8017ad4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8017ad6:	697b      	ldr	r3, [r7, #20]
 8017ad8:	2b01      	cmp	r3, #1
 8017ada:	d102      	bne.n	8017ae2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8017adc:	f000 fec0 	bl	8018860 <xTimerCreateTimerTask>
 8017ae0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8017ae2:	697b      	ldr	r3, [r7, #20]
 8017ae4:	2b01      	cmp	r3, #1
 8017ae6:	d116      	bne.n	8017b16 <vTaskStartScheduler+0x8e>
	__asm volatile
 8017ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017aec:	f383 8811 	msr	BASEPRI, r3
 8017af0:	f3bf 8f6f 	isb	sy
 8017af4:	f3bf 8f4f 	dsb	sy
 8017af8:	613b      	str	r3, [r7, #16]
}
 8017afa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8017afc:	4b12      	ldr	r3, [pc, #72]	; (8017b48 <vTaskStartScheduler+0xc0>)
 8017afe:	f04f 32ff 	mov.w	r2, #4294967295
 8017b02:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8017b04:	4b11      	ldr	r3, [pc, #68]	; (8017b4c <vTaskStartScheduler+0xc4>)
 8017b06:	2201      	movs	r2, #1
 8017b08:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8017b0a:	4b11      	ldr	r3, [pc, #68]	; (8017b50 <vTaskStartScheduler+0xc8>)
 8017b0c:	2200      	movs	r2, #0
 8017b0e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8017b10:	f001 fb56 	bl	80191c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8017b14:	e00e      	b.n	8017b34 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8017b16:	697b      	ldr	r3, [r7, #20]
 8017b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017b1c:	d10a      	bne.n	8017b34 <vTaskStartScheduler+0xac>
	__asm volatile
 8017b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b22:	f383 8811 	msr	BASEPRI, r3
 8017b26:	f3bf 8f6f 	isb	sy
 8017b2a:	f3bf 8f4f 	dsb	sy
 8017b2e:	60fb      	str	r3, [r7, #12]
}
 8017b30:	bf00      	nop
 8017b32:	e7fe      	b.n	8017b32 <vTaskStartScheduler+0xaa>
}
 8017b34:	bf00      	nop
 8017b36:	3718      	adds	r7, #24
 8017b38:	46bd      	mov	sp, r7
 8017b3a:	bd80      	pop	{r7, pc}
 8017b3c:	08020540 	.word	0x08020540
 8017b40:	080182a9 	.word	0x080182a9
 8017b44:	200061fc 	.word	0x200061fc
 8017b48:	200061f8 	.word	0x200061f8
 8017b4c:	200061e4 	.word	0x200061e4
 8017b50:	200061dc 	.word	0x200061dc

08017b54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8017b54:	b480      	push	{r7}
 8017b56:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8017b58:	4b04      	ldr	r3, [pc, #16]	; (8017b6c <vTaskSuspendAll+0x18>)
 8017b5a:	681b      	ldr	r3, [r3, #0]
 8017b5c:	3301      	adds	r3, #1
 8017b5e:	4a03      	ldr	r2, [pc, #12]	; (8017b6c <vTaskSuspendAll+0x18>)
 8017b60:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8017b62:	bf00      	nop
 8017b64:	46bd      	mov	sp, r7
 8017b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b6a:	4770      	bx	lr
 8017b6c:	20006200 	.word	0x20006200

08017b70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8017b70:	b580      	push	{r7, lr}
 8017b72:	b084      	sub	sp, #16
 8017b74:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8017b76:	2300      	movs	r3, #0
 8017b78:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8017b7a:	2300      	movs	r3, #0
 8017b7c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8017b7e:	4b42      	ldr	r3, [pc, #264]	; (8017c88 <xTaskResumeAll+0x118>)
 8017b80:	681b      	ldr	r3, [r3, #0]
 8017b82:	2b00      	cmp	r3, #0
 8017b84:	d10a      	bne.n	8017b9c <xTaskResumeAll+0x2c>
	__asm volatile
 8017b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b8a:	f383 8811 	msr	BASEPRI, r3
 8017b8e:	f3bf 8f6f 	isb	sy
 8017b92:	f3bf 8f4f 	dsb	sy
 8017b96:	603b      	str	r3, [r7, #0]
}
 8017b98:	bf00      	nop
 8017b9a:	e7fe      	b.n	8017b9a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8017b9c:	f001 fbb2 	bl	8019304 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8017ba0:	4b39      	ldr	r3, [pc, #228]	; (8017c88 <xTaskResumeAll+0x118>)
 8017ba2:	681b      	ldr	r3, [r3, #0]
 8017ba4:	3b01      	subs	r3, #1
 8017ba6:	4a38      	ldr	r2, [pc, #224]	; (8017c88 <xTaskResumeAll+0x118>)
 8017ba8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017baa:	4b37      	ldr	r3, [pc, #220]	; (8017c88 <xTaskResumeAll+0x118>)
 8017bac:	681b      	ldr	r3, [r3, #0]
 8017bae:	2b00      	cmp	r3, #0
 8017bb0:	d162      	bne.n	8017c78 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8017bb2:	4b36      	ldr	r3, [pc, #216]	; (8017c8c <xTaskResumeAll+0x11c>)
 8017bb4:	681b      	ldr	r3, [r3, #0]
 8017bb6:	2b00      	cmp	r3, #0
 8017bb8:	d05e      	beq.n	8017c78 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8017bba:	e02f      	b.n	8017c1c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017bbc:	4b34      	ldr	r3, [pc, #208]	; (8017c90 <xTaskResumeAll+0x120>)
 8017bbe:	68db      	ldr	r3, [r3, #12]
 8017bc0:	68db      	ldr	r3, [r3, #12]
 8017bc2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017bc4:	68fb      	ldr	r3, [r7, #12]
 8017bc6:	3318      	adds	r3, #24
 8017bc8:	4618      	mov	r0, r3
 8017bca:	f7fe fddd 	bl	8016788 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017bce:	68fb      	ldr	r3, [r7, #12]
 8017bd0:	3304      	adds	r3, #4
 8017bd2:	4618      	mov	r0, r3
 8017bd4:	f7fe fdd8 	bl	8016788 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8017bd8:	68fb      	ldr	r3, [r7, #12]
 8017bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017bdc:	4b2d      	ldr	r3, [pc, #180]	; (8017c94 <xTaskResumeAll+0x124>)
 8017bde:	681b      	ldr	r3, [r3, #0]
 8017be0:	429a      	cmp	r2, r3
 8017be2:	d903      	bls.n	8017bec <xTaskResumeAll+0x7c>
 8017be4:	68fb      	ldr	r3, [r7, #12]
 8017be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017be8:	4a2a      	ldr	r2, [pc, #168]	; (8017c94 <xTaskResumeAll+0x124>)
 8017bea:	6013      	str	r3, [r2, #0]
 8017bec:	68fb      	ldr	r3, [r7, #12]
 8017bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017bf0:	4613      	mov	r3, r2
 8017bf2:	009b      	lsls	r3, r3, #2
 8017bf4:	4413      	add	r3, r2
 8017bf6:	009b      	lsls	r3, r3, #2
 8017bf8:	4a27      	ldr	r2, [pc, #156]	; (8017c98 <xTaskResumeAll+0x128>)
 8017bfa:	441a      	add	r2, r3
 8017bfc:	68fb      	ldr	r3, [r7, #12]
 8017bfe:	3304      	adds	r3, #4
 8017c00:	4619      	mov	r1, r3
 8017c02:	4610      	mov	r0, r2
 8017c04:	f7fe fd63 	bl	80166ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017c08:	68fb      	ldr	r3, [r7, #12]
 8017c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017c0c:	4b23      	ldr	r3, [pc, #140]	; (8017c9c <xTaskResumeAll+0x12c>)
 8017c0e:	681b      	ldr	r3, [r3, #0]
 8017c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017c12:	429a      	cmp	r2, r3
 8017c14:	d302      	bcc.n	8017c1c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8017c16:	4b22      	ldr	r3, [pc, #136]	; (8017ca0 <xTaskResumeAll+0x130>)
 8017c18:	2201      	movs	r2, #1
 8017c1a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8017c1c:	4b1c      	ldr	r3, [pc, #112]	; (8017c90 <xTaskResumeAll+0x120>)
 8017c1e:	681b      	ldr	r3, [r3, #0]
 8017c20:	2b00      	cmp	r3, #0
 8017c22:	d1cb      	bne.n	8017bbc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8017c24:	68fb      	ldr	r3, [r7, #12]
 8017c26:	2b00      	cmp	r3, #0
 8017c28:	d001      	beq.n	8017c2e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8017c2a:	f000 fbf3 	bl	8018414 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8017c2e:	4b1d      	ldr	r3, [pc, #116]	; (8017ca4 <xTaskResumeAll+0x134>)
 8017c30:	681b      	ldr	r3, [r3, #0]
 8017c32:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8017c34:	687b      	ldr	r3, [r7, #4]
 8017c36:	2b00      	cmp	r3, #0
 8017c38:	d010      	beq.n	8017c5c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8017c3a:	f000 f847 	bl	8017ccc <xTaskIncrementTick>
 8017c3e:	4603      	mov	r3, r0
 8017c40:	2b00      	cmp	r3, #0
 8017c42:	d002      	beq.n	8017c4a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8017c44:	4b16      	ldr	r3, [pc, #88]	; (8017ca0 <xTaskResumeAll+0x130>)
 8017c46:	2201      	movs	r2, #1
 8017c48:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8017c4a:	687b      	ldr	r3, [r7, #4]
 8017c4c:	3b01      	subs	r3, #1
 8017c4e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8017c50:	687b      	ldr	r3, [r7, #4]
 8017c52:	2b00      	cmp	r3, #0
 8017c54:	d1f1      	bne.n	8017c3a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8017c56:	4b13      	ldr	r3, [pc, #76]	; (8017ca4 <xTaskResumeAll+0x134>)
 8017c58:	2200      	movs	r2, #0
 8017c5a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8017c5c:	4b10      	ldr	r3, [pc, #64]	; (8017ca0 <xTaskResumeAll+0x130>)
 8017c5e:	681b      	ldr	r3, [r3, #0]
 8017c60:	2b00      	cmp	r3, #0
 8017c62:	d009      	beq.n	8017c78 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8017c64:	2301      	movs	r3, #1
 8017c66:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8017c68:	4b0f      	ldr	r3, [pc, #60]	; (8017ca8 <xTaskResumeAll+0x138>)
 8017c6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017c6e:	601a      	str	r2, [r3, #0]
 8017c70:	f3bf 8f4f 	dsb	sy
 8017c74:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8017c78:	f001 fb74 	bl	8019364 <vPortExitCritical>

	return xAlreadyYielded;
 8017c7c:	68bb      	ldr	r3, [r7, #8]
}
 8017c7e:	4618      	mov	r0, r3
 8017c80:	3710      	adds	r7, #16
 8017c82:	46bd      	mov	sp, r7
 8017c84:	bd80      	pop	{r7, pc}
 8017c86:	bf00      	nop
 8017c88:	20006200 	.word	0x20006200
 8017c8c:	200061d8 	.word	0x200061d8
 8017c90:	20006198 	.word	0x20006198
 8017c94:	200061e0 	.word	0x200061e0
 8017c98:	20005d08 	.word	0x20005d08
 8017c9c:	20005d04 	.word	0x20005d04
 8017ca0:	200061ec 	.word	0x200061ec
 8017ca4:	200061e8 	.word	0x200061e8
 8017ca8:	e000ed04 	.word	0xe000ed04

08017cac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8017cac:	b480      	push	{r7}
 8017cae:	b083      	sub	sp, #12
 8017cb0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8017cb2:	4b05      	ldr	r3, [pc, #20]	; (8017cc8 <xTaskGetTickCount+0x1c>)
 8017cb4:	681b      	ldr	r3, [r3, #0]
 8017cb6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8017cb8:	687b      	ldr	r3, [r7, #4]
}
 8017cba:	4618      	mov	r0, r3
 8017cbc:	370c      	adds	r7, #12
 8017cbe:	46bd      	mov	sp, r7
 8017cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cc4:	4770      	bx	lr
 8017cc6:	bf00      	nop
 8017cc8:	200061dc 	.word	0x200061dc

08017ccc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8017ccc:	b580      	push	{r7, lr}
 8017cce:	b086      	sub	sp, #24
 8017cd0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8017cd2:	2300      	movs	r3, #0
 8017cd4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017cd6:	4b4f      	ldr	r3, [pc, #316]	; (8017e14 <xTaskIncrementTick+0x148>)
 8017cd8:	681b      	ldr	r3, [r3, #0]
 8017cda:	2b00      	cmp	r3, #0
 8017cdc:	f040 808f 	bne.w	8017dfe <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8017ce0:	4b4d      	ldr	r3, [pc, #308]	; (8017e18 <xTaskIncrementTick+0x14c>)
 8017ce2:	681b      	ldr	r3, [r3, #0]
 8017ce4:	3301      	adds	r3, #1
 8017ce6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8017ce8:	4a4b      	ldr	r2, [pc, #300]	; (8017e18 <xTaskIncrementTick+0x14c>)
 8017cea:	693b      	ldr	r3, [r7, #16]
 8017cec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8017cee:	693b      	ldr	r3, [r7, #16]
 8017cf0:	2b00      	cmp	r3, #0
 8017cf2:	d120      	bne.n	8017d36 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8017cf4:	4b49      	ldr	r3, [pc, #292]	; (8017e1c <xTaskIncrementTick+0x150>)
 8017cf6:	681b      	ldr	r3, [r3, #0]
 8017cf8:	681b      	ldr	r3, [r3, #0]
 8017cfa:	2b00      	cmp	r3, #0
 8017cfc:	d00a      	beq.n	8017d14 <xTaskIncrementTick+0x48>
	__asm volatile
 8017cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d02:	f383 8811 	msr	BASEPRI, r3
 8017d06:	f3bf 8f6f 	isb	sy
 8017d0a:	f3bf 8f4f 	dsb	sy
 8017d0e:	603b      	str	r3, [r7, #0]
}
 8017d10:	bf00      	nop
 8017d12:	e7fe      	b.n	8017d12 <xTaskIncrementTick+0x46>
 8017d14:	4b41      	ldr	r3, [pc, #260]	; (8017e1c <xTaskIncrementTick+0x150>)
 8017d16:	681b      	ldr	r3, [r3, #0]
 8017d18:	60fb      	str	r3, [r7, #12]
 8017d1a:	4b41      	ldr	r3, [pc, #260]	; (8017e20 <xTaskIncrementTick+0x154>)
 8017d1c:	681b      	ldr	r3, [r3, #0]
 8017d1e:	4a3f      	ldr	r2, [pc, #252]	; (8017e1c <xTaskIncrementTick+0x150>)
 8017d20:	6013      	str	r3, [r2, #0]
 8017d22:	4a3f      	ldr	r2, [pc, #252]	; (8017e20 <xTaskIncrementTick+0x154>)
 8017d24:	68fb      	ldr	r3, [r7, #12]
 8017d26:	6013      	str	r3, [r2, #0]
 8017d28:	4b3e      	ldr	r3, [pc, #248]	; (8017e24 <xTaskIncrementTick+0x158>)
 8017d2a:	681b      	ldr	r3, [r3, #0]
 8017d2c:	3301      	adds	r3, #1
 8017d2e:	4a3d      	ldr	r2, [pc, #244]	; (8017e24 <xTaskIncrementTick+0x158>)
 8017d30:	6013      	str	r3, [r2, #0]
 8017d32:	f000 fb6f 	bl	8018414 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8017d36:	4b3c      	ldr	r3, [pc, #240]	; (8017e28 <xTaskIncrementTick+0x15c>)
 8017d38:	681b      	ldr	r3, [r3, #0]
 8017d3a:	693a      	ldr	r2, [r7, #16]
 8017d3c:	429a      	cmp	r2, r3
 8017d3e:	d349      	bcc.n	8017dd4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017d40:	4b36      	ldr	r3, [pc, #216]	; (8017e1c <xTaskIncrementTick+0x150>)
 8017d42:	681b      	ldr	r3, [r3, #0]
 8017d44:	681b      	ldr	r3, [r3, #0]
 8017d46:	2b00      	cmp	r3, #0
 8017d48:	d104      	bne.n	8017d54 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017d4a:	4b37      	ldr	r3, [pc, #220]	; (8017e28 <xTaskIncrementTick+0x15c>)
 8017d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8017d50:	601a      	str	r2, [r3, #0]
					break;
 8017d52:	e03f      	b.n	8017dd4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017d54:	4b31      	ldr	r3, [pc, #196]	; (8017e1c <xTaskIncrementTick+0x150>)
 8017d56:	681b      	ldr	r3, [r3, #0]
 8017d58:	68db      	ldr	r3, [r3, #12]
 8017d5a:	68db      	ldr	r3, [r3, #12]
 8017d5c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8017d5e:	68bb      	ldr	r3, [r7, #8]
 8017d60:	685b      	ldr	r3, [r3, #4]
 8017d62:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8017d64:	693a      	ldr	r2, [r7, #16]
 8017d66:	687b      	ldr	r3, [r7, #4]
 8017d68:	429a      	cmp	r2, r3
 8017d6a:	d203      	bcs.n	8017d74 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8017d6c:	4a2e      	ldr	r2, [pc, #184]	; (8017e28 <xTaskIncrementTick+0x15c>)
 8017d6e:	687b      	ldr	r3, [r7, #4]
 8017d70:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8017d72:	e02f      	b.n	8017dd4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017d74:	68bb      	ldr	r3, [r7, #8]
 8017d76:	3304      	adds	r3, #4
 8017d78:	4618      	mov	r0, r3
 8017d7a:	f7fe fd05 	bl	8016788 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8017d7e:	68bb      	ldr	r3, [r7, #8]
 8017d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017d82:	2b00      	cmp	r3, #0
 8017d84:	d004      	beq.n	8017d90 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017d86:	68bb      	ldr	r3, [r7, #8]
 8017d88:	3318      	adds	r3, #24
 8017d8a:	4618      	mov	r0, r3
 8017d8c:	f7fe fcfc 	bl	8016788 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8017d90:	68bb      	ldr	r3, [r7, #8]
 8017d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017d94:	4b25      	ldr	r3, [pc, #148]	; (8017e2c <xTaskIncrementTick+0x160>)
 8017d96:	681b      	ldr	r3, [r3, #0]
 8017d98:	429a      	cmp	r2, r3
 8017d9a:	d903      	bls.n	8017da4 <xTaskIncrementTick+0xd8>
 8017d9c:	68bb      	ldr	r3, [r7, #8]
 8017d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017da0:	4a22      	ldr	r2, [pc, #136]	; (8017e2c <xTaskIncrementTick+0x160>)
 8017da2:	6013      	str	r3, [r2, #0]
 8017da4:	68bb      	ldr	r3, [r7, #8]
 8017da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017da8:	4613      	mov	r3, r2
 8017daa:	009b      	lsls	r3, r3, #2
 8017dac:	4413      	add	r3, r2
 8017dae:	009b      	lsls	r3, r3, #2
 8017db0:	4a1f      	ldr	r2, [pc, #124]	; (8017e30 <xTaskIncrementTick+0x164>)
 8017db2:	441a      	add	r2, r3
 8017db4:	68bb      	ldr	r3, [r7, #8]
 8017db6:	3304      	adds	r3, #4
 8017db8:	4619      	mov	r1, r3
 8017dba:	4610      	mov	r0, r2
 8017dbc:	f7fe fc87 	bl	80166ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017dc0:	68bb      	ldr	r3, [r7, #8]
 8017dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017dc4:	4b1b      	ldr	r3, [pc, #108]	; (8017e34 <xTaskIncrementTick+0x168>)
 8017dc6:	681b      	ldr	r3, [r3, #0]
 8017dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017dca:	429a      	cmp	r2, r3
 8017dcc:	d3b8      	bcc.n	8017d40 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8017dce:	2301      	movs	r3, #1
 8017dd0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017dd2:	e7b5      	b.n	8017d40 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8017dd4:	4b17      	ldr	r3, [pc, #92]	; (8017e34 <xTaskIncrementTick+0x168>)
 8017dd6:	681b      	ldr	r3, [r3, #0]
 8017dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017dda:	4915      	ldr	r1, [pc, #84]	; (8017e30 <xTaskIncrementTick+0x164>)
 8017ddc:	4613      	mov	r3, r2
 8017dde:	009b      	lsls	r3, r3, #2
 8017de0:	4413      	add	r3, r2
 8017de2:	009b      	lsls	r3, r3, #2
 8017de4:	440b      	add	r3, r1
 8017de6:	681b      	ldr	r3, [r3, #0]
 8017de8:	2b01      	cmp	r3, #1
 8017dea:	d901      	bls.n	8017df0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8017dec:	2301      	movs	r3, #1
 8017dee:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8017df0:	4b11      	ldr	r3, [pc, #68]	; (8017e38 <xTaskIncrementTick+0x16c>)
 8017df2:	681b      	ldr	r3, [r3, #0]
 8017df4:	2b00      	cmp	r3, #0
 8017df6:	d007      	beq.n	8017e08 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8017df8:	2301      	movs	r3, #1
 8017dfa:	617b      	str	r3, [r7, #20]
 8017dfc:	e004      	b.n	8017e08 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8017dfe:	4b0f      	ldr	r3, [pc, #60]	; (8017e3c <xTaskIncrementTick+0x170>)
 8017e00:	681b      	ldr	r3, [r3, #0]
 8017e02:	3301      	adds	r3, #1
 8017e04:	4a0d      	ldr	r2, [pc, #52]	; (8017e3c <xTaskIncrementTick+0x170>)
 8017e06:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8017e08:	697b      	ldr	r3, [r7, #20]
}
 8017e0a:	4618      	mov	r0, r3
 8017e0c:	3718      	adds	r7, #24
 8017e0e:	46bd      	mov	sp, r7
 8017e10:	bd80      	pop	{r7, pc}
 8017e12:	bf00      	nop
 8017e14:	20006200 	.word	0x20006200
 8017e18:	200061dc 	.word	0x200061dc
 8017e1c:	20006190 	.word	0x20006190
 8017e20:	20006194 	.word	0x20006194
 8017e24:	200061f0 	.word	0x200061f0
 8017e28:	200061f8 	.word	0x200061f8
 8017e2c:	200061e0 	.word	0x200061e0
 8017e30:	20005d08 	.word	0x20005d08
 8017e34:	20005d04 	.word	0x20005d04
 8017e38:	200061ec 	.word	0x200061ec
 8017e3c:	200061e8 	.word	0x200061e8

08017e40 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8017e40:	b480      	push	{r7}
 8017e42:	b085      	sub	sp, #20
 8017e44:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8017e46:	4b28      	ldr	r3, [pc, #160]	; (8017ee8 <vTaskSwitchContext+0xa8>)
 8017e48:	681b      	ldr	r3, [r3, #0]
 8017e4a:	2b00      	cmp	r3, #0
 8017e4c:	d003      	beq.n	8017e56 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8017e4e:	4b27      	ldr	r3, [pc, #156]	; (8017eec <vTaskSwitchContext+0xac>)
 8017e50:	2201      	movs	r2, #1
 8017e52:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8017e54:	e041      	b.n	8017eda <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8017e56:	4b25      	ldr	r3, [pc, #148]	; (8017eec <vTaskSwitchContext+0xac>)
 8017e58:	2200      	movs	r2, #0
 8017e5a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017e5c:	4b24      	ldr	r3, [pc, #144]	; (8017ef0 <vTaskSwitchContext+0xb0>)
 8017e5e:	681b      	ldr	r3, [r3, #0]
 8017e60:	60fb      	str	r3, [r7, #12]
 8017e62:	e010      	b.n	8017e86 <vTaskSwitchContext+0x46>
 8017e64:	68fb      	ldr	r3, [r7, #12]
 8017e66:	2b00      	cmp	r3, #0
 8017e68:	d10a      	bne.n	8017e80 <vTaskSwitchContext+0x40>
	__asm volatile
 8017e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e6e:	f383 8811 	msr	BASEPRI, r3
 8017e72:	f3bf 8f6f 	isb	sy
 8017e76:	f3bf 8f4f 	dsb	sy
 8017e7a:	607b      	str	r3, [r7, #4]
}
 8017e7c:	bf00      	nop
 8017e7e:	e7fe      	b.n	8017e7e <vTaskSwitchContext+0x3e>
 8017e80:	68fb      	ldr	r3, [r7, #12]
 8017e82:	3b01      	subs	r3, #1
 8017e84:	60fb      	str	r3, [r7, #12]
 8017e86:	491b      	ldr	r1, [pc, #108]	; (8017ef4 <vTaskSwitchContext+0xb4>)
 8017e88:	68fa      	ldr	r2, [r7, #12]
 8017e8a:	4613      	mov	r3, r2
 8017e8c:	009b      	lsls	r3, r3, #2
 8017e8e:	4413      	add	r3, r2
 8017e90:	009b      	lsls	r3, r3, #2
 8017e92:	440b      	add	r3, r1
 8017e94:	681b      	ldr	r3, [r3, #0]
 8017e96:	2b00      	cmp	r3, #0
 8017e98:	d0e4      	beq.n	8017e64 <vTaskSwitchContext+0x24>
 8017e9a:	68fa      	ldr	r2, [r7, #12]
 8017e9c:	4613      	mov	r3, r2
 8017e9e:	009b      	lsls	r3, r3, #2
 8017ea0:	4413      	add	r3, r2
 8017ea2:	009b      	lsls	r3, r3, #2
 8017ea4:	4a13      	ldr	r2, [pc, #76]	; (8017ef4 <vTaskSwitchContext+0xb4>)
 8017ea6:	4413      	add	r3, r2
 8017ea8:	60bb      	str	r3, [r7, #8]
 8017eaa:	68bb      	ldr	r3, [r7, #8]
 8017eac:	685b      	ldr	r3, [r3, #4]
 8017eae:	685a      	ldr	r2, [r3, #4]
 8017eb0:	68bb      	ldr	r3, [r7, #8]
 8017eb2:	605a      	str	r2, [r3, #4]
 8017eb4:	68bb      	ldr	r3, [r7, #8]
 8017eb6:	685a      	ldr	r2, [r3, #4]
 8017eb8:	68bb      	ldr	r3, [r7, #8]
 8017eba:	3308      	adds	r3, #8
 8017ebc:	429a      	cmp	r2, r3
 8017ebe:	d104      	bne.n	8017eca <vTaskSwitchContext+0x8a>
 8017ec0:	68bb      	ldr	r3, [r7, #8]
 8017ec2:	685b      	ldr	r3, [r3, #4]
 8017ec4:	685a      	ldr	r2, [r3, #4]
 8017ec6:	68bb      	ldr	r3, [r7, #8]
 8017ec8:	605a      	str	r2, [r3, #4]
 8017eca:	68bb      	ldr	r3, [r7, #8]
 8017ecc:	685b      	ldr	r3, [r3, #4]
 8017ece:	68db      	ldr	r3, [r3, #12]
 8017ed0:	4a09      	ldr	r2, [pc, #36]	; (8017ef8 <vTaskSwitchContext+0xb8>)
 8017ed2:	6013      	str	r3, [r2, #0]
 8017ed4:	4a06      	ldr	r2, [pc, #24]	; (8017ef0 <vTaskSwitchContext+0xb0>)
 8017ed6:	68fb      	ldr	r3, [r7, #12]
 8017ed8:	6013      	str	r3, [r2, #0]
}
 8017eda:	bf00      	nop
 8017edc:	3714      	adds	r7, #20
 8017ede:	46bd      	mov	sp, r7
 8017ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ee4:	4770      	bx	lr
 8017ee6:	bf00      	nop
 8017ee8:	20006200 	.word	0x20006200
 8017eec:	200061ec 	.word	0x200061ec
 8017ef0:	200061e0 	.word	0x200061e0
 8017ef4:	20005d08 	.word	0x20005d08
 8017ef8:	20005d04 	.word	0x20005d04

08017efc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8017efc:	b580      	push	{r7, lr}
 8017efe:	b084      	sub	sp, #16
 8017f00:	af00      	add	r7, sp, #0
 8017f02:	6078      	str	r0, [r7, #4]
 8017f04:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8017f06:	687b      	ldr	r3, [r7, #4]
 8017f08:	2b00      	cmp	r3, #0
 8017f0a:	d10a      	bne.n	8017f22 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8017f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f10:	f383 8811 	msr	BASEPRI, r3
 8017f14:	f3bf 8f6f 	isb	sy
 8017f18:	f3bf 8f4f 	dsb	sy
 8017f1c:	60fb      	str	r3, [r7, #12]
}
 8017f1e:	bf00      	nop
 8017f20:	e7fe      	b.n	8017f20 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017f22:	4b07      	ldr	r3, [pc, #28]	; (8017f40 <vTaskPlaceOnEventList+0x44>)
 8017f24:	681b      	ldr	r3, [r3, #0]
 8017f26:	3318      	adds	r3, #24
 8017f28:	4619      	mov	r1, r3
 8017f2a:	6878      	ldr	r0, [r7, #4]
 8017f2c:	f7fe fbf3 	bl	8016716 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8017f30:	2101      	movs	r1, #1
 8017f32:	6838      	ldr	r0, [r7, #0]
 8017f34:	f000 fc40 	bl	80187b8 <prvAddCurrentTaskToDelayedList>
}
 8017f38:	bf00      	nop
 8017f3a:	3710      	adds	r7, #16
 8017f3c:	46bd      	mov	sp, r7
 8017f3e:	bd80      	pop	{r7, pc}
 8017f40:	20005d04 	.word	0x20005d04

08017f44 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8017f44:	b580      	push	{r7, lr}
 8017f46:	b086      	sub	sp, #24
 8017f48:	af00      	add	r7, sp, #0
 8017f4a:	60f8      	str	r0, [r7, #12]
 8017f4c:	60b9      	str	r1, [r7, #8]
 8017f4e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8017f50:	68fb      	ldr	r3, [r7, #12]
 8017f52:	2b00      	cmp	r3, #0
 8017f54:	d10a      	bne.n	8017f6c <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8017f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f5a:	f383 8811 	msr	BASEPRI, r3
 8017f5e:	f3bf 8f6f 	isb	sy
 8017f62:	f3bf 8f4f 	dsb	sy
 8017f66:	617b      	str	r3, [r7, #20]
}
 8017f68:	bf00      	nop
 8017f6a:	e7fe      	b.n	8017f6a <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8017f6c:	4b11      	ldr	r3, [pc, #68]	; (8017fb4 <vTaskPlaceOnUnorderedEventList+0x70>)
 8017f6e:	681b      	ldr	r3, [r3, #0]
 8017f70:	2b00      	cmp	r3, #0
 8017f72:	d10a      	bne.n	8017f8a <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8017f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f78:	f383 8811 	msr	BASEPRI, r3
 8017f7c:	f3bf 8f6f 	isb	sy
 8017f80:	f3bf 8f4f 	dsb	sy
 8017f84:	613b      	str	r3, [r7, #16]
}
 8017f86:	bf00      	nop
 8017f88:	e7fe      	b.n	8017f88 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8017f8a:	4b0b      	ldr	r3, [pc, #44]	; (8017fb8 <vTaskPlaceOnUnorderedEventList+0x74>)
 8017f8c:	681b      	ldr	r3, [r3, #0]
 8017f8e:	68ba      	ldr	r2, [r7, #8]
 8017f90:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8017f94:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017f96:	4b08      	ldr	r3, [pc, #32]	; (8017fb8 <vTaskPlaceOnUnorderedEventList+0x74>)
 8017f98:	681b      	ldr	r3, [r3, #0]
 8017f9a:	3318      	adds	r3, #24
 8017f9c:	4619      	mov	r1, r3
 8017f9e:	68f8      	ldr	r0, [r7, #12]
 8017fa0:	f7fe fb95 	bl	80166ce <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8017fa4:	2101      	movs	r1, #1
 8017fa6:	6878      	ldr	r0, [r7, #4]
 8017fa8:	f000 fc06 	bl	80187b8 <prvAddCurrentTaskToDelayedList>
}
 8017fac:	bf00      	nop
 8017fae:	3718      	adds	r7, #24
 8017fb0:	46bd      	mov	sp, r7
 8017fb2:	bd80      	pop	{r7, pc}
 8017fb4:	20006200 	.word	0x20006200
 8017fb8:	20005d04 	.word	0x20005d04

08017fbc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8017fbc:	b580      	push	{r7, lr}
 8017fbe:	b086      	sub	sp, #24
 8017fc0:	af00      	add	r7, sp, #0
 8017fc2:	60f8      	str	r0, [r7, #12]
 8017fc4:	60b9      	str	r1, [r7, #8]
 8017fc6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8017fc8:	68fb      	ldr	r3, [r7, #12]
 8017fca:	2b00      	cmp	r3, #0
 8017fcc:	d10a      	bne.n	8017fe4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8017fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017fd2:	f383 8811 	msr	BASEPRI, r3
 8017fd6:	f3bf 8f6f 	isb	sy
 8017fda:	f3bf 8f4f 	dsb	sy
 8017fde:	617b      	str	r3, [r7, #20]
}
 8017fe0:	bf00      	nop
 8017fe2:	e7fe      	b.n	8017fe2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017fe4:	4b0a      	ldr	r3, [pc, #40]	; (8018010 <vTaskPlaceOnEventListRestricted+0x54>)
 8017fe6:	681b      	ldr	r3, [r3, #0]
 8017fe8:	3318      	adds	r3, #24
 8017fea:	4619      	mov	r1, r3
 8017fec:	68f8      	ldr	r0, [r7, #12]
 8017fee:	f7fe fb6e 	bl	80166ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8017ff2:	687b      	ldr	r3, [r7, #4]
 8017ff4:	2b00      	cmp	r3, #0
 8017ff6:	d002      	beq.n	8017ffe <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8017ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8017ffc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8017ffe:	6879      	ldr	r1, [r7, #4]
 8018000:	68b8      	ldr	r0, [r7, #8]
 8018002:	f000 fbd9 	bl	80187b8 <prvAddCurrentTaskToDelayedList>
	}
 8018006:	bf00      	nop
 8018008:	3718      	adds	r7, #24
 801800a:	46bd      	mov	sp, r7
 801800c:	bd80      	pop	{r7, pc}
 801800e:	bf00      	nop
 8018010:	20005d04 	.word	0x20005d04

08018014 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8018014:	b580      	push	{r7, lr}
 8018016:	b086      	sub	sp, #24
 8018018:	af00      	add	r7, sp, #0
 801801a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801801c:	687b      	ldr	r3, [r7, #4]
 801801e:	68db      	ldr	r3, [r3, #12]
 8018020:	68db      	ldr	r3, [r3, #12]
 8018022:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8018024:	693b      	ldr	r3, [r7, #16]
 8018026:	2b00      	cmp	r3, #0
 8018028:	d10a      	bne.n	8018040 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801802a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801802e:	f383 8811 	msr	BASEPRI, r3
 8018032:	f3bf 8f6f 	isb	sy
 8018036:	f3bf 8f4f 	dsb	sy
 801803a:	60fb      	str	r3, [r7, #12]
}
 801803c:	bf00      	nop
 801803e:	e7fe      	b.n	801803e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8018040:	693b      	ldr	r3, [r7, #16]
 8018042:	3318      	adds	r3, #24
 8018044:	4618      	mov	r0, r3
 8018046:	f7fe fb9f 	bl	8016788 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801804a:	4b1e      	ldr	r3, [pc, #120]	; (80180c4 <xTaskRemoveFromEventList+0xb0>)
 801804c:	681b      	ldr	r3, [r3, #0]
 801804e:	2b00      	cmp	r3, #0
 8018050:	d11d      	bne.n	801808e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8018052:	693b      	ldr	r3, [r7, #16]
 8018054:	3304      	adds	r3, #4
 8018056:	4618      	mov	r0, r3
 8018058:	f7fe fb96 	bl	8016788 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801805c:	693b      	ldr	r3, [r7, #16]
 801805e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018060:	4b19      	ldr	r3, [pc, #100]	; (80180c8 <xTaskRemoveFromEventList+0xb4>)
 8018062:	681b      	ldr	r3, [r3, #0]
 8018064:	429a      	cmp	r2, r3
 8018066:	d903      	bls.n	8018070 <xTaskRemoveFromEventList+0x5c>
 8018068:	693b      	ldr	r3, [r7, #16]
 801806a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801806c:	4a16      	ldr	r2, [pc, #88]	; (80180c8 <xTaskRemoveFromEventList+0xb4>)
 801806e:	6013      	str	r3, [r2, #0]
 8018070:	693b      	ldr	r3, [r7, #16]
 8018072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018074:	4613      	mov	r3, r2
 8018076:	009b      	lsls	r3, r3, #2
 8018078:	4413      	add	r3, r2
 801807a:	009b      	lsls	r3, r3, #2
 801807c:	4a13      	ldr	r2, [pc, #76]	; (80180cc <xTaskRemoveFromEventList+0xb8>)
 801807e:	441a      	add	r2, r3
 8018080:	693b      	ldr	r3, [r7, #16]
 8018082:	3304      	adds	r3, #4
 8018084:	4619      	mov	r1, r3
 8018086:	4610      	mov	r0, r2
 8018088:	f7fe fb21 	bl	80166ce <vListInsertEnd>
 801808c:	e005      	b.n	801809a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801808e:	693b      	ldr	r3, [r7, #16]
 8018090:	3318      	adds	r3, #24
 8018092:	4619      	mov	r1, r3
 8018094:	480e      	ldr	r0, [pc, #56]	; (80180d0 <xTaskRemoveFromEventList+0xbc>)
 8018096:	f7fe fb1a 	bl	80166ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801809a:	693b      	ldr	r3, [r7, #16]
 801809c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801809e:	4b0d      	ldr	r3, [pc, #52]	; (80180d4 <xTaskRemoveFromEventList+0xc0>)
 80180a0:	681b      	ldr	r3, [r3, #0]
 80180a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80180a4:	429a      	cmp	r2, r3
 80180a6:	d905      	bls.n	80180b4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80180a8:	2301      	movs	r3, #1
 80180aa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80180ac:	4b0a      	ldr	r3, [pc, #40]	; (80180d8 <xTaskRemoveFromEventList+0xc4>)
 80180ae:	2201      	movs	r2, #1
 80180b0:	601a      	str	r2, [r3, #0]
 80180b2:	e001      	b.n	80180b8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80180b4:	2300      	movs	r3, #0
 80180b6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80180b8:	697b      	ldr	r3, [r7, #20]
}
 80180ba:	4618      	mov	r0, r3
 80180bc:	3718      	adds	r7, #24
 80180be:	46bd      	mov	sp, r7
 80180c0:	bd80      	pop	{r7, pc}
 80180c2:	bf00      	nop
 80180c4:	20006200 	.word	0x20006200
 80180c8:	200061e0 	.word	0x200061e0
 80180cc:	20005d08 	.word	0x20005d08
 80180d0:	20006198 	.word	0x20006198
 80180d4:	20005d04 	.word	0x20005d04
 80180d8:	200061ec 	.word	0x200061ec

080180dc <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80180dc:	b580      	push	{r7, lr}
 80180de:	b086      	sub	sp, #24
 80180e0:	af00      	add	r7, sp, #0
 80180e2:	6078      	str	r0, [r7, #4]
 80180e4:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80180e6:	4b29      	ldr	r3, [pc, #164]	; (801818c <vTaskRemoveFromUnorderedEventList+0xb0>)
 80180e8:	681b      	ldr	r3, [r3, #0]
 80180ea:	2b00      	cmp	r3, #0
 80180ec:	d10a      	bne.n	8018104 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 80180ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80180f2:	f383 8811 	msr	BASEPRI, r3
 80180f6:	f3bf 8f6f 	isb	sy
 80180fa:	f3bf 8f4f 	dsb	sy
 80180fe:	613b      	str	r3, [r7, #16]
}
 8018100:	bf00      	nop
 8018102:	e7fe      	b.n	8018102 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8018104:	683b      	ldr	r3, [r7, #0]
 8018106:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801810a:	687b      	ldr	r3, [r7, #4]
 801810c:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801810e:	687b      	ldr	r3, [r7, #4]
 8018110:	68db      	ldr	r3, [r3, #12]
 8018112:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8018114:	697b      	ldr	r3, [r7, #20]
 8018116:	2b00      	cmp	r3, #0
 8018118:	d10a      	bne.n	8018130 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 801811a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801811e:	f383 8811 	msr	BASEPRI, r3
 8018122:	f3bf 8f6f 	isb	sy
 8018126:	f3bf 8f4f 	dsb	sy
 801812a:	60fb      	str	r3, [r7, #12]
}
 801812c:	bf00      	nop
 801812e:	e7fe      	b.n	801812e <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8018130:	6878      	ldr	r0, [r7, #4]
 8018132:	f7fe fb29 	bl	8016788 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8018136:	697b      	ldr	r3, [r7, #20]
 8018138:	3304      	adds	r3, #4
 801813a:	4618      	mov	r0, r3
 801813c:	f7fe fb24 	bl	8016788 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8018140:	697b      	ldr	r3, [r7, #20]
 8018142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018144:	4b12      	ldr	r3, [pc, #72]	; (8018190 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8018146:	681b      	ldr	r3, [r3, #0]
 8018148:	429a      	cmp	r2, r3
 801814a:	d903      	bls.n	8018154 <vTaskRemoveFromUnorderedEventList+0x78>
 801814c:	697b      	ldr	r3, [r7, #20]
 801814e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018150:	4a0f      	ldr	r2, [pc, #60]	; (8018190 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8018152:	6013      	str	r3, [r2, #0]
 8018154:	697b      	ldr	r3, [r7, #20]
 8018156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018158:	4613      	mov	r3, r2
 801815a:	009b      	lsls	r3, r3, #2
 801815c:	4413      	add	r3, r2
 801815e:	009b      	lsls	r3, r3, #2
 8018160:	4a0c      	ldr	r2, [pc, #48]	; (8018194 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8018162:	441a      	add	r2, r3
 8018164:	697b      	ldr	r3, [r7, #20]
 8018166:	3304      	adds	r3, #4
 8018168:	4619      	mov	r1, r3
 801816a:	4610      	mov	r0, r2
 801816c:	f7fe faaf 	bl	80166ce <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8018170:	697b      	ldr	r3, [r7, #20]
 8018172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018174:	4b08      	ldr	r3, [pc, #32]	; (8018198 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8018176:	681b      	ldr	r3, [r3, #0]
 8018178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801817a:	429a      	cmp	r2, r3
 801817c:	d902      	bls.n	8018184 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 801817e:	4b07      	ldr	r3, [pc, #28]	; (801819c <vTaskRemoveFromUnorderedEventList+0xc0>)
 8018180:	2201      	movs	r2, #1
 8018182:	601a      	str	r2, [r3, #0]
	}
}
 8018184:	bf00      	nop
 8018186:	3718      	adds	r7, #24
 8018188:	46bd      	mov	sp, r7
 801818a:	bd80      	pop	{r7, pc}
 801818c:	20006200 	.word	0x20006200
 8018190:	200061e0 	.word	0x200061e0
 8018194:	20005d08 	.word	0x20005d08
 8018198:	20005d04 	.word	0x20005d04
 801819c:	200061ec 	.word	0x200061ec

080181a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80181a0:	b480      	push	{r7}
 80181a2:	b083      	sub	sp, #12
 80181a4:	af00      	add	r7, sp, #0
 80181a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80181a8:	4b06      	ldr	r3, [pc, #24]	; (80181c4 <vTaskInternalSetTimeOutState+0x24>)
 80181aa:	681a      	ldr	r2, [r3, #0]
 80181ac:	687b      	ldr	r3, [r7, #4]
 80181ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80181b0:	4b05      	ldr	r3, [pc, #20]	; (80181c8 <vTaskInternalSetTimeOutState+0x28>)
 80181b2:	681a      	ldr	r2, [r3, #0]
 80181b4:	687b      	ldr	r3, [r7, #4]
 80181b6:	605a      	str	r2, [r3, #4]
}
 80181b8:	bf00      	nop
 80181ba:	370c      	adds	r7, #12
 80181bc:	46bd      	mov	sp, r7
 80181be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181c2:	4770      	bx	lr
 80181c4:	200061f0 	.word	0x200061f0
 80181c8:	200061dc 	.word	0x200061dc

080181cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80181cc:	b580      	push	{r7, lr}
 80181ce:	b088      	sub	sp, #32
 80181d0:	af00      	add	r7, sp, #0
 80181d2:	6078      	str	r0, [r7, #4]
 80181d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80181d6:	687b      	ldr	r3, [r7, #4]
 80181d8:	2b00      	cmp	r3, #0
 80181da:	d10a      	bne.n	80181f2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80181dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181e0:	f383 8811 	msr	BASEPRI, r3
 80181e4:	f3bf 8f6f 	isb	sy
 80181e8:	f3bf 8f4f 	dsb	sy
 80181ec:	613b      	str	r3, [r7, #16]
}
 80181ee:	bf00      	nop
 80181f0:	e7fe      	b.n	80181f0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80181f2:	683b      	ldr	r3, [r7, #0]
 80181f4:	2b00      	cmp	r3, #0
 80181f6:	d10a      	bne.n	801820e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80181f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181fc:	f383 8811 	msr	BASEPRI, r3
 8018200:	f3bf 8f6f 	isb	sy
 8018204:	f3bf 8f4f 	dsb	sy
 8018208:	60fb      	str	r3, [r7, #12]
}
 801820a:	bf00      	nop
 801820c:	e7fe      	b.n	801820c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801820e:	f001 f879 	bl	8019304 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8018212:	4b1d      	ldr	r3, [pc, #116]	; (8018288 <xTaskCheckForTimeOut+0xbc>)
 8018214:	681b      	ldr	r3, [r3, #0]
 8018216:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8018218:	687b      	ldr	r3, [r7, #4]
 801821a:	685b      	ldr	r3, [r3, #4]
 801821c:	69ba      	ldr	r2, [r7, #24]
 801821e:	1ad3      	subs	r3, r2, r3
 8018220:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8018222:	683b      	ldr	r3, [r7, #0]
 8018224:	681b      	ldr	r3, [r3, #0]
 8018226:	f1b3 3fff 	cmp.w	r3, #4294967295
 801822a:	d102      	bne.n	8018232 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801822c:	2300      	movs	r3, #0
 801822e:	61fb      	str	r3, [r7, #28]
 8018230:	e023      	b.n	801827a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8018232:	687b      	ldr	r3, [r7, #4]
 8018234:	681a      	ldr	r2, [r3, #0]
 8018236:	4b15      	ldr	r3, [pc, #84]	; (801828c <xTaskCheckForTimeOut+0xc0>)
 8018238:	681b      	ldr	r3, [r3, #0]
 801823a:	429a      	cmp	r2, r3
 801823c:	d007      	beq.n	801824e <xTaskCheckForTimeOut+0x82>
 801823e:	687b      	ldr	r3, [r7, #4]
 8018240:	685b      	ldr	r3, [r3, #4]
 8018242:	69ba      	ldr	r2, [r7, #24]
 8018244:	429a      	cmp	r2, r3
 8018246:	d302      	bcc.n	801824e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8018248:	2301      	movs	r3, #1
 801824a:	61fb      	str	r3, [r7, #28]
 801824c:	e015      	b.n	801827a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801824e:	683b      	ldr	r3, [r7, #0]
 8018250:	681b      	ldr	r3, [r3, #0]
 8018252:	697a      	ldr	r2, [r7, #20]
 8018254:	429a      	cmp	r2, r3
 8018256:	d20b      	bcs.n	8018270 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8018258:	683b      	ldr	r3, [r7, #0]
 801825a:	681a      	ldr	r2, [r3, #0]
 801825c:	697b      	ldr	r3, [r7, #20]
 801825e:	1ad2      	subs	r2, r2, r3
 8018260:	683b      	ldr	r3, [r7, #0]
 8018262:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8018264:	6878      	ldr	r0, [r7, #4]
 8018266:	f7ff ff9b 	bl	80181a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801826a:	2300      	movs	r3, #0
 801826c:	61fb      	str	r3, [r7, #28]
 801826e:	e004      	b.n	801827a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8018270:	683b      	ldr	r3, [r7, #0]
 8018272:	2200      	movs	r2, #0
 8018274:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8018276:	2301      	movs	r3, #1
 8018278:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801827a:	f001 f873 	bl	8019364 <vPortExitCritical>

	return xReturn;
 801827e:	69fb      	ldr	r3, [r7, #28]
}
 8018280:	4618      	mov	r0, r3
 8018282:	3720      	adds	r7, #32
 8018284:	46bd      	mov	sp, r7
 8018286:	bd80      	pop	{r7, pc}
 8018288:	200061dc 	.word	0x200061dc
 801828c:	200061f0 	.word	0x200061f0

08018290 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8018290:	b480      	push	{r7}
 8018292:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8018294:	4b03      	ldr	r3, [pc, #12]	; (80182a4 <vTaskMissedYield+0x14>)
 8018296:	2201      	movs	r2, #1
 8018298:	601a      	str	r2, [r3, #0]
}
 801829a:	bf00      	nop
 801829c:	46bd      	mov	sp, r7
 801829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182a2:	4770      	bx	lr
 80182a4:	200061ec 	.word	0x200061ec

080182a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80182a8:	b580      	push	{r7, lr}
 80182aa:	b082      	sub	sp, #8
 80182ac:	af00      	add	r7, sp, #0
 80182ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80182b0:	f000 f852 	bl	8018358 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80182b4:	4b06      	ldr	r3, [pc, #24]	; (80182d0 <prvIdleTask+0x28>)
 80182b6:	681b      	ldr	r3, [r3, #0]
 80182b8:	2b01      	cmp	r3, #1
 80182ba:	d9f9      	bls.n	80182b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80182bc:	4b05      	ldr	r3, [pc, #20]	; (80182d4 <prvIdleTask+0x2c>)
 80182be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80182c2:	601a      	str	r2, [r3, #0]
 80182c4:	f3bf 8f4f 	dsb	sy
 80182c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80182cc:	e7f0      	b.n	80182b0 <prvIdleTask+0x8>
 80182ce:	bf00      	nop
 80182d0:	20005d08 	.word	0x20005d08
 80182d4:	e000ed04 	.word	0xe000ed04

080182d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80182d8:	b580      	push	{r7, lr}
 80182da:	b082      	sub	sp, #8
 80182dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80182de:	2300      	movs	r3, #0
 80182e0:	607b      	str	r3, [r7, #4]
 80182e2:	e00c      	b.n	80182fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80182e4:	687a      	ldr	r2, [r7, #4]
 80182e6:	4613      	mov	r3, r2
 80182e8:	009b      	lsls	r3, r3, #2
 80182ea:	4413      	add	r3, r2
 80182ec:	009b      	lsls	r3, r3, #2
 80182ee:	4a12      	ldr	r2, [pc, #72]	; (8018338 <prvInitialiseTaskLists+0x60>)
 80182f0:	4413      	add	r3, r2
 80182f2:	4618      	mov	r0, r3
 80182f4:	f7fe f9be 	bl	8016674 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80182f8:	687b      	ldr	r3, [r7, #4]
 80182fa:	3301      	adds	r3, #1
 80182fc:	607b      	str	r3, [r7, #4]
 80182fe:	687b      	ldr	r3, [r7, #4]
 8018300:	2b37      	cmp	r3, #55	; 0x37
 8018302:	d9ef      	bls.n	80182e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8018304:	480d      	ldr	r0, [pc, #52]	; (801833c <prvInitialiseTaskLists+0x64>)
 8018306:	f7fe f9b5 	bl	8016674 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801830a:	480d      	ldr	r0, [pc, #52]	; (8018340 <prvInitialiseTaskLists+0x68>)
 801830c:	f7fe f9b2 	bl	8016674 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8018310:	480c      	ldr	r0, [pc, #48]	; (8018344 <prvInitialiseTaskLists+0x6c>)
 8018312:	f7fe f9af 	bl	8016674 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8018316:	480c      	ldr	r0, [pc, #48]	; (8018348 <prvInitialiseTaskLists+0x70>)
 8018318:	f7fe f9ac 	bl	8016674 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801831c:	480b      	ldr	r0, [pc, #44]	; (801834c <prvInitialiseTaskLists+0x74>)
 801831e:	f7fe f9a9 	bl	8016674 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8018322:	4b0b      	ldr	r3, [pc, #44]	; (8018350 <prvInitialiseTaskLists+0x78>)
 8018324:	4a05      	ldr	r2, [pc, #20]	; (801833c <prvInitialiseTaskLists+0x64>)
 8018326:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8018328:	4b0a      	ldr	r3, [pc, #40]	; (8018354 <prvInitialiseTaskLists+0x7c>)
 801832a:	4a05      	ldr	r2, [pc, #20]	; (8018340 <prvInitialiseTaskLists+0x68>)
 801832c:	601a      	str	r2, [r3, #0]
}
 801832e:	bf00      	nop
 8018330:	3708      	adds	r7, #8
 8018332:	46bd      	mov	sp, r7
 8018334:	bd80      	pop	{r7, pc}
 8018336:	bf00      	nop
 8018338:	20005d08 	.word	0x20005d08
 801833c:	20006168 	.word	0x20006168
 8018340:	2000617c 	.word	0x2000617c
 8018344:	20006198 	.word	0x20006198
 8018348:	200061ac 	.word	0x200061ac
 801834c:	200061c4 	.word	0x200061c4
 8018350:	20006190 	.word	0x20006190
 8018354:	20006194 	.word	0x20006194

08018358 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8018358:	b580      	push	{r7, lr}
 801835a:	b082      	sub	sp, #8
 801835c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801835e:	e019      	b.n	8018394 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8018360:	f000 ffd0 	bl	8019304 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018364:	4b10      	ldr	r3, [pc, #64]	; (80183a8 <prvCheckTasksWaitingTermination+0x50>)
 8018366:	68db      	ldr	r3, [r3, #12]
 8018368:	68db      	ldr	r3, [r3, #12]
 801836a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801836c:	687b      	ldr	r3, [r7, #4]
 801836e:	3304      	adds	r3, #4
 8018370:	4618      	mov	r0, r3
 8018372:	f7fe fa09 	bl	8016788 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8018376:	4b0d      	ldr	r3, [pc, #52]	; (80183ac <prvCheckTasksWaitingTermination+0x54>)
 8018378:	681b      	ldr	r3, [r3, #0]
 801837a:	3b01      	subs	r3, #1
 801837c:	4a0b      	ldr	r2, [pc, #44]	; (80183ac <prvCheckTasksWaitingTermination+0x54>)
 801837e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8018380:	4b0b      	ldr	r3, [pc, #44]	; (80183b0 <prvCheckTasksWaitingTermination+0x58>)
 8018382:	681b      	ldr	r3, [r3, #0]
 8018384:	3b01      	subs	r3, #1
 8018386:	4a0a      	ldr	r2, [pc, #40]	; (80183b0 <prvCheckTasksWaitingTermination+0x58>)
 8018388:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801838a:	f000 ffeb 	bl	8019364 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801838e:	6878      	ldr	r0, [r7, #4]
 8018390:	f000 f810 	bl	80183b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018394:	4b06      	ldr	r3, [pc, #24]	; (80183b0 <prvCheckTasksWaitingTermination+0x58>)
 8018396:	681b      	ldr	r3, [r3, #0]
 8018398:	2b00      	cmp	r3, #0
 801839a:	d1e1      	bne.n	8018360 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801839c:	bf00      	nop
 801839e:	bf00      	nop
 80183a0:	3708      	adds	r7, #8
 80183a2:	46bd      	mov	sp, r7
 80183a4:	bd80      	pop	{r7, pc}
 80183a6:	bf00      	nop
 80183a8:	200061ac 	.word	0x200061ac
 80183ac:	200061d8 	.word	0x200061d8
 80183b0:	200061c0 	.word	0x200061c0

080183b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80183b4:	b580      	push	{r7, lr}
 80183b6:	b084      	sub	sp, #16
 80183b8:	af00      	add	r7, sp, #0
 80183ba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80183bc:	687b      	ldr	r3, [r7, #4]
 80183be:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80183c2:	2b00      	cmp	r3, #0
 80183c4:	d108      	bne.n	80183d8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80183c6:	687b      	ldr	r3, [r7, #4]
 80183c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80183ca:	4618      	mov	r0, r3
 80183cc:	f001 f988 	bl	80196e0 <vPortFree>
				vPortFree( pxTCB );
 80183d0:	6878      	ldr	r0, [r7, #4]
 80183d2:	f001 f985 	bl	80196e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80183d6:	e018      	b.n	801840a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80183d8:	687b      	ldr	r3, [r7, #4]
 80183da:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80183de:	2b01      	cmp	r3, #1
 80183e0:	d103      	bne.n	80183ea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80183e2:	6878      	ldr	r0, [r7, #4]
 80183e4:	f001 f97c 	bl	80196e0 <vPortFree>
	}
 80183e8:	e00f      	b.n	801840a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80183ea:	687b      	ldr	r3, [r7, #4]
 80183ec:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80183f0:	2b02      	cmp	r3, #2
 80183f2:	d00a      	beq.n	801840a <prvDeleteTCB+0x56>
	__asm volatile
 80183f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80183f8:	f383 8811 	msr	BASEPRI, r3
 80183fc:	f3bf 8f6f 	isb	sy
 8018400:	f3bf 8f4f 	dsb	sy
 8018404:	60fb      	str	r3, [r7, #12]
}
 8018406:	bf00      	nop
 8018408:	e7fe      	b.n	8018408 <prvDeleteTCB+0x54>
	}
 801840a:	bf00      	nop
 801840c:	3710      	adds	r7, #16
 801840e:	46bd      	mov	sp, r7
 8018410:	bd80      	pop	{r7, pc}
	...

08018414 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8018414:	b480      	push	{r7}
 8018416:	b083      	sub	sp, #12
 8018418:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801841a:	4b0c      	ldr	r3, [pc, #48]	; (801844c <prvResetNextTaskUnblockTime+0x38>)
 801841c:	681b      	ldr	r3, [r3, #0]
 801841e:	681b      	ldr	r3, [r3, #0]
 8018420:	2b00      	cmp	r3, #0
 8018422:	d104      	bne.n	801842e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8018424:	4b0a      	ldr	r3, [pc, #40]	; (8018450 <prvResetNextTaskUnblockTime+0x3c>)
 8018426:	f04f 32ff 	mov.w	r2, #4294967295
 801842a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801842c:	e008      	b.n	8018440 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801842e:	4b07      	ldr	r3, [pc, #28]	; (801844c <prvResetNextTaskUnblockTime+0x38>)
 8018430:	681b      	ldr	r3, [r3, #0]
 8018432:	68db      	ldr	r3, [r3, #12]
 8018434:	68db      	ldr	r3, [r3, #12]
 8018436:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8018438:	687b      	ldr	r3, [r7, #4]
 801843a:	685b      	ldr	r3, [r3, #4]
 801843c:	4a04      	ldr	r2, [pc, #16]	; (8018450 <prvResetNextTaskUnblockTime+0x3c>)
 801843e:	6013      	str	r3, [r2, #0]
}
 8018440:	bf00      	nop
 8018442:	370c      	adds	r7, #12
 8018444:	46bd      	mov	sp, r7
 8018446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801844a:	4770      	bx	lr
 801844c:	20006190 	.word	0x20006190
 8018450:	200061f8 	.word	0x200061f8

08018454 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8018454:	b480      	push	{r7}
 8018456:	b083      	sub	sp, #12
 8018458:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 801845a:	4b05      	ldr	r3, [pc, #20]	; (8018470 <xTaskGetCurrentTaskHandle+0x1c>)
 801845c:	681b      	ldr	r3, [r3, #0]
 801845e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8018460:	687b      	ldr	r3, [r7, #4]
	}
 8018462:	4618      	mov	r0, r3
 8018464:	370c      	adds	r7, #12
 8018466:	46bd      	mov	sp, r7
 8018468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801846c:	4770      	bx	lr
 801846e:	bf00      	nop
 8018470:	20005d04 	.word	0x20005d04

08018474 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8018474:	b480      	push	{r7}
 8018476:	b083      	sub	sp, #12
 8018478:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801847a:	4b0b      	ldr	r3, [pc, #44]	; (80184a8 <xTaskGetSchedulerState+0x34>)
 801847c:	681b      	ldr	r3, [r3, #0]
 801847e:	2b00      	cmp	r3, #0
 8018480:	d102      	bne.n	8018488 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8018482:	2301      	movs	r3, #1
 8018484:	607b      	str	r3, [r7, #4]
 8018486:	e008      	b.n	801849a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018488:	4b08      	ldr	r3, [pc, #32]	; (80184ac <xTaskGetSchedulerState+0x38>)
 801848a:	681b      	ldr	r3, [r3, #0]
 801848c:	2b00      	cmp	r3, #0
 801848e:	d102      	bne.n	8018496 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8018490:	2302      	movs	r3, #2
 8018492:	607b      	str	r3, [r7, #4]
 8018494:	e001      	b.n	801849a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8018496:	2300      	movs	r3, #0
 8018498:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801849a:	687b      	ldr	r3, [r7, #4]
	}
 801849c:	4618      	mov	r0, r3
 801849e:	370c      	adds	r7, #12
 80184a0:	46bd      	mov	sp, r7
 80184a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184a6:	4770      	bx	lr
 80184a8:	200061e4 	.word	0x200061e4
 80184ac:	20006200 	.word	0x20006200

080184b0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80184b0:	b580      	push	{r7, lr}
 80184b2:	b084      	sub	sp, #16
 80184b4:	af00      	add	r7, sp, #0
 80184b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80184b8:	687b      	ldr	r3, [r7, #4]
 80184ba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80184bc:	2300      	movs	r3, #0
 80184be:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80184c0:	687b      	ldr	r3, [r7, #4]
 80184c2:	2b00      	cmp	r3, #0
 80184c4:	d051      	beq.n	801856a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80184c6:	68bb      	ldr	r3, [r7, #8]
 80184c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80184ca:	4b2a      	ldr	r3, [pc, #168]	; (8018574 <xTaskPriorityInherit+0xc4>)
 80184cc:	681b      	ldr	r3, [r3, #0]
 80184ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80184d0:	429a      	cmp	r2, r3
 80184d2:	d241      	bcs.n	8018558 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80184d4:	68bb      	ldr	r3, [r7, #8]
 80184d6:	699b      	ldr	r3, [r3, #24]
 80184d8:	2b00      	cmp	r3, #0
 80184da:	db06      	blt.n	80184ea <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80184dc:	4b25      	ldr	r3, [pc, #148]	; (8018574 <xTaskPriorityInherit+0xc4>)
 80184de:	681b      	ldr	r3, [r3, #0]
 80184e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80184e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80184e6:	68bb      	ldr	r3, [r7, #8]
 80184e8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80184ea:	68bb      	ldr	r3, [r7, #8]
 80184ec:	6959      	ldr	r1, [r3, #20]
 80184ee:	68bb      	ldr	r3, [r7, #8]
 80184f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80184f2:	4613      	mov	r3, r2
 80184f4:	009b      	lsls	r3, r3, #2
 80184f6:	4413      	add	r3, r2
 80184f8:	009b      	lsls	r3, r3, #2
 80184fa:	4a1f      	ldr	r2, [pc, #124]	; (8018578 <xTaskPriorityInherit+0xc8>)
 80184fc:	4413      	add	r3, r2
 80184fe:	4299      	cmp	r1, r3
 8018500:	d122      	bne.n	8018548 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018502:	68bb      	ldr	r3, [r7, #8]
 8018504:	3304      	adds	r3, #4
 8018506:	4618      	mov	r0, r3
 8018508:	f7fe f93e 	bl	8016788 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801850c:	4b19      	ldr	r3, [pc, #100]	; (8018574 <xTaskPriorityInherit+0xc4>)
 801850e:	681b      	ldr	r3, [r3, #0]
 8018510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018512:	68bb      	ldr	r3, [r7, #8]
 8018514:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8018516:	68bb      	ldr	r3, [r7, #8]
 8018518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801851a:	4b18      	ldr	r3, [pc, #96]	; (801857c <xTaskPriorityInherit+0xcc>)
 801851c:	681b      	ldr	r3, [r3, #0]
 801851e:	429a      	cmp	r2, r3
 8018520:	d903      	bls.n	801852a <xTaskPriorityInherit+0x7a>
 8018522:	68bb      	ldr	r3, [r7, #8]
 8018524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018526:	4a15      	ldr	r2, [pc, #84]	; (801857c <xTaskPriorityInherit+0xcc>)
 8018528:	6013      	str	r3, [r2, #0]
 801852a:	68bb      	ldr	r3, [r7, #8]
 801852c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801852e:	4613      	mov	r3, r2
 8018530:	009b      	lsls	r3, r3, #2
 8018532:	4413      	add	r3, r2
 8018534:	009b      	lsls	r3, r3, #2
 8018536:	4a10      	ldr	r2, [pc, #64]	; (8018578 <xTaskPriorityInherit+0xc8>)
 8018538:	441a      	add	r2, r3
 801853a:	68bb      	ldr	r3, [r7, #8]
 801853c:	3304      	adds	r3, #4
 801853e:	4619      	mov	r1, r3
 8018540:	4610      	mov	r0, r2
 8018542:	f7fe f8c4 	bl	80166ce <vListInsertEnd>
 8018546:	e004      	b.n	8018552 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8018548:	4b0a      	ldr	r3, [pc, #40]	; (8018574 <xTaskPriorityInherit+0xc4>)
 801854a:	681b      	ldr	r3, [r3, #0]
 801854c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801854e:	68bb      	ldr	r3, [r7, #8]
 8018550:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8018552:	2301      	movs	r3, #1
 8018554:	60fb      	str	r3, [r7, #12]
 8018556:	e008      	b.n	801856a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8018558:	68bb      	ldr	r3, [r7, #8]
 801855a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801855c:	4b05      	ldr	r3, [pc, #20]	; (8018574 <xTaskPriorityInherit+0xc4>)
 801855e:	681b      	ldr	r3, [r3, #0]
 8018560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018562:	429a      	cmp	r2, r3
 8018564:	d201      	bcs.n	801856a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8018566:	2301      	movs	r3, #1
 8018568:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801856a:	68fb      	ldr	r3, [r7, #12]
	}
 801856c:	4618      	mov	r0, r3
 801856e:	3710      	adds	r7, #16
 8018570:	46bd      	mov	sp, r7
 8018572:	bd80      	pop	{r7, pc}
 8018574:	20005d04 	.word	0x20005d04
 8018578:	20005d08 	.word	0x20005d08
 801857c:	200061e0 	.word	0x200061e0

08018580 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8018580:	b580      	push	{r7, lr}
 8018582:	b086      	sub	sp, #24
 8018584:	af00      	add	r7, sp, #0
 8018586:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8018588:	687b      	ldr	r3, [r7, #4]
 801858a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801858c:	2300      	movs	r3, #0
 801858e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8018590:	687b      	ldr	r3, [r7, #4]
 8018592:	2b00      	cmp	r3, #0
 8018594:	d056      	beq.n	8018644 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8018596:	4b2e      	ldr	r3, [pc, #184]	; (8018650 <xTaskPriorityDisinherit+0xd0>)
 8018598:	681b      	ldr	r3, [r3, #0]
 801859a:	693a      	ldr	r2, [r7, #16]
 801859c:	429a      	cmp	r2, r3
 801859e:	d00a      	beq.n	80185b6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80185a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80185a4:	f383 8811 	msr	BASEPRI, r3
 80185a8:	f3bf 8f6f 	isb	sy
 80185ac:	f3bf 8f4f 	dsb	sy
 80185b0:	60fb      	str	r3, [r7, #12]
}
 80185b2:	bf00      	nop
 80185b4:	e7fe      	b.n	80185b4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80185b6:	693b      	ldr	r3, [r7, #16]
 80185b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80185ba:	2b00      	cmp	r3, #0
 80185bc:	d10a      	bne.n	80185d4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80185be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80185c2:	f383 8811 	msr	BASEPRI, r3
 80185c6:	f3bf 8f6f 	isb	sy
 80185ca:	f3bf 8f4f 	dsb	sy
 80185ce:	60bb      	str	r3, [r7, #8]
}
 80185d0:	bf00      	nop
 80185d2:	e7fe      	b.n	80185d2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80185d4:	693b      	ldr	r3, [r7, #16]
 80185d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80185d8:	1e5a      	subs	r2, r3, #1
 80185da:	693b      	ldr	r3, [r7, #16]
 80185dc:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80185de:	693b      	ldr	r3, [r7, #16]
 80185e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80185e2:	693b      	ldr	r3, [r7, #16]
 80185e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80185e6:	429a      	cmp	r2, r3
 80185e8:	d02c      	beq.n	8018644 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80185ea:	693b      	ldr	r3, [r7, #16]
 80185ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80185ee:	2b00      	cmp	r3, #0
 80185f0:	d128      	bne.n	8018644 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80185f2:	693b      	ldr	r3, [r7, #16]
 80185f4:	3304      	adds	r3, #4
 80185f6:	4618      	mov	r0, r3
 80185f8:	f7fe f8c6 	bl	8016788 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80185fc:	693b      	ldr	r3, [r7, #16]
 80185fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8018600:	693b      	ldr	r3, [r7, #16]
 8018602:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018604:	693b      	ldr	r3, [r7, #16]
 8018606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018608:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801860c:	693b      	ldr	r3, [r7, #16]
 801860e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8018610:	693b      	ldr	r3, [r7, #16]
 8018612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018614:	4b0f      	ldr	r3, [pc, #60]	; (8018654 <xTaskPriorityDisinherit+0xd4>)
 8018616:	681b      	ldr	r3, [r3, #0]
 8018618:	429a      	cmp	r2, r3
 801861a:	d903      	bls.n	8018624 <xTaskPriorityDisinherit+0xa4>
 801861c:	693b      	ldr	r3, [r7, #16]
 801861e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018620:	4a0c      	ldr	r2, [pc, #48]	; (8018654 <xTaskPriorityDisinherit+0xd4>)
 8018622:	6013      	str	r3, [r2, #0]
 8018624:	693b      	ldr	r3, [r7, #16]
 8018626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018628:	4613      	mov	r3, r2
 801862a:	009b      	lsls	r3, r3, #2
 801862c:	4413      	add	r3, r2
 801862e:	009b      	lsls	r3, r3, #2
 8018630:	4a09      	ldr	r2, [pc, #36]	; (8018658 <xTaskPriorityDisinherit+0xd8>)
 8018632:	441a      	add	r2, r3
 8018634:	693b      	ldr	r3, [r7, #16]
 8018636:	3304      	adds	r3, #4
 8018638:	4619      	mov	r1, r3
 801863a:	4610      	mov	r0, r2
 801863c:	f7fe f847 	bl	80166ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8018640:	2301      	movs	r3, #1
 8018642:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018644:	697b      	ldr	r3, [r7, #20]
	}
 8018646:	4618      	mov	r0, r3
 8018648:	3718      	adds	r7, #24
 801864a:	46bd      	mov	sp, r7
 801864c:	bd80      	pop	{r7, pc}
 801864e:	bf00      	nop
 8018650:	20005d04 	.word	0x20005d04
 8018654:	200061e0 	.word	0x200061e0
 8018658:	20005d08 	.word	0x20005d08

0801865c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801865c:	b580      	push	{r7, lr}
 801865e:	b088      	sub	sp, #32
 8018660:	af00      	add	r7, sp, #0
 8018662:	6078      	str	r0, [r7, #4]
 8018664:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8018666:	687b      	ldr	r3, [r7, #4]
 8018668:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801866a:	2301      	movs	r3, #1
 801866c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801866e:	687b      	ldr	r3, [r7, #4]
 8018670:	2b00      	cmp	r3, #0
 8018672:	d06a      	beq.n	801874a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8018674:	69bb      	ldr	r3, [r7, #24]
 8018676:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018678:	2b00      	cmp	r3, #0
 801867a:	d10a      	bne.n	8018692 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 801867c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018680:	f383 8811 	msr	BASEPRI, r3
 8018684:	f3bf 8f6f 	isb	sy
 8018688:	f3bf 8f4f 	dsb	sy
 801868c:	60fb      	str	r3, [r7, #12]
}
 801868e:	bf00      	nop
 8018690:	e7fe      	b.n	8018690 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8018692:	69bb      	ldr	r3, [r7, #24]
 8018694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018696:	683a      	ldr	r2, [r7, #0]
 8018698:	429a      	cmp	r2, r3
 801869a:	d902      	bls.n	80186a2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801869c:	683b      	ldr	r3, [r7, #0]
 801869e:	61fb      	str	r3, [r7, #28]
 80186a0:	e002      	b.n	80186a8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80186a2:	69bb      	ldr	r3, [r7, #24]
 80186a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80186a6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80186a8:	69bb      	ldr	r3, [r7, #24]
 80186aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80186ac:	69fa      	ldr	r2, [r7, #28]
 80186ae:	429a      	cmp	r2, r3
 80186b0:	d04b      	beq.n	801874a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80186b2:	69bb      	ldr	r3, [r7, #24]
 80186b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80186b6:	697a      	ldr	r2, [r7, #20]
 80186b8:	429a      	cmp	r2, r3
 80186ba:	d146      	bne.n	801874a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80186bc:	4b25      	ldr	r3, [pc, #148]	; (8018754 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80186be:	681b      	ldr	r3, [r3, #0]
 80186c0:	69ba      	ldr	r2, [r7, #24]
 80186c2:	429a      	cmp	r2, r3
 80186c4:	d10a      	bne.n	80186dc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80186c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80186ca:	f383 8811 	msr	BASEPRI, r3
 80186ce:	f3bf 8f6f 	isb	sy
 80186d2:	f3bf 8f4f 	dsb	sy
 80186d6:	60bb      	str	r3, [r7, #8]
}
 80186d8:	bf00      	nop
 80186da:	e7fe      	b.n	80186da <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80186dc:	69bb      	ldr	r3, [r7, #24]
 80186de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80186e0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80186e2:	69bb      	ldr	r3, [r7, #24]
 80186e4:	69fa      	ldr	r2, [r7, #28]
 80186e6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80186e8:	69bb      	ldr	r3, [r7, #24]
 80186ea:	699b      	ldr	r3, [r3, #24]
 80186ec:	2b00      	cmp	r3, #0
 80186ee:	db04      	blt.n	80186fa <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80186f0:	69fb      	ldr	r3, [r7, #28]
 80186f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80186f6:	69bb      	ldr	r3, [r7, #24]
 80186f8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80186fa:	69bb      	ldr	r3, [r7, #24]
 80186fc:	6959      	ldr	r1, [r3, #20]
 80186fe:	693a      	ldr	r2, [r7, #16]
 8018700:	4613      	mov	r3, r2
 8018702:	009b      	lsls	r3, r3, #2
 8018704:	4413      	add	r3, r2
 8018706:	009b      	lsls	r3, r3, #2
 8018708:	4a13      	ldr	r2, [pc, #76]	; (8018758 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801870a:	4413      	add	r3, r2
 801870c:	4299      	cmp	r1, r3
 801870e:	d11c      	bne.n	801874a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018710:	69bb      	ldr	r3, [r7, #24]
 8018712:	3304      	adds	r3, #4
 8018714:	4618      	mov	r0, r3
 8018716:	f7fe f837 	bl	8016788 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801871a:	69bb      	ldr	r3, [r7, #24]
 801871c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801871e:	4b0f      	ldr	r3, [pc, #60]	; (801875c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8018720:	681b      	ldr	r3, [r3, #0]
 8018722:	429a      	cmp	r2, r3
 8018724:	d903      	bls.n	801872e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8018726:	69bb      	ldr	r3, [r7, #24]
 8018728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801872a:	4a0c      	ldr	r2, [pc, #48]	; (801875c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801872c:	6013      	str	r3, [r2, #0]
 801872e:	69bb      	ldr	r3, [r7, #24]
 8018730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018732:	4613      	mov	r3, r2
 8018734:	009b      	lsls	r3, r3, #2
 8018736:	4413      	add	r3, r2
 8018738:	009b      	lsls	r3, r3, #2
 801873a:	4a07      	ldr	r2, [pc, #28]	; (8018758 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801873c:	441a      	add	r2, r3
 801873e:	69bb      	ldr	r3, [r7, #24]
 8018740:	3304      	adds	r3, #4
 8018742:	4619      	mov	r1, r3
 8018744:	4610      	mov	r0, r2
 8018746:	f7fd ffc2 	bl	80166ce <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801874a:	bf00      	nop
 801874c:	3720      	adds	r7, #32
 801874e:	46bd      	mov	sp, r7
 8018750:	bd80      	pop	{r7, pc}
 8018752:	bf00      	nop
 8018754:	20005d04 	.word	0x20005d04
 8018758:	20005d08 	.word	0x20005d08
 801875c:	200061e0 	.word	0x200061e0

08018760 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8018760:	b480      	push	{r7}
 8018762:	b083      	sub	sp, #12
 8018764:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8018766:	4b09      	ldr	r3, [pc, #36]	; (801878c <uxTaskResetEventItemValue+0x2c>)
 8018768:	681b      	ldr	r3, [r3, #0]
 801876a:	699b      	ldr	r3, [r3, #24]
 801876c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801876e:	4b07      	ldr	r3, [pc, #28]	; (801878c <uxTaskResetEventItemValue+0x2c>)
 8018770:	681b      	ldr	r3, [r3, #0]
 8018772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018774:	4b05      	ldr	r3, [pc, #20]	; (801878c <uxTaskResetEventItemValue+0x2c>)
 8018776:	681b      	ldr	r3, [r3, #0]
 8018778:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 801877c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 801877e:	687b      	ldr	r3, [r7, #4]
}
 8018780:	4618      	mov	r0, r3
 8018782:	370c      	adds	r7, #12
 8018784:	46bd      	mov	sp, r7
 8018786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801878a:	4770      	bx	lr
 801878c:	20005d04 	.word	0x20005d04

08018790 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8018790:	b480      	push	{r7}
 8018792:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8018794:	4b07      	ldr	r3, [pc, #28]	; (80187b4 <pvTaskIncrementMutexHeldCount+0x24>)
 8018796:	681b      	ldr	r3, [r3, #0]
 8018798:	2b00      	cmp	r3, #0
 801879a:	d004      	beq.n	80187a6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801879c:	4b05      	ldr	r3, [pc, #20]	; (80187b4 <pvTaskIncrementMutexHeldCount+0x24>)
 801879e:	681b      	ldr	r3, [r3, #0]
 80187a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80187a2:	3201      	adds	r2, #1
 80187a4:	661a      	str	r2, [r3, #96]	; 0x60
		}

		return pxCurrentTCB;
 80187a6:	4b03      	ldr	r3, [pc, #12]	; (80187b4 <pvTaskIncrementMutexHeldCount+0x24>)
 80187a8:	681b      	ldr	r3, [r3, #0]
	}
 80187aa:	4618      	mov	r0, r3
 80187ac:	46bd      	mov	sp, r7
 80187ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187b2:	4770      	bx	lr
 80187b4:	20005d04 	.word	0x20005d04

080187b8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80187b8:	b580      	push	{r7, lr}
 80187ba:	b084      	sub	sp, #16
 80187bc:	af00      	add	r7, sp, #0
 80187be:	6078      	str	r0, [r7, #4]
 80187c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80187c2:	4b21      	ldr	r3, [pc, #132]	; (8018848 <prvAddCurrentTaskToDelayedList+0x90>)
 80187c4:	681b      	ldr	r3, [r3, #0]
 80187c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80187c8:	4b20      	ldr	r3, [pc, #128]	; (801884c <prvAddCurrentTaskToDelayedList+0x94>)
 80187ca:	681b      	ldr	r3, [r3, #0]
 80187cc:	3304      	adds	r3, #4
 80187ce:	4618      	mov	r0, r3
 80187d0:	f7fd ffda 	bl	8016788 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80187d4:	687b      	ldr	r3, [r7, #4]
 80187d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80187da:	d10a      	bne.n	80187f2 <prvAddCurrentTaskToDelayedList+0x3a>
 80187dc:	683b      	ldr	r3, [r7, #0]
 80187de:	2b00      	cmp	r3, #0
 80187e0:	d007      	beq.n	80187f2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80187e2:	4b1a      	ldr	r3, [pc, #104]	; (801884c <prvAddCurrentTaskToDelayedList+0x94>)
 80187e4:	681b      	ldr	r3, [r3, #0]
 80187e6:	3304      	adds	r3, #4
 80187e8:	4619      	mov	r1, r3
 80187ea:	4819      	ldr	r0, [pc, #100]	; (8018850 <prvAddCurrentTaskToDelayedList+0x98>)
 80187ec:	f7fd ff6f 	bl	80166ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80187f0:	e026      	b.n	8018840 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80187f2:	68fa      	ldr	r2, [r7, #12]
 80187f4:	687b      	ldr	r3, [r7, #4]
 80187f6:	4413      	add	r3, r2
 80187f8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80187fa:	4b14      	ldr	r3, [pc, #80]	; (801884c <prvAddCurrentTaskToDelayedList+0x94>)
 80187fc:	681b      	ldr	r3, [r3, #0]
 80187fe:	68ba      	ldr	r2, [r7, #8]
 8018800:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8018802:	68ba      	ldr	r2, [r7, #8]
 8018804:	68fb      	ldr	r3, [r7, #12]
 8018806:	429a      	cmp	r2, r3
 8018808:	d209      	bcs.n	801881e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801880a:	4b12      	ldr	r3, [pc, #72]	; (8018854 <prvAddCurrentTaskToDelayedList+0x9c>)
 801880c:	681a      	ldr	r2, [r3, #0]
 801880e:	4b0f      	ldr	r3, [pc, #60]	; (801884c <prvAddCurrentTaskToDelayedList+0x94>)
 8018810:	681b      	ldr	r3, [r3, #0]
 8018812:	3304      	adds	r3, #4
 8018814:	4619      	mov	r1, r3
 8018816:	4610      	mov	r0, r2
 8018818:	f7fd ff7d 	bl	8016716 <vListInsert>
}
 801881c:	e010      	b.n	8018840 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801881e:	4b0e      	ldr	r3, [pc, #56]	; (8018858 <prvAddCurrentTaskToDelayedList+0xa0>)
 8018820:	681a      	ldr	r2, [r3, #0]
 8018822:	4b0a      	ldr	r3, [pc, #40]	; (801884c <prvAddCurrentTaskToDelayedList+0x94>)
 8018824:	681b      	ldr	r3, [r3, #0]
 8018826:	3304      	adds	r3, #4
 8018828:	4619      	mov	r1, r3
 801882a:	4610      	mov	r0, r2
 801882c:	f7fd ff73 	bl	8016716 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8018830:	4b0a      	ldr	r3, [pc, #40]	; (801885c <prvAddCurrentTaskToDelayedList+0xa4>)
 8018832:	681b      	ldr	r3, [r3, #0]
 8018834:	68ba      	ldr	r2, [r7, #8]
 8018836:	429a      	cmp	r2, r3
 8018838:	d202      	bcs.n	8018840 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801883a:	4a08      	ldr	r2, [pc, #32]	; (801885c <prvAddCurrentTaskToDelayedList+0xa4>)
 801883c:	68bb      	ldr	r3, [r7, #8]
 801883e:	6013      	str	r3, [r2, #0]
}
 8018840:	bf00      	nop
 8018842:	3710      	adds	r7, #16
 8018844:	46bd      	mov	sp, r7
 8018846:	bd80      	pop	{r7, pc}
 8018848:	200061dc 	.word	0x200061dc
 801884c:	20005d04 	.word	0x20005d04
 8018850:	200061c4 	.word	0x200061c4
 8018854:	20006194 	.word	0x20006194
 8018858:	20006190 	.word	0x20006190
 801885c:	200061f8 	.word	0x200061f8

08018860 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8018860:	b580      	push	{r7, lr}
 8018862:	b08a      	sub	sp, #40	; 0x28
 8018864:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8018866:	2300      	movs	r3, #0
 8018868:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801886a:	f000 fba1 	bl	8018fb0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801886e:	4b1c      	ldr	r3, [pc, #112]	; (80188e0 <xTimerCreateTimerTask+0x80>)
 8018870:	681b      	ldr	r3, [r3, #0]
 8018872:	2b00      	cmp	r3, #0
 8018874:	d021      	beq.n	80188ba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8018876:	2300      	movs	r3, #0
 8018878:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801887a:	2300      	movs	r3, #0
 801887c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801887e:	1d3a      	adds	r2, r7, #4
 8018880:	f107 0108 	add.w	r1, r7, #8
 8018884:	f107 030c 	add.w	r3, r7, #12
 8018888:	4618      	mov	r0, r3
 801888a:	f7fd fc6d 	bl	8016168 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801888e:	6879      	ldr	r1, [r7, #4]
 8018890:	68bb      	ldr	r3, [r7, #8]
 8018892:	68fa      	ldr	r2, [r7, #12]
 8018894:	9202      	str	r2, [sp, #8]
 8018896:	9301      	str	r3, [sp, #4]
 8018898:	2302      	movs	r3, #2
 801889a:	9300      	str	r3, [sp, #0]
 801889c:	2300      	movs	r3, #0
 801889e:	460a      	mov	r2, r1
 80188a0:	4910      	ldr	r1, [pc, #64]	; (80188e4 <xTimerCreateTimerTask+0x84>)
 80188a2:	4811      	ldr	r0, [pc, #68]	; (80188e8 <xTimerCreateTimerTask+0x88>)
 80188a4:	f7fe ff1a 	bl	80176dc <xTaskCreateStatic>
 80188a8:	4603      	mov	r3, r0
 80188aa:	4a10      	ldr	r2, [pc, #64]	; (80188ec <xTimerCreateTimerTask+0x8c>)
 80188ac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80188ae:	4b0f      	ldr	r3, [pc, #60]	; (80188ec <xTimerCreateTimerTask+0x8c>)
 80188b0:	681b      	ldr	r3, [r3, #0]
 80188b2:	2b00      	cmp	r3, #0
 80188b4:	d001      	beq.n	80188ba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80188b6:	2301      	movs	r3, #1
 80188b8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80188ba:	697b      	ldr	r3, [r7, #20]
 80188bc:	2b00      	cmp	r3, #0
 80188be:	d10a      	bne.n	80188d6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80188c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188c4:	f383 8811 	msr	BASEPRI, r3
 80188c8:	f3bf 8f6f 	isb	sy
 80188cc:	f3bf 8f4f 	dsb	sy
 80188d0:	613b      	str	r3, [r7, #16]
}
 80188d2:	bf00      	nop
 80188d4:	e7fe      	b.n	80188d4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80188d6:	697b      	ldr	r3, [r7, #20]
}
 80188d8:	4618      	mov	r0, r3
 80188da:	3718      	adds	r7, #24
 80188dc:	46bd      	mov	sp, r7
 80188de:	bd80      	pop	{r7, pc}
 80188e0:	20006234 	.word	0x20006234
 80188e4:	08020548 	.word	0x08020548
 80188e8:	08018b59 	.word	0x08018b59
 80188ec:	20006238 	.word	0x20006238

080188f0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80188f0:	b580      	push	{r7, lr}
 80188f2:	b088      	sub	sp, #32
 80188f4:	af02      	add	r7, sp, #8
 80188f6:	60f8      	str	r0, [r7, #12]
 80188f8:	60b9      	str	r1, [r7, #8]
 80188fa:	607a      	str	r2, [r7, #4]
 80188fc:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80188fe:	202c      	movs	r0, #44	; 0x2c
 8018900:	f000 fe22 	bl	8019548 <pvPortMalloc>
 8018904:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8018906:	697b      	ldr	r3, [r7, #20]
 8018908:	2b00      	cmp	r3, #0
 801890a:	d00d      	beq.n	8018928 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 801890c:	697b      	ldr	r3, [r7, #20]
 801890e:	2200      	movs	r2, #0
 8018910:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8018914:	697b      	ldr	r3, [r7, #20]
 8018916:	9301      	str	r3, [sp, #4]
 8018918:	6a3b      	ldr	r3, [r7, #32]
 801891a:	9300      	str	r3, [sp, #0]
 801891c:	683b      	ldr	r3, [r7, #0]
 801891e:	687a      	ldr	r2, [r7, #4]
 8018920:	68b9      	ldr	r1, [r7, #8]
 8018922:	68f8      	ldr	r0, [r7, #12]
 8018924:	f000 f843 	bl	80189ae <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8018928:	697b      	ldr	r3, [r7, #20]
	}
 801892a:	4618      	mov	r0, r3
 801892c:	3718      	adds	r7, #24
 801892e:	46bd      	mov	sp, r7
 8018930:	bd80      	pop	{r7, pc}

08018932 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8018932:	b580      	push	{r7, lr}
 8018934:	b08a      	sub	sp, #40	; 0x28
 8018936:	af02      	add	r7, sp, #8
 8018938:	60f8      	str	r0, [r7, #12]
 801893a:	60b9      	str	r1, [r7, #8]
 801893c:	607a      	str	r2, [r7, #4]
 801893e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8018940:	232c      	movs	r3, #44	; 0x2c
 8018942:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8018944:	693b      	ldr	r3, [r7, #16]
 8018946:	2b2c      	cmp	r3, #44	; 0x2c
 8018948:	d00a      	beq.n	8018960 <xTimerCreateStatic+0x2e>
	__asm volatile
 801894a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801894e:	f383 8811 	msr	BASEPRI, r3
 8018952:	f3bf 8f6f 	isb	sy
 8018956:	f3bf 8f4f 	dsb	sy
 801895a:	61bb      	str	r3, [r7, #24]
}
 801895c:	bf00      	nop
 801895e:	e7fe      	b.n	801895e <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8018960:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8018962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018964:	2b00      	cmp	r3, #0
 8018966:	d10a      	bne.n	801897e <xTimerCreateStatic+0x4c>
	__asm volatile
 8018968:	f04f 0350 	mov.w	r3, #80	; 0x50
 801896c:	f383 8811 	msr	BASEPRI, r3
 8018970:	f3bf 8f6f 	isb	sy
 8018974:	f3bf 8f4f 	dsb	sy
 8018978:	617b      	str	r3, [r7, #20]
}
 801897a:	bf00      	nop
 801897c:	e7fe      	b.n	801897c <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 801897e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018980:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8018982:	69fb      	ldr	r3, [r7, #28]
 8018984:	2b00      	cmp	r3, #0
 8018986:	d00d      	beq.n	80189a4 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8018988:	69fb      	ldr	r3, [r7, #28]
 801898a:	2202      	movs	r2, #2
 801898c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8018990:	69fb      	ldr	r3, [r7, #28]
 8018992:	9301      	str	r3, [sp, #4]
 8018994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018996:	9300      	str	r3, [sp, #0]
 8018998:	683b      	ldr	r3, [r7, #0]
 801899a:	687a      	ldr	r2, [r7, #4]
 801899c:	68b9      	ldr	r1, [r7, #8]
 801899e:	68f8      	ldr	r0, [r7, #12]
 80189a0:	f000 f805 	bl	80189ae <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80189a4:	69fb      	ldr	r3, [r7, #28]
	}
 80189a6:	4618      	mov	r0, r3
 80189a8:	3720      	adds	r7, #32
 80189aa:	46bd      	mov	sp, r7
 80189ac:	bd80      	pop	{r7, pc}

080189ae <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80189ae:	b580      	push	{r7, lr}
 80189b0:	b086      	sub	sp, #24
 80189b2:	af00      	add	r7, sp, #0
 80189b4:	60f8      	str	r0, [r7, #12]
 80189b6:	60b9      	str	r1, [r7, #8]
 80189b8:	607a      	str	r2, [r7, #4]
 80189ba:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80189bc:	68bb      	ldr	r3, [r7, #8]
 80189be:	2b00      	cmp	r3, #0
 80189c0:	d10a      	bne.n	80189d8 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 80189c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80189c6:	f383 8811 	msr	BASEPRI, r3
 80189ca:	f3bf 8f6f 	isb	sy
 80189ce:	f3bf 8f4f 	dsb	sy
 80189d2:	617b      	str	r3, [r7, #20]
}
 80189d4:	bf00      	nop
 80189d6:	e7fe      	b.n	80189d6 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80189d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189da:	2b00      	cmp	r3, #0
 80189dc:	d01e      	beq.n	8018a1c <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80189de:	f000 fae7 	bl	8018fb0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80189e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189e4:	68fa      	ldr	r2, [r7, #12]
 80189e6:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80189e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189ea:	68ba      	ldr	r2, [r7, #8]
 80189ec:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80189ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189f0:	683a      	ldr	r2, [r7, #0]
 80189f2:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80189f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189f6:	6a3a      	ldr	r2, [r7, #32]
 80189f8:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80189fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189fc:	3304      	adds	r3, #4
 80189fe:	4618      	mov	r0, r3
 8018a00:	f7fd fe58 	bl	80166b4 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8018a04:	687b      	ldr	r3, [r7, #4]
 8018a06:	2b00      	cmp	r3, #0
 8018a08:	d008      	beq.n	8018a1c <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8018a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018a10:	f043 0304 	orr.w	r3, r3, #4
 8018a14:	b2da      	uxtb	r2, r3
 8018a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a18:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8018a1c:	bf00      	nop
 8018a1e:	3718      	adds	r7, #24
 8018a20:	46bd      	mov	sp, r7
 8018a22:	bd80      	pop	{r7, pc}

08018a24 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8018a24:	b580      	push	{r7, lr}
 8018a26:	b08a      	sub	sp, #40	; 0x28
 8018a28:	af00      	add	r7, sp, #0
 8018a2a:	60f8      	str	r0, [r7, #12]
 8018a2c:	60b9      	str	r1, [r7, #8]
 8018a2e:	607a      	str	r2, [r7, #4]
 8018a30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8018a32:	2300      	movs	r3, #0
 8018a34:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8018a36:	68fb      	ldr	r3, [r7, #12]
 8018a38:	2b00      	cmp	r3, #0
 8018a3a:	d10a      	bne.n	8018a52 <xTimerGenericCommand+0x2e>
	__asm volatile
 8018a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a40:	f383 8811 	msr	BASEPRI, r3
 8018a44:	f3bf 8f6f 	isb	sy
 8018a48:	f3bf 8f4f 	dsb	sy
 8018a4c:	623b      	str	r3, [r7, #32]
}
 8018a4e:	bf00      	nop
 8018a50:	e7fe      	b.n	8018a50 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8018a52:	4b1a      	ldr	r3, [pc, #104]	; (8018abc <xTimerGenericCommand+0x98>)
 8018a54:	681b      	ldr	r3, [r3, #0]
 8018a56:	2b00      	cmp	r3, #0
 8018a58:	d02a      	beq.n	8018ab0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8018a5a:	68bb      	ldr	r3, [r7, #8]
 8018a5c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8018a5e:	687b      	ldr	r3, [r7, #4]
 8018a60:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8018a62:	68fb      	ldr	r3, [r7, #12]
 8018a64:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8018a66:	68bb      	ldr	r3, [r7, #8]
 8018a68:	2b05      	cmp	r3, #5
 8018a6a:	dc18      	bgt.n	8018a9e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8018a6c:	f7ff fd02 	bl	8018474 <xTaskGetSchedulerState>
 8018a70:	4603      	mov	r3, r0
 8018a72:	2b02      	cmp	r3, #2
 8018a74:	d109      	bne.n	8018a8a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8018a76:	4b11      	ldr	r3, [pc, #68]	; (8018abc <xTimerGenericCommand+0x98>)
 8018a78:	6818      	ldr	r0, [r3, #0]
 8018a7a:	f107 0110 	add.w	r1, r7, #16
 8018a7e:	2300      	movs	r3, #0
 8018a80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018a82:	f7fe f89f 	bl	8016bc4 <xQueueGenericSend>
 8018a86:	6278      	str	r0, [r7, #36]	; 0x24
 8018a88:	e012      	b.n	8018ab0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8018a8a:	4b0c      	ldr	r3, [pc, #48]	; (8018abc <xTimerGenericCommand+0x98>)
 8018a8c:	6818      	ldr	r0, [r3, #0]
 8018a8e:	f107 0110 	add.w	r1, r7, #16
 8018a92:	2300      	movs	r3, #0
 8018a94:	2200      	movs	r2, #0
 8018a96:	f7fe f895 	bl	8016bc4 <xQueueGenericSend>
 8018a9a:	6278      	str	r0, [r7, #36]	; 0x24
 8018a9c:	e008      	b.n	8018ab0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8018a9e:	4b07      	ldr	r3, [pc, #28]	; (8018abc <xTimerGenericCommand+0x98>)
 8018aa0:	6818      	ldr	r0, [r3, #0]
 8018aa2:	f107 0110 	add.w	r1, r7, #16
 8018aa6:	2300      	movs	r3, #0
 8018aa8:	683a      	ldr	r2, [r7, #0]
 8018aaa:	f7fe f989 	bl	8016dc0 <xQueueGenericSendFromISR>
 8018aae:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8018ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8018ab2:	4618      	mov	r0, r3
 8018ab4:	3728      	adds	r7, #40	; 0x28
 8018ab6:	46bd      	mov	sp, r7
 8018ab8:	bd80      	pop	{r7, pc}
 8018aba:	bf00      	nop
 8018abc:	20006234 	.word	0x20006234

08018ac0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8018ac0:	b580      	push	{r7, lr}
 8018ac2:	b088      	sub	sp, #32
 8018ac4:	af02      	add	r7, sp, #8
 8018ac6:	6078      	str	r0, [r7, #4]
 8018ac8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018aca:	4b22      	ldr	r3, [pc, #136]	; (8018b54 <prvProcessExpiredTimer+0x94>)
 8018acc:	681b      	ldr	r3, [r3, #0]
 8018ace:	68db      	ldr	r3, [r3, #12]
 8018ad0:	68db      	ldr	r3, [r3, #12]
 8018ad2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018ad4:	697b      	ldr	r3, [r7, #20]
 8018ad6:	3304      	adds	r3, #4
 8018ad8:	4618      	mov	r0, r3
 8018ada:	f7fd fe55 	bl	8016788 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018ade:	697b      	ldr	r3, [r7, #20]
 8018ae0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018ae4:	f003 0304 	and.w	r3, r3, #4
 8018ae8:	2b00      	cmp	r3, #0
 8018aea:	d022      	beq.n	8018b32 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8018aec:	697b      	ldr	r3, [r7, #20]
 8018aee:	699a      	ldr	r2, [r3, #24]
 8018af0:	687b      	ldr	r3, [r7, #4]
 8018af2:	18d1      	adds	r1, r2, r3
 8018af4:	687b      	ldr	r3, [r7, #4]
 8018af6:	683a      	ldr	r2, [r7, #0]
 8018af8:	6978      	ldr	r0, [r7, #20]
 8018afa:	f000 f8d1 	bl	8018ca0 <prvInsertTimerInActiveList>
 8018afe:	4603      	mov	r3, r0
 8018b00:	2b00      	cmp	r3, #0
 8018b02:	d01f      	beq.n	8018b44 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018b04:	2300      	movs	r3, #0
 8018b06:	9300      	str	r3, [sp, #0]
 8018b08:	2300      	movs	r3, #0
 8018b0a:	687a      	ldr	r2, [r7, #4]
 8018b0c:	2100      	movs	r1, #0
 8018b0e:	6978      	ldr	r0, [r7, #20]
 8018b10:	f7ff ff88 	bl	8018a24 <xTimerGenericCommand>
 8018b14:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8018b16:	693b      	ldr	r3, [r7, #16]
 8018b18:	2b00      	cmp	r3, #0
 8018b1a:	d113      	bne.n	8018b44 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8018b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b20:	f383 8811 	msr	BASEPRI, r3
 8018b24:	f3bf 8f6f 	isb	sy
 8018b28:	f3bf 8f4f 	dsb	sy
 8018b2c:	60fb      	str	r3, [r7, #12]
}
 8018b2e:	bf00      	nop
 8018b30:	e7fe      	b.n	8018b30 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018b32:	697b      	ldr	r3, [r7, #20]
 8018b34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018b38:	f023 0301 	bic.w	r3, r3, #1
 8018b3c:	b2da      	uxtb	r2, r3
 8018b3e:	697b      	ldr	r3, [r7, #20]
 8018b40:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018b44:	697b      	ldr	r3, [r7, #20]
 8018b46:	6a1b      	ldr	r3, [r3, #32]
 8018b48:	6978      	ldr	r0, [r7, #20]
 8018b4a:	4798      	blx	r3
}
 8018b4c:	bf00      	nop
 8018b4e:	3718      	adds	r7, #24
 8018b50:	46bd      	mov	sp, r7
 8018b52:	bd80      	pop	{r7, pc}
 8018b54:	2000622c 	.word	0x2000622c

08018b58 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8018b58:	b580      	push	{r7, lr}
 8018b5a:	b084      	sub	sp, #16
 8018b5c:	af00      	add	r7, sp, #0
 8018b5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018b60:	f107 0308 	add.w	r3, r7, #8
 8018b64:	4618      	mov	r0, r3
 8018b66:	f000 f857 	bl	8018c18 <prvGetNextExpireTime>
 8018b6a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8018b6c:	68bb      	ldr	r3, [r7, #8]
 8018b6e:	4619      	mov	r1, r3
 8018b70:	68f8      	ldr	r0, [r7, #12]
 8018b72:	f000 f803 	bl	8018b7c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8018b76:	f000 f8d5 	bl	8018d24 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018b7a:	e7f1      	b.n	8018b60 <prvTimerTask+0x8>

08018b7c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8018b7c:	b580      	push	{r7, lr}
 8018b7e:	b084      	sub	sp, #16
 8018b80:	af00      	add	r7, sp, #0
 8018b82:	6078      	str	r0, [r7, #4]
 8018b84:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8018b86:	f7fe ffe5 	bl	8017b54 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8018b8a:	f107 0308 	add.w	r3, r7, #8
 8018b8e:	4618      	mov	r0, r3
 8018b90:	f000 f866 	bl	8018c60 <prvSampleTimeNow>
 8018b94:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8018b96:	68bb      	ldr	r3, [r7, #8]
 8018b98:	2b00      	cmp	r3, #0
 8018b9a:	d130      	bne.n	8018bfe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8018b9c:	683b      	ldr	r3, [r7, #0]
 8018b9e:	2b00      	cmp	r3, #0
 8018ba0:	d10a      	bne.n	8018bb8 <prvProcessTimerOrBlockTask+0x3c>
 8018ba2:	687a      	ldr	r2, [r7, #4]
 8018ba4:	68fb      	ldr	r3, [r7, #12]
 8018ba6:	429a      	cmp	r2, r3
 8018ba8:	d806      	bhi.n	8018bb8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8018baa:	f7fe ffe1 	bl	8017b70 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8018bae:	68f9      	ldr	r1, [r7, #12]
 8018bb0:	6878      	ldr	r0, [r7, #4]
 8018bb2:	f7ff ff85 	bl	8018ac0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8018bb6:	e024      	b.n	8018c02 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8018bb8:	683b      	ldr	r3, [r7, #0]
 8018bba:	2b00      	cmp	r3, #0
 8018bbc:	d008      	beq.n	8018bd0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8018bbe:	4b13      	ldr	r3, [pc, #76]	; (8018c0c <prvProcessTimerOrBlockTask+0x90>)
 8018bc0:	681b      	ldr	r3, [r3, #0]
 8018bc2:	681b      	ldr	r3, [r3, #0]
 8018bc4:	2b00      	cmp	r3, #0
 8018bc6:	d101      	bne.n	8018bcc <prvProcessTimerOrBlockTask+0x50>
 8018bc8:	2301      	movs	r3, #1
 8018bca:	e000      	b.n	8018bce <prvProcessTimerOrBlockTask+0x52>
 8018bcc:	2300      	movs	r3, #0
 8018bce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8018bd0:	4b0f      	ldr	r3, [pc, #60]	; (8018c10 <prvProcessTimerOrBlockTask+0x94>)
 8018bd2:	6818      	ldr	r0, [r3, #0]
 8018bd4:	687a      	ldr	r2, [r7, #4]
 8018bd6:	68fb      	ldr	r3, [r7, #12]
 8018bd8:	1ad3      	subs	r3, r2, r3
 8018bda:	683a      	ldr	r2, [r7, #0]
 8018bdc:	4619      	mov	r1, r3
 8018bde:	f7fe fd49 	bl	8017674 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8018be2:	f7fe ffc5 	bl	8017b70 <xTaskResumeAll>
 8018be6:	4603      	mov	r3, r0
 8018be8:	2b00      	cmp	r3, #0
 8018bea:	d10a      	bne.n	8018c02 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8018bec:	4b09      	ldr	r3, [pc, #36]	; (8018c14 <prvProcessTimerOrBlockTask+0x98>)
 8018bee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018bf2:	601a      	str	r2, [r3, #0]
 8018bf4:	f3bf 8f4f 	dsb	sy
 8018bf8:	f3bf 8f6f 	isb	sy
}
 8018bfc:	e001      	b.n	8018c02 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8018bfe:	f7fe ffb7 	bl	8017b70 <xTaskResumeAll>
}
 8018c02:	bf00      	nop
 8018c04:	3710      	adds	r7, #16
 8018c06:	46bd      	mov	sp, r7
 8018c08:	bd80      	pop	{r7, pc}
 8018c0a:	bf00      	nop
 8018c0c:	20006230 	.word	0x20006230
 8018c10:	20006234 	.word	0x20006234
 8018c14:	e000ed04 	.word	0xe000ed04

08018c18 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8018c18:	b480      	push	{r7}
 8018c1a:	b085      	sub	sp, #20
 8018c1c:	af00      	add	r7, sp, #0
 8018c1e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8018c20:	4b0e      	ldr	r3, [pc, #56]	; (8018c5c <prvGetNextExpireTime+0x44>)
 8018c22:	681b      	ldr	r3, [r3, #0]
 8018c24:	681b      	ldr	r3, [r3, #0]
 8018c26:	2b00      	cmp	r3, #0
 8018c28:	d101      	bne.n	8018c2e <prvGetNextExpireTime+0x16>
 8018c2a:	2201      	movs	r2, #1
 8018c2c:	e000      	b.n	8018c30 <prvGetNextExpireTime+0x18>
 8018c2e:	2200      	movs	r2, #0
 8018c30:	687b      	ldr	r3, [r7, #4]
 8018c32:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8018c34:	687b      	ldr	r3, [r7, #4]
 8018c36:	681b      	ldr	r3, [r3, #0]
 8018c38:	2b00      	cmp	r3, #0
 8018c3a:	d105      	bne.n	8018c48 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018c3c:	4b07      	ldr	r3, [pc, #28]	; (8018c5c <prvGetNextExpireTime+0x44>)
 8018c3e:	681b      	ldr	r3, [r3, #0]
 8018c40:	68db      	ldr	r3, [r3, #12]
 8018c42:	681b      	ldr	r3, [r3, #0]
 8018c44:	60fb      	str	r3, [r7, #12]
 8018c46:	e001      	b.n	8018c4c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8018c48:	2300      	movs	r3, #0
 8018c4a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8018c4c:	68fb      	ldr	r3, [r7, #12]
}
 8018c4e:	4618      	mov	r0, r3
 8018c50:	3714      	adds	r7, #20
 8018c52:	46bd      	mov	sp, r7
 8018c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c58:	4770      	bx	lr
 8018c5a:	bf00      	nop
 8018c5c:	2000622c 	.word	0x2000622c

08018c60 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8018c60:	b580      	push	{r7, lr}
 8018c62:	b084      	sub	sp, #16
 8018c64:	af00      	add	r7, sp, #0
 8018c66:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8018c68:	f7ff f820 	bl	8017cac <xTaskGetTickCount>
 8018c6c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8018c6e:	4b0b      	ldr	r3, [pc, #44]	; (8018c9c <prvSampleTimeNow+0x3c>)
 8018c70:	681b      	ldr	r3, [r3, #0]
 8018c72:	68fa      	ldr	r2, [r7, #12]
 8018c74:	429a      	cmp	r2, r3
 8018c76:	d205      	bcs.n	8018c84 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8018c78:	f000 f936 	bl	8018ee8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8018c7c:	687b      	ldr	r3, [r7, #4]
 8018c7e:	2201      	movs	r2, #1
 8018c80:	601a      	str	r2, [r3, #0]
 8018c82:	e002      	b.n	8018c8a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8018c84:	687b      	ldr	r3, [r7, #4]
 8018c86:	2200      	movs	r2, #0
 8018c88:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8018c8a:	4a04      	ldr	r2, [pc, #16]	; (8018c9c <prvSampleTimeNow+0x3c>)
 8018c8c:	68fb      	ldr	r3, [r7, #12]
 8018c8e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8018c90:	68fb      	ldr	r3, [r7, #12]
}
 8018c92:	4618      	mov	r0, r3
 8018c94:	3710      	adds	r7, #16
 8018c96:	46bd      	mov	sp, r7
 8018c98:	bd80      	pop	{r7, pc}
 8018c9a:	bf00      	nop
 8018c9c:	2000623c 	.word	0x2000623c

08018ca0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8018ca0:	b580      	push	{r7, lr}
 8018ca2:	b086      	sub	sp, #24
 8018ca4:	af00      	add	r7, sp, #0
 8018ca6:	60f8      	str	r0, [r7, #12]
 8018ca8:	60b9      	str	r1, [r7, #8]
 8018caa:	607a      	str	r2, [r7, #4]
 8018cac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8018cae:	2300      	movs	r3, #0
 8018cb0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8018cb2:	68fb      	ldr	r3, [r7, #12]
 8018cb4:	68ba      	ldr	r2, [r7, #8]
 8018cb6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018cb8:	68fb      	ldr	r3, [r7, #12]
 8018cba:	68fa      	ldr	r2, [r7, #12]
 8018cbc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8018cbe:	68ba      	ldr	r2, [r7, #8]
 8018cc0:	687b      	ldr	r3, [r7, #4]
 8018cc2:	429a      	cmp	r2, r3
 8018cc4:	d812      	bhi.n	8018cec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018cc6:	687a      	ldr	r2, [r7, #4]
 8018cc8:	683b      	ldr	r3, [r7, #0]
 8018cca:	1ad2      	subs	r2, r2, r3
 8018ccc:	68fb      	ldr	r3, [r7, #12]
 8018cce:	699b      	ldr	r3, [r3, #24]
 8018cd0:	429a      	cmp	r2, r3
 8018cd2:	d302      	bcc.n	8018cda <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8018cd4:	2301      	movs	r3, #1
 8018cd6:	617b      	str	r3, [r7, #20]
 8018cd8:	e01b      	b.n	8018d12 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8018cda:	4b10      	ldr	r3, [pc, #64]	; (8018d1c <prvInsertTimerInActiveList+0x7c>)
 8018cdc:	681a      	ldr	r2, [r3, #0]
 8018cde:	68fb      	ldr	r3, [r7, #12]
 8018ce0:	3304      	adds	r3, #4
 8018ce2:	4619      	mov	r1, r3
 8018ce4:	4610      	mov	r0, r2
 8018ce6:	f7fd fd16 	bl	8016716 <vListInsert>
 8018cea:	e012      	b.n	8018d12 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8018cec:	687a      	ldr	r2, [r7, #4]
 8018cee:	683b      	ldr	r3, [r7, #0]
 8018cf0:	429a      	cmp	r2, r3
 8018cf2:	d206      	bcs.n	8018d02 <prvInsertTimerInActiveList+0x62>
 8018cf4:	68ba      	ldr	r2, [r7, #8]
 8018cf6:	683b      	ldr	r3, [r7, #0]
 8018cf8:	429a      	cmp	r2, r3
 8018cfa:	d302      	bcc.n	8018d02 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8018cfc:	2301      	movs	r3, #1
 8018cfe:	617b      	str	r3, [r7, #20]
 8018d00:	e007      	b.n	8018d12 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8018d02:	4b07      	ldr	r3, [pc, #28]	; (8018d20 <prvInsertTimerInActiveList+0x80>)
 8018d04:	681a      	ldr	r2, [r3, #0]
 8018d06:	68fb      	ldr	r3, [r7, #12]
 8018d08:	3304      	adds	r3, #4
 8018d0a:	4619      	mov	r1, r3
 8018d0c:	4610      	mov	r0, r2
 8018d0e:	f7fd fd02 	bl	8016716 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8018d12:	697b      	ldr	r3, [r7, #20]
}
 8018d14:	4618      	mov	r0, r3
 8018d16:	3718      	adds	r7, #24
 8018d18:	46bd      	mov	sp, r7
 8018d1a:	bd80      	pop	{r7, pc}
 8018d1c:	20006230 	.word	0x20006230
 8018d20:	2000622c 	.word	0x2000622c

08018d24 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8018d24:	b580      	push	{r7, lr}
 8018d26:	b08e      	sub	sp, #56	; 0x38
 8018d28:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8018d2a:	e0ca      	b.n	8018ec2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8018d2c:	687b      	ldr	r3, [r7, #4]
 8018d2e:	2b00      	cmp	r3, #0
 8018d30:	da18      	bge.n	8018d64 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8018d32:	1d3b      	adds	r3, r7, #4
 8018d34:	3304      	adds	r3, #4
 8018d36:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8018d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d3a:	2b00      	cmp	r3, #0
 8018d3c:	d10a      	bne.n	8018d54 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8018d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d42:	f383 8811 	msr	BASEPRI, r3
 8018d46:	f3bf 8f6f 	isb	sy
 8018d4a:	f3bf 8f4f 	dsb	sy
 8018d4e:	61fb      	str	r3, [r7, #28]
}
 8018d50:	bf00      	nop
 8018d52:	e7fe      	b.n	8018d52 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8018d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d56:	681b      	ldr	r3, [r3, #0]
 8018d58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018d5a:	6850      	ldr	r0, [r2, #4]
 8018d5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018d5e:	6892      	ldr	r2, [r2, #8]
 8018d60:	4611      	mov	r1, r2
 8018d62:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8018d64:	687b      	ldr	r3, [r7, #4]
 8018d66:	2b00      	cmp	r3, #0
 8018d68:	f2c0 80aa 	blt.w	8018ec0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8018d6c:	68fb      	ldr	r3, [r7, #12]
 8018d6e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8018d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d72:	695b      	ldr	r3, [r3, #20]
 8018d74:	2b00      	cmp	r3, #0
 8018d76:	d004      	beq.n	8018d82 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d7a:	3304      	adds	r3, #4
 8018d7c:	4618      	mov	r0, r3
 8018d7e:	f7fd fd03 	bl	8016788 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8018d82:	463b      	mov	r3, r7
 8018d84:	4618      	mov	r0, r3
 8018d86:	f7ff ff6b 	bl	8018c60 <prvSampleTimeNow>
 8018d8a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8018d8c:	687b      	ldr	r3, [r7, #4]
 8018d8e:	2b09      	cmp	r3, #9
 8018d90:	f200 8097 	bhi.w	8018ec2 <prvProcessReceivedCommands+0x19e>
 8018d94:	a201      	add	r2, pc, #4	; (adr r2, 8018d9c <prvProcessReceivedCommands+0x78>)
 8018d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018d9a:	bf00      	nop
 8018d9c:	08018dc5 	.word	0x08018dc5
 8018da0:	08018dc5 	.word	0x08018dc5
 8018da4:	08018dc5 	.word	0x08018dc5
 8018da8:	08018e39 	.word	0x08018e39
 8018dac:	08018e4d 	.word	0x08018e4d
 8018db0:	08018e97 	.word	0x08018e97
 8018db4:	08018dc5 	.word	0x08018dc5
 8018db8:	08018dc5 	.word	0x08018dc5
 8018dbc:	08018e39 	.word	0x08018e39
 8018dc0:	08018e4d 	.word	0x08018e4d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018dc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018dca:	f043 0301 	orr.w	r3, r3, #1
 8018dce:	b2da      	uxtb	r2, r3
 8018dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018dd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8018dd6:	68ba      	ldr	r2, [r7, #8]
 8018dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018dda:	699b      	ldr	r3, [r3, #24]
 8018ddc:	18d1      	adds	r1, r2, r3
 8018dde:	68bb      	ldr	r3, [r7, #8]
 8018de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018de2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018de4:	f7ff ff5c 	bl	8018ca0 <prvInsertTimerInActiveList>
 8018de8:	4603      	mov	r3, r0
 8018dea:	2b00      	cmp	r3, #0
 8018dec:	d069      	beq.n	8018ec2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018df0:	6a1b      	ldr	r3, [r3, #32]
 8018df2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018df4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018df8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018dfc:	f003 0304 	and.w	r3, r3, #4
 8018e00:	2b00      	cmp	r3, #0
 8018e02:	d05e      	beq.n	8018ec2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8018e04:	68ba      	ldr	r2, [r7, #8]
 8018e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e08:	699b      	ldr	r3, [r3, #24]
 8018e0a:	441a      	add	r2, r3
 8018e0c:	2300      	movs	r3, #0
 8018e0e:	9300      	str	r3, [sp, #0]
 8018e10:	2300      	movs	r3, #0
 8018e12:	2100      	movs	r1, #0
 8018e14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018e16:	f7ff fe05 	bl	8018a24 <xTimerGenericCommand>
 8018e1a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8018e1c:	6a3b      	ldr	r3, [r7, #32]
 8018e1e:	2b00      	cmp	r3, #0
 8018e20:	d14f      	bne.n	8018ec2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8018e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e26:	f383 8811 	msr	BASEPRI, r3
 8018e2a:	f3bf 8f6f 	isb	sy
 8018e2e:	f3bf 8f4f 	dsb	sy
 8018e32:	61bb      	str	r3, [r7, #24]
}
 8018e34:	bf00      	nop
 8018e36:	e7fe      	b.n	8018e36 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018e3e:	f023 0301 	bic.w	r3, r3, #1
 8018e42:	b2da      	uxtb	r2, r3
 8018e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8018e4a:	e03a      	b.n	8018ec2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018e52:	f043 0301 	orr.w	r3, r3, #1
 8018e56:	b2da      	uxtb	r2, r3
 8018e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8018e5e:	68ba      	ldr	r2, [r7, #8]
 8018e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e62:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8018e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e66:	699b      	ldr	r3, [r3, #24]
 8018e68:	2b00      	cmp	r3, #0
 8018e6a:	d10a      	bne.n	8018e82 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8018e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e70:	f383 8811 	msr	BASEPRI, r3
 8018e74:	f3bf 8f6f 	isb	sy
 8018e78:	f3bf 8f4f 	dsb	sy
 8018e7c:	617b      	str	r3, [r7, #20]
}
 8018e7e:	bf00      	nop
 8018e80:	e7fe      	b.n	8018e80 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8018e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e84:	699a      	ldr	r2, [r3, #24]
 8018e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e88:	18d1      	adds	r1, r2, r3
 8018e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018e8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018e90:	f7ff ff06 	bl	8018ca0 <prvInsertTimerInActiveList>
					break;
 8018e94:	e015      	b.n	8018ec2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8018e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018e9c:	f003 0302 	and.w	r3, r3, #2
 8018ea0:	2b00      	cmp	r3, #0
 8018ea2:	d103      	bne.n	8018eac <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8018ea4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018ea6:	f000 fc1b 	bl	80196e0 <vPortFree>
 8018eaa:	e00a      	b.n	8018ec2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018eae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018eb2:	f023 0301 	bic.w	r3, r3, #1
 8018eb6:	b2da      	uxtb	r2, r3
 8018eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018eba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8018ebe:	e000      	b.n	8018ec2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8018ec0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8018ec2:	4b08      	ldr	r3, [pc, #32]	; (8018ee4 <prvProcessReceivedCommands+0x1c0>)
 8018ec4:	681b      	ldr	r3, [r3, #0]
 8018ec6:	1d39      	adds	r1, r7, #4
 8018ec8:	2200      	movs	r2, #0
 8018eca:	4618      	mov	r0, r3
 8018ecc:	f7fe f814 	bl	8016ef8 <xQueueReceive>
 8018ed0:	4603      	mov	r3, r0
 8018ed2:	2b00      	cmp	r3, #0
 8018ed4:	f47f af2a 	bne.w	8018d2c <prvProcessReceivedCommands+0x8>
	}
}
 8018ed8:	bf00      	nop
 8018eda:	bf00      	nop
 8018edc:	3730      	adds	r7, #48	; 0x30
 8018ede:	46bd      	mov	sp, r7
 8018ee0:	bd80      	pop	{r7, pc}
 8018ee2:	bf00      	nop
 8018ee4:	20006234 	.word	0x20006234

08018ee8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8018ee8:	b580      	push	{r7, lr}
 8018eea:	b088      	sub	sp, #32
 8018eec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8018eee:	e048      	b.n	8018f82 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018ef0:	4b2d      	ldr	r3, [pc, #180]	; (8018fa8 <prvSwitchTimerLists+0xc0>)
 8018ef2:	681b      	ldr	r3, [r3, #0]
 8018ef4:	68db      	ldr	r3, [r3, #12]
 8018ef6:	681b      	ldr	r3, [r3, #0]
 8018ef8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018efa:	4b2b      	ldr	r3, [pc, #172]	; (8018fa8 <prvSwitchTimerLists+0xc0>)
 8018efc:	681b      	ldr	r3, [r3, #0]
 8018efe:	68db      	ldr	r3, [r3, #12]
 8018f00:	68db      	ldr	r3, [r3, #12]
 8018f02:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018f04:	68fb      	ldr	r3, [r7, #12]
 8018f06:	3304      	adds	r3, #4
 8018f08:	4618      	mov	r0, r3
 8018f0a:	f7fd fc3d 	bl	8016788 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018f0e:	68fb      	ldr	r3, [r7, #12]
 8018f10:	6a1b      	ldr	r3, [r3, #32]
 8018f12:	68f8      	ldr	r0, [r7, #12]
 8018f14:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018f16:	68fb      	ldr	r3, [r7, #12]
 8018f18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018f1c:	f003 0304 	and.w	r3, r3, #4
 8018f20:	2b00      	cmp	r3, #0
 8018f22:	d02e      	beq.n	8018f82 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8018f24:	68fb      	ldr	r3, [r7, #12]
 8018f26:	699b      	ldr	r3, [r3, #24]
 8018f28:	693a      	ldr	r2, [r7, #16]
 8018f2a:	4413      	add	r3, r2
 8018f2c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8018f2e:	68ba      	ldr	r2, [r7, #8]
 8018f30:	693b      	ldr	r3, [r7, #16]
 8018f32:	429a      	cmp	r2, r3
 8018f34:	d90e      	bls.n	8018f54 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8018f36:	68fb      	ldr	r3, [r7, #12]
 8018f38:	68ba      	ldr	r2, [r7, #8]
 8018f3a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018f3c:	68fb      	ldr	r3, [r7, #12]
 8018f3e:	68fa      	ldr	r2, [r7, #12]
 8018f40:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8018f42:	4b19      	ldr	r3, [pc, #100]	; (8018fa8 <prvSwitchTimerLists+0xc0>)
 8018f44:	681a      	ldr	r2, [r3, #0]
 8018f46:	68fb      	ldr	r3, [r7, #12]
 8018f48:	3304      	adds	r3, #4
 8018f4a:	4619      	mov	r1, r3
 8018f4c:	4610      	mov	r0, r2
 8018f4e:	f7fd fbe2 	bl	8016716 <vListInsert>
 8018f52:	e016      	b.n	8018f82 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018f54:	2300      	movs	r3, #0
 8018f56:	9300      	str	r3, [sp, #0]
 8018f58:	2300      	movs	r3, #0
 8018f5a:	693a      	ldr	r2, [r7, #16]
 8018f5c:	2100      	movs	r1, #0
 8018f5e:	68f8      	ldr	r0, [r7, #12]
 8018f60:	f7ff fd60 	bl	8018a24 <xTimerGenericCommand>
 8018f64:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8018f66:	687b      	ldr	r3, [r7, #4]
 8018f68:	2b00      	cmp	r3, #0
 8018f6a:	d10a      	bne.n	8018f82 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8018f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f70:	f383 8811 	msr	BASEPRI, r3
 8018f74:	f3bf 8f6f 	isb	sy
 8018f78:	f3bf 8f4f 	dsb	sy
 8018f7c:	603b      	str	r3, [r7, #0]
}
 8018f7e:	bf00      	nop
 8018f80:	e7fe      	b.n	8018f80 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8018f82:	4b09      	ldr	r3, [pc, #36]	; (8018fa8 <prvSwitchTimerLists+0xc0>)
 8018f84:	681b      	ldr	r3, [r3, #0]
 8018f86:	681b      	ldr	r3, [r3, #0]
 8018f88:	2b00      	cmp	r3, #0
 8018f8a:	d1b1      	bne.n	8018ef0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8018f8c:	4b06      	ldr	r3, [pc, #24]	; (8018fa8 <prvSwitchTimerLists+0xc0>)
 8018f8e:	681b      	ldr	r3, [r3, #0]
 8018f90:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8018f92:	4b06      	ldr	r3, [pc, #24]	; (8018fac <prvSwitchTimerLists+0xc4>)
 8018f94:	681b      	ldr	r3, [r3, #0]
 8018f96:	4a04      	ldr	r2, [pc, #16]	; (8018fa8 <prvSwitchTimerLists+0xc0>)
 8018f98:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8018f9a:	4a04      	ldr	r2, [pc, #16]	; (8018fac <prvSwitchTimerLists+0xc4>)
 8018f9c:	697b      	ldr	r3, [r7, #20]
 8018f9e:	6013      	str	r3, [r2, #0]
}
 8018fa0:	bf00      	nop
 8018fa2:	3718      	adds	r7, #24
 8018fa4:	46bd      	mov	sp, r7
 8018fa6:	bd80      	pop	{r7, pc}
 8018fa8:	2000622c 	.word	0x2000622c
 8018fac:	20006230 	.word	0x20006230

08018fb0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8018fb0:	b580      	push	{r7, lr}
 8018fb2:	b082      	sub	sp, #8
 8018fb4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8018fb6:	f000 f9a5 	bl	8019304 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8018fba:	4b15      	ldr	r3, [pc, #84]	; (8019010 <prvCheckForValidListAndQueue+0x60>)
 8018fbc:	681b      	ldr	r3, [r3, #0]
 8018fbe:	2b00      	cmp	r3, #0
 8018fc0:	d120      	bne.n	8019004 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8018fc2:	4814      	ldr	r0, [pc, #80]	; (8019014 <prvCheckForValidListAndQueue+0x64>)
 8018fc4:	f7fd fb56 	bl	8016674 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8018fc8:	4813      	ldr	r0, [pc, #76]	; (8019018 <prvCheckForValidListAndQueue+0x68>)
 8018fca:	f7fd fb53 	bl	8016674 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8018fce:	4b13      	ldr	r3, [pc, #76]	; (801901c <prvCheckForValidListAndQueue+0x6c>)
 8018fd0:	4a10      	ldr	r2, [pc, #64]	; (8019014 <prvCheckForValidListAndQueue+0x64>)
 8018fd2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8018fd4:	4b12      	ldr	r3, [pc, #72]	; (8019020 <prvCheckForValidListAndQueue+0x70>)
 8018fd6:	4a10      	ldr	r2, [pc, #64]	; (8019018 <prvCheckForValidListAndQueue+0x68>)
 8018fd8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8018fda:	2300      	movs	r3, #0
 8018fdc:	9300      	str	r3, [sp, #0]
 8018fde:	4b11      	ldr	r3, [pc, #68]	; (8019024 <prvCheckForValidListAndQueue+0x74>)
 8018fe0:	4a11      	ldr	r2, [pc, #68]	; (8019028 <prvCheckForValidListAndQueue+0x78>)
 8018fe2:	2110      	movs	r1, #16
 8018fe4:	2040      	movs	r0, #64	; 0x40
 8018fe6:	f7fd fc61 	bl	80168ac <xQueueGenericCreateStatic>
 8018fea:	4603      	mov	r3, r0
 8018fec:	4a08      	ldr	r2, [pc, #32]	; (8019010 <prvCheckForValidListAndQueue+0x60>)
 8018fee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8018ff0:	4b07      	ldr	r3, [pc, #28]	; (8019010 <prvCheckForValidListAndQueue+0x60>)
 8018ff2:	681b      	ldr	r3, [r3, #0]
 8018ff4:	2b00      	cmp	r3, #0
 8018ff6:	d005      	beq.n	8019004 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8018ff8:	4b05      	ldr	r3, [pc, #20]	; (8019010 <prvCheckForValidListAndQueue+0x60>)
 8018ffa:	681b      	ldr	r3, [r3, #0]
 8018ffc:	490b      	ldr	r1, [pc, #44]	; (801902c <prvCheckForValidListAndQueue+0x7c>)
 8018ffe:	4618      	mov	r0, r3
 8019000:	f7fe fb0e 	bl	8017620 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8019004:	f000 f9ae 	bl	8019364 <vPortExitCritical>
}
 8019008:	bf00      	nop
 801900a:	46bd      	mov	sp, r7
 801900c:	bd80      	pop	{r7, pc}
 801900e:	bf00      	nop
 8019010:	20006234 	.word	0x20006234
 8019014:	20006204 	.word	0x20006204
 8019018:	20006218 	.word	0x20006218
 801901c:	2000622c 	.word	0x2000622c
 8019020:	20006230 	.word	0x20006230
 8019024:	20006640 	.word	0x20006640
 8019028:	20006240 	.word	0x20006240
 801902c:	08020550 	.word	0x08020550

08019030 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8019030:	b580      	push	{r7, lr}
 8019032:	b086      	sub	sp, #24
 8019034:	af00      	add	r7, sp, #0
 8019036:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8019038:	687b      	ldr	r3, [r7, #4]
 801903a:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 801903c:	687b      	ldr	r3, [r7, #4]
 801903e:	2b00      	cmp	r3, #0
 8019040:	d10a      	bne.n	8019058 <pvTimerGetTimerID+0x28>
	__asm volatile
 8019042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019046:	f383 8811 	msr	BASEPRI, r3
 801904a:	f3bf 8f6f 	isb	sy
 801904e:	f3bf 8f4f 	dsb	sy
 8019052:	60fb      	str	r3, [r7, #12]
}
 8019054:	bf00      	nop
 8019056:	e7fe      	b.n	8019056 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8019058:	f000 f954 	bl	8019304 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 801905c:	697b      	ldr	r3, [r7, #20]
 801905e:	69db      	ldr	r3, [r3, #28]
 8019060:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8019062:	f000 f97f 	bl	8019364 <vPortExitCritical>

	return pvReturn;
 8019066:	693b      	ldr	r3, [r7, #16]
}
 8019068:	4618      	mov	r0, r3
 801906a:	3718      	adds	r7, #24
 801906c:	46bd      	mov	sp, r7
 801906e:	bd80      	pop	{r7, pc}

08019070 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8019070:	b580      	push	{r7, lr}
 8019072:	b08a      	sub	sp, #40	; 0x28
 8019074:	af00      	add	r7, sp, #0
 8019076:	60f8      	str	r0, [r7, #12]
 8019078:	60b9      	str	r1, [r7, #8]
 801907a:	607a      	str	r2, [r7, #4]
 801907c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 801907e:	f06f 0301 	mvn.w	r3, #1
 8019082:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8019084:	68fb      	ldr	r3, [r7, #12]
 8019086:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8019088:	68bb      	ldr	r3, [r7, #8]
 801908a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 801908c:	687b      	ldr	r3, [r7, #4]
 801908e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8019090:	4b06      	ldr	r3, [pc, #24]	; (80190ac <xTimerPendFunctionCallFromISR+0x3c>)
 8019092:	6818      	ldr	r0, [r3, #0]
 8019094:	f107 0114 	add.w	r1, r7, #20
 8019098:	2300      	movs	r3, #0
 801909a:	683a      	ldr	r2, [r7, #0]
 801909c:	f7fd fe90 	bl	8016dc0 <xQueueGenericSendFromISR>
 80190a0:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80190a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80190a4:	4618      	mov	r0, r3
 80190a6:	3728      	adds	r7, #40	; 0x28
 80190a8:	46bd      	mov	sp, r7
 80190aa:	bd80      	pop	{r7, pc}
 80190ac:	20006234 	.word	0x20006234

080190b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80190b0:	b480      	push	{r7}
 80190b2:	b085      	sub	sp, #20
 80190b4:	af00      	add	r7, sp, #0
 80190b6:	60f8      	str	r0, [r7, #12]
 80190b8:	60b9      	str	r1, [r7, #8]
 80190ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80190bc:	68fb      	ldr	r3, [r7, #12]
 80190be:	3b04      	subs	r3, #4
 80190c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80190c2:	68fb      	ldr	r3, [r7, #12]
 80190c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80190c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80190ca:	68fb      	ldr	r3, [r7, #12]
 80190cc:	3b04      	subs	r3, #4
 80190ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80190d0:	68bb      	ldr	r3, [r7, #8]
 80190d2:	f023 0201 	bic.w	r2, r3, #1
 80190d6:	68fb      	ldr	r3, [r7, #12]
 80190d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80190da:	68fb      	ldr	r3, [r7, #12]
 80190dc:	3b04      	subs	r3, #4
 80190de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80190e0:	4a0c      	ldr	r2, [pc, #48]	; (8019114 <pxPortInitialiseStack+0x64>)
 80190e2:	68fb      	ldr	r3, [r7, #12]
 80190e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80190e6:	68fb      	ldr	r3, [r7, #12]
 80190e8:	3b14      	subs	r3, #20
 80190ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80190ec:	687a      	ldr	r2, [r7, #4]
 80190ee:	68fb      	ldr	r3, [r7, #12]
 80190f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80190f2:	68fb      	ldr	r3, [r7, #12]
 80190f4:	3b04      	subs	r3, #4
 80190f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80190f8:	68fb      	ldr	r3, [r7, #12]
 80190fa:	f06f 0202 	mvn.w	r2, #2
 80190fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8019100:	68fb      	ldr	r3, [r7, #12]
 8019102:	3b20      	subs	r3, #32
 8019104:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8019106:	68fb      	ldr	r3, [r7, #12]
}
 8019108:	4618      	mov	r0, r3
 801910a:	3714      	adds	r7, #20
 801910c:	46bd      	mov	sp, r7
 801910e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019112:	4770      	bx	lr
 8019114:	08019119 	.word	0x08019119

08019118 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8019118:	b480      	push	{r7}
 801911a:	b085      	sub	sp, #20
 801911c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801911e:	2300      	movs	r3, #0
 8019120:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8019122:	4b12      	ldr	r3, [pc, #72]	; (801916c <prvTaskExitError+0x54>)
 8019124:	681b      	ldr	r3, [r3, #0]
 8019126:	f1b3 3fff 	cmp.w	r3, #4294967295
 801912a:	d00a      	beq.n	8019142 <prvTaskExitError+0x2a>
	__asm volatile
 801912c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019130:	f383 8811 	msr	BASEPRI, r3
 8019134:	f3bf 8f6f 	isb	sy
 8019138:	f3bf 8f4f 	dsb	sy
 801913c:	60fb      	str	r3, [r7, #12]
}
 801913e:	bf00      	nop
 8019140:	e7fe      	b.n	8019140 <prvTaskExitError+0x28>
	__asm volatile
 8019142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019146:	f383 8811 	msr	BASEPRI, r3
 801914a:	f3bf 8f6f 	isb	sy
 801914e:	f3bf 8f4f 	dsb	sy
 8019152:	60bb      	str	r3, [r7, #8]
}
 8019154:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8019156:	bf00      	nop
 8019158:	687b      	ldr	r3, [r7, #4]
 801915a:	2b00      	cmp	r3, #0
 801915c:	d0fc      	beq.n	8019158 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801915e:	bf00      	nop
 8019160:	bf00      	nop
 8019162:	3714      	adds	r7, #20
 8019164:	46bd      	mov	sp, r7
 8019166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801916a:	4770      	bx	lr
 801916c:	200000a0 	.word	0x200000a0

08019170 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8019170:	4b07      	ldr	r3, [pc, #28]	; (8019190 <pxCurrentTCBConst2>)
 8019172:	6819      	ldr	r1, [r3, #0]
 8019174:	6808      	ldr	r0, [r1, #0]
 8019176:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801917a:	f380 8809 	msr	PSP, r0
 801917e:	f3bf 8f6f 	isb	sy
 8019182:	f04f 0000 	mov.w	r0, #0
 8019186:	f380 8811 	msr	BASEPRI, r0
 801918a:	4770      	bx	lr
 801918c:	f3af 8000 	nop.w

08019190 <pxCurrentTCBConst2>:
 8019190:	20005d04 	.word	0x20005d04
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8019194:	bf00      	nop
 8019196:	bf00      	nop

08019198 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8019198:	4808      	ldr	r0, [pc, #32]	; (80191bc <prvPortStartFirstTask+0x24>)
 801919a:	6800      	ldr	r0, [r0, #0]
 801919c:	6800      	ldr	r0, [r0, #0]
 801919e:	f380 8808 	msr	MSP, r0
 80191a2:	f04f 0000 	mov.w	r0, #0
 80191a6:	f380 8814 	msr	CONTROL, r0
 80191aa:	b662      	cpsie	i
 80191ac:	b661      	cpsie	f
 80191ae:	f3bf 8f4f 	dsb	sy
 80191b2:	f3bf 8f6f 	isb	sy
 80191b6:	df00      	svc	0
 80191b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80191ba:	bf00      	nop
 80191bc:	e000ed08 	.word	0xe000ed08

080191c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80191c0:	b580      	push	{r7, lr}
 80191c2:	b086      	sub	sp, #24
 80191c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80191c6:	4b46      	ldr	r3, [pc, #280]	; (80192e0 <xPortStartScheduler+0x120>)
 80191c8:	681b      	ldr	r3, [r3, #0]
 80191ca:	4a46      	ldr	r2, [pc, #280]	; (80192e4 <xPortStartScheduler+0x124>)
 80191cc:	4293      	cmp	r3, r2
 80191ce:	d10a      	bne.n	80191e6 <xPortStartScheduler+0x26>
	__asm volatile
 80191d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80191d4:	f383 8811 	msr	BASEPRI, r3
 80191d8:	f3bf 8f6f 	isb	sy
 80191dc:	f3bf 8f4f 	dsb	sy
 80191e0:	613b      	str	r3, [r7, #16]
}
 80191e2:	bf00      	nop
 80191e4:	e7fe      	b.n	80191e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80191e6:	4b3e      	ldr	r3, [pc, #248]	; (80192e0 <xPortStartScheduler+0x120>)
 80191e8:	681b      	ldr	r3, [r3, #0]
 80191ea:	4a3f      	ldr	r2, [pc, #252]	; (80192e8 <xPortStartScheduler+0x128>)
 80191ec:	4293      	cmp	r3, r2
 80191ee:	d10a      	bne.n	8019206 <xPortStartScheduler+0x46>
	__asm volatile
 80191f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80191f4:	f383 8811 	msr	BASEPRI, r3
 80191f8:	f3bf 8f6f 	isb	sy
 80191fc:	f3bf 8f4f 	dsb	sy
 8019200:	60fb      	str	r3, [r7, #12]
}
 8019202:	bf00      	nop
 8019204:	e7fe      	b.n	8019204 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8019206:	4b39      	ldr	r3, [pc, #228]	; (80192ec <xPortStartScheduler+0x12c>)
 8019208:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801920a:	697b      	ldr	r3, [r7, #20]
 801920c:	781b      	ldrb	r3, [r3, #0]
 801920e:	b2db      	uxtb	r3, r3
 8019210:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8019212:	697b      	ldr	r3, [r7, #20]
 8019214:	22ff      	movs	r2, #255	; 0xff
 8019216:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8019218:	697b      	ldr	r3, [r7, #20]
 801921a:	781b      	ldrb	r3, [r3, #0]
 801921c:	b2db      	uxtb	r3, r3
 801921e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8019220:	78fb      	ldrb	r3, [r7, #3]
 8019222:	b2db      	uxtb	r3, r3
 8019224:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8019228:	b2da      	uxtb	r2, r3
 801922a:	4b31      	ldr	r3, [pc, #196]	; (80192f0 <xPortStartScheduler+0x130>)
 801922c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801922e:	4b31      	ldr	r3, [pc, #196]	; (80192f4 <xPortStartScheduler+0x134>)
 8019230:	2207      	movs	r2, #7
 8019232:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8019234:	e009      	b.n	801924a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8019236:	4b2f      	ldr	r3, [pc, #188]	; (80192f4 <xPortStartScheduler+0x134>)
 8019238:	681b      	ldr	r3, [r3, #0]
 801923a:	3b01      	subs	r3, #1
 801923c:	4a2d      	ldr	r2, [pc, #180]	; (80192f4 <xPortStartScheduler+0x134>)
 801923e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8019240:	78fb      	ldrb	r3, [r7, #3]
 8019242:	b2db      	uxtb	r3, r3
 8019244:	005b      	lsls	r3, r3, #1
 8019246:	b2db      	uxtb	r3, r3
 8019248:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801924a:	78fb      	ldrb	r3, [r7, #3]
 801924c:	b2db      	uxtb	r3, r3
 801924e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019252:	2b80      	cmp	r3, #128	; 0x80
 8019254:	d0ef      	beq.n	8019236 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8019256:	4b27      	ldr	r3, [pc, #156]	; (80192f4 <xPortStartScheduler+0x134>)
 8019258:	681b      	ldr	r3, [r3, #0]
 801925a:	f1c3 0307 	rsb	r3, r3, #7
 801925e:	2b04      	cmp	r3, #4
 8019260:	d00a      	beq.n	8019278 <xPortStartScheduler+0xb8>
	__asm volatile
 8019262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019266:	f383 8811 	msr	BASEPRI, r3
 801926a:	f3bf 8f6f 	isb	sy
 801926e:	f3bf 8f4f 	dsb	sy
 8019272:	60bb      	str	r3, [r7, #8]
}
 8019274:	bf00      	nop
 8019276:	e7fe      	b.n	8019276 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8019278:	4b1e      	ldr	r3, [pc, #120]	; (80192f4 <xPortStartScheduler+0x134>)
 801927a:	681b      	ldr	r3, [r3, #0]
 801927c:	021b      	lsls	r3, r3, #8
 801927e:	4a1d      	ldr	r2, [pc, #116]	; (80192f4 <xPortStartScheduler+0x134>)
 8019280:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8019282:	4b1c      	ldr	r3, [pc, #112]	; (80192f4 <xPortStartScheduler+0x134>)
 8019284:	681b      	ldr	r3, [r3, #0]
 8019286:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801928a:	4a1a      	ldr	r2, [pc, #104]	; (80192f4 <xPortStartScheduler+0x134>)
 801928c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801928e:	687b      	ldr	r3, [r7, #4]
 8019290:	b2da      	uxtb	r2, r3
 8019292:	697b      	ldr	r3, [r7, #20]
 8019294:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8019296:	4b18      	ldr	r3, [pc, #96]	; (80192f8 <xPortStartScheduler+0x138>)
 8019298:	681b      	ldr	r3, [r3, #0]
 801929a:	4a17      	ldr	r2, [pc, #92]	; (80192f8 <xPortStartScheduler+0x138>)
 801929c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80192a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80192a2:	4b15      	ldr	r3, [pc, #84]	; (80192f8 <xPortStartScheduler+0x138>)
 80192a4:	681b      	ldr	r3, [r3, #0]
 80192a6:	4a14      	ldr	r2, [pc, #80]	; (80192f8 <xPortStartScheduler+0x138>)
 80192a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80192ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80192ae:	f000 f8dd 	bl	801946c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80192b2:	4b12      	ldr	r3, [pc, #72]	; (80192fc <xPortStartScheduler+0x13c>)
 80192b4:	2200      	movs	r2, #0
 80192b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80192b8:	f000 f8fc 	bl	80194b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80192bc:	4b10      	ldr	r3, [pc, #64]	; (8019300 <xPortStartScheduler+0x140>)
 80192be:	681b      	ldr	r3, [r3, #0]
 80192c0:	4a0f      	ldr	r2, [pc, #60]	; (8019300 <xPortStartScheduler+0x140>)
 80192c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80192c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80192c8:	f7ff ff66 	bl	8019198 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80192cc:	f7fe fdb8 	bl	8017e40 <vTaskSwitchContext>
	prvTaskExitError();
 80192d0:	f7ff ff22 	bl	8019118 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80192d4:	2300      	movs	r3, #0
}
 80192d6:	4618      	mov	r0, r3
 80192d8:	3718      	adds	r7, #24
 80192da:	46bd      	mov	sp, r7
 80192dc:	bd80      	pop	{r7, pc}
 80192de:	bf00      	nop
 80192e0:	e000ed00 	.word	0xe000ed00
 80192e4:	410fc271 	.word	0x410fc271
 80192e8:	410fc270 	.word	0x410fc270
 80192ec:	e000e400 	.word	0xe000e400
 80192f0:	20006690 	.word	0x20006690
 80192f4:	20006694 	.word	0x20006694
 80192f8:	e000ed20 	.word	0xe000ed20
 80192fc:	200000a0 	.word	0x200000a0
 8019300:	e000ef34 	.word	0xe000ef34

08019304 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8019304:	b480      	push	{r7}
 8019306:	b083      	sub	sp, #12
 8019308:	af00      	add	r7, sp, #0
	__asm volatile
 801930a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801930e:	f383 8811 	msr	BASEPRI, r3
 8019312:	f3bf 8f6f 	isb	sy
 8019316:	f3bf 8f4f 	dsb	sy
 801931a:	607b      	str	r3, [r7, #4]
}
 801931c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801931e:	4b0f      	ldr	r3, [pc, #60]	; (801935c <vPortEnterCritical+0x58>)
 8019320:	681b      	ldr	r3, [r3, #0]
 8019322:	3301      	adds	r3, #1
 8019324:	4a0d      	ldr	r2, [pc, #52]	; (801935c <vPortEnterCritical+0x58>)
 8019326:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8019328:	4b0c      	ldr	r3, [pc, #48]	; (801935c <vPortEnterCritical+0x58>)
 801932a:	681b      	ldr	r3, [r3, #0]
 801932c:	2b01      	cmp	r3, #1
 801932e:	d10f      	bne.n	8019350 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8019330:	4b0b      	ldr	r3, [pc, #44]	; (8019360 <vPortEnterCritical+0x5c>)
 8019332:	681b      	ldr	r3, [r3, #0]
 8019334:	b2db      	uxtb	r3, r3
 8019336:	2b00      	cmp	r3, #0
 8019338:	d00a      	beq.n	8019350 <vPortEnterCritical+0x4c>
	__asm volatile
 801933a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801933e:	f383 8811 	msr	BASEPRI, r3
 8019342:	f3bf 8f6f 	isb	sy
 8019346:	f3bf 8f4f 	dsb	sy
 801934a:	603b      	str	r3, [r7, #0]
}
 801934c:	bf00      	nop
 801934e:	e7fe      	b.n	801934e <vPortEnterCritical+0x4a>
	}
}
 8019350:	bf00      	nop
 8019352:	370c      	adds	r7, #12
 8019354:	46bd      	mov	sp, r7
 8019356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801935a:	4770      	bx	lr
 801935c:	200000a0 	.word	0x200000a0
 8019360:	e000ed04 	.word	0xe000ed04

08019364 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8019364:	b480      	push	{r7}
 8019366:	b083      	sub	sp, #12
 8019368:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801936a:	4b12      	ldr	r3, [pc, #72]	; (80193b4 <vPortExitCritical+0x50>)
 801936c:	681b      	ldr	r3, [r3, #0]
 801936e:	2b00      	cmp	r3, #0
 8019370:	d10a      	bne.n	8019388 <vPortExitCritical+0x24>
	__asm volatile
 8019372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019376:	f383 8811 	msr	BASEPRI, r3
 801937a:	f3bf 8f6f 	isb	sy
 801937e:	f3bf 8f4f 	dsb	sy
 8019382:	607b      	str	r3, [r7, #4]
}
 8019384:	bf00      	nop
 8019386:	e7fe      	b.n	8019386 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8019388:	4b0a      	ldr	r3, [pc, #40]	; (80193b4 <vPortExitCritical+0x50>)
 801938a:	681b      	ldr	r3, [r3, #0]
 801938c:	3b01      	subs	r3, #1
 801938e:	4a09      	ldr	r2, [pc, #36]	; (80193b4 <vPortExitCritical+0x50>)
 8019390:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8019392:	4b08      	ldr	r3, [pc, #32]	; (80193b4 <vPortExitCritical+0x50>)
 8019394:	681b      	ldr	r3, [r3, #0]
 8019396:	2b00      	cmp	r3, #0
 8019398:	d105      	bne.n	80193a6 <vPortExitCritical+0x42>
 801939a:	2300      	movs	r3, #0
 801939c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801939e:	683b      	ldr	r3, [r7, #0]
 80193a0:	f383 8811 	msr	BASEPRI, r3
}
 80193a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80193a6:	bf00      	nop
 80193a8:	370c      	adds	r7, #12
 80193aa:	46bd      	mov	sp, r7
 80193ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193b0:	4770      	bx	lr
 80193b2:	bf00      	nop
 80193b4:	200000a0 	.word	0x200000a0
	...

080193c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80193c0:	f3ef 8009 	mrs	r0, PSP
 80193c4:	f3bf 8f6f 	isb	sy
 80193c8:	4b15      	ldr	r3, [pc, #84]	; (8019420 <pxCurrentTCBConst>)
 80193ca:	681a      	ldr	r2, [r3, #0]
 80193cc:	f01e 0f10 	tst.w	lr, #16
 80193d0:	bf08      	it	eq
 80193d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80193d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193da:	6010      	str	r0, [r2, #0]
 80193dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80193e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80193e4:	f380 8811 	msr	BASEPRI, r0
 80193e8:	f3bf 8f4f 	dsb	sy
 80193ec:	f3bf 8f6f 	isb	sy
 80193f0:	f7fe fd26 	bl	8017e40 <vTaskSwitchContext>
 80193f4:	f04f 0000 	mov.w	r0, #0
 80193f8:	f380 8811 	msr	BASEPRI, r0
 80193fc:	bc09      	pop	{r0, r3}
 80193fe:	6819      	ldr	r1, [r3, #0]
 8019400:	6808      	ldr	r0, [r1, #0]
 8019402:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019406:	f01e 0f10 	tst.w	lr, #16
 801940a:	bf08      	it	eq
 801940c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8019410:	f380 8809 	msr	PSP, r0
 8019414:	f3bf 8f6f 	isb	sy
 8019418:	4770      	bx	lr
 801941a:	bf00      	nop
 801941c:	f3af 8000 	nop.w

08019420 <pxCurrentTCBConst>:
 8019420:	20005d04 	.word	0x20005d04
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8019424:	bf00      	nop
 8019426:	bf00      	nop

08019428 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8019428:	b580      	push	{r7, lr}
 801942a:	b082      	sub	sp, #8
 801942c:	af00      	add	r7, sp, #0
	__asm volatile
 801942e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019432:	f383 8811 	msr	BASEPRI, r3
 8019436:	f3bf 8f6f 	isb	sy
 801943a:	f3bf 8f4f 	dsb	sy
 801943e:	607b      	str	r3, [r7, #4]
}
 8019440:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8019442:	f7fe fc43 	bl	8017ccc <xTaskIncrementTick>
 8019446:	4603      	mov	r3, r0
 8019448:	2b00      	cmp	r3, #0
 801944a:	d003      	beq.n	8019454 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801944c:	4b06      	ldr	r3, [pc, #24]	; (8019468 <xPortSysTickHandler+0x40>)
 801944e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019452:	601a      	str	r2, [r3, #0]
 8019454:	2300      	movs	r3, #0
 8019456:	603b      	str	r3, [r7, #0]
	__asm volatile
 8019458:	683b      	ldr	r3, [r7, #0]
 801945a:	f383 8811 	msr	BASEPRI, r3
}
 801945e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8019460:	bf00      	nop
 8019462:	3708      	adds	r7, #8
 8019464:	46bd      	mov	sp, r7
 8019466:	bd80      	pop	{r7, pc}
 8019468:	e000ed04 	.word	0xe000ed04

0801946c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801946c:	b480      	push	{r7}
 801946e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8019470:	4b0b      	ldr	r3, [pc, #44]	; (80194a0 <vPortSetupTimerInterrupt+0x34>)
 8019472:	2200      	movs	r2, #0
 8019474:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8019476:	4b0b      	ldr	r3, [pc, #44]	; (80194a4 <vPortSetupTimerInterrupt+0x38>)
 8019478:	2200      	movs	r2, #0
 801947a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801947c:	4b0a      	ldr	r3, [pc, #40]	; (80194a8 <vPortSetupTimerInterrupt+0x3c>)
 801947e:	681b      	ldr	r3, [r3, #0]
 8019480:	4a0a      	ldr	r2, [pc, #40]	; (80194ac <vPortSetupTimerInterrupt+0x40>)
 8019482:	fba2 2303 	umull	r2, r3, r2, r3
 8019486:	099b      	lsrs	r3, r3, #6
 8019488:	4a09      	ldr	r2, [pc, #36]	; (80194b0 <vPortSetupTimerInterrupt+0x44>)
 801948a:	3b01      	subs	r3, #1
 801948c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801948e:	4b04      	ldr	r3, [pc, #16]	; (80194a0 <vPortSetupTimerInterrupt+0x34>)
 8019490:	2207      	movs	r2, #7
 8019492:	601a      	str	r2, [r3, #0]
}
 8019494:	bf00      	nop
 8019496:	46bd      	mov	sp, r7
 8019498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801949c:	4770      	bx	lr
 801949e:	bf00      	nop
 80194a0:	e000e010 	.word	0xe000e010
 80194a4:	e000e018 	.word	0xe000e018
 80194a8:	20000094 	.word	0x20000094
 80194ac:	10624dd3 	.word	0x10624dd3
 80194b0:	e000e014 	.word	0xe000e014

080194b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80194b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80194c4 <vPortEnableVFP+0x10>
 80194b8:	6801      	ldr	r1, [r0, #0]
 80194ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80194be:	6001      	str	r1, [r0, #0]
 80194c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80194c2:	bf00      	nop
 80194c4:	e000ed88 	.word	0xe000ed88

080194c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80194c8:	b480      	push	{r7}
 80194ca:	b085      	sub	sp, #20
 80194cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80194ce:	f3ef 8305 	mrs	r3, IPSR
 80194d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80194d4:	68fb      	ldr	r3, [r7, #12]
 80194d6:	2b0f      	cmp	r3, #15
 80194d8:	d914      	bls.n	8019504 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80194da:	4a17      	ldr	r2, [pc, #92]	; (8019538 <vPortValidateInterruptPriority+0x70>)
 80194dc:	68fb      	ldr	r3, [r7, #12]
 80194de:	4413      	add	r3, r2
 80194e0:	781b      	ldrb	r3, [r3, #0]
 80194e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80194e4:	4b15      	ldr	r3, [pc, #84]	; (801953c <vPortValidateInterruptPriority+0x74>)
 80194e6:	781b      	ldrb	r3, [r3, #0]
 80194e8:	7afa      	ldrb	r2, [r7, #11]
 80194ea:	429a      	cmp	r2, r3
 80194ec:	d20a      	bcs.n	8019504 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80194ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80194f2:	f383 8811 	msr	BASEPRI, r3
 80194f6:	f3bf 8f6f 	isb	sy
 80194fa:	f3bf 8f4f 	dsb	sy
 80194fe:	607b      	str	r3, [r7, #4]
}
 8019500:	bf00      	nop
 8019502:	e7fe      	b.n	8019502 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8019504:	4b0e      	ldr	r3, [pc, #56]	; (8019540 <vPortValidateInterruptPriority+0x78>)
 8019506:	681b      	ldr	r3, [r3, #0]
 8019508:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801950c:	4b0d      	ldr	r3, [pc, #52]	; (8019544 <vPortValidateInterruptPriority+0x7c>)
 801950e:	681b      	ldr	r3, [r3, #0]
 8019510:	429a      	cmp	r2, r3
 8019512:	d90a      	bls.n	801952a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8019514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019518:	f383 8811 	msr	BASEPRI, r3
 801951c:	f3bf 8f6f 	isb	sy
 8019520:	f3bf 8f4f 	dsb	sy
 8019524:	603b      	str	r3, [r7, #0]
}
 8019526:	bf00      	nop
 8019528:	e7fe      	b.n	8019528 <vPortValidateInterruptPriority+0x60>
	}
 801952a:	bf00      	nop
 801952c:	3714      	adds	r7, #20
 801952e:	46bd      	mov	sp, r7
 8019530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019534:	4770      	bx	lr
 8019536:	bf00      	nop
 8019538:	e000e3f0 	.word	0xe000e3f0
 801953c:	20006690 	.word	0x20006690
 8019540:	e000ed0c 	.word	0xe000ed0c
 8019544:	20006694 	.word	0x20006694

08019548 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8019548:	b580      	push	{r7, lr}
 801954a:	b08a      	sub	sp, #40	; 0x28
 801954c:	af00      	add	r7, sp, #0
 801954e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8019550:	2300      	movs	r3, #0
 8019552:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8019554:	f7fe fafe 	bl	8017b54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8019558:	4b5b      	ldr	r3, [pc, #364]	; (80196c8 <pvPortMalloc+0x180>)
 801955a:	681b      	ldr	r3, [r3, #0]
 801955c:	2b00      	cmp	r3, #0
 801955e:	d101      	bne.n	8019564 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8019560:	f000 f920 	bl	80197a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8019564:	4b59      	ldr	r3, [pc, #356]	; (80196cc <pvPortMalloc+0x184>)
 8019566:	681a      	ldr	r2, [r3, #0]
 8019568:	687b      	ldr	r3, [r7, #4]
 801956a:	4013      	ands	r3, r2
 801956c:	2b00      	cmp	r3, #0
 801956e:	f040 8093 	bne.w	8019698 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8019572:	687b      	ldr	r3, [r7, #4]
 8019574:	2b00      	cmp	r3, #0
 8019576:	d01d      	beq.n	80195b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8019578:	2208      	movs	r2, #8
 801957a:	687b      	ldr	r3, [r7, #4]
 801957c:	4413      	add	r3, r2
 801957e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8019580:	687b      	ldr	r3, [r7, #4]
 8019582:	f003 0307 	and.w	r3, r3, #7
 8019586:	2b00      	cmp	r3, #0
 8019588:	d014      	beq.n	80195b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801958a:	687b      	ldr	r3, [r7, #4]
 801958c:	f023 0307 	bic.w	r3, r3, #7
 8019590:	3308      	adds	r3, #8
 8019592:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019594:	687b      	ldr	r3, [r7, #4]
 8019596:	f003 0307 	and.w	r3, r3, #7
 801959a:	2b00      	cmp	r3, #0
 801959c:	d00a      	beq.n	80195b4 <pvPortMalloc+0x6c>
	__asm volatile
 801959e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80195a2:	f383 8811 	msr	BASEPRI, r3
 80195a6:	f3bf 8f6f 	isb	sy
 80195aa:	f3bf 8f4f 	dsb	sy
 80195ae:	617b      	str	r3, [r7, #20]
}
 80195b0:	bf00      	nop
 80195b2:	e7fe      	b.n	80195b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80195b4:	687b      	ldr	r3, [r7, #4]
 80195b6:	2b00      	cmp	r3, #0
 80195b8:	d06e      	beq.n	8019698 <pvPortMalloc+0x150>
 80195ba:	4b45      	ldr	r3, [pc, #276]	; (80196d0 <pvPortMalloc+0x188>)
 80195bc:	681b      	ldr	r3, [r3, #0]
 80195be:	687a      	ldr	r2, [r7, #4]
 80195c0:	429a      	cmp	r2, r3
 80195c2:	d869      	bhi.n	8019698 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80195c4:	4b43      	ldr	r3, [pc, #268]	; (80196d4 <pvPortMalloc+0x18c>)
 80195c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80195c8:	4b42      	ldr	r3, [pc, #264]	; (80196d4 <pvPortMalloc+0x18c>)
 80195ca:	681b      	ldr	r3, [r3, #0]
 80195cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80195ce:	e004      	b.n	80195da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80195d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80195d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195d6:	681b      	ldr	r3, [r3, #0]
 80195d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80195da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195dc:	685b      	ldr	r3, [r3, #4]
 80195de:	687a      	ldr	r2, [r7, #4]
 80195e0:	429a      	cmp	r2, r3
 80195e2:	d903      	bls.n	80195ec <pvPortMalloc+0xa4>
 80195e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195e6:	681b      	ldr	r3, [r3, #0]
 80195e8:	2b00      	cmp	r3, #0
 80195ea:	d1f1      	bne.n	80195d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80195ec:	4b36      	ldr	r3, [pc, #216]	; (80196c8 <pvPortMalloc+0x180>)
 80195ee:	681b      	ldr	r3, [r3, #0]
 80195f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80195f2:	429a      	cmp	r2, r3
 80195f4:	d050      	beq.n	8019698 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80195f6:	6a3b      	ldr	r3, [r7, #32]
 80195f8:	681b      	ldr	r3, [r3, #0]
 80195fa:	2208      	movs	r2, #8
 80195fc:	4413      	add	r3, r2
 80195fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8019600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019602:	681a      	ldr	r2, [r3, #0]
 8019604:	6a3b      	ldr	r3, [r7, #32]
 8019606:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8019608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801960a:	685a      	ldr	r2, [r3, #4]
 801960c:	687b      	ldr	r3, [r7, #4]
 801960e:	1ad2      	subs	r2, r2, r3
 8019610:	2308      	movs	r3, #8
 8019612:	005b      	lsls	r3, r3, #1
 8019614:	429a      	cmp	r2, r3
 8019616:	d91f      	bls.n	8019658 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8019618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801961a:	687b      	ldr	r3, [r7, #4]
 801961c:	4413      	add	r3, r2
 801961e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019620:	69bb      	ldr	r3, [r7, #24]
 8019622:	f003 0307 	and.w	r3, r3, #7
 8019626:	2b00      	cmp	r3, #0
 8019628:	d00a      	beq.n	8019640 <pvPortMalloc+0xf8>
	__asm volatile
 801962a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801962e:	f383 8811 	msr	BASEPRI, r3
 8019632:	f3bf 8f6f 	isb	sy
 8019636:	f3bf 8f4f 	dsb	sy
 801963a:	613b      	str	r3, [r7, #16]
}
 801963c:	bf00      	nop
 801963e:	e7fe      	b.n	801963e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8019640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019642:	685a      	ldr	r2, [r3, #4]
 8019644:	687b      	ldr	r3, [r7, #4]
 8019646:	1ad2      	subs	r2, r2, r3
 8019648:	69bb      	ldr	r3, [r7, #24]
 801964a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801964c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801964e:	687a      	ldr	r2, [r7, #4]
 8019650:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8019652:	69b8      	ldr	r0, [r7, #24]
 8019654:	f000 f90a 	bl	801986c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8019658:	4b1d      	ldr	r3, [pc, #116]	; (80196d0 <pvPortMalloc+0x188>)
 801965a:	681a      	ldr	r2, [r3, #0]
 801965c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801965e:	685b      	ldr	r3, [r3, #4]
 8019660:	1ad3      	subs	r3, r2, r3
 8019662:	4a1b      	ldr	r2, [pc, #108]	; (80196d0 <pvPortMalloc+0x188>)
 8019664:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8019666:	4b1a      	ldr	r3, [pc, #104]	; (80196d0 <pvPortMalloc+0x188>)
 8019668:	681a      	ldr	r2, [r3, #0]
 801966a:	4b1b      	ldr	r3, [pc, #108]	; (80196d8 <pvPortMalloc+0x190>)
 801966c:	681b      	ldr	r3, [r3, #0]
 801966e:	429a      	cmp	r2, r3
 8019670:	d203      	bcs.n	801967a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8019672:	4b17      	ldr	r3, [pc, #92]	; (80196d0 <pvPortMalloc+0x188>)
 8019674:	681b      	ldr	r3, [r3, #0]
 8019676:	4a18      	ldr	r2, [pc, #96]	; (80196d8 <pvPortMalloc+0x190>)
 8019678:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801967a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801967c:	685a      	ldr	r2, [r3, #4]
 801967e:	4b13      	ldr	r3, [pc, #76]	; (80196cc <pvPortMalloc+0x184>)
 8019680:	681b      	ldr	r3, [r3, #0]
 8019682:	431a      	orrs	r2, r3
 8019684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019686:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8019688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801968a:	2200      	movs	r2, #0
 801968c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801968e:	4b13      	ldr	r3, [pc, #76]	; (80196dc <pvPortMalloc+0x194>)
 8019690:	681b      	ldr	r3, [r3, #0]
 8019692:	3301      	adds	r3, #1
 8019694:	4a11      	ldr	r2, [pc, #68]	; (80196dc <pvPortMalloc+0x194>)
 8019696:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8019698:	f7fe fa6a 	bl	8017b70 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801969c:	69fb      	ldr	r3, [r7, #28]
 801969e:	f003 0307 	and.w	r3, r3, #7
 80196a2:	2b00      	cmp	r3, #0
 80196a4:	d00a      	beq.n	80196bc <pvPortMalloc+0x174>
	__asm volatile
 80196a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80196aa:	f383 8811 	msr	BASEPRI, r3
 80196ae:	f3bf 8f6f 	isb	sy
 80196b2:	f3bf 8f4f 	dsb	sy
 80196b6:	60fb      	str	r3, [r7, #12]
}
 80196b8:	bf00      	nop
 80196ba:	e7fe      	b.n	80196ba <pvPortMalloc+0x172>
	return pvReturn;
 80196bc:	69fb      	ldr	r3, [r7, #28]
}
 80196be:	4618      	mov	r0, r3
 80196c0:	3728      	adds	r7, #40	; 0x28
 80196c2:	46bd      	mov	sp, r7
 80196c4:	bd80      	pop	{r7, pc}
 80196c6:	bf00      	nop
 80196c8:	200373e0 	.word	0x200373e0
 80196cc:	200373f4 	.word	0x200373f4
 80196d0:	200373e4 	.word	0x200373e4
 80196d4:	200373d8 	.word	0x200373d8
 80196d8:	200373e8 	.word	0x200373e8
 80196dc:	200373ec 	.word	0x200373ec

080196e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80196e0:	b580      	push	{r7, lr}
 80196e2:	b086      	sub	sp, #24
 80196e4:	af00      	add	r7, sp, #0
 80196e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80196e8:	687b      	ldr	r3, [r7, #4]
 80196ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80196ec:	687b      	ldr	r3, [r7, #4]
 80196ee:	2b00      	cmp	r3, #0
 80196f0:	d04d      	beq.n	801978e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80196f2:	2308      	movs	r3, #8
 80196f4:	425b      	negs	r3, r3
 80196f6:	697a      	ldr	r2, [r7, #20]
 80196f8:	4413      	add	r3, r2
 80196fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80196fc:	697b      	ldr	r3, [r7, #20]
 80196fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8019700:	693b      	ldr	r3, [r7, #16]
 8019702:	685a      	ldr	r2, [r3, #4]
 8019704:	4b24      	ldr	r3, [pc, #144]	; (8019798 <vPortFree+0xb8>)
 8019706:	681b      	ldr	r3, [r3, #0]
 8019708:	4013      	ands	r3, r2
 801970a:	2b00      	cmp	r3, #0
 801970c:	d10a      	bne.n	8019724 <vPortFree+0x44>
	__asm volatile
 801970e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019712:	f383 8811 	msr	BASEPRI, r3
 8019716:	f3bf 8f6f 	isb	sy
 801971a:	f3bf 8f4f 	dsb	sy
 801971e:	60fb      	str	r3, [r7, #12]
}
 8019720:	bf00      	nop
 8019722:	e7fe      	b.n	8019722 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8019724:	693b      	ldr	r3, [r7, #16]
 8019726:	681b      	ldr	r3, [r3, #0]
 8019728:	2b00      	cmp	r3, #0
 801972a:	d00a      	beq.n	8019742 <vPortFree+0x62>
	__asm volatile
 801972c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019730:	f383 8811 	msr	BASEPRI, r3
 8019734:	f3bf 8f6f 	isb	sy
 8019738:	f3bf 8f4f 	dsb	sy
 801973c:	60bb      	str	r3, [r7, #8]
}
 801973e:	bf00      	nop
 8019740:	e7fe      	b.n	8019740 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8019742:	693b      	ldr	r3, [r7, #16]
 8019744:	685a      	ldr	r2, [r3, #4]
 8019746:	4b14      	ldr	r3, [pc, #80]	; (8019798 <vPortFree+0xb8>)
 8019748:	681b      	ldr	r3, [r3, #0]
 801974a:	4013      	ands	r3, r2
 801974c:	2b00      	cmp	r3, #0
 801974e:	d01e      	beq.n	801978e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8019750:	693b      	ldr	r3, [r7, #16]
 8019752:	681b      	ldr	r3, [r3, #0]
 8019754:	2b00      	cmp	r3, #0
 8019756:	d11a      	bne.n	801978e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8019758:	693b      	ldr	r3, [r7, #16]
 801975a:	685a      	ldr	r2, [r3, #4]
 801975c:	4b0e      	ldr	r3, [pc, #56]	; (8019798 <vPortFree+0xb8>)
 801975e:	681b      	ldr	r3, [r3, #0]
 8019760:	43db      	mvns	r3, r3
 8019762:	401a      	ands	r2, r3
 8019764:	693b      	ldr	r3, [r7, #16]
 8019766:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8019768:	f7fe f9f4 	bl	8017b54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801976c:	693b      	ldr	r3, [r7, #16]
 801976e:	685a      	ldr	r2, [r3, #4]
 8019770:	4b0a      	ldr	r3, [pc, #40]	; (801979c <vPortFree+0xbc>)
 8019772:	681b      	ldr	r3, [r3, #0]
 8019774:	4413      	add	r3, r2
 8019776:	4a09      	ldr	r2, [pc, #36]	; (801979c <vPortFree+0xbc>)
 8019778:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801977a:	6938      	ldr	r0, [r7, #16]
 801977c:	f000 f876 	bl	801986c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8019780:	4b07      	ldr	r3, [pc, #28]	; (80197a0 <vPortFree+0xc0>)
 8019782:	681b      	ldr	r3, [r3, #0]
 8019784:	3301      	adds	r3, #1
 8019786:	4a06      	ldr	r2, [pc, #24]	; (80197a0 <vPortFree+0xc0>)
 8019788:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801978a:	f7fe f9f1 	bl	8017b70 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801978e:	bf00      	nop
 8019790:	3718      	adds	r7, #24
 8019792:	46bd      	mov	sp, r7
 8019794:	bd80      	pop	{r7, pc}
 8019796:	bf00      	nop
 8019798:	200373f4 	.word	0x200373f4
 801979c:	200373e4 	.word	0x200373e4
 80197a0:	200373f0 	.word	0x200373f0

080197a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80197a4:	b480      	push	{r7}
 80197a6:	b085      	sub	sp, #20
 80197a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80197aa:	4b29      	ldr	r3, [pc, #164]	; (8019850 <prvHeapInit+0xac>)
 80197ac:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80197ae:	4b29      	ldr	r3, [pc, #164]	; (8019854 <prvHeapInit+0xb0>)
 80197b0:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80197b2:	68fb      	ldr	r3, [r7, #12]
 80197b4:	f003 0307 	and.w	r3, r3, #7
 80197b8:	2b00      	cmp	r3, #0
 80197ba:	d00c      	beq.n	80197d6 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80197bc:	68fb      	ldr	r3, [r7, #12]
 80197be:	3307      	adds	r3, #7
 80197c0:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80197c2:	68fb      	ldr	r3, [r7, #12]
 80197c4:	f023 0307 	bic.w	r3, r3, #7
 80197c8:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80197ca:	68ba      	ldr	r2, [r7, #8]
 80197cc:	68fb      	ldr	r3, [r7, #12]
 80197ce:	1ad3      	subs	r3, r2, r3
 80197d0:	4a20      	ldr	r2, [pc, #128]	; (8019854 <prvHeapInit+0xb0>)
 80197d2:	4413      	add	r3, r2
 80197d4:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80197d6:	68fb      	ldr	r3, [r7, #12]
 80197d8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80197da:	4a1f      	ldr	r2, [pc, #124]	; (8019858 <prvHeapInit+0xb4>)
 80197dc:	687b      	ldr	r3, [r7, #4]
 80197de:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80197e0:	4b1d      	ldr	r3, [pc, #116]	; (8019858 <prvHeapInit+0xb4>)
 80197e2:	2200      	movs	r2, #0
 80197e4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80197e6:	687b      	ldr	r3, [r7, #4]
 80197e8:	68ba      	ldr	r2, [r7, #8]
 80197ea:	4413      	add	r3, r2
 80197ec:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80197ee:	2208      	movs	r2, #8
 80197f0:	68fb      	ldr	r3, [r7, #12]
 80197f2:	1a9b      	subs	r3, r3, r2
 80197f4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80197f6:	68fb      	ldr	r3, [r7, #12]
 80197f8:	f023 0307 	bic.w	r3, r3, #7
 80197fc:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80197fe:	68fb      	ldr	r3, [r7, #12]
 8019800:	4a16      	ldr	r2, [pc, #88]	; (801985c <prvHeapInit+0xb8>)
 8019802:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8019804:	4b15      	ldr	r3, [pc, #84]	; (801985c <prvHeapInit+0xb8>)
 8019806:	681b      	ldr	r3, [r3, #0]
 8019808:	2200      	movs	r2, #0
 801980a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801980c:	4b13      	ldr	r3, [pc, #76]	; (801985c <prvHeapInit+0xb8>)
 801980e:	681b      	ldr	r3, [r3, #0]
 8019810:	2200      	movs	r2, #0
 8019812:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8019814:	687b      	ldr	r3, [r7, #4]
 8019816:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8019818:	683b      	ldr	r3, [r7, #0]
 801981a:	68fa      	ldr	r2, [r7, #12]
 801981c:	1ad2      	subs	r2, r2, r3
 801981e:	683b      	ldr	r3, [r7, #0]
 8019820:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8019822:	4b0e      	ldr	r3, [pc, #56]	; (801985c <prvHeapInit+0xb8>)
 8019824:	681a      	ldr	r2, [r3, #0]
 8019826:	683b      	ldr	r3, [r7, #0]
 8019828:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801982a:	683b      	ldr	r3, [r7, #0]
 801982c:	685b      	ldr	r3, [r3, #4]
 801982e:	4a0c      	ldr	r2, [pc, #48]	; (8019860 <prvHeapInit+0xbc>)
 8019830:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019832:	683b      	ldr	r3, [r7, #0]
 8019834:	685b      	ldr	r3, [r3, #4]
 8019836:	4a0b      	ldr	r2, [pc, #44]	; (8019864 <prvHeapInit+0xc0>)
 8019838:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801983a:	4b0b      	ldr	r3, [pc, #44]	; (8019868 <prvHeapInit+0xc4>)
 801983c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8019840:	601a      	str	r2, [r3, #0]
}
 8019842:	bf00      	nop
 8019844:	3714      	adds	r7, #20
 8019846:	46bd      	mov	sp, r7
 8019848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801984c:	4770      	bx	lr
 801984e:	bf00      	nop
 8019850:	00030d40 	.word	0x00030d40
 8019854:	20006698 	.word	0x20006698
 8019858:	200373d8 	.word	0x200373d8
 801985c:	200373e0 	.word	0x200373e0
 8019860:	200373e8 	.word	0x200373e8
 8019864:	200373e4 	.word	0x200373e4
 8019868:	200373f4 	.word	0x200373f4

0801986c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801986c:	b480      	push	{r7}
 801986e:	b085      	sub	sp, #20
 8019870:	af00      	add	r7, sp, #0
 8019872:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8019874:	4b28      	ldr	r3, [pc, #160]	; (8019918 <prvInsertBlockIntoFreeList+0xac>)
 8019876:	60fb      	str	r3, [r7, #12]
 8019878:	e002      	b.n	8019880 <prvInsertBlockIntoFreeList+0x14>
 801987a:	68fb      	ldr	r3, [r7, #12]
 801987c:	681b      	ldr	r3, [r3, #0]
 801987e:	60fb      	str	r3, [r7, #12]
 8019880:	68fb      	ldr	r3, [r7, #12]
 8019882:	681b      	ldr	r3, [r3, #0]
 8019884:	687a      	ldr	r2, [r7, #4]
 8019886:	429a      	cmp	r2, r3
 8019888:	d8f7      	bhi.n	801987a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801988a:	68fb      	ldr	r3, [r7, #12]
 801988c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801988e:	68fb      	ldr	r3, [r7, #12]
 8019890:	685b      	ldr	r3, [r3, #4]
 8019892:	68ba      	ldr	r2, [r7, #8]
 8019894:	4413      	add	r3, r2
 8019896:	687a      	ldr	r2, [r7, #4]
 8019898:	429a      	cmp	r2, r3
 801989a:	d108      	bne.n	80198ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801989c:	68fb      	ldr	r3, [r7, #12]
 801989e:	685a      	ldr	r2, [r3, #4]
 80198a0:	687b      	ldr	r3, [r7, #4]
 80198a2:	685b      	ldr	r3, [r3, #4]
 80198a4:	441a      	add	r2, r3
 80198a6:	68fb      	ldr	r3, [r7, #12]
 80198a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80198aa:	68fb      	ldr	r3, [r7, #12]
 80198ac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80198ae:	687b      	ldr	r3, [r7, #4]
 80198b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80198b2:	687b      	ldr	r3, [r7, #4]
 80198b4:	685b      	ldr	r3, [r3, #4]
 80198b6:	68ba      	ldr	r2, [r7, #8]
 80198b8:	441a      	add	r2, r3
 80198ba:	68fb      	ldr	r3, [r7, #12]
 80198bc:	681b      	ldr	r3, [r3, #0]
 80198be:	429a      	cmp	r2, r3
 80198c0:	d118      	bne.n	80198f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80198c2:	68fb      	ldr	r3, [r7, #12]
 80198c4:	681a      	ldr	r2, [r3, #0]
 80198c6:	4b15      	ldr	r3, [pc, #84]	; (801991c <prvInsertBlockIntoFreeList+0xb0>)
 80198c8:	681b      	ldr	r3, [r3, #0]
 80198ca:	429a      	cmp	r2, r3
 80198cc:	d00d      	beq.n	80198ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80198ce:	687b      	ldr	r3, [r7, #4]
 80198d0:	685a      	ldr	r2, [r3, #4]
 80198d2:	68fb      	ldr	r3, [r7, #12]
 80198d4:	681b      	ldr	r3, [r3, #0]
 80198d6:	685b      	ldr	r3, [r3, #4]
 80198d8:	441a      	add	r2, r3
 80198da:	687b      	ldr	r3, [r7, #4]
 80198dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80198de:	68fb      	ldr	r3, [r7, #12]
 80198e0:	681b      	ldr	r3, [r3, #0]
 80198e2:	681a      	ldr	r2, [r3, #0]
 80198e4:	687b      	ldr	r3, [r7, #4]
 80198e6:	601a      	str	r2, [r3, #0]
 80198e8:	e008      	b.n	80198fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80198ea:	4b0c      	ldr	r3, [pc, #48]	; (801991c <prvInsertBlockIntoFreeList+0xb0>)
 80198ec:	681a      	ldr	r2, [r3, #0]
 80198ee:	687b      	ldr	r3, [r7, #4]
 80198f0:	601a      	str	r2, [r3, #0]
 80198f2:	e003      	b.n	80198fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80198f4:	68fb      	ldr	r3, [r7, #12]
 80198f6:	681a      	ldr	r2, [r3, #0]
 80198f8:	687b      	ldr	r3, [r7, #4]
 80198fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80198fc:	68fa      	ldr	r2, [r7, #12]
 80198fe:	687b      	ldr	r3, [r7, #4]
 8019900:	429a      	cmp	r2, r3
 8019902:	d002      	beq.n	801990a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8019904:	68fb      	ldr	r3, [r7, #12]
 8019906:	687a      	ldr	r2, [r7, #4]
 8019908:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801990a:	bf00      	nop
 801990c:	3714      	adds	r7, #20
 801990e:	46bd      	mov	sp, r7
 8019910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019914:	4770      	bx	lr
 8019916:	bf00      	nop
 8019918:	200373d8 	.word	0x200373d8
 801991c:	200373e0 	.word	0x200373e0

08019920 <__errno>:
 8019920:	4b01      	ldr	r3, [pc, #4]	; (8019928 <__errno+0x8>)
 8019922:	6818      	ldr	r0, [r3, #0]
 8019924:	4770      	bx	lr
 8019926:	bf00      	nop
 8019928:	200000a4 	.word	0x200000a4

0801992c <__libc_init_array>:
 801992c:	b570      	push	{r4, r5, r6, lr}
 801992e:	4d0d      	ldr	r5, [pc, #52]	; (8019964 <__libc_init_array+0x38>)
 8019930:	4c0d      	ldr	r4, [pc, #52]	; (8019968 <__libc_init_array+0x3c>)
 8019932:	1b64      	subs	r4, r4, r5
 8019934:	10a4      	asrs	r4, r4, #2
 8019936:	2600      	movs	r6, #0
 8019938:	42a6      	cmp	r6, r4
 801993a:	d109      	bne.n	8019950 <__libc_init_array+0x24>
 801993c:	4d0b      	ldr	r5, [pc, #44]	; (801996c <__libc_init_array+0x40>)
 801993e:	4c0c      	ldr	r4, [pc, #48]	; (8019970 <__libc_init_array+0x44>)
 8019940:	f006 fabc 	bl	801febc <_init>
 8019944:	1b64      	subs	r4, r4, r5
 8019946:	10a4      	asrs	r4, r4, #2
 8019948:	2600      	movs	r6, #0
 801994a:	42a6      	cmp	r6, r4
 801994c:	d105      	bne.n	801995a <__libc_init_array+0x2e>
 801994e:	bd70      	pop	{r4, r5, r6, pc}
 8019950:	f855 3b04 	ldr.w	r3, [r5], #4
 8019954:	4798      	blx	r3
 8019956:	3601      	adds	r6, #1
 8019958:	e7ee      	b.n	8019938 <__libc_init_array+0xc>
 801995a:	f855 3b04 	ldr.w	r3, [r5], #4
 801995e:	4798      	blx	r3
 8019960:	3601      	adds	r6, #1
 8019962:	e7f2      	b.n	801994a <__libc_init_array+0x1e>
 8019964:	08025af0 	.word	0x08025af0
 8019968:	08025af0 	.word	0x08025af0
 801996c:	08025af0 	.word	0x08025af0
 8019970:	08025af4 	.word	0x08025af4

08019974 <memcpy>:
 8019974:	440a      	add	r2, r1
 8019976:	4291      	cmp	r1, r2
 8019978:	f100 33ff 	add.w	r3, r0, #4294967295
 801997c:	d100      	bne.n	8019980 <memcpy+0xc>
 801997e:	4770      	bx	lr
 8019980:	b510      	push	{r4, lr}
 8019982:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019986:	f803 4f01 	strb.w	r4, [r3, #1]!
 801998a:	4291      	cmp	r1, r2
 801998c:	d1f9      	bne.n	8019982 <memcpy+0xe>
 801998e:	bd10      	pop	{r4, pc}

08019990 <memset>:
 8019990:	4402      	add	r2, r0
 8019992:	4603      	mov	r3, r0
 8019994:	4293      	cmp	r3, r2
 8019996:	d100      	bne.n	801999a <memset+0xa>
 8019998:	4770      	bx	lr
 801999a:	f803 1b01 	strb.w	r1, [r3], #1
 801999e:	e7f9      	b.n	8019994 <memset+0x4>

080199a0 <__cvt>:
 80199a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80199a4:	ec55 4b10 	vmov	r4, r5, d0
 80199a8:	2d00      	cmp	r5, #0
 80199aa:	460e      	mov	r6, r1
 80199ac:	4619      	mov	r1, r3
 80199ae:	462b      	mov	r3, r5
 80199b0:	bfbb      	ittet	lt
 80199b2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80199b6:	461d      	movlt	r5, r3
 80199b8:	2300      	movge	r3, #0
 80199ba:	232d      	movlt	r3, #45	; 0x2d
 80199bc:	700b      	strb	r3, [r1, #0]
 80199be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80199c0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80199c4:	4691      	mov	r9, r2
 80199c6:	f023 0820 	bic.w	r8, r3, #32
 80199ca:	bfbc      	itt	lt
 80199cc:	4622      	movlt	r2, r4
 80199ce:	4614      	movlt	r4, r2
 80199d0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80199d4:	d005      	beq.n	80199e2 <__cvt+0x42>
 80199d6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80199da:	d100      	bne.n	80199de <__cvt+0x3e>
 80199dc:	3601      	adds	r6, #1
 80199de:	2102      	movs	r1, #2
 80199e0:	e000      	b.n	80199e4 <__cvt+0x44>
 80199e2:	2103      	movs	r1, #3
 80199e4:	ab03      	add	r3, sp, #12
 80199e6:	9301      	str	r3, [sp, #4]
 80199e8:	ab02      	add	r3, sp, #8
 80199ea:	9300      	str	r3, [sp, #0]
 80199ec:	ec45 4b10 	vmov	d0, r4, r5
 80199f0:	4653      	mov	r3, sl
 80199f2:	4632      	mov	r2, r6
 80199f4:	f001 fdac 	bl	801b550 <_dtoa_r>
 80199f8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80199fc:	4607      	mov	r7, r0
 80199fe:	d102      	bne.n	8019a06 <__cvt+0x66>
 8019a00:	f019 0f01 	tst.w	r9, #1
 8019a04:	d022      	beq.n	8019a4c <__cvt+0xac>
 8019a06:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8019a0a:	eb07 0906 	add.w	r9, r7, r6
 8019a0e:	d110      	bne.n	8019a32 <__cvt+0x92>
 8019a10:	783b      	ldrb	r3, [r7, #0]
 8019a12:	2b30      	cmp	r3, #48	; 0x30
 8019a14:	d10a      	bne.n	8019a2c <__cvt+0x8c>
 8019a16:	2200      	movs	r2, #0
 8019a18:	2300      	movs	r3, #0
 8019a1a:	4620      	mov	r0, r4
 8019a1c:	4629      	mov	r1, r5
 8019a1e:	f7e7 f86b 	bl	8000af8 <__aeabi_dcmpeq>
 8019a22:	b918      	cbnz	r0, 8019a2c <__cvt+0x8c>
 8019a24:	f1c6 0601 	rsb	r6, r6, #1
 8019a28:	f8ca 6000 	str.w	r6, [sl]
 8019a2c:	f8da 3000 	ldr.w	r3, [sl]
 8019a30:	4499      	add	r9, r3
 8019a32:	2200      	movs	r2, #0
 8019a34:	2300      	movs	r3, #0
 8019a36:	4620      	mov	r0, r4
 8019a38:	4629      	mov	r1, r5
 8019a3a:	f7e7 f85d 	bl	8000af8 <__aeabi_dcmpeq>
 8019a3e:	b108      	cbz	r0, 8019a44 <__cvt+0xa4>
 8019a40:	f8cd 900c 	str.w	r9, [sp, #12]
 8019a44:	2230      	movs	r2, #48	; 0x30
 8019a46:	9b03      	ldr	r3, [sp, #12]
 8019a48:	454b      	cmp	r3, r9
 8019a4a:	d307      	bcc.n	8019a5c <__cvt+0xbc>
 8019a4c:	9b03      	ldr	r3, [sp, #12]
 8019a4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019a50:	1bdb      	subs	r3, r3, r7
 8019a52:	4638      	mov	r0, r7
 8019a54:	6013      	str	r3, [r2, #0]
 8019a56:	b004      	add	sp, #16
 8019a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019a5c:	1c59      	adds	r1, r3, #1
 8019a5e:	9103      	str	r1, [sp, #12]
 8019a60:	701a      	strb	r2, [r3, #0]
 8019a62:	e7f0      	b.n	8019a46 <__cvt+0xa6>

08019a64 <__exponent>:
 8019a64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019a66:	4603      	mov	r3, r0
 8019a68:	2900      	cmp	r1, #0
 8019a6a:	bfb8      	it	lt
 8019a6c:	4249      	neglt	r1, r1
 8019a6e:	f803 2b02 	strb.w	r2, [r3], #2
 8019a72:	bfb4      	ite	lt
 8019a74:	222d      	movlt	r2, #45	; 0x2d
 8019a76:	222b      	movge	r2, #43	; 0x2b
 8019a78:	2909      	cmp	r1, #9
 8019a7a:	7042      	strb	r2, [r0, #1]
 8019a7c:	dd2a      	ble.n	8019ad4 <__exponent+0x70>
 8019a7e:	f10d 0407 	add.w	r4, sp, #7
 8019a82:	46a4      	mov	ip, r4
 8019a84:	270a      	movs	r7, #10
 8019a86:	46a6      	mov	lr, r4
 8019a88:	460a      	mov	r2, r1
 8019a8a:	fb91 f6f7 	sdiv	r6, r1, r7
 8019a8e:	fb07 1516 	mls	r5, r7, r6, r1
 8019a92:	3530      	adds	r5, #48	; 0x30
 8019a94:	2a63      	cmp	r2, #99	; 0x63
 8019a96:	f104 34ff 	add.w	r4, r4, #4294967295
 8019a9a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8019a9e:	4631      	mov	r1, r6
 8019aa0:	dcf1      	bgt.n	8019a86 <__exponent+0x22>
 8019aa2:	3130      	adds	r1, #48	; 0x30
 8019aa4:	f1ae 0502 	sub.w	r5, lr, #2
 8019aa8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8019aac:	1c44      	adds	r4, r0, #1
 8019aae:	4629      	mov	r1, r5
 8019ab0:	4561      	cmp	r1, ip
 8019ab2:	d30a      	bcc.n	8019aca <__exponent+0x66>
 8019ab4:	f10d 0209 	add.w	r2, sp, #9
 8019ab8:	eba2 020e 	sub.w	r2, r2, lr
 8019abc:	4565      	cmp	r5, ip
 8019abe:	bf88      	it	hi
 8019ac0:	2200      	movhi	r2, #0
 8019ac2:	4413      	add	r3, r2
 8019ac4:	1a18      	subs	r0, r3, r0
 8019ac6:	b003      	add	sp, #12
 8019ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019aca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019ace:	f804 2f01 	strb.w	r2, [r4, #1]!
 8019ad2:	e7ed      	b.n	8019ab0 <__exponent+0x4c>
 8019ad4:	2330      	movs	r3, #48	; 0x30
 8019ad6:	3130      	adds	r1, #48	; 0x30
 8019ad8:	7083      	strb	r3, [r0, #2]
 8019ada:	70c1      	strb	r1, [r0, #3]
 8019adc:	1d03      	adds	r3, r0, #4
 8019ade:	e7f1      	b.n	8019ac4 <__exponent+0x60>

08019ae0 <_printf_float>:
 8019ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ae4:	ed2d 8b02 	vpush	{d8}
 8019ae8:	b08d      	sub	sp, #52	; 0x34
 8019aea:	460c      	mov	r4, r1
 8019aec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8019af0:	4616      	mov	r6, r2
 8019af2:	461f      	mov	r7, r3
 8019af4:	4605      	mov	r5, r0
 8019af6:	f002 fe89 	bl	801c80c <_localeconv_r>
 8019afa:	f8d0 a000 	ldr.w	sl, [r0]
 8019afe:	4650      	mov	r0, sl
 8019b00:	f7e6 fb7e 	bl	8000200 <strlen>
 8019b04:	2300      	movs	r3, #0
 8019b06:	930a      	str	r3, [sp, #40]	; 0x28
 8019b08:	6823      	ldr	r3, [r4, #0]
 8019b0a:	9305      	str	r3, [sp, #20]
 8019b0c:	f8d8 3000 	ldr.w	r3, [r8]
 8019b10:	f894 b018 	ldrb.w	fp, [r4, #24]
 8019b14:	3307      	adds	r3, #7
 8019b16:	f023 0307 	bic.w	r3, r3, #7
 8019b1a:	f103 0208 	add.w	r2, r3, #8
 8019b1e:	f8c8 2000 	str.w	r2, [r8]
 8019b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b26:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8019b2a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8019b2e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8019b32:	9307      	str	r3, [sp, #28]
 8019b34:	f8cd 8018 	str.w	r8, [sp, #24]
 8019b38:	ee08 0a10 	vmov	s16, r0
 8019b3c:	4b9f      	ldr	r3, [pc, #636]	; (8019dbc <_printf_float+0x2dc>)
 8019b3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019b42:	f04f 32ff 	mov.w	r2, #4294967295
 8019b46:	f7e7 f809 	bl	8000b5c <__aeabi_dcmpun>
 8019b4a:	bb88      	cbnz	r0, 8019bb0 <_printf_float+0xd0>
 8019b4c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019b50:	4b9a      	ldr	r3, [pc, #616]	; (8019dbc <_printf_float+0x2dc>)
 8019b52:	f04f 32ff 	mov.w	r2, #4294967295
 8019b56:	f7e6 ffe3 	bl	8000b20 <__aeabi_dcmple>
 8019b5a:	bb48      	cbnz	r0, 8019bb0 <_printf_float+0xd0>
 8019b5c:	2200      	movs	r2, #0
 8019b5e:	2300      	movs	r3, #0
 8019b60:	4640      	mov	r0, r8
 8019b62:	4649      	mov	r1, r9
 8019b64:	f7e6 ffd2 	bl	8000b0c <__aeabi_dcmplt>
 8019b68:	b110      	cbz	r0, 8019b70 <_printf_float+0x90>
 8019b6a:	232d      	movs	r3, #45	; 0x2d
 8019b6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019b70:	4b93      	ldr	r3, [pc, #588]	; (8019dc0 <_printf_float+0x2e0>)
 8019b72:	4894      	ldr	r0, [pc, #592]	; (8019dc4 <_printf_float+0x2e4>)
 8019b74:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8019b78:	bf94      	ite	ls
 8019b7a:	4698      	movls	r8, r3
 8019b7c:	4680      	movhi	r8, r0
 8019b7e:	2303      	movs	r3, #3
 8019b80:	6123      	str	r3, [r4, #16]
 8019b82:	9b05      	ldr	r3, [sp, #20]
 8019b84:	f023 0204 	bic.w	r2, r3, #4
 8019b88:	6022      	str	r2, [r4, #0]
 8019b8a:	f04f 0900 	mov.w	r9, #0
 8019b8e:	9700      	str	r7, [sp, #0]
 8019b90:	4633      	mov	r3, r6
 8019b92:	aa0b      	add	r2, sp, #44	; 0x2c
 8019b94:	4621      	mov	r1, r4
 8019b96:	4628      	mov	r0, r5
 8019b98:	f000 f9d8 	bl	8019f4c <_printf_common>
 8019b9c:	3001      	adds	r0, #1
 8019b9e:	f040 8090 	bne.w	8019cc2 <_printf_float+0x1e2>
 8019ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8019ba6:	b00d      	add	sp, #52	; 0x34
 8019ba8:	ecbd 8b02 	vpop	{d8}
 8019bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019bb0:	4642      	mov	r2, r8
 8019bb2:	464b      	mov	r3, r9
 8019bb4:	4640      	mov	r0, r8
 8019bb6:	4649      	mov	r1, r9
 8019bb8:	f7e6 ffd0 	bl	8000b5c <__aeabi_dcmpun>
 8019bbc:	b140      	cbz	r0, 8019bd0 <_printf_float+0xf0>
 8019bbe:	464b      	mov	r3, r9
 8019bc0:	2b00      	cmp	r3, #0
 8019bc2:	bfbc      	itt	lt
 8019bc4:	232d      	movlt	r3, #45	; 0x2d
 8019bc6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8019bca:	487f      	ldr	r0, [pc, #508]	; (8019dc8 <_printf_float+0x2e8>)
 8019bcc:	4b7f      	ldr	r3, [pc, #508]	; (8019dcc <_printf_float+0x2ec>)
 8019bce:	e7d1      	b.n	8019b74 <_printf_float+0x94>
 8019bd0:	6863      	ldr	r3, [r4, #4]
 8019bd2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8019bd6:	9206      	str	r2, [sp, #24]
 8019bd8:	1c5a      	adds	r2, r3, #1
 8019bda:	d13f      	bne.n	8019c5c <_printf_float+0x17c>
 8019bdc:	2306      	movs	r3, #6
 8019bde:	6063      	str	r3, [r4, #4]
 8019be0:	9b05      	ldr	r3, [sp, #20]
 8019be2:	6861      	ldr	r1, [r4, #4]
 8019be4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8019be8:	2300      	movs	r3, #0
 8019bea:	9303      	str	r3, [sp, #12]
 8019bec:	ab0a      	add	r3, sp, #40	; 0x28
 8019bee:	e9cd b301 	strd	fp, r3, [sp, #4]
 8019bf2:	ab09      	add	r3, sp, #36	; 0x24
 8019bf4:	ec49 8b10 	vmov	d0, r8, r9
 8019bf8:	9300      	str	r3, [sp, #0]
 8019bfa:	6022      	str	r2, [r4, #0]
 8019bfc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8019c00:	4628      	mov	r0, r5
 8019c02:	f7ff fecd 	bl	80199a0 <__cvt>
 8019c06:	9b06      	ldr	r3, [sp, #24]
 8019c08:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019c0a:	2b47      	cmp	r3, #71	; 0x47
 8019c0c:	4680      	mov	r8, r0
 8019c0e:	d108      	bne.n	8019c22 <_printf_float+0x142>
 8019c10:	1cc8      	adds	r0, r1, #3
 8019c12:	db02      	blt.n	8019c1a <_printf_float+0x13a>
 8019c14:	6863      	ldr	r3, [r4, #4]
 8019c16:	4299      	cmp	r1, r3
 8019c18:	dd41      	ble.n	8019c9e <_printf_float+0x1be>
 8019c1a:	f1ab 0b02 	sub.w	fp, fp, #2
 8019c1e:	fa5f fb8b 	uxtb.w	fp, fp
 8019c22:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8019c26:	d820      	bhi.n	8019c6a <_printf_float+0x18a>
 8019c28:	3901      	subs	r1, #1
 8019c2a:	465a      	mov	r2, fp
 8019c2c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8019c30:	9109      	str	r1, [sp, #36]	; 0x24
 8019c32:	f7ff ff17 	bl	8019a64 <__exponent>
 8019c36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019c38:	1813      	adds	r3, r2, r0
 8019c3a:	2a01      	cmp	r2, #1
 8019c3c:	4681      	mov	r9, r0
 8019c3e:	6123      	str	r3, [r4, #16]
 8019c40:	dc02      	bgt.n	8019c48 <_printf_float+0x168>
 8019c42:	6822      	ldr	r2, [r4, #0]
 8019c44:	07d2      	lsls	r2, r2, #31
 8019c46:	d501      	bpl.n	8019c4c <_printf_float+0x16c>
 8019c48:	3301      	adds	r3, #1
 8019c4a:	6123      	str	r3, [r4, #16]
 8019c4c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8019c50:	2b00      	cmp	r3, #0
 8019c52:	d09c      	beq.n	8019b8e <_printf_float+0xae>
 8019c54:	232d      	movs	r3, #45	; 0x2d
 8019c56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019c5a:	e798      	b.n	8019b8e <_printf_float+0xae>
 8019c5c:	9a06      	ldr	r2, [sp, #24]
 8019c5e:	2a47      	cmp	r2, #71	; 0x47
 8019c60:	d1be      	bne.n	8019be0 <_printf_float+0x100>
 8019c62:	2b00      	cmp	r3, #0
 8019c64:	d1bc      	bne.n	8019be0 <_printf_float+0x100>
 8019c66:	2301      	movs	r3, #1
 8019c68:	e7b9      	b.n	8019bde <_printf_float+0xfe>
 8019c6a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8019c6e:	d118      	bne.n	8019ca2 <_printf_float+0x1c2>
 8019c70:	2900      	cmp	r1, #0
 8019c72:	6863      	ldr	r3, [r4, #4]
 8019c74:	dd0b      	ble.n	8019c8e <_printf_float+0x1ae>
 8019c76:	6121      	str	r1, [r4, #16]
 8019c78:	b913      	cbnz	r3, 8019c80 <_printf_float+0x1a0>
 8019c7a:	6822      	ldr	r2, [r4, #0]
 8019c7c:	07d0      	lsls	r0, r2, #31
 8019c7e:	d502      	bpl.n	8019c86 <_printf_float+0x1a6>
 8019c80:	3301      	adds	r3, #1
 8019c82:	440b      	add	r3, r1
 8019c84:	6123      	str	r3, [r4, #16]
 8019c86:	65a1      	str	r1, [r4, #88]	; 0x58
 8019c88:	f04f 0900 	mov.w	r9, #0
 8019c8c:	e7de      	b.n	8019c4c <_printf_float+0x16c>
 8019c8e:	b913      	cbnz	r3, 8019c96 <_printf_float+0x1b6>
 8019c90:	6822      	ldr	r2, [r4, #0]
 8019c92:	07d2      	lsls	r2, r2, #31
 8019c94:	d501      	bpl.n	8019c9a <_printf_float+0x1ba>
 8019c96:	3302      	adds	r3, #2
 8019c98:	e7f4      	b.n	8019c84 <_printf_float+0x1a4>
 8019c9a:	2301      	movs	r3, #1
 8019c9c:	e7f2      	b.n	8019c84 <_printf_float+0x1a4>
 8019c9e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8019ca2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019ca4:	4299      	cmp	r1, r3
 8019ca6:	db05      	blt.n	8019cb4 <_printf_float+0x1d4>
 8019ca8:	6823      	ldr	r3, [r4, #0]
 8019caa:	6121      	str	r1, [r4, #16]
 8019cac:	07d8      	lsls	r0, r3, #31
 8019cae:	d5ea      	bpl.n	8019c86 <_printf_float+0x1a6>
 8019cb0:	1c4b      	adds	r3, r1, #1
 8019cb2:	e7e7      	b.n	8019c84 <_printf_float+0x1a4>
 8019cb4:	2900      	cmp	r1, #0
 8019cb6:	bfd4      	ite	le
 8019cb8:	f1c1 0202 	rsble	r2, r1, #2
 8019cbc:	2201      	movgt	r2, #1
 8019cbe:	4413      	add	r3, r2
 8019cc0:	e7e0      	b.n	8019c84 <_printf_float+0x1a4>
 8019cc2:	6823      	ldr	r3, [r4, #0]
 8019cc4:	055a      	lsls	r2, r3, #21
 8019cc6:	d407      	bmi.n	8019cd8 <_printf_float+0x1f8>
 8019cc8:	6923      	ldr	r3, [r4, #16]
 8019cca:	4642      	mov	r2, r8
 8019ccc:	4631      	mov	r1, r6
 8019cce:	4628      	mov	r0, r5
 8019cd0:	47b8      	blx	r7
 8019cd2:	3001      	adds	r0, #1
 8019cd4:	d12c      	bne.n	8019d30 <_printf_float+0x250>
 8019cd6:	e764      	b.n	8019ba2 <_printf_float+0xc2>
 8019cd8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8019cdc:	f240 80e0 	bls.w	8019ea0 <_printf_float+0x3c0>
 8019ce0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8019ce4:	2200      	movs	r2, #0
 8019ce6:	2300      	movs	r3, #0
 8019ce8:	f7e6 ff06 	bl	8000af8 <__aeabi_dcmpeq>
 8019cec:	2800      	cmp	r0, #0
 8019cee:	d034      	beq.n	8019d5a <_printf_float+0x27a>
 8019cf0:	4a37      	ldr	r2, [pc, #220]	; (8019dd0 <_printf_float+0x2f0>)
 8019cf2:	2301      	movs	r3, #1
 8019cf4:	4631      	mov	r1, r6
 8019cf6:	4628      	mov	r0, r5
 8019cf8:	47b8      	blx	r7
 8019cfa:	3001      	adds	r0, #1
 8019cfc:	f43f af51 	beq.w	8019ba2 <_printf_float+0xc2>
 8019d00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019d04:	429a      	cmp	r2, r3
 8019d06:	db02      	blt.n	8019d0e <_printf_float+0x22e>
 8019d08:	6823      	ldr	r3, [r4, #0]
 8019d0a:	07d8      	lsls	r0, r3, #31
 8019d0c:	d510      	bpl.n	8019d30 <_printf_float+0x250>
 8019d0e:	ee18 3a10 	vmov	r3, s16
 8019d12:	4652      	mov	r2, sl
 8019d14:	4631      	mov	r1, r6
 8019d16:	4628      	mov	r0, r5
 8019d18:	47b8      	blx	r7
 8019d1a:	3001      	adds	r0, #1
 8019d1c:	f43f af41 	beq.w	8019ba2 <_printf_float+0xc2>
 8019d20:	f04f 0800 	mov.w	r8, #0
 8019d24:	f104 091a 	add.w	r9, r4, #26
 8019d28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019d2a:	3b01      	subs	r3, #1
 8019d2c:	4543      	cmp	r3, r8
 8019d2e:	dc09      	bgt.n	8019d44 <_printf_float+0x264>
 8019d30:	6823      	ldr	r3, [r4, #0]
 8019d32:	079b      	lsls	r3, r3, #30
 8019d34:	f100 8105 	bmi.w	8019f42 <_printf_float+0x462>
 8019d38:	68e0      	ldr	r0, [r4, #12]
 8019d3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019d3c:	4298      	cmp	r0, r3
 8019d3e:	bfb8      	it	lt
 8019d40:	4618      	movlt	r0, r3
 8019d42:	e730      	b.n	8019ba6 <_printf_float+0xc6>
 8019d44:	2301      	movs	r3, #1
 8019d46:	464a      	mov	r2, r9
 8019d48:	4631      	mov	r1, r6
 8019d4a:	4628      	mov	r0, r5
 8019d4c:	47b8      	blx	r7
 8019d4e:	3001      	adds	r0, #1
 8019d50:	f43f af27 	beq.w	8019ba2 <_printf_float+0xc2>
 8019d54:	f108 0801 	add.w	r8, r8, #1
 8019d58:	e7e6      	b.n	8019d28 <_printf_float+0x248>
 8019d5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019d5c:	2b00      	cmp	r3, #0
 8019d5e:	dc39      	bgt.n	8019dd4 <_printf_float+0x2f4>
 8019d60:	4a1b      	ldr	r2, [pc, #108]	; (8019dd0 <_printf_float+0x2f0>)
 8019d62:	2301      	movs	r3, #1
 8019d64:	4631      	mov	r1, r6
 8019d66:	4628      	mov	r0, r5
 8019d68:	47b8      	blx	r7
 8019d6a:	3001      	adds	r0, #1
 8019d6c:	f43f af19 	beq.w	8019ba2 <_printf_float+0xc2>
 8019d70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019d74:	4313      	orrs	r3, r2
 8019d76:	d102      	bne.n	8019d7e <_printf_float+0x29e>
 8019d78:	6823      	ldr	r3, [r4, #0]
 8019d7a:	07d9      	lsls	r1, r3, #31
 8019d7c:	d5d8      	bpl.n	8019d30 <_printf_float+0x250>
 8019d7e:	ee18 3a10 	vmov	r3, s16
 8019d82:	4652      	mov	r2, sl
 8019d84:	4631      	mov	r1, r6
 8019d86:	4628      	mov	r0, r5
 8019d88:	47b8      	blx	r7
 8019d8a:	3001      	adds	r0, #1
 8019d8c:	f43f af09 	beq.w	8019ba2 <_printf_float+0xc2>
 8019d90:	f04f 0900 	mov.w	r9, #0
 8019d94:	f104 0a1a 	add.w	sl, r4, #26
 8019d98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019d9a:	425b      	negs	r3, r3
 8019d9c:	454b      	cmp	r3, r9
 8019d9e:	dc01      	bgt.n	8019da4 <_printf_float+0x2c4>
 8019da0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019da2:	e792      	b.n	8019cca <_printf_float+0x1ea>
 8019da4:	2301      	movs	r3, #1
 8019da6:	4652      	mov	r2, sl
 8019da8:	4631      	mov	r1, r6
 8019daa:	4628      	mov	r0, r5
 8019dac:	47b8      	blx	r7
 8019dae:	3001      	adds	r0, #1
 8019db0:	f43f aef7 	beq.w	8019ba2 <_printf_float+0xc2>
 8019db4:	f109 0901 	add.w	r9, r9, #1
 8019db8:	e7ee      	b.n	8019d98 <_printf_float+0x2b8>
 8019dba:	bf00      	nop
 8019dbc:	7fefffff 	.word	0x7fefffff
 8019dc0:	0802546c 	.word	0x0802546c
 8019dc4:	08025470 	.word	0x08025470
 8019dc8:	08025478 	.word	0x08025478
 8019dcc:	08025474 	.word	0x08025474
 8019dd0:	0802547c 	.word	0x0802547c
 8019dd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019dd6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019dd8:	429a      	cmp	r2, r3
 8019dda:	bfa8      	it	ge
 8019ddc:	461a      	movge	r2, r3
 8019dde:	2a00      	cmp	r2, #0
 8019de0:	4691      	mov	r9, r2
 8019de2:	dc37      	bgt.n	8019e54 <_printf_float+0x374>
 8019de4:	f04f 0b00 	mov.w	fp, #0
 8019de8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019dec:	f104 021a 	add.w	r2, r4, #26
 8019df0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019df2:	9305      	str	r3, [sp, #20]
 8019df4:	eba3 0309 	sub.w	r3, r3, r9
 8019df8:	455b      	cmp	r3, fp
 8019dfa:	dc33      	bgt.n	8019e64 <_printf_float+0x384>
 8019dfc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019e00:	429a      	cmp	r2, r3
 8019e02:	db3b      	blt.n	8019e7c <_printf_float+0x39c>
 8019e04:	6823      	ldr	r3, [r4, #0]
 8019e06:	07da      	lsls	r2, r3, #31
 8019e08:	d438      	bmi.n	8019e7c <_printf_float+0x39c>
 8019e0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019e0c:	9a05      	ldr	r2, [sp, #20]
 8019e0e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019e10:	1a9a      	subs	r2, r3, r2
 8019e12:	eba3 0901 	sub.w	r9, r3, r1
 8019e16:	4591      	cmp	r9, r2
 8019e18:	bfa8      	it	ge
 8019e1a:	4691      	movge	r9, r2
 8019e1c:	f1b9 0f00 	cmp.w	r9, #0
 8019e20:	dc35      	bgt.n	8019e8e <_printf_float+0x3ae>
 8019e22:	f04f 0800 	mov.w	r8, #0
 8019e26:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019e2a:	f104 0a1a 	add.w	sl, r4, #26
 8019e2e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019e32:	1a9b      	subs	r3, r3, r2
 8019e34:	eba3 0309 	sub.w	r3, r3, r9
 8019e38:	4543      	cmp	r3, r8
 8019e3a:	f77f af79 	ble.w	8019d30 <_printf_float+0x250>
 8019e3e:	2301      	movs	r3, #1
 8019e40:	4652      	mov	r2, sl
 8019e42:	4631      	mov	r1, r6
 8019e44:	4628      	mov	r0, r5
 8019e46:	47b8      	blx	r7
 8019e48:	3001      	adds	r0, #1
 8019e4a:	f43f aeaa 	beq.w	8019ba2 <_printf_float+0xc2>
 8019e4e:	f108 0801 	add.w	r8, r8, #1
 8019e52:	e7ec      	b.n	8019e2e <_printf_float+0x34e>
 8019e54:	4613      	mov	r3, r2
 8019e56:	4631      	mov	r1, r6
 8019e58:	4642      	mov	r2, r8
 8019e5a:	4628      	mov	r0, r5
 8019e5c:	47b8      	blx	r7
 8019e5e:	3001      	adds	r0, #1
 8019e60:	d1c0      	bne.n	8019de4 <_printf_float+0x304>
 8019e62:	e69e      	b.n	8019ba2 <_printf_float+0xc2>
 8019e64:	2301      	movs	r3, #1
 8019e66:	4631      	mov	r1, r6
 8019e68:	4628      	mov	r0, r5
 8019e6a:	9205      	str	r2, [sp, #20]
 8019e6c:	47b8      	blx	r7
 8019e6e:	3001      	adds	r0, #1
 8019e70:	f43f ae97 	beq.w	8019ba2 <_printf_float+0xc2>
 8019e74:	9a05      	ldr	r2, [sp, #20]
 8019e76:	f10b 0b01 	add.w	fp, fp, #1
 8019e7a:	e7b9      	b.n	8019df0 <_printf_float+0x310>
 8019e7c:	ee18 3a10 	vmov	r3, s16
 8019e80:	4652      	mov	r2, sl
 8019e82:	4631      	mov	r1, r6
 8019e84:	4628      	mov	r0, r5
 8019e86:	47b8      	blx	r7
 8019e88:	3001      	adds	r0, #1
 8019e8a:	d1be      	bne.n	8019e0a <_printf_float+0x32a>
 8019e8c:	e689      	b.n	8019ba2 <_printf_float+0xc2>
 8019e8e:	9a05      	ldr	r2, [sp, #20]
 8019e90:	464b      	mov	r3, r9
 8019e92:	4442      	add	r2, r8
 8019e94:	4631      	mov	r1, r6
 8019e96:	4628      	mov	r0, r5
 8019e98:	47b8      	blx	r7
 8019e9a:	3001      	adds	r0, #1
 8019e9c:	d1c1      	bne.n	8019e22 <_printf_float+0x342>
 8019e9e:	e680      	b.n	8019ba2 <_printf_float+0xc2>
 8019ea0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019ea2:	2a01      	cmp	r2, #1
 8019ea4:	dc01      	bgt.n	8019eaa <_printf_float+0x3ca>
 8019ea6:	07db      	lsls	r3, r3, #31
 8019ea8:	d538      	bpl.n	8019f1c <_printf_float+0x43c>
 8019eaa:	2301      	movs	r3, #1
 8019eac:	4642      	mov	r2, r8
 8019eae:	4631      	mov	r1, r6
 8019eb0:	4628      	mov	r0, r5
 8019eb2:	47b8      	blx	r7
 8019eb4:	3001      	adds	r0, #1
 8019eb6:	f43f ae74 	beq.w	8019ba2 <_printf_float+0xc2>
 8019eba:	ee18 3a10 	vmov	r3, s16
 8019ebe:	4652      	mov	r2, sl
 8019ec0:	4631      	mov	r1, r6
 8019ec2:	4628      	mov	r0, r5
 8019ec4:	47b8      	blx	r7
 8019ec6:	3001      	adds	r0, #1
 8019ec8:	f43f ae6b 	beq.w	8019ba2 <_printf_float+0xc2>
 8019ecc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8019ed0:	2200      	movs	r2, #0
 8019ed2:	2300      	movs	r3, #0
 8019ed4:	f7e6 fe10 	bl	8000af8 <__aeabi_dcmpeq>
 8019ed8:	b9d8      	cbnz	r0, 8019f12 <_printf_float+0x432>
 8019eda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019edc:	f108 0201 	add.w	r2, r8, #1
 8019ee0:	3b01      	subs	r3, #1
 8019ee2:	4631      	mov	r1, r6
 8019ee4:	4628      	mov	r0, r5
 8019ee6:	47b8      	blx	r7
 8019ee8:	3001      	adds	r0, #1
 8019eea:	d10e      	bne.n	8019f0a <_printf_float+0x42a>
 8019eec:	e659      	b.n	8019ba2 <_printf_float+0xc2>
 8019eee:	2301      	movs	r3, #1
 8019ef0:	4652      	mov	r2, sl
 8019ef2:	4631      	mov	r1, r6
 8019ef4:	4628      	mov	r0, r5
 8019ef6:	47b8      	blx	r7
 8019ef8:	3001      	adds	r0, #1
 8019efa:	f43f ae52 	beq.w	8019ba2 <_printf_float+0xc2>
 8019efe:	f108 0801 	add.w	r8, r8, #1
 8019f02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019f04:	3b01      	subs	r3, #1
 8019f06:	4543      	cmp	r3, r8
 8019f08:	dcf1      	bgt.n	8019eee <_printf_float+0x40e>
 8019f0a:	464b      	mov	r3, r9
 8019f0c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8019f10:	e6dc      	b.n	8019ccc <_printf_float+0x1ec>
 8019f12:	f04f 0800 	mov.w	r8, #0
 8019f16:	f104 0a1a 	add.w	sl, r4, #26
 8019f1a:	e7f2      	b.n	8019f02 <_printf_float+0x422>
 8019f1c:	2301      	movs	r3, #1
 8019f1e:	4642      	mov	r2, r8
 8019f20:	e7df      	b.n	8019ee2 <_printf_float+0x402>
 8019f22:	2301      	movs	r3, #1
 8019f24:	464a      	mov	r2, r9
 8019f26:	4631      	mov	r1, r6
 8019f28:	4628      	mov	r0, r5
 8019f2a:	47b8      	blx	r7
 8019f2c:	3001      	adds	r0, #1
 8019f2e:	f43f ae38 	beq.w	8019ba2 <_printf_float+0xc2>
 8019f32:	f108 0801 	add.w	r8, r8, #1
 8019f36:	68e3      	ldr	r3, [r4, #12]
 8019f38:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8019f3a:	1a5b      	subs	r3, r3, r1
 8019f3c:	4543      	cmp	r3, r8
 8019f3e:	dcf0      	bgt.n	8019f22 <_printf_float+0x442>
 8019f40:	e6fa      	b.n	8019d38 <_printf_float+0x258>
 8019f42:	f04f 0800 	mov.w	r8, #0
 8019f46:	f104 0919 	add.w	r9, r4, #25
 8019f4a:	e7f4      	b.n	8019f36 <_printf_float+0x456>

08019f4c <_printf_common>:
 8019f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019f50:	4616      	mov	r6, r2
 8019f52:	4699      	mov	r9, r3
 8019f54:	688a      	ldr	r2, [r1, #8]
 8019f56:	690b      	ldr	r3, [r1, #16]
 8019f58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019f5c:	4293      	cmp	r3, r2
 8019f5e:	bfb8      	it	lt
 8019f60:	4613      	movlt	r3, r2
 8019f62:	6033      	str	r3, [r6, #0]
 8019f64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019f68:	4607      	mov	r7, r0
 8019f6a:	460c      	mov	r4, r1
 8019f6c:	b10a      	cbz	r2, 8019f72 <_printf_common+0x26>
 8019f6e:	3301      	adds	r3, #1
 8019f70:	6033      	str	r3, [r6, #0]
 8019f72:	6823      	ldr	r3, [r4, #0]
 8019f74:	0699      	lsls	r1, r3, #26
 8019f76:	bf42      	ittt	mi
 8019f78:	6833      	ldrmi	r3, [r6, #0]
 8019f7a:	3302      	addmi	r3, #2
 8019f7c:	6033      	strmi	r3, [r6, #0]
 8019f7e:	6825      	ldr	r5, [r4, #0]
 8019f80:	f015 0506 	ands.w	r5, r5, #6
 8019f84:	d106      	bne.n	8019f94 <_printf_common+0x48>
 8019f86:	f104 0a19 	add.w	sl, r4, #25
 8019f8a:	68e3      	ldr	r3, [r4, #12]
 8019f8c:	6832      	ldr	r2, [r6, #0]
 8019f8e:	1a9b      	subs	r3, r3, r2
 8019f90:	42ab      	cmp	r3, r5
 8019f92:	dc26      	bgt.n	8019fe2 <_printf_common+0x96>
 8019f94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019f98:	1e13      	subs	r3, r2, #0
 8019f9a:	6822      	ldr	r2, [r4, #0]
 8019f9c:	bf18      	it	ne
 8019f9e:	2301      	movne	r3, #1
 8019fa0:	0692      	lsls	r2, r2, #26
 8019fa2:	d42b      	bmi.n	8019ffc <_printf_common+0xb0>
 8019fa4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019fa8:	4649      	mov	r1, r9
 8019faa:	4638      	mov	r0, r7
 8019fac:	47c0      	blx	r8
 8019fae:	3001      	adds	r0, #1
 8019fb0:	d01e      	beq.n	8019ff0 <_printf_common+0xa4>
 8019fb2:	6823      	ldr	r3, [r4, #0]
 8019fb4:	68e5      	ldr	r5, [r4, #12]
 8019fb6:	6832      	ldr	r2, [r6, #0]
 8019fb8:	f003 0306 	and.w	r3, r3, #6
 8019fbc:	2b04      	cmp	r3, #4
 8019fbe:	bf08      	it	eq
 8019fc0:	1aad      	subeq	r5, r5, r2
 8019fc2:	68a3      	ldr	r3, [r4, #8]
 8019fc4:	6922      	ldr	r2, [r4, #16]
 8019fc6:	bf0c      	ite	eq
 8019fc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019fcc:	2500      	movne	r5, #0
 8019fce:	4293      	cmp	r3, r2
 8019fd0:	bfc4      	itt	gt
 8019fd2:	1a9b      	subgt	r3, r3, r2
 8019fd4:	18ed      	addgt	r5, r5, r3
 8019fd6:	2600      	movs	r6, #0
 8019fd8:	341a      	adds	r4, #26
 8019fda:	42b5      	cmp	r5, r6
 8019fdc:	d11a      	bne.n	801a014 <_printf_common+0xc8>
 8019fde:	2000      	movs	r0, #0
 8019fe0:	e008      	b.n	8019ff4 <_printf_common+0xa8>
 8019fe2:	2301      	movs	r3, #1
 8019fe4:	4652      	mov	r2, sl
 8019fe6:	4649      	mov	r1, r9
 8019fe8:	4638      	mov	r0, r7
 8019fea:	47c0      	blx	r8
 8019fec:	3001      	adds	r0, #1
 8019fee:	d103      	bne.n	8019ff8 <_printf_common+0xac>
 8019ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8019ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019ff8:	3501      	adds	r5, #1
 8019ffa:	e7c6      	b.n	8019f8a <_printf_common+0x3e>
 8019ffc:	18e1      	adds	r1, r4, r3
 8019ffe:	1c5a      	adds	r2, r3, #1
 801a000:	2030      	movs	r0, #48	; 0x30
 801a002:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a006:	4422      	add	r2, r4
 801a008:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a00c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a010:	3302      	adds	r3, #2
 801a012:	e7c7      	b.n	8019fa4 <_printf_common+0x58>
 801a014:	2301      	movs	r3, #1
 801a016:	4622      	mov	r2, r4
 801a018:	4649      	mov	r1, r9
 801a01a:	4638      	mov	r0, r7
 801a01c:	47c0      	blx	r8
 801a01e:	3001      	adds	r0, #1
 801a020:	d0e6      	beq.n	8019ff0 <_printf_common+0xa4>
 801a022:	3601      	adds	r6, #1
 801a024:	e7d9      	b.n	8019fda <_printf_common+0x8e>
	...

0801a028 <_printf_i>:
 801a028:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a02c:	7e0f      	ldrb	r7, [r1, #24]
 801a02e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801a030:	2f78      	cmp	r7, #120	; 0x78
 801a032:	4691      	mov	r9, r2
 801a034:	4680      	mov	r8, r0
 801a036:	460c      	mov	r4, r1
 801a038:	469a      	mov	sl, r3
 801a03a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801a03e:	d807      	bhi.n	801a050 <_printf_i+0x28>
 801a040:	2f62      	cmp	r7, #98	; 0x62
 801a042:	d80a      	bhi.n	801a05a <_printf_i+0x32>
 801a044:	2f00      	cmp	r7, #0
 801a046:	f000 80d8 	beq.w	801a1fa <_printf_i+0x1d2>
 801a04a:	2f58      	cmp	r7, #88	; 0x58
 801a04c:	f000 80a3 	beq.w	801a196 <_printf_i+0x16e>
 801a050:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a054:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a058:	e03a      	b.n	801a0d0 <_printf_i+0xa8>
 801a05a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a05e:	2b15      	cmp	r3, #21
 801a060:	d8f6      	bhi.n	801a050 <_printf_i+0x28>
 801a062:	a101      	add	r1, pc, #4	; (adr r1, 801a068 <_printf_i+0x40>)
 801a064:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a068:	0801a0c1 	.word	0x0801a0c1
 801a06c:	0801a0d5 	.word	0x0801a0d5
 801a070:	0801a051 	.word	0x0801a051
 801a074:	0801a051 	.word	0x0801a051
 801a078:	0801a051 	.word	0x0801a051
 801a07c:	0801a051 	.word	0x0801a051
 801a080:	0801a0d5 	.word	0x0801a0d5
 801a084:	0801a051 	.word	0x0801a051
 801a088:	0801a051 	.word	0x0801a051
 801a08c:	0801a051 	.word	0x0801a051
 801a090:	0801a051 	.word	0x0801a051
 801a094:	0801a1e1 	.word	0x0801a1e1
 801a098:	0801a105 	.word	0x0801a105
 801a09c:	0801a1c3 	.word	0x0801a1c3
 801a0a0:	0801a051 	.word	0x0801a051
 801a0a4:	0801a051 	.word	0x0801a051
 801a0a8:	0801a203 	.word	0x0801a203
 801a0ac:	0801a051 	.word	0x0801a051
 801a0b0:	0801a105 	.word	0x0801a105
 801a0b4:	0801a051 	.word	0x0801a051
 801a0b8:	0801a051 	.word	0x0801a051
 801a0bc:	0801a1cb 	.word	0x0801a1cb
 801a0c0:	682b      	ldr	r3, [r5, #0]
 801a0c2:	1d1a      	adds	r2, r3, #4
 801a0c4:	681b      	ldr	r3, [r3, #0]
 801a0c6:	602a      	str	r2, [r5, #0]
 801a0c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a0cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a0d0:	2301      	movs	r3, #1
 801a0d2:	e0a3      	b.n	801a21c <_printf_i+0x1f4>
 801a0d4:	6820      	ldr	r0, [r4, #0]
 801a0d6:	6829      	ldr	r1, [r5, #0]
 801a0d8:	0606      	lsls	r6, r0, #24
 801a0da:	f101 0304 	add.w	r3, r1, #4
 801a0de:	d50a      	bpl.n	801a0f6 <_printf_i+0xce>
 801a0e0:	680e      	ldr	r6, [r1, #0]
 801a0e2:	602b      	str	r3, [r5, #0]
 801a0e4:	2e00      	cmp	r6, #0
 801a0e6:	da03      	bge.n	801a0f0 <_printf_i+0xc8>
 801a0e8:	232d      	movs	r3, #45	; 0x2d
 801a0ea:	4276      	negs	r6, r6
 801a0ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a0f0:	485e      	ldr	r0, [pc, #376]	; (801a26c <_printf_i+0x244>)
 801a0f2:	230a      	movs	r3, #10
 801a0f4:	e019      	b.n	801a12a <_printf_i+0x102>
 801a0f6:	680e      	ldr	r6, [r1, #0]
 801a0f8:	602b      	str	r3, [r5, #0]
 801a0fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 801a0fe:	bf18      	it	ne
 801a100:	b236      	sxthne	r6, r6
 801a102:	e7ef      	b.n	801a0e4 <_printf_i+0xbc>
 801a104:	682b      	ldr	r3, [r5, #0]
 801a106:	6820      	ldr	r0, [r4, #0]
 801a108:	1d19      	adds	r1, r3, #4
 801a10a:	6029      	str	r1, [r5, #0]
 801a10c:	0601      	lsls	r1, r0, #24
 801a10e:	d501      	bpl.n	801a114 <_printf_i+0xec>
 801a110:	681e      	ldr	r6, [r3, #0]
 801a112:	e002      	b.n	801a11a <_printf_i+0xf2>
 801a114:	0646      	lsls	r6, r0, #25
 801a116:	d5fb      	bpl.n	801a110 <_printf_i+0xe8>
 801a118:	881e      	ldrh	r6, [r3, #0]
 801a11a:	4854      	ldr	r0, [pc, #336]	; (801a26c <_printf_i+0x244>)
 801a11c:	2f6f      	cmp	r7, #111	; 0x6f
 801a11e:	bf0c      	ite	eq
 801a120:	2308      	moveq	r3, #8
 801a122:	230a      	movne	r3, #10
 801a124:	2100      	movs	r1, #0
 801a126:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a12a:	6865      	ldr	r5, [r4, #4]
 801a12c:	60a5      	str	r5, [r4, #8]
 801a12e:	2d00      	cmp	r5, #0
 801a130:	bfa2      	ittt	ge
 801a132:	6821      	ldrge	r1, [r4, #0]
 801a134:	f021 0104 	bicge.w	r1, r1, #4
 801a138:	6021      	strge	r1, [r4, #0]
 801a13a:	b90e      	cbnz	r6, 801a140 <_printf_i+0x118>
 801a13c:	2d00      	cmp	r5, #0
 801a13e:	d04d      	beq.n	801a1dc <_printf_i+0x1b4>
 801a140:	4615      	mov	r5, r2
 801a142:	fbb6 f1f3 	udiv	r1, r6, r3
 801a146:	fb03 6711 	mls	r7, r3, r1, r6
 801a14a:	5dc7      	ldrb	r7, [r0, r7]
 801a14c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801a150:	4637      	mov	r7, r6
 801a152:	42bb      	cmp	r3, r7
 801a154:	460e      	mov	r6, r1
 801a156:	d9f4      	bls.n	801a142 <_printf_i+0x11a>
 801a158:	2b08      	cmp	r3, #8
 801a15a:	d10b      	bne.n	801a174 <_printf_i+0x14c>
 801a15c:	6823      	ldr	r3, [r4, #0]
 801a15e:	07de      	lsls	r6, r3, #31
 801a160:	d508      	bpl.n	801a174 <_printf_i+0x14c>
 801a162:	6923      	ldr	r3, [r4, #16]
 801a164:	6861      	ldr	r1, [r4, #4]
 801a166:	4299      	cmp	r1, r3
 801a168:	bfde      	ittt	le
 801a16a:	2330      	movle	r3, #48	; 0x30
 801a16c:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a170:	f105 35ff 	addle.w	r5, r5, #4294967295
 801a174:	1b52      	subs	r2, r2, r5
 801a176:	6122      	str	r2, [r4, #16]
 801a178:	f8cd a000 	str.w	sl, [sp]
 801a17c:	464b      	mov	r3, r9
 801a17e:	aa03      	add	r2, sp, #12
 801a180:	4621      	mov	r1, r4
 801a182:	4640      	mov	r0, r8
 801a184:	f7ff fee2 	bl	8019f4c <_printf_common>
 801a188:	3001      	adds	r0, #1
 801a18a:	d14c      	bne.n	801a226 <_printf_i+0x1fe>
 801a18c:	f04f 30ff 	mov.w	r0, #4294967295
 801a190:	b004      	add	sp, #16
 801a192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a196:	4835      	ldr	r0, [pc, #212]	; (801a26c <_printf_i+0x244>)
 801a198:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801a19c:	6829      	ldr	r1, [r5, #0]
 801a19e:	6823      	ldr	r3, [r4, #0]
 801a1a0:	f851 6b04 	ldr.w	r6, [r1], #4
 801a1a4:	6029      	str	r1, [r5, #0]
 801a1a6:	061d      	lsls	r5, r3, #24
 801a1a8:	d514      	bpl.n	801a1d4 <_printf_i+0x1ac>
 801a1aa:	07df      	lsls	r7, r3, #31
 801a1ac:	bf44      	itt	mi
 801a1ae:	f043 0320 	orrmi.w	r3, r3, #32
 801a1b2:	6023      	strmi	r3, [r4, #0]
 801a1b4:	b91e      	cbnz	r6, 801a1be <_printf_i+0x196>
 801a1b6:	6823      	ldr	r3, [r4, #0]
 801a1b8:	f023 0320 	bic.w	r3, r3, #32
 801a1bc:	6023      	str	r3, [r4, #0]
 801a1be:	2310      	movs	r3, #16
 801a1c0:	e7b0      	b.n	801a124 <_printf_i+0xfc>
 801a1c2:	6823      	ldr	r3, [r4, #0]
 801a1c4:	f043 0320 	orr.w	r3, r3, #32
 801a1c8:	6023      	str	r3, [r4, #0]
 801a1ca:	2378      	movs	r3, #120	; 0x78
 801a1cc:	4828      	ldr	r0, [pc, #160]	; (801a270 <_printf_i+0x248>)
 801a1ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a1d2:	e7e3      	b.n	801a19c <_printf_i+0x174>
 801a1d4:	0659      	lsls	r1, r3, #25
 801a1d6:	bf48      	it	mi
 801a1d8:	b2b6      	uxthmi	r6, r6
 801a1da:	e7e6      	b.n	801a1aa <_printf_i+0x182>
 801a1dc:	4615      	mov	r5, r2
 801a1de:	e7bb      	b.n	801a158 <_printf_i+0x130>
 801a1e0:	682b      	ldr	r3, [r5, #0]
 801a1e2:	6826      	ldr	r6, [r4, #0]
 801a1e4:	6961      	ldr	r1, [r4, #20]
 801a1e6:	1d18      	adds	r0, r3, #4
 801a1e8:	6028      	str	r0, [r5, #0]
 801a1ea:	0635      	lsls	r5, r6, #24
 801a1ec:	681b      	ldr	r3, [r3, #0]
 801a1ee:	d501      	bpl.n	801a1f4 <_printf_i+0x1cc>
 801a1f0:	6019      	str	r1, [r3, #0]
 801a1f2:	e002      	b.n	801a1fa <_printf_i+0x1d2>
 801a1f4:	0670      	lsls	r0, r6, #25
 801a1f6:	d5fb      	bpl.n	801a1f0 <_printf_i+0x1c8>
 801a1f8:	8019      	strh	r1, [r3, #0]
 801a1fa:	2300      	movs	r3, #0
 801a1fc:	6123      	str	r3, [r4, #16]
 801a1fe:	4615      	mov	r5, r2
 801a200:	e7ba      	b.n	801a178 <_printf_i+0x150>
 801a202:	682b      	ldr	r3, [r5, #0]
 801a204:	1d1a      	adds	r2, r3, #4
 801a206:	602a      	str	r2, [r5, #0]
 801a208:	681d      	ldr	r5, [r3, #0]
 801a20a:	6862      	ldr	r2, [r4, #4]
 801a20c:	2100      	movs	r1, #0
 801a20e:	4628      	mov	r0, r5
 801a210:	f7e5 fffe 	bl	8000210 <memchr>
 801a214:	b108      	cbz	r0, 801a21a <_printf_i+0x1f2>
 801a216:	1b40      	subs	r0, r0, r5
 801a218:	6060      	str	r0, [r4, #4]
 801a21a:	6863      	ldr	r3, [r4, #4]
 801a21c:	6123      	str	r3, [r4, #16]
 801a21e:	2300      	movs	r3, #0
 801a220:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a224:	e7a8      	b.n	801a178 <_printf_i+0x150>
 801a226:	6923      	ldr	r3, [r4, #16]
 801a228:	462a      	mov	r2, r5
 801a22a:	4649      	mov	r1, r9
 801a22c:	4640      	mov	r0, r8
 801a22e:	47d0      	blx	sl
 801a230:	3001      	adds	r0, #1
 801a232:	d0ab      	beq.n	801a18c <_printf_i+0x164>
 801a234:	6823      	ldr	r3, [r4, #0]
 801a236:	079b      	lsls	r3, r3, #30
 801a238:	d413      	bmi.n	801a262 <_printf_i+0x23a>
 801a23a:	68e0      	ldr	r0, [r4, #12]
 801a23c:	9b03      	ldr	r3, [sp, #12]
 801a23e:	4298      	cmp	r0, r3
 801a240:	bfb8      	it	lt
 801a242:	4618      	movlt	r0, r3
 801a244:	e7a4      	b.n	801a190 <_printf_i+0x168>
 801a246:	2301      	movs	r3, #1
 801a248:	4632      	mov	r2, r6
 801a24a:	4649      	mov	r1, r9
 801a24c:	4640      	mov	r0, r8
 801a24e:	47d0      	blx	sl
 801a250:	3001      	adds	r0, #1
 801a252:	d09b      	beq.n	801a18c <_printf_i+0x164>
 801a254:	3501      	adds	r5, #1
 801a256:	68e3      	ldr	r3, [r4, #12]
 801a258:	9903      	ldr	r1, [sp, #12]
 801a25a:	1a5b      	subs	r3, r3, r1
 801a25c:	42ab      	cmp	r3, r5
 801a25e:	dcf2      	bgt.n	801a246 <_printf_i+0x21e>
 801a260:	e7eb      	b.n	801a23a <_printf_i+0x212>
 801a262:	2500      	movs	r5, #0
 801a264:	f104 0619 	add.w	r6, r4, #25
 801a268:	e7f5      	b.n	801a256 <_printf_i+0x22e>
 801a26a:	bf00      	nop
 801a26c:	0802547e 	.word	0x0802547e
 801a270:	0802548f 	.word	0x0802548f

0801a274 <_scanf_float>:
 801a274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a278:	b087      	sub	sp, #28
 801a27a:	4617      	mov	r7, r2
 801a27c:	9303      	str	r3, [sp, #12]
 801a27e:	688b      	ldr	r3, [r1, #8]
 801a280:	1e5a      	subs	r2, r3, #1
 801a282:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801a286:	bf83      	ittte	hi
 801a288:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801a28c:	195b      	addhi	r3, r3, r5
 801a28e:	9302      	strhi	r3, [sp, #8]
 801a290:	2300      	movls	r3, #0
 801a292:	bf86      	itte	hi
 801a294:	f240 135d 	movwhi	r3, #349	; 0x15d
 801a298:	608b      	strhi	r3, [r1, #8]
 801a29a:	9302      	strls	r3, [sp, #8]
 801a29c:	680b      	ldr	r3, [r1, #0]
 801a29e:	468b      	mov	fp, r1
 801a2a0:	2500      	movs	r5, #0
 801a2a2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801a2a6:	f84b 3b1c 	str.w	r3, [fp], #28
 801a2aa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801a2ae:	4680      	mov	r8, r0
 801a2b0:	460c      	mov	r4, r1
 801a2b2:	465e      	mov	r6, fp
 801a2b4:	46aa      	mov	sl, r5
 801a2b6:	46a9      	mov	r9, r5
 801a2b8:	9501      	str	r5, [sp, #4]
 801a2ba:	68a2      	ldr	r2, [r4, #8]
 801a2bc:	b152      	cbz	r2, 801a2d4 <_scanf_float+0x60>
 801a2be:	683b      	ldr	r3, [r7, #0]
 801a2c0:	781b      	ldrb	r3, [r3, #0]
 801a2c2:	2b4e      	cmp	r3, #78	; 0x4e
 801a2c4:	d864      	bhi.n	801a390 <_scanf_float+0x11c>
 801a2c6:	2b40      	cmp	r3, #64	; 0x40
 801a2c8:	d83c      	bhi.n	801a344 <_scanf_float+0xd0>
 801a2ca:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801a2ce:	b2c8      	uxtb	r0, r1
 801a2d0:	280e      	cmp	r0, #14
 801a2d2:	d93a      	bls.n	801a34a <_scanf_float+0xd6>
 801a2d4:	f1b9 0f00 	cmp.w	r9, #0
 801a2d8:	d003      	beq.n	801a2e2 <_scanf_float+0x6e>
 801a2da:	6823      	ldr	r3, [r4, #0]
 801a2dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801a2e0:	6023      	str	r3, [r4, #0]
 801a2e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a2e6:	f1ba 0f01 	cmp.w	sl, #1
 801a2ea:	f200 8113 	bhi.w	801a514 <_scanf_float+0x2a0>
 801a2ee:	455e      	cmp	r6, fp
 801a2f0:	f200 8105 	bhi.w	801a4fe <_scanf_float+0x28a>
 801a2f4:	2501      	movs	r5, #1
 801a2f6:	4628      	mov	r0, r5
 801a2f8:	b007      	add	sp, #28
 801a2fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2fe:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801a302:	2a0d      	cmp	r2, #13
 801a304:	d8e6      	bhi.n	801a2d4 <_scanf_float+0x60>
 801a306:	a101      	add	r1, pc, #4	; (adr r1, 801a30c <_scanf_float+0x98>)
 801a308:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801a30c:	0801a44b 	.word	0x0801a44b
 801a310:	0801a2d5 	.word	0x0801a2d5
 801a314:	0801a2d5 	.word	0x0801a2d5
 801a318:	0801a2d5 	.word	0x0801a2d5
 801a31c:	0801a4ab 	.word	0x0801a4ab
 801a320:	0801a483 	.word	0x0801a483
 801a324:	0801a2d5 	.word	0x0801a2d5
 801a328:	0801a2d5 	.word	0x0801a2d5
 801a32c:	0801a459 	.word	0x0801a459
 801a330:	0801a2d5 	.word	0x0801a2d5
 801a334:	0801a2d5 	.word	0x0801a2d5
 801a338:	0801a2d5 	.word	0x0801a2d5
 801a33c:	0801a2d5 	.word	0x0801a2d5
 801a340:	0801a411 	.word	0x0801a411
 801a344:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801a348:	e7db      	b.n	801a302 <_scanf_float+0x8e>
 801a34a:	290e      	cmp	r1, #14
 801a34c:	d8c2      	bhi.n	801a2d4 <_scanf_float+0x60>
 801a34e:	a001      	add	r0, pc, #4	; (adr r0, 801a354 <_scanf_float+0xe0>)
 801a350:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801a354:	0801a403 	.word	0x0801a403
 801a358:	0801a2d5 	.word	0x0801a2d5
 801a35c:	0801a403 	.word	0x0801a403
 801a360:	0801a497 	.word	0x0801a497
 801a364:	0801a2d5 	.word	0x0801a2d5
 801a368:	0801a3b1 	.word	0x0801a3b1
 801a36c:	0801a3ed 	.word	0x0801a3ed
 801a370:	0801a3ed 	.word	0x0801a3ed
 801a374:	0801a3ed 	.word	0x0801a3ed
 801a378:	0801a3ed 	.word	0x0801a3ed
 801a37c:	0801a3ed 	.word	0x0801a3ed
 801a380:	0801a3ed 	.word	0x0801a3ed
 801a384:	0801a3ed 	.word	0x0801a3ed
 801a388:	0801a3ed 	.word	0x0801a3ed
 801a38c:	0801a3ed 	.word	0x0801a3ed
 801a390:	2b6e      	cmp	r3, #110	; 0x6e
 801a392:	d809      	bhi.n	801a3a8 <_scanf_float+0x134>
 801a394:	2b60      	cmp	r3, #96	; 0x60
 801a396:	d8b2      	bhi.n	801a2fe <_scanf_float+0x8a>
 801a398:	2b54      	cmp	r3, #84	; 0x54
 801a39a:	d077      	beq.n	801a48c <_scanf_float+0x218>
 801a39c:	2b59      	cmp	r3, #89	; 0x59
 801a39e:	d199      	bne.n	801a2d4 <_scanf_float+0x60>
 801a3a0:	2d07      	cmp	r5, #7
 801a3a2:	d197      	bne.n	801a2d4 <_scanf_float+0x60>
 801a3a4:	2508      	movs	r5, #8
 801a3a6:	e029      	b.n	801a3fc <_scanf_float+0x188>
 801a3a8:	2b74      	cmp	r3, #116	; 0x74
 801a3aa:	d06f      	beq.n	801a48c <_scanf_float+0x218>
 801a3ac:	2b79      	cmp	r3, #121	; 0x79
 801a3ae:	e7f6      	b.n	801a39e <_scanf_float+0x12a>
 801a3b0:	6821      	ldr	r1, [r4, #0]
 801a3b2:	05c8      	lsls	r0, r1, #23
 801a3b4:	d51a      	bpl.n	801a3ec <_scanf_float+0x178>
 801a3b6:	9b02      	ldr	r3, [sp, #8]
 801a3b8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801a3bc:	6021      	str	r1, [r4, #0]
 801a3be:	f109 0901 	add.w	r9, r9, #1
 801a3c2:	b11b      	cbz	r3, 801a3cc <_scanf_float+0x158>
 801a3c4:	3b01      	subs	r3, #1
 801a3c6:	3201      	adds	r2, #1
 801a3c8:	9302      	str	r3, [sp, #8]
 801a3ca:	60a2      	str	r2, [r4, #8]
 801a3cc:	68a3      	ldr	r3, [r4, #8]
 801a3ce:	3b01      	subs	r3, #1
 801a3d0:	60a3      	str	r3, [r4, #8]
 801a3d2:	6923      	ldr	r3, [r4, #16]
 801a3d4:	3301      	adds	r3, #1
 801a3d6:	6123      	str	r3, [r4, #16]
 801a3d8:	687b      	ldr	r3, [r7, #4]
 801a3da:	3b01      	subs	r3, #1
 801a3dc:	2b00      	cmp	r3, #0
 801a3de:	607b      	str	r3, [r7, #4]
 801a3e0:	f340 8084 	ble.w	801a4ec <_scanf_float+0x278>
 801a3e4:	683b      	ldr	r3, [r7, #0]
 801a3e6:	3301      	adds	r3, #1
 801a3e8:	603b      	str	r3, [r7, #0]
 801a3ea:	e766      	b.n	801a2ba <_scanf_float+0x46>
 801a3ec:	eb1a 0f05 	cmn.w	sl, r5
 801a3f0:	f47f af70 	bne.w	801a2d4 <_scanf_float+0x60>
 801a3f4:	6822      	ldr	r2, [r4, #0]
 801a3f6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801a3fa:	6022      	str	r2, [r4, #0]
 801a3fc:	f806 3b01 	strb.w	r3, [r6], #1
 801a400:	e7e4      	b.n	801a3cc <_scanf_float+0x158>
 801a402:	6822      	ldr	r2, [r4, #0]
 801a404:	0610      	lsls	r0, r2, #24
 801a406:	f57f af65 	bpl.w	801a2d4 <_scanf_float+0x60>
 801a40a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801a40e:	e7f4      	b.n	801a3fa <_scanf_float+0x186>
 801a410:	f1ba 0f00 	cmp.w	sl, #0
 801a414:	d10e      	bne.n	801a434 <_scanf_float+0x1c0>
 801a416:	f1b9 0f00 	cmp.w	r9, #0
 801a41a:	d10e      	bne.n	801a43a <_scanf_float+0x1c6>
 801a41c:	6822      	ldr	r2, [r4, #0]
 801a41e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801a422:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801a426:	d108      	bne.n	801a43a <_scanf_float+0x1c6>
 801a428:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a42c:	6022      	str	r2, [r4, #0]
 801a42e:	f04f 0a01 	mov.w	sl, #1
 801a432:	e7e3      	b.n	801a3fc <_scanf_float+0x188>
 801a434:	f1ba 0f02 	cmp.w	sl, #2
 801a438:	d055      	beq.n	801a4e6 <_scanf_float+0x272>
 801a43a:	2d01      	cmp	r5, #1
 801a43c:	d002      	beq.n	801a444 <_scanf_float+0x1d0>
 801a43e:	2d04      	cmp	r5, #4
 801a440:	f47f af48 	bne.w	801a2d4 <_scanf_float+0x60>
 801a444:	3501      	adds	r5, #1
 801a446:	b2ed      	uxtb	r5, r5
 801a448:	e7d8      	b.n	801a3fc <_scanf_float+0x188>
 801a44a:	f1ba 0f01 	cmp.w	sl, #1
 801a44e:	f47f af41 	bne.w	801a2d4 <_scanf_float+0x60>
 801a452:	f04f 0a02 	mov.w	sl, #2
 801a456:	e7d1      	b.n	801a3fc <_scanf_float+0x188>
 801a458:	b97d      	cbnz	r5, 801a47a <_scanf_float+0x206>
 801a45a:	f1b9 0f00 	cmp.w	r9, #0
 801a45e:	f47f af3c 	bne.w	801a2da <_scanf_float+0x66>
 801a462:	6822      	ldr	r2, [r4, #0]
 801a464:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801a468:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801a46c:	f47f af39 	bne.w	801a2e2 <_scanf_float+0x6e>
 801a470:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a474:	6022      	str	r2, [r4, #0]
 801a476:	2501      	movs	r5, #1
 801a478:	e7c0      	b.n	801a3fc <_scanf_float+0x188>
 801a47a:	2d03      	cmp	r5, #3
 801a47c:	d0e2      	beq.n	801a444 <_scanf_float+0x1d0>
 801a47e:	2d05      	cmp	r5, #5
 801a480:	e7de      	b.n	801a440 <_scanf_float+0x1cc>
 801a482:	2d02      	cmp	r5, #2
 801a484:	f47f af26 	bne.w	801a2d4 <_scanf_float+0x60>
 801a488:	2503      	movs	r5, #3
 801a48a:	e7b7      	b.n	801a3fc <_scanf_float+0x188>
 801a48c:	2d06      	cmp	r5, #6
 801a48e:	f47f af21 	bne.w	801a2d4 <_scanf_float+0x60>
 801a492:	2507      	movs	r5, #7
 801a494:	e7b2      	b.n	801a3fc <_scanf_float+0x188>
 801a496:	6822      	ldr	r2, [r4, #0]
 801a498:	0591      	lsls	r1, r2, #22
 801a49a:	f57f af1b 	bpl.w	801a2d4 <_scanf_float+0x60>
 801a49e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801a4a2:	6022      	str	r2, [r4, #0]
 801a4a4:	f8cd 9004 	str.w	r9, [sp, #4]
 801a4a8:	e7a8      	b.n	801a3fc <_scanf_float+0x188>
 801a4aa:	6822      	ldr	r2, [r4, #0]
 801a4ac:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801a4b0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801a4b4:	d006      	beq.n	801a4c4 <_scanf_float+0x250>
 801a4b6:	0550      	lsls	r0, r2, #21
 801a4b8:	f57f af0c 	bpl.w	801a2d4 <_scanf_float+0x60>
 801a4bc:	f1b9 0f00 	cmp.w	r9, #0
 801a4c0:	f43f af0f 	beq.w	801a2e2 <_scanf_float+0x6e>
 801a4c4:	0591      	lsls	r1, r2, #22
 801a4c6:	bf58      	it	pl
 801a4c8:	9901      	ldrpl	r1, [sp, #4]
 801a4ca:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a4ce:	bf58      	it	pl
 801a4d0:	eba9 0101 	subpl.w	r1, r9, r1
 801a4d4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801a4d8:	bf58      	it	pl
 801a4da:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801a4de:	6022      	str	r2, [r4, #0]
 801a4e0:	f04f 0900 	mov.w	r9, #0
 801a4e4:	e78a      	b.n	801a3fc <_scanf_float+0x188>
 801a4e6:	f04f 0a03 	mov.w	sl, #3
 801a4ea:	e787      	b.n	801a3fc <_scanf_float+0x188>
 801a4ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801a4f0:	4639      	mov	r1, r7
 801a4f2:	4640      	mov	r0, r8
 801a4f4:	4798      	blx	r3
 801a4f6:	2800      	cmp	r0, #0
 801a4f8:	f43f aedf 	beq.w	801a2ba <_scanf_float+0x46>
 801a4fc:	e6ea      	b.n	801a2d4 <_scanf_float+0x60>
 801a4fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a502:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a506:	463a      	mov	r2, r7
 801a508:	4640      	mov	r0, r8
 801a50a:	4798      	blx	r3
 801a50c:	6923      	ldr	r3, [r4, #16]
 801a50e:	3b01      	subs	r3, #1
 801a510:	6123      	str	r3, [r4, #16]
 801a512:	e6ec      	b.n	801a2ee <_scanf_float+0x7a>
 801a514:	1e6b      	subs	r3, r5, #1
 801a516:	2b06      	cmp	r3, #6
 801a518:	d825      	bhi.n	801a566 <_scanf_float+0x2f2>
 801a51a:	2d02      	cmp	r5, #2
 801a51c:	d836      	bhi.n	801a58c <_scanf_float+0x318>
 801a51e:	455e      	cmp	r6, fp
 801a520:	f67f aee8 	bls.w	801a2f4 <_scanf_float+0x80>
 801a524:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a528:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a52c:	463a      	mov	r2, r7
 801a52e:	4640      	mov	r0, r8
 801a530:	4798      	blx	r3
 801a532:	6923      	ldr	r3, [r4, #16]
 801a534:	3b01      	subs	r3, #1
 801a536:	6123      	str	r3, [r4, #16]
 801a538:	e7f1      	b.n	801a51e <_scanf_float+0x2aa>
 801a53a:	9802      	ldr	r0, [sp, #8]
 801a53c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a540:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801a544:	9002      	str	r0, [sp, #8]
 801a546:	463a      	mov	r2, r7
 801a548:	4640      	mov	r0, r8
 801a54a:	4798      	blx	r3
 801a54c:	6923      	ldr	r3, [r4, #16]
 801a54e:	3b01      	subs	r3, #1
 801a550:	6123      	str	r3, [r4, #16]
 801a552:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a556:	fa5f fa8a 	uxtb.w	sl, sl
 801a55a:	f1ba 0f02 	cmp.w	sl, #2
 801a55e:	d1ec      	bne.n	801a53a <_scanf_float+0x2c6>
 801a560:	3d03      	subs	r5, #3
 801a562:	b2ed      	uxtb	r5, r5
 801a564:	1b76      	subs	r6, r6, r5
 801a566:	6823      	ldr	r3, [r4, #0]
 801a568:	05da      	lsls	r2, r3, #23
 801a56a:	d52f      	bpl.n	801a5cc <_scanf_float+0x358>
 801a56c:	055b      	lsls	r3, r3, #21
 801a56e:	d510      	bpl.n	801a592 <_scanf_float+0x31e>
 801a570:	455e      	cmp	r6, fp
 801a572:	f67f aebf 	bls.w	801a2f4 <_scanf_float+0x80>
 801a576:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a57a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a57e:	463a      	mov	r2, r7
 801a580:	4640      	mov	r0, r8
 801a582:	4798      	blx	r3
 801a584:	6923      	ldr	r3, [r4, #16]
 801a586:	3b01      	subs	r3, #1
 801a588:	6123      	str	r3, [r4, #16]
 801a58a:	e7f1      	b.n	801a570 <_scanf_float+0x2fc>
 801a58c:	46aa      	mov	sl, r5
 801a58e:	9602      	str	r6, [sp, #8]
 801a590:	e7df      	b.n	801a552 <_scanf_float+0x2de>
 801a592:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801a596:	6923      	ldr	r3, [r4, #16]
 801a598:	2965      	cmp	r1, #101	; 0x65
 801a59a:	f103 33ff 	add.w	r3, r3, #4294967295
 801a59e:	f106 35ff 	add.w	r5, r6, #4294967295
 801a5a2:	6123      	str	r3, [r4, #16]
 801a5a4:	d00c      	beq.n	801a5c0 <_scanf_float+0x34c>
 801a5a6:	2945      	cmp	r1, #69	; 0x45
 801a5a8:	d00a      	beq.n	801a5c0 <_scanf_float+0x34c>
 801a5aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a5ae:	463a      	mov	r2, r7
 801a5b0:	4640      	mov	r0, r8
 801a5b2:	4798      	blx	r3
 801a5b4:	6923      	ldr	r3, [r4, #16]
 801a5b6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801a5ba:	3b01      	subs	r3, #1
 801a5bc:	1eb5      	subs	r5, r6, #2
 801a5be:	6123      	str	r3, [r4, #16]
 801a5c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a5c4:	463a      	mov	r2, r7
 801a5c6:	4640      	mov	r0, r8
 801a5c8:	4798      	blx	r3
 801a5ca:	462e      	mov	r6, r5
 801a5cc:	6825      	ldr	r5, [r4, #0]
 801a5ce:	f015 0510 	ands.w	r5, r5, #16
 801a5d2:	d159      	bne.n	801a688 <_scanf_float+0x414>
 801a5d4:	7035      	strb	r5, [r6, #0]
 801a5d6:	6823      	ldr	r3, [r4, #0]
 801a5d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801a5dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a5e0:	d11b      	bne.n	801a61a <_scanf_float+0x3a6>
 801a5e2:	9b01      	ldr	r3, [sp, #4]
 801a5e4:	454b      	cmp	r3, r9
 801a5e6:	eba3 0209 	sub.w	r2, r3, r9
 801a5ea:	d123      	bne.n	801a634 <_scanf_float+0x3c0>
 801a5ec:	2200      	movs	r2, #0
 801a5ee:	4659      	mov	r1, fp
 801a5f0:	4640      	mov	r0, r8
 801a5f2:	f000 fe97 	bl	801b324 <_strtod_r>
 801a5f6:	6822      	ldr	r2, [r4, #0]
 801a5f8:	9b03      	ldr	r3, [sp, #12]
 801a5fa:	f012 0f02 	tst.w	r2, #2
 801a5fe:	ec57 6b10 	vmov	r6, r7, d0
 801a602:	681b      	ldr	r3, [r3, #0]
 801a604:	d021      	beq.n	801a64a <_scanf_float+0x3d6>
 801a606:	9903      	ldr	r1, [sp, #12]
 801a608:	1d1a      	adds	r2, r3, #4
 801a60a:	600a      	str	r2, [r1, #0]
 801a60c:	681b      	ldr	r3, [r3, #0]
 801a60e:	e9c3 6700 	strd	r6, r7, [r3]
 801a612:	68e3      	ldr	r3, [r4, #12]
 801a614:	3301      	adds	r3, #1
 801a616:	60e3      	str	r3, [r4, #12]
 801a618:	e66d      	b.n	801a2f6 <_scanf_float+0x82>
 801a61a:	9b04      	ldr	r3, [sp, #16]
 801a61c:	2b00      	cmp	r3, #0
 801a61e:	d0e5      	beq.n	801a5ec <_scanf_float+0x378>
 801a620:	9905      	ldr	r1, [sp, #20]
 801a622:	230a      	movs	r3, #10
 801a624:	462a      	mov	r2, r5
 801a626:	3101      	adds	r1, #1
 801a628:	4640      	mov	r0, r8
 801a62a:	f000 ff03 	bl	801b434 <_strtol_r>
 801a62e:	9b04      	ldr	r3, [sp, #16]
 801a630:	9e05      	ldr	r6, [sp, #20]
 801a632:	1ac2      	subs	r2, r0, r3
 801a634:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801a638:	429e      	cmp	r6, r3
 801a63a:	bf28      	it	cs
 801a63c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801a640:	4912      	ldr	r1, [pc, #72]	; (801a68c <_scanf_float+0x418>)
 801a642:	4630      	mov	r0, r6
 801a644:	f000 f82c 	bl	801a6a0 <siprintf>
 801a648:	e7d0      	b.n	801a5ec <_scanf_float+0x378>
 801a64a:	9903      	ldr	r1, [sp, #12]
 801a64c:	f012 0f04 	tst.w	r2, #4
 801a650:	f103 0204 	add.w	r2, r3, #4
 801a654:	600a      	str	r2, [r1, #0]
 801a656:	d1d9      	bne.n	801a60c <_scanf_float+0x398>
 801a658:	f8d3 8000 	ldr.w	r8, [r3]
 801a65c:	ee10 2a10 	vmov	r2, s0
 801a660:	ee10 0a10 	vmov	r0, s0
 801a664:	463b      	mov	r3, r7
 801a666:	4639      	mov	r1, r7
 801a668:	f7e6 fa78 	bl	8000b5c <__aeabi_dcmpun>
 801a66c:	b128      	cbz	r0, 801a67a <_scanf_float+0x406>
 801a66e:	4808      	ldr	r0, [pc, #32]	; (801a690 <_scanf_float+0x41c>)
 801a670:	f000 f810 	bl	801a694 <nanf>
 801a674:	ed88 0a00 	vstr	s0, [r8]
 801a678:	e7cb      	b.n	801a612 <_scanf_float+0x39e>
 801a67a:	4630      	mov	r0, r6
 801a67c:	4639      	mov	r1, r7
 801a67e:	f7e6 facb 	bl	8000c18 <__aeabi_d2f>
 801a682:	f8c8 0000 	str.w	r0, [r8]
 801a686:	e7c4      	b.n	801a612 <_scanf_float+0x39e>
 801a688:	2500      	movs	r5, #0
 801a68a:	e634      	b.n	801a2f6 <_scanf_float+0x82>
 801a68c:	080254a0 	.word	0x080254a0
 801a690:	080258a8 	.word	0x080258a8

0801a694 <nanf>:
 801a694:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801a69c <nanf+0x8>
 801a698:	4770      	bx	lr
 801a69a:	bf00      	nop
 801a69c:	7fc00000 	.word	0x7fc00000

0801a6a0 <siprintf>:
 801a6a0:	b40e      	push	{r1, r2, r3}
 801a6a2:	b500      	push	{lr}
 801a6a4:	b09c      	sub	sp, #112	; 0x70
 801a6a6:	ab1d      	add	r3, sp, #116	; 0x74
 801a6a8:	9002      	str	r0, [sp, #8]
 801a6aa:	9006      	str	r0, [sp, #24]
 801a6ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801a6b0:	4809      	ldr	r0, [pc, #36]	; (801a6d8 <siprintf+0x38>)
 801a6b2:	9107      	str	r1, [sp, #28]
 801a6b4:	9104      	str	r1, [sp, #16]
 801a6b6:	4909      	ldr	r1, [pc, #36]	; (801a6dc <siprintf+0x3c>)
 801a6b8:	f853 2b04 	ldr.w	r2, [r3], #4
 801a6bc:	9105      	str	r1, [sp, #20]
 801a6be:	6800      	ldr	r0, [r0, #0]
 801a6c0:	9301      	str	r3, [sp, #4]
 801a6c2:	a902      	add	r1, sp, #8
 801a6c4:	f002 fed4 	bl	801d470 <_svfiprintf_r>
 801a6c8:	9b02      	ldr	r3, [sp, #8]
 801a6ca:	2200      	movs	r2, #0
 801a6cc:	701a      	strb	r2, [r3, #0]
 801a6ce:	b01c      	add	sp, #112	; 0x70
 801a6d0:	f85d eb04 	ldr.w	lr, [sp], #4
 801a6d4:	b003      	add	sp, #12
 801a6d6:	4770      	bx	lr
 801a6d8:	200000a4 	.word	0x200000a4
 801a6dc:	ffff0208 	.word	0xffff0208

0801a6e0 <sulp>:
 801a6e0:	b570      	push	{r4, r5, r6, lr}
 801a6e2:	4604      	mov	r4, r0
 801a6e4:	460d      	mov	r5, r1
 801a6e6:	ec45 4b10 	vmov	d0, r4, r5
 801a6ea:	4616      	mov	r6, r2
 801a6ec:	f002 fc1e 	bl	801cf2c <__ulp>
 801a6f0:	ec51 0b10 	vmov	r0, r1, d0
 801a6f4:	b17e      	cbz	r6, 801a716 <sulp+0x36>
 801a6f6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801a6fa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801a6fe:	2b00      	cmp	r3, #0
 801a700:	dd09      	ble.n	801a716 <sulp+0x36>
 801a702:	051b      	lsls	r3, r3, #20
 801a704:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801a708:	2400      	movs	r4, #0
 801a70a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801a70e:	4622      	mov	r2, r4
 801a710:	462b      	mov	r3, r5
 801a712:	f7e5 ff89 	bl	8000628 <__aeabi_dmul>
 801a716:	bd70      	pop	{r4, r5, r6, pc}

0801a718 <_strtod_l>:
 801a718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a71c:	ed2d 8b02 	vpush	{d8}
 801a720:	b09d      	sub	sp, #116	; 0x74
 801a722:	461f      	mov	r7, r3
 801a724:	2300      	movs	r3, #0
 801a726:	9318      	str	r3, [sp, #96]	; 0x60
 801a728:	4ba2      	ldr	r3, [pc, #648]	; (801a9b4 <_strtod_l+0x29c>)
 801a72a:	9213      	str	r2, [sp, #76]	; 0x4c
 801a72c:	681b      	ldr	r3, [r3, #0]
 801a72e:	9305      	str	r3, [sp, #20]
 801a730:	4604      	mov	r4, r0
 801a732:	4618      	mov	r0, r3
 801a734:	4688      	mov	r8, r1
 801a736:	f7e5 fd63 	bl	8000200 <strlen>
 801a73a:	f04f 0a00 	mov.w	sl, #0
 801a73e:	4605      	mov	r5, r0
 801a740:	f04f 0b00 	mov.w	fp, #0
 801a744:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801a748:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a74a:	781a      	ldrb	r2, [r3, #0]
 801a74c:	2a2b      	cmp	r2, #43	; 0x2b
 801a74e:	d04e      	beq.n	801a7ee <_strtod_l+0xd6>
 801a750:	d83b      	bhi.n	801a7ca <_strtod_l+0xb2>
 801a752:	2a0d      	cmp	r2, #13
 801a754:	d834      	bhi.n	801a7c0 <_strtod_l+0xa8>
 801a756:	2a08      	cmp	r2, #8
 801a758:	d834      	bhi.n	801a7c4 <_strtod_l+0xac>
 801a75a:	2a00      	cmp	r2, #0
 801a75c:	d03e      	beq.n	801a7dc <_strtod_l+0xc4>
 801a75e:	2300      	movs	r3, #0
 801a760:	930a      	str	r3, [sp, #40]	; 0x28
 801a762:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801a764:	7833      	ldrb	r3, [r6, #0]
 801a766:	2b30      	cmp	r3, #48	; 0x30
 801a768:	f040 80b0 	bne.w	801a8cc <_strtod_l+0x1b4>
 801a76c:	7873      	ldrb	r3, [r6, #1]
 801a76e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801a772:	2b58      	cmp	r3, #88	; 0x58
 801a774:	d168      	bne.n	801a848 <_strtod_l+0x130>
 801a776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a778:	9301      	str	r3, [sp, #4]
 801a77a:	ab18      	add	r3, sp, #96	; 0x60
 801a77c:	9702      	str	r7, [sp, #8]
 801a77e:	9300      	str	r3, [sp, #0]
 801a780:	4a8d      	ldr	r2, [pc, #564]	; (801a9b8 <_strtod_l+0x2a0>)
 801a782:	ab19      	add	r3, sp, #100	; 0x64
 801a784:	a917      	add	r1, sp, #92	; 0x5c
 801a786:	4620      	mov	r0, r4
 801a788:	f001 fd38 	bl	801c1fc <__gethex>
 801a78c:	f010 0707 	ands.w	r7, r0, #7
 801a790:	4605      	mov	r5, r0
 801a792:	d005      	beq.n	801a7a0 <_strtod_l+0x88>
 801a794:	2f06      	cmp	r7, #6
 801a796:	d12c      	bne.n	801a7f2 <_strtod_l+0xda>
 801a798:	3601      	adds	r6, #1
 801a79a:	2300      	movs	r3, #0
 801a79c:	9617      	str	r6, [sp, #92]	; 0x5c
 801a79e:	930a      	str	r3, [sp, #40]	; 0x28
 801a7a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a7a2:	2b00      	cmp	r3, #0
 801a7a4:	f040 8590 	bne.w	801b2c8 <_strtod_l+0xbb0>
 801a7a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a7aa:	b1eb      	cbz	r3, 801a7e8 <_strtod_l+0xd0>
 801a7ac:	4652      	mov	r2, sl
 801a7ae:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801a7b2:	ec43 2b10 	vmov	d0, r2, r3
 801a7b6:	b01d      	add	sp, #116	; 0x74
 801a7b8:	ecbd 8b02 	vpop	{d8}
 801a7bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a7c0:	2a20      	cmp	r2, #32
 801a7c2:	d1cc      	bne.n	801a75e <_strtod_l+0x46>
 801a7c4:	3301      	adds	r3, #1
 801a7c6:	9317      	str	r3, [sp, #92]	; 0x5c
 801a7c8:	e7be      	b.n	801a748 <_strtod_l+0x30>
 801a7ca:	2a2d      	cmp	r2, #45	; 0x2d
 801a7cc:	d1c7      	bne.n	801a75e <_strtod_l+0x46>
 801a7ce:	2201      	movs	r2, #1
 801a7d0:	920a      	str	r2, [sp, #40]	; 0x28
 801a7d2:	1c5a      	adds	r2, r3, #1
 801a7d4:	9217      	str	r2, [sp, #92]	; 0x5c
 801a7d6:	785b      	ldrb	r3, [r3, #1]
 801a7d8:	2b00      	cmp	r3, #0
 801a7da:	d1c2      	bne.n	801a762 <_strtod_l+0x4a>
 801a7dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a7de:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801a7e2:	2b00      	cmp	r3, #0
 801a7e4:	f040 856e 	bne.w	801b2c4 <_strtod_l+0xbac>
 801a7e8:	4652      	mov	r2, sl
 801a7ea:	465b      	mov	r3, fp
 801a7ec:	e7e1      	b.n	801a7b2 <_strtod_l+0x9a>
 801a7ee:	2200      	movs	r2, #0
 801a7f0:	e7ee      	b.n	801a7d0 <_strtod_l+0xb8>
 801a7f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801a7f4:	b13a      	cbz	r2, 801a806 <_strtod_l+0xee>
 801a7f6:	2135      	movs	r1, #53	; 0x35
 801a7f8:	a81a      	add	r0, sp, #104	; 0x68
 801a7fa:	f002 fca2 	bl	801d142 <__copybits>
 801a7fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a800:	4620      	mov	r0, r4
 801a802:	f002 f861 	bl	801c8c8 <_Bfree>
 801a806:	3f01      	subs	r7, #1
 801a808:	2f04      	cmp	r7, #4
 801a80a:	d806      	bhi.n	801a81a <_strtod_l+0x102>
 801a80c:	e8df f007 	tbb	[pc, r7]
 801a810:	1714030a 	.word	0x1714030a
 801a814:	0a          	.byte	0x0a
 801a815:	00          	.byte	0x00
 801a816:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 801a81a:	0728      	lsls	r0, r5, #28
 801a81c:	d5c0      	bpl.n	801a7a0 <_strtod_l+0x88>
 801a81e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801a822:	e7bd      	b.n	801a7a0 <_strtod_l+0x88>
 801a824:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 801a828:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801a82a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801a82e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801a832:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801a836:	e7f0      	b.n	801a81a <_strtod_l+0x102>
 801a838:	f8df b180 	ldr.w	fp, [pc, #384]	; 801a9bc <_strtod_l+0x2a4>
 801a83c:	e7ed      	b.n	801a81a <_strtod_l+0x102>
 801a83e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801a842:	f04f 3aff 	mov.w	sl, #4294967295
 801a846:	e7e8      	b.n	801a81a <_strtod_l+0x102>
 801a848:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a84a:	1c5a      	adds	r2, r3, #1
 801a84c:	9217      	str	r2, [sp, #92]	; 0x5c
 801a84e:	785b      	ldrb	r3, [r3, #1]
 801a850:	2b30      	cmp	r3, #48	; 0x30
 801a852:	d0f9      	beq.n	801a848 <_strtod_l+0x130>
 801a854:	2b00      	cmp	r3, #0
 801a856:	d0a3      	beq.n	801a7a0 <_strtod_l+0x88>
 801a858:	2301      	movs	r3, #1
 801a85a:	f04f 0900 	mov.w	r9, #0
 801a85e:	9304      	str	r3, [sp, #16]
 801a860:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a862:	9308      	str	r3, [sp, #32]
 801a864:	f8cd 901c 	str.w	r9, [sp, #28]
 801a868:	464f      	mov	r7, r9
 801a86a:	220a      	movs	r2, #10
 801a86c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801a86e:	7806      	ldrb	r6, [r0, #0]
 801a870:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801a874:	b2d9      	uxtb	r1, r3
 801a876:	2909      	cmp	r1, #9
 801a878:	d92a      	bls.n	801a8d0 <_strtod_l+0x1b8>
 801a87a:	9905      	ldr	r1, [sp, #20]
 801a87c:	462a      	mov	r2, r5
 801a87e:	f002 ff0f 	bl	801d6a0 <strncmp>
 801a882:	b398      	cbz	r0, 801a8ec <_strtod_l+0x1d4>
 801a884:	2000      	movs	r0, #0
 801a886:	4632      	mov	r2, r6
 801a888:	463d      	mov	r5, r7
 801a88a:	9005      	str	r0, [sp, #20]
 801a88c:	4603      	mov	r3, r0
 801a88e:	2a65      	cmp	r2, #101	; 0x65
 801a890:	d001      	beq.n	801a896 <_strtod_l+0x17e>
 801a892:	2a45      	cmp	r2, #69	; 0x45
 801a894:	d118      	bne.n	801a8c8 <_strtod_l+0x1b0>
 801a896:	b91d      	cbnz	r5, 801a8a0 <_strtod_l+0x188>
 801a898:	9a04      	ldr	r2, [sp, #16]
 801a89a:	4302      	orrs	r2, r0
 801a89c:	d09e      	beq.n	801a7dc <_strtod_l+0xc4>
 801a89e:	2500      	movs	r5, #0
 801a8a0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 801a8a4:	f108 0201 	add.w	r2, r8, #1
 801a8a8:	9217      	str	r2, [sp, #92]	; 0x5c
 801a8aa:	f898 2001 	ldrb.w	r2, [r8, #1]
 801a8ae:	2a2b      	cmp	r2, #43	; 0x2b
 801a8b0:	d075      	beq.n	801a99e <_strtod_l+0x286>
 801a8b2:	2a2d      	cmp	r2, #45	; 0x2d
 801a8b4:	d07b      	beq.n	801a9ae <_strtod_l+0x296>
 801a8b6:	f04f 0c00 	mov.w	ip, #0
 801a8ba:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801a8be:	2909      	cmp	r1, #9
 801a8c0:	f240 8082 	bls.w	801a9c8 <_strtod_l+0x2b0>
 801a8c4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801a8c8:	2600      	movs	r6, #0
 801a8ca:	e09d      	b.n	801aa08 <_strtod_l+0x2f0>
 801a8cc:	2300      	movs	r3, #0
 801a8ce:	e7c4      	b.n	801a85a <_strtod_l+0x142>
 801a8d0:	2f08      	cmp	r7, #8
 801a8d2:	bfd8      	it	le
 801a8d4:	9907      	ldrle	r1, [sp, #28]
 801a8d6:	f100 0001 	add.w	r0, r0, #1
 801a8da:	bfda      	itte	le
 801a8dc:	fb02 3301 	mlale	r3, r2, r1, r3
 801a8e0:	9307      	strle	r3, [sp, #28]
 801a8e2:	fb02 3909 	mlagt	r9, r2, r9, r3
 801a8e6:	3701      	adds	r7, #1
 801a8e8:	9017      	str	r0, [sp, #92]	; 0x5c
 801a8ea:	e7bf      	b.n	801a86c <_strtod_l+0x154>
 801a8ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a8ee:	195a      	adds	r2, r3, r5
 801a8f0:	9217      	str	r2, [sp, #92]	; 0x5c
 801a8f2:	5d5a      	ldrb	r2, [r3, r5]
 801a8f4:	2f00      	cmp	r7, #0
 801a8f6:	d037      	beq.n	801a968 <_strtod_l+0x250>
 801a8f8:	9005      	str	r0, [sp, #20]
 801a8fa:	463d      	mov	r5, r7
 801a8fc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801a900:	2b09      	cmp	r3, #9
 801a902:	d912      	bls.n	801a92a <_strtod_l+0x212>
 801a904:	2301      	movs	r3, #1
 801a906:	e7c2      	b.n	801a88e <_strtod_l+0x176>
 801a908:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a90a:	1c5a      	adds	r2, r3, #1
 801a90c:	9217      	str	r2, [sp, #92]	; 0x5c
 801a90e:	785a      	ldrb	r2, [r3, #1]
 801a910:	3001      	adds	r0, #1
 801a912:	2a30      	cmp	r2, #48	; 0x30
 801a914:	d0f8      	beq.n	801a908 <_strtod_l+0x1f0>
 801a916:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801a91a:	2b08      	cmp	r3, #8
 801a91c:	f200 84d9 	bhi.w	801b2d2 <_strtod_l+0xbba>
 801a920:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a922:	9005      	str	r0, [sp, #20]
 801a924:	2000      	movs	r0, #0
 801a926:	9308      	str	r3, [sp, #32]
 801a928:	4605      	mov	r5, r0
 801a92a:	3a30      	subs	r2, #48	; 0x30
 801a92c:	f100 0301 	add.w	r3, r0, #1
 801a930:	d014      	beq.n	801a95c <_strtod_l+0x244>
 801a932:	9905      	ldr	r1, [sp, #20]
 801a934:	4419      	add	r1, r3
 801a936:	9105      	str	r1, [sp, #20]
 801a938:	462b      	mov	r3, r5
 801a93a:	eb00 0e05 	add.w	lr, r0, r5
 801a93e:	210a      	movs	r1, #10
 801a940:	4573      	cmp	r3, lr
 801a942:	d113      	bne.n	801a96c <_strtod_l+0x254>
 801a944:	182b      	adds	r3, r5, r0
 801a946:	2b08      	cmp	r3, #8
 801a948:	f105 0501 	add.w	r5, r5, #1
 801a94c:	4405      	add	r5, r0
 801a94e:	dc1c      	bgt.n	801a98a <_strtod_l+0x272>
 801a950:	9907      	ldr	r1, [sp, #28]
 801a952:	230a      	movs	r3, #10
 801a954:	fb03 2301 	mla	r3, r3, r1, r2
 801a958:	9307      	str	r3, [sp, #28]
 801a95a:	2300      	movs	r3, #0
 801a95c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801a95e:	1c51      	adds	r1, r2, #1
 801a960:	9117      	str	r1, [sp, #92]	; 0x5c
 801a962:	7852      	ldrb	r2, [r2, #1]
 801a964:	4618      	mov	r0, r3
 801a966:	e7c9      	b.n	801a8fc <_strtod_l+0x1e4>
 801a968:	4638      	mov	r0, r7
 801a96a:	e7d2      	b.n	801a912 <_strtod_l+0x1fa>
 801a96c:	2b08      	cmp	r3, #8
 801a96e:	dc04      	bgt.n	801a97a <_strtod_l+0x262>
 801a970:	9e07      	ldr	r6, [sp, #28]
 801a972:	434e      	muls	r6, r1
 801a974:	9607      	str	r6, [sp, #28]
 801a976:	3301      	adds	r3, #1
 801a978:	e7e2      	b.n	801a940 <_strtod_l+0x228>
 801a97a:	f103 0c01 	add.w	ip, r3, #1
 801a97e:	f1bc 0f10 	cmp.w	ip, #16
 801a982:	bfd8      	it	le
 801a984:	fb01 f909 	mulle.w	r9, r1, r9
 801a988:	e7f5      	b.n	801a976 <_strtod_l+0x25e>
 801a98a:	2d10      	cmp	r5, #16
 801a98c:	bfdc      	itt	le
 801a98e:	230a      	movle	r3, #10
 801a990:	fb03 2909 	mlale	r9, r3, r9, r2
 801a994:	e7e1      	b.n	801a95a <_strtod_l+0x242>
 801a996:	2300      	movs	r3, #0
 801a998:	9305      	str	r3, [sp, #20]
 801a99a:	2301      	movs	r3, #1
 801a99c:	e77c      	b.n	801a898 <_strtod_l+0x180>
 801a99e:	f04f 0c00 	mov.w	ip, #0
 801a9a2:	f108 0202 	add.w	r2, r8, #2
 801a9a6:	9217      	str	r2, [sp, #92]	; 0x5c
 801a9a8:	f898 2002 	ldrb.w	r2, [r8, #2]
 801a9ac:	e785      	b.n	801a8ba <_strtod_l+0x1a2>
 801a9ae:	f04f 0c01 	mov.w	ip, #1
 801a9b2:	e7f6      	b.n	801a9a2 <_strtod_l+0x28a>
 801a9b4:	080256f0 	.word	0x080256f0
 801a9b8:	080254a8 	.word	0x080254a8
 801a9bc:	7ff00000 	.word	0x7ff00000
 801a9c0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801a9c2:	1c51      	adds	r1, r2, #1
 801a9c4:	9117      	str	r1, [sp, #92]	; 0x5c
 801a9c6:	7852      	ldrb	r2, [r2, #1]
 801a9c8:	2a30      	cmp	r2, #48	; 0x30
 801a9ca:	d0f9      	beq.n	801a9c0 <_strtod_l+0x2a8>
 801a9cc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801a9d0:	2908      	cmp	r1, #8
 801a9d2:	f63f af79 	bhi.w	801a8c8 <_strtod_l+0x1b0>
 801a9d6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801a9da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801a9dc:	9206      	str	r2, [sp, #24]
 801a9de:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801a9e0:	1c51      	adds	r1, r2, #1
 801a9e2:	9117      	str	r1, [sp, #92]	; 0x5c
 801a9e4:	7852      	ldrb	r2, [r2, #1]
 801a9e6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801a9ea:	2e09      	cmp	r6, #9
 801a9ec:	d937      	bls.n	801aa5e <_strtod_l+0x346>
 801a9ee:	9e06      	ldr	r6, [sp, #24]
 801a9f0:	1b89      	subs	r1, r1, r6
 801a9f2:	2908      	cmp	r1, #8
 801a9f4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801a9f8:	dc02      	bgt.n	801aa00 <_strtod_l+0x2e8>
 801a9fa:	4576      	cmp	r6, lr
 801a9fc:	bfa8      	it	ge
 801a9fe:	4676      	movge	r6, lr
 801aa00:	f1bc 0f00 	cmp.w	ip, #0
 801aa04:	d000      	beq.n	801aa08 <_strtod_l+0x2f0>
 801aa06:	4276      	negs	r6, r6
 801aa08:	2d00      	cmp	r5, #0
 801aa0a:	d14d      	bne.n	801aaa8 <_strtod_l+0x390>
 801aa0c:	9904      	ldr	r1, [sp, #16]
 801aa0e:	4301      	orrs	r1, r0
 801aa10:	f47f aec6 	bne.w	801a7a0 <_strtod_l+0x88>
 801aa14:	2b00      	cmp	r3, #0
 801aa16:	f47f aee1 	bne.w	801a7dc <_strtod_l+0xc4>
 801aa1a:	2a69      	cmp	r2, #105	; 0x69
 801aa1c:	d027      	beq.n	801aa6e <_strtod_l+0x356>
 801aa1e:	dc24      	bgt.n	801aa6a <_strtod_l+0x352>
 801aa20:	2a49      	cmp	r2, #73	; 0x49
 801aa22:	d024      	beq.n	801aa6e <_strtod_l+0x356>
 801aa24:	2a4e      	cmp	r2, #78	; 0x4e
 801aa26:	f47f aed9 	bne.w	801a7dc <_strtod_l+0xc4>
 801aa2a:	499f      	ldr	r1, [pc, #636]	; (801aca8 <_strtod_l+0x590>)
 801aa2c:	a817      	add	r0, sp, #92	; 0x5c
 801aa2e:	f001 fe3d 	bl	801c6ac <__match>
 801aa32:	2800      	cmp	r0, #0
 801aa34:	f43f aed2 	beq.w	801a7dc <_strtod_l+0xc4>
 801aa38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801aa3a:	781b      	ldrb	r3, [r3, #0]
 801aa3c:	2b28      	cmp	r3, #40	; 0x28
 801aa3e:	d12d      	bne.n	801aa9c <_strtod_l+0x384>
 801aa40:	499a      	ldr	r1, [pc, #616]	; (801acac <_strtod_l+0x594>)
 801aa42:	aa1a      	add	r2, sp, #104	; 0x68
 801aa44:	a817      	add	r0, sp, #92	; 0x5c
 801aa46:	f001 fe45 	bl	801c6d4 <__hexnan>
 801aa4a:	2805      	cmp	r0, #5
 801aa4c:	d126      	bne.n	801aa9c <_strtod_l+0x384>
 801aa4e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801aa50:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801aa54:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801aa58:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801aa5c:	e6a0      	b.n	801a7a0 <_strtod_l+0x88>
 801aa5e:	210a      	movs	r1, #10
 801aa60:	fb01 2e0e 	mla	lr, r1, lr, r2
 801aa64:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801aa68:	e7b9      	b.n	801a9de <_strtod_l+0x2c6>
 801aa6a:	2a6e      	cmp	r2, #110	; 0x6e
 801aa6c:	e7db      	b.n	801aa26 <_strtod_l+0x30e>
 801aa6e:	4990      	ldr	r1, [pc, #576]	; (801acb0 <_strtod_l+0x598>)
 801aa70:	a817      	add	r0, sp, #92	; 0x5c
 801aa72:	f001 fe1b 	bl	801c6ac <__match>
 801aa76:	2800      	cmp	r0, #0
 801aa78:	f43f aeb0 	beq.w	801a7dc <_strtod_l+0xc4>
 801aa7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801aa7e:	498d      	ldr	r1, [pc, #564]	; (801acb4 <_strtod_l+0x59c>)
 801aa80:	3b01      	subs	r3, #1
 801aa82:	a817      	add	r0, sp, #92	; 0x5c
 801aa84:	9317      	str	r3, [sp, #92]	; 0x5c
 801aa86:	f001 fe11 	bl	801c6ac <__match>
 801aa8a:	b910      	cbnz	r0, 801aa92 <_strtod_l+0x37a>
 801aa8c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801aa8e:	3301      	adds	r3, #1
 801aa90:	9317      	str	r3, [sp, #92]	; 0x5c
 801aa92:	f8df b230 	ldr.w	fp, [pc, #560]	; 801acc4 <_strtod_l+0x5ac>
 801aa96:	f04f 0a00 	mov.w	sl, #0
 801aa9a:	e681      	b.n	801a7a0 <_strtod_l+0x88>
 801aa9c:	4886      	ldr	r0, [pc, #536]	; (801acb8 <_strtod_l+0x5a0>)
 801aa9e:	f002 fde7 	bl	801d670 <nan>
 801aaa2:	ec5b ab10 	vmov	sl, fp, d0
 801aaa6:	e67b      	b.n	801a7a0 <_strtod_l+0x88>
 801aaa8:	9b05      	ldr	r3, [sp, #20]
 801aaaa:	9807      	ldr	r0, [sp, #28]
 801aaac:	1af3      	subs	r3, r6, r3
 801aaae:	2f00      	cmp	r7, #0
 801aab0:	bf08      	it	eq
 801aab2:	462f      	moveq	r7, r5
 801aab4:	2d10      	cmp	r5, #16
 801aab6:	9306      	str	r3, [sp, #24]
 801aab8:	46a8      	mov	r8, r5
 801aaba:	bfa8      	it	ge
 801aabc:	f04f 0810 	movge.w	r8, #16
 801aac0:	f7e5 fd38 	bl	8000534 <__aeabi_ui2d>
 801aac4:	2d09      	cmp	r5, #9
 801aac6:	4682      	mov	sl, r0
 801aac8:	468b      	mov	fp, r1
 801aaca:	dd13      	ble.n	801aaf4 <_strtod_l+0x3dc>
 801aacc:	4b7b      	ldr	r3, [pc, #492]	; (801acbc <_strtod_l+0x5a4>)
 801aace:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801aad2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801aad6:	f7e5 fda7 	bl	8000628 <__aeabi_dmul>
 801aada:	4682      	mov	sl, r0
 801aadc:	4648      	mov	r0, r9
 801aade:	468b      	mov	fp, r1
 801aae0:	f7e5 fd28 	bl	8000534 <__aeabi_ui2d>
 801aae4:	4602      	mov	r2, r0
 801aae6:	460b      	mov	r3, r1
 801aae8:	4650      	mov	r0, sl
 801aaea:	4659      	mov	r1, fp
 801aaec:	f7e5 fbe6 	bl	80002bc <__adddf3>
 801aaf0:	4682      	mov	sl, r0
 801aaf2:	468b      	mov	fp, r1
 801aaf4:	2d0f      	cmp	r5, #15
 801aaf6:	dc38      	bgt.n	801ab6a <_strtod_l+0x452>
 801aaf8:	9b06      	ldr	r3, [sp, #24]
 801aafa:	2b00      	cmp	r3, #0
 801aafc:	f43f ae50 	beq.w	801a7a0 <_strtod_l+0x88>
 801ab00:	dd24      	ble.n	801ab4c <_strtod_l+0x434>
 801ab02:	2b16      	cmp	r3, #22
 801ab04:	dc0b      	bgt.n	801ab1e <_strtod_l+0x406>
 801ab06:	496d      	ldr	r1, [pc, #436]	; (801acbc <_strtod_l+0x5a4>)
 801ab08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801ab0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ab10:	4652      	mov	r2, sl
 801ab12:	465b      	mov	r3, fp
 801ab14:	f7e5 fd88 	bl	8000628 <__aeabi_dmul>
 801ab18:	4682      	mov	sl, r0
 801ab1a:	468b      	mov	fp, r1
 801ab1c:	e640      	b.n	801a7a0 <_strtod_l+0x88>
 801ab1e:	9a06      	ldr	r2, [sp, #24]
 801ab20:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801ab24:	4293      	cmp	r3, r2
 801ab26:	db20      	blt.n	801ab6a <_strtod_l+0x452>
 801ab28:	4c64      	ldr	r4, [pc, #400]	; (801acbc <_strtod_l+0x5a4>)
 801ab2a:	f1c5 050f 	rsb	r5, r5, #15
 801ab2e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801ab32:	4652      	mov	r2, sl
 801ab34:	465b      	mov	r3, fp
 801ab36:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ab3a:	f7e5 fd75 	bl	8000628 <__aeabi_dmul>
 801ab3e:	9b06      	ldr	r3, [sp, #24]
 801ab40:	1b5d      	subs	r5, r3, r5
 801ab42:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801ab46:	e9d4 2300 	ldrd	r2, r3, [r4]
 801ab4a:	e7e3      	b.n	801ab14 <_strtod_l+0x3fc>
 801ab4c:	9b06      	ldr	r3, [sp, #24]
 801ab4e:	3316      	adds	r3, #22
 801ab50:	db0b      	blt.n	801ab6a <_strtod_l+0x452>
 801ab52:	9b05      	ldr	r3, [sp, #20]
 801ab54:	1b9e      	subs	r6, r3, r6
 801ab56:	4b59      	ldr	r3, [pc, #356]	; (801acbc <_strtod_l+0x5a4>)
 801ab58:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801ab5c:	e9d6 2300 	ldrd	r2, r3, [r6]
 801ab60:	4650      	mov	r0, sl
 801ab62:	4659      	mov	r1, fp
 801ab64:	f7e5 fe8a 	bl	800087c <__aeabi_ddiv>
 801ab68:	e7d6      	b.n	801ab18 <_strtod_l+0x400>
 801ab6a:	9b06      	ldr	r3, [sp, #24]
 801ab6c:	eba5 0808 	sub.w	r8, r5, r8
 801ab70:	4498      	add	r8, r3
 801ab72:	f1b8 0f00 	cmp.w	r8, #0
 801ab76:	dd74      	ble.n	801ac62 <_strtod_l+0x54a>
 801ab78:	f018 030f 	ands.w	r3, r8, #15
 801ab7c:	d00a      	beq.n	801ab94 <_strtod_l+0x47c>
 801ab7e:	494f      	ldr	r1, [pc, #316]	; (801acbc <_strtod_l+0x5a4>)
 801ab80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801ab84:	4652      	mov	r2, sl
 801ab86:	465b      	mov	r3, fp
 801ab88:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ab8c:	f7e5 fd4c 	bl	8000628 <__aeabi_dmul>
 801ab90:	4682      	mov	sl, r0
 801ab92:	468b      	mov	fp, r1
 801ab94:	f038 080f 	bics.w	r8, r8, #15
 801ab98:	d04f      	beq.n	801ac3a <_strtod_l+0x522>
 801ab9a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801ab9e:	dd22      	ble.n	801abe6 <_strtod_l+0x4ce>
 801aba0:	2500      	movs	r5, #0
 801aba2:	462e      	mov	r6, r5
 801aba4:	9507      	str	r5, [sp, #28]
 801aba6:	9505      	str	r5, [sp, #20]
 801aba8:	2322      	movs	r3, #34	; 0x22
 801abaa:	f8df b118 	ldr.w	fp, [pc, #280]	; 801acc4 <_strtod_l+0x5ac>
 801abae:	6023      	str	r3, [r4, #0]
 801abb0:	f04f 0a00 	mov.w	sl, #0
 801abb4:	9b07      	ldr	r3, [sp, #28]
 801abb6:	2b00      	cmp	r3, #0
 801abb8:	f43f adf2 	beq.w	801a7a0 <_strtod_l+0x88>
 801abbc:	9918      	ldr	r1, [sp, #96]	; 0x60
 801abbe:	4620      	mov	r0, r4
 801abc0:	f001 fe82 	bl	801c8c8 <_Bfree>
 801abc4:	9905      	ldr	r1, [sp, #20]
 801abc6:	4620      	mov	r0, r4
 801abc8:	f001 fe7e 	bl	801c8c8 <_Bfree>
 801abcc:	4631      	mov	r1, r6
 801abce:	4620      	mov	r0, r4
 801abd0:	f001 fe7a 	bl	801c8c8 <_Bfree>
 801abd4:	9907      	ldr	r1, [sp, #28]
 801abd6:	4620      	mov	r0, r4
 801abd8:	f001 fe76 	bl	801c8c8 <_Bfree>
 801abdc:	4629      	mov	r1, r5
 801abde:	4620      	mov	r0, r4
 801abe0:	f001 fe72 	bl	801c8c8 <_Bfree>
 801abe4:	e5dc      	b.n	801a7a0 <_strtod_l+0x88>
 801abe6:	4b36      	ldr	r3, [pc, #216]	; (801acc0 <_strtod_l+0x5a8>)
 801abe8:	9304      	str	r3, [sp, #16]
 801abea:	2300      	movs	r3, #0
 801abec:	ea4f 1828 	mov.w	r8, r8, asr #4
 801abf0:	4650      	mov	r0, sl
 801abf2:	4659      	mov	r1, fp
 801abf4:	4699      	mov	r9, r3
 801abf6:	f1b8 0f01 	cmp.w	r8, #1
 801abfa:	dc21      	bgt.n	801ac40 <_strtod_l+0x528>
 801abfc:	b10b      	cbz	r3, 801ac02 <_strtod_l+0x4ea>
 801abfe:	4682      	mov	sl, r0
 801ac00:	468b      	mov	fp, r1
 801ac02:	4b2f      	ldr	r3, [pc, #188]	; (801acc0 <_strtod_l+0x5a8>)
 801ac04:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801ac08:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801ac0c:	4652      	mov	r2, sl
 801ac0e:	465b      	mov	r3, fp
 801ac10:	e9d9 0100 	ldrd	r0, r1, [r9]
 801ac14:	f7e5 fd08 	bl	8000628 <__aeabi_dmul>
 801ac18:	4b2a      	ldr	r3, [pc, #168]	; (801acc4 <_strtod_l+0x5ac>)
 801ac1a:	460a      	mov	r2, r1
 801ac1c:	400b      	ands	r3, r1
 801ac1e:	492a      	ldr	r1, [pc, #168]	; (801acc8 <_strtod_l+0x5b0>)
 801ac20:	428b      	cmp	r3, r1
 801ac22:	4682      	mov	sl, r0
 801ac24:	d8bc      	bhi.n	801aba0 <_strtod_l+0x488>
 801ac26:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801ac2a:	428b      	cmp	r3, r1
 801ac2c:	bf86      	itte	hi
 801ac2e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 801accc <_strtod_l+0x5b4>
 801ac32:	f04f 3aff 	movhi.w	sl, #4294967295
 801ac36:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801ac3a:	2300      	movs	r3, #0
 801ac3c:	9304      	str	r3, [sp, #16]
 801ac3e:	e084      	b.n	801ad4a <_strtod_l+0x632>
 801ac40:	f018 0f01 	tst.w	r8, #1
 801ac44:	d005      	beq.n	801ac52 <_strtod_l+0x53a>
 801ac46:	9b04      	ldr	r3, [sp, #16]
 801ac48:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac4c:	f7e5 fcec 	bl	8000628 <__aeabi_dmul>
 801ac50:	2301      	movs	r3, #1
 801ac52:	9a04      	ldr	r2, [sp, #16]
 801ac54:	3208      	adds	r2, #8
 801ac56:	f109 0901 	add.w	r9, r9, #1
 801ac5a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801ac5e:	9204      	str	r2, [sp, #16]
 801ac60:	e7c9      	b.n	801abf6 <_strtod_l+0x4de>
 801ac62:	d0ea      	beq.n	801ac3a <_strtod_l+0x522>
 801ac64:	f1c8 0800 	rsb	r8, r8, #0
 801ac68:	f018 020f 	ands.w	r2, r8, #15
 801ac6c:	d00a      	beq.n	801ac84 <_strtod_l+0x56c>
 801ac6e:	4b13      	ldr	r3, [pc, #76]	; (801acbc <_strtod_l+0x5a4>)
 801ac70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ac74:	4650      	mov	r0, sl
 801ac76:	4659      	mov	r1, fp
 801ac78:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac7c:	f7e5 fdfe 	bl	800087c <__aeabi_ddiv>
 801ac80:	4682      	mov	sl, r0
 801ac82:	468b      	mov	fp, r1
 801ac84:	ea5f 1828 	movs.w	r8, r8, asr #4
 801ac88:	d0d7      	beq.n	801ac3a <_strtod_l+0x522>
 801ac8a:	f1b8 0f1f 	cmp.w	r8, #31
 801ac8e:	dd1f      	ble.n	801acd0 <_strtod_l+0x5b8>
 801ac90:	2500      	movs	r5, #0
 801ac92:	462e      	mov	r6, r5
 801ac94:	9507      	str	r5, [sp, #28]
 801ac96:	9505      	str	r5, [sp, #20]
 801ac98:	2322      	movs	r3, #34	; 0x22
 801ac9a:	f04f 0a00 	mov.w	sl, #0
 801ac9e:	f04f 0b00 	mov.w	fp, #0
 801aca2:	6023      	str	r3, [r4, #0]
 801aca4:	e786      	b.n	801abb4 <_strtod_l+0x49c>
 801aca6:	bf00      	nop
 801aca8:	08025479 	.word	0x08025479
 801acac:	080254bc 	.word	0x080254bc
 801acb0:	08025471 	.word	0x08025471
 801acb4:	080255fc 	.word	0x080255fc
 801acb8:	080258a8 	.word	0x080258a8
 801acbc:	08025788 	.word	0x08025788
 801acc0:	08025760 	.word	0x08025760
 801acc4:	7ff00000 	.word	0x7ff00000
 801acc8:	7ca00000 	.word	0x7ca00000
 801accc:	7fefffff 	.word	0x7fefffff
 801acd0:	f018 0310 	ands.w	r3, r8, #16
 801acd4:	bf18      	it	ne
 801acd6:	236a      	movne	r3, #106	; 0x6a
 801acd8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 801b088 <_strtod_l+0x970>
 801acdc:	9304      	str	r3, [sp, #16]
 801acde:	4650      	mov	r0, sl
 801ace0:	4659      	mov	r1, fp
 801ace2:	2300      	movs	r3, #0
 801ace4:	f018 0f01 	tst.w	r8, #1
 801ace8:	d004      	beq.n	801acf4 <_strtod_l+0x5dc>
 801acea:	e9d9 2300 	ldrd	r2, r3, [r9]
 801acee:	f7e5 fc9b 	bl	8000628 <__aeabi_dmul>
 801acf2:	2301      	movs	r3, #1
 801acf4:	ea5f 0868 	movs.w	r8, r8, asr #1
 801acf8:	f109 0908 	add.w	r9, r9, #8
 801acfc:	d1f2      	bne.n	801ace4 <_strtod_l+0x5cc>
 801acfe:	b10b      	cbz	r3, 801ad04 <_strtod_l+0x5ec>
 801ad00:	4682      	mov	sl, r0
 801ad02:	468b      	mov	fp, r1
 801ad04:	9b04      	ldr	r3, [sp, #16]
 801ad06:	b1c3      	cbz	r3, 801ad3a <_strtod_l+0x622>
 801ad08:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801ad0c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801ad10:	2b00      	cmp	r3, #0
 801ad12:	4659      	mov	r1, fp
 801ad14:	dd11      	ble.n	801ad3a <_strtod_l+0x622>
 801ad16:	2b1f      	cmp	r3, #31
 801ad18:	f340 8124 	ble.w	801af64 <_strtod_l+0x84c>
 801ad1c:	2b34      	cmp	r3, #52	; 0x34
 801ad1e:	bfde      	ittt	le
 801ad20:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801ad24:	f04f 33ff 	movle.w	r3, #4294967295
 801ad28:	fa03 f202 	lslle.w	r2, r3, r2
 801ad2c:	f04f 0a00 	mov.w	sl, #0
 801ad30:	bfcc      	ite	gt
 801ad32:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801ad36:	ea02 0b01 	andle.w	fp, r2, r1
 801ad3a:	2200      	movs	r2, #0
 801ad3c:	2300      	movs	r3, #0
 801ad3e:	4650      	mov	r0, sl
 801ad40:	4659      	mov	r1, fp
 801ad42:	f7e5 fed9 	bl	8000af8 <__aeabi_dcmpeq>
 801ad46:	2800      	cmp	r0, #0
 801ad48:	d1a2      	bne.n	801ac90 <_strtod_l+0x578>
 801ad4a:	9b07      	ldr	r3, [sp, #28]
 801ad4c:	9300      	str	r3, [sp, #0]
 801ad4e:	9908      	ldr	r1, [sp, #32]
 801ad50:	462b      	mov	r3, r5
 801ad52:	463a      	mov	r2, r7
 801ad54:	4620      	mov	r0, r4
 801ad56:	f001 fe1f 	bl	801c998 <__s2b>
 801ad5a:	9007      	str	r0, [sp, #28]
 801ad5c:	2800      	cmp	r0, #0
 801ad5e:	f43f af1f 	beq.w	801aba0 <_strtod_l+0x488>
 801ad62:	9b05      	ldr	r3, [sp, #20]
 801ad64:	1b9e      	subs	r6, r3, r6
 801ad66:	9b06      	ldr	r3, [sp, #24]
 801ad68:	2b00      	cmp	r3, #0
 801ad6a:	bfb4      	ite	lt
 801ad6c:	4633      	movlt	r3, r6
 801ad6e:	2300      	movge	r3, #0
 801ad70:	930c      	str	r3, [sp, #48]	; 0x30
 801ad72:	9b06      	ldr	r3, [sp, #24]
 801ad74:	2500      	movs	r5, #0
 801ad76:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ad7a:	9312      	str	r3, [sp, #72]	; 0x48
 801ad7c:	462e      	mov	r6, r5
 801ad7e:	9b07      	ldr	r3, [sp, #28]
 801ad80:	4620      	mov	r0, r4
 801ad82:	6859      	ldr	r1, [r3, #4]
 801ad84:	f001 fd60 	bl	801c848 <_Balloc>
 801ad88:	9005      	str	r0, [sp, #20]
 801ad8a:	2800      	cmp	r0, #0
 801ad8c:	f43f af0c 	beq.w	801aba8 <_strtod_l+0x490>
 801ad90:	9b07      	ldr	r3, [sp, #28]
 801ad92:	691a      	ldr	r2, [r3, #16]
 801ad94:	3202      	adds	r2, #2
 801ad96:	f103 010c 	add.w	r1, r3, #12
 801ad9a:	0092      	lsls	r2, r2, #2
 801ad9c:	300c      	adds	r0, #12
 801ad9e:	f7fe fde9 	bl	8019974 <memcpy>
 801ada2:	ec4b ab10 	vmov	d0, sl, fp
 801ada6:	aa1a      	add	r2, sp, #104	; 0x68
 801ada8:	a919      	add	r1, sp, #100	; 0x64
 801adaa:	4620      	mov	r0, r4
 801adac:	f002 f93a 	bl	801d024 <__d2b>
 801adb0:	ec4b ab18 	vmov	d8, sl, fp
 801adb4:	9018      	str	r0, [sp, #96]	; 0x60
 801adb6:	2800      	cmp	r0, #0
 801adb8:	f43f aef6 	beq.w	801aba8 <_strtod_l+0x490>
 801adbc:	2101      	movs	r1, #1
 801adbe:	4620      	mov	r0, r4
 801adc0:	f001 fe84 	bl	801cacc <__i2b>
 801adc4:	4606      	mov	r6, r0
 801adc6:	2800      	cmp	r0, #0
 801adc8:	f43f aeee 	beq.w	801aba8 <_strtod_l+0x490>
 801adcc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801adce:	9904      	ldr	r1, [sp, #16]
 801add0:	2b00      	cmp	r3, #0
 801add2:	bfab      	itete	ge
 801add4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801add6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 801add8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801adda:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 801adde:	bfac      	ite	ge
 801ade0:	eb03 0902 	addge.w	r9, r3, r2
 801ade4:	1ad7      	sublt	r7, r2, r3
 801ade6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801ade8:	eba3 0801 	sub.w	r8, r3, r1
 801adec:	4490      	add	r8, r2
 801adee:	4ba1      	ldr	r3, [pc, #644]	; (801b074 <_strtod_l+0x95c>)
 801adf0:	f108 38ff 	add.w	r8, r8, #4294967295
 801adf4:	4598      	cmp	r8, r3
 801adf6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801adfa:	f280 80c7 	bge.w	801af8c <_strtod_l+0x874>
 801adfe:	eba3 0308 	sub.w	r3, r3, r8
 801ae02:	2b1f      	cmp	r3, #31
 801ae04:	eba2 0203 	sub.w	r2, r2, r3
 801ae08:	f04f 0101 	mov.w	r1, #1
 801ae0c:	f300 80b1 	bgt.w	801af72 <_strtod_l+0x85a>
 801ae10:	fa01 f303 	lsl.w	r3, r1, r3
 801ae14:	930d      	str	r3, [sp, #52]	; 0x34
 801ae16:	2300      	movs	r3, #0
 801ae18:	9308      	str	r3, [sp, #32]
 801ae1a:	eb09 0802 	add.w	r8, r9, r2
 801ae1e:	9b04      	ldr	r3, [sp, #16]
 801ae20:	45c1      	cmp	r9, r8
 801ae22:	4417      	add	r7, r2
 801ae24:	441f      	add	r7, r3
 801ae26:	464b      	mov	r3, r9
 801ae28:	bfa8      	it	ge
 801ae2a:	4643      	movge	r3, r8
 801ae2c:	42bb      	cmp	r3, r7
 801ae2e:	bfa8      	it	ge
 801ae30:	463b      	movge	r3, r7
 801ae32:	2b00      	cmp	r3, #0
 801ae34:	bfc2      	ittt	gt
 801ae36:	eba8 0803 	subgt.w	r8, r8, r3
 801ae3a:	1aff      	subgt	r7, r7, r3
 801ae3c:	eba9 0903 	subgt.w	r9, r9, r3
 801ae40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ae42:	2b00      	cmp	r3, #0
 801ae44:	dd17      	ble.n	801ae76 <_strtod_l+0x75e>
 801ae46:	4631      	mov	r1, r6
 801ae48:	461a      	mov	r2, r3
 801ae4a:	4620      	mov	r0, r4
 801ae4c:	f001 fefe 	bl	801cc4c <__pow5mult>
 801ae50:	4606      	mov	r6, r0
 801ae52:	2800      	cmp	r0, #0
 801ae54:	f43f aea8 	beq.w	801aba8 <_strtod_l+0x490>
 801ae58:	4601      	mov	r1, r0
 801ae5a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801ae5c:	4620      	mov	r0, r4
 801ae5e:	f001 fe4b 	bl	801caf8 <__multiply>
 801ae62:	900b      	str	r0, [sp, #44]	; 0x2c
 801ae64:	2800      	cmp	r0, #0
 801ae66:	f43f ae9f 	beq.w	801aba8 <_strtod_l+0x490>
 801ae6a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801ae6c:	4620      	mov	r0, r4
 801ae6e:	f001 fd2b 	bl	801c8c8 <_Bfree>
 801ae72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ae74:	9318      	str	r3, [sp, #96]	; 0x60
 801ae76:	f1b8 0f00 	cmp.w	r8, #0
 801ae7a:	f300 808c 	bgt.w	801af96 <_strtod_l+0x87e>
 801ae7e:	9b06      	ldr	r3, [sp, #24]
 801ae80:	2b00      	cmp	r3, #0
 801ae82:	dd08      	ble.n	801ae96 <_strtod_l+0x77e>
 801ae84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ae86:	9905      	ldr	r1, [sp, #20]
 801ae88:	4620      	mov	r0, r4
 801ae8a:	f001 fedf 	bl	801cc4c <__pow5mult>
 801ae8e:	9005      	str	r0, [sp, #20]
 801ae90:	2800      	cmp	r0, #0
 801ae92:	f43f ae89 	beq.w	801aba8 <_strtod_l+0x490>
 801ae96:	2f00      	cmp	r7, #0
 801ae98:	dd08      	ble.n	801aeac <_strtod_l+0x794>
 801ae9a:	9905      	ldr	r1, [sp, #20]
 801ae9c:	463a      	mov	r2, r7
 801ae9e:	4620      	mov	r0, r4
 801aea0:	f001 ff2e 	bl	801cd00 <__lshift>
 801aea4:	9005      	str	r0, [sp, #20]
 801aea6:	2800      	cmp	r0, #0
 801aea8:	f43f ae7e 	beq.w	801aba8 <_strtod_l+0x490>
 801aeac:	f1b9 0f00 	cmp.w	r9, #0
 801aeb0:	dd08      	ble.n	801aec4 <_strtod_l+0x7ac>
 801aeb2:	4631      	mov	r1, r6
 801aeb4:	464a      	mov	r2, r9
 801aeb6:	4620      	mov	r0, r4
 801aeb8:	f001 ff22 	bl	801cd00 <__lshift>
 801aebc:	4606      	mov	r6, r0
 801aebe:	2800      	cmp	r0, #0
 801aec0:	f43f ae72 	beq.w	801aba8 <_strtod_l+0x490>
 801aec4:	9a05      	ldr	r2, [sp, #20]
 801aec6:	9918      	ldr	r1, [sp, #96]	; 0x60
 801aec8:	4620      	mov	r0, r4
 801aeca:	f001 ffa5 	bl	801ce18 <__mdiff>
 801aece:	4605      	mov	r5, r0
 801aed0:	2800      	cmp	r0, #0
 801aed2:	f43f ae69 	beq.w	801aba8 <_strtod_l+0x490>
 801aed6:	68c3      	ldr	r3, [r0, #12]
 801aed8:	930b      	str	r3, [sp, #44]	; 0x2c
 801aeda:	2300      	movs	r3, #0
 801aedc:	60c3      	str	r3, [r0, #12]
 801aede:	4631      	mov	r1, r6
 801aee0:	f001 ff7e 	bl	801cde0 <__mcmp>
 801aee4:	2800      	cmp	r0, #0
 801aee6:	da60      	bge.n	801afaa <_strtod_l+0x892>
 801aee8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801aeea:	ea53 030a 	orrs.w	r3, r3, sl
 801aeee:	f040 8082 	bne.w	801aff6 <_strtod_l+0x8de>
 801aef2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801aef6:	2b00      	cmp	r3, #0
 801aef8:	d17d      	bne.n	801aff6 <_strtod_l+0x8de>
 801aefa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801aefe:	0d1b      	lsrs	r3, r3, #20
 801af00:	051b      	lsls	r3, r3, #20
 801af02:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801af06:	d976      	bls.n	801aff6 <_strtod_l+0x8de>
 801af08:	696b      	ldr	r3, [r5, #20]
 801af0a:	b913      	cbnz	r3, 801af12 <_strtod_l+0x7fa>
 801af0c:	692b      	ldr	r3, [r5, #16]
 801af0e:	2b01      	cmp	r3, #1
 801af10:	dd71      	ble.n	801aff6 <_strtod_l+0x8de>
 801af12:	4629      	mov	r1, r5
 801af14:	2201      	movs	r2, #1
 801af16:	4620      	mov	r0, r4
 801af18:	f001 fef2 	bl	801cd00 <__lshift>
 801af1c:	4631      	mov	r1, r6
 801af1e:	4605      	mov	r5, r0
 801af20:	f001 ff5e 	bl	801cde0 <__mcmp>
 801af24:	2800      	cmp	r0, #0
 801af26:	dd66      	ble.n	801aff6 <_strtod_l+0x8de>
 801af28:	9904      	ldr	r1, [sp, #16]
 801af2a:	4a53      	ldr	r2, [pc, #332]	; (801b078 <_strtod_l+0x960>)
 801af2c:	465b      	mov	r3, fp
 801af2e:	2900      	cmp	r1, #0
 801af30:	f000 8081 	beq.w	801b036 <_strtod_l+0x91e>
 801af34:	ea02 010b 	and.w	r1, r2, fp
 801af38:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801af3c:	dc7b      	bgt.n	801b036 <_strtod_l+0x91e>
 801af3e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801af42:	f77f aea9 	ble.w	801ac98 <_strtod_l+0x580>
 801af46:	4b4d      	ldr	r3, [pc, #308]	; (801b07c <_strtod_l+0x964>)
 801af48:	4650      	mov	r0, sl
 801af4a:	4659      	mov	r1, fp
 801af4c:	2200      	movs	r2, #0
 801af4e:	f7e5 fb6b 	bl	8000628 <__aeabi_dmul>
 801af52:	460b      	mov	r3, r1
 801af54:	4303      	orrs	r3, r0
 801af56:	bf08      	it	eq
 801af58:	2322      	moveq	r3, #34	; 0x22
 801af5a:	4682      	mov	sl, r0
 801af5c:	468b      	mov	fp, r1
 801af5e:	bf08      	it	eq
 801af60:	6023      	streq	r3, [r4, #0]
 801af62:	e62b      	b.n	801abbc <_strtod_l+0x4a4>
 801af64:	f04f 32ff 	mov.w	r2, #4294967295
 801af68:	fa02 f303 	lsl.w	r3, r2, r3
 801af6c:	ea03 0a0a 	and.w	sl, r3, sl
 801af70:	e6e3      	b.n	801ad3a <_strtod_l+0x622>
 801af72:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801af76:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801af7a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801af7e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801af82:	fa01 f308 	lsl.w	r3, r1, r8
 801af86:	9308      	str	r3, [sp, #32]
 801af88:	910d      	str	r1, [sp, #52]	; 0x34
 801af8a:	e746      	b.n	801ae1a <_strtod_l+0x702>
 801af8c:	2300      	movs	r3, #0
 801af8e:	9308      	str	r3, [sp, #32]
 801af90:	2301      	movs	r3, #1
 801af92:	930d      	str	r3, [sp, #52]	; 0x34
 801af94:	e741      	b.n	801ae1a <_strtod_l+0x702>
 801af96:	9918      	ldr	r1, [sp, #96]	; 0x60
 801af98:	4642      	mov	r2, r8
 801af9a:	4620      	mov	r0, r4
 801af9c:	f001 feb0 	bl	801cd00 <__lshift>
 801afa0:	9018      	str	r0, [sp, #96]	; 0x60
 801afa2:	2800      	cmp	r0, #0
 801afa4:	f47f af6b 	bne.w	801ae7e <_strtod_l+0x766>
 801afa8:	e5fe      	b.n	801aba8 <_strtod_l+0x490>
 801afaa:	465f      	mov	r7, fp
 801afac:	d16e      	bne.n	801b08c <_strtod_l+0x974>
 801afae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801afb0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801afb4:	b342      	cbz	r2, 801b008 <_strtod_l+0x8f0>
 801afb6:	4a32      	ldr	r2, [pc, #200]	; (801b080 <_strtod_l+0x968>)
 801afb8:	4293      	cmp	r3, r2
 801afba:	d128      	bne.n	801b00e <_strtod_l+0x8f6>
 801afbc:	9b04      	ldr	r3, [sp, #16]
 801afbe:	4651      	mov	r1, sl
 801afc0:	b1eb      	cbz	r3, 801affe <_strtod_l+0x8e6>
 801afc2:	4b2d      	ldr	r3, [pc, #180]	; (801b078 <_strtod_l+0x960>)
 801afc4:	403b      	ands	r3, r7
 801afc6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801afca:	f04f 32ff 	mov.w	r2, #4294967295
 801afce:	d819      	bhi.n	801b004 <_strtod_l+0x8ec>
 801afd0:	0d1b      	lsrs	r3, r3, #20
 801afd2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801afd6:	fa02 f303 	lsl.w	r3, r2, r3
 801afda:	4299      	cmp	r1, r3
 801afdc:	d117      	bne.n	801b00e <_strtod_l+0x8f6>
 801afde:	4b29      	ldr	r3, [pc, #164]	; (801b084 <_strtod_l+0x96c>)
 801afe0:	429f      	cmp	r7, r3
 801afe2:	d102      	bne.n	801afea <_strtod_l+0x8d2>
 801afe4:	3101      	adds	r1, #1
 801afe6:	f43f addf 	beq.w	801aba8 <_strtod_l+0x490>
 801afea:	4b23      	ldr	r3, [pc, #140]	; (801b078 <_strtod_l+0x960>)
 801afec:	403b      	ands	r3, r7
 801afee:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801aff2:	f04f 0a00 	mov.w	sl, #0
 801aff6:	9b04      	ldr	r3, [sp, #16]
 801aff8:	2b00      	cmp	r3, #0
 801affa:	d1a4      	bne.n	801af46 <_strtod_l+0x82e>
 801affc:	e5de      	b.n	801abbc <_strtod_l+0x4a4>
 801affe:	f04f 33ff 	mov.w	r3, #4294967295
 801b002:	e7ea      	b.n	801afda <_strtod_l+0x8c2>
 801b004:	4613      	mov	r3, r2
 801b006:	e7e8      	b.n	801afda <_strtod_l+0x8c2>
 801b008:	ea53 030a 	orrs.w	r3, r3, sl
 801b00c:	d08c      	beq.n	801af28 <_strtod_l+0x810>
 801b00e:	9b08      	ldr	r3, [sp, #32]
 801b010:	b1db      	cbz	r3, 801b04a <_strtod_l+0x932>
 801b012:	423b      	tst	r3, r7
 801b014:	d0ef      	beq.n	801aff6 <_strtod_l+0x8de>
 801b016:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b018:	9a04      	ldr	r2, [sp, #16]
 801b01a:	4650      	mov	r0, sl
 801b01c:	4659      	mov	r1, fp
 801b01e:	b1c3      	cbz	r3, 801b052 <_strtod_l+0x93a>
 801b020:	f7ff fb5e 	bl	801a6e0 <sulp>
 801b024:	4602      	mov	r2, r0
 801b026:	460b      	mov	r3, r1
 801b028:	ec51 0b18 	vmov	r0, r1, d8
 801b02c:	f7e5 f946 	bl	80002bc <__adddf3>
 801b030:	4682      	mov	sl, r0
 801b032:	468b      	mov	fp, r1
 801b034:	e7df      	b.n	801aff6 <_strtod_l+0x8de>
 801b036:	4013      	ands	r3, r2
 801b038:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801b03c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801b040:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801b044:	f04f 3aff 	mov.w	sl, #4294967295
 801b048:	e7d5      	b.n	801aff6 <_strtod_l+0x8de>
 801b04a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b04c:	ea13 0f0a 	tst.w	r3, sl
 801b050:	e7e0      	b.n	801b014 <_strtod_l+0x8fc>
 801b052:	f7ff fb45 	bl	801a6e0 <sulp>
 801b056:	4602      	mov	r2, r0
 801b058:	460b      	mov	r3, r1
 801b05a:	ec51 0b18 	vmov	r0, r1, d8
 801b05e:	f7e5 f92b 	bl	80002b8 <__aeabi_dsub>
 801b062:	2200      	movs	r2, #0
 801b064:	2300      	movs	r3, #0
 801b066:	4682      	mov	sl, r0
 801b068:	468b      	mov	fp, r1
 801b06a:	f7e5 fd45 	bl	8000af8 <__aeabi_dcmpeq>
 801b06e:	2800      	cmp	r0, #0
 801b070:	d0c1      	beq.n	801aff6 <_strtod_l+0x8de>
 801b072:	e611      	b.n	801ac98 <_strtod_l+0x580>
 801b074:	fffffc02 	.word	0xfffffc02
 801b078:	7ff00000 	.word	0x7ff00000
 801b07c:	39500000 	.word	0x39500000
 801b080:	000fffff 	.word	0x000fffff
 801b084:	7fefffff 	.word	0x7fefffff
 801b088:	080254d0 	.word	0x080254d0
 801b08c:	4631      	mov	r1, r6
 801b08e:	4628      	mov	r0, r5
 801b090:	f002 f824 	bl	801d0dc <__ratio>
 801b094:	ec59 8b10 	vmov	r8, r9, d0
 801b098:	ee10 0a10 	vmov	r0, s0
 801b09c:	2200      	movs	r2, #0
 801b09e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801b0a2:	4649      	mov	r1, r9
 801b0a4:	f7e5 fd3c 	bl	8000b20 <__aeabi_dcmple>
 801b0a8:	2800      	cmp	r0, #0
 801b0aa:	d07a      	beq.n	801b1a2 <_strtod_l+0xa8a>
 801b0ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b0ae:	2b00      	cmp	r3, #0
 801b0b0:	d04a      	beq.n	801b148 <_strtod_l+0xa30>
 801b0b2:	4b95      	ldr	r3, [pc, #596]	; (801b308 <_strtod_l+0xbf0>)
 801b0b4:	2200      	movs	r2, #0
 801b0b6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b0ba:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801b308 <_strtod_l+0xbf0>
 801b0be:	f04f 0800 	mov.w	r8, #0
 801b0c2:	4b92      	ldr	r3, [pc, #584]	; (801b30c <_strtod_l+0xbf4>)
 801b0c4:	403b      	ands	r3, r7
 801b0c6:	930d      	str	r3, [sp, #52]	; 0x34
 801b0c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b0ca:	4b91      	ldr	r3, [pc, #580]	; (801b310 <_strtod_l+0xbf8>)
 801b0cc:	429a      	cmp	r2, r3
 801b0ce:	f040 80b0 	bne.w	801b232 <_strtod_l+0xb1a>
 801b0d2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801b0d6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801b0da:	ec4b ab10 	vmov	d0, sl, fp
 801b0de:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801b0e2:	f001 ff23 	bl	801cf2c <__ulp>
 801b0e6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801b0ea:	ec53 2b10 	vmov	r2, r3, d0
 801b0ee:	f7e5 fa9b 	bl	8000628 <__aeabi_dmul>
 801b0f2:	4652      	mov	r2, sl
 801b0f4:	465b      	mov	r3, fp
 801b0f6:	f7e5 f8e1 	bl	80002bc <__adddf3>
 801b0fa:	460b      	mov	r3, r1
 801b0fc:	4983      	ldr	r1, [pc, #524]	; (801b30c <_strtod_l+0xbf4>)
 801b0fe:	4a85      	ldr	r2, [pc, #532]	; (801b314 <_strtod_l+0xbfc>)
 801b100:	4019      	ands	r1, r3
 801b102:	4291      	cmp	r1, r2
 801b104:	4682      	mov	sl, r0
 801b106:	d960      	bls.n	801b1ca <_strtod_l+0xab2>
 801b108:	ee18 3a90 	vmov	r3, s17
 801b10c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801b110:	4293      	cmp	r3, r2
 801b112:	d104      	bne.n	801b11e <_strtod_l+0xa06>
 801b114:	ee18 3a10 	vmov	r3, s16
 801b118:	3301      	adds	r3, #1
 801b11a:	f43f ad45 	beq.w	801aba8 <_strtod_l+0x490>
 801b11e:	f8df b200 	ldr.w	fp, [pc, #512]	; 801b320 <_strtod_l+0xc08>
 801b122:	f04f 3aff 	mov.w	sl, #4294967295
 801b126:	9918      	ldr	r1, [sp, #96]	; 0x60
 801b128:	4620      	mov	r0, r4
 801b12a:	f001 fbcd 	bl	801c8c8 <_Bfree>
 801b12e:	9905      	ldr	r1, [sp, #20]
 801b130:	4620      	mov	r0, r4
 801b132:	f001 fbc9 	bl	801c8c8 <_Bfree>
 801b136:	4631      	mov	r1, r6
 801b138:	4620      	mov	r0, r4
 801b13a:	f001 fbc5 	bl	801c8c8 <_Bfree>
 801b13e:	4629      	mov	r1, r5
 801b140:	4620      	mov	r0, r4
 801b142:	f001 fbc1 	bl	801c8c8 <_Bfree>
 801b146:	e61a      	b.n	801ad7e <_strtod_l+0x666>
 801b148:	f1ba 0f00 	cmp.w	sl, #0
 801b14c:	d11b      	bne.n	801b186 <_strtod_l+0xa6e>
 801b14e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b152:	b9f3      	cbnz	r3, 801b192 <_strtod_l+0xa7a>
 801b154:	4b6c      	ldr	r3, [pc, #432]	; (801b308 <_strtod_l+0xbf0>)
 801b156:	2200      	movs	r2, #0
 801b158:	4640      	mov	r0, r8
 801b15a:	4649      	mov	r1, r9
 801b15c:	f7e5 fcd6 	bl	8000b0c <__aeabi_dcmplt>
 801b160:	b9d0      	cbnz	r0, 801b198 <_strtod_l+0xa80>
 801b162:	4640      	mov	r0, r8
 801b164:	4649      	mov	r1, r9
 801b166:	4b6c      	ldr	r3, [pc, #432]	; (801b318 <_strtod_l+0xc00>)
 801b168:	2200      	movs	r2, #0
 801b16a:	f7e5 fa5d 	bl	8000628 <__aeabi_dmul>
 801b16e:	4680      	mov	r8, r0
 801b170:	4689      	mov	r9, r1
 801b172:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801b176:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 801b17a:	9315      	str	r3, [sp, #84]	; 0x54
 801b17c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801b180:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b184:	e79d      	b.n	801b0c2 <_strtod_l+0x9aa>
 801b186:	f1ba 0f01 	cmp.w	sl, #1
 801b18a:	d102      	bne.n	801b192 <_strtod_l+0xa7a>
 801b18c:	2f00      	cmp	r7, #0
 801b18e:	f43f ad83 	beq.w	801ac98 <_strtod_l+0x580>
 801b192:	4b62      	ldr	r3, [pc, #392]	; (801b31c <_strtod_l+0xc04>)
 801b194:	2200      	movs	r2, #0
 801b196:	e78e      	b.n	801b0b6 <_strtod_l+0x99e>
 801b198:	f8df 917c 	ldr.w	r9, [pc, #380]	; 801b318 <_strtod_l+0xc00>
 801b19c:	f04f 0800 	mov.w	r8, #0
 801b1a0:	e7e7      	b.n	801b172 <_strtod_l+0xa5a>
 801b1a2:	4b5d      	ldr	r3, [pc, #372]	; (801b318 <_strtod_l+0xc00>)
 801b1a4:	4640      	mov	r0, r8
 801b1a6:	4649      	mov	r1, r9
 801b1a8:	2200      	movs	r2, #0
 801b1aa:	f7e5 fa3d 	bl	8000628 <__aeabi_dmul>
 801b1ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b1b0:	4680      	mov	r8, r0
 801b1b2:	4689      	mov	r9, r1
 801b1b4:	b933      	cbnz	r3, 801b1c4 <_strtod_l+0xaac>
 801b1b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b1ba:	900e      	str	r0, [sp, #56]	; 0x38
 801b1bc:	930f      	str	r3, [sp, #60]	; 0x3c
 801b1be:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801b1c2:	e7dd      	b.n	801b180 <_strtod_l+0xa68>
 801b1c4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 801b1c8:	e7f9      	b.n	801b1be <_strtod_l+0xaa6>
 801b1ca:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801b1ce:	9b04      	ldr	r3, [sp, #16]
 801b1d0:	2b00      	cmp	r3, #0
 801b1d2:	d1a8      	bne.n	801b126 <_strtod_l+0xa0e>
 801b1d4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801b1d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b1da:	0d1b      	lsrs	r3, r3, #20
 801b1dc:	051b      	lsls	r3, r3, #20
 801b1de:	429a      	cmp	r2, r3
 801b1e0:	d1a1      	bne.n	801b126 <_strtod_l+0xa0e>
 801b1e2:	4640      	mov	r0, r8
 801b1e4:	4649      	mov	r1, r9
 801b1e6:	f7e5 fdcf 	bl	8000d88 <__aeabi_d2lz>
 801b1ea:	f7e5 f9ef 	bl	80005cc <__aeabi_l2d>
 801b1ee:	4602      	mov	r2, r0
 801b1f0:	460b      	mov	r3, r1
 801b1f2:	4640      	mov	r0, r8
 801b1f4:	4649      	mov	r1, r9
 801b1f6:	f7e5 f85f 	bl	80002b8 <__aeabi_dsub>
 801b1fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b1fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b200:	ea43 030a 	orr.w	r3, r3, sl
 801b204:	4313      	orrs	r3, r2
 801b206:	4680      	mov	r8, r0
 801b208:	4689      	mov	r9, r1
 801b20a:	d055      	beq.n	801b2b8 <_strtod_l+0xba0>
 801b20c:	a336      	add	r3, pc, #216	; (adr r3, 801b2e8 <_strtod_l+0xbd0>)
 801b20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b212:	f7e5 fc7b 	bl	8000b0c <__aeabi_dcmplt>
 801b216:	2800      	cmp	r0, #0
 801b218:	f47f acd0 	bne.w	801abbc <_strtod_l+0x4a4>
 801b21c:	a334      	add	r3, pc, #208	; (adr r3, 801b2f0 <_strtod_l+0xbd8>)
 801b21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b222:	4640      	mov	r0, r8
 801b224:	4649      	mov	r1, r9
 801b226:	f7e5 fc8f 	bl	8000b48 <__aeabi_dcmpgt>
 801b22a:	2800      	cmp	r0, #0
 801b22c:	f43f af7b 	beq.w	801b126 <_strtod_l+0xa0e>
 801b230:	e4c4      	b.n	801abbc <_strtod_l+0x4a4>
 801b232:	9b04      	ldr	r3, [sp, #16]
 801b234:	b333      	cbz	r3, 801b284 <_strtod_l+0xb6c>
 801b236:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b238:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801b23c:	d822      	bhi.n	801b284 <_strtod_l+0xb6c>
 801b23e:	a32e      	add	r3, pc, #184	; (adr r3, 801b2f8 <_strtod_l+0xbe0>)
 801b240:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b244:	4640      	mov	r0, r8
 801b246:	4649      	mov	r1, r9
 801b248:	f7e5 fc6a 	bl	8000b20 <__aeabi_dcmple>
 801b24c:	b1a0      	cbz	r0, 801b278 <_strtod_l+0xb60>
 801b24e:	4649      	mov	r1, r9
 801b250:	4640      	mov	r0, r8
 801b252:	f7e5 fcc1 	bl	8000bd8 <__aeabi_d2uiz>
 801b256:	2801      	cmp	r0, #1
 801b258:	bf38      	it	cc
 801b25a:	2001      	movcc	r0, #1
 801b25c:	f7e5 f96a 	bl	8000534 <__aeabi_ui2d>
 801b260:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b262:	4680      	mov	r8, r0
 801b264:	4689      	mov	r9, r1
 801b266:	bb23      	cbnz	r3, 801b2b2 <_strtod_l+0xb9a>
 801b268:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b26c:	9010      	str	r0, [sp, #64]	; 0x40
 801b26e:	9311      	str	r3, [sp, #68]	; 0x44
 801b270:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801b274:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b27a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b27c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801b280:	1a9b      	subs	r3, r3, r2
 801b282:	9309      	str	r3, [sp, #36]	; 0x24
 801b284:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801b288:	eeb0 0a48 	vmov.f32	s0, s16
 801b28c:	eef0 0a68 	vmov.f32	s1, s17
 801b290:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801b294:	f001 fe4a 	bl	801cf2c <__ulp>
 801b298:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801b29c:	ec53 2b10 	vmov	r2, r3, d0
 801b2a0:	f7e5 f9c2 	bl	8000628 <__aeabi_dmul>
 801b2a4:	ec53 2b18 	vmov	r2, r3, d8
 801b2a8:	f7e5 f808 	bl	80002bc <__adddf3>
 801b2ac:	4682      	mov	sl, r0
 801b2ae:	468b      	mov	fp, r1
 801b2b0:	e78d      	b.n	801b1ce <_strtod_l+0xab6>
 801b2b2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 801b2b6:	e7db      	b.n	801b270 <_strtod_l+0xb58>
 801b2b8:	a311      	add	r3, pc, #68	; (adr r3, 801b300 <_strtod_l+0xbe8>)
 801b2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2be:	f7e5 fc25 	bl	8000b0c <__aeabi_dcmplt>
 801b2c2:	e7b2      	b.n	801b22a <_strtod_l+0xb12>
 801b2c4:	2300      	movs	r3, #0
 801b2c6:	930a      	str	r3, [sp, #40]	; 0x28
 801b2c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b2ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b2cc:	6013      	str	r3, [r2, #0]
 801b2ce:	f7ff ba6b 	b.w	801a7a8 <_strtod_l+0x90>
 801b2d2:	2a65      	cmp	r2, #101	; 0x65
 801b2d4:	f43f ab5f 	beq.w	801a996 <_strtod_l+0x27e>
 801b2d8:	2a45      	cmp	r2, #69	; 0x45
 801b2da:	f43f ab5c 	beq.w	801a996 <_strtod_l+0x27e>
 801b2de:	2301      	movs	r3, #1
 801b2e0:	f7ff bb94 	b.w	801aa0c <_strtod_l+0x2f4>
 801b2e4:	f3af 8000 	nop.w
 801b2e8:	94a03595 	.word	0x94a03595
 801b2ec:	3fdfffff 	.word	0x3fdfffff
 801b2f0:	35afe535 	.word	0x35afe535
 801b2f4:	3fe00000 	.word	0x3fe00000
 801b2f8:	ffc00000 	.word	0xffc00000
 801b2fc:	41dfffff 	.word	0x41dfffff
 801b300:	94a03595 	.word	0x94a03595
 801b304:	3fcfffff 	.word	0x3fcfffff
 801b308:	3ff00000 	.word	0x3ff00000
 801b30c:	7ff00000 	.word	0x7ff00000
 801b310:	7fe00000 	.word	0x7fe00000
 801b314:	7c9fffff 	.word	0x7c9fffff
 801b318:	3fe00000 	.word	0x3fe00000
 801b31c:	bff00000 	.word	0xbff00000
 801b320:	7fefffff 	.word	0x7fefffff

0801b324 <_strtod_r>:
 801b324:	4b01      	ldr	r3, [pc, #4]	; (801b32c <_strtod_r+0x8>)
 801b326:	f7ff b9f7 	b.w	801a718 <_strtod_l>
 801b32a:	bf00      	nop
 801b32c:	2000010c 	.word	0x2000010c

0801b330 <_strtol_l.constprop.0>:
 801b330:	2b01      	cmp	r3, #1
 801b332:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b336:	d001      	beq.n	801b33c <_strtol_l.constprop.0+0xc>
 801b338:	2b24      	cmp	r3, #36	; 0x24
 801b33a:	d906      	bls.n	801b34a <_strtol_l.constprop.0+0x1a>
 801b33c:	f7fe faf0 	bl	8019920 <__errno>
 801b340:	2316      	movs	r3, #22
 801b342:	6003      	str	r3, [r0, #0]
 801b344:	2000      	movs	r0, #0
 801b346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b34a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801b430 <_strtol_l.constprop.0+0x100>
 801b34e:	460d      	mov	r5, r1
 801b350:	462e      	mov	r6, r5
 801b352:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b356:	f814 700c 	ldrb.w	r7, [r4, ip]
 801b35a:	f017 0708 	ands.w	r7, r7, #8
 801b35e:	d1f7      	bne.n	801b350 <_strtol_l.constprop.0+0x20>
 801b360:	2c2d      	cmp	r4, #45	; 0x2d
 801b362:	d132      	bne.n	801b3ca <_strtol_l.constprop.0+0x9a>
 801b364:	782c      	ldrb	r4, [r5, #0]
 801b366:	2701      	movs	r7, #1
 801b368:	1cb5      	adds	r5, r6, #2
 801b36a:	2b00      	cmp	r3, #0
 801b36c:	d05b      	beq.n	801b426 <_strtol_l.constprop.0+0xf6>
 801b36e:	2b10      	cmp	r3, #16
 801b370:	d109      	bne.n	801b386 <_strtol_l.constprop.0+0x56>
 801b372:	2c30      	cmp	r4, #48	; 0x30
 801b374:	d107      	bne.n	801b386 <_strtol_l.constprop.0+0x56>
 801b376:	782c      	ldrb	r4, [r5, #0]
 801b378:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801b37c:	2c58      	cmp	r4, #88	; 0x58
 801b37e:	d14d      	bne.n	801b41c <_strtol_l.constprop.0+0xec>
 801b380:	786c      	ldrb	r4, [r5, #1]
 801b382:	2310      	movs	r3, #16
 801b384:	3502      	adds	r5, #2
 801b386:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801b38a:	f108 38ff 	add.w	r8, r8, #4294967295
 801b38e:	f04f 0c00 	mov.w	ip, #0
 801b392:	fbb8 f9f3 	udiv	r9, r8, r3
 801b396:	4666      	mov	r6, ip
 801b398:	fb03 8a19 	mls	sl, r3, r9, r8
 801b39c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 801b3a0:	f1be 0f09 	cmp.w	lr, #9
 801b3a4:	d816      	bhi.n	801b3d4 <_strtol_l.constprop.0+0xa4>
 801b3a6:	4674      	mov	r4, lr
 801b3a8:	42a3      	cmp	r3, r4
 801b3aa:	dd24      	ble.n	801b3f6 <_strtol_l.constprop.0+0xc6>
 801b3ac:	f1bc 0f00 	cmp.w	ip, #0
 801b3b0:	db1e      	blt.n	801b3f0 <_strtol_l.constprop.0+0xc0>
 801b3b2:	45b1      	cmp	r9, r6
 801b3b4:	d31c      	bcc.n	801b3f0 <_strtol_l.constprop.0+0xc0>
 801b3b6:	d101      	bne.n	801b3bc <_strtol_l.constprop.0+0x8c>
 801b3b8:	45a2      	cmp	sl, r4
 801b3ba:	db19      	blt.n	801b3f0 <_strtol_l.constprop.0+0xc0>
 801b3bc:	fb06 4603 	mla	r6, r6, r3, r4
 801b3c0:	f04f 0c01 	mov.w	ip, #1
 801b3c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b3c8:	e7e8      	b.n	801b39c <_strtol_l.constprop.0+0x6c>
 801b3ca:	2c2b      	cmp	r4, #43	; 0x2b
 801b3cc:	bf04      	itt	eq
 801b3ce:	782c      	ldrbeq	r4, [r5, #0]
 801b3d0:	1cb5      	addeq	r5, r6, #2
 801b3d2:	e7ca      	b.n	801b36a <_strtol_l.constprop.0+0x3a>
 801b3d4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801b3d8:	f1be 0f19 	cmp.w	lr, #25
 801b3dc:	d801      	bhi.n	801b3e2 <_strtol_l.constprop.0+0xb2>
 801b3de:	3c37      	subs	r4, #55	; 0x37
 801b3e0:	e7e2      	b.n	801b3a8 <_strtol_l.constprop.0+0x78>
 801b3e2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801b3e6:	f1be 0f19 	cmp.w	lr, #25
 801b3ea:	d804      	bhi.n	801b3f6 <_strtol_l.constprop.0+0xc6>
 801b3ec:	3c57      	subs	r4, #87	; 0x57
 801b3ee:	e7db      	b.n	801b3a8 <_strtol_l.constprop.0+0x78>
 801b3f0:	f04f 3cff 	mov.w	ip, #4294967295
 801b3f4:	e7e6      	b.n	801b3c4 <_strtol_l.constprop.0+0x94>
 801b3f6:	f1bc 0f00 	cmp.w	ip, #0
 801b3fa:	da05      	bge.n	801b408 <_strtol_l.constprop.0+0xd8>
 801b3fc:	2322      	movs	r3, #34	; 0x22
 801b3fe:	6003      	str	r3, [r0, #0]
 801b400:	4646      	mov	r6, r8
 801b402:	b942      	cbnz	r2, 801b416 <_strtol_l.constprop.0+0xe6>
 801b404:	4630      	mov	r0, r6
 801b406:	e79e      	b.n	801b346 <_strtol_l.constprop.0+0x16>
 801b408:	b107      	cbz	r7, 801b40c <_strtol_l.constprop.0+0xdc>
 801b40a:	4276      	negs	r6, r6
 801b40c:	2a00      	cmp	r2, #0
 801b40e:	d0f9      	beq.n	801b404 <_strtol_l.constprop.0+0xd4>
 801b410:	f1bc 0f00 	cmp.w	ip, #0
 801b414:	d000      	beq.n	801b418 <_strtol_l.constprop.0+0xe8>
 801b416:	1e69      	subs	r1, r5, #1
 801b418:	6011      	str	r1, [r2, #0]
 801b41a:	e7f3      	b.n	801b404 <_strtol_l.constprop.0+0xd4>
 801b41c:	2430      	movs	r4, #48	; 0x30
 801b41e:	2b00      	cmp	r3, #0
 801b420:	d1b1      	bne.n	801b386 <_strtol_l.constprop.0+0x56>
 801b422:	2308      	movs	r3, #8
 801b424:	e7af      	b.n	801b386 <_strtol_l.constprop.0+0x56>
 801b426:	2c30      	cmp	r4, #48	; 0x30
 801b428:	d0a5      	beq.n	801b376 <_strtol_l.constprop.0+0x46>
 801b42a:	230a      	movs	r3, #10
 801b42c:	e7ab      	b.n	801b386 <_strtol_l.constprop.0+0x56>
 801b42e:	bf00      	nop
 801b430:	080254f9 	.word	0x080254f9

0801b434 <_strtol_r>:
 801b434:	f7ff bf7c 	b.w	801b330 <_strtol_l.constprop.0>

0801b438 <quorem>:
 801b438:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b43c:	6903      	ldr	r3, [r0, #16]
 801b43e:	690c      	ldr	r4, [r1, #16]
 801b440:	42a3      	cmp	r3, r4
 801b442:	4607      	mov	r7, r0
 801b444:	f2c0 8081 	blt.w	801b54a <quorem+0x112>
 801b448:	3c01      	subs	r4, #1
 801b44a:	f101 0814 	add.w	r8, r1, #20
 801b44e:	f100 0514 	add.w	r5, r0, #20
 801b452:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b456:	9301      	str	r3, [sp, #4]
 801b458:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801b45c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b460:	3301      	adds	r3, #1
 801b462:	429a      	cmp	r2, r3
 801b464:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801b468:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801b46c:	fbb2 f6f3 	udiv	r6, r2, r3
 801b470:	d331      	bcc.n	801b4d6 <quorem+0x9e>
 801b472:	f04f 0e00 	mov.w	lr, #0
 801b476:	4640      	mov	r0, r8
 801b478:	46ac      	mov	ip, r5
 801b47a:	46f2      	mov	sl, lr
 801b47c:	f850 2b04 	ldr.w	r2, [r0], #4
 801b480:	b293      	uxth	r3, r2
 801b482:	fb06 e303 	mla	r3, r6, r3, lr
 801b486:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801b48a:	b29b      	uxth	r3, r3
 801b48c:	ebaa 0303 	sub.w	r3, sl, r3
 801b490:	f8dc a000 	ldr.w	sl, [ip]
 801b494:	0c12      	lsrs	r2, r2, #16
 801b496:	fa13 f38a 	uxtah	r3, r3, sl
 801b49a:	fb06 e202 	mla	r2, r6, r2, lr
 801b49e:	9300      	str	r3, [sp, #0]
 801b4a0:	9b00      	ldr	r3, [sp, #0]
 801b4a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801b4a6:	b292      	uxth	r2, r2
 801b4a8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801b4ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b4b0:	f8bd 3000 	ldrh.w	r3, [sp]
 801b4b4:	4581      	cmp	r9, r0
 801b4b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b4ba:	f84c 3b04 	str.w	r3, [ip], #4
 801b4be:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801b4c2:	d2db      	bcs.n	801b47c <quorem+0x44>
 801b4c4:	f855 300b 	ldr.w	r3, [r5, fp]
 801b4c8:	b92b      	cbnz	r3, 801b4d6 <quorem+0x9e>
 801b4ca:	9b01      	ldr	r3, [sp, #4]
 801b4cc:	3b04      	subs	r3, #4
 801b4ce:	429d      	cmp	r5, r3
 801b4d0:	461a      	mov	r2, r3
 801b4d2:	d32e      	bcc.n	801b532 <quorem+0xfa>
 801b4d4:	613c      	str	r4, [r7, #16]
 801b4d6:	4638      	mov	r0, r7
 801b4d8:	f001 fc82 	bl	801cde0 <__mcmp>
 801b4dc:	2800      	cmp	r0, #0
 801b4de:	db24      	blt.n	801b52a <quorem+0xf2>
 801b4e0:	3601      	adds	r6, #1
 801b4e2:	4628      	mov	r0, r5
 801b4e4:	f04f 0c00 	mov.w	ip, #0
 801b4e8:	f858 2b04 	ldr.w	r2, [r8], #4
 801b4ec:	f8d0 e000 	ldr.w	lr, [r0]
 801b4f0:	b293      	uxth	r3, r2
 801b4f2:	ebac 0303 	sub.w	r3, ip, r3
 801b4f6:	0c12      	lsrs	r2, r2, #16
 801b4f8:	fa13 f38e 	uxtah	r3, r3, lr
 801b4fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801b500:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b504:	b29b      	uxth	r3, r3
 801b506:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b50a:	45c1      	cmp	r9, r8
 801b50c:	f840 3b04 	str.w	r3, [r0], #4
 801b510:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801b514:	d2e8      	bcs.n	801b4e8 <quorem+0xb0>
 801b516:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b51a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b51e:	b922      	cbnz	r2, 801b52a <quorem+0xf2>
 801b520:	3b04      	subs	r3, #4
 801b522:	429d      	cmp	r5, r3
 801b524:	461a      	mov	r2, r3
 801b526:	d30a      	bcc.n	801b53e <quorem+0x106>
 801b528:	613c      	str	r4, [r7, #16]
 801b52a:	4630      	mov	r0, r6
 801b52c:	b003      	add	sp, #12
 801b52e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b532:	6812      	ldr	r2, [r2, #0]
 801b534:	3b04      	subs	r3, #4
 801b536:	2a00      	cmp	r2, #0
 801b538:	d1cc      	bne.n	801b4d4 <quorem+0x9c>
 801b53a:	3c01      	subs	r4, #1
 801b53c:	e7c7      	b.n	801b4ce <quorem+0x96>
 801b53e:	6812      	ldr	r2, [r2, #0]
 801b540:	3b04      	subs	r3, #4
 801b542:	2a00      	cmp	r2, #0
 801b544:	d1f0      	bne.n	801b528 <quorem+0xf0>
 801b546:	3c01      	subs	r4, #1
 801b548:	e7eb      	b.n	801b522 <quorem+0xea>
 801b54a:	2000      	movs	r0, #0
 801b54c:	e7ee      	b.n	801b52c <quorem+0xf4>
	...

0801b550 <_dtoa_r>:
 801b550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b554:	ed2d 8b04 	vpush	{d8-d9}
 801b558:	ec57 6b10 	vmov	r6, r7, d0
 801b55c:	b093      	sub	sp, #76	; 0x4c
 801b55e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801b560:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801b564:	9106      	str	r1, [sp, #24]
 801b566:	ee10 aa10 	vmov	sl, s0
 801b56a:	4604      	mov	r4, r0
 801b56c:	9209      	str	r2, [sp, #36]	; 0x24
 801b56e:	930c      	str	r3, [sp, #48]	; 0x30
 801b570:	46bb      	mov	fp, r7
 801b572:	b975      	cbnz	r5, 801b592 <_dtoa_r+0x42>
 801b574:	2010      	movs	r0, #16
 801b576:	f001 f94d 	bl	801c814 <malloc>
 801b57a:	4602      	mov	r2, r0
 801b57c:	6260      	str	r0, [r4, #36]	; 0x24
 801b57e:	b920      	cbnz	r0, 801b58a <_dtoa_r+0x3a>
 801b580:	4ba7      	ldr	r3, [pc, #668]	; (801b820 <_dtoa_r+0x2d0>)
 801b582:	21ea      	movs	r1, #234	; 0xea
 801b584:	48a7      	ldr	r0, [pc, #668]	; (801b824 <_dtoa_r+0x2d4>)
 801b586:	f002 f8ad 	bl	801d6e4 <__assert_func>
 801b58a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801b58e:	6005      	str	r5, [r0, #0]
 801b590:	60c5      	str	r5, [r0, #12]
 801b592:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b594:	6819      	ldr	r1, [r3, #0]
 801b596:	b151      	cbz	r1, 801b5ae <_dtoa_r+0x5e>
 801b598:	685a      	ldr	r2, [r3, #4]
 801b59a:	604a      	str	r2, [r1, #4]
 801b59c:	2301      	movs	r3, #1
 801b59e:	4093      	lsls	r3, r2
 801b5a0:	608b      	str	r3, [r1, #8]
 801b5a2:	4620      	mov	r0, r4
 801b5a4:	f001 f990 	bl	801c8c8 <_Bfree>
 801b5a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b5aa:	2200      	movs	r2, #0
 801b5ac:	601a      	str	r2, [r3, #0]
 801b5ae:	1e3b      	subs	r3, r7, #0
 801b5b0:	bfaa      	itet	ge
 801b5b2:	2300      	movge	r3, #0
 801b5b4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 801b5b8:	f8c8 3000 	strge.w	r3, [r8]
 801b5bc:	4b9a      	ldr	r3, [pc, #616]	; (801b828 <_dtoa_r+0x2d8>)
 801b5be:	bfbc      	itt	lt
 801b5c0:	2201      	movlt	r2, #1
 801b5c2:	f8c8 2000 	strlt.w	r2, [r8]
 801b5c6:	ea33 030b 	bics.w	r3, r3, fp
 801b5ca:	d11b      	bne.n	801b604 <_dtoa_r+0xb4>
 801b5cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b5ce:	f242 730f 	movw	r3, #9999	; 0x270f
 801b5d2:	6013      	str	r3, [r2, #0]
 801b5d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b5d8:	4333      	orrs	r3, r6
 801b5da:	f000 8592 	beq.w	801c102 <_dtoa_r+0xbb2>
 801b5de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b5e0:	b963      	cbnz	r3, 801b5fc <_dtoa_r+0xac>
 801b5e2:	4b92      	ldr	r3, [pc, #584]	; (801b82c <_dtoa_r+0x2dc>)
 801b5e4:	e022      	b.n	801b62c <_dtoa_r+0xdc>
 801b5e6:	4b92      	ldr	r3, [pc, #584]	; (801b830 <_dtoa_r+0x2e0>)
 801b5e8:	9301      	str	r3, [sp, #4]
 801b5ea:	3308      	adds	r3, #8
 801b5ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801b5ee:	6013      	str	r3, [r2, #0]
 801b5f0:	9801      	ldr	r0, [sp, #4]
 801b5f2:	b013      	add	sp, #76	; 0x4c
 801b5f4:	ecbd 8b04 	vpop	{d8-d9}
 801b5f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b5fc:	4b8b      	ldr	r3, [pc, #556]	; (801b82c <_dtoa_r+0x2dc>)
 801b5fe:	9301      	str	r3, [sp, #4]
 801b600:	3303      	adds	r3, #3
 801b602:	e7f3      	b.n	801b5ec <_dtoa_r+0x9c>
 801b604:	2200      	movs	r2, #0
 801b606:	2300      	movs	r3, #0
 801b608:	4650      	mov	r0, sl
 801b60a:	4659      	mov	r1, fp
 801b60c:	f7e5 fa74 	bl	8000af8 <__aeabi_dcmpeq>
 801b610:	ec4b ab19 	vmov	d9, sl, fp
 801b614:	4680      	mov	r8, r0
 801b616:	b158      	cbz	r0, 801b630 <_dtoa_r+0xe0>
 801b618:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b61a:	2301      	movs	r3, #1
 801b61c:	6013      	str	r3, [r2, #0]
 801b61e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b620:	2b00      	cmp	r3, #0
 801b622:	f000 856b 	beq.w	801c0fc <_dtoa_r+0xbac>
 801b626:	4883      	ldr	r0, [pc, #524]	; (801b834 <_dtoa_r+0x2e4>)
 801b628:	6018      	str	r0, [r3, #0]
 801b62a:	1e43      	subs	r3, r0, #1
 801b62c:	9301      	str	r3, [sp, #4]
 801b62e:	e7df      	b.n	801b5f0 <_dtoa_r+0xa0>
 801b630:	ec4b ab10 	vmov	d0, sl, fp
 801b634:	aa10      	add	r2, sp, #64	; 0x40
 801b636:	a911      	add	r1, sp, #68	; 0x44
 801b638:	4620      	mov	r0, r4
 801b63a:	f001 fcf3 	bl	801d024 <__d2b>
 801b63e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801b642:	ee08 0a10 	vmov	s16, r0
 801b646:	2d00      	cmp	r5, #0
 801b648:	f000 8084 	beq.w	801b754 <_dtoa_r+0x204>
 801b64c:	ee19 3a90 	vmov	r3, s19
 801b650:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b654:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801b658:	4656      	mov	r6, sl
 801b65a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801b65e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801b662:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801b666:	4b74      	ldr	r3, [pc, #464]	; (801b838 <_dtoa_r+0x2e8>)
 801b668:	2200      	movs	r2, #0
 801b66a:	4630      	mov	r0, r6
 801b66c:	4639      	mov	r1, r7
 801b66e:	f7e4 fe23 	bl	80002b8 <__aeabi_dsub>
 801b672:	a365      	add	r3, pc, #404	; (adr r3, 801b808 <_dtoa_r+0x2b8>)
 801b674:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b678:	f7e4 ffd6 	bl	8000628 <__aeabi_dmul>
 801b67c:	a364      	add	r3, pc, #400	; (adr r3, 801b810 <_dtoa_r+0x2c0>)
 801b67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b682:	f7e4 fe1b 	bl	80002bc <__adddf3>
 801b686:	4606      	mov	r6, r0
 801b688:	4628      	mov	r0, r5
 801b68a:	460f      	mov	r7, r1
 801b68c:	f7e4 ff62 	bl	8000554 <__aeabi_i2d>
 801b690:	a361      	add	r3, pc, #388	; (adr r3, 801b818 <_dtoa_r+0x2c8>)
 801b692:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b696:	f7e4 ffc7 	bl	8000628 <__aeabi_dmul>
 801b69a:	4602      	mov	r2, r0
 801b69c:	460b      	mov	r3, r1
 801b69e:	4630      	mov	r0, r6
 801b6a0:	4639      	mov	r1, r7
 801b6a2:	f7e4 fe0b 	bl	80002bc <__adddf3>
 801b6a6:	4606      	mov	r6, r0
 801b6a8:	460f      	mov	r7, r1
 801b6aa:	f7e5 fa6d 	bl	8000b88 <__aeabi_d2iz>
 801b6ae:	2200      	movs	r2, #0
 801b6b0:	9000      	str	r0, [sp, #0]
 801b6b2:	2300      	movs	r3, #0
 801b6b4:	4630      	mov	r0, r6
 801b6b6:	4639      	mov	r1, r7
 801b6b8:	f7e5 fa28 	bl	8000b0c <__aeabi_dcmplt>
 801b6bc:	b150      	cbz	r0, 801b6d4 <_dtoa_r+0x184>
 801b6be:	9800      	ldr	r0, [sp, #0]
 801b6c0:	f7e4 ff48 	bl	8000554 <__aeabi_i2d>
 801b6c4:	4632      	mov	r2, r6
 801b6c6:	463b      	mov	r3, r7
 801b6c8:	f7e5 fa16 	bl	8000af8 <__aeabi_dcmpeq>
 801b6cc:	b910      	cbnz	r0, 801b6d4 <_dtoa_r+0x184>
 801b6ce:	9b00      	ldr	r3, [sp, #0]
 801b6d0:	3b01      	subs	r3, #1
 801b6d2:	9300      	str	r3, [sp, #0]
 801b6d4:	9b00      	ldr	r3, [sp, #0]
 801b6d6:	2b16      	cmp	r3, #22
 801b6d8:	d85a      	bhi.n	801b790 <_dtoa_r+0x240>
 801b6da:	9a00      	ldr	r2, [sp, #0]
 801b6dc:	4b57      	ldr	r3, [pc, #348]	; (801b83c <_dtoa_r+0x2ec>)
 801b6de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6e6:	ec51 0b19 	vmov	r0, r1, d9
 801b6ea:	f7e5 fa0f 	bl	8000b0c <__aeabi_dcmplt>
 801b6ee:	2800      	cmp	r0, #0
 801b6f0:	d050      	beq.n	801b794 <_dtoa_r+0x244>
 801b6f2:	9b00      	ldr	r3, [sp, #0]
 801b6f4:	3b01      	subs	r3, #1
 801b6f6:	9300      	str	r3, [sp, #0]
 801b6f8:	2300      	movs	r3, #0
 801b6fa:	930b      	str	r3, [sp, #44]	; 0x2c
 801b6fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b6fe:	1b5d      	subs	r5, r3, r5
 801b700:	1e6b      	subs	r3, r5, #1
 801b702:	9305      	str	r3, [sp, #20]
 801b704:	bf45      	ittet	mi
 801b706:	f1c5 0301 	rsbmi	r3, r5, #1
 801b70a:	9304      	strmi	r3, [sp, #16]
 801b70c:	2300      	movpl	r3, #0
 801b70e:	2300      	movmi	r3, #0
 801b710:	bf4c      	ite	mi
 801b712:	9305      	strmi	r3, [sp, #20]
 801b714:	9304      	strpl	r3, [sp, #16]
 801b716:	9b00      	ldr	r3, [sp, #0]
 801b718:	2b00      	cmp	r3, #0
 801b71a:	db3d      	blt.n	801b798 <_dtoa_r+0x248>
 801b71c:	9b05      	ldr	r3, [sp, #20]
 801b71e:	9a00      	ldr	r2, [sp, #0]
 801b720:	920a      	str	r2, [sp, #40]	; 0x28
 801b722:	4413      	add	r3, r2
 801b724:	9305      	str	r3, [sp, #20]
 801b726:	2300      	movs	r3, #0
 801b728:	9307      	str	r3, [sp, #28]
 801b72a:	9b06      	ldr	r3, [sp, #24]
 801b72c:	2b09      	cmp	r3, #9
 801b72e:	f200 8089 	bhi.w	801b844 <_dtoa_r+0x2f4>
 801b732:	2b05      	cmp	r3, #5
 801b734:	bfc4      	itt	gt
 801b736:	3b04      	subgt	r3, #4
 801b738:	9306      	strgt	r3, [sp, #24]
 801b73a:	9b06      	ldr	r3, [sp, #24]
 801b73c:	f1a3 0302 	sub.w	r3, r3, #2
 801b740:	bfcc      	ite	gt
 801b742:	2500      	movgt	r5, #0
 801b744:	2501      	movle	r5, #1
 801b746:	2b03      	cmp	r3, #3
 801b748:	f200 8087 	bhi.w	801b85a <_dtoa_r+0x30a>
 801b74c:	e8df f003 	tbb	[pc, r3]
 801b750:	59383a2d 	.word	0x59383a2d
 801b754:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801b758:	441d      	add	r5, r3
 801b75a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801b75e:	2b20      	cmp	r3, #32
 801b760:	bfc1      	itttt	gt
 801b762:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801b766:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801b76a:	fa0b f303 	lslgt.w	r3, fp, r3
 801b76e:	fa26 f000 	lsrgt.w	r0, r6, r0
 801b772:	bfda      	itte	le
 801b774:	f1c3 0320 	rsble	r3, r3, #32
 801b778:	fa06 f003 	lslle.w	r0, r6, r3
 801b77c:	4318      	orrgt	r0, r3
 801b77e:	f7e4 fed9 	bl	8000534 <__aeabi_ui2d>
 801b782:	2301      	movs	r3, #1
 801b784:	4606      	mov	r6, r0
 801b786:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801b78a:	3d01      	subs	r5, #1
 801b78c:	930e      	str	r3, [sp, #56]	; 0x38
 801b78e:	e76a      	b.n	801b666 <_dtoa_r+0x116>
 801b790:	2301      	movs	r3, #1
 801b792:	e7b2      	b.n	801b6fa <_dtoa_r+0x1aa>
 801b794:	900b      	str	r0, [sp, #44]	; 0x2c
 801b796:	e7b1      	b.n	801b6fc <_dtoa_r+0x1ac>
 801b798:	9b04      	ldr	r3, [sp, #16]
 801b79a:	9a00      	ldr	r2, [sp, #0]
 801b79c:	1a9b      	subs	r3, r3, r2
 801b79e:	9304      	str	r3, [sp, #16]
 801b7a0:	4253      	negs	r3, r2
 801b7a2:	9307      	str	r3, [sp, #28]
 801b7a4:	2300      	movs	r3, #0
 801b7a6:	930a      	str	r3, [sp, #40]	; 0x28
 801b7a8:	e7bf      	b.n	801b72a <_dtoa_r+0x1da>
 801b7aa:	2300      	movs	r3, #0
 801b7ac:	9308      	str	r3, [sp, #32]
 801b7ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b7b0:	2b00      	cmp	r3, #0
 801b7b2:	dc55      	bgt.n	801b860 <_dtoa_r+0x310>
 801b7b4:	2301      	movs	r3, #1
 801b7b6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801b7ba:	461a      	mov	r2, r3
 801b7bc:	9209      	str	r2, [sp, #36]	; 0x24
 801b7be:	e00c      	b.n	801b7da <_dtoa_r+0x28a>
 801b7c0:	2301      	movs	r3, #1
 801b7c2:	e7f3      	b.n	801b7ac <_dtoa_r+0x25c>
 801b7c4:	2300      	movs	r3, #0
 801b7c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b7c8:	9308      	str	r3, [sp, #32]
 801b7ca:	9b00      	ldr	r3, [sp, #0]
 801b7cc:	4413      	add	r3, r2
 801b7ce:	9302      	str	r3, [sp, #8]
 801b7d0:	3301      	adds	r3, #1
 801b7d2:	2b01      	cmp	r3, #1
 801b7d4:	9303      	str	r3, [sp, #12]
 801b7d6:	bfb8      	it	lt
 801b7d8:	2301      	movlt	r3, #1
 801b7da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801b7dc:	2200      	movs	r2, #0
 801b7de:	6042      	str	r2, [r0, #4]
 801b7e0:	2204      	movs	r2, #4
 801b7e2:	f102 0614 	add.w	r6, r2, #20
 801b7e6:	429e      	cmp	r6, r3
 801b7e8:	6841      	ldr	r1, [r0, #4]
 801b7ea:	d93d      	bls.n	801b868 <_dtoa_r+0x318>
 801b7ec:	4620      	mov	r0, r4
 801b7ee:	f001 f82b 	bl	801c848 <_Balloc>
 801b7f2:	9001      	str	r0, [sp, #4]
 801b7f4:	2800      	cmp	r0, #0
 801b7f6:	d13b      	bne.n	801b870 <_dtoa_r+0x320>
 801b7f8:	4b11      	ldr	r3, [pc, #68]	; (801b840 <_dtoa_r+0x2f0>)
 801b7fa:	4602      	mov	r2, r0
 801b7fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801b800:	e6c0      	b.n	801b584 <_dtoa_r+0x34>
 801b802:	2301      	movs	r3, #1
 801b804:	e7df      	b.n	801b7c6 <_dtoa_r+0x276>
 801b806:	bf00      	nop
 801b808:	636f4361 	.word	0x636f4361
 801b80c:	3fd287a7 	.word	0x3fd287a7
 801b810:	8b60c8b3 	.word	0x8b60c8b3
 801b814:	3fc68a28 	.word	0x3fc68a28
 801b818:	509f79fb 	.word	0x509f79fb
 801b81c:	3fd34413 	.word	0x3fd34413
 801b820:	08025606 	.word	0x08025606
 801b824:	0802561d 	.word	0x0802561d
 801b828:	7ff00000 	.word	0x7ff00000
 801b82c:	08025602 	.word	0x08025602
 801b830:	080255f9 	.word	0x080255f9
 801b834:	0802547d 	.word	0x0802547d
 801b838:	3ff80000 	.word	0x3ff80000
 801b83c:	08025788 	.word	0x08025788
 801b840:	08025678 	.word	0x08025678
 801b844:	2501      	movs	r5, #1
 801b846:	2300      	movs	r3, #0
 801b848:	9306      	str	r3, [sp, #24]
 801b84a:	9508      	str	r5, [sp, #32]
 801b84c:	f04f 33ff 	mov.w	r3, #4294967295
 801b850:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801b854:	2200      	movs	r2, #0
 801b856:	2312      	movs	r3, #18
 801b858:	e7b0      	b.n	801b7bc <_dtoa_r+0x26c>
 801b85a:	2301      	movs	r3, #1
 801b85c:	9308      	str	r3, [sp, #32]
 801b85e:	e7f5      	b.n	801b84c <_dtoa_r+0x2fc>
 801b860:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b862:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801b866:	e7b8      	b.n	801b7da <_dtoa_r+0x28a>
 801b868:	3101      	adds	r1, #1
 801b86a:	6041      	str	r1, [r0, #4]
 801b86c:	0052      	lsls	r2, r2, #1
 801b86e:	e7b8      	b.n	801b7e2 <_dtoa_r+0x292>
 801b870:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b872:	9a01      	ldr	r2, [sp, #4]
 801b874:	601a      	str	r2, [r3, #0]
 801b876:	9b03      	ldr	r3, [sp, #12]
 801b878:	2b0e      	cmp	r3, #14
 801b87a:	f200 809d 	bhi.w	801b9b8 <_dtoa_r+0x468>
 801b87e:	2d00      	cmp	r5, #0
 801b880:	f000 809a 	beq.w	801b9b8 <_dtoa_r+0x468>
 801b884:	9b00      	ldr	r3, [sp, #0]
 801b886:	2b00      	cmp	r3, #0
 801b888:	dd32      	ble.n	801b8f0 <_dtoa_r+0x3a0>
 801b88a:	4ab7      	ldr	r2, [pc, #732]	; (801bb68 <_dtoa_r+0x618>)
 801b88c:	f003 030f 	and.w	r3, r3, #15
 801b890:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801b894:	e9d3 8900 	ldrd	r8, r9, [r3]
 801b898:	9b00      	ldr	r3, [sp, #0]
 801b89a:	05d8      	lsls	r0, r3, #23
 801b89c:	ea4f 1723 	mov.w	r7, r3, asr #4
 801b8a0:	d516      	bpl.n	801b8d0 <_dtoa_r+0x380>
 801b8a2:	4bb2      	ldr	r3, [pc, #712]	; (801bb6c <_dtoa_r+0x61c>)
 801b8a4:	ec51 0b19 	vmov	r0, r1, d9
 801b8a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801b8ac:	f7e4 ffe6 	bl	800087c <__aeabi_ddiv>
 801b8b0:	f007 070f 	and.w	r7, r7, #15
 801b8b4:	4682      	mov	sl, r0
 801b8b6:	468b      	mov	fp, r1
 801b8b8:	2503      	movs	r5, #3
 801b8ba:	4eac      	ldr	r6, [pc, #688]	; (801bb6c <_dtoa_r+0x61c>)
 801b8bc:	b957      	cbnz	r7, 801b8d4 <_dtoa_r+0x384>
 801b8be:	4642      	mov	r2, r8
 801b8c0:	464b      	mov	r3, r9
 801b8c2:	4650      	mov	r0, sl
 801b8c4:	4659      	mov	r1, fp
 801b8c6:	f7e4 ffd9 	bl	800087c <__aeabi_ddiv>
 801b8ca:	4682      	mov	sl, r0
 801b8cc:	468b      	mov	fp, r1
 801b8ce:	e028      	b.n	801b922 <_dtoa_r+0x3d2>
 801b8d0:	2502      	movs	r5, #2
 801b8d2:	e7f2      	b.n	801b8ba <_dtoa_r+0x36a>
 801b8d4:	07f9      	lsls	r1, r7, #31
 801b8d6:	d508      	bpl.n	801b8ea <_dtoa_r+0x39a>
 801b8d8:	4640      	mov	r0, r8
 801b8da:	4649      	mov	r1, r9
 801b8dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 801b8e0:	f7e4 fea2 	bl	8000628 <__aeabi_dmul>
 801b8e4:	3501      	adds	r5, #1
 801b8e6:	4680      	mov	r8, r0
 801b8e8:	4689      	mov	r9, r1
 801b8ea:	107f      	asrs	r7, r7, #1
 801b8ec:	3608      	adds	r6, #8
 801b8ee:	e7e5      	b.n	801b8bc <_dtoa_r+0x36c>
 801b8f0:	f000 809b 	beq.w	801ba2a <_dtoa_r+0x4da>
 801b8f4:	9b00      	ldr	r3, [sp, #0]
 801b8f6:	4f9d      	ldr	r7, [pc, #628]	; (801bb6c <_dtoa_r+0x61c>)
 801b8f8:	425e      	negs	r6, r3
 801b8fa:	4b9b      	ldr	r3, [pc, #620]	; (801bb68 <_dtoa_r+0x618>)
 801b8fc:	f006 020f 	and.w	r2, r6, #15
 801b900:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b904:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b908:	ec51 0b19 	vmov	r0, r1, d9
 801b90c:	f7e4 fe8c 	bl	8000628 <__aeabi_dmul>
 801b910:	1136      	asrs	r6, r6, #4
 801b912:	4682      	mov	sl, r0
 801b914:	468b      	mov	fp, r1
 801b916:	2300      	movs	r3, #0
 801b918:	2502      	movs	r5, #2
 801b91a:	2e00      	cmp	r6, #0
 801b91c:	d17a      	bne.n	801ba14 <_dtoa_r+0x4c4>
 801b91e:	2b00      	cmp	r3, #0
 801b920:	d1d3      	bne.n	801b8ca <_dtoa_r+0x37a>
 801b922:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b924:	2b00      	cmp	r3, #0
 801b926:	f000 8082 	beq.w	801ba2e <_dtoa_r+0x4de>
 801b92a:	4b91      	ldr	r3, [pc, #580]	; (801bb70 <_dtoa_r+0x620>)
 801b92c:	2200      	movs	r2, #0
 801b92e:	4650      	mov	r0, sl
 801b930:	4659      	mov	r1, fp
 801b932:	f7e5 f8eb 	bl	8000b0c <__aeabi_dcmplt>
 801b936:	2800      	cmp	r0, #0
 801b938:	d079      	beq.n	801ba2e <_dtoa_r+0x4de>
 801b93a:	9b03      	ldr	r3, [sp, #12]
 801b93c:	2b00      	cmp	r3, #0
 801b93e:	d076      	beq.n	801ba2e <_dtoa_r+0x4de>
 801b940:	9b02      	ldr	r3, [sp, #8]
 801b942:	2b00      	cmp	r3, #0
 801b944:	dd36      	ble.n	801b9b4 <_dtoa_r+0x464>
 801b946:	9b00      	ldr	r3, [sp, #0]
 801b948:	4650      	mov	r0, sl
 801b94a:	4659      	mov	r1, fp
 801b94c:	1e5f      	subs	r7, r3, #1
 801b94e:	2200      	movs	r2, #0
 801b950:	4b88      	ldr	r3, [pc, #544]	; (801bb74 <_dtoa_r+0x624>)
 801b952:	f7e4 fe69 	bl	8000628 <__aeabi_dmul>
 801b956:	9e02      	ldr	r6, [sp, #8]
 801b958:	4682      	mov	sl, r0
 801b95a:	468b      	mov	fp, r1
 801b95c:	3501      	adds	r5, #1
 801b95e:	4628      	mov	r0, r5
 801b960:	f7e4 fdf8 	bl	8000554 <__aeabi_i2d>
 801b964:	4652      	mov	r2, sl
 801b966:	465b      	mov	r3, fp
 801b968:	f7e4 fe5e 	bl	8000628 <__aeabi_dmul>
 801b96c:	4b82      	ldr	r3, [pc, #520]	; (801bb78 <_dtoa_r+0x628>)
 801b96e:	2200      	movs	r2, #0
 801b970:	f7e4 fca4 	bl	80002bc <__adddf3>
 801b974:	46d0      	mov	r8, sl
 801b976:	46d9      	mov	r9, fp
 801b978:	4682      	mov	sl, r0
 801b97a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801b97e:	2e00      	cmp	r6, #0
 801b980:	d158      	bne.n	801ba34 <_dtoa_r+0x4e4>
 801b982:	4b7e      	ldr	r3, [pc, #504]	; (801bb7c <_dtoa_r+0x62c>)
 801b984:	2200      	movs	r2, #0
 801b986:	4640      	mov	r0, r8
 801b988:	4649      	mov	r1, r9
 801b98a:	f7e4 fc95 	bl	80002b8 <__aeabi_dsub>
 801b98e:	4652      	mov	r2, sl
 801b990:	465b      	mov	r3, fp
 801b992:	4680      	mov	r8, r0
 801b994:	4689      	mov	r9, r1
 801b996:	f7e5 f8d7 	bl	8000b48 <__aeabi_dcmpgt>
 801b99a:	2800      	cmp	r0, #0
 801b99c:	f040 8295 	bne.w	801beca <_dtoa_r+0x97a>
 801b9a0:	4652      	mov	r2, sl
 801b9a2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801b9a6:	4640      	mov	r0, r8
 801b9a8:	4649      	mov	r1, r9
 801b9aa:	f7e5 f8af 	bl	8000b0c <__aeabi_dcmplt>
 801b9ae:	2800      	cmp	r0, #0
 801b9b0:	f040 8289 	bne.w	801bec6 <_dtoa_r+0x976>
 801b9b4:	ec5b ab19 	vmov	sl, fp, d9
 801b9b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b9ba:	2b00      	cmp	r3, #0
 801b9bc:	f2c0 8148 	blt.w	801bc50 <_dtoa_r+0x700>
 801b9c0:	9a00      	ldr	r2, [sp, #0]
 801b9c2:	2a0e      	cmp	r2, #14
 801b9c4:	f300 8144 	bgt.w	801bc50 <_dtoa_r+0x700>
 801b9c8:	4b67      	ldr	r3, [pc, #412]	; (801bb68 <_dtoa_r+0x618>)
 801b9ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b9ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 801b9d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b9d4:	2b00      	cmp	r3, #0
 801b9d6:	f280 80d5 	bge.w	801bb84 <_dtoa_r+0x634>
 801b9da:	9b03      	ldr	r3, [sp, #12]
 801b9dc:	2b00      	cmp	r3, #0
 801b9de:	f300 80d1 	bgt.w	801bb84 <_dtoa_r+0x634>
 801b9e2:	f040 826f 	bne.w	801bec4 <_dtoa_r+0x974>
 801b9e6:	4b65      	ldr	r3, [pc, #404]	; (801bb7c <_dtoa_r+0x62c>)
 801b9e8:	2200      	movs	r2, #0
 801b9ea:	4640      	mov	r0, r8
 801b9ec:	4649      	mov	r1, r9
 801b9ee:	f7e4 fe1b 	bl	8000628 <__aeabi_dmul>
 801b9f2:	4652      	mov	r2, sl
 801b9f4:	465b      	mov	r3, fp
 801b9f6:	f7e5 f89d 	bl	8000b34 <__aeabi_dcmpge>
 801b9fa:	9e03      	ldr	r6, [sp, #12]
 801b9fc:	4637      	mov	r7, r6
 801b9fe:	2800      	cmp	r0, #0
 801ba00:	f040 8245 	bne.w	801be8e <_dtoa_r+0x93e>
 801ba04:	9d01      	ldr	r5, [sp, #4]
 801ba06:	2331      	movs	r3, #49	; 0x31
 801ba08:	f805 3b01 	strb.w	r3, [r5], #1
 801ba0c:	9b00      	ldr	r3, [sp, #0]
 801ba0e:	3301      	adds	r3, #1
 801ba10:	9300      	str	r3, [sp, #0]
 801ba12:	e240      	b.n	801be96 <_dtoa_r+0x946>
 801ba14:	07f2      	lsls	r2, r6, #31
 801ba16:	d505      	bpl.n	801ba24 <_dtoa_r+0x4d4>
 801ba18:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ba1c:	f7e4 fe04 	bl	8000628 <__aeabi_dmul>
 801ba20:	3501      	adds	r5, #1
 801ba22:	2301      	movs	r3, #1
 801ba24:	1076      	asrs	r6, r6, #1
 801ba26:	3708      	adds	r7, #8
 801ba28:	e777      	b.n	801b91a <_dtoa_r+0x3ca>
 801ba2a:	2502      	movs	r5, #2
 801ba2c:	e779      	b.n	801b922 <_dtoa_r+0x3d2>
 801ba2e:	9f00      	ldr	r7, [sp, #0]
 801ba30:	9e03      	ldr	r6, [sp, #12]
 801ba32:	e794      	b.n	801b95e <_dtoa_r+0x40e>
 801ba34:	9901      	ldr	r1, [sp, #4]
 801ba36:	4b4c      	ldr	r3, [pc, #304]	; (801bb68 <_dtoa_r+0x618>)
 801ba38:	4431      	add	r1, r6
 801ba3a:	910d      	str	r1, [sp, #52]	; 0x34
 801ba3c:	9908      	ldr	r1, [sp, #32]
 801ba3e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801ba42:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801ba46:	2900      	cmp	r1, #0
 801ba48:	d043      	beq.n	801bad2 <_dtoa_r+0x582>
 801ba4a:	494d      	ldr	r1, [pc, #308]	; (801bb80 <_dtoa_r+0x630>)
 801ba4c:	2000      	movs	r0, #0
 801ba4e:	f7e4 ff15 	bl	800087c <__aeabi_ddiv>
 801ba52:	4652      	mov	r2, sl
 801ba54:	465b      	mov	r3, fp
 801ba56:	f7e4 fc2f 	bl	80002b8 <__aeabi_dsub>
 801ba5a:	9d01      	ldr	r5, [sp, #4]
 801ba5c:	4682      	mov	sl, r0
 801ba5e:	468b      	mov	fp, r1
 801ba60:	4649      	mov	r1, r9
 801ba62:	4640      	mov	r0, r8
 801ba64:	f7e5 f890 	bl	8000b88 <__aeabi_d2iz>
 801ba68:	4606      	mov	r6, r0
 801ba6a:	f7e4 fd73 	bl	8000554 <__aeabi_i2d>
 801ba6e:	4602      	mov	r2, r0
 801ba70:	460b      	mov	r3, r1
 801ba72:	4640      	mov	r0, r8
 801ba74:	4649      	mov	r1, r9
 801ba76:	f7e4 fc1f 	bl	80002b8 <__aeabi_dsub>
 801ba7a:	3630      	adds	r6, #48	; 0x30
 801ba7c:	f805 6b01 	strb.w	r6, [r5], #1
 801ba80:	4652      	mov	r2, sl
 801ba82:	465b      	mov	r3, fp
 801ba84:	4680      	mov	r8, r0
 801ba86:	4689      	mov	r9, r1
 801ba88:	f7e5 f840 	bl	8000b0c <__aeabi_dcmplt>
 801ba8c:	2800      	cmp	r0, #0
 801ba8e:	d163      	bne.n	801bb58 <_dtoa_r+0x608>
 801ba90:	4642      	mov	r2, r8
 801ba92:	464b      	mov	r3, r9
 801ba94:	4936      	ldr	r1, [pc, #216]	; (801bb70 <_dtoa_r+0x620>)
 801ba96:	2000      	movs	r0, #0
 801ba98:	f7e4 fc0e 	bl	80002b8 <__aeabi_dsub>
 801ba9c:	4652      	mov	r2, sl
 801ba9e:	465b      	mov	r3, fp
 801baa0:	f7e5 f834 	bl	8000b0c <__aeabi_dcmplt>
 801baa4:	2800      	cmp	r0, #0
 801baa6:	f040 80b5 	bne.w	801bc14 <_dtoa_r+0x6c4>
 801baaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801baac:	429d      	cmp	r5, r3
 801baae:	d081      	beq.n	801b9b4 <_dtoa_r+0x464>
 801bab0:	4b30      	ldr	r3, [pc, #192]	; (801bb74 <_dtoa_r+0x624>)
 801bab2:	2200      	movs	r2, #0
 801bab4:	4650      	mov	r0, sl
 801bab6:	4659      	mov	r1, fp
 801bab8:	f7e4 fdb6 	bl	8000628 <__aeabi_dmul>
 801babc:	4b2d      	ldr	r3, [pc, #180]	; (801bb74 <_dtoa_r+0x624>)
 801babe:	4682      	mov	sl, r0
 801bac0:	468b      	mov	fp, r1
 801bac2:	4640      	mov	r0, r8
 801bac4:	4649      	mov	r1, r9
 801bac6:	2200      	movs	r2, #0
 801bac8:	f7e4 fdae 	bl	8000628 <__aeabi_dmul>
 801bacc:	4680      	mov	r8, r0
 801bace:	4689      	mov	r9, r1
 801bad0:	e7c6      	b.n	801ba60 <_dtoa_r+0x510>
 801bad2:	4650      	mov	r0, sl
 801bad4:	4659      	mov	r1, fp
 801bad6:	f7e4 fda7 	bl	8000628 <__aeabi_dmul>
 801bada:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801badc:	9d01      	ldr	r5, [sp, #4]
 801bade:	930f      	str	r3, [sp, #60]	; 0x3c
 801bae0:	4682      	mov	sl, r0
 801bae2:	468b      	mov	fp, r1
 801bae4:	4649      	mov	r1, r9
 801bae6:	4640      	mov	r0, r8
 801bae8:	f7e5 f84e 	bl	8000b88 <__aeabi_d2iz>
 801baec:	4606      	mov	r6, r0
 801baee:	f7e4 fd31 	bl	8000554 <__aeabi_i2d>
 801baf2:	3630      	adds	r6, #48	; 0x30
 801baf4:	4602      	mov	r2, r0
 801baf6:	460b      	mov	r3, r1
 801baf8:	4640      	mov	r0, r8
 801bafa:	4649      	mov	r1, r9
 801bafc:	f7e4 fbdc 	bl	80002b8 <__aeabi_dsub>
 801bb00:	f805 6b01 	strb.w	r6, [r5], #1
 801bb04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bb06:	429d      	cmp	r5, r3
 801bb08:	4680      	mov	r8, r0
 801bb0a:	4689      	mov	r9, r1
 801bb0c:	f04f 0200 	mov.w	r2, #0
 801bb10:	d124      	bne.n	801bb5c <_dtoa_r+0x60c>
 801bb12:	4b1b      	ldr	r3, [pc, #108]	; (801bb80 <_dtoa_r+0x630>)
 801bb14:	4650      	mov	r0, sl
 801bb16:	4659      	mov	r1, fp
 801bb18:	f7e4 fbd0 	bl	80002bc <__adddf3>
 801bb1c:	4602      	mov	r2, r0
 801bb1e:	460b      	mov	r3, r1
 801bb20:	4640      	mov	r0, r8
 801bb22:	4649      	mov	r1, r9
 801bb24:	f7e5 f810 	bl	8000b48 <__aeabi_dcmpgt>
 801bb28:	2800      	cmp	r0, #0
 801bb2a:	d173      	bne.n	801bc14 <_dtoa_r+0x6c4>
 801bb2c:	4652      	mov	r2, sl
 801bb2e:	465b      	mov	r3, fp
 801bb30:	4913      	ldr	r1, [pc, #76]	; (801bb80 <_dtoa_r+0x630>)
 801bb32:	2000      	movs	r0, #0
 801bb34:	f7e4 fbc0 	bl	80002b8 <__aeabi_dsub>
 801bb38:	4602      	mov	r2, r0
 801bb3a:	460b      	mov	r3, r1
 801bb3c:	4640      	mov	r0, r8
 801bb3e:	4649      	mov	r1, r9
 801bb40:	f7e4 ffe4 	bl	8000b0c <__aeabi_dcmplt>
 801bb44:	2800      	cmp	r0, #0
 801bb46:	f43f af35 	beq.w	801b9b4 <_dtoa_r+0x464>
 801bb4a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801bb4c:	1e6b      	subs	r3, r5, #1
 801bb4e:	930f      	str	r3, [sp, #60]	; 0x3c
 801bb50:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801bb54:	2b30      	cmp	r3, #48	; 0x30
 801bb56:	d0f8      	beq.n	801bb4a <_dtoa_r+0x5fa>
 801bb58:	9700      	str	r7, [sp, #0]
 801bb5a:	e049      	b.n	801bbf0 <_dtoa_r+0x6a0>
 801bb5c:	4b05      	ldr	r3, [pc, #20]	; (801bb74 <_dtoa_r+0x624>)
 801bb5e:	f7e4 fd63 	bl	8000628 <__aeabi_dmul>
 801bb62:	4680      	mov	r8, r0
 801bb64:	4689      	mov	r9, r1
 801bb66:	e7bd      	b.n	801bae4 <_dtoa_r+0x594>
 801bb68:	08025788 	.word	0x08025788
 801bb6c:	08025760 	.word	0x08025760
 801bb70:	3ff00000 	.word	0x3ff00000
 801bb74:	40240000 	.word	0x40240000
 801bb78:	401c0000 	.word	0x401c0000
 801bb7c:	40140000 	.word	0x40140000
 801bb80:	3fe00000 	.word	0x3fe00000
 801bb84:	9d01      	ldr	r5, [sp, #4]
 801bb86:	4656      	mov	r6, sl
 801bb88:	465f      	mov	r7, fp
 801bb8a:	4642      	mov	r2, r8
 801bb8c:	464b      	mov	r3, r9
 801bb8e:	4630      	mov	r0, r6
 801bb90:	4639      	mov	r1, r7
 801bb92:	f7e4 fe73 	bl	800087c <__aeabi_ddiv>
 801bb96:	f7e4 fff7 	bl	8000b88 <__aeabi_d2iz>
 801bb9a:	4682      	mov	sl, r0
 801bb9c:	f7e4 fcda 	bl	8000554 <__aeabi_i2d>
 801bba0:	4642      	mov	r2, r8
 801bba2:	464b      	mov	r3, r9
 801bba4:	f7e4 fd40 	bl	8000628 <__aeabi_dmul>
 801bba8:	4602      	mov	r2, r0
 801bbaa:	460b      	mov	r3, r1
 801bbac:	4630      	mov	r0, r6
 801bbae:	4639      	mov	r1, r7
 801bbb0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801bbb4:	f7e4 fb80 	bl	80002b8 <__aeabi_dsub>
 801bbb8:	f805 6b01 	strb.w	r6, [r5], #1
 801bbbc:	9e01      	ldr	r6, [sp, #4]
 801bbbe:	9f03      	ldr	r7, [sp, #12]
 801bbc0:	1bae      	subs	r6, r5, r6
 801bbc2:	42b7      	cmp	r7, r6
 801bbc4:	4602      	mov	r2, r0
 801bbc6:	460b      	mov	r3, r1
 801bbc8:	d135      	bne.n	801bc36 <_dtoa_r+0x6e6>
 801bbca:	f7e4 fb77 	bl	80002bc <__adddf3>
 801bbce:	4642      	mov	r2, r8
 801bbd0:	464b      	mov	r3, r9
 801bbd2:	4606      	mov	r6, r0
 801bbd4:	460f      	mov	r7, r1
 801bbd6:	f7e4 ffb7 	bl	8000b48 <__aeabi_dcmpgt>
 801bbda:	b9d0      	cbnz	r0, 801bc12 <_dtoa_r+0x6c2>
 801bbdc:	4642      	mov	r2, r8
 801bbde:	464b      	mov	r3, r9
 801bbe0:	4630      	mov	r0, r6
 801bbe2:	4639      	mov	r1, r7
 801bbe4:	f7e4 ff88 	bl	8000af8 <__aeabi_dcmpeq>
 801bbe8:	b110      	cbz	r0, 801bbf0 <_dtoa_r+0x6a0>
 801bbea:	f01a 0f01 	tst.w	sl, #1
 801bbee:	d110      	bne.n	801bc12 <_dtoa_r+0x6c2>
 801bbf0:	4620      	mov	r0, r4
 801bbf2:	ee18 1a10 	vmov	r1, s16
 801bbf6:	f000 fe67 	bl	801c8c8 <_Bfree>
 801bbfa:	2300      	movs	r3, #0
 801bbfc:	9800      	ldr	r0, [sp, #0]
 801bbfe:	702b      	strb	r3, [r5, #0]
 801bc00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bc02:	3001      	adds	r0, #1
 801bc04:	6018      	str	r0, [r3, #0]
 801bc06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bc08:	2b00      	cmp	r3, #0
 801bc0a:	f43f acf1 	beq.w	801b5f0 <_dtoa_r+0xa0>
 801bc0e:	601d      	str	r5, [r3, #0]
 801bc10:	e4ee      	b.n	801b5f0 <_dtoa_r+0xa0>
 801bc12:	9f00      	ldr	r7, [sp, #0]
 801bc14:	462b      	mov	r3, r5
 801bc16:	461d      	mov	r5, r3
 801bc18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801bc1c:	2a39      	cmp	r2, #57	; 0x39
 801bc1e:	d106      	bne.n	801bc2e <_dtoa_r+0x6de>
 801bc20:	9a01      	ldr	r2, [sp, #4]
 801bc22:	429a      	cmp	r2, r3
 801bc24:	d1f7      	bne.n	801bc16 <_dtoa_r+0x6c6>
 801bc26:	9901      	ldr	r1, [sp, #4]
 801bc28:	2230      	movs	r2, #48	; 0x30
 801bc2a:	3701      	adds	r7, #1
 801bc2c:	700a      	strb	r2, [r1, #0]
 801bc2e:	781a      	ldrb	r2, [r3, #0]
 801bc30:	3201      	adds	r2, #1
 801bc32:	701a      	strb	r2, [r3, #0]
 801bc34:	e790      	b.n	801bb58 <_dtoa_r+0x608>
 801bc36:	4ba6      	ldr	r3, [pc, #664]	; (801bed0 <_dtoa_r+0x980>)
 801bc38:	2200      	movs	r2, #0
 801bc3a:	f7e4 fcf5 	bl	8000628 <__aeabi_dmul>
 801bc3e:	2200      	movs	r2, #0
 801bc40:	2300      	movs	r3, #0
 801bc42:	4606      	mov	r6, r0
 801bc44:	460f      	mov	r7, r1
 801bc46:	f7e4 ff57 	bl	8000af8 <__aeabi_dcmpeq>
 801bc4a:	2800      	cmp	r0, #0
 801bc4c:	d09d      	beq.n	801bb8a <_dtoa_r+0x63a>
 801bc4e:	e7cf      	b.n	801bbf0 <_dtoa_r+0x6a0>
 801bc50:	9a08      	ldr	r2, [sp, #32]
 801bc52:	2a00      	cmp	r2, #0
 801bc54:	f000 80d7 	beq.w	801be06 <_dtoa_r+0x8b6>
 801bc58:	9a06      	ldr	r2, [sp, #24]
 801bc5a:	2a01      	cmp	r2, #1
 801bc5c:	f300 80ba 	bgt.w	801bdd4 <_dtoa_r+0x884>
 801bc60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801bc62:	2a00      	cmp	r2, #0
 801bc64:	f000 80b2 	beq.w	801bdcc <_dtoa_r+0x87c>
 801bc68:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801bc6c:	9e07      	ldr	r6, [sp, #28]
 801bc6e:	9d04      	ldr	r5, [sp, #16]
 801bc70:	9a04      	ldr	r2, [sp, #16]
 801bc72:	441a      	add	r2, r3
 801bc74:	9204      	str	r2, [sp, #16]
 801bc76:	9a05      	ldr	r2, [sp, #20]
 801bc78:	2101      	movs	r1, #1
 801bc7a:	441a      	add	r2, r3
 801bc7c:	4620      	mov	r0, r4
 801bc7e:	9205      	str	r2, [sp, #20]
 801bc80:	f000 ff24 	bl	801cacc <__i2b>
 801bc84:	4607      	mov	r7, r0
 801bc86:	2d00      	cmp	r5, #0
 801bc88:	dd0c      	ble.n	801bca4 <_dtoa_r+0x754>
 801bc8a:	9b05      	ldr	r3, [sp, #20]
 801bc8c:	2b00      	cmp	r3, #0
 801bc8e:	dd09      	ble.n	801bca4 <_dtoa_r+0x754>
 801bc90:	42ab      	cmp	r3, r5
 801bc92:	9a04      	ldr	r2, [sp, #16]
 801bc94:	bfa8      	it	ge
 801bc96:	462b      	movge	r3, r5
 801bc98:	1ad2      	subs	r2, r2, r3
 801bc9a:	9204      	str	r2, [sp, #16]
 801bc9c:	9a05      	ldr	r2, [sp, #20]
 801bc9e:	1aed      	subs	r5, r5, r3
 801bca0:	1ad3      	subs	r3, r2, r3
 801bca2:	9305      	str	r3, [sp, #20]
 801bca4:	9b07      	ldr	r3, [sp, #28]
 801bca6:	b31b      	cbz	r3, 801bcf0 <_dtoa_r+0x7a0>
 801bca8:	9b08      	ldr	r3, [sp, #32]
 801bcaa:	2b00      	cmp	r3, #0
 801bcac:	f000 80af 	beq.w	801be0e <_dtoa_r+0x8be>
 801bcb0:	2e00      	cmp	r6, #0
 801bcb2:	dd13      	ble.n	801bcdc <_dtoa_r+0x78c>
 801bcb4:	4639      	mov	r1, r7
 801bcb6:	4632      	mov	r2, r6
 801bcb8:	4620      	mov	r0, r4
 801bcba:	f000 ffc7 	bl	801cc4c <__pow5mult>
 801bcbe:	ee18 2a10 	vmov	r2, s16
 801bcc2:	4601      	mov	r1, r0
 801bcc4:	4607      	mov	r7, r0
 801bcc6:	4620      	mov	r0, r4
 801bcc8:	f000 ff16 	bl	801caf8 <__multiply>
 801bccc:	ee18 1a10 	vmov	r1, s16
 801bcd0:	4680      	mov	r8, r0
 801bcd2:	4620      	mov	r0, r4
 801bcd4:	f000 fdf8 	bl	801c8c8 <_Bfree>
 801bcd8:	ee08 8a10 	vmov	s16, r8
 801bcdc:	9b07      	ldr	r3, [sp, #28]
 801bcde:	1b9a      	subs	r2, r3, r6
 801bce0:	d006      	beq.n	801bcf0 <_dtoa_r+0x7a0>
 801bce2:	ee18 1a10 	vmov	r1, s16
 801bce6:	4620      	mov	r0, r4
 801bce8:	f000 ffb0 	bl	801cc4c <__pow5mult>
 801bcec:	ee08 0a10 	vmov	s16, r0
 801bcf0:	2101      	movs	r1, #1
 801bcf2:	4620      	mov	r0, r4
 801bcf4:	f000 feea 	bl	801cacc <__i2b>
 801bcf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bcfa:	2b00      	cmp	r3, #0
 801bcfc:	4606      	mov	r6, r0
 801bcfe:	f340 8088 	ble.w	801be12 <_dtoa_r+0x8c2>
 801bd02:	461a      	mov	r2, r3
 801bd04:	4601      	mov	r1, r0
 801bd06:	4620      	mov	r0, r4
 801bd08:	f000 ffa0 	bl	801cc4c <__pow5mult>
 801bd0c:	9b06      	ldr	r3, [sp, #24]
 801bd0e:	2b01      	cmp	r3, #1
 801bd10:	4606      	mov	r6, r0
 801bd12:	f340 8081 	ble.w	801be18 <_dtoa_r+0x8c8>
 801bd16:	f04f 0800 	mov.w	r8, #0
 801bd1a:	6933      	ldr	r3, [r6, #16]
 801bd1c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801bd20:	6918      	ldr	r0, [r3, #16]
 801bd22:	f000 fe83 	bl	801ca2c <__hi0bits>
 801bd26:	f1c0 0020 	rsb	r0, r0, #32
 801bd2a:	9b05      	ldr	r3, [sp, #20]
 801bd2c:	4418      	add	r0, r3
 801bd2e:	f010 001f 	ands.w	r0, r0, #31
 801bd32:	f000 8092 	beq.w	801be5a <_dtoa_r+0x90a>
 801bd36:	f1c0 0320 	rsb	r3, r0, #32
 801bd3a:	2b04      	cmp	r3, #4
 801bd3c:	f340 808a 	ble.w	801be54 <_dtoa_r+0x904>
 801bd40:	f1c0 001c 	rsb	r0, r0, #28
 801bd44:	9b04      	ldr	r3, [sp, #16]
 801bd46:	4403      	add	r3, r0
 801bd48:	9304      	str	r3, [sp, #16]
 801bd4a:	9b05      	ldr	r3, [sp, #20]
 801bd4c:	4403      	add	r3, r0
 801bd4e:	4405      	add	r5, r0
 801bd50:	9305      	str	r3, [sp, #20]
 801bd52:	9b04      	ldr	r3, [sp, #16]
 801bd54:	2b00      	cmp	r3, #0
 801bd56:	dd07      	ble.n	801bd68 <_dtoa_r+0x818>
 801bd58:	ee18 1a10 	vmov	r1, s16
 801bd5c:	461a      	mov	r2, r3
 801bd5e:	4620      	mov	r0, r4
 801bd60:	f000 ffce 	bl	801cd00 <__lshift>
 801bd64:	ee08 0a10 	vmov	s16, r0
 801bd68:	9b05      	ldr	r3, [sp, #20]
 801bd6a:	2b00      	cmp	r3, #0
 801bd6c:	dd05      	ble.n	801bd7a <_dtoa_r+0x82a>
 801bd6e:	4631      	mov	r1, r6
 801bd70:	461a      	mov	r2, r3
 801bd72:	4620      	mov	r0, r4
 801bd74:	f000 ffc4 	bl	801cd00 <__lshift>
 801bd78:	4606      	mov	r6, r0
 801bd7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bd7c:	2b00      	cmp	r3, #0
 801bd7e:	d06e      	beq.n	801be5e <_dtoa_r+0x90e>
 801bd80:	ee18 0a10 	vmov	r0, s16
 801bd84:	4631      	mov	r1, r6
 801bd86:	f001 f82b 	bl	801cde0 <__mcmp>
 801bd8a:	2800      	cmp	r0, #0
 801bd8c:	da67      	bge.n	801be5e <_dtoa_r+0x90e>
 801bd8e:	9b00      	ldr	r3, [sp, #0]
 801bd90:	3b01      	subs	r3, #1
 801bd92:	ee18 1a10 	vmov	r1, s16
 801bd96:	9300      	str	r3, [sp, #0]
 801bd98:	220a      	movs	r2, #10
 801bd9a:	2300      	movs	r3, #0
 801bd9c:	4620      	mov	r0, r4
 801bd9e:	f000 fdb5 	bl	801c90c <__multadd>
 801bda2:	9b08      	ldr	r3, [sp, #32]
 801bda4:	ee08 0a10 	vmov	s16, r0
 801bda8:	2b00      	cmp	r3, #0
 801bdaa:	f000 81b1 	beq.w	801c110 <_dtoa_r+0xbc0>
 801bdae:	2300      	movs	r3, #0
 801bdb0:	4639      	mov	r1, r7
 801bdb2:	220a      	movs	r2, #10
 801bdb4:	4620      	mov	r0, r4
 801bdb6:	f000 fda9 	bl	801c90c <__multadd>
 801bdba:	9b02      	ldr	r3, [sp, #8]
 801bdbc:	2b00      	cmp	r3, #0
 801bdbe:	4607      	mov	r7, r0
 801bdc0:	f300 808e 	bgt.w	801bee0 <_dtoa_r+0x990>
 801bdc4:	9b06      	ldr	r3, [sp, #24]
 801bdc6:	2b02      	cmp	r3, #2
 801bdc8:	dc51      	bgt.n	801be6e <_dtoa_r+0x91e>
 801bdca:	e089      	b.n	801bee0 <_dtoa_r+0x990>
 801bdcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bdce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801bdd2:	e74b      	b.n	801bc6c <_dtoa_r+0x71c>
 801bdd4:	9b03      	ldr	r3, [sp, #12]
 801bdd6:	1e5e      	subs	r6, r3, #1
 801bdd8:	9b07      	ldr	r3, [sp, #28]
 801bdda:	42b3      	cmp	r3, r6
 801bddc:	bfbf      	itttt	lt
 801bdde:	9b07      	ldrlt	r3, [sp, #28]
 801bde0:	9607      	strlt	r6, [sp, #28]
 801bde2:	1af2      	sublt	r2, r6, r3
 801bde4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801bde6:	bfb6      	itet	lt
 801bde8:	189b      	addlt	r3, r3, r2
 801bdea:	1b9e      	subge	r6, r3, r6
 801bdec:	930a      	strlt	r3, [sp, #40]	; 0x28
 801bdee:	9b03      	ldr	r3, [sp, #12]
 801bdf0:	bfb8      	it	lt
 801bdf2:	2600      	movlt	r6, #0
 801bdf4:	2b00      	cmp	r3, #0
 801bdf6:	bfb7      	itett	lt
 801bdf8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801bdfc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 801be00:	1a9d      	sublt	r5, r3, r2
 801be02:	2300      	movlt	r3, #0
 801be04:	e734      	b.n	801bc70 <_dtoa_r+0x720>
 801be06:	9e07      	ldr	r6, [sp, #28]
 801be08:	9d04      	ldr	r5, [sp, #16]
 801be0a:	9f08      	ldr	r7, [sp, #32]
 801be0c:	e73b      	b.n	801bc86 <_dtoa_r+0x736>
 801be0e:	9a07      	ldr	r2, [sp, #28]
 801be10:	e767      	b.n	801bce2 <_dtoa_r+0x792>
 801be12:	9b06      	ldr	r3, [sp, #24]
 801be14:	2b01      	cmp	r3, #1
 801be16:	dc18      	bgt.n	801be4a <_dtoa_r+0x8fa>
 801be18:	f1ba 0f00 	cmp.w	sl, #0
 801be1c:	d115      	bne.n	801be4a <_dtoa_r+0x8fa>
 801be1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801be22:	b993      	cbnz	r3, 801be4a <_dtoa_r+0x8fa>
 801be24:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801be28:	0d1b      	lsrs	r3, r3, #20
 801be2a:	051b      	lsls	r3, r3, #20
 801be2c:	b183      	cbz	r3, 801be50 <_dtoa_r+0x900>
 801be2e:	9b04      	ldr	r3, [sp, #16]
 801be30:	3301      	adds	r3, #1
 801be32:	9304      	str	r3, [sp, #16]
 801be34:	9b05      	ldr	r3, [sp, #20]
 801be36:	3301      	adds	r3, #1
 801be38:	9305      	str	r3, [sp, #20]
 801be3a:	f04f 0801 	mov.w	r8, #1
 801be3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801be40:	2b00      	cmp	r3, #0
 801be42:	f47f af6a 	bne.w	801bd1a <_dtoa_r+0x7ca>
 801be46:	2001      	movs	r0, #1
 801be48:	e76f      	b.n	801bd2a <_dtoa_r+0x7da>
 801be4a:	f04f 0800 	mov.w	r8, #0
 801be4e:	e7f6      	b.n	801be3e <_dtoa_r+0x8ee>
 801be50:	4698      	mov	r8, r3
 801be52:	e7f4      	b.n	801be3e <_dtoa_r+0x8ee>
 801be54:	f43f af7d 	beq.w	801bd52 <_dtoa_r+0x802>
 801be58:	4618      	mov	r0, r3
 801be5a:	301c      	adds	r0, #28
 801be5c:	e772      	b.n	801bd44 <_dtoa_r+0x7f4>
 801be5e:	9b03      	ldr	r3, [sp, #12]
 801be60:	2b00      	cmp	r3, #0
 801be62:	dc37      	bgt.n	801bed4 <_dtoa_r+0x984>
 801be64:	9b06      	ldr	r3, [sp, #24]
 801be66:	2b02      	cmp	r3, #2
 801be68:	dd34      	ble.n	801bed4 <_dtoa_r+0x984>
 801be6a:	9b03      	ldr	r3, [sp, #12]
 801be6c:	9302      	str	r3, [sp, #8]
 801be6e:	9b02      	ldr	r3, [sp, #8]
 801be70:	b96b      	cbnz	r3, 801be8e <_dtoa_r+0x93e>
 801be72:	4631      	mov	r1, r6
 801be74:	2205      	movs	r2, #5
 801be76:	4620      	mov	r0, r4
 801be78:	f000 fd48 	bl	801c90c <__multadd>
 801be7c:	4601      	mov	r1, r0
 801be7e:	4606      	mov	r6, r0
 801be80:	ee18 0a10 	vmov	r0, s16
 801be84:	f000 ffac 	bl	801cde0 <__mcmp>
 801be88:	2800      	cmp	r0, #0
 801be8a:	f73f adbb 	bgt.w	801ba04 <_dtoa_r+0x4b4>
 801be8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801be90:	9d01      	ldr	r5, [sp, #4]
 801be92:	43db      	mvns	r3, r3
 801be94:	9300      	str	r3, [sp, #0]
 801be96:	f04f 0800 	mov.w	r8, #0
 801be9a:	4631      	mov	r1, r6
 801be9c:	4620      	mov	r0, r4
 801be9e:	f000 fd13 	bl	801c8c8 <_Bfree>
 801bea2:	2f00      	cmp	r7, #0
 801bea4:	f43f aea4 	beq.w	801bbf0 <_dtoa_r+0x6a0>
 801bea8:	f1b8 0f00 	cmp.w	r8, #0
 801beac:	d005      	beq.n	801beba <_dtoa_r+0x96a>
 801beae:	45b8      	cmp	r8, r7
 801beb0:	d003      	beq.n	801beba <_dtoa_r+0x96a>
 801beb2:	4641      	mov	r1, r8
 801beb4:	4620      	mov	r0, r4
 801beb6:	f000 fd07 	bl	801c8c8 <_Bfree>
 801beba:	4639      	mov	r1, r7
 801bebc:	4620      	mov	r0, r4
 801bebe:	f000 fd03 	bl	801c8c8 <_Bfree>
 801bec2:	e695      	b.n	801bbf0 <_dtoa_r+0x6a0>
 801bec4:	2600      	movs	r6, #0
 801bec6:	4637      	mov	r7, r6
 801bec8:	e7e1      	b.n	801be8e <_dtoa_r+0x93e>
 801beca:	9700      	str	r7, [sp, #0]
 801becc:	4637      	mov	r7, r6
 801bece:	e599      	b.n	801ba04 <_dtoa_r+0x4b4>
 801bed0:	40240000 	.word	0x40240000
 801bed4:	9b08      	ldr	r3, [sp, #32]
 801bed6:	2b00      	cmp	r3, #0
 801bed8:	f000 80ca 	beq.w	801c070 <_dtoa_r+0xb20>
 801bedc:	9b03      	ldr	r3, [sp, #12]
 801bede:	9302      	str	r3, [sp, #8]
 801bee0:	2d00      	cmp	r5, #0
 801bee2:	dd05      	ble.n	801bef0 <_dtoa_r+0x9a0>
 801bee4:	4639      	mov	r1, r7
 801bee6:	462a      	mov	r2, r5
 801bee8:	4620      	mov	r0, r4
 801beea:	f000 ff09 	bl	801cd00 <__lshift>
 801beee:	4607      	mov	r7, r0
 801bef0:	f1b8 0f00 	cmp.w	r8, #0
 801bef4:	d05b      	beq.n	801bfae <_dtoa_r+0xa5e>
 801bef6:	6879      	ldr	r1, [r7, #4]
 801bef8:	4620      	mov	r0, r4
 801befa:	f000 fca5 	bl	801c848 <_Balloc>
 801befe:	4605      	mov	r5, r0
 801bf00:	b928      	cbnz	r0, 801bf0e <_dtoa_r+0x9be>
 801bf02:	4b87      	ldr	r3, [pc, #540]	; (801c120 <_dtoa_r+0xbd0>)
 801bf04:	4602      	mov	r2, r0
 801bf06:	f240 21ea 	movw	r1, #746	; 0x2ea
 801bf0a:	f7ff bb3b 	b.w	801b584 <_dtoa_r+0x34>
 801bf0e:	693a      	ldr	r2, [r7, #16]
 801bf10:	3202      	adds	r2, #2
 801bf12:	0092      	lsls	r2, r2, #2
 801bf14:	f107 010c 	add.w	r1, r7, #12
 801bf18:	300c      	adds	r0, #12
 801bf1a:	f7fd fd2b 	bl	8019974 <memcpy>
 801bf1e:	2201      	movs	r2, #1
 801bf20:	4629      	mov	r1, r5
 801bf22:	4620      	mov	r0, r4
 801bf24:	f000 feec 	bl	801cd00 <__lshift>
 801bf28:	9b01      	ldr	r3, [sp, #4]
 801bf2a:	f103 0901 	add.w	r9, r3, #1
 801bf2e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801bf32:	4413      	add	r3, r2
 801bf34:	9305      	str	r3, [sp, #20]
 801bf36:	f00a 0301 	and.w	r3, sl, #1
 801bf3a:	46b8      	mov	r8, r7
 801bf3c:	9304      	str	r3, [sp, #16]
 801bf3e:	4607      	mov	r7, r0
 801bf40:	4631      	mov	r1, r6
 801bf42:	ee18 0a10 	vmov	r0, s16
 801bf46:	f7ff fa77 	bl	801b438 <quorem>
 801bf4a:	4641      	mov	r1, r8
 801bf4c:	9002      	str	r0, [sp, #8]
 801bf4e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801bf52:	ee18 0a10 	vmov	r0, s16
 801bf56:	f000 ff43 	bl	801cde0 <__mcmp>
 801bf5a:	463a      	mov	r2, r7
 801bf5c:	9003      	str	r0, [sp, #12]
 801bf5e:	4631      	mov	r1, r6
 801bf60:	4620      	mov	r0, r4
 801bf62:	f000 ff59 	bl	801ce18 <__mdiff>
 801bf66:	68c2      	ldr	r2, [r0, #12]
 801bf68:	f109 3bff 	add.w	fp, r9, #4294967295
 801bf6c:	4605      	mov	r5, r0
 801bf6e:	bb02      	cbnz	r2, 801bfb2 <_dtoa_r+0xa62>
 801bf70:	4601      	mov	r1, r0
 801bf72:	ee18 0a10 	vmov	r0, s16
 801bf76:	f000 ff33 	bl	801cde0 <__mcmp>
 801bf7a:	4602      	mov	r2, r0
 801bf7c:	4629      	mov	r1, r5
 801bf7e:	4620      	mov	r0, r4
 801bf80:	9207      	str	r2, [sp, #28]
 801bf82:	f000 fca1 	bl	801c8c8 <_Bfree>
 801bf86:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801bf8a:	ea43 0102 	orr.w	r1, r3, r2
 801bf8e:	9b04      	ldr	r3, [sp, #16]
 801bf90:	430b      	orrs	r3, r1
 801bf92:	464d      	mov	r5, r9
 801bf94:	d10f      	bne.n	801bfb6 <_dtoa_r+0xa66>
 801bf96:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801bf9a:	d02a      	beq.n	801bff2 <_dtoa_r+0xaa2>
 801bf9c:	9b03      	ldr	r3, [sp, #12]
 801bf9e:	2b00      	cmp	r3, #0
 801bfa0:	dd02      	ble.n	801bfa8 <_dtoa_r+0xa58>
 801bfa2:	9b02      	ldr	r3, [sp, #8]
 801bfa4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 801bfa8:	f88b a000 	strb.w	sl, [fp]
 801bfac:	e775      	b.n	801be9a <_dtoa_r+0x94a>
 801bfae:	4638      	mov	r0, r7
 801bfb0:	e7ba      	b.n	801bf28 <_dtoa_r+0x9d8>
 801bfb2:	2201      	movs	r2, #1
 801bfb4:	e7e2      	b.n	801bf7c <_dtoa_r+0xa2c>
 801bfb6:	9b03      	ldr	r3, [sp, #12]
 801bfb8:	2b00      	cmp	r3, #0
 801bfba:	db04      	blt.n	801bfc6 <_dtoa_r+0xa76>
 801bfbc:	9906      	ldr	r1, [sp, #24]
 801bfbe:	430b      	orrs	r3, r1
 801bfc0:	9904      	ldr	r1, [sp, #16]
 801bfc2:	430b      	orrs	r3, r1
 801bfc4:	d122      	bne.n	801c00c <_dtoa_r+0xabc>
 801bfc6:	2a00      	cmp	r2, #0
 801bfc8:	ddee      	ble.n	801bfa8 <_dtoa_r+0xa58>
 801bfca:	ee18 1a10 	vmov	r1, s16
 801bfce:	2201      	movs	r2, #1
 801bfd0:	4620      	mov	r0, r4
 801bfd2:	f000 fe95 	bl	801cd00 <__lshift>
 801bfd6:	4631      	mov	r1, r6
 801bfd8:	ee08 0a10 	vmov	s16, r0
 801bfdc:	f000 ff00 	bl	801cde0 <__mcmp>
 801bfe0:	2800      	cmp	r0, #0
 801bfe2:	dc03      	bgt.n	801bfec <_dtoa_r+0xa9c>
 801bfe4:	d1e0      	bne.n	801bfa8 <_dtoa_r+0xa58>
 801bfe6:	f01a 0f01 	tst.w	sl, #1
 801bfea:	d0dd      	beq.n	801bfa8 <_dtoa_r+0xa58>
 801bfec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801bff0:	d1d7      	bne.n	801bfa2 <_dtoa_r+0xa52>
 801bff2:	2339      	movs	r3, #57	; 0x39
 801bff4:	f88b 3000 	strb.w	r3, [fp]
 801bff8:	462b      	mov	r3, r5
 801bffa:	461d      	mov	r5, r3
 801bffc:	3b01      	subs	r3, #1
 801bffe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801c002:	2a39      	cmp	r2, #57	; 0x39
 801c004:	d071      	beq.n	801c0ea <_dtoa_r+0xb9a>
 801c006:	3201      	adds	r2, #1
 801c008:	701a      	strb	r2, [r3, #0]
 801c00a:	e746      	b.n	801be9a <_dtoa_r+0x94a>
 801c00c:	2a00      	cmp	r2, #0
 801c00e:	dd07      	ble.n	801c020 <_dtoa_r+0xad0>
 801c010:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801c014:	d0ed      	beq.n	801bff2 <_dtoa_r+0xaa2>
 801c016:	f10a 0301 	add.w	r3, sl, #1
 801c01a:	f88b 3000 	strb.w	r3, [fp]
 801c01e:	e73c      	b.n	801be9a <_dtoa_r+0x94a>
 801c020:	9b05      	ldr	r3, [sp, #20]
 801c022:	f809 ac01 	strb.w	sl, [r9, #-1]
 801c026:	4599      	cmp	r9, r3
 801c028:	d047      	beq.n	801c0ba <_dtoa_r+0xb6a>
 801c02a:	ee18 1a10 	vmov	r1, s16
 801c02e:	2300      	movs	r3, #0
 801c030:	220a      	movs	r2, #10
 801c032:	4620      	mov	r0, r4
 801c034:	f000 fc6a 	bl	801c90c <__multadd>
 801c038:	45b8      	cmp	r8, r7
 801c03a:	ee08 0a10 	vmov	s16, r0
 801c03e:	f04f 0300 	mov.w	r3, #0
 801c042:	f04f 020a 	mov.w	r2, #10
 801c046:	4641      	mov	r1, r8
 801c048:	4620      	mov	r0, r4
 801c04a:	d106      	bne.n	801c05a <_dtoa_r+0xb0a>
 801c04c:	f000 fc5e 	bl	801c90c <__multadd>
 801c050:	4680      	mov	r8, r0
 801c052:	4607      	mov	r7, r0
 801c054:	f109 0901 	add.w	r9, r9, #1
 801c058:	e772      	b.n	801bf40 <_dtoa_r+0x9f0>
 801c05a:	f000 fc57 	bl	801c90c <__multadd>
 801c05e:	4639      	mov	r1, r7
 801c060:	4680      	mov	r8, r0
 801c062:	2300      	movs	r3, #0
 801c064:	220a      	movs	r2, #10
 801c066:	4620      	mov	r0, r4
 801c068:	f000 fc50 	bl	801c90c <__multadd>
 801c06c:	4607      	mov	r7, r0
 801c06e:	e7f1      	b.n	801c054 <_dtoa_r+0xb04>
 801c070:	9b03      	ldr	r3, [sp, #12]
 801c072:	9302      	str	r3, [sp, #8]
 801c074:	9d01      	ldr	r5, [sp, #4]
 801c076:	ee18 0a10 	vmov	r0, s16
 801c07a:	4631      	mov	r1, r6
 801c07c:	f7ff f9dc 	bl	801b438 <quorem>
 801c080:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801c084:	9b01      	ldr	r3, [sp, #4]
 801c086:	f805 ab01 	strb.w	sl, [r5], #1
 801c08a:	1aea      	subs	r2, r5, r3
 801c08c:	9b02      	ldr	r3, [sp, #8]
 801c08e:	4293      	cmp	r3, r2
 801c090:	dd09      	ble.n	801c0a6 <_dtoa_r+0xb56>
 801c092:	ee18 1a10 	vmov	r1, s16
 801c096:	2300      	movs	r3, #0
 801c098:	220a      	movs	r2, #10
 801c09a:	4620      	mov	r0, r4
 801c09c:	f000 fc36 	bl	801c90c <__multadd>
 801c0a0:	ee08 0a10 	vmov	s16, r0
 801c0a4:	e7e7      	b.n	801c076 <_dtoa_r+0xb26>
 801c0a6:	9b02      	ldr	r3, [sp, #8]
 801c0a8:	2b00      	cmp	r3, #0
 801c0aa:	bfc8      	it	gt
 801c0ac:	461d      	movgt	r5, r3
 801c0ae:	9b01      	ldr	r3, [sp, #4]
 801c0b0:	bfd8      	it	le
 801c0b2:	2501      	movle	r5, #1
 801c0b4:	441d      	add	r5, r3
 801c0b6:	f04f 0800 	mov.w	r8, #0
 801c0ba:	ee18 1a10 	vmov	r1, s16
 801c0be:	2201      	movs	r2, #1
 801c0c0:	4620      	mov	r0, r4
 801c0c2:	f000 fe1d 	bl	801cd00 <__lshift>
 801c0c6:	4631      	mov	r1, r6
 801c0c8:	ee08 0a10 	vmov	s16, r0
 801c0cc:	f000 fe88 	bl	801cde0 <__mcmp>
 801c0d0:	2800      	cmp	r0, #0
 801c0d2:	dc91      	bgt.n	801bff8 <_dtoa_r+0xaa8>
 801c0d4:	d102      	bne.n	801c0dc <_dtoa_r+0xb8c>
 801c0d6:	f01a 0f01 	tst.w	sl, #1
 801c0da:	d18d      	bne.n	801bff8 <_dtoa_r+0xaa8>
 801c0dc:	462b      	mov	r3, r5
 801c0de:	461d      	mov	r5, r3
 801c0e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c0e4:	2a30      	cmp	r2, #48	; 0x30
 801c0e6:	d0fa      	beq.n	801c0de <_dtoa_r+0xb8e>
 801c0e8:	e6d7      	b.n	801be9a <_dtoa_r+0x94a>
 801c0ea:	9a01      	ldr	r2, [sp, #4]
 801c0ec:	429a      	cmp	r2, r3
 801c0ee:	d184      	bne.n	801bffa <_dtoa_r+0xaaa>
 801c0f0:	9b00      	ldr	r3, [sp, #0]
 801c0f2:	3301      	adds	r3, #1
 801c0f4:	9300      	str	r3, [sp, #0]
 801c0f6:	2331      	movs	r3, #49	; 0x31
 801c0f8:	7013      	strb	r3, [r2, #0]
 801c0fa:	e6ce      	b.n	801be9a <_dtoa_r+0x94a>
 801c0fc:	4b09      	ldr	r3, [pc, #36]	; (801c124 <_dtoa_r+0xbd4>)
 801c0fe:	f7ff ba95 	b.w	801b62c <_dtoa_r+0xdc>
 801c102:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c104:	2b00      	cmp	r3, #0
 801c106:	f47f aa6e 	bne.w	801b5e6 <_dtoa_r+0x96>
 801c10a:	4b07      	ldr	r3, [pc, #28]	; (801c128 <_dtoa_r+0xbd8>)
 801c10c:	f7ff ba8e 	b.w	801b62c <_dtoa_r+0xdc>
 801c110:	9b02      	ldr	r3, [sp, #8]
 801c112:	2b00      	cmp	r3, #0
 801c114:	dcae      	bgt.n	801c074 <_dtoa_r+0xb24>
 801c116:	9b06      	ldr	r3, [sp, #24]
 801c118:	2b02      	cmp	r3, #2
 801c11a:	f73f aea8 	bgt.w	801be6e <_dtoa_r+0x91e>
 801c11e:	e7a9      	b.n	801c074 <_dtoa_r+0xb24>
 801c120:	08025678 	.word	0x08025678
 801c124:	0802547c 	.word	0x0802547c
 801c128:	080255f9 	.word	0x080255f9

0801c12c <rshift>:
 801c12c:	6903      	ldr	r3, [r0, #16]
 801c12e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801c132:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c136:	ea4f 1261 	mov.w	r2, r1, asr #5
 801c13a:	f100 0414 	add.w	r4, r0, #20
 801c13e:	dd45      	ble.n	801c1cc <rshift+0xa0>
 801c140:	f011 011f 	ands.w	r1, r1, #31
 801c144:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801c148:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801c14c:	d10c      	bne.n	801c168 <rshift+0x3c>
 801c14e:	f100 0710 	add.w	r7, r0, #16
 801c152:	4629      	mov	r1, r5
 801c154:	42b1      	cmp	r1, r6
 801c156:	d334      	bcc.n	801c1c2 <rshift+0x96>
 801c158:	1a9b      	subs	r3, r3, r2
 801c15a:	009b      	lsls	r3, r3, #2
 801c15c:	1eea      	subs	r2, r5, #3
 801c15e:	4296      	cmp	r6, r2
 801c160:	bf38      	it	cc
 801c162:	2300      	movcc	r3, #0
 801c164:	4423      	add	r3, r4
 801c166:	e015      	b.n	801c194 <rshift+0x68>
 801c168:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801c16c:	f1c1 0820 	rsb	r8, r1, #32
 801c170:	40cf      	lsrs	r7, r1
 801c172:	f105 0e04 	add.w	lr, r5, #4
 801c176:	46a1      	mov	r9, r4
 801c178:	4576      	cmp	r6, lr
 801c17a:	46f4      	mov	ip, lr
 801c17c:	d815      	bhi.n	801c1aa <rshift+0x7e>
 801c17e:	1a9a      	subs	r2, r3, r2
 801c180:	0092      	lsls	r2, r2, #2
 801c182:	3a04      	subs	r2, #4
 801c184:	3501      	adds	r5, #1
 801c186:	42ae      	cmp	r6, r5
 801c188:	bf38      	it	cc
 801c18a:	2200      	movcc	r2, #0
 801c18c:	18a3      	adds	r3, r4, r2
 801c18e:	50a7      	str	r7, [r4, r2]
 801c190:	b107      	cbz	r7, 801c194 <rshift+0x68>
 801c192:	3304      	adds	r3, #4
 801c194:	1b1a      	subs	r2, r3, r4
 801c196:	42a3      	cmp	r3, r4
 801c198:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801c19c:	bf08      	it	eq
 801c19e:	2300      	moveq	r3, #0
 801c1a0:	6102      	str	r2, [r0, #16]
 801c1a2:	bf08      	it	eq
 801c1a4:	6143      	streq	r3, [r0, #20]
 801c1a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c1aa:	f8dc c000 	ldr.w	ip, [ip]
 801c1ae:	fa0c fc08 	lsl.w	ip, ip, r8
 801c1b2:	ea4c 0707 	orr.w	r7, ip, r7
 801c1b6:	f849 7b04 	str.w	r7, [r9], #4
 801c1ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 801c1be:	40cf      	lsrs	r7, r1
 801c1c0:	e7da      	b.n	801c178 <rshift+0x4c>
 801c1c2:	f851 cb04 	ldr.w	ip, [r1], #4
 801c1c6:	f847 cf04 	str.w	ip, [r7, #4]!
 801c1ca:	e7c3      	b.n	801c154 <rshift+0x28>
 801c1cc:	4623      	mov	r3, r4
 801c1ce:	e7e1      	b.n	801c194 <rshift+0x68>

0801c1d0 <__hexdig_fun>:
 801c1d0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801c1d4:	2b09      	cmp	r3, #9
 801c1d6:	d802      	bhi.n	801c1de <__hexdig_fun+0xe>
 801c1d8:	3820      	subs	r0, #32
 801c1da:	b2c0      	uxtb	r0, r0
 801c1dc:	4770      	bx	lr
 801c1de:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801c1e2:	2b05      	cmp	r3, #5
 801c1e4:	d801      	bhi.n	801c1ea <__hexdig_fun+0x1a>
 801c1e6:	3847      	subs	r0, #71	; 0x47
 801c1e8:	e7f7      	b.n	801c1da <__hexdig_fun+0xa>
 801c1ea:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801c1ee:	2b05      	cmp	r3, #5
 801c1f0:	d801      	bhi.n	801c1f6 <__hexdig_fun+0x26>
 801c1f2:	3827      	subs	r0, #39	; 0x27
 801c1f4:	e7f1      	b.n	801c1da <__hexdig_fun+0xa>
 801c1f6:	2000      	movs	r0, #0
 801c1f8:	4770      	bx	lr
	...

0801c1fc <__gethex>:
 801c1fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c200:	ed2d 8b02 	vpush	{d8}
 801c204:	b089      	sub	sp, #36	; 0x24
 801c206:	ee08 0a10 	vmov	s16, r0
 801c20a:	9304      	str	r3, [sp, #16]
 801c20c:	4bb4      	ldr	r3, [pc, #720]	; (801c4e0 <__gethex+0x2e4>)
 801c20e:	681b      	ldr	r3, [r3, #0]
 801c210:	9301      	str	r3, [sp, #4]
 801c212:	4618      	mov	r0, r3
 801c214:	468b      	mov	fp, r1
 801c216:	4690      	mov	r8, r2
 801c218:	f7e3 fff2 	bl	8000200 <strlen>
 801c21c:	9b01      	ldr	r3, [sp, #4]
 801c21e:	f8db 2000 	ldr.w	r2, [fp]
 801c222:	4403      	add	r3, r0
 801c224:	4682      	mov	sl, r0
 801c226:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801c22a:	9305      	str	r3, [sp, #20]
 801c22c:	1c93      	adds	r3, r2, #2
 801c22e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801c232:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801c236:	32fe      	adds	r2, #254	; 0xfe
 801c238:	18d1      	adds	r1, r2, r3
 801c23a:	461f      	mov	r7, r3
 801c23c:	f813 0b01 	ldrb.w	r0, [r3], #1
 801c240:	9100      	str	r1, [sp, #0]
 801c242:	2830      	cmp	r0, #48	; 0x30
 801c244:	d0f8      	beq.n	801c238 <__gethex+0x3c>
 801c246:	f7ff ffc3 	bl	801c1d0 <__hexdig_fun>
 801c24a:	4604      	mov	r4, r0
 801c24c:	2800      	cmp	r0, #0
 801c24e:	d13a      	bne.n	801c2c6 <__gethex+0xca>
 801c250:	9901      	ldr	r1, [sp, #4]
 801c252:	4652      	mov	r2, sl
 801c254:	4638      	mov	r0, r7
 801c256:	f001 fa23 	bl	801d6a0 <strncmp>
 801c25a:	4605      	mov	r5, r0
 801c25c:	2800      	cmp	r0, #0
 801c25e:	d168      	bne.n	801c332 <__gethex+0x136>
 801c260:	f817 000a 	ldrb.w	r0, [r7, sl]
 801c264:	eb07 060a 	add.w	r6, r7, sl
 801c268:	f7ff ffb2 	bl	801c1d0 <__hexdig_fun>
 801c26c:	2800      	cmp	r0, #0
 801c26e:	d062      	beq.n	801c336 <__gethex+0x13a>
 801c270:	4633      	mov	r3, r6
 801c272:	7818      	ldrb	r0, [r3, #0]
 801c274:	2830      	cmp	r0, #48	; 0x30
 801c276:	461f      	mov	r7, r3
 801c278:	f103 0301 	add.w	r3, r3, #1
 801c27c:	d0f9      	beq.n	801c272 <__gethex+0x76>
 801c27e:	f7ff ffa7 	bl	801c1d0 <__hexdig_fun>
 801c282:	2301      	movs	r3, #1
 801c284:	fab0 f480 	clz	r4, r0
 801c288:	0964      	lsrs	r4, r4, #5
 801c28a:	4635      	mov	r5, r6
 801c28c:	9300      	str	r3, [sp, #0]
 801c28e:	463a      	mov	r2, r7
 801c290:	4616      	mov	r6, r2
 801c292:	3201      	adds	r2, #1
 801c294:	7830      	ldrb	r0, [r6, #0]
 801c296:	f7ff ff9b 	bl	801c1d0 <__hexdig_fun>
 801c29a:	2800      	cmp	r0, #0
 801c29c:	d1f8      	bne.n	801c290 <__gethex+0x94>
 801c29e:	9901      	ldr	r1, [sp, #4]
 801c2a0:	4652      	mov	r2, sl
 801c2a2:	4630      	mov	r0, r6
 801c2a4:	f001 f9fc 	bl	801d6a0 <strncmp>
 801c2a8:	b980      	cbnz	r0, 801c2cc <__gethex+0xd0>
 801c2aa:	b94d      	cbnz	r5, 801c2c0 <__gethex+0xc4>
 801c2ac:	eb06 050a 	add.w	r5, r6, sl
 801c2b0:	462a      	mov	r2, r5
 801c2b2:	4616      	mov	r6, r2
 801c2b4:	3201      	adds	r2, #1
 801c2b6:	7830      	ldrb	r0, [r6, #0]
 801c2b8:	f7ff ff8a 	bl	801c1d0 <__hexdig_fun>
 801c2bc:	2800      	cmp	r0, #0
 801c2be:	d1f8      	bne.n	801c2b2 <__gethex+0xb6>
 801c2c0:	1bad      	subs	r5, r5, r6
 801c2c2:	00ad      	lsls	r5, r5, #2
 801c2c4:	e004      	b.n	801c2d0 <__gethex+0xd4>
 801c2c6:	2400      	movs	r4, #0
 801c2c8:	4625      	mov	r5, r4
 801c2ca:	e7e0      	b.n	801c28e <__gethex+0x92>
 801c2cc:	2d00      	cmp	r5, #0
 801c2ce:	d1f7      	bne.n	801c2c0 <__gethex+0xc4>
 801c2d0:	7833      	ldrb	r3, [r6, #0]
 801c2d2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801c2d6:	2b50      	cmp	r3, #80	; 0x50
 801c2d8:	d13b      	bne.n	801c352 <__gethex+0x156>
 801c2da:	7873      	ldrb	r3, [r6, #1]
 801c2dc:	2b2b      	cmp	r3, #43	; 0x2b
 801c2de:	d02c      	beq.n	801c33a <__gethex+0x13e>
 801c2e0:	2b2d      	cmp	r3, #45	; 0x2d
 801c2e2:	d02e      	beq.n	801c342 <__gethex+0x146>
 801c2e4:	1c71      	adds	r1, r6, #1
 801c2e6:	f04f 0900 	mov.w	r9, #0
 801c2ea:	7808      	ldrb	r0, [r1, #0]
 801c2ec:	f7ff ff70 	bl	801c1d0 <__hexdig_fun>
 801c2f0:	1e43      	subs	r3, r0, #1
 801c2f2:	b2db      	uxtb	r3, r3
 801c2f4:	2b18      	cmp	r3, #24
 801c2f6:	d82c      	bhi.n	801c352 <__gethex+0x156>
 801c2f8:	f1a0 0210 	sub.w	r2, r0, #16
 801c2fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801c300:	f7ff ff66 	bl	801c1d0 <__hexdig_fun>
 801c304:	1e43      	subs	r3, r0, #1
 801c306:	b2db      	uxtb	r3, r3
 801c308:	2b18      	cmp	r3, #24
 801c30a:	d91d      	bls.n	801c348 <__gethex+0x14c>
 801c30c:	f1b9 0f00 	cmp.w	r9, #0
 801c310:	d000      	beq.n	801c314 <__gethex+0x118>
 801c312:	4252      	negs	r2, r2
 801c314:	4415      	add	r5, r2
 801c316:	f8cb 1000 	str.w	r1, [fp]
 801c31a:	b1e4      	cbz	r4, 801c356 <__gethex+0x15a>
 801c31c:	9b00      	ldr	r3, [sp, #0]
 801c31e:	2b00      	cmp	r3, #0
 801c320:	bf14      	ite	ne
 801c322:	2700      	movne	r7, #0
 801c324:	2706      	moveq	r7, #6
 801c326:	4638      	mov	r0, r7
 801c328:	b009      	add	sp, #36	; 0x24
 801c32a:	ecbd 8b02 	vpop	{d8}
 801c32e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c332:	463e      	mov	r6, r7
 801c334:	4625      	mov	r5, r4
 801c336:	2401      	movs	r4, #1
 801c338:	e7ca      	b.n	801c2d0 <__gethex+0xd4>
 801c33a:	f04f 0900 	mov.w	r9, #0
 801c33e:	1cb1      	adds	r1, r6, #2
 801c340:	e7d3      	b.n	801c2ea <__gethex+0xee>
 801c342:	f04f 0901 	mov.w	r9, #1
 801c346:	e7fa      	b.n	801c33e <__gethex+0x142>
 801c348:	230a      	movs	r3, #10
 801c34a:	fb03 0202 	mla	r2, r3, r2, r0
 801c34e:	3a10      	subs	r2, #16
 801c350:	e7d4      	b.n	801c2fc <__gethex+0x100>
 801c352:	4631      	mov	r1, r6
 801c354:	e7df      	b.n	801c316 <__gethex+0x11a>
 801c356:	1bf3      	subs	r3, r6, r7
 801c358:	3b01      	subs	r3, #1
 801c35a:	4621      	mov	r1, r4
 801c35c:	2b07      	cmp	r3, #7
 801c35e:	dc0b      	bgt.n	801c378 <__gethex+0x17c>
 801c360:	ee18 0a10 	vmov	r0, s16
 801c364:	f000 fa70 	bl	801c848 <_Balloc>
 801c368:	4604      	mov	r4, r0
 801c36a:	b940      	cbnz	r0, 801c37e <__gethex+0x182>
 801c36c:	4b5d      	ldr	r3, [pc, #372]	; (801c4e4 <__gethex+0x2e8>)
 801c36e:	4602      	mov	r2, r0
 801c370:	21de      	movs	r1, #222	; 0xde
 801c372:	485d      	ldr	r0, [pc, #372]	; (801c4e8 <__gethex+0x2ec>)
 801c374:	f001 f9b6 	bl	801d6e4 <__assert_func>
 801c378:	3101      	adds	r1, #1
 801c37a:	105b      	asrs	r3, r3, #1
 801c37c:	e7ee      	b.n	801c35c <__gethex+0x160>
 801c37e:	f100 0914 	add.w	r9, r0, #20
 801c382:	f04f 0b00 	mov.w	fp, #0
 801c386:	f1ca 0301 	rsb	r3, sl, #1
 801c38a:	f8cd 9008 	str.w	r9, [sp, #8]
 801c38e:	f8cd b000 	str.w	fp, [sp]
 801c392:	9306      	str	r3, [sp, #24]
 801c394:	42b7      	cmp	r7, r6
 801c396:	d340      	bcc.n	801c41a <__gethex+0x21e>
 801c398:	9802      	ldr	r0, [sp, #8]
 801c39a:	9b00      	ldr	r3, [sp, #0]
 801c39c:	f840 3b04 	str.w	r3, [r0], #4
 801c3a0:	eba0 0009 	sub.w	r0, r0, r9
 801c3a4:	1080      	asrs	r0, r0, #2
 801c3a6:	0146      	lsls	r6, r0, #5
 801c3a8:	6120      	str	r0, [r4, #16]
 801c3aa:	4618      	mov	r0, r3
 801c3ac:	f000 fb3e 	bl	801ca2c <__hi0bits>
 801c3b0:	1a30      	subs	r0, r6, r0
 801c3b2:	f8d8 6000 	ldr.w	r6, [r8]
 801c3b6:	42b0      	cmp	r0, r6
 801c3b8:	dd63      	ble.n	801c482 <__gethex+0x286>
 801c3ba:	1b87      	subs	r7, r0, r6
 801c3bc:	4639      	mov	r1, r7
 801c3be:	4620      	mov	r0, r4
 801c3c0:	f000 fee2 	bl	801d188 <__any_on>
 801c3c4:	4682      	mov	sl, r0
 801c3c6:	b1a8      	cbz	r0, 801c3f4 <__gethex+0x1f8>
 801c3c8:	1e7b      	subs	r3, r7, #1
 801c3ca:	1159      	asrs	r1, r3, #5
 801c3cc:	f003 021f 	and.w	r2, r3, #31
 801c3d0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801c3d4:	f04f 0a01 	mov.w	sl, #1
 801c3d8:	fa0a f202 	lsl.w	r2, sl, r2
 801c3dc:	420a      	tst	r2, r1
 801c3de:	d009      	beq.n	801c3f4 <__gethex+0x1f8>
 801c3e0:	4553      	cmp	r3, sl
 801c3e2:	dd05      	ble.n	801c3f0 <__gethex+0x1f4>
 801c3e4:	1eb9      	subs	r1, r7, #2
 801c3e6:	4620      	mov	r0, r4
 801c3e8:	f000 fece 	bl	801d188 <__any_on>
 801c3ec:	2800      	cmp	r0, #0
 801c3ee:	d145      	bne.n	801c47c <__gethex+0x280>
 801c3f0:	f04f 0a02 	mov.w	sl, #2
 801c3f4:	4639      	mov	r1, r7
 801c3f6:	4620      	mov	r0, r4
 801c3f8:	f7ff fe98 	bl	801c12c <rshift>
 801c3fc:	443d      	add	r5, r7
 801c3fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801c402:	42ab      	cmp	r3, r5
 801c404:	da4c      	bge.n	801c4a0 <__gethex+0x2a4>
 801c406:	ee18 0a10 	vmov	r0, s16
 801c40a:	4621      	mov	r1, r4
 801c40c:	f000 fa5c 	bl	801c8c8 <_Bfree>
 801c410:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c412:	2300      	movs	r3, #0
 801c414:	6013      	str	r3, [r2, #0]
 801c416:	27a3      	movs	r7, #163	; 0xa3
 801c418:	e785      	b.n	801c326 <__gethex+0x12a>
 801c41a:	1e73      	subs	r3, r6, #1
 801c41c:	9a05      	ldr	r2, [sp, #20]
 801c41e:	9303      	str	r3, [sp, #12]
 801c420:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801c424:	4293      	cmp	r3, r2
 801c426:	d019      	beq.n	801c45c <__gethex+0x260>
 801c428:	f1bb 0f20 	cmp.w	fp, #32
 801c42c:	d107      	bne.n	801c43e <__gethex+0x242>
 801c42e:	9b02      	ldr	r3, [sp, #8]
 801c430:	9a00      	ldr	r2, [sp, #0]
 801c432:	f843 2b04 	str.w	r2, [r3], #4
 801c436:	9302      	str	r3, [sp, #8]
 801c438:	2300      	movs	r3, #0
 801c43a:	9300      	str	r3, [sp, #0]
 801c43c:	469b      	mov	fp, r3
 801c43e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801c442:	f7ff fec5 	bl	801c1d0 <__hexdig_fun>
 801c446:	9b00      	ldr	r3, [sp, #0]
 801c448:	f000 000f 	and.w	r0, r0, #15
 801c44c:	fa00 f00b 	lsl.w	r0, r0, fp
 801c450:	4303      	orrs	r3, r0
 801c452:	9300      	str	r3, [sp, #0]
 801c454:	f10b 0b04 	add.w	fp, fp, #4
 801c458:	9b03      	ldr	r3, [sp, #12]
 801c45a:	e00d      	b.n	801c478 <__gethex+0x27c>
 801c45c:	9b03      	ldr	r3, [sp, #12]
 801c45e:	9a06      	ldr	r2, [sp, #24]
 801c460:	4413      	add	r3, r2
 801c462:	42bb      	cmp	r3, r7
 801c464:	d3e0      	bcc.n	801c428 <__gethex+0x22c>
 801c466:	4618      	mov	r0, r3
 801c468:	9901      	ldr	r1, [sp, #4]
 801c46a:	9307      	str	r3, [sp, #28]
 801c46c:	4652      	mov	r2, sl
 801c46e:	f001 f917 	bl	801d6a0 <strncmp>
 801c472:	9b07      	ldr	r3, [sp, #28]
 801c474:	2800      	cmp	r0, #0
 801c476:	d1d7      	bne.n	801c428 <__gethex+0x22c>
 801c478:	461e      	mov	r6, r3
 801c47a:	e78b      	b.n	801c394 <__gethex+0x198>
 801c47c:	f04f 0a03 	mov.w	sl, #3
 801c480:	e7b8      	b.n	801c3f4 <__gethex+0x1f8>
 801c482:	da0a      	bge.n	801c49a <__gethex+0x29e>
 801c484:	1a37      	subs	r7, r6, r0
 801c486:	4621      	mov	r1, r4
 801c488:	ee18 0a10 	vmov	r0, s16
 801c48c:	463a      	mov	r2, r7
 801c48e:	f000 fc37 	bl	801cd00 <__lshift>
 801c492:	1bed      	subs	r5, r5, r7
 801c494:	4604      	mov	r4, r0
 801c496:	f100 0914 	add.w	r9, r0, #20
 801c49a:	f04f 0a00 	mov.w	sl, #0
 801c49e:	e7ae      	b.n	801c3fe <__gethex+0x202>
 801c4a0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801c4a4:	42a8      	cmp	r0, r5
 801c4a6:	dd72      	ble.n	801c58e <__gethex+0x392>
 801c4a8:	1b45      	subs	r5, r0, r5
 801c4aa:	42ae      	cmp	r6, r5
 801c4ac:	dc36      	bgt.n	801c51c <__gethex+0x320>
 801c4ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801c4b2:	2b02      	cmp	r3, #2
 801c4b4:	d02a      	beq.n	801c50c <__gethex+0x310>
 801c4b6:	2b03      	cmp	r3, #3
 801c4b8:	d02c      	beq.n	801c514 <__gethex+0x318>
 801c4ba:	2b01      	cmp	r3, #1
 801c4bc:	d11c      	bne.n	801c4f8 <__gethex+0x2fc>
 801c4be:	42ae      	cmp	r6, r5
 801c4c0:	d11a      	bne.n	801c4f8 <__gethex+0x2fc>
 801c4c2:	2e01      	cmp	r6, #1
 801c4c4:	d112      	bne.n	801c4ec <__gethex+0x2f0>
 801c4c6:	9a04      	ldr	r2, [sp, #16]
 801c4c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801c4cc:	6013      	str	r3, [r2, #0]
 801c4ce:	2301      	movs	r3, #1
 801c4d0:	6123      	str	r3, [r4, #16]
 801c4d2:	f8c9 3000 	str.w	r3, [r9]
 801c4d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c4d8:	2762      	movs	r7, #98	; 0x62
 801c4da:	601c      	str	r4, [r3, #0]
 801c4dc:	e723      	b.n	801c326 <__gethex+0x12a>
 801c4de:	bf00      	nop
 801c4e0:	080256f0 	.word	0x080256f0
 801c4e4:	08025678 	.word	0x08025678
 801c4e8:	08025689 	.word	0x08025689
 801c4ec:	1e71      	subs	r1, r6, #1
 801c4ee:	4620      	mov	r0, r4
 801c4f0:	f000 fe4a 	bl	801d188 <__any_on>
 801c4f4:	2800      	cmp	r0, #0
 801c4f6:	d1e6      	bne.n	801c4c6 <__gethex+0x2ca>
 801c4f8:	ee18 0a10 	vmov	r0, s16
 801c4fc:	4621      	mov	r1, r4
 801c4fe:	f000 f9e3 	bl	801c8c8 <_Bfree>
 801c502:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c504:	2300      	movs	r3, #0
 801c506:	6013      	str	r3, [r2, #0]
 801c508:	2750      	movs	r7, #80	; 0x50
 801c50a:	e70c      	b.n	801c326 <__gethex+0x12a>
 801c50c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c50e:	2b00      	cmp	r3, #0
 801c510:	d1f2      	bne.n	801c4f8 <__gethex+0x2fc>
 801c512:	e7d8      	b.n	801c4c6 <__gethex+0x2ca>
 801c514:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c516:	2b00      	cmp	r3, #0
 801c518:	d1d5      	bne.n	801c4c6 <__gethex+0x2ca>
 801c51a:	e7ed      	b.n	801c4f8 <__gethex+0x2fc>
 801c51c:	1e6f      	subs	r7, r5, #1
 801c51e:	f1ba 0f00 	cmp.w	sl, #0
 801c522:	d131      	bne.n	801c588 <__gethex+0x38c>
 801c524:	b127      	cbz	r7, 801c530 <__gethex+0x334>
 801c526:	4639      	mov	r1, r7
 801c528:	4620      	mov	r0, r4
 801c52a:	f000 fe2d 	bl	801d188 <__any_on>
 801c52e:	4682      	mov	sl, r0
 801c530:	117b      	asrs	r3, r7, #5
 801c532:	2101      	movs	r1, #1
 801c534:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801c538:	f007 071f 	and.w	r7, r7, #31
 801c53c:	fa01 f707 	lsl.w	r7, r1, r7
 801c540:	421f      	tst	r7, r3
 801c542:	4629      	mov	r1, r5
 801c544:	4620      	mov	r0, r4
 801c546:	bf18      	it	ne
 801c548:	f04a 0a02 	orrne.w	sl, sl, #2
 801c54c:	1b76      	subs	r6, r6, r5
 801c54e:	f7ff fded 	bl	801c12c <rshift>
 801c552:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801c556:	2702      	movs	r7, #2
 801c558:	f1ba 0f00 	cmp.w	sl, #0
 801c55c:	d048      	beq.n	801c5f0 <__gethex+0x3f4>
 801c55e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801c562:	2b02      	cmp	r3, #2
 801c564:	d015      	beq.n	801c592 <__gethex+0x396>
 801c566:	2b03      	cmp	r3, #3
 801c568:	d017      	beq.n	801c59a <__gethex+0x39e>
 801c56a:	2b01      	cmp	r3, #1
 801c56c:	d109      	bne.n	801c582 <__gethex+0x386>
 801c56e:	f01a 0f02 	tst.w	sl, #2
 801c572:	d006      	beq.n	801c582 <__gethex+0x386>
 801c574:	f8d9 0000 	ldr.w	r0, [r9]
 801c578:	ea4a 0a00 	orr.w	sl, sl, r0
 801c57c:	f01a 0f01 	tst.w	sl, #1
 801c580:	d10e      	bne.n	801c5a0 <__gethex+0x3a4>
 801c582:	f047 0710 	orr.w	r7, r7, #16
 801c586:	e033      	b.n	801c5f0 <__gethex+0x3f4>
 801c588:	f04f 0a01 	mov.w	sl, #1
 801c58c:	e7d0      	b.n	801c530 <__gethex+0x334>
 801c58e:	2701      	movs	r7, #1
 801c590:	e7e2      	b.n	801c558 <__gethex+0x35c>
 801c592:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c594:	f1c3 0301 	rsb	r3, r3, #1
 801c598:	9315      	str	r3, [sp, #84]	; 0x54
 801c59a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c59c:	2b00      	cmp	r3, #0
 801c59e:	d0f0      	beq.n	801c582 <__gethex+0x386>
 801c5a0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801c5a4:	f104 0314 	add.w	r3, r4, #20
 801c5a8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801c5ac:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801c5b0:	f04f 0c00 	mov.w	ip, #0
 801c5b4:	4618      	mov	r0, r3
 801c5b6:	f853 2b04 	ldr.w	r2, [r3], #4
 801c5ba:	f1b2 3fff 	cmp.w	r2, #4294967295
 801c5be:	d01c      	beq.n	801c5fa <__gethex+0x3fe>
 801c5c0:	3201      	adds	r2, #1
 801c5c2:	6002      	str	r2, [r0, #0]
 801c5c4:	2f02      	cmp	r7, #2
 801c5c6:	f104 0314 	add.w	r3, r4, #20
 801c5ca:	d13f      	bne.n	801c64c <__gethex+0x450>
 801c5cc:	f8d8 2000 	ldr.w	r2, [r8]
 801c5d0:	3a01      	subs	r2, #1
 801c5d2:	42b2      	cmp	r2, r6
 801c5d4:	d10a      	bne.n	801c5ec <__gethex+0x3f0>
 801c5d6:	1171      	asrs	r1, r6, #5
 801c5d8:	2201      	movs	r2, #1
 801c5da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801c5de:	f006 061f 	and.w	r6, r6, #31
 801c5e2:	fa02 f606 	lsl.w	r6, r2, r6
 801c5e6:	421e      	tst	r6, r3
 801c5e8:	bf18      	it	ne
 801c5ea:	4617      	movne	r7, r2
 801c5ec:	f047 0720 	orr.w	r7, r7, #32
 801c5f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c5f2:	601c      	str	r4, [r3, #0]
 801c5f4:	9b04      	ldr	r3, [sp, #16]
 801c5f6:	601d      	str	r5, [r3, #0]
 801c5f8:	e695      	b.n	801c326 <__gethex+0x12a>
 801c5fa:	4299      	cmp	r1, r3
 801c5fc:	f843 cc04 	str.w	ip, [r3, #-4]
 801c600:	d8d8      	bhi.n	801c5b4 <__gethex+0x3b8>
 801c602:	68a3      	ldr	r3, [r4, #8]
 801c604:	459b      	cmp	fp, r3
 801c606:	db19      	blt.n	801c63c <__gethex+0x440>
 801c608:	6861      	ldr	r1, [r4, #4]
 801c60a:	ee18 0a10 	vmov	r0, s16
 801c60e:	3101      	adds	r1, #1
 801c610:	f000 f91a 	bl	801c848 <_Balloc>
 801c614:	4681      	mov	r9, r0
 801c616:	b918      	cbnz	r0, 801c620 <__gethex+0x424>
 801c618:	4b1a      	ldr	r3, [pc, #104]	; (801c684 <__gethex+0x488>)
 801c61a:	4602      	mov	r2, r0
 801c61c:	2184      	movs	r1, #132	; 0x84
 801c61e:	e6a8      	b.n	801c372 <__gethex+0x176>
 801c620:	6922      	ldr	r2, [r4, #16]
 801c622:	3202      	adds	r2, #2
 801c624:	f104 010c 	add.w	r1, r4, #12
 801c628:	0092      	lsls	r2, r2, #2
 801c62a:	300c      	adds	r0, #12
 801c62c:	f7fd f9a2 	bl	8019974 <memcpy>
 801c630:	4621      	mov	r1, r4
 801c632:	ee18 0a10 	vmov	r0, s16
 801c636:	f000 f947 	bl	801c8c8 <_Bfree>
 801c63a:	464c      	mov	r4, r9
 801c63c:	6923      	ldr	r3, [r4, #16]
 801c63e:	1c5a      	adds	r2, r3, #1
 801c640:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801c644:	6122      	str	r2, [r4, #16]
 801c646:	2201      	movs	r2, #1
 801c648:	615a      	str	r2, [r3, #20]
 801c64a:	e7bb      	b.n	801c5c4 <__gethex+0x3c8>
 801c64c:	6922      	ldr	r2, [r4, #16]
 801c64e:	455a      	cmp	r2, fp
 801c650:	dd0b      	ble.n	801c66a <__gethex+0x46e>
 801c652:	2101      	movs	r1, #1
 801c654:	4620      	mov	r0, r4
 801c656:	f7ff fd69 	bl	801c12c <rshift>
 801c65a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801c65e:	3501      	adds	r5, #1
 801c660:	42ab      	cmp	r3, r5
 801c662:	f6ff aed0 	blt.w	801c406 <__gethex+0x20a>
 801c666:	2701      	movs	r7, #1
 801c668:	e7c0      	b.n	801c5ec <__gethex+0x3f0>
 801c66a:	f016 061f 	ands.w	r6, r6, #31
 801c66e:	d0fa      	beq.n	801c666 <__gethex+0x46a>
 801c670:	4453      	add	r3, sl
 801c672:	f1c6 0620 	rsb	r6, r6, #32
 801c676:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801c67a:	f000 f9d7 	bl	801ca2c <__hi0bits>
 801c67e:	42b0      	cmp	r0, r6
 801c680:	dbe7      	blt.n	801c652 <__gethex+0x456>
 801c682:	e7f0      	b.n	801c666 <__gethex+0x46a>
 801c684:	08025678 	.word	0x08025678

0801c688 <L_shift>:
 801c688:	f1c2 0208 	rsb	r2, r2, #8
 801c68c:	0092      	lsls	r2, r2, #2
 801c68e:	b570      	push	{r4, r5, r6, lr}
 801c690:	f1c2 0620 	rsb	r6, r2, #32
 801c694:	6843      	ldr	r3, [r0, #4]
 801c696:	6804      	ldr	r4, [r0, #0]
 801c698:	fa03 f506 	lsl.w	r5, r3, r6
 801c69c:	432c      	orrs	r4, r5
 801c69e:	40d3      	lsrs	r3, r2
 801c6a0:	6004      	str	r4, [r0, #0]
 801c6a2:	f840 3f04 	str.w	r3, [r0, #4]!
 801c6a6:	4288      	cmp	r0, r1
 801c6a8:	d3f4      	bcc.n	801c694 <L_shift+0xc>
 801c6aa:	bd70      	pop	{r4, r5, r6, pc}

0801c6ac <__match>:
 801c6ac:	b530      	push	{r4, r5, lr}
 801c6ae:	6803      	ldr	r3, [r0, #0]
 801c6b0:	3301      	adds	r3, #1
 801c6b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c6b6:	b914      	cbnz	r4, 801c6be <__match+0x12>
 801c6b8:	6003      	str	r3, [r0, #0]
 801c6ba:	2001      	movs	r0, #1
 801c6bc:	bd30      	pop	{r4, r5, pc}
 801c6be:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c6c2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801c6c6:	2d19      	cmp	r5, #25
 801c6c8:	bf98      	it	ls
 801c6ca:	3220      	addls	r2, #32
 801c6cc:	42a2      	cmp	r2, r4
 801c6ce:	d0f0      	beq.n	801c6b2 <__match+0x6>
 801c6d0:	2000      	movs	r0, #0
 801c6d2:	e7f3      	b.n	801c6bc <__match+0x10>

0801c6d4 <__hexnan>:
 801c6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c6d8:	680b      	ldr	r3, [r1, #0]
 801c6da:	115e      	asrs	r6, r3, #5
 801c6dc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801c6e0:	f013 031f 	ands.w	r3, r3, #31
 801c6e4:	b087      	sub	sp, #28
 801c6e6:	bf18      	it	ne
 801c6e8:	3604      	addne	r6, #4
 801c6ea:	2500      	movs	r5, #0
 801c6ec:	1f37      	subs	r7, r6, #4
 801c6ee:	4690      	mov	r8, r2
 801c6f0:	6802      	ldr	r2, [r0, #0]
 801c6f2:	9301      	str	r3, [sp, #4]
 801c6f4:	4682      	mov	sl, r0
 801c6f6:	f846 5c04 	str.w	r5, [r6, #-4]
 801c6fa:	46b9      	mov	r9, r7
 801c6fc:	463c      	mov	r4, r7
 801c6fe:	9502      	str	r5, [sp, #8]
 801c700:	46ab      	mov	fp, r5
 801c702:	7851      	ldrb	r1, [r2, #1]
 801c704:	1c53      	adds	r3, r2, #1
 801c706:	9303      	str	r3, [sp, #12]
 801c708:	b341      	cbz	r1, 801c75c <__hexnan+0x88>
 801c70a:	4608      	mov	r0, r1
 801c70c:	9205      	str	r2, [sp, #20]
 801c70e:	9104      	str	r1, [sp, #16]
 801c710:	f7ff fd5e 	bl	801c1d0 <__hexdig_fun>
 801c714:	2800      	cmp	r0, #0
 801c716:	d14f      	bne.n	801c7b8 <__hexnan+0xe4>
 801c718:	9904      	ldr	r1, [sp, #16]
 801c71a:	9a05      	ldr	r2, [sp, #20]
 801c71c:	2920      	cmp	r1, #32
 801c71e:	d818      	bhi.n	801c752 <__hexnan+0x7e>
 801c720:	9b02      	ldr	r3, [sp, #8]
 801c722:	459b      	cmp	fp, r3
 801c724:	dd13      	ble.n	801c74e <__hexnan+0x7a>
 801c726:	454c      	cmp	r4, r9
 801c728:	d206      	bcs.n	801c738 <__hexnan+0x64>
 801c72a:	2d07      	cmp	r5, #7
 801c72c:	dc04      	bgt.n	801c738 <__hexnan+0x64>
 801c72e:	462a      	mov	r2, r5
 801c730:	4649      	mov	r1, r9
 801c732:	4620      	mov	r0, r4
 801c734:	f7ff ffa8 	bl	801c688 <L_shift>
 801c738:	4544      	cmp	r4, r8
 801c73a:	d950      	bls.n	801c7de <__hexnan+0x10a>
 801c73c:	2300      	movs	r3, #0
 801c73e:	f1a4 0904 	sub.w	r9, r4, #4
 801c742:	f844 3c04 	str.w	r3, [r4, #-4]
 801c746:	f8cd b008 	str.w	fp, [sp, #8]
 801c74a:	464c      	mov	r4, r9
 801c74c:	461d      	mov	r5, r3
 801c74e:	9a03      	ldr	r2, [sp, #12]
 801c750:	e7d7      	b.n	801c702 <__hexnan+0x2e>
 801c752:	2929      	cmp	r1, #41	; 0x29
 801c754:	d156      	bne.n	801c804 <__hexnan+0x130>
 801c756:	3202      	adds	r2, #2
 801c758:	f8ca 2000 	str.w	r2, [sl]
 801c75c:	f1bb 0f00 	cmp.w	fp, #0
 801c760:	d050      	beq.n	801c804 <__hexnan+0x130>
 801c762:	454c      	cmp	r4, r9
 801c764:	d206      	bcs.n	801c774 <__hexnan+0xa0>
 801c766:	2d07      	cmp	r5, #7
 801c768:	dc04      	bgt.n	801c774 <__hexnan+0xa0>
 801c76a:	462a      	mov	r2, r5
 801c76c:	4649      	mov	r1, r9
 801c76e:	4620      	mov	r0, r4
 801c770:	f7ff ff8a 	bl	801c688 <L_shift>
 801c774:	4544      	cmp	r4, r8
 801c776:	d934      	bls.n	801c7e2 <__hexnan+0x10e>
 801c778:	f1a8 0204 	sub.w	r2, r8, #4
 801c77c:	4623      	mov	r3, r4
 801c77e:	f853 1b04 	ldr.w	r1, [r3], #4
 801c782:	f842 1f04 	str.w	r1, [r2, #4]!
 801c786:	429f      	cmp	r7, r3
 801c788:	d2f9      	bcs.n	801c77e <__hexnan+0xaa>
 801c78a:	1b3b      	subs	r3, r7, r4
 801c78c:	f023 0303 	bic.w	r3, r3, #3
 801c790:	3304      	adds	r3, #4
 801c792:	3401      	adds	r4, #1
 801c794:	3e03      	subs	r6, #3
 801c796:	42b4      	cmp	r4, r6
 801c798:	bf88      	it	hi
 801c79a:	2304      	movhi	r3, #4
 801c79c:	4443      	add	r3, r8
 801c79e:	2200      	movs	r2, #0
 801c7a0:	f843 2b04 	str.w	r2, [r3], #4
 801c7a4:	429f      	cmp	r7, r3
 801c7a6:	d2fb      	bcs.n	801c7a0 <__hexnan+0xcc>
 801c7a8:	683b      	ldr	r3, [r7, #0]
 801c7aa:	b91b      	cbnz	r3, 801c7b4 <__hexnan+0xe0>
 801c7ac:	4547      	cmp	r7, r8
 801c7ae:	d127      	bne.n	801c800 <__hexnan+0x12c>
 801c7b0:	2301      	movs	r3, #1
 801c7b2:	603b      	str	r3, [r7, #0]
 801c7b4:	2005      	movs	r0, #5
 801c7b6:	e026      	b.n	801c806 <__hexnan+0x132>
 801c7b8:	3501      	adds	r5, #1
 801c7ba:	2d08      	cmp	r5, #8
 801c7bc:	f10b 0b01 	add.w	fp, fp, #1
 801c7c0:	dd06      	ble.n	801c7d0 <__hexnan+0xfc>
 801c7c2:	4544      	cmp	r4, r8
 801c7c4:	d9c3      	bls.n	801c74e <__hexnan+0x7a>
 801c7c6:	2300      	movs	r3, #0
 801c7c8:	f844 3c04 	str.w	r3, [r4, #-4]
 801c7cc:	2501      	movs	r5, #1
 801c7ce:	3c04      	subs	r4, #4
 801c7d0:	6822      	ldr	r2, [r4, #0]
 801c7d2:	f000 000f 	and.w	r0, r0, #15
 801c7d6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801c7da:	6022      	str	r2, [r4, #0]
 801c7dc:	e7b7      	b.n	801c74e <__hexnan+0x7a>
 801c7de:	2508      	movs	r5, #8
 801c7e0:	e7b5      	b.n	801c74e <__hexnan+0x7a>
 801c7e2:	9b01      	ldr	r3, [sp, #4]
 801c7e4:	2b00      	cmp	r3, #0
 801c7e6:	d0df      	beq.n	801c7a8 <__hexnan+0xd4>
 801c7e8:	f04f 32ff 	mov.w	r2, #4294967295
 801c7ec:	f1c3 0320 	rsb	r3, r3, #32
 801c7f0:	fa22 f303 	lsr.w	r3, r2, r3
 801c7f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801c7f8:	401a      	ands	r2, r3
 801c7fa:	f846 2c04 	str.w	r2, [r6, #-4]
 801c7fe:	e7d3      	b.n	801c7a8 <__hexnan+0xd4>
 801c800:	3f04      	subs	r7, #4
 801c802:	e7d1      	b.n	801c7a8 <__hexnan+0xd4>
 801c804:	2004      	movs	r0, #4
 801c806:	b007      	add	sp, #28
 801c808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c80c <_localeconv_r>:
 801c80c:	4800      	ldr	r0, [pc, #0]	; (801c810 <_localeconv_r+0x4>)
 801c80e:	4770      	bx	lr
 801c810:	200001fc 	.word	0x200001fc

0801c814 <malloc>:
 801c814:	4b02      	ldr	r3, [pc, #8]	; (801c820 <malloc+0xc>)
 801c816:	4601      	mov	r1, r0
 801c818:	6818      	ldr	r0, [r3, #0]
 801c81a:	f000 bd59 	b.w	801d2d0 <_malloc_r>
 801c81e:	bf00      	nop
 801c820:	200000a4 	.word	0x200000a4

0801c824 <__ascii_mbtowc>:
 801c824:	b082      	sub	sp, #8
 801c826:	b901      	cbnz	r1, 801c82a <__ascii_mbtowc+0x6>
 801c828:	a901      	add	r1, sp, #4
 801c82a:	b142      	cbz	r2, 801c83e <__ascii_mbtowc+0x1a>
 801c82c:	b14b      	cbz	r3, 801c842 <__ascii_mbtowc+0x1e>
 801c82e:	7813      	ldrb	r3, [r2, #0]
 801c830:	600b      	str	r3, [r1, #0]
 801c832:	7812      	ldrb	r2, [r2, #0]
 801c834:	1e10      	subs	r0, r2, #0
 801c836:	bf18      	it	ne
 801c838:	2001      	movne	r0, #1
 801c83a:	b002      	add	sp, #8
 801c83c:	4770      	bx	lr
 801c83e:	4610      	mov	r0, r2
 801c840:	e7fb      	b.n	801c83a <__ascii_mbtowc+0x16>
 801c842:	f06f 0001 	mvn.w	r0, #1
 801c846:	e7f8      	b.n	801c83a <__ascii_mbtowc+0x16>

0801c848 <_Balloc>:
 801c848:	b570      	push	{r4, r5, r6, lr}
 801c84a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801c84c:	4604      	mov	r4, r0
 801c84e:	460d      	mov	r5, r1
 801c850:	b976      	cbnz	r6, 801c870 <_Balloc+0x28>
 801c852:	2010      	movs	r0, #16
 801c854:	f7ff ffde 	bl	801c814 <malloc>
 801c858:	4602      	mov	r2, r0
 801c85a:	6260      	str	r0, [r4, #36]	; 0x24
 801c85c:	b920      	cbnz	r0, 801c868 <_Balloc+0x20>
 801c85e:	4b18      	ldr	r3, [pc, #96]	; (801c8c0 <_Balloc+0x78>)
 801c860:	4818      	ldr	r0, [pc, #96]	; (801c8c4 <_Balloc+0x7c>)
 801c862:	2166      	movs	r1, #102	; 0x66
 801c864:	f000 ff3e 	bl	801d6e4 <__assert_func>
 801c868:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c86c:	6006      	str	r6, [r0, #0]
 801c86e:	60c6      	str	r6, [r0, #12]
 801c870:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801c872:	68f3      	ldr	r3, [r6, #12]
 801c874:	b183      	cbz	r3, 801c898 <_Balloc+0x50>
 801c876:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c878:	68db      	ldr	r3, [r3, #12]
 801c87a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801c87e:	b9b8      	cbnz	r0, 801c8b0 <_Balloc+0x68>
 801c880:	2101      	movs	r1, #1
 801c882:	fa01 f605 	lsl.w	r6, r1, r5
 801c886:	1d72      	adds	r2, r6, #5
 801c888:	0092      	lsls	r2, r2, #2
 801c88a:	4620      	mov	r0, r4
 801c88c:	f000 fc9d 	bl	801d1ca <_calloc_r>
 801c890:	b160      	cbz	r0, 801c8ac <_Balloc+0x64>
 801c892:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801c896:	e00e      	b.n	801c8b6 <_Balloc+0x6e>
 801c898:	2221      	movs	r2, #33	; 0x21
 801c89a:	2104      	movs	r1, #4
 801c89c:	4620      	mov	r0, r4
 801c89e:	f000 fc94 	bl	801d1ca <_calloc_r>
 801c8a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c8a4:	60f0      	str	r0, [r6, #12]
 801c8a6:	68db      	ldr	r3, [r3, #12]
 801c8a8:	2b00      	cmp	r3, #0
 801c8aa:	d1e4      	bne.n	801c876 <_Balloc+0x2e>
 801c8ac:	2000      	movs	r0, #0
 801c8ae:	bd70      	pop	{r4, r5, r6, pc}
 801c8b0:	6802      	ldr	r2, [r0, #0]
 801c8b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c8b6:	2300      	movs	r3, #0
 801c8b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801c8bc:	e7f7      	b.n	801c8ae <_Balloc+0x66>
 801c8be:	bf00      	nop
 801c8c0:	08025606 	.word	0x08025606
 801c8c4:	08025704 	.word	0x08025704

0801c8c8 <_Bfree>:
 801c8c8:	b570      	push	{r4, r5, r6, lr}
 801c8ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801c8cc:	4605      	mov	r5, r0
 801c8ce:	460c      	mov	r4, r1
 801c8d0:	b976      	cbnz	r6, 801c8f0 <_Bfree+0x28>
 801c8d2:	2010      	movs	r0, #16
 801c8d4:	f7ff ff9e 	bl	801c814 <malloc>
 801c8d8:	4602      	mov	r2, r0
 801c8da:	6268      	str	r0, [r5, #36]	; 0x24
 801c8dc:	b920      	cbnz	r0, 801c8e8 <_Bfree+0x20>
 801c8de:	4b09      	ldr	r3, [pc, #36]	; (801c904 <_Bfree+0x3c>)
 801c8e0:	4809      	ldr	r0, [pc, #36]	; (801c908 <_Bfree+0x40>)
 801c8e2:	218a      	movs	r1, #138	; 0x8a
 801c8e4:	f000 fefe 	bl	801d6e4 <__assert_func>
 801c8e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c8ec:	6006      	str	r6, [r0, #0]
 801c8ee:	60c6      	str	r6, [r0, #12]
 801c8f0:	b13c      	cbz	r4, 801c902 <_Bfree+0x3a>
 801c8f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801c8f4:	6862      	ldr	r2, [r4, #4]
 801c8f6:	68db      	ldr	r3, [r3, #12]
 801c8f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801c8fc:	6021      	str	r1, [r4, #0]
 801c8fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801c902:	bd70      	pop	{r4, r5, r6, pc}
 801c904:	08025606 	.word	0x08025606
 801c908:	08025704 	.word	0x08025704

0801c90c <__multadd>:
 801c90c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c910:	690d      	ldr	r5, [r1, #16]
 801c912:	4607      	mov	r7, r0
 801c914:	460c      	mov	r4, r1
 801c916:	461e      	mov	r6, r3
 801c918:	f101 0c14 	add.w	ip, r1, #20
 801c91c:	2000      	movs	r0, #0
 801c91e:	f8dc 3000 	ldr.w	r3, [ip]
 801c922:	b299      	uxth	r1, r3
 801c924:	fb02 6101 	mla	r1, r2, r1, r6
 801c928:	0c1e      	lsrs	r6, r3, #16
 801c92a:	0c0b      	lsrs	r3, r1, #16
 801c92c:	fb02 3306 	mla	r3, r2, r6, r3
 801c930:	b289      	uxth	r1, r1
 801c932:	3001      	adds	r0, #1
 801c934:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801c938:	4285      	cmp	r5, r0
 801c93a:	f84c 1b04 	str.w	r1, [ip], #4
 801c93e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801c942:	dcec      	bgt.n	801c91e <__multadd+0x12>
 801c944:	b30e      	cbz	r6, 801c98a <__multadd+0x7e>
 801c946:	68a3      	ldr	r3, [r4, #8]
 801c948:	42ab      	cmp	r3, r5
 801c94a:	dc19      	bgt.n	801c980 <__multadd+0x74>
 801c94c:	6861      	ldr	r1, [r4, #4]
 801c94e:	4638      	mov	r0, r7
 801c950:	3101      	adds	r1, #1
 801c952:	f7ff ff79 	bl	801c848 <_Balloc>
 801c956:	4680      	mov	r8, r0
 801c958:	b928      	cbnz	r0, 801c966 <__multadd+0x5a>
 801c95a:	4602      	mov	r2, r0
 801c95c:	4b0c      	ldr	r3, [pc, #48]	; (801c990 <__multadd+0x84>)
 801c95e:	480d      	ldr	r0, [pc, #52]	; (801c994 <__multadd+0x88>)
 801c960:	21b5      	movs	r1, #181	; 0xb5
 801c962:	f000 febf 	bl	801d6e4 <__assert_func>
 801c966:	6922      	ldr	r2, [r4, #16]
 801c968:	3202      	adds	r2, #2
 801c96a:	f104 010c 	add.w	r1, r4, #12
 801c96e:	0092      	lsls	r2, r2, #2
 801c970:	300c      	adds	r0, #12
 801c972:	f7fc ffff 	bl	8019974 <memcpy>
 801c976:	4621      	mov	r1, r4
 801c978:	4638      	mov	r0, r7
 801c97a:	f7ff ffa5 	bl	801c8c8 <_Bfree>
 801c97e:	4644      	mov	r4, r8
 801c980:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801c984:	3501      	adds	r5, #1
 801c986:	615e      	str	r6, [r3, #20]
 801c988:	6125      	str	r5, [r4, #16]
 801c98a:	4620      	mov	r0, r4
 801c98c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c990:	08025678 	.word	0x08025678
 801c994:	08025704 	.word	0x08025704

0801c998 <__s2b>:
 801c998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c99c:	460c      	mov	r4, r1
 801c99e:	4615      	mov	r5, r2
 801c9a0:	461f      	mov	r7, r3
 801c9a2:	2209      	movs	r2, #9
 801c9a4:	3308      	adds	r3, #8
 801c9a6:	4606      	mov	r6, r0
 801c9a8:	fb93 f3f2 	sdiv	r3, r3, r2
 801c9ac:	2100      	movs	r1, #0
 801c9ae:	2201      	movs	r2, #1
 801c9b0:	429a      	cmp	r2, r3
 801c9b2:	db09      	blt.n	801c9c8 <__s2b+0x30>
 801c9b4:	4630      	mov	r0, r6
 801c9b6:	f7ff ff47 	bl	801c848 <_Balloc>
 801c9ba:	b940      	cbnz	r0, 801c9ce <__s2b+0x36>
 801c9bc:	4602      	mov	r2, r0
 801c9be:	4b19      	ldr	r3, [pc, #100]	; (801ca24 <__s2b+0x8c>)
 801c9c0:	4819      	ldr	r0, [pc, #100]	; (801ca28 <__s2b+0x90>)
 801c9c2:	21ce      	movs	r1, #206	; 0xce
 801c9c4:	f000 fe8e 	bl	801d6e4 <__assert_func>
 801c9c8:	0052      	lsls	r2, r2, #1
 801c9ca:	3101      	adds	r1, #1
 801c9cc:	e7f0      	b.n	801c9b0 <__s2b+0x18>
 801c9ce:	9b08      	ldr	r3, [sp, #32]
 801c9d0:	6143      	str	r3, [r0, #20]
 801c9d2:	2d09      	cmp	r5, #9
 801c9d4:	f04f 0301 	mov.w	r3, #1
 801c9d8:	6103      	str	r3, [r0, #16]
 801c9da:	dd16      	ble.n	801ca0a <__s2b+0x72>
 801c9dc:	f104 0909 	add.w	r9, r4, #9
 801c9e0:	46c8      	mov	r8, r9
 801c9e2:	442c      	add	r4, r5
 801c9e4:	f818 3b01 	ldrb.w	r3, [r8], #1
 801c9e8:	4601      	mov	r1, r0
 801c9ea:	3b30      	subs	r3, #48	; 0x30
 801c9ec:	220a      	movs	r2, #10
 801c9ee:	4630      	mov	r0, r6
 801c9f0:	f7ff ff8c 	bl	801c90c <__multadd>
 801c9f4:	45a0      	cmp	r8, r4
 801c9f6:	d1f5      	bne.n	801c9e4 <__s2b+0x4c>
 801c9f8:	f1a5 0408 	sub.w	r4, r5, #8
 801c9fc:	444c      	add	r4, r9
 801c9fe:	1b2d      	subs	r5, r5, r4
 801ca00:	1963      	adds	r3, r4, r5
 801ca02:	42bb      	cmp	r3, r7
 801ca04:	db04      	blt.n	801ca10 <__s2b+0x78>
 801ca06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ca0a:	340a      	adds	r4, #10
 801ca0c:	2509      	movs	r5, #9
 801ca0e:	e7f6      	b.n	801c9fe <__s2b+0x66>
 801ca10:	f814 3b01 	ldrb.w	r3, [r4], #1
 801ca14:	4601      	mov	r1, r0
 801ca16:	3b30      	subs	r3, #48	; 0x30
 801ca18:	220a      	movs	r2, #10
 801ca1a:	4630      	mov	r0, r6
 801ca1c:	f7ff ff76 	bl	801c90c <__multadd>
 801ca20:	e7ee      	b.n	801ca00 <__s2b+0x68>
 801ca22:	bf00      	nop
 801ca24:	08025678 	.word	0x08025678
 801ca28:	08025704 	.word	0x08025704

0801ca2c <__hi0bits>:
 801ca2c:	0c03      	lsrs	r3, r0, #16
 801ca2e:	041b      	lsls	r3, r3, #16
 801ca30:	b9d3      	cbnz	r3, 801ca68 <__hi0bits+0x3c>
 801ca32:	0400      	lsls	r0, r0, #16
 801ca34:	2310      	movs	r3, #16
 801ca36:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801ca3a:	bf04      	itt	eq
 801ca3c:	0200      	lsleq	r0, r0, #8
 801ca3e:	3308      	addeq	r3, #8
 801ca40:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801ca44:	bf04      	itt	eq
 801ca46:	0100      	lsleq	r0, r0, #4
 801ca48:	3304      	addeq	r3, #4
 801ca4a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801ca4e:	bf04      	itt	eq
 801ca50:	0080      	lsleq	r0, r0, #2
 801ca52:	3302      	addeq	r3, #2
 801ca54:	2800      	cmp	r0, #0
 801ca56:	db05      	blt.n	801ca64 <__hi0bits+0x38>
 801ca58:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801ca5c:	f103 0301 	add.w	r3, r3, #1
 801ca60:	bf08      	it	eq
 801ca62:	2320      	moveq	r3, #32
 801ca64:	4618      	mov	r0, r3
 801ca66:	4770      	bx	lr
 801ca68:	2300      	movs	r3, #0
 801ca6a:	e7e4      	b.n	801ca36 <__hi0bits+0xa>

0801ca6c <__lo0bits>:
 801ca6c:	6803      	ldr	r3, [r0, #0]
 801ca6e:	f013 0207 	ands.w	r2, r3, #7
 801ca72:	4601      	mov	r1, r0
 801ca74:	d00b      	beq.n	801ca8e <__lo0bits+0x22>
 801ca76:	07da      	lsls	r2, r3, #31
 801ca78:	d423      	bmi.n	801cac2 <__lo0bits+0x56>
 801ca7a:	0798      	lsls	r0, r3, #30
 801ca7c:	bf49      	itett	mi
 801ca7e:	085b      	lsrmi	r3, r3, #1
 801ca80:	089b      	lsrpl	r3, r3, #2
 801ca82:	2001      	movmi	r0, #1
 801ca84:	600b      	strmi	r3, [r1, #0]
 801ca86:	bf5c      	itt	pl
 801ca88:	600b      	strpl	r3, [r1, #0]
 801ca8a:	2002      	movpl	r0, #2
 801ca8c:	4770      	bx	lr
 801ca8e:	b298      	uxth	r0, r3
 801ca90:	b9a8      	cbnz	r0, 801cabe <__lo0bits+0x52>
 801ca92:	0c1b      	lsrs	r3, r3, #16
 801ca94:	2010      	movs	r0, #16
 801ca96:	b2da      	uxtb	r2, r3
 801ca98:	b90a      	cbnz	r2, 801ca9e <__lo0bits+0x32>
 801ca9a:	3008      	adds	r0, #8
 801ca9c:	0a1b      	lsrs	r3, r3, #8
 801ca9e:	071a      	lsls	r2, r3, #28
 801caa0:	bf04      	itt	eq
 801caa2:	091b      	lsreq	r3, r3, #4
 801caa4:	3004      	addeq	r0, #4
 801caa6:	079a      	lsls	r2, r3, #30
 801caa8:	bf04      	itt	eq
 801caaa:	089b      	lsreq	r3, r3, #2
 801caac:	3002      	addeq	r0, #2
 801caae:	07da      	lsls	r2, r3, #31
 801cab0:	d403      	bmi.n	801caba <__lo0bits+0x4e>
 801cab2:	085b      	lsrs	r3, r3, #1
 801cab4:	f100 0001 	add.w	r0, r0, #1
 801cab8:	d005      	beq.n	801cac6 <__lo0bits+0x5a>
 801caba:	600b      	str	r3, [r1, #0]
 801cabc:	4770      	bx	lr
 801cabe:	4610      	mov	r0, r2
 801cac0:	e7e9      	b.n	801ca96 <__lo0bits+0x2a>
 801cac2:	2000      	movs	r0, #0
 801cac4:	4770      	bx	lr
 801cac6:	2020      	movs	r0, #32
 801cac8:	4770      	bx	lr
	...

0801cacc <__i2b>:
 801cacc:	b510      	push	{r4, lr}
 801cace:	460c      	mov	r4, r1
 801cad0:	2101      	movs	r1, #1
 801cad2:	f7ff feb9 	bl	801c848 <_Balloc>
 801cad6:	4602      	mov	r2, r0
 801cad8:	b928      	cbnz	r0, 801cae6 <__i2b+0x1a>
 801cada:	4b05      	ldr	r3, [pc, #20]	; (801caf0 <__i2b+0x24>)
 801cadc:	4805      	ldr	r0, [pc, #20]	; (801caf4 <__i2b+0x28>)
 801cade:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801cae2:	f000 fdff 	bl	801d6e4 <__assert_func>
 801cae6:	2301      	movs	r3, #1
 801cae8:	6144      	str	r4, [r0, #20]
 801caea:	6103      	str	r3, [r0, #16]
 801caec:	bd10      	pop	{r4, pc}
 801caee:	bf00      	nop
 801caf0:	08025678 	.word	0x08025678
 801caf4:	08025704 	.word	0x08025704

0801caf8 <__multiply>:
 801caf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cafc:	4691      	mov	r9, r2
 801cafe:	690a      	ldr	r2, [r1, #16]
 801cb00:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801cb04:	429a      	cmp	r2, r3
 801cb06:	bfb8      	it	lt
 801cb08:	460b      	movlt	r3, r1
 801cb0a:	460c      	mov	r4, r1
 801cb0c:	bfbc      	itt	lt
 801cb0e:	464c      	movlt	r4, r9
 801cb10:	4699      	movlt	r9, r3
 801cb12:	6927      	ldr	r7, [r4, #16]
 801cb14:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801cb18:	68a3      	ldr	r3, [r4, #8]
 801cb1a:	6861      	ldr	r1, [r4, #4]
 801cb1c:	eb07 060a 	add.w	r6, r7, sl
 801cb20:	42b3      	cmp	r3, r6
 801cb22:	b085      	sub	sp, #20
 801cb24:	bfb8      	it	lt
 801cb26:	3101      	addlt	r1, #1
 801cb28:	f7ff fe8e 	bl	801c848 <_Balloc>
 801cb2c:	b930      	cbnz	r0, 801cb3c <__multiply+0x44>
 801cb2e:	4602      	mov	r2, r0
 801cb30:	4b44      	ldr	r3, [pc, #272]	; (801cc44 <__multiply+0x14c>)
 801cb32:	4845      	ldr	r0, [pc, #276]	; (801cc48 <__multiply+0x150>)
 801cb34:	f240 115d 	movw	r1, #349	; 0x15d
 801cb38:	f000 fdd4 	bl	801d6e4 <__assert_func>
 801cb3c:	f100 0514 	add.w	r5, r0, #20
 801cb40:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801cb44:	462b      	mov	r3, r5
 801cb46:	2200      	movs	r2, #0
 801cb48:	4543      	cmp	r3, r8
 801cb4a:	d321      	bcc.n	801cb90 <__multiply+0x98>
 801cb4c:	f104 0314 	add.w	r3, r4, #20
 801cb50:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801cb54:	f109 0314 	add.w	r3, r9, #20
 801cb58:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801cb5c:	9202      	str	r2, [sp, #8]
 801cb5e:	1b3a      	subs	r2, r7, r4
 801cb60:	3a15      	subs	r2, #21
 801cb62:	f022 0203 	bic.w	r2, r2, #3
 801cb66:	3204      	adds	r2, #4
 801cb68:	f104 0115 	add.w	r1, r4, #21
 801cb6c:	428f      	cmp	r7, r1
 801cb6e:	bf38      	it	cc
 801cb70:	2204      	movcc	r2, #4
 801cb72:	9201      	str	r2, [sp, #4]
 801cb74:	9a02      	ldr	r2, [sp, #8]
 801cb76:	9303      	str	r3, [sp, #12]
 801cb78:	429a      	cmp	r2, r3
 801cb7a:	d80c      	bhi.n	801cb96 <__multiply+0x9e>
 801cb7c:	2e00      	cmp	r6, #0
 801cb7e:	dd03      	ble.n	801cb88 <__multiply+0x90>
 801cb80:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801cb84:	2b00      	cmp	r3, #0
 801cb86:	d05a      	beq.n	801cc3e <__multiply+0x146>
 801cb88:	6106      	str	r6, [r0, #16]
 801cb8a:	b005      	add	sp, #20
 801cb8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb90:	f843 2b04 	str.w	r2, [r3], #4
 801cb94:	e7d8      	b.n	801cb48 <__multiply+0x50>
 801cb96:	f8b3 a000 	ldrh.w	sl, [r3]
 801cb9a:	f1ba 0f00 	cmp.w	sl, #0
 801cb9e:	d024      	beq.n	801cbea <__multiply+0xf2>
 801cba0:	f104 0e14 	add.w	lr, r4, #20
 801cba4:	46a9      	mov	r9, r5
 801cba6:	f04f 0c00 	mov.w	ip, #0
 801cbaa:	f85e 2b04 	ldr.w	r2, [lr], #4
 801cbae:	f8d9 1000 	ldr.w	r1, [r9]
 801cbb2:	fa1f fb82 	uxth.w	fp, r2
 801cbb6:	b289      	uxth	r1, r1
 801cbb8:	fb0a 110b 	mla	r1, sl, fp, r1
 801cbbc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801cbc0:	f8d9 2000 	ldr.w	r2, [r9]
 801cbc4:	4461      	add	r1, ip
 801cbc6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801cbca:	fb0a c20b 	mla	r2, sl, fp, ip
 801cbce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801cbd2:	b289      	uxth	r1, r1
 801cbd4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801cbd8:	4577      	cmp	r7, lr
 801cbda:	f849 1b04 	str.w	r1, [r9], #4
 801cbde:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801cbe2:	d8e2      	bhi.n	801cbaa <__multiply+0xb2>
 801cbe4:	9a01      	ldr	r2, [sp, #4]
 801cbe6:	f845 c002 	str.w	ip, [r5, r2]
 801cbea:	9a03      	ldr	r2, [sp, #12]
 801cbec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801cbf0:	3304      	adds	r3, #4
 801cbf2:	f1b9 0f00 	cmp.w	r9, #0
 801cbf6:	d020      	beq.n	801cc3a <__multiply+0x142>
 801cbf8:	6829      	ldr	r1, [r5, #0]
 801cbfa:	f104 0c14 	add.w	ip, r4, #20
 801cbfe:	46ae      	mov	lr, r5
 801cc00:	f04f 0a00 	mov.w	sl, #0
 801cc04:	f8bc b000 	ldrh.w	fp, [ip]
 801cc08:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801cc0c:	fb09 220b 	mla	r2, r9, fp, r2
 801cc10:	4492      	add	sl, r2
 801cc12:	b289      	uxth	r1, r1
 801cc14:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801cc18:	f84e 1b04 	str.w	r1, [lr], #4
 801cc1c:	f85c 2b04 	ldr.w	r2, [ip], #4
 801cc20:	f8be 1000 	ldrh.w	r1, [lr]
 801cc24:	0c12      	lsrs	r2, r2, #16
 801cc26:	fb09 1102 	mla	r1, r9, r2, r1
 801cc2a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801cc2e:	4567      	cmp	r7, ip
 801cc30:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801cc34:	d8e6      	bhi.n	801cc04 <__multiply+0x10c>
 801cc36:	9a01      	ldr	r2, [sp, #4]
 801cc38:	50a9      	str	r1, [r5, r2]
 801cc3a:	3504      	adds	r5, #4
 801cc3c:	e79a      	b.n	801cb74 <__multiply+0x7c>
 801cc3e:	3e01      	subs	r6, #1
 801cc40:	e79c      	b.n	801cb7c <__multiply+0x84>
 801cc42:	bf00      	nop
 801cc44:	08025678 	.word	0x08025678
 801cc48:	08025704 	.word	0x08025704

0801cc4c <__pow5mult>:
 801cc4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cc50:	4615      	mov	r5, r2
 801cc52:	f012 0203 	ands.w	r2, r2, #3
 801cc56:	4606      	mov	r6, r0
 801cc58:	460f      	mov	r7, r1
 801cc5a:	d007      	beq.n	801cc6c <__pow5mult+0x20>
 801cc5c:	4c25      	ldr	r4, [pc, #148]	; (801ccf4 <__pow5mult+0xa8>)
 801cc5e:	3a01      	subs	r2, #1
 801cc60:	2300      	movs	r3, #0
 801cc62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801cc66:	f7ff fe51 	bl	801c90c <__multadd>
 801cc6a:	4607      	mov	r7, r0
 801cc6c:	10ad      	asrs	r5, r5, #2
 801cc6e:	d03d      	beq.n	801ccec <__pow5mult+0xa0>
 801cc70:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801cc72:	b97c      	cbnz	r4, 801cc94 <__pow5mult+0x48>
 801cc74:	2010      	movs	r0, #16
 801cc76:	f7ff fdcd 	bl	801c814 <malloc>
 801cc7a:	4602      	mov	r2, r0
 801cc7c:	6270      	str	r0, [r6, #36]	; 0x24
 801cc7e:	b928      	cbnz	r0, 801cc8c <__pow5mult+0x40>
 801cc80:	4b1d      	ldr	r3, [pc, #116]	; (801ccf8 <__pow5mult+0xac>)
 801cc82:	481e      	ldr	r0, [pc, #120]	; (801ccfc <__pow5mult+0xb0>)
 801cc84:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801cc88:	f000 fd2c 	bl	801d6e4 <__assert_func>
 801cc8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801cc90:	6004      	str	r4, [r0, #0]
 801cc92:	60c4      	str	r4, [r0, #12]
 801cc94:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801cc98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801cc9c:	b94c      	cbnz	r4, 801ccb2 <__pow5mult+0x66>
 801cc9e:	f240 2171 	movw	r1, #625	; 0x271
 801cca2:	4630      	mov	r0, r6
 801cca4:	f7ff ff12 	bl	801cacc <__i2b>
 801cca8:	2300      	movs	r3, #0
 801ccaa:	f8c8 0008 	str.w	r0, [r8, #8]
 801ccae:	4604      	mov	r4, r0
 801ccb0:	6003      	str	r3, [r0, #0]
 801ccb2:	f04f 0900 	mov.w	r9, #0
 801ccb6:	07eb      	lsls	r3, r5, #31
 801ccb8:	d50a      	bpl.n	801ccd0 <__pow5mult+0x84>
 801ccba:	4639      	mov	r1, r7
 801ccbc:	4622      	mov	r2, r4
 801ccbe:	4630      	mov	r0, r6
 801ccc0:	f7ff ff1a 	bl	801caf8 <__multiply>
 801ccc4:	4639      	mov	r1, r7
 801ccc6:	4680      	mov	r8, r0
 801ccc8:	4630      	mov	r0, r6
 801ccca:	f7ff fdfd 	bl	801c8c8 <_Bfree>
 801ccce:	4647      	mov	r7, r8
 801ccd0:	106d      	asrs	r5, r5, #1
 801ccd2:	d00b      	beq.n	801ccec <__pow5mult+0xa0>
 801ccd4:	6820      	ldr	r0, [r4, #0]
 801ccd6:	b938      	cbnz	r0, 801cce8 <__pow5mult+0x9c>
 801ccd8:	4622      	mov	r2, r4
 801ccda:	4621      	mov	r1, r4
 801ccdc:	4630      	mov	r0, r6
 801ccde:	f7ff ff0b 	bl	801caf8 <__multiply>
 801cce2:	6020      	str	r0, [r4, #0]
 801cce4:	f8c0 9000 	str.w	r9, [r0]
 801cce8:	4604      	mov	r4, r0
 801ccea:	e7e4      	b.n	801ccb6 <__pow5mult+0x6a>
 801ccec:	4638      	mov	r0, r7
 801ccee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ccf2:	bf00      	nop
 801ccf4:	08025850 	.word	0x08025850
 801ccf8:	08025606 	.word	0x08025606
 801ccfc:	08025704 	.word	0x08025704

0801cd00 <__lshift>:
 801cd00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cd04:	460c      	mov	r4, r1
 801cd06:	6849      	ldr	r1, [r1, #4]
 801cd08:	6923      	ldr	r3, [r4, #16]
 801cd0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801cd0e:	68a3      	ldr	r3, [r4, #8]
 801cd10:	4607      	mov	r7, r0
 801cd12:	4691      	mov	r9, r2
 801cd14:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801cd18:	f108 0601 	add.w	r6, r8, #1
 801cd1c:	42b3      	cmp	r3, r6
 801cd1e:	db0b      	blt.n	801cd38 <__lshift+0x38>
 801cd20:	4638      	mov	r0, r7
 801cd22:	f7ff fd91 	bl	801c848 <_Balloc>
 801cd26:	4605      	mov	r5, r0
 801cd28:	b948      	cbnz	r0, 801cd3e <__lshift+0x3e>
 801cd2a:	4602      	mov	r2, r0
 801cd2c:	4b2a      	ldr	r3, [pc, #168]	; (801cdd8 <__lshift+0xd8>)
 801cd2e:	482b      	ldr	r0, [pc, #172]	; (801cddc <__lshift+0xdc>)
 801cd30:	f240 11d9 	movw	r1, #473	; 0x1d9
 801cd34:	f000 fcd6 	bl	801d6e4 <__assert_func>
 801cd38:	3101      	adds	r1, #1
 801cd3a:	005b      	lsls	r3, r3, #1
 801cd3c:	e7ee      	b.n	801cd1c <__lshift+0x1c>
 801cd3e:	2300      	movs	r3, #0
 801cd40:	f100 0114 	add.w	r1, r0, #20
 801cd44:	f100 0210 	add.w	r2, r0, #16
 801cd48:	4618      	mov	r0, r3
 801cd4a:	4553      	cmp	r3, sl
 801cd4c:	db37      	blt.n	801cdbe <__lshift+0xbe>
 801cd4e:	6920      	ldr	r0, [r4, #16]
 801cd50:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801cd54:	f104 0314 	add.w	r3, r4, #20
 801cd58:	f019 091f 	ands.w	r9, r9, #31
 801cd5c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801cd60:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801cd64:	d02f      	beq.n	801cdc6 <__lshift+0xc6>
 801cd66:	f1c9 0e20 	rsb	lr, r9, #32
 801cd6a:	468a      	mov	sl, r1
 801cd6c:	f04f 0c00 	mov.w	ip, #0
 801cd70:	681a      	ldr	r2, [r3, #0]
 801cd72:	fa02 f209 	lsl.w	r2, r2, r9
 801cd76:	ea42 020c 	orr.w	r2, r2, ip
 801cd7a:	f84a 2b04 	str.w	r2, [sl], #4
 801cd7e:	f853 2b04 	ldr.w	r2, [r3], #4
 801cd82:	4298      	cmp	r0, r3
 801cd84:	fa22 fc0e 	lsr.w	ip, r2, lr
 801cd88:	d8f2      	bhi.n	801cd70 <__lshift+0x70>
 801cd8a:	1b03      	subs	r3, r0, r4
 801cd8c:	3b15      	subs	r3, #21
 801cd8e:	f023 0303 	bic.w	r3, r3, #3
 801cd92:	3304      	adds	r3, #4
 801cd94:	f104 0215 	add.w	r2, r4, #21
 801cd98:	4290      	cmp	r0, r2
 801cd9a:	bf38      	it	cc
 801cd9c:	2304      	movcc	r3, #4
 801cd9e:	f841 c003 	str.w	ip, [r1, r3]
 801cda2:	f1bc 0f00 	cmp.w	ip, #0
 801cda6:	d001      	beq.n	801cdac <__lshift+0xac>
 801cda8:	f108 0602 	add.w	r6, r8, #2
 801cdac:	3e01      	subs	r6, #1
 801cdae:	4638      	mov	r0, r7
 801cdb0:	612e      	str	r6, [r5, #16]
 801cdb2:	4621      	mov	r1, r4
 801cdb4:	f7ff fd88 	bl	801c8c8 <_Bfree>
 801cdb8:	4628      	mov	r0, r5
 801cdba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cdbe:	f842 0f04 	str.w	r0, [r2, #4]!
 801cdc2:	3301      	adds	r3, #1
 801cdc4:	e7c1      	b.n	801cd4a <__lshift+0x4a>
 801cdc6:	3904      	subs	r1, #4
 801cdc8:	f853 2b04 	ldr.w	r2, [r3], #4
 801cdcc:	f841 2f04 	str.w	r2, [r1, #4]!
 801cdd0:	4298      	cmp	r0, r3
 801cdd2:	d8f9      	bhi.n	801cdc8 <__lshift+0xc8>
 801cdd4:	e7ea      	b.n	801cdac <__lshift+0xac>
 801cdd6:	bf00      	nop
 801cdd8:	08025678 	.word	0x08025678
 801cddc:	08025704 	.word	0x08025704

0801cde0 <__mcmp>:
 801cde0:	b530      	push	{r4, r5, lr}
 801cde2:	6902      	ldr	r2, [r0, #16]
 801cde4:	690c      	ldr	r4, [r1, #16]
 801cde6:	1b12      	subs	r2, r2, r4
 801cde8:	d10e      	bne.n	801ce08 <__mcmp+0x28>
 801cdea:	f100 0314 	add.w	r3, r0, #20
 801cdee:	3114      	adds	r1, #20
 801cdf0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801cdf4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801cdf8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801cdfc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801ce00:	42a5      	cmp	r5, r4
 801ce02:	d003      	beq.n	801ce0c <__mcmp+0x2c>
 801ce04:	d305      	bcc.n	801ce12 <__mcmp+0x32>
 801ce06:	2201      	movs	r2, #1
 801ce08:	4610      	mov	r0, r2
 801ce0a:	bd30      	pop	{r4, r5, pc}
 801ce0c:	4283      	cmp	r3, r0
 801ce0e:	d3f3      	bcc.n	801cdf8 <__mcmp+0x18>
 801ce10:	e7fa      	b.n	801ce08 <__mcmp+0x28>
 801ce12:	f04f 32ff 	mov.w	r2, #4294967295
 801ce16:	e7f7      	b.n	801ce08 <__mcmp+0x28>

0801ce18 <__mdiff>:
 801ce18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce1c:	460c      	mov	r4, r1
 801ce1e:	4606      	mov	r6, r0
 801ce20:	4611      	mov	r1, r2
 801ce22:	4620      	mov	r0, r4
 801ce24:	4690      	mov	r8, r2
 801ce26:	f7ff ffdb 	bl	801cde0 <__mcmp>
 801ce2a:	1e05      	subs	r5, r0, #0
 801ce2c:	d110      	bne.n	801ce50 <__mdiff+0x38>
 801ce2e:	4629      	mov	r1, r5
 801ce30:	4630      	mov	r0, r6
 801ce32:	f7ff fd09 	bl	801c848 <_Balloc>
 801ce36:	b930      	cbnz	r0, 801ce46 <__mdiff+0x2e>
 801ce38:	4b3a      	ldr	r3, [pc, #232]	; (801cf24 <__mdiff+0x10c>)
 801ce3a:	4602      	mov	r2, r0
 801ce3c:	f240 2132 	movw	r1, #562	; 0x232
 801ce40:	4839      	ldr	r0, [pc, #228]	; (801cf28 <__mdiff+0x110>)
 801ce42:	f000 fc4f 	bl	801d6e4 <__assert_func>
 801ce46:	2301      	movs	r3, #1
 801ce48:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801ce4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce50:	bfa4      	itt	ge
 801ce52:	4643      	movge	r3, r8
 801ce54:	46a0      	movge	r8, r4
 801ce56:	4630      	mov	r0, r6
 801ce58:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801ce5c:	bfa6      	itte	ge
 801ce5e:	461c      	movge	r4, r3
 801ce60:	2500      	movge	r5, #0
 801ce62:	2501      	movlt	r5, #1
 801ce64:	f7ff fcf0 	bl	801c848 <_Balloc>
 801ce68:	b920      	cbnz	r0, 801ce74 <__mdiff+0x5c>
 801ce6a:	4b2e      	ldr	r3, [pc, #184]	; (801cf24 <__mdiff+0x10c>)
 801ce6c:	4602      	mov	r2, r0
 801ce6e:	f44f 7110 	mov.w	r1, #576	; 0x240
 801ce72:	e7e5      	b.n	801ce40 <__mdiff+0x28>
 801ce74:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801ce78:	6926      	ldr	r6, [r4, #16]
 801ce7a:	60c5      	str	r5, [r0, #12]
 801ce7c:	f104 0914 	add.w	r9, r4, #20
 801ce80:	f108 0514 	add.w	r5, r8, #20
 801ce84:	f100 0e14 	add.w	lr, r0, #20
 801ce88:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801ce8c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801ce90:	f108 0210 	add.w	r2, r8, #16
 801ce94:	46f2      	mov	sl, lr
 801ce96:	2100      	movs	r1, #0
 801ce98:	f859 3b04 	ldr.w	r3, [r9], #4
 801ce9c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801cea0:	fa1f f883 	uxth.w	r8, r3
 801cea4:	fa11 f18b 	uxtah	r1, r1, fp
 801cea8:	0c1b      	lsrs	r3, r3, #16
 801ceaa:	eba1 0808 	sub.w	r8, r1, r8
 801ceae:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801ceb2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801ceb6:	fa1f f888 	uxth.w	r8, r8
 801ceba:	1419      	asrs	r1, r3, #16
 801cebc:	454e      	cmp	r6, r9
 801cebe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801cec2:	f84a 3b04 	str.w	r3, [sl], #4
 801cec6:	d8e7      	bhi.n	801ce98 <__mdiff+0x80>
 801cec8:	1b33      	subs	r3, r6, r4
 801ceca:	3b15      	subs	r3, #21
 801cecc:	f023 0303 	bic.w	r3, r3, #3
 801ced0:	3304      	adds	r3, #4
 801ced2:	3415      	adds	r4, #21
 801ced4:	42a6      	cmp	r6, r4
 801ced6:	bf38      	it	cc
 801ced8:	2304      	movcc	r3, #4
 801ceda:	441d      	add	r5, r3
 801cedc:	4473      	add	r3, lr
 801cede:	469e      	mov	lr, r3
 801cee0:	462e      	mov	r6, r5
 801cee2:	4566      	cmp	r6, ip
 801cee4:	d30e      	bcc.n	801cf04 <__mdiff+0xec>
 801cee6:	f10c 0203 	add.w	r2, ip, #3
 801ceea:	1b52      	subs	r2, r2, r5
 801ceec:	f022 0203 	bic.w	r2, r2, #3
 801cef0:	3d03      	subs	r5, #3
 801cef2:	45ac      	cmp	ip, r5
 801cef4:	bf38      	it	cc
 801cef6:	2200      	movcc	r2, #0
 801cef8:	441a      	add	r2, r3
 801cefa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801cefe:	b17b      	cbz	r3, 801cf20 <__mdiff+0x108>
 801cf00:	6107      	str	r7, [r0, #16]
 801cf02:	e7a3      	b.n	801ce4c <__mdiff+0x34>
 801cf04:	f856 8b04 	ldr.w	r8, [r6], #4
 801cf08:	fa11 f288 	uxtah	r2, r1, r8
 801cf0c:	1414      	asrs	r4, r2, #16
 801cf0e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801cf12:	b292      	uxth	r2, r2
 801cf14:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801cf18:	f84e 2b04 	str.w	r2, [lr], #4
 801cf1c:	1421      	asrs	r1, r4, #16
 801cf1e:	e7e0      	b.n	801cee2 <__mdiff+0xca>
 801cf20:	3f01      	subs	r7, #1
 801cf22:	e7ea      	b.n	801cefa <__mdiff+0xe2>
 801cf24:	08025678 	.word	0x08025678
 801cf28:	08025704 	.word	0x08025704

0801cf2c <__ulp>:
 801cf2c:	b082      	sub	sp, #8
 801cf2e:	ed8d 0b00 	vstr	d0, [sp]
 801cf32:	9b01      	ldr	r3, [sp, #4]
 801cf34:	4912      	ldr	r1, [pc, #72]	; (801cf80 <__ulp+0x54>)
 801cf36:	4019      	ands	r1, r3
 801cf38:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801cf3c:	2900      	cmp	r1, #0
 801cf3e:	dd05      	ble.n	801cf4c <__ulp+0x20>
 801cf40:	2200      	movs	r2, #0
 801cf42:	460b      	mov	r3, r1
 801cf44:	ec43 2b10 	vmov	d0, r2, r3
 801cf48:	b002      	add	sp, #8
 801cf4a:	4770      	bx	lr
 801cf4c:	4249      	negs	r1, r1
 801cf4e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801cf52:	ea4f 5021 	mov.w	r0, r1, asr #20
 801cf56:	f04f 0200 	mov.w	r2, #0
 801cf5a:	f04f 0300 	mov.w	r3, #0
 801cf5e:	da04      	bge.n	801cf6a <__ulp+0x3e>
 801cf60:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801cf64:	fa41 f300 	asr.w	r3, r1, r0
 801cf68:	e7ec      	b.n	801cf44 <__ulp+0x18>
 801cf6a:	f1a0 0114 	sub.w	r1, r0, #20
 801cf6e:	291e      	cmp	r1, #30
 801cf70:	bfda      	itte	le
 801cf72:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801cf76:	fa20 f101 	lsrle.w	r1, r0, r1
 801cf7a:	2101      	movgt	r1, #1
 801cf7c:	460a      	mov	r2, r1
 801cf7e:	e7e1      	b.n	801cf44 <__ulp+0x18>
 801cf80:	7ff00000 	.word	0x7ff00000

0801cf84 <__b2d>:
 801cf84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cf86:	6905      	ldr	r5, [r0, #16]
 801cf88:	f100 0714 	add.w	r7, r0, #20
 801cf8c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801cf90:	1f2e      	subs	r6, r5, #4
 801cf92:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801cf96:	4620      	mov	r0, r4
 801cf98:	f7ff fd48 	bl	801ca2c <__hi0bits>
 801cf9c:	f1c0 0320 	rsb	r3, r0, #32
 801cfa0:	280a      	cmp	r0, #10
 801cfa2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801d020 <__b2d+0x9c>
 801cfa6:	600b      	str	r3, [r1, #0]
 801cfa8:	dc14      	bgt.n	801cfd4 <__b2d+0x50>
 801cfaa:	f1c0 0e0b 	rsb	lr, r0, #11
 801cfae:	fa24 f10e 	lsr.w	r1, r4, lr
 801cfb2:	42b7      	cmp	r7, r6
 801cfb4:	ea41 030c 	orr.w	r3, r1, ip
 801cfb8:	bf34      	ite	cc
 801cfba:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801cfbe:	2100      	movcs	r1, #0
 801cfc0:	3015      	adds	r0, #21
 801cfc2:	fa04 f000 	lsl.w	r0, r4, r0
 801cfc6:	fa21 f10e 	lsr.w	r1, r1, lr
 801cfca:	ea40 0201 	orr.w	r2, r0, r1
 801cfce:	ec43 2b10 	vmov	d0, r2, r3
 801cfd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cfd4:	42b7      	cmp	r7, r6
 801cfd6:	bf3a      	itte	cc
 801cfd8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801cfdc:	f1a5 0608 	subcc.w	r6, r5, #8
 801cfe0:	2100      	movcs	r1, #0
 801cfe2:	380b      	subs	r0, #11
 801cfe4:	d017      	beq.n	801d016 <__b2d+0x92>
 801cfe6:	f1c0 0c20 	rsb	ip, r0, #32
 801cfea:	fa04 f500 	lsl.w	r5, r4, r0
 801cfee:	42be      	cmp	r6, r7
 801cff0:	fa21 f40c 	lsr.w	r4, r1, ip
 801cff4:	ea45 0504 	orr.w	r5, r5, r4
 801cff8:	bf8c      	ite	hi
 801cffa:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801cffe:	2400      	movls	r4, #0
 801d000:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801d004:	fa01 f000 	lsl.w	r0, r1, r0
 801d008:	fa24 f40c 	lsr.w	r4, r4, ip
 801d00c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801d010:	ea40 0204 	orr.w	r2, r0, r4
 801d014:	e7db      	b.n	801cfce <__b2d+0x4a>
 801d016:	ea44 030c 	orr.w	r3, r4, ip
 801d01a:	460a      	mov	r2, r1
 801d01c:	e7d7      	b.n	801cfce <__b2d+0x4a>
 801d01e:	bf00      	nop
 801d020:	3ff00000 	.word	0x3ff00000

0801d024 <__d2b>:
 801d024:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801d028:	4689      	mov	r9, r1
 801d02a:	2101      	movs	r1, #1
 801d02c:	ec57 6b10 	vmov	r6, r7, d0
 801d030:	4690      	mov	r8, r2
 801d032:	f7ff fc09 	bl	801c848 <_Balloc>
 801d036:	4604      	mov	r4, r0
 801d038:	b930      	cbnz	r0, 801d048 <__d2b+0x24>
 801d03a:	4602      	mov	r2, r0
 801d03c:	4b25      	ldr	r3, [pc, #148]	; (801d0d4 <__d2b+0xb0>)
 801d03e:	4826      	ldr	r0, [pc, #152]	; (801d0d8 <__d2b+0xb4>)
 801d040:	f240 310a 	movw	r1, #778	; 0x30a
 801d044:	f000 fb4e 	bl	801d6e4 <__assert_func>
 801d048:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801d04c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801d050:	bb35      	cbnz	r5, 801d0a0 <__d2b+0x7c>
 801d052:	2e00      	cmp	r6, #0
 801d054:	9301      	str	r3, [sp, #4]
 801d056:	d028      	beq.n	801d0aa <__d2b+0x86>
 801d058:	4668      	mov	r0, sp
 801d05a:	9600      	str	r6, [sp, #0]
 801d05c:	f7ff fd06 	bl	801ca6c <__lo0bits>
 801d060:	9900      	ldr	r1, [sp, #0]
 801d062:	b300      	cbz	r0, 801d0a6 <__d2b+0x82>
 801d064:	9a01      	ldr	r2, [sp, #4]
 801d066:	f1c0 0320 	rsb	r3, r0, #32
 801d06a:	fa02 f303 	lsl.w	r3, r2, r3
 801d06e:	430b      	orrs	r3, r1
 801d070:	40c2      	lsrs	r2, r0
 801d072:	6163      	str	r3, [r4, #20]
 801d074:	9201      	str	r2, [sp, #4]
 801d076:	9b01      	ldr	r3, [sp, #4]
 801d078:	61a3      	str	r3, [r4, #24]
 801d07a:	2b00      	cmp	r3, #0
 801d07c:	bf14      	ite	ne
 801d07e:	2202      	movne	r2, #2
 801d080:	2201      	moveq	r2, #1
 801d082:	6122      	str	r2, [r4, #16]
 801d084:	b1d5      	cbz	r5, 801d0bc <__d2b+0x98>
 801d086:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801d08a:	4405      	add	r5, r0
 801d08c:	f8c9 5000 	str.w	r5, [r9]
 801d090:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801d094:	f8c8 0000 	str.w	r0, [r8]
 801d098:	4620      	mov	r0, r4
 801d09a:	b003      	add	sp, #12
 801d09c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d0a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d0a4:	e7d5      	b.n	801d052 <__d2b+0x2e>
 801d0a6:	6161      	str	r1, [r4, #20]
 801d0a8:	e7e5      	b.n	801d076 <__d2b+0x52>
 801d0aa:	a801      	add	r0, sp, #4
 801d0ac:	f7ff fcde 	bl	801ca6c <__lo0bits>
 801d0b0:	9b01      	ldr	r3, [sp, #4]
 801d0b2:	6163      	str	r3, [r4, #20]
 801d0b4:	2201      	movs	r2, #1
 801d0b6:	6122      	str	r2, [r4, #16]
 801d0b8:	3020      	adds	r0, #32
 801d0ba:	e7e3      	b.n	801d084 <__d2b+0x60>
 801d0bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801d0c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801d0c4:	f8c9 0000 	str.w	r0, [r9]
 801d0c8:	6918      	ldr	r0, [r3, #16]
 801d0ca:	f7ff fcaf 	bl	801ca2c <__hi0bits>
 801d0ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801d0d2:	e7df      	b.n	801d094 <__d2b+0x70>
 801d0d4:	08025678 	.word	0x08025678
 801d0d8:	08025704 	.word	0x08025704

0801d0dc <__ratio>:
 801d0dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d0e0:	4688      	mov	r8, r1
 801d0e2:	4669      	mov	r1, sp
 801d0e4:	4681      	mov	r9, r0
 801d0e6:	f7ff ff4d 	bl	801cf84 <__b2d>
 801d0ea:	a901      	add	r1, sp, #4
 801d0ec:	4640      	mov	r0, r8
 801d0ee:	ec55 4b10 	vmov	r4, r5, d0
 801d0f2:	f7ff ff47 	bl	801cf84 <__b2d>
 801d0f6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801d0fa:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801d0fe:	eba3 0c02 	sub.w	ip, r3, r2
 801d102:	e9dd 3200 	ldrd	r3, r2, [sp]
 801d106:	1a9b      	subs	r3, r3, r2
 801d108:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801d10c:	ec51 0b10 	vmov	r0, r1, d0
 801d110:	2b00      	cmp	r3, #0
 801d112:	bfd6      	itet	le
 801d114:	460a      	movle	r2, r1
 801d116:	462a      	movgt	r2, r5
 801d118:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801d11c:	468b      	mov	fp, r1
 801d11e:	462f      	mov	r7, r5
 801d120:	bfd4      	ite	le
 801d122:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801d126:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801d12a:	4620      	mov	r0, r4
 801d12c:	ee10 2a10 	vmov	r2, s0
 801d130:	465b      	mov	r3, fp
 801d132:	4639      	mov	r1, r7
 801d134:	f7e3 fba2 	bl	800087c <__aeabi_ddiv>
 801d138:	ec41 0b10 	vmov	d0, r0, r1
 801d13c:	b003      	add	sp, #12
 801d13e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d142 <__copybits>:
 801d142:	3901      	subs	r1, #1
 801d144:	b570      	push	{r4, r5, r6, lr}
 801d146:	1149      	asrs	r1, r1, #5
 801d148:	6914      	ldr	r4, [r2, #16]
 801d14a:	3101      	adds	r1, #1
 801d14c:	f102 0314 	add.w	r3, r2, #20
 801d150:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801d154:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801d158:	1f05      	subs	r5, r0, #4
 801d15a:	42a3      	cmp	r3, r4
 801d15c:	d30c      	bcc.n	801d178 <__copybits+0x36>
 801d15e:	1aa3      	subs	r3, r4, r2
 801d160:	3b11      	subs	r3, #17
 801d162:	f023 0303 	bic.w	r3, r3, #3
 801d166:	3211      	adds	r2, #17
 801d168:	42a2      	cmp	r2, r4
 801d16a:	bf88      	it	hi
 801d16c:	2300      	movhi	r3, #0
 801d16e:	4418      	add	r0, r3
 801d170:	2300      	movs	r3, #0
 801d172:	4288      	cmp	r0, r1
 801d174:	d305      	bcc.n	801d182 <__copybits+0x40>
 801d176:	bd70      	pop	{r4, r5, r6, pc}
 801d178:	f853 6b04 	ldr.w	r6, [r3], #4
 801d17c:	f845 6f04 	str.w	r6, [r5, #4]!
 801d180:	e7eb      	b.n	801d15a <__copybits+0x18>
 801d182:	f840 3b04 	str.w	r3, [r0], #4
 801d186:	e7f4      	b.n	801d172 <__copybits+0x30>

0801d188 <__any_on>:
 801d188:	f100 0214 	add.w	r2, r0, #20
 801d18c:	6900      	ldr	r0, [r0, #16]
 801d18e:	114b      	asrs	r3, r1, #5
 801d190:	4298      	cmp	r0, r3
 801d192:	b510      	push	{r4, lr}
 801d194:	db11      	blt.n	801d1ba <__any_on+0x32>
 801d196:	dd0a      	ble.n	801d1ae <__any_on+0x26>
 801d198:	f011 011f 	ands.w	r1, r1, #31
 801d19c:	d007      	beq.n	801d1ae <__any_on+0x26>
 801d19e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801d1a2:	fa24 f001 	lsr.w	r0, r4, r1
 801d1a6:	fa00 f101 	lsl.w	r1, r0, r1
 801d1aa:	428c      	cmp	r4, r1
 801d1ac:	d10b      	bne.n	801d1c6 <__any_on+0x3e>
 801d1ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d1b2:	4293      	cmp	r3, r2
 801d1b4:	d803      	bhi.n	801d1be <__any_on+0x36>
 801d1b6:	2000      	movs	r0, #0
 801d1b8:	bd10      	pop	{r4, pc}
 801d1ba:	4603      	mov	r3, r0
 801d1bc:	e7f7      	b.n	801d1ae <__any_on+0x26>
 801d1be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801d1c2:	2900      	cmp	r1, #0
 801d1c4:	d0f5      	beq.n	801d1b2 <__any_on+0x2a>
 801d1c6:	2001      	movs	r0, #1
 801d1c8:	e7f6      	b.n	801d1b8 <__any_on+0x30>

0801d1ca <_calloc_r>:
 801d1ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d1cc:	fba1 2402 	umull	r2, r4, r1, r2
 801d1d0:	b94c      	cbnz	r4, 801d1e6 <_calloc_r+0x1c>
 801d1d2:	4611      	mov	r1, r2
 801d1d4:	9201      	str	r2, [sp, #4]
 801d1d6:	f000 f87b 	bl	801d2d0 <_malloc_r>
 801d1da:	9a01      	ldr	r2, [sp, #4]
 801d1dc:	4605      	mov	r5, r0
 801d1de:	b930      	cbnz	r0, 801d1ee <_calloc_r+0x24>
 801d1e0:	4628      	mov	r0, r5
 801d1e2:	b003      	add	sp, #12
 801d1e4:	bd30      	pop	{r4, r5, pc}
 801d1e6:	220c      	movs	r2, #12
 801d1e8:	6002      	str	r2, [r0, #0]
 801d1ea:	2500      	movs	r5, #0
 801d1ec:	e7f8      	b.n	801d1e0 <_calloc_r+0x16>
 801d1ee:	4621      	mov	r1, r4
 801d1f0:	f7fc fbce 	bl	8019990 <memset>
 801d1f4:	e7f4      	b.n	801d1e0 <_calloc_r+0x16>
	...

0801d1f8 <_free_r>:
 801d1f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d1fa:	2900      	cmp	r1, #0
 801d1fc:	d044      	beq.n	801d288 <_free_r+0x90>
 801d1fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d202:	9001      	str	r0, [sp, #4]
 801d204:	2b00      	cmp	r3, #0
 801d206:	f1a1 0404 	sub.w	r4, r1, #4
 801d20a:	bfb8      	it	lt
 801d20c:	18e4      	addlt	r4, r4, r3
 801d20e:	f000 fab3 	bl	801d778 <__malloc_lock>
 801d212:	4a1e      	ldr	r2, [pc, #120]	; (801d28c <_free_r+0x94>)
 801d214:	9801      	ldr	r0, [sp, #4]
 801d216:	6813      	ldr	r3, [r2, #0]
 801d218:	b933      	cbnz	r3, 801d228 <_free_r+0x30>
 801d21a:	6063      	str	r3, [r4, #4]
 801d21c:	6014      	str	r4, [r2, #0]
 801d21e:	b003      	add	sp, #12
 801d220:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d224:	f000 baae 	b.w	801d784 <__malloc_unlock>
 801d228:	42a3      	cmp	r3, r4
 801d22a:	d908      	bls.n	801d23e <_free_r+0x46>
 801d22c:	6825      	ldr	r5, [r4, #0]
 801d22e:	1961      	adds	r1, r4, r5
 801d230:	428b      	cmp	r3, r1
 801d232:	bf01      	itttt	eq
 801d234:	6819      	ldreq	r1, [r3, #0]
 801d236:	685b      	ldreq	r3, [r3, #4]
 801d238:	1949      	addeq	r1, r1, r5
 801d23a:	6021      	streq	r1, [r4, #0]
 801d23c:	e7ed      	b.n	801d21a <_free_r+0x22>
 801d23e:	461a      	mov	r2, r3
 801d240:	685b      	ldr	r3, [r3, #4]
 801d242:	b10b      	cbz	r3, 801d248 <_free_r+0x50>
 801d244:	42a3      	cmp	r3, r4
 801d246:	d9fa      	bls.n	801d23e <_free_r+0x46>
 801d248:	6811      	ldr	r1, [r2, #0]
 801d24a:	1855      	adds	r5, r2, r1
 801d24c:	42a5      	cmp	r5, r4
 801d24e:	d10b      	bne.n	801d268 <_free_r+0x70>
 801d250:	6824      	ldr	r4, [r4, #0]
 801d252:	4421      	add	r1, r4
 801d254:	1854      	adds	r4, r2, r1
 801d256:	42a3      	cmp	r3, r4
 801d258:	6011      	str	r1, [r2, #0]
 801d25a:	d1e0      	bne.n	801d21e <_free_r+0x26>
 801d25c:	681c      	ldr	r4, [r3, #0]
 801d25e:	685b      	ldr	r3, [r3, #4]
 801d260:	6053      	str	r3, [r2, #4]
 801d262:	4421      	add	r1, r4
 801d264:	6011      	str	r1, [r2, #0]
 801d266:	e7da      	b.n	801d21e <_free_r+0x26>
 801d268:	d902      	bls.n	801d270 <_free_r+0x78>
 801d26a:	230c      	movs	r3, #12
 801d26c:	6003      	str	r3, [r0, #0]
 801d26e:	e7d6      	b.n	801d21e <_free_r+0x26>
 801d270:	6825      	ldr	r5, [r4, #0]
 801d272:	1961      	adds	r1, r4, r5
 801d274:	428b      	cmp	r3, r1
 801d276:	bf04      	itt	eq
 801d278:	6819      	ldreq	r1, [r3, #0]
 801d27a:	685b      	ldreq	r3, [r3, #4]
 801d27c:	6063      	str	r3, [r4, #4]
 801d27e:	bf04      	itt	eq
 801d280:	1949      	addeq	r1, r1, r5
 801d282:	6021      	streq	r1, [r4, #0]
 801d284:	6054      	str	r4, [r2, #4]
 801d286:	e7ca      	b.n	801d21e <_free_r+0x26>
 801d288:	b003      	add	sp, #12
 801d28a:	bd30      	pop	{r4, r5, pc}
 801d28c:	200373f8 	.word	0x200373f8

0801d290 <sbrk_aligned>:
 801d290:	b570      	push	{r4, r5, r6, lr}
 801d292:	4e0e      	ldr	r6, [pc, #56]	; (801d2cc <sbrk_aligned+0x3c>)
 801d294:	460c      	mov	r4, r1
 801d296:	6831      	ldr	r1, [r6, #0]
 801d298:	4605      	mov	r5, r0
 801d29a:	b911      	cbnz	r1, 801d2a2 <sbrk_aligned+0x12>
 801d29c:	f000 f9f0 	bl	801d680 <_sbrk_r>
 801d2a0:	6030      	str	r0, [r6, #0]
 801d2a2:	4621      	mov	r1, r4
 801d2a4:	4628      	mov	r0, r5
 801d2a6:	f000 f9eb 	bl	801d680 <_sbrk_r>
 801d2aa:	1c43      	adds	r3, r0, #1
 801d2ac:	d00a      	beq.n	801d2c4 <sbrk_aligned+0x34>
 801d2ae:	1cc4      	adds	r4, r0, #3
 801d2b0:	f024 0403 	bic.w	r4, r4, #3
 801d2b4:	42a0      	cmp	r0, r4
 801d2b6:	d007      	beq.n	801d2c8 <sbrk_aligned+0x38>
 801d2b8:	1a21      	subs	r1, r4, r0
 801d2ba:	4628      	mov	r0, r5
 801d2bc:	f000 f9e0 	bl	801d680 <_sbrk_r>
 801d2c0:	3001      	adds	r0, #1
 801d2c2:	d101      	bne.n	801d2c8 <sbrk_aligned+0x38>
 801d2c4:	f04f 34ff 	mov.w	r4, #4294967295
 801d2c8:	4620      	mov	r0, r4
 801d2ca:	bd70      	pop	{r4, r5, r6, pc}
 801d2cc:	200373fc 	.word	0x200373fc

0801d2d0 <_malloc_r>:
 801d2d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d2d4:	1ccd      	adds	r5, r1, #3
 801d2d6:	f025 0503 	bic.w	r5, r5, #3
 801d2da:	3508      	adds	r5, #8
 801d2dc:	2d0c      	cmp	r5, #12
 801d2de:	bf38      	it	cc
 801d2e0:	250c      	movcc	r5, #12
 801d2e2:	2d00      	cmp	r5, #0
 801d2e4:	4607      	mov	r7, r0
 801d2e6:	db01      	blt.n	801d2ec <_malloc_r+0x1c>
 801d2e8:	42a9      	cmp	r1, r5
 801d2ea:	d905      	bls.n	801d2f8 <_malloc_r+0x28>
 801d2ec:	230c      	movs	r3, #12
 801d2ee:	603b      	str	r3, [r7, #0]
 801d2f0:	2600      	movs	r6, #0
 801d2f2:	4630      	mov	r0, r6
 801d2f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d2f8:	4e2e      	ldr	r6, [pc, #184]	; (801d3b4 <_malloc_r+0xe4>)
 801d2fa:	f000 fa3d 	bl	801d778 <__malloc_lock>
 801d2fe:	6833      	ldr	r3, [r6, #0]
 801d300:	461c      	mov	r4, r3
 801d302:	bb34      	cbnz	r4, 801d352 <_malloc_r+0x82>
 801d304:	4629      	mov	r1, r5
 801d306:	4638      	mov	r0, r7
 801d308:	f7ff ffc2 	bl	801d290 <sbrk_aligned>
 801d30c:	1c43      	adds	r3, r0, #1
 801d30e:	4604      	mov	r4, r0
 801d310:	d14d      	bne.n	801d3ae <_malloc_r+0xde>
 801d312:	6834      	ldr	r4, [r6, #0]
 801d314:	4626      	mov	r6, r4
 801d316:	2e00      	cmp	r6, #0
 801d318:	d140      	bne.n	801d39c <_malloc_r+0xcc>
 801d31a:	6823      	ldr	r3, [r4, #0]
 801d31c:	4631      	mov	r1, r6
 801d31e:	4638      	mov	r0, r7
 801d320:	eb04 0803 	add.w	r8, r4, r3
 801d324:	f000 f9ac 	bl	801d680 <_sbrk_r>
 801d328:	4580      	cmp	r8, r0
 801d32a:	d13a      	bne.n	801d3a2 <_malloc_r+0xd2>
 801d32c:	6821      	ldr	r1, [r4, #0]
 801d32e:	3503      	adds	r5, #3
 801d330:	1a6d      	subs	r5, r5, r1
 801d332:	f025 0503 	bic.w	r5, r5, #3
 801d336:	3508      	adds	r5, #8
 801d338:	2d0c      	cmp	r5, #12
 801d33a:	bf38      	it	cc
 801d33c:	250c      	movcc	r5, #12
 801d33e:	4629      	mov	r1, r5
 801d340:	4638      	mov	r0, r7
 801d342:	f7ff ffa5 	bl	801d290 <sbrk_aligned>
 801d346:	3001      	adds	r0, #1
 801d348:	d02b      	beq.n	801d3a2 <_malloc_r+0xd2>
 801d34a:	6823      	ldr	r3, [r4, #0]
 801d34c:	442b      	add	r3, r5
 801d34e:	6023      	str	r3, [r4, #0]
 801d350:	e00e      	b.n	801d370 <_malloc_r+0xa0>
 801d352:	6822      	ldr	r2, [r4, #0]
 801d354:	1b52      	subs	r2, r2, r5
 801d356:	d41e      	bmi.n	801d396 <_malloc_r+0xc6>
 801d358:	2a0b      	cmp	r2, #11
 801d35a:	d916      	bls.n	801d38a <_malloc_r+0xba>
 801d35c:	1961      	adds	r1, r4, r5
 801d35e:	42a3      	cmp	r3, r4
 801d360:	6025      	str	r5, [r4, #0]
 801d362:	bf18      	it	ne
 801d364:	6059      	strne	r1, [r3, #4]
 801d366:	6863      	ldr	r3, [r4, #4]
 801d368:	bf08      	it	eq
 801d36a:	6031      	streq	r1, [r6, #0]
 801d36c:	5162      	str	r2, [r4, r5]
 801d36e:	604b      	str	r3, [r1, #4]
 801d370:	4638      	mov	r0, r7
 801d372:	f104 060b 	add.w	r6, r4, #11
 801d376:	f000 fa05 	bl	801d784 <__malloc_unlock>
 801d37a:	f026 0607 	bic.w	r6, r6, #7
 801d37e:	1d23      	adds	r3, r4, #4
 801d380:	1af2      	subs	r2, r6, r3
 801d382:	d0b6      	beq.n	801d2f2 <_malloc_r+0x22>
 801d384:	1b9b      	subs	r3, r3, r6
 801d386:	50a3      	str	r3, [r4, r2]
 801d388:	e7b3      	b.n	801d2f2 <_malloc_r+0x22>
 801d38a:	6862      	ldr	r2, [r4, #4]
 801d38c:	42a3      	cmp	r3, r4
 801d38e:	bf0c      	ite	eq
 801d390:	6032      	streq	r2, [r6, #0]
 801d392:	605a      	strne	r2, [r3, #4]
 801d394:	e7ec      	b.n	801d370 <_malloc_r+0xa0>
 801d396:	4623      	mov	r3, r4
 801d398:	6864      	ldr	r4, [r4, #4]
 801d39a:	e7b2      	b.n	801d302 <_malloc_r+0x32>
 801d39c:	4634      	mov	r4, r6
 801d39e:	6876      	ldr	r6, [r6, #4]
 801d3a0:	e7b9      	b.n	801d316 <_malloc_r+0x46>
 801d3a2:	230c      	movs	r3, #12
 801d3a4:	603b      	str	r3, [r7, #0]
 801d3a6:	4638      	mov	r0, r7
 801d3a8:	f000 f9ec 	bl	801d784 <__malloc_unlock>
 801d3ac:	e7a1      	b.n	801d2f2 <_malloc_r+0x22>
 801d3ae:	6025      	str	r5, [r4, #0]
 801d3b0:	e7de      	b.n	801d370 <_malloc_r+0xa0>
 801d3b2:	bf00      	nop
 801d3b4:	200373f8 	.word	0x200373f8

0801d3b8 <__ssputs_r>:
 801d3b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d3bc:	688e      	ldr	r6, [r1, #8]
 801d3be:	429e      	cmp	r6, r3
 801d3c0:	4682      	mov	sl, r0
 801d3c2:	460c      	mov	r4, r1
 801d3c4:	4690      	mov	r8, r2
 801d3c6:	461f      	mov	r7, r3
 801d3c8:	d838      	bhi.n	801d43c <__ssputs_r+0x84>
 801d3ca:	898a      	ldrh	r2, [r1, #12]
 801d3cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801d3d0:	d032      	beq.n	801d438 <__ssputs_r+0x80>
 801d3d2:	6825      	ldr	r5, [r4, #0]
 801d3d4:	6909      	ldr	r1, [r1, #16]
 801d3d6:	eba5 0901 	sub.w	r9, r5, r1
 801d3da:	6965      	ldr	r5, [r4, #20]
 801d3dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d3e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801d3e4:	3301      	adds	r3, #1
 801d3e6:	444b      	add	r3, r9
 801d3e8:	106d      	asrs	r5, r5, #1
 801d3ea:	429d      	cmp	r5, r3
 801d3ec:	bf38      	it	cc
 801d3ee:	461d      	movcc	r5, r3
 801d3f0:	0553      	lsls	r3, r2, #21
 801d3f2:	d531      	bpl.n	801d458 <__ssputs_r+0xa0>
 801d3f4:	4629      	mov	r1, r5
 801d3f6:	f7ff ff6b 	bl	801d2d0 <_malloc_r>
 801d3fa:	4606      	mov	r6, r0
 801d3fc:	b950      	cbnz	r0, 801d414 <__ssputs_r+0x5c>
 801d3fe:	230c      	movs	r3, #12
 801d400:	f8ca 3000 	str.w	r3, [sl]
 801d404:	89a3      	ldrh	r3, [r4, #12]
 801d406:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d40a:	81a3      	strh	r3, [r4, #12]
 801d40c:	f04f 30ff 	mov.w	r0, #4294967295
 801d410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d414:	6921      	ldr	r1, [r4, #16]
 801d416:	464a      	mov	r2, r9
 801d418:	f7fc faac 	bl	8019974 <memcpy>
 801d41c:	89a3      	ldrh	r3, [r4, #12]
 801d41e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801d422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d426:	81a3      	strh	r3, [r4, #12]
 801d428:	6126      	str	r6, [r4, #16]
 801d42a:	6165      	str	r5, [r4, #20]
 801d42c:	444e      	add	r6, r9
 801d42e:	eba5 0509 	sub.w	r5, r5, r9
 801d432:	6026      	str	r6, [r4, #0]
 801d434:	60a5      	str	r5, [r4, #8]
 801d436:	463e      	mov	r6, r7
 801d438:	42be      	cmp	r6, r7
 801d43a:	d900      	bls.n	801d43e <__ssputs_r+0x86>
 801d43c:	463e      	mov	r6, r7
 801d43e:	6820      	ldr	r0, [r4, #0]
 801d440:	4632      	mov	r2, r6
 801d442:	4641      	mov	r1, r8
 801d444:	f000 f97e 	bl	801d744 <memmove>
 801d448:	68a3      	ldr	r3, [r4, #8]
 801d44a:	1b9b      	subs	r3, r3, r6
 801d44c:	60a3      	str	r3, [r4, #8]
 801d44e:	6823      	ldr	r3, [r4, #0]
 801d450:	4433      	add	r3, r6
 801d452:	6023      	str	r3, [r4, #0]
 801d454:	2000      	movs	r0, #0
 801d456:	e7db      	b.n	801d410 <__ssputs_r+0x58>
 801d458:	462a      	mov	r2, r5
 801d45a:	f000 f999 	bl	801d790 <_realloc_r>
 801d45e:	4606      	mov	r6, r0
 801d460:	2800      	cmp	r0, #0
 801d462:	d1e1      	bne.n	801d428 <__ssputs_r+0x70>
 801d464:	6921      	ldr	r1, [r4, #16]
 801d466:	4650      	mov	r0, sl
 801d468:	f7ff fec6 	bl	801d1f8 <_free_r>
 801d46c:	e7c7      	b.n	801d3fe <__ssputs_r+0x46>
	...

0801d470 <_svfiprintf_r>:
 801d470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d474:	4698      	mov	r8, r3
 801d476:	898b      	ldrh	r3, [r1, #12]
 801d478:	061b      	lsls	r3, r3, #24
 801d47a:	b09d      	sub	sp, #116	; 0x74
 801d47c:	4607      	mov	r7, r0
 801d47e:	460d      	mov	r5, r1
 801d480:	4614      	mov	r4, r2
 801d482:	d50e      	bpl.n	801d4a2 <_svfiprintf_r+0x32>
 801d484:	690b      	ldr	r3, [r1, #16]
 801d486:	b963      	cbnz	r3, 801d4a2 <_svfiprintf_r+0x32>
 801d488:	2140      	movs	r1, #64	; 0x40
 801d48a:	f7ff ff21 	bl	801d2d0 <_malloc_r>
 801d48e:	6028      	str	r0, [r5, #0]
 801d490:	6128      	str	r0, [r5, #16]
 801d492:	b920      	cbnz	r0, 801d49e <_svfiprintf_r+0x2e>
 801d494:	230c      	movs	r3, #12
 801d496:	603b      	str	r3, [r7, #0]
 801d498:	f04f 30ff 	mov.w	r0, #4294967295
 801d49c:	e0d1      	b.n	801d642 <_svfiprintf_r+0x1d2>
 801d49e:	2340      	movs	r3, #64	; 0x40
 801d4a0:	616b      	str	r3, [r5, #20]
 801d4a2:	2300      	movs	r3, #0
 801d4a4:	9309      	str	r3, [sp, #36]	; 0x24
 801d4a6:	2320      	movs	r3, #32
 801d4a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d4ac:	f8cd 800c 	str.w	r8, [sp, #12]
 801d4b0:	2330      	movs	r3, #48	; 0x30
 801d4b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801d65c <_svfiprintf_r+0x1ec>
 801d4b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d4ba:	f04f 0901 	mov.w	r9, #1
 801d4be:	4623      	mov	r3, r4
 801d4c0:	469a      	mov	sl, r3
 801d4c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d4c6:	b10a      	cbz	r2, 801d4cc <_svfiprintf_r+0x5c>
 801d4c8:	2a25      	cmp	r2, #37	; 0x25
 801d4ca:	d1f9      	bne.n	801d4c0 <_svfiprintf_r+0x50>
 801d4cc:	ebba 0b04 	subs.w	fp, sl, r4
 801d4d0:	d00b      	beq.n	801d4ea <_svfiprintf_r+0x7a>
 801d4d2:	465b      	mov	r3, fp
 801d4d4:	4622      	mov	r2, r4
 801d4d6:	4629      	mov	r1, r5
 801d4d8:	4638      	mov	r0, r7
 801d4da:	f7ff ff6d 	bl	801d3b8 <__ssputs_r>
 801d4de:	3001      	adds	r0, #1
 801d4e0:	f000 80aa 	beq.w	801d638 <_svfiprintf_r+0x1c8>
 801d4e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d4e6:	445a      	add	r2, fp
 801d4e8:	9209      	str	r2, [sp, #36]	; 0x24
 801d4ea:	f89a 3000 	ldrb.w	r3, [sl]
 801d4ee:	2b00      	cmp	r3, #0
 801d4f0:	f000 80a2 	beq.w	801d638 <_svfiprintf_r+0x1c8>
 801d4f4:	2300      	movs	r3, #0
 801d4f6:	f04f 32ff 	mov.w	r2, #4294967295
 801d4fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d4fe:	f10a 0a01 	add.w	sl, sl, #1
 801d502:	9304      	str	r3, [sp, #16]
 801d504:	9307      	str	r3, [sp, #28]
 801d506:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d50a:	931a      	str	r3, [sp, #104]	; 0x68
 801d50c:	4654      	mov	r4, sl
 801d50e:	2205      	movs	r2, #5
 801d510:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d514:	4851      	ldr	r0, [pc, #324]	; (801d65c <_svfiprintf_r+0x1ec>)
 801d516:	f7e2 fe7b 	bl	8000210 <memchr>
 801d51a:	9a04      	ldr	r2, [sp, #16]
 801d51c:	b9d8      	cbnz	r0, 801d556 <_svfiprintf_r+0xe6>
 801d51e:	06d0      	lsls	r0, r2, #27
 801d520:	bf44      	itt	mi
 801d522:	2320      	movmi	r3, #32
 801d524:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d528:	0711      	lsls	r1, r2, #28
 801d52a:	bf44      	itt	mi
 801d52c:	232b      	movmi	r3, #43	; 0x2b
 801d52e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d532:	f89a 3000 	ldrb.w	r3, [sl]
 801d536:	2b2a      	cmp	r3, #42	; 0x2a
 801d538:	d015      	beq.n	801d566 <_svfiprintf_r+0xf6>
 801d53a:	9a07      	ldr	r2, [sp, #28]
 801d53c:	4654      	mov	r4, sl
 801d53e:	2000      	movs	r0, #0
 801d540:	f04f 0c0a 	mov.w	ip, #10
 801d544:	4621      	mov	r1, r4
 801d546:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d54a:	3b30      	subs	r3, #48	; 0x30
 801d54c:	2b09      	cmp	r3, #9
 801d54e:	d94e      	bls.n	801d5ee <_svfiprintf_r+0x17e>
 801d550:	b1b0      	cbz	r0, 801d580 <_svfiprintf_r+0x110>
 801d552:	9207      	str	r2, [sp, #28]
 801d554:	e014      	b.n	801d580 <_svfiprintf_r+0x110>
 801d556:	eba0 0308 	sub.w	r3, r0, r8
 801d55a:	fa09 f303 	lsl.w	r3, r9, r3
 801d55e:	4313      	orrs	r3, r2
 801d560:	9304      	str	r3, [sp, #16]
 801d562:	46a2      	mov	sl, r4
 801d564:	e7d2      	b.n	801d50c <_svfiprintf_r+0x9c>
 801d566:	9b03      	ldr	r3, [sp, #12]
 801d568:	1d19      	adds	r1, r3, #4
 801d56a:	681b      	ldr	r3, [r3, #0]
 801d56c:	9103      	str	r1, [sp, #12]
 801d56e:	2b00      	cmp	r3, #0
 801d570:	bfbb      	ittet	lt
 801d572:	425b      	neglt	r3, r3
 801d574:	f042 0202 	orrlt.w	r2, r2, #2
 801d578:	9307      	strge	r3, [sp, #28]
 801d57a:	9307      	strlt	r3, [sp, #28]
 801d57c:	bfb8      	it	lt
 801d57e:	9204      	strlt	r2, [sp, #16]
 801d580:	7823      	ldrb	r3, [r4, #0]
 801d582:	2b2e      	cmp	r3, #46	; 0x2e
 801d584:	d10c      	bne.n	801d5a0 <_svfiprintf_r+0x130>
 801d586:	7863      	ldrb	r3, [r4, #1]
 801d588:	2b2a      	cmp	r3, #42	; 0x2a
 801d58a:	d135      	bne.n	801d5f8 <_svfiprintf_r+0x188>
 801d58c:	9b03      	ldr	r3, [sp, #12]
 801d58e:	1d1a      	adds	r2, r3, #4
 801d590:	681b      	ldr	r3, [r3, #0]
 801d592:	9203      	str	r2, [sp, #12]
 801d594:	2b00      	cmp	r3, #0
 801d596:	bfb8      	it	lt
 801d598:	f04f 33ff 	movlt.w	r3, #4294967295
 801d59c:	3402      	adds	r4, #2
 801d59e:	9305      	str	r3, [sp, #20]
 801d5a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801d66c <_svfiprintf_r+0x1fc>
 801d5a4:	7821      	ldrb	r1, [r4, #0]
 801d5a6:	2203      	movs	r2, #3
 801d5a8:	4650      	mov	r0, sl
 801d5aa:	f7e2 fe31 	bl	8000210 <memchr>
 801d5ae:	b140      	cbz	r0, 801d5c2 <_svfiprintf_r+0x152>
 801d5b0:	2340      	movs	r3, #64	; 0x40
 801d5b2:	eba0 000a 	sub.w	r0, r0, sl
 801d5b6:	fa03 f000 	lsl.w	r0, r3, r0
 801d5ba:	9b04      	ldr	r3, [sp, #16]
 801d5bc:	4303      	orrs	r3, r0
 801d5be:	3401      	adds	r4, #1
 801d5c0:	9304      	str	r3, [sp, #16]
 801d5c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d5c6:	4826      	ldr	r0, [pc, #152]	; (801d660 <_svfiprintf_r+0x1f0>)
 801d5c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d5cc:	2206      	movs	r2, #6
 801d5ce:	f7e2 fe1f 	bl	8000210 <memchr>
 801d5d2:	2800      	cmp	r0, #0
 801d5d4:	d038      	beq.n	801d648 <_svfiprintf_r+0x1d8>
 801d5d6:	4b23      	ldr	r3, [pc, #140]	; (801d664 <_svfiprintf_r+0x1f4>)
 801d5d8:	bb1b      	cbnz	r3, 801d622 <_svfiprintf_r+0x1b2>
 801d5da:	9b03      	ldr	r3, [sp, #12]
 801d5dc:	3307      	adds	r3, #7
 801d5de:	f023 0307 	bic.w	r3, r3, #7
 801d5e2:	3308      	adds	r3, #8
 801d5e4:	9303      	str	r3, [sp, #12]
 801d5e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d5e8:	4433      	add	r3, r6
 801d5ea:	9309      	str	r3, [sp, #36]	; 0x24
 801d5ec:	e767      	b.n	801d4be <_svfiprintf_r+0x4e>
 801d5ee:	fb0c 3202 	mla	r2, ip, r2, r3
 801d5f2:	460c      	mov	r4, r1
 801d5f4:	2001      	movs	r0, #1
 801d5f6:	e7a5      	b.n	801d544 <_svfiprintf_r+0xd4>
 801d5f8:	2300      	movs	r3, #0
 801d5fa:	3401      	adds	r4, #1
 801d5fc:	9305      	str	r3, [sp, #20]
 801d5fe:	4619      	mov	r1, r3
 801d600:	f04f 0c0a 	mov.w	ip, #10
 801d604:	4620      	mov	r0, r4
 801d606:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d60a:	3a30      	subs	r2, #48	; 0x30
 801d60c:	2a09      	cmp	r2, #9
 801d60e:	d903      	bls.n	801d618 <_svfiprintf_r+0x1a8>
 801d610:	2b00      	cmp	r3, #0
 801d612:	d0c5      	beq.n	801d5a0 <_svfiprintf_r+0x130>
 801d614:	9105      	str	r1, [sp, #20]
 801d616:	e7c3      	b.n	801d5a0 <_svfiprintf_r+0x130>
 801d618:	fb0c 2101 	mla	r1, ip, r1, r2
 801d61c:	4604      	mov	r4, r0
 801d61e:	2301      	movs	r3, #1
 801d620:	e7f0      	b.n	801d604 <_svfiprintf_r+0x194>
 801d622:	ab03      	add	r3, sp, #12
 801d624:	9300      	str	r3, [sp, #0]
 801d626:	462a      	mov	r2, r5
 801d628:	4b0f      	ldr	r3, [pc, #60]	; (801d668 <_svfiprintf_r+0x1f8>)
 801d62a:	a904      	add	r1, sp, #16
 801d62c:	4638      	mov	r0, r7
 801d62e:	f7fc fa57 	bl	8019ae0 <_printf_float>
 801d632:	1c42      	adds	r2, r0, #1
 801d634:	4606      	mov	r6, r0
 801d636:	d1d6      	bne.n	801d5e6 <_svfiprintf_r+0x176>
 801d638:	89ab      	ldrh	r3, [r5, #12]
 801d63a:	065b      	lsls	r3, r3, #25
 801d63c:	f53f af2c 	bmi.w	801d498 <_svfiprintf_r+0x28>
 801d640:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d642:	b01d      	add	sp, #116	; 0x74
 801d644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d648:	ab03      	add	r3, sp, #12
 801d64a:	9300      	str	r3, [sp, #0]
 801d64c:	462a      	mov	r2, r5
 801d64e:	4b06      	ldr	r3, [pc, #24]	; (801d668 <_svfiprintf_r+0x1f8>)
 801d650:	a904      	add	r1, sp, #16
 801d652:	4638      	mov	r0, r7
 801d654:	f7fc fce8 	bl	801a028 <_printf_i>
 801d658:	e7eb      	b.n	801d632 <_svfiprintf_r+0x1c2>
 801d65a:	bf00      	nop
 801d65c:	0802585c 	.word	0x0802585c
 801d660:	08025866 	.word	0x08025866
 801d664:	08019ae1 	.word	0x08019ae1
 801d668:	0801d3b9 	.word	0x0801d3b9
 801d66c:	08025862 	.word	0x08025862

0801d670 <nan>:
 801d670:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801d678 <nan+0x8>
 801d674:	4770      	bx	lr
 801d676:	bf00      	nop
 801d678:	00000000 	.word	0x00000000
 801d67c:	7ff80000 	.word	0x7ff80000

0801d680 <_sbrk_r>:
 801d680:	b538      	push	{r3, r4, r5, lr}
 801d682:	4d06      	ldr	r5, [pc, #24]	; (801d69c <_sbrk_r+0x1c>)
 801d684:	2300      	movs	r3, #0
 801d686:	4604      	mov	r4, r0
 801d688:	4608      	mov	r0, r1
 801d68a:	602b      	str	r3, [r5, #0]
 801d68c:	f7f0 f9ce 	bl	800da2c <_sbrk>
 801d690:	1c43      	adds	r3, r0, #1
 801d692:	d102      	bne.n	801d69a <_sbrk_r+0x1a>
 801d694:	682b      	ldr	r3, [r5, #0]
 801d696:	b103      	cbz	r3, 801d69a <_sbrk_r+0x1a>
 801d698:	6023      	str	r3, [r4, #0]
 801d69a:	bd38      	pop	{r3, r4, r5, pc}
 801d69c:	20037400 	.word	0x20037400

0801d6a0 <strncmp>:
 801d6a0:	b510      	push	{r4, lr}
 801d6a2:	b17a      	cbz	r2, 801d6c4 <strncmp+0x24>
 801d6a4:	4603      	mov	r3, r0
 801d6a6:	3901      	subs	r1, #1
 801d6a8:	1884      	adds	r4, r0, r2
 801d6aa:	f813 0b01 	ldrb.w	r0, [r3], #1
 801d6ae:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801d6b2:	4290      	cmp	r0, r2
 801d6b4:	d101      	bne.n	801d6ba <strncmp+0x1a>
 801d6b6:	42a3      	cmp	r3, r4
 801d6b8:	d101      	bne.n	801d6be <strncmp+0x1e>
 801d6ba:	1a80      	subs	r0, r0, r2
 801d6bc:	bd10      	pop	{r4, pc}
 801d6be:	2800      	cmp	r0, #0
 801d6c0:	d1f3      	bne.n	801d6aa <strncmp+0xa>
 801d6c2:	e7fa      	b.n	801d6ba <strncmp+0x1a>
 801d6c4:	4610      	mov	r0, r2
 801d6c6:	e7f9      	b.n	801d6bc <strncmp+0x1c>

0801d6c8 <__ascii_wctomb>:
 801d6c8:	b149      	cbz	r1, 801d6de <__ascii_wctomb+0x16>
 801d6ca:	2aff      	cmp	r2, #255	; 0xff
 801d6cc:	bf85      	ittet	hi
 801d6ce:	238a      	movhi	r3, #138	; 0x8a
 801d6d0:	6003      	strhi	r3, [r0, #0]
 801d6d2:	700a      	strbls	r2, [r1, #0]
 801d6d4:	f04f 30ff 	movhi.w	r0, #4294967295
 801d6d8:	bf98      	it	ls
 801d6da:	2001      	movls	r0, #1
 801d6dc:	4770      	bx	lr
 801d6de:	4608      	mov	r0, r1
 801d6e0:	4770      	bx	lr
	...

0801d6e4 <__assert_func>:
 801d6e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d6e6:	4614      	mov	r4, r2
 801d6e8:	461a      	mov	r2, r3
 801d6ea:	4b09      	ldr	r3, [pc, #36]	; (801d710 <__assert_func+0x2c>)
 801d6ec:	681b      	ldr	r3, [r3, #0]
 801d6ee:	4605      	mov	r5, r0
 801d6f0:	68d8      	ldr	r0, [r3, #12]
 801d6f2:	b14c      	cbz	r4, 801d708 <__assert_func+0x24>
 801d6f4:	4b07      	ldr	r3, [pc, #28]	; (801d714 <__assert_func+0x30>)
 801d6f6:	9100      	str	r1, [sp, #0]
 801d6f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d6fc:	4906      	ldr	r1, [pc, #24]	; (801d718 <__assert_func+0x34>)
 801d6fe:	462b      	mov	r3, r5
 801d700:	f000 f80e 	bl	801d720 <fiprintf>
 801d704:	f000 fa8c 	bl	801dc20 <abort>
 801d708:	4b04      	ldr	r3, [pc, #16]	; (801d71c <__assert_func+0x38>)
 801d70a:	461c      	mov	r4, r3
 801d70c:	e7f3      	b.n	801d6f6 <__assert_func+0x12>
 801d70e:	bf00      	nop
 801d710:	200000a4 	.word	0x200000a4
 801d714:	0802586d 	.word	0x0802586d
 801d718:	0802587a 	.word	0x0802587a
 801d71c:	080258a8 	.word	0x080258a8

0801d720 <fiprintf>:
 801d720:	b40e      	push	{r1, r2, r3}
 801d722:	b503      	push	{r0, r1, lr}
 801d724:	4601      	mov	r1, r0
 801d726:	ab03      	add	r3, sp, #12
 801d728:	4805      	ldr	r0, [pc, #20]	; (801d740 <fiprintf+0x20>)
 801d72a:	f853 2b04 	ldr.w	r2, [r3], #4
 801d72e:	6800      	ldr	r0, [r0, #0]
 801d730:	9301      	str	r3, [sp, #4]
 801d732:	f000 f885 	bl	801d840 <_vfiprintf_r>
 801d736:	b002      	add	sp, #8
 801d738:	f85d eb04 	ldr.w	lr, [sp], #4
 801d73c:	b003      	add	sp, #12
 801d73e:	4770      	bx	lr
 801d740:	200000a4 	.word	0x200000a4

0801d744 <memmove>:
 801d744:	4288      	cmp	r0, r1
 801d746:	b510      	push	{r4, lr}
 801d748:	eb01 0402 	add.w	r4, r1, r2
 801d74c:	d902      	bls.n	801d754 <memmove+0x10>
 801d74e:	4284      	cmp	r4, r0
 801d750:	4623      	mov	r3, r4
 801d752:	d807      	bhi.n	801d764 <memmove+0x20>
 801d754:	1e43      	subs	r3, r0, #1
 801d756:	42a1      	cmp	r1, r4
 801d758:	d008      	beq.n	801d76c <memmove+0x28>
 801d75a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d75e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801d762:	e7f8      	b.n	801d756 <memmove+0x12>
 801d764:	4402      	add	r2, r0
 801d766:	4601      	mov	r1, r0
 801d768:	428a      	cmp	r2, r1
 801d76a:	d100      	bne.n	801d76e <memmove+0x2a>
 801d76c:	bd10      	pop	{r4, pc}
 801d76e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801d772:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801d776:	e7f7      	b.n	801d768 <memmove+0x24>

0801d778 <__malloc_lock>:
 801d778:	4801      	ldr	r0, [pc, #4]	; (801d780 <__malloc_lock+0x8>)
 801d77a:	f000 bc11 	b.w	801dfa0 <__retarget_lock_acquire_recursive>
 801d77e:	bf00      	nop
 801d780:	20037404 	.word	0x20037404

0801d784 <__malloc_unlock>:
 801d784:	4801      	ldr	r0, [pc, #4]	; (801d78c <__malloc_unlock+0x8>)
 801d786:	f000 bc0c 	b.w	801dfa2 <__retarget_lock_release_recursive>
 801d78a:	bf00      	nop
 801d78c:	20037404 	.word	0x20037404

0801d790 <_realloc_r>:
 801d790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d794:	4680      	mov	r8, r0
 801d796:	4614      	mov	r4, r2
 801d798:	460e      	mov	r6, r1
 801d79a:	b921      	cbnz	r1, 801d7a6 <_realloc_r+0x16>
 801d79c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d7a0:	4611      	mov	r1, r2
 801d7a2:	f7ff bd95 	b.w	801d2d0 <_malloc_r>
 801d7a6:	b92a      	cbnz	r2, 801d7b4 <_realloc_r+0x24>
 801d7a8:	f7ff fd26 	bl	801d1f8 <_free_r>
 801d7ac:	4625      	mov	r5, r4
 801d7ae:	4628      	mov	r0, r5
 801d7b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d7b4:	f000 fc5c 	bl	801e070 <_malloc_usable_size_r>
 801d7b8:	4284      	cmp	r4, r0
 801d7ba:	4607      	mov	r7, r0
 801d7bc:	d802      	bhi.n	801d7c4 <_realloc_r+0x34>
 801d7be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801d7c2:	d812      	bhi.n	801d7ea <_realloc_r+0x5a>
 801d7c4:	4621      	mov	r1, r4
 801d7c6:	4640      	mov	r0, r8
 801d7c8:	f7ff fd82 	bl	801d2d0 <_malloc_r>
 801d7cc:	4605      	mov	r5, r0
 801d7ce:	2800      	cmp	r0, #0
 801d7d0:	d0ed      	beq.n	801d7ae <_realloc_r+0x1e>
 801d7d2:	42bc      	cmp	r4, r7
 801d7d4:	4622      	mov	r2, r4
 801d7d6:	4631      	mov	r1, r6
 801d7d8:	bf28      	it	cs
 801d7da:	463a      	movcs	r2, r7
 801d7dc:	f7fc f8ca 	bl	8019974 <memcpy>
 801d7e0:	4631      	mov	r1, r6
 801d7e2:	4640      	mov	r0, r8
 801d7e4:	f7ff fd08 	bl	801d1f8 <_free_r>
 801d7e8:	e7e1      	b.n	801d7ae <_realloc_r+0x1e>
 801d7ea:	4635      	mov	r5, r6
 801d7ec:	e7df      	b.n	801d7ae <_realloc_r+0x1e>

0801d7ee <__sfputc_r>:
 801d7ee:	6893      	ldr	r3, [r2, #8]
 801d7f0:	3b01      	subs	r3, #1
 801d7f2:	2b00      	cmp	r3, #0
 801d7f4:	b410      	push	{r4}
 801d7f6:	6093      	str	r3, [r2, #8]
 801d7f8:	da08      	bge.n	801d80c <__sfputc_r+0x1e>
 801d7fa:	6994      	ldr	r4, [r2, #24]
 801d7fc:	42a3      	cmp	r3, r4
 801d7fe:	db01      	blt.n	801d804 <__sfputc_r+0x16>
 801d800:	290a      	cmp	r1, #10
 801d802:	d103      	bne.n	801d80c <__sfputc_r+0x1e>
 801d804:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d808:	f000 b94a 	b.w	801daa0 <__swbuf_r>
 801d80c:	6813      	ldr	r3, [r2, #0]
 801d80e:	1c58      	adds	r0, r3, #1
 801d810:	6010      	str	r0, [r2, #0]
 801d812:	7019      	strb	r1, [r3, #0]
 801d814:	4608      	mov	r0, r1
 801d816:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d81a:	4770      	bx	lr

0801d81c <__sfputs_r>:
 801d81c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d81e:	4606      	mov	r6, r0
 801d820:	460f      	mov	r7, r1
 801d822:	4614      	mov	r4, r2
 801d824:	18d5      	adds	r5, r2, r3
 801d826:	42ac      	cmp	r4, r5
 801d828:	d101      	bne.n	801d82e <__sfputs_r+0x12>
 801d82a:	2000      	movs	r0, #0
 801d82c:	e007      	b.n	801d83e <__sfputs_r+0x22>
 801d82e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d832:	463a      	mov	r2, r7
 801d834:	4630      	mov	r0, r6
 801d836:	f7ff ffda 	bl	801d7ee <__sfputc_r>
 801d83a:	1c43      	adds	r3, r0, #1
 801d83c:	d1f3      	bne.n	801d826 <__sfputs_r+0xa>
 801d83e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801d840 <_vfiprintf_r>:
 801d840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d844:	460d      	mov	r5, r1
 801d846:	b09d      	sub	sp, #116	; 0x74
 801d848:	4614      	mov	r4, r2
 801d84a:	4698      	mov	r8, r3
 801d84c:	4606      	mov	r6, r0
 801d84e:	b118      	cbz	r0, 801d858 <_vfiprintf_r+0x18>
 801d850:	6983      	ldr	r3, [r0, #24]
 801d852:	b90b      	cbnz	r3, 801d858 <_vfiprintf_r+0x18>
 801d854:	f000 fb06 	bl	801de64 <__sinit>
 801d858:	4b89      	ldr	r3, [pc, #548]	; (801da80 <_vfiprintf_r+0x240>)
 801d85a:	429d      	cmp	r5, r3
 801d85c:	d11b      	bne.n	801d896 <_vfiprintf_r+0x56>
 801d85e:	6875      	ldr	r5, [r6, #4]
 801d860:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d862:	07d9      	lsls	r1, r3, #31
 801d864:	d405      	bmi.n	801d872 <_vfiprintf_r+0x32>
 801d866:	89ab      	ldrh	r3, [r5, #12]
 801d868:	059a      	lsls	r2, r3, #22
 801d86a:	d402      	bmi.n	801d872 <_vfiprintf_r+0x32>
 801d86c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d86e:	f000 fb97 	bl	801dfa0 <__retarget_lock_acquire_recursive>
 801d872:	89ab      	ldrh	r3, [r5, #12]
 801d874:	071b      	lsls	r3, r3, #28
 801d876:	d501      	bpl.n	801d87c <_vfiprintf_r+0x3c>
 801d878:	692b      	ldr	r3, [r5, #16]
 801d87a:	b9eb      	cbnz	r3, 801d8b8 <_vfiprintf_r+0x78>
 801d87c:	4629      	mov	r1, r5
 801d87e:	4630      	mov	r0, r6
 801d880:	f000 f960 	bl	801db44 <__swsetup_r>
 801d884:	b1c0      	cbz	r0, 801d8b8 <_vfiprintf_r+0x78>
 801d886:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d888:	07dc      	lsls	r4, r3, #31
 801d88a:	d50e      	bpl.n	801d8aa <_vfiprintf_r+0x6a>
 801d88c:	f04f 30ff 	mov.w	r0, #4294967295
 801d890:	b01d      	add	sp, #116	; 0x74
 801d892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d896:	4b7b      	ldr	r3, [pc, #492]	; (801da84 <_vfiprintf_r+0x244>)
 801d898:	429d      	cmp	r5, r3
 801d89a:	d101      	bne.n	801d8a0 <_vfiprintf_r+0x60>
 801d89c:	68b5      	ldr	r5, [r6, #8]
 801d89e:	e7df      	b.n	801d860 <_vfiprintf_r+0x20>
 801d8a0:	4b79      	ldr	r3, [pc, #484]	; (801da88 <_vfiprintf_r+0x248>)
 801d8a2:	429d      	cmp	r5, r3
 801d8a4:	bf08      	it	eq
 801d8a6:	68f5      	ldreq	r5, [r6, #12]
 801d8a8:	e7da      	b.n	801d860 <_vfiprintf_r+0x20>
 801d8aa:	89ab      	ldrh	r3, [r5, #12]
 801d8ac:	0598      	lsls	r0, r3, #22
 801d8ae:	d4ed      	bmi.n	801d88c <_vfiprintf_r+0x4c>
 801d8b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d8b2:	f000 fb76 	bl	801dfa2 <__retarget_lock_release_recursive>
 801d8b6:	e7e9      	b.n	801d88c <_vfiprintf_r+0x4c>
 801d8b8:	2300      	movs	r3, #0
 801d8ba:	9309      	str	r3, [sp, #36]	; 0x24
 801d8bc:	2320      	movs	r3, #32
 801d8be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d8c2:	f8cd 800c 	str.w	r8, [sp, #12]
 801d8c6:	2330      	movs	r3, #48	; 0x30
 801d8c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801da8c <_vfiprintf_r+0x24c>
 801d8cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d8d0:	f04f 0901 	mov.w	r9, #1
 801d8d4:	4623      	mov	r3, r4
 801d8d6:	469a      	mov	sl, r3
 801d8d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d8dc:	b10a      	cbz	r2, 801d8e2 <_vfiprintf_r+0xa2>
 801d8de:	2a25      	cmp	r2, #37	; 0x25
 801d8e0:	d1f9      	bne.n	801d8d6 <_vfiprintf_r+0x96>
 801d8e2:	ebba 0b04 	subs.w	fp, sl, r4
 801d8e6:	d00b      	beq.n	801d900 <_vfiprintf_r+0xc0>
 801d8e8:	465b      	mov	r3, fp
 801d8ea:	4622      	mov	r2, r4
 801d8ec:	4629      	mov	r1, r5
 801d8ee:	4630      	mov	r0, r6
 801d8f0:	f7ff ff94 	bl	801d81c <__sfputs_r>
 801d8f4:	3001      	adds	r0, #1
 801d8f6:	f000 80aa 	beq.w	801da4e <_vfiprintf_r+0x20e>
 801d8fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d8fc:	445a      	add	r2, fp
 801d8fe:	9209      	str	r2, [sp, #36]	; 0x24
 801d900:	f89a 3000 	ldrb.w	r3, [sl]
 801d904:	2b00      	cmp	r3, #0
 801d906:	f000 80a2 	beq.w	801da4e <_vfiprintf_r+0x20e>
 801d90a:	2300      	movs	r3, #0
 801d90c:	f04f 32ff 	mov.w	r2, #4294967295
 801d910:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d914:	f10a 0a01 	add.w	sl, sl, #1
 801d918:	9304      	str	r3, [sp, #16]
 801d91a:	9307      	str	r3, [sp, #28]
 801d91c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d920:	931a      	str	r3, [sp, #104]	; 0x68
 801d922:	4654      	mov	r4, sl
 801d924:	2205      	movs	r2, #5
 801d926:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d92a:	4858      	ldr	r0, [pc, #352]	; (801da8c <_vfiprintf_r+0x24c>)
 801d92c:	f7e2 fc70 	bl	8000210 <memchr>
 801d930:	9a04      	ldr	r2, [sp, #16]
 801d932:	b9d8      	cbnz	r0, 801d96c <_vfiprintf_r+0x12c>
 801d934:	06d1      	lsls	r1, r2, #27
 801d936:	bf44      	itt	mi
 801d938:	2320      	movmi	r3, #32
 801d93a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d93e:	0713      	lsls	r3, r2, #28
 801d940:	bf44      	itt	mi
 801d942:	232b      	movmi	r3, #43	; 0x2b
 801d944:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d948:	f89a 3000 	ldrb.w	r3, [sl]
 801d94c:	2b2a      	cmp	r3, #42	; 0x2a
 801d94e:	d015      	beq.n	801d97c <_vfiprintf_r+0x13c>
 801d950:	9a07      	ldr	r2, [sp, #28]
 801d952:	4654      	mov	r4, sl
 801d954:	2000      	movs	r0, #0
 801d956:	f04f 0c0a 	mov.w	ip, #10
 801d95a:	4621      	mov	r1, r4
 801d95c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d960:	3b30      	subs	r3, #48	; 0x30
 801d962:	2b09      	cmp	r3, #9
 801d964:	d94e      	bls.n	801da04 <_vfiprintf_r+0x1c4>
 801d966:	b1b0      	cbz	r0, 801d996 <_vfiprintf_r+0x156>
 801d968:	9207      	str	r2, [sp, #28]
 801d96a:	e014      	b.n	801d996 <_vfiprintf_r+0x156>
 801d96c:	eba0 0308 	sub.w	r3, r0, r8
 801d970:	fa09 f303 	lsl.w	r3, r9, r3
 801d974:	4313      	orrs	r3, r2
 801d976:	9304      	str	r3, [sp, #16]
 801d978:	46a2      	mov	sl, r4
 801d97a:	e7d2      	b.n	801d922 <_vfiprintf_r+0xe2>
 801d97c:	9b03      	ldr	r3, [sp, #12]
 801d97e:	1d19      	adds	r1, r3, #4
 801d980:	681b      	ldr	r3, [r3, #0]
 801d982:	9103      	str	r1, [sp, #12]
 801d984:	2b00      	cmp	r3, #0
 801d986:	bfbb      	ittet	lt
 801d988:	425b      	neglt	r3, r3
 801d98a:	f042 0202 	orrlt.w	r2, r2, #2
 801d98e:	9307      	strge	r3, [sp, #28]
 801d990:	9307      	strlt	r3, [sp, #28]
 801d992:	bfb8      	it	lt
 801d994:	9204      	strlt	r2, [sp, #16]
 801d996:	7823      	ldrb	r3, [r4, #0]
 801d998:	2b2e      	cmp	r3, #46	; 0x2e
 801d99a:	d10c      	bne.n	801d9b6 <_vfiprintf_r+0x176>
 801d99c:	7863      	ldrb	r3, [r4, #1]
 801d99e:	2b2a      	cmp	r3, #42	; 0x2a
 801d9a0:	d135      	bne.n	801da0e <_vfiprintf_r+0x1ce>
 801d9a2:	9b03      	ldr	r3, [sp, #12]
 801d9a4:	1d1a      	adds	r2, r3, #4
 801d9a6:	681b      	ldr	r3, [r3, #0]
 801d9a8:	9203      	str	r2, [sp, #12]
 801d9aa:	2b00      	cmp	r3, #0
 801d9ac:	bfb8      	it	lt
 801d9ae:	f04f 33ff 	movlt.w	r3, #4294967295
 801d9b2:	3402      	adds	r4, #2
 801d9b4:	9305      	str	r3, [sp, #20]
 801d9b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801da9c <_vfiprintf_r+0x25c>
 801d9ba:	7821      	ldrb	r1, [r4, #0]
 801d9bc:	2203      	movs	r2, #3
 801d9be:	4650      	mov	r0, sl
 801d9c0:	f7e2 fc26 	bl	8000210 <memchr>
 801d9c4:	b140      	cbz	r0, 801d9d8 <_vfiprintf_r+0x198>
 801d9c6:	2340      	movs	r3, #64	; 0x40
 801d9c8:	eba0 000a 	sub.w	r0, r0, sl
 801d9cc:	fa03 f000 	lsl.w	r0, r3, r0
 801d9d0:	9b04      	ldr	r3, [sp, #16]
 801d9d2:	4303      	orrs	r3, r0
 801d9d4:	3401      	adds	r4, #1
 801d9d6:	9304      	str	r3, [sp, #16]
 801d9d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d9dc:	482c      	ldr	r0, [pc, #176]	; (801da90 <_vfiprintf_r+0x250>)
 801d9de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d9e2:	2206      	movs	r2, #6
 801d9e4:	f7e2 fc14 	bl	8000210 <memchr>
 801d9e8:	2800      	cmp	r0, #0
 801d9ea:	d03f      	beq.n	801da6c <_vfiprintf_r+0x22c>
 801d9ec:	4b29      	ldr	r3, [pc, #164]	; (801da94 <_vfiprintf_r+0x254>)
 801d9ee:	bb1b      	cbnz	r3, 801da38 <_vfiprintf_r+0x1f8>
 801d9f0:	9b03      	ldr	r3, [sp, #12]
 801d9f2:	3307      	adds	r3, #7
 801d9f4:	f023 0307 	bic.w	r3, r3, #7
 801d9f8:	3308      	adds	r3, #8
 801d9fa:	9303      	str	r3, [sp, #12]
 801d9fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d9fe:	443b      	add	r3, r7
 801da00:	9309      	str	r3, [sp, #36]	; 0x24
 801da02:	e767      	b.n	801d8d4 <_vfiprintf_r+0x94>
 801da04:	fb0c 3202 	mla	r2, ip, r2, r3
 801da08:	460c      	mov	r4, r1
 801da0a:	2001      	movs	r0, #1
 801da0c:	e7a5      	b.n	801d95a <_vfiprintf_r+0x11a>
 801da0e:	2300      	movs	r3, #0
 801da10:	3401      	adds	r4, #1
 801da12:	9305      	str	r3, [sp, #20]
 801da14:	4619      	mov	r1, r3
 801da16:	f04f 0c0a 	mov.w	ip, #10
 801da1a:	4620      	mov	r0, r4
 801da1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801da20:	3a30      	subs	r2, #48	; 0x30
 801da22:	2a09      	cmp	r2, #9
 801da24:	d903      	bls.n	801da2e <_vfiprintf_r+0x1ee>
 801da26:	2b00      	cmp	r3, #0
 801da28:	d0c5      	beq.n	801d9b6 <_vfiprintf_r+0x176>
 801da2a:	9105      	str	r1, [sp, #20]
 801da2c:	e7c3      	b.n	801d9b6 <_vfiprintf_r+0x176>
 801da2e:	fb0c 2101 	mla	r1, ip, r1, r2
 801da32:	4604      	mov	r4, r0
 801da34:	2301      	movs	r3, #1
 801da36:	e7f0      	b.n	801da1a <_vfiprintf_r+0x1da>
 801da38:	ab03      	add	r3, sp, #12
 801da3a:	9300      	str	r3, [sp, #0]
 801da3c:	462a      	mov	r2, r5
 801da3e:	4b16      	ldr	r3, [pc, #88]	; (801da98 <_vfiprintf_r+0x258>)
 801da40:	a904      	add	r1, sp, #16
 801da42:	4630      	mov	r0, r6
 801da44:	f7fc f84c 	bl	8019ae0 <_printf_float>
 801da48:	4607      	mov	r7, r0
 801da4a:	1c78      	adds	r0, r7, #1
 801da4c:	d1d6      	bne.n	801d9fc <_vfiprintf_r+0x1bc>
 801da4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801da50:	07d9      	lsls	r1, r3, #31
 801da52:	d405      	bmi.n	801da60 <_vfiprintf_r+0x220>
 801da54:	89ab      	ldrh	r3, [r5, #12]
 801da56:	059a      	lsls	r2, r3, #22
 801da58:	d402      	bmi.n	801da60 <_vfiprintf_r+0x220>
 801da5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801da5c:	f000 faa1 	bl	801dfa2 <__retarget_lock_release_recursive>
 801da60:	89ab      	ldrh	r3, [r5, #12]
 801da62:	065b      	lsls	r3, r3, #25
 801da64:	f53f af12 	bmi.w	801d88c <_vfiprintf_r+0x4c>
 801da68:	9809      	ldr	r0, [sp, #36]	; 0x24
 801da6a:	e711      	b.n	801d890 <_vfiprintf_r+0x50>
 801da6c:	ab03      	add	r3, sp, #12
 801da6e:	9300      	str	r3, [sp, #0]
 801da70:	462a      	mov	r2, r5
 801da72:	4b09      	ldr	r3, [pc, #36]	; (801da98 <_vfiprintf_r+0x258>)
 801da74:	a904      	add	r1, sp, #16
 801da76:	4630      	mov	r0, r6
 801da78:	f7fc fad6 	bl	801a028 <_printf_i>
 801da7c:	e7e4      	b.n	801da48 <_vfiprintf_r+0x208>
 801da7e:	bf00      	nop
 801da80:	080258cc 	.word	0x080258cc
 801da84:	080258ec 	.word	0x080258ec
 801da88:	080258ac 	.word	0x080258ac
 801da8c:	0802585c 	.word	0x0802585c
 801da90:	08025866 	.word	0x08025866
 801da94:	08019ae1 	.word	0x08019ae1
 801da98:	0801d81d 	.word	0x0801d81d
 801da9c:	08025862 	.word	0x08025862

0801daa0 <__swbuf_r>:
 801daa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801daa2:	460e      	mov	r6, r1
 801daa4:	4614      	mov	r4, r2
 801daa6:	4605      	mov	r5, r0
 801daa8:	b118      	cbz	r0, 801dab2 <__swbuf_r+0x12>
 801daaa:	6983      	ldr	r3, [r0, #24]
 801daac:	b90b      	cbnz	r3, 801dab2 <__swbuf_r+0x12>
 801daae:	f000 f9d9 	bl	801de64 <__sinit>
 801dab2:	4b21      	ldr	r3, [pc, #132]	; (801db38 <__swbuf_r+0x98>)
 801dab4:	429c      	cmp	r4, r3
 801dab6:	d12b      	bne.n	801db10 <__swbuf_r+0x70>
 801dab8:	686c      	ldr	r4, [r5, #4]
 801daba:	69a3      	ldr	r3, [r4, #24]
 801dabc:	60a3      	str	r3, [r4, #8]
 801dabe:	89a3      	ldrh	r3, [r4, #12]
 801dac0:	071a      	lsls	r2, r3, #28
 801dac2:	d52f      	bpl.n	801db24 <__swbuf_r+0x84>
 801dac4:	6923      	ldr	r3, [r4, #16]
 801dac6:	b36b      	cbz	r3, 801db24 <__swbuf_r+0x84>
 801dac8:	6923      	ldr	r3, [r4, #16]
 801daca:	6820      	ldr	r0, [r4, #0]
 801dacc:	1ac0      	subs	r0, r0, r3
 801dace:	6963      	ldr	r3, [r4, #20]
 801dad0:	b2f6      	uxtb	r6, r6
 801dad2:	4283      	cmp	r3, r0
 801dad4:	4637      	mov	r7, r6
 801dad6:	dc04      	bgt.n	801dae2 <__swbuf_r+0x42>
 801dad8:	4621      	mov	r1, r4
 801dada:	4628      	mov	r0, r5
 801dadc:	f000 f92e 	bl	801dd3c <_fflush_r>
 801dae0:	bb30      	cbnz	r0, 801db30 <__swbuf_r+0x90>
 801dae2:	68a3      	ldr	r3, [r4, #8]
 801dae4:	3b01      	subs	r3, #1
 801dae6:	60a3      	str	r3, [r4, #8]
 801dae8:	6823      	ldr	r3, [r4, #0]
 801daea:	1c5a      	adds	r2, r3, #1
 801daec:	6022      	str	r2, [r4, #0]
 801daee:	701e      	strb	r6, [r3, #0]
 801daf0:	6963      	ldr	r3, [r4, #20]
 801daf2:	3001      	adds	r0, #1
 801daf4:	4283      	cmp	r3, r0
 801daf6:	d004      	beq.n	801db02 <__swbuf_r+0x62>
 801daf8:	89a3      	ldrh	r3, [r4, #12]
 801dafa:	07db      	lsls	r3, r3, #31
 801dafc:	d506      	bpl.n	801db0c <__swbuf_r+0x6c>
 801dafe:	2e0a      	cmp	r6, #10
 801db00:	d104      	bne.n	801db0c <__swbuf_r+0x6c>
 801db02:	4621      	mov	r1, r4
 801db04:	4628      	mov	r0, r5
 801db06:	f000 f919 	bl	801dd3c <_fflush_r>
 801db0a:	b988      	cbnz	r0, 801db30 <__swbuf_r+0x90>
 801db0c:	4638      	mov	r0, r7
 801db0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801db10:	4b0a      	ldr	r3, [pc, #40]	; (801db3c <__swbuf_r+0x9c>)
 801db12:	429c      	cmp	r4, r3
 801db14:	d101      	bne.n	801db1a <__swbuf_r+0x7a>
 801db16:	68ac      	ldr	r4, [r5, #8]
 801db18:	e7cf      	b.n	801daba <__swbuf_r+0x1a>
 801db1a:	4b09      	ldr	r3, [pc, #36]	; (801db40 <__swbuf_r+0xa0>)
 801db1c:	429c      	cmp	r4, r3
 801db1e:	bf08      	it	eq
 801db20:	68ec      	ldreq	r4, [r5, #12]
 801db22:	e7ca      	b.n	801daba <__swbuf_r+0x1a>
 801db24:	4621      	mov	r1, r4
 801db26:	4628      	mov	r0, r5
 801db28:	f000 f80c 	bl	801db44 <__swsetup_r>
 801db2c:	2800      	cmp	r0, #0
 801db2e:	d0cb      	beq.n	801dac8 <__swbuf_r+0x28>
 801db30:	f04f 37ff 	mov.w	r7, #4294967295
 801db34:	e7ea      	b.n	801db0c <__swbuf_r+0x6c>
 801db36:	bf00      	nop
 801db38:	080258cc 	.word	0x080258cc
 801db3c:	080258ec 	.word	0x080258ec
 801db40:	080258ac 	.word	0x080258ac

0801db44 <__swsetup_r>:
 801db44:	4b32      	ldr	r3, [pc, #200]	; (801dc10 <__swsetup_r+0xcc>)
 801db46:	b570      	push	{r4, r5, r6, lr}
 801db48:	681d      	ldr	r5, [r3, #0]
 801db4a:	4606      	mov	r6, r0
 801db4c:	460c      	mov	r4, r1
 801db4e:	b125      	cbz	r5, 801db5a <__swsetup_r+0x16>
 801db50:	69ab      	ldr	r3, [r5, #24]
 801db52:	b913      	cbnz	r3, 801db5a <__swsetup_r+0x16>
 801db54:	4628      	mov	r0, r5
 801db56:	f000 f985 	bl	801de64 <__sinit>
 801db5a:	4b2e      	ldr	r3, [pc, #184]	; (801dc14 <__swsetup_r+0xd0>)
 801db5c:	429c      	cmp	r4, r3
 801db5e:	d10f      	bne.n	801db80 <__swsetup_r+0x3c>
 801db60:	686c      	ldr	r4, [r5, #4]
 801db62:	89a3      	ldrh	r3, [r4, #12]
 801db64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801db68:	0719      	lsls	r1, r3, #28
 801db6a:	d42c      	bmi.n	801dbc6 <__swsetup_r+0x82>
 801db6c:	06dd      	lsls	r5, r3, #27
 801db6e:	d411      	bmi.n	801db94 <__swsetup_r+0x50>
 801db70:	2309      	movs	r3, #9
 801db72:	6033      	str	r3, [r6, #0]
 801db74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801db78:	81a3      	strh	r3, [r4, #12]
 801db7a:	f04f 30ff 	mov.w	r0, #4294967295
 801db7e:	e03e      	b.n	801dbfe <__swsetup_r+0xba>
 801db80:	4b25      	ldr	r3, [pc, #148]	; (801dc18 <__swsetup_r+0xd4>)
 801db82:	429c      	cmp	r4, r3
 801db84:	d101      	bne.n	801db8a <__swsetup_r+0x46>
 801db86:	68ac      	ldr	r4, [r5, #8]
 801db88:	e7eb      	b.n	801db62 <__swsetup_r+0x1e>
 801db8a:	4b24      	ldr	r3, [pc, #144]	; (801dc1c <__swsetup_r+0xd8>)
 801db8c:	429c      	cmp	r4, r3
 801db8e:	bf08      	it	eq
 801db90:	68ec      	ldreq	r4, [r5, #12]
 801db92:	e7e6      	b.n	801db62 <__swsetup_r+0x1e>
 801db94:	0758      	lsls	r0, r3, #29
 801db96:	d512      	bpl.n	801dbbe <__swsetup_r+0x7a>
 801db98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801db9a:	b141      	cbz	r1, 801dbae <__swsetup_r+0x6a>
 801db9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801dba0:	4299      	cmp	r1, r3
 801dba2:	d002      	beq.n	801dbaa <__swsetup_r+0x66>
 801dba4:	4630      	mov	r0, r6
 801dba6:	f7ff fb27 	bl	801d1f8 <_free_r>
 801dbaa:	2300      	movs	r3, #0
 801dbac:	6363      	str	r3, [r4, #52]	; 0x34
 801dbae:	89a3      	ldrh	r3, [r4, #12]
 801dbb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801dbb4:	81a3      	strh	r3, [r4, #12]
 801dbb6:	2300      	movs	r3, #0
 801dbb8:	6063      	str	r3, [r4, #4]
 801dbba:	6923      	ldr	r3, [r4, #16]
 801dbbc:	6023      	str	r3, [r4, #0]
 801dbbe:	89a3      	ldrh	r3, [r4, #12]
 801dbc0:	f043 0308 	orr.w	r3, r3, #8
 801dbc4:	81a3      	strh	r3, [r4, #12]
 801dbc6:	6923      	ldr	r3, [r4, #16]
 801dbc8:	b94b      	cbnz	r3, 801dbde <__swsetup_r+0x9a>
 801dbca:	89a3      	ldrh	r3, [r4, #12]
 801dbcc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801dbd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801dbd4:	d003      	beq.n	801dbde <__swsetup_r+0x9a>
 801dbd6:	4621      	mov	r1, r4
 801dbd8:	4630      	mov	r0, r6
 801dbda:	f000 fa09 	bl	801dff0 <__smakebuf_r>
 801dbde:	89a0      	ldrh	r0, [r4, #12]
 801dbe0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801dbe4:	f010 0301 	ands.w	r3, r0, #1
 801dbe8:	d00a      	beq.n	801dc00 <__swsetup_r+0xbc>
 801dbea:	2300      	movs	r3, #0
 801dbec:	60a3      	str	r3, [r4, #8]
 801dbee:	6963      	ldr	r3, [r4, #20]
 801dbf0:	425b      	negs	r3, r3
 801dbf2:	61a3      	str	r3, [r4, #24]
 801dbf4:	6923      	ldr	r3, [r4, #16]
 801dbf6:	b943      	cbnz	r3, 801dc0a <__swsetup_r+0xc6>
 801dbf8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801dbfc:	d1ba      	bne.n	801db74 <__swsetup_r+0x30>
 801dbfe:	bd70      	pop	{r4, r5, r6, pc}
 801dc00:	0781      	lsls	r1, r0, #30
 801dc02:	bf58      	it	pl
 801dc04:	6963      	ldrpl	r3, [r4, #20]
 801dc06:	60a3      	str	r3, [r4, #8]
 801dc08:	e7f4      	b.n	801dbf4 <__swsetup_r+0xb0>
 801dc0a:	2000      	movs	r0, #0
 801dc0c:	e7f7      	b.n	801dbfe <__swsetup_r+0xba>
 801dc0e:	bf00      	nop
 801dc10:	200000a4 	.word	0x200000a4
 801dc14:	080258cc 	.word	0x080258cc
 801dc18:	080258ec 	.word	0x080258ec
 801dc1c:	080258ac 	.word	0x080258ac

0801dc20 <abort>:
 801dc20:	b508      	push	{r3, lr}
 801dc22:	2006      	movs	r0, #6
 801dc24:	f000 fa54 	bl	801e0d0 <raise>
 801dc28:	2001      	movs	r0, #1
 801dc2a:	f7ef fe87 	bl	800d93c <_exit>
	...

0801dc30 <__sflush_r>:
 801dc30:	898a      	ldrh	r2, [r1, #12]
 801dc32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dc36:	4605      	mov	r5, r0
 801dc38:	0710      	lsls	r0, r2, #28
 801dc3a:	460c      	mov	r4, r1
 801dc3c:	d458      	bmi.n	801dcf0 <__sflush_r+0xc0>
 801dc3e:	684b      	ldr	r3, [r1, #4]
 801dc40:	2b00      	cmp	r3, #0
 801dc42:	dc05      	bgt.n	801dc50 <__sflush_r+0x20>
 801dc44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801dc46:	2b00      	cmp	r3, #0
 801dc48:	dc02      	bgt.n	801dc50 <__sflush_r+0x20>
 801dc4a:	2000      	movs	r0, #0
 801dc4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dc50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801dc52:	2e00      	cmp	r6, #0
 801dc54:	d0f9      	beq.n	801dc4a <__sflush_r+0x1a>
 801dc56:	2300      	movs	r3, #0
 801dc58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801dc5c:	682f      	ldr	r7, [r5, #0]
 801dc5e:	602b      	str	r3, [r5, #0]
 801dc60:	d032      	beq.n	801dcc8 <__sflush_r+0x98>
 801dc62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801dc64:	89a3      	ldrh	r3, [r4, #12]
 801dc66:	075a      	lsls	r2, r3, #29
 801dc68:	d505      	bpl.n	801dc76 <__sflush_r+0x46>
 801dc6a:	6863      	ldr	r3, [r4, #4]
 801dc6c:	1ac0      	subs	r0, r0, r3
 801dc6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801dc70:	b10b      	cbz	r3, 801dc76 <__sflush_r+0x46>
 801dc72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801dc74:	1ac0      	subs	r0, r0, r3
 801dc76:	2300      	movs	r3, #0
 801dc78:	4602      	mov	r2, r0
 801dc7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801dc7c:	6a21      	ldr	r1, [r4, #32]
 801dc7e:	4628      	mov	r0, r5
 801dc80:	47b0      	blx	r6
 801dc82:	1c43      	adds	r3, r0, #1
 801dc84:	89a3      	ldrh	r3, [r4, #12]
 801dc86:	d106      	bne.n	801dc96 <__sflush_r+0x66>
 801dc88:	6829      	ldr	r1, [r5, #0]
 801dc8a:	291d      	cmp	r1, #29
 801dc8c:	d82c      	bhi.n	801dce8 <__sflush_r+0xb8>
 801dc8e:	4a2a      	ldr	r2, [pc, #168]	; (801dd38 <__sflush_r+0x108>)
 801dc90:	40ca      	lsrs	r2, r1
 801dc92:	07d6      	lsls	r6, r2, #31
 801dc94:	d528      	bpl.n	801dce8 <__sflush_r+0xb8>
 801dc96:	2200      	movs	r2, #0
 801dc98:	6062      	str	r2, [r4, #4]
 801dc9a:	04d9      	lsls	r1, r3, #19
 801dc9c:	6922      	ldr	r2, [r4, #16]
 801dc9e:	6022      	str	r2, [r4, #0]
 801dca0:	d504      	bpl.n	801dcac <__sflush_r+0x7c>
 801dca2:	1c42      	adds	r2, r0, #1
 801dca4:	d101      	bne.n	801dcaa <__sflush_r+0x7a>
 801dca6:	682b      	ldr	r3, [r5, #0]
 801dca8:	b903      	cbnz	r3, 801dcac <__sflush_r+0x7c>
 801dcaa:	6560      	str	r0, [r4, #84]	; 0x54
 801dcac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801dcae:	602f      	str	r7, [r5, #0]
 801dcb0:	2900      	cmp	r1, #0
 801dcb2:	d0ca      	beq.n	801dc4a <__sflush_r+0x1a>
 801dcb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801dcb8:	4299      	cmp	r1, r3
 801dcba:	d002      	beq.n	801dcc2 <__sflush_r+0x92>
 801dcbc:	4628      	mov	r0, r5
 801dcbe:	f7ff fa9b 	bl	801d1f8 <_free_r>
 801dcc2:	2000      	movs	r0, #0
 801dcc4:	6360      	str	r0, [r4, #52]	; 0x34
 801dcc6:	e7c1      	b.n	801dc4c <__sflush_r+0x1c>
 801dcc8:	6a21      	ldr	r1, [r4, #32]
 801dcca:	2301      	movs	r3, #1
 801dccc:	4628      	mov	r0, r5
 801dcce:	47b0      	blx	r6
 801dcd0:	1c41      	adds	r1, r0, #1
 801dcd2:	d1c7      	bne.n	801dc64 <__sflush_r+0x34>
 801dcd4:	682b      	ldr	r3, [r5, #0]
 801dcd6:	2b00      	cmp	r3, #0
 801dcd8:	d0c4      	beq.n	801dc64 <__sflush_r+0x34>
 801dcda:	2b1d      	cmp	r3, #29
 801dcdc:	d001      	beq.n	801dce2 <__sflush_r+0xb2>
 801dcde:	2b16      	cmp	r3, #22
 801dce0:	d101      	bne.n	801dce6 <__sflush_r+0xb6>
 801dce2:	602f      	str	r7, [r5, #0]
 801dce4:	e7b1      	b.n	801dc4a <__sflush_r+0x1a>
 801dce6:	89a3      	ldrh	r3, [r4, #12]
 801dce8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dcec:	81a3      	strh	r3, [r4, #12]
 801dcee:	e7ad      	b.n	801dc4c <__sflush_r+0x1c>
 801dcf0:	690f      	ldr	r7, [r1, #16]
 801dcf2:	2f00      	cmp	r7, #0
 801dcf4:	d0a9      	beq.n	801dc4a <__sflush_r+0x1a>
 801dcf6:	0793      	lsls	r3, r2, #30
 801dcf8:	680e      	ldr	r6, [r1, #0]
 801dcfa:	bf08      	it	eq
 801dcfc:	694b      	ldreq	r3, [r1, #20]
 801dcfe:	600f      	str	r7, [r1, #0]
 801dd00:	bf18      	it	ne
 801dd02:	2300      	movne	r3, #0
 801dd04:	eba6 0807 	sub.w	r8, r6, r7
 801dd08:	608b      	str	r3, [r1, #8]
 801dd0a:	f1b8 0f00 	cmp.w	r8, #0
 801dd0e:	dd9c      	ble.n	801dc4a <__sflush_r+0x1a>
 801dd10:	6a21      	ldr	r1, [r4, #32]
 801dd12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801dd14:	4643      	mov	r3, r8
 801dd16:	463a      	mov	r2, r7
 801dd18:	4628      	mov	r0, r5
 801dd1a:	47b0      	blx	r6
 801dd1c:	2800      	cmp	r0, #0
 801dd1e:	dc06      	bgt.n	801dd2e <__sflush_r+0xfe>
 801dd20:	89a3      	ldrh	r3, [r4, #12]
 801dd22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dd26:	81a3      	strh	r3, [r4, #12]
 801dd28:	f04f 30ff 	mov.w	r0, #4294967295
 801dd2c:	e78e      	b.n	801dc4c <__sflush_r+0x1c>
 801dd2e:	4407      	add	r7, r0
 801dd30:	eba8 0800 	sub.w	r8, r8, r0
 801dd34:	e7e9      	b.n	801dd0a <__sflush_r+0xda>
 801dd36:	bf00      	nop
 801dd38:	20400001 	.word	0x20400001

0801dd3c <_fflush_r>:
 801dd3c:	b538      	push	{r3, r4, r5, lr}
 801dd3e:	690b      	ldr	r3, [r1, #16]
 801dd40:	4605      	mov	r5, r0
 801dd42:	460c      	mov	r4, r1
 801dd44:	b913      	cbnz	r3, 801dd4c <_fflush_r+0x10>
 801dd46:	2500      	movs	r5, #0
 801dd48:	4628      	mov	r0, r5
 801dd4a:	bd38      	pop	{r3, r4, r5, pc}
 801dd4c:	b118      	cbz	r0, 801dd56 <_fflush_r+0x1a>
 801dd4e:	6983      	ldr	r3, [r0, #24]
 801dd50:	b90b      	cbnz	r3, 801dd56 <_fflush_r+0x1a>
 801dd52:	f000 f887 	bl	801de64 <__sinit>
 801dd56:	4b14      	ldr	r3, [pc, #80]	; (801dda8 <_fflush_r+0x6c>)
 801dd58:	429c      	cmp	r4, r3
 801dd5a:	d11b      	bne.n	801dd94 <_fflush_r+0x58>
 801dd5c:	686c      	ldr	r4, [r5, #4]
 801dd5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dd62:	2b00      	cmp	r3, #0
 801dd64:	d0ef      	beq.n	801dd46 <_fflush_r+0xa>
 801dd66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801dd68:	07d0      	lsls	r0, r2, #31
 801dd6a:	d404      	bmi.n	801dd76 <_fflush_r+0x3a>
 801dd6c:	0599      	lsls	r1, r3, #22
 801dd6e:	d402      	bmi.n	801dd76 <_fflush_r+0x3a>
 801dd70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dd72:	f000 f915 	bl	801dfa0 <__retarget_lock_acquire_recursive>
 801dd76:	4628      	mov	r0, r5
 801dd78:	4621      	mov	r1, r4
 801dd7a:	f7ff ff59 	bl	801dc30 <__sflush_r>
 801dd7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801dd80:	07da      	lsls	r2, r3, #31
 801dd82:	4605      	mov	r5, r0
 801dd84:	d4e0      	bmi.n	801dd48 <_fflush_r+0xc>
 801dd86:	89a3      	ldrh	r3, [r4, #12]
 801dd88:	059b      	lsls	r3, r3, #22
 801dd8a:	d4dd      	bmi.n	801dd48 <_fflush_r+0xc>
 801dd8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dd8e:	f000 f908 	bl	801dfa2 <__retarget_lock_release_recursive>
 801dd92:	e7d9      	b.n	801dd48 <_fflush_r+0xc>
 801dd94:	4b05      	ldr	r3, [pc, #20]	; (801ddac <_fflush_r+0x70>)
 801dd96:	429c      	cmp	r4, r3
 801dd98:	d101      	bne.n	801dd9e <_fflush_r+0x62>
 801dd9a:	68ac      	ldr	r4, [r5, #8]
 801dd9c:	e7df      	b.n	801dd5e <_fflush_r+0x22>
 801dd9e:	4b04      	ldr	r3, [pc, #16]	; (801ddb0 <_fflush_r+0x74>)
 801dda0:	429c      	cmp	r4, r3
 801dda2:	bf08      	it	eq
 801dda4:	68ec      	ldreq	r4, [r5, #12]
 801dda6:	e7da      	b.n	801dd5e <_fflush_r+0x22>
 801dda8:	080258cc 	.word	0x080258cc
 801ddac:	080258ec 	.word	0x080258ec
 801ddb0:	080258ac 	.word	0x080258ac

0801ddb4 <std>:
 801ddb4:	2300      	movs	r3, #0
 801ddb6:	b510      	push	{r4, lr}
 801ddb8:	4604      	mov	r4, r0
 801ddba:	e9c0 3300 	strd	r3, r3, [r0]
 801ddbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ddc2:	6083      	str	r3, [r0, #8]
 801ddc4:	8181      	strh	r1, [r0, #12]
 801ddc6:	6643      	str	r3, [r0, #100]	; 0x64
 801ddc8:	81c2      	strh	r2, [r0, #14]
 801ddca:	6183      	str	r3, [r0, #24]
 801ddcc:	4619      	mov	r1, r3
 801ddce:	2208      	movs	r2, #8
 801ddd0:	305c      	adds	r0, #92	; 0x5c
 801ddd2:	f7fb fddd 	bl	8019990 <memset>
 801ddd6:	4b05      	ldr	r3, [pc, #20]	; (801ddec <std+0x38>)
 801ddd8:	6263      	str	r3, [r4, #36]	; 0x24
 801ddda:	4b05      	ldr	r3, [pc, #20]	; (801ddf0 <std+0x3c>)
 801dddc:	62a3      	str	r3, [r4, #40]	; 0x28
 801ddde:	4b05      	ldr	r3, [pc, #20]	; (801ddf4 <std+0x40>)
 801dde0:	62e3      	str	r3, [r4, #44]	; 0x2c
 801dde2:	4b05      	ldr	r3, [pc, #20]	; (801ddf8 <std+0x44>)
 801dde4:	6224      	str	r4, [r4, #32]
 801dde6:	6323      	str	r3, [r4, #48]	; 0x30
 801dde8:	bd10      	pop	{r4, pc}
 801ddea:	bf00      	nop
 801ddec:	0801e109 	.word	0x0801e109
 801ddf0:	0801e12b 	.word	0x0801e12b
 801ddf4:	0801e163 	.word	0x0801e163
 801ddf8:	0801e187 	.word	0x0801e187

0801ddfc <_cleanup_r>:
 801ddfc:	4901      	ldr	r1, [pc, #4]	; (801de04 <_cleanup_r+0x8>)
 801ddfe:	f000 b8af 	b.w	801df60 <_fwalk_reent>
 801de02:	bf00      	nop
 801de04:	0801dd3d 	.word	0x0801dd3d

0801de08 <__sfmoreglue>:
 801de08:	b570      	push	{r4, r5, r6, lr}
 801de0a:	2268      	movs	r2, #104	; 0x68
 801de0c:	1e4d      	subs	r5, r1, #1
 801de0e:	4355      	muls	r5, r2
 801de10:	460e      	mov	r6, r1
 801de12:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801de16:	f7ff fa5b 	bl	801d2d0 <_malloc_r>
 801de1a:	4604      	mov	r4, r0
 801de1c:	b140      	cbz	r0, 801de30 <__sfmoreglue+0x28>
 801de1e:	2100      	movs	r1, #0
 801de20:	e9c0 1600 	strd	r1, r6, [r0]
 801de24:	300c      	adds	r0, #12
 801de26:	60a0      	str	r0, [r4, #8]
 801de28:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801de2c:	f7fb fdb0 	bl	8019990 <memset>
 801de30:	4620      	mov	r0, r4
 801de32:	bd70      	pop	{r4, r5, r6, pc}

0801de34 <__sfp_lock_acquire>:
 801de34:	4801      	ldr	r0, [pc, #4]	; (801de3c <__sfp_lock_acquire+0x8>)
 801de36:	f000 b8b3 	b.w	801dfa0 <__retarget_lock_acquire_recursive>
 801de3a:	bf00      	nop
 801de3c:	20037405 	.word	0x20037405

0801de40 <__sfp_lock_release>:
 801de40:	4801      	ldr	r0, [pc, #4]	; (801de48 <__sfp_lock_release+0x8>)
 801de42:	f000 b8ae 	b.w	801dfa2 <__retarget_lock_release_recursive>
 801de46:	bf00      	nop
 801de48:	20037405 	.word	0x20037405

0801de4c <__sinit_lock_acquire>:
 801de4c:	4801      	ldr	r0, [pc, #4]	; (801de54 <__sinit_lock_acquire+0x8>)
 801de4e:	f000 b8a7 	b.w	801dfa0 <__retarget_lock_acquire_recursive>
 801de52:	bf00      	nop
 801de54:	20037406 	.word	0x20037406

0801de58 <__sinit_lock_release>:
 801de58:	4801      	ldr	r0, [pc, #4]	; (801de60 <__sinit_lock_release+0x8>)
 801de5a:	f000 b8a2 	b.w	801dfa2 <__retarget_lock_release_recursive>
 801de5e:	bf00      	nop
 801de60:	20037406 	.word	0x20037406

0801de64 <__sinit>:
 801de64:	b510      	push	{r4, lr}
 801de66:	4604      	mov	r4, r0
 801de68:	f7ff fff0 	bl	801de4c <__sinit_lock_acquire>
 801de6c:	69a3      	ldr	r3, [r4, #24]
 801de6e:	b11b      	cbz	r3, 801de78 <__sinit+0x14>
 801de70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801de74:	f7ff bff0 	b.w	801de58 <__sinit_lock_release>
 801de78:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801de7c:	6523      	str	r3, [r4, #80]	; 0x50
 801de7e:	4b13      	ldr	r3, [pc, #76]	; (801decc <__sinit+0x68>)
 801de80:	4a13      	ldr	r2, [pc, #76]	; (801ded0 <__sinit+0x6c>)
 801de82:	681b      	ldr	r3, [r3, #0]
 801de84:	62a2      	str	r2, [r4, #40]	; 0x28
 801de86:	42a3      	cmp	r3, r4
 801de88:	bf04      	itt	eq
 801de8a:	2301      	moveq	r3, #1
 801de8c:	61a3      	streq	r3, [r4, #24]
 801de8e:	4620      	mov	r0, r4
 801de90:	f000 f820 	bl	801ded4 <__sfp>
 801de94:	6060      	str	r0, [r4, #4]
 801de96:	4620      	mov	r0, r4
 801de98:	f000 f81c 	bl	801ded4 <__sfp>
 801de9c:	60a0      	str	r0, [r4, #8]
 801de9e:	4620      	mov	r0, r4
 801dea0:	f000 f818 	bl	801ded4 <__sfp>
 801dea4:	2200      	movs	r2, #0
 801dea6:	60e0      	str	r0, [r4, #12]
 801dea8:	2104      	movs	r1, #4
 801deaa:	6860      	ldr	r0, [r4, #4]
 801deac:	f7ff ff82 	bl	801ddb4 <std>
 801deb0:	68a0      	ldr	r0, [r4, #8]
 801deb2:	2201      	movs	r2, #1
 801deb4:	2109      	movs	r1, #9
 801deb6:	f7ff ff7d 	bl	801ddb4 <std>
 801deba:	68e0      	ldr	r0, [r4, #12]
 801debc:	2202      	movs	r2, #2
 801debe:	2112      	movs	r1, #18
 801dec0:	f7ff ff78 	bl	801ddb4 <std>
 801dec4:	2301      	movs	r3, #1
 801dec6:	61a3      	str	r3, [r4, #24]
 801dec8:	e7d2      	b.n	801de70 <__sinit+0xc>
 801deca:	bf00      	nop
 801decc:	08025468 	.word	0x08025468
 801ded0:	0801ddfd 	.word	0x0801ddfd

0801ded4 <__sfp>:
 801ded4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ded6:	4607      	mov	r7, r0
 801ded8:	f7ff ffac 	bl	801de34 <__sfp_lock_acquire>
 801dedc:	4b1e      	ldr	r3, [pc, #120]	; (801df58 <__sfp+0x84>)
 801dede:	681e      	ldr	r6, [r3, #0]
 801dee0:	69b3      	ldr	r3, [r6, #24]
 801dee2:	b913      	cbnz	r3, 801deea <__sfp+0x16>
 801dee4:	4630      	mov	r0, r6
 801dee6:	f7ff ffbd 	bl	801de64 <__sinit>
 801deea:	3648      	adds	r6, #72	; 0x48
 801deec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801def0:	3b01      	subs	r3, #1
 801def2:	d503      	bpl.n	801defc <__sfp+0x28>
 801def4:	6833      	ldr	r3, [r6, #0]
 801def6:	b30b      	cbz	r3, 801df3c <__sfp+0x68>
 801def8:	6836      	ldr	r6, [r6, #0]
 801defa:	e7f7      	b.n	801deec <__sfp+0x18>
 801defc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801df00:	b9d5      	cbnz	r5, 801df38 <__sfp+0x64>
 801df02:	4b16      	ldr	r3, [pc, #88]	; (801df5c <__sfp+0x88>)
 801df04:	60e3      	str	r3, [r4, #12]
 801df06:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801df0a:	6665      	str	r5, [r4, #100]	; 0x64
 801df0c:	f000 f847 	bl	801df9e <__retarget_lock_init_recursive>
 801df10:	f7ff ff96 	bl	801de40 <__sfp_lock_release>
 801df14:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801df18:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801df1c:	6025      	str	r5, [r4, #0]
 801df1e:	61a5      	str	r5, [r4, #24]
 801df20:	2208      	movs	r2, #8
 801df22:	4629      	mov	r1, r5
 801df24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801df28:	f7fb fd32 	bl	8019990 <memset>
 801df2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801df30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801df34:	4620      	mov	r0, r4
 801df36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801df38:	3468      	adds	r4, #104	; 0x68
 801df3a:	e7d9      	b.n	801def0 <__sfp+0x1c>
 801df3c:	2104      	movs	r1, #4
 801df3e:	4638      	mov	r0, r7
 801df40:	f7ff ff62 	bl	801de08 <__sfmoreglue>
 801df44:	4604      	mov	r4, r0
 801df46:	6030      	str	r0, [r6, #0]
 801df48:	2800      	cmp	r0, #0
 801df4a:	d1d5      	bne.n	801def8 <__sfp+0x24>
 801df4c:	f7ff ff78 	bl	801de40 <__sfp_lock_release>
 801df50:	230c      	movs	r3, #12
 801df52:	603b      	str	r3, [r7, #0]
 801df54:	e7ee      	b.n	801df34 <__sfp+0x60>
 801df56:	bf00      	nop
 801df58:	08025468 	.word	0x08025468
 801df5c:	ffff0001 	.word	0xffff0001

0801df60 <_fwalk_reent>:
 801df60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801df64:	4606      	mov	r6, r0
 801df66:	4688      	mov	r8, r1
 801df68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801df6c:	2700      	movs	r7, #0
 801df6e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801df72:	f1b9 0901 	subs.w	r9, r9, #1
 801df76:	d505      	bpl.n	801df84 <_fwalk_reent+0x24>
 801df78:	6824      	ldr	r4, [r4, #0]
 801df7a:	2c00      	cmp	r4, #0
 801df7c:	d1f7      	bne.n	801df6e <_fwalk_reent+0xe>
 801df7e:	4638      	mov	r0, r7
 801df80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801df84:	89ab      	ldrh	r3, [r5, #12]
 801df86:	2b01      	cmp	r3, #1
 801df88:	d907      	bls.n	801df9a <_fwalk_reent+0x3a>
 801df8a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801df8e:	3301      	adds	r3, #1
 801df90:	d003      	beq.n	801df9a <_fwalk_reent+0x3a>
 801df92:	4629      	mov	r1, r5
 801df94:	4630      	mov	r0, r6
 801df96:	47c0      	blx	r8
 801df98:	4307      	orrs	r7, r0
 801df9a:	3568      	adds	r5, #104	; 0x68
 801df9c:	e7e9      	b.n	801df72 <_fwalk_reent+0x12>

0801df9e <__retarget_lock_init_recursive>:
 801df9e:	4770      	bx	lr

0801dfa0 <__retarget_lock_acquire_recursive>:
 801dfa0:	4770      	bx	lr

0801dfa2 <__retarget_lock_release_recursive>:
 801dfa2:	4770      	bx	lr

0801dfa4 <__swhatbuf_r>:
 801dfa4:	b570      	push	{r4, r5, r6, lr}
 801dfa6:	460e      	mov	r6, r1
 801dfa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dfac:	2900      	cmp	r1, #0
 801dfae:	b096      	sub	sp, #88	; 0x58
 801dfb0:	4614      	mov	r4, r2
 801dfb2:	461d      	mov	r5, r3
 801dfb4:	da08      	bge.n	801dfc8 <__swhatbuf_r+0x24>
 801dfb6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801dfba:	2200      	movs	r2, #0
 801dfbc:	602a      	str	r2, [r5, #0]
 801dfbe:	061a      	lsls	r2, r3, #24
 801dfc0:	d410      	bmi.n	801dfe4 <__swhatbuf_r+0x40>
 801dfc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801dfc6:	e00e      	b.n	801dfe6 <__swhatbuf_r+0x42>
 801dfc8:	466a      	mov	r2, sp
 801dfca:	f000 f903 	bl	801e1d4 <_fstat_r>
 801dfce:	2800      	cmp	r0, #0
 801dfd0:	dbf1      	blt.n	801dfb6 <__swhatbuf_r+0x12>
 801dfd2:	9a01      	ldr	r2, [sp, #4]
 801dfd4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801dfd8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801dfdc:	425a      	negs	r2, r3
 801dfde:	415a      	adcs	r2, r3
 801dfe0:	602a      	str	r2, [r5, #0]
 801dfe2:	e7ee      	b.n	801dfc2 <__swhatbuf_r+0x1e>
 801dfe4:	2340      	movs	r3, #64	; 0x40
 801dfe6:	2000      	movs	r0, #0
 801dfe8:	6023      	str	r3, [r4, #0]
 801dfea:	b016      	add	sp, #88	; 0x58
 801dfec:	bd70      	pop	{r4, r5, r6, pc}
	...

0801dff0 <__smakebuf_r>:
 801dff0:	898b      	ldrh	r3, [r1, #12]
 801dff2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801dff4:	079d      	lsls	r5, r3, #30
 801dff6:	4606      	mov	r6, r0
 801dff8:	460c      	mov	r4, r1
 801dffa:	d507      	bpl.n	801e00c <__smakebuf_r+0x1c>
 801dffc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801e000:	6023      	str	r3, [r4, #0]
 801e002:	6123      	str	r3, [r4, #16]
 801e004:	2301      	movs	r3, #1
 801e006:	6163      	str	r3, [r4, #20]
 801e008:	b002      	add	sp, #8
 801e00a:	bd70      	pop	{r4, r5, r6, pc}
 801e00c:	ab01      	add	r3, sp, #4
 801e00e:	466a      	mov	r2, sp
 801e010:	f7ff ffc8 	bl	801dfa4 <__swhatbuf_r>
 801e014:	9900      	ldr	r1, [sp, #0]
 801e016:	4605      	mov	r5, r0
 801e018:	4630      	mov	r0, r6
 801e01a:	f7ff f959 	bl	801d2d0 <_malloc_r>
 801e01e:	b948      	cbnz	r0, 801e034 <__smakebuf_r+0x44>
 801e020:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e024:	059a      	lsls	r2, r3, #22
 801e026:	d4ef      	bmi.n	801e008 <__smakebuf_r+0x18>
 801e028:	f023 0303 	bic.w	r3, r3, #3
 801e02c:	f043 0302 	orr.w	r3, r3, #2
 801e030:	81a3      	strh	r3, [r4, #12]
 801e032:	e7e3      	b.n	801dffc <__smakebuf_r+0xc>
 801e034:	4b0d      	ldr	r3, [pc, #52]	; (801e06c <__smakebuf_r+0x7c>)
 801e036:	62b3      	str	r3, [r6, #40]	; 0x28
 801e038:	89a3      	ldrh	r3, [r4, #12]
 801e03a:	6020      	str	r0, [r4, #0]
 801e03c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e040:	81a3      	strh	r3, [r4, #12]
 801e042:	9b00      	ldr	r3, [sp, #0]
 801e044:	6163      	str	r3, [r4, #20]
 801e046:	9b01      	ldr	r3, [sp, #4]
 801e048:	6120      	str	r0, [r4, #16]
 801e04a:	b15b      	cbz	r3, 801e064 <__smakebuf_r+0x74>
 801e04c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e050:	4630      	mov	r0, r6
 801e052:	f000 f8d1 	bl	801e1f8 <_isatty_r>
 801e056:	b128      	cbz	r0, 801e064 <__smakebuf_r+0x74>
 801e058:	89a3      	ldrh	r3, [r4, #12]
 801e05a:	f023 0303 	bic.w	r3, r3, #3
 801e05e:	f043 0301 	orr.w	r3, r3, #1
 801e062:	81a3      	strh	r3, [r4, #12]
 801e064:	89a0      	ldrh	r0, [r4, #12]
 801e066:	4305      	orrs	r5, r0
 801e068:	81a5      	strh	r5, [r4, #12]
 801e06a:	e7cd      	b.n	801e008 <__smakebuf_r+0x18>
 801e06c:	0801ddfd 	.word	0x0801ddfd

0801e070 <_malloc_usable_size_r>:
 801e070:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e074:	1f18      	subs	r0, r3, #4
 801e076:	2b00      	cmp	r3, #0
 801e078:	bfbc      	itt	lt
 801e07a:	580b      	ldrlt	r3, [r1, r0]
 801e07c:	18c0      	addlt	r0, r0, r3
 801e07e:	4770      	bx	lr

0801e080 <_raise_r>:
 801e080:	291f      	cmp	r1, #31
 801e082:	b538      	push	{r3, r4, r5, lr}
 801e084:	4604      	mov	r4, r0
 801e086:	460d      	mov	r5, r1
 801e088:	d904      	bls.n	801e094 <_raise_r+0x14>
 801e08a:	2316      	movs	r3, #22
 801e08c:	6003      	str	r3, [r0, #0]
 801e08e:	f04f 30ff 	mov.w	r0, #4294967295
 801e092:	bd38      	pop	{r3, r4, r5, pc}
 801e094:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801e096:	b112      	cbz	r2, 801e09e <_raise_r+0x1e>
 801e098:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e09c:	b94b      	cbnz	r3, 801e0b2 <_raise_r+0x32>
 801e09e:	4620      	mov	r0, r4
 801e0a0:	f000 f830 	bl	801e104 <_getpid_r>
 801e0a4:	462a      	mov	r2, r5
 801e0a6:	4601      	mov	r1, r0
 801e0a8:	4620      	mov	r0, r4
 801e0aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e0ae:	f000 b817 	b.w	801e0e0 <_kill_r>
 801e0b2:	2b01      	cmp	r3, #1
 801e0b4:	d00a      	beq.n	801e0cc <_raise_r+0x4c>
 801e0b6:	1c59      	adds	r1, r3, #1
 801e0b8:	d103      	bne.n	801e0c2 <_raise_r+0x42>
 801e0ba:	2316      	movs	r3, #22
 801e0bc:	6003      	str	r3, [r0, #0]
 801e0be:	2001      	movs	r0, #1
 801e0c0:	e7e7      	b.n	801e092 <_raise_r+0x12>
 801e0c2:	2400      	movs	r4, #0
 801e0c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801e0c8:	4628      	mov	r0, r5
 801e0ca:	4798      	blx	r3
 801e0cc:	2000      	movs	r0, #0
 801e0ce:	e7e0      	b.n	801e092 <_raise_r+0x12>

0801e0d0 <raise>:
 801e0d0:	4b02      	ldr	r3, [pc, #8]	; (801e0dc <raise+0xc>)
 801e0d2:	4601      	mov	r1, r0
 801e0d4:	6818      	ldr	r0, [r3, #0]
 801e0d6:	f7ff bfd3 	b.w	801e080 <_raise_r>
 801e0da:	bf00      	nop
 801e0dc:	200000a4 	.word	0x200000a4

0801e0e0 <_kill_r>:
 801e0e0:	b538      	push	{r3, r4, r5, lr}
 801e0e2:	4d07      	ldr	r5, [pc, #28]	; (801e100 <_kill_r+0x20>)
 801e0e4:	2300      	movs	r3, #0
 801e0e6:	4604      	mov	r4, r0
 801e0e8:	4608      	mov	r0, r1
 801e0ea:	4611      	mov	r1, r2
 801e0ec:	602b      	str	r3, [r5, #0]
 801e0ee:	f7ef fc15 	bl	800d91c <_kill>
 801e0f2:	1c43      	adds	r3, r0, #1
 801e0f4:	d102      	bne.n	801e0fc <_kill_r+0x1c>
 801e0f6:	682b      	ldr	r3, [r5, #0]
 801e0f8:	b103      	cbz	r3, 801e0fc <_kill_r+0x1c>
 801e0fa:	6023      	str	r3, [r4, #0]
 801e0fc:	bd38      	pop	{r3, r4, r5, pc}
 801e0fe:	bf00      	nop
 801e100:	20037400 	.word	0x20037400

0801e104 <_getpid_r>:
 801e104:	f7ef bc02 	b.w	800d90c <_getpid>

0801e108 <__sread>:
 801e108:	b510      	push	{r4, lr}
 801e10a:	460c      	mov	r4, r1
 801e10c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e110:	f000 f894 	bl	801e23c <_read_r>
 801e114:	2800      	cmp	r0, #0
 801e116:	bfab      	itete	ge
 801e118:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801e11a:	89a3      	ldrhlt	r3, [r4, #12]
 801e11c:	181b      	addge	r3, r3, r0
 801e11e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801e122:	bfac      	ite	ge
 801e124:	6563      	strge	r3, [r4, #84]	; 0x54
 801e126:	81a3      	strhlt	r3, [r4, #12]
 801e128:	bd10      	pop	{r4, pc}

0801e12a <__swrite>:
 801e12a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e12e:	461f      	mov	r7, r3
 801e130:	898b      	ldrh	r3, [r1, #12]
 801e132:	05db      	lsls	r3, r3, #23
 801e134:	4605      	mov	r5, r0
 801e136:	460c      	mov	r4, r1
 801e138:	4616      	mov	r6, r2
 801e13a:	d505      	bpl.n	801e148 <__swrite+0x1e>
 801e13c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e140:	2302      	movs	r3, #2
 801e142:	2200      	movs	r2, #0
 801e144:	f000 f868 	bl	801e218 <_lseek_r>
 801e148:	89a3      	ldrh	r3, [r4, #12]
 801e14a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e14e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801e152:	81a3      	strh	r3, [r4, #12]
 801e154:	4632      	mov	r2, r6
 801e156:	463b      	mov	r3, r7
 801e158:	4628      	mov	r0, r5
 801e15a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e15e:	f000 b817 	b.w	801e190 <_write_r>

0801e162 <__sseek>:
 801e162:	b510      	push	{r4, lr}
 801e164:	460c      	mov	r4, r1
 801e166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e16a:	f000 f855 	bl	801e218 <_lseek_r>
 801e16e:	1c43      	adds	r3, r0, #1
 801e170:	89a3      	ldrh	r3, [r4, #12]
 801e172:	bf15      	itete	ne
 801e174:	6560      	strne	r0, [r4, #84]	; 0x54
 801e176:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801e17a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801e17e:	81a3      	strheq	r3, [r4, #12]
 801e180:	bf18      	it	ne
 801e182:	81a3      	strhne	r3, [r4, #12]
 801e184:	bd10      	pop	{r4, pc}

0801e186 <__sclose>:
 801e186:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e18a:	f000 b813 	b.w	801e1b4 <_close_r>
	...

0801e190 <_write_r>:
 801e190:	b538      	push	{r3, r4, r5, lr}
 801e192:	4d07      	ldr	r5, [pc, #28]	; (801e1b0 <_write_r+0x20>)
 801e194:	4604      	mov	r4, r0
 801e196:	4608      	mov	r0, r1
 801e198:	4611      	mov	r1, r2
 801e19a:	2200      	movs	r2, #0
 801e19c:	602a      	str	r2, [r5, #0]
 801e19e:	461a      	mov	r2, r3
 801e1a0:	f7ef fbf3 	bl	800d98a <_write>
 801e1a4:	1c43      	adds	r3, r0, #1
 801e1a6:	d102      	bne.n	801e1ae <_write_r+0x1e>
 801e1a8:	682b      	ldr	r3, [r5, #0]
 801e1aa:	b103      	cbz	r3, 801e1ae <_write_r+0x1e>
 801e1ac:	6023      	str	r3, [r4, #0]
 801e1ae:	bd38      	pop	{r3, r4, r5, pc}
 801e1b0:	20037400 	.word	0x20037400

0801e1b4 <_close_r>:
 801e1b4:	b538      	push	{r3, r4, r5, lr}
 801e1b6:	4d06      	ldr	r5, [pc, #24]	; (801e1d0 <_close_r+0x1c>)
 801e1b8:	2300      	movs	r3, #0
 801e1ba:	4604      	mov	r4, r0
 801e1bc:	4608      	mov	r0, r1
 801e1be:	602b      	str	r3, [r5, #0]
 801e1c0:	f7ef fbff 	bl	800d9c2 <_close>
 801e1c4:	1c43      	adds	r3, r0, #1
 801e1c6:	d102      	bne.n	801e1ce <_close_r+0x1a>
 801e1c8:	682b      	ldr	r3, [r5, #0]
 801e1ca:	b103      	cbz	r3, 801e1ce <_close_r+0x1a>
 801e1cc:	6023      	str	r3, [r4, #0]
 801e1ce:	bd38      	pop	{r3, r4, r5, pc}
 801e1d0:	20037400 	.word	0x20037400

0801e1d4 <_fstat_r>:
 801e1d4:	b538      	push	{r3, r4, r5, lr}
 801e1d6:	4d07      	ldr	r5, [pc, #28]	; (801e1f4 <_fstat_r+0x20>)
 801e1d8:	2300      	movs	r3, #0
 801e1da:	4604      	mov	r4, r0
 801e1dc:	4608      	mov	r0, r1
 801e1de:	4611      	mov	r1, r2
 801e1e0:	602b      	str	r3, [r5, #0]
 801e1e2:	f7ef fbfa 	bl	800d9da <_fstat>
 801e1e6:	1c43      	adds	r3, r0, #1
 801e1e8:	d102      	bne.n	801e1f0 <_fstat_r+0x1c>
 801e1ea:	682b      	ldr	r3, [r5, #0]
 801e1ec:	b103      	cbz	r3, 801e1f0 <_fstat_r+0x1c>
 801e1ee:	6023      	str	r3, [r4, #0]
 801e1f0:	bd38      	pop	{r3, r4, r5, pc}
 801e1f2:	bf00      	nop
 801e1f4:	20037400 	.word	0x20037400

0801e1f8 <_isatty_r>:
 801e1f8:	b538      	push	{r3, r4, r5, lr}
 801e1fa:	4d06      	ldr	r5, [pc, #24]	; (801e214 <_isatty_r+0x1c>)
 801e1fc:	2300      	movs	r3, #0
 801e1fe:	4604      	mov	r4, r0
 801e200:	4608      	mov	r0, r1
 801e202:	602b      	str	r3, [r5, #0]
 801e204:	f7ef fbf9 	bl	800d9fa <_isatty>
 801e208:	1c43      	adds	r3, r0, #1
 801e20a:	d102      	bne.n	801e212 <_isatty_r+0x1a>
 801e20c:	682b      	ldr	r3, [r5, #0]
 801e20e:	b103      	cbz	r3, 801e212 <_isatty_r+0x1a>
 801e210:	6023      	str	r3, [r4, #0]
 801e212:	bd38      	pop	{r3, r4, r5, pc}
 801e214:	20037400 	.word	0x20037400

0801e218 <_lseek_r>:
 801e218:	b538      	push	{r3, r4, r5, lr}
 801e21a:	4d07      	ldr	r5, [pc, #28]	; (801e238 <_lseek_r+0x20>)
 801e21c:	4604      	mov	r4, r0
 801e21e:	4608      	mov	r0, r1
 801e220:	4611      	mov	r1, r2
 801e222:	2200      	movs	r2, #0
 801e224:	602a      	str	r2, [r5, #0]
 801e226:	461a      	mov	r2, r3
 801e228:	f7ef fbf2 	bl	800da10 <_lseek>
 801e22c:	1c43      	adds	r3, r0, #1
 801e22e:	d102      	bne.n	801e236 <_lseek_r+0x1e>
 801e230:	682b      	ldr	r3, [r5, #0]
 801e232:	b103      	cbz	r3, 801e236 <_lseek_r+0x1e>
 801e234:	6023      	str	r3, [r4, #0]
 801e236:	bd38      	pop	{r3, r4, r5, pc}
 801e238:	20037400 	.word	0x20037400

0801e23c <_read_r>:
 801e23c:	b538      	push	{r3, r4, r5, lr}
 801e23e:	4d07      	ldr	r5, [pc, #28]	; (801e25c <_read_r+0x20>)
 801e240:	4604      	mov	r4, r0
 801e242:	4608      	mov	r0, r1
 801e244:	4611      	mov	r1, r2
 801e246:	2200      	movs	r2, #0
 801e248:	602a      	str	r2, [r5, #0]
 801e24a:	461a      	mov	r2, r3
 801e24c:	f7ef fb80 	bl	800d950 <_read>
 801e250:	1c43      	adds	r3, r0, #1
 801e252:	d102      	bne.n	801e25a <_read_r+0x1e>
 801e254:	682b      	ldr	r3, [r5, #0]
 801e256:	b103      	cbz	r3, 801e25a <_read_r+0x1e>
 801e258:	6023      	str	r3, [r4, #0]
 801e25a:	bd38      	pop	{r3, r4, r5, pc}
 801e25c:	20037400 	.word	0x20037400

0801e260 <cos>:
 801e260:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e262:	ec53 2b10 	vmov	r2, r3, d0
 801e266:	4826      	ldr	r0, [pc, #152]	; (801e300 <cos+0xa0>)
 801e268:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801e26c:	4281      	cmp	r1, r0
 801e26e:	dc06      	bgt.n	801e27e <cos+0x1e>
 801e270:	ed9f 1b21 	vldr	d1, [pc, #132]	; 801e2f8 <cos+0x98>
 801e274:	b005      	add	sp, #20
 801e276:	f85d eb04 	ldr.w	lr, [sp], #4
 801e27a:	f001 b839 	b.w	801f2f0 <__kernel_cos>
 801e27e:	4821      	ldr	r0, [pc, #132]	; (801e304 <cos+0xa4>)
 801e280:	4281      	cmp	r1, r0
 801e282:	dd09      	ble.n	801e298 <cos+0x38>
 801e284:	ee10 0a10 	vmov	r0, s0
 801e288:	4619      	mov	r1, r3
 801e28a:	f7e2 f815 	bl	80002b8 <__aeabi_dsub>
 801e28e:	ec41 0b10 	vmov	d0, r0, r1
 801e292:	b005      	add	sp, #20
 801e294:	f85d fb04 	ldr.w	pc, [sp], #4
 801e298:	4668      	mov	r0, sp
 801e29a:	f000 fd69 	bl	801ed70 <__ieee754_rem_pio2>
 801e29e:	f000 0003 	and.w	r0, r0, #3
 801e2a2:	2801      	cmp	r0, #1
 801e2a4:	d00b      	beq.n	801e2be <cos+0x5e>
 801e2a6:	2802      	cmp	r0, #2
 801e2a8:	d016      	beq.n	801e2d8 <cos+0x78>
 801e2aa:	b9e0      	cbnz	r0, 801e2e6 <cos+0x86>
 801e2ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e2b0:	ed9d 0b00 	vldr	d0, [sp]
 801e2b4:	f001 f81c 	bl	801f2f0 <__kernel_cos>
 801e2b8:	ec51 0b10 	vmov	r0, r1, d0
 801e2bc:	e7e7      	b.n	801e28e <cos+0x2e>
 801e2be:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e2c2:	ed9d 0b00 	vldr	d0, [sp]
 801e2c6:	f001 fc2b 	bl	801fb20 <__kernel_sin>
 801e2ca:	ec53 2b10 	vmov	r2, r3, d0
 801e2ce:	ee10 0a10 	vmov	r0, s0
 801e2d2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801e2d6:	e7da      	b.n	801e28e <cos+0x2e>
 801e2d8:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e2dc:	ed9d 0b00 	vldr	d0, [sp]
 801e2e0:	f001 f806 	bl	801f2f0 <__kernel_cos>
 801e2e4:	e7f1      	b.n	801e2ca <cos+0x6a>
 801e2e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e2ea:	ed9d 0b00 	vldr	d0, [sp]
 801e2ee:	2001      	movs	r0, #1
 801e2f0:	f001 fc16 	bl	801fb20 <__kernel_sin>
 801e2f4:	e7e0      	b.n	801e2b8 <cos+0x58>
 801e2f6:	bf00      	nop
	...
 801e300:	3fe921fb 	.word	0x3fe921fb
 801e304:	7fefffff 	.word	0x7fefffff

0801e308 <sin>:
 801e308:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e30a:	ec53 2b10 	vmov	r2, r3, d0
 801e30e:	4828      	ldr	r0, [pc, #160]	; (801e3b0 <sin+0xa8>)
 801e310:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801e314:	4281      	cmp	r1, r0
 801e316:	dc07      	bgt.n	801e328 <sin+0x20>
 801e318:	ed9f 1b23 	vldr	d1, [pc, #140]	; 801e3a8 <sin+0xa0>
 801e31c:	2000      	movs	r0, #0
 801e31e:	b005      	add	sp, #20
 801e320:	f85d eb04 	ldr.w	lr, [sp], #4
 801e324:	f001 bbfc 	b.w	801fb20 <__kernel_sin>
 801e328:	4822      	ldr	r0, [pc, #136]	; (801e3b4 <sin+0xac>)
 801e32a:	4281      	cmp	r1, r0
 801e32c:	dd09      	ble.n	801e342 <sin+0x3a>
 801e32e:	ee10 0a10 	vmov	r0, s0
 801e332:	4619      	mov	r1, r3
 801e334:	f7e1 ffc0 	bl	80002b8 <__aeabi_dsub>
 801e338:	ec41 0b10 	vmov	d0, r0, r1
 801e33c:	b005      	add	sp, #20
 801e33e:	f85d fb04 	ldr.w	pc, [sp], #4
 801e342:	4668      	mov	r0, sp
 801e344:	f000 fd14 	bl	801ed70 <__ieee754_rem_pio2>
 801e348:	f000 0003 	and.w	r0, r0, #3
 801e34c:	2801      	cmp	r0, #1
 801e34e:	d00c      	beq.n	801e36a <sin+0x62>
 801e350:	2802      	cmp	r0, #2
 801e352:	d011      	beq.n	801e378 <sin+0x70>
 801e354:	b9f0      	cbnz	r0, 801e394 <sin+0x8c>
 801e356:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e35a:	ed9d 0b00 	vldr	d0, [sp]
 801e35e:	2001      	movs	r0, #1
 801e360:	f001 fbde 	bl	801fb20 <__kernel_sin>
 801e364:	ec51 0b10 	vmov	r0, r1, d0
 801e368:	e7e6      	b.n	801e338 <sin+0x30>
 801e36a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e36e:	ed9d 0b00 	vldr	d0, [sp]
 801e372:	f000 ffbd 	bl	801f2f0 <__kernel_cos>
 801e376:	e7f5      	b.n	801e364 <sin+0x5c>
 801e378:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e37c:	ed9d 0b00 	vldr	d0, [sp]
 801e380:	2001      	movs	r0, #1
 801e382:	f001 fbcd 	bl	801fb20 <__kernel_sin>
 801e386:	ec53 2b10 	vmov	r2, r3, d0
 801e38a:	ee10 0a10 	vmov	r0, s0
 801e38e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801e392:	e7d1      	b.n	801e338 <sin+0x30>
 801e394:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e398:	ed9d 0b00 	vldr	d0, [sp]
 801e39c:	f000 ffa8 	bl	801f2f0 <__kernel_cos>
 801e3a0:	e7f1      	b.n	801e386 <sin+0x7e>
 801e3a2:	bf00      	nop
 801e3a4:	f3af 8000 	nop.w
	...
 801e3b0:	3fe921fb 	.word	0x3fe921fb
 801e3b4:	7fefffff 	.word	0x7fefffff

0801e3b8 <acos>:
 801e3b8:	b538      	push	{r3, r4, r5, lr}
 801e3ba:	ed2d 8b02 	vpush	{d8}
 801e3be:	ec55 4b10 	vmov	r4, r5, d0
 801e3c2:	f000 f861 	bl	801e488 <__ieee754_acos>
 801e3c6:	4622      	mov	r2, r4
 801e3c8:	462b      	mov	r3, r5
 801e3ca:	4620      	mov	r0, r4
 801e3cc:	4629      	mov	r1, r5
 801e3ce:	eeb0 8a40 	vmov.f32	s16, s0
 801e3d2:	eef0 8a60 	vmov.f32	s17, s1
 801e3d6:	f7e2 fbc1 	bl	8000b5c <__aeabi_dcmpun>
 801e3da:	b9a8      	cbnz	r0, 801e408 <acos+0x50>
 801e3dc:	ec45 4b10 	vmov	d0, r4, r5
 801e3e0:	f001 fc5c 	bl	801fc9c <fabs>
 801e3e4:	4b0c      	ldr	r3, [pc, #48]	; (801e418 <acos+0x60>)
 801e3e6:	ec51 0b10 	vmov	r0, r1, d0
 801e3ea:	2200      	movs	r2, #0
 801e3ec:	f7e2 fbac 	bl	8000b48 <__aeabi_dcmpgt>
 801e3f0:	b150      	cbz	r0, 801e408 <acos+0x50>
 801e3f2:	f7fb fa95 	bl	8019920 <__errno>
 801e3f6:	ecbd 8b02 	vpop	{d8}
 801e3fa:	2321      	movs	r3, #33	; 0x21
 801e3fc:	6003      	str	r3, [r0, #0]
 801e3fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e402:	4806      	ldr	r0, [pc, #24]	; (801e41c <acos+0x64>)
 801e404:	f7ff b934 	b.w	801d670 <nan>
 801e408:	eeb0 0a48 	vmov.f32	s0, s16
 801e40c:	eef0 0a68 	vmov.f32	s1, s17
 801e410:	ecbd 8b02 	vpop	{d8}
 801e414:	bd38      	pop	{r3, r4, r5, pc}
 801e416:	bf00      	nop
 801e418:	3ff00000 	.word	0x3ff00000
 801e41c:	080258a8 	.word	0x080258a8

0801e420 <asin>:
 801e420:	b538      	push	{r3, r4, r5, lr}
 801e422:	ed2d 8b02 	vpush	{d8}
 801e426:	ec55 4b10 	vmov	r4, r5, d0
 801e42a:	f000 fa8d 	bl	801e948 <__ieee754_asin>
 801e42e:	4622      	mov	r2, r4
 801e430:	462b      	mov	r3, r5
 801e432:	4620      	mov	r0, r4
 801e434:	4629      	mov	r1, r5
 801e436:	eeb0 8a40 	vmov.f32	s16, s0
 801e43a:	eef0 8a60 	vmov.f32	s17, s1
 801e43e:	f7e2 fb8d 	bl	8000b5c <__aeabi_dcmpun>
 801e442:	b9a8      	cbnz	r0, 801e470 <asin+0x50>
 801e444:	ec45 4b10 	vmov	d0, r4, r5
 801e448:	f001 fc28 	bl	801fc9c <fabs>
 801e44c:	4b0c      	ldr	r3, [pc, #48]	; (801e480 <asin+0x60>)
 801e44e:	ec51 0b10 	vmov	r0, r1, d0
 801e452:	2200      	movs	r2, #0
 801e454:	f7e2 fb78 	bl	8000b48 <__aeabi_dcmpgt>
 801e458:	b150      	cbz	r0, 801e470 <asin+0x50>
 801e45a:	f7fb fa61 	bl	8019920 <__errno>
 801e45e:	ecbd 8b02 	vpop	{d8}
 801e462:	2321      	movs	r3, #33	; 0x21
 801e464:	6003      	str	r3, [r0, #0]
 801e466:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e46a:	4806      	ldr	r0, [pc, #24]	; (801e484 <asin+0x64>)
 801e46c:	f7ff b900 	b.w	801d670 <nan>
 801e470:	eeb0 0a48 	vmov.f32	s0, s16
 801e474:	eef0 0a68 	vmov.f32	s1, s17
 801e478:	ecbd 8b02 	vpop	{d8}
 801e47c:	bd38      	pop	{r3, r4, r5, pc}
 801e47e:	bf00      	nop
 801e480:	3ff00000 	.word	0x3ff00000
 801e484:	080258a8 	.word	0x080258a8

0801e488 <__ieee754_acos>:
 801e488:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e48c:	ec55 4b10 	vmov	r4, r5, d0
 801e490:	49b7      	ldr	r1, [pc, #732]	; (801e770 <__ieee754_acos+0x2e8>)
 801e492:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801e496:	428b      	cmp	r3, r1
 801e498:	dd1b      	ble.n	801e4d2 <__ieee754_acos+0x4a>
 801e49a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 801e49e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801e4a2:	4323      	orrs	r3, r4
 801e4a4:	d106      	bne.n	801e4b4 <__ieee754_acos+0x2c>
 801e4a6:	2d00      	cmp	r5, #0
 801e4a8:	f300 8211 	bgt.w	801e8ce <__ieee754_acos+0x446>
 801e4ac:	ed9f 0b96 	vldr	d0, [pc, #600]	; 801e708 <__ieee754_acos+0x280>
 801e4b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e4b4:	ee10 2a10 	vmov	r2, s0
 801e4b8:	462b      	mov	r3, r5
 801e4ba:	ee10 0a10 	vmov	r0, s0
 801e4be:	4629      	mov	r1, r5
 801e4c0:	f7e1 fefa 	bl	80002b8 <__aeabi_dsub>
 801e4c4:	4602      	mov	r2, r0
 801e4c6:	460b      	mov	r3, r1
 801e4c8:	f7e2 f9d8 	bl	800087c <__aeabi_ddiv>
 801e4cc:	ec41 0b10 	vmov	d0, r0, r1
 801e4d0:	e7ee      	b.n	801e4b0 <__ieee754_acos+0x28>
 801e4d2:	49a8      	ldr	r1, [pc, #672]	; (801e774 <__ieee754_acos+0x2ec>)
 801e4d4:	428b      	cmp	r3, r1
 801e4d6:	f300 8087 	bgt.w	801e5e8 <__ieee754_acos+0x160>
 801e4da:	4aa7      	ldr	r2, [pc, #668]	; (801e778 <__ieee754_acos+0x2f0>)
 801e4dc:	4293      	cmp	r3, r2
 801e4de:	f340 81f9 	ble.w	801e8d4 <__ieee754_acos+0x44c>
 801e4e2:	ee10 2a10 	vmov	r2, s0
 801e4e6:	ee10 0a10 	vmov	r0, s0
 801e4ea:	462b      	mov	r3, r5
 801e4ec:	4629      	mov	r1, r5
 801e4ee:	f7e2 f89b 	bl	8000628 <__aeabi_dmul>
 801e4f2:	a387      	add	r3, pc, #540	; (adr r3, 801e710 <__ieee754_acos+0x288>)
 801e4f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e4f8:	4606      	mov	r6, r0
 801e4fa:	460f      	mov	r7, r1
 801e4fc:	f7e2 f894 	bl	8000628 <__aeabi_dmul>
 801e500:	a385      	add	r3, pc, #532	; (adr r3, 801e718 <__ieee754_acos+0x290>)
 801e502:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e506:	f7e1 fed9 	bl	80002bc <__adddf3>
 801e50a:	4632      	mov	r2, r6
 801e50c:	463b      	mov	r3, r7
 801e50e:	f7e2 f88b 	bl	8000628 <__aeabi_dmul>
 801e512:	a383      	add	r3, pc, #524	; (adr r3, 801e720 <__ieee754_acos+0x298>)
 801e514:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e518:	f7e1 fece 	bl	80002b8 <__aeabi_dsub>
 801e51c:	4632      	mov	r2, r6
 801e51e:	463b      	mov	r3, r7
 801e520:	f7e2 f882 	bl	8000628 <__aeabi_dmul>
 801e524:	a380      	add	r3, pc, #512	; (adr r3, 801e728 <__ieee754_acos+0x2a0>)
 801e526:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e52a:	f7e1 fec7 	bl	80002bc <__adddf3>
 801e52e:	4632      	mov	r2, r6
 801e530:	463b      	mov	r3, r7
 801e532:	f7e2 f879 	bl	8000628 <__aeabi_dmul>
 801e536:	a37e      	add	r3, pc, #504	; (adr r3, 801e730 <__ieee754_acos+0x2a8>)
 801e538:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e53c:	f7e1 febc 	bl	80002b8 <__aeabi_dsub>
 801e540:	4632      	mov	r2, r6
 801e542:	463b      	mov	r3, r7
 801e544:	f7e2 f870 	bl	8000628 <__aeabi_dmul>
 801e548:	a37b      	add	r3, pc, #492	; (adr r3, 801e738 <__ieee754_acos+0x2b0>)
 801e54a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e54e:	f7e1 feb5 	bl	80002bc <__adddf3>
 801e552:	4632      	mov	r2, r6
 801e554:	463b      	mov	r3, r7
 801e556:	f7e2 f867 	bl	8000628 <__aeabi_dmul>
 801e55a:	a379      	add	r3, pc, #484	; (adr r3, 801e740 <__ieee754_acos+0x2b8>)
 801e55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e560:	4680      	mov	r8, r0
 801e562:	4689      	mov	r9, r1
 801e564:	4630      	mov	r0, r6
 801e566:	4639      	mov	r1, r7
 801e568:	f7e2 f85e 	bl	8000628 <__aeabi_dmul>
 801e56c:	a376      	add	r3, pc, #472	; (adr r3, 801e748 <__ieee754_acos+0x2c0>)
 801e56e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e572:	f7e1 fea1 	bl	80002b8 <__aeabi_dsub>
 801e576:	4632      	mov	r2, r6
 801e578:	463b      	mov	r3, r7
 801e57a:	f7e2 f855 	bl	8000628 <__aeabi_dmul>
 801e57e:	a374      	add	r3, pc, #464	; (adr r3, 801e750 <__ieee754_acos+0x2c8>)
 801e580:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e584:	f7e1 fe9a 	bl	80002bc <__adddf3>
 801e588:	4632      	mov	r2, r6
 801e58a:	463b      	mov	r3, r7
 801e58c:	f7e2 f84c 	bl	8000628 <__aeabi_dmul>
 801e590:	a371      	add	r3, pc, #452	; (adr r3, 801e758 <__ieee754_acos+0x2d0>)
 801e592:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e596:	f7e1 fe8f 	bl	80002b8 <__aeabi_dsub>
 801e59a:	4632      	mov	r2, r6
 801e59c:	463b      	mov	r3, r7
 801e59e:	f7e2 f843 	bl	8000628 <__aeabi_dmul>
 801e5a2:	4b76      	ldr	r3, [pc, #472]	; (801e77c <__ieee754_acos+0x2f4>)
 801e5a4:	2200      	movs	r2, #0
 801e5a6:	f7e1 fe89 	bl	80002bc <__adddf3>
 801e5aa:	4602      	mov	r2, r0
 801e5ac:	460b      	mov	r3, r1
 801e5ae:	4640      	mov	r0, r8
 801e5b0:	4649      	mov	r1, r9
 801e5b2:	f7e2 f963 	bl	800087c <__aeabi_ddiv>
 801e5b6:	4622      	mov	r2, r4
 801e5b8:	462b      	mov	r3, r5
 801e5ba:	f7e2 f835 	bl	8000628 <__aeabi_dmul>
 801e5be:	4602      	mov	r2, r0
 801e5c0:	460b      	mov	r3, r1
 801e5c2:	a167      	add	r1, pc, #412	; (adr r1, 801e760 <__ieee754_acos+0x2d8>)
 801e5c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e5c8:	f7e1 fe76 	bl	80002b8 <__aeabi_dsub>
 801e5cc:	4602      	mov	r2, r0
 801e5ce:	460b      	mov	r3, r1
 801e5d0:	4620      	mov	r0, r4
 801e5d2:	4629      	mov	r1, r5
 801e5d4:	f7e1 fe70 	bl	80002b8 <__aeabi_dsub>
 801e5d8:	4602      	mov	r2, r0
 801e5da:	460b      	mov	r3, r1
 801e5dc:	a162      	add	r1, pc, #392	; (adr r1, 801e768 <__ieee754_acos+0x2e0>)
 801e5de:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e5e2:	f7e1 fe69 	bl	80002b8 <__aeabi_dsub>
 801e5e6:	e771      	b.n	801e4cc <__ieee754_acos+0x44>
 801e5e8:	2d00      	cmp	r5, #0
 801e5ea:	f280 80cb 	bge.w	801e784 <__ieee754_acos+0x2fc>
 801e5ee:	ee10 0a10 	vmov	r0, s0
 801e5f2:	4b62      	ldr	r3, [pc, #392]	; (801e77c <__ieee754_acos+0x2f4>)
 801e5f4:	2200      	movs	r2, #0
 801e5f6:	4629      	mov	r1, r5
 801e5f8:	f7e1 fe60 	bl	80002bc <__adddf3>
 801e5fc:	4b60      	ldr	r3, [pc, #384]	; (801e780 <__ieee754_acos+0x2f8>)
 801e5fe:	2200      	movs	r2, #0
 801e600:	f7e2 f812 	bl	8000628 <__aeabi_dmul>
 801e604:	a342      	add	r3, pc, #264	; (adr r3, 801e710 <__ieee754_acos+0x288>)
 801e606:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e60a:	4604      	mov	r4, r0
 801e60c:	460d      	mov	r5, r1
 801e60e:	f7e2 f80b 	bl	8000628 <__aeabi_dmul>
 801e612:	a341      	add	r3, pc, #260	; (adr r3, 801e718 <__ieee754_acos+0x290>)
 801e614:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e618:	f7e1 fe50 	bl	80002bc <__adddf3>
 801e61c:	4622      	mov	r2, r4
 801e61e:	462b      	mov	r3, r5
 801e620:	f7e2 f802 	bl	8000628 <__aeabi_dmul>
 801e624:	a33e      	add	r3, pc, #248	; (adr r3, 801e720 <__ieee754_acos+0x298>)
 801e626:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e62a:	f7e1 fe45 	bl	80002b8 <__aeabi_dsub>
 801e62e:	4622      	mov	r2, r4
 801e630:	462b      	mov	r3, r5
 801e632:	f7e1 fff9 	bl	8000628 <__aeabi_dmul>
 801e636:	a33c      	add	r3, pc, #240	; (adr r3, 801e728 <__ieee754_acos+0x2a0>)
 801e638:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e63c:	f7e1 fe3e 	bl	80002bc <__adddf3>
 801e640:	4622      	mov	r2, r4
 801e642:	462b      	mov	r3, r5
 801e644:	f7e1 fff0 	bl	8000628 <__aeabi_dmul>
 801e648:	a339      	add	r3, pc, #228	; (adr r3, 801e730 <__ieee754_acos+0x2a8>)
 801e64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e64e:	f7e1 fe33 	bl	80002b8 <__aeabi_dsub>
 801e652:	4622      	mov	r2, r4
 801e654:	462b      	mov	r3, r5
 801e656:	f7e1 ffe7 	bl	8000628 <__aeabi_dmul>
 801e65a:	a337      	add	r3, pc, #220	; (adr r3, 801e738 <__ieee754_acos+0x2b0>)
 801e65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e660:	f7e1 fe2c 	bl	80002bc <__adddf3>
 801e664:	4622      	mov	r2, r4
 801e666:	462b      	mov	r3, r5
 801e668:	f7e1 ffde 	bl	8000628 <__aeabi_dmul>
 801e66c:	ec45 4b10 	vmov	d0, r4, r5
 801e670:	4680      	mov	r8, r0
 801e672:	4689      	mov	r9, r1
 801e674:	f000 fd88 	bl	801f188 <__ieee754_sqrt>
 801e678:	a331      	add	r3, pc, #196	; (adr r3, 801e740 <__ieee754_acos+0x2b8>)
 801e67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e67e:	4620      	mov	r0, r4
 801e680:	4629      	mov	r1, r5
 801e682:	ec57 6b10 	vmov	r6, r7, d0
 801e686:	f7e1 ffcf 	bl	8000628 <__aeabi_dmul>
 801e68a:	a32f      	add	r3, pc, #188	; (adr r3, 801e748 <__ieee754_acos+0x2c0>)
 801e68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e690:	f7e1 fe12 	bl	80002b8 <__aeabi_dsub>
 801e694:	4622      	mov	r2, r4
 801e696:	462b      	mov	r3, r5
 801e698:	f7e1 ffc6 	bl	8000628 <__aeabi_dmul>
 801e69c:	a32c      	add	r3, pc, #176	; (adr r3, 801e750 <__ieee754_acos+0x2c8>)
 801e69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6a2:	f7e1 fe0b 	bl	80002bc <__adddf3>
 801e6a6:	4622      	mov	r2, r4
 801e6a8:	462b      	mov	r3, r5
 801e6aa:	f7e1 ffbd 	bl	8000628 <__aeabi_dmul>
 801e6ae:	a32a      	add	r3, pc, #168	; (adr r3, 801e758 <__ieee754_acos+0x2d0>)
 801e6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6b4:	f7e1 fe00 	bl	80002b8 <__aeabi_dsub>
 801e6b8:	4622      	mov	r2, r4
 801e6ba:	462b      	mov	r3, r5
 801e6bc:	f7e1 ffb4 	bl	8000628 <__aeabi_dmul>
 801e6c0:	4b2e      	ldr	r3, [pc, #184]	; (801e77c <__ieee754_acos+0x2f4>)
 801e6c2:	2200      	movs	r2, #0
 801e6c4:	f7e1 fdfa 	bl	80002bc <__adddf3>
 801e6c8:	4602      	mov	r2, r0
 801e6ca:	460b      	mov	r3, r1
 801e6cc:	4640      	mov	r0, r8
 801e6ce:	4649      	mov	r1, r9
 801e6d0:	f7e2 f8d4 	bl	800087c <__aeabi_ddiv>
 801e6d4:	4632      	mov	r2, r6
 801e6d6:	463b      	mov	r3, r7
 801e6d8:	f7e1 ffa6 	bl	8000628 <__aeabi_dmul>
 801e6dc:	a320      	add	r3, pc, #128	; (adr r3, 801e760 <__ieee754_acos+0x2d8>)
 801e6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6e2:	f7e1 fde9 	bl	80002b8 <__aeabi_dsub>
 801e6e6:	4632      	mov	r2, r6
 801e6e8:	463b      	mov	r3, r7
 801e6ea:	f7e1 fde7 	bl	80002bc <__adddf3>
 801e6ee:	4602      	mov	r2, r0
 801e6f0:	460b      	mov	r3, r1
 801e6f2:	f7e1 fde3 	bl	80002bc <__adddf3>
 801e6f6:	4602      	mov	r2, r0
 801e6f8:	460b      	mov	r3, r1
 801e6fa:	a103      	add	r1, pc, #12	; (adr r1, 801e708 <__ieee754_acos+0x280>)
 801e6fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e700:	e76f      	b.n	801e5e2 <__ieee754_acos+0x15a>
 801e702:	bf00      	nop
 801e704:	f3af 8000 	nop.w
 801e708:	54442d18 	.word	0x54442d18
 801e70c:	400921fb 	.word	0x400921fb
 801e710:	0dfdf709 	.word	0x0dfdf709
 801e714:	3f023de1 	.word	0x3f023de1
 801e718:	7501b288 	.word	0x7501b288
 801e71c:	3f49efe0 	.word	0x3f49efe0
 801e720:	b5688f3b 	.word	0xb5688f3b
 801e724:	3fa48228 	.word	0x3fa48228
 801e728:	0e884455 	.word	0x0e884455
 801e72c:	3fc9c155 	.word	0x3fc9c155
 801e730:	03eb6f7d 	.word	0x03eb6f7d
 801e734:	3fd4d612 	.word	0x3fd4d612
 801e738:	55555555 	.word	0x55555555
 801e73c:	3fc55555 	.word	0x3fc55555
 801e740:	b12e9282 	.word	0xb12e9282
 801e744:	3fb3b8c5 	.word	0x3fb3b8c5
 801e748:	1b8d0159 	.word	0x1b8d0159
 801e74c:	3fe6066c 	.word	0x3fe6066c
 801e750:	9c598ac8 	.word	0x9c598ac8
 801e754:	40002ae5 	.word	0x40002ae5
 801e758:	1c8a2d4b 	.word	0x1c8a2d4b
 801e75c:	40033a27 	.word	0x40033a27
 801e760:	33145c07 	.word	0x33145c07
 801e764:	3c91a626 	.word	0x3c91a626
 801e768:	54442d18 	.word	0x54442d18
 801e76c:	3ff921fb 	.word	0x3ff921fb
 801e770:	3fefffff 	.word	0x3fefffff
 801e774:	3fdfffff 	.word	0x3fdfffff
 801e778:	3c600000 	.word	0x3c600000
 801e77c:	3ff00000 	.word	0x3ff00000
 801e780:	3fe00000 	.word	0x3fe00000
 801e784:	ee10 2a10 	vmov	r2, s0
 801e788:	462b      	mov	r3, r5
 801e78a:	496d      	ldr	r1, [pc, #436]	; (801e940 <__ieee754_acos+0x4b8>)
 801e78c:	2000      	movs	r0, #0
 801e78e:	f7e1 fd93 	bl	80002b8 <__aeabi_dsub>
 801e792:	4b6c      	ldr	r3, [pc, #432]	; (801e944 <__ieee754_acos+0x4bc>)
 801e794:	2200      	movs	r2, #0
 801e796:	f7e1 ff47 	bl	8000628 <__aeabi_dmul>
 801e79a:	4604      	mov	r4, r0
 801e79c:	460d      	mov	r5, r1
 801e79e:	ec45 4b10 	vmov	d0, r4, r5
 801e7a2:	f000 fcf1 	bl	801f188 <__ieee754_sqrt>
 801e7a6:	a34e      	add	r3, pc, #312	; (adr r3, 801e8e0 <__ieee754_acos+0x458>)
 801e7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7ac:	4620      	mov	r0, r4
 801e7ae:	4629      	mov	r1, r5
 801e7b0:	ec59 8b10 	vmov	r8, r9, d0
 801e7b4:	f7e1 ff38 	bl	8000628 <__aeabi_dmul>
 801e7b8:	a34b      	add	r3, pc, #300	; (adr r3, 801e8e8 <__ieee754_acos+0x460>)
 801e7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7be:	f7e1 fd7d 	bl	80002bc <__adddf3>
 801e7c2:	4622      	mov	r2, r4
 801e7c4:	462b      	mov	r3, r5
 801e7c6:	f7e1 ff2f 	bl	8000628 <__aeabi_dmul>
 801e7ca:	a349      	add	r3, pc, #292	; (adr r3, 801e8f0 <__ieee754_acos+0x468>)
 801e7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7d0:	f7e1 fd72 	bl	80002b8 <__aeabi_dsub>
 801e7d4:	4622      	mov	r2, r4
 801e7d6:	462b      	mov	r3, r5
 801e7d8:	f7e1 ff26 	bl	8000628 <__aeabi_dmul>
 801e7dc:	a346      	add	r3, pc, #280	; (adr r3, 801e8f8 <__ieee754_acos+0x470>)
 801e7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7e2:	f7e1 fd6b 	bl	80002bc <__adddf3>
 801e7e6:	4622      	mov	r2, r4
 801e7e8:	462b      	mov	r3, r5
 801e7ea:	f7e1 ff1d 	bl	8000628 <__aeabi_dmul>
 801e7ee:	a344      	add	r3, pc, #272	; (adr r3, 801e900 <__ieee754_acos+0x478>)
 801e7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7f4:	f7e1 fd60 	bl	80002b8 <__aeabi_dsub>
 801e7f8:	4622      	mov	r2, r4
 801e7fa:	462b      	mov	r3, r5
 801e7fc:	f7e1 ff14 	bl	8000628 <__aeabi_dmul>
 801e800:	a341      	add	r3, pc, #260	; (adr r3, 801e908 <__ieee754_acos+0x480>)
 801e802:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e806:	f7e1 fd59 	bl	80002bc <__adddf3>
 801e80a:	4622      	mov	r2, r4
 801e80c:	462b      	mov	r3, r5
 801e80e:	f7e1 ff0b 	bl	8000628 <__aeabi_dmul>
 801e812:	a33f      	add	r3, pc, #252	; (adr r3, 801e910 <__ieee754_acos+0x488>)
 801e814:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e818:	4682      	mov	sl, r0
 801e81a:	468b      	mov	fp, r1
 801e81c:	4620      	mov	r0, r4
 801e81e:	4629      	mov	r1, r5
 801e820:	f7e1 ff02 	bl	8000628 <__aeabi_dmul>
 801e824:	a33c      	add	r3, pc, #240	; (adr r3, 801e918 <__ieee754_acos+0x490>)
 801e826:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e82a:	f7e1 fd45 	bl	80002b8 <__aeabi_dsub>
 801e82e:	4622      	mov	r2, r4
 801e830:	462b      	mov	r3, r5
 801e832:	f7e1 fef9 	bl	8000628 <__aeabi_dmul>
 801e836:	a33a      	add	r3, pc, #232	; (adr r3, 801e920 <__ieee754_acos+0x498>)
 801e838:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e83c:	f7e1 fd3e 	bl	80002bc <__adddf3>
 801e840:	4622      	mov	r2, r4
 801e842:	462b      	mov	r3, r5
 801e844:	f7e1 fef0 	bl	8000628 <__aeabi_dmul>
 801e848:	a337      	add	r3, pc, #220	; (adr r3, 801e928 <__ieee754_acos+0x4a0>)
 801e84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e84e:	f7e1 fd33 	bl	80002b8 <__aeabi_dsub>
 801e852:	4622      	mov	r2, r4
 801e854:	462b      	mov	r3, r5
 801e856:	f7e1 fee7 	bl	8000628 <__aeabi_dmul>
 801e85a:	4b39      	ldr	r3, [pc, #228]	; (801e940 <__ieee754_acos+0x4b8>)
 801e85c:	2200      	movs	r2, #0
 801e85e:	f7e1 fd2d 	bl	80002bc <__adddf3>
 801e862:	4602      	mov	r2, r0
 801e864:	460b      	mov	r3, r1
 801e866:	4650      	mov	r0, sl
 801e868:	4659      	mov	r1, fp
 801e86a:	f7e2 f807 	bl	800087c <__aeabi_ddiv>
 801e86e:	4642      	mov	r2, r8
 801e870:	464b      	mov	r3, r9
 801e872:	f7e1 fed9 	bl	8000628 <__aeabi_dmul>
 801e876:	2600      	movs	r6, #0
 801e878:	4682      	mov	sl, r0
 801e87a:	468b      	mov	fp, r1
 801e87c:	4632      	mov	r2, r6
 801e87e:	464b      	mov	r3, r9
 801e880:	4630      	mov	r0, r6
 801e882:	4649      	mov	r1, r9
 801e884:	f7e1 fed0 	bl	8000628 <__aeabi_dmul>
 801e888:	4602      	mov	r2, r0
 801e88a:	460b      	mov	r3, r1
 801e88c:	4620      	mov	r0, r4
 801e88e:	4629      	mov	r1, r5
 801e890:	f7e1 fd12 	bl	80002b8 <__aeabi_dsub>
 801e894:	4632      	mov	r2, r6
 801e896:	4604      	mov	r4, r0
 801e898:	460d      	mov	r5, r1
 801e89a:	464b      	mov	r3, r9
 801e89c:	4640      	mov	r0, r8
 801e89e:	4649      	mov	r1, r9
 801e8a0:	f7e1 fd0c 	bl	80002bc <__adddf3>
 801e8a4:	4602      	mov	r2, r0
 801e8a6:	460b      	mov	r3, r1
 801e8a8:	4620      	mov	r0, r4
 801e8aa:	4629      	mov	r1, r5
 801e8ac:	f7e1 ffe6 	bl	800087c <__aeabi_ddiv>
 801e8b0:	4602      	mov	r2, r0
 801e8b2:	460b      	mov	r3, r1
 801e8b4:	4650      	mov	r0, sl
 801e8b6:	4659      	mov	r1, fp
 801e8b8:	f7e1 fd00 	bl	80002bc <__adddf3>
 801e8bc:	4632      	mov	r2, r6
 801e8be:	464b      	mov	r3, r9
 801e8c0:	f7e1 fcfc 	bl	80002bc <__adddf3>
 801e8c4:	4602      	mov	r2, r0
 801e8c6:	460b      	mov	r3, r1
 801e8c8:	f7e1 fcf8 	bl	80002bc <__adddf3>
 801e8cc:	e5fe      	b.n	801e4cc <__ieee754_acos+0x44>
 801e8ce:	ed9f 0b18 	vldr	d0, [pc, #96]	; 801e930 <__ieee754_acos+0x4a8>
 801e8d2:	e5ed      	b.n	801e4b0 <__ieee754_acos+0x28>
 801e8d4:	ed9f 0b18 	vldr	d0, [pc, #96]	; 801e938 <__ieee754_acos+0x4b0>
 801e8d8:	e5ea      	b.n	801e4b0 <__ieee754_acos+0x28>
 801e8da:	bf00      	nop
 801e8dc:	f3af 8000 	nop.w
 801e8e0:	0dfdf709 	.word	0x0dfdf709
 801e8e4:	3f023de1 	.word	0x3f023de1
 801e8e8:	7501b288 	.word	0x7501b288
 801e8ec:	3f49efe0 	.word	0x3f49efe0
 801e8f0:	b5688f3b 	.word	0xb5688f3b
 801e8f4:	3fa48228 	.word	0x3fa48228
 801e8f8:	0e884455 	.word	0x0e884455
 801e8fc:	3fc9c155 	.word	0x3fc9c155
 801e900:	03eb6f7d 	.word	0x03eb6f7d
 801e904:	3fd4d612 	.word	0x3fd4d612
 801e908:	55555555 	.word	0x55555555
 801e90c:	3fc55555 	.word	0x3fc55555
 801e910:	b12e9282 	.word	0xb12e9282
 801e914:	3fb3b8c5 	.word	0x3fb3b8c5
 801e918:	1b8d0159 	.word	0x1b8d0159
 801e91c:	3fe6066c 	.word	0x3fe6066c
 801e920:	9c598ac8 	.word	0x9c598ac8
 801e924:	40002ae5 	.word	0x40002ae5
 801e928:	1c8a2d4b 	.word	0x1c8a2d4b
 801e92c:	40033a27 	.word	0x40033a27
	...
 801e938:	54442d18 	.word	0x54442d18
 801e93c:	3ff921fb 	.word	0x3ff921fb
 801e940:	3ff00000 	.word	0x3ff00000
 801e944:	3fe00000 	.word	0x3fe00000

0801e948 <__ieee754_asin>:
 801e948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e94c:	ed2d 8b04 	vpush	{d8-d9}
 801e950:	ec55 4b10 	vmov	r4, r5, d0
 801e954:	4bcc      	ldr	r3, [pc, #816]	; (801ec88 <__ieee754_asin+0x340>)
 801e956:	b083      	sub	sp, #12
 801e958:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801e95c:	4598      	cmp	r8, r3
 801e95e:	9501      	str	r5, [sp, #4]
 801e960:	dd35      	ble.n	801e9ce <__ieee754_asin+0x86>
 801e962:	ee10 3a10 	vmov	r3, s0
 801e966:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 801e96a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 801e96e:	ea58 0303 	orrs.w	r3, r8, r3
 801e972:	d117      	bne.n	801e9a4 <__ieee754_asin+0x5c>
 801e974:	a3aa      	add	r3, pc, #680	; (adr r3, 801ec20 <__ieee754_asin+0x2d8>)
 801e976:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e97a:	ee10 0a10 	vmov	r0, s0
 801e97e:	4629      	mov	r1, r5
 801e980:	f7e1 fe52 	bl	8000628 <__aeabi_dmul>
 801e984:	a3a8      	add	r3, pc, #672	; (adr r3, 801ec28 <__ieee754_asin+0x2e0>)
 801e986:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e98a:	4606      	mov	r6, r0
 801e98c:	460f      	mov	r7, r1
 801e98e:	4620      	mov	r0, r4
 801e990:	4629      	mov	r1, r5
 801e992:	f7e1 fe49 	bl	8000628 <__aeabi_dmul>
 801e996:	4602      	mov	r2, r0
 801e998:	460b      	mov	r3, r1
 801e99a:	4630      	mov	r0, r6
 801e99c:	4639      	mov	r1, r7
 801e99e:	f7e1 fc8d 	bl	80002bc <__adddf3>
 801e9a2:	e00b      	b.n	801e9bc <__ieee754_asin+0x74>
 801e9a4:	ee10 2a10 	vmov	r2, s0
 801e9a8:	462b      	mov	r3, r5
 801e9aa:	ee10 0a10 	vmov	r0, s0
 801e9ae:	4629      	mov	r1, r5
 801e9b0:	f7e1 fc82 	bl	80002b8 <__aeabi_dsub>
 801e9b4:	4602      	mov	r2, r0
 801e9b6:	460b      	mov	r3, r1
 801e9b8:	f7e1 ff60 	bl	800087c <__aeabi_ddiv>
 801e9bc:	4604      	mov	r4, r0
 801e9be:	460d      	mov	r5, r1
 801e9c0:	ec45 4b10 	vmov	d0, r4, r5
 801e9c4:	b003      	add	sp, #12
 801e9c6:	ecbd 8b04 	vpop	{d8-d9}
 801e9ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e9ce:	4baf      	ldr	r3, [pc, #700]	; (801ec8c <__ieee754_asin+0x344>)
 801e9d0:	4598      	cmp	r8, r3
 801e9d2:	dc11      	bgt.n	801e9f8 <__ieee754_asin+0xb0>
 801e9d4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 801e9d8:	f280 80ae 	bge.w	801eb38 <__ieee754_asin+0x1f0>
 801e9dc:	a394      	add	r3, pc, #592	; (adr r3, 801ec30 <__ieee754_asin+0x2e8>)
 801e9de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e9e2:	ee10 0a10 	vmov	r0, s0
 801e9e6:	4629      	mov	r1, r5
 801e9e8:	f7e1 fc68 	bl	80002bc <__adddf3>
 801e9ec:	4ba8      	ldr	r3, [pc, #672]	; (801ec90 <__ieee754_asin+0x348>)
 801e9ee:	2200      	movs	r2, #0
 801e9f0:	f7e2 f8aa 	bl	8000b48 <__aeabi_dcmpgt>
 801e9f4:	2800      	cmp	r0, #0
 801e9f6:	d1e3      	bne.n	801e9c0 <__ieee754_asin+0x78>
 801e9f8:	ec45 4b10 	vmov	d0, r4, r5
 801e9fc:	f001 f94e 	bl	801fc9c <fabs>
 801ea00:	49a3      	ldr	r1, [pc, #652]	; (801ec90 <__ieee754_asin+0x348>)
 801ea02:	ec53 2b10 	vmov	r2, r3, d0
 801ea06:	2000      	movs	r0, #0
 801ea08:	f7e1 fc56 	bl	80002b8 <__aeabi_dsub>
 801ea0c:	4ba1      	ldr	r3, [pc, #644]	; (801ec94 <__ieee754_asin+0x34c>)
 801ea0e:	2200      	movs	r2, #0
 801ea10:	f7e1 fe0a 	bl	8000628 <__aeabi_dmul>
 801ea14:	a388      	add	r3, pc, #544	; (adr r3, 801ec38 <__ieee754_asin+0x2f0>)
 801ea16:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea1a:	4604      	mov	r4, r0
 801ea1c:	460d      	mov	r5, r1
 801ea1e:	f7e1 fe03 	bl	8000628 <__aeabi_dmul>
 801ea22:	a387      	add	r3, pc, #540	; (adr r3, 801ec40 <__ieee754_asin+0x2f8>)
 801ea24:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea28:	f7e1 fc48 	bl	80002bc <__adddf3>
 801ea2c:	4622      	mov	r2, r4
 801ea2e:	462b      	mov	r3, r5
 801ea30:	f7e1 fdfa 	bl	8000628 <__aeabi_dmul>
 801ea34:	a384      	add	r3, pc, #528	; (adr r3, 801ec48 <__ieee754_asin+0x300>)
 801ea36:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea3a:	f7e1 fc3d 	bl	80002b8 <__aeabi_dsub>
 801ea3e:	4622      	mov	r2, r4
 801ea40:	462b      	mov	r3, r5
 801ea42:	f7e1 fdf1 	bl	8000628 <__aeabi_dmul>
 801ea46:	a382      	add	r3, pc, #520	; (adr r3, 801ec50 <__ieee754_asin+0x308>)
 801ea48:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea4c:	f7e1 fc36 	bl	80002bc <__adddf3>
 801ea50:	4622      	mov	r2, r4
 801ea52:	462b      	mov	r3, r5
 801ea54:	f7e1 fde8 	bl	8000628 <__aeabi_dmul>
 801ea58:	a37f      	add	r3, pc, #508	; (adr r3, 801ec58 <__ieee754_asin+0x310>)
 801ea5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea5e:	f7e1 fc2b 	bl	80002b8 <__aeabi_dsub>
 801ea62:	4622      	mov	r2, r4
 801ea64:	462b      	mov	r3, r5
 801ea66:	f7e1 fddf 	bl	8000628 <__aeabi_dmul>
 801ea6a:	a37d      	add	r3, pc, #500	; (adr r3, 801ec60 <__ieee754_asin+0x318>)
 801ea6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea70:	f7e1 fc24 	bl	80002bc <__adddf3>
 801ea74:	4622      	mov	r2, r4
 801ea76:	462b      	mov	r3, r5
 801ea78:	f7e1 fdd6 	bl	8000628 <__aeabi_dmul>
 801ea7c:	a37a      	add	r3, pc, #488	; (adr r3, 801ec68 <__ieee754_asin+0x320>)
 801ea7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea82:	ec41 0b18 	vmov	d8, r0, r1
 801ea86:	4620      	mov	r0, r4
 801ea88:	4629      	mov	r1, r5
 801ea8a:	f7e1 fdcd 	bl	8000628 <__aeabi_dmul>
 801ea8e:	a378      	add	r3, pc, #480	; (adr r3, 801ec70 <__ieee754_asin+0x328>)
 801ea90:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea94:	f7e1 fc10 	bl	80002b8 <__aeabi_dsub>
 801ea98:	4622      	mov	r2, r4
 801ea9a:	462b      	mov	r3, r5
 801ea9c:	f7e1 fdc4 	bl	8000628 <__aeabi_dmul>
 801eaa0:	a375      	add	r3, pc, #468	; (adr r3, 801ec78 <__ieee754_asin+0x330>)
 801eaa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eaa6:	f7e1 fc09 	bl	80002bc <__adddf3>
 801eaaa:	4622      	mov	r2, r4
 801eaac:	462b      	mov	r3, r5
 801eaae:	f7e1 fdbb 	bl	8000628 <__aeabi_dmul>
 801eab2:	a373      	add	r3, pc, #460	; (adr r3, 801ec80 <__ieee754_asin+0x338>)
 801eab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eab8:	f7e1 fbfe 	bl	80002b8 <__aeabi_dsub>
 801eabc:	4622      	mov	r2, r4
 801eabe:	462b      	mov	r3, r5
 801eac0:	f7e1 fdb2 	bl	8000628 <__aeabi_dmul>
 801eac4:	4b72      	ldr	r3, [pc, #456]	; (801ec90 <__ieee754_asin+0x348>)
 801eac6:	2200      	movs	r2, #0
 801eac8:	f7e1 fbf8 	bl	80002bc <__adddf3>
 801eacc:	ec45 4b10 	vmov	d0, r4, r5
 801ead0:	4606      	mov	r6, r0
 801ead2:	460f      	mov	r7, r1
 801ead4:	f000 fb58 	bl	801f188 <__ieee754_sqrt>
 801ead8:	4b6f      	ldr	r3, [pc, #444]	; (801ec98 <__ieee754_asin+0x350>)
 801eada:	4598      	cmp	r8, r3
 801eadc:	ec5b ab10 	vmov	sl, fp, d0
 801eae0:	f340 80dc 	ble.w	801ec9c <__ieee754_asin+0x354>
 801eae4:	4632      	mov	r2, r6
 801eae6:	463b      	mov	r3, r7
 801eae8:	ec51 0b18 	vmov	r0, r1, d8
 801eaec:	f7e1 fec6 	bl	800087c <__aeabi_ddiv>
 801eaf0:	4652      	mov	r2, sl
 801eaf2:	465b      	mov	r3, fp
 801eaf4:	f7e1 fd98 	bl	8000628 <__aeabi_dmul>
 801eaf8:	4652      	mov	r2, sl
 801eafa:	465b      	mov	r3, fp
 801eafc:	f7e1 fbde 	bl	80002bc <__adddf3>
 801eb00:	4602      	mov	r2, r0
 801eb02:	460b      	mov	r3, r1
 801eb04:	f7e1 fbda 	bl	80002bc <__adddf3>
 801eb08:	a347      	add	r3, pc, #284	; (adr r3, 801ec28 <__ieee754_asin+0x2e0>)
 801eb0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb0e:	f7e1 fbd3 	bl	80002b8 <__aeabi_dsub>
 801eb12:	4602      	mov	r2, r0
 801eb14:	460b      	mov	r3, r1
 801eb16:	a142      	add	r1, pc, #264	; (adr r1, 801ec20 <__ieee754_asin+0x2d8>)
 801eb18:	e9d1 0100 	ldrd	r0, r1, [r1]
 801eb1c:	f7e1 fbcc 	bl	80002b8 <__aeabi_dsub>
 801eb20:	9b01      	ldr	r3, [sp, #4]
 801eb22:	2b00      	cmp	r3, #0
 801eb24:	bfdc      	itt	le
 801eb26:	4602      	movle	r2, r0
 801eb28:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 801eb2c:	4604      	mov	r4, r0
 801eb2e:	460d      	mov	r5, r1
 801eb30:	bfdc      	itt	le
 801eb32:	4614      	movle	r4, r2
 801eb34:	461d      	movle	r5, r3
 801eb36:	e743      	b.n	801e9c0 <__ieee754_asin+0x78>
 801eb38:	ee10 2a10 	vmov	r2, s0
 801eb3c:	ee10 0a10 	vmov	r0, s0
 801eb40:	462b      	mov	r3, r5
 801eb42:	4629      	mov	r1, r5
 801eb44:	f7e1 fd70 	bl	8000628 <__aeabi_dmul>
 801eb48:	a33b      	add	r3, pc, #236	; (adr r3, 801ec38 <__ieee754_asin+0x2f0>)
 801eb4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb4e:	4606      	mov	r6, r0
 801eb50:	460f      	mov	r7, r1
 801eb52:	f7e1 fd69 	bl	8000628 <__aeabi_dmul>
 801eb56:	a33a      	add	r3, pc, #232	; (adr r3, 801ec40 <__ieee754_asin+0x2f8>)
 801eb58:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb5c:	f7e1 fbae 	bl	80002bc <__adddf3>
 801eb60:	4632      	mov	r2, r6
 801eb62:	463b      	mov	r3, r7
 801eb64:	f7e1 fd60 	bl	8000628 <__aeabi_dmul>
 801eb68:	a337      	add	r3, pc, #220	; (adr r3, 801ec48 <__ieee754_asin+0x300>)
 801eb6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb6e:	f7e1 fba3 	bl	80002b8 <__aeabi_dsub>
 801eb72:	4632      	mov	r2, r6
 801eb74:	463b      	mov	r3, r7
 801eb76:	f7e1 fd57 	bl	8000628 <__aeabi_dmul>
 801eb7a:	a335      	add	r3, pc, #212	; (adr r3, 801ec50 <__ieee754_asin+0x308>)
 801eb7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb80:	f7e1 fb9c 	bl	80002bc <__adddf3>
 801eb84:	4632      	mov	r2, r6
 801eb86:	463b      	mov	r3, r7
 801eb88:	f7e1 fd4e 	bl	8000628 <__aeabi_dmul>
 801eb8c:	a332      	add	r3, pc, #200	; (adr r3, 801ec58 <__ieee754_asin+0x310>)
 801eb8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb92:	f7e1 fb91 	bl	80002b8 <__aeabi_dsub>
 801eb96:	4632      	mov	r2, r6
 801eb98:	463b      	mov	r3, r7
 801eb9a:	f7e1 fd45 	bl	8000628 <__aeabi_dmul>
 801eb9e:	a330      	add	r3, pc, #192	; (adr r3, 801ec60 <__ieee754_asin+0x318>)
 801eba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eba4:	f7e1 fb8a 	bl	80002bc <__adddf3>
 801eba8:	4632      	mov	r2, r6
 801ebaa:	463b      	mov	r3, r7
 801ebac:	f7e1 fd3c 	bl	8000628 <__aeabi_dmul>
 801ebb0:	a32d      	add	r3, pc, #180	; (adr r3, 801ec68 <__ieee754_asin+0x320>)
 801ebb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ebb6:	4680      	mov	r8, r0
 801ebb8:	4689      	mov	r9, r1
 801ebba:	4630      	mov	r0, r6
 801ebbc:	4639      	mov	r1, r7
 801ebbe:	f7e1 fd33 	bl	8000628 <__aeabi_dmul>
 801ebc2:	a32b      	add	r3, pc, #172	; (adr r3, 801ec70 <__ieee754_asin+0x328>)
 801ebc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ebc8:	f7e1 fb76 	bl	80002b8 <__aeabi_dsub>
 801ebcc:	4632      	mov	r2, r6
 801ebce:	463b      	mov	r3, r7
 801ebd0:	f7e1 fd2a 	bl	8000628 <__aeabi_dmul>
 801ebd4:	a328      	add	r3, pc, #160	; (adr r3, 801ec78 <__ieee754_asin+0x330>)
 801ebd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ebda:	f7e1 fb6f 	bl	80002bc <__adddf3>
 801ebde:	4632      	mov	r2, r6
 801ebe0:	463b      	mov	r3, r7
 801ebe2:	f7e1 fd21 	bl	8000628 <__aeabi_dmul>
 801ebe6:	a326      	add	r3, pc, #152	; (adr r3, 801ec80 <__ieee754_asin+0x338>)
 801ebe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ebec:	f7e1 fb64 	bl	80002b8 <__aeabi_dsub>
 801ebf0:	4632      	mov	r2, r6
 801ebf2:	463b      	mov	r3, r7
 801ebf4:	f7e1 fd18 	bl	8000628 <__aeabi_dmul>
 801ebf8:	4b25      	ldr	r3, [pc, #148]	; (801ec90 <__ieee754_asin+0x348>)
 801ebfa:	2200      	movs	r2, #0
 801ebfc:	f7e1 fb5e 	bl	80002bc <__adddf3>
 801ec00:	4602      	mov	r2, r0
 801ec02:	460b      	mov	r3, r1
 801ec04:	4640      	mov	r0, r8
 801ec06:	4649      	mov	r1, r9
 801ec08:	f7e1 fe38 	bl	800087c <__aeabi_ddiv>
 801ec0c:	4622      	mov	r2, r4
 801ec0e:	462b      	mov	r3, r5
 801ec10:	f7e1 fd0a 	bl	8000628 <__aeabi_dmul>
 801ec14:	4602      	mov	r2, r0
 801ec16:	460b      	mov	r3, r1
 801ec18:	4620      	mov	r0, r4
 801ec1a:	4629      	mov	r1, r5
 801ec1c:	e6bf      	b.n	801e99e <__ieee754_asin+0x56>
 801ec1e:	bf00      	nop
 801ec20:	54442d18 	.word	0x54442d18
 801ec24:	3ff921fb 	.word	0x3ff921fb
 801ec28:	33145c07 	.word	0x33145c07
 801ec2c:	3c91a626 	.word	0x3c91a626
 801ec30:	8800759c 	.word	0x8800759c
 801ec34:	7e37e43c 	.word	0x7e37e43c
 801ec38:	0dfdf709 	.word	0x0dfdf709
 801ec3c:	3f023de1 	.word	0x3f023de1
 801ec40:	7501b288 	.word	0x7501b288
 801ec44:	3f49efe0 	.word	0x3f49efe0
 801ec48:	b5688f3b 	.word	0xb5688f3b
 801ec4c:	3fa48228 	.word	0x3fa48228
 801ec50:	0e884455 	.word	0x0e884455
 801ec54:	3fc9c155 	.word	0x3fc9c155
 801ec58:	03eb6f7d 	.word	0x03eb6f7d
 801ec5c:	3fd4d612 	.word	0x3fd4d612
 801ec60:	55555555 	.word	0x55555555
 801ec64:	3fc55555 	.word	0x3fc55555
 801ec68:	b12e9282 	.word	0xb12e9282
 801ec6c:	3fb3b8c5 	.word	0x3fb3b8c5
 801ec70:	1b8d0159 	.word	0x1b8d0159
 801ec74:	3fe6066c 	.word	0x3fe6066c
 801ec78:	9c598ac8 	.word	0x9c598ac8
 801ec7c:	40002ae5 	.word	0x40002ae5
 801ec80:	1c8a2d4b 	.word	0x1c8a2d4b
 801ec84:	40033a27 	.word	0x40033a27
 801ec88:	3fefffff 	.word	0x3fefffff
 801ec8c:	3fdfffff 	.word	0x3fdfffff
 801ec90:	3ff00000 	.word	0x3ff00000
 801ec94:	3fe00000 	.word	0x3fe00000
 801ec98:	3fef3332 	.word	0x3fef3332
 801ec9c:	ee10 2a10 	vmov	r2, s0
 801eca0:	ee10 0a10 	vmov	r0, s0
 801eca4:	465b      	mov	r3, fp
 801eca6:	4659      	mov	r1, fp
 801eca8:	f7e1 fb08 	bl	80002bc <__adddf3>
 801ecac:	4632      	mov	r2, r6
 801ecae:	463b      	mov	r3, r7
 801ecb0:	ec41 0b19 	vmov	d9, r0, r1
 801ecb4:	ec51 0b18 	vmov	r0, r1, d8
 801ecb8:	f7e1 fde0 	bl	800087c <__aeabi_ddiv>
 801ecbc:	4602      	mov	r2, r0
 801ecbe:	460b      	mov	r3, r1
 801ecc0:	ec51 0b19 	vmov	r0, r1, d9
 801ecc4:	f7e1 fcb0 	bl	8000628 <__aeabi_dmul>
 801ecc8:	f04f 0800 	mov.w	r8, #0
 801eccc:	4606      	mov	r6, r0
 801ecce:	460f      	mov	r7, r1
 801ecd0:	4642      	mov	r2, r8
 801ecd2:	465b      	mov	r3, fp
 801ecd4:	4640      	mov	r0, r8
 801ecd6:	4659      	mov	r1, fp
 801ecd8:	f7e1 fca6 	bl	8000628 <__aeabi_dmul>
 801ecdc:	4602      	mov	r2, r0
 801ecde:	460b      	mov	r3, r1
 801ece0:	4620      	mov	r0, r4
 801ece2:	4629      	mov	r1, r5
 801ece4:	f7e1 fae8 	bl	80002b8 <__aeabi_dsub>
 801ece8:	4642      	mov	r2, r8
 801ecea:	4604      	mov	r4, r0
 801ecec:	460d      	mov	r5, r1
 801ecee:	465b      	mov	r3, fp
 801ecf0:	4650      	mov	r0, sl
 801ecf2:	4659      	mov	r1, fp
 801ecf4:	f7e1 fae2 	bl	80002bc <__adddf3>
 801ecf8:	4602      	mov	r2, r0
 801ecfa:	460b      	mov	r3, r1
 801ecfc:	4620      	mov	r0, r4
 801ecfe:	4629      	mov	r1, r5
 801ed00:	f7e1 fdbc 	bl	800087c <__aeabi_ddiv>
 801ed04:	4602      	mov	r2, r0
 801ed06:	460b      	mov	r3, r1
 801ed08:	f7e1 fad8 	bl	80002bc <__adddf3>
 801ed0c:	4602      	mov	r2, r0
 801ed0e:	460b      	mov	r3, r1
 801ed10:	a113      	add	r1, pc, #76	; (adr r1, 801ed60 <__ieee754_asin+0x418>)
 801ed12:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ed16:	f7e1 facf 	bl	80002b8 <__aeabi_dsub>
 801ed1a:	4602      	mov	r2, r0
 801ed1c:	460b      	mov	r3, r1
 801ed1e:	4630      	mov	r0, r6
 801ed20:	4639      	mov	r1, r7
 801ed22:	f7e1 fac9 	bl	80002b8 <__aeabi_dsub>
 801ed26:	4642      	mov	r2, r8
 801ed28:	4604      	mov	r4, r0
 801ed2a:	460d      	mov	r5, r1
 801ed2c:	465b      	mov	r3, fp
 801ed2e:	4640      	mov	r0, r8
 801ed30:	4659      	mov	r1, fp
 801ed32:	f7e1 fac3 	bl	80002bc <__adddf3>
 801ed36:	4602      	mov	r2, r0
 801ed38:	460b      	mov	r3, r1
 801ed3a:	a10b      	add	r1, pc, #44	; (adr r1, 801ed68 <__ieee754_asin+0x420>)
 801ed3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ed40:	f7e1 faba 	bl	80002b8 <__aeabi_dsub>
 801ed44:	4602      	mov	r2, r0
 801ed46:	460b      	mov	r3, r1
 801ed48:	4620      	mov	r0, r4
 801ed4a:	4629      	mov	r1, r5
 801ed4c:	f7e1 fab4 	bl	80002b8 <__aeabi_dsub>
 801ed50:	4602      	mov	r2, r0
 801ed52:	460b      	mov	r3, r1
 801ed54:	a104      	add	r1, pc, #16	; (adr r1, 801ed68 <__ieee754_asin+0x420>)
 801ed56:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ed5a:	e6df      	b.n	801eb1c <__ieee754_asin+0x1d4>
 801ed5c:	f3af 8000 	nop.w
 801ed60:	33145c07 	.word	0x33145c07
 801ed64:	3c91a626 	.word	0x3c91a626
 801ed68:	54442d18 	.word	0x54442d18
 801ed6c:	3fe921fb 	.word	0x3fe921fb

0801ed70 <__ieee754_rem_pio2>:
 801ed70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed74:	ed2d 8b02 	vpush	{d8}
 801ed78:	ec55 4b10 	vmov	r4, r5, d0
 801ed7c:	4bca      	ldr	r3, [pc, #808]	; (801f0a8 <__ieee754_rem_pio2+0x338>)
 801ed7e:	b08b      	sub	sp, #44	; 0x2c
 801ed80:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801ed84:	4598      	cmp	r8, r3
 801ed86:	4682      	mov	sl, r0
 801ed88:	9502      	str	r5, [sp, #8]
 801ed8a:	dc08      	bgt.n	801ed9e <__ieee754_rem_pio2+0x2e>
 801ed8c:	2200      	movs	r2, #0
 801ed8e:	2300      	movs	r3, #0
 801ed90:	ed80 0b00 	vstr	d0, [r0]
 801ed94:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801ed98:	f04f 0b00 	mov.w	fp, #0
 801ed9c:	e028      	b.n	801edf0 <__ieee754_rem_pio2+0x80>
 801ed9e:	4bc3      	ldr	r3, [pc, #780]	; (801f0ac <__ieee754_rem_pio2+0x33c>)
 801eda0:	4598      	cmp	r8, r3
 801eda2:	dc78      	bgt.n	801ee96 <__ieee754_rem_pio2+0x126>
 801eda4:	9b02      	ldr	r3, [sp, #8]
 801eda6:	4ec2      	ldr	r6, [pc, #776]	; (801f0b0 <__ieee754_rem_pio2+0x340>)
 801eda8:	2b00      	cmp	r3, #0
 801edaa:	ee10 0a10 	vmov	r0, s0
 801edae:	a3b0      	add	r3, pc, #704	; (adr r3, 801f070 <__ieee754_rem_pio2+0x300>)
 801edb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801edb4:	4629      	mov	r1, r5
 801edb6:	dd39      	ble.n	801ee2c <__ieee754_rem_pio2+0xbc>
 801edb8:	f7e1 fa7e 	bl	80002b8 <__aeabi_dsub>
 801edbc:	45b0      	cmp	r8, r6
 801edbe:	4604      	mov	r4, r0
 801edc0:	460d      	mov	r5, r1
 801edc2:	d01b      	beq.n	801edfc <__ieee754_rem_pio2+0x8c>
 801edc4:	a3ac      	add	r3, pc, #688	; (adr r3, 801f078 <__ieee754_rem_pio2+0x308>)
 801edc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801edca:	f7e1 fa75 	bl	80002b8 <__aeabi_dsub>
 801edce:	4602      	mov	r2, r0
 801edd0:	460b      	mov	r3, r1
 801edd2:	e9ca 2300 	strd	r2, r3, [sl]
 801edd6:	4620      	mov	r0, r4
 801edd8:	4629      	mov	r1, r5
 801edda:	f7e1 fa6d 	bl	80002b8 <__aeabi_dsub>
 801edde:	a3a6      	add	r3, pc, #664	; (adr r3, 801f078 <__ieee754_rem_pio2+0x308>)
 801ede0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ede4:	f7e1 fa68 	bl	80002b8 <__aeabi_dsub>
 801ede8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801edec:	f04f 0b01 	mov.w	fp, #1
 801edf0:	4658      	mov	r0, fp
 801edf2:	b00b      	add	sp, #44	; 0x2c
 801edf4:	ecbd 8b02 	vpop	{d8}
 801edf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801edfc:	a3a0      	add	r3, pc, #640	; (adr r3, 801f080 <__ieee754_rem_pio2+0x310>)
 801edfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee02:	f7e1 fa59 	bl	80002b8 <__aeabi_dsub>
 801ee06:	a3a0      	add	r3, pc, #640	; (adr r3, 801f088 <__ieee754_rem_pio2+0x318>)
 801ee08:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee0c:	4604      	mov	r4, r0
 801ee0e:	460d      	mov	r5, r1
 801ee10:	f7e1 fa52 	bl	80002b8 <__aeabi_dsub>
 801ee14:	4602      	mov	r2, r0
 801ee16:	460b      	mov	r3, r1
 801ee18:	e9ca 2300 	strd	r2, r3, [sl]
 801ee1c:	4620      	mov	r0, r4
 801ee1e:	4629      	mov	r1, r5
 801ee20:	f7e1 fa4a 	bl	80002b8 <__aeabi_dsub>
 801ee24:	a398      	add	r3, pc, #608	; (adr r3, 801f088 <__ieee754_rem_pio2+0x318>)
 801ee26:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee2a:	e7db      	b.n	801ede4 <__ieee754_rem_pio2+0x74>
 801ee2c:	f7e1 fa46 	bl	80002bc <__adddf3>
 801ee30:	45b0      	cmp	r8, r6
 801ee32:	4604      	mov	r4, r0
 801ee34:	460d      	mov	r5, r1
 801ee36:	d016      	beq.n	801ee66 <__ieee754_rem_pio2+0xf6>
 801ee38:	a38f      	add	r3, pc, #572	; (adr r3, 801f078 <__ieee754_rem_pio2+0x308>)
 801ee3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee3e:	f7e1 fa3d 	bl	80002bc <__adddf3>
 801ee42:	4602      	mov	r2, r0
 801ee44:	460b      	mov	r3, r1
 801ee46:	e9ca 2300 	strd	r2, r3, [sl]
 801ee4a:	4620      	mov	r0, r4
 801ee4c:	4629      	mov	r1, r5
 801ee4e:	f7e1 fa33 	bl	80002b8 <__aeabi_dsub>
 801ee52:	a389      	add	r3, pc, #548	; (adr r3, 801f078 <__ieee754_rem_pio2+0x308>)
 801ee54:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee58:	f7e1 fa30 	bl	80002bc <__adddf3>
 801ee5c:	f04f 3bff 	mov.w	fp, #4294967295
 801ee60:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801ee64:	e7c4      	b.n	801edf0 <__ieee754_rem_pio2+0x80>
 801ee66:	a386      	add	r3, pc, #536	; (adr r3, 801f080 <__ieee754_rem_pio2+0x310>)
 801ee68:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee6c:	f7e1 fa26 	bl	80002bc <__adddf3>
 801ee70:	a385      	add	r3, pc, #532	; (adr r3, 801f088 <__ieee754_rem_pio2+0x318>)
 801ee72:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee76:	4604      	mov	r4, r0
 801ee78:	460d      	mov	r5, r1
 801ee7a:	f7e1 fa1f 	bl	80002bc <__adddf3>
 801ee7e:	4602      	mov	r2, r0
 801ee80:	460b      	mov	r3, r1
 801ee82:	e9ca 2300 	strd	r2, r3, [sl]
 801ee86:	4620      	mov	r0, r4
 801ee88:	4629      	mov	r1, r5
 801ee8a:	f7e1 fa15 	bl	80002b8 <__aeabi_dsub>
 801ee8e:	a37e      	add	r3, pc, #504	; (adr r3, 801f088 <__ieee754_rem_pio2+0x318>)
 801ee90:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee94:	e7e0      	b.n	801ee58 <__ieee754_rem_pio2+0xe8>
 801ee96:	4b87      	ldr	r3, [pc, #540]	; (801f0b4 <__ieee754_rem_pio2+0x344>)
 801ee98:	4598      	cmp	r8, r3
 801ee9a:	f300 80d9 	bgt.w	801f050 <__ieee754_rem_pio2+0x2e0>
 801ee9e:	f000 fefd 	bl	801fc9c <fabs>
 801eea2:	ec55 4b10 	vmov	r4, r5, d0
 801eea6:	ee10 0a10 	vmov	r0, s0
 801eeaa:	a379      	add	r3, pc, #484	; (adr r3, 801f090 <__ieee754_rem_pio2+0x320>)
 801eeac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eeb0:	4629      	mov	r1, r5
 801eeb2:	f7e1 fbb9 	bl	8000628 <__aeabi_dmul>
 801eeb6:	4b80      	ldr	r3, [pc, #512]	; (801f0b8 <__ieee754_rem_pio2+0x348>)
 801eeb8:	2200      	movs	r2, #0
 801eeba:	f7e1 f9ff 	bl	80002bc <__adddf3>
 801eebe:	f7e1 fe63 	bl	8000b88 <__aeabi_d2iz>
 801eec2:	4683      	mov	fp, r0
 801eec4:	f7e1 fb46 	bl	8000554 <__aeabi_i2d>
 801eec8:	4602      	mov	r2, r0
 801eeca:	460b      	mov	r3, r1
 801eecc:	ec43 2b18 	vmov	d8, r2, r3
 801eed0:	a367      	add	r3, pc, #412	; (adr r3, 801f070 <__ieee754_rem_pio2+0x300>)
 801eed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eed6:	f7e1 fba7 	bl	8000628 <__aeabi_dmul>
 801eeda:	4602      	mov	r2, r0
 801eedc:	460b      	mov	r3, r1
 801eede:	4620      	mov	r0, r4
 801eee0:	4629      	mov	r1, r5
 801eee2:	f7e1 f9e9 	bl	80002b8 <__aeabi_dsub>
 801eee6:	a364      	add	r3, pc, #400	; (adr r3, 801f078 <__ieee754_rem_pio2+0x308>)
 801eee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eeec:	4606      	mov	r6, r0
 801eeee:	460f      	mov	r7, r1
 801eef0:	ec51 0b18 	vmov	r0, r1, d8
 801eef4:	f7e1 fb98 	bl	8000628 <__aeabi_dmul>
 801eef8:	f1bb 0f1f 	cmp.w	fp, #31
 801eefc:	4604      	mov	r4, r0
 801eefe:	460d      	mov	r5, r1
 801ef00:	dc0d      	bgt.n	801ef1e <__ieee754_rem_pio2+0x1ae>
 801ef02:	4b6e      	ldr	r3, [pc, #440]	; (801f0bc <__ieee754_rem_pio2+0x34c>)
 801ef04:	f10b 32ff 	add.w	r2, fp, #4294967295
 801ef08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ef0c:	4543      	cmp	r3, r8
 801ef0e:	d006      	beq.n	801ef1e <__ieee754_rem_pio2+0x1ae>
 801ef10:	4622      	mov	r2, r4
 801ef12:	462b      	mov	r3, r5
 801ef14:	4630      	mov	r0, r6
 801ef16:	4639      	mov	r1, r7
 801ef18:	f7e1 f9ce 	bl	80002b8 <__aeabi_dsub>
 801ef1c:	e00f      	b.n	801ef3e <__ieee754_rem_pio2+0x1ce>
 801ef1e:	462b      	mov	r3, r5
 801ef20:	4622      	mov	r2, r4
 801ef22:	4630      	mov	r0, r6
 801ef24:	4639      	mov	r1, r7
 801ef26:	f7e1 f9c7 	bl	80002b8 <__aeabi_dsub>
 801ef2a:	ea4f 5328 	mov.w	r3, r8, asr #20
 801ef2e:	9303      	str	r3, [sp, #12]
 801ef30:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801ef34:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 801ef38:	f1b8 0f10 	cmp.w	r8, #16
 801ef3c:	dc02      	bgt.n	801ef44 <__ieee754_rem_pio2+0x1d4>
 801ef3e:	e9ca 0100 	strd	r0, r1, [sl]
 801ef42:	e039      	b.n	801efb8 <__ieee754_rem_pio2+0x248>
 801ef44:	a34e      	add	r3, pc, #312	; (adr r3, 801f080 <__ieee754_rem_pio2+0x310>)
 801ef46:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef4a:	ec51 0b18 	vmov	r0, r1, d8
 801ef4e:	f7e1 fb6b 	bl	8000628 <__aeabi_dmul>
 801ef52:	4604      	mov	r4, r0
 801ef54:	460d      	mov	r5, r1
 801ef56:	4602      	mov	r2, r0
 801ef58:	460b      	mov	r3, r1
 801ef5a:	4630      	mov	r0, r6
 801ef5c:	4639      	mov	r1, r7
 801ef5e:	f7e1 f9ab 	bl	80002b8 <__aeabi_dsub>
 801ef62:	4602      	mov	r2, r0
 801ef64:	460b      	mov	r3, r1
 801ef66:	4680      	mov	r8, r0
 801ef68:	4689      	mov	r9, r1
 801ef6a:	4630      	mov	r0, r6
 801ef6c:	4639      	mov	r1, r7
 801ef6e:	f7e1 f9a3 	bl	80002b8 <__aeabi_dsub>
 801ef72:	4622      	mov	r2, r4
 801ef74:	462b      	mov	r3, r5
 801ef76:	f7e1 f99f 	bl	80002b8 <__aeabi_dsub>
 801ef7a:	a343      	add	r3, pc, #268	; (adr r3, 801f088 <__ieee754_rem_pio2+0x318>)
 801ef7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef80:	4604      	mov	r4, r0
 801ef82:	460d      	mov	r5, r1
 801ef84:	ec51 0b18 	vmov	r0, r1, d8
 801ef88:	f7e1 fb4e 	bl	8000628 <__aeabi_dmul>
 801ef8c:	4622      	mov	r2, r4
 801ef8e:	462b      	mov	r3, r5
 801ef90:	f7e1 f992 	bl	80002b8 <__aeabi_dsub>
 801ef94:	4602      	mov	r2, r0
 801ef96:	460b      	mov	r3, r1
 801ef98:	4604      	mov	r4, r0
 801ef9a:	460d      	mov	r5, r1
 801ef9c:	4640      	mov	r0, r8
 801ef9e:	4649      	mov	r1, r9
 801efa0:	f7e1 f98a 	bl	80002b8 <__aeabi_dsub>
 801efa4:	9a03      	ldr	r2, [sp, #12]
 801efa6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801efaa:	1ad3      	subs	r3, r2, r3
 801efac:	2b31      	cmp	r3, #49	; 0x31
 801efae:	dc24      	bgt.n	801effa <__ieee754_rem_pio2+0x28a>
 801efb0:	e9ca 0100 	strd	r0, r1, [sl]
 801efb4:	4646      	mov	r6, r8
 801efb6:	464f      	mov	r7, r9
 801efb8:	e9da 8900 	ldrd	r8, r9, [sl]
 801efbc:	4630      	mov	r0, r6
 801efbe:	4642      	mov	r2, r8
 801efc0:	464b      	mov	r3, r9
 801efc2:	4639      	mov	r1, r7
 801efc4:	f7e1 f978 	bl	80002b8 <__aeabi_dsub>
 801efc8:	462b      	mov	r3, r5
 801efca:	4622      	mov	r2, r4
 801efcc:	f7e1 f974 	bl	80002b8 <__aeabi_dsub>
 801efd0:	9b02      	ldr	r3, [sp, #8]
 801efd2:	2b00      	cmp	r3, #0
 801efd4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801efd8:	f6bf af0a 	bge.w	801edf0 <__ieee754_rem_pio2+0x80>
 801efdc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801efe0:	f8ca 3004 	str.w	r3, [sl, #4]
 801efe4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801efe8:	f8ca 8000 	str.w	r8, [sl]
 801efec:	f8ca 0008 	str.w	r0, [sl, #8]
 801eff0:	f8ca 300c 	str.w	r3, [sl, #12]
 801eff4:	f1cb 0b00 	rsb	fp, fp, #0
 801eff8:	e6fa      	b.n	801edf0 <__ieee754_rem_pio2+0x80>
 801effa:	a327      	add	r3, pc, #156	; (adr r3, 801f098 <__ieee754_rem_pio2+0x328>)
 801effc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f000:	ec51 0b18 	vmov	r0, r1, d8
 801f004:	f7e1 fb10 	bl	8000628 <__aeabi_dmul>
 801f008:	4604      	mov	r4, r0
 801f00a:	460d      	mov	r5, r1
 801f00c:	4602      	mov	r2, r0
 801f00e:	460b      	mov	r3, r1
 801f010:	4640      	mov	r0, r8
 801f012:	4649      	mov	r1, r9
 801f014:	f7e1 f950 	bl	80002b8 <__aeabi_dsub>
 801f018:	4602      	mov	r2, r0
 801f01a:	460b      	mov	r3, r1
 801f01c:	4606      	mov	r6, r0
 801f01e:	460f      	mov	r7, r1
 801f020:	4640      	mov	r0, r8
 801f022:	4649      	mov	r1, r9
 801f024:	f7e1 f948 	bl	80002b8 <__aeabi_dsub>
 801f028:	4622      	mov	r2, r4
 801f02a:	462b      	mov	r3, r5
 801f02c:	f7e1 f944 	bl	80002b8 <__aeabi_dsub>
 801f030:	a31b      	add	r3, pc, #108	; (adr r3, 801f0a0 <__ieee754_rem_pio2+0x330>)
 801f032:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f036:	4604      	mov	r4, r0
 801f038:	460d      	mov	r5, r1
 801f03a:	ec51 0b18 	vmov	r0, r1, d8
 801f03e:	f7e1 faf3 	bl	8000628 <__aeabi_dmul>
 801f042:	4622      	mov	r2, r4
 801f044:	462b      	mov	r3, r5
 801f046:	f7e1 f937 	bl	80002b8 <__aeabi_dsub>
 801f04a:	4604      	mov	r4, r0
 801f04c:	460d      	mov	r5, r1
 801f04e:	e75f      	b.n	801ef10 <__ieee754_rem_pio2+0x1a0>
 801f050:	4b1b      	ldr	r3, [pc, #108]	; (801f0c0 <__ieee754_rem_pio2+0x350>)
 801f052:	4598      	cmp	r8, r3
 801f054:	dd36      	ble.n	801f0c4 <__ieee754_rem_pio2+0x354>
 801f056:	ee10 2a10 	vmov	r2, s0
 801f05a:	462b      	mov	r3, r5
 801f05c:	4620      	mov	r0, r4
 801f05e:	4629      	mov	r1, r5
 801f060:	f7e1 f92a 	bl	80002b8 <__aeabi_dsub>
 801f064:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801f068:	e9ca 0100 	strd	r0, r1, [sl]
 801f06c:	e694      	b.n	801ed98 <__ieee754_rem_pio2+0x28>
 801f06e:	bf00      	nop
 801f070:	54400000 	.word	0x54400000
 801f074:	3ff921fb 	.word	0x3ff921fb
 801f078:	1a626331 	.word	0x1a626331
 801f07c:	3dd0b461 	.word	0x3dd0b461
 801f080:	1a600000 	.word	0x1a600000
 801f084:	3dd0b461 	.word	0x3dd0b461
 801f088:	2e037073 	.word	0x2e037073
 801f08c:	3ba3198a 	.word	0x3ba3198a
 801f090:	6dc9c883 	.word	0x6dc9c883
 801f094:	3fe45f30 	.word	0x3fe45f30
 801f098:	2e000000 	.word	0x2e000000
 801f09c:	3ba3198a 	.word	0x3ba3198a
 801f0a0:	252049c1 	.word	0x252049c1
 801f0a4:	397b839a 	.word	0x397b839a
 801f0a8:	3fe921fb 	.word	0x3fe921fb
 801f0ac:	4002d97b 	.word	0x4002d97b
 801f0b0:	3ff921fb 	.word	0x3ff921fb
 801f0b4:	413921fb 	.word	0x413921fb
 801f0b8:	3fe00000 	.word	0x3fe00000
 801f0bc:	0802590c 	.word	0x0802590c
 801f0c0:	7fefffff 	.word	0x7fefffff
 801f0c4:	ea4f 5428 	mov.w	r4, r8, asr #20
 801f0c8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 801f0cc:	ee10 0a10 	vmov	r0, s0
 801f0d0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 801f0d4:	ee10 6a10 	vmov	r6, s0
 801f0d8:	460f      	mov	r7, r1
 801f0da:	f7e1 fd55 	bl	8000b88 <__aeabi_d2iz>
 801f0de:	f7e1 fa39 	bl	8000554 <__aeabi_i2d>
 801f0e2:	4602      	mov	r2, r0
 801f0e4:	460b      	mov	r3, r1
 801f0e6:	4630      	mov	r0, r6
 801f0e8:	4639      	mov	r1, r7
 801f0ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801f0ee:	f7e1 f8e3 	bl	80002b8 <__aeabi_dsub>
 801f0f2:	4b23      	ldr	r3, [pc, #140]	; (801f180 <__ieee754_rem_pio2+0x410>)
 801f0f4:	2200      	movs	r2, #0
 801f0f6:	f7e1 fa97 	bl	8000628 <__aeabi_dmul>
 801f0fa:	460f      	mov	r7, r1
 801f0fc:	4606      	mov	r6, r0
 801f0fe:	f7e1 fd43 	bl	8000b88 <__aeabi_d2iz>
 801f102:	f7e1 fa27 	bl	8000554 <__aeabi_i2d>
 801f106:	4602      	mov	r2, r0
 801f108:	460b      	mov	r3, r1
 801f10a:	4630      	mov	r0, r6
 801f10c:	4639      	mov	r1, r7
 801f10e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801f112:	f7e1 f8d1 	bl	80002b8 <__aeabi_dsub>
 801f116:	4b1a      	ldr	r3, [pc, #104]	; (801f180 <__ieee754_rem_pio2+0x410>)
 801f118:	2200      	movs	r2, #0
 801f11a:	f7e1 fa85 	bl	8000628 <__aeabi_dmul>
 801f11e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801f122:	ad04      	add	r5, sp, #16
 801f124:	f04f 0803 	mov.w	r8, #3
 801f128:	46a9      	mov	r9, r5
 801f12a:	2600      	movs	r6, #0
 801f12c:	2700      	movs	r7, #0
 801f12e:	4632      	mov	r2, r6
 801f130:	463b      	mov	r3, r7
 801f132:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 801f136:	46c3      	mov	fp, r8
 801f138:	3d08      	subs	r5, #8
 801f13a:	f108 38ff 	add.w	r8, r8, #4294967295
 801f13e:	f7e1 fcdb 	bl	8000af8 <__aeabi_dcmpeq>
 801f142:	2800      	cmp	r0, #0
 801f144:	d1f3      	bne.n	801f12e <__ieee754_rem_pio2+0x3be>
 801f146:	4b0f      	ldr	r3, [pc, #60]	; (801f184 <__ieee754_rem_pio2+0x414>)
 801f148:	9301      	str	r3, [sp, #4]
 801f14a:	2302      	movs	r3, #2
 801f14c:	9300      	str	r3, [sp, #0]
 801f14e:	4622      	mov	r2, r4
 801f150:	465b      	mov	r3, fp
 801f152:	4651      	mov	r1, sl
 801f154:	4648      	mov	r0, r9
 801f156:	f000 f993 	bl	801f480 <__kernel_rem_pio2>
 801f15a:	9b02      	ldr	r3, [sp, #8]
 801f15c:	2b00      	cmp	r3, #0
 801f15e:	4683      	mov	fp, r0
 801f160:	f6bf ae46 	bge.w	801edf0 <__ieee754_rem_pio2+0x80>
 801f164:	e9da 2100 	ldrd	r2, r1, [sl]
 801f168:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801f16c:	e9ca 2300 	strd	r2, r3, [sl]
 801f170:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 801f174:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801f178:	e9ca 2302 	strd	r2, r3, [sl, #8]
 801f17c:	e73a      	b.n	801eff4 <__ieee754_rem_pio2+0x284>
 801f17e:	bf00      	nop
 801f180:	41700000 	.word	0x41700000
 801f184:	0802598c 	.word	0x0802598c

0801f188 <__ieee754_sqrt>:
 801f188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f18c:	ec55 4b10 	vmov	r4, r5, d0
 801f190:	4e55      	ldr	r6, [pc, #340]	; (801f2e8 <__ieee754_sqrt+0x160>)
 801f192:	43ae      	bics	r6, r5
 801f194:	ee10 0a10 	vmov	r0, s0
 801f198:	ee10 3a10 	vmov	r3, s0
 801f19c:	462a      	mov	r2, r5
 801f19e:	4629      	mov	r1, r5
 801f1a0:	d110      	bne.n	801f1c4 <__ieee754_sqrt+0x3c>
 801f1a2:	ee10 2a10 	vmov	r2, s0
 801f1a6:	462b      	mov	r3, r5
 801f1a8:	f7e1 fa3e 	bl	8000628 <__aeabi_dmul>
 801f1ac:	4602      	mov	r2, r0
 801f1ae:	460b      	mov	r3, r1
 801f1b0:	4620      	mov	r0, r4
 801f1b2:	4629      	mov	r1, r5
 801f1b4:	f7e1 f882 	bl	80002bc <__adddf3>
 801f1b8:	4604      	mov	r4, r0
 801f1ba:	460d      	mov	r5, r1
 801f1bc:	ec45 4b10 	vmov	d0, r4, r5
 801f1c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f1c4:	2d00      	cmp	r5, #0
 801f1c6:	dc10      	bgt.n	801f1ea <__ieee754_sqrt+0x62>
 801f1c8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801f1cc:	4330      	orrs	r0, r6
 801f1ce:	d0f5      	beq.n	801f1bc <__ieee754_sqrt+0x34>
 801f1d0:	b15d      	cbz	r5, 801f1ea <__ieee754_sqrt+0x62>
 801f1d2:	ee10 2a10 	vmov	r2, s0
 801f1d6:	462b      	mov	r3, r5
 801f1d8:	ee10 0a10 	vmov	r0, s0
 801f1dc:	f7e1 f86c 	bl	80002b8 <__aeabi_dsub>
 801f1e0:	4602      	mov	r2, r0
 801f1e2:	460b      	mov	r3, r1
 801f1e4:	f7e1 fb4a 	bl	800087c <__aeabi_ddiv>
 801f1e8:	e7e6      	b.n	801f1b8 <__ieee754_sqrt+0x30>
 801f1ea:	1512      	asrs	r2, r2, #20
 801f1ec:	d074      	beq.n	801f2d8 <__ieee754_sqrt+0x150>
 801f1ee:	07d4      	lsls	r4, r2, #31
 801f1f0:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801f1f4:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 801f1f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801f1fc:	bf5e      	ittt	pl
 801f1fe:	0fda      	lsrpl	r2, r3, #31
 801f200:	005b      	lslpl	r3, r3, #1
 801f202:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801f206:	2400      	movs	r4, #0
 801f208:	0fda      	lsrs	r2, r3, #31
 801f20a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801f20e:	107f      	asrs	r7, r7, #1
 801f210:	005b      	lsls	r3, r3, #1
 801f212:	2516      	movs	r5, #22
 801f214:	4620      	mov	r0, r4
 801f216:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801f21a:	1886      	adds	r6, r0, r2
 801f21c:	428e      	cmp	r6, r1
 801f21e:	bfde      	ittt	le
 801f220:	1b89      	suble	r1, r1, r6
 801f222:	18b0      	addle	r0, r6, r2
 801f224:	18a4      	addle	r4, r4, r2
 801f226:	0049      	lsls	r1, r1, #1
 801f228:	3d01      	subs	r5, #1
 801f22a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 801f22e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801f232:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801f236:	d1f0      	bne.n	801f21a <__ieee754_sqrt+0x92>
 801f238:	462a      	mov	r2, r5
 801f23a:	f04f 0e20 	mov.w	lr, #32
 801f23e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801f242:	4281      	cmp	r1, r0
 801f244:	eb06 0c05 	add.w	ip, r6, r5
 801f248:	dc02      	bgt.n	801f250 <__ieee754_sqrt+0xc8>
 801f24a:	d113      	bne.n	801f274 <__ieee754_sqrt+0xec>
 801f24c:	459c      	cmp	ip, r3
 801f24e:	d811      	bhi.n	801f274 <__ieee754_sqrt+0xec>
 801f250:	f1bc 0f00 	cmp.w	ip, #0
 801f254:	eb0c 0506 	add.w	r5, ip, r6
 801f258:	da43      	bge.n	801f2e2 <__ieee754_sqrt+0x15a>
 801f25a:	2d00      	cmp	r5, #0
 801f25c:	db41      	blt.n	801f2e2 <__ieee754_sqrt+0x15a>
 801f25e:	f100 0801 	add.w	r8, r0, #1
 801f262:	1a09      	subs	r1, r1, r0
 801f264:	459c      	cmp	ip, r3
 801f266:	bf88      	it	hi
 801f268:	f101 31ff 	addhi.w	r1, r1, #4294967295
 801f26c:	eba3 030c 	sub.w	r3, r3, ip
 801f270:	4432      	add	r2, r6
 801f272:	4640      	mov	r0, r8
 801f274:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 801f278:	f1be 0e01 	subs.w	lr, lr, #1
 801f27c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 801f280:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801f284:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801f288:	d1db      	bne.n	801f242 <__ieee754_sqrt+0xba>
 801f28a:	430b      	orrs	r3, r1
 801f28c:	d006      	beq.n	801f29c <__ieee754_sqrt+0x114>
 801f28e:	1c50      	adds	r0, r2, #1
 801f290:	bf13      	iteet	ne
 801f292:	3201      	addne	r2, #1
 801f294:	3401      	addeq	r4, #1
 801f296:	4672      	moveq	r2, lr
 801f298:	f022 0201 	bicne.w	r2, r2, #1
 801f29c:	1063      	asrs	r3, r4, #1
 801f29e:	0852      	lsrs	r2, r2, #1
 801f2a0:	07e1      	lsls	r1, r4, #31
 801f2a2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801f2a6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801f2aa:	bf48      	it	mi
 801f2ac:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 801f2b0:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 801f2b4:	4614      	mov	r4, r2
 801f2b6:	e781      	b.n	801f1bc <__ieee754_sqrt+0x34>
 801f2b8:	0ad9      	lsrs	r1, r3, #11
 801f2ba:	3815      	subs	r0, #21
 801f2bc:	055b      	lsls	r3, r3, #21
 801f2be:	2900      	cmp	r1, #0
 801f2c0:	d0fa      	beq.n	801f2b8 <__ieee754_sqrt+0x130>
 801f2c2:	02cd      	lsls	r5, r1, #11
 801f2c4:	d50a      	bpl.n	801f2dc <__ieee754_sqrt+0x154>
 801f2c6:	f1c2 0420 	rsb	r4, r2, #32
 801f2ca:	fa23 f404 	lsr.w	r4, r3, r4
 801f2ce:	1e55      	subs	r5, r2, #1
 801f2d0:	4093      	lsls	r3, r2
 801f2d2:	4321      	orrs	r1, r4
 801f2d4:	1b42      	subs	r2, r0, r5
 801f2d6:	e78a      	b.n	801f1ee <__ieee754_sqrt+0x66>
 801f2d8:	4610      	mov	r0, r2
 801f2da:	e7f0      	b.n	801f2be <__ieee754_sqrt+0x136>
 801f2dc:	0049      	lsls	r1, r1, #1
 801f2de:	3201      	adds	r2, #1
 801f2e0:	e7ef      	b.n	801f2c2 <__ieee754_sqrt+0x13a>
 801f2e2:	4680      	mov	r8, r0
 801f2e4:	e7bd      	b.n	801f262 <__ieee754_sqrt+0xda>
 801f2e6:	bf00      	nop
 801f2e8:	7ff00000 	.word	0x7ff00000
 801f2ec:	00000000 	.word	0x00000000

0801f2f0 <__kernel_cos>:
 801f2f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f2f4:	ec57 6b10 	vmov	r6, r7, d0
 801f2f8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801f2fc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 801f300:	ed8d 1b00 	vstr	d1, [sp]
 801f304:	da07      	bge.n	801f316 <__kernel_cos+0x26>
 801f306:	ee10 0a10 	vmov	r0, s0
 801f30a:	4639      	mov	r1, r7
 801f30c:	f7e1 fc3c 	bl	8000b88 <__aeabi_d2iz>
 801f310:	2800      	cmp	r0, #0
 801f312:	f000 8088 	beq.w	801f426 <__kernel_cos+0x136>
 801f316:	4632      	mov	r2, r6
 801f318:	463b      	mov	r3, r7
 801f31a:	4630      	mov	r0, r6
 801f31c:	4639      	mov	r1, r7
 801f31e:	f7e1 f983 	bl	8000628 <__aeabi_dmul>
 801f322:	4b51      	ldr	r3, [pc, #324]	; (801f468 <__kernel_cos+0x178>)
 801f324:	2200      	movs	r2, #0
 801f326:	4604      	mov	r4, r0
 801f328:	460d      	mov	r5, r1
 801f32a:	f7e1 f97d 	bl	8000628 <__aeabi_dmul>
 801f32e:	a340      	add	r3, pc, #256	; (adr r3, 801f430 <__kernel_cos+0x140>)
 801f330:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f334:	4682      	mov	sl, r0
 801f336:	468b      	mov	fp, r1
 801f338:	4620      	mov	r0, r4
 801f33a:	4629      	mov	r1, r5
 801f33c:	f7e1 f974 	bl	8000628 <__aeabi_dmul>
 801f340:	a33d      	add	r3, pc, #244	; (adr r3, 801f438 <__kernel_cos+0x148>)
 801f342:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f346:	f7e0 ffb9 	bl	80002bc <__adddf3>
 801f34a:	4622      	mov	r2, r4
 801f34c:	462b      	mov	r3, r5
 801f34e:	f7e1 f96b 	bl	8000628 <__aeabi_dmul>
 801f352:	a33b      	add	r3, pc, #236	; (adr r3, 801f440 <__kernel_cos+0x150>)
 801f354:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f358:	f7e0 ffae 	bl	80002b8 <__aeabi_dsub>
 801f35c:	4622      	mov	r2, r4
 801f35e:	462b      	mov	r3, r5
 801f360:	f7e1 f962 	bl	8000628 <__aeabi_dmul>
 801f364:	a338      	add	r3, pc, #224	; (adr r3, 801f448 <__kernel_cos+0x158>)
 801f366:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f36a:	f7e0 ffa7 	bl	80002bc <__adddf3>
 801f36e:	4622      	mov	r2, r4
 801f370:	462b      	mov	r3, r5
 801f372:	f7e1 f959 	bl	8000628 <__aeabi_dmul>
 801f376:	a336      	add	r3, pc, #216	; (adr r3, 801f450 <__kernel_cos+0x160>)
 801f378:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f37c:	f7e0 ff9c 	bl	80002b8 <__aeabi_dsub>
 801f380:	4622      	mov	r2, r4
 801f382:	462b      	mov	r3, r5
 801f384:	f7e1 f950 	bl	8000628 <__aeabi_dmul>
 801f388:	a333      	add	r3, pc, #204	; (adr r3, 801f458 <__kernel_cos+0x168>)
 801f38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f38e:	f7e0 ff95 	bl	80002bc <__adddf3>
 801f392:	4622      	mov	r2, r4
 801f394:	462b      	mov	r3, r5
 801f396:	f7e1 f947 	bl	8000628 <__aeabi_dmul>
 801f39a:	4622      	mov	r2, r4
 801f39c:	462b      	mov	r3, r5
 801f39e:	f7e1 f943 	bl	8000628 <__aeabi_dmul>
 801f3a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f3a6:	4604      	mov	r4, r0
 801f3a8:	460d      	mov	r5, r1
 801f3aa:	4630      	mov	r0, r6
 801f3ac:	4639      	mov	r1, r7
 801f3ae:	f7e1 f93b 	bl	8000628 <__aeabi_dmul>
 801f3b2:	460b      	mov	r3, r1
 801f3b4:	4602      	mov	r2, r0
 801f3b6:	4629      	mov	r1, r5
 801f3b8:	4620      	mov	r0, r4
 801f3ba:	f7e0 ff7d 	bl	80002b8 <__aeabi_dsub>
 801f3be:	4b2b      	ldr	r3, [pc, #172]	; (801f46c <__kernel_cos+0x17c>)
 801f3c0:	4598      	cmp	r8, r3
 801f3c2:	4606      	mov	r6, r0
 801f3c4:	460f      	mov	r7, r1
 801f3c6:	dc10      	bgt.n	801f3ea <__kernel_cos+0xfa>
 801f3c8:	4602      	mov	r2, r0
 801f3ca:	460b      	mov	r3, r1
 801f3cc:	4650      	mov	r0, sl
 801f3ce:	4659      	mov	r1, fp
 801f3d0:	f7e0 ff72 	bl	80002b8 <__aeabi_dsub>
 801f3d4:	460b      	mov	r3, r1
 801f3d6:	4926      	ldr	r1, [pc, #152]	; (801f470 <__kernel_cos+0x180>)
 801f3d8:	4602      	mov	r2, r0
 801f3da:	2000      	movs	r0, #0
 801f3dc:	f7e0 ff6c 	bl	80002b8 <__aeabi_dsub>
 801f3e0:	ec41 0b10 	vmov	d0, r0, r1
 801f3e4:	b003      	add	sp, #12
 801f3e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f3ea:	4b22      	ldr	r3, [pc, #136]	; (801f474 <__kernel_cos+0x184>)
 801f3ec:	4920      	ldr	r1, [pc, #128]	; (801f470 <__kernel_cos+0x180>)
 801f3ee:	4598      	cmp	r8, r3
 801f3f0:	bfcc      	ite	gt
 801f3f2:	4d21      	ldrgt	r5, [pc, #132]	; (801f478 <__kernel_cos+0x188>)
 801f3f4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 801f3f8:	2400      	movs	r4, #0
 801f3fa:	4622      	mov	r2, r4
 801f3fc:	462b      	mov	r3, r5
 801f3fe:	2000      	movs	r0, #0
 801f400:	f7e0 ff5a 	bl	80002b8 <__aeabi_dsub>
 801f404:	4622      	mov	r2, r4
 801f406:	4680      	mov	r8, r0
 801f408:	4689      	mov	r9, r1
 801f40a:	462b      	mov	r3, r5
 801f40c:	4650      	mov	r0, sl
 801f40e:	4659      	mov	r1, fp
 801f410:	f7e0 ff52 	bl	80002b8 <__aeabi_dsub>
 801f414:	4632      	mov	r2, r6
 801f416:	463b      	mov	r3, r7
 801f418:	f7e0 ff4e 	bl	80002b8 <__aeabi_dsub>
 801f41c:	4602      	mov	r2, r0
 801f41e:	460b      	mov	r3, r1
 801f420:	4640      	mov	r0, r8
 801f422:	4649      	mov	r1, r9
 801f424:	e7da      	b.n	801f3dc <__kernel_cos+0xec>
 801f426:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 801f460 <__kernel_cos+0x170>
 801f42a:	e7db      	b.n	801f3e4 <__kernel_cos+0xf4>
 801f42c:	f3af 8000 	nop.w
 801f430:	be8838d4 	.word	0xbe8838d4
 801f434:	bda8fae9 	.word	0xbda8fae9
 801f438:	bdb4b1c4 	.word	0xbdb4b1c4
 801f43c:	3e21ee9e 	.word	0x3e21ee9e
 801f440:	809c52ad 	.word	0x809c52ad
 801f444:	3e927e4f 	.word	0x3e927e4f
 801f448:	19cb1590 	.word	0x19cb1590
 801f44c:	3efa01a0 	.word	0x3efa01a0
 801f450:	16c15177 	.word	0x16c15177
 801f454:	3f56c16c 	.word	0x3f56c16c
 801f458:	5555554c 	.word	0x5555554c
 801f45c:	3fa55555 	.word	0x3fa55555
 801f460:	00000000 	.word	0x00000000
 801f464:	3ff00000 	.word	0x3ff00000
 801f468:	3fe00000 	.word	0x3fe00000
 801f46c:	3fd33332 	.word	0x3fd33332
 801f470:	3ff00000 	.word	0x3ff00000
 801f474:	3fe90000 	.word	0x3fe90000
 801f478:	3fd20000 	.word	0x3fd20000
 801f47c:	00000000 	.word	0x00000000

0801f480 <__kernel_rem_pio2>:
 801f480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f484:	ed2d 8b02 	vpush	{d8}
 801f488:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801f48c:	f112 0f14 	cmn.w	r2, #20
 801f490:	9308      	str	r3, [sp, #32]
 801f492:	9101      	str	r1, [sp, #4]
 801f494:	4bc4      	ldr	r3, [pc, #784]	; (801f7a8 <__kernel_rem_pio2+0x328>)
 801f496:	99a6      	ldr	r1, [sp, #664]	; 0x298
 801f498:	900b      	str	r0, [sp, #44]	; 0x2c
 801f49a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801f49e:	9302      	str	r3, [sp, #8]
 801f4a0:	9b08      	ldr	r3, [sp, #32]
 801f4a2:	f103 33ff 	add.w	r3, r3, #4294967295
 801f4a6:	bfa8      	it	ge
 801f4a8:	1ed4      	subge	r4, r2, #3
 801f4aa:	9306      	str	r3, [sp, #24]
 801f4ac:	bfb2      	itee	lt
 801f4ae:	2400      	movlt	r4, #0
 801f4b0:	2318      	movge	r3, #24
 801f4b2:	fb94 f4f3 	sdivge	r4, r4, r3
 801f4b6:	f06f 0317 	mvn.w	r3, #23
 801f4ba:	fb04 3303 	mla	r3, r4, r3, r3
 801f4be:	eb03 0a02 	add.w	sl, r3, r2
 801f4c2:	9b02      	ldr	r3, [sp, #8]
 801f4c4:	9a06      	ldr	r2, [sp, #24]
 801f4c6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 801f798 <__kernel_rem_pio2+0x318>
 801f4ca:	eb03 0802 	add.w	r8, r3, r2
 801f4ce:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801f4d0:	1aa7      	subs	r7, r4, r2
 801f4d2:	ae22      	add	r6, sp, #136	; 0x88
 801f4d4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801f4d8:	2500      	movs	r5, #0
 801f4da:	4545      	cmp	r5, r8
 801f4dc:	dd13      	ble.n	801f506 <__kernel_rem_pio2+0x86>
 801f4de:	9b08      	ldr	r3, [sp, #32]
 801f4e0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 801f798 <__kernel_rem_pio2+0x318>
 801f4e4:	aa22      	add	r2, sp, #136	; 0x88
 801f4e6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801f4ea:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801f4ee:	f04f 0800 	mov.w	r8, #0
 801f4f2:	9b02      	ldr	r3, [sp, #8]
 801f4f4:	4598      	cmp	r8, r3
 801f4f6:	dc2f      	bgt.n	801f558 <__kernel_rem_pio2+0xd8>
 801f4f8:	ed8d 8b04 	vstr	d8, [sp, #16]
 801f4fc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 801f500:	462f      	mov	r7, r5
 801f502:	2600      	movs	r6, #0
 801f504:	e01b      	b.n	801f53e <__kernel_rem_pio2+0xbe>
 801f506:	42ef      	cmn	r7, r5
 801f508:	d407      	bmi.n	801f51a <__kernel_rem_pio2+0x9a>
 801f50a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801f50e:	f7e1 f821 	bl	8000554 <__aeabi_i2d>
 801f512:	e8e6 0102 	strd	r0, r1, [r6], #8
 801f516:	3501      	adds	r5, #1
 801f518:	e7df      	b.n	801f4da <__kernel_rem_pio2+0x5a>
 801f51a:	ec51 0b18 	vmov	r0, r1, d8
 801f51e:	e7f8      	b.n	801f512 <__kernel_rem_pio2+0x92>
 801f520:	e9d7 2300 	ldrd	r2, r3, [r7]
 801f524:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801f528:	f7e1 f87e 	bl	8000628 <__aeabi_dmul>
 801f52c:	4602      	mov	r2, r0
 801f52e:	460b      	mov	r3, r1
 801f530:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801f534:	f7e0 fec2 	bl	80002bc <__adddf3>
 801f538:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801f53c:	3601      	adds	r6, #1
 801f53e:	9b06      	ldr	r3, [sp, #24]
 801f540:	429e      	cmp	r6, r3
 801f542:	f1a7 0708 	sub.w	r7, r7, #8
 801f546:	ddeb      	ble.n	801f520 <__kernel_rem_pio2+0xa0>
 801f548:	ed9d 7b04 	vldr	d7, [sp, #16]
 801f54c:	f108 0801 	add.w	r8, r8, #1
 801f550:	ecab 7b02 	vstmia	fp!, {d7}
 801f554:	3508      	adds	r5, #8
 801f556:	e7cc      	b.n	801f4f2 <__kernel_rem_pio2+0x72>
 801f558:	9b02      	ldr	r3, [sp, #8]
 801f55a:	aa0e      	add	r2, sp, #56	; 0x38
 801f55c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801f560:	930d      	str	r3, [sp, #52]	; 0x34
 801f562:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801f564:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801f568:	9c02      	ldr	r4, [sp, #8]
 801f56a:	930c      	str	r3, [sp, #48]	; 0x30
 801f56c:	00e3      	lsls	r3, r4, #3
 801f56e:	930a      	str	r3, [sp, #40]	; 0x28
 801f570:	ab9a      	add	r3, sp, #616	; 0x268
 801f572:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801f576:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801f57a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 801f57e:	ab72      	add	r3, sp, #456	; 0x1c8
 801f580:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 801f584:	46c3      	mov	fp, r8
 801f586:	46a1      	mov	r9, r4
 801f588:	f1b9 0f00 	cmp.w	r9, #0
 801f58c:	f1a5 0508 	sub.w	r5, r5, #8
 801f590:	dc77      	bgt.n	801f682 <__kernel_rem_pio2+0x202>
 801f592:	ec47 6b10 	vmov	d0, r6, r7
 801f596:	4650      	mov	r0, sl
 801f598:	f000 fc0a 	bl	801fdb0 <scalbn>
 801f59c:	ec57 6b10 	vmov	r6, r7, d0
 801f5a0:	2200      	movs	r2, #0
 801f5a2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801f5a6:	ee10 0a10 	vmov	r0, s0
 801f5aa:	4639      	mov	r1, r7
 801f5ac:	f7e1 f83c 	bl	8000628 <__aeabi_dmul>
 801f5b0:	ec41 0b10 	vmov	d0, r0, r1
 801f5b4:	f000 fb7c 	bl	801fcb0 <floor>
 801f5b8:	4b7c      	ldr	r3, [pc, #496]	; (801f7ac <__kernel_rem_pio2+0x32c>)
 801f5ba:	ec51 0b10 	vmov	r0, r1, d0
 801f5be:	2200      	movs	r2, #0
 801f5c0:	f7e1 f832 	bl	8000628 <__aeabi_dmul>
 801f5c4:	4602      	mov	r2, r0
 801f5c6:	460b      	mov	r3, r1
 801f5c8:	4630      	mov	r0, r6
 801f5ca:	4639      	mov	r1, r7
 801f5cc:	f7e0 fe74 	bl	80002b8 <__aeabi_dsub>
 801f5d0:	460f      	mov	r7, r1
 801f5d2:	4606      	mov	r6, r0
 801f5d4:	f7e1 fad8 	bl	8000b88 <__aeabi_d2iz>
 801f5d8:	9004      	str	r0, [sp, #16]
 801f5da:	f7e0 ffbb 	bl	8000554 <__aeabi_i2d>
 801f5de:	4602      	mov	r2, r0
 801f5e0:	460b      	mov	r3, r1
 801f5e2:	4630      	mov	r0, r6
 801f5e4:	4639      	mov	r1, r7
 801f5e6:	f7e0 fe67 	bl	80002b8 <__aeabi_dsub>
 801f5ea:	f1ba 0f00 	cmp.w	sl, #0
 801f5ee:	4606      	mov	r6, r0
 801f5f0:	460f      	mov	r7, r1
 801f5f2:	dd6d      	ble.n	801f6d0 <__kernel_rem_pio2+0x250>
 801f5f4:	1e62      	subs	r2, r4, #1
 801f5f6:	ab0e      	add	r3, sp, #56	; 0x38
 801f5f8:	9d04      	ldr	r5, [sp, #16]
 801f5fa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801f5fe:	f1ca 0118 	rsb	r1, sl, #24
 801f602:	fa40 f301 	asr.w	r3, r0, r1
 801f606:	441d      	add	r5, r3
 801f608:	408b      	lsls	r3, r1
 801f60a:	1ac0      	subs	r0, r0, r3
 801f60c:	ab0e      	add	r3, sp, #56	; 0x38
 801f60e:	9504      	str	r5, [sp, #16]
 801f610:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801f614:	f1ca 0317 	rsb	r3, sl, #23
 801f618:	fa40 fb03 	asr.w	fp, r0, r3
 801f61c:	f1bb 0f00 	cmp.w	fp, #0
 801f620:	dd65      	ble.n	801f6ee <__kernel_rem_pio2+0x26e>
 801f622:	9b04      	ldr	r3, [sp, #16]
 801f624:	2200      	movs	r2, #0
 801f626:	3301      	adds	r3, #1
 801f628:	9304      	str	r3, [sp, #16]
 801f62a:	4615      	mov	r5, r2
 801f62c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801f630:	4294      	cmp	r4, r2
 801f632:	f300 809c 	bgt.w	801f76e <__kernel_rem_pio2+0x2ee>
 801f636:	f1ba 0f00 	cmp.w	sl, #0
 801f63a:	dd07      	ble.n	801f64c <__kernel_rem_pio2+0x1cc>
 801f63c:	f1ba 0f01 	cmp.w	sl, #1
 801f640:	f000 80c0 	beq.w	801f7c4 <__kernel_rem_pio2+0x344>
 801f644:	f1ba 0f02 	cmp.w	sl, #2
 801f648:	f000 80c6 	beq.w	801f7d8 <__kernel_rem_pio2+0x358>
 801f64c:	f1bb 0f02 	cmp.w	fp, #2
 801f650:	d14d      	bne.n	801f6ee <__kernel_rem_pio2+0x26e>
 801f652:	4632      	mov	r2, r6
 801f654:	463b      	mov	r3, r7
 801f656:	4956      	ldr	r1, [pc, #344]	; (801f7b0 <__kernel_rem_pio2+0x330>)
 801f658:	2000      	movs	r0, #0
 801f65a:	f7e0 fe2d 	bl	80002b8 <__aeabi_dsub>
 801f65e:	4606      	mov	r6, r0
 801f660:	460f      	mov	r7, r1
 801f662:	2d00      	cmp	r5, #0
 801f664:	d043      	beq.n	801f6ee <__kernel_rem_pio2+0x26e>
 801f666:	4650      	mov	r0, sl
 801f668:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 801f7a0 <__kernel_rem_pio2+0x320>
 801f66c:	f000 fba0 	bl	801fdb0 <scalbn>
 801f670:	4630      	mov	r0, r6
 801f672:	4639      	mov	r1, r7
 801f674:	ec53 2b10 	vmov	r2, r3, d0
 801f678:	f7e0 fe1e 	bl	80002b8 <__aeabi_dsub>
 801f67c:	4606      	mov	r6, r0
 801f67e:	460f      	mov	r7, r1
 801f680:	e035      	b.n	801f6ee <__kernel_rem_pio2+0x26e>
 801f682:	4b4c      	ldr	r3, [pc, #304]	; (801f7b4 <__kernel_rem_pio2+0x334>)
 801f684:	2200      	movs	r2, #0
 801f686:	4630      	mov	r0, r6
 801f688:	4639      	mov	r1, r7
 801f68a:	f7e0 ffcd 	bl	8000628 <__aeabi_dmul>
 801f68e:	f7e1 fa7b 	bl	8000b88 <__aeabi_d2iz>
 801f692:	f7e0 ff5f 	bl	8000554 <__aeabi_i2d>
 801f696:	4602      	mov	r2, r0
 801f698:	460b      	mov	r3, r1
 801f69a:	ec43 2b18 	vmov	d8, r2, r3
 801f69e:	4b46      	ldr	r3, [pc, #280]	; (801f7b8 <__kernel_rem_pio2+0x338>)
 801f6a0:	2200      	movs	r2, #0
 801f6a2:	f7e0 ffc1 	bl	8000628 <__aeabi_dmul>
 801f6a6:	4602      	mov	r2, r0
 801f6a8:	460b      	mov	r3, r1
 801f6aa:	4630      	mov	r0, r6
 801f6ac:	4639      	mov	r1, r7
 801f6ae:	f7e0 fe03 	bl	80002b8 <__aeabi_dsub>
 801f6b2:	f7e1 fa69 	bl	8000b88 <__aeabi_d2iz>
 801f6b6:	e9d5 2300 	ldrd	r2, r3, [r5]
 801f6ba:	f84b 0b04 	str.w	r0, [fp], #4
 801f6be:	ec51 0b18 	vmov	r0, r1, d8
 801f6c2:	f7e0 fdfb 	bl	80002bc <__adddf3>
 801f6c6:	f109 39ff 	add.w	r9, r9, #4294967295
 801f6ca:	4606      	mov	r6, r0
 801f6cc:	460f      	mov	r7, r1
 801f6ce:	e75b      	b.n	801f588 <__kernel_rem_pio2+0x108>
 801f6d0:	d106      	bne.n	801f6e0 <__kernel_rem_pio2+0x260>
 801f6d2:	1e63      	subs	r3, r4, #1
 801f6d4:	aa0e      	add	r2, sp, #56	; 0x38
 801f6d6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801f6da:	ea4f 5be0 	mov.w	fp, r0, asr #23
 801f6de:	e79d      	b.n	801f61c <__kernel_rem_pio2+0x19c>
 801f6e0:	4b36      	ldr	r3, [pc, #216]	; (801f7bc <__kernel_rem_pio2+0x33c>)
 801f6e2:	2200      	movs	r2, #0
 801f6e4:	f7e1 fa26 	bl	8000b34 <__aeabi_dcmpge>
 801f6e8:	2800      	cmp	r0, #0
 801f6ea:	d13d      	bne.n	801f768 <__kernel_rem_pio2+0x2e8>
 801f6ec:	4683      	mov	fp, r0
 801f6ee:	2200      	movs	r2, #0
 801f6f0:	2300      	movs	r3, #0
 801f6f2:	4630      	mov	r0, r6
 801f6f4:	4639      	mov	r1, r7
 801f6f6:	f7e1 f9ff 	bl	8000af8 <__aeabi_dcmpeq>
 801f6fa:	2800      	cmp	r0, #0
 801f6fc:	f000 80c0 	beq.w	801f880 <__kernel_rem_pio2+0x400>
 801f700:	1e65      	subs	r5, r4, #1
 801f702:	462b      	mov	r3, r5
 801f704:	2200      	movs	r2, #0
 801f706:	9902      	ldr	r1, [sp, #8]
 801f708:	428b      	cmp	r3, r1
 801f70a:	da6c      	bge.n	801f7e6 <__kernel_rem_pio2+0x366>
 801f70c:	2a00      	cmp	r2, #0
 801f70e:	f000 8089 	beq.w	801f824 <__kernel_rem_pio2+0x3a4>
 801f712:	ab0e      	add	r3, sp, #56	; 0x38
 801f714:	f1aa 0a18 	sub.w	sl, sl, #24
 801f718:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801f71c:	2b00      	cmp	r3, #0
 801f71e:	f000 80ad 	beq.w	801f87c <__kernel_rem_pio2+0x3fc>
 801f722:	4650      	mov	r0, sl
 801f724:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 801f7a0 <__kernel_rem_pio2+0x320>
 801f728:	f000 fb42 	bl	801fdb0 <scalbn>
 801f72c:	ab9a      	add	r3, sp, #616	; 0x268
 801f72e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801f732:	ec57 6b10 	vmov	r6, r7, d0
 801f736:	00ec      	lsls	r4, r5, #3
 801f738:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 801f73c:	46aa      	mov	sl, r5
 801f73e:	f1ba 0f00 	cmp.w	sl, #0
 801f742:	f280 80d6 	bge.w	801f8f2 <__kernel_rem_pio2+0x472>
 801f746:	ed9f 8b14 	vldr	d8, [pc, #80]	; 801f798 <__kernel_rem_pio2+0x318>
 801f74a:	462e      	mov	r6, r5
 801f74c:	2e00      	cmp	r6, #0
 801f74e:	f2c0 8104 	blt.w	801f95a <__kernel_rem_pio2+0x4da>
 801f752:	ab72      	add	r3, sp, #456	; 0x1c8
 801f754:	ed8d 8b06 	vstr	d8, [sp, #24]
 801f758:	f8df a064 	ldr.w	sl, [pc, #100]	; 801f7c0 <__kernel_rem_pio2+0x340>
 801f75c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 801f760:	f04f 0800 	mov.w	r8, #0
 801f764:	1baf      	subs	r7, r5, r6
 801f766:	e0ea      	b.n	801f93e <__kernel_rem_pio2+0x4be>
 801f768:	f04f 0b02 	mov.w	fp, #2
 801f76c:	e759      	b.n	801f622 <__kernel_rem_pio2+0x1a2>
 801f76e:	f8d8 3000 	ldr.w	r3, [r8]
 801f772:	b955      	cbnz	r5, 801f78a <__kernel_rem_pio2+0x30a>
 801f774:	b123      	cbz	r3, 801f780 <__kernel_rem_pio2+0x300>
 801f776:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801f77a:	f8c8 3000 	str.w	r3, [r8]
 801f77e:	2301      	movs	r3, #1
 801f780:	3201      	adds	r2, #1
 801f782:	f108 0804 	add.w	r8, r8, #4
 801f786:	461d      	mov	r5, r3
 801f788:	e752      	b.n	801f630 <__kernel_rem_pio2+0x1b0>
 801f78a:	1acb      	subs	r3, r1, r3
 801f78c:	f8c8 3000 	str.w	r3, [r8]
 801f790:	462b      	mov	r3, r5
 801f792:	e7f5      	b.n	801f780 <__kernel_rem_pio2+0x300>
 801f794:	f3af 8000 	nop.w
	...
 801f7a4:	3ff00000 	.word	0x3ff00000
 801f7a8:	08025ad8 	.word	0x08025ad8
 801f7ac:	40200000 	.word	0x40200000
 801f7b0:	3ff00000 	.word	0x3ff00000
 801f7b4:	3e700000 	.word	0x3e700000
 801f7b8:	41700000 	.word	0x41700000
 801f7bc:	3fe00000 	.word	0x3fe00000
 801f7c0:	08025a98 	.word	0x08025a98
 801f7c4:	1e62      	subs	r2, r4, #1
 801f7c6:	ab0e      	add	r3, sp, #56	; 0x38
 801f7c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801f7cc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801f7d0:	a90e      	add	r1, sp, #56	; 0x38
 801f7d2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801f7d6:	e739      	b.n	801f64c <__kernel_rem_pio2+0x1cc>
 801f7d8:	1e62      	subs	r2, r4, #1
 801f7da:	ab0e      	add	r3, sp, #56	; 0x38
 801f7dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801f7e0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801f7e4:	e7f4      	b.n	801f7d0 <__kernel_rem_pio2+0x350>
 801f7e6:	a90e      	add	r1, sp, #56	; 0x38
 801f7e8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801f7ec:	3b01      	subs	r3, #1
 801f7ee:	430a      	orrs	r2, r1
 801f7f0:	e789      	b.n	801f706 <__kernel_rem_pio2+0x286>
 801f7f2:	3301      	adds	r3, #1
 801f7f4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801f7f8:	2900      	cmp	r1, #0
 801f7fa:	d0fa      	beq.n	801f7f2 <__kernel_rem_pio2+0x372>
 801f7fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f7fe:	f502 721a 	add.w	r2, r2, #616	; 0x268
 801f802:	446a      	add	r2, sp
 801f804:	3a98      	subs	r2, #152	; 0x98
 801f806:	920a      	str	r2, [sp, #40]	; 0x28
 801f808:	9a08      	ldr	r2, [sp, #32]
 801f80a:	18e3      	adds	r3, r4, r3
 801f80c:	18a5      	adds	r5, r4, r2
 801f80e:	aa22      	add	r2, sp, #136	; 0x88
 801f810:	f104 0801 	add.w	r8, r4, #1
 801f814:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 801f818:	9304      	str	r3, [sp, #16]
 801f81a:	9b04      	ldr	r3, [sp, #16]
 801f81c:	4543      	cmp	r3, r8
 801f81e:	da04      	bge.n	801f82a <__kernel_rem_pio2+0x3aa>
 801f820:	461c      	mov	r4, r3
 801f822:	e6a3      	b.n	801f56c <__kernel_rem_pio2+0xec>
 801f824:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f826:	2301      	movs	r3, #1
 801f828:	e7e4      	b.n	801f7f4 <__kernel_rem_pio2+0x374>
 801f82a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f82c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801f830:	f7e0 fe90 	bl	8000554 <__aeabi_i2d>
 801f834:	e8e5 0102 	strd	r0, r1, [r5], #8
 801f838:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f83a:	46ab      	mov	fp, r5
 801f83c:	461c      	mov	r4, r3
 801f83e:	f04f 0900 	mov.w	r9, #0
 801f842:	2600      	movs	r6, #0
 801f844:	2700      	movs	r7, #0
 801f846:	9b06      	ldr	r3, [sp, #24]
 801f848:	4599      	cmp	r9, r3
 801f84a:	dd06      	ble.n	801f85a <__kernel_rem_pio2+0x3da>
 801f84c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f84e:	e8e3 6702 	strd	r6, r7, [r3], #8
 801f852:	f108 0801 	add.w	r8, r8, #1
 801f856:	930a      	str	r3, [sp, #40]	; 0x28
 801f858:	e7df      	b.n	801f81a <__kernel_rem_pio2+0x39a>
 801f85a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801f85e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801f862:	f7e0 fee1 	bl	8000628 <__aeabi_dmul>
 801f866:	4602      	mov	r2, r0
 801f868:	460b      	mov	r3, r1
 801f86a:	4630      	mov	r0, r6
 801f86c:	4639      	mov	r1, r7
 801f86e:	f7e0 fd25 	bl	80002bc <__adddf3>
 801f872:	f109 0901 	add.w	r9, r9, #1
 801f876:	4606      	mov	r6, r0
 801f878:	460f      	mov	r7, r1
 801f87a:	e7e4      	b.n	801f846 <__kernel_rem_pio2+0x3c6>
 801f87c:	3d01      	subs	r5, #1
 801f87e:	e748      	b.n	801f712 <__kernel_rem_pio2+0x292>
 801f880:	ec47 6b10 	vmov	d0, r6, r7
 801f884:	f1ca 0000 	rsb	r0, sl, #0
 801f888:	f000 fa92 	bl	801fdb0 <scalbn>
 801f88c:	ec57 6b10 	vmov	r6, r7, d0
 801f890:	4ba0      	ldr	r3, [pc, #640]	; (801fb14 <__kernel_rem_pio2+0x694>)
 801f892:	ee10 0a10 	vmov	r0, s0
 801f896:	2200      	movs	r2, #0
 801f898:	4639      	mov	r1, r7
 801f89a:	f7e1 f94b 	bl	8000b34 <__aeabi_dcmpge>
 801f89e:	b1f8      	cbz	r0, 801f8e0 <__kernel_rem_pio2+0x460>
 801f8a0:	4b9d      	ldr	r3, [pc, #628]	; (801fb18 <__kernel_rem_pio2+0x698>)
 801f8a2:	2200      	movs	r2, #0
 801f8a4:	4630      	mov	r0, r6
 801f8a6:	4639      	mov	r1, r7
 801f8a8:	f7e0 febe 	bl	8000628 <__aeabi_dmul>
 801f8ac:	f7e1 f96c 	bl	8000b88 <__aeabi_d2iz>
 801f8b0:	4680      	mov	r8, r0
 801f8b2:	f7e0 fe4f 	bl	8000554 <__aeabi_i2d>
 801f8b6:	4b97      	ldr	r3, [pc, #604]	; (801fb14 <__kernel_rem_pio2+0x694>)
 801f8b8:	2200      	movs	r2, #0
 801f8ba:	f7e0 feb5 	bl	8000628 <__aeabi_dmul>
 801f8be:	460b      	mov	r3, r1
 801f8c0:	4602      	mov	r2, r0
 801f8c2:	4639      	mov	r1, r7
 801f8c4:	4630      	mov	r0, r6
 801f8c6:	f7e0 fcf7 	bl	80002b8 <__aeabi_dsub>
 801f8ca:	f7e1 f95d 	bl	8000b88 <__aeabi_d2iz>
 801f8ce:	1c65      	adds	r5, r4, #1
 801f8d0:	ab0e      	add	r3, sp, #56	; 0x38
 801f8d2:	f10a 0a18 	add.w	sl, sl, #24
 801f8d6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801f8da:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801f8de:	e720      	b.n	801f722 <__kernel_rem_pio2+0x2a2>
 801f8e0:	4630      	mov	r0, r6
 801f8e2:	4639      	mov	r1, r7
 801f8e4:	f7e1 f950 	bl	8000b88 <__aeabi_d2iz>
 801f8e8:	ab0e      	add	r3, sp, #56	; 0x38
 801f8ea:	4625      	mov	r5, r4
 801f8ec:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801f8f0:	e717      	b.n	801f722 <__kernel_rem_pio2+0x2a2>
 801f8f2:	ab0e      	add	r3, sp, #56	; 0x38
 801f8f4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 801f8f8:	f7e0 fe2c 	bl	8000554 <__aeabi_i2d>
 801f8fc:	4632      	mov	r2, r6
 801f8fe:	463b      	mov	r3, r7
 801f900:	f7e0 fe92 	bl	8000628 <__aeabi_dmul>
 801f904:	4b84      	ldr	r3, [pc, #528]	; (801fb18 <__kernel_rem_pio2+0x698>)
 801f906:	e968 0102 	strd	r0, r1, [r8, #-8]!
 801f90a:	2200      	movs	r2, #0
 801f90c:	4630      	mov	r0, r6
 801f90e:	4639      	mov	r1, r7
 801f910:	f7e0 fe8a 	bl	8000628 <__aeabi_dmul>
 801f914:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f918:	4606      	mov	r6, r0
 801f91a:	460f      	mov	r7, r1
 801f91c:	e70f      	b.n	801f73e <__kernel_rem_pio2+0x2be>
 801f91e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 801f922:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 801f926:	f7e0 fe7f 	bl	8000628 <__aeabi_dmul>
 801f92a:	4602      	mov	r2, r0
 801f92c:	460b      	mov	r3, r1
 801f92e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801f932:	f7e0 fcc3 	bl	80002bc <__adddf3>
 801f936:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801f93a:	f108 0801 	add.w	r8, r8, #1
 801f93e:	9b02      	ldr	r3, [sp, #8]
 801f940:	4598      	cmp	r8, r3
 801f942:	dc01      	bgt.n	801f948 <__kernel_rem_pio2+0x4c8>
 801f944:	45b8      	cmp	r8, r7
 801f946:	ddea      	ble.n	801f91e <__kernel_rem_pio2+0x49e>
 801f948:	ed9d 7b06 	vldr	d7, [sp, #24]
 801f94c:	ab4a      	add	r3, sp, #296	; 0x128
 801f94e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 801f952:	ed87 7b00 	vstr	d7, [r7]
 801f956:	3e01      	subs	r6, #1
 801f958:	e6f8      	b.n	801f74c <__kernel_rem_pio2+0x2cc>
 801f95a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801f95c:	2b02      	cmp	r3, #2
 801f95e:	dc0b      	bgt.n	801f978 <__kernel_rem_pio2+0x4f8>
 801f960:	2b00      	cmp	r3, #0
 801f962:	dc35      	bgt.n	801f9d0 <__kernel_rem_pio2+0x550>
 801f964:	d059      	beq.n	801fa1a <__kernel_rem_pio2+0x59a>
 801f966:	9b04      	ldr	r3, [sp, #16]
 801f968:	f003 0007 	and.w	r0, r3, #7
 801f96c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 801f970:	ecbd 8b02 	vpop	{d8}
 801f974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f978:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801f97a:	2b03      	cmp	r3, #3
 801f97c:	d1f3      	bne.n	801f966 <__kernel_rem_pio2+0x4e6>
 801f97e:	ab4a      	add	r3, sp, #296	; 0x128
 801f980:	4423      	add	r3, r4
 801f982:	9306      	str	r3, [sp, #24]
 801f984:	461c      	mov	r4, r3
 801f986:	469a      	mov	sl, r3
 801f988:	9502      	str	r5, [sp, #8]
 801f98a:	9b02      	ldr	r3, [sp, #8]
 801f98c:	2b00      	cmp	r3, #0
 801f98e:	f1aa 0a08 	sub.w	sl, sl, #8
 801f992:	dc6b      	bgt.n	801fa6c <__kernel_rem_pio2+0x5ec>
 801f994:	46aa      	mov	sl, r5
 801f996:	f1ba 0f01 	cmp.w	sl, #1
 801f99a:	f1a4 0408 	sub.w	r4, r4, #8
 801f99e:	f300 8085 	bgt.w	801faac <__kernel_rem_pio2+0x62c>
 801f9a2:	9c06      	ldr	r4, [sp, #24]
 801f9a4:	2000      	movs	r0, #0
 801f9a6:	3408      	adds	r4, #8
 801f9a8:	2100      	movs	r1, #0
 801f9aa:	2d01      	cmp	r5, #1
 801f9ac:	f300 809d 	bgt.w	801faea <__kernel_rem_pio2+0x66a>
 801f9b0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 801f9b4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 801f9b8:	f1bb 0f00 	cmp.w	fp, #0
 801f9bc:	f040 809b 	bne.w	801faf6 <__kernel_rem_pio2+0x676>
 801f9c0:	9b01      	ldr	r3, [sp, #4]
 801f9c2:	e9c3 5600 	strd	r5, r6, [r3]
 801f9c6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 801f9ca:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801f9ce:	e7ca      	b.n	801f966 <__kernel_rem_pio2+0x4e6>
 801f9d0:	3408      	adds	r4, #8
 801f9d2:	ab4a      	add	r3, sp, #296	; 0x128
 801f9d4:	441c      	add	r4, r3
 801f9d6:	462e      	mov	r6, r5
 801f9d8:	2000      	movs	r0, #0
 801f9da:	2100      	movs	r1, #0
 801f9dc:	2e00      	cmp	r6, #0
 801f9de:	da36      	bge.n	801fa4e <__kernel_rem_pio2+0x5ce>
 801f9e0:	f1bb 0f00 	cmp.w	fp, #0
 801f9e4:	d039      	beq.n	801fa5a <__kernel_rem_pio2+0x5da>
 801f9e6:	4602      	mov	r2, r0
 801f9e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801f9ec:	9c01      	ldr	r4, [sp, #4]
 801f9ee:	e9c4 2300 	strd	r2, r3, [r4]
 801f9f2:	4602      	mov	r2, r0
 801f9f4:	460b      	mov	r3, r1
 801f9f6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 801f9fa:	f7e0 fc5d 	bl	80002b8 <__aeabi_dsub>
 801f9fe:	ae4c      	add	r6, sp, #304	; 0x130
 801fa00:	2401      	movs	r4, #1
 801fa02:	42a5      	cmp	r5, r4
 801fa04:	da2c      	bge.n	801fa60 <__kernel_rem_pio2+0x5e0>
 801fa06:	f1bb 0f00 	cmp.w	fp, #0
 801fa0a:	d002      	beq.n	801fa12 <__kernel_rem_pio2+0x592>
 801fa0c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801fa10:	4619      	mov	r1, r3
 801fa12:	9b01      	ldr	r3, [sp, #4]
 801fa14:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801fa18:	e7a5      	b.n	801f966 <__kernel_rem_pio2+0x4e6>
 801fa1a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 801fa1e:	eb0d 0403 	add.w	r4, sp, r3
 801fa22:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801fa26:	2000      	movs	r0, #0
 801fa28:	2100      	movs	r1, #0
 801fa2a:	2d00      	cmp	r5, #0
 801fa2c:	da09      	bge.n	801fa42 <__kernel_rem_pio2+0x5c2>
 801fa2e:	f1bb 0f00 	cmp.w	fp, #0
 801fa32:	d002      	beq.n	801fa3a <__kernel_rem_pio2+0x5ba>
 801fa34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801fa38:	4619      	mov	r1, r3
 801fa3a:	9b01      	ldr	r3, [sp, #4]
 801fa3c:	e9c3 0100 	strd	r0, r1, [r3]
 801fa40:	e791      	b.n	801f966 <__kernel_rem_pio2+0x4e6>
 801fa42:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801fa46:	f7e0 fc39 	bl	80002bc <__adddf3>
 801fa4a:	3d01      	subs	r5, #1
 801fa4c:	e7ed      	b.n	801fa2a <__kernel_rem_pio2+0x5aa>
 801fa4e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801fa52:	f7e0 fc33 	bl	80002bc <__adddf3>
 801fa56:	3e01      	subs	r6, #1
 801fa58:	e7c0      	b.n	801f9dc <__kernel_rem_pio2+0x55c>
 801fa5a:	4602      	mov	r2, r0
 801fa5c:	460b      	mov	r3, r1
 801fa5e:	e7c5      	b.n	801f9ec <__kernel_rem_pio2+0x56c>
 801fa60:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801fa64:	f7e0 fc2a 	bl	80002bc <__adddf3>
 801fa68:	3401      	adds	r4, #1
 801fa6a:	e7ca      	b.n	801fa02 <__kernel_rem_pio2+0x582>
 801fa6c:	e9da 8900 	ldrd	r8, r9, [sl]
 801fa70:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801fa74:	9b02      	ldr	r3, [sp, #8]
 801fa76:	3b01      	subs	r3, #1
 801fa78:	9302      	str	r3, [sp, #8]
 801fa7a:	4632      	mov	r2, r6
 801fa7c:	463b      	mov	r3, r7
 801fa7e:	4640      	mov	r0, r8
 801fa80:	4649      	mov	r1, r9
 801fa82:	f7e0 fc1b 	bl	80002bc <__adddf3>
 801fa86:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801fa8a:	4602      	mov	r2, r0
 801fa8c:	460b      	mov	r3, r1
 801fa8e:	4640      	mov	r0, r8
 801fa90:	4649      	mov	r1, r9
 801fa92:	f7e0 fc11 	bl	80002b8 <__aeabi_dsub>
 801fa96:	4632      	mov	r2, r6
 801fa98:	463b      	mov	r3, r7
 801fa9a:	f7e0 fc0f 	bl	80002bc <__adddf3>
 801fa9e:	ed9d 7b08 	vldr	d7, [sp, #32]
 801faa2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801faa6:	ed8a 7b00 	vstr	d7, [sl]
 801faaa:	e76e      	b.n	801f98a <__kernel_rem_pio2+0x50a>
 801faac:	e9d4 8900 	ldrd	r8, r9, [r4]
 801fab0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 801fab4:	4640      	mov	r0, r8
 801fab6:	4632      	mov	r2, r6
 801fab8:	463b      	mov	r3, r7
 801faba:	4649      	mov	r1, r9
 801fabc:	f7e0 fbfe 	bl	80002bc <__adddf3>
 801fac0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801fac4:	4602      	mov	r2, r0
 801fac6:	460b      	mov	r3, r1
 801fac8:	4640      	mov	r0, r8
 801faca:	4649      	mov	r1, r9
 801facc:	f7e0 fbf4 	bl	80002b8 <__aeabi_dsub>
 801fad0:	4632      	mov	r2, r6
 801fad2:	463b      	mov	r3, r7
 801fad4:	f7e0 fbf2 	bl	80002bc <__adddf3>
 801fad8:	ed9d 7b02 	vldr	d7, [sp, #8]
 801fadc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801fae0:	ed84 7b00 	vstr	d7, [r4]
 801fae4:	f10a 3aff 	add.w	sl, sl, #4294967295
 801fae8:	e755      	b.n	801f996 <__kernel_rem_pio2+0x516>
 801faea:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801faee:	f7e0 fbe5 	bl	80002bc <__adddf3>
 801faf2:	3d01      	subs	r5, #1
 801faf4:	e759      	b.n	801f9aa <__kernel_rem_pio2+0x52a>
 801faf6:	9b01      	ldr	r3, [sp, #4]
 801faf8:	9a01      	ldr	r2, [sp, #4]
 801fafa:	601d      	str	r5, [r3, #0]
 801fafc:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 801fb00:	605c      	str	r4, [r3, #4]
 801fb02:	609f      	str	r7, [r3, #8]
 801fb04:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 801fb08:	60d3      	str	r3, [r2, #12]
 801fb0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801fb0e:	6110      	str	r0, [r2, #16]
 801fb10:	6153      	str	r3, [r2, #20]
 801fb12:	e728      	b.n	801f966 <__kernel_rem_pio2+0x4e6>
 801fb14:	41700000 	.word	0x41700000
 801fb18:	3e700000 	.word	0x3e700000
 801fb1c:	00000000 	.word	0x00000000

0801fb20 <__kernel_sin>:
 801fb20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb24:	ed2d 8b04 	vpush	{d8-d9}
 801fb28:	eeb0 8a41 	vmov.f32	s16, s2
 801fb2c:	eef0 8a61 	vmov.f32	s17, s3
 801fb30:	ec55 4b10 	vmov	r4, r5, d0
 801fb34:	b083      	sub	sp, #12
 801fb36:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801fb3a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801fb3e:	9001      	str	r0, [sp, #4]
 801fb40:	da06      	bge.n	801fb50 <__kernel_sin+0x30>
 801fb42:	ee10 0a10 	vmov	r0, s0
 801fb46:	4629      	mov	r1, r5
 801fb48:	f7e1 f81e 	bl	8000b88 <__aeabi_d2iz>
 801fb4c:	2800      	cmp	r0, #0
 801fb4e:	d051      	beq.n	801fbf4 <__kernel_sin+0xd4>
 801fb50:	4622      	mov	r2, r4
 801fb52:	462b      	mov	r3, r5
 801fb54:	4620      	mov	r0, r4
 801fb56:	4629      	mov	r1, r5
 801fb58:	f7e0 fd66 	bl	8000628 <__aeabi_dmul>
 801fb5c:	4682      	mov	sl, r0
 801fb5e:	468b      	mov	fp, r1
 801fb60:	4602      	mov	r2, r0
 801fb62:	460b      	mov	r3, r1
 801fb64:	4620      	mov	r0, r4
 801fb66:	4629      	mov	r1, r5
 801fb68:	f7e0 fd5e 	bl	8000628 <__aeabi_dmul>
 801fb6c:	a341      	add	r3, pc, #260	; (adr r3, 801fc74 <__kernel_sin+0x154>)
 801fb6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fb72:	4680      	mov	r8, r0
 801fb74:	4689      	mov	r9, r1
 801fb76:	4650      	mov	r0, sl
 801fb78:	4659      	mov	r1, fp
 801fb7a:	f7e0 fd55 	bl	8000628 <__aeabi_dmul>
 801fb7e:	a33f      	add	r3, pc, #252	; (adr r3, 801fc7c <__kernel_sin+0x15c>)
 801fb80:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fb84:	f7e0 fb98 	bl	80002b8 <__aeabi_dsub>
 801fb88:	4652      	mov	r2, sl
 801fb8a:	465b      	mov	r3, fp
 801fb8c:	f7e0 fd4c 	bl	8000628 <__aeabi_dmul>
 801fb90:	a33c      	add	r3, pc, #240	; (adr r3, 801fc84 <__kernel_sin+0x164>)
 801fb92:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fb96:	f7e0 fb91 	bl	80002bc <__adddf3>
 801fb9a:	4652      	mov	r2, sl
 801fb9c:	465b      	mov	r3, fp
 801fb9e:	f7e0 fd43 	bl	8000628 <__aeabi_dmul>
 801fba2:	a33a      	add	r3, pc, #232	; (adr r3, 801fc8c <__kernel_sin+0x16c>)
 801fba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fba8:	f7e0 fb86 	bl	80002b8 <__aeabi_dsub>
 801fbac:	4652      	mov	r2, sl
 801fbae:	465b      	mov	r3, fp
 801fbb0:	f7e0 fd3a 	bl	8000628 <__aeabi_dmul>
 801fbb4:	a337      	add	r3, pc, #220	; (adr r3, 801fc94 <__kernel_sin+0x174>)
 801fbb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fbba:	f7e0 fb7f 	bl	80002bc <__adddf3>
 801fbbe:	9b01      	ldr	r3, [sp, #4]
 801fbc0:	4606      	mov	r6, r0
 801fbc2:	460f      	mov	r7, r1
 801fbc4:	b9eb      	cbnz	r3, 801fc02 <__kernel_sin+0xe2>
 801fbc6:	4602      	mov	r2, r0
 801fbc8:	460b      	mov	r3, r1
 801fbca:	4650      	mov	r0, sl
 801fbcc:	4659      	mov	r1, fp
 801fbce:	f7e0 fd2b 	bl	8000628 <__aeabi_dmul>
 801fbd2:	a325      	add	r3, pc, #148	; (adr r3, 801fc68 <__kernel_sin+0x148>)
 801fbd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fbd8:	f7e0 fb6e 	bl	80002b8 <__aeabi_dsub>
 801fbdc:	4642      	mov	r2, r8
 801fbde:	464b      	mov	r3, r9
 801fbe0:	f7e0 fd22 	bl	8000628 <__aeabi_dmul>
 801fbe4:	4602      	mov	r2, r0
 801fbe6:	460b      	mov	r3, r1
 801fbe8:	4620      	mov	r0, r4
 801fbea:	4629      	mov	r1, r5
 801fbec:	f7e0 fb66 	bl	80002bc <__adddf3>
 801fbf0:	4604      	mov	r4, r0
 801fbf2:	460d      	mov	r5, r1
 801fbf4:	ec45 4b10 	vmov	d0, r4, r5
 801fbf8:	b003      	add	sp, #12
 801fbfa:	ecbd 8b04 	vpop	{d8-d9}
 801fbfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fc02:	4b1b      	ldr	r3, [pc, #108]	; (801fc70 <__kernel_sin+0x150>)
 801fc04:	ec51 0b18 	vmov	r0, r1, d8
 801fc08:	2200      	movs	r2, #0
 801fc0a:	f7e0 fd0d 	bl	8000628 <__aeabi_dmul>
 801fc0e:	4632      	mov	r2, r6
 801fc10:	ec41 0b19 	vmov	d9, r0, r1
 801fc14:	463b      	mov	r3, r7
 801fc16:	4640      	mov	r0, r8
 801fc18:	4649      	mov	r1, r9
 801fc1a:	f7e0 fd05 	bl	8000628 <__aeabi_dmul>
 801fc1e:	4602      	mov	r2, r0
 801fc20:	460b      	mov	r3, r1
 801fc22:	ec51 0b19 	vmov	r0, r1, d9
 801fc26:	f7e0 fb47 	bl	80002b8 <__aeabi_dsub>
 801fc2a:	4652      	mov	r2, sl
 801fc2c:	465b      	mov	r3, fp
 801fc2e:	f7e0 fcfb 	bl	8000628 <__aeabi_dmul>
 801fc32:	ec53 2b18 	vmov	r2, r3, d8
 801fc36:	f7e0 fb3f 	bl	80002b8 <__aeabi_dsub>
 801fc3a:	a30b      	add	r3, pc, #44	; (adr r3, 801fc68 <__kernel_sin+0x148>)
 801fc3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fc40:	4606      	mov	r6, r0
 801fc42:	460f      	mov	r7, r1
 801fc44:	4640      	mov	r0, r8
 801fc46:	4649      	mov	r1, r9
 801fc48:	f7e0 fcee 	bl	8000628 <__aeabi_dmul>
 801fc4c:	4602      	mov	r2, r0
 801fc4e:	460b      	mov	r3, r1
 801fc50:	4630      	mov	r0, r6
 801fc52:	4639      	mov	r1, r7
 801fc54:	f7e0 fb32 	bl	80002bc <__adddf3>
 801fc58:	4602      	mov	r2, r0
 801fc5a:	460b      	mov	r3, r1
 801fc5c:	4620      	mov	r0, r4
 801fc5e:	4629      	mov	r1, r5
 801fc60:	f7e0 fb2a 	bl	80002b8 <__aeabi_dsub>
 801fc64:	e7c4      	b.n	801fbf0 <__kernel_sin+0xd0>
 801fc66:	bf00      	nop
 801fc68:	55555549 	.word	0x55555549
 801fc6c:	3fc55555 	.word	0x3fc55555
 801fc70:	3fe00000 	.word	0x3fe00000
 801fc74:	5acfd57c 	.word	0x5acfd57c
 801fc78:	3de5d93a 	.word	0x3de5d93a
 801fc7c:	8a2b9ceb 	.word	0x8a2b9ceb
 801fc80:	3e5ae5e6 	.word	0x3e5ae5e6
 801fc84:	57b1fe7d 	.word	0x57b1fe7d
 801fc88:	3ec71de3 	.word	0x3ec71de3
 801fc8c:	19c161d5 	.word	0x19c161d5
 801fc90:	3f2a01a0 	.word	0x3f2a01a0
 801fc94:	1110f8a6 	.word	0x1110f8a6
 801fc98:	3f811111 	.word	0x3f811111

0801fc9c <fabs>:
 801fc9c:	ec51 0b10 	vmov	r0, r1, d0
 801fca0:	ee10 2a10 	vmov	r2, s0
 801fca4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801fca8:	ec43 2b10 	vmov	d0, r2, r3
 801fcac:	4770      	bx	lr
	...

0801fcb0 <floor>:
 801fcb0:	ec51 0b10 	vmov	r0, r1, d0
 801fcb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fcb8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801fcbc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801fcc0:	2e13      	cmp	r6, #19
 801fcc2:	ee10 5a10 	vmov	r5, s0
 801fcc6:	ee10 8a10 	vmov	r8, s0
 801fcca:	460c      	mov	r4, r1
 801fccc:	dc32      	bgt.n	801fd34 <floor+0x84>
 801fcce:	2e00      	cmp	r6, #0
 801fcd0:	da14      	bge.n	801fcfc <floor+0x4c>
 801fcd2:	a333      	add	r3, pc, #204	; (adr r3, 801fda0 <floor+0xf0>)
 801fcd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fcd8:	f7e0 faf0 	bl	80002bc <__adddf3>
 801fcdc:	2200      	movs	r2, #0
 801fcde:	2300      	movs	r3, #0
 801fce0:	f7e0 ff32 	bl	8000b48 <__aeabi_dcmpgt>
 801fce4:	b138      	cbz	r0, 801fcf6 <floor+0x46>
 801fce6:	2c00      	cmp	r4, #0
 801fce8:	da57      	bge.n	801fd9a <floor+0xea>
 801fcea:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801fcee:	431d      	orrs	r5, r3
 801fcf0:	d001      	beq.n	801fcf6 <floor+0x46>
 801fcf2:	4c2d      	ldr	r4, [pc, #180]	; (801fda8 <floor+0xf8>)
 801fcf4:	2500      	movs	r5, #0
 801fcf6:	4621      	mov	r1, r4
 801fcf8:	4628      	mov	r0, r5
 801fcfa:	e025      	b.n	801fd48 <floor+0x98>
 801fcfc:	4f2b      	ldr	r7, [pc, #172]	; (801fdac <floor+0xfc>)
 801fcfe:	4137      	asrs	r7, r6
 801fd00:	ea01 0307 	and.w	r3, r1, r7
 801fd04:	4303      	orrs	r3, r0
 801fd06:	d01f      	beq.n	801fd48 <floor+0x98>
 801fd08:	a325      	add	r3, pc, #148	; (adr r3, 801fda0 <floor+0xf0>)
 801fd0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd0e:	f7e0 fad5 	bl	80002bc <__adddf3>
 801fd12:	2200      	movs	r2, #0
 801fd14:	2300      	movs	r3, #0
 801fd16:	f7e0 ff17 	bl	8000b48 <__aeabi_dcmpgt>
 801fd1a:	2800      	cmp	r0, #0
 801fd1c:	d0eb      	beq.n	801fcf6 <floor+0x46>
 801fd1e:	2c00      	cmp	r4, #0
 801fd20:	bfbe      	ittt	lt
 801fd22:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801fd26:	fa43 f606 	asrlt.w	r6, r3, r6
 801fd2a:	19a4      	addlt	r4, r4, r6
 801fd2c:	ea24 0407 	bic.w	r4, r4, r7
 801fd30:	2500      	movs	r5, #0
 801fd32:	e7e0      	b.n	801fcf6 <floor+0x46>
 801fd34:	2e33      	cmp	r6, #51	; 0x33
 801fd36:	dd0b      	ble.n	801fd50 <floor+0xa0>
 801fd38:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801fd3c:	d104      	bne.n	801fd48 <floor+0x98>
 801fd3e:	ee10 2a10 	vmov	r2, s0
 801fd42:	460b      	mov	r3, r1
 801fd44:	f7e0 faba 	bl	80002bc <__adddf3>
 801fd48:	ec41 0b10 	vmov	d0, r0, r1
 801fd4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fd50:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801fd54:	f04f 33ff 	mov.w	r3, #4294967295
 801fd58:	fa23 f707 	lsr.w	r7, r3, r7
 801fd5c:	4207      	tst	r7, r0
 801fd5e:	d0f3      	beq.n	801fd48 <floor+0x98>
 801fd60:	a30f      	add	r3, pc, #60	; (adr r3, 801fda0 <floor+0xf0>)
 801fd62:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd66:	f7e0 faa9 	bl	80002bc <__adddf3>
 801fd6a:	2200      	movs	r2, #0
 801fd6c:	2300      	movs	r3, #0
 801fd6e:	f7e0 feeb 	bl	8000b48 <__aeabi_dcmpgt>
 801fd72:	2800      	cmp	r0, #0
 801fd74:	d0bf      	beq.n	801fcf6 <floor+0x46>
 801fd76:	2c00      	cmp	r4, #0
 801fd78:	da02      	bge.n	801fd80 <floor+0xd0>
 801fd7a:	2e14      	cmp	r6, #20
 801fd7c:	d103      	bne.n	801fd86 <floor+0xd6>
 801fd7e:	3401      	adds	r4, #1
 801fd80:	ea25 0507 	bic.w	r5, r5, r7
 801fd84:	e7b7      	b.n	801fcf6 <floor+0x46>
 801fd86:	2301      	movs	r3, #1
 801fd88:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801fd8c:	fa03 f606 	lsl.w	r6, r3, r6
 801fd90:	4435      	add	r5, r6
 801fd92:	4545      	cmp	r5, r8
 801fd94:	bf38      	it	cc
 801fd96:	18e4      	addcc	r4, r4, r3
 801fd98:	e7f2      	b.n	801fd80 <floor+0xd0>
 801fd9a:	2500      	movs	r5, #0
 801fd9c:	462c      	mov	r4, r5
 801fd9e:	e7aa      	b.n	801fcf6 <floor+0x46>
 801fda0:	8800759c 	.word	0x8800759c
 801fda4:	7e37e43c 	.word	0x7e37e43c
 801fda8:	bff00000 	.word	0xbff00000
 801fdac:	000fffff 	.word	0x000fffff

0801fdb0 <scalbn>:
 801fdb0:	b570      	push	{r4, r5, r6, lr}
 801fdb2:	ec55 4b10 	vmov	r4, r5, d0
 801fdb6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801fdba:	4606      	mov	r6, r0
 801fdbc:	462b      	mov	r3, r5
 801fdbe:	b99a      	cbnz	r2, 801fde8 <scalbn+0x38>
 801fdc0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801fdc4:	4323      	orrs	r3, r4
 801fdc6:	d036      	beq.n	801fe36 <scalbn+0x86>
 801fdc8:	4b39      	ldr	r3, [pc, #228]	; (801feb0 <scalbn+0x100>)
 801fdca:	4629      	mov	r1, r5
 801fdcc:	ee10 0a10 	vmov	r0, s0
 801fdd0:	2200      	movs	r2, #0
 801fdd2:	f7e0 fc29 	bl	8000628 <__aeabi_dmul>
 801fdd6:	4b37      	ldr	r3, [pc, #220]	; (801feb4 <scalbn+0x104>)
 801fdd8:	429e      	cmp	r6, r3
 801fdda:	4604      	mov	r4, r0
 801fddc:	460d      	mov	r5, r1
 801fdde:	da10      	bge.n	801fe02 <scalbn+0x52>
 801fde0:	a32b      	add	r3, pc, #172	; (adr r3, 801fe90 <scalbn+0xe0>)
 801fde2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fde6:	e03a      	b.n	801fe5e <scalbn+0xae>
 801fde8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801fdec:	428a      	cmp	r2, r1
 801fdee:	d10c      	bne.n	801fe0a <scalbn+0x5a>
 801fdf0:	ee10 2a10 	vmov	r2, s0
 801fdf4:	4620      	mov	r0, r4
 801fdf6:	4629      	mov	r1, r5
 801fdf8:	f7e0 fa60 	bl	80002bc <__adddf3>
 801fdfc:	4604      	mov	r4, r0
 801fdfe:	460d      	mov	r5, r1
 801fe00:	e019      	b.n	801fe36 <scalbn+0x86>
 801fe02:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801fe06:	460b      	mov	r3, r1
 801fe08:	3a36      	subs	r2, #54	; 0x36
 801fe0a:	4432      	add	r2, r6
 801fe0c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801fe10:	428a      	cmp	r2, r1
 801fe12:	dd08      	ble.n	801fe26 <scalbn+0x76>
 801fe14:	2d00      	cmp	r5, #0
 801fe16:	a120      	add	r1, pc, #128	; (adr r1, 801fe98 <scalbn+0xe8>)
 801fe18:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fe1c:	da1c      	bge.n	801fe58 <scalbn+0xa8>
 801fe1e:	a120      	add	r1, pc, #128	; (adr r1, 801fea0 <scalbn+0xf0>)
 801fe20:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fe24:	e018      	b.n	801fe58 <scalbn+0xa8>
 801fe26:	2a00      	cmp	r2, #0
 801fe28:	dd08      	ble.n	801fe3c <scalbn+0x8c>
 801fe2a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801fe2e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801fe32:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801fe36:	ec45 4b10 	vmov	d0, r4, r5
 801fe3a:	bd70      	pop	{r4, r5, r6, pc}
 801fe3c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801fe40:	da19      	bge.n	801fe76 <scalbn+0xc6>
 801fe42:	f24c 3350 	movw	r3, #50000	; 0xc350
 801fe46:	429e      	cmp	r6, r3
 801fe48:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801fe4c:	dd0a      	ble.n	801fe64 <scalbn+0xb4>
 801fe4e:	a112      	add	r1, pc, #72	; (adr r1, 801fe98 <scalbn+0xe8>)
 801fe50:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fe54:	2b00      	cmp	r3, #0
 801fe56:	d1e2      	bne.n	801fe1e <scalbn+0x6e>
 801fe58:	a30f      	add	r3, pc, #60	; (adr r3, 801fe98 <scalbn+0xe8>)
 801fe5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fe5e:	f7e0 fbe3 	bl	8000628 <__aeabi_dmul>
 801fe62:	e7cb      	b.n	801fdfc <scalbn+0x4c>
 801fe64:	a10a      	add	r1, pc, #40	; (adr r1, 801fe90 <scalbn+0xe0>)
 801fe66:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fe6a:	2b00      	cmp	r3, #0
 801fe6c:	d0b8      	beq.n	801fde0 <scalbn+0x30>
 801fe6e:	a10e      	add	r1, pc, #56	; (adr r1, 801fea8 <scalbn+0xf8>)
 801fe70:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fe74:	e7b4      	b.n	801fde0 <scalbn+0x30>
 801fe76:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801fe7a:	3236      	adds	r2, #54	; 0x36
 801fe7c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801fe80:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801fe84:	4620      	mov	r0, r4
 801fe86:	4b0c      	ldr	r3, [pc, #48]	; (801feb8 <scalbn+0x108>)
 801fe88:	2200      	movs	r2, #0
 801fe8a:	e7e8      	b.n	801fe5e <scalbn+0xae>
 801fe8c:	f3af 8000 	nop.w
 801fe90:	c2f8f359 	.word	0xc2f8f359
 801fe94:	01a56e1f 	.word	0x01a56e1f
 801fe98:	8800759c 	.word	0x8800759c
 801fe9c:	7e37e43c 	.word	0x7e37e43c
 801fea0:	8800759c 	.word	0x8800759c
 801fea4:	fe37e43c 	.word	0xfe37e43c
 801fea8:	c2f8f359 	.word	0xc2f8f359
 801feac:	81a56e1f 	.word	0x81a56e1f
 801feb0:	43500000 	.word	0x43500000
 801feb4:	ffff3cb0 	.word	0xffff3cb0
 801feb8:	3c900000 	.word	0x3c900000

0801febc <_init>:
 801febc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801febe:	bf00      	nop
 801fec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fec2:	bc08      	pop	{r3}
 801fec4:	469e      	mov	lr, r3
 801fec6:	4770      	bx	lr

0801fec8 <_fini>:
 801fec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801feca:	bf00      	nop
 801fecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fece:	bc08      	pop	{r3}
 801fed0:	469e      	mov	lr, r3
 801fed2:	4770      	bx	lr
