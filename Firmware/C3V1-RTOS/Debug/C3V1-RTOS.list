
C3V1-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000181a4  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e98  08018368  08018368  00028368  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019200  08019200  00030278  2**0
                  CONTENTS
  4 .ARM          00000008  08019200  08019200  00029200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019208  08019208  00030278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019208  08019208  00029208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801920c  0801920c  0002920c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000278  20000000  08019210  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012398  20000278  08019488  00030278  2**2
                  ALLOC
 10 ._user_heap_stack 00000e00  20012610  08019488  00032610  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030278  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f2eb  00000000  00000000  000302a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006826  00000000  00000000  0005f593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002368  00000000  00000000  00065dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002080  00000000  00000000  00068128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000351a2  00000000  00000000  0006a1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e66c  00000000  00000000  0009f34a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012d62d  00000000  00000000  000cd9b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001fafe3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a8cc  00000000  00000000  001fb034  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000278 	.word	0x20000278
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0801834c 	.word	0x0801834c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000027c 	.word	0x2000027c
 80001fc:	0801834c 	.word	0x0801834c

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_ldivmod>:
 8000cb8:	b97b      	cbnz	r3, 8000cda <__aeabi_ldivmod+0x22>
 8000cba:	b972      	cbnz	r2, 8000cda <__aeabi_ldivmod+0x22>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bfbe      	ittt	lt
 8000cc0:	2000      	movlt	r0, #0
 8000cc2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cc6:	e006      	blt.n	8000cd6 <__aeabi_ldivmod+0x1e>
 8000cc8:	bf08      	it	eq
 8000cca:	2800      	cmpeq	r0, #0
 8000ccc:	bf1c      	itt	ne
 8000cce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cd2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd6:	f000 b9f5 	b.w	80010c4 <__aeabi_idiv0>
 8000cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	db09      	blt.n	8000cfa <__aeabi_ldivmod+0x42>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db1a      	blt.n	8000d20 <__aeabi_ldivmod+0x68>
 8000cea:	f000 f883 	bl	8000df4 <__udivmoddi4>
 8000cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf6:	b004      	add	sp, #16
 8000cf8:	4770      	bx	lr
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db1b      	blt.n	8000d3c <__aeabi_ldivmod+0x84>
 8000d04:	f000 f876 	bl	8000df4 <__udivmoddi4>
 8000d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d10:	b004      	add	sp, #16
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	4252      	negs	r2, r2
 8000d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f865 	bl	8000df4 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4240      	negs	r0, r0
 8000d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3a:	4770      	bx	lr
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d42:	f000 f857 	bl	8000df4 <__udivmoddi4>
 8000d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d4e:	b004      	add	sp, #16
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_uldivmod>:
 8000d58:	b953      	cbnz	r3, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5a:	b94a      	cbnz	r2, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5c:	2900      	cmp	r1, #0
 8000d5e:	bf08      	it	eq
 8000d60:	2800      	cmpeq	r0, #0
 8000d62:	bf1c      	itt	ne
 8000d64:	f04f 31ff 	movne.w	r1, #4294967295
 8000d68:	f04f 30ff 	movne.w	r0, #4294967295
 8000d6c:	f000 b9aa 	b.w	80010c4 <__aeabi_idiv0>
 8000d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d78:	f000 f83c 	bl	8000df4 <__udivmoddi4>
 8000d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d84:	b004      	add	sp, #16
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_d2lz>:
 8000d88:	b538      	push	{r3, r4, r5, lr}
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	4604      	mov	r4, r0
 8000d90:	460d      	mov	r5, r1
 8000d92:	f7ff febb 	bl	8000b0c <__aeabi_dcmplt>
 8000d96:	b928      	cbnz	r0, 8000da4 <__aeabi_d2lz+0x1c>
 8000d98:	4620      	mov	r0, r4
 8000d9a:	4629      	mov	r1, r5
 8000d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000da0:	f000 b80a 	b.w	8000db8 <__aeabi_d2ulz>
 8000da4:	4620      	mov	r0, r4
 8000da6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000daa:	f000 f805 	bl	8000db8 <__aeabi_d2ulz>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	bd38      	pop	{r3, r4, r5, pc}
 8000db6:	bf00      	nop

08000db8 <__aeabi_d2ulz>:
 8000db8:	b5d0      	push	{r4, r6, r7, lr}
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <__aeabi_d2ulz+0x34>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	4606      	mov	r6, r0
 8000dc0:	460f      	mov	r7, r1
 8000dc2:	f7ff fc31 	bl	8000628 <__aeabi_dmul>
 8000dc6:	f7ff ff07 	bl	8000bd8 <__aeabi_d2uiz>
 8000dca:	4604      	mov	r4, r0
 8000dcc:	f7ff fbb2 	bl	8000534 <__aeabi_ui2d>
 8000dd0:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <__aeabi_d2ulz+0x38>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f7ff fc28 	bl	8000628 <__aeabi_dmul>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4630      	mov	r0, r6
 8000dde:	4639      	mov	r1, r7
 8000de0:	f7ff fa6a 	bl	80002b8 <__aeabi_dsub>
 8000de4:	f7ff fef8 	bl	8000bd8 <__aeabi_d2uiz>
 8000de8:	4621      	mov	r1, r4
 8000dea:	bdd0      	pop	{r4, r6, r7, pc}
 8000dec:	3df00000 	.word	0x3df00000
 8000df0:	41f00000 	.word	0x41f00000

08000df4 <__udivmoddi4>:
 8000df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df8:	9d08      	ldr	r5, [sp, #32]
 8000dfa:	4604      	mov	r4, r0
 8000dfc:	468e      	mov	lr, r1
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d14d      	bne.n	8000e9e <__udivmoddi4+0xaa>
 8000e02:	428a      	cmp	r2, r1
 8000e04:	4694      	mov	ip, r2
 8000e06:	d969      	bls.n	8000edc <__udivmoddi4+0xe8>
 8000e08:	fab2 f282 	clz	r2, r2
 8000e0c:	b152      	cbz	r2, 8000e24 <__udivmoddi4+0x30>
 8000e0e:	fa01 f302 	lsl.w	r3, r1, r2
 8000e12:	f1c2 0120 	rsb	r1, r2, #32
 8000e16:	fa20 f101 	lsr.w	r1, r0, r1
 8000e1a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1e:	ea41 0e03 	orr.w	lr, r1, r3
 8000e22:	4094      	lsls	r4, r2
 8000e24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e28:	0c21      	lsrs	r1, r4, #16
 8000e2a:	fbbe f6f8 	udiv	r6, lr, r8
 8000e2e:	fa1f f78c 	uxth.w	r7, ip
 8000e32:	fb08 e316 	mls	r3, r8, r6, lr
 8000e36:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e3a:	fb06 f107 	mul.w	r1, r6, r7
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d90a      	bls.n	8000e58 <__udivmoddi4+0x64>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e4a:	f080 811f 	bcs.w	800108c <__udivmoddi4+0x298>
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	f240 811c 	bls.w	800108c <__udivmoddi4+0x298>
 8000e54:	3e02      	subs	r6, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1a5b      	subs	r3, r3, r1
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e60:	fb08 3310 	mls	r3, r8, r0, r3
 8000e64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e68:	fb00 f707 	mul.w	r7, r0, r7
 8000e6c:	42a7      	cmp	r7, r4
 8000e6e:	d90a      	bls.n	8000e86 <__udivmoddi4+0x92>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e78:	f080 810a 	bcs.w	8001090 <__udivmoddi4+0x29c>
 8000e7c:	42a7      	cmp	r7, r4
 8000e7e:	f240 8107 	bls.w	8001090 <__udivmoddi4+0x29c>
 8000e82:	4464      	add	r4, ip
 8000e84:	3802      	subs	r0, #2
 8000e86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e8a:	1be4      	subs	r4, r4, r7
 8000e8c:	2600      	movs	r6, #0
 8000e8e:	b11d      	cbz	r5, 8000e98 <__udivmoddi4+0xa4>
 8000e90:	40d4      	lsrs	r4, r2
 8000e92:	2300      	movs	r3, #0
 8000e94:	e9c5 4300 	strd	r4, r3, [r5]
 8000e98:	4631      	mov	r1, r6
 8000e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	d909      	bls.n	8000eb6 <__udivmoddi4+0xc2>
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	f000 80ef 	beq.w	8001086 <__udivmoddi4+0x292>
 8000ea8:	2600      	movs	r6, #0
 8000eaa:	e9c5 0100 	strd	r0, r1, [r5]
 8000eae:	4630      	mov	r0, r6
 8000eb0:	4631      	mov	r1, r6
 8000eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb6:	fab3 f683 	clz	r6, r3
 8000eba:	2e00      	cmp	r6, #0
 8000ebc:	d14a      	bne.n	8000f54 <__udivmoddi4+0x160>
 8000ebe:	428b      	cmp	r3, r1
 8000ec0:	d302      	bcc.n	8000ec8 <__udivmoddi4+0xd4>
 8000ec2:	4282      	cmp	r2, r0
 8000ec4:	f200 80f9 	bhi.w	80010ba <__udivmoddi4+0x2c6>
 8000ec8:	1a84      	subs	r4, r0, r2
 8000eca:	eb61 0303 	sbc.w	r3, r1, r3
 8000ece:	2001      	movs	r0, #1
 8000ed0:	469e      	mov	lr, r3
 8000ed2:	2d00      	cmp	r5, #0
 8000ed4:	d0e0      	beq.n	8000e98 <__udivmoddi4+0xa4>
 8000ed6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eda:	e7dd      	b.n	8000e98 <__udivmoddi4+0xa4>
 8000edc:	b902      	cbnz	r2, 8000ee0 <__udivmoddi4+0xec>
 8000ede:	deff      	udf	#255	; 0xff
 8000ee0:	fab2 f282 	clz	r2, r2
 8000ee4:	2a00      	cmp	r2, #0
 8000ee6:	f040 8092 	bne.w	800100e <__udivmoddi4+0x21a>
 8000eea:	eba1 010c 	sub.w	r1, r1, ip
 8000eee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef2:	fa1f fe8c 	uxth.w	lr, ip
 8000ef6:	2601      	movs	r6, #1
 8000ef8:	0c20      	lsrs	r0, r4, #16
 8000efa:	fbb1 f3f7 	udiv	r3, r1, r7
 8000efe:	fb07 1113 	mls	r1, r7, r3, r1
 8000f02:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f06:	fb0e f003 	mul.w	r0, lr, r3
 8000f0a:	4288      	cmp	r0, r1
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x12c>
 8000f0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f12:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f16:	d202      	bcs.n	8000f1e <__udivmoddi4+0x12a>
 8000f18:	4288      	cmp	r0, r1
 8000f1a:	f200 80cb 	bhi.w	80010b4 <__udivmoddi4+0x2c0>
 8000f1e:	4643      	mov	r3, r8
 8000f20:	1a09      	subs	r1, r1, r0
 8000f22:	b2a4      	uxth	r4, r4
 8000f24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f28:	fb07 1110 	mls	r1, r7, r0, r1
 8000f2c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f30:	fb0e fe00 	mul.w	lr, lr, r0
 8000f34:	45a6      	cmp	lr, r4
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x156>
 8000f38:	eb1c 0404 	adds.w	r4, ip, r4
 8000f3c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f40:	d202      	bcs.n	8000f48 <__udivmoddi4+0x154>
 8000f42:	45a6      	cmp	lr, r4
 8000f44:	f200 80bb 	bhi.w	80010be <__udivmoddi4+0x2ca>
 8000f48:	4608      	mov	r0, r1
 8000f4a:	eba4 040e 	sub.w	r4, r4, lr
 8000f4e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f52:	e79c      	b.n	8000e8e <__udivmoddi4+0x9a>
 8000f54:	f1c6 0720 	rsb	r7, r6, #32
 8000f58:	40b3      	lsls	r3, r6
 8000f5a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f5e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f62:	fa20 f407 	lsr.w	r4, r0, r7
 8000f66:	fa01 f306 	lsl.w	r3, r1, r6
 8000f6a:	431c      	orrs	r4, r3
 8000f6c:	40f9      	lsrs	r1, r7
 8000f6e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f72:	fa00 f306 	lsl.w	r3, r0, r6
 8000f76:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f7a:	0c20      	lsrs	r0, r4, #16
 8000f7c:	fa1f fe8c 	uxth.w	lr, ip
 8000f80:	fb09 1118 	mls	r1, r9, r8, r1
 8000f84:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f88:	fb08 f00e 	mul.w	r0, r8, lr
 8000f8c:	4288      	cmp	r0, r1
 8000f8e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f92:	d90b      	bls.n	8000fac <__udivmoddi4+0x1b8>
 8000f94:	eb1c 0101 	adds.w	r1, ip, r1
 8000f98:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f9c:	f080 8088 	bcs.w	80010b0 <__udivmoddi4+0x2bc>
 8000fa0:	4288      	cmp	r0, r1
 8000fa2:	f240 8085 	bls.w	80010b0 <__udivmoddi4+0x2bc>
 8000fa6:	f1a8 0802 	sub.w	r8, r8, #2
 8000faa:	4461      	add	r1, ip
 8000fac:	1a09      	subs	r1, r1, r0
 8000fae:	b2a4      	uxth	r4, r4
 8000fb0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000fb4:	fb09 1110 	mls	r1, r9, r0, r1
 8000fb8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fbc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fc0:	458e      	cmp	lr, r1
 8000fc2:	d908      	bls.n	8000fd6 <__udivmoddi4+0x1e2>
 8000fc4:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fcc:	d26c      	bcs.n	80010a8 <__udivmoddi4+0x2b4>
 8000fce:	458e      	cmp	lr, r1
 8000fd0:	d96a      	bls.n	80010a8 <__udivmoddi4+0x2b4>
 8000fd2:	3802      	subs	r0, #2
 8000fd4:	4461      	add	r1, ip
 8000fd6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fda:	fba0 9402 	umull	r9, r4, r0, r2
 8000fde:	eba1 010e 	sub.w	r1, r1, lr
 8000fe2:	42a1      	cmp	r1, r4
 8000fe4:	46c8      	mov	r8, r9
 8000fe6:	46a6      	mov	lr, r4
 8000fe8:	d356      	bcc.n	8001098 <__udivmoddi4+0x2a4>
 8000fea:	d053      	beq.n	8001094 <__udivmoddi4+0x2a0>
 8000fec:	b15d      	cbz	r5, 8001006 <__udivmoddi4+0x212>
 8000fee:	ebb3 0208 	subs.w	r2, r3, r8
 8000ff2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ff6:	fa01 f707 	lsl.w	r7, r1, r7
 8000ffa:	fa22 f306 	lsr.w	r3, r2, r6
 8000ffe:	40f1      	lsrs	r1, r6
 8001000:	431f      	orrs	r7, r3
 8001002:	e9c5 7100 	strd	r7, r1, [r5]
 8001006:	2600      	movs	r6, #0
 8001008:	4631      	mov	r1, r6
 800100a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800100e:	f1c2 0320 	rsb	r3, r2, #32
 8001012:	40d8      	lsrs	r0, r3
 8001014:	fa0c fc02 	lsl.w	ip, ip, r2
 8001018:	fa21 f303 	lsr.w	r3, r1, r3
 800101c:	4091      	lsls	r1, r2
 800101e:	4301      	orrs	r1, r0
 8001020:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001024:	fa1f fe8c 	uxth.w	lr, ip
 8001028:	fbb3 f0f7 	udiv	r0, r3, r7
 800102c:	fb07 3610 	mls	r6, r7, r0, r3
 8001030:	0c0b      	lsrs	r3, r1, #16
 8001032:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001036:	fb00 f60e 	mul.w	r6, r0, lr
 800103a:	429e      	cmp	r6, r3
 800103c:	fa04 f402 	lsl.w	r4, r4, r2
 8001040:	d908      	bls.n	8001054 <__udivmoddi4+0x260>
 8001042:	eb1c 0303 	adds.w	r3, ip, r3
 8001046:	f100 38ff 	add.w	r8, r0, #4294967295
 800104a:	d22f      	bcs.n	80010ac <__udivmoddi4+0x2b8>
 800104c:	429e      	cmp	r6, r3
 800104e:	d92d      	bls.n	80010ac <__udivmoddi4+0x2b8>
 8001050:	3802      	subs	r0, #2
 8001052:	4463      	add	r3, ip
 8001054:	1b9b      	subs	r3, r3, r6
 8001056:	b289      	uxth	r1, r1
 8001058:	fbb3 f6f7 	udiv	r6, r3, r7
 800105c:	fb07 3316 	mls	r3, r7, r6, r3
 8001060:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001064:	fb06 f30e 	mul.w	r3, r6, lr
 8001068:	428b      	cmp	r3, r1
 800106a:	d908      	bls.n	800107e <__udivmoddi4+0x28a>
 800106c:	eb1c 0101 	adds.w	r1, ip, r1
 8001070:	f106 38ff 	add.w	r8, r6, #4294967295
 8001074:	d216      	bcs.n	80010a4 <__udivmoddi4+0x2b0>
 8001076:	428b      	cmp	r3, r1
 8001078:	d914      	bls.n	80010a4 <__udivmoddi4+0x2b0>
 800107a:	3e02      	subs	r6, #2
 800107c:	4461      	add	r1, ip
 800107e:	1ac9      	subs	r1, r1, r3
 8001080:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001084:	e738      	b.n	8000ef8 <__udivmoddi4+0x104>
 8001086:	462e      	mov	r6, r5
 8001088:	4628      	mov	r0, r5
 800108a:	e705      	b.n	8000e98 <__udivmoddi4+0xa4>
 800108c:	4606      	mov	r6, r0
 800108e:	e6e3      	b.n	8000e58 <__udivmoddi4+0x64>
 8001090:	4618      	mov	r0, r3
 8001092:	e6f8      	b.n	8000e86 <__udivmoddi4+0x92>
 8001094:	454b      	cmp	r3, r9
 8001096:	d2a9      	bcs.n	8000fec <__udivmoddi4+0x1f8>
 8001098:	ebb9 0802 	subs.w	r8, r9, r2
 800109c:	eb64 0e0c 	sbc.w	lr, r4, ip
 80010a0:	3801      	subs	r0, #1
 80010a2:	e7a3      	b.n	8000fec <__udivmoddi4+0x1f8>
 80010a4:	4646      	mov	r6, r8
 80010a6:	e7ea      	b.n	800107e <__udivmoddi4+0x28a>
 80010a8:	4620      	mov	r0, r4
 80010aa:	e794      	b.n	8000fd6 <__udivmoddi4+0x1e2>
 80010ac:	4640      	mov	r0, r8
 80010ae:	e7d1      	b.n	8001054 <__udivmoddi4+0x260>
 80010b0:	46d0      	mov	r8, sl
 80010b2:	e77b      	b.n	8000fac <__udivmoddi4+0x1b8>
 80010b4:	3b02      	subs	r3, #2
 80010b6:	4461      	add	r1, ip
 80010b8:	e732      	b.n	8000f20 <__udivmoddi4+0x12c>
 80010ba:	4630      	mov	r0, r6
 80010bc:	e709      	b.n	8000ed2 <__udivmoddi4+0xde>
 80010be:	4464      	add	r4, ip
 80010c0:	3802      	subs	r0, #2
 80010c2:	e742      	b.n	8000f4a <__udivmoddi4+0x156>

080010c4 <__aeabi_idiv0>:
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop

080010c8 <GFX_DrawPixelScreen>:

#if USING_STRINGS == 1
const uint8_t *font;
uint8_t size = 1;
static void GFX_DrawPixelScreen(uint16_t x, uint16_t y, uint8_t color, Screen_TypeDef Screen)
{
 80010c8:	b590      	push	{r4, r7, lr}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4604      	mov	r4, r0
 80010d0:	4608      	mov	r0, r1
 80010d2:	4611      	mov	r1, r2
 80010d4:	461a      	mov	r2, r3
 80010d6:	4623      	mov	r3, r4
 80010d8:	80fb      	strh	r3, [r7, #6]
 80010da:	4603      	mov	r3, r0
 80010dc:	80bb      	strh	r3, [r7, #4]
 80010de:	460b      	mov	r3, r1
 80010e0:	70fb      	strb	r3, [r7, #3]
 80010e2:	4613      	mov	r3, r2
 80010e4:	70bb      	strb	r3, [r7, #2]
   if(Screen == OLED)
 80010e6:	78bb      	ldrb	r3, [r7, #2]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d108      	bne.n	80010fe <GFX_DrawPixelScreen+0x36>
   {
      GFX_DrawPixelOled(x, y, color);
 80010ec:	88fb      	ldrh	r3, [r7, #6]
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	88ba      	ldrh	r2, [r7, #4]
 80010f2:	b2d1      	uxtb	r1, r2
 80010f4:	78fa      	ldrb	r2, [r7, #3]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f005 ff9c 	bl	8007034 <ssd1306_set_pixel>
   }
   else if(Screen == E_PAPIER)
   {
      GFX_DrawPixelEpapier(x, y, color);
   }
}
 80010fc:	e008      	b.n	8001110 <GFX_DrawPixelScreen+0x48>
   else if(Screen == E_PAPIER)
 80010fe:	78bb      	ldrb	r3, [r7, #2]
 8001100:	2b01      	cmp	r3, #1
 8001102:	d105      	bne.n	8001110 <GFX_DrawPixelScreen+0x48>
      GFX_DrawPixelEpapier(x, y, color);
 8001104:	78fa      	ldrb	r2, [r7, #3]
 8001106:	88b9      	ldrh	r1, [r7, #4]
 8001108:	88fb      	ldrh	r3, [r7, #6]
 800110a:	4618      	mov	r0, r3
 800110c:	f001 fd1c 	bl	8002b48 <e_papier_set_pixel>
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	bd90      	pop	{r4, r7, pc}

08001118 <GFX_SetFont>:
void GFX_SetFont(const uint8_t *font_t)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
   font = font_t;
 8001120:	4a04      	ldr	r2, [pc, #16]	; (8001134 <GFX_SetFont+0x1c>)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6013      	str	r3, [r2, #0]
}
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	20000294 	.word	0x20000294

08001138 <GFX_DrawChar>:
{
   return size;
}

void GFX_DrawChar(int x, int y, char chr, uint8_t color, uint8_t background, Screen_TypeDef Screen)
{
 8001138:	b590      	push	{r4, r7, lr}
 800113a:	b089      	sub	sp, #36	; 0x24
 800113c:	af02      	add	r7, sp, #8
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	4611      	mov	r1, r2
 8001144:	461a      	mov	r2, r3
 8001146:	460b      	mov	r3, r1
 8001148:	71fb      	strb	r3, [r7, #7]
 800114a:	4613      	mov	r3, r2
 800114c:	71bb      	strb	r3, [r7, #6]
   if(chr > 0x7E)
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	2b7e      	cmp	r3, #126	; 0x7e
 8001152:	f200 80a7 	bhi.w	80012a4 <GFX_DrawChar+0x16c>
      return; // chr > '~'

   for(uint8_t i = 0; i < font[1]; i++) // Each column (Width)
 8001156:	2300      	movs	r3, #0
 8001158:	75fb      	strb	r3, [r7, #23]
 800115a:	e09a      	b.n	8001292 <GFX_DrawChar+0x15a>
   {
      uint8_t line = (uint8_t)font[(chr - 0x20) * font[1] + i + 2]; // Takie this line, (chr-0x20) = move 20 chars back,
 800115c:	4b53      	ldr	r3, [pc, #332]	; (80012ac <GFX_DrawChar+0x174>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	3b20      	subs	r3, #32
 8001164:	4951      	ldr	r1, [pc, #324]	; (80012ac <GFX_DrawChar+0x174>)
 8001166:	6809      	ldr	r1, [r1, #0]
 8001168:	3101      	adds	r1, #1
 800116a:	7809      	ldrb	r1, [r1, #0]
 800116c:	fb03 f101 	mul.w	r1, r3, r1
 8001170:	7dfb      	ldrb	r3, [r7, #23]
 8001172:	440b      	add	r3, r1
 8001174:	3302      	adds	r3, #2
 8001176:	4413      	add	r3, r2
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	75bb      	strb	r3, [r7, #22]

      for(int8_t j = 0; j < font[0]; j++, line >>= 1) // For each pixel in column
 800117c:	2300      	movs	r3, #0
 800117e:	757b      	strb	r3, [r7, #21]
 8001180:	e07c      	b.n	800127c <GFX_DrawChar+0x144>
      {
         if(line & 1) // Check last pixel in line
 8001182:	7dbb      	ldrb	r3, [r7, #22]
 8001184:	f003 0301 	and.w	r3, r3, #1
 8001188:	2b00      	cmp	r3, #0
 800118a:	d034      	beq.n	80011f6 <GFX_DrawChar+0xbe>
         {
            if(size == 1)
 800118c:	4b48      	ldr	r3, [pc, #288]	; (80012b0 <GFX_DrawChar+0x178>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d112      	bne.n	80011ba <GFX_DrawChar+0x82>
               GFX_DrawPixelScreen(x + i, y + j, color, Screen); // Draw this pixel
 8001194:	7dfb      	ldrb	r3, [r7, #23]
 8001196:	b29a      	uxth	r2, r3
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	b29b      	uxth	r3, r3
 800119c:	4413      	add	r3, r2
 800119e:	b298      	uxth	r0, r3
 80011a0:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	4413      	add	r3, r2
 80011ac:	b299      	uxth	r1, r3
 80011ae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80011b2:	79ba      	ldrb	r2, [r7, #6]
 80011b4:	f7ff ff88 	bl	80010c8 <GFX_DrawPixelScreen>
 80011b8:	e057      	b.n	800126a <GFX_DrawChar+0x132>
            else
               GFX_DrawFillRectangle(x + i * size, y + j * size, size, size, color, Screen); // Or bigger pixel
 80011ba:	7dfb      	ldrb	r3, [r7, #23]
 80011bc:	4a3c      	ldr	r2, [pc, #240]	; (80012b0 <GFX_DrawChar+0x178>)
 80011be:	7812      	ldrb	r2, [r2, #0]
 80011c0:	fb03 f202 	mul.w	r2, r3, r2
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	18d0      	adds	r0, r2, r3
 80011c8:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80011cc:	4a38      	ldr	r2, [pc, #224]	; (80012b0 <GFX_DrawChar+0x178>)
 80011ce:	7812      	ldrb	r2, [r2, #0]
 80011d0:	fb03 f202 	mul.w	r2, r3, r2
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	18d1      	adds	r1, r2, r3
 80011d8:	4b35      	ldr	r3, [pc, #212]	; (80012b0 <GFX_DrawChar+0x178>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	b29a      	uxth	r2, r3
 80011de:	4b34      	ldr	r3, [pc, #208]	; (80012b0 <GFX_DrawChar+0x178>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	b29c      	uxth	r4, r3
 80011e4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80011e8:	9301      	str	r3, [sp, #4]
 80011ea:	79bb      	ldrb	r3, [r7, #6]
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	4623      	mov	r3, r4
 80011f0:	f000 f968 	bl	80014c4 <GFX_DrawFillRectangle>
 80011f4:	e039      	b.n	800126a <GFX_DrawChar+0x132>
         }
         else if(background == 0)
 80011f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d135      	bne.n	800126a <GFX_DrawChar+0x132>
         {
            if(size == 1)
 80011fe:	4b2c      	ldr	r3, [pc, #176]	; (80012b0 <GFX_DrawChar+0x178>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d113      	bne.n	800122e <GFX_DrawChar+0xf6>
               GFX_DrawPixelScreen(x + i, y + j, background, Screen); // Draw black BG
 8001206:	7dfb      	ldrb	r3, [r7, #23]
 8001208:	b29a      	uxth	r2, r3
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	b29b      	uxth	r3, r3
 800120e:	4413      	add	r3, r2
 8001210:	b298      	uxth	r0, r3
 8001212:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001216:	b29a      	uxth	r2, r3
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	b29b      	uxth	r3, r3
 800121c:	4413      	add	r3, r2
 800121e:	b299      	uxth	r1, r3
 8001220:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001224:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001228:	f7ff ff4e 	bl	80010c8 <GFX_DrawPixelScreen>
 800122c:	e01d      	b.n	800126a <GFX_DrawChar+0x132>
            else
               GFX_DrawFillRectangle(x + i * size, y + j * size, size, size, background, Screen); // Or bigger
 800122e:	7dfb      	ldrb	r3, [r7, #23]
 8001230:	4a1f      	ldr	r2, [pc, #124]	; (80012b0 <GFX_DrawChar+0x178>)
 8001232:	7812      	ldrb	r2, [r2, #0]
 8001234:	fb03 f202 	mul.w	r2, r3, r2
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	18d0      	adds	r0, r2, r3
 800123c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001240:	4a1b      	ldr	r2, [pc, #108]	; (80012b0 <GFX_DrawChar+0x178>)
 8001242:	7812      	ldrb	r2, [r2, #0]
 8001244:	fb03 f202 	mul.w	r2, r3, r2
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	18d1      	adds	r1, r2, r3
 800124c:	4b18      	ldr	r3, [pc, #96]	; (80012b0 <GFX_DrawChar+0x178>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	b29a      	uxth	r2, r3
 8001252:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <GFX_DrawChar+0x178>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	b29c      	uxth	r4, r3
 8001258:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800125c:	9301      	str	r3, [sp, #4]
 800125e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	4623      	mov	r3, r4
 8001266:	f000 f92d 	bl	80014c4 <GFX_DrawFillRectangle>
      for(int8_t j = 0; j < font[0]; j++, line >>= 1) // For each pixel in column
 800126a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800126e:	b2db      	uxtb	r3, r3
 8001270:	3301      	adds	r3, #1
 8001272:	b2db      	uxtb	r3, r3
 8001274:	757b      	strb	r3, [r7, #21]
 8001276:	7dbb      	ldrb	r3, [r7, #22]
 8001278:	085b      	lsrs	r3, r3, #1
 800127a:	75bb      	strb	r3, [r7, #22]
 800127c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001280:	4a0a      	ldr	r2, [pc, #40]	; (80012ac <GFX_DrawChar+0x174>)
 8001282:	6812      	ldr	r2, [r2, #0]
 8001284:	7812      	ldrb	r2, [r2, #0]
 8001286:	4293      	cmp	r3, r2
 8001288:	f6ff af7b 	blt.w	8001182 <GFX_DrawChar+0x4a>
   for(uint8_t i = 0; i < font[1]; i++) // Each column (Width)
 800128c:	7dfb      	ldrb	r3, [r7, #23]
 800128e:	3301      	adds	r3, #1
 8001290:	75fb      	strb	r3, [r7, #23]
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <GFX_DrawChar+0x174>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	3301      	adds	r3, #1
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	7dfa      	ldrb	r2, [r7, #23]
 800129c:	429a      	cmp	r2, r3
 800129e:	f4ff af5d 	bcc.w	800115c <GFX_DrawChar+0x24>
 80012a2:	e000      	b.n	80012a6 <GFX_DrawChar+0x16e>
      return; // chr > '~'
 80012a4:	bf00      	nop
         }
      }
   }
}
 80012a6:	371c      	adds	r7, #28
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd90      	pop	{r4, r7, pc}
 80012ac:	20000294 	.word	0x20000294
 80012b0:	20000000 	.word	0x20000000

080012b4 <GFX_DrawString>:

void GFX_DrawString(int x, int y, char *str, uint8_t color, uint8_t background, Screen_TypeDef Screen)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b088      	sub	sp, #32
 80012b8:	af02      	add	r7, sp, #8
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
 80012c0:	70fb      	strb	r3, [r7, #3]
   int x_tmp = x;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	617b      	str	r3, [r7, #20]

   char znak;
   znak = *str;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	74fb      	strb	r3, [r7, #19]

   while(*str++)
 80012cc:	e040      	b.n	8001350 <GFX_DrawString+0x9c>
   {
      GFX_DrawChar(x_tmp, y, znak, color, background, Screen); // Draw current char
 80012ce:	78f9      	ldrb	r1, [r7, #3]
 80012d0:	7cfa      	ldrb	r2, [r7, #19]
 80012d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80012d6:	9301      	str	r3, [sp, #4]
 80012d8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012dc:	9300      	str	r3, [sp, #0]
 80012de:	460b      	mov	r3, r1
 80012e0:	68b9      	ldr	r1, [r7, #8]
 80012e2:	6978      	ldr	r0, [r7, #20]
 80012e4:	f7ff ff28 	bl	8001138 <GFX_DrawChar>

      x_tmp += ((uint8_t)font[1] * size) + 1; // Move X drawing pointer do char width + 1 (space)
 80012e8:	4b1f      	ldr	r3, [pc, #124]	; (8001368 <GFX_DrawString+0xb4>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	3301      	adds	r3, #1
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	461a      	mov	r2, r3
 80012f2:	4b1e      	ldr	r3, [pc, #120]	; (800136c <GFX_DrawString+0xb8>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	fb02 f303 	mul.w	r3, r2, r3
 80012fa:	3301      	adds	r3, #1
 80012fc:	697a      	ldr	r2, [r7, #20]
 80012fe:	4413      	add	r3, r2
 8001300:	617b      	str	r3, [r7, #20]

      if(background == 0) // Draw black space if needed
 8001302:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d11f      	bne.n	800134a <GFX_DrawString+0x96>
      {
         for(uint8_t i = 0; i < (font[0] * size); i++)
 800130a:	2300      	movs	r3, #0
 800130c:	74bb      	strb	r3, [r7, #18]
 800130e:	e011      	b.n	8001334 <GFX_DrawString+0x80>
         {
            GFX_DrawPixelScreen(x_tmp - 1, y + i, PIXEL_BLACK, Screen);
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	b29b      	uxth	r3, r3
 8001314:	3b01      	subs	r3, #1
 8001316:	b298      	uxth	r0, r3
 8001318:	7cbb      	ldrb	r3, [r7, #18]
 800131a:	b29a      	uxth	r2, r3
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	b29b      	uxth	r3, r3
 8001320:	4413      	add	r3, r2
 8001322:	b299      	uxth	r1, r3
 8001324:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001328:	2200      	movs	r2, #0
 800132a:	f7ff fecd 	bl	80010c8 <GFX_DrawPixelScreen>
         for(uint8_t i = 0; i < (font[0] * size); i++)
 800132e:	7cbb      	ldrb	r3, [r7, #18]
 8001330:	3301      	adds	r3, #1
 8001332:	74bb      	strb	r3, [r7, #18]
 8001334:	7cba      	ldrb	r2, [r7, #18]
 8001336:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <GFX_DrawString+0xb4>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	4619      	mov	r1, r3
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <GFX_DrawString+0xb8>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	fb01 f303 	mul.w	r3, r1, r3
 8001346:	429a      	cmp	r2, r3
 8001348:	dbe2      	blt.n	8001310 <GFX_DrawString+0x5c>
         }
      }

      znak = *str; // Next char
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	74fb      	strb	r3, [r7, #19]
   while(*str++)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	1c5a      	adds	r2, r3, #1
 8001354:	607a      	str	r2, [r7, #4]
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1b8      	bne.n	80012ce <GFX_DrawString+0x1a>
   }
}
 800135c:	bf00      	nop
 800135e:	bf00      	nop
 8001360:	3718      	adds	r7, #24
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000294 	.word	0x20000294
 800136c:	20000000 	.word	0x20000000

08001370 <GFX_WriteLine>:
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, uint8_t color, Screen_TypeDef Screen)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08c      	sub	sp, #48	; 0x30
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
 800137c:	603b      	str	r3, [r7, #0]
   int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 800137e:	683a      	ldr	r2, [r7, #0]
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001388:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800138c:	6879      	ldr	r1, [r7, #4]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	1acb      	subs	r3, r1, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	bfb8      	it	lt
 8001396:	425b      	neglt	r3, r3
 8001398:	429a      	cmp	r2, r3
 800139a:	bfcc      	ite	gt
 800139c:	2301      	movgt	r3, #1
 800139e:	2300      	movle	r3, #0
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	857b      	strh	r3, [r7, #42]	; 0x2a

   if(steep)
 80013a4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d00b      	beq.n	80013c4 <GFX_WriteLine+0x54>
   {
      _swap_int(x_start, y_start);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b6:	60bb      	str	r3, [r7, #8]
      _swap_int(x_end, y_end);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	623b      	str	r3, [r7, #32]
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	6a3b      	ldr	r3, [r7, #32]
 80013c2:	603b      	str	r3, [r7, #0]
   }

   if(x_start > x_end)
 80013c4:	68fa      	ldr	r2, [r7, #12]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	dd0b      	ble.n	80013e4 <GFX_WriteLine+0x74>
   {
      _swap_int(x_start, x_end);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	61fb      	str	r3, [r7, #28]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	607b      	str	r3, [r7, #4]
      _swap_int(y_start, y_end);
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	61bb      	str	r3, [r7, #24]
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	60bb      	str	r3, [r7, #8]
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	603b      	str	r3, [r7, #0]
   }

   int16_t dx, dy;
   dx = x_end - x_start;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	b29a      	uxth	r2, r3
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	82fb      	strh	r3, [r7, #22]
   dy = abs(y_end - y_start);
 80013f2:	683a      	ldr	r2, [r7, #0]
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	bfb8      	it	lt
 80013fc:	425b      	neglt	r3, r3
 80013fe:	82bb      	strh	r3, [r7, #20]

   int16_t err = dx / 2;
 8001400:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001404:	0fda      	lsrs	r2, r3, #31
 8001406:	4413      	add	r3, r2
 8001408:	105b      	asrs	r3, r3, #1
 800140a:	85fb      	strh	r3, [r7, #46]	; 0x2e
   int16_t ystep;

   if(y_start < y_end)
 800140c:	68ba      	ldr	r2, [r7, #8]
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	429a      	cmp	r2, r3
 8001412:	da02      	bge.n	800141a <GFX_WriteLine+0xaa>
   {
      ystep = 1;
 8001414:	2301      	movs	r3, #1
 8001416:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001418:	e032      	b.n	8001480 <GFX_WriteLine+0x110>
   }
   else
   {
      ystep = -1;
 800141a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800141e:	85bb      	strh	r3, [r7, #44]	; 0x2c
   }

   for(; x_start <= x_end; x_start++)
 8001420:	e02e      	b.n	8001480 <GFX_WriteLine+0x110>
   {
      if(steep)
 8001422:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001426:	2b00      	cmp	r3, #0
 8001428:	d00a      	beq.n	8001440 <GFX_WriteLine+0xd0>
      {
         GFX_DrawPixelScreen(y_start, x_start, color, Screen);
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	b298      	uxth	r0, r3
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	b299      	uxth	r1, r3
 8001432:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001436:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800143a:	f7ff fe45 	bl	80010c8 <GFX_DrawPixelScreen>
 800143e:	e009      	b.n	8001454 <GFX_WriteLine+0xe4>
      }
      else
      {
         GFX_DrawPixelScreen(x_start, y_start, color, Screen);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	b298      	uxth	r0, r3
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	b299      	uxth	r1, r3
 8001448:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800144c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001450:	f7ff fe3a 	bl	80010c8 <GFX_DrawPixelScreen>
      }
      err -= dy;
 8001454:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001456:	8abb      	ldrh	r3, [r7, #20]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	b29b      	uxth	r3, r3
 800145c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      if(err < 0)
 800145e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001462:	2b00      	cmp	r3, #0
 8001464:	da09      	bge.n	800147a <GFX_WriteLine+0x10a>
      {
         y_start += ystep;
 8001466:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800146a:	68ba      	ldr	r2, [r7, #8]
 800146c:	4413      	add	r3, r2
 800146e:	60bb      	str	r3, [r7, #8]
         err += dx;
 8001470:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001472:	8afb      	ldrh	r3, [r7, #22]
 8001474:	4413      	add	r3, r2
 8001476:	b29b      	uxth	r3, r3
 8001478:	85fb      	strh	r3, [r7, #46]	; 0x2e
   for(; x_start <= x_end; x_start++)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	3301      	adds	r3, #1
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fa      	ldr	r2, [r7, #12]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	429a      	cmp	r2, r3
 8001486:	ddcc      	ble.n	8001422 <GFX_WriteLine+0xb2>
      }
   }
}
 8001488:	bf00      	nop
 800148a:	bf00      	nop
 800148c:	3730      	adds	r7, #48	; 0x30
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, uint8_t color, Screen_TypeDef Screen)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b086      	sub	sp, #24
 8001496:	af02      	add	r7, sp, #8
 8001498:	60f8      	str	r0, [r7, #12]
 800149a:	60b9      	str	r1, [r7, #8]
 800149c:	607a      	str	r2, [r7, #4]
 800149e:	70fb      	strb	r3, [r7, #3]
   GFX_WriteLine(x_start, y_start, x_start, y_start + h - 1, color, Screen);
 80014a0:	68ba      	ldr	r2, [r7, #8]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4413      	add	r3, r2
 80014a6:	1e5a      	subs	r2, r3, #1
 80014a8:	7e3b      	ldrb	r3, [r7, #24]
 80014aa:	9301      	str	r3, [sp, #4]
 80014ac:	78fb      	ldrb	r3, [r7, #3]
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	4613      	mov	r3, r2
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	68b9      	ldr	r1, [r7, #8]
 80014b6:	68f8      	ldr	r0, [r7, #12]
 80014b8:	f7ff ff5a 	bl	8001370 <GFX_WriteLine>
}
 80014bc:	bf00      	nop
 80014be:	3710      	adds	r7, #16
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <GFX_DrawFillRectangle>:
   GFX_DrawFastVLine(x + w - 1, y, h, color, Screen);
}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color, Screen_TypeDef Screen)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b088      	sub	sp, #32
 80014c8:	af02      	add	r7, sp, #8
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	4611      	mov	r1, r2
 80014d0:	461a      	mov	r2, r3
 80014d2:	460b      	mov	r3, r1
 80014d4:	80fb      	strh	r3, [r7, #6]
 80014d6:	4613      	mov	r3, r2
 80014d8:	80bb      	strh	r3, [r7, #4]
   for(int i = x; i < x + w; i++)
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	617b      	str	r3, [r7, #20]
 80014de:	e00d      	b.n	80014fc <GFX_DrawFillRectangle+0x38>
   {
      GFX_DrawFastVLine(i, y, h, color, Screen);
 80014e0:	88ba      	ldrh	r2, [r7, #4]
 80014e2:	f897 1020 	ldrb.w	r1, [r7, #32]
 80014e6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80014ea:	9300      	str	r3, [sp, #0]
 80014ec:	460b      	mov	r3, r1
 80014ee:	68b9      	ldr	r1, [r7, #8]
 80014f0:	6978      	ldr	r0, [r7, #20]
 80014f2:	f7ff ffce 	bl	8001492 <GFX_DrawFastVLine>
   for(int i = x; i < x + w; i++)
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	3301      	adds	r3, #1
 80014fa:	617b      	str	r3, [r7, #20]
 80014fc:	88fa      	ldrh	r2, [r7, #6]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	4413      	add	r3, r2
 8001502:	697a      	ldr	r2, [r7, #20]
 8001504:	429a      	cmp	r2, r3
 8001506:	dbeb      	blt.n	80014e0 <GFX_DrawFillRectangle+0x1c>
   }
}
 8001508:	bf00      	nop
 800150a:	bf00      	nop
 800150c:	3718      	adds	r7, #24
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <HC12_ExitCommandMode>:
void HC12_EnterCommandMode(void)
{
   HAL_GPIO_WritePin(HC12_SET_GPIO_Port, HC12_SET_Pin, 0);
}
void HC12_ExitCommandMode(void)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(HC12_SET_GPIO_Port, HC12_SET_Pin, 1);
 8001516:	2201      	movs	r2, #1
 8001518:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800151c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001520:	f007 f8cc 	bl	80086bc <HAL_GPIO_WritePin>
}
 8001524:	bf00      	nop
 8001526:	bd80      	pop	{r7, pc}

08001528 <HC12_TransmitData>:
void HC12_TransmitData(uint8_t *Data, uint32_t Length)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
   taskENTER_CRITICAL();
 8001532:	f010 febf 	bl	80122b4 <vPortEnterCritical>
   HAL_UART_Transmit(&huart1, Data, Length, 1000);
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	b29a      	uxth	r2, r3
 800153a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800153e:	6879      	ldr	r1, [r7, #4]
 8001540:	4804      	ldr	r0, [pc, #16]	; (8001554 <HC12_TransmitData+0x2c>)
 8001542:	f00b fccf 	bl	800cee4 <HAL_UART_Transmit>
   taskEXIT_CRITICAL();
 8001546:	f010 fee5 	bl	8012314 <vPortExitCritical>
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	200044ec 	.word	0x200044ec

08001558 <HC12_ReciveToIdleDMA>:
void HC12_ReciveToIdleDMA(uint8_t *Data, uint32_t Length)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
   HAL_UARTEx_ReceiveToIdle_DMA(&huart1, Data, Length);
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	b29b      	uxth	r3, r3
 8001566:	461a      	mov	r2, r3
 8001568:	6879      	ldr	r1, [r7, #4]
 800156a:	4803      	ldr	r0, [pc, #12]	; (8001578 <HC12_ReciveToIdleDMA+0x20>)
 800156c:	f00d f894 	bl	800e698 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8001570:	bf00      	nop
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	200044ec 	.word	0x200044ec

0800157c <HC12_Init>:
void HC12_Init(RFP_TypeDef *TempRfp, uint8_t *Buffer)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
   rfp      = TempRfp;
 8001586:	4a06      	ldr	r2, [pc, #24]	; (80015a0 <HC12_Init+0x24>)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6013      	str	r3, [r2, #0]
   HC12Data = Buffer;
 800158c:	4a05      	ldr	r2, [pc, #20]	; (80015a4 <HC12_Init+0x28>)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	6013      	str	r3, [r2, #0]
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	20000298 	.word	0x20000298
 80015a4:	2000029c 	.word	0x2000029c

080015a8 <MENU_ChangeState>:
                                                  { MENU_STATE_RUNNING, MENU_STATE_END, MENU_EVENT_END },
                                                  { MENU_EVENT_END, MENU_STATE_IDLE, MENU_EVENT_NOTHING } };
MenuFunctions_TypeDef StateFunction[]         = { { MENU_IdleFunction }, { MENU_ChoiseFunction }, { MENU_RunningFunction }, { MENU_EndFunction } };
Menu_TypeDef Menu                             = { 0 };
static void MENU_ChangeState(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
   for(int i = 0; i < TRANSITION_TABLE_SIZE; i++)
 80015ae:	2300      	movs	r3, #0
 80015b0:	607b      	str	r3, [r7, #4]
 80015b2:	e027      	b.n	8001604 <MENU_ChangeState+0x5c>
   {
      if(Menu.State == TransitionTable[i].Source && Menu.NewEvent == TransitionTable[i].Event)
 80015b4:	4b19      	ldr	r3, [pc, #100]	; (800161c <MENU_ChangeState+0x74>)
 80015b6:	7a19      	ldrb	r1, [r3, #8]
 80015b8:	4819      	ldr	r0, [pc, #100]	; (8001620 <MENU_ChangeState+0x78>)
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	4613      	mov	r3, r2
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	4413      	add	r3, r2
 80015c2:	4403      	add	r3, r0
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	4299      	cmp	r1, r3
 80015c8:	d119      	bne.n	80015fe <MENU_ChangeState+0x56>
 80015ca:	4b14      	ldr	r3, [pc, #80]	; (800161c <MENU_ChangeState+0x74>)
 80015cc:	7a59      	ldrb	r1, [r3, #9]
 80015ce:	4814      	ldr	r0, [pc, #80]	; (8001620 <MENU_ChangeState+0x78>)
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	4613      	mov	r3, r2
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	4413      	add	r3, r2
 80015d8:	4403      	add	r3, r0
 80015da:	3302      	adds	r3, #2
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	4299      	cmp	r1, r3
 80015e0:	d10d      	bne.n	80015fe <MENU_ChangeState+0x56>
      {
         Menu.State    = TransitionTable[i].Destination;
 80015e2:	490f      	ldr	r1, [pc, #60]	; (8001620 <MENU_ChangeState+0x78>)
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	4613      	mov	r3, r2
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	4413      	add	r3, r2
 80015ec:	440b      	add	r3, r1
 80015ee:	3301      	adds	r3, #1
 80015f0:	781a      	ldrb	r2, [r3, #0]
 80015f2:	4b0a      	ldr	r3, [pc, #40]	; (800161c <MENU_ChangeState+0x74>)
 80015f4:	721a      	strb	r2, [r3, #8]
         Menu.NewEvent = MENU_EVENT_NOTHING;
 80015f6:	4b09      	ldr	r3, [pc, #36]	; (800161c <MENU_ChangeState+0x74>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	725a      	strb	r2, [r3, #9]
         return;
 80015fc:	e008      	b.n	8001610 <MENU_ChangeState+0x68>
   for(int i = 0; i < TRANSITION_TABLE_SIZE; i++)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	3301      	adds	r3, #1
 8001602:	607b      	str	r3, [r7, #4]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2b04      	cmp	r3, #4
 8001608:	d9d4      	bls.n	80015b4 <MENU_ChangeState+0xc>
      }
   }
   Menu.NewEvent = MENU_EVENT_NOTHING;
 800160a:	4b04      	ldr	r3, [pc, #16]	; (800161c <MENU_ChangeState+0x74>)
 800160c:	2200      	movs	r2, #0
 800160e:	725a      	strb	r2, [r3, #9]
}
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	200002a0 	.word	0x200002a0
 8001620:	20000004 	.word	0x20000004

08001624 <MENU_Init>:
void MENU_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
   HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8001628:	213c      	movs	r1, #60	; 0x3c
 800162a:	4802      	ldr	r0, [pc, #8]	; (8001634 <MENU_Init+0x10>)
 800162c:	f00a fb81 	bl	800bd32 <HAL_TIM_Encoder_Start>
}
 8001630:	bf00      	nop
 8001632:	bd80      	pop	{r7, pc}
 8001634:	200044a0 	.word	0x200044a0

08001638 <MENU_Handler>:
void MENU_Handler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
   MENU_ChangeState();
 800163c:	f7ff ffb4 	bl	80015a8 <MENU_ChangeState>
   if(StateFunction[Menu.State].MenuFunction != NULL)
 8001640:	4b08      	ldr	r3, [pc, #32]	; (8001664 <MENU_Handler+0x2c>)
 8001642:	7a1b      	ldrb	r3, [r3, #8]
 8001644:	461a      	mov	r2, r3
 8001646:	4b08      	ldr	r3, [pc, #32]	; (8001668 <MENU_Handler+0x30>)
 8001648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d006      	beq.n	800165e <MENU_Handler+0x26>
   {
      StateFunction[Menu.State].MenuFunction();
 8001650:	4b04      	ldr	r3, [pc, #16]	; (8001664 <MENU_Handler+0x2c>)
 8001652:	7a1b      	ldrb	r3, [r3, #8]
 8001654:	461a      	mov	r2, r3
 8001656:	4b04      	ldr	r3, [pc, #16]	; (8001668 <MENU_Handler+0x30>)
 8001658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800165c:	4798      	blx	r3
   }
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	200002a0 	.word	0x200002a0
 8001668:	20000014 	.word	0x20000014

0800166c <MENU_IdleFunction>:
static void MENU_IdleFunction(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
   if(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8001670:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001674:	480e      	ldr	r0, [pc, #56]	; (80016b0 <MENU_IdleFunction+0x44>)
 8001676:	f007 f809 	bl	800868c <HAL_GPIO_ReadPin>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d115      	bne.n	80016ac <MENU_IdleFunction+0x40>
   {
      osMutexAcquire(MenuMutexHandle, osWaitForever);
 8001680:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <MENU_IdleFunction+0x48>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f04f 31ff 	mov.w	r1, #4294967295
 8001688:	4618      	mov	r0, r3
 800168a:	f00d fbeb 	bl	800ee64 <osMutexAcquire>
      Menu.NewEvent = MENU_EVENT_NEW;
 800168e:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <MENU_IdleFunction+0x4c>)
 8001690:	2201      	movs	r2, #1
 8001692:	725a      	strb	r2, [r3, #9]
      while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8001694:	e002      	b.n	800169c <MENU_IdleFunction+0x30>
      {
         osDelay(100);
 8001696:	2064      	movs	r0, #100	; 0x64
 8001698:	f00d f9c8 	bl	800ea2c <osDelay>
      while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 800169c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016a0:	4803      	ldr	r0, [pc, #12]	; (80016b0 <MENU_IdleFunction+0x44>)
 80016a2:	f006 fff3 	bl	800868c <HAL_GPIO_ReadPin>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d0f4      	beq.n	8001696 <MENU_IdleFunction+0x2a>
      }
   }
}
 80016ac:	bf00      	nop
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	48000400 	.word	0x48000400
 80016b4:	20003ddc 	.word	0x20003ddc
 80016b8:	200002a0 	.word	0x200002a0

080016bc <MENU_ChoiseFunction>:
static void MENU_ChoiseFunction(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b09c      	sub	sp, #112	; 0x70
 80016c0:	af02      	add	r7, sp, #8
   char Temp[100];
   switch((TIM5->CNT / 4) % MENU_CHOISE_CNT)
 80016c2:	4b76      	ldr	r3, [pc, #472]	; (800189c <MENU_ChoiseFunction+0x1e0>)
 80016c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c6:	0899      	lsrs	r1, r3, #2
 80016c8:	4b75      	ldr	r3, [pc, #468]	; (80018a0 <MENU_ChoiseFunction+0x1e4>)
 80016ca:	fba3 2301 	umull	r2, r3, r3, r1
 80016ce:	085b      	lsrs	r3, r3, #1
 80016d0:	461a      	mov	r2, r3
 80016d2:	0052      	lsls	r2, r2, #1
 80016d4:	441a      	add	r2, r3
 80016d6:	1a8b      	subs	r3, r1, r2
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d077      	beq.n	80017cc <MENU_ChoiseFunction+0x110>
 80016dc:	2b02      	cmp	r3, #2
 80016de:	f200 80ad 	bhi.w	800183c <MENU_ChoiseFunction+0x180>
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d002      	beq.n	80016ec <MENU_ChoiseFunction+0x30>
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d038      	beq.n	800175c <MENU_ChoiseFunction+0xa0>
         osMutexRelease(ScreensDcMutexHandle);
         break;
      }
      default:
      {
         break;
 80016ea:	e0a7      	b.n	800183c <MENU_ChoiseFunction+0x180>
         osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 80016ec:	4b6d      	ldr	r3, [pc, #436]	; (80018a4 <MENU_ChoiseFunction+0x1e8>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f04f 31ff 	mov.w	r1, #4294967295
 80016f4:	4618      	mov	r0, r3
 80016f6:	f00d fbb5 	bl	800ee64 <osMutexAcquire>
         osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 80016fa:	4b6b      	ldr	r3, [pc, #428]	; (80018a8 <MENU_ChoiseFunction+0x1ec>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f04f 31ff 	mov.w	r1, #4294967295
 8001702:	4618      	mov	r0, r3
 8001704:	f00d fbae 	bl	800ee64 <osMutexAcquire>
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8001708:	4b68      	ldr	r3, [pc, #416]	; (80018ac <MENU_ChoiseFunction+0x1f0>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f04f 31ff 	mov.w	r1, #4294967295
 8001710:	4618      	mov	r0, r3
 8001712:	f00d fba7 	bl	800ee64 <osMutexAcquire>
         ssd1306_clear();
 8001716:	f005 fd15 	bl	8007144 <ssd1306_clear>
         sprintf(Temp, "Ustaw godzine");
 800171a:	1d3b      	adds	r3, r7, #4
 800171c:	4964      	ldr	r1, [pc, #400]	; (80018b0 <MENU_ChoiseFunction+0x1f4>)
 800171e:	4618      	mov	r0, r3
 8001720:	f004 ff26 	bl	8006570 <sprintf_>
         GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8001724:	1d3a      	adds	r2, r7, #4
 8001726:	2300      	movs	r3, #0
 8001728:	9301      	str	r3, [sp, #4]
 800172a:	2300      	movs	r3, #0
 800172c:	9300      	str	r3, [sp, #0]
 800172e:	2301      	movs	r3, #1
 8001730:	2100      	movs	r1, #0
 8001732:	2000      	movs	r0, #0
 8001734:	f7ff fdbe 	bl	80012b4 <GFX_DrawString>
         ssd1306_display();
 8001738:	f005 fcd8 	bl	80070ec <ssd1306_display>
         osMutexRelease(SPI1MutexHandle);
 800173c:	4b5b      	ldr	r3, [pc, #364]	; (80018ac <MENU_ChoiseFunction+0x1f0>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4618      	mov	r0, r3
 8001742:	f00d fbda 	bl	800eefa <osMutexRelease>
         osMutexRelease(SSD1306MutexHandle);
 8001746:	4b58      	ldr	r3, [pc, #352]	; (80018a8 <MENU_ChoiseFunction+0x1ec>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4618      	mov	r0, r3
 800174c:	f00d fbd5 	bl	800eefa <osMutexRelease>
         osMutexRelease(ScreensDcMutexHandle);
 8001750:	4b54      	ldr	r3, [pc, #336]	; (80018a4 <MENU_ChoiseFunction+0x1e8>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4618      	mov	r0, r3
 8001756:	f00d fbd0 	bl	800eefa <osMutexRelease>
         break;
 800175a:	e070      	b.n	800183e <MENU_ChoiseFunction+0x182>
         osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 800175c:	4b51      	ldr	r3, [pc, #324]	; (80018a4 <MENU_ChoiseFunction+0x1e8>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f04f 31ff 	mov.w	r1, #4294967295
 8001764:	4618      	mov	r0, r3
 8001766:	f00d fb7d 	bl	800ee64 <osMutexAcquire>
         osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 800176a:	4b4f      	ldr	r3, [pc, #316]	; (80018a8 <MENU_ChoiseFunction+0x1ec>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f04f 31ff 	mov.w	r1, #4294967295
 8001772:	4618      	mov	r0, r3
 8001774:	f00d fb76 	bl	800ee64 <osMutexAcquire>
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8001778:	4b4c      	ldr	r3, [pc, #304]	; (80018ac <MENU_ChoiseFunction+0x1f0>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f04f 31ff 	mov.w	r1, #4294967295
 8001780:	4618      	mov	r0, r3
 8001782:	f00d fb6f 	bl	800ee64 <osMutexAcquire>
         ssd1306_clear();
 8001786:	f005 fcdd 	bl	8007144 <ssd1306_clear>
         sprintf(Temp, "Ustaw date");
 800178a:	1d3b      	adds	r3, r7, #4
 800178c:	4949      	ldr	r1, [pc, #292]	; (80018b4 <MENU_ChoiseFunction+0x1f8>)
 800178e:	4618      	mov	r0, r3
 8001790:	f004 feee 	bl	8006570 <sprintf_>
         GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8001794:	1d3a      	adds	r2, r7, #4
 8001796:	2300      	movs	r3, #0
 8001798:	9301      	str	r3, [sp, #4]
 800179a:	2300      	movs	r3, #0
 800179c:	9300      	str	r3, [sp, #0]
 800179e:	2301      	movs	r3, #1
 80017a0:	2100      	movs	r1, #0
 80017a2:	2000      	movs	r0, #0
 80017a4:	f7ff fd86 	bl	80012b4 <GFX_DrawString>
         ssd1306_display();
 80017a8:	f005 fca0 	bl	80070ec <ssd1306_display>
         osMutexRelease(SPI1MutexHandle);
 80017ac:	4b3f      	ldr	r3, [pc, #252]	; (80018ac <MENU_ChoiseFunction+0x1f0>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f00d fba2 	bl	800eefa <osMutexRelease>
         osMutexRelease(SSD1306MutexHandle);
 80017b6:	4b3c      	ldr	r3, [pc, #240]	; (80018a8 <MENU_ChoiseFunction+0x1ec>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f00d fb9d 	bl	800eefa <osMutexRelease>
         osMutexRelease(ScreensDcMutexHandle);
 80017c0:	4b38      	ldr	r3, [pc, #224]	; (80018a4 <MENU_ChoiseFunction+0x1e8>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f00d fb98 	bl	800eefa <osMutexRelease>
         break;
 80017ca:	e038      	b.n	800183e <MENU_ChoiseFunction+0x182>
         osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 80017cc:	4b35      	ldr	r3, [pc, #212]	; (80018a4 <MENU_ChoiseFunction+0x1e8>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f04f 31ff 	mov.w	r1, #4294967295
 80017d4:	4618      	mov	r0, r3
 80017d6:	f00d fb45 	bl	800ee64 <osMutexAcquire>
         osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 80017da:	4b33      	ldr	r3, [pc, #204]	; (80018a8 <MENU_ChoiseFunction+0x1ec>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f04f 31ff 	mov.w	r1, #4294967295
 80017e2:	4618      	mov	r0, r3
 80017e4:	f00d fb3e 	bl	800ee64 <osMutexAcquire>
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 80017e8:	4b30      	ldr	r3, [pc, #192]	; (80018ac <MENU_ChoiseFunction+0x1f0>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f04f 31ff 	mov.w	r1, #4294967295
 80017f0:	4618      	mov	r0, r3
 80017f2:	f00d fb37 	bl	800ee64 <osMutexAcquire>
         ssd1306_clear();
 80017f6:	f005 fca5 	bl	8007144 <ssd1306_clear>
         sprintf(Temp, "Wykresy");
 80017fa:	1d3b      	adds	r3, r7, #4
 80017fc:	492e      	ldr	r1, [pc, #184]	; (80018b8 <MENU_ChoiseFunction+0x1fc>)
 80017fe:	4618      	mov	r0, r3
 8001800:	f004 feb6 	bl	8006570 <sprintf_>
         GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8001804:	1d3a      	adds	r2, r7, #4
 8001806:	2300      	movs	r3, #0
 8001808:	9301      	str	r3, [sp, #4]
 800180a:	2300      	movs	r3, #0
 800180c:	9300      	str	r3, [sp, #0]
 800180e:	2301      	movs	r3, #1
 8001810:	2100      	movs	r1, #0
 8001812:	2000      	movs	r0, #0
 8001814:	f7ff fd4e 	bl	80012b4 <GFX_DrawString>
         ssd1306_display();
 8001818:	f005 fc68 	bl	80070ec <ssd1306_display>
         osMutexRelease(SPI1MutexHandle);
 800181c:	4b23      	ldr	r3, [pc, #140]	; (80018ac <MENU_ChoiseFunction+0x1f0>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f00d fb6a 	bl	800eefa <osMutexRelease>
         osMutexRelease(SSD1306MutexHandle);
 8001826:	4b20      	ldr	r3, [pc, #128]	; (80018a8 <MENU_ChoiseFunction+0x1ec>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4618      	mov	r0, r3
 800182c:	f00d fb65 	bl	800eefa <osMutexRelease>
         osMutexRelease(ScreensDcMutexHandle);
 8001830:	4b1c      	ldr	r3, [pc, #112]	; (80018a4 <MENU_ChoiseFunction+0x1e8>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4618      	mov	r0, r3
 8001836:	f00d fb60 	bl	800eefa <osMutexRelease>
         break;
 800183a:	e000      	b.n	800183e <MENU_ChoiseFunction+0x182>
         break;
 800183c:	bf00      	nop
      }
   }
   if(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 800183e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001842:	481e      	ldr	r0, [pc, #120]	; (80018bc <MENU_ChoiseFunction+0x200>)
 8001844:	f006 ff22 	bl	800868c <HAL_GPIO_ReadPin>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d121      	bne.n	8001892 <MENU_ChoiseFunction+0x1d6>
   {
      Menu.NewEvent  = MENU_EVENT_CHOISE;
 800184e:	4b1c      	ldr	r3, [pc, #112]	; (80018c0 <MENU_ChoiseFunction+0x204>)
 8001850:	2202      	movs	r2, #2
 8001852:	725a      	strb	r2, [r3, #9]
      Menu.ChoiseCnt = (TIM5->CNT / 4) % MENU_CHOISE_CNT;
 8001854:	4b11      	ldr	r3, [pc, #68]	; (800189c <MENU_ChoiseFunction+0x1e0>)
 8001856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001858:	0899      	lsrs	r1, r3, #2
 800185a:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <MENU_ChoiseFunction+0x1e4>)
 800185c:	fba3 2301 	umull	r2, r3, r3, r1
 8001860:	085a      	lsrs	r2, r3, #1
 8001862:	4613      	mov	r3, r2
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	4413      	add	r3, r2
 8001868:	1aca      	subs	r2, r1, r3
 800186a:	4b15      	ldr	r3, [pc, #84]	; (80018c0 <MENU_ChoiseFunction+0x204>)
 800186c:	601a      	str	r2, [r3, #0]
      TIM5->CNT      = 0;
 800186e:	4b0b      	ldr	r3, [pc, #44]	; (800189c <MENU_ChoiseFunction+0x1e0>)
 8001870:	2200      	movs	r2, #0
 8001872:	625a      	str	r2, [r3, #36]	; 0x24
      Menu.f         = 0;
 8001874:	4b12      	ldr	r3, [pc, #72]	; (80018c0 <MENU_ChoiseFunction+0x204>)
 8001876:	2200      	movs	r2, #0
 8001878:	729a      	strb	r2, [r3, #10]
      while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 800187a:	e002      	b.n	8001882 <MENU_ChoiseFunction+0x1c6>
      {
         osDelay(100);
 800187c:	2064      	movs	r0, #100	; 0x64
 800187e:	f00d f8d5 	bl	800ea2c <osDelay>
      while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8001882:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001886:	480d      	ldr	r0, [pc, #52]	; (80018bc <MENU_ChoiseFunction+0x200>)
 8001888:	f006 ff00 	bl	800868c <HAL_GPIO_ReadPin>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d0f4      	beq.n	800187c <MENU_ChoiseFunction+0x1c0>
      }
   }
}
 8001892:	bf00      	nop
 8001894:	3768      	adds	r7, #104	; 0x68
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40000c00 	.word	0x40000c00
 80018a0:	aaaaaaab 	.word	0xaaaaaaab
 80018a4:	20003dc8 	.word	0x20003dc8
 80018a8:	20003dcc 	.word	0x20003dcc
 80018ac:	20003dd0 	.word	0x20003dd0
 80018b0:	08018368 	.word	0x08018368
 80018b4:	08018378 	.word	0x08018378
 80018b8:	08018384 	.word	0x08018384
 80018bc:	48000400 	.word	0x48000400
 80018c0:	200002a0 	.word	0x200002a0

080018c4 <MENU_RunningFunction>:
static void MENU_RunningFunction(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b0a2      	sub	sp, #136	; 0x88
 80018c8:	af02      	add	r7, sp, #8
   char Temp[100];
   switch(Menu.ChoiseCnt)
 80018ca:	4b9c      	ldr	r3, [pc, #624]	; (8001b3c <MENU_RunningFunction+0x278>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	f000 8207 	beq.w	8001ce2 <MENU_RunningFunction+0x41e>
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	f200 823e 	bhi.w	8001d56 <MENU_RunningFunction+0x492>
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d003      	beq.n	80018e6 <MENU_RunningFunction+0x22>
 80018de:	2b01      	cmp	r3, #1
 80018e0:	f000 81c5 	beq.w	8001c6e <MENU_RunningFunction+0x3aa>
         osMutexRelease(ScreensDcMutexHandle);
         break;
      }
      default:
      {
         break;
 80018e4:	e237      	b.n	8001d56 <MENU_RunningFunction+0x492>
         HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 80018e6:	f107 0308 	add.w	r3, r7, #8
 80018ea:	2200      	movs	r2, #0
 80018ec:	4619      	mov	r1, r3
 80018ee:	4894      	ldr	r0, [pc, #592]	; (8001b40 <MENU_RunningFunction+0x27c>)
 80018f0:	f008 ff34 	bl	800a75c <HAL_RTC_GetTime>
         HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 80018f4:	1d3b      	adds	r3, r7, #4
 80018f6:	2200      	movs	r2, #0
 80018f8:	4619      	mov	r1, r3
 80018fa:	4891      	ldr	r0, [pc, #580]	; (8001b40 <MENU_RunningFunction+0x27c>)
 80018fc:	f009 f818 	bl	800a930 <HAL_RTC_GetDate>
         osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8001900:	4b90      	ldr	r3, [pc, #576]	; (8001b44 <MENU_RunningFunction+0x280>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f04f 31ff 	mov.w	r1, #4294967295
 8001908:	4618      	mov	r0, r3
 800190a:	f00d faab 	bl	800ee64 <osMutexAcquire>
         osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 800190e:	4b8e      	ldr	r3, [pc, #568]	; (8001b48 <MENU_RunningFunction+0x284>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f04f 31ff 	mov.w	r1, #4294967295
 8001916:	4618      	mov	r0, r3
 8001918:	f00d faa4 	bl	800ee64 <osMutexAcquire>
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 800191c:	4b8b      	ldr	r3, [pc, #556]	; (8001b4c <MENU_RunningFunction+0x288>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f04f 31ff 	mov.w	r1, #4294967295
 8001924:	4618      	mov	r0, r3
 8001926:	f00d fa9d 	bl	800ee64 <osMutexAcquire>
         ssd1306_clear();
 800192a:	f005 fc0b 	bl	8007144 <ssd1306_clear>
         sprintf(Temp, "%d h %d m %d s", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 800192e:	7a3b      	ldrb	r3, [r7, #8]
 8001930:	461a      	mov	r2, r3
 8001932:	7a7b      	ldrb	r3, [r7, #9]
 8001934:	4619      	mov	r1, r3
 8001936:	7abb      	ldrb	r3, [r7, #10]
 8001938:	f107 001c 	add.w	r0, r7, #28
 800193c:	9300      	str	r3, [sp, #0]
 800193e:	460b      	mov	r3, r1
 8001940:	4983      	ldr	r1, [pc, #524]	; (8001b50 <MENU_RunningFunction+0x28c>)
 8001942:	f004 fe15 	bl	8006570 <sprintf_>
         GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8001946:	f107 021c 	add.w	r2, r7, #28
 800194a:	2300      	movs	r3, #0
 800194c:	9301      	str	r3, [sp, #4]
 800194e:	2300      	movs	r3, #0
 8001950:	9300      	str	r3, [sp, #0]
 8001952:	2301      	movs	r3, #1
 8001954:	2100      	movs	r1, #0
 8001956:	2000      	movs	r0, #0
 8001958:	f7ff fcac 	bl	80012b4 <GFX_DrawString>
         ssd1306_display();
 800195c:	f005 fbc6 	bl	80070ec <ssd1306_display>
         osMutexRelease(SPI1MutexHandle);
 8001960:	4b7a      	ldr	r3, [pc, #488]	; (8001b4c <MENU_RunningFunction+0x288>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4618      	mov	r0, r3
 8001966:	f00d fac8 	bl	800eefa <osMutexRelease>
         osMutexRelease(SSD1306MutexHandle);
 800196a:	4b77      	ldr	r3, [pc, #476]	; (8001b48 <MENU_RunningFunction+0x284>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f00d fac3 	bl	800eefa <osMutexRelease>
         osMutexRelease(ScreensDcMutexHandle);
 8001974:	4b73      	ldr	r3, [pc, #460]	; (8001b44 <MENU_RunningFunction+0x280>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4618      	mov	r0, r3
 800197a:	f00d fabe 	bl	800eefa <osMutexRelease>
         while(Menu.f == 0)
 800197e:	e170      	b.n	8001c62 <MENU_RunningFunction+0x39e>
            if(Menu.ButtonCnt == 0)
 8001980:	4b6e      	ldr	r3, [pc, #440]	; (8001b3c <MENU_RunningFunction+0x278>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d16a      	bne.n	8001a5e <MENU_RunningFunction+0x19a>
               RtcTime.Hours = (TIM5->CNT / 4) % 24;
 8001988:	4b72      	ldr	r3, [pc, #456]	; (8001b54 <MENU_RunningFunction+0x290>)
 800198a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198c:	0899      	lsrs	r1, r3, #2
 800198e:	4b72      	ldr	r3, [pc, #456]	; (8001b58 <MENU_RunningFunction+0x294>)
 8001990:	fba3 2301 	umull	r2, r3, r3, r1
 8001994:	091a      	lsrs	r2, r3, #4
 8001996:	4613      	mov	r3, r2
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	4413      	add	r3, r2
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	1aca      	subs	r2, r1, r3
 80019a0:	b2d3      	uxtb	r3, r2
 80019a2:	723b      	strb	r3, [r7, #8]
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 80019a4:	4b67      	ldr	r3, [pc, #412]	; (8001b44 <MENU_RunningFunction+0x280>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f04f 31ff 	mov.w	r1, #4294967295
 80019ac:	4618      	mov	r0, r3
 80019ae:	f00d fa59 	bl	800ee64 <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 80019b2:	4b65      	ldr	r3, [pc, #404]	; (8001b48 <MENU_RunningFunction+0x284>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f04f 31ff 	mov.w	r1, #4294967295
 80019ba:	4618      	mov	r0, r3
 80019bc:	f00d fa52 	bl	800ee64 <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 80019c0:	4b62      	ldr	r3, [pc, #392]	; (8001b4c <MENU_RunningFunction+0x288>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f04f 31ff 	mov.w	r1, #4294967295
 80019c8:	4618      	mov	r0, r3
 80019ca:	f00d fa4b 	bl	800ee64 <osMutexAcquire>
               ssd1306_clear();
 80019ce:	f005 fbb9 	bl	8007144 <ssd1306_clear>
               sprintf(Temp, "%d h %d m %d s", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 80019d2:	7a3b      	ldrb	r3, [r7, #8]
 80019d4:	461a      	mov	r2, r3
 80019d6:	7a7b      	ldrb	r3, [r7, #9]
 80019d8:	4619      	mov	r1, r3
 80019da:	7abb      	ldrb	r3, [r7, #10]
 80019dc:	f107 001c 	add.w	r0, r7, #28
 80019e0:	9300      	str	r3, [sp, #0]
 80019e2:	460b      	mov	r3, r1
 80019e4:	495a      	ldr	r1, [pc, #360]	; (8001b50 <MENU_RunningFunction+0x28c>)
 80019e6:	f004 fdc3 	bl	8006570 <sprintf_>
               GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 80019ea:	f107 021c 	add.w	r2, r7, #28
 80019ee:	2300      	movs	r3, #0
 80019f0:	9301      	str	r3, [sp, #4]
 80019f2:	2300      	movs	r3, #0
 80019f4:	9300      	str	r3, [sp, #0]
 80019f6:	2301      	movs	r3, #1
 80019f8:	2100      	movs	r1, #0
 80019fa:	2000      	movs	r0, #0
 80019fc:	f7ff fc5a 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 8001a00:	f005 fb74 	bl	80070ec <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 8001a04:	4b51      	ldr	r3, [pc, #324]	; (8001b4c <MENU_RunningFunction+0x288>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f00d fa76 	bl	800eefa <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 8001a0e:	4b4e      	ldr	r3, [pc, #312]	; (8001b48 <MENU_RunningFunction+0x284>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f00d fa71 	bl	800eefa <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 8001a18:	4b4a      	ldr	r3, [pc, #296]	; (8001b44 <MENU_RunningFunction+0x280>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f00d fa6c 	bl	800eefa <osMutexRelease>
               if(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8001a22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a26:	484d      	ldr	r0, [pc, #308]	; (8001b5c <MENU_RunningFunction+0x298>)
 8001a28:	f006 fe30 	bl	800868c <HAL_GPIO_ReadPin>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	f040 8114 	bne.w	8001c5c <MENU_RunningFunction+0x398>
                  Menu.ButtonCnt++;
 8001a34:	4b41      	ldr	r3, [pc, #260]	; (8001b3c <MENU_RunningFunction+0x278>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	4a40      	ldr	r2, [pc, #256]	; (8001b3c <MENU_RunningFunction+0x278>)
 8001a3c:	6053      	str	r3, [r2, #4]
                  TIM5->CNT = 0;
 8001a3e:	4b45      	ldr	r3, [pc, #276]	; (8001b54 <MENU_RunningFunction+0x290>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	625a      	str	r2, [r3, #36]	; 0x24
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8001a44:	e002      	b.n	8001a4c <MENU_RunningFunction+0x188>
                     osDelay(100);
 8001a46:	2064      	movs	r0, #100	; 0x64
 8001a48:	f00c fff0 	bl	800ea2c <osDelay>
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8001a4c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a50:	4842      	ldr	r0, [pc, #264]	; (8001b5c <MENU_RunningFunction+0x298>)
 8001a52:	f006 fe1b 	bl	800868c <HAL_GPIO_ReadPin>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d0f4      	beq.n	8001a46 <MENU_RunningFunction+0x182>
 8001a5c:	e0fe      	b.n	8001c5c <MENU_RunningFunction+0x398>
            else if(Menu.ButtonCnt == 1)
 8001a5e:	4b37      	ldr	r3, [pc, #220]	; (8001b3c <MENU_RunningFunction+0x278>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d17e      	bne.n	8001b64 <MENU_RunningFunction+0x2a0>
               RtcTime.Minutes = (TIM5->CNT / 4) % 60;
 8001a66:	4b3b      	ldr	r3, [pc, #236]	; (8001b54 <MENU_RunningFunction+0x290>)
 8001a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6a:	0899      	lsrs	r1, r3, #2
 8001a6c:	4b3c      	ldr	r3, [pc, #240]	; (8001b60 <MENU_RunningFunction+0x29c>)
 8001a6e:	fba3 2301 	umull	r2, r3, r3, r1
 8001a72:	095a      	lsrs	r2, r3, #5
 8001a74:	4613      	mov	r3, r2
 8001a76:	011b      	lsls	r3, r3, #4
 8001a78:	1a9b      	subs	r3, r3, r2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	1aca      	subs	r2, r1, r3
 8001a7e:	b2d3      	uxtb	r3, r2
 8001a80:	727b      	strb	r3, [r7, #9]
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8001a82:	4b30      	ldr	r3, [pc, #192]	; (8001b44 <MENU_RunningFunction+0x280>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f04f 31ff 	mov.w	r1, #4294967295
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f00d f9ea 	bl	800ee64 <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8001a90:	4b2d      	ldr	r3, [pc, #180]	; (8001b48 <MENU_RunningFunction+0x284>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f04f 31ff 	mov.w	r1, #4294967295
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f00d f9e3 	bl	800ee64 <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8001a9e:	4b2b      	ldr	r3, [pc, #172]	; (8001b4c <MENU_RunningFunction+0x288>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f00d f9dc 	bl	800ee64 <osMutexAcquire>
               ssd1306_clear();
 8001aac:	f005 fb4a 	bl	8007144 <ssd1306_clear>
               sprintf(Temp, "%d h %d m %d s", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 8001ab0:	7a3b      	ldrb	r3, [r7, #8]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	7a7b      	ldrb	r3, [r7, #9]
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	7abb      	ldrb	r3, [r7, #10]
 8001aba:	f107 001c 	add.w	r0, r7, #28
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	4923      	ldr	r1, [pc, #140]	; (8001b50 <MENU_RunningFunction+0x28c>)
 8001ac4:	f004 fd54 	bl	8006570 <sprintf_>
               GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8001ac8:	f107 021c 	add.w	r2, r7, #28
 8001acc:	2300      	movs	r3, #0
 8001ace:	9301      	str	r3, [sp, #4]
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	9300      	str	r3, [sp, #0]
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	2000      	movs	r0, #0
 8001ada:	f7ff fbeb 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 8001ade:	f005 fb05 	bl	80070ec <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 8001ae2:	4b1a      	ldr	r3, [pc, #104]	; (8001b4c <MENU_RunningFunction+0x288>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f00d fa07 	bl	800eefa <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 8001aec:	4b16      	ldr	r3, [pc, #88]	; (8001b48 <MENU_RunningFunction+0x284>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f00d fa02 	bl	800eefa <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 8001af6:	4b13      	ldr	r3, [pc, #76]	; (8001b44 <MENU_RunningFunction+0x280>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f00d f9fd 	bl	800eefa <osMutexRelease>
               if(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8001b00:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b04:	4815      	ldr	r0, [pc, #84]	; (8001b5c <MENU_RunningFunction+0x298>)
 8001b06:	f006 fdc1 	bl	800868c <HAL_GPIO_ReadPin>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	f040 80a5 	bne.w	8001c5c <MENU_RunningFunction+0x398>
                  Menu.ButtonCnt++;
 8001b12:	4b0a      	ldr	r3, [pc, #40]	; (8001b3c <MENU_RunningFunction+0x278>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	3301      	adds	r3, #1
 8001b18:	4a08      	ldr	r2, [pc, #32]	; (8001b3c <MENU_RunningFunction+0x278>)
 8001b1a:	6053      	str	r3, [r2, #4]
                  TIM5->CNT = 0;
 8001b1c:	4b0d      	ldr	r3, [pc, #52]	; (8001b54 <MENU_RunningFunction+0x290>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	625a      	str	r2, [r3, #36]	; 0x24
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8001b22:	e002      	b.n	8001b2a <MENU_RunningFunction+0x266>
                     osDelay(100);
 8001b24:	2064      	movs	r0, #100	; 0x64
 8001b26:	f00c ff81 	bl	800ea2c <osDelay>
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8001b2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b2e:	480b      	ldr	r0, [pc, #44]	; (8001b5c <MENU_RunningFunction+0x298>)
 8001b30:	f006 fdac 	bl	800868c <HAL_GPIO_ReadPin>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d0f4      	beq.n	8001b24 <MENU_RunningFunction+0x260>
 8001b3a:	e08f      	b.n	8001c5c <MENU_RunningFunction+0x398>
 8001b3c:	200002a0 	.word	0x200002a0
 8001b40:	20003f04 	.word	0x20003f04
 8001b44:	20003dc8 	.word	0x20003dc8
 8001b48:	20003dcc 	.word	0x20003dcc
 8001b4c:	20003dd0 	.word	0x20003dd0
 8001b50:	0801838c 	.word	0x0801838c
 8001b54:	40000c00 	.word	0x40000c00
 8001b58:	aaaaaaab 	.word	0xaaaaaaab
 8001b5c:	48000400 	.word	0x48000400
 8001b60:	88888889 	.word	0x88888889
               RtcTime.Seconds = (TIM5->CNT / 4) % 60;
 8001b64:	4b80      	ldr	r3, [pc, #512]	; (8001d68 <MENU_RunningFunction+0x4a4>)
 8001b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b68:	0899      	lsrs	r1, r3, #2
 8001b6a:	4b80      	ldr	r3, [pc, #512]	; (8001d6c <MENU_RunningFunction+0x4a8>)
 8001b6c:	fba3 2301 	umull	r2, r3, r3, r1
 8001b70:	095a      	lsrs	r2, r3, #5
 8001b72:	4613      	mov	r3, r2
 8001b74:	011b      	lsls	r3, r3, #4
 8001b76:	1a9b      	subs	r3, r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	1aca      	subs	r2, r1, r3
 8001b7c:	b2d3      	uxtb	r3, r2
 8001b7e:	72bb      	strb	r3, [r7, #10]
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8001b80:	4b7b      	ldr	r3, [pc, #492]	; (8001d70 <MENU_RunningFunction+0x4ac>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f04f 31ff 	mov.w	r1, #4294967295
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f00d f96b 	bl	800ee64 <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8001b8e:	4b79      	ldr	r3, [pc, #484]	; (8001d74 <MENU_RunningFunction+0x4b0>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f04f 31ff 	mov.w	r1, #4294967295
 8001b96:	4618      	mov	r0, r3
 8001b98:	f00d f964 	bl	800ee64 <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8001b9c:	4b76      	ldr	r3, [pc, #472]	; (8001d78 <MENU_RunningFunction+0x4b4>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f00d f95d 	bl	800ee64 <osMutexAcquire>
               ssd1306_clear();
 8001baa:	f005 facb 	bl	8007144 <ssd1306_clear>
               sprintf(Temp, "%d h %d m %d s", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 8001bae:	7a3b      	ldrb	r3, [r7, #8]
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	7a7b      	ldrb	r3, [r7, #9]
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	7abb      	ldrb	r3, [r7, #10]
 8001bb8:	f107 001c 	add.w	r0, r7, #28
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	496e      	ldr	r1, [pc, #440]	; (8001d7c <MENU_RunningFunction+0x4b8>)
 8001bc2:	f004 fcd5 	bl	8006570 <sprintf_>
               GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8001bc6:	f107 021c 	add.w	r2, r7, #28
 8001bca:	2300      	movs	r3, #0
 8001bcc:	9301      	str	r3, [sp, #4]
 8001bce:	2300      	movs	r3, #0
 8001bd0:	9300      	str	r3, [sp, #0]
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	2000      	movs	r0, #0
 8001bd8:	f7ff fb6c 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 8001bdc:	f005 fa86 	bl	80070ec <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 8001be0:	4b65      	ldr	r3, [pc, #404]	; (8001d78 <MENU_RunningFunction+0x4b4>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f00d f988 	bl	800eefa <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 8001bea:	4b62      	ldr	r3, [pc, #392]	; (8001d74 <MENU_RunningFunction+0x4b0>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f00d f983 	bl	800eefa <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 8001bf4:	4b5e      	ldr	r3, [pc, #376]	; (8001d70 <MENU_RunningFunction+0x4ac>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f00d f97e 	bl	800eefa <osMutexRelease>
               if(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8001bfe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c02:	485f      	ldr	r0, [pc, #380]	; (8001d80 <MENU_RunningFunction+0x4bc>)
 8001c04:	f006 fd42 	bl	800868c <HAL_GPIO_ReadPin>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d126      	bne.n	8001c5c <MENU_RunningFunction+0x398>
                  Menu.ButtonCnt++;
 8001c0e:	4b5d      	ldr	r3, [pc, #372]	; (8001d84 <MENU_RunningFunction+0x4c0>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	3301      	adds	r3, #1
 8001c14:	4a5b      	ldr	r2, [pc, #364]	; (8001d84 <MENU_RunningFunction+0x4c0>)
 8001c16:	6053      	str	r3, [r2, #4]
                  TIM5->CNT = 0;
 8001c18:	4b53      	ldr	r3, [pc, #332]	; (8001d68 <MENU_RunningFunction+0x4a4>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	625a      	str	r2, [r3, #36]	; 0x24
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8001c1e:	e002      	b.n	8001c26 <MENU_RunningFunction+0x362>
                     osDelay(100);
 8001c20:	2064      	movs	r0, #100	; 0x64
 8001c22:	f00c ff03 	bl	800ea2c <osDelay>
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8001c26:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c2a:	4855      	ldr	r0, [pc, #340]	; (8001d80 <MENU_RunningFunction+0x4bc>)
 8001c2c:	f006 fd2e 	bl	800868c <HAL_GPIO_ReadPin>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d0f4      	beq.n	8001c20 <MENU_RunningFunction+0x35c>
                  Menu.ButtonCnt = 0;
 8001c36:	4b53      	ldr	r3, [pc, #332]	; (8001d84 <MENU_RunningFunction+0x4c0>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	605a      	str	r2, [r3, #4]
                  Menu.f         = 1;
 8001c3c:	4b51      	ldr	r3, [pc, #324]	; (8001d84 <MENU_RunningFunction+0x4c0>)
 8001c3e:	2201      	movs	r2, #1
 8001c40:	729a      	strb	r2, [r3, #10]
                  HAL_RTC_SetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 8001c42:	f107 0308 	add.w	r3, r7, #8
 8001c46:	2200      	movs	r2, #0
 8001c48:	4619      	mov	r1, r3
 8001c4a:	484f      	ldr	r0, [pc, #316]	; (8001d88 <MENU_RunningFunction+0x4c4>)
 8001c4c:	f008 fce6 	bl	800a61c <HAL_RTC_SetTime>
                  HAL_RTC_SetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 8001c50:	1d3b      	adds	r3, r7, #4
 8001c52:	2200      	movs	r2, #0
 8001c54:	4619      	mov	r1, r3
 8001c56:	484c      	ldr	r0, [pc, #304]	; (8001d88 <MENU_RunningFunction+0x4c4>)
 8001c58:	f008 fde2 	bl	800a820 <HAL_RTC_SetDate>
            osDelay(50);
 8001c5c:	2032      	movs	r0, #50	; 0x32
 8001c5e:	f00c fee5 	bl	800ea2c <osDelay>
         while(Menu.f == 0)
 8001c62:	4b48      	ldr	r3, [pc, #288]	; (8001d84 <MENU_RunningFunction+0x4c0>)
 8001c64:	7a9b      	ldrb	r3, [r3, #10]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f43f ae8a 	beq.w	8001980 <MENU_RunningFunction+0xbc>
         break;
 8001c6c:	e074      	b.n	8001d58 <MENU_RunningFunction+0x494>
         osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8001c6e:	4b40      	ldr	r3, [pc, #256]	; (8001d70 <MENU_RunningFunction+0x4ac>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f04f 31ff 	mov.w	r1, #4294967295
 8001c76:	4618      	mov	r0, r3
 8001c78:	f00d f8f4 	bl	800ee64 <osMutexAcquire>
         osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8001c7c:	4b3d      	ldr	r3, [pc, #244]	; (8001d74 <MENU_RunningFunction+0x4b0>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f04f 31ff 	mov.w	r1, #4294967295
 8001c84:	4618      	mov	r0, r3
 8001c86:	f00d f8ed 	bl	800ee64 <osMutexAcquire>
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8001c8a:	4b3b      	ldr	r3, [pc, #236]	; (8001d78 <MENU_RunningFunction+0x4b4>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f04f 31ff 	mov.w	r1, #4294967295
 8001c92:	4618      	mov	r0, r3
 8001c94:	f00d f8e6 	bl	800ee64 <osMutexAcquire>
         ssd1306_clear();
 8001c98:	f005 fa54 	bl	8007144 <ssd1306_clear>
         sprintf(Temp, "Ustaw date");
 8001c9c:	f107 031c 	add.w	r3, r7, #28
 8001ca0:	493a      	ldr	r1, [pc, #232]	; (8001d8c <MENU_RunningFunction+0x4c8>)
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f004 fc64 	bl	8006570 <sprintf_>
         GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8001ca8:	f107 021c 	add.w	r2, r7, #28
 8001cac:	2300      	movs	r3, #0
 8001cae:	9301      	str	r3, [sp, #4]
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	9300      	str	r3, [sp, #0]
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	2000      	movs	r0, #0
 8001cba:	f7ff fafb 	bl	80012b4 <GFX_DrawString>
         ssd1306_display();
 8001cbe:	f005 fa15 	bl	80070ec <ssd1306_display>
         osMutexRelease(SPI1MutexHandle);
 8001cc2:	4b2d      	ldr	r3, [pc, #180]	; (8001d78 <MENU_RunningFunction+0x4b4>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f00d f917 	bl	800eefa <osMutexRelease>
         osMutexRelease(SSD1306MutexHandle);
 8001ccc:	4b29      	ldr	r3, [pc, #164]	; (8001d74 <MENU_RunningFunction+0x4b0>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f00d f912 	bl	800eefa <osMutexRelease>
         osMutexRelease(ScreensDcMutexHandle);
 8001cd6:	4b26      	ldr	r3, [pc, #152]	; (8001d70 <MENU_RunningFunction+0x4ac>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f00d f90d 	bl	800eefa <osMutexRelease>
         break;
 8001ce0:	e03a      	b.n	8001d58 <MENU_RunningFunction+0x494>
         osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8001ce2:	4b23      	ldr	r3, [pc, #140]	; (8001d70 <MENU_RunningFunction+0x4ac>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f04f 31ff 	mov.w	r1, #4294967295
 8001cea:	4618      	mov	r0, r3
 8001cec:	f00d f8ba 	bl	800ee64 <osMutexAcquire>
         osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8001cf0:	4b20      	ldr	r3, [pc, #128]	; (8001d74 <MENU_RunningFunction+0x4b0>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f00d f8b3 	bl	800ee64 <osMutexAcquire>
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8001cfe:	4b1e      	ldr	r3, [pc, #120]	; (8001d78 <MENU_RunningFunction+0x4b4>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f04f 31ff 	mov.w	r1, #4294967295
 8001d06:	4618      	mov	r0, r3
 8001d08:	f00d f8ac 	bl	800ee64 <osMutexAcquire>
         ssd1306_clear();
 8001d0c:	f005 fa1a 	bl	8007144 <ssd1306_clear>
         sprintf(Temp, "Wykresy");
 8001d10:	f107 031c 	add.w	r3, r7, #28
 8001d14:	491e      	ldr	r1, [pc, #120]	; (8001d90 <MENU_RunningFunction+0x4cc>)
 8001d16:	4618      	mov	r0, r3
 8001d18:	f004 fc2a 	bl	8006570 <sprintf_>
         GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8001d1c:	f107 021c 	add.w	r2, r7, #28
 8001d20:	2300      	movs	r3, #0
 8001d22:	9301      	str	r3, [sp, #4]
 8001d24:	2300      	movs	r3, #0
 8001d26:	9300      	str	r3, [sp, #0]
 8001d28:	2301      	movs	r3, #1
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	2000      	movs	r0, #0
 8001d2e:	f7ff fac1 	bl	80012b4 <GFX_DrawString>
         ssd1306_display();
 8001d32:	f005 f9db 	bl	80070ec <ssd1306_display>
         osMutexRelease(SPI1MutexHandle);
 8001d36:	4b10      	ldr	r3, [pc, #64]	; (8001d78 <MENU_RunningFunction+0x4b4>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f00d f8dd 	bl	800eefa <osMutexRelease>
         osMutexRelease(SSD1306MutexHandle);
 8001d40:	4b0c      	ldr	r3, [pc, #48]	; (8001d74 <MENU_RunningFunction+0x4b0>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f00d f8d8 	bl	800eefa <osMutexRelease>
         osMutexRelease(ScreensDcMutexHandle);
 8001d4a:	4b09      	ldr	r3, [pc, #36]	; (8001d70 <MENU_RunningFunction+0x4ac>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f00d f8d3 	bl	800eefa <osMutexRelease>
         break;
 8001d54:	e000      	b.n	8001d58 <MENU_RunningFunction+0x494>
         break;
 8001d56:	bf00      	nop
      }
   }
   Menu.NewEvent = MENU_EVENT_END;
 8001d58:	4b0a      	ldr	r3, [pc, #40]	; (8001d84 <MENU_RunningFunction+0x4c0>)
 8001d5a:	2203      	movs	r2, #3
 8001d5c:	725a      	strb	r2, [r3, #9]
}
 8001d5e:	bf00      	nop
 8001d60:	3780      	adds	r7, #128	; 0x80
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40000c00 	.word	0x40000c00
 8001d6c:	88888889 	.word	0x88888889
 8001d70:	20003dc8 	.word	0x20003dc8
 8001d74:	20003dcc 	.word	0x20003dcc
 8001d78:	20003dd0 	.word	0x20003dd0
 8001d7c:	0801838c 	.word	0x0801838c
 8001d80:	48000400 	.word	0x48000400
 8001d84:	200002a0 	.word	0x200002a0
 8001d88:	20003f04 	.word	0x20003f04
 8001d8c:	08018378 	.word	0x08018378
 8001d90:	08018384 	.word	0x08018384

08001d94 <MENU_EndFunction>:
static void MENU_EndFunction(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
   Menu.ButtonCnt = 0;
 8001d98:	4b0a      	ldr	r3, [pc, #40]	; (8001dc4 <MENU_EndFunction+0x30>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	605a      	str	r2, [r3, #4]
   Menu.ChoiseCnt = 0;
 8001d9e:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <MENU_EndFunction+0x30>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
   Menu.NewEvent  = MENU_EVENT_NOTHING;
 8001da4:	4b07      	ldr	r3, [pc, #28]	; (8001dc4 <MENU_EndFunction+0x30>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	725a      	strb	r2, [r3, #9]
   Menu.f         = 0;
 8001daa:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <MENU_EndFunction+0x30>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	729a      	strb	r2, [r3, #10]
   TIM5->CNT      = 0;
 8001db0:	4b05      	ldr	r3, [pc, #20]	; (8001dc8 <MENU_EndFunction+0x34>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	625a      	str	r2, [r3, #36]	; 0x24
   osMutexRelease(MenuMutexHandle);
 8001db6:	4b05      	ldr	r3, [pc, #20]	; (8001dcc <MENU_EndFunction+0x38>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f00d f89d 	bl	800eefa <osMutexRelease>
}
 8001dc0:	bf00      	nop
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	200002a0 	.word	0x200002a0
 8001dc8:	40000c00 	.word	0x40000c00
 8001dcc:	20003ddc 	.word	0x20003ddc

08001dd0 <BME280_CsLow>:
#include "main.h"

#include "bme280_spi.h"

void BME280_CsLow(BME280_t *bme)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
   HAL_GPIO_WritePin(bme->bme280_CsPort, bme->bme280_CsPin, 0);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6858      	ldr	r0, [r3, #4]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001de0:	2200      	movs	r2, #0
 8001de2:	4619      	mov	r1, r3
 8001de4:	f006 fc6a 	bl	80086bc <HAL_GPIO_WritePin>
}
 8001de8:	bf00      	nop
 8001dea:	3708      	adds	r7, #8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <BME280_CsHigh>:
void BME280_CsHigh(BME280_t *bme)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
   HAL_GPIO_WritePin(bme->bme280_CsPort, bme->bme280_CsPin, 1);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6858      	ldr	r0, [r3, #4]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e00:	2201      	movs	r2, #1
 8001e02:	4619      	mov	r1, r3
 8001e04:	f006 fc5a 	bl	80086bc <HAL_GPIO_WritePin>
}
 8001e08:	bf00      	nop
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <BME280_Read8>:
uint8_t BME280_Read8(BME280_t *bme, uint8_t addr)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	460b      	mov	r3, r1
 8001e1a:	70fb      	strb	r3, [r7, #3]
   addr |= 128;
 8001e1c:	78fb      	ldrb	r3, [r7, #3]
 8001e1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	70fb      	strb	r3, [r7, #3]
   uint8_t data;
   BME280_CsLow(bme);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff ffd2 	bl	8001dd0 <BME280_CsLow>
   HAL_SPI_Transmit(bme->bme_spi, &addr, 1, BME_MAX_TIMEOUT);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6818      	ldr	r0, [r3, #0]
 8001e30:	1cf9      	adds	r1, r7, #3
 8001e32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e36:	2201      	movs	r2, #1
 8001e38:	f008 ff3f 	bl	800acba <HAL_SPI_Transmit>
   HAL_SPI_Receive(bme->bme_spi, &data, 1, BME_MAX_TIMEOUT);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6818      	ldr	r0, [r3, #0]
 8001e40:	f107 010f 	add.w	r1, r7, #15
 8001e44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f009 f8a4 	bl	800af96 <HAL_SPI_Receive>
   BME280_CsHigh(bme);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7ff ffce 	bl	8001df0 <BME280_CsHigh>
   return data;
 8001e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <BME280_Write8>:
void BME280_Write8(BME280_t *bme, uint8_t addr, uint8_t data)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b084      	sub	sp, #16
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
 8001e66:	460b      	mov	r3, r1
 8001e68:	70fb      	strb	r3, [r7, #3]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	70bb      	strb	r3, [r7, #2]
   BME280_CsLow(bme);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7ff ffae 	bl	8001dd0 <BME280_CsLow>
   addr &= 127;
 8001e74:	78fb      	ldrb	r3, [r7, #3]
 8001e76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e7a:	70fb      	strb	r3, [r7, #3]
   uint8_t Data_ToSend[2];
   Data_ToSend[0] = addr;
 8001e7c:	78fb      	ldrb	r3, [r7, #3]
 8001e7e:	733b      	strb	r3, [r7, #12]
   Data_ToSend[1] = data;
 8001e80:	78bb      	ldrb	r3, [r7, #2]
 8001e82:	737b      	strb	r3, [r7, #13]
   HAL_SPI_Transmit(bme->bme_spi, Data_ToSend, 2, BME_MAX_TIMEOUT);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6818      	ldr	r0, [r3, #0]
 8001e88:	f107 010c 	add.w	r1, r7, #12
 8001e8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e90:	2202      	movs	r2, #2
 8001e92:	f008 ff12 	bl	800acba <HAL_SPI_Transmit>
   BME280_CsHigh(bme);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f7ff ffaa 	bl	8001df0 <BME280_CsHigh>
}
 8001e9c:	bf00      	nop
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <BME280_Read16LE>:
static uint16_t BME280_Read16LE(BME280_t *bme, uint8_t address)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	460b      	mov	r3, r1
 8001eae:	70fb      	strb	r3, [r7, #3]
   uint8_t data[2];
   data[0] = BME280_Read8(bme, address);
 8001eb0:	78fb      	ldrb	r3, [r7, #3]
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f7ff ffab 	bl	8001e10 <BME280_Read8>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	733b      	strb	r3, [r7, #12]
   data[1] = BME280_Read8(bme, address + 1);
 8001ebe:	78fb      	ldrb	r3, [r7, #3]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7ff ffa2 	bl	8001e10 <BME280_Read8>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	737b      	strb	r3, [r7, #13]
   return ((data[1] << 8) | data[0]);
 8001ed0:	7b7b      	ldrb	r3, [r7, #13]
 8001ed2:	021b      	lsls	r3, r3, #8
 8001ed4:	b21a      	sxth	r2, r3
 8001ed6:	7b3b      	ldrb	r3, [r7, #12]
 8001ed8:	b21b      	sxth	r3, r3
 8001eda:	4313      	orrs	r3, r2
 8001edc:	b21b      	sxth	r3, r3
 8001ede:	b29b      	uxth	r3, r3
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3710      	adds	r7, #16
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <BME280_Read16>:
static uint16_t BME280_Read16(BME280_t *bme, uint8_t address)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	70fb      	strb	r3, [r7, #3]
   uint8_t data[2];
   data[0] = BME280_Read8(bme, address);
 8001ef4:	78fb      	ldrb	r3, [r7, #3]
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f7ff ff89 	bl	8001e10 <BME280_Read8>
 8001efe:	4603      	mov	r3, r0
 8001f00:	733b      	strb	r3, [r7, #12]
   data[1] = BME280_Read8(bme, address + 1);
 8001f02:	78fb      	ldrb	r3, [r7, #3]
 8001f04:	3301      	adds	r3, #1
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	4619      	mov	r1, r3
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f7ff ff80 	bl	8001e10 <BME280_Read8>
 8001f10:	4603      	mov	r3, r0
 8001f12:	737b      	strb	r3, [r7, #13]
   return ((data[0] << 8) | data[1]);
 8001f14:	7b3b      	ldrb	r3, [r7, #12]
 8001f16:	021b      	lsls	r3, r3, #8
 8001f18:	b21a      	sxth	r2, r3
 8001f1a:	7b7b      	ldrb	r3, [r7, #13]
 8001f1c:	b21b      	sxth	r3, r3
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	b21b      	sxth	r3, r3
 8001f22:	b29b      	uxth	r3, r3
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <BME280_Read24>:
uint32_t BME280_Read24(BME280_t *bme, uint8_t addr)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	460b      	mov	r3, r1
 8001f36:	70fb      	strb	r3, [r7, #3]
   addr |= 128;
 8001f38:	78fb      	ldrb	r3, [r7, #3]
 8001f3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	70fb      	strb	r3, [r7, #3]
   uint8_t data[3];
   BME280_CsLow(bme);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7ff ff44 	bl	8001dd0 <BME280_CsLow>
   HAL_SPI_Transmit(bme->bme_spi, &addr, 1, BME_MAX_TIMEOUT);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6818      	ldr	r0, [r3, #0]
 8001f4c:	1cf9      	adds	r1, r7, #3
 8001f4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f52:	2201      	movs	r2, #1
 8001f54:	f008 feb1 	bl	800acba <HAL_SPI_Transmit>
   HAL_SPI_Receive(bme->bme_spi, data, 3, BME_MAX_TIMEOUT);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6818      	ldr	r0, [r3, #0]
 8001f5c:	f107 010c 	add.w	r1, r7, #12
 8001f60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f64:	2203      	movs	r2, #3
 8001f66:	f009 f816 	bl	800af96 <HAL_SPI_Receive>
   BME280_CsHigh(bme);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f7ff ff40 	bl	8001df0 <BME280_CsHigh>
   return ((data[0] << 16) | (data[1] << 8) | data[2]);
 8001f70:	7b3b      	ldrb	r3, [r7, #12]
 8001f72:	041a      	lsls	r2, r3, #16
 8001f74:	7b7b      	ldrb	r3, [r7, #13]
 8001f76:	021b      	lsls	r3, r3, #8
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	7bba      	ldrb	r2, [r7, #14]
 8001f7c:	4313      	orrs	r3, r2
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
	...

08001f88 <BME280_Read_temp>:
static float BME280_Read_temp(BME280_t *bme)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
   int32_t var1, var2;
   int32_t adc_T = BME280_Read24(bme, BME280_TEMPDATA);
 8001f90:	21fa      	movs	r1, #250	; 0xfa
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7ff ffca 	bl	8001f2c <BME280_Read24>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	617b      	str	r3, [r7, #20]
   if(adc_T == 0x800000)
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001fa2:	d102      	bne.n	8001faa <BME280_Read_temp+0x22>
      return -99;
 8001fa4:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002030 <BME280_Read_temp+0xa8>
 8001fa8:	e03b      	b.n	8002022 <BME280_Read_temp+0x9a>

   adc_T >>= 4;
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	111b      	asrs	r3, r3, #4
 8001fae:	617b      	str	r3, [r7, #20]

   var1 = ((((adc_T >> 3) - ((int32_t)bme->t1 << 1))) * ((int32_t)bme->t2)) >> 11;
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	10da      	asrs	r2, r3, #3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8001fc2:	fb02 f303 	mul.w	r3, r2, r3
 8001fc6:	12db      	asrs	r3, r3, #11
 8001fc8:	613b      	str	r3, [r7, #16]

   var2 = (((((adc_T >> 4) - ((int32_t)bme->t1)) * ((adc_T >> 4) - ((int32_t)bme->t1))) >> 12) * ((int32_t)bme->t3)) >> 14;
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	111b      	asrs	r3, r3, #4
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8001fd2:	1a9b      	subs	r3, r3, r2
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	1112      	asrs	r2, r2, #4
 8001fd8:	6879      	ldr	r1, [r7, #4]
 8001fda:	8cc9      	ldrh	r1, [r1, #38]	; 0x26
 8001fdc:	1a52      	subs	r2, r2, r1
 8001fde:	fb02 f303 	mul.w	r3, r2, r3
 8001fe2:	131b      	asrs	r3, r3, #12
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8001fea:	fb02 f303 	mul.w	r3, r2, r3
 8001fee:	139b      	asrs	r3, r3, #14
 8001ff0:	60fb      	str	r3, [r7, #12]

   bme->t_fine = var1 + var2;
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	441a      	add	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	62da      	str	r2, [r3, #44]	; 0x2c

   float T = (bme->t_fine * 5 + 128) >> 8;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002000:	4613      	mov	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	3380      	adds	r3, #128	; 0x80
 8002008:	121b      	asrs	r3, r3, #8
 800200a:	ee07 3a90 	vmov	s15, r3
 800200e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002012:	edc7 7a02 	vstr	s15, [r7, #8]
   return T / 100;
 8002016:	edd7 7a02 	vldr	s15, [r7, #8]
 800201a:	eddf 6a06 	vldr	s13, [pc, #24]	; 8002034 <BME280_Read_temp+0xac>
 800201e:	ee87 7aa6 	vdiv.f32	s14, s15, s13

   return -99;
}
 8002022:	eef0 7a47 	vmov.f32	s15, s14
 8002026:	eeb0 0a67 	vmov.f32	s0, s15
 800202a:	3718      	adds	r7, #24
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	c2c60000 	.word	0xc2c60000
 8002034:	42c80000 	.word	0x42c80000

08002038 <BME280_Read_hum>:
static float BME280_Read_hum(BME280_t *bme)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]

   int32_t adc_H = BME280_Read16(bme, BME280_HUMIDDATA);
 8002040:	21fd      	movs	r1, #253	; 0xfd
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f7ff ff50 	bl	8001ee8 <BME280_Read16>
 8002048:	4603      	mov	r3, r0
 800204a:	617b      	str	r3, [r7, #20]
   if(adc_H == 0x8000) // value in case humidity measurement was disabled
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002052:	d102      	bne.n	800205a <BME280_Read_hum+0x22>
      return -99;      // error
 8002054:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002128 <BME280_Read_hum+0xf0>
 8002058:	e05f      	b.n	800211a <BME280_Read_hum+0xe2>
   int32_t v_x1_u32r;

   v_x1_u32r = (bme->t_fine - ((int32_t)76800));
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205e:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8002062:	613b      	str	r3, [r7, #16]

   v_x1_u32r = (((((adc_H << 14) - (((int32_t)bme->h4) << 20) - (((int32_t)bme->h5) * v_x1_u32r)) + ((int32_t)16384)) >> 15)
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	039a      	lsls	r2, r3, #14
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800206e:	051b      	lsls	r3, r3, #20
 8002070:	1ad2      	subs	r2, r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8002078:	4619      	mov	r1, r3
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	fb01 f303 	mul.w	r3, r1, r3
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002086:	13db      	asrs	r3, r3, #15
                * (((((((v_x1_u32r * ((int32_t)bme->h6)) >> 10) * (((v_x1_u32r * ((int32_t)bme->h3)) >> 11) + ((int32_t)32768))) >> 10)
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	f992 200a 	ldrsb.w	r2, [r2, #10]
 800208e:	4611      	mov	r1, r2
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	fb01 f202 	mul.w	r2, r1, r2
 8002096:	1292      	asrs	r2, r2, #10
 8002098:	6879      	ldr	r1, [r7, #4]
 800209a:	7a49      	ldrb	r1, [r1, #9]
 800209c:	4608      	mov	r0, r1
 800209e:	6939      	ldr	r1, [r7, #16]
 80020a0:	fb00 f101 	mul.w	r1, r0, r1
 80020a4:	12c9      	asrs	r1, r1, #11
 80020a6:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 80020aa:	fb01 f202 	mul.w	r2, r1, r2
 80020ae:	1292      	asrs	r2, r2, #10
                     + ((int32_t)2097152))
 80020b0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
                        * ((int32_t)bme->h2)
 80020b4:	6879      	ldr	r1, [r7, #4]
 80020b6:	f9b1 1020 	ldrsh.w	r1, [r1, #32]
 80020ba:	fb01 f202 	mul.w	r2, r1, r2
                    + 8192)
 80020be:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
                   >> 14));
 80020c2:	1392      	asrs	r2, r2, #14
   v_x1_u32r = (((((adc_H << 14) - (((int32_t)bme->h4) << 20) - (((int32_t)bme->h5) * v_x1_u32r)) + ((int32_t)16384)) >> 15)
 80020c4:	fb02 f303 	mul.w	r3, r2, r3
 80020c8:	613b      	str	r3, [r7, #16]

   v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) * ((int32_t)bme->h1)) >> 4));
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	13db      	asrs	r3, r3, #15
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	13d2      	asrs	r2, r2, #15
 80020d2:	fb02 f303 	mul.w	r3, r2, r3
 80020d6:	11db      	asrs	r3, r3, #7
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	7a12      	ldrb	r2, [r2, #8]
 80020dc:	fb02 f303 	mul.w	r3, r2, r3
 80020e0:	111b      	asrs	r3, r3, #4
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	613b      	str	r3, [r7, #16]

   v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80020ee:	613b      	str	r3, [r7, #16]
   v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 80020f6:	bfa8      	it	ge
 80020f8:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 80020fc:	613b      	str	r3, [r7, #16]
   float h   = (v_x1_u32r >> 12);
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	131b      	asrs	r3, r3, #12
 8002102:	ee07 3a90 	vmov	s15, r3
 8002106:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800210a:	edc7 7a03 	vstr	s15, [r7, #12]
   return h / 1024.0;
 800210e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002112:	eddf 6a06 	vldr	s13, [pc, #24]	; 800212c <BME280_Read_hum+0xf4>
 8002116:	ee87 7aa6 	vdiv.f32	s14, s15, s13
}
 800211a:	eef0 7a47 	vmov.f32	s15, s14
 800211e:	eeb0 0a67 	vmov.f32	s0, s15
 8002122:	3718      	adds	r7, #24
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	c2c60000 	.word	0xc2c60000
 800212c:	44800000 	.word	0x44800000

08002130 <BME280_Read_press>:
static float BME280_Read_press(BME280_t *bme)
{
 8002130:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002134:	b0cc      	sub	sp, #304	; 0x130
 8002136:	af00      	add	r7, sp, #0
 8002138:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
   int64_t var1, var2, p;

   // Must be done first to get the t_fine variable set up

   int32_t adc_P = BME280_Read24(bme, BME280_PRESSUREDATA);
 800213c:	21f7      	movs	r1, #247	; 0xf7
 800213e:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8002142:	f7ff fef3 	bl	8001f2c <BME280_Read24>
 8002146:	4603      	mov	r3, r0
 8002148:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   adc_P >>= 4;
 800214c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002150:	111b      	asrs	r3, r3, #4
 8002152:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

   var1 = ((int64_t)bme->t_fine) - 128000;
 8002156:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800215a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215c:	17da      	asrs	r2, r3, #31
 800215e:	4698      	mov	r8, r3
 8002160:	4691      	mov	r9, r2
 8002162:	f5b8 33fa 	subs.w	r3, r8, #128000	; 0x1f400
 8002166:	64bb      	str	r3, [r7, #72]	; 0x48
 8002168:	f149 33ff 	adc.w	r3, r9, #4294967295
 800216c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800216e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002172:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
   var2 = var1 * var1 * (int64_t)bme->p6;
 8002176:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800217a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800217e:	fb03 f102 	mul.w	r1, r3, r2
 8002182:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8002186:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800218a:	fb02 f303 	mul.w	r3, r2, r3
 800218e:	18ca      	adds	r2, r1, r3
 8002190:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002194:	fba3 4503 	umull	r4, r5, r3, r3
 8002198:	1953      	adds	r3, r2, r5
 800219a:	461d      	mov	r5, r3
 800219c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80021a0:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80021a4:	b21b      	sxth	r3, r3
 80021a6:	17da      	asrs	r2, r3, #31
 80021a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80021ac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80021b0:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80021b4:	4603      	mov	r3, r0
 80021b6:	fb03 f205 	mul.w	r2, r3, r5
 80021ba:	460b      	mov	r3, r1
 80021bc:	fb04 f303 	mul.w	r3, r4, r3
 80021c0:	4413      	add	r3, r2
 80021c2:	4602      	mov	r2, r0
 80021c4:	fba4 ab02 	umull	sl, fp, r4, r2
 80021c8:	445b      	add	r3, fp
 80021ca:	469b      	mov	fp, r3
 80021cc:	e9c7 ab46 	strd	sl, fp, [r7, #280]	; 0x118
 80021d0:	e9c7 ab46 	strd	sl, fp, [r7, #280]	; 0x118
   var2 = var2 + ((var1 * (int64_t)bme->p5) << 17);
 80021d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80021d8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80021dc:	b21b      	sxth	r3, r3
 80021de:	17da      	asrs	r2, r3, #31
 80021e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80021e4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80021e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80021ec:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 80021f0:	462a      	mov	r2, r5
 80021f2:	fb02 f203 	mul.w	r2, r2, r3
 80021f6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80021fa:	4621      	mov	r1, r4
 80021fc:	fb01 f303 	mul.w	r3, r1, r3
 8002200:	441a      	add	r2, r3
 8002202:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002206:	4621      	mov	r1, r4
 8002208:	fba3 1301 	umull	r1, r3, r3, r1
 800220c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002210:	460b      	mov	r3, r1
 8002212:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002216:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800221a:	18d3      	adds	r3, r2, r3
 800221c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002220:	f04f 0000 	mov.w	r0, #0
 8002224:	f04f 0100 	mov.w	r1, #0
 8002228:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800222c:	462b      	mov	r3, r5
 800222e:	0459      	lsls	r1, r3, #17
 8002230:	4623      	mov	r3, r4
 8002232:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8002236:	4623      	mov	r3, r4
 8002238:	0458      	lsls	r0, r3, #17
 800223a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800223e:	1814      	adds	r4, r2, r0
 8002240:	643c      	str	r4, [r7, #64]	; 0x40
 8002242:	414b      	adcs	r3, r1
 8002244:	647b      	str	r3, [r7, #68]	; 0x44
 8002246:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800224a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
   var2 = var2 + (((int64_t)bme->p4) << 35);
 800224e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002252:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002256:	b21b      	sxth	r3, r3
 8002258:	17da      	asrs	r2, r3, #31
 800225a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800225e:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8002262:	f04f 0000 	mov.w	r0, #0
 8002266:	f04f 0100 	mov.w	r1, #0
 800226a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800226e:	00d9      	lsls	r1, r3, #3
 8002270:	2000      	movs	r0, #0
 8002272:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8002276:	1814      	adds	r4, r2, r0
 8002278:	63bc      	str	r4, [r7, #56]	; 0x38
 800227a:	414b      	adcs	r3, r1
 800227c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800227e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8002282:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
   var1 = ((var1 * var1 * (int64_t)bme->p3) >> 8) + ((var1 * (int64_t)bme->p2) << 12);
 8002286:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800228a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800228e:	fb03 f102 	mul.w	r1, r3, r2
 8002292:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8002296:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800229a:	fb02 f303 	mul.w	r3, r2, r3
 800229e:	18ca      	adds	r2, r1, r3
 80022a0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80022a4:	fba3 1303 	umull	r1, r3, r3, r3
 80022a8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80022ac:	460b      	mov	r3, r1
 80022ae:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80022b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022b6:	18d3      	adds	r3, r2, r3
 80022b8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80022bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80022c0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80022c4:	b21b      	sxth	r3, r3
 80022c6:	17da      	asrs	r2, r3, #31
 80022c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80022cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80022d0:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 80022d4:	462b      	mov	r3, r5
 80022d6:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 80022da:	4642      	mov	r2, r8
 80022dc:	fb02 f203 	mul.w	r2, r2, r3
 80022e0:	464b      	mov	r3, r9
 80022e2:	4621      	mov	r1, r4
 80022e4:	fb01 f303 	mul.w	r3, r1, r3
 80022e8:	4413      	add	r3, r2
 80022ea:	4622      	mov	r2, r4
 80022ec:	4641      	mov	r1, r8
 80022ee:	fba2 1201 	umull	r1, r2, r2, r1
 80022f2:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80022f6:	460a      	mov	r2, r1
 80022f8:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80022fc:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8002300:	4413      	add	r3, r2
 8002302:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002306:	f04f 0000 	mov.w	r0, #0
 800230a:	f04f 0100 	mov.w	r1, #0
 800230e:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8002312:	4623      	mov	r3, r4
 8002314:	0a18      	lsrs	r0, r3, #8
 8002316:	462b      	mov	r3, r5
 8002318:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800231c:	462b      	mov	r3, r5
 800231e:	1219      	asrs	r1, r3, #8
 8002320:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002324:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002328:	b21b      	sxth	r3, r3
 800232a:	17da      	asrs	r2, r3, #31
 800232c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002330:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002334:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002338:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800233c:	464a      	mov	r2, r9
 800233e:	fb02 f203 	mul.w	r2, r2, r3
 8002342:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002346:	4644      	mov	r4, r8
 8002348:	fb04 f303 	mul.w	r3, r4, r3
 800234c:	441a      	add	r2, r3
 800234e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002352:	4644      	mov	r4, r8
 8002354:	fba3 4304 	umull	r4, r3, r3, r4
 8002358:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800235c:	4623      	mov	r3, r4
 800235e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002362:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002366:	18d3      	adds	r3, r2, r3
 8002368:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800236c:	f04f 0200 	mov.w	r2, #0
 8002370:	f04f 0300 	mov.w	r3, #0
 8002374:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8002378:	464c      	mov	r4, r9
 800237a:	0323      	lsls	r3, r4, #12
 800237c:	4644      	mov	r4, r8
 800237e:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8002382:	4644      	mov	r4, r8
 8002384:	0322      	lsls	r2, r4, #12
 8002386:	1884      	adds	r4, r0, r2
 8002388:	633c      	str	r4, [r7, #48]	; 0x30
 800238a:	eb41 0303 	adc.w	r3, r1, r3
 800238e:	637b      	str	r3, [r7, #52]	; 0x34
 8002390:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002394:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
   var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)bme->p1) >> 33;
 8002398:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800239c:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 80023a0:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 80023a4:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 80023a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80023ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	2200      	movs	r2, #0
 80023b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80023b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80023ba:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 80023be:	462b      	mov	r3, r5
 80023c0:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 80023c4:	4642      	mov	r2, r8
 80023c6:	fb02 f203 	mul.w	r2, r2, r3
 80023ca:	464b      	mov	r3, r9
 80023cc:	4621      	mov	r1, r4
 80023ce:	fb01 f303 	mul.w	r3, r1, r3
 80023d2:	4413      	add	r3, r2
 80023d4:	4622      	mov	r2, r4
 80023d6:	4641      	mov	r1, r8
 80023d8:	fba2 1201 	umull	r1, r2, r2, r1
 80023dc:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80023e0:	460a      	mov	r2, r1
 80023e2:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80023e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80023ea:	4413      	add	r3, r2
 80023ec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80023f0:	f04f 0200 	mov.w	r2, #0
 80023f4:	f04f 0300 	mov.w	r3, #0
 80023f8:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80023fc:	4629      	mov	r1, r5
 80023fe:	104a      	asrs	r2, r1, #1
 8002400:	4629      	mov	r1, r5
 8002402:	17cb      	asrs	r3, r1, #31
 8002404:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

   if(var1 == 0)
 8002408:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800240c:	4313      	orrs	r3, r2
 800240e:	d102      	bne.n	8002416 <BME280_Read_press+0x2e6>
   {
      return 0; // avoid exception caused by division by zero
 8002410:	eddf 7aae 	vldr	s15, [pc, #696]	; 80026cc <BME280_Read_press+0x59c>
 8002414:	e152      	b.n	80026bc <BME280_Read_press+0x58c>
   }
   p    = 1048576 - adc_P;
 8002416:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800241a:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800241e:	17da      	asrs	r2, r3, #31
 8002420:	62bb      	str	r3, [r7, #40]	; 0x28
 8002422:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002424:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8002428:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
   p    = (((p << 31) - var2) * 3125) / var1;
 800242c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002430:	105b      	asrs	r3, r3, #1
 8002432:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002436:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800243a:	07db      	lsls	r3, r3, #31
 800243c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002440:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8002444:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8002448:	4621      	mov	r1, r4
 800244a:	1a89      	subs	r1, r1, r2
 800244c:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8002450:	4629      	mov	r1, r5
 8002452:	eb61 0303 	sbc.w	r3, r1, r3
 8002456:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800245a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800245e:	4622      	mov	r2, r4
 8002460:	462b      	mov	r3, r5
 8002462:	1891      	adds	r1, r2, r2
 8002464:	6239      	str	r1, [r7, #32]
 8002466:	415b      	adcs	r3, r3
 8002468:	627b      	str	r3, [r7, #36]	; 0x24
 800246a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800246e:	4621      	mov	r1, r4
 8002470:	1851      	adds	r1, r2, r1
 8002472:	61b9      	str	r1, [r7, #24]
 8002474:	4629      	mov	r1, r5
 8002476:	414b      	adcs	r3, r1
 8002478:	61fb      	str	r3, [r7, #28]
 800247a:	f04f 0200 	mov.w	r2, #0
 800247e:	f04f 0300 	mov.w	r3, #0
 8002482:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002486:	4649      	mov	r1, r9
 8002488:	018b      	lsls	r3, r1, #6
 800248a:	4641      	mov	r1, r8
 800248c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002490:	4641      	mov	r1, r8
 8002492:	018a      	lsls	r2, r1, #6
 8002494:	4641      	mov	r1, r8
 8002496:	1889      	adds	r1, r1, r2
 8002498:	6139      	str	r1, [r7, #16]
 800249a:	4649      	mov	r1, r9
 800249c:	eb43 0101 	adc.w	r1, r3, r1
 80024a0:	6179      	str	r1, [r7, #20]
 80024a2:	f04f 0200 	mov.w	r2, #0
 80024a6:	f04f 0300 	mov.w	r3, #0
 80024aa:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80024ae:	4649      	mov	r1, r9
 80024b0:	008b      	lsls	r3, r1, #2
 80024b2:	4641      	mov	r1, r8
 80024b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80024b8:	4641      	mov	r1, r8
 80024ba:	008a      	lsls	r2, r1, #2
 80024bc:	4610      	mov	r0, r2
 80024be:	4619      	mov	r1, r3
 80024c0:	4603      	mov	r3, r0
 80024c2:	4622      	mov	r2, r4
 80024c4:	189b      	adds	r3, r3, r2
 80024c6:	60bb      	str	r3, [r7, #8]
 80024c8:	460b      	mov	r3, r1
 80024ca:	462a      	mov	r2, r5
 80024cc:	eb42 0303 	adc.w	r3, r2, r3
 80024d0:	60fb      	str	r3, [r7, #12]
 80024d2:	f04f 0200 	mov.w	r2, #0
 80024d6:	f04f 0300 	mov.w	r3, #0
 80024da:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80024de:	4649      	mov	r1, r9
 80024e0:	008b      	lsls	r3, r1, #2
 80024e2:	4641      	mov	r1, r8
 80024e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80024e8:	4641      	mov	r1, r8
 80024ea:	008a      	lsls	r2, r1, #2
 80024ec:	4610      	mov	r0, r2
 80024ee:	4619      	mov	r1, r3
 80024f0:	4603      	mov	r3, r0
 80024f2:	4622      	mov	r2, r4
 80024f4:	189b      	adds	r3, r3, r2
 80024f6:	67bb      	str	r3, [r7, #120]	; 0x78
 80024f8:	462b      	mov	r3, r5
 80024fa:	460a      	mov	r2, r1
 80024fc:	eb42 0303 	adc.w	r3, r2, r3
 8002500:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002502:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8002506:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800250a:	f7fe fbd5 	bl	8000cb8 <__aeabi_ldivmod>
 800250e:	4602      	mov	r2, r0
 8002510:	460b      	mov	r3, r1
 8002512:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
   var1 = (((int64_t)bme->p9) * (p >> 13) * (p >> 13)) >> 25;
 8002516:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800251a:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800251e:	b21b      	sxth	r3, r3
 8002520:	17da      	asrs	r2, r3, #31
 8002522:	673b      	str	r3, [r7, #112]	; 0x70
 8002524:	677a      	str	r2, [r7, #116]	; 0x74
 8002526:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800252a:	f04f 0000 	mov.w	r0, #0
 800252e:	f04f 0100 	mov.w	r1, #0
 8002532:	0b50      	lsrs	r0, r2, #13
 8002534:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8002538:	1359      	asrs	r1, r3, #13
 800253a:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 800253e:	462b      	mov	r3, r5
 8002540:	fb00 f203 	mul.w	r2, r0, r3
 8002544:	4623      	mov	r3, r4
 8002546:	fb03 f301 	mul.w	r3, r3, r1
 800254a:	4413      	add	r3, r2
 800254c:	4622      	mov	r2, r4
 800254e:	fba2 1200 	umull	r1, r2, r2, r0
 8002552:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002556:	460a      	mov	r2, r1
 8002558:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 800255c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002560:	4413      	add	r3, r2
 8002562:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002566:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800256a:	f04f 0000 	mov.w	r0, #0
 800256e:	f04f 0100 	mov.w	r1, #0
 8002572:	0b50      	lsrs	r0, r2, #13
 8002574:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8002578:	1359      	asrs	r1, r3, #13
 800257a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800257e:	462b      	mov	r3, r5
 8002580:	fb00 f203 	mul.w	r2, r0, r3
 8002584:	4623      	mov	r3, r4
 8002586:	fb03 f301 	mul.w	r3, r3, r1
 800258a:	4413      	add	r3, r2
 800258c:	4622      	mov	r2, r4
 800258e:	fba2 1200 	umull	r1, r2, r2, r0
 8002592:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002596:	460a      	mov	r2, r1
 8002598:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 800259c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80025a0:	4413      	add	r3, r2
 80025a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80025a6:	f04f 0200 	mov.w	r2, #0
 80025aa:	f04f 0300 	mov.w	r3, #0
 80025ae:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80025b2:	4621      	mov	r1, r4
 80025b4:	0e4a      	lsrs	r2, r1, #25
 80025b6:	4629      	mov	r1, r5
 80025b8:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80025bc:	4629      	mov	r1, r5
 80025be:	164b      	asrs	r3, r1, #25
 80025c0:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
   var2 = (((int64_t)bme->p8) * p) >> 19;
 80025c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025c8:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80025cc:	b21b      	sxth	r3, r3
 80025ce:	17da      	asrs	r2, r3, #31
 80025d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80025d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80025d4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80025d8:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80025dc:	462a      	mov	r2, r5
 80025de:	fb02 f203 	mul.w	r2, r2, r3
 80025e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80025e6:	4621      	mov	r1, r4
 80025e8:	fb01 f303 	mul.w	r3, r1, r3
 80025ec:	4413      	add	r3, r2
 80025ee:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80025f2:	4621      	mov	r1, r4
 80025f4:	fba2 1201 	umull	r1, r2, r2, r1
 80025f8:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80025fc:	460a      	mov	r2, r1
 80025fe:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8002602:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002606:	4413      	add	r3, r2
 8002608:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800260c:	f04f 0200 	mov.w	r2, #0
 8002610:	f04f 0300 	mov.w	r3, #0
 8002614:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8002618:	4621      	mov	r1, r4
 800261a:	0cca      	lsrs	r2, r1, #19
 800261c:	4629      	mov	r1, r5
 800261e:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8002622:	4629      	mov	r1, r5
 8002624:	14cb      	asrs	r3, r1, #19
 8002626:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

   p = ((p + var1 + var2) >> 8) + (((int64_t)bme->p7) << 4);
 800262a:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800262e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8002632:	1884      	adds	r4, r0, r2
 8002634:	663c      	str	r4, [r7, #96]	; 0x60
 8002636:	eb41 0303 	adc.w	r3, r1, r3
 800263a:	667b      	str	r3, [r7, #100]	; 0x64
 800263c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8002640:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002644:	4621      	mov	r1, r4
 8002646:	1889      	adds	r1, r1, r2
 8002648:	65b9      	str	r1, [r7, #88]	; 0x58
 800264a:	4629      	mov	r1, r5
 800264c:	eb43 0101 	adc.w	r1, r3, r1
 8002650:	65f9      	str	r1, [r7, #92]	; 0x5c
 8002652:	f04f 0000 	mov.w	r0, #0
 8002656:	f04f 0100 	mov.w	r1, #0
 800265a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800265e:	4623      	mov	r3, r4
 8002660:	0a18      	lsrs	r0, r3, #8
 8002662:	462b      	mov	r3, r5
 8002664:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8002668:	462b      	mov	r3, r5
 800266a:	1219      	asrs	r1, r3, #8
 800266c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002670:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8002674:	b21b      	sxth	r3, r3
 8002676:	17da      	asrs	r2, r3, #31
 8002678:	653b      	str	r3, [r7, #80]	; 0x50
 800267a:	657a      	str	r2, [r7, #84]	; 0x54
 800267c:	f04f 0200 	mov.w	r2, #0
 8002680:	f04f 0300 	mov.w	r3, #0
 8002684:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002688:	464c      	mov	r4, r9
 800268a:	0123      	lsls	r3, r4, #4
 800268c:	4644      	mov	r4, r8
 800268e:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8002692:	4644      	mov	r4, r8
 8002694:	0122      	lsls	r2, r4, #4
 8002696:	1884      	adds	r4, r0, r2
 8002698:	603c      	str	r4, [r7, #0]
 800269a:	eb41 0303 	adc.w	r3, r1, r3
 800269e:	607b      	str	r3, [r7, #4]
 80026a0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80026a4:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
   return (int32_t)p / 256;
 80026a8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	da00      	bge.n	80026b2 <BME280_Read_press+0x582>
 80026b0:	33ff      	adds	r3, #255	; 0xff
 80026b2:	121b      	asrs	r3, r3, #8
 80026b4:	ee07 3a90 	vmov	s15, r3
 80026b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80026bc:	eeb0 0a67 	vmov.f32	s0, s15
 80026c0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80026c4:	46bd      	mov	sp, r7
 80026c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026ca:	bf00      	nop
 80026cc:	00000000 	.word	0x00000000

080026d0 <BME280_ReadAll>:
void BME280_ReadAll(BME280_t *bme, float *T, float *P, float *H)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
 80026dc:	603b      	str	r3, [r7, #0]
   *T = BME280_Read_temp(bme);
 80026de:	68f8      	ldr	r0, [r7, #12]
 80026e0:	f7ff fc52 	bl	8001f88 <BME280_Read_temp>
 80026e4:	eef0 7a40 	vmov.f32	s15, s0
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	edc3 7a00 	vstr	s15, [r3]
   *P = BME280_Read_press(bme) / 100;
 80026ee:	68f8      	ldr	r0, [r7, #12]
 80026f0:	f7ff fd1e 	bl	8002130 <BME280_Read_press>
 80026f4:	eeb0 7a40 	vmov.f32	s14, s0
 80026f8:	eddf 6a09 	vldr	s13, [pc, #36]	; 8002720 <BME280_ReadAll+0x50>
 80026fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	edc3 7a00 	vstr	s15, [r3]
   *H = BME280_Read_hum(bme);
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f7ff fc96 	bl	8002038 <BME280_Read_hum>
 800270c:	eef0 7a40 	vmov.f32	s15, s0
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	edc3 7a00 	vstr	s15, [r3]
}
 8002716:	bf00      	nop
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	42c80000 	.word	0x42c80000

08002724 <BME280_Init>:
void BME280_Init(BME280_t *bme, SPI_HandleTypeDef *spi, GPIO_TypeDef *CsPort, uint16_t CsPin)
{
 8002724:	b590      	push	{r4, r7, lr}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
 8002730:	807b      	strh	r3, [r7, #2]
   bme->bme_spi       = spi;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	68ba      	ldr	r2, [r7, #8]
 8002736:	601a      	str	r2, [r3, #0]
   bme->bme280_CsPort = CsPort;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	605a      	str	r2, [r3, #4]
   bme->bme280_CsPin  = CsPin;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	887a      	ldrh	r2, [r7, #2]
 8002742:	855a      	strh	r2, [r3, #42]	; 0x2a
   bme->t1            = BME280_Read16LE(bme, BME280_DIG_T1);
 8002744:	2188      	movs	r1, #136	; 0x88
 8002746:	68f8      	ldr	r0, [r7, #12]
 8002748:	f7ff fbac 	bl	8001ea4 <BME280_Read16LE>
 800274c:	4603      	mov	r3, r0
 800274e:	461a      	mov	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	84da      	strh	r2, [r3, #38]	; 0x26
   bme->t2            = BME280_Read16LE(bme, BME280_DIG_T2);
 8002754:	218a      	movs	r1, #138	; 0x8a
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f7ff fba4 	bl	8001ea4 <BME280_Read16LE>
 800275c:	4603      	mov	r3, r0
 800275e:	b21a      	sxth	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	819a      	strh	r2, [r3, #12]
   bme->t3            = BME280_Read16LE(bme, BME280_DIG_T3);
 8002764:	218c      	movs	r1, #140	; 0x8c
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f7ff fb9c 	bl	8001ea4 <BME280_Read16LE>
 800276c:	4603      	mov	r3, r0
 800276e:	b21a      	sxth	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	81da      	strh	r2, [r3, #14]

   bme->p1 = BME280_Read16LE(bme, BME280_DIG_P1);
 8002774:	218e      	movs	r1, #142	; 0x8e
 8002776:	68f8      	ldr	r0, [r7, #12]
 8002778:	f7ff fb94 	bl	8001ea4 <BME280_Read16LE>
 800277c:	4603      	mov	r3, r0
 800277e:	461a      	mov	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	851a      	strh	r2, [r3, #40]	; 0x28
   bme->p2 = BME280_Read16LE(bme, BME280_DIG_P2);
 8002784:	2190      	movs	r1, #144	; 0x90
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	f7ff fb8c 	bl	8001ea4 <BME280_Read16LE>
 800278c:	4603      	mov	r3, r0
 800278e:	b21a      	sxth	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	821a      	strh	r2, [r3, #16]
   bme->p3 = BME280_Read16LE(bme, BME280_DIG_P3);
 8002794:	2192      	movs	r1, #146	; 0x92
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f7ff fb84 	bl	8001ea4 <BME280_Read16LE>
 800279c:	4603      	mov	r3, r0
 800279e:	b21a      	sxth	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	825a      	strh	r2, [r3, #18]
   bme->p4 = BME280_Read16LE(bme, BME280_DIG_P4);
 80027a4:	2194      	movs	r1, #148	; 0x94
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f7ff fb7c 	bl	8001ea4 <BME280_Read16LE>
 80027ac:	4603      	mov	r3, r0
 80027ae:	b21a      	sxth	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	829a      	strh	r2, [r3, #20]
   bme->p5 = BME280_Read16LE(bme, BME280_DIG_P5);
 80027b4:	2196      	movs	r1, #150	; 0x96
 80027b6:	68f8      	ldr	r0, [r7, #12]
 80027b8:	f7ff fb74 	bl	8001ea4 <BME280_Read16LE>
 80027bc:	4603      	mov	r3, r0
 80027be:	b21a      	sxth	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	82da      	strh	r2, [r3, #22]
   bme->p6 = BME280_Read16LE(bme, BME280_DIG_P6);
 80027c4:	2198      	movs	r1, #152	; 0x98
 80027c6:	68f8      	ldr	r0, [r7, #12]
 80027c8:	f7ff fb6c 	bl	8001ea4 <BME280_Read16LE>
 80027cc:	4603      	mov	r3, r0
 80027ce:	b21a      	sxth	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	831a      	strh	r2, [r3, #24]
   bme->p7 = BME280_Read16LE(bme, BME280_DIG_P7);
 80027d4:	219a      	movs	r1, #154	; 0x9a
 80027d6:	68f8      	ldr	r0, [r7, #12]
 80027d8:	f7ff fb64 	bl	8001ea4 <BME280_Read16LE>
 80027dc:	4603      	mov	r3, r0
 80027de:	b21a      	sxth	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	835a      	strh	r2, [r3, #26]
   bme->p8 = BME280_Read16LE(bme, BME280_DIG_P8);
 80027e4:	219c      	movs	r1, #156	; 0x9c
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f7ff fb5c 	bl	8001ea4 <BME280_Read16LE>
 80027ec:	4603      	mov	r3, r0
 80027ee:	b21a      	sxth	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	839a      	strh	r2, [r3, #28]
   bme->p9 = BME280_Read16LE(bme, BME280_DIG_P9);
 80027f4:	219e      	movs	r1, #158	; 0x9e
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f7ff fb54 	bl	8001ea4 <BME280_Read16LE>
 80027fc:	4603      	mov	r3, r0
 80027fe:	b21a      	sxth	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	83da      	strh	r2, [r3, #30]

   bme->h1 = BME280_Read8(bme, BME280_DIG_H1);
 8002804:	21a1      	movs	r1, #161	; 0xa1
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	f7ff fb02 	bl	8001e10 <BME280_Read8>
 800280c:	4603      	mov	r3, r0
 800280e:	461a      	mov	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	721a      	strb	r2, [r3, #8]
   bme->h2 = BME280_Read16LE(bme, BME280_DIG_H2);
 8002814:	21e1      	movs	r1, #225	; 0xe1
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f7ff fb44 	bl	8001ea4 <BME280_Read16LE>
 800281c:	4603      	mov	r3, r0
 800281e:	b21a      	sxth	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	841a      	strh	r2, [r3, #32]
   bme->h3 = BME280_Read8(bme, BME280_DIG_H3);
 8002824:	21e3      	movs	r1, #227	; 0xe3
 8002826:	68f8      	ldr	r0, [r7, #12]
 8002828:	f7ff faf2 	bl	8001e10 <BME280_Read8>
 800282c:	4603      	mov	r3, r0
 800282e:	461a      	mov	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	725a      	strb	r2, [r3, #9]
   bme->h4 = ((BME280_Read8(bme, BME280_DIG_H4) << 4) | (BME280_Read8(bme, BME280_DIG_H4 + 1) & 0xF));
 8002834:	21e4      	movs	r1, #228	; 0xe4
 8002836:	68f8      	ldr	r0, [r7, #12]
 8002838:	f7ff faea 	bl	8001e10 <BME280_Read8>
 800283c:	4603      	mov	r3, r0
 800283e:	011b      	lsls	r3, r3, #4
 8002840:	b21c      	sxth	r4, r3
 8002842:	21e5      	movs	r1, #229	; 0xe5
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f7ff fae3 	bl	8001e10 <BME280_Read8>
 800284a:	4603      	mov	r3, r0
 800284c:	b21b      	sxth	r3, r3
 800284e:	f003 030f 	and.w	r3, r3, #15
 8002852:	b21b      	sxth	r3, r3
 8002854:	4323      	orrs	r3, r4
 8002856:	b21a      	sxth	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	845a      	strh	r2, [r3, #34]	; 0x22
   bme->h5 = ((BME280_Read8(bme, BME280_DIG_H5 + 1) << 4) | (BME280_Read8(bme, BME280_DIG_H5) >> 4));
 800285c:	21e6      	movs	r1, #230	; 0xe6
 800285e:	68f8      	ldr	r0, [r7, #12]
 8002860:	f7ff fad6 	bl	8001e10 <BME280_Read8>
 8002864:	4603      	mov	r3, r0
 8002866:	011b      	lsls	r3, r3, #4
 8002868:	b21c      	sxth	r4, r3
 800286a:	21e5      	movs	r1, #229	; 0xe5
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f7ff facf 	bl	8001e10 <BME280_Read8>
 8002872:	4603      	mov	r3, r0
 8002874:	091b      	lsrs	r3, r3, #4
 8002876:	b2db      	uxtb	r3, r3
 8002878:	b21b      	sxth	r3, r3
 800287a:	4323      	orrs	r3, r4
 800287c:	b21a      	sxth	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	849a      	strh	r2, [r3, #36]	; 0x24
   bme->h6 = (int8_t)BME280_Read8(bme, BME280_DIG_H6);
 8002882:	21e7      	movs	r1, #231	; 0xe7
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f7ff fac3 	bl	8001e10 <BME280_Read8>
 800288a:	4603      	mov	r3, r0
 800288c:	b25a      	sxtb	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	729a      	strb	r2, [r3, #10]
   BME280_Write8(bme, BME280_HUM_CONTROL, 0b00000100);
 8002892:	2204      	movs	r2, #4
 8002894:	21f2      	movs	r1, #242	; 0xf2
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f7ff fae1 	bl	8001e5e <BME280_Write8>
   BME280_Write8(bme, BME280_CONTROL, 0b10110111);
 800289c:	22b7      	movs	r2, #183	; 0xb7
 800289e:	21f4      	movs	r1, #244	; 0xf4
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f7ff fadc 	bl	8001e5e <BME280_Write8>
   BME280_Write8(bme, BME280_CONFIG, 0b00000000);
 80028a6:	2200      	movs	r2, #0
 80028a8:	21f5      	movs	r1, #245	; 0xf5
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f7ff fad7 	bl	8001e5e <BME280_Write8>
}
 80028b0:	bf00      	nop
 80028b2:	3714      	adds	r7, #20
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd90      	pop	{r4, r7, pc}

080028b8 <Crc>:
#include "crc.h"
#include "main.h"
int RandomNumber[] = { 131456, 215134, 31254, 4135, 516454, 642754, 71363, 85362475, 9144316, 10341957, 11345134, 11354342 };
int k              = 0;
uint32_t Crc(uint32_t PreviuseCRC, uint32_t DataLength, uint8_t *data)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b087      	sub	sp, #28
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
   PreviuseCRC ^= data[0];
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	461a      	mov	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	4053      	eors	r3, r2
 80028ce:	60fb      	str	r3, [r7, #12]
   for(uint32_t i = 1; i < DataLength; i++)
 80028d0:	2301      	movs	r3, #1
 80028d2:	617b      	str	r3, [r7, #20]
 80028d4:	e032      	b.n	800293c <Crc+0x84>
   {
      uint32_t temp = data[i];
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	4413      	add	r3, r2
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	613b      	str	r3, [r7, #16]
      if(temp == 0x00000000 )
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d115      	bne.n	8002912 <Crc+0x5a>
      {
         temp = RandomNumber[k % (sizeof(RandomNumber)-1)];
 80028e6:	4b1c      	ldr	r3, [pc, #112]	; (8002958 <Crc+0xa0>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4619      	mov	r1, r3
 80028ec:	4b1b      	ldr	r3, [pc, #108]	; (800295c <Crc+0xa4>)
 80028ee:	fba3 2301 	umull	r2, r3, r3, r1
 80028f2:	095a      	lsrs	r2, r3, #5
 80028f4:	4613      	mov	r3, r2
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	4413      	add	r3, r2
 80028fa:	011b      	lsls	r3, r3, #4
 80028fc:	1a9b      	subs	r3, r3, r2
 80028fe:	1aca      	subs	r2, r1, r3
 8002900:	4b17      	ldr	r3, [pc, #92]	; (8002960 <Crc+0xa8>)
 8002902:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002906:	613b      	str	r3, [r7, #16]
         k++;
 8002908:	4b13      	ldr	r3, [pc, #76]	; (8002958 <Crc+0xa0>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	3301      	adds	r3, #1
 800290e:	4a12      	ldr	r2, [pc, #72]	; (8002958 <Crc+0xa0>)
 8002910:	6013      	str	r3, [r2, #0]
      }
      PreviuseCRC ^= ((uint32_t)(temp) * (256 * i));
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	fb02 f303 	mul.w	r3, r2, r3
 800291a:	021b      	lsls	r3, r3, #8
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	4053      	eors	r3, r2
 8002920:	60fb      	str	r3, [r7, #12]
      if(PreviuseCRC & 0x80000000)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2b00      	cmp	r3, #0
 8002926:	da03      	bge.n	8002930 <Crc+0x78>
      {
         PreviuseCRC ^= 0xABC245C2;
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	4b0e      	ldr	r3, [pc, #56]	; (8002964 <Crc+0xac>)
 800292c:	4053      	eors	r3, r2
 800292e:	60fb      	str	r3, [r7, #12]
      }
      PreviuseCRC <<= 1;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	60fb      	str	r3, [r7, #12]
   for(uint32_t i = 1; i < DataLength; i++)
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	3301      	adds	r3, #1
 800293a:	617b      	str	r3, [r7, #20]
 800293c:	697a      	ldr	r2, [r7, #20]
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	429a      	cmp	r2, r3
 8002942:	d3c8      	bcc.n	80028d6 <Crc+0x1e>
   }
   k = 0;
 8002944:	4b04      	ldr	r3, [pc, #16]	; (8002958 <Crc+0xa0>)
 8002946:	2200      	movs	r2, #0
 8002948:	601a      	str	r2, [r3, #0]
   return PreviuseCRC;
 800294a:	68fb      	ldr	r3, [r7, #12]
}
 800294c:	4618      	mov	r0, r3
 800294e:	371c      	adds	r7, #28
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr
 8002958:	200002ac 	.word	0x200002ac
 800295c:	ae4c415d 	.word	0xae4c415d
 8002960:	20000024 	.word	0x20000024
 8002964:	abc245c2 	.word	0xabc245c2

08002968 <RepareMessage>:
CRCStatus_TypeDef RepareMessage(uint32_t OryginalCRC, uint8_t *data, uint32_t DataLength)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b088      	sub	sp, #32
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
   uint8_t temp = 1;
 8002974:	2301      	movs	r3, #1
 8002976:	75fb      	strb	r3, [r7, #23]
   for(int i = 0; i < DataLength; i++)
 8002978:	2300      	movs	r3, #0
 800297a:	61fb      	str	r3, [r7, #28]
 800297c:	e03b      	b.n	80029f6 <RepareMessage+0x8e>
   {
      for(int j = 0; j < 8; j++)
 800297e:	2300      	movs	r3, #0
 8002980:	61bb      	str	r3, [r7, #24]
 8002982:	e032      	b.n	80029ea <RepareMessage+0x82>
      {
         data[i] ^= (temp << j);
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	68ba      	ldr	r2, [r7, #8]
 8002988:	4413      	add	r3, r2
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	b25a      	sxtb	r2, r3
 800298e:	7df9      	ldrb	r1, [r7, #23]
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	fa01 f303 	lsl.w	r3, r1, r3
 8002996:	b25b      	sxtb	r3, r3
 8002998:	4053      	eors	r3, r2
 800299a:	b259      	sxtb	r1, r3
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	68ba      	ldr	r2, [r7, #8]
 80029a0:	4413      	add	r3, r2
 80029a2:	b2ca      	uxtb	r2, r1
 80029a4:	701a      	strb	r2, [r3, #0]
         if(OryginalCRC == Crc(CRC_INITIAL_VALUE, DataLength - 4, data))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	3b04      	subs	r3, #4
 80029aa:	68ba      	ldr	r2, [r7, #8]
 80029ac:	4619      	mov	r1, r3
 80029ae:	f04f 30ff 	mov.w	r0, #4294967295
 80029b2:	f7ff ff81 	bl	80028b8 <Crc>
 80029b6:	4602      	mov	r2, r0
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d101      	bne.n	80029c2 <RepareMessage+0x5a>
         {
            return CRC_OK;
 80029be:	2301      	movs	r3, #1
 80029c0:	e01e      	b.n	8002a00 <RepareMessage+0x98>
         }
         else
         {
            data[i] ^= (temp << j);
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	68ba      	ldr	r2, [r7, #8]
 80029c6:	4413      	add	r3, r2
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	b25a      	sxtb	r2, r3
 80029cc:	7df9      	ldrb	r1, [r7, #23]
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	fa01 f303 	lsl.w	r3, r1, r3
 80029d4:	b25b      	sxtb	r3, r3
 80029d6:	4053      	eors	r3, r2
 80029d8:	b259      	sxtb	r1, r3
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	68ba      	ldr	r2, [r7, #8]
 80029de:	4413      	add	r3, r2
 80029e0:	b2ca      	uxtb	r2, r1
 80029e2:	701a      	strb	r2, [r3, #0]
      for(int j = 0; j < 8; j++)
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	3301      	adds	r3, #1
 80029e8:	61bb      	str	r3, [r7, #24]
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	2b07      	cmp	r3, #7
 80029ee:	ddc9      	ble.n	8002984 <RepareMessage+0x1c>
   for(int i = 0; i < DataLength; i++)
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	3301      	adds	r3, #1
 80029f4:	61fb      	str	r3, [r7, #28]
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d8bf      	bhi.n	800297e <RepareMessage+0x16>
         }
      }
   }
   return CRC_ERROR;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3720      	adds	r7, #32
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002a0e:	4b0f      	ldr	r3, [pc, #60]	; (8002a4c <MX_DMA_Init+0x44>)
 8002a10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a12:	4a0e      	ldr	r2, [pc, #56]	; (8002a4c <MX_DMA_Init+0x44>)
 8002a14:	f043 0304 	orr.w	r3, r3, #4
 8002a18:	6493      	str	r3, [r2, #72]	; 0x48
 8002a1a:	4b0c      	ldr	r3, [pc, #48]	; (8002a4c <MX_DMA_Init+0x44>)
 8002a1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a1e:	f003 0304 	and.w	r3, r3, #4
 8002a22:	607b      	str	r3, [r7, #4]
 8002a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002a26:	4b09      	ldr	r3, [pc, #36]	; (8002a4c <MX_DMA_Init+0x44>)
 8002a28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a2a:	4a08      	ldr	r2, [pc, #32]	; (8002a4c <MX_DMA_Init+0x44>)
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	6493      	str	r3, [r2, #72]	; 0x48
 8002a32:	4b06      	ldr	r3, [pc, #24]	; (8002a4c <MX_DMA_Init+0x44>)
 8002a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	603b      	str	r3, [r7, #0]
 8002a3c:	683b      	ldr	r3, [r7, #0]

}
 8002a3e:	bf00      	nop
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	40021000 	.word	0x40021000

08002a50 <e_papier_reset>:
const unsigned char lut_bb[] = {
   0x80, 0x17, 0x00, 0x00, 0x00, 0x02, 0x90, 0x17, 0x17, 0x00, 0x00, 0x02, 0x80, 0x0A, 0x01, 0x00, 0x00, 0x01, 0x50, 0x0E, 0x0E,
   0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};
void e_papier_reset(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(EPAPIER_RST_GPIO_Port, EPAPIER_RST_Pin, 1);
 8002a54:	2201      	movs	r2, #1
 8002a56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a5a:	480d      	ldr	r0, [pc, #52]	; (8002a90 <e_papier_reset+0x40>)
 8002a5c:	f005 fe2e 	bl	80086bc <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8002a60:	20c8      	movs	r0, #200	; 0xc8
 8002a62:	f005 f831 	bl	8007ac8 <HAL_Delay>
   HAL_GPIO_WritePin(EPAPIER_RST_GPIO_Port, EPAPIER_RST_Pin, 0);
 8002a66:	2200      	movs	r2, #0
 8002a68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a6c:	4808      	ldr	r0, [pc, #32]	; (8002a90 <e_papier_reset+0x40>)
 8002a6e:	f005 fe25 	bl	80086bc <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8002a72:	20c8      	movs	r0, #200	; 0xc8
 8002a74:	f005 f828 	bl	8007ac8 <HAL_Delay>
   HAL_GPIO_WritePin(EPAPIER_RST_GPIO_Port, EPAPIER_RST_Pin, 1);
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a7e:	4804      	ldr	r0, [pc, #16]	; (8002a90 <e_papier_reset+0x40>)
 8002a80:	f005 fe1c 	bl	80086bc <HAL_GPIO_WritePin>
   HAL_Delay(200);
 8002a84:	20c8      	movs	r0, #200	; 0xc8
 8002a86:	f005 f81f 	bl	8007ac8 <HAL_Delay>
}
 8002a8a:	bf00      	nop
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	48000400 	.word	0x48000400

08002a94 <e_papier_send_command>:
void e_papier_send_command(uint8_t command)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	71fb      	strb	r3, [r7, #7]
   HAL_GPIO_WritePin(SCREENS_DC_GPIO_Port, SCREENS_DC_Pin, 0);
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	2101      	movs	r1, #1
 8002aa2:	480c      	ldr	r0, [pc, #48]	; (8002ad4 <e_papier_send_command+0x40>)
 8002aa4:	f005 fe0a 	bl	80086bc <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(EPAPIER_CS_GPIO_Port, EPAPIER_CS_Pin, 0);
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	2102      	movs	r1, #2
 8002aac:	4809      	ldr	r0, [pc, #36]	; (8002ad4 <e_papier_send_command+0x40>)
 8002aae:	f005 fe05 	bl	80086bc <HAL_GPIO_WritePin>
   HAL_SPI_Transmit(e_papier_spi, &command, 1, 1000);
 8002ab2:	4b09      	ldr	r3, [pc, #36]	; (8002ad8 <e_papier_send_command+0x44>)
 8002ab4:	6818      	ldr	r0, [r3, #0]
 8002ab6:	1df9      	adds	r1, r7, #7
 8002ab8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002abc:	2201      	movs	r2, #1
 8002abe:	f008 f8fc 	bl	800acba <HAL_SPI_Transmit>
   HAL_GPIO_WritePin(EPAPIER_CS_GPIO_Port, EPAPIER_CS_Pin, 1);
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	2102      	movs	r1, #2
 8002ac6:	4803      	ldr	r0, [pc, #12]	; (8002ad4 <e_papier_send_command+0x40>)
 8002ac8:	f005 fdf8 	bl	80086bc <HAL_GPIO_WritePin>
}
 8002acc:	bf00      	nop
 8002ace:	3708      	adds	r7, #8
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	48000400 	.word	0x48000400
 8002ad8:	200002b0 	.word	0x200002b0

08002adc <e_papier_send_data>:
void e_papier_send_data(uint8_t data)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	71fb      	strb	r3, [r7, #7]
   HAL_GPIO_WritePin(SCREENS_DC_GPIO_Port, SCREENS_DC_Pin, 1);
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	2101      	movs	r1, #1
 8002aea:	480c      	ldr	r0, [pc, #48]	; (8002b1c <e_papier_send_data+0x40>)
 8002aec:	f005 fde6 	bl	80086bc <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(EPAPIER_CS_GPIO_Port, EPAPIER_CS_Pin, 0);
 8002af0:	2200      	movs	r2, #0
 8002af2:	2102      	movs	r1, #2
 8002af4:	4809      	ldr	r0, [pc, #36]	; (8002b1c <e_papier_send_data+0x40>)
 8002af6:	f005 fde1 	bl	80086bc <HAL_GPIO_WritePin>
   HAL_SPI_Transmit(e_papier_spi, &data, 1, 1000);
 8002afa:	4b09      	ldr	r3, [pc, #36]	; (8002b20 <e_papier_send_data+0x44>)
 8002afc:	6818      	ldr	r0, [r3, #0]
 8002afe:	1df9      	adds	r1, r7, #7
 8002b00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b04:	2201      	movs	r2, #1
 8002b06:	f008 f8d8 	bl	800acba <HAL_SPI_Transmit>
   HAL_GPIO_WritePin(EPAPIER_CS_GPIO_Port, EPAPIER_CS_Pin, 1);
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	2102      	movs	r1, #2
 8002b0e:	4803      	ldr	r0, [pc, #12]	; (8002b1c <e_papier_send_data+0x40>)
 8002b10:	f005 fdd4 	bl	80086bc <HAL_GPIO_WritePin>
}
 8002b14:	bf00      	nop
 8002b16:	3708      	adds	r7, #8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	48000400 	.word	0x48000400
 8002b20:	200002b0 	.word	0x200002b0

08002b24 <e_papier_wait_until_idle>:
void e_papier_wait_until_idle(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
   while(HAL_GPIO_ReadPin(EPAPIER_BUSY_GPIO_Port, EPAPIER_BUSY_Pin) == 0)
 8002b28:	e002      	b.n	8002b30 <e_papier_wait_until_idle+0xc>
   {
      osDelay(100);
 8002b2a:	2064      	movs	r0, #100	; 0x64
 8002b2c:	f00b ff7e 	bl	800ea2c <osDelay>
   while(HAL_GPIO_ReadPin(EPAPIER_BUSY_GPIO_Port, EPAPIER_BUSY_Pin) == 0)
 8002b30:	2104      	movs	r1, #4
 8002b32:	4804      	ldr	r0, [pc, #16]	; (8002b44 <e_papier_wait_until_idle+0x20>)
 8002b34:	f005 fdaa 	bl	800868c <HAL_GPIO_ReadPin>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d0f5      	beq.n	8002b2a <e_papier_wait_until_idle+0x6>
   }
}
 8002b3e:	bf00      	nop
 8002b40:	bf00      	nop
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	48000400 	.word	0x48000400

08002b48 <e_papier_set_pixel>:
void e_papier_set_pixel(uint16_t x, uint16_t y, color_t color)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	80fb      	strh	r3, [r7, #6]
 8002b52:	460b      	mov	r3, r1
 8002b54:	80bb      	strh	r3, [r7, #4]
 8002b56:	4613      	mov	r3, r2
 8002b58:	70fb      	strb	r3, [r7, #3]
   if(x >= EPD_WIDTH || x < 0 || y >= EPD_HEIGHT || y < 0)
 8002b5a:	88fb      	ldrh	r3, [r7, #6]
 8002b5c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002b60:	d247      	bcs.n	8002bf2 <e_papier_set_pixel+0xaa>
 8002b62:	88bb      	ldrh	r3, [r7, #4]
 8002b64:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002b68:	d243      	bcs.n	8002bf2 <e_papier_set_pixel+0xaa>
   {
      return;
   }
   if(color == WHITE)
 8002b6a:	78fb      	ldrb	r3, [r7, #3]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d120      	bne.n	8002bb2 <e_papier_set_pixel+0x6a>
   {
      BufferEpapier[x / 8 + y * EPD_WIDTH / 8] |= (0x80 > (x % 8));
 8002b70:	88fb      	ldrh	r3, [r7, #6]
 8002b72:	08db      	lsrs	r3, r3, #3
 8002b74:	b299      	uxth	r1, r3
 8002b76:	4608      	mov	r0, r1
 8002b78:	88bb      	ldrh	r3, [r7, #4]
 8002b7a:	2232      	movs	r2, #50	; 0x32
 8002b7c:	fb02 f303 	mul.w	r3, r2, r3
 8002b80:	4403      	add	r3, r0
 8002b82:	4a1f      	ldr	r2, [pc, #124]	; (8002c00 <e_papier_set_pixel+0xb8>)
 8002b84:	5cd3      	ldrb	r3, [r2, r3]
 8002b86:	b25a      	sxtb	r2, r3
 8002b88:	88fb      	ldrh	r3, [r7, #6]
 8002b8a:	f003 0307 	and.w	r3, r3, #7
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	2b7f      	cmp	r3, #127	; 0x7f
 8002b92:	bf94      	ite	ls
 8002b94:	2301      	movls	r3, #1
 8002b96:	2300      	movhi	r3, #0
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	b25b      	sxtb	r3, r3
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	b258      	sxtb	r0, r3
 8002ba0:	88bb      	ldrh	r3, [r7, #4]
 8002ba2:	2232      	movs	r2, #50	; 0x32
 8002ba4:	fb02 f303 	mul.w	r3, r2, r3
 8002ba8:	440b      	add	r3, r1
 8002baa:	b2c1      	uxtb	r1, r0
 8002bac:	4a14      	ldr	r2, [pc, #80]	; (8002c00 <e_papier_set_pixel+0xb8>)
 8002bae:	54d1      	strb	r1, [r2, r3]
 8002bb0:	e020      	b.n	8002bf4 <e_papier_set_pixel+0xac>
   }
   else
   {
      BufferEpapier[x / 8 + y * EPD_WIDTH / 8] &= ~(0x80 >> (x % 8));
 8002bb2:	88fb      	ldrh	r3, [r7, #6]
 8002bb4:	08db      	lsrs	r3, r3, #3
 8002bb6:	b298      	uxth	r0, r3
 8002bb8:	4601      	mov	r1, r0
 8002bba:	88bb      	ldrh	r3, [r7, #4]
 8002bbc:	2232      	movs	r2, #50	; 0x32
 8002bbe:	fb02 f303 	mul.w	r3, r2, r3
 8002bc2:	440b      	add	r3, r1
 8002bc4:	4a0e      	ldr	r2, [pc, #56]	; (8002c00 <e_papier_set_pixel+0xb8>)
 8002bc6:	5cd3      	ldrb	r3, [r2, r3]
 8002bc8:	b25a      	sxtb	r2, r3
 8002bca:	88fb      	ldrh	r3, [r7, #6]
 8002bcc:	f003 0307 	and.w	r3, r3, #7
 8002bd0:	2180      	movs	r1, #128	; 0x80
 8002bd2:	fa41 f303 	asr.w	r3, r1, r3
 8002bd6:	b25b      	sxtb	r3, r3
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	b25b      	sxtb	r3, r3
 8002bdc:	4013      	ands	r3, r2
 8002bde:	b259      	sxtb	r1, r3
 8002be0:	88bb      	ldrh	r3, [r7, #4]
 8002be2:	2232      	movs	r2, #50	; 0x32
 8002be4:	fb02 f303 	mul.w	r3, r2, r3
 8002be8:	4403      	add	r3, r0
 8002bea:	b2c9      	uxtb	r1, r1
 8002bec:	4a04      	ldr	r2, [pc, #16]	; (8002c00 <e_papier_set_pixel+0xb8>)
 8002bee:	54d1      	strb	r1, [r2, r3]
 8002bf0:	e000      	b.n	8002bf4 <e_papier_set_pixel+0xac>
      return;
 8002bf2:	bf00      	nop
   }
}
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	200002b4 	.word	0x200002b4

08002c04 <e_papier_set_lut>:
void e_papier_set_lut(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
   uint16_t count;
   e_papier_send_command(LUT_FOR_VCOM); // g vcom
 8002c0a:	2020      	movs	r0, #32
 8002c0c:	f7ff ff42 	bl	8002a94 <e_papier_send_command>
   for(count = 0; count < 44; count++)
 8002c10:	2300      	movs	r3, #0
 8002c12:	80fb      	strh	r3, [r7, #6]
 8002c14:	e008      	b.n	8002c28 <e_papier_set_lut+0x24>
   {
      e_papier_send_data(lut_vcom0[count]);
 8002c16:	88fb      	ldrh	r3, [r7, #6]
 8002c18:	4a2b      	ldr	r2, [pc, #172]	; (8002cc8 <e_papier_set_lut+0xc4>)
 8002c1a:	5cd3      	ldrb	r3, [r2, r3]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7ff ff5d 	bl	8002adc <e_papier_send_data>
   for(count = 0; count < 44; count++)
 8002c22:	88fb      	ldrh	r3, [r7, #6]
 8002c24:	3301      	adds	r3, #1
 8002c26:	80fb      	strh	r3, [r7, #6]
 8002c28:	88fb      	ldrh	r3, [r7, #6]
 8002c2a:	2b2b      	cmp	r3, #43	; 0x2b
 8002c2c:	d9f3      	bls.n	8002c16 <e_papier_set_lut+0x12>
   }

   e_papier_send_command(LUT_WHITE_TO_WHITE);
 8002c2e:	2021      	movs	r0, #33	; 0x21
 8002c30:	f7ff ff30 	bl	8002a94 <e_papier_send_command>
   for(count = 0; count < 42; count++)
 8002c34:	2300      	movs	r3, #0
 8002c36:	80fb      	strh	r3, [r7, #6]
 8002c38:	e008      	b.n	8002c4c <e_papier_set_lut+0x48>
   {
      e_papier_send_data(lut_ww[count]);
 8002c3a:	88fb      	ldrh	r3, [r7, #6]
 8002c3c:	4a23      	ldr	r2, [pc, #140]	; (8002ccc <e_papier_set_lut+0xc8>)
 8002c3e:	5cd3      	ldrb	r3, [r2, r3]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7ff ff4b 	bl	8002adc <e_papier_send_data>
   for(count = 0; count < 42; count++)
 8002c46:	88fb      	ldrh	r3, [r7, #6]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	80fb      	strh	r3, [r7, #6]
 8002c4c:	88fb      	ldrh	r3, [r7, #6]
 8002c4e:	2b29      	cmp	r3, #41	; 0x29
 8002c50:	d9f3      	bls.n	8002c3a <e_papier_set_lut+0x36>
   }

   e_papier_send_command(LUT_BLACK_TO_WHITE);
 8002c52:	2022      	movs	r0, #34	; 0x22
 8002c54:	f7ff ff1e 	bl	8002a94 <e_papier_send_command>
   for(count = 0; count < 42; count++)
 8002c58:	2300      	movs	r3, #0
 8002c5a:	80fb      	strh	r3, [r7, #6]
 8002c5c:	e008      	b.n	8002c70 <e_papier_set_lut+0x6c>
   {
      e_papier_send_data(lut_bw[count]);
 8002c5e:	88fb      	ldrh	r3, [r7, #6]
 8002c60:	4a1b      	ldr	r2, [pc, #108]	; (8002cd0 <e_papier_set_lut+0xcc>)
 8002c62:	5cd3      	ldrb	r3, [r2, r3]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7ff ff39 	bl	8002adc <e_papier_send_data>
   for(count = 0; count < 42; count++)
 8002c6a:	88fb      	ldrh	r3, [r7, #6]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	80fb      	strh	r3, [r7, #6]
 8002c70:	88fb      	ldrh	r3, [r7, #6]
 8002c72:	2b29      	cmp	r3, #41	; 0x29
 8002c74:	d9f3      	bls.n	8002c5e <e_papier_set_lut+0x5a>
   }

   e_papier_send_command(LUT_WHITE_TO_BLACK);
 8002c76:	2023      	movs	r0, #35	; 0x23
 8002c78:	f7ff ff0c 	bl	8002a94 <e_papier_send_command>
   for(count = 0; count < 42; count++)
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	80fb      	strh	r3, [r7, #6]
 8002c80:	e008      	b.n	8002c94 <e_papier_set_lut+0x90>
   {
      e_papier_send_data(lut_wb[count]);
 8002c82:	88fb      	ldrh	r3, [r7, #6]
 8002c84:	4a13      	ldr	r2, [pc, #76]	; (8002cd4 <e_papier_set_lut+0xd0>)
 8002c86:	5cd3      	ldrb	r3, [r2, r3]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff ff27 	bl	8002adc <e_papier_send_data>
   for(count = 0; count < 42; count++)
 8002c8e:	88fb      	ldrh	r3, [r7, #6]
 8002c90:	3301      	adds	r3, #1
 8002c92:	80fb      	strh	r3, [r7, #6]
 8002c94:	88fb      	ldrh	r3, [r7, #6]
 8002c96:	2b29      	cmp	r3, #41	; 0x29
 8002c98:	d9f3      	bls.n	8002c82 <e_papier_set_lut+0x7e>
   }

   e_papier_send_command(LUT_BLACK_TO_BLACK);
 8002c9a:	2024      	movs	r0, #36	; 0x24
 8002c9c:	f7ff fefa 	bl	8002a94 <e_papier_send_command>
   for(count = 0; count < 42; count++)
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	80fb      	strh	r3, [r7, #6]
 8002ca4:	e008      	b.n	8002cb8 <e_papier_set_lut+0xb4>
   {
      e_papier_send_data(lut_bb[count]);
 8002ca6:	88fb      	ldrh	r3, [r7, #6]
 8002ca8:	4a0b      	ldr	r2, [pc, #44]	; (8002cd8 <e_papier_set_lut+0xd4>)
 8002caa:	5cd3      	ldrb	r3, [r2, r3]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7ff ff15 	bl	8002adc <e_papier_send_data>
   for(count = 0; count < 42; count++)
 8002cb2:	88fb      	ldrh	r3, [r7, #6]
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	80fb      	strh	r3, [r7, #6]
 8002cb8:	88fb      	ldrh	r3, [r7, #6]
 8002cba:	2b29      	cmp	r3, #41	; 0x29
 8002cbc:	d9f3      	bls.n	8002ca6 <e_papier_set_lut+0xa2>
   }
}
 8002cbe:	bf00      	nop
 8002cc0:	bf00      	nop
 8002cc2:	3708      	adds	r7, #8
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	08018610 	.word	0x08018610
 8002ccc:	0801863c 	.word	0x0801863c
 8002cd0:	08018668 	.word	0x08018668
 8002cd4:	08018694 	.word	0x08018694
 8002cd8:	080186c0 	.word	0x080186c0

08002cdc <e_papier_turn_on_display>:
      }
   }
   // e_papier_wait_until_idle();
}
void e_papier_turn_on_display(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
   e_papier_send_command(DISPLAY_REFRESH);
 8002ce0:	2012      	movs	r0, #18
 8002ce2:	f7ff fed7 	bl	8002a94 <e_papier_send_command>
   e_papier_wait_until_idle();
 8002ce6:	f7ff ff1d 	bl	8002b24 <e_papier_wait_until_idle>
}
 8002cea:	bf00      	nop
 8002cec:	bd80      	pop	{r7, pc}
	...

08002cf0 <e_papier_display>:
void e_papier_display(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
   uint16_t Width, Height;
   Width  = (EPD_WIDTH % 8 == 0) ? (EPD_WIDTH / 8) : (EPD_WIDTH / 8 + 1);
 8002cf6:	2332      	movs	r3, #50	; 0x32
 8002cf8:	80fb      	strh	r3, [r7, #6]
   Height = EPD_HEIGHT;
 8002cfa:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002cfe:	80bb      	strh	r3, [r7, #4]
   taskENTER_CRITICAL();
 8002d00:	f00f fad8 	bl	80122b4 <vPortEnterCritical>
   e_papier_send_command(DATA_START_TRANSMISSION_1);
 8002d04:	2010      	movs	r0, #16
 8002d06:	f7ff fec5 	bl	8002a94 <e_papier_send_command>
   for(uint16_t j = 0; j < Height; j++)
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	81fb      	strh	r3, [r7, #14]
 8002d0e:	e00f      	b.n	8002d30 <e_papier_display+0x40>
   {
      for(uint16_t i = 0; i < Width; i++)
 8002d10:	2300      	movs	r3, #0
 8002d12:	81bb      	strh	r3, [r7, #12]
 8002d14:	e005      	b.n	8002d22 <e_papier_display+0x32>
      {
         e_papier_send_data(0XFF);
 8002d16:	20ff      	movs	r0, #255	; 0xff
 8002d18:	f7ff fee0 	bl	8002adc <e_papier_send_data>
      for(uint16_t i = 0; i < Width; i++)
 8002d1c:	89bb      	ldrh	r3, [r7, #12]
 8002d1e:	3301      	adds	r3, #1
 8002d20:	81bb      	strh	r3, [r7, #12]
 8002d22:	89ba      	ldrh	r2, [r7, #12]
 8002d24:	88fb      	ldrh	r3, [r7, #6]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d3f5      	bcc.n	8002d16 <e_papier_display+0x26>
   for(uint16_t j = 0; j < Height; j++)
 8002d2a:	89fb      	ldrh	r3, [r7, #14]
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	81fb      	strh	r3, [r7, #14]
 8002d30:	89fa      	ldrh	r2, [r7, #14]
 8002d32:	88bb      	ldrh	r3, [r7, #4]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d3eb      	bcc.n	8002d10 <e_papier_display+0x20>
      }
   }
   e_papier_send_command(DATA_START_TRANSMISSION_2);
 8002d38:	2013      	movs	r0, #19
 8002d3a:	f7ff feab 	bl	8002a94 <e_papier_send_command>
   for(uint16_t j = 0; j < Height; j++)
 8002d3e:	2300      	movs	r3, #0
 8002d40:	817b      	strh	r3, [r7, #10]
 8002d42:	e017      	b.n	8002d74 <e_papier_display+0x84>
   {
      for(uint16_t i = 0; i < Width; i++)
 8002d44:	2300      	movs	r3, #0
 8002d46:	813b      	strh	r3, [r7, #8]
 8002d48:	e00d      	b.n	8002d66 <e_papier_display+0x76>
      {
         e_papier_send_data(BufferEpapier[i + j * Width]);
 8002d4a:	893a      	ldrh	r2, [r7, #8]
 8002d4c:	897b      	ldrh	r3, [r7, #10]
 8002d4e:	88f9      	ldrh	r1, [r7, #6]
 8002d50:	fb01 f303 	mul.w	r3, r1, r3
 8002d54:	4413      	add	r3, r2
 8002d56:	4a0e      	ldr	r2, [pc, #56]	; (8002d90 <e_papier_display+0xa0>)
 8002d58:	5cd3      	ldrb	r3, [r2, r3]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7ff febe 	bl	8002adc <e_papier_send_data>
      for(uint16_t i = 0; i < Width; i++)
 8002d60:	893b      	ldrh	r3, [r7, #8]
 8002d62:	3301      	adds	r3, #1
 8002d64:	813b      	strh	r3, [r7, #8]
 8002d66:	893a      	ldrh	r2, [r7, #8]
 8002d68:	88fb      	ldrh	r3, [r7, #6]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d3ed      	bcc.n	8002d4a <e_papier_display+0x5a>
   for(uint16_t j = 0; j < Height; j++)
 8002d6e:	897b      	ldrh	r3, [r7, #10]
 8002d70:	3301      	adds	r3, #1
 8002d72:	817b      	strh	r3, [r7, #10]
 8002d74:	897a      	ldrh	r2, [r7, #10]
 8002d76:	88bb      	ldrh	r3, [r7, #4]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d3e3      	bcc.n	8002d44 <e_papier_display+0x54>
      }
   }
   taskEXIT_CRITICAL();
 8002d7c:	f00f faca 	bl	8012314 <vPortExitCritical>
   e_papier_turn_on_display();
 8002d80:	f7ff ffac 	bl	8002cdc <e_papier_turn_on_display>
   e_papier_wait_until_idle();
 8002d84:	f7ff fece 	bl	8002b24 <e_papier_wait_until_idle>
}
 8002d88:	bf00      	nop
 8002d8a:	3710      	adds	r7, #16
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	200002b4 	.word	0x200002b4

08002d94 <e_papier_clear>:
void e_papier_clear()
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
   memset(BufferEpapier, 0xff, EPD_HEIGHT * EPD_WIDTH / 8);
 8002d98:	f643 2298 	movw	r2, #15000	; 0x3a98
 8002d9c:	21ff      	movs	r1, #255	; 0xff
 8002d9e:	4802      	ldr	r0, [pc, #8]	; (8002da8 <e_papier_clear+0x14>)
 8002da0:	f00f fdcc 	bl	801293c <memset>
}
 8002da4:	bf00      	nop
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	200002b4 	.word	0x200002b4

08002dac <e_papier_init>:
void e_papier_init(SPI_HandleTypeDef *spi)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
   e_papier_spi = spi;
 8002db4:	4a2c      	ldr	r2, [pc, #176]	; (8002e68 <e_papier_init+0xbc>)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6013      	str	r3, [r2, #0]
   e_papier_reset();
 8002dba:	f7ff fe49 	bl	8002a50 <e_papier_reset>

   e_papier_send_command(POWER_SETTING); // POWER SETTING
 8002dbe:	2001      	movs	r0, #1
 8002dc0:	f7ff fe68 	bl	8002a94 <e_papier_send_command>
   e_papier_send_data(0x03);
 8002dc4:	2003      	movs	r0, #3
 8002dc6:	f7ff fe89 	bl	8002adc <e_papier_send_data>
   e_papier_send_data(0x00);
 8002dca:	2000      	movs	r0, #0
 8002dcc:	f7ff fe86 	bl	8002adc <e_papier_send_data>
   e_papier_send_data(0x2b);
 8002dd0:	202b      	movs	r0, #43	; 0x2b
 8002dd2:	f7ff fe83 	bl	8002adc <e_papier_send_data>
   e_papier_send_data(0x2b);
 8002dd6:	202b      	movs	r0, #43	; 0x2b
 8002dd8:	f7ff fe80 	bl	8002adc <e_papier_send_data>

   e_papier_send_command(BOOSTER_SOFT_START); // boost soft start
 8002ddc:	2006      	movs	r0, #6
 8002dde:	f7ff fe59 	bl	8002a94 <e_papier_send_command>
   e_papier_send_data(0x17);                  // A
 8002de2:	2017      	movs	r0, #23
 8002de4:	f7ff fe7a 	bl	8002adc <e_papier_send_data>
   e_papier_send_data(0x17);                  // B
 8002de8:	2017      	movs	r0, #23
 8002dea:	f7ff fe77 	bl	8002adc <e_papier_send_data>
   e_papier_send_data(0x17);                  // C
 8002dee:	2017      	movs	r0, #23
 8002df0:	f7ff fe74 	bl	8002adc <e_papier_send_data>

   e_papier_send_command(POWER_ON);
 8002df4:	2004      	movs	r0, #4
 8002df6:	f7ff fe4d 	bl	8002a94 <e_papier_send_command>
   e_papier_wait_until_idle();
 8002dfa:	f7ff fe93 	bl	8002b24 <e_papier_wait_until_idle>

   e_papier_send_command(PANEL_SETTING); // panel setting
 8002dfe:	2000      	movs	r0, #0
 8002e00:	f7ff fe48 	bl	8002a94 <e_papier_send_command>
   e_papier_send_data(0xbf);             // KW-BF   KWR-AF	BWROTP 0f	BWOTP 1f
 8002e04:	20bf      	movs	r0, #191	; 0xbf
 8002e06:	f7ff fe69 	bl	8002adc <e_papier_send_data>
   e_papier_send_data(0x0d);
 8002e0a:	200d      	movs	r0, #13
 8002e0c:	f7ff fe66 	bl	8002adc <e_papier_send_data>

   e_papier_send_command(PLL_CONTROL); // PLL setting
 8002e10:	2030      	movs	r0, #48	; 0x30
 8002e12:	f7ff fe3f 	bl	8002a94 <e_papier_send_command>
   e_papier_send_data(0x3C);           // 3A 100HZ   29 150Hz 39 200HZ	31 171HZ
 8002e16:	203c      	movs	r0, #60	; 0x3c
 8002e18:	f7ff fe60 	bl	8002adc <e_papier_send_data>

   e_papier_send_command(0x61); // resolution setting
 8002e1c:	2061      	movs	r0, #97	; 0x61
 8002e1e:	f7ff fe39 	bl	8002a94 <e_papier_send_command>
   e_papier_send_data(0x01);
 8002e22:	2001      	movs	r0, #1
 8002e24:	f7ff fe5a 	bl	8002adc <e_papier_send_data>
   e_papier_send_data(0x90); // 128
 8002e28:	2090      	movs	r0, #144	; 0x90
 8002e2a:	f7ff fe57 	bl	8002adc <e_papier_send_data>
   e_papier_send_data(0x01); //
 8002e2e:	2001      	movs	r0, #1
 8002e30:	f7ff fe54 	bl	8002adc <e_papier_send_data>
   e_papier_send_data(0x2c);
 8002e34:	202c      	movs	r0, #44	; 0x2c
 8002e36:	f7ff fe51 	bl	8002adc <e_papier_send_data>

   e_papier_send_command(0x82); // vcom_DC setting
 8002e3a:	2082      	movs	r0, #130	; 0x82
 8002e3c:	f7ff fe2a 	bl	8002a94 <e_papier_send_command>
   e_papier_send_data(0x28);
 8002e40:	2028      	movs	r0, #40	; 0x28
 8002e42:	f7ff fe4b 	bl	8002adc <e_papier_send_data>

   e_papier_send_command(0X50); // VCOM AND DATA INTERVAL SETTING
 8002e46:	2050      	movs	r0, #80	; 0x50
 8002e48:	f7ff fe24 	bl	8002a94 <e_papier_send_command>
   e_papier_send_data(0x97);    // 97white border 77black border		VBDF 17|D7 VBDW 97 VBDB 57		VBDF F7 VBDW 77 VBDB 37  VBDR B7
 8002e4c:	2097      	movs	r0, #151	; 0x97
 8002e4e:	f7ff fe45 	bl	8002adc <e_papier_send_data>

   e_papier_set_lut();
 8002e52:	f7ff fed7 	bl	8002c04 <e_papier_set_lut>
   e_papier_clear();
 8002e56:	f7ff ff9d 	bl	8002d94 <e_papier_clear>
   e_papier_display();
 8002e5a:	f7ff ff49 	bl	8002cf0 <e_papier_display>
}
 8002e5e:	bf00      	nop
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	200002b0 	.word	0x200002b0

08002e6c <MX_FREERTOS_Init>:
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
   /* USER CODE BEGIN Init */

   /* USER CODE END Init */
   /* Create the mutex(es) */
   /* creation of ScreensDcMutex */
   ScreensDcMutexHandle = osMutexNew(&ScreensDcMutex_attributes);
 8002e70:	4846      	ldr	r0, [pc, #280]	; (8002f8c <MX_FREERTOS_Init+0x120>)
 8002e72:	f00b ff71 	bl	800ed58 <osMutexNew>
 8002e76:	4603      	mov	r3, r0
 8002e78:	4a45      	ldr	r2, [pc, #276]	; (8002f90 <MX_FREERTOS_Init+0x124>)
 8002e7a:	6013      	str	r3, [r2, #0]

   /* creation of SSD1306Mutex */
   SSD1306MutexHandle = osMutexNew(&SSD1306Mutex_attributes);
 8002e7c:	4845      	ldr	r0, [pc, #276]	; (8002f94 <MX_FREERTOS_Init+0x128>)
 8002e7e:	f00b ff6b 	bl	800ed58 <osMutexNew>
 8002e82:	4603      	mov	r3, r0
 8002e84:	4a44      	ldr	r2, [pc, #272]	; (8002f98 <MX_FREERTOS_Init+0x12c>)
 8002e86:	6013      	str	r3, [r2, #0]

   /* creation of SPI1Mutex */
   SPI1MutexHandle = osMutexNew(&SPI1Mutex_attributes);
 8002e88:	4844      	ldr	r0, [pc, #272]	; (8002f9c <MX_FREERTOS_Init+0x130>)
 8002e8a:	f00b ff65 	bl	800ed58 <osMutexNew>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	4a43      	ldr	r2, [pc, #268]	; (8002fa0 <MX_FREERTOS_Init+0x134>)
 8002e92:	6013      	str	r3, [r2, #0]

   /* creation of E_PAPIERMutex */
   E_PAPIERMutexHandle = osMutexNew(&E_PAPIERMutex_attributes);
 8002e94:	4843      	ldr	r0, [pc, #268]	; (8002fa4 <MX_FREERTOS_Init+0x138>)
 8002e96:	f00b ff5f 	bl	800ed58 <osMutexNew>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	4a42      	ldr	r2, [pc, #264]	; (8002fa8 <MX_FREERTOS_Init+0x13c>)
 8002e9e:	6013      	str	r3, [r2, #0]

   /* creation of BME280Mutex */
   BME280MutexHandle = osMutexNew(&BME280Mutex_attributes);
 8002ea0:	4842      	ldr	r0, [pc, #264]	; (8002fac <MX_FREERTOS_Init+0x140>)
 8002ea2:	f00b ff59 	bl	800ed58 <osMutexNew>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	4a41      	ldr	r2, [pc, #260]	; (8002fb0 <MX_FREERTOS_Init+0x144>)
 8002eaa:	6013      	str	r3, [r2, #0]

   /* creation of MenuMutex */
   MenuMutexHandle = osMutexNew(&MenuMutex_attributes);
 8002eac:	4841      	ldr	r0, [pc, #260]	; (8002fb4 <MX_FREERTOS_Init+0x148>)
 8002eae:	f00b ff53 	bl	800ed58 <osMutexNew>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	4a40      	ldr	r2, [pc, #256]	; (8002fb8 <MX_FREERTOS_Init+0x14c>)
 8002eb6:	6013      	str	r3, [r2, #0]
   /* add semaphores, ... */
   /* USER CODE END RTOS_SEMAPHORES */

   /* Create the timer(s) */
   /* creation of MenuTimer */
   MenuTimerHandle = osTimerNew(MenuTimerCallback, osTimerOnce, NULL, &MenuTimer_attributes);
 8002eb8:	4b40      	ldr	r3, [pc, #256]	; (8002fbc <MX_FREERTOS_Init+0x150>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	4840      	ldr	r0, [pc, #256]	; (8002fc0 <MX_FREERTOS_Init+0x154>)
 8002ec0:	f00b fde4 	bl	800ea8c <osTimerNew>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	4a3f      	ldr	r2, [pc, #252]	; (8002fc4 <MX_FREERTOS_Init+0x158>)
 8002ec8:	6013      	str	r3, [r2, #0]
   /* start timers, add new ones, ... */
   /* USER CODE END RTOS_TIMERS */

   /* Create the queue(s) */
   /* creation of MeasurmentQueue */
   MeasurmentQueueHandle = osMessageQueueNew(16, sizeof(MV_TypeDef), &MeasurmentQueue_attributes);
 8002eca:	4a3f      	ldr	r2, [pc, #252]	; (8002fc8 <MX_FREERTOS_Init+0x15c>)
 8002ecc:	2130      	movs	r1, #48	; 0x30
 8002ece:	2010      	movs	r0, #16
 8002ed0:	f00c f850 	bl	800ef74 <osMessageQueueNew>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	4a3d      	ldr	r2, [pc, #244]	; (8002fcc <MX_FREERTOS_Init+0x160>)
 8002ed8:	6013      	str	r3, [r2, #0]

   /* creation of MoonPhaseQueue */
   MoonPhaseQueueHandle = osMessageQueueNew(16, sizeof(double), &MoonPhaseQueue_attributes);
 8002eda:	4a3d      	ldr	r2, [pc, #244]	; (8002fd0 <MX_FREERTOS_Init+0x164>)
 8002edc:	2108      	movs	r1, #8
 8002ede:	2010      	movs	r0, #16
 8002ee0:	f00c f848 	bl	800ef74 <osMessageQueueNew>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	4a3b      	ldr	r2, [pc, #236]	; (8002fd4 <MX_FREERTOS_Init+0x168>)
 8002ee8:	6013      	str	r3, [r2, #0]
   /* add queues, ... */
   /* USER CODE END RTOS_QUEUES */

   /* Create the thread(s) */
   /* creation of defaultTask */
   defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002eea:	4a3b      	ldr	r2, [pc, #236]	; (8002fd8 <MX_FREERTOS_Init+0x16c>)
 8002eec:	2100      	movs	r1, #0
 8002eee:	483b      	ldr	r0, [pc, #236]	; (8002fdc <MX_FREERTOS_Init+0x170>)
 8002ef0:	f00b fd0a 	bl	800e908 <osThreadNew>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	4a3a      	ldr	r2, [pc, #232]	; (8002fe0 <MX_FREERTOS_Init+0x174>)
 8002ef8:	6013      	str	r3, [r2, #0]

   /* creation of InitAndTimeTask */
   InitAndTimeTaskHandle = osThreadNew(StartInitAndTimeTask, NULL, &InitAndTimeTask_attributes);
 8002efa:	4a3a      	ldr	r2, [pc, #232]	; (8002fe4 <MX_FREERTOS_Init+0x178>)
 8002efc:	2100      	movs	r1, #0
 8002efe:	483a      	ldr	r0, [pc, #232]	; (8002fe8 <MX_FREERTOS_Init+0x17c>)
 8002f00:	f00b fd02 	bl	800e908 <osThreadNew>
 8002f04:	4603      	mov	r3, r0
 8002f06:	4a39      	ldr	r2, [pc, #228]	; (8002fec <MX_FREERTOS_Init+0x180>)
 8002f08:	6013      	str	r3, [r2, #0]

   /* creation of RfpTask */
   RfpTaskHandle = osThreadNew(StartRfpTask, NULL, &RfpTask_attributes);
 8002f0a:	4a39      	ldr	r2, [pc, #228]	; (8002ff0 <MX_FREERTOS_Init+0x184>)
 8002f0c:	2100      	movs	r1, #0
 8002f0e:	4839      	ldr	r0, [pc, #228]	; (8002ff4 <MX_FREERTOS_Init+0x188>)
 8002f10:	f00b fcfa 	bl	800e908 <osThreadNew>
 8002f14:	4603      	mov	r3, r0
 8002f16:	4a38      	ldr	r2, [pc, #224]	; (8002ff8 <MX_FREERTOS_Init+0x18c>)
 8002f18:	6013      	str	r3, [r2, #0]

   /* creation of MeasurmentTask */
   MeasurmentTaskHandle = osThreadNew(StartMeasurmentTask, NULL, &MeasurmentTask_attributes);
 8002f1a:	4a38      	ldr	r2, [pc, #224]	; (8002ffc <MX_FREERTOS_Init+0x190>)
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	4838      	ldr	r0, [pc, #224]	; (8003000 <MX_FREERTOS_Init+0x194>)
 8002f20:	f00b fcf2 	bl	800e908 <osThreadNew>
 8002f24:	4603      	mov	r3, r0
 8002f26:	4a37      	ldr	r2, [pc, #220]	; (8003004 <MX_FREERTOS_Init+0x198>)
 8002f28:	6013      	str	r3, [r2, #0]

   /* creation of InternalMeasurmentTask */
   InternalMeasurmentTaskHandle = osThreadNew(StartInternalMeasurmentTask, NULL, &InternalMeasurmentTask_attributes);
 8002f2a:	4a37      	ldr	r2, [pc, #220]	; (8003008 <MX_FREERTOS_Init+0x19c>)
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	4837      	ldr	r0, [pc, #220]	; (800300c <MX_FREERTOS_Init+0x1a0>)
 8002f30:	f00b fcea 	bl	800e908 <osThreadNew>
 8002f34:	4603      	mov	r3, r0
 8002f36:	4a36      	ldr	r2, [pc, #216]	; (8003010 <MX_FREERTOS_Init+0x1a4>)
 8002f38:	6013      	str	r3, [r2, #0]

   /* creation of MoonPhaseTask */
   MoonPhaseTaskHandle = osThreadNew(StartMoonPhaseTask, NULL, &MoonPhaseTask_attributes);
 8002f3a:	4a36      	ldr	r2, [pc, #216]	; (8003014 <MX_FREERTOS_Init+0x1a8>)
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	4836      	ldr	r0, [pc, #216]	; (8003018 <MX_FREERTOS_Init+0x1ac>)
 8002f40:	f00b fce2 	bl	800e908 <osThreadNew>
 8002f44:	4603      	mov	r3, r0
 8002f46:	4a35      	ldr	r2, [pc, #212]	; (800301c <MX_FREERTOS_Init+0x1b0>)
 8002f48:	6013      	str	r3, [r2, #0]

   /* creation of E_PapierDrawingTask */
   E_PapierDrawingTaskHandle = osThreadNew(StartE_PapierDrawingTask, NULL, &E_PapierDrawingTask_attributes);
 8002f4a:	4a35      	ldr	r2, [pc, #212]	; (8003020 <MX_FREERTOS_Init+0x1b4>)
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	4835      	ldr	r0, [pc, #212]	; (8003024 <MX_FREERTOS_Init+0x1b8>)
 8002f50:	f00b fcda 	bl	800e908 <osThreadNew>
 8002f54:	4603      	mov	r3, r0
 8002f56:	4a34      	ldr	r2, [pc, #208]	; (8003028 <MX_FREERTOS_Init+0x1bc>)
 8002f58:	6013      	str	r3, [r2, #0]

   /* creation of E_PapierDisplayTask */
   E_PapierDisplayTaskHandle = osThreadNew(StartE_PapierDisplayTask, NULL, &E_PapierDisplayTask_attributes);
 8002f5a:	4a34      	ldr	r2, [pc, #208]	; (800302c <MX_FREERTOS_Init+0x1c0>)
 8002f5c:	2100      	movs	r1, #0
 8002f5e:	4834      	ldr	r0, [pc, #208]	; (8003030 <MX_FREERTOS_Init+0x1c4>)
 8002f60:	f00b fcd2 	bl	800e908 <osThreadNew>
 8002f64:	4603      	mov	r3, r0
 8002f66:	4a33      	ldr	r2, [pc, #204]	; (8003034 <MX_FREERTOS_Init+0x1c8>)
 8002f68:	6013      	str	r3, [r2, #0]

   /* creation of MenuTask */
   MenuTaskHandle = osThreadNew(StartMenuTask, NULL, &MenuTask_attributes);
 8002f6a:	4a33      	ldr	r2, [pc, #204]	; (8003038 <MX_FREERTOS_Init+0x1cc>)
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	4833      	ldr	r0, [pc, #204]	; (800303c <MX_FREERTOS_Init+0x1d0>)
 8002f70:	f00b fcca 	bl	800e908 <osThreadNew>
 8002f74:	4603      	mov	r3, r0
 8002f76:	4a32      	ldr	r2, [pc, #200]	; (8003040 <MX_FREERTOS_Init+0x1d4>)
 8002f78:	6013      	str	r3, [r2, #0]
   /* USER CODE BEGIN RTOS_THREADS */
   /* add threads, ... */
   /* USER CODE END RTOS_THREADS */

   /* creation of C3V1Flags */
   C3V1FlagsHandle = osEventFlagsNew(&C3V1Flags_attributes);
 8002f7a:	4832      	ldr	r0, [pc, #200]	; (8003044 <MX_FREERTOS_Init+0x1d8>)
 8002f7c:	f00b fe02 	bl	800eb84 <osEventFlagsNew>
 8002f80:	4603      	mov	r3, r0
 8002f82:	4a31      	ldr	r2, [pc, #196]	; (8003048 <MX_FREERTOS_Init+0x1dc>)
 8002f84:	6013      	str	r3, [r2, #0]

   /* USER CODE BEGIN RTOS_EVENTS */
   /* add events, ... */
   /* USER CODE END RTOS_EVENTS */
}
 8002f86:	bf00      	nop
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	08018a50 	.word	0x08018a50
 8002f90:	20003dc8 	.word	0x20003dc8
 8002f94:	08018a60 	.word	0x08018a60
 8002f98:	20003dcc 	.word	0x20003dcc
 8002f9c:	08018a70 	.word	0x08018a70
 8002fa0:	20003dd0 	.word	0x20003dd0
 8002fa4:	08018a80 	.word	0x08018a80
 8002fa8:	20003dd4 	.word	0x20003dd4
 8002fac:	08018a90 	.word	0x08018a90
 8002fb0:	20003dd8 	.word	0x20003dd8
 8002fb4:	08018aa0 	.word	0x08018aa0
 8002fb8:	20003ddc 	.word	0x20003ddc
 8002fbc:	08018a40 	.word	0x08018a40
 8002fc0:	08003949 	.word	0x08003949
 8002fc4:	20003dc4 	.word	0x20003dc4
 8002fc8:	08018a10 	.word	0x08018a10
 8002fcc:	20003dbc 	.word	0x20003dbc
 8002fd0:	08018a28 	.word	0x08018a28
 8002fd4:	20003dc0 	.word	0x20003dc0
 8002fd8:	080188cc 	.word	0x080188cc
 8002fdc:	0800304d 	.word	0x0800304d
 8002fe0:	20003d98 	.word	0x20003d98
 8002fe4:	080188f0 	.word	0x080188f0
 8002fe8:	08003075 	.word	0x08003075
 8002fec:	20003d9c 	.word	0x20003d9c
 8002ff0:	08018914 	.word	0x08018914
 8002ff4:	08003259 	.word	0x08003259
 8002ff8:	20003da0 	.word	0x20003da0
 8002ffc:	08018938 	.word	0x08018938
 8003000:	0800328d 	.word	0x0800328d
 8003004:	20003da4 	.word	0x20003da4
 8003008:	0801895c 	.word	0x0801895c
 800300c:	080032d9 	.word	0x080032d9
 8003010:	20003da8 	.word	0x20003da8
 8003014:	08018980 	.word	0x08018980
 8003018:	080033a9 	.word	0x080033a9
 800301c:	20003dac 	.word	0x20003dac
 8003020:	080189a4 	.word	0x080189a4
 8003024:	08003511 	.word	0x08003511
 8003028:	20003db0 	.word	0x20003db0
 800302c:	080189c8 	.word	0x080189c8
 8003030:	08003891 	.word	0x08003891
 8003034:	20003db4 	.word	0x20003db4
 8003038:	080189ec 	.word	0x080189ec
 800303c:	08003921 	.word	0x08003921
 8003040:	20003db8 	.word	0x20003db8
 8003044:	08018ab0 	.word	0x08018ab0
 8003048:	20003de0 	.word	0x20003de0

0800304c <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN StartDefaultTask */
   /* Infinite loop */
   for(;;)
   {
      HAL_GPIO_TogglePin(HEARTBEAT_GPIO_Port, HEARTBEAT_Pin);
 8003054:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003058:	4804      	ldr	r0, [pc, #16]	; (800306c <StartDefaultTask+0x20>)
 800305a:	f005 fb47 	bl	80086ec <HAL_GPIO_TogglePin>
      HAL_IWDG_Refresh(&hiwdg);
 800305e:	4804      	ldr	r0, [pc, #16]	; (8003070 <StartDefaultTask+0x24>)
 8003060:	f005 fbad 	bl	80087be <HAL_IWDG_Refresh>
      osDelay(100);
 8003064:	2064      	movs	r0, #100	; 0x64
 8003066:	f00b fce1 	bl	800ea2c <osDelay>
      HAL_GPIO_TogglePin(HEARTBEAT_GPIO_Port, HEARTBEAT_Pin);
 800306a:	e7f3      	b.n	8003054 <StartDefaultTask+0x8>
 800306c:	48000400 	.word	0x48000400
 8003070:	20003de4 	.word	0x20003de4

08003074 <StartInitAndTimeTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartInitAndTimeTask */
void StartInitAndTimeTask(void *argument)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b0a6      	sub	sp, #152	; 0x98
 8003078:	af02      	add	r7, sp, #8
 800307a:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN StartInitAndTimeTask */
   RFP_Init(&Rfp, RFP_IDWS);
 800307c:	2103      	movs	r1, #3
 800307e:	4866      	ldr	r0, [pc, #408]	; (8003218 <StartInitAndTimeTask+0x1a4>)
 8003080:	f003 faae 	bl	80065e0 <RFP_Init>
   e_papier_init(&hspi1);
 8003084:	4865      	ldr	r0, [pc, #404]	; (800321c <StartInitAndTimeTask+0x1a8>)
 8003086:	f7ff fe91 	bl	8002dac <e_papier_init>
   ssd1306_init(&hspi1);
 800308a:	4864      	ldr	r0, [pc, #400]	; (800321c <StartInitAndTimeTask+0x1a8>)
 800308c:	f004 f866 	bl	800715c <ssd1306_init>
   BME280_Init(&Bme, &hspi1, BME280_CS_GPIO_Port, BME280_CS_Pin);
 8003090:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003094:	4a62      	ldr	r2, [pc, #392]	; (8003220 <StartInitAndTimeTask+0x1ac>)
 8003096:	4961      	ldr	r1, [pc, #388]	; (800321c <StartInitAndTimeTask+0x1a8>)
 8003098:	4862      	ldr	r0, [pc, #392]	; (8003224 <StartInitAndTimeTask+0x1b0>)
 800309a:	f7ff fb43 	bl	8002724 <BME280_Init>
   GFX_SetFont(font_8x5);
 800309e:	4862      	ldr	r0, [pc, #392]	; (8003228 <StartInitAndTimeTask+0x1b4>)
 80030a0:	f7fe f83a 	bl	8001118 <GFX_SetFont>
   RFP_RegisterDataFunction(RFP_DataFunction);
 80030a4:	4861      	ldr	r0, [pc, #388]	; (800322c <StartInitAndTimeTask+0x1b8>)
 80030a6:	f003 fb1b 	bl	80066e0 <RFP_RegisterDataFunction>
   MENU_Init();
 80030aa:	f7fe fabb 	bl	8001624 <MENU_Init>
   osEventFlagsSet(C3V1FlagsHandle, INITIALIZE_ALL_FLAG);
 80030ae:	4b60      	ldr	r3, [pc, #384]	; (8003230 <StartInitAndTimeTask+0x1bc>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2102      	movs	r1, #2
 80030b4:	4618      	mov	r0, r3
 80030b6:	f00b fda5 	bl	800ec04 <osEventFlagsSet>
   uint32_t Random;
   RTC_TimeTypeDef RtcTime;
   RTC_DateTypeDef RtcDate;
   RTC_DateTypeDef ActualRtcDate = { 0 };
 80030ba:	2300      	movs	r3, #0
 80030bc:	673b      	str	r3, [r7, #112]	; 0x70
   char data[100];
   /* Infinite loop */
   for(;;)
   {
      osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 80030be:	4b5c      	ldr	r3, [pc, #368]	; (8003230 <StartInitAndTimeTask+0x1bc>)
 80030c0:	6818      	ldr	r0, [r3, #0]
 80030c2:	f04f 33ff 	mov.w	r3, #4294967295
 80030c6:	2202      	movs	r2, #2
 80030c8:	2102      	movs	r1, #2
 80030ca:	f00b fddf 	bl	800ec8c <osEventFlagsWait>
      osMutexAcquire(MenuMutexHandle, osWaitForever);
 80030ce:	4b59      	ldr	r3, [pc, #356]	; (8003234 <StartInitAndTimeTask+0x1c0>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f04f 31ff 	mov.w	r1, #4294967295
 80030d6:	4618      	mov	r0, r3
 80030d8:	f00b fec4 	bl	800ee64 <osMutexAcquire>
      osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 80030dc:	4b56      	ldr	r3, [pc, #344]	; (8003238 <StartInitAndTimeTask+0x1c4>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f04f 31ff 	mov.w	r1, #4294967295
 80030e4:	4618      	mov	r0, r3
 80030e6:	f00b febd 	bl	800ee64 <osMutexAcquire>
      osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 80030ea:	4b54      	ldr	r3, [pc, #336]	; (800323c <StartInitAndTimeTask+0x1c8>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f04f 31ff 	mov.w	r1, #4294967295
 80030f2:	4618      	mov	r0, r3
 80030f4:	f00b feb6 	bl	800ee64 <osMutexAcquire>
      osMutexAcquire(SPI1MutexHandle, osWaitForever);
 80030f8:	4b51      	ldr	r3, [pc, #324]	; (8003240 <StartInitAndTimeTask+0x1cc>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003100:	4618      	mov	r0, r3
 8003102:	f00b feaf 	bl	800ee64 <osMutexAcquire>
      HAL_RNG_GenerateRandomNumber(&hrng, &Random);
 8003106:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800310a:	4619      	mov	r1, r3
 800310c:	484d      	ldr	r0, [pc, #308]	; (8003244 <StartInitAndTimeTask+0x1d0>)
 800310e:	f007 f9a5 	bl	800a45c <HAL_RNG_GenerateRandomNumber>
      ssd1306_clear();
 8003112:	f004 f817 	bl	8007144 <ssd1306_clear>
      HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 8003116:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800311a:	2200      	movs	r2, #0
 800311c:	4619      	mov	r1, r3
 800311e:	484a      	ldr	r0, [pc, #296]	; (8003248 <StartInitAndTimeTask+0x1d4>)
 8003120:	f007 fb1c 	bl	800a75c <HAL_RTC_GetTime>
      HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 8003124:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003128:	2200      	movs	r2, #0
 800312a:	4619      	mov	r1, r3
 800312c:	4846      	ldr	r0, [pc, #280]	; (8003248 <StartInitAndTimeTask+0x1d4>)
 800312e:	f007 fbff 	bl	800a930 <HAL_RTC_GetDate>
      sprintf(data, "%d h %d m %d s", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 8003132:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8003136:	461a      	mov	r2, r3
 8003138:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 800313c:	4619      	mov	r1, r3
 800313e:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8003142:	f107 000c 	add.w	r0, r7, #12
 8003146:	9300      	str	r3, [sp, #0]
 8003148:	460b      	mov	r3, r1
 800314a:	4940      	ldr	r1, [pc, #256]	; (800324c <StartInitAndTimeTask+0x1d8>)
 800314c:	f003 fa10 	bl	8006570 <sprintf_>
      GFX_DrawString(0, 0, data, WHITE, 0, OLED);
 8003150:	f107 020c 	add.w	r2, r7, #12
 8003154:	2300      	movs	r3, #0
 8003156:	9301      	str	r3, [sp, #4]
 8003158:	2300      	movs	r3, #0
 800315a:	9300      	str	r3, [sp, #0]
 800315c:	2301      	movs	r3, #1
 800315e:	2100      	movs	r1, #0
 8003160:	2000      	movs	r0, #0
 8003162:	f7fe f8a7 	bl	80012b4 <GFX_DrawString>
      sprintf(data, "%d : %d ; 20%d", RtcDate.Date, RtcDate.Month, RtcDate.Year);
 8003166:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800316a:	461a      	mov	r2, r3
 800316c:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8003170:	4619      	mov	r1, r3
 8003172:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003176:	f107 000c 	add.w	r0, r7, #12
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	460b      	mov	r3, r1
 800317e:	4934      	ldr	r1, [pc, #208]	; (8003250 <StartInitAndTimeTask+0x1dc>)
 8003180:	f003 f9f6 	bl	8006570 <sprintf_>
      GFX_DrawString(0, 10, data, WHITE, 0, OLED);
 8003184:	f107 020c 	add.w	r2, r7, #12
 8003188:	2300      	movs	r3, #0
 800318a:	9301      	str	r3, [sp, #4]
 800318c:	2300      	movs	r3, #0
 800318e:	9300      	str	r3, [sp, #0]
 8003190:	2301      	movs	r3, #1
 8003192:	210a      	movs	r1, #10
 8003194:	2000      	movs	r0, #0
 8003196:	f7fe f88d 	bl	80012b4 <GFX_DrawString>
      sprintf(data, "RNG %d ", Random);
 800319a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800319e:	f107 030c 	add.w	r3, r7, #12
 80031a2:	492c      	ldr	r1, [pc, #176]	; (8003254 <StartInitAndTimeTask+0x1e0>)
 80031a4:	4618      	mov	r0, r3
 80031a6:	f003 f9e3 	bl	8006570 <sprintf_>
      GFX_DrawString(0, 20, data, WHITE, 0, OLED);
 80031aa:	f107 020c 	add.w	r2, r7, #12
 80031ae:	2300      	movs	r3, #0
 80031b0:	9301      	str	r3, [sp, #4]
 80031b2:	2300      	movs	r3, #0
 80031b4:	9300      	str	r3, [sp, #0]
 80031b6:	2301      	movs	r3, #1
 80031b8:	2114      	movs	r1, #20
 80031ba:	2000      	movs	r0, #0
 80031bc:	f7fe f87a 	bl	80012b4 <GFX_DrawString>
      ssd1306_display();
 80031c0:	f003 ff94 	bl	80070ec <ssd1306_display>
      osMutexRelease(SPI1MutexHandle);
 80031c4:	4b1e      	ldr	r3, [pc, #120]	; (8003240 <StartInitAndTimeTask+0x1cc>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f00b fe96 	bl	800eefa <osMutexRelease>
      osMutexRelease(SSD1306MutexHandle);
 80031ce:	4b1b      	ldr	r3, [pc, #108]	; (800323c <StartInitAndTimeTask+0x1c8>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f00b fe91 	bl	800eefa <osMutexRelease>
      osMutexRelease(ScreensDcMutexHandle);
 80031d8:	4b17      	ldr	r3, [pc, #92]	; (8003238 <StartInitAndTimeTask+0x1c4>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4618      	mov	r0, r3
 80031de:	f00b fe8c 	bl	800eefa <osMutexRelease>
      osMutexRelease(MenuMutexHandle);
 80031e2:	4b14      	ldr	r3, [pc, #80]	; (8003234 <StartInitAndTimeTask+0x1c0>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f00b fe87 	bl	800eefa <osMutexRelease>
      if(ActualRtcDate.Date != RtcDate.Date)
 80031ec:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 80031f0:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d009      	beq.n	800320c <StartInitAndTimeTask+0x198>
      {
         ActualRtcDate.Date = RtcDate.Date;
 80031f8:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80031fc:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
         osEventFlagsSet(C3V1FlagsHandle, MOON_PHASE_FLAG);
 8003200:	4b0b      	ldr	r3, [pc, #44]	; (8003230 <StartInitAndTimeTask+0x1bc>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2110      	movs	r1, #16
 8003206:	4618      	mov	r0, r3
 8003208:	f00b fcfc 	bl	800ec04 <osEventFlagsSet>
      }
      osDelay(1000);
 800320c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003210:	f00b fc0c 	bl	800ea2c <osDelay>
      osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 8003214:	e753      	b.n	80030be <StartInitAndTimeTask+0x4a>
 8003216:	bf00      	nop
 8003218:	20003d4c 	.word	0x20003d4c
 800321c:	20003f38 	.word	0x20003f38
 8003220:	48000400 	.word	0x48000400
 8003224:	20003d68 	.word	0x20003d68
 8003228:	080186ec 	.word	0x080186ec
 800322c:	0800395d 	.word	0x0800395d
 8003230:	20003de0 	.word	0x20003de0
 8003234:	20003ddc 	.word	0x20003ddc
 8003238:	20003dc8 	.word	0x20003dc8
 800323c:	20003dcc 	.word	0x20003dcc
 8003240:	20003dd0 	.word	0x20003dd0
 8003244:	20003ef0 	.word	0x20003ef0
 8003248:	20003f04 	.word	0x20003f04
 800324c:	080184b8 	.word	0x080184b8
 8003250:	080184c8 	.word	0x080184c8
 8003254:	080184d8 	.word	0x080184d8

08003258 <StartRfpTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartRfpTask */
void StartRfpTask(void *argument)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN StartRfpTask */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 8003260:	4b08      	ldr	r3, [pc, #32]	; (8003284 <StartRfpTask+0x2c>)
 8003262:	6818      	ldr	r0, [r3, #0]
 8003264:	f04f 33ff 	mov.w	r3, #4294967295
 8003268:	2202      	movs	r2, #2
 800326a:	2102      	movs	r1, #2
 800326c:	f00b fd0e 	bl	800ec8c <osEventFlagsWait>
   /* Infinite loop */
   for(;;)
   {
      if(Rfp.Initialize == RFP_INITIALIZE)
 8003270:	4b05      	ldr	r3, [pc, #20]	; (8003288 <StartRfpTask+0x30>)
 8003272:	78db      	ldrb	r3, [r3, #3]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d101      	bne.n	800327c <StartRfpTask+0x24>
      {
         RFP_Handle();
 8003278:	f003 f996 	bl	80065a8 <RFP_Handle>
      }
      osDelay(10);
 800327c:	200a      	movs	r0, #10
 800327e:	f00b fbd5 	bl	800ea2c <osDelay>
      if(Rfp.Initialize == RFP_INITIALIZE)
 8003282:	e7f5      	b.n	8003270 <StartRfpTask+0x18>
 8003284:	20003de0 	.word	0x20003de0
 8003288:	20003d4c 	.word	0x20003d4c

0800328c <StartMeasurmentTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMeasurmentTask */
void StartMeasurmentTask(void *argument)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN StartMeasurmentTask */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 8003294:	4b0f      	ldr	r3, [pc, #60]	; (80032d4 <StartMeasurmentTask+0x48>)
 8003296:	6818      	ldr	r0, [r3, #0]
 8003298:	f04f 33ff 	mov.w	r3, #4294967295
 800329c:	2202      	movs	r2, #2
 800329e:	2102      	movs	r1, #2
 80032a0:	f00b fcf4 	bl	800ec8c <osEventFlagsWait>
   uint32_t Time   = 10000;
 80032a4:	f242 7310 	movw	r3, #10000	; 0x2710
 80032a8:	60fb      	str	r3, [r7, #12]
   uint8_t Command = RFP_START_MEASURMENT;
 80032aa:	2302      	movs	r3, #2
 80032ac:	72fb      	strb	r3, [r7, #11]
   /* Infinite loop */
   for(;;)
   {
      RFP_SendData(RFP_ODWS, RFP_COMMAND, &Command, 1);
 80032ae:	f107 020b 	add.w	r2, r7, #11
 80032b2:	2301      	movs	r3, #1
 80032b4:	2101      	movs	r1, #1
 80032b6:	2002      	movs	r0, #2
 80032b8:	f003 fa30 	bl	800671c <RFP_SendData>
      osEventFlagsWait(C3V1FlagsHandle, SEND_MEASURMENT_COMMAND_FLAG, osFlagsWaitAny, osWaitForever);
 80032bc:	4b05      	ldr	r3, [pc, #20]	; (80032d4 <StartMeasurmentTask+0x48>)
 80032be:	6818      	ldr	r0, [r3, #0]
 80032c0:	f04f 33ff 	mov.w	r3, #4294967295
 80032c4:	2200      	movs	r2, #0
 80032c6:	2101      	movs	r1, #1
 80032c8:	f00b fce0 	bl	800ec8c <osEventFlagsWait>
      osDelay(Time);
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f00b fbad 	bl	800ea2c <osDelay>
      RFP_SendData(RFP_ODWS, RFP_COMMAND, &Command, 1);
 80032d2:	e7ec      	b.n	80032ae <StartMeasurmentTask+0x22>
 80032d4:	20003de0 	.word	0x20003de0

080032d8 <StartInternalMeasurmentTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartInternalMeasurmentTask */
void StartInternalMeasurmentTask(void *argument)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b08e      	sub	sp, #56	; 0x38
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN StartInternalMeasurmentTask */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 80032e0:	4b2c      	ldr	r3, [pc, #176]	; (8003394 <StartInternalMeasurmentTask+0xbc>)
 80032e2:	6818      	ldr	r0, [r3, #0]
 80032e4:	f04f 33ff 	mov.w	r3, #4294967295
 80032e8:	2202      	movs	r2, #2
 80032ea:	2102      	movs	r1, #2
 80032ec:	f00b fcce 	bl	800ec8c <osEventFlagsWait>
   MV_TypeDef _Mv = { 0 };
 80032f0:	f107 0308 	add.w	r3, r7, #8
 80032f4:	2230      	movs	r2, #48	; 0x30
 80032f6:	2100      	movs	r1, #0
 80032f8:	4618      	mov	r0, r3
 80032fa:	f00f fb1f 	bl	801293c <memset>
   /* Infinite loop */
   for(;;)
   {
      osMessageQueueGet(MeasurmentQueueHandle, &_Mv, 0, osWaitForever);
 80032fe:	4b26      	ldr	r3, [pc, #152]	; (8003398 <StartInternalMeasurmentTask+0xc0>)
 8003300:	6818      	ldr	r0, [r3, #0]
 8003302:	f107 0108 	add.w	r1, r7, #8
 8003306:	f04f 33ff 	mov.w	r3, #4294967295
 800330a:	2200      	movs	r2, #0
 800330c:	f00b ff06 	bl	800f11c <osMessageQueueGet>
      osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8003310:	4b22      	ldr	r3, [pc, #136]	; (800339c <StartInternalMeasurmentTask+0xc4>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f04f 31ff 	mov.w	r1, #4294967295
 8003318:	4618      	mov	r0, r3
 800331a:	f00b fda3 	bl	800ee64 <osMutexAcquire>
      osMutexAcquire(BME280MutexHandle, osWaitForever);
 800331e:	4b20      	ldr	r3, [pc, #128]	; (80033a0 <StartInternalMeasurmentTask+0xc8>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f04f 31ff 	mov.w	r1, #4294967295
 8003326:	4618      	mov	r0, r3
 8003328:	f00b fd9c 	bl	800ee64 <osMutexAcquire>
      BME280_ReadAll(&Bme, &_Mv.InternalTemperature, &_Mv.Pressure, &_Mv.InternalHumidity);
 800332c:	f107 0308 	add.w	r3, r7, #8
 8003330:	f103 000c 	add.w	r0, r3, #12
 8003334:	f107 0308 	add.w	r3, r7, #8
 8003338:	f103 0210 	add.w	r2, r3, #16
 800333c:	f107 0308 	add.w	r3, r7, #8
 8003340:	f103 0108 	add.w	r1, r3, #8
 8003344:	4603      	mov	r3, r0
 8003346:	4817      	ldr	r0, [pc, #92]	; (80033a4 <StartInternalMeasurmentTask+0xcc>)
 8003348:	f7ff f9c2 	bl	80026d0 <BME280_ReadAll>
      osMutexRelease(BME280MutexHandle);
 800334c:	4b14      	ldr	r3, [pc, #80]	; (80033a0 <StartInternalMeasurmentTask+0xc8>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4618      	mov	r0, r3
 8003352:	f00b fdd2 	bl	800eefa <osMutexRelease>
      osMutexRelease(SPI1MutexHandle);
 8003356:	4b11      	ldr	r3, [pc, #68]	; (800339c <StartInternalMeasurmentTask+0xc4>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4618      	mov	r0, r3
 800335c:	f00b fdcd 	bl	800eefa <osMutexRelease>
      osEventFlagsSet(C3V1FlagsHandle, SEND_MEASURMENT_COMMAND_FLAG);
 8003360:	4b0c      	ldr	r3, [pc, #48]	; (8003394 <StartInternalMeasurmentTask+0xbc>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2101      	movs	r1, #1
 8003366:	4618      	mov	r0, r3
 8003368:	f00b fc4c 	bl	800ec04 <osEventFlagsSet>
      osMessageQueuePut(MeasurmentQueueHandle, &_Mv, 0, osWaitForever);
 800336c:	4b0a      	ldr	r3, [pc, #40]	; (8003398 <StartInternalMeasurmentTask+0xc0>)
 800336e:	6818      	ldr	r0, [r3, #0]
 8003370:	f107 0108 	add.w	r1, r7, #8
 8003374:	f04f 33ff 	mov.w	r3, #4294967295
 8003378:	2200      	movs	r2, #0
 800337a:	f00b fe6f 	bl	800f05c <osMessageQueuePut>
      osEventFlagsSet(C3V1FlagsHandle, E_PAPIER_DRAWING_FLAG);
 800337e:	4b05      	ldr	r3, [pc, #20]	; (8003394 <StartInternalMeasurmentTask+0xbc>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2104      	movs	r1, #4
 8003384:	4618      	mov	r0, r3
 8003386:	f00b fc3d 	bl	800ec04 <osEventFlagsSet>
      osDelay(1);
 800338a:	2001      	movs	r0, #1
 800338c:	f00b fb4e 	bl	800ea2c <osDelay>
      osMessageQueueGet(MeasurmentQueueHandle, &_Mv, 0, osWaitForever);
 8003390:	e7b5      	b.n	80032fe <StartInternalMeasurmentTask+0x26>
 8003392:	bf00      	nop
 8003394:	20003de0 	.word	0x20003de0
 8003398:	20003dbc 	.word	0x20003dbc
 800339c:	20003dd0 	.word	0x20003dd0
 80033a0:	20003dd8 	.word	0x20003dd8
 80033a4:	20003d68 	.word	0x20003d68

080033a8 <StartMoonPhaseTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMoonPhaseTask */
void StartMoonPhaseTask(void *argument)
{
 80033a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033ac:	ed2d 8b02 	vpush	{d8}
 80033b0:	b08e      	sub	sp, #56	; 0x38
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN StartMoonPhaseTask */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 80033b6:	4b52      	ldr	r3, [pc, #328]	; (8003500 <StartMoonPhaseTask+0x158>)
 80033b8:	6818      	ldr	r0, [r3, #0]
 80033ba:	f04f 33ff 	mov.w	r3, #4294967295
 80033be:	2202      	movs	r2, #2
 80033c0:	2102      	movs	r1, #2
 80033c2:	f00b fc63 	bl	800ec8c <osEventFlagsWait>
   /* Infinite loop */
   for(;;)
   {
      osEventFlagsWait(C3V1FlagsHandle, MOON_PHASE_FLAG, osFlagsWaitAny, osWaitForever);
 80033c6:	4b4e      	ldr	r3, [pc, #312]	; (8003500 <StartMoonPhaseTask+0x158>)
 80033c8:	6818      	ldr	r0, [r3, #0]
 80033ca:	f04f 33ff 	mov.w	r3, #4294967295
 80033ce:	2200      	movs	r2, #0
 80033d0:	2110      	movs	r1, #16
 80033d2:	f00b fc5b 	bl	800ec8c <osEventFlagsWait>
      RTC_TimeTypeDef RtcTime;
      RTC_DateTypeDef RtcDate;
      double PhaseMoon = 0.0;
 80033d6:	f04f 0200 	mov.w	r2, #0
 80033da:	f04f 0300 	mov.w	r3, #0
 80033de:	e9c7 2302 	strd	r2, r3, [r7, #8]
      uint32_t Cnt     = 0;
 80033e2:	2300      	movs	r3, #0
 80033e4:	637b      	str	r3, [r7, #52]	; 0x34
      HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 80033e6:	f107 0314 	add.w	r3, r7, #20
 80033ea:	2200      	movs	r2, #0
 80033ec:	4619      	mov	r1, r3
 80033ee:	4845      	ldr	r0, [pc, #276]	; (8003504 <StartMoonPhaseTask+0x15c>)
 80033f0:	f007 f9b4 	bl	800a75c <HAL_RTC_GetTime>
      HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 80033f4:	f107 0310 	add.w	r3, r7, #16
 80033f8:	2200      	movs	r2, #0
 80033fa:	4619      	mov	r1, r3
 80033fc:	4841      	ldr	r0, [pc, #260]	; (8003504 <StartMoonPhaseTask+0x15c>)
 80033fe:	f007 fa97 	bl	800a930 <HAL_RTC_GetDate>
      for(int Hours = 0; Hours < 24; Hours++)
 8003402:	2300      	movs	r3, #0
 8003404:	633b      	str	r3, [r7, #48]	; 0x30
 8003406:	e057      	b.n	80034b8 <StartMoonPhaseTask+0x110>
      {
         for(int Minutes = 0; Minutes < 60; Minutes++)
 8003408:	2300      	movs	r3, #0
 800340a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800340c:	e04e      	b.n	80034ac <StartMoonPhaseTask+0x104>
         {
            for(int Seconds = 0; Seconds < 60; Seconds++)
 800340e:	2300      	movs	r3, #0
 8003410:	62bb      	str	r3, [r7, #40]	; 0x28
 8003412:	e045      	b.n	80034a0 <StartMoonPhaseTask+0xf8>
            {
               PhaseMoon += faza((RtcDate.Year + 2000.0), RtcDate.Month, RtcDate.Date, Hours, Minutes, 0);
 8003414:	7cfb      	ldrb	r3, [r7, #19]
 8003416:	4618      	mov	r0, r3
 8003418:	f7fd f89c 	bl	8000554 <__aeabi_i2d>
 800341c:	f04f 0200 	mov.w	r2, #0
 8003420:	4b39      	ldr	r3, [pc, #228]	; (8003508 <StartMoonPhaseTask+0x160>)
 8003422:	f7fc ff4b 	bl	80002bc <__adddf3>
 8003426:	4602      	mov	r2, r0
 8003428:	460b      	mov	r3, r1
 800342a:	ec43 2b18 	vmov	d8, r2, r3
 800342e:	7c7b      	ldrb	r3, [r7, #17]
 8003430:	4618      	mov	r0, r3
 8003432:	f7fd f87f 	bl	8000534 <__aeabi_ui2d>
 8003436:	4604      	mov	r4, r0
 8003438:	460d      	mov	r5, r1
 800343a:	7cbb      	ldrb	r3, [r7, #18]
 800343c:	4618      	mov	r0, r3
 800343e:	f7fd f879 	bl	8000534 <__aeabi_ui2d>
 8003442:	4680      	mov	r8, r0
 8003444:	4689      	mov	r9, r1
 8003446:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003448:	f7fd f884 	bl	8000554 <__aeabi_i2d>
 800344c:	4682      	mov	sl, r0
 800344e:	468b      	mov	fp, r1
 8003450:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003452:	f7fd f87f 	bl	8000554 <__aeabi_i2d>
 8003456:	4602      	mov	r2, r0
 8003458:	460b      	mov	r3, r1
 800345a:	ed9f 5b27 	vldr	d5, [pc, #156]	; 80034f8 <StartMoonPhaseTask+0x150>
 800345e:	ec43 2b14 	vmov	d4, r2, r3
 8003462:	ec4b ab13 	vmov	d3, sl, fp
 8003466:	ec49 8b12 	vmov	d2, r8, r9
 800346a:	ec45 4b11 	vmov	d1, r4, r5
 800346e:	eeb0 0a48 	vmov.f32	s0, s16
 8003472:	eef0 0a68 	vmov.f32	s1, s17
 8003476:	f000 fb87 	bl	8003b88 <faza>
 800347a:	ec51 0b10 	vmov	r0, r1, d0
 800347e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003482:	f7fc ff1b 	bl	80002bc <__adddf3>
 8003486:	4602      	mov	r2, r0
 8003488:	460b      	mov	r3, r1
 800348a:	e9c7 2302 	strd	r2, r3, [r7, #8]
               Cnt++;
 800348e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003490:	3301      	adds	r3, #1
 8003492:	637b      	str	r3, [r7, #52]	; 0x34
               osDelay(5);
 8003494:	2005      	movs	r0, #5
 8003496:	f00b fac9 	bl	800ea2c <osDelay>
            for(int Seconds = 0; Seconds < 60; Seconds++)
 800349a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800349c:	3301      	adds	r3, #1
 800349e:	62bb      	str	r3, [r7, #40]	; 0x28
 80034a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a2:	2b3b      	cmp	r3, #59	; 0x3b
 80034a4:	ddb6      	ble.n	8003414 <StartMoonPhaseTask+0x6c>
         for(int Minutes = 0; Minutes < 60; Minutes++)
 80034a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a8:	3301      	adds	r3, #1
 80034aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ae:	2b3b      	cmp	r3, #59	; 0x3b
 80034b0:	ddad      	ble.n	800340e <StartMoonPhaseTask+0x66>
      for(int Hours = 0; Hours < 24; Hours++)
 80034b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b4:	3301      	adds	r3, #1
 80034b6:	633b      	str	r3, [r7, #48]	; 0x30
 80034b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ba:	2b17      	cmp	r3, #23
 80034bc:	dda4      	ble.n	8003408 <StartMoonPhaseTask+0x60>
            }
         }
      }
      PhaseMoon /= (Cnt);
 80034be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80034c2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80034c4:	f7fd f836 	bl	8000534 <__aeabi_ui2d>
 80034c8:	4602      	mov	r2, r0
 80034ca:	460b      	mov	r3, r1
 80034cc:	4620      	mov	r0, r4
 80034ce:	4629      	mov	r1, r5
 80034d0:	f7fd f9d4 	bl	800087c <__aeabi_ddiv>
 80034d4:	4602      	mov	r2, r0
 80034d6:	460b      	mov	r3, r1
 80034d8:	e9c7 2302 	strd	r2, r3, [r7, #8]
      osMessageQueuePut(MoonPhaseQueueHandle, &PhaseMoon, 0, osWaitForever);
 80034dc:	4b0b      	ldr	r3, [pc, #44]	; (800350c <StartMoonPhaseTask+0x164>)
 80034de:	6818      	ldr	r0, [r3, #0]
 80034e0:	f107 0108 	add.w	r1, r7, #8
 80034e4:	f04f 33ff 	mov.w	r3, #4294967295
 80034e8:	2200      	movs	r2, #0
 80034ea:	f00b fdb7 	bl	800f05c <osMessageQueuePut>
      osDelay(1);
 80034ee:	2001      	movs	r0, #1
 80034f0:	f00b fa9c 	bl	800ea2c <osDelay>
   {
 80034f4:	e767      	b.n	80033c6 <StartMoonPhaseTask+0x1e>
 80034f6:	bf00      	nop
	...
 8003500:	20003de0 	.word	0x20003de0
 8003504:	20003f04 	.word	0x20003f04
 8003508:	409f4000 	.word	0x409f4000
 800350c:	20003dc0 	.word	0x20003dc0

08003510 <StartE_PapierDrawingTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartE_PapierDrawingTask */
void StartE_PapierDrawingTask(void *argument)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b0b2      	sub	sp, #200	; 0xc8
 8003514:	af02      	add	r7, sp, #8
 8003516:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN StartE_PapierDrawingTask */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 8003518:	4bc8      	ldr	r3, [pc, #800]	; (800383c <StartE_PapierDrawingTask+0x32c>)
 800351a:	6818      	ldr	r0, [r3, #0]
 800351c:	f04f 33ff 	mov.w	r3, #4294967295
 8003520:	2202      	movs	r2, #2
 8003522:	2102      	movs	r1, #2
 8003524:	f00b fbb2 	bl	800ec8c <osEventFlagsWait>
   RTC_TimeTypeDef RtcTime;
   RTC_DateTypeDef RtcDate;
   MV_TypeDef _Mv    = { 0 };
 8003528:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800352c:	2230      	movs	r2, #48	; 0x30
 800352e:	2100      	movs	r1, #0
 8003530:	4618      	mov	r0, r3
 8003532:	f00f fa03 	bl	801293c <memset>
   double _MoonPhase = 0;
 8003536:	f04f 0200 	mov.w	r2, #0
 800353a:	f04f 0300 	mov.w	r3, #0
 800353e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
   /* Infinite loop */
   for(;;)
   {
      osEventFlagsWait(C3V1FlagsHandle, E_PAPIER_DRAWING_FLAG, osFlagsWaitAny, osWaitForever);
 8003542:	4bbe      	ldr	r3, [pc, #760]	; (800383c <StartE_PapierDrawingTask+0x32c>)
 8003544:	6818      	ldr	r0, [r3, #0]
 8003546:	f04f 33ff 	mov.w	r3, #4294967295
 800354a:	2200      	movs	r2, #0
 800354c:	2104      	movs	r1, #4
 800354e:	f00b fb9d 	bl	800ec8c <osEventFlagsWait>
      osMessageQueueGet(MeasurmentQueueHandle, &_Mv, 0, osWaitForever);
 8003552:	4bbb      	ldr	r3, [pc, #748]	; (8003840 <StartE_PapierDrawingTask+0x330>)
 8003554:	6818      	ldr	r0, [r3, #0]
 8003556:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800355a:	f04f 33ff 	mov.w	r3, #4294967295
 800355e:	2200      	movs	r2, #0
 8003560:	f00b fddc 	bl	800f11c <osMessageQueueGet>
      osMutexAcquire(E_PAPIERMutexHandle, osWaitForever);
 8003564:	4bb7      	ldr	r3, [pc, #732]	; (8003844 <StartE_PapierDrawingTask+0x334>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f04f 31ff 	mov.w	r1, #4294967295
 800356c:	4618      	mov	r0, r3
 800356e:	f00b fc79 	bl	800ee64 <osMutexAcquire>
      taskENTER_CRITICAL();
 8003572:	f00e fe9f 	bl	80122b4 <vPortEnterCritical>
      char mes[100];
      sprintf(mes, "H %0.2f", _Mv.ExtHumidity);
 8003576:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003578:	4618      	mov	r0, r3
 800357a:	f7fc fffd 	bl	8000578 <__aeabi_f2d>
 800357e:	4602      	mov	r2, r0
 8003580:	460b      	mov	r3, r1
 8003582:	f107 000c 	add.w	r0, r7, #12
 8003586:	49b0      	ldr	r1, [pc, #704]	; (8003848 <StartE_PapierDrawingTask+0x338>)
 8003588:	f002 fff2 	bl	8006570 <sprintf_>
      GFX_DrawString(0, 0, mes, BLACK, 1, E_PAPIER);
 800358c:	f107 020c 	add.w	r2, r7, #12
 8003590:	2301      	movs	r3, #1
 8003592:	9301      	str	r3, [sp, #4]
 8003594:	2301      	movs	r3, #1
 8003596:	9300      	str	r3, [sp, #0]
 8003598:	2300      	movs	r3, #0
 800359a:	2100      	movs	r1, #0
 800359c:	2000      	movs	r0, #0
 800359e:	f7fd fe89 	bl	80012b4 <GFX_DrawString>
      sprintf(mes, "T %0.2f", _Mv.ExtTemperature);
 80035a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7fc ffe7 	bl	8000578 <__aeabi_f2d>
 80035aa:	4602      	mov	r2, r0
 80035ac:	460b      	mov	r3, r1
 80035ae:	f107 000c 	add.w	r0, r7, #12
 80035b2:	49a6      	ldr	r1, [pc, #664]	; (800384c <StartE_PapierDrawingTask+0x33c>)
 80035b4:	f002 ffdc 	bl	8006570 <sprintf_>
      GFX_DrawString(0, 10, mes, BLACK, 1, E_PAPIER);
 80035b8:	f107 020c 	add.w	r2, r7, #12
 80035bc:	2301      	movs	r3, #1
 80035be:	9301      	str	r3, [sp, #4]
 80035c0:	2301      	movs	r3, #1
 80035c2:	9300      	str	r3, [sp, #0]
 80035c4:	2300      	movs	r3, #0
 80035c6:	210a      	movs	r1, #10
 80035c8:	2000      	movs	r0, #0
 80035ca:	f7fd fe73 	bl	80012b4 <GFX_DrawString>
      sprintf(mes, "PM1 %d", _Mv.ExtPM1);
 80035ce:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80035d2:	461a      	mov	r2, r3
 80035d4:	f107 030c 	add.w	r3, r7, #12
 80035d8:	499d      	ldr	r1, [pc, #628]	; (8003850 <StartE_PapierDrawingTask+0x340>)
 80035da:	4618      	mov	r0, r3
 80035dc:	f002 ffc8 	bl	8006570 <sprintf_>
      GFX_DrawString(0, 20, mes, BLACK, 1, E_PAPIER);
 80035e0:	f107 020c 	add.w	r2, r7, #12
 80035e4:	2301      	movs	r3, #1
 80035e6:	9301      	str	r3, [sp, #4]
 80035e8:	2301      	movs	r3, #1
 80035ea:	9300      	str	r3, [sp, #0]
 80035ec:	2300      	movs	r3, #0
 80035ee:	2114      	movs	r1, #20
 80035f0:	2000      	movs	r0, #0
 80035f2:	f7fd fe5f 	bl	80012b4 <GFX_DrawString>
      sprintf(mes, "PM10 %d", _Mv.ExtPM10);
 80035f6:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 80035fa:	461a      	mov	r2, r3
 80035fc:	f107 030c 	add.w	r3, r7, #12
 8003600:	4994      	ldr	r1, [pc, #592]	; (8003854 <StartE_PapierDrawingTask+0x344>)
 8003602:	4618      	mov	r0, r3
 8003604:	f002 ffb4 	bl	8006570 <sprintf_>
      GFX_DrawString(0, 30, mes, BLACK, 1, E_PAPIER);
 8003608:	f107 020c 	add.w	r2, r7, #12
 800360c:	2301      	movs	r3, #1
 800360e:	9301      	str	r3, [sp, #4]
 8003610:	2301      	movs	r3, #1
 8003612:	9300      	str	r3, [sp, #0]
 8003614:	2300      	movs	r3, #0
 8003616:	211e      	movs	r1, #30
 8003618:	2000      	movs	r0, #0
 800361a:	f7fd fe4b 	bl	80012b4 <GFX_DrawString>
      sprintf(mes, "PM2,5 %d", _Mv.ExtPM25);
 800361e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8003622:	461a      	mov	r2, r3
 8003624:	f107 030c 	add.w	r3, r7, #12
 8003628:	498b      	ldr	r1, [pc, #556]	; (8003858 <StartE_PapierDrawingTask+0x348>)
 800362a:	4618      	mov	r0, r3
 800362c:	f002 ffa0 	bl	8006570 <sprintf_>
      GFX_DrawString(0, 40, mes, BLACK, 1, E_PAPIER);
 8003630:	f107 020c 	add.w	r2, r7, #12
 8003634:	2301      	movs	r3, #1
 8003636:	9301      	str	r3, [sp, #4]
 8003638:	2301      	movs	r3, #1
 800363a:	9300      	str	r3, [sp, #0]
 800363c:	2300      	movs	r3, #0
 800363e:	2128      	movs	r1, #40	; 0x28
 8003640:	2000      	movs	r0, #0
 8003642:	f7fd fe37 	bl	80012b4 <GFX_DrawString>
      sprintf(mes, "Battery Level %0.2f", _Mv.BatteryVoltage);
 8003646:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800364a:	4618      	mov	r0, r3
 800364c:	f7fc ff94 	bl	8000578 <__aeabi_f2d>
 8003650:	4602      	mov	r2, r0
 8003652:	460b      	mov	r3, r1
 8003654:	f107 000c 	add.w	r0, r7, #12
 8003658:	4980      	ldr	r1, [pc, #512]	; (800385c <StartE_PapierDrawingTask+0x34c>)
 800365a:	f002 ff89 	bl	8006570 <sprintf_>
      GFX_DrawString(0, 50, mes, BLACK, 1, E_PAPIER);
 800365e:	f107 020c 	add.w	r2, r7, #12
 8003662:	2301      	movs	r3, #1
 8003664:	9301      	str	r3, [sp, #4]
 8003666:	2301      	movs	r3, #1
 8003668:	9300      	str	r3, [sp, #0]
 800366a:	2300      	movs	r3, #0
 800366c:	2132      	movs	r1, #50	; 0x32
 800366e:	2000      	movs	r0, #0
 8003670:	f7fd fe20 	bl	80012b4 <GFX_DrawString>
      if(!(_Mv.BatteryState & 0x01))
 8003674:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 8003678:	f003 0301 	and.w	r3, r3, #1
 800367c:	2b00      	cmp	r3, #0
 800367e:	d10a      	bne.n	8003696 <StartE_PapierDrawingTask+0x186>
      {
         GFX_DrawString(0, 60, "Battery Charging", BLACK, 1, E_PAPIER);
 8003680:	2301      	movs	r3, #1
 8003682:	9301      	str	r3, [sp, #4]
 8003684:	2301      	movs	r3, #1
 8003686:	9300      	str	r3, [sp, #0]
 8003688:	2300      	movs	r3, #0
 800368a:	4a75      	ldr	r2, [pc, #468]	; (8003860 <StartE_PapierDrawingTask+0x350>)
 800368c:	213c      	movs	r1, #60	; 0x3c
 800368e:	2000      	movs	r0, #0
 8003690:	f7fd fe10 	bl	80012b4 <GFX_DrawString>
 8003694:	e009      	b.n	80036aa <StartE_PapierDrawingTask+0x19a>
      }
      else
      {
         GFX_DrawString(0, 60, "Battery No Charging", BLACK, 1, E_PAPIER);
 8003696:	2301      	movs	r3, #1
 8003698:	9301      	str	r3, [sp, #4]
 800369a:	2301      	movs	r3, #1
 800369c:	9300      	str	r3, [sp, #0]
 800369e:	2300      	movs	r3, #0
 80036a0:	4a70      	ldr	r2, [pc, #448]	; (8003864 <StartE_PapierDrawingTask+0x354>)
 80036a2:	213c      	movs	r1, #60	; 0x3c
 80036a4:	2000      	movs	r0, #0
 80036a6:	f7fd fe05 	bl	80012b4 <GFX_DrawString>
      }
      if(!(_Mv.BatteryState & 0x02))
 80036aa:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d10a      	bne.n	80036cc <StartE_PapierDrawingTask+0x1bc>
      {
         GFX_DrawString(0, 70, "Battery Standby", BLACK, 1, E_PAPIER);
 80036b6:	2301      	movs	r3, #1
 80036b8:	9301      	str	r3, [sp, #4]
 80036ba:	2301      	movs	r3, #1
 80036bc:	9300      	str	r3, [sp, #0]
 80036be:	2300      	movs	r3, #0
 80036c0:	4a69      	ldr	r2, [pc, #420]	; (8003868 <StartE_PapierDrawingTask+0x358>)
 80036c2:	2146      	movs	r1, #70	; 0x46
 80036c4:	2000      	movs	r0, #0
 80036c6:	f7fd fdf5 	bl	80012b4 <GFX_DrawString>
 80036ca:	e009      	b.n	80036e0 <StartE_PapierDrawingTask+0x1d0>
      }
      else
      {
         GFX_DrawString(0, 70, "Battery No Standby", BLACK, 1, E_PAPIER);
 80036cc:	2301      	movs	r3, #1
 80036ce:	9301      	str	r3, [sp, #4]
 80036d0:	2301      	movs	r3, #1
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	2300      	movs	r3, #0
 80036d6:	4a65      	ldr	r2, [pc, #404]	; (800386c <StartE_PapierDrawingTask+0x35c>)
 80036d8:	2146      	movs	r1, #70	; 0x46
 80036da:	2000      	movs	r0, #0
 80036dc:	f7fd fdea 	bl	80012b4 <GFX_DrawString>
      }
      HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 80036e0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80036e4:	2200      	movs	r2, #0
 80036e6:	4619      	mov	r1, r3
 80036e8:	4861      	ldr	r0, [pc, #388]	; (8003870 <StartE_PapierDrawingTask+0x360>)
 80036ea:	f007 f837 	bl	800a75c <HAL_RTC_GetTime>
      HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 80036ee:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80036f2:	2200      	movs	r2, #0
 80036f4:	4619      	mov	r1, r3
 80036f6:	485e      	ldr	r0, [pc, #376]	; (8003870 <StartE_PapierDrawingTask+0x360>)
 80036f8:	f007 f91a 	bl	800a930 <HAL_RTC_GetDate>
      sprintf(mes, "%d h %d m %d s", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 80036fc:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8003700:	461a      	mov	r2, r3
 8003702:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8003706:	4619      	mov	r1, r3
 8003708:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 800370c:	f107 000c 	add.w	r0, r7, #12
 8003710:	9300      	str	r3, [sp, #0]
 8003712:	460b      	mov	r3, r1
 8003714:	4957      	ldr	r1, [pc, #348]	; (8003874 <StartE_PapierDrawingTask+0x364>)
 8003716:	f002 ff2b 	bl	8006570 <sprintf_>
      GFX_DrawString(0, 80, mes, BLACK, 1, E_PAPIER);
 800371a:	f107 020c 	add.w	r2, r7, #12
 800371e:	2301      	movs	r3, #1
 8003720:	9301      	str	r3, [sp, #4]
 8003722:	2301      	movs	r3, #1
 8003724:	9300      	str	r3, [sp, #0]
 8003726:	2300      	movs	r3, #0
 8003728:	2150      	movs	r1, #80	; 0x50
 800372a:	2000      	movs	r0, #0
 800372c:	f7fd fdc2 	bl	80012b4 <GFX_DrawString>
      sprintf(mes, "%d : %d ; 2022", RtcDate.Date, RtcDate.Month);
 8003730:	f897 30aa 	ldrb.w	r3, [r7, #170]	; 0xaa
 8003734:	461a      	mov	r2, r3
 8003736:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 800373a:	f107 000c 	add.w	r0, r7, #12
 800373e:	494e      	ldr	r1, [pc, #312]	; (8003878 <StartE_PapierDrawingTask+0x368>)
 8003740:	f002 ff16 	bl	8006570 <sprintf_>
      GFX_DrawString(0, 90, mes, BLACK, 1, E_PAPIER);
 8003744:	f107 020c 	add.w	r2, r7, #12
 8003748:	2301      	movs	r3, #1
 800374a:	9301      	str	r3, [sp, #4]
 800374c:	2301      	movs	r3, #1
 800374e:	9300      	str	r3, [sp, #0]
 8003750:	2300      	movs	r3, #0
 8003752:	215a      	movs	r1, #90	; 0x5a
 8003754:	2000      	movs	r0, #0
 8003756:	f7fd fdad 	bl	80012b4 <GFX_DrawString>
      sprintf(mes, "%Internal Temperature: %0.2f", _Mv.InternalTemperature);
 800375a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800375e:	4618      	mov	r0, r3
 8003760:	f7fc ff0a 	bl	8000578 <__aeabi_f2d>
 8003764:	4602      	mov	r2, r0
 8003766:	460b      	mov	r3, r1
 8003768:	f107 000c 	add.w	r0, r7, #12
 800376c:	4943      	ldr	r1, [pc, #268]	; (800387c <StartE_PapierDrawingTask+0x36c>)
 800376e:	f002 feff 	bl	8006570 <sprintf_>
      GFX_DrawString(0, 210, mes, BLACK, 1, E_PAPIER);
 8003772:	f107 020c 	add.w	r2, r7, #12
 8003776:	2301      	movs	r3, #1
 8003778:	9301      	str	r3, [sp, #4]
 800377a:	2301      	movs	r3, #1
 800377c:	9300      	str	r3, [sp, #0]
 800377e:	2300      	movs	r3, #0
 8003780:	21d2      	movs	r1, #210	; 0xd2
 8003782:	2000      	movs	r0, #0
 8003784:	f7fd fd96 	bl	80012b4 <GFX_DrawString>
      sprintf(mes, "%Internal Humidity: %0.2f", _Mv.InternalHumidity);
 8003788:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800378c:	4618      	mov	r0, r3
 800378e:	f7fc fef3 	bl	8000578 <__aeabi_f2d>
 8003792:	4602      	mov	r2, r0
 8003794:	460b      	mov	r3, r1
 8003796:	f107 000c 	add.w	r0, r7, #12
 800379a:	4939      	ldr	r1, [pc, #228]	; (8003880 <StartE_PapierDrawingTask+0x370>)
 800379c:	f002 fee8 	bl	8006570 <sprintf_>
      GFX_DrawString(0, 200, mes, BLACK, 1, E_PAPIER);
 80037a0:	f107 020c 	add.w	r2, r7, #12
 80037a4:	2301      	movs	r3, #1
 80037a6:	9301      	str	r3, [sp, #4]
 80037a8:	2301      	movs	r3, #1
 80037aa:	9300      	str	r3, [sp, #0]
 80037ac:	2300      	movs	r3, #0
 80037ae:	21c8      	movs	r1, #200	; 0xc8
 80037b0:	2000      	movs	r0, #0
 80037b2:	f7fd fd7f 	bl	80012b4 <GFX_DrawString>
      sprintf(mes, "%Pressure: %0.2f", _Mv.Pressure);
 80037b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7fc fedc 	bl	8000578 <__aeabi_f2d>
 80037c0:	4602      	mov	r2, r0
 80037c2:	460b      	mov	r3, r1
 80037c4:	f107 000c 	add.w	r0, r7, #12
 80037c8:	492e      	ldr	r1, [pc, #184]	; (8003884 <StartE_PapierDrawingTask+0x374>)
 80037ca:	f002 fed1 	bl	8006570 <sprintf_>
      GFX_DrawString(0, 220, mes, BLACK, 1, E_PAPIER);
 80037ce:	f107 020c 	add.w	r2, r7, #12
 80037d2:	2301      	movs	r3, #1
 80037d4:	9301      	str	r3, [sp, #4]
 80037d6:	2301      	movs	r3, #1
 80037d8:	9300      	str	r3, [sp, #0]
 80037da:	2300      	movs	r3, #0
 80037dc:	21dc      	movs	r1, #220	; 0xdc
 80037de:	2000      	movs	r0, #0
 80037e0:	f7fd fd68 	bl	80012b4 <GFX_DrawString>
      osMessageQueueGet(MoonPhaseQueueHandle, &_MoonPhase, 0, 0);
 80037e4:	4b28      	ldr	r3, [pc, #160]	; (8003888 <StartE_PapierDrawingTask+0x378>)
 80037e6:	6818      	ldr	r0, [r3, #0]
 80037e8:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80037ec:	2300      	movs	r3, #0
 80037ee:	2200      	movs	r2, #0
 80037f0:	f00b fc94 	bl	800f11c <osMessageQueueGet>
      sprintf(mes, "Moon Phase: %0.2f%%", _MoonPhase);
 80037f4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80037f8:	f107 000c 	add.w	r0, r7, #12
 80037fc:	4923      	ldr	r1, [pc, #140]	; (800388c <StartE_PapierDrawingTask+0x37c>)
 80037fe:	f002 feb7 	bl	8006570 <sprintf_>
      GFX_DrawString(0, 230, mes, BLACK, 1, E_PAPIER);
 8003802:	f107 020c 	add.w	r2, r7, #12
 8003806:	2301      	movs	r3, #1
 8003808:	9301      	str	r3, [sp, #4]
 800380a:	2301      	movs	r3, #1
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	2300      	movs	r3, #0
 8003810:	21e6      	movs	r1, #230	; 0xe6
 8003812:	2000      	movs	r0, #0
 8003814:	f7fd fd4e 	bl	80012b4 <GFX_DrawString>
      taskEXIT_CRITICAL();
 8003818:	f00e fd7c 	bl	8012314 <vPortExitCritical>
      osMutexRelease(E_PAPIERMutexHandle);
 800381c:	4b09      	ldr	r3, [pc, #36]	; (8003844 <StartE_PapierDrawingTask+0x334>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4618      	mov	r0, r3
 8003822:	f00b fb6a 	bl	800eefa <osMutexRelease>
      osEventFlagsSet(C3V1FlagsHandle, E_PAPIER_DISPLAY_FLAG);
 8003826:	4b05      	ldr	r3, [pc, #20]	; (800383c <StartE_PapierDrawingTask+0x32c>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2108      	movs	r1, #8
 800382c:	4618      	mov	r0, r3
 800382e:	f00b f9e9 	bl	800ec04 <osEventFlagsSet>
      osDelay(1);
 8003832:	2001      	movs	r0, #1
 8003834:	f00b f8fa 	bl	800ea2c <osDelay>
   {
 8003838:	e683      	b.n	8003542 <StartE_PapierDrawingTask+0x32>
 800383a:	bf00      	nop
 800383c:	20003de0 	.word	0x20003de0
 8003840:	20003dbc 	.word	0x20003dbc
 8003844:	20003dd4 	.word	0x20003dd4
 8003848:	080184e0 	.word	0x080184e0
 800384c:	080184e8 	.word	0x080184e8
 8003850:	080184f0 	.word	0x080184f0
 8003854:	080184f8 	.word	0x080184f8
 8003858:	08018500 	.word	0x08018500
 800385c:	0801850c 	.word	0x0801850c
 8003860:	08018520 	.word	0x08018520
 8003864:	08018534 	.word	0x08018534
 8003868:	08018548 	.word	0x08018548
 800386c:	08018558 	.word	0x08018558
 8003870:	20003f04 	.word	0x20003f04
 8003874:	080184b8 	.word	0x080184b8
 8003878:	0801856c 	.word	0x0801856c
 800387c:	0801857c 	.word	0x0801857c
 8003880:	0801859c 	.word	0x0801859c
 8003884:	080185b8 	.word	0x080185b8
 8003888:	20003dc0 	.word	0x20003dc0
 800388c:	080185cc 	.word	0x080185cc

08003890 <StartE_PapierDisplayTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartE_PapierDisplayTask */
void StartE_PapierDisplayTask(void *argument)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN StartE_PapierDisplayTask */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 8003898:	4b1d      	ldr	r3, [pc, #116]	; (8003910 <StartE_PapierDisplayTask+0x80>)
 800389a:	6818      	ldr	r0, [r3, #0]
 800389c:	f04f 33ff 	mov.w	r3, #4294967295
 80038a0:	2202      	movs	r2, #2
 80038a2:	2102      	movs	r1, #2
 80038a4:	f00b f9f2 	bl	800ec8c <osEventFlagsWait>
   /* Infinite loop */
   for(;;)
   {
      osEventFlagsWait(C3V1FlagsHandle, E_PAPIER_DISPLAY_FLAG, osFlagsWaitAny, osWaitForever);
 80038a8:	4b19      	ldr	r3, [pc, #100]	; (8003910 <StartE_PapierDisplayTask+0x80>)
 80038aa:	6818      	ldr	r0, [r3, #0]
 80038ac:	f04f 33ff 	mov.w	r3, #4294967295
 80038b0:	2200      	movs	r2, #0
 80038b2:	2108      	movs	r1, #8
 80038b4:	f00b f9ea 	bl	800ec8c <osEventFlagsWait>
      osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 80038b8:	4b16      	ldr	r3, [pc, #88]	; (8003914 <StartE_PapierDisplayTask+0x84>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f04f 31ff 	mov.w	r1, #4294967295
 80038c0:	4618      	mov	r0, r3
 80038c2:	f00b facf 	bl	800ee64 <osMutexAcquire>
      osMutexAcquire(E_PAPIERMutexHandle, osWaitForever);
 80038c6:	4b14      	ldr	r3, [pc, #80]	; (8003918 <StartE_PapierDisplayTask+0x88>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f04f 31ff 	mov.w	r1, #4294967295
 80038ce:	4618      	mov	r0, r3
 80038d0:	f00b fac8 	bl	800ee64 <osMutexAcquire>
      osMutexAcquire(SPI1MutexHandle, osWaitForever);
 80038d4:	4b11      	ldr	r3, [pc, #68]	; (800391c <StartE_PapierDisplayTask+0x8c>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f04f 31ff 	mov.w	r1, #4294967295
 80038dc:	4618      	mov	r0, r3
 80038de:	f00b fac1 	bl	800ee64 <osMutexAcquire>
      e_papier_display();
 80038e2:	f7ff fa05 	bl	8002cf0 <e_papier_display>
      e_papier_clear();
 80038e6:	f7ff fa55 	bl	8002d94 <e_papier_clear>
      osMutexRelease(SPI1MutexHandle);
 80038ea:	4b0c      	ldr	r3, [pc, #48]	; (800391c <StartE_PapierDisplayTask+0x8c>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f00b fb03 	bl	800eefa <osMutexRelease>
      osMutexRelease(E_PAPIERMutexHandle);
 80038f4:	4b08      	ldr	r3, [pc, #32]	; (8003918 <StartE_PapierDisplayTask+0x88>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f00b fafe 	bl	800eefa <osMutexRelease>
      osMutexRelease(ScreensDcMutexHandle);
 80038fe:	4b05      	ldr	r3, [pc, #20]	; (8003914 <StartE_PapierDisplayTask+0x84>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4618      	mov	r0, r3
 8003904:	f00b faf9 	bl	800eefa <osMutexRelease>
      osDelay(1);
 8003908:	2001      	movs	r0, #1
 800390a:	f00b f88f 	bl	800ea2c <osDelay>
      osEventFlagsWait(C3V1FlagsHandle, E_PAPIER_DISPLAY_FLAG, osFlagsWaitAny, osWaitForever);
 800390e:	e7cb      	b.n	80038a8 <StartE_PapierDisplayTask+0x18>
 8003910:	20003de0 	.word	0x20003de0
 8003914:	20003dc8 	.word	0x20003dc8
 8003918:	20003dd4 	.word	0x20003dd4
 800391c:	20003dd0 	.word	0x20003dd0

08003920 <StartMenuTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMenuTask */
void StartMenuTask(void *argument)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN StartMenuTask */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 8003928:	4b06      	ldr	r3, [pc, #24]	; (8003944 <StartMenuTask+0x24>)
 800392a:	6818      	ldr	r0, [r3, #0]
 800392c:	f04f 33ff 	mov.w	r3, #4294967295
 8003930:	2202      	movs	r2, #2
 8003932:	2102      	movs	r1, #2
 8003934:	f00b f9aa 	bl	800ec8c <osEventFlagsWait>
   /* Infinite loop */
   for(;;)
   {
      MENU_Handler();
 8003938:	f7fd fe7e 	bl	8001638 <MENU_Handler>
      osDelay(10);
 800393c:	200a      	movs	r0, #10
 800393e:	f00b f875 	bl	800ea2c <osDelay>
      MENU_Handler();
 8003942:	e7f9      	b.n	8003938 <StartMenuTask+0x18>
 8003944:	20003de0 	.word	0x20003de0

08003948 <MenuTimerCallback>:
   /* USER CODE END StartMenuTask */
}

/* MenuTimerCallback function */
void MenuTimerCallback(void *argument)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN MenuTimerCallback */

   /* USER CODE END MenuTimerCallback */
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <RFP_DataFunction>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
static void RFP_DataFunction(uint8_t *Data, uint32_t DataLength, uint32_t DataStart)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b092      	sub	sp, #72	; 0x48
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
   uint8_t *TempPtr;
   MV_TypeDef Mv = { 0 };
 8003968:	f107 0314 	add.w	r3, r7, #20
 800396c:	2230      	movs	r2, #48	; 0x30
 800396e:	2100      	movs	r1, #0
 8003970:	4618      	mov	r0, r3
 8003972:	f00e ffe3 	bl	801293c <memset>
   TempPtr       = &Mv.ExtHumidity;
 8003976:	f107 0314 	add.w	r3, r7, #20
 800397a:	3304      	adds	r3, #4
 800397c:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr      = Data[DataStart];
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4413      	add	r3, r2
 8003984:	781a      	ldrb	r2, [r3, #0]
 8003986:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003988:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 800398a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800398c:	3301      	adds	r3, #1
 800398e:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 1];
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	3301      	adds	r3, #1
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	4413      	add	r3, r2
 8003998:	781a      	ldrb	r2, [r3, #0]
 800399a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800399c:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 800399e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039a0:	3301      	adds	r3, #1
 80039a2:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 2];
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	3302      	adds	r3, #2
 80039a8:	68fa      	ldr	r2, [r7, #12]
 80039aa:	4413      	add	r3, r2
 80039ac:	781a      	ldrb	r2, [r3, #0]
 80039ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039b0:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 80039b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039b4:	3301      	adds	r3, #1
 80039b6:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 3];
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	3303      	adds	r3, #3
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	4413      	add	r3, r2
 80039c0:	781a      	ldrb	r2, [r3, #0]
 80039c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039c4:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 80039c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039c8:	3301      	adds	r3, #1
 80039ca:	647b      	str	r3, [r7, #68]	; 0x44
   TempPtr  = &Mv.ExtTemperature;
 80039cc:	f107 0314 	add.w	r3, r7, #20
 80039d0:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 5];
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	3305      	adds	r3, #5
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	4413      	add	r3, r2
 80039da:	781a      	ldrb	r2, [r3, #0]
 80039dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039de:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 80039e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039e2:	3301      	adds	r3, #1
 80039e4:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 6];
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	3306      	adds	r3, #6
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	4413      	add	r3, r2
 80039ee:	781a      	ldrb	r2, [r3, #0]
 80039f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039f2:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 80039f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039f6:	3301      	adds	r3, #1
 80039f8:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 7];
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	3307      	adds	r3, #7
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	4413      	add	r3, r2
 8003a02:	781a      	ldrb	r2, [r3, #0]
 8003a04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a06:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 8003a08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 8];
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	3308      	adds	r3, #8
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	4413      	add	r3, r2
 8003a16:	781a      	ldrb	r2, [r3, #0]
 8003a18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a1a:	701a      	strb	r2, [r3, #0]
   TempPtr  = &Mv.BatteryVoltage;
 8003a1c:	f107 0314 	add.w	r3, r7, #20
 8003a20:	3328      	adds	r3, #40	; 0x28
 8003a22:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 13];
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	330d      	adds	r3, #13
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	781a      	ldrb	r2, [r3, #0]
 8003a2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a30:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 8003a32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a34:	3301      	adds	r3, #1
 8003a36:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 14];
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	330e      	adds	r3, #14
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	4413      	add	r3, r2
 8003a40:	781a      	ldrb	r2, [r3, #0]
 8003a42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a44:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 8003a46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a48:	3301      	adds	r3, #1
 8003a4a:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 15];
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	330f      	adds	r3, #15
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	4413      	add	r3, r2
 8003a54:	781a      	ldrb	r2, [r3, #0]
 8003a56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a58:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 8003a5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr        = Data[DataStart + 16];
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	3310      	adds	r3, #16
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	4413      	add	r3, r2
 8003a68:	781a      	ldrb	r2, [r3, #0]
 8003a6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a6c:	701a      	strb	r2, [r3, #0]
   TempPtr         = NULL;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	647b      	str	r3, [r7, #68]	; 0x44
   Mv.ExtPM1       = (Data[22 + 3] | (Data[21 + 3] << 8));
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	3319      	adds	r3, #25
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	b21a      	sxth	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	3318      	adds	r3, #24
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	021b      	lsls	r3, r3, #8
 8003a82:	b21b      	sxth	r3, r3
 8003a84:	4313      	orrs	r3, r2
 8003a86:	b21b      	sxth	r3, r3
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	853b      	strh	r3, [r7, #40]	; 0x28
   Mv.ExtPM25      = (Data[28 + 3] | (Data[27 + 3] << 8));
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	331f      	adds	r3, #31
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	b21a      	sxth	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	331e      	adds	r3, #30
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	021b      	lsls	r3, r3, #8
 8003a9c:	b21b      	sxth	r3, r3
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	b21b      	sxth	r3, r3
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	857b      	strh	r3, [r7, #42]	; 0x2a
   Mv.ExtPM10      = (Data[25 + 3] | (Data[24 + 3] << 8));
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	331c      	adds	r3, #28
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	b21a      	sxth	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	331b      	adds	r3, #27
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	021b      	lsls	r3, r3, #8
 8003ab6:	b21b      	sxth	r3, r3
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	b21b      	sxth	r3, r3
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	85bb      	strh	r3, [r7, #44]	; 0x2c
   Mv.BatteryState = Data[DataStart + 18];
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	3312      	adds	r3, #18
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
   osMessageQueuePut(MeasurmentQueueHandle, &Mv, 0, osWaitForever);
 8003ace:	4b06      	ldr	r3, [pc, #24]	; (8003ae8 <RFP_DataFunction+0x18c>)
 8003ad0:	6818      	ldr	r0, [r3, #0]
 8003ad2:	f107 0114 	add.w	r1, r7, #20
 8003ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8003ada:	2200      	movs	r2, #0
 8003adc:	f00b fabe 	bl	800f05c <osMessageQueuePut>
}
 8003ae0:	bf00      	nop
 8003ae2:	3748      	adds	r7, #72	; 0x48
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	20003dbc 	.word	0x20003dbc

08003aec <rang>:
static double rang(double x)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	ed87 0b00 	vstr	d0, [r7]
   double A, b;
   b = x / 360;
 8003af6:	f04f 0200 	mov.w	r2, #0
 8003afa:	4b22      	ldr	r3, [pc, #136]	; (8003b84 <rang+0x98>)
 8003afc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003b00:	f7fc febc 	bl	800087c <__aeabi_ddiv>
 8003b04:	4602      	mov	r2, r0
 8003b06:	460b      	mov	r3, r1
 8003b08:	e9c7 2302 	strd	r2, r3, [r7, #8]
   A = 360 * (b - (int)b);
 8003b0c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003b10:	f7fd f83a 	bl	8000b88 <__aeabi_d2iz>
 8003b14:	4603      	mov	r3, r0
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7fc fd1c 	bl	8000554 <__aeabi_i2d>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	460b      	mov	r3, r1
 8003b20:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003b24:	f7fc fbc8 	bl	80002b8 <__aeabi_dsub>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	4610      	mov	r0, r2
 8003b2e:	4619      	mov	r1, r3
 8003b30:	f04f 0200 	mov.w	r2, #0
 8003b34:	4b13      	ldr	r3, [pc, #76]	; (8003b84 <rang+0x98>)
 8003b36:	f7fc fd77 	bl	8000628 <__aeabi_dmul>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	e9c7 2304 	strd	r2, r3, [r7, #16]
   if(A < 0)
 8003b42:	f04f 0200 	mov.w	r2, #0
 8003b46:	f04f 0300 	mov.w	r3, #0
 8003b4a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003b4e:	f7fc ffdd 	bl	8000b0c <__aeabi_dcmplt>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00a      	beq.n	8003b6e <rang+0x82>
      A = A + 360;
 8003b58:	f04f 0200 	mov.w	r2, #0
 8003b5c:	4b09      	ldr	r3, [pc, #36]	; (8003b84 <rang+0x98>)
 8003b5e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003b62:	f7fc fbab 	bl	80002bc <__adddf3>
 8003b66:	4602      	mov	r2, r0
 8003b68:	460b      	mov	r3, r1
 8003b6a:	e9c7 2304 	strd	r2, r3, [r7, #16]
   return A;
 8003b6e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003b72:	ec43 2b17 	vmov	d7, r2, r3
}
 8003b76:	eeb0 0a47 	vmov.f32	s0, s14
 8003b7a:	eef0 0a67 	vmov.f32	s1, s15
 8003b7e:	3718      	adds	r7, #24
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	40768000 	.word	0x40768000

08003b88 <faza>:
static double faza(double Rok, double Miesiac, double Dzien, double godzina, double min, double sec)
{
 8003b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b8c:	b0a1      	sub	sp, #132	; 0x84
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 8003b94:	ed87 1b08 	vstr	d1, [r7, #32]
 8003b98:	ed87 2b06 	vstr	d2, [r7, #24]
 8003b9c:	ed87 3b04 	vstr	d3, [r7, #16]
 8003ba0:	ed87 4b02 	vstr	d4, [r7, #8]
 8003ba4:	ed87 5b00 	vstr	d5, [r7]
   if(Miesiac > 2)
 8003ba8:	f04f 0200 	mov.w	r2, #0
 8003bac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003bb0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003bb4:	f7fc ffc8 	bl	8000b48 <__aeabi_dcmpgt>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
   {
      Miesiac = Miesiac;
      Rok     = Rok;
   }
   if(Miesiac <= 2)
 8003bbc:	f04f 0200 	mov.w	r2, #0
 8003bc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003bc4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003bc8:	f7fc ffaa 	bl	8000b20 <__aeabi_dcmple>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d015      	beq.n	8003bfe <faza+0x76>
   {
      Miesiac = Miesiac + 12;
 8003bd2:	f04f 0200 	mov.w	r2, #0
 8003bd6:	4bd6      	ldr	r3, [pc, #856]	; (8003f30 <faza+0x3a8>)
 8003bd8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003bdc:	f7fc fb6e 	bl	80002bc <__adddf3>
 8003be0:	4602      	mov	r2, r0
 8003be2:	460b      	mov	r3, r1
 8003be4:	e9c7 2308 	strd	r2, r3, [r7, #32]
      Rok     = Rok - 1;
 8003be8:	f04f 0200 	mov.w	r2, #0
 8003bec:	4bd1      	ldr	r3, [pc, #836]	; (8003f34 <faza+0x3ac>)
 8003bee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003bf2:	f7fc fb61 	bl	80002b8 <__aeabi_dsub>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   }
   double A, b, phi1, phi2, jdp, tzd, elm, ams, aml, asd;
   A   = (int)(Rok / 100);
 8003bfe:	f04f 0200 	mov.w	r2, #0
 8003c02:	4bcd      	ldr	r3, [pc, #820]	; (8003f38 <faza+0x3b0>)
 8003c04:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003c08:	f7fc fe38 	bl	800087c <__aeabi_ddiv>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	460b      	mov	r3, r1
 8003c10:	4610      	mov	r0, r2
 8003c12:	4619      	mov	r1, r3
 8003c14:	f7fc ffb8 	bl	8000b88 <__aeabi_d2iz>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7fc fc9a 	bl	8000554 <__aeabi_i2d>
 8003c20:	4602      	mov	r2, r0
 8003c22:	460b      	mov	r3, r1
 8003c24:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
   b   = 2 - A + (int)(A / 4);
 8003c28:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003c2c:	f04f 0000 	mov.w	r0, #0
 8003c30:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003c34:	f7fc fb40 	bl	80002b8 <__aeabi_dsub>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	4690      	mov	r8, r2
 8003c3e:	4699      	mov	r9, r3
 8003c40:	f04f 0200 	mov.w	r2, #0
 8003c44:	4bbd      	ldr	r3, [pc, #756]	; (8003f3c <faza+0x3b4>)
 8003c46:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003c4a:	f7fc fe17 	bl	800087c <__aeabi_ddiv>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	460b      	mov	r3, r1
 8003c52:	4610      	mov	r0, r2
 8003c54:	4619      	mov	r1, r3
 8003c56:	f7fc ff97 	bl	8000b88 <__aeabi_d2iz>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7fc fc79 	bl	8000554 <__aeabi_i2d>
 8003c62:	4602      	mov	r2, r0
 8003c64:	460b      	mov	r3, r1
 8003c66:	4640      	mov	r0, r8
 8003c68:	4649      	mov	r1, r9
 8003c6a:	f7fc fb27 	bl	80002bc <__adddf3>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	460b      	mov	r3, r1
 8003c72:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
   jdp = (int)(365.25 * (Rok + 4716)) + (int)(30.6001 * (Miesiac + 1)) + Dzien + b + ((godzina + min / 60 + sec / 3600) / 24) - 1524.5;
 8003c76:	a392      	add	r3, pc, #584	; (adr r3, 8003ec0 <faza+0x338>)
 8003c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c7c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003c80:	f7fc fb1c 	bl	80002bc <__adddf3>
 8003c84:	4602      	mov	r2, r0
 8003c86:	460b      	mov	r3, r1
 8003c88:	4610      	mov	r0, r2
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	a38e      	add	r3, pc, #568	; (adr r3, 8003ec8 <faza+0x340>)
 8003c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c92:	f7fc fcc9 	bl	8000628 <__aeabi_dmul>
 8003c96:	4602      	mov	r2, r0
 8003c98:	460b      	mov	r3, r1
 8003c9a:	4610      	mov	r0, r2
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	f7fc ff73 	bl	8000b88 <__aeabi_d2iz>
 8003ca2:	4606      	mov	r6, r0
 8003ca4:	f04f 0200 	mov.w	r2, #0
 8003ca8:	4ba2      	ldr	r3, [pc, #648]	; (8003f34 <faza+0x3ac>)
 8003caa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003cae:	f7fc fb05 	bl	80002bc <__adddf3>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	4610      	mov	r0, r2
 8003cb8:	4619      	mov	r1, r3
 8003cba:	a385      	add	r3, pc, #532	; (adr r3, 8003ed0 <faza+0x348>)
 8003cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc0:	f7fc fcb2 	bl	8000628 <__aeabi_dmul>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	4610      	mov	r0, r2
 8003cca:	4619      	mov	r1, r3
 8003ccc:	f7fc ff5c 	bl	8000b88 <__aeabi_d2iz>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	4433      	add	r3, r6
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7fc fc3d 	bl	8000554 <__aeabi_i2d>
 8003cda:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cde:	f7fc faed 	bl	80002bc <__adddf3>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	4610      	mov	r0, r2
 8003ce8:	4619      	mov	r1, r3
 8003cea:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8003cee:	f7fc fae5 	bl	80002bc <__adddf3>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	4690      	mov	r8, r2
 8003cf8:	4699      	mov	r9, r3
 8003cfa:	f04f 0200 	mov.w	r2, #0
 8003cfe:	4b90      	ldr	r3, [pc, #576]	; (8003f40 <faza+0x3b8>)
 8003d00:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003d04:	f7fc fdba 	bl	800087c <__aeabi_ddiv>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	4610      	mov	r0, r2
 8003d0e:	4619      	mov	r1, r3
 8003d10:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003d14:	f7fc fad2 	bl	80002bc <__adddf3>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	4692      	mov	sl, r2
 8003d1e:	469b      	mov	fp, r3
 8003d20:	a36d      	add	r3, pc, #436	; (adr r3, 8003ed8 <faza+0x350>)
 8003d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003d2a:	f7fc fda7 	bl	800087c <__aeabi_ddiv>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	460b      	mov	r3, r1
 8003d32:	4650      	mov	r0, sl
 8003d34:	4659      	mov	r1, fp
 8003d36:	f7fc fac1 	bl	80002bc <__adddf3>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	4610      	mov	r0, r2
 8003d40:	4619      	mov	r1, r3
 8003d42:	f04f 0200 	mov.w	r2, #0
 8003d46:	4b7f      	ldr	r3, [pc, #508]	; (8003f44 <faza+0x3bc>)
 8003d48:	f7fc fd98 	bl	800087c <__aeabi_ddiv>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	460b      	mov	r3, r1
 8003d50:	4640      	mov	r0, r8
 8003d52:	4649      	mov	r1, r9
 8003d54:	f7fc fab2 	bl	80002bc <__adddf3>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	4610      	mov	r0, r2
 8003d5e:	4619      	mov	r1, r3
 8003d60:	a35f      	add	r3, pc, #380	; (adr r3, 8003ee0 <faza+0x358>)
 8003d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d66:	f7fc faa7 	bl	80002b8 <__aeabi_dsub>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
   jdp = jdp;
   tzd = (jdp - 2451545) / 36525;
 8003d72:	a35d      	add	r3, pc, #372	; (adr r3, 8003ee8 <faza+0x360>)
 8003d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d78:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003d7c:	f7fc fa9c 	bl	80002b8 <__aeabi_dsub>
 8003d80:	4602      	mov	r2, r0
 8003d82:	460b      	mov	r3, r1
 8003d84:	4610      	mov	r0, r2
 8003d86:	4619      	mov	r1, r3
 8003d88:	a359      	add	r3, pc, #356	; (adr r3, 8003ef0 <faza+0x368>)
 8003d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d8e:	f7fc fd75 	bl	800087c <__aeabi_ddiv>
 8003d92:	4602      	mov	r2, r0
 8003d94:	460b      	mov	r3, r1
 8003d96:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
   elm = rang(297.8502042 + 445267.1115168 * tzd - (0.00163 * tzd * tzd) + tzd * tzd * tzd / 545868 - tzd * tzd * tzd * tzd / 113065000);
 8003d9a:	a357      	add	r3, pc, #348	; (adr r3, 8003ef8 <faza+0x370>)
 8003d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003da4:	f7fc fc40 	bl	8000628 <__aeabi_dmul>
 8003da8:	4602      	mov	r2, r0
 8003daa:	460b      	mov	r3, r1
 8003dac:	4610      	mov	r0, r2
 8003dae:	4619      	mov	r1, r3
 8003db0:	a353      	add	r3, pc, #332	; (adr r3, 8003f00 <faza+0x378>)
 8003db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db6:	f7fc fa81 	bl	80002bc <__adddf3>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	4690      	mov	r8, r2
 8003dc0:	4699      	mov	r9, r3
 8003dc2:	a351      	add	r3, pc, #324	; (adr r3, 8003f08 <faza+0x380>)
 8003dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003dcc:	f7fc fc2c 	bl	8000628 <__aeabi_dmul>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	4610      	mov	r0, r2
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003ddc:	f7fc fc24 	bl	8000628 <__aeabi_dmul>
 8003de0:	4602      	mov	r2, r0
 8003de2:	460b      	mov	r3, r1
 8003de4:	4640      	mov	r0, r8
 8003de6:	4649      	mov	r1, r9
 8003de8:	f7fc fa66 	bl	80002b8 <__aeabi_dsub>
 8003dec:	4602      	mov	r2, r0
 8003dee:	460b      	mov	r3, r1
 8003df0:	4690      	mov	r8, r2
 8003df2:	4699      	mov	r9, r3
 8003df4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003df8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003dfc:	f7fc fc14 	bl	8000628 <__aeabi_dmul>
 8003e00:	4602      	mov	r2, r0
 8003e02:	460b      	mov	r3, r1
 8003e04:	4610      	mov	r0, r2
 8003e06:	4619      	mov	r1, r3
 8003e08:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003e0c:	f7fc fc0c 	bl	8000628 <__aeabi_dmul>
 8003e10:	4602      	mov	r2, r0
 8003e12:	460b      	mov	r3, r1
 8003e14:	4610      	mov	r0, r2
 8003e16:	4619      	mov	r1, r3
 8003e18:	a33d      	add	r3, pc, #244	; (adr r3, 8003f10 <faza+0x388>)
 8003e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e1e:	f7fc fd2d 	bl	800087c <__aeabi_ddiv>
 8003e22:	4602      	mov	r2, r0
 8003e24:	460b      	mov	r3, r1
 8003e26:	4640      	mov	r0, r8
 8003e28:	4649      	mov	r1, r9
 8003e2a:	f7fc fa47 	bl	80002bc <__adddf3>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	460b      	mov	r3, r1
 8003e32:	4690      	mov	r8, r2
 8003e34:	4699      	mov	r9, r3
 8003e36:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003e3a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003e3e:	f7fc fbf3 	bl	8000628 <__aeabi_dmul>
 8003e42:	4602      	mov	r2, r0
 8003e44:	460b      	mov	r3, r1
 8003e46:	4610      	mov	r0, r2
 8003e48:	4619      	mov	r1, r3
 8003e4a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003e4e:	f7fc fbeb 	bl	8000628 <__aeabi_dmul>
 8003e52:	4602      	mov	r2, r0
 8003e54:	460b      	mov	r3, r1
 8003e56:	4610      	mov	r0, r2
 8003e58:	4619      	mov	r1, r3
 8003e5a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003e5e:	f7fc fbe3 	bl	8000628 <__aeabi_dmul>
 8003e62:	4602      	mov	r2, r0
 8003e64:	460b      	mov	r3, r1
 8003e66:	4610      	mov	r0, r2
 8003e68:	4619      	mov	r1, r3
 8003e6a:	a32b      	add	r3, pc, #172	; (adr r3, 8003f18 <faza+0x390>)
 8003e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e70:	f7fc fd04 	bl	800087c <__aeabi_ddiv>
 8003e74:	4602      	mov	r2, r0
 8003e76:	460b      	mov	r3, r1
 8003e78:	4640      	mov	r0, r8
 8003e7a:	4649      	mov	r1, r9
 8003e7c:	f7fc fa1c 	bl	80002b8 <__aeabi_dsub>
 8003e80:	4602      	mov	r2, r0
 8003e82:	460b      	mov	r3, r1
 8003e84:	ec43 2b17 	vmov	d7, r2, r3
 8003e88:	eeb0 0a47 	vmov.f32	s0, s14
 8003e8c:	eef0 0a67 	vmov.f32	s1, s15
 8003e90:	f7ff fe2c 	bl	8003aec <rang>
 8003e94:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
   ams = rang(357.5291092 + 35999.0502909 * tzd - 0.0001536 * tzd * tzd + tzd * tzd * tzd / 24490000);
 8003e98:	a321      	add	r3, pc, #132	; (adr r3, 8003f20 <faza+0x398>)
 8003e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e9e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003ea2:	f7fc fbc1 	bl	8000628 <__aeabi_dmul>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	4610      	mov	r0, r2
 8003eac:	4619      	mov	r1, r3
 8003eae:	a31e      	add	r3, pc, #120	; (adr r3, 8003f28 <faza+0x3a0>)
 8003eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb4:	f7fc fa02 	bl	80002bc <__adddf3>
 8003eb8:	e046      	b.n	8003f48 <faza+0x3c0>
 8003eba:	bf00      	nop
 8003ebc:	f3af 8000 	nop.w
 8003ec0:	00000000 	.word	0x00000000
 8003ec4:	40b26c00 	.word	0x40b26c00
 8003ec8:	00000000 	.word	0x00000000
 8003ecc:	4076d400 	.word	0x4076d400
 8003ed0:	27525461 	.word	0x27525461
 8003ed4:	403e99a0 	.word	0x403e99a0
 8003ed8:	00000000 	.word	0x00000000
 8003edc:	40ac2000 	.word	0x40ac2000
 8003ee0:	00000000 	.word	0x00000000
 8003ee4:	4097d200 	.word	0x4097d200
 8003ee8:	80000000 	.word	0x80000000
 8003eec:	4142b42c 	.word	0x4142b42c
 8003ef0:	00000000 	.word	0x00000000
 8003ef4:	40e1d5a0 	.word	0x40e1d5a0
 8003ef8:	723175c4 	.word	0x723175c4
 8003efc:	411b2d4c 	.word	0x411b2d4c
 8003f00:	6fb81ec0 	.word	0x6fb81ec0
 8003f04:	40729d9a 	.word	0x40729d9a
 8003f08:	2c5197a2 	.word	0x2c5197a2
 8003f0c:	3f5ab4b7 	.word	0x3f5ab4b7
 8003f10:	00000000 	.word	0x00000000
 8003f14:	4120a898 	.word	0x4120a898
 8003f18:	a0000000 	.word	0xa0000000
 8003f1c:	419af4f0 	.word	0x419af4f0
 8003f20:	9bfba959 	.word	0x9bfba959
 8003f24:	40e193e1 	.word	0x40e193e1
 8003f28:	3b356034 	.word	0x3b356034
 8003f2c:	40765877 	.word	0x40765877
 8003f30:	40280000 	.word	0x40280000
 8003f34:	3ff00000 	.word	0x3ff00000
 8003f38:	40590000 	.word	0x40590000
 8003f3c:	40100000 	.word	0x40100000
 8003f40:	404e0000 	.word	0x404e0000
 8003f44:	40380000 	.word	0x40380000
 8003f48:	4602      	mov	r2, r0
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	4690      	mov	r8, r2
 8003f4e:	4699      	mov	r9, r3
 8003f50:	f20f 531c 	addw	r3, pc, #1308	; 0x51c
 8003f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f58:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003f5c:	f7fc fb64 	bl	8000628 <__aeabi_dmul>
 8003f60:	4602      	mov	r2, r0
 8003f62:	460b      	mov	r3, r1
 8003f64:	4610      	mov	r0, r2
 8003f66:	4619      	mov	r1, r3
 8003f68:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003f6c:	f7fc fb5c 	bl	8000628 <__aeabi_dmul>
 8003f70:	4602      	mov	r2, r0
 8003f72:	460b      	mov	r3, r1
 8003f74:	4640      	mov	r0, r8
 8003f76:	4649      	mov	r1, r9
 8003f78:	f7fc f99e 	bl	80002b8 <__aeabi_dsub>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	460b      	mov	r3, r1
 8003f80:	4690      	mov	r8, r2
 8003f82:	4699      	mov	r9, r3
 8003f84:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003f88:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003f8c:	f7fc fb4c 	bl	8000628 <__aeabi_dmul>
 8003f90:	4602      	mov	r2, r0
 8003f92:	460b      	mov	r3, r1
 8003f94:	4610      	mov	r0, r2
 8003f96:	4619      	mov	r1, r3
 8003f98:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003f9c:	f7fc fb44 	bl	8000628 <__aeabi_dmul>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	4610      	mov	r0, r2
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	f20f 43cc 	addw	r3, pc, #1228	; 0x4cc
 8003fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb0:	f7fc fc64 	bl	800087c <__aeabi_ddiv>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	4640      	mov	r0, r8
 8003fba:	4649      	mov	r1, r9
 8003fbc:	f7fc f97e 	bl	80002bc <__adddf3>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	ec43 2b17 	vmov	d7, r2, r3
 8003fc8:	eeb0 0a47 	vmov.f32	s0, s14
 8003fcc:	eef0 0a67 	vmov.f32	s1, s15
 8003fd0:	f7ff fd8c 	bl	8003aec <rang>
 8003fd4:	ed87 0b12 	vstr	d0, [r7, #72]	; 0x48
   aml = rang(134.9634114 + 477198.8676313 * tzd - 0.008997 * tzd * tzd + tzd * tzd * tzd / 69699 - tzd * tzd * tzd * tzd / 14712000);
 8003fd8:	f20f 43a4 	addw	r3, pc, #1188	; 0x4a4
 8003fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003fe4:	f7fc fb20 	bl	8000628 <__aeabi_dmul>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	460b      	mov	r3, r1
 8003fec:	4610      	mov	r0, r2
 8003fee:	4619      	mov	r1, r3
 8003ff0:	f20f 4394 	addw	r3, pc, #1172	; 0x494
 8003ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff8:	f7fc f960 	bl	80002bc <__adddf3>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	460b      	mov	r3, r1
 8004000:	4690      	mov	r8, r2
 8004002:	4699      	mov	r9, r3
 8004004:	f20f 4388 	addw	r3, pc, #1160	; 0x488
 8004008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800400c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004010:	f7fc fb0a 	bl	8000628 <__aeabi_dmul>
 8004014:	4602      	mov	r2, r0
 8004016:	460b      	mov	r3, r1
 8004018:	4610      	mov	r0, r2
 800401a:	4619      	mov	r1, r3
 800401c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004020:	f7fc fb02 	bl	8000628 <__aeabi_dmul>
 8004024:	4602      	mov	r2, r0
 8004026:	460b      	mov	r3, r1
 8004028:	4640      	mov	r0, r8
 800402a:	4649      	mov	r1, r9
 800402c:	f7fc f944 	bl	80002b8 <__aeabi_dsub>
 8004030:	4602      	mov	r2, r0
 8004032:	460b      	mov	r3, r1
 8004034:	4690      	mov	r8, r2
 8004036:	4699      	mov	r9, r3
 8004038:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800403c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004040:	f7fc faf2 	bl	8000628 <__aeabi_dmul>
 8004044:	4602      	mov	r2, r0
 8004046:	460b      	mov	r3, r1
 8004048:	4610      	mov	r0, r2
 800404a:	4619      	mov	r1, r3
 800404c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004050:	f7fc faea 	bl	8000628 <__aeabi_dmul>
 8004054:	4602      	mov	r2, r0
 8004056:	460b      	mov	r3, r1
 8004058:	4610      	mov	r0, r2
 800405a:	4619      	mov	r1, r3
 800405c:	f20f 4338 	addw	r3, pc, #1080	; 0x438
 8004060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004064:	f7fc fc0a 	bl	800087c <__aeabi_ddiv>
 8004068:	4602      	mov	r2, r0
 800406a:	460b      	mov	r3, r1
 800406c:	4640      	mov	r0, r8
 800406e:	4649      	mov	r1, r9
 8004070:	f7fc f924 	bl	80002bc <__adddf3>
 8004074:	4602      	mov	r2, r0
 8004076:	460b      	mov	r3, r1
 8004078:	4690      	mov	r8, r2
 800407a:	4699      	mov	r9, r3
 800407c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004080:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004084:	f7fc fad0 	bl	8000628 <__aeabi_dmul>
 8004088:	4602      	mov	r2, r0
 800408a:	460b      	mov	r3, r1
 800408c:	4610      	mov	r0, r2
 800408e:	4619      	mov	r1, r3
 8004090:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004094:	f7fc fac8 	bl	8000628 <__aeabi_dmul>
 8004098:	4602      	mov	r2, r0
 800409a:	460b      	mov	r3, r1
 800409c:	4610      	mov	r0, r2
 800409e:	4619      	mov	r1, r3
 80040a0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80040a4:	f7fc fac0 	bl	8000628 <__aeabi_dmul>
 80040a8:	4602      	mov	r2, r0
 80040aa:	460b      	mov	r3, r1
 80040ac:	4610      	mov	r0, r2
 80040ae:	4619      	mov	r1, r3
 80040b0:	a3fb      	add	r3, pc, #1004	; (adr r3, 80044a0 <faza+0x918>)
 80040b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b6:	f7fc fbe1 	bl	800087c <__aeabi_ddiv>
 80040ba:	4602      	mov	r2, r0
 80040bc:	460b      	mov	r3, r1
 80040be:	4640      	mov	r0, r8
 80040c0:	4649      	mov	r1, r9
 80040c2:	f7fc f8f9 	bl	80002b8 <__aeabi_dsub>
 80040c6:	4602      	mov	r2, r0
 80040c8:	460b      	mov	r3, r1
 80040ca:	ec43 2b17 	vmov	d7, r2, r3
 80040ce:	eeb0 0a47 	vmov.f32	s0, s14
 80040d2:	eef0 0a67 	vmov.f32	s1, s15
 80040d6:	f7ff fd09 	bl	8003aec <rang>
 80040da:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
   asd = 180 - elm - (6.289 * sin((M_PI / 180) * ((aml)))) + (2.1 * sin((M_PI / 180) * ((ams)))) - (1.274 * sin((M_PI / 180) * (((2 * elm) - aml))))
 80040de:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80040e2:	f04f 0000 	mov.w	r0, #0
 80040e6:	49e0      	ldr	r1, [pc, #896]	; (8004468 <faza+0x8e0>)
 80040e8:	f7fc f8e6 	bl	80002b8 <__aeabi_dsub>
 80040ec:	4602      	mov	r2, r0
 80040ee:	460b      	mov	r3, r1
 80040f0:	4690      	mov	r8, r2
 80040f2:	4699      	mov	r9, r3
 80040f4:	a3c0      	add	r3, pc, #768	; (adr r3, 80043f8 <faza+0x870>)
 80040f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040fa:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80040fe:	f7fc fa93 	bl	8000628 <__aeabi_dmul>
 8004102:	4602      	mov	r2, r0
 8004104:	460b      	mov	r3, r1
 8004106:	ec43 2b17 	vmov	d7, r2, r3
 800410a:	eeb0 0a47 	vmov.f32	s0, s14
 800410e:	eef0 0a67 	vmov.f32	s1, s15
 8004112:	f013 f8d1 	bl	80172b8 <sin>
 8004116:	ec51 0b10 	vmov	r0, r1, d0
 800411a:	a3b9      	add	r3, pc, #740	; (adr r3, 8004400 <faza+0x878>)
 800411c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004120:	f7fc fa82 	bl	8000628 <__aeabi_dmul>
 8004124:	4602      	mov	r2, r0
 8004126:	460b      	mov	r3, r1
 8004128:	4640      	mov	r0, r8
 800412a:	4649      	mov	r1, r9
 800412c:	f7fc f8c4 	bl	80002b8 <__aeabi_dsub>
 8004130:	4602      	mov	r2, r0
 8004132:	460b      	mov	r3, r1
 8004134:	4690      	mov	r8, r2
 8004136:	4699      	mov	r9, r3
 8004138:	a3af      	add	r3, pc, #700	; (adr r3, 80043f8 <faza+0x870>)
 800413a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800413e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004142:	f7fc fa71 	bl	8000628 <__aeabi_dmul>
 8004146:	4602      	mov	r2, r0
 8004148:	460b      	mov	r3, r1
 800414a:	ec43 2b17 	vmov	d7, r2, r3
 800414e:	eeb0 0a47 	vmov.f32	s0, s14
 8004152:	eef0 0a67 	vmov.f32	s1, s15
 8004156:	f013 f8af 	bl	80172b8 <sin>
 800415a:	ec51 0b10 	vmov	r0, r1, d0
 800415e:	a3aa      	add	r3, pc, #680	; (adr r3, 8004408 <faza+0x880>)
 8004160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004164:	f7fc fa60 	bl	8000628 <__aeabi_dmul>
 8004168:	4602      	mov	r2, r0
 800416a:	460b      	mov	r3, r1
 800416c:	4640      	mov	r0, r8
 800416e:	4649      	mov	r1, r9
 8004170:	f7fc f8a4 	bl	80002bc <__adddf3>
 8004174:	4602      	mov	r2, r0
 8004176:	460b      	mov	r3, r1
 8004178:	4690      	mov	r8, r2
 800417a:	4699      	mov	r9, r3
 800417c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004180:	4602      	mov	r2, r0
 8004182:	460b      	mov	r3, r1
 8004184:	f7fc f89a 	bl	80002bc <__adddf3>
 8004188:	4602      	mov	r2, r0
 800418a:	460b      	mov	r3, r1
 800418c:	4610      	mov	r0, r2
 800418e:	4619      	mov	r1, r3
 8004190:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004194:	f7fc f890 	bl	80002b8 <__aeabi_dsub>
 8004198:	4602      	mov	r2, r0
 800419a:	460b      	mov	r3, r1
 800419c:	4610      	mov	r0, r2
 800419e:	4619      	mov	r1, r3
 80041a0:	a395      	add	r3, pc, #596	; (adr r3, 80043f8 <faza+0x870>)
 80041a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a6:	f7fc fa3f 	bl	8000628 <__aeabi_dmul>
 80041aa:	4602      	mov	r2, r0
 80041ac:	460b      	mov	r3, r1
 80041ae:	ec43 2b17 	vmov	d7, r2, r3
 80041b2:	eeb0 0a47 	vmov.f32	s0, s14
 80041b6:	eef0 0a67 	vmov.f32	s1, s15
 80041ba:	f013 f87d 	bl	80172b8 <sin>
 80041be:	ec51 0b10 	vmov	r0, r1, d0
 80041c2:	a393      	add	r3, pc, #588	; (adr r3, 8004410 <faza+0x888>)
 80041c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c8:	f7fc fa2e 	bl	8000628 <__aeabi_dmul>
 80041cc:	4602      	mov	r2, r0
 80041ce:	460b      	mov	r3, r1
 80041d0:	4640      	mov	r0, r8
 80041d2:	4649      	mov	r1, r9
 80041d4:	f7fc f870 	bl	80002b8 <__aeabi_dsub>
 80041d8:	4602      	mov	r2, r0
 80041da:	460b      	mov	r3, r1
 80041dc:	4690      	mov	r8, r2
 80041de:	4699      	mov	r9, r3
         - (0.658 * sin((M_PI / 180) * ((2 * elm)))) - (0.214 * sin((M_PI / 180) * ((2 * aml)))) - (0.11 * sin((M_PI / 180) * ((elm))));
 80041e0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80041e4:	4602      	mov	r2, r0
 80041e6:	460b      	mov	r3, r1
 80041e8:	f7fc f868 	bl	80002bc <__adddf3>
 80041ec:	4602      	mov	r2, r0
 80041ee:	460b      	mov	r3, r1
 80041f0:	4610      	mov	r0, r2
 80041f2:	4619      	mov	r1, r3
 80041f4:	a380      	add	r3, pc, #512	; (adr r3, 80043f8 <faza+0x870>)
 80041f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041fa:	f7fc fa15 	bl	8000628 <__aeabi_dmul>
 80041fe:	4602      	mov	r2, r0
 8004200:	460b      	mov	r3, r1
 8004202:	ec43 2b17 	vmov	d7, r2, r3
 8004206:	eeb0 0a47 	vmov.f32	s0, s14
 800420a:	eef0 0a67 	vmov.f32	s1, s15
 800420e:	f013 f853 	bl	80172b8 <sin>
 8004212:	ec51 0b10 	vmov	r0, r1, d0
 8004216:	a380      	add	r3, pc, #512	; (adr r3, 8004418 <faza+0x890>)
 8004218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421c:	f7fc fa04 	bl	8000628 <__aeabi_dmul>
 8004220:	4602      	mov	r2, r0
 8004222:	460b      	mov	r3, r1
 8004224:	4640      	mov	r0, r8
 8004226:	4649      	mov	r1, r9
 8004228:	f7fc f846 	bl	80002b8 <__aeabi_dsub>
 800422c:	4602      	mov	r2, r0
 800422e:	460b      	mov	r3, r1
 8004230:	4690      	mov	r8, r2
 8004232:	4699      	mov	r9, r3
 8004234:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8004238:	4602      	mov	r2, r0
 800423a:	460b      	mov	r3, r1
 800423c:	f7fc f83e 	bl	80002bc <__adddf3>
 8004240:	4602      	mov	r2, r0
 8004242:	460b      	mov	r3, r1
 8004244:	4610      	mov	r0, r2
 8004246:	4619      	mov	r1, r3
 8004248:	a36b      	add	r3, pc, #428	; (adr r3, 80043f8 <faza+0x870>)
 800424a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800424e:	f7fc f9eb 	bl	8000628 <__aeabi_dmul>
 8004252:	4602      	mov	r2, r0
 8004254:	460b      	mov	r3, r1
 8004256:	ec43 2b17 	vmov	d7, r2, r3
 800425a:	eeb0 0a47 	vmov.f32	s0, s14
 800425e:	eef0 0a67 	vmov.f32	s1, s15
 8004262:	f013 f829 	bl	80172b8 <sin>
 8004266:	ec51 0b10 	vmov	r0, r1, d0
 800426a:	a36d      	add	r3, pc, #436	; (adr r3, 8004420 <faza+0x898>)
 800426c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004270:	f7fc f9da 	bl	8000628 <__aeabi_dmul>
 8004274:	4602      	mov	r2, r0
 8004276:	460b      	mov	r3, r1
 8004278:	4640      	mov	r0, r8
 800427a:	4649      	mov	r1, r9
 800427c:	f7fc f81c 	bl	80002b8 <__aeabi_dsub>
 8004280:	4602      	mov	r2, r0
 8004282:	460b      	mov	r3, r1
 8004284:	4690      	mov	r8, r2
 8004286:	4699      	mov	r9, r3
 8004288:	a35b      	add	r3, pc, #364	; (adr r3, 80043f8 <faza+0x870>)
 800428a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800428e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004292:	f7fc f9c9 	bl	8000628 <__aeabi_dmul>
 8004296:	4602      	mov	r2, r0
 8004298:	460b      	mov	r3, r1
 800429a:	ec43 2b17 	vmov	d7, r2, r3
 800429e:	eeb0 0a47 	vmov.f32	s0, s14
 80042a2:	eef0 0a67 	vmov.f32	s1, s15
 80042a6:	f013 f807 	bl	80172b8 <sin>
 80042aa:	ec51 0b10 	vmov	r0, r1, d0
 80042ae:	a35e      	add	r3, pc, #376	; (adr r3, 8004428 <faza+0x8a0>)
 80042b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b4:	f7fc f9b8 	bl	8000628 <__aeabi_dmul>
 80042b8:	4602      	mov	r2, r0
 80042ba:	460b      	mov	r3, r1
   asd = 180 - elm - (6.289 * sin((M_PI / 180) * ((aml)))) + (2.1 * sin((M_PI / 180) * ((ams)))) - (1.274 * sin((M_PI / 180) * (((2 * elm) - aml))))
 80042bc:	4640      	mov	r0, r8
 80042be:	4649      	mov	r1, r9
 80042c0:	f7fb fffa 	bl	80002b8 <__aeabi_dsub>
 80042c4:	4602      	mov	r2, r0
 80042c6:	460b      	mov	r3, r1
 80042c8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
   phi1 = (1 + cos((M_PI / 180) * (asd))) / 2;
 80042cc:	a34a      	add	r3, pc, #296	; (adr r3, 80043f8 <faza+0x870>)
 80042ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80042d6:	f7fc f9a7 	bl	8000628 <__aeabi_dmul>
 80042da:	4602      	mov	r2, r0
 80042dc:	460b      	mov	r3, r1
 80042de:	ec43 2b17 	vmov	d7, r2, r3
 80042e2:	eeb0 0a47 	vmov.f32	s0, s14
 80042e6:	eef0 0a67 	vmov.f32	s1, s15
 80042ea:	f012 ff91 	bl	8017210 <cos>
 80042ee:	ec51 0b10 	vmov	r0, r1, d0
 80042f2:	f04f 0200 	mov.w	r2, #0
 80042f6:	4b5d      	ldr	r3, [pc, #372]	; (800446c <faza+0x8e4>)
 80042f8:	f7fb ffe0 	bl	80002bc <__adddf3>
 80042fc:	4602      	mov	r2, r0
 80042fe:	460b      	mov	r3, r1
 8004300:	4610      	mov	r0, r2
 8004302:	4619      	mov	r1, r3
 8004304:	f04f 0200 	mov.w	r2, #0
 8004308:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800430c:	f7fc fab6 	bl	800087c <__aeabi_ddiv>
 8004310:	4602      	mov	r2, r0
 8004312:	460b      	mov	r3, r1
 8004314:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78

   tzd = (jdp + (0.5 / 24) - 2451545) / 36525;
 8004318:	a345      	add	r3, pc, #276	; (adr r3, 8004430 <faza+0x8a8>)
 800431a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800431e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004322:	f7fb ffcb 	bl	80002bc <__adddf3>
 8004326:	4602      	mov	r2, r0
 8004328:	460b      	mov	r3, r1
 800432a:	4610      	mov	r0, r2
 800432c:	4619      	mov	r1, r3
 800432e:	a342      	add	r3, pc, #264	; (adr r3, 8004438 <faza+0x8b0>)
 8004330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004334:	f7fb ffc0 	bl	80002b8 <__aeabi_dsub>
 8004338:	4602      	mov	r2, r0
 800433a:	460b      	mov	r3, r1
 800433c:	4610      	mov	r0, r2
 800433e:	4619      	mov	r1, r3
 8004340:	a33f      	add	r3, pc, #252	; (adr r3, 8004440 <faza+0x8b8>)
 8004342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004346:	f7fc fa99 	bl	800087c <__aeabi_ddiv>
 800434a:	4602      	mov	r2, r0
 800434c:	460b      	mov	r3, r1
 800434e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
   elm = rang(297.8502042 + 445267.1115168 * tzd - (0.00163 * tzd * tzd) + tzd * tzd * tzd / 545868 - tzd * tzd * tzd * tzd / 113065000);
 8004352:	a33d      	add	r3, pc, #244	; (adr r3, 8004448 <faza+0x8c0>)
 8004354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004358:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800435c:	f7fc f964 	bl	8000628 <__aeabi_dmul>
 8004360:	4602      	mov	r2, r0
 8004362:	460b      	mov	r3, r1
 8004364:	4610      	mov	r0, r2
 8004366:	4619      	mov	r1, r3
 8004368:	a339      	add	r3, pc, #228	; (adr r3, 8004450 <faza+0x8c8>)
 800436a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800436e:	f7fb ffa5 	bl	80002bc <__adddf3>
 8004372:	4602      	mov	r2, r0
 8004374:	460b      	mov	r3, r1
 8004376:	4690      	mov	r8, r2
 8004378:	4699      	mov	r9, r3
 800437a:	a337      	add	r3, pc, #220	; (adr r3, 8004458 <faza+0x8d0>)
 800437c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004380:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004384:	f7fc f950 	bl	8000628 <__aeabi_dmul>
 8004388:	4602      	mov	r2, r0
 800438a:	460b      	mov	r3, r1
 800438c:	4610      	mov	r0, r2
 800438e:	4619      	mov	r1, r3
 8004390:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004394:	f7fc f948 	bl	8000628 <__aeabi_dmul>
 8004398:	4602      	mov	r2, r0
 800439a:	460b      	mov	r3, r1
 800439c:	4640      	mov	r0, r8
 800439e:	4649      	mov	r1, r9
 80043a0:	f7fb ff8a 	bl	80002b8 <__aeabi_dsub>
 80043a4:	4602      	mov	r2, r0
 80043a6:	460b      	mov	r3, r1
 80043a8:	4690      	mov	r8, r2
 80043aa:	4699      	mov	r9, r3
 80043ac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80043b0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80043b4:	f7fc f938 	bl	8000628 <__aeabi_dmul>
 80043b8:	4602      	mov	r2, r0
 80043ba:	460b      	mov	r3, r1
 80043bc:	4610      	mov	r0, r2
 80043be:	4619      	mov	r1, r3
 80043c0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80043c4:	f7fc f930 	bl	8000628 <__aeabi_dmul>
 80043c8:	4602      	mov	r2, r0
 80043ca:	460b      	mov	r3, r1
 80043cc:	4610      	mov	r0, r2
 80043ce:	4619      	mov	r1, r3
 80043d0:	a323      	add	r3, pc, #140	; (adr r3, 8004460 <faza+0x8d8>)
 80043d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d6:	f7fc fa51 	bl	800087c <__aeabi_ddiv>
 80043da:	4602      	mov	r2, r0
 80043dc:	460b      	mov	r3, r1
 80043de:	4640      	mov	r0, r8
 80043e0:	4649      	mov	r1, r9
 80043e2:	f7fb ff6b 	bl	80002bc <__adddf3>
 80043e6:	4602      	mov	r2, r0
 80043e8:	460b      	mov	r3, r1
 80043ea:	4690      	mov	r8, r2
 80043ec:	4699      	mov	r9, r3
 80043ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80043f2:	e059      	b.n	80044a8 <faza+0x920>
 80043f4:	f3af 8000 	nop.w
 80043f8:	a2529d39 	.word	0xa2529d39
 80043fc:	3f91df46 	.word	0x3f91df46
 8004400:	9db22d0e 	.word	0x9db22d0e
 8004404:	401927ef 	.word	0x401927ef
 8004408:	cccccccd 	.word	0xcccccccd
 800440c:	4000cccc 	.word	0x4000cccc
 8004410:	d2f1a9fc 	.word	0xd2f1a9fc
 8004414:	3ff4624d 	.word	0x3ff4624d
 8004418:	04189375 	.word	0x04189375
 800441c:	3fe50e56 	.word	0x3fe50e56
 8004420:	1cac0831 	.word	0x1cac0831
 8004424:	3fcb645a 	.word	0x3fcb645a
 8004428:	c28f5c29 	.word	0xc28f5c29
 800442c:	3fbc28f5 	.word	0x3fbc28f5
 8004430:	55555555 	.word	0x55555555
 8004434:	3f955555 	.word	0x3f955555
 8004438:	80000000 	.word	0x80000000
 800443c:	4142b42c 	.word	0x4142b42c
 8004440:	00000000 	.word	0x00000000
 8004444:	40e1d5a0 	.word	0x40e1d5a0
 8004448:	723175c4 	.word	0x723175c4
 800444c:	411b2d4c 	.word	0x411b2d4c
 8004450:	6fb81ec0 	.word	0x6fb81ec0
 8004454:	40729d9a 	.word	0x40729d9a
 8004458:	2c5197a2 	.word	0x2c5197a2
 800445c:	3f5ab4b7 	.word	0x3f5ab4b7
 8004460:	00000000 	.word	0x00000000
 8004464:	4120a898 	.word	0x4120a898
 8004468:	40668000 	.word	0x40668000
 800446c:	3ff00000 	.word	0x3ff00000
 8004470:	f40d8376 	.word	0xf40d8376
 8004474:	3f2421f5 	.word	0x3f2421f5
 8004478:	00000000 	.word	0x00000000
 800447c:	41775b01 	.word	0x41775b01
 8004480:	787456ea 	.word	0x787456ea
 8004484:	411d203b 	.word	0x411d203b
 8004488:	4424f2ff 	.word	0x4424f2ff
 800448c:	4060ded4 	.word	0x4060ded4
 8004490:	e618ce2d 	.word	0xe618ce2d
 8004494:	3f826d04 	.word	0x3f826d04
 8004498:	00000000 	.word	0x00000000
 800449c:	40f10430 	.word	0x40f10430
 80044a0:	00000000 	.word	0x00000000
 80044a4:	416c0f98 	.word	0x416c0f98
 80044a8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80044ac:	f7fc f8bc 	bl	8000628 <__aeabi_dmul>
 80044b0:	4602      	mov	r2, r0
 80044b2:	460b      	mov	r3, r1
 80044b4:	4610      	mov	r0, r2
 80044b6:	4619      	mov	r1, r3
 80044b8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80044bc:	f7fc f8b4 	bl	8000628 <__aeabi_dmul>
 80044c0:	4602      	mov	r2, r0
 80044c2:	460b      	mov	r3, r1
 80044c4:	4610      	mov	r0, r2
 80044c6:	4619      	mov	r1, r3
 80044c8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80044cc:	f7fc f8ac 	bl	8000628 <__aeabi_dmul>
 80044d0:	4602      	mov	r2, r0
 80044d2:	460b      	mov	r3, r1
 80044d4:	4610      	mov	r0, r2
 80044d6:	4619      	mov	r1, r3
 80044d8:	f20f 43b8 	addw	r3, pc, #1208	; 0x4b8
 80044dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e0:	f7fc f9cc 	bl	800087c <__aeabi_ddiv>
 80044e4:	4602      	mov	r2, r0
 80044e6:	460b      	mov	r3, r1
 80044e8:	4640      	mov	r0, r8
 80044ea:	4649      	mov	r1, r9
 80044ec:	f7fb fee4 	bl	80002b8 <__aeabi_dsub>
 80044f0:	4602      	mov	r2, r0
 80044f2:	460b      	mov	r3, r1
 80044f4:	ec43 2b17 	vmov	d7, r2, r3
 80044f8:	eeb0 0a47 	vmov.f32	s0, s14
 80044fc:	eef0 0a67 	vmov.f32	s1, s15
 8004500:	f7ff faf4 	bl	8003aec <rang>
 8004504:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
   ams = rang(357.5291092 + 35999.0502909 * tzd - 0.0001536 * tzd * tzd + tzd * tzd * tzd / 24490000);
 8004508:	f20f 4390 	addw	r3, pc, #1168	; 0x490
 800450c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004510:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004514:	f7fc f888 	bl	8000628 <__aeabi_dmul>
 8004518:	4602      	mov	r2, r0
 800451a:	460b      	mov	r3, r1
 800451c:	4610      	mov	r0, r2
 800451e:	4619      	mov	r1, r3
 8004520:	f20f 4380 	addw	r3, pc, #1152	; 0x480
 8004524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004528:	f7fb fec8 	bl	80002bc <__adddf3>
 800452c:	4602      	mov	r2, r0
 800452e:	460b      	mov	r3, r1
 8004530:	4690      	mov	r8, r2
 8004532:	4699      	mov	r9, r3
 8004534:	f20f 4374 	addw	r3, pc, #1140	; 0x474
 8004538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004540:	f7fc f872 	bl	8000628 <__aeabi_dmul>
 8004544:	4602      	mov	r2, r0
 8004546:	460b      	mov	r3, r1
 8004548:	4610      	mov	r0, r2
 800454a:	4619      	mov	r1, r3
 800454c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004550:	f7fc f86a 	bl	8000628 <__aeabi_dmul>
 8004554:	4602      	mov	r2, r0
 8004556:	460b      	mov	r3, r1
 8004558:	4640      	mov	r0, r8
 800455a:	4649      	mov	r1, r9
 800455c:	f7fb feac 	bl	80002b8 <__aeabi_dsub>
 8004560:	4602      	mov	r2, r0
 8004562:	460b      	mov	r3, r1
 8004564:	4690      	mov	r8, r2
 8004566:	4699      	mov	r9, r3
 8004568:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800456c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004570:	f7fc f85a 	bl	8000628 <__aeabi_dmul>
 8004574:	4602      	mov	r2, r0
 8004576:	460b      	mov	r3, r1
 8004578:	4610      	mov	r0, r2
 800457a:	4619      	mov	r1, r3
 800457c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004580:	f7fc f852 	bl	8000628 <__aeabi_dmul>
 8004584:	4602      	mov	r2, r0
 8004586:	460b      	mov	r3, r1
 8004588:	4610      	mov	r0, r2
 800458a:	4619      	mov	r1, r3
 800458c:	f20f 4324 	addw	r3, pc, #1060	; 0x424
 8004590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004594:	f7fc f972 	bl	800087c <__aeabi_ddiv>
 8004598:	4602      	mov	r2, r0
 800459a:	460b      	mov	r3, r1
 800459c:	4640      	mov	r0, r8
 800459e:	4649      	mov	r1, r9
 80045a0:	f7fb fe8c 	bl	80002bc <__adddf3>
 80045a4:	4602      	mov	r2, r0
 80045a6:	460b      	mov	r3, r1
 80045a8:	ec43 2b17 	vmov	d7, r2, r3
 80045ac:	eeb0 0a47 	vmov.f32	s0, s14
 80045b0:	eef0 0a67 	vmov.f32	s1, s15
 80045b4:	f7ff fa9a 	bl	8003aec <rang>
 80045b8:	ed87 0b12 	vstr	d0, [r7, #72]	; 0x48
   aml = rang(134.9634114 + 477198.8676313 * tzd - 0.008997 * tzd * tzd + tzd * tzd * tzd / 69699 - tzd * tzd * tzd * tzd / 14712000);
 80045bc:	a3ff      	add	r3, pc, #1020	; (adr r3, 80049bc <faza+0xe34>)
 80045be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80045c6:	f7fc f82f 	bl	8000628 <__aeabi_dmul>
 80045ca:	4602      	mov	r2, r0
 80045cc:	460b      	mov	r3, r1
 80045ce:	4610      	mov	r0, r2
 80045d0:	4619      	mov	r1, r3
 80045d2:	a3fc      	add	r3, pc, #1008	; (adr r3, 80049c4 <faza+0xe3c>)
 80045d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d8:	f7fb fe70 	bl	80002bc <__adddf3>
 80045dc:	4602      	mov	r2, r0
 80045de:	460b      	mov	r3, r1
 80045e0:	4690      	mov	r8, r2
 80045e2:	4699      	mov	r9, r3
 80045e4:	a3f9      	add	r3, pc, #996	; (adr r3, 80049cc <faza+0xe44>)
 80045e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ea:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80045ee:	f7fc f81b 	bl	8000628 <__aeabi_dmul>
 80045f2:	4602      	mov	r2, r0
 80045f4:	460b      	mov	r3, r1
 80045f6:	4610      	mov	r0, r2
 80045f8:	4619      	mov	r1, r3
 80045fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80045fe:	f7fc f813 	bl	8000628 <__aeabi_dmul>
 8004602:	4602      	mov	r2, r0
 8004604:	460b      	mov	r3, r1
 8004606:	4640      	mov	r0, r8
 8004608:	4649      	mov	r1, r9
 800460a:	f7fb fe55 	bl	80002b8 <__aeabi_dsub>
 800460e:	4602      	mov	r2, r0
 8004610:	460b      	mov	r3, r1
 8004612:	4690      	mov	r8, r2
 8004614:	4699      	mov	r9, r3
 8004616:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800461a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800461e:	f7fc f803 	bl	8000628 <__aeabi_dmul>
 8004622:	4602      	mov	r2, r0
 8004624:	460b      	mov	r3, r1
 8004626:	4610      	mov	r0, r2
 8004628:	4619      	mov	r1, r3
 800462a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800462e:	f7fb fffb 	bl	8000628 <__aeabi_dmul>
 8004632:	4602      	mov	r2, r0
 8004634:	460b      	mov	r3, r1
 8004636:	4610      	mov	r0, r2
 8004638:	4619      	mov	r1, r3
 800463a:	a3e6      	add	r3, pc, #920	; (adr r3, 80049d4 <faza+0xe4c>)
 800463c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004640:	f7fc f91c 	bl	800087c <__aeabi_ddiv>
 8004644:	4602      	mov	r2, r0
 8004646:	460b      	mov	r3, r1
 8004648:	4640      	mov	r0, r8
 800464a:	4649      	mov	r1, r9
 800464c:	f7fb fe36 	bl	80002bc <__adddf3>
 8004650:	4602      	mov	r2, r0
 8004652:	460b      	mov	r3, r1
 8004654:	4690      	mov	r8, r2
 8004656:	4699      	mov	r9, r3
 8004658:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800465c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004660:	f7fb ffe2 	bl	8000628 <__aeabi_dmul>
 8004664:	4602      	mov	r2, r0
 8004666:	460b      	mov	r3, r1
 8004668:	4610      	mov	r0, r2
 800466a:	4619      	mov	r1, r3
 800466c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004670:	f7fb ffda 	bl	8000628 <__aeabi_dmul>
 8004674:	4602      	mov	r2, r0
 8004676:	460b      	mov	r3, r1
 8004678:	4610      	mov	r0, r2
 800467a:	4619      	mov	r1, r3
 800467c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004680:	f7fb ffd2 	bl	8000628 <__aeabi_dmul>
 8004684:	4602      	mov	r2, r0
 8004686:	460b      	mov	r3, r1
 8004688:	4610      	mov	r0, r2
 800468a:	4619      	mov	r1, r3
 800468c:	a3d3      	add	r3, pc, #844	; (adr r3, 80049dc <faza+0xe54>)
 800468e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004692:	f7fc f8f3 	bl	800087c <__aeabi_ddiv>
 8004696:	4602      	mov	r2, r0
 8004698:	460b      	mov	r3, r1
 800469a:	4640      	mov	r0, r8
 800469c:	4649      	mov	r1, r9
 800469e:	f7fb fe0b 	bl	80002b8 <__aeabi_dsub>
 80046a2:	4602      	mov	r2, r0
 80046a4:	460b      	mov	r3, r1
 80046a6:	ec43 2b17 	vmov	d7, r2, r3
 80046aa:	eeb0 0a47 	vmov.f32	s0, s14
 80046ae:	eef0 0a67 	vmov.f32	s1, s15
 80046b2:	f7ff fa1b 	bl	8003aec <rang>
 80046b6:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
   asd = 180 - elm - (6.289 * sin((M_PI / 180) * ((aml)))) + (2.1 * sin((M_PI / 180) * ((ams)))) - (1.274 * sin((M_PI / 180) * (((2 * elm) - aml))))
 80046ba:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80046be:	f04f 0000 	mov.w	r0, #0
 80046c2:	49b1      	ldr	r1, [pc, #708]	; (8004988 <faza+0xe00>)
 80046c4:	f7fb fdf8 	bl	80002b8 <__aeabi_dsub>
 80046c8:	4602      	mov	r2, r0
 80046ca:	460b      	mov	r3, r1
 80046cc:	4690      	mov	r8, r2
 80046ce:	4699      	mov	r9, r3
 80046d0:	a39f      	add	r3, pc, #636	; (adr r3, 8004950 <faza+0xdc8>)
 80046d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80046da:	f7fb ffa5 	bl	8000628 <__aeabi_dmul>
 80046de:	4602      	mov	r2, r0
 80046e0:	460b      	mov	r3, r1
 80046e2:	ec43 2b17 	vmov	d7, r2, r3
 80046e6:	eeb0 0a47 	vmov.f32	s0, s14
 80046ea:	eef0 0a67 	vmov.f32	s1, s15
 80046ee:	f012 fde3 	bl	80172b8 <sin>
 80046f2:	ec51 0b10 	vmov	r0, r1, d0
 80046f6:	a398      	add	r3, pc, #608	; (adr r3, 8004958 <faza+0xdd0>)
 80046f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046fc:	f7fb ff94 	bl	8000628 <__aeabi_dmul>
 8004700:	4602      	mov	r2, r0
 8004702:	460b      	mov	r3, r1
 8004704:	4640      	mov	r0, r8
 8004706:	4649      	mov	r1, r9
 8004708:	f7fb fdd6 	bl	80002b8 <__aeabi_dsub>
 800470c:	4602      	mov	r2, r0
 800470e:	460b      	mov	r3, r1
 8004710:	4690      	mov	r8, r2
 8004712:	4699      	mov	r9, r3
 8004714:	a38e      	add	r3, pc, #568	; (adr r3, 8004950 <faza+0xdc8>)
 8004716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800471a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800471e:	f7fb ff83 	bl	8000628 <__aeabi_dmul>
 8004722:	4602      	mov	r2, r0
 8004724:	460b      	mov	r3, r1
 8004726:	ec43 2b17 	vmov	d7, r2, r3
 800472a:	eeb0 0a47 	vmov.f32	s0, s14
 800472e:	eef0 0a67 	vmov.f32	s1, s15
 8004732:	f012 fdc1 	bl	80172b8 <sin>
 8004736:	ec51 0b10 	vmov	r0, r1, d0
 800473a:	a389      	add	r3, pc, #548	; (adr r3, 8004960 <faza+0xdd8>)
 800473c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004740:	f7fb ff72 	bl	8000628 <__aeabi_dmul>
 8004744:	4602      	mov	r2, r0
 8004746:	460b      	mov	r3, r1
 8004748:	4640      	mov	r0, r8
 800474a:	4649      	mov	r1, r9
 800474c:	f7fb fdb6 	bl	80002bc <__adddf3>
 8004750:	4602      	mov	r2, r0
 8004752:	460b      	mov	r3, r1
 8004754:	4690      	mov	r8, r2
 8004756:	4699      	mov	r9, r3
 8004758:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800475c:	4602      	mov	r2, r0
 800475e:	460b      	mov	r3, r1
 8004760:	f7fb fdac 	bl	80002bc <__adddf3>
 8004764:	4602      	mov	r2, r0
 8004766:	460b      	mov	r3, r1
 8004768:	4610      	mov	r0, r2
 800476a:	4619      	mov	r1, r3
 800476c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004770:	f7fb fda2 	bl	80002b8 <__aeabi_dsub>
 8004774:	4602      	mov	r2, r0
 8004776:	460b      	mov	r3, r1
 8004778:	4610      	mov	r0, r2
 800477a:	4619      	mov	r1, r3
 800477c:	a374      	add	r3, pc, #464	; (adr r3, 8004950 <faza+0xdc8>)
 800477e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004782:	f7fb ff51 	bl	8000628 <__aeabi_dmul>
 8004786:	4602      	mov	r2, r0
 8004788:	460b      	mov	r3, r1
 800478a:	ec43 2b17 	vmov	d7, r2, r3
 800478e:	eeb0 0a47 	vmov.f32	s0, s14
 8004792:	eef0 0a67 	vmov.f32	s1, s15
 8004796:	f012 fd8f 	bl	80172b8 <sin>
 800479a:	ec51 0b10 	vmov	r0, r1, d0
 800479e:	a372      	add	r3, pc, #456	; (adr r3, 8004968 <faza+0xde0>)
 80047a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a4:	f7fb ff40 	bl	8000628 <__aeabi_dmul>
 80047a8:	4602      	mov	r2, r0
 80047aa:	460b      	mov	r3, r1
 80047ac:	4640      	mov	r0, r8
 80047ae:	4649      	mov	r1, r9
 80047b0:	f7fb fd82 	bl	80002b8 <__aeabi_dsub>
 80047b4:	4602      	mov	r2, r0
 80047b6:	460b      	mov	r3, r1
 80047b8:	4690      	mov	r8, r2
 80047ba:	4699      	mov	r9, r3
         - (0.658 * sin((M_PI / 180) * ((2 * elm)))) - (0.214 * sin((M_PI / 180) * ((2 * aml)))) - (0.11 * sin((M_PI / 180) * ((elm))));
 80047bc:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80047c0:	4602      	mov	r2, r0
 80047c2:	460b      	mov	r3, r1
 80047c4:	f7fb fd7a 	bl	80002bc <__adddf3>
 80047c8:	4602      	mov	r2, r0
 80047ca:	460b      	mov	r3, r1
 80047cc:	4610      	mov	r0, r2
 80047ce:	4619      	mov	r1, r3
 80047d0:	a35f      	add	r3, pc, #380	; (adr r3, 8004950 <faza+0xdc8>)
 80047d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d6:	f7fb ff27 	bl	8000628 <__aeabi_dmul>
 80047da:	4602      	mov	r2, r0
 80047dc:	460b      	mov	r3, r1
 80047de:	ec43 2b17 	vmov	d7, r2, r3
 80047e2:	eeb0 0a47 	vmov.f32	s0, s14
 80047e6:	eef0 0a67 	vmov.f32	s1, s15
 80047ea:	f012 fd65 	bl	80172b8 <sin>
 80047ee:	ec51 0b10 	vmov	r0, r1, d0
 80047f2:	a35f      	add	r3, pc, #380	; (adr r3, 8004970 <faza+0xde8>)
 80047f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f8:	f7fb ff16 	bl	8000628 <__aeabi_dmul>
 80047fc:	4602      	mov	r2, r0
 80047fe:	460b      	mov	r3, r1
 8004800:	4640      	mov	r0, r8
 8004802:	4649      	mov	r1, r9
 8004804:	f7fb fd58 	bl	80002b8 <__aeabi_dsub>
 8004808:	4602      	mov	r2, r0
 800480a:	460b      	mov	r3, r1
 800480c:	4690      	mov	r8, r2
 800480e:	4699      	mov	r9, r3
 8004810:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8004814:	4602      	mov	r2, r0
 8004816:	460b      	mov	r3, r1
 8004818:	f7fb fd50 	bl	80002bc <__adddf3>
 800481c:	4602      	mov	r2, r0
 800481e:	460b      	mov	r3, r1
 8004820:	4610      	mov	r0, r2
 8004822:	4619      	mov	r1, r3
 8004824:	a34a      	add	r3, pc, #296	; (adr r3, 8004950 <faza+0xdc8>)
 8004826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800482a:	f7fb fefd 	bl	8000628 <__aeabi_dmul>
 800482e:	4602      	mov	r2, r0
 8004830:	460b      	mov	r3, r1
 8004832:	ec43 2b17 	vmov	d7, r2, r3
 8004836:	eeb0 0a47 	vmov.f32	s0, s14
 800483a:	eef0 0a67 	vmov.f32	s1, s15
 800483e:	f012 fd3b 	bl	80172b8 <sin>
 8004842:	ec51 0b10 	vmov	r0, r1, d0
 8004846:	a34c      	add	r3, pc, #304	; (adr r3, 8004978 <faza+0xdf0>)
 8004848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800484c:	f7fb feec 	bl	8000628 <__aeabi_dmul>
 8004850:	4602      	mov	r2, r0
 8004852:	460b      	mov	r3, r1
 8004854:	4640      	mov	r0, r8
 8004856:	4649      	mov	r1, r9
 8004858:	f7fb fd2e 	bl	80002b8 <__aeabi_dsub>
 800485c:	4602      	mov	r2, r0
 800485e:	460b      	mov	r3, r1
 8004860:	4690      	mov	r8, r2
 8004862:	4699      	mov	r9, r3
 8004864:	a33a      	add	r3, pc, #232	; (adr r3, 8004950 <faza+0xdc8>)
 8004866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800486a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800486e:	f7fb fedb 	bl	8000628 <__aeabi_dmul>
 8004872:	4602      	mov	r2, r0
 8004874:	460b      	mov	r3, r1
 8004876:	ec43 2b17 	vmov	d7, r2, r3
 800487a:	eeb0 0a47 	vmov.f32	s0, s14
 800487e:	eef0 0a67 	vmov.f32	s1, s15
 8004882:	f012 fd19 	bl	80172b8 <sin>
 8004886:	ec51 0b10 	vmov	r0, r1, d0
 800488a:	a33d      	add	r3, pc, #244	; (adr r3, 8004980 <faza+0xdf8>)
 800488c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004890:	f7fb feca 	bl	8000628 <__aeabi_dmul>
 8004894:	4602      	mov	r2, r0
 8004896:	460b      	mov	r3, r1
   asd = 180 - elm - (6.289 * sin((M_PI / 180) * ((aml)))) + (2.1 * sin((M_PI / 180) * ((ams)))) - (1.274 * sin((M_PI / 180) * (((2 * elm) - aml))))
 8004898:	4640      	mov	r0, r8
 800489a:	4649      	mov	r1, r9
 800489c:	f7fb fd0c 	bl	80002b8 <__aeabi_dsub>
 80048a0:	4602      	mov	r2, r0
 80048a2:	460b      	mov	r3, r1
 80048a4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
   phi2 = (1 + cos((M_PI / 180) * (asd))) / 2;
 80048a8:	a329      	add	r3, pc, #164	; (adr r3, 8004950 <faza+0xdc8>)
 80048aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ae:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80048b2:	f7fb feb9 	bl	8000628 <__aeabi_dmul>
 80048b6:	4602      	mov	r2, r0
 80048b8:	460b      	mov	r3, r1
 80048ba:	ec43 2b17 	vmov	d7, r2, r3
 80048be:	eeb0 0a47 	vmov.f32	s0, s14
 80048c2:	eef0 0a67 	vmov.f32	s1, s15
 80048c6:	f012 fca3 	bl	8017210 <cos>
 80048ca:	ec51 0b10 	vmov	r0, r1, d0
 80048ce:	f04f 0200 	mov.w	r2, #0
 80048d2:	4b2e      	ldr	r3, [pc, #184]	; (800498c <faza+0xe04>)
 80048d4:	f7fb fcf2 	bl	80002bc <__adddf3>
 80048d8:	4602      	mov	r2, r0
 80048da:	460b      	mov	r3, r1
 80048dc:	4610      	mov	r0, r2
 80048de:	4619      	mov	r1, r3
 80048e0:	f04f 0200 	mov.w	r2, #0
 80048e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80048e8:	f7fb ffc8 	bl	800087c <__aeabi_ddiv>
 80048ec:	4602      	mov	r2, r0
 80048ee:	460b      	mov	r3, r1
 80048f0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

   if((phi2 - phi1) < 0)
 80048f4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80048f8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80048fc:	f7fb fcdc 	bl	80002b8 <__aeabi_dsub>
 8004900:	4602      	mov	r2, r0
 8004902:	460b      	mov	r3, r1
 8004904:	4610      	mov	r0, r2
 8004906:	4619      	mov	r1, r3
 8004908:	f04f 0200 	mov.w	r2, #0
 800490c:	f04f 0300 	mov.w	r3, #0
 8004910:	f7fc f8fc 	bl	8000b0c <__aeabi_dcmplt>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d005      	beq.n	8004926 <faza+0xd9e>
   {
      phi1 = -1 * phi1;
 800491a:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 800491c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800491e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8004922:	e9c7 451e 	strd	r4, r5, [r7, #120]	; 0x78
   }
   return (100 * phi1);
 8004926:	f04f 0200 	mov.w	r2, #0
 800492a:	4b19      	ldr	r3, [pc, #100]	; (8004990 <faza+0xe08>)
 800492c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8004930:	f7fb fe7a 	bl	8000628 <__aeabi_dmul>
 8004934:	4602      	mov	r2, r0
 8004936:	460b      	mov	r3, r1
 8004938:	ec43 2b17 	vmov	d7, r2, r3
}
 800493c:	eeb0 0a47 	vmov.f32	s0, s14
 8004940:	eef0 0a67 	vmov.f32	s1, s15
 8004944:	3784      	adds	r7, #132	; 0x84
 8004946:	46bd      	mov	sp, r7
 8004948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800494c:	f3af 8000 	nop.w
 8004950:	a2529d39 	.word	0xa2529d39
 8004954:	3f91df46 	.word	0x3f91df46
 8004958:	9db22d0e 	.word	0x9db22d0e
 800495c:	401927ef 	.word	0x401927ef
 8004960:	cccccccd 	.word	0xcccccccd
 8004964:	4000cccc 	.word	0x4000cccc
 8004968:	d2f1a9fc 	.word	0xd2f1a9fc
 800496c:	3ff4624d 	.word	0x3ff4624d
 8004970:	04189375 	.word	0x04189375
 8004974:	3fe50e56 	.word	0x3fe50e56
 8004978:	1cac0831 	.word	0x1cac0831
 800497c:	3fcb645a 	.word	0x3fcb645a
 8004980:	c28f5c29 	.word	0xc28f5c29
 8004984:	3fbc28f5 	.word	0x3fbc28f5
 8004988:	40668000 	.word	0x40668000
 800498c:	3ff00000 	.word	0x3ff00000
 8004990:	40590000 	.word	0x40590000
 8004994:	a0000000 	.word	0xa0000000
 8004998:	419af4f0 	.word	0x419af4f0
 800499c:	9bfba959 	.word	0x9bfba959
 80049a0:	40e193e1 	.word	0x40e193e1
 80049a4:	3b356034 	.word	0x3b356034
 80049a8:	40765877 	.word	0x40765877
 80049ac:	f40d8376 	.word	0xf40d8376
 80049b0:	3f2421f5 	.word	0x3f2421f5
 80049b4:	00000000 	.word	0x00000000
 80049b8:	41775b01 	.word	0x41775b01
 80049bc:	787456ea 	.word	0x787456ea
 80049c0:	411d203b 	.word	0x411d203b
 80049c4:	4424f2ff 	.word	0x4424f2ff
 80049c8:	4060ded4 	.word	0x4060ded4
 80049cc:	e618ce2d 	.word	0xe618ce2d
 80049d0:	3f826d04 	.word	0x3f826d04
 80049d4:	00000000 	.word	0x00000000
 80049d8:	40f10430 	.word	0x40f10430
 80049dc:	00000000 	.word	0x00000000
 80049e0:	416c0f98 	.word	0x416c0f98

080049e4 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	460b      	mov	r3, r1
 80049ee:	807b      	strh	r3, [r7, #2]
   if(huart->Instance == USART1)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a05      	ldr	r2, [pc, #20]	; (8004a0c <HAL_UARTEx_RxEventCallback+0x28>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d104      	bne.n	8004a04 <HAL_UARTEx_RxEventCallback+0x20>
   {
      Rfp.DataSize = Size;
 80049fa:	887b      	ldrh	r3, [r7, #2]
 80049fc:	4a04      	ldr	r2, [pc, #16]	; (8004a10 <HAL_UARTEx_RxEventCallback+0x2c>)
 80049fe:	6093      	str	r3, [r2, #8]
      RFP_InterruptTask();
 8004a00:	f001 fe7e 	bl	8006700 <RFP_InterruptTask>
   }
}
 8004a04:	bf00      	nop
 8004a06:	3708      	adds	r7, #8
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	40013800 	.word	0x40013800
 8004a10:	20003d4c 	.word	0x20003d4c

08004a14 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b088      	sub	sp, #32
 8004a18:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a1a:	f107 030c 	add.w	r3, r7, #12
 8004a1e:	2200      	movs	r2, #0
 8004a20:	601a      	str	r2, [r3, #0]
 8004a22:	605a      	str	r2, [r3, #4]
 8004a24:	609a      	str	r2, [r3, #8]
 8004a26:	60da      	str	r2, [r3, #12]
 8004a28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a2a:	4b45      	ldr	r3, [pc, #276]	; (8004b40 <MX_GPIO_Init+0x12c>)
 8004a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a2e:	4a44      	ldr	r2, [pc, #272]	; (8004b40 <MX_GPIO_Init+0x12c>)
 8004a30:	f043 0304 	orr.w	r3, r3, #4
 8004a34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a36:	4b42      	ldr	r3, [pc, #264]	; (8004b40 <MX_GPIO_Init+0x12c>)
 8004a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a3a:	f003 0304 	and.w	r3, r3, #4
 8004a3e:	60bb      	str	r3, [r7, #8]
 8004a40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a42:	4b3f      	ldr	r3, [pc, #252]	; (8004b40 <MX_GPIO_Init+0x12c>)
 8004a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a46:	4a3e      	ldr	r2, [pc, #248]	; (8004b40 <MX_GPIO_Init+0x12c>)
 8004a48:	f043 0301 	orr.w	r3, r3, #1
 8004a4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a4e:	4b3c      	ldr	r3, [pc, #240]	; (8004b40 <MX_GPIO_Init+0x12c>)
 8004a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	607b      	str	r3, [r7, #4]
 8004a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a5a:	4b39      	ldr	r3, [pc, #228]	; (8004b40 <MX_GPIO_Init+0x12c>)
 8004a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a5e:	4a38      	ldr	r2, [pc, #224]	; (8004b40 <MX_GPIO_Init+0x12c>)
 8004a60:	f043 0302 	orr.w	r3, r3, #2
 8004a64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a66:	4b36      	ldr	r3, [pc, #216]	; (8004b40 <MX_GPIO_Init+0x12c>)
 8004a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a6a:	f003 0302 	and.w	r3, r3, #2
 8004a6e:	603b      	str	r3, [r7, #0]
 8004a70:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SSD1306_CS_GPIO_Port, SSD1306_CS_Pin, GPIO_PIN_SET);
 8004a72:	2201      	movs	r2, #1
 8004a74:	2110      	movs	r1, #16
 8004a76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004a7a:	f003 fe1f 	bl	80086bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SCREENS_DC_Pin|EPAPIER_CS_Pin|EPAPIER_RST_Pin|SSD1306_RST_Pin
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f640 71c3 	movw	r1, #4035	; 0xfc3
 8004a84:	482f      	ldr	r0, [pc, #188]	; (8004b44 <MX_GPIO_Init+0x130>)
 8004a86:	f003 fe19 	bl	80086bc <HAL_GPIO_WritePin>
                          |FRAM_CS_Pin|FRAM_WP_Pin|FRAM_HOLD_Pin|FLASH_CS_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HEARTBEAT_Pin|BME280_CS_Pin, GPIO_PIN_RESET);
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004a90:	482c      	ldr	r0, [pc, #176]	; (8004b44 <MX_GPIO_Init+0x130>)
 8004a92:	f003 fe13 	bl	80086bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HC12_SET_GPIO_Port, HC12_SET_Pin, GPIO_PIN_RESET);
 8004a96:	2200      	movs	r2, #0
 8004a98:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004a9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004aa0:	f003 fe0c 	bl	80086bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SSD1306_CS_Pin;
 8004aa4:	2310      	movs	r3, #16
 8004aa6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aac:	2300      	movs	r3, #0
 8004aae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SSD1306_CS_GPIO_Port, &GPIO_InitStruct);
 8004ab4:	f107 030c 	add.w	r3, r7, #12
 8004ab8:	4619      	mov	r1, r3
 8004aba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004abe:	f003 fc53 	bl	8008368 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SCREENS_DC_Pin|EPAPIER_CS_Pin|EPAPIER_RST_Pin|SSD1306_RST_Pin
 8004ac2:	f641 73c3 	movw	r3, #8131	; 0x1fc3
 8004ac6:	60fb      	str	r3, [r7, #12]
                          |HEARTBEAT_Pin|FRAM_CS_Pin|FRAM_WP_Pin|FRAM_HOLD_Pin
                          |FLASH_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004acc:	2300      	movs	r3, #0
 8004ace:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ad4:	f107 030c 	add.w	r3, r7, #12
 8004ad8:	4619      	mov	r1, r3
 8004ada:	481a      	ldr	r0, [pc, #104]	; (8004b44 <MX_GPIO_Init+0x130>)
 8004adc:	f003 fc44 	bl	8008368 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = EPAPIER_BUSY_Pin|ENCODER_SWITCH_Pin;
 8004ae0:	f244 0304 	movw	r3, #16388	; 0x4004
 8004ae4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aea:	2300      	movs	r3, #0
 8004aec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004aee:	f107 030c 	add.w	r3, r7, #12
 8004af2:	4619      	mov	r1, r3
 8004af4:	4813      	ldr	r0, [pc, #76]	; (8004b44 <MX_GPIO_Init+0x130>)
 8004af6:	f003 fc37 	bl	8008368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BME280_CS_Pin;
 8004afa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004afe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b00:	2301      	movs	r3, #1
 8004b02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b04:	2300      	movs	r3, #0
 8004b06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BME280_CS_GPIO_Port, &GPIO_InitStruct);
 8004b0c:	f107 030c 	add.w	r3, r7, #12
 8004b10:	4619      	mov	r1, r3
 8004b12:	480c      	ldr	r0, [pc, #48]	; (8004b44 <MX_GPIO_Init+0x130>)
 8004b14:	f003 fc28 	bl	8008368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HC12_SET_Pin;
 8004b18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004b1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b22:	2300      	movs	r3, #0
 8004b24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b26:	2300      	movs	r3, #0
 8004b28:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HC12_SET_GPIO_Port, &GPIO_InitStruct);
 8004b2a:	f107 030c 	add.w	r3, r7, #12
 8004b2e:	4619      	mov	r1, r3
 8004b30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b34:	f003 fc18 	bl	8008368 <HAL_GPIO_Init>

}
 8004b38:	bf00      	nop
 8004b3a:	3720      	adds	r7, #32
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	40021000 	.word	0x40021000
 8004b44:	48000400 	.word	0x48000400

08004b48 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8004b4c:	4b0b      	ldr	r3, [pc, #44]	; (8004b7c <MX_IWDG_Init+0x34>)
 8004b4e:	4a0c      	ldr	r2, [pc, #48]	; (8004b80 <MX_IWDG_Init+0x38>)
 8004b50:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8004b52:	4b0a      	ldr	r3, [pc, #40]	; (8004b7c <MX_IWDG_Init+0x34>)
 8004b54:	2206      	movs	r2, #6
 8004b56:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8004b58:	4b08      	ldr	r3, [pc, #32]	; (8004b7c <MX_IWDG_Init+0x34>)
 8004b5a:	f640 72ff 	movw	r2, #4095	; 0xfff
 8004b5e:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8004b60:	4b06      	ldr	r3, [pc, #24]	; (8004b7c <MX_IWDG_Init+0x34>)
 8004b62:	f640 72ff 	movw	r2, #4095	; 0xfff
 8004b66:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8004b68:	4804      	ldr	r0, [pc, #16]	; (8004b7c <MX_IWDG_Init+0x34>)
 8004b6a:	f003 fdd9 	bl	8008720 <HAL_IWDG_Init>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d001      	beq.n	8004b78 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8004b74:	f000 f8b6 	bl	8004ce4 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8004b78:	bf00      	nop
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	20003de4 	.word	0x20003de4
 8004b80:	40003000 	.word	0x40003000

08004b84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004b88:	f002 ff65 	bl	8007a56 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004b8c:	f000 f820 	bl	8004bd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004b90:	f7ff ff40 	bl	8004a14 <MX_GPIO_Init>
  MX_DMA_Init();
 8004b94:	f7fd ff38 	bl	8002a08 <MX_DMA_Init>
  MX_RTC_Init();
 8004b98:	f002 f8c0 	bl	8006d1c <MX_RTC_Init>
  MX_RNG_Init();
 8004b9c:	f002 f874 	bl	8006c88 <MX_RNG_Init>
  MX_SPI1_Init();
 8004ba0:	f002 f932 	bl	8006e08 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8004ba4:	f002 fe54 	bl	8007850 <MX_USART1_UART_Init>
  MX_SPI3_Init();
 8004ba8:	f002 f96c 	bl	8006e84 <MX_SPI3_Init>
  MX_TIM2_Init();
 8004bac:	f002 fcee 	bl	800758c <MX_TIM2_Init>
  MX_TIM5_Init();
 8004bb0:	f002 fd62 	bl	8007678 <MX_TIM5_Init>
  MX_IWDG_Init();
 8004bb4:	f7ff ffc8 	bl	8004b48 <MX_IWDG_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8004bb8:	f000 f86e 	bl	8004c98 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8004bbc:	f009 fe5a 	bl	800e874 <osKernelInitialize>
  MX_FREERTOS_Init();
 8004bc0:	f7fe f954 	bl	8002e6c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8004bc4:	f009 fe7a 	bl	800e8bc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   HAL_NVIC_SystemReset();
 8004bc8:	f003 f89b 	bl	8007d02 <HAL_NVIC_SystemReset>
   while(1)
 8004bcc:	e7fe      	b.n	8004bcc <main+0x48>
	...

08004bd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b098      	sub	sp, #96	; 0x60
 8004bd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004bd6:	f107 0318 	add.w	r3, r7, #24
 8004bda:	2248      	movs	r2, #72	; 0x48
 8004bdc:	2100      	movs	r1, #0
 8004bde:	4618      	mov	r0, r3
 8004be0:	f00d feac 	bl	801293c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004be4:	1d3b      	adds	r3, r7, #4
 8004be6:	2200      	movs	r2, #0
 8004be8:	601a      	str	r2, [r3, #0]
 8004bea:	605a      	str	r2, [r3, #4]
 8004bec:	609a      	str	r2, [r3, #8]
 8004bee:	60da      	str	r2, [r3, #12]
 8004bf0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8004bf2:	2000      	movs	r0, #0
 8004bf4:	f003 fe24 	bl	8008840 <HAL_PWREx_ControlVoltageScaling>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d001      	beq.n	8004c02 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8004bfe:	f000 f871 	bl	8004ce4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8004c02:	f003 fded 	bl	80087e0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8004c06:	4b23      	ldr	r3, [pc, #140]	; (8004c94 <SystemClock_Config+0xc4>)
 8004c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c0c:	4a21      	ldr	r2, [pc, #132]	; (8004c94 <SystemClock_Config+0xc4>)
 8004c0e:	f023 0318 	bic.w	r3, r3, #24
 8004c12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 8004c16:	233c      	movs	r3, #60	; 0x3c
 8004c18:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004c22:	2301      	movs	r3, #1
 8004c24:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8004c26:	2301      	movs	r3, #1
 8004c28:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8004c2e:	2360      	movs	r3, #96	; 0x60
 8004c30:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004c32:	2302      	movs	r3, #2
 8004c34:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8004c36:	2301      	movs	r3, #1
 8004c38:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 60;
 8004c3e:	233c      	movs	r3, #60	; 0x3c
 8004c40:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004c42:	2302      	movs	r3, #2
 8004c44:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004c46:	2302      	movs	r3, #2
 8004c48:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004c4a:	2302      	movs	r3, #2
 8004c4c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004c4e:	f107 0318 	add.w	r3, r7, #24
 8004c52:	4618      	mov	r0, r3
 8004c54:	f003 fe98 	bl	8008988 <HAL_RCC_OscConfig>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d001      	beq.n	8004c62 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8004c5e:	f000 f841 	bl	8004ce4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004c62:	230f      	movs	r3, #15
 8004c64:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004c66:	2303      	movs	r3, #3
 8004c68:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004c72:	2300      	movs	r3, #0
 8004c74:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004c76:	1d3b      	adds	r3, r7, #4
 8004c78:	2105      	movs	r1, #5
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f004 fb00 	bl	8009280 <HAL_RCC_ClockConfig>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d001      	beq.n	8004c8a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8004c86:	f000 f82d 	bl	8004ce4 <Error_Handler>
  }
}
 8004c8a:	bf00      	nop
 8004c8c:	3760      	adds	r7, #96	; 0x60
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	40021000 	.word	0x40021000

08004c98 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	af00      	add	r7, sp, #0
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	2105      	movs	r1, #5
 8004ca0:	200b      	movs	r0, #11
 8004ca2:	f003 f804 	bl	8007cae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004ca6:	200b      	movs	r0, #11
 8004ca8:	f003 f81d 	bl	8007ce6 <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004cac:	2200      	movs	r2, #0
 8004cae:	2105      	movs	r1, #5
 8004cb0:	2025      	movs	r0, #37	; 0x25
 8004cb2:	f002 fffc 	bl	8007cae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004cb6:	2025      	movs	r0, #37	; 0x25
 8004cb8:	f003 f815 	bl	8007ce6 <HAL_NVIC_EnableIRQ>
}
 8004cbc:	bf00      	nop
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a04      	ldr	r2, [pc, #16]	; (8004ce0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d101      	bne.n	8004cd6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004cd2:	f002 fed9 	bl	8007a88 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004cd6:	bf00      	nop
 8004cd8:	3708      	adds	r7, #8
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	40014800 	.word	0x40014800

08004ce4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004ce8:	b672      	cpsid	i
}
 8004cea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
   /* User can add his own implementation to report the HAL error return state */
   __disable_irq();
   while(1)
 8004cec:	e7fe      	b.n	8004cec <Error_Handler+0x8>

08004cee <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 8004cee:	b480      	push	{r7}
 8004cf0:	b085      	sub	sp, #20
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	607a      	str	r2, [r7, #4]
 8004cf8:	603b      	str	r3, [r7, #0]
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d204      	bcs.n	8004d10 <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 8004d06:	68ba      	ldr	r2, [r7, #8]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4413      	add	r3, r2
 8004d0c:	7bfa      	ldrb	r2, [r7, #15]
 8004d0e:	701a      	strb	r2, [r3, #0]
  }
}
 8004d10:	bf00      	nop
 8004d12:	3714      	adds	r7, #20
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60b9      	str	r1, [r7, #8]
 8004d24:	607a      	str	r2, [r7, #4]
 8004d26:	603b      	str	r3, [r7, #0]
 8004d28:	4603      	mov	r3, r0
 8004d2a:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8004d2c:	bf00      	nop
 8004d2e:	3714      	adds	r7, #20
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b085      	sub	sp, #20
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	60fb      	str	r3, [r7, #12]
 8004d46:	e002      	b.n	8004d4e <_strnlen_s+0x16>
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	60fb      	str	r3, [r7, #12]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d004      	beq.n	8004d60 <_strnlen_s+0x28>
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	1e5a      	subs	r2, r3, #1
 8004d5a:	603a      	str	r2, [r7, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d1f3      	bne.n	8004d48 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	1ad3      	subs	r3, r2, r3
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3714      	adds	r7, #20
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr

08004d72 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8004d72:	b480      	push	{r7}
 8004d74:	b083      	sub	sp, #12
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	4603      	mov	r3, r0
 8004d7a:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8004d7c:	79fb      	ldrb	r3, [r7, #7]
 8004d7e:	2b2f      	cmp	r3, #47	; 0x2f
 8004d80:	d904      	bls.n	8004d8c <_is_digit+0x1a>
 8004d82:	79fb      	ldrb	r3, [r7, #7]
 8004d84:	2b39      	cmp	r3, #57	; 0x39
 8004d86:	d801      	bhi.n	8004d8c <_is_digit+0x1a>
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e000      	b.n	8004d8e <_is_digit+0x1c>
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	f003 0301 	and.w	r3, r3, #1
 8004d92:	b2db      	uxtb	r3, r3
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8004da8:	2300      	movs	r3, #0
 8004daa:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8004dac:	e00e      	b.n	8004dcc <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	4613      	mov	r3, r2
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	4413      	add	r3, r2
 8004db6:	005b      	lsls	r3, r3, #1
 8004db8:	4618      	mov	r0, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	1c59      	adds	r1, r3, #1
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	6011      	str	r1, [r2, #0]
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	4403      	add	r3, r0
 8004dc8:	3b30      	subs	r3, #48	; 0x30
 8004dca:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7ff ffcd 	bl	8004d72 <_is_digit>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d1e7      	bne.n	8004dae <_atoi+0xe>
  }
  return i;
 8004dde:	68fb      	ldr	r3, [r7, #12]
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3710      	adds	r7, #16
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8004de8:	b590      	push	{r4, r7, lr}
 8004dea:	b087      	sub	sp, #28
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]
 8004df4:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8004dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dfc:	f003 0302 	and.w	r3, r3, #2
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d125      	bne.n	8004e50 <_out_rev+0x68>
 8004e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e06:	f003 0301 	and.w	r3, r3, #1
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d120      	bne.n	8004e50 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8004e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e10:	617b      	str	r3, [r7, #20]
 8004e12:	e00a      	b.n	8004e2a <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	1c53      	adds	r3, r2, #1
 8004e18:	607b      	str	r3, [r7, #4]
 8004e1a:	68fc      	ldr	r4, [r7, #12]
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	68b9      	ldr	r1, [r7, #8]
 8004e20:	2020      	movs	r0, #32
 8004e22:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	3301      	adds	r3, #1
 8004e28:	617b      	str	r3, [r7, #20]
 8004e2a:	697a      	ldr	r2, [r7, #20]
 8004e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d3f0      	bcc.n	8004e14 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 8004e32:	e00d      	b.n	8004e50 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8004e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e36:	3b01      	subs	r3, #1
 8004e38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e3e:	4413      	add	r3, r2
 8004e40:	7818      	ldrb	r0, [r3, #0]
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	1c53      	adds	r3, r2, #1
 8004e46:	607b      	str	r3, [r7, #4]
 8004e48:	68fc      	ldr	r4, [r7, #12]
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	68b9      	ldr	r1, [r7, #8]
 8004e4e:	47a0      	blx	r4
  while (len) {
 8004e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1ee      	bne.n	8004e34 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8004e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e58:	f003 0302 	and.w	r3, r3, #2
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d00e      	beq.n	8004e7e <_out_rev+0x96>
    while (idx - start_idx < width) {
 8004e60:	e007      	b.n	8004e72 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	1c53      	adds	r3, r2, #1
 8004e66:	607b      	str	r3, [r7, #4]
 8004e68:	68fc      	ldr	r4, [r7, #12]
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	68b9      	ldr	r1, [r7, #8]
 8004e6e:	2020      	movs	r0, #32
 8004e70:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d8f1      	bhi.n	8004e62 <_out_rev+0x7a>
    }
  }

  return idx;
 8004e7e:	687b      	ldr	r3, [r7, #4]
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	371c      	adds	r7, #28
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd90      	pop	{r4, r7, pc}

08004e88 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b088      	sub	sp, #32
 8004e8c:	af04      	add	r7, sp, #16
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	607a      	str	r2, [r7, #4]
 8004e94:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8004e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e98:	f003 0302 	and.w	r3, r3, #2
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d136      	bne.n	8004f0e <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8004ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d018      	beq.n	8004ed8 <_ntoa_format+0x50>
 8004ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea8:	f003 0301 	and.w	r3, r3, #1
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d013      	beq.n	8004ed8 <_ntoa_format+0x50>
 8004eb0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d104      	bne.n	8004ec2 <_ntoa_format+0x3a>
 8004eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eba:	f003 030c 	and.w	r3, r3, #12
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00a      	beq.n	8004ed8 <_ntoa_format+0x50>
      width--;
 8004ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004ec8:	e006      	b.n	8004ed8 <_ntoa_format+0x50>
      buf[len++] = '0';
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	1c5a      	adds	r2, r3, #1
 8004ece:	61fa      	str	r2, [r7, #28]
 8004ed0:	69ba      	ldr	r2, [r7, #24]
 8004ed2:	4413      	add	r3, r2
 8004ed4:	2230      	movs	r2, #48	; 0x30
 8004ed6:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004ed8:	69fa      	ldr	r2, [r7, #28]
 8004eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d20a      	bcs.n	8004ef6 <_ntoa_format+0x6e>
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	2b1f      	cmp	r3, #31
 8004ee4:	d9f1      	bls.n	8004eca <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004ee6:	e006      	b.n	8004ef6 <_ntoa_format+0x6e>
      buf[len++] = '0';
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	1c5a      	adds	r2, r3, #1
 8004eec:	61fa      	str	r2, [r7, #28]
 8004eee:	69ba      	ldr	r2, [r7, #24]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	2230      	movs	r2, #48	; 0x30
 8004ef4:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef8:	f003 0301 	and.w	r3, r3, #1
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d006      	beq.n	8004f0e <_ntoa_format+0x86>
 8004f00:	69fa      	ldr	r2, [r7, #28]
 8004f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d202      	bcs.n	8004f0e <_ntoa_format+0x86>
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	2b1f      	cmp	r3, #31
 8004f0c:	d9ec      	bls.n	8004ee8 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8004f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f10:	f003 0310 	and.w	r3, r3, #16
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d058      	beq.n	8004fca <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8004f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d116      	bne.n	8004f50 <_ntoa_format+0xc8>
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d013      	beq.n	8004f50 <_ntoa_format+0xc8>
 8004f28:	69fa      	ldr	r2, [r7, #28]
 8004f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d003      	beq.n	8004f38 <_ntoa_format+0xb0>
 8004f30:	69fa      	ldr	r2, [r7, #28]
 8004f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d10b      	bne.n	8004f50 <_ntoa_format+0xc8>
      len--;
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d005      	beq.n	8004f50 <_ntoa_format+0xc8>
 8004f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f46:	2b10      	cmp	r3, #16
 8004f48:	d102      	bne.n	8004f50 <_ntoa_format+0xc8>
        len--;
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	3b01      	subs	r3, #1
 8004f4e:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f52:	2b10      	cmp	r3, #16
 8004f54:	d10f      	bne.n	8004f76 <_ntoa_format+0xee>
 8004f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f58:	f003 0320 	and.w	r3, r3, #32
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d10a      	bne.n	8004f76 <_ntoa_format+0xee>
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	2b1f      	cmp	r3, #31
 8004f64:	d807      	bhi.n	8004f76 <_ntoa_format+0xee>
      buf[len++] = 'x';
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	1c5a      	adds	r2, r3, #1
 8004f6a:	61fa      	str	r2, [r7, #28]
 8004f6c:	69ba      	ldr	r2, [r7, #24]
 8004f6e:	4413      	add	r3, r2
 8004f70:	2278      	movs	r2, #120	; 0x78
 8004f72:	701a      	strb	r2, [r3, #0]
 8004f74:	e01f      	b.n	8004fb6 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f78:	2b10      	cmp	r3, #16
 8004f7a:	d10f      	bne.n	8004f9c <_ntoa_format+0x114>
 8004f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f7e:	f003 0320 	and.w	r3, r3, #32
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00a      	beq.n	8004f9c <_ntoa_format+0x114>
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	2b1f      	cmp	r3, #31
 8004f8a:	d807      	bhi.n	8004f9c <_ntoa_format+0x114>
      buf[len++] = 'X';
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	1c5a      	adds	r2, r3, #1
 8004f90:	61fa      	str	r2, [r7, #28]
 8004f92:	69ba      	ldr	r2, [r7, #24]
 8004f94:	4413      	add	r3, r2
 8004f96:	2258      	movs	r2, #88	; 0x58
 8004f98:	701a      	strb	r2, [r3, #0]
 8004f9a:	e00c      	b.n	8004fb6 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d109      	bne.n	8004fb6 <_ntoa_format+0x12e>
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	2b1f      	cmp	r3, #31
 8004fa6:	d806      	bhi.n	8004fb6 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	1c5a      	adds	r2, r3, #1
 8004fac:	61fa      	str	r2, [r7, #28]
 8004fae:	69ba      	ldr	r2, [r7, #24]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	2262      	movs	r2, #98	; 0x62
 8004fb4:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	2b1f      	cmp	r3, #31
 8004fba:	d806      	bhi.n	8004fca <_ntoa_format+0x142>
      buf[len++] = '0';
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	1c5a      	adds	r2, r3, #1
 8004fc0:	61fa      	str	r2, [r7, #28]
 8004fc2:	69ba      	ldr	r2, [r7, #24]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	2230      	movs	r2, #48	; 0x30
 8004fc8:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	2b1f      	cmp	r3, #31
 8004fce:	d824      	bhi.n	800501a <_ntoa_format+0x192>
    if (negative) {
 8004fd0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d007      	beq.n	8004fe8 <_ntoa_format+0x160>
      buf[len++] = '-';
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	1c5a      	adds	r2, r3, #1
 8004fdc:	61fa      	str	r2, [r7, #28]
 8004fde:	69ba      	ldr	r2, [r7, #24]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	222d      	movs	r2, #45	; 0x2d
 8004fe4:	701a      	strb	r2, [r3, #0]
 8004fe6:	e018      	b.n	800501a <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8004fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fea:	f003 0304 	and.w	r3, r3, #4
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d007      	beq.n	8005002 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	1c5a      	adds	r2, r3, #1
 8004ff6:	61fa      	str	r2, [r7, #28]
 8004ff8:	69ba      	ldr	r2, [r7, #24]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	222b      	movs	r2, #43	; 0x2b
 8004ffe:	701a      	strb	r2, [r3, #0]
 8005000:	e00b      	b.n	800501a <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8005002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005004:	f003 0308 	and.w	r3, r3, #8
 8005008:	2b00      	cmp	r3, #0
 800500a:	d006      	beq.n	800501a <_ntoa_format+0x192>
      buf[len++] = ' ';
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	1c5a      	adds	r2, r3, #1
 8005010:	61fa      	str	r2, [r7, #28]
 8005012:	69ba      	ldr	r2, [r7, #24]
 8005014:	4413      	add	r3, r2
 8005016:	2220      	movs	r2, #32
 8005018:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800501a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501c:	9303      	str	r3, [sp, #12]
 800501e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005020:	9302      	str	r3, [sp, #8]
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	9301      	str	r3, [sp, #4]
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	9300      	str	r3, [sp, #0]
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	68b9      	ldr	r1, [r7, #8]
 8005030:	68f8      	ldr	r0, [r7, #12]
 8005032:	f7ff fed9 	bl	8004de8 <_out_rev>
 8005036:	4603      	mov	r3, r0
}
 8005038:	4618      	mov	r0, r3
 800503a:	3710      	adds	r7, #16
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b096      	sub	sp, #88	; 0x58
 8005044:	af08      	add	r7, sp, #32
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	607a      	str	r2, [r7, #4]
 800504c:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800504e:	2300      	movs	r3, #0
 8005050:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8005052:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005054:	2b00      	cmp	r3, #0
 8005056:	d103      	bne.n	8005060 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8005058:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800505a:	f023 0310 	bic.w	r3, r3, #16
 800505e:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8005060:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005062:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005066:	2b00      	cmp	r3, #0
 8005068:	d002      	beq.n	8005070 <_ntoa_long+0x30>
 800506a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800506c:	2b00      	cmp	r3, #0
 800506e:	d032      	beq.n	80050d6 <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 8005070:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005072:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005074:	fbb3 f2f2 	udiv	r2, r3, r2
 8005078:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800507a:	fb01 f202 	mul.w	r2, r1, r2
 800507e:	1a9b      	subs	r3, r3, r2
 8005080:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8005084:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005088:	2b09      	cmp	r3, #9
 800508a:	d804      	bhi.n	8005096 <_ntoa_long+0x56>
 800508c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005090:	3330      	adds	r3, #48	; 0x30
 8005092:	b2da      	uxtb	r2, r3
 8005094:	e00d      	b.n	80050b2 <_ntoa_long+0x72>
 8005096:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005098:	f003 0320 	and.w	r3, r3, #32
 800509c:	2b00      	cmp	r3, #0
 800509e:	d001      	beq.n	80050a4 <_ntoa_long+0x64>
 80050a0:	2241      	movs	r2, #65	; 0x41
 80050a2:	e000      	b.n	80050a6 <_ntoa_long+0x66>
 80050a4:	2261      	movs	r2, #97	; 0x61
 80050a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80050aa:	4413      	add	r3, r2
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	3b0a      	subs	r3, #10
 80050b0:	b2da      	uxtb	r2, r3
 80050b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050b4:	1c59      	adds	r1, r3, #1
 80050b6:	6379      	str	r1, [r7, #52]	; 0x34
 80050b8:	3338      	adds	r3, #56	; 0x38
 80050ba:	443b      	add	r3, r7
 80050bc:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 80050c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80050c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c8:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80050ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d002      	beq.n	80050d6 <_ntoa_long+0x96>
 80050d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050d2:	2b1f      	cmp	r3, #31
 80050d4:	d9cc      	bls.n	8005070 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80050d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050d8:	9306      	str	r3, [sp, #24]
 80050da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050dc:	9305      	str	r3, [sp, #20]
 80050de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050e0:	9304      	str	r3, [sp, #16]
 80050e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050e4:	9303      	str	r3, [sp, #12]
 80050e6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80050ea:	9302      	str	r3, [sp, #8]
 80050ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ee:	9301      	str	r3, [sp, #4]
 80050f0:	f107 0310 	add.w	r3, r7, #16
 80050f4:	9300      	str	r3, [sp, #0]
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	68b9      	ldr	r1, [r7, #8]
 80050fc:	68f8      	ldr	r0, [r7, #12]
 80050fe:	f7ff fec3 	bl	8004e88 <_ntoa_format>
 8005102:	4603      	mov	r3, r0
}
 8005104:	4618      	mov	r0, r3
 8005106:	3738      	adds	r7, #56	; 0x38
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b096      	sub	sp, #88	; 0x58
 8005110:	af08      	add	r7, sp, #32
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	607a      	str	r2, [r7, #4]
 8005118:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800511a:	2300      	movs	r3, #0
 800511c:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800511e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005122:	4313      	orrs	r3, r2
 8005124:	d103      	bne.n	800512e <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 8005126:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005128:	f023 0310 	bic.w	r3, r3, #16
 800512c:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800512e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005134:	2b00      	cmp	r3, #0
 8005136:	d003      	beq.n	8005140 <_ntoa_long_long+0x34>
 8005138:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800513c:	4313      	orrs	r3, r2
 800513e:	d037      	beq.n	80051b0 <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 8005140:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8005144:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005148:	f7fb fe06 	bl	8000d58 <__aeabi_uldivmod>
 800514c:	4613      	mov	r3, r2
 800514e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8005152:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005156:	2b09      	cmp	r3, #9
 8005158:	d804      	bhi.n	8005164 <_ntoa_long_long+0x58>
 800515a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800515e:	3330      	adds	r3, #48	; 0x30
 8005160:	b2da      	uxtb	r2, r3
 8005162:	e00d      	b.n	8005180 <_ntoa_long_long+0x74>
 8005164:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005166:	f003 0320 	and.w	r3, r3, #32
 800516a:	2b00      	cmp	r3, #0
 800516c:	d001      	beq.n	8005172 <_ntoa_long_long+0x66>
 800516e:	2241      	movs	r2, #65	; 0x41
 8005170:	e000      	b.n	8005174 <_ntoa_long_long+0x68>
 8005172:	2261      	movs	r2, #97	; 0x61
 8005174:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005178:	4413      	add	r3, r2
 800517a:	b2db      	uxtb	r3, r3
 800517c:	3b0a      	subs	r3, #10
 800517e:	b2da      	uxtb	r2, r3
 8005180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005182:	1c59      	adds	r1, r3, #1
 8005184:	6379      	str	r1, [r7, #52]	; 0x34
 8005186:	3338      	adds	r3, #56	; 0x38
 8005188:	443b      	add	r3, r7
 800518a:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800518e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005192:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8005196:	f7fb fddf 	bl	8000d58 <__aeabi_uldivmod>
 800519a:	4602      	mov	r2, r0
 800519c:	460b      	mov	r3, r1
 800519e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80051a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80051a6:	4313      	orrs	r3, r2
 80051a8:	d002      	beq.n	80051b0 <_ntoa_long_long+0xa4>
 80051aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ac:	2b1f      	cmp	r3, #31
 80051ae:	d9c7      	bls.n	8005140 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80051b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80051b4:	9206      	str	r2, [sp, #24]
 80051b6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80051b8:	9205      	str	r2, [sp, #20]
 80051ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80051bc:	9204      	str	r2, [sp, #16]
 80051be:	9303      	str	r3, [sp, #12]
 80051c0:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80051c4:	9302      	str	r3, [sp, #8]
 80051c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051c8:	9301      	str	r3, [sp, #4]
 80051ca:	f107 0310 	add.w	r3, r7, #16
 80051ce:	9300      	str	r3, [sp, #0]
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	68b9      	ldr	r1, [r7, #8]
 80051d6:	68f8      	ldr	r0, [r7, #12]
 80051d8:	f7ff fe56 	bl	8004e88 <_ntoa_format>
 80051dc:	4603      	mov	r3, r0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3738      	adds	r7, #56	; 0x38
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
	...

080051e8 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 80051e8:	b590      	push	{r4, r7, lr}
 80051ea:	b09d      	sub	sp, #116	; 0x74
 80051ec:	af04      	add	r7, sp, #16
 80051ee:	6178      	str	r0, [r7, #20]
 80051f0:	6139      	str	r1, [r7, #16]
 80051f2:	60fa      	str	r2, [r7, #12]
 80051f4:	60bb      	str	r3, [r7, #8]
 80051f6:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 80051fa:	2300      	movs	r3, #0
 80051fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 80051fe:	f04f 0200 	mov.w	r2, #0
 8005202:	f04f 0300 	mov.w	r3, #0
 8005206:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 800520a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800520e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005212:	f7fb fc71 	bl	8000af8 <__aeabi_dcmpeq>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d10f      	bne.n	800523c <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 800521c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800521e:	9303      	str	r3, [sp, #12]
 8005220:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005222:	9302      	str	r3, [sp, #8]
 8005224:	2303      	movs	r3, #3
 8005226:	9301      	str	r3, [sp, #4]
 8005228:	4ba7      	ldr	r3, [pc, #668]	; (80054c8 <_ftoa+0x2e0>)
 800522a:	9300      	str	r3, [sp, #0]
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	6939      	ldr	r1, [r7, #16]
 8005232:	6978      	ldr	r0, [r7, #20]
 8005234:	f7ff fdd8 	bl	8004de8 <_out_rev>
 8005238:	4603      	mov	r3, r0
 800523a:	e222      	b.n	8005682 <_ftoa+0x49a>
  if (value < -DBL_MAX)
 800523c:	f04f 32ff 	mov.w	r2, #4294967295
 8005240:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8005244:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005248:	f7fb fc60 	bl	8000b0c <__aeabi_dcmplt>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d00f      	beq.n	8005272 <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8005252:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005254:	9303      	str	r3, [sp, #12]
 8005256:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005258:	9302      	str	r3, [sp, #8]
 800525a:	2304      	movs	r3, #4
 800525c:	9301      	str	r3, [sp, #4]
 800525e:	4b9b      	ldr	r3, [pc, #620]	; (80054cc <_ftoa+0x2e4>)
 8005260:	9300      	str	r3, [sp, #0]
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	6939      	ldr	r1, [r7, #16]
 8005268:	6978      	ldr	r0, [r7, #20]
 800526a:	f7ff fdbd 	bl	8004de8 <_out_rev>
 800526e:	4603      	mov	r3, r0
 8005270:	e207      	b.n	8005682 <_ftoa+0x49a>
  if (value > DBL_MAX)
 8005272:	f04f 32ff 	mov.w	r2, #4294967295
 8005276:	4b96      	ldr	r3, [pc, #600]	; (80054d0 <_ftoa+0x2e8>)
 8005278:	e9d7 0100 	ldrd	r0, r1, [r7]
 800527c:	f7fb fc64 	bl	8000b48 <__aeabi_dcmpgt>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d01d      	beq.n	80052c2 <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8005286:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005288:	f003 0304 	and.w	r3, r3, #4
 800528c:	2b00      	cmp	r3, #0
 800528e:	d001      	beq.n	8005294 <_ftoa+0xac>
 8005290:	4b90      	ldr	r3, [pc, #576]	; (80054d4 <_ftoa+0x2ec>)
 8005292:	e000      	b.n	8005296 <_ftoa+0xae>
 8005294:	4b90      	ldr	r3, [pc, #576]	; (80054d8 <_ftoa+0x2f0>)
 8005296:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005298:	f002 0204 	and.w	r2, r2, #4
 800529c:	2a00      	cmp	r2, #0
 800529e:	d001      	beq.n	80052a4 <_ftoa+0xbc>
 80052a0:	2204      	movs	r2, #4
 80052a2:	e000      	b.n	80052a6 <_ftoa+0xbe>
 80052a4:	2203      	movs	r2, #3
 80052a6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80052a8:	9103      	str	r1, [sp, #12]
 80052aa:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80052ac:	9102      	str	r1, [sp, #8]
 80052ae:	9201      	str	r2, [sp, #4]
 80052b0:	9300      	str	r3, [sp, #0]
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	6939      	ldr	r1, [r7, #16]
 80052b8:	6978      	ldr	r0, [r7, #20]
 80052ba:	f7ff fd95 	bl	8004de8 <_out_rev>
 80052be:	4603      	mov	r3, r0
 80052c0:	e1df      	b.n	8005682 <_ftoa+0x49a>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 80052c2:	a37d      	add	r3, pc, #500	; (adr r3, 80054b8 <_ftoa+0x2d0>)
 80052c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80052cc:	f7fb fc3c 	bl	8000b48 <__aeabi_dcmpgt>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d109      	bne.n	80052ea <_ftoa+0x102>
 80052d6:	a37a      	add	r3, pc, #488	; (adr r3, 80054c0 <_ftoa+0x2d8>)
 80052d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80052e0:	f7fb fc14 	bl	8000b0c <__aeabi_dcmplt>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00f      	beq.n	800530a <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 80052ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052ec:	9302      	str	r3, [sp, #8]
 80052ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052f0:	9301      	str	r3, [sp, #4]
 80052f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052f4:	9300      	str	r3, [sp, #0]
 80052f6:	ed97 0b00 	vldr	d0, [r7]
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	6939      	ldr	r1, [r7, #16]
 8005300:	6978      	ldr	r0, [r7, #20]
 8005302:	f000 f9c9 	bl	8005698 <_etoa>
 8005306:	4603      	mov	r3, r0
 8005308:	e1bb      	b.n	8005682 <_ftoa+0x49a>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 800530a:	2300      	movs	r3, #0
 800530c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 8005310:	f04f 0200 	mov.w	r2, #0
 8005314:	f04f 0300 	mov.w	r3, #0
 8005318:	e9d7 0100 	ldrd	r0, r1, [r7]
 800531c:	f7fb fbf6 	bl	8000b0c <__aeabi_dcmplt>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00e      	beq.n	8005344 <_ftoa+0x15c>
    negative = true;
 8005326:	2301      	movs	r3, #1
 8005328:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 800532c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005330:	f04f 0000 	mov.w	r0, #0
 8005334:	f04f 0100 	mov.w	r1, #0
 8005338:	f7fa ffbe 	bl	80002b8 <__aeabi_dsub>
 800533c:	4602      	mov	r2, r0
 800533e:	460b      	mov	r3, r1
 8005340:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8005344:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005346:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800534a:	2b00      	cmp	r3, #0
 800534c:	d10d      	bne.n	800536a <_ftoa+0x182>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800534e:	2306      	movs	r3, #6
 8005350:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8005352:	e00a      	b.n	800536a <_ftoa+0x182>
    buf[len++] = '0';
 8005354:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005356:	1c5a      	adds	r2, r3, #1
 8005358:	65fa      	str	r2, [r7, #92]	; 0x5c
 800535a:	3360      	adds	r3, #96	; 0x60
 800535c:	443b      	add	r3, r7
 800535e:	2230      	movs	r2, #48	; 0x30
 8005360:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 8005364:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005366:	3b01      	subs	r3, #1
 8005368:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800536a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800536c:	2b1f      	cmp	r3, #31
 800536e:	d802      	bhi.n	8005376 <_ftoa+0x18e>
 8005370:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005372:	2b09      	cmp	r3, #9
 8005374:	d8ee      	bhi.n	8005354 <_ftoa+0x16c>
  }

  int whole = (int)value;
 8005376:	e9d7 0100 	ldrd	r0, r1, [r7]
 800537a:	f7fb fc05 	bl	8000b88 <__aeabi_d2iz>
 800537e:	4603      	mov	r3, r0
 8005380:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 8005382:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005384:	f7fb f8e6 	bl	8000554 <__aeabi_i2d>
 8005388:	4602      	mov	r2, r0
 800538a:	460b      	mov	r3, r1
 800538c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005390:	f7fa ff92 	bl	80002b8 <__aeabi_dsub>
 8005394:	4602      	mov	r2, r0
 8005396:	460b      	mov	r3, r1
 8005398:	4610      	mov	r0, r2
 800539a:	4619      	mov	r1, r3
 800539c:	4a4f      	ldr	r2, [pc, #316]	; (80054dc <_ftoa+0x2f4>)
 800539e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053a0:	00db      	lsls	r3, r3, #3
 80053a2:	4413      	add	r3, r2
 80053a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a8:	f7fb f93e 	bl	8000628 <__aeabi_dmul>
 80053ac:	4602      	mov	r2, r0
 80053ae:	460b      	mov	r3, r1
 80053b0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 80053b4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80053b8:	f7fb fc0e 	bl	8000bd8 <__aeabi_d2uiz>
 80053bc:	4603      	mov	r3, r0
 80053be:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 80053c0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80053c2:	f7fb f8b7 	bl	8000534 <__aeabi_ui2d>
 80053c6:	4602      	mov	r2, r0
 80053c8:	460b      	mov	r3, r1
 80053ca:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80053ce:	f7fa ff73 	bl	80002b8 <__aeabi_dsub>
 80053d2:	4602      	mov	r2, r0
 80053d4:	460b      	mov	r3, r1
 80053d6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 80053da:	f04f 0200 	mov.w	r2, #0
 80053de:	4b40      	ldr	r3, [pc, #256]	; (80054e0 <_ftoa+0x2f8>)
 80053e0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80053e4:	f7fb fbb0 	bl	8000b48 <__aeabi_dcmpgt>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d016      	beq.n	800541c <_ftoa+0x234>
    ++frac;
 80053ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053f0:	3301      	adds	r3, #1
 80053f2:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 80053f4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80053f6:	f7fb f89d 	bl	8000534 <__aeabi_ui2d>
 80053fa:	4a38      	ldr	r2, [pc, #224]	; (80054dc <_ftoa+0x2f4>)
 80053fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053fe:	00db      	lsls	r3, r3, #3
 8005400:	4413      	add	r3, r2
 8005402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005406:	f7fb fb95 	bl	8000b34 <__aeabi_dcmpge>
 800540a:	4603      	mov	r3, r0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d01a      	beq.n	8005446 <_ftoa+0x25e>
      frac = 0;
 8005410:	2300      	movs	r3, #0
 8005412:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 8005414:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005416:	3301      	adds	r3, #1
 8005418:	657b      	str	r3, [r7, #84]	; 0x54
 800541a:	e014      	b.n	8005446 <_ftoa+0x25e>
    }
  }
  else if (diff < 0.5) {
 800541c:	f04f 0200 	mov.w	r2, #0
 8005420:	4b2f      	ldr	r3, [pc, #188]	; (80054e0 <_ftoa+0x2f8>)
 8005422:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8005426:	f7fb fb71 	bl	8000b0c <__aeabi_dcmplt>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d10a      	bne.n	8005446 <_ftoa+0x25e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8005430:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005432:	2b00      	cmp	r3, #0
 8005434:	d004      	beq.n	8005440 <_ftoa+0x258>
 8005436:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005438:	f003 0301 	and.w	r3, r3, #1
 800543c:	2b00      	cmp	r3, #0
 800543e:	d002      	beq.n	8005446 <_ftoa+0x25e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8005440:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005442:	3301      	adds	r3, #1
 8005444:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 8005446:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005448:	2b00      	cmp	r3, #0
 800544a:	d14b      	bne.n	80054e4 <_ftoa+0x2fc>
    diff = value - (double)whole;
 800544c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800544e:	f7fb f881 	bl	8000554 <__aeabi_i2d>
 8005452:	4602      	mov	r2, r0
 8005454:	460b      	mov	r3, r1
 8005456:	e9d7 0100 	ldrd	r0, r1, [r7]
 800545a:	f7fa ff2d 	bl	80002b8 <__aeabi_dsub>
 800545e:	4602      	mov	r2, r0
 8005460:	460b      	mov	r3, r1
 8005462:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8005466:	2301      	movs	r3, #1
 8005468:	461c      	mov	r4, r3
 800546a:	f04f 0200 	mov.w	r2, #0
 800546e:	4b1c      	ldr	r3, [pc, #112]	; (80054e0 <_ftoa+0x2f8>)
 8005470:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8005474:	f7fb fb4a 	bl	8000b0c <__aeabi_dcmplt>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d101      	bne.n	8005482 <_ftoa+0x29a>
 800547e:	2300      	movs	r3, #0
 8005480:	461c      	mov	r4, r3
 8005482:	b2e3      	uxtb	r3, r4
 8005484:	f083 0301 	eor.w	r3, r3, #1
 8005488:	b2db      	uxtb	r3, r3
 800548a:	2b00      	cmp	r3, #0
 800548c:	d109      	bne.n	80054a2 <_ftoa+0x2ba>
 800548e:	f04f 0200 	mov.w	r2, #0
 8005492:	4b13      	ldr	r3, [pc, #76]	; (80054e0 <_ftoa+0x2f8>)
 8005494:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8005498:	f7fb fb56 	bl	8000b48 <__aeabi_dcmpgt>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d064      	beq.n	800556c <_ftoa+0x384>
 80054a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054a4:	f003 0301 	and.w	r3, r3, #1
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	f000 8081 	beq.w	80055b0 <_ftoa+0x3c8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 80054ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054b0:	3301      	adds	r3, #1
 80054b2:	657b      	str	r3, [r7, #84]	; 0x54
 80054b4:	e07c      	b.n	80055b0 <_ftoa+0x3c8>
 80054b6:	bf00      	nop
 80054b8:	00000000 	.word	0x00000000
 80054bc:	41cdcd65 	.word	0x41cdcd65
 80054c0:	00000000 	.word	0x00000000
 80054c4:	c1cdcd65 	.word	0xc1cdcd65
 80054c8:	080185e0 	.word	0x080185e0
 80054cc:	080185e4 	.word	0x080185e4
 80054d0:	7fefffff 	.word	0x7fefffff
 80054d4:	080185ec 	.word	0x080185ec
 80054d8:	080185f4 	.word	0x080185f4
 80054dc:	08018ac0 	.word	0x08018ac0
 80054e0:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 80054e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054e6:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80054e8:	e01f      	b.n	800552a <_ftoa+0x342>
      --count;
 80054ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054ec:	3b01      	subs	r3, #1
 80054ee:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 80054f0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80054f2:	4b66      	ldr	r3, [pc, #408]	; (800568c <_ftoa+0x4a4>)
 80054f4:	fba3 2301 	umull	r2, r3, r3, r1
 80054f8:	08da      	lsrs	r2, r3, #3
 80054fa:	4613      	mov	r3, r2
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	4413      	add	r3, r2
 8005500:	005b      	lsls	r3, r3, #1
 8005502:	1aca      	subs	r2, r1, r3
 8005504:	b2d2      	uxtb	r2, r2
 8005506:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005508:	1c59      	adds	r1, r3, #1
 800550a:	65f9      	str	r1, [r7, #92]	; 0x5c
 800550c:	3230      	adds	r2, #48	; 0x30
 800550e:	b2d2      	uxtb	r2, r2
 8005510:	3360      	adds	r3, #96	; 0x60
 8005512:	443b      	add	r3, r7
 8005514:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8005518:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800551a:	4a5c      	ldr	r2, [pc, #368]	; (800568c <_ftoa+0x4a4>)
 800551c:	fba2 2303 	umull	r2, r3, r2, r3
 8005520:	08db      	lsrs	r3, r3, #3
 8005522:	653b      	str	r3, [r7, #80]	; 0x50
 8005524:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005526:	2b00      	cmp	r3, #0
 8005528:	d003      	beq.n	8005532 <_ftoa+0x34a>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800552a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800552c:	2b1f      	cmp	r3, #31
 800552e:	d9dc      	bls.n	80054ea <_ftoa+0x302>
 8005530:	e009      	b.n	8005546 <_ftoa+0x35e>
        break;
 8005532:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8005534:	e007      	b.n	8005546 <_ftoa+0x35e>
      buf[len++] = '0';
 8005536:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005538:	1c5a      	adds	r2, r3, #1
 800553a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800553c:	3360      	adds	r3, #96	; 0x60
 800553e:	443b      	add	r3, r7
 8005540:	2230      	movs	r2, #48	; 0x30
 8005542:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8005546:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005548:	2b1f      	cmp	r3, #31
 800554a:	d804      	bhi.n	8005556 <_ftoa+0x36e>
 800554c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800554e:	1e5a      	subs	r2, r3, #1
 8005550:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005552:	2b00      	cmp	r3, #0
 8005554:	d1ef      	bne.n	8005536 <_ftoa+0x34e>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8005556:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005558:	2b1f      	cmp	r3, #31
 800555a:	d829      	bhi.n	80055b0 <_ftoa+0x3c8>
      // add decimal
      buf[len++] = '.';
 800555c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800555e:	1c5a      	adds	r2, r3, #1
 8005560:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005562:	3360      	adds	r3, #96	; 0x60
 8005564:	443b      	add	r3, r7
 8005566:	222e      	movs	r2, #46	; 0x2e
 8005568:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800556c:	e020      	b.n	80055b0 <_ftoa+0x3c8>
    buf[len++] = (char)(48 + (whole % 10));
 800556e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005570:	4b47      	ldr	r3, [pc, #284]	; (8005690 <_ftoa+0x4a8>)
 8005572:	fb83 1302 	smull	r1, r3, r3, r2
 8005576:	1099      	asrs	r1, r3, #2
 8005578:	17d3      	asrs	r3, r2, #31
 800557a:	1ac9      	subs	r1, r1, r3
 800557c:	460b      	mov	r3, r1
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	440b      	add	r3, r1
 8005582:	005b      	lsls	r3, r3, #1
 8005584:	1ad1      	subs	r1, r2, r3
 8005586:	b2ca      	uxtb	r2, r1
 8005588:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800558a:	1c59      	adds	r1, r3, #1
 800558c:	65f9      	str	r1, [r7, #92]	; 0x5c
 800558e:	3230      	adds	r2, #48	; 0x30
 8005590:	b2d2      	uxtb	r2, r2
 8005592:	3360      	adds	r3, #96	; 0x60
 8005594:	443b      	add	r3, r7
 8005596:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 800559a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800559c:	4a3c      	ldr	r2, [pc, #240]	; (8005690 <_ftoa+0x4a8>)
 800559e:	fb82 1203 	smull	r1, r2, r2, r3
 80055a2:	1092      	asrs	r2, r2, #2
 80055a4:	17db      	asrs	r3, r3, #31
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	657b      	str	r3, [r7, #84]	; 0x54
 80055aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d003      	beq.n	80055b8 <_ftoa+0x3d0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80055b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055b2:	2b1f      	cmp	r3, #31
 80055b4:	d9db      	bls.n	800556e <_ftoa+0x386>
 80055b6:	e000      	b.n	80055ba <_ftoa+0x3d2>
      break;
 80055b8:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 80055ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055bc:	f003 0302 	and.w	r3, r3, #2
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d123      	bne.n	800560c <_ftoa+0x424>
 80055c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055c6:	f003 0301 	and.w	r3, r3, #1
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d01e      	beq.n	800560c <_ftoa+0x424>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80055ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d014      	beq.n	80055fe <_ftoa+0x416>
 80055d4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d104      	bne.n	80055e6 <_ftoa+0x3fe>
 80055dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055de:	f003 030c 	and.w	r3, r3, #12
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00b      	beq.n	80055fe <_ftoa+0x416>
      width--;
 80055e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055e8:	3b01      	subs	r3, #1
 80055ea:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80055ec:	e007      	b.n	80055fe <_ftoa+0x416>
      buf[len++] = '0';
 80055ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055f0:	1c5a      	adds	r2, r3, #1
 80055f2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80055f4:	3360      	adds	r3, #96	; 0x60
 80055f6:	443b      	add	r3, r7
 80055f8:	2230      	movs	r2, #48	; 0x30
 80055fa:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80055fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005600:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005602:	429a      	cmp	r2, r3
 8005604:	d202      	bcs.n	800560c <_ftoa+0x424>
 8005606:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005608:	2b1f      	cmp	r3, #31
 800560a:	d9f0      	bls.n	80055ee <_ftoa+0x406>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800560c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800560e:	2b1f      	cmp	r3, #31
 8005610:	d827      	bhi.n	8005662 <_ftoa+0x47a>
    if (negative) {
 8005612:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8005616:	2b00      	cmp	r3, #0
 8005618:	d008      	beq.n	800562c <_ftoa+0x444>
      buf[len++] = '-';
 800561a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800561c:	1c5a      	adds	r2, r3, #1
 800561e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005620:	3360      	adds	r3, #96	; 0x60
 8005622:	443b      	add	r3, r7
 8005624:	222d      	movs	r2, #45	; 0x2d
 8005626:	f803 2c48 	strb.w	r2, [r3, #-72]
 800562a:	e01a      	b.n	8005662 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_PLUS) {
 800562c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800562e:	f003 0304 	and.w	r3, r3, #4
 8005632:	2b00      	cmp	r3, #0
 8005634:	d008      	beq.n	8005648 <_ftoa+0x460>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8005636:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005638:	1c5a      	adds	r2, r3, #1
 800563a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800563c:	3360      	adds	r3, #96	; 0x60
 800563e:	443b      	add	r3, r7
 8005640:	222b      	movs	r2, #43	; 0x2b
 8005642:	f803 2c48 	strb.w	r2, [r3, #-72]
 8005646:	e00c      	b.n	8005662 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_SPACE) {
 8005648:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800564a:	f003 0308 	and.w	r3, r3, #8
 800564e:	2b00      	cmp	r3, #0
 8005650:	d007      	beq.n	8005662 <_ftoa+0x47a>
      buf[len++] = ' ';
 8005652:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005654:	1c5a      	adds	r2, r3, #1
 8005656:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005658:	3360      	adds	r3, #96	; 0x60
 800565a:	443b      	add	r3, r7
 800565c:	2220      	movs	r2, #32
 800565e:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8005662:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005664:	9303      	str	r3, [sp, #12]
 8005666:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005668:	9302      	str	r3, [sp, #8]
 800566a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800566c:	9301      	str	r3, [sp, #4]
 800566e:	f107 0318 	add.w	r3, r7, #24
 8005672:	9300      	str	r3, [sp, #0]
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	6939      	ldr	r1, [r7, #16]
 800567a:	6978      	ldr	r0, [r7, #20]
 800567c:	f7ff fbb4 	bl	8004de8 <_out_rev>
 8005680:	4603      	mov	r3, r0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3764      	adds	r7, #100	; 0x64
 8005686:	46bd      	mov	sp, r7
 8005688:	bd90      	pop	{r4, r7, pc}
 800568a:	bf00      	nop
 800568c:	cccccccd 	.word	0xcccccccd
 8005690:	66666667 	.word	0x66666667
 8005694:	00000000 	.word	0x00000000

08005698 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8005698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800569c:	b09f      	sub	sp, #124	; 0x7c
 800569e:	af06      	add	r7, sp, #24
 80056a0:	6278      	str	r0, [r7, #36]	; 0x24
 80056a2:	6239      	str	r1, [r7, #32]
 80056a4:	61fa      	str	r2, [r7, #28]
 80056a6:	61bb      	str	r3, [r7, #24]
 80056a8:	ed87 0b04 	vstr	d0, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 80056ac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80056b0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80056b4:	f7fb fa20 	bl	8000af8 <__aeabi_dcmpeq>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d014      	beq.n	80056e8 <_etoa+0x50>
 80056be:	f04f 32ff 	mov.w	r2, #4294967295
 80056c2:	4bc1      	ldr	r3, [pc, #772]	; (80059c8 <_etoa+0x330>)
 80056c4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80056c8:	f7fb fa3e 	bl	8000b48 <__aeabi_dcmpgt>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10a      	bne.n	80056e8 <_etoa+0x50>
 80056d2:	f04f 32ff 	mov.w	r2, #4294967295
 80056d6:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 80056da:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80056de:	f7fb fa15 	bl	8000b0c <__aeabi_dcmplt>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d012      	beq.n	800570e <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 80056e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80056ec:	9302      	str	r3, [sp, #8]
 80056ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80056f2:	9301      	str	r3, [sp, #4]
 80056f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80056f8:	9300      	str	r3, [sp, #0]
 80056fa:	ed97 0b04 	vldr	d0, [r7, #16]
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	69fa      	ldr	r2, [r7, #28]
 8005702:	6a39      	ldr	r1, [r7, #32]
 8005704:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005706:	f7ff fd6f 	bl	80051e8 <_ftoa>
 800570a:	4603      	mov	r3, r0
 800570c:	e23f      	b.n	8005b8e <_etoa+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 800570e:	2301      	movs	r3, #1
 8005710:	461e      	mov	r6, r3
 8005712:	f04f 0200 	mov.w	r2, #0
 8005716:	f04f 0300 	mov.w	r3, #0
 800571a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800571e:	f7fb f9f5 	bl	8000b0c <__aeabi_dcmplt>
 8005722:	4603      	mov	r3, r0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d101      	bne.n	800572c <_etoa+0x94>
 8005728:	2300      	movs	r3, #0
 800572a:	461e      	mov	r6, r3
 800572c:	f887 6053 	strb.w	r6, [r7, #83]	; 0x53
  if (negative) {
 8005730:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8005734:	2b00      	cmp	r3, #0
 8005736:	d009      	beq.n	800574c <_etoa+0xb4>
    value = -value;
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	603b      	str	r3, [r7, #0]
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005742:	607b      	str	r3, [r7, #4]
 8005744:	ed97 7b00 	vldr	d7, [r7]
 8005748:	ed87 7b04 	vstr	d7, [r7, #16]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 800574c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005754:	2b00      	cmp	r3, #0
 8005756:	d102      	bne.n	800575e <_etoa+0xc6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8005758:	2306      	movs	r3, #6
 800575a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 800575e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005762:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8005766:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800576a:	f04f 0200 	mov.w	r2, #0
 800576e:	f04f 0300 	mov.w	r3, #0
 8005772:	0d0a      	lsrs	r2, r1, #20
 8005774:	2300      	movs	r3, #0
 8005776:	4613      	mov	r3, r2
 8005778:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800577c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005780:	64fb      	str	r3, [r7, #76]	; 0x4c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8005782:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005786:	4690      	mov	r8, r2
 8005788:	f3c3 0913 	ubfx	r9, r3, #0, #20
 800578c:	4644      	mov	r4, r8
 800578e:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 8005792:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005796:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 800579a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800579c:	f7fa feda 	bl	8000554 <__aeabi_i2d>
 80057a0:	a37d      	add	r3, pc, #500	; (adr r3, 8005998 <_etoa+0x300>)
 80057a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a6:	f7fa ff3f 	bl	8000628 <__aeabi_dmul>
 80057aa:	4602      	mov	r2, r0
 80057ac:	460b      	mov	r3, r1
 80057ae:	4610      	mov	r0, r2
 80057b0:	4619      	mov	r1, r3
 80057b2:	a37b      	add	r3, pc, #492	; (adr r3, 80059a0 <_etoa+0x308>)
 80057b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b8:	f7fa fd80 	bl	80002bc <__adddf3>
 80057bc:	4602      	mov	r2, r0
 80057be:	460b      	mov	r3, r1
 80057c0:	4614      	mov	r4, r2
 80057c2:	461d      	mov	r5, r3
 80057c4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80057c8:	f04f 0200 	mov.w	r2, #0
 80057cc:	4b7f      	ldr	r3, [pc, #508]	; (80059cc <_etoa+0x334>)
 80057ce:	f7fa fd73 	bl	80002b8 <__aeabi_dsub>
 80057d2:	4602      	mov	r2, r0
 80057d4:	460b      	mov	r3, r1
 80057d6:	4610      	mov	r0, r2
 80057d8:	4619      	mov	r1, r3
 80057da:	a373      	add	r3, pc, #460	; (adr r3, 80059a8 <_etoa+0x310>)
 80057dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e0:	f7fa ff22 	bl	8000628 <__aeabi_dmul>
 80057e4:	4602      	mov	r2, r0
 80057e6:	460b      	mov	r3, r1
 80057e8:	4620      	mov	r0, r4
 80057ea:	4629      	mov	r1, r5
 80057ec:	f7fa fd66 	bl	80002bc <__adddf3>
 80057f0:	4602      	mov	r2, r0
 80057f2:	460b      	mov	r3, r1
 80057f4:	4610      	mov	r0, r2
 80057f6:	4619      	mov	r1, r3
 80057f8:	f7fb f9c6 	bl	8000b88 <__aeabi_d2iz>
 80057fc:	4603      	mov	r3, r0
 80057fe:	65fb      	str	r3, [r7, #92]	; 0x5c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8005800:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8005802:	f7fa fea7 	bl	8000554 <__aeabi_i2d>
 8005806:	a36a      	add	r3, pc, #424	; (adr r3, 80059b0 <_etoa+0x318>)
 8005808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580c:	f7fa ff0c 	bl	8000628 <__aeabi_dmul>
 8005810:	4602      	mov	r2, r0
 8005812:	460b      	mov	r3, r1
 8005814:	4610      	mov	r0, r2
 8005816:	4619      	mov	r1, r3
 8005818:	f04f 0200 	mov.w	r2, #0
 800581c:	4b6c      	ldr	r3, [pc, #432]	; (80059d0 <_etoa+0x338>)
 800581e:	f7fa fd4d 	bl	80002bc <__adddf3>
 8005822:	4602      	mov	r2, r0
 8005824:	460b      	mov	r3, r1
 8005826:	4610      	mov	r0, r2
 8005828:	4619      	mov	r1, r3
 800582a:	f7fb f9ad 	bl	8000b88 <__aeabi_d2iz>
 800582e:	4603      	mov	r3, r0
 8005830:	64fb      	str	r3, [r7, #76]	; 0x4c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8005832:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8005834:	f7fa fe8e 	bl	8000554 <__aeabi_i2d>
 8005838:	a35f      	add	r3, pc, #380	; (adr r3, 80059b8 <_etoa+0x320>)
 800583a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800583e:	f7fa fef3 	bl	8000628 <__aeabi_dmul>
 8005842:	4602      	mov	r2, r0
 8005844:	460b      	mov	r3, r1
 8005846:	4614      	mov	r4, r2
 8005848:	461d      	mov	r5, r3
 800584a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800584c:	f7fa fe82 	bl	8000554 <__aeabi_i2d>
 8005850:	a35b      	add	r3, pc, #364	; (adr r3, 80059c0 <_etoa+0x328>)
 8005852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005856:	f7fa fee7 	bl	8000628 <__aeabi_dmul>
 800585a:	4602      	mov	r2, r0
 800585c:	460b      	mov	r3, r1
 800585e:	4620      	mov	r0, r4
 8005860:	4629      	mov	r1, r5
 8005862:	f7fa fd29 	bl	80002b8 <__aeabi_dsub>
 8005866:	4602      	mov	r2, r0
 8005868:	460b      	mov	r3, r1
 800586a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  const double z2 = z * z;
 800586e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005872:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8005876:	f7fa fed7 	bl	8000628 <__aeabi_dmul>
 800587a:	4602      	mov	r2, r0
 800587c:	460b      	mov	r3, r1
 800587e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8005882:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005884:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8005888:	17da      	asrs	r2, r3, #31
 800588a:	469a      	mov	sl, r3
 800588c:	4693      	mov	fp, r2
 800588e:	f04f 0200 	mov.w	r2, #0
 8005892:	f04f 0300 	mov.w	r3, #0
 8005896:	ea4f 530a 	mov.w	r3, sl, lsl #20
 800589a:	2200      	movs	r2, #0
 800589c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 80058a0:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80058a4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80058a8:	4602      	mov	r2, r0
 80058aa:	460b      	mov	r3, r1
 80058ac:	f7fa fd06 	bl	80002bc <__adddf3>
 80058b0:	4602      	mov	r2, r0
 80058b2:	460b      	mov	r3, r1
 80058b4:	4690      	mov	r8, r2
 80058b6:	4699      	mov	r9, r3
 80058b8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80058bc:	f04f 0000 	mov.w	r0, #0
 80058c0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80058c4:	f7fa fcf8 	bl	80002b8 <__aeabi_dsub>
 80058c8:	4602      	mov	r2, r0
 80058ca:	460b      	mov	r3, r1
 80058cc:	4692      	mov	sl, r2
 80058ce:	469b      	mov	fp, r3
 80058d0:	f04f 0200 	mov.w	r2, #0
 80058d4:	4b3f      	ldr	r3, [pc, #252]	; (80059d4 <_etoa+0x33c>)
 80058d6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80058da:	f7fa ffcf 	bl	800087c <__aeabi_ddiv>
 80058de:	4602      	mov	r2, r0
 80058e0:	460b      	mov	r3, r1
 80058e2:	4610      	mov	r0, r2
 80058e4:	4619      	mov	r1, r3
 80058e6:	f04f 0200 	mov.w	r2, #0
 80058ea:	4b3b      	ldr	r3, [pc, #236]	; (80059d8 <_etoa+0x340>)
 80058ec:	f7fa fce6 	bl	80002bc <__adddf3>
 80058f0:	4602      	mov	r2, r0
 80058f2:	460b      	mov	r3, r1
 80058f4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80058f8:	f7fa ffc0 	bl	800087c <__aeabi_ddiv>
 80058fc:	4602      	mov	r2, r0
 80058fe:	460b      	mov	r3, r1
 8005900:	4610      	mov	r0, r2
 8005902:	4619      	mov	r1, r3
 8005904:	f04f 0200 	mov.w	r2, #0
 8005908:	4b34      	ldr	r3, [pc, #208]	; (80059dc <_etoa+0x344>)
 800590a:	f7fa fcd7 	bl	80002bc <__adddf3>
 800590e:	4602      	mov	r2, r0
 8005910:	460b      	mov	r3, r1
 8005912:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005916:	f7fa ffb1 	bl	800087c <__aeabi_ddiv>
 800591a:	4602      	mov	r2, r0
 800591c:	460b      	mov	r3, r1
 800591e:	4650      	mov	r0, sl
 8005920:	4659      	mov	r1, fp
 8005922:	f7fa fccb 	bl	80002bc <__adddf3>
 8005926:	4602      	mov	r2, r0
 8005928:	460b      	mov	r3, r1
 800592a:	4640      	mov	r0, r8
 800592c:	4649      	mov	r1, r9
 800592e:	f7fa ffa5 	bl	800087c <__aeabi_ddiv>
 8005932:	4602      	mov	r2, r0
 8005934:	460b      	mov	r3, r1
 8005936:	4610      	mov	r0, r2
 8005938:	4619      	mov	r1, r3
 800593a:	f04f 0200 	mov.w	r2, #0
 800593e:	4b28      	ldr	r3, [pc, #160]	; (80059e0 <_etoa+0x348>)
 8005940:	f7fa fcbc 	bl	80002bc <__adddf3>
 8005944:	4602      	mov	r2, r0
 8005946:	460b      	mov	r3, r1
 8005948:	4620      	mov	r0, r4
 800594a:	4629      	mov	r1, r5
 800594c:	f7fa fe6c 	bl	8000628 <__aeabi_dmul>
 8005950:	4602      	mov	r2, r0
 8005952:	460b      	mov	r3, r1
 8005954:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // correct for rounding errors
  if (value < conv.F) {
 8005958:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800595c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005960:	f7fb f8d4 	bl	8000b0c <__aeabi_dcmplt>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00d      	beq.n	8005986 <_etoa+0x2ee>
    expval--;
 800596a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800596c:	3b01      	subs	r3, #1
 800596e:	65fb      	str	r3, [r7, #92]	; 0x5c
    conv.F /= 10;
 8005970:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005974:	f04f 0200 	mov.w	r2, #0
 8005978:	4b17      	ldr	r3, [pc, #92]	; (80059d8 <_etoa+0x340>)
 800597a:	f7fa ff7f 	bl	800087c <__aeabi_ddiv>
 800597e:	4602      	mov	r2, r0
 8005980:	460b      	mov	r3, r1
 8005982:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8005986:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005988:	2b63      	cmp	r3, #99	; 0x63
 800598a:	dc2b      	bgt.n	80059e4 <_etoa+0x34c>
 800598c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800598e:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8005992:	db27      	blt.n	80059e4 <_etoa+0x34c>
 8005994:	2304      	movs	r3, #4
 8005996:	e026      	b.n	80059e6 <_etoa+0x34e>
 8005998:	509f79fb 	.word	0x509f79fb
 800599c:	3fd34413 	.word	0x3fd34413
 80059a0:	8b60c8b3 	.word	0x8b60c8b3
 80059a4:	3fc68a28 	.word	0x3fc68a28
 80059a8:	636f4361 	.word	0x636f4361
 80059ac:	3fd287a7 	.word	0x3fd287a7
 80059b0:	0979a371 	.word	0x0979a371
 80059b4:	400a934f 	.word	0x400a934f
 80059b8:	bbb55516 	.word	0xbbb55516
 80059bc:	40026bb1 	.word	0x40026bb1
 80059c0:	fefa39ef 	.word	0xfefa39ef
 80059c4:	3fe62e42 	.word	0x3fe62e42
 80059c8:	7fefffff 	.word	0x7fefffff
 80059cc:	3ff80000 	.word	0x3ff80000
 80059d0:	3fe00000 	.word	0x3fe00000
 80059d4:	402c0000 	.word	0x402c0000
 80059d8:	40240000 	.word	0x40240000
 80059dc:	40180000 	.word	0x40180000
 80059e0:	3ff00000 	.word	0x3ff00000
 80059e4:	2305      	movs	r3, #5
 80059e6:	65bb      	str	r3, [r7, #88]	; 0x58

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 80059e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80059ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d03d      	beq.n	8005a70 <_etoa+0x3d8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 80059f4:	a368      	add	r3, pc, #416	; (adr r3, 8005b98 <_etoa+0x500>)
 80059f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059fa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80059fe:	f7fb f899 	bl	8000b34 <__aeabi_dcmpge>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d024      	beq.n	8005a52 <_etoa+0x3ba>
 8005a08:	a365      	add	r3, pc, #404	; (adr r3, 8005ba0 <_etoa+0x508>)
 8005a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a0e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005a12:	f7fb f87b 	bl	8000b0c <__aeabi_dcmplt>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d01a      	beq.n	8005a52 <_etoa+0x3ba>
      if ((int)prec > expval) {
 8005a1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005a20:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005a22:	429a      	cmp	r2, r3
 8005a24:	da07      	bge.n	8005a36 <_etoa+0x39e>
        prec = (unsigned)((int)prec - expval - 1);
 8005a26:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8005a2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a2c:	1ad3      	subs	r3, r2, r3
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005a34:	e002      	b.n	8005a3c <_etoa+0x3a4>
      }
      else {
        prec = 0;
 8005a36:	2300      	movs	r3, #0
 8005a38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8005a3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a40:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005a44:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	65bb      	str	r3, [r7, #88]	; 0x58
      expval   = 0;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a50:	e00e      	b.n	8005a70 <_etoa+0x3d8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8005a52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00a      	beq.n	8005a70 <_etoa+0x3d8>
 8005a5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d004      	beq.n	8005a70 <_etoa+0x3d8>
        --prec;
 8005a66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8005a70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a74:	657b      	str	r3, [r7, #84]	; 0x54
  if (width > minwidth) {
 8005a76:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8005a7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d904      	bls.n	8005a8a <_etoa+0x3f2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8005a80:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005a82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	657b      	str	r3, [r7, #84]	; 0x54
 8005a88:	e001      	b.n	8005a8e <_etoa+0x3f6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	657b      	str	r3, [r7, #84]	; 0x54
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8005a8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a92:	f003 0302 	and.w	r3, r3, #2
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d004      	beq.n	8005aa4 <_etoa+0x40c>
 8005a9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d001      	beq.n	8005aa4 <_etoa+0x40c>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // rescale the float value
  if (expval) {
 8005aa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d009      	beq.n	8005abe <_etoa+0x426>
    value /= conv.F;
 8005aaa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005aae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005ab2:	f7fa fee3 	bl	800087c <__aeabi_ddiv>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	460b      	mov	r3, r1
 8005aba:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  // output the floating part
  const size_t start_idx = idx;
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	637b      	str	r3, [r7, #52]	; 0x34
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8005ac2:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d006      	beq.n	8005ad8 <_etoa+0x440>
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	60bb      	str	r3, [r7, #8]
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005ad4:	60fb      	str	r3, [r7, #12]
 8005ad6:	e003      	b.n	8005ae0 <_etoa+0x448>
 8005ad8:	ed97 7b04 	vldr	d7, [r7, #16]
 8005adc:	ed87 7b02 	vstr	d7, [r7, #8]
 8005ae0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005ae4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ae8:	9302      	str	r3, [sp, #8]
 8005aea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005aec:	9301      	str	r3, [sp, #4]
 8005aee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005af2:	9300      	str	r3, [sp, #0]
 8005af4:	ed97 0b02 	vldr	d0, [r7, #8]
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	69fa      	ldr	r2, [r7, #28]
 8005afc:	6a39      	ldr	r1, [r7, #32]
 8005afe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b00:	f7ff fb72 	bl	80051e8 <_ftoa>
 8005b04:	61f8      	str	r0, [r7, #28]

  // output the exponent part
  if (minwidth) {
 8005b06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d03f      	beq.n	8005b8c <_etoa+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8005b0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005b10:	f003 0320 	and.w	r3, r3, #32
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d001      	beq.n	8005b1c <_etoa+0x484>
 8005b18:	2045      	movs	r0, #69	; 0x45
 8005b1a:	e000      	b.n	8005b1e <_etoa+0x486>
 8005b1c:	2065      	movs	r0, #101	; 0x65
 8005b1e:	69fa      	ldr	r2, [r7, #28]
 8005b20:	1c53      	adds	r3, r2, #1
 8005b22:	61fb      	str	r3, [r7, #28]
 8005b24:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	6a39      	ldr	r1, [r7, #32]
 8005b2a:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8005b2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	bfb8      	it	lt
 8005b32:	425b      	neglt	r3, r3
 8005b34:	4618      	mov	r0, r3
 8005b36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b38:	0fdb      	lsrs	r3, r3, #31
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b3e:	3a01      	subs	r2, #1
 8005b40:	2105      	movs	r1, #5
 8005b42:	9105      	str	r1, [sp, #20]
 8005b44:	9204      	str	r2, [sp, #16]
 8005b46:	2200      	movs	r2, #0
 8005b48:	9203      	str	r2, [sp, #12]
 8005b4a:	220a      	movs	r2, #10
 8005b4c:	9202      	str	r2, [sp, #8]
 8005b4e:	9301      	str	r3, [sp, #4]
 8005b50:	9000      	str	r0, [sp, #0]
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	69fa      	ldr	r2, [r7, #28]
 8005b56:	6a39      	ldr	r1, [r7, #32]
 8005b58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b5a:	f7ff fa71 	bl	8005040 <_ntoa_long>
 8005b5e:	61f8      	str	r0, [r7, #28]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8005b60:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005b64:	f003 0302 	and.w	r3, r3, #2
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d00f      	beq.n	8005b8c <_etoa+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8005b6c:	e007      	b.n	8005b7e <_etoa+0x4e6>
 8005b6e:	69fa      	ldr	r2, [r7, #28]
 8005b70:	1c53      	adds	r3, r2, #1
 8005b72:	61fb      	str	r3, [r7, #28]
 8005b74:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	6a39      	ldr	r1, [r7, #32]
 8005b7a:	2020      	movs	r0, #32
 8005b7c:	47a0      	blx	r4
 8005b7e:	69fa      	ldr	r2, [r7, #28]
 8005b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b82:	1ad3      	subs	r3, r2, r3
 8005b84:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d8f0      	bhi.n	8005b6e <_etoa+0x4d6>
    }
  }
  return idx;
 8005b8c:	69fb      	ldr	r3, [r7, #28]
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3764      	adds	r7, #100	; 0x64
 8005b92:	46bd      	mov	sp, r7
 8005b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b98:	eb1c432d 	.word	0xeb1c432d
 8005b9c:	3f1a36e2 	.word	0x3f1a36e2
 8005ba0:	00000000 	.word	0x00000000
 8005ba4:	412e8480 	.word	0x412e8480

08005ba8 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8005ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bac:	b0a3      	sub	sp, #140	; 0x8c
 8005bae:	af0a      	add	r7, sp, #40	; 0x28
 8005bb0:	6178      	str	r0, [r7, #20]
 8005bb2:	6139      	str	r1, [r7, #16]
 8005bb4:	60fa      	str	r2, [r7, #12]
 8005bb6:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!buffer) {
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	f040 84be 	bne.w	8006540 <_vsnprintf+0x998>
    // use null output function
    out = _out_null;
 8005bc4:	4ba3      	ldr	r3, [pc, #652]	; (8005e54 <_vsnprintf+0x2ac>)
 8005bc6:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 8005bc8:	f000 bcba 	b.w	8006540 <_vsnprintf+0x998>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	2b25      	cmp	r3, #37	; 0x25
 8005bd2:	d00d      	beq.n	8005bf0 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	7818      	ldrb	r0, [r3, #0]
 8005bd8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005bda:	1c53      	adds	r3, r2, #1
 8005bdc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bde:	697c      	ldr	r4, [r7, #20]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6939      	ldr	r1, [r7, #16]
 8005be4:	47a0      	blx	r4
      format++;
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	3301      	adds	r3, #1
 8005bea:	60bb      	str	r3, [r7, #8]
      continue;
 8005bec:	f000 bca8 	b.w	8006540 <_vsnprintf+0x998>
    }
    else {
      // yes, evaluate it
      format++;
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	65fb      	str	r3, [r7, #92]	; 0x5c
    do {
      switch (*format) {
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	3b20      	subs	r3, #32
 8005c00:	2b10      	cmp	r3, #16
 8005c02:	d857      	bhi.n	8005cb4 <_vsnprintf+0x10c>
 8005c04:	a201      	add	r2, pc, #4	; (adr r2, 8005c0c <_vsnprintf+0x64>)
 8005c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c0a:	bf00      	nop
 8005c0c:	08005c8d 	.word	0x08005c8d
 8005c10:	08005cb5 	.word	0x08005cb5
 8005c14:	08005cb5 	.word	0x08005cb5
 8005c18:	08005ca1 	.word	0x08005ca1
 8005c1c:	08005cb5 	.word	0x08005cb5
 8005c20:	08005cb5 	.word	0x08005cb5
 8005c24:	08005cb5 	.word	0x08005cb5
 8005c28:	08005cb5 	.word	0x08005cb5
 8005c2c:	08005cb5 	.word	0x08005cb5
 8005c30:	08005cb5 	.word	0x08005cb5
 8005c34:	08005cb5 	.word	0x08005cb5
 8005c38:	08005c79 	.word	0x08005c79
 8005c3c:	08005cb5 	.word	0x08005cb5
 8005c40:	08005c65 	.word	0x08005c65
 8005c44:	08005cb5 	.word	0x08005cb5
 8005c48:	08005cb5 	.word	0x08005cb5
 8005c4c:	08005c51 	.word	0x08005c51
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8005c50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c52:	f043 0301 	orr.w	r3, r3, #1
 8005c56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	60bb      	str	r3, [r7, #8]
 8005c5e:	2301      	movs	r3, #1
 8005c60:	653b      	str	r3, [r7, #80]	; 0x50
 8005c62:	e02a      	b.n	8005cba <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8005c64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c66:	f043 0302 	orr.w	r3, r3, #2
 8005c6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	3301      	adds	r3, #1
 8005c70:	60bb      	str	r3, [r7, #8]
 8005c72:	2301      	movs	r3, #1
 8005c74:	653b      	str	r3, [r7, #80]	; 0x50
 8005c76:	e020      	b.n	8005cba <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8005c78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c7a:	f043 0304 	orr.w	r3, r3, #4
 8005c7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	3301      	adds	r3, #1
 8005c84:	60bb      	str	r3, [r7, #8]
 8005c86:	2301      	movs	r3, #1
 8005c88:	653b      	str	r3, [r7, #80]	; 0x50
 8005c8a:	e016      	b.n	8005cba <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8005c8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c8e:	f043 0308 	orr.w	r3, r3, #8
 8005c92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	3301      	adds	r3, #1
 8005c98:	60bb      	str	r3, [r7, #8]
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	653b      	str	r3, [r7, #80]	; 0x50
 8005c9e:	e00c      	b.n	8005cba <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8005ca0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ca2:	f043 0310 	orr.w	r3, r3, #16
 8005ca6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	3301      	adds	r3, #1
 8005cac:	60bb      	str	r3, [r7, #8]
 8005cae:	2301      	movs	r3, #1
 8005cb0:	653b      	str	r3, [r7, #80]	; 0x50
 8005cb2:	e002      	b.n	8005cba <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	653b      	str	r3, [r7, #80]	; 0x50
 8005cb8:	bf00      	nop
      }
    } while (n);
 8005cba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d19c      	bne.n	8005bfa <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	65bb      	str	r3, [r7, #88]	; 0x58
    if (_is_digit(*format)) {
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f7ff f852 	bl	8004d72 <_is_digit>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d006      	beq.n	8005ce2 <_vsnprintf+0x13a>
      width = _atoi(&format);
 8005cd4:	f107 0308 	add.w	r3, r7, #8
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f7ff f861 	bl	8004da0 <_atoi>
 8005cde:	65b8      	str	r0, [r7, #88]	; 0x58
 8005ce0:	e01a      	b.n	8005d18 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	2b2a      	cmp	r3, #42	; 0x2a
 8005ce8:	d116      	bne.n	8005d18 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 8005cea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005cee:	1d1a      	adds	r2, r3, #4
 8005cf0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	63bb      	str	r3, [r7, #56]	; 0x38
      if (w < 0) {
 8005cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	da07      	bge.n	8005d0e <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 8005cfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d00:	f043 0302 	orr.w	r3, r3, #2
 8005d04:	65fb      	str	r3, [r7, #92]	; 0x5c
        width = (unsigned int)-w;
 8005d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d08:	425b      	negs	r3, r3
 8005d0a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d0c:	e001      	b.n	8005d12 <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 8005d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d10:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      format++;
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	3301      	adds	r3, #1
 8005d16:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	657b      	str	r3, [r7, #84]	; 0x54
    if (*format == '.') {
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	2b2e      	cmp	r3, #46	; 0x2e
 8005d22:	d127      	bne.n	8005d74 <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 8005d24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005d2a:	65fb      	str	r3, [r7, #92]	; 0x5c
      format++;
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	3301      	adds	r3, #1
 8005d30:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	4618      	mov	r0, r3
 8005d38:	f7ff f81b 	bl	8004d72 <_is_digit>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d006      	beq.n	8005d50 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 8005d42:	f107 0308 	add.w	r3, r7, #8
 8005d46:	4618      	mov	r0, r3
 8005d48:	f7ff f82a 	bl	8004da0 <_atoi>
 8005d4c:	6578      	str	r0, [r7, #84]	; 0x54
 8005d4e:	e011      	b.n	8005d74 <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	2b2a      	cmp	r3, #42	; 0x2a
 8005d56:	d10d      	bne.n	8005d74 <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 8005d58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d5c:	1d1a      	adds	r2, r3, #4
 8005d5e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	637b      	str	r3, [r7, #52]	; 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8005d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d68:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005d6c:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	3301      	adds	r3, #1
 8005d72:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	3b68      	subs	r3, #104	; 0x68
 8005d7a:	2b12      	cmp	r3, #18
 8005d7c:	d866      	bhi.n	8005e4c <_vsnprintf+0x2a4>
 8005d7e:	a201      	add	r2, pc, #4	; (adr r2, 8005d84 <_vsnprintf+0x1dc>)
 8005d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d84:	08005df7 	.word	0x08005df7
 8005d88:	08005e4d 	.word	0x08005e4d
 8005d8c:	08005e2d 	.word	0x08005e2d
 8005d90:	08005e4d 	.word	0x08005e4d
 8005d94:	08005dd1 	.word	0x08005dd1
 8005d98:	08005e4d 	.word	0x08005e4d
 8005d9c:	08005e4d 	.word	0x08005e4d
 8005da0:	08005e4d 	.word	0x08005e4d
 8005da4:	08005e4d 	.word	0x08005e4d
 8005da8:	08005e4d 	.word	0x08005e4d
 8005dac:	08005e4d 	.word	0x08005e4d
 8005db0:	08005e4d 	.word	0x08005e4d
 8005db4:	08005e1d 	.word	0x08005e1d
 8005db8:	08005e4d 	.word	0x08005e4d
 8005dbc:	08005e4d 	.word	0x08005e4d
 8005dc0:	08005e4d 	.word	0x08005e4d
 8005dc4:	08005e4d 	.word	0x08005e4d
 8005dc8:	08005e4d 	.word	0x08005e4d
 8005dcc:	08005e3d 	.word	0x08005e3d
      case 'l' :
        flags |= FLAGS_LONG;
 8005dd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005dd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dd6:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	3301      	adds	r3, #1
 8005ddc:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	2b6c      	cmp	r3, #108	; 0x6c
 8005de4:	d134      	bne.n	8005e50 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 8005de6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005de8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005dec:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	3301      	adds	r3, #1
 8005df2:	60bb      	str	r3, [r7, #8]
        }
        break;
 8005df4:	e02c      	b.n	8005e50 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 8005df6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005df8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dfc:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	3301      	adds	r3, #1
 8005e02:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	2b68      	cmp	r3, #104	; 0x68
 8005e0a:	d125      	bne.n	8005e58 <_vsnprintf+0x2b0>
          flags |= FLAGS_CHAR;
 8005e0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e12:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	3301      	adds	r3, #1
 8005e18:	60bb      	str	r3, [r7, #8]
        }
        break;
 8005e1a:	e01d      	b.n	8005e58 <_vsnprintf+0x2b0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8005e1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e22:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	3301      	adds	r3, #1
 8005e28:	60bb      	str	r3, [r7, #8]
        break;
 8005e2a:	e016      	b.n	8005e5a <_vsnprintf+0x2b2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8005e2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e32:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	3301      	adds	r3, #1
 8005e38:	60bb      	str	r3, [r7, #8]
        break;
 8005e3a:	e00e      	b.n	8005e5a <_vsnprintf+0x2b2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8005e3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e42:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	3301      	adds	r3, #1
 8005e48:	60bb      	str	r3, [r7, #8]
        break;
 8005e4a:	e006      	b.n	8005e5a <_vsnprintf+0x2b2>
      default :
        break;
 8005e4c:	bf00      	nop
 8005e4e:	e004      	b.n	8005e5a <_vsnprintf+0x2b2>
        break;
 8005e50:	bf00      	nop
 8005e52:	e002      	b.n	8005e5a <_vsnprintf+0x2b2>
 8005e54:	08004d1d 	.word	0x08004d1d
        break;
 8005e58:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	3b25      	subs	r3, #37	; 0x25
 8005e60:	2b53      	cmp	r3, #83	; 0x53
 8005e62:	f200 8360 	bhi.w	8006526 <_vsnprintf+0x97e>
 8005e66:	a201      	add	r2, pc, #4	; (adr r2, 8005e6c <_vsnprintf+0x2c4>)
 8005e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e6c:	0800650f 	.word	0x0800650f
 8005e70:	08006527 	.word	0x08006527
 8005e74:	08006527 	.word	0x08006527
 8005e78:	08006527 	.word	0x08006527
 8005e7c:	08006527 	.word	0x08006527
 8005e80:	08006527 	.word	0x08006527
 8005e84:	08006527 	.word	0x08006527
 8005e88:	08006527 	.word	0x08006527
 8005e8c:	08006527 	.word	0x08006527
 8005e90:	08006527 	.word	0x08006527
 8005e94:	08006527 	.word	0x08006527
 8005e98:	08006527 	.word	0x08006527
 8005e9c:	08006527 	.word	0x08006527
 8005ea0:	08006527 	.word	0x08006527
 8005ea4:	08006527 	.word	0x08006527
 8005ea8:	08006527 	.word	0x08006527
 8005eac:	08006527 	.word	0x08006527
 8005eb0:	08006527 	.word	0x08006527
 8005eb4:	08006527 	.word	0x08006527
 8005eb8:	08006527 	.word	0x08006527
 8005ebc:	08006527 	.word	0x08006527
 8005ec0:	08006527 	.word	0x08006527
 8005ec4:	08006527 	.word	0x08006527
 8005ec8:	08006527 	.word	0x08006527
 8005ecc:	08006527 	.word	0x08006527
 8005ed0:	08006527 	.word	0x08006527
 8005ed4:	08006527 	.word	0x08006527
 8005ed8:	08006527 	.word	0x08006527
 8005edc:	08006527 	.word	0x08006527
 8005ee0:	08006527 	.word	0x08006527
 8005ee4:	08006527 	.word	0x08006527
 8005ee8:	08006527 	.word	0x08006527
 8005eec:	080062c3 	.word	0x080062c3
 8005ef0:	08006273 	.word	0x08006273
 8005ef4:	080062c3 	.word	0x080062c3
 8005ef8:	08006527 	.word	0x08006527
 8005efc:	08006527 	.word	0x08006527
 8005f00:	08006527 	.word	0x08006527
 8005f04:	08006527 	.word	0x08006527
 8005f08:	08006527 	.word	0x08006527
 8005f0c:	08006527 	.word	0x08006527
 8005f10:	08006527 	.word	0x08006527
 8005f14:	08006527 	.word	0x08006527
 8005f18:	08006527 	.word	0x08006527
 8005f1c:	08006527 	.word	0x08006527
 8005f20:	08006527 	.word	0x08006527
 8005f24:	08006527 	.word	0x08006527
 8005f28:	08006527 	.word	0x08006527
 8005f2c:	08006527 	.word	0x08006527
 8005f30:	08006527 	.word	0x08006527
 8005f34:	08006527 	.word	0x08006527
 8005f38:	08005fbd 	.word	0x08005fbd
 8005f3c:	08006527 	.word	0x08006527
 8005f40:	08006527 	.word	0x08006527
 8005f44:	08006527 	.word	0x08006527
 8005f48:	08006527 	.word	0x08006527
 8005f4c:	08006527 	.word	0x08006527
 8005f50:	08006527 	.word	0x08006527
 8005f54:	08006527 	.word	0x08006527
 8005f58:	08006527 	.word	0x08006527
 8005f5c:	08006527 	.word	0x08006527
 8005f60:	08005fbd 	.word	0x08005fbd
 8005f64:	08006333 	.word	0x08006333
 8005f68:	08005fbd 	.word	0x08005fbd
 8005f6c:	080062c3 	.word	0x080062c3
 8005f70:	08006273 	.word	0x08006273
 8005f74:	080062c3 	.word	0x080062c3
 8005f78:	08006527 	.word	0x08006527
 8005f7c:	08005fbd 	.word	0x08005fbd
 8005f80:	08006527 	.word	0x08006527
 8005f84:	08006527 	.word	0x08006527
 8005f88:	08006527 	.word	0x08006527
 8005f8c:	08006527 	.word	0x08006527
 8005f90:	08006527 	.word	0x08006527
 8005f94:	08005fbd 	.word	0x08005fbd
 8005f98:	08006473 	.word	0x08006473
 8005f9c:	08006527 	.word	0x08006527
 8005fa0:	08006527 	.word	0x08006527
 8005fa4:	080063ab 	.word	0x080063ab
 8005fa8:	08006527 	.word	0x08006527
 8005fac:	08005fbd 	.word	0x08005fbd
 8005fb0:	08006527 	.word	0x08006527
 8005fb4:	08006527 	.word	0x08006527
 8005fb8:	08005fbd 	.word	0x08005fbd
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	2b78      	cmp	r3, #120	; 0x78
 8005fc2:	d003      	beq.n	8005fcc <_vsnprintf+0x424>
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	2b58      	cmp	r3, #88	; 0x58
 8005fca:	d102      	bne.n	8005fd2 <_vsnprintf+0x42a>
          base = 16U;
 8005fcc:	2310      	movs	r3, #16
 8005fce:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fd0:	e013      	b.n	8005ffa <_vsnprintf+0x452>
        }
        else if (*format == 'o') {
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	2b6f      	cmp	r3, #111	; 0x6f
 8005fd8:	d102      	bne.n	8005fe0 <_vsnprintf+0x438>
          base =  8U;
 8005fda:	2308      	movs	r3, #8
 8005fdc:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fde:	e00c      	b.n	8005ffa <_vsnprintf+0x452>
        }
        else if (*format == 'b') {
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	2b62      	cmp	r3, #98	; 0x62
 8005fe6:	d102      	bne.n	8005fee <_vsnprintf+0x446>
          base =  2U;
 8005fe8:	2302      	movs	r3, #2
 8005fea:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fec:	e005      	b.n	8005ffa <_vsnprintf+0x452>
        }
        else {
          base = 10U;
 8005fee:	230a      	movs	r3, #10
 8005ff0:	64bb      	str	r3, [r7, #72]	; 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8005ff2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ff4:	f023 0310 	bic.w	r3, r3, #16
 8005ff8:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        // uppercase
        if (*format == 'X') {
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	2b58      	cmp	r3, #88	; 0x58
 8006000:	d103      	bne.n	800600a <_vsnprintf+0x462>
          flags |= FLAGS_UPPERCASE;
 8006002:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006004:	f043 0320 	orr.w	r3, r3, #32
 8006008:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	2b69      	cmp	r3, #105	; 0x69
 8006010:	d007      	beq.n	8006022 <_vsnprintf+0x47a>
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	2b64      	cmp	r3, #100	; 0x64
 8006018:	d003      	beq.n	8006022 <_vsnprintf+0x47a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 800601a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800601c:	f023 030c 	bic.w	r3, r3, #12
 8006020:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8006022:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006028:	2b00      	cmp	r3, #0
 800602a:	d003      	beq.n	8006034 <_vsnprintf+0x48c>
          flags &= ~FLAGS_ZEROPAD;
 800602c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800602e:	f023 0301 	bic.w	r3, r3, #1
 8006032:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	2b69      	cmp	r3, #105	; 0x69
 800603a:	d004      	beq.n	8006046 <_vsnprintf+0x49e>
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	2b64      	cmp	r3, #100	; 0x64
 8006042:	f040 8098 	bne.w	8006176 <_vsnprintf+0x5ce>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8006046:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006048:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800604c:	2b00      	cmp	r3, #0
 800604e:	d031      	beq.n	80060b4 <_vsnprintf+0x50c>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8006050:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006054:	3307      	adds	r3, #7
 8006056:	f023 0307 	bic.w	r3, r3, #7
 800605a:	f103 0208 	add.w	r2, r3, #8
 800605e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8006062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006066:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800606a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800606e:	2b00      	cmp	r3, #0
 8006070:	da06      	bge.n	8006080 <_vsnprintf+0x4d8>
 8006072:	2100      	movs	r1, #0
 8006074:	f1d2 0800 	rsbs	r8, r2, #0
 8006078:	eb61 0903 	sbc.w	r9, r1, r3
 800607c:	4642      	mov	r2, r8
 800607e:	464b      	mov	r3, r9
 8006080:	69f9      	ldr	r1, [r7, #28]
 8006082:	0fc9      	lsrs	r1, r1, #31
 8006084:	b2c9      	uxtb	r1, r1
 8006086:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8006088:	2400      	movs	r4, #0
 800608a:	4682      	mov	sl, r0
 800608c:	46a3      	mov	fp, r4
 800608e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8006090:	9008      	str	r0, [sp, #32]
 8006092:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8006094:	9007      	str	r0, [sp, #28]
 8006096:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8006098:	9006      	str	r0, [sp, #24]
 800609a:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800609e:	9102      	str	r1, [sp, #8]
 80060a0:	e9cd 2300 	strd	r2, r3, [sp]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80060a8:	6939      	ldr	r1, [r7, #16]
 80060aa:	6978      	ldr	r0, [r7, #20]
 80060ac:	f7ff f82e 	bl	800510c <_ntoa_long_long>
 80060b0:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 80060b2:	e0da      	b.n	800626a <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 80060b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d020      	beq.n	8006100 <_vsnprintf+0x558>
            const long value = va_arg(va, long);
 80060be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80060c2:	1d1a      	adds	r2, r3, #4
 80060c4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80060cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	bfb8      	it	lt
 80060d2:	425b      	neglt	r3, r3
 80060d4:	4619      	mov	r1, r3
 80060d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d8:	0fdb      	lsrs	r3, r3, #31
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80060de:	9205      	str	r2, [sp, #20]
 80060e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80060e2:	9204      	str	r2, [sp, #16]
 80060e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80060e6:	9203      	str	r2, [sp, #12]
 80060e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060ea:	9202      	str	r2, [sp, #8]
 80060ec:	9301      	str	r3, [sp, #4]
 80060ee:	9100      	str	r1, [sp, #0]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80060f4:	6939      	ldr	r1, [r7, #16]
 80060f6:	6978      	ldr	r0, [r7, #20]
 80060f8:	f7fe ffa2 	bl	8005040 <_ntoa_long>
 80060fc:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 80060fe:	e0b4      	b.n	800626a <_vsnprintf+0x6c2>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8006100:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006106:	2b00      	cmp	r3, #0
 8006108:	d007      	beq.n	800611a <_vsnprintf+0x572>
 800610a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800610e:	1d1a      	adds	r2, r3, #4
 8006110:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	b2db      	uxtb	r3, r3
 8006118:	e012      	b.n	8006140 <_vsnprintf+0x598>
 800611a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800611c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006120:	2b00      	cmp	r3, #0
 8006122:	d007      	beq.n	8006134 <_vsnprintf+0x58c>
 8006124:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006128:	1d1a      	adds	r2, r3, #4
 800612a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	b21b      	sxth	r3, r3
 8006132:	e005      	b.n	8006140 <_vsnprintf+0x598>
 8006134:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006138:	1d1a      	adds	r2, r3, #4
 800613a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8006142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006144:	2b00      	cmp	r3, #0
 8006146:	bfb8      	it	lt
 8006148:	425b      	neglt	r3, r3
 800614a:	4619      	mov	r1, r3
 800614c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800614e:	0fdb      	lsrs	r3, r3, #31
 8006150:	b2db      	uxtb	r3, r3
 8006152:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006154:	9205      	str	r2, [sp, #20]
 8006156:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006158:	9204      	str	r2, [sp, #16]
 800615a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800615c:	9203      	str	r2, [sp, #12]
 800615e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006160:	9202      	str	r2, [sp, #8]
 8006162:	9301      	str	r3, [sp, #4]
 8006164:	9100      	str	r1, [sp, #0]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800616a:	6939      	ldr	r1, [r7, #16]
 800616c:	6978      	ldr	r0, [r7, #20]
 800616e:	f7fe ff67 	bl	8005040 <_ntoa_long>
 8006172:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8006174:	e079      	b.n	800626a <_vsnprintf+0x6c2>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8006176:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006178:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800617c:	2b00      	cmp	r3, #0
 800617e:	d022      	beq.n	80061c6 <_vsnprintf+0x61e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8006180:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006184:	3307      	adds	r3, #7
 8006186:	f023 0307 	bic.w	r3, r3, #7
 800618a:	f103 0208 	add.w	r2, r3, #8
 800618e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8006192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006196:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006198:	2000      	movs	r0, #0
 800619a:	460d      	mov	r5, r1
 800619c:	4606      	mov	r6, r0
 800619e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80061a0:	9108      	str	r1, [sp, #32]
 80061a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80061a4:	9107      	str	r1, [sp, #28]
 80061a6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80061a8:	9106      	str	r1, [sp, #24]
 80061aa:	e9cd 5604 	strd	r5, r6, [sp, #16]
 80061ae:	2100      	movs	r1, #0
 80061b0:	9102      	str	r1, [sp, #8]
 80061b2:	e9cd 2300 	strd	r2, r3, [sp]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80061ba:	6939      	ldr	r1, [r7, #16]
 80061bc:	6978      	ldr	r0, [r7, #20]
 80061be:	f7fe ffa5 	bl	800510c <_ntoa_long_long>
 80061c2:	64f8      	str	r0, [r7, #76]	; 0x4c
 80061c4:	e051      	b.n	800626a <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 80061c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d018      	beq.n	8006202 <_vsnprintf+0x65a>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 80061d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80061d4:	1d1a      	adds	r2, r3, #4
 80061d6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80061de:	9205      	str	r2, [sp, #20]
 80061e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80061e2:	9204      	str	r2, [sp, #16]
 80061e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80061e6:	9203      	str	r2, [sp, #12]
 80061e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061ea:	9202      	str	r2, [sp, #8]
 80061ec:	2200      	movs	r2, #0
 80061ee:	9201      	str	r2, [sp, #4]
 80061f0:	9300      	str	r3, [sp, #0]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80061f6:	6939      	ldr	r1, [r7, #16]
 80061f8:	6978      	ldr	r0, [r7, #20]
 80061fa:	f7fe ff21 	bl	8005040 <_ntoa_long>
 80061fe:	64f8      	str	r0, [r7, #76]	; 0x4c
 8006200:	e033      	b.n	800626a <_vsnprintf+0x6c2>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8006202:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006208:	2b00      	cmp	r3, #0
 800620a:	d007      	beq.n	800621c <_vsnprintf+0x674>
 800620c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006210:	1d1a      	adds	r2, r3, #4
 8006212:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	b2db      	uxtb	r3, r3
 800621a:	e012      	b.n	8006242 <_vsnprintf+0x69a>
 800621c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800621e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006222:	2b00      	cmp	r3, #0
 8006224:	d007      	beq.n	8006236 <_vsnprintf+0x68e>
 8006226:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800622a:	1d1a      	adds	r2, r3, #4
 800622c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	b29b      	uxth	r3, r3
 8006234:	e005      	b.n	8006242 <_vsnprintf+0x69a>
 8006236:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800623a:	1d1a      	adds	r2, r3, #4
 800623c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	62fb      	str	r3, [r7, #44]	; 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8006244:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006246:	9305      	str	r3, [sp, #20]
 8006248:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800624a:	9304      	str	r3, [sp, #16]
 800624c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800624e:	9303      	str	r3, [sp, #12]
 8006250:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006252:	9302      	str	r3, [sp, #8]
 8006254:	2300      	movs	r3, #0
 8006256:	9301      	str	r3, [sp, #4]
 8006258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800625a:	9300      	str	r3, [sp, #0]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006260:	6939      	ldr	r1, [r7, #16]
 8006262:	6978      	ldr	r0, [r7, #20]
 8006264:	f7fe feec 	bl	8005040 <_ntoa_long>
 8006268:	64f8      	str	r0, [r7, #76]	; 0x4c
          }
        }
        format++;
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	3301      	adds	r3, #1
 800626e:	60bb      	str	r3, [r7, #8]
        break;
 8006270:	e166      	b.n	8006540 <_vsnprintf+0x998>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	2b46      	cmp	r3, #70	; 0x46
 8006278:	d103      	bne.n	8006282 <_vsnprintf+0x6da>
 800627a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800627c:	f043 0320 	orr.w	r3, r3, #32
 8006280:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8006282:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006286:	3307      	adds	r3, #7
 8006288:	f023 0307 	bic.w	r3, r3, #7
 800628c:	f103 0208 	add.w	r2, r3, #8
 8006290:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8006294:	ed93 7b00 	vldr	d7, [r3]
 8006298:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800629a:	9302      	str	r3, [sp, #8]
 800629c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800629e:	9301      	str	r3, [sp, #4]
 80062a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062a2:	9300      	str	r3, [sp, #0]
 80062a4:	eeb0 0a47 	vmov.f32	s0, s14
 80062a8:	eef0 0a67 	vmov.f32	s1, s15
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80062b0:	6939      	ldr	r1, [r7, #16]
 80062b2:	6978      	ldr	r0, [r7, #20]
 80062b4:	f7fe ff98 	bl	80051e8 <_ftoa>
 80062b8:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	3301      	adds	r3, #1
 80062be:	60bb      	str	r3, [r7, #8]
        break;
 80062c0:	e13e      	b.n	8006540 <_vsnprintf+0x998>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	2b67      	cmp	r3, #103	; 0x67
 80062c8:	d003      	beq.n	80062d2 <_vsnprintf+0x72a>
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	2b47      	cmp	r3, #71	; 0x47
 80062d0:	d103      	bne.n	80062da <_vsnprintf+0x732>
 80062d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80062d8:	65fb      	str	r3, [r7, #92]	; 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	2b45      	cmp	r3, #69	; 0x45
 80062e0:	d003      	beq.n	80062ea <_vsnprintf+0x742>
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	2b47      	cmp	r3, #71	; 0x47
 80062e8:	d103      	bne.n	80062f2 <_vsnprintf+0x74a>
 80062ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062ec:	f043 0320 	orr.w	r3, r3, #32
 80062f0:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 80062f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80062f6:	3307      	adds	r3, #7
 80062f8:	f023 0307 	bic.w	r3, r3, #7
 80062fc:	f103 0208 	add.w	r2, r3, #8
 8006300:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8006304:	ed93 7b00 	vldr	d7, [r3]
 8006308:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800630a:	9302      	str	r3, [sp, #8]
 800630c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800630e:	9301      	str	r3, [sp, #4]
 8006310:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006312:	9300      	str	r3, [sp, #0]
 8006314:	eeb0 0a47 	vmov.f32	s0, s14
 8006318:	eef0 0a67 	vmov.f32	s1, s15
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006320:	6939      	ldr	r1, [r7, #16]
 8006322:	6978      	ldr	r0, [r7, #20]
 8006324:	f7ff f9b8 	bl	8005698 <_etoa>
 8006328:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	3301      	adds	r3, #1
 800632e:	60bb      	str	r3, [r7, #8]
        break;
 8006330:	e106      	b.n	8006540 <_vsnprintf+0x998>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8006332:	2301      	movs	r3, #1
 8006334:	647b      	str	r3, [r7, #68]	; 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8006336:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006338:	f003 0302 	and.w	r3, r3, #2
 800633c:	2b00      	cmp	r3, #0
 800633e:	d10e      	bne.n	800635e <_vsnprintf+0x7b6>
          while (l++ < width) {
 8006340:	e007      	b.n	8006352 <_vsnprintf+0x7aa>
            out(' ', buffer, idx++, maxlen);
 8006342:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006344:	1c53      	adds	r3, r2, #1
 8006346:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006348:	697c      	ldr	r4, [r7, #20]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6939      	ldr	r1, [r7, #16]
 800634e:	2020      	movs	r0, #32
 8006350:	47a0      	blx	r4
          while (l++ < width) {
 8006352:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006354:	1c5a      	adds	r2, r3, #1
 8006356:	647a      	str	r2, [r7, #68]	; 0x44
 8006358:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800635a:	429a      	cmp	r2, r3
 800635c:	d8f1      	bhi.n	8006342 <_vsnprintf+0x79a>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 800635e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006362:	1d1a      	adds	r2, r3, #4
 8006364:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	b2d8      	uxtb	r0, r3
 800636c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800636e:	1c53      	adds	r3, r2, #1
 8006370:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006372:	697c      	ldr	r4, [r7, #20]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6939      	ldr	r1, [r7, #16]
 8006378:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 800637a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800637c:	f003 0302 	and.w	r3, r3, #2
 8006380:	2b00      	cmp	r3, #0
 8006382:	d00e      	beq.n	80063a2 <_vsnprintf+0x7fa>
          while (l++ < width) {
 8006384:	e007      	b.n	8006396 <_vsnprintf+0x7ee>
            out(' ', buffer, idx++, maxlen);
 8006386:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006388:	1c53      	adds	r3, r2, #1
 800638a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800638c:	697c      	ldr	r4, [r7, #20]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6939      	ldr	r1, [r7, #16]
 8006392:	2020      	movs	r0, #32
 8006394:	47a0      	blx	r4
          while (l++ < width) {
 8006396:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006398:	1c5a      	adds	r2, r3, #1
 800639a:	647a      	str	r2, [r7, #68]	; 0x44
 800639c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800639e:	429a      	cmp	r2, r3
 80063a0:	d8f1      	bhi.n	8006386 <_vsnprintf+0x7de>
          }
        }
        format++;
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	3301      	adds	r3, #1
 80063a6:	60bb      	str	r3, [r7, #8]
        break;
 80063a8:	e0ca      	b.n	8006540 <_vsnprintf+0x998>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 80063aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80063ae:	1d1a      	adds	r2, r3, #4
 80063b0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	643b      	str	r3, [r7, #64]	; 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 80063b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d001      	beq.n	80063c2 <_vsnprintf+0x81a>
 80063be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063c0:	e001      	b.n	80063c6 <_vsnprintf+0x81e>
 80063c2:	f04f 33ff 	mov.w	r3, #4294967295
 80063c6:	4619      	mov	r1, r3
 80063c8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80063ca:	f7fe fcb5 	bl	8004d38 <_strnlen_s>
 80063ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 80063d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d005      	beq.n	80063e6 <_vsnprintf+0x83e>
          l = (l < precision ? l : precision);
 80063da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80063dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063de:	4293      	cmp	r3, r2
 80063e0:	bf28      	it	cs
 80063e2:	4613      	movcs	r3, r2
 80063e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 80063e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063e8:	f003 0302 	and.w	r3, r3, #2
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d11a      	bne.n	8006426 <_vsnprintf+0x87e>
          while (l++ < width) {
 80063f0:	e007      	b.n	8006402 <_vsnprintf+0x85a>
            out(' ', buffer, idx++, maxlen);
 80063f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80063f4:	1c53      	adds	r3, r2, #1
 80063f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063f8:	697c      	ldr	r4, [r7, #20]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6939      	ldr	r1, [r7, #16]
 80063fe:	2020      	movs	r0, #32
 8006400:	47a0      	blx	r4
          while (l++ < width) {
 8006402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006404:	1c5a      	adds	r2, r3, #1
 8006406:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006408:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800640a:	429a      	cmp	r2, r3
 800640c:	d8f1      	bhi.n	80063f2 <_vsnprintf+0x84a>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800640e:	e00a      	b.n	8006426 <_vsnprintf+0x87e>
          out(*(p++), buffer, idx++, maxlen);
 8006410:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006412:	1c5a      	adds	r2, r3, #1
 8006414:	643a      	str	r2, [r7, #64]	; 0x40
 8006416:	7818      	ldrb	r0, [r3, #0]
 8006418:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800641a:	1c53      	adds	r3, r2, #1
 800641c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800641e:	697c      	ldr	r4, [r7, #20]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6939      	ldr	r1, [r7, #16]
 8006424:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8006426:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d009      	beq.n	8006442 <_vsnprintf+0x89a>
 800642e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006434:	2b00      	cmp	r3, #0
 8006436:	d0eb      	beq.n	8006410 <_vsnprintf+0x868>
 8006438:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800643a:	1e5a      	subs	r2, r3, #1
 800643c:	657a      	str	r2, [r7, #84]	; 0x54
 800643e:	2b00      	cmp	r3, #0
 8006440:	d1e6      	bne.n	8006410 <_vsnprintf+0x868>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8006442:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006444:	f003 0302 	and.w	r3, r3, #2
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00e      	beq.n	800646a <_vsnprintf+0x8c2>
          while (l++ < width) {
 800644c:	e007      	b.n	800645e <_vsnprintf+0x8b6>
            out(' ', buffer, idx++, maxlen);
 800644e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006450:	1c53      	adds	r3, r2, #1
 8006452:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006454:	697c      	ldr	r4, [r7, #20]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6939      	ldr	r1, [r7, #16]
 800645a:	2020      	movs	r0, #32
 800645c:	47a0      	blx	r4
          while (l++ < width) {
 800645e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006460:	1c5a      	adds	r2, r3, #1
 8006462:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006464:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006466:	429a      	cmp	r2, r3
 8006468:	d8f1      	bhi.n	800644e <_vsnprintf+0x8a6>
          }
        }
        format++;
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	3301      	adds	r3, #1
 800646e:	60bb      	str	r3, [r7, #8]
        break;
 8006470:	e066      	b.n	8006540 <_vsnprintf+0x998>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8006472:	2308      	movs	r3, #8
 8006474:	65bb      	str	r3, [r7, #88]	; 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8006476:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006478:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 800647c:	65fb      	str	r3, [r7, #92]	; 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 800647e:	2300      	movs	r3, #0
 8006480:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (is_ll) {
 8006484:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006488:	2b00      	cmp	r3, #0
 800648a:	d023      	beq.n	80064d4 <_vsnprintf+0x92c>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 800648c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006490:	1d1a      	adds	r2, r3, #4
 8006492:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	461a      	mov	r2, r3
 800649a:	2300      	movs	r3, #0
 800649c:	603a      	str	r2, [r7, #0]
 800649e:	607b      	str	r3, [r7, #4]
 80064a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064a2:	9308      	str	r3, [sp, #32]
 80064a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80064a6:	9307      	str	r3, [sp, #28]
 80064a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064aa:	9306      	str	r3, [sp, #24]
 80064ac:	f04f 0210 	mov.w	r2, #16
 80064b0:	f04f 0300 	mov.w	r3, #0
 80064b4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80064b8:	2300      	movs	r3, #0
 80064ba:	9302      	str	r3, [sp, #8]
 80064bc:	e9d7 3400 	ldrd	r3, r4, [r7]
 80064c0:	e9cd 3400 	strd	r3, r4, [sp]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80064c8:	6939      	ldr	r1, [r7, #16]
 80064ca:	6978      	ldr	r0, [r7, #20]
 80064cc:	f7fe fe1e 	bl	800510c <_ntoa_long_long>
 80064d0:	64f8      	str	r0, [r7, #76]	; 0x4c
 80064d2:	e018      	b.n	8006506 <_vsnprintf+0x95e>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 80064d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80064d8:	1d1a      	adds	r2, r3, #4
 80064da:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	461a      	mov	r2, r3
 80064e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064e4:	9305      	str	r3, [sp, #20]
 80064e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80064e8:	9304      	str	r3, [sp, #16]
 80064ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064ec:	9303      	str	r3, [sp, #12]
 80064ee:	2310      	movs	r3, #16
 80064f0:	9302      	str	r3, [sp, #8]
 80064f2:	2300      	movs	r3, #0
 80064f4:	9301      	str	r3, [sp, #4]
 80064f6:	9200      	str	r2, [sp, #0]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80064fc:	6939      	ldr	r1, [r7, #16]
 80064fe:	6978      	ldr	r0, [r7, #20]
 8006500:	f7fe fd9e 	bl	8005040 <_ntoa_long>
 8006504:	64f8      	str	r0, [r7, #76]	; 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	3301      	adds	r3, #1
 800650a:	60bb      	str	r3, [r7, #8]
        break;
 800650c:	e018      	b.n	8006540 <_vsnprintf+0x998>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 800650e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006510:	1c53      	adds	r3, r2, #1
 8006512:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006514:	697c      	ldr	r4, [r7, #20]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6939      	ldr	r1, [r7, #16]
 800651a:	2025      	movs	r0, #37	; 0x25
 800651c:	47a0      	blx	r4
        format++;
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	3301      	adds	r3, #1
 8006522:	60bb      	str	r3, [r7, #8]
        break;
 8006524:	e00c      	b.n	8006540 <_vsnprintf+0x998>

      default :
        out(*format, buffer, idx++, maxlen);
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	7818      	ldrb	r0, [r3, #0]
 800652a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800652c:	1c53      	adds	r3, r2, #1
 800652e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006530:	697c      	ldr	r4, [r7, #20]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	6939      	ldr	r1, [r7, #16]
 8006536:	47a0      	blx	r4
        format++;
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	3301      	adds	r3, #1
 800653c:	60bb      	str	r3, [r7, #8]
        break;
 800653e:	bf00      	nop
  while (*format)
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	f47f ab41 	bne.w	8005bcc <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 800654a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	429a      	cmp	r2, r3
 8006550:	d302      	bcc.n	8006558 <_vsnprintf+0x9b0>
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	1e5a      	subs	r2, r3, #1
 8006556:	e000      	b.n	800655a <_vsnprintf+0x9b2>
 8006558:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800655a:	697c      	ldr	r4, [r7, #20]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6939      	ldr	r1, [r7, #16]
 8006560:	2000      	movs	r0, #0
 8006562:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8006564:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8006566:	4618      	mov	r0, r3
 8006568:	3764      	adds	r7, #100	; 0x64
 800656a:	46bd      	mov	sp, r7
 800656c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006570 <sprintf_>:
  return ret;
}


int sprintf_(char* buffer, const char* format, ...)
{
 8006570:	b40e      	push	{r1, r2, r3}
 8006572:	b580      	push	{r7, lr}
 8006574:	b087      	sub	sp, #28
 8006576:	af02      	add	r7, sp, #8
 8006578:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, format);
 800657a:	f107 0320 	add.w	r3, r7, #32
 800657e:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	9300      	str	r3, [sp, #0]
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	f04f 32ff 	mov.w	r2, #4294967295
 800658a:	6879      	ldr	r1, [r7, #4]
 800658c:	4805      	ldr	r0, [pc, #20]	; (80065a4 <sprintf_+0x34>)
 800658e:	f7ff fb0b 	bl	8005ba8 <_vsnprintf>
 8006592:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8006594:	68fb      	ldr	r3, [r7, #12]
}
 8006596:	4618      	mov	r0, r3
 8006598:	3714      	adds	r7, #20
 800659a:	46bd      	mov	sp, r7
 800659c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80065a0:	b003      	add	sp, #12
 80065a2:	4770      	bx	lr
 80065a4:	08004cef 	.word	0x08004cef

080065a8 <RFP_Handle>:
        { RFP_WaitForResponseFunction }, { RFP_ParseResponseFunction } };
RFPCommandFunctions_TypeDef RfpCommandFunction[RFP_COMMAND_CNT];
RFPDataFunctions_TypeDef RfpDataFunctions;
RFPMessageFunctions_TypeDef RfpMessageFunction[RFP_MESSAGE_CNT];
void RFP_Handle(void)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	af00      	add	r7, sp, #0
   RFP_ChangeState();
 80065ac:	f000 f856 	bl	800665c <RFP_ChangeState>
   if(RfpFunction[Rfp->State].RfpFunction != NULL)
 80065b0:	4b09      	ldr	r3, [pc, #36]	; (80065d8 <RFP_Handle+0x30>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	781b      	ldrb	r3, [r3, #0]
 80065b6:	461a      	mov	r2, r3
 80065b8:	4b08      	ldr	r3, [pc, #32]	; (80065dc <RFP_Handle+0x34>)
 80065ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d007      	beq.n	80065d2 <RFP_Handle+0x2a>
   {
      RfpFunction[Rfp->State].RfpFunction();
 80065c2:	4b05      	ldr	r3, [pc, #20]	; (80065d8 <RFP_Handle+0x30>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	461a      	mov	r2, r3
 80065ca:	4b04      	ldr	r3, [pc, #16]	; (80065dc <RFP_Handle+0x34>)
 80065cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065d0:	4798      	blx	r3
   }
}
 80065d2:	bf00      	nop
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	20003ebc 	.word	0x20003ebc
 80065dc:	20000078 	.word	0x20000078

080065e0 <RFP_Init>:
void RFP_Init(RFP_TypeDef *RadioProtocol, RFPDeviceID_TypeDef Device)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b085      	sub	sp, #20
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	460b      	mov	r3, r1
 80065ea:	70fb      	strb	r3, [r7, #3]
   Rfp             = RadioProtocol;
 80065ec:	4a17      	ldr	r2, [pc, #92]	; (800664c <RFP_Init+0x6c>)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6013      	str	r3, [r2, #0]
   Rfp->Initialize = RFP_INITIALIZE;
 80065f2:	4b16      	ldr	r3, [pc, #88]	; (800664c <RFP_Init+0x6c>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2201      	movs	r2, #1
 80065f8:	70da      	strb	r2, [r3, #3]
   Rfp->DeviceType = Device;
 80065fa:	4b14      	ldr	r3, [pc, #80]	; (800664c <RFP_Init+0x6c>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	78fa      	ldrb	r2, [r7, #3]
 8006600:	715a      	strb	r2, [r3, #5]
   for(int i = 0; i < RFP_COMMAND_CNT; i++)
 8006602:	2300      	movs	r3, #0
 8006604:	60fb      	str	r3, [r7, #12]
 8006606:	e007      	b.n	8006618 <RFP_Init+0x38>
   {
      RfpCommandFunction[i].RfpCommandFunction = NULL;
 8006608:	4a11      	ldr	r2, [pc, #68]	; (8006650 <RFP_Init+0x70>)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2100      	movs	r1, #0
 800660e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   for(int i = 0; i < RFP_COMMAND_CNT; i++)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	3301      	adds	r3, #1
 8006616:	60fb      	str	r3, [r7, #12]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2b05      	cmp	r3, #5
 800661c:	ddf4      	ble.n	8006608 <RFP_Init+0x28>
   }
   for(int i = 0; i < RFP_MESSAGE_CNT; i++)
 800661e:	2300      	movs	r3, #0
 8006620:	60bb      	str	r3, [r7, #8]
 8006622:	e007      	b.n	8006634 <RFP_Init+0x54>
   {
      RfpMessageFunction[i].RfpMessageFunction = NULL;
 8006624:	4a0b      	ldr	r2, [pc, #44]	; (8006654 <RFP_Init+0x74>)
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	2100      	movs	r1, #0
 800662a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   for(int i = 0; i < RFP_MESSAGE_CNT; i++)
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	3301      	adds	r3, #1
 8006632:	60bb      	str	r3, [r7, #8]
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	2b04      	cmp	r3, #4
 8006638:	ddf4      	ble.n	8006624 <RFP_Init+0x44>
   }
   RfpDataFunctions.RfpDataFunction = NULL;
 800663a:	4b07      	ldr	r3, [pc, #28]	; (8006658 <RFP_Init+0x78>)
 800663c:	2200      	movs	r2, #0
 800663e:	601a      	str	r2, [r3, #0]
}
 8006640:	bf00      	nop
 8006642:	3714      	adds	r7, #20
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr
 800664c:	20003ebc 	.word	0x20003ebc
 8006650:	20003ec0 	.word	0x20003ec0
 8006654:	20003edc 	.word	0x20003edc
 8006658:	20003ed8 	.word	0x20003ed8

0800665c <RFP_ChangeState>:
static void RFP_ChangeState(void)
{
 800665c:	b480      	push	{r7}
 800665e:	b083      	sub	sp, #12
 8006660:	af00      	add	r7, sp, #0
   for(int i = 0; i < RFP_TRANSITION_TABLE_SIZE; i++)
 8006662:	2300      	movs	r3, #0
 8006664:	607b      	str	r3, [r7, #4]
 8006666:	e02b      	b.n	80066c0 <RFP_ChangeState+0x64>
   {
      if(Rfp->State == RfpTransitionTable[i].Source && Rfp->NewEvent == RfpTransitionTable[i].Event)
 8006668:	4b1b      	ldr	r3, [pc, #108]	; (80066d8 <RFP_ChangeState+0x7c>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	7819      	ldrb	r1, [r3, #0]
 800666e:	481b      	ldr	r0, [pc, #108]	; (80066dc <RFP_ChangeState+0x80>)
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	4613      	mov	r3, r2
 8006674:	005b      	lsls	r3, r3, #1
 8006676:	4413      	add	r3, r2
 8006678:	4403      	add	r3, r0
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	4299      	cmp	r1, r3
 800667e:	d11c      	bne.n	80066ba <RFP_ChangeState+0x5e>
 8006680:	4b15      	ldr	r3, [pc, #84]	; (80066d8 <RFP_ChangeState+0x7c>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	7859      	ldrb	r1, [r3, #1]
 8006686:	4815      	ldr	r0, [pc, #84]	; (80066dc <RFP_ChangeState+0x80>)
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	4613      	mov	r3, r2
 800668c:	005b      	lsls	r3, r3, #1
 800668e:	4413      	add	r3, r2
 8006690:	4403      	add	r3, r0
 8006692:	3302      	adds	r3, #2
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	4299      	cmp	r1, r3
 8006698:	d10f      	bne.n	80066ba <RFP_ChangeState+0x5e>
      {
         Rfp->State    = RfpTransitionTable[i].Destination;
 800669a:	4b0f      	ldr	r3, [pc, #60]	; (80066d8 <RFP_ChangeState+0x7c>)
 800669c:	6819      	ldr	r1, [r3, #0]
 800669e:	480f      	ldr	r0, [pc, #60]	; (80066dc <RFP_ChangeState+0x80>)
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	4613      	mov	r3, r2
 80066a4:	005b      	lsls	r3, r3, #1
 80066a6:	4413      	add	r3, r2
 80066a8:	4403      	add	r3, r0
 80066aa:	3301      	adds	r3, #1
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	700b      	strb	r3, [r1, #0]
         Rfp->NewEvent = RFP_EVENT_NOTHING;
 80066b0:	4b09      	ldr	r3, [pc, #36]	; (80066d8 <RFP_ChangeState+0x7c>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	2200      	movs	r2, #0
 80066b6:	705a      	strb	r2, [r3, #1]
         return;
 80066b8:	e009      	b.n	80066ce <RFP_ChangeState+0x72>
   for(int i = 0; i < RFP_TRANSITION_TABLE_SIZE; i++)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	3301      	adds	r3, #1
 80066be:	607b      	str	r3, [r7, #4]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2b0b      	cmp	r3, #11
 80066c4:	d9d0      	bls.n	8006668 <RFP_ChangeState+0xc>
      }
   }
   Rfp->NewEvent = RFP_EVENT_NOTHING;
 80066c6:	4b04      	ldr	r3, [pc, #16]	; (80066d8 <RFP_ChangeState+0x7c>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	2200      	movs	r2, #0
 80066cc:	705a      	strb	r2, [r3, #1]
}
 80066ce:	370c      	adds	r7, #12
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr
 80066d8:	20003ebc 	.word	0x20003ebc
 80066dc:	20000054 	.word	0x20000054

080066e0 <RFP_RegisterDataFunction>:
void RFP_RegisterCommandFunction(RFPCommands_TypeDef Command, void (*Callback)(uint8_t *, uint32_t, uint32_t))
{
   RfpCommandFunction[Command - 1].RfpCommandFunction = Callback;
}
void RFP_RegisterDataFunction(void (*Callback)(uint8_t *, uint32_t, uint32_t))
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
   RfpDataFunctions.RfpDataFunction = Callback;
 80066e8:	4a04      	ldr	r2, [pc, #16]	; (80066fc <RFP_RegisterDataFunction+0x1c>)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6013      	str	r3, [r2, #0]
}
 80066ee:	bf00      	nop
 80066f0:	370c      	adds	r7, #12
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	20003ed8 	.word	0x20003ed8

08006700 <RFP_InterruptTask>:
void RFP_RegisterMessageFunction(RFPMessage_TypeDef Message, void (*Callback)(uint8_t *, uint32_t, uint32_t))
{
   RfpMessageFunction[Message - 1].RfpMessageFunction = Callback;
}
void RFP_InterruptTask(void)
{
 8006700:	b480      	push	{r7}
 8006702:	af00      	add	r7, sp, #0
   Rfp->NewDataFlag = RFP_NEW_DATA_FLAG_SET;
 8006704:	4b04      	ldr	r3, [pc, #16]	; (8006718 <RFP_InterruptTask+0x18>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	2201      	movs	r2, #1
 800670a:	711a      	strb	r2, [r3, #4]
}
 800670c:	bf00      	nop
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr
 8006716:	bf00      	nop
 8006718:	20003ebc 	.word	0x20003ebc

0800671c <RFP_SendData>:
void RFP_SendData(RFPDeviceID_TypeDef Destination, RFPMessageType_TypeDef Type, uint8_t *Data, uint32_t Length)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b086      	sub	sp, #24
 8006720:	af00      	add	r7, sp, #0
 8006722:	60ba      	str	r2, [r7, #8]
 8006724:	607b      	str	r3, [r7, #4]
 8006726:	4603      	mov	r3, r0
 8006728:	73fb      	strb	r3, [r7, #15]
 800672a:	460b      	mov	r3, r1
 800672c:	73bb      	strb	r3, [r7, #14]
   RfpDataTransmit[0] = Destination;
 800672e:	4a27      	ldr	r2, [pc, #156]	; (80067cc <RFP_SendData+0xb0>)
 8006730:	7bfb      	ldrb	r3, [r7, #15]
 8006732:	7013      	strb	r3, [r2, #0]
   RfpDataTransmit[1] = Rfp->DeviceType;
 8006734:	4b26      	ldr	r3, [pc, #152]	; (80067d0 <RFP_SendData+0xb4>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	795a      	ldrb	r2, [r3, #5]
 800673a:	4b24      	ldr	r3, [pc, #144]	; (80067cc <RFP_SendData+0xb0>)
 800673c:	705a      	strb	r2, [r3, #1]
   RfpDataTransmit[2] = Type;
 800673e:	4a23      	ldr	r2, [pc, #140]	; (80067cc <RFP_SendData+0xb0>)
 8006740:	7bbb      	ldrb	r3, [r7, #14]
 8006742:	7093      	strb	r3, [r2, #2]
   for(int i = 0; i < Length; i++)
 8006744:	2300      	movs	r3, #0
 8006746:	617b      	str	r3, [r7, #20]
 8006748:	e00a      	b.n	8006760 <RFP_SendData+0x44>
   {
      RfpDataTransmit[i + 3] = Data[i];
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	68ba      	ldr	r2, [r7, #8]
 800674e:	441a      	add	r2, r3
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	3303      	adds	r3, #3
 8006754:	7811      	ldrb	r1, [r2, #0]
 8006756:	4a1d      	ldr	r2, [pc, #116]	; (80067cc <RFP_SendData+0xb0>)
 8006758:	54d1      	strb	r1, [r2, r3]
   for(int i = 0; i < Length; i++)
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	3301      	adds	r3, #1
 800675e:	617b      	str	r3, [r7, #20]
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	429a      	cmp	r2, r3
 8006766:	d8f0      	bhi.n	800674a <RFP_SendData+0x2e>
   }
   uint32_t crc                    = Crc(CRC_INITIAL_VALUE, 3 + Length, RfpDataTransmit);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	3303      	adds	r3, #3
 800676c:	4a17      	ldr	r2, [pc, #92]	; (80067cc <RFP_SendData+0xb0>)
 800676e:	4619      	mov	r1, r3
 8006770:	f04f 30ff 	mov.w	r0, #4294967295
 8006774:	f7fc f8a0 	bl	80028b8 <Crc>
 8006778:	6138      	str	r0, [r7, #16]
   RfpDataTransmit[3 + Length]     = ((crc >> 24) & 0xff);
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	0e1a      	lsrs	r2, r3, #24
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	3303      	adds	r3, #3
 8006782:	b2d1      	uxtb	r1, r2
 8006784:	4a11      	ldr	r2, [pc, #68]	; (80067cc <RFP_SendData+0xb0>)
 8006786:	54d1      	strb	r1, [r2, r3]
   RfpDataTransmit[3 + Length + 1] = ((crc >> 16) & 0xff);
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	0c1a      	lsrs	r2, r3, #16
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	3304      	adds	r3, #4
 8006790:	b2d1      	uxtb	r1, r2
 8006792:	4a0e      	ldr	r2, [pc, #56]	; (80067cc <RFP_SendData+0xb0>)
 8006794:	54d1      	strb	r1, [r2, r3]
   RfpDataTransmit[3 + Length + 2] = ((crc >> 8) & 0xff);
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	0a1a      	lsrs	r2, r3, #8
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	3305      	adds	r3, #5
 800679e:	b2d1      	uxtb	r1, r2
 80067a0:	4a0a      	ldr	r2, [pc, #40]	; (80067cc <RFP_SendData+0xb0>)
 80067a2:	54d1      	strb	r1, [r2, r3]
   RfpDataTransmit[3 + Length + 3] = (crc & 0xff);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	3306      	adds	r3, #6
 80067a8:	693a      	ldr	r2, [r7, #16]
 80067aa:	b2d1      	uxtb	r1, r2
 80067ac:	4a07      	ldr	r2, [pc, #28]	; (80067cc <RFP_SendData+0xb0>)
 80067ae:	54d1      	strb	r1, [r2, r3]
   Rfp->SendFlag                   = RFP_SEND_FLAG_SET;
 80067b0:	4b07      	ldr	r3, [pc, #28]	; (80067d0 <RFP_SendData+0xb4>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2201      	movs	r2, #1
 80067b6:	745a      	strb	r2, [r3, #17]
   Rfp->DataSizeTransmit           = 3 + Length + 4;
 80067b8:	4b05      	ldr	r3, [pc, #20]	; (80067d0 <RFP_SendData+0xb4>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	3207      	adds	r2, #7
 80067c0:	60da      	str	r2, [r3, #12]
}
 80067c2:	bf00      	nop
 80067c4:	3718      	adds	r7, #24
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	20003e58 	.word	0x20003e58
 80067d0:	20003ebc 	.word	0x20003ebc

080067d4 <RFP_SendResponseFunction>:
static void RFP_SendResponseFunction(RFPMessageType_TypeDef Response)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
 80067da:	4603      	mov	r3, r0
 80067dc:	71fb      	strb	r3, [r7, #7]
   osDelay(200);
 80067de:	20c8      	movs	r0, #200	; 0xc8
 80067e0:	f008 f924 	bl	800ea2c <osDelay>
   RfpDataTransmit[0] = Rfp->SourceMessage;
 80067e4:	4b18      	ldr	r3, [pc, #96]	; (8006848 <RFP_SendResponseFunction+0x74>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	7c1a      	ldrb	r2, [r3, #16]
 80067ea:	4b18      	ldr	r3, [pc, #96]	; (800684c <RFP_SendResponseFunction+0x78>)
 80067ec:	701a      	strb	r2, [r3, #0]
   RfpDataTransmit[1] = Rfp->DeviceType;
 80067ee:	4b16      	ldr	r3, [pc, #88]	; (8006848 <RFP_SendResponseFunction+0x74>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	795a      	ldrb	r2, [r3, #5]
 80067f4:	4b15      	ldr	r3, [pc, #84]	; (800684c <RFP_SendResponseFunction+0x78>)
 80067f6:	705a      	strb	r2, [r3, #1]
   RfpDataTransmit[2] = RFP_MESSAGE;
 80067f8:	4b14      	ldr	r3, [pc, #80]	; (800684c <RFP_SendResponseFunction+0x78>)
 80067fa:	2203      	movs	r2, #3
 80067fc:	709a      	strb	r2, [r3, #2]
   RfpDataTransmit[3] = Response;
 80067fe:	4a13      	ldr	r2, [pc, #76]	; (800684c <RFP_SendResponseFunction+0x78>)
 8006800:	79fb      	ldrb	r3, [r7, #7]
 8006802:	70d3      	strb	r3, [r2, #3]
   uint32_t crc       = Crc(CRC_INITIAL_VALUE, 4, RfpDataTransmit);
 8006804:	4a11      	ldr	r2, [pc, #68]	; (800684c <RFP_SendResponseFunction+0x78>)
 8006806:	2104      	movs	r1, #4
 8006808:	f04f 30ff 	mov.w	r0, #4294967295
 800680c:	f7fc f854 	bl	80028b8 <Crc>
 8006810:	60f8      	str	r0, [r7, #12]
   RfpDataTransmit[4] = ((crc >> 24) & 0xff);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	0e1b      	lsrs	r3, r3, #24
 8006816:	b2da      	uxtb	r2, r3
 8006818:	4b0c      	ldr	r3, [pc, #48]	; (800684c <RFP_SendResponseFunction+0x78>)
 800681a:	711a      	strb	r2, [r3, #4]
   RfpDataTransmit[5] = ((crc >> 16) & 0xff);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	0c1b      	lsrs	r3, r3, #16
 8006820:	b2da      	uxtb	r2, r3
 8006822:	4b0a      	ldr	r3, [pc, #40]	; (800684c <RFP_SendResponseFunction+0x78>)
 8006824:	715a      	strb	r2, [r3, #5]
   RfpDataTransmit[6] = ((crc >> 8) & 0xff);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	0a1b      	lsrs	r3, r3, #8
 800682a:	b2da      	uxtb	r2, r3
 800682c:	4b07      	ldr	r3, [pc, #28]	; (800684c <RFP_SendResponseFunction+0x78>)
 800682e:	719a      	strb	r2, [r3, #6]
   RfpDataTransmit[7] = (crc & 0xff);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	b2da      	uxtb	r2, r3
 8006834:	4b05      	ldr	r3, [pc, #20]	; (800684c <RFP_SendResponseFunction+0x78>)
 8006836:	71da      	strb	r2, [r3, #7]
   HC12_TransmitData(RfpDataTransmit, 8);
 8006838:	2108      	movs	r1, #8
 800683a:	4804      	ldr	r0, [pc, #16]	; (800684c <RFP_SendResponseFunction+0x78>)
 800683c:	f7fa fe74 	bl	8001528 <HC12_TransmitData>
}
 8006840:	bf00      	nop
 8006842:	3710      	adds	r7, #16
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}
 8006848:	20003ebc 	.word	0x20003ebc
 800684c:	20003e58 	.word	0x20003e58

08006850 <RFP_InitializeFunction>:
static void RFP_InitializeFunction(void)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	af00      	add	r7, sp, #0
   Rfp->NewEvent = RFP_EVENT_END_INITIALIZE;
 8006854:	4b08      	ldr	r3, [pc, #32]	; (8006878 <RFP_InitializeFunction+0x28>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2202      	movs	r2, #2
 800685a:	705a      	strb	r2, [r3, #1]
   HC12_ExitCommandMode();
 800685c:	f7fa fe59 	bl	8001512 <HC12_ExitCommandMode>
   HC12_Init(Rfp, RfpDataRecive);
 8006860:	4b05      	ldr	r3, [pc, #20]	; (8006878 <RFP_InitializeFunction+0x28>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4905      	ldr	r1, [pc, #20]	; (800687c <RFP_InitializeFunction+0x2c>)
 8006866:	4618      	mov	r0, r3
 8006868:	f7fa fe88 	bl	800157c <HC12_Init>
   HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800686c:	2164      	movs	r1, #100	; 0x64
 800686e:	4803      	ldr	r0, [pc, #12]	; (800687c <RFP_InitializeFunction+0x2c>)
 8006870:	f7fa fe72 	bl	8001558 <HC12_ReciveToIdleDMA>
}
 8006874:	bf00      	nop
 8006876:	bd80      	pop	{r7, pc}
 8006878:	20003ebc 	.word	0x20003ebc
 800687c:	20003df4 	.word	0x20003df4

08006880 <RFP_IdleFunction>:
static void RFP_IdleFunction(void)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	af00      	add	r7, sp, #0
   if(Rfp->NewDataFlag == RFP_NEW_DATA_FLAG_SET)
 8006884:	4b10      	ldr	r3, [pc, #64]	; (80068c8 <RFP_IdleFunction+0x48>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	791b      	ldrb	r3, [r3, #4]
 800688a:	b2db      	uxtb	r3, r3
 800688c:	2b01      	cmp	r3, #1
 800688e:	d108      	bne.n	80068a2 <RFP_IdleFunction+0x22>
   {
      Rfp->NewDataFlag = RFP_NEW_DATA_FLAG_RESET;
 8006890:	4b0d      	ldr	r3, [pc, #52]	; (80068c8 <RFP_IdleFunction+0x48>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	2200      	movs	r2, #0
 8006896:	711a      	strb	r2, [r3, #4]
      Rfp->NewEvent    = RFP_EVENT_NEW_DATA;
 8006898:	4b0b      	ldr	r3, [pc, #44]	; (80068c8 <RFP_IdleFunction+0x48>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2201      	movs	r2, #1
 800689e:	705a      	strb	r2, [r3, #1]
   {
      Rfp->SendFlag = RFP_SEND_FLAG_RESET;
      Rfp->NewEvent = RFP_EVENT_SEND;
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
   }
}
 80068a0:	e010      	b.n	80068c4 <RFP_IdleFunction+0x44>
   else if(Rfp->SendFlag == RFP_SEND_FLAG_SET)
 80068a2:	4b09      	ldr	r3, [pc, #36]	; (80068c8 <RFP_IdleFunction+0x48>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	7c5b      	ldrb	r3, [r3, #17]
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d10b      	bne.n	80068c4 <RFP_IdleFunction+0x44>
      Rfp->SendFlag = RFP_SEND_FLAG_RESET;
 80068ac:	4b06      	ldr	r3, [pc, #24]	; (80068c8 <RFP_IdleFunction+0x48>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2200      	movs	r2, #0
 80068b2:	745a      	strb	r2, [r3, #17]
      Rfp->NewEvent = RFP_EVENT_SEND;
 80068b4:	4b04      	ldr	r3, [pc, #16]	; (80068c8 <RFP_IdleFunction+0x48>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2206      	movs	r2, #6
 80068ba:	705a      	strb	r2, [r3, #1]
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 80068bc:	2164      	movs	r1, #100	; 0x64
 80068be:	4803      	ldr	r0, [pc, #12]	; (80068cc <RFP_IdleFunction+0x4c>)
 80068c0:	f7fa fe4a 	bl	8001558 <HC12_ReciveToIdleDMA>
}
 80068c4:	bf00      	nop
 80068c6:	bd80      	pop	{r7, pc}
 80068c8:	20003ebc 	.word	0x20003ebc
 80068cc:	20003df4 	.word	0x20003df4

080068d0 <RFP_ParseFunction>:
static void RFP_ParseFunction(void)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
   uint32_t MessageCRC = 0;
 80068d6:	2300      	movs	r3, #0
 80068d8:	607b      	str	r3, [r7, #4]
   Rfp->SourceMessage  = RfpDataRecive[1];
 80068da:	4b3a      	ldr	r3, [pc, #232]	; (80069c4 <RFP_ParseFunction+0xf4>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a3a      	ldr	r2, [pc, #232]	; (80069c8 <RFP_ParseFunction+0xf8>)
 80068e0:	7852      	ldrb	r2, [r2, #1]
 80068e2:	741a      	strb	r2, [r3, #16]
   if(RfpDataRecive[0] != Rfp->DeviceType)
 80068e4:	4b38      	ldr	r3, [pc, #224]	; (80069c8 <RFP_ParseFunction+0xf8>)
 80068e6:	781a      	ldrb	r2, [r3, #0]
 80068e8:	4b36      	ldr	r3, [pc, #216]	; (80069c4 <RFP_ParseFunction+0xf4>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	795b      	ldrb	r3, [r3, #5]
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d00b      	beq.n	800690a <RFP_ParseFunction+0x3a>
   {
      Rfp->NewEvent = RFP_EVENT_ERROR;
 80068f2:	4b34      	ldr	r3, [pc, #208]	; (80069c4 <RFP_ParseFunction+0xf4>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	2203      	movs	r2, #3
 80068f8:	705a      	strb	r2, [r3, #1]
      RFP_SendResponseFunction(RFP_ERROR);
 80068fa:	2001      	movs	r0, #1
 80068fc:	f7ff ff6a 	bl	80067d4 <RFP_SendResponseFunction>
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 8006900:	2164      	movs	r1, #100	; 0x64
 8006902:	4831      	ldr	r0, [pc, #196]	; (80069c8 <RFP_ParseFunction+0xf8>)
 8006904:	f7fa fe28 	bl	8001558 <HC12_ReciveToIdleDMA>
               HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
            }
         }
      }
   }
}
 8006908:	e057      	b.n	80069ba <RFP_ParseFunction+0xea>
      if(Rfp->DataSize != 0)
 800690a:	4b2e      	ldr	r3, [pc, #184]	; (80069c4 <RFP_ParseFunction+0xf4>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d052      	beq.n	80069ba <RFP_ParseFunction+0xea>
         MessageCRC = (((uint32_t)RfpDataRecive[Rfp->DataSize - 4] << 24) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 3] << 16)
 8006914:	4b2b      	ldr	r3, [pc, #172]	; (80069c4 <RFP_ParseFunction+0xf4>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	3b04      	subs	r3, #4
 800691c:	4a2a      	ldr	r2, [pc, #168]	; (80069c8 <RFP_ParseFunction+0xf8>)
 800691e:	5cd3      	ldrb	r3, [r2, r3]
 8006920:	061a      	lsls	r2, r3, #24
 8006922:	4b28      	ldr	r3, [pc, #160]	; (80069c4 <RFP_ParseFunction+0xf4>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	3b03      	subs	r3, #3
 800692a:	4927      	ldr	r1, [pc, #156]	; (80069c8 <RFP_ParseFunction+0xf8>)
 800692c:	5ccb      	ldrb	r3, [r1, r3]
 800692e:	041b      	lsls	r3, r3, #16
 8006930:	431a      	orrs	r2, r3
                       | ((uint32_t)RfpDataRecive[Rfp->DataSize - 2] << 8) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 1]));
 8006932:	4b24      	ldr	r3, [pc, #144]	; (80069c4 <RFP_ParseFunction+0xf4>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	3b02      	subs	r3, #2
 800693a:	4923      	ldr	r1, [pc, #140]	; (80069c8 <RFP_ParseFunction+0xf8>)
 800693c:	5ccb      	ldrb	r3, [r1, r3]
 800693e:	021b      	lsls	r3, r3, #8
 8006940:	4313      	orrs	r3, r2
 8006942:	4a20      	ldr	r2, [pc, #128]	; (80069c4 <RFP_ParseFunction+0xf4>)
 8006944:	6812      	ldr	r2, [r2, #0]
 8006946:	6892      	ldr	r2, [r2, #8]
 8006948:	3a01      	subs	r2, #1
 800694a:	491f      	ldr	r1, [pc, #124]	; (80069c8 <RFP_ParseFunction+0xf8>)
 800694c:	5c8a      	ldrb	r2, [r1, r2]
         MessageCRC = (((uint32_t)RfpDataRecive[Rfp->DataSize - 4] << 24) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 3] << 16)
 800694e:	4313      	orrs	r3, r2
 8006950:	607b      	str	r3, [r7, #4]
         if(MessageCRC == Crc(CRC_INITIAL_VALUE, Rfp->DataSize - 4, RfpDataRecive))
 8006952:	4b1c      	ldr	r3, [pc, #112]	; (80069c4 <RFP_ParseFunction+0xf4>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	3b04      	subs	r3, #4
 800695a:	4a1b      	ldr	r2, [pc, #108]	; (80069c8 <RFP_ParseFunction+0xf8>)
 800695c:	4619      	mov	r1, r3
 800695e:	f04f 30ff 	mov.w	r0, #4294967295
 8006962:	f7fb ffa9 	bl	80028b8 <Crc>
 8006966:	4602      	mov	r2, r0
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	4293      	cmp	r3, r2
 800696c:	d107      	bne.n	800697e <RFP_ParseFunction+0xae>
            Rfp->NewEvent = RFP_EVENT_DATA_OK;
 800696e:	4b15      	ldr	r3, [pc, #84]	; (80069c4 <RFP_ParseFunction+0xf4>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2204      	movs	r2, #4
 8006974:	705a      	strb	r2, [r3, #1]
            RFP_SendResponseFunction(RFP_OK);
 8006976:	2004      	movs	r0, #4
 8006978:	f7ff ff2c 	bl	80067d4 <RFP_SendResponseFunction>
}
 800697c:	e01d      	b.n	80069ba <RFP_ParseFunction+0xea>
            if(RepareMessage(MessageCRC, RfpDataRecive, Rfp->DataSize) == CRC_OK)
 800697e:	4b11      	ldr	r3, [pc, #68]	; (80069c4 <RFP_ParseFunction+0xf4>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	461a      	mov	r2, r3
 8006986:	4910      	ldr	r1, [pc, #64]	; (80069c8 <RFP_ParseFunction+0xf8>)
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f7fb ffed 	bl	8002968 <RepareMessage>
 800698e:	4603      	mov	r3, r0
 8006990:	2b01      	cmp	r3, #1
 8006992:	d107      	bne.n	80069a4 <RFP_ParseFunction+0xd4>
               Rfp->NewEvent = RFP_EVENT_DATA_OK;
 8006994:	4b0b      	ldr	r3, [pc, #44]	; (80069c4 <RFP_ParseFunction+0xf4>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	2204      	movs	r2, #4
 800699a:	705a      	strb	r2, [r3, #1]
               RFP_SendResponseFunction(RFP_OK);
 800699c:	2004      	movs	r0, #4
 800699e:	f7ff ff19 	bl	80067d4 <RFP_SendResponseFunction>
}
 80069a2:	e00a      	b.n	80069ba <RFP_ParseFunction+0xea>
               Rfp->NewEvent = RFP_EVENT_ERROR;
 80069a4:	4b07      	ldr	r3, [pc, #28]	; (80069c4 <RFP_ParseFunction+0xf4>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2203      	movs	r2, #3
 80069aa:	705a      	strb	r2, [r3, #1]
               RFP_SendResponseFunction(RFP_CRC_ERROR);
 80069ac:	2002      	movs	r0, #2
 80069ae:	f7ff ff11 	bl	80067d4 <RFP_SendResponseFunction>
               HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 80069b2:	2164      	movs	r1, #100	; 0x64
 80069b4:	4804      	ldr	r0, [pc, #16]	; (80069c8 <RFP_ParseFunction+0xf8>)
 80069b6:	f7fa fdcf 	bl	8001558 <HC12_ReciveToIdleDMA>
}
 80069ba:	bf00      	nop
 80069bc:	3708      	adds	r7, #8
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop
 80069c4:	20003ebc 	.word	0x20003ebc
 80069c8:	20003df4 	.word	0x20003df4

080069cc <RFP_RunningFunction>:
static void RFP_RunningFunction(void)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	af00      	add	r7, sp, #0
   switch(RfpDataRecive[2])
 80069d0:	4b27      	ldr	r3, [pc, #156]	; (8006a70 <RFP_RunningFunction+0xa4>)
 80069d2:	789b      	ldrb	r3, [r3, #2]
 80069d4:	2b03      	cmp	r3, #3
 80069d6:	d028      	beq.n	8006a2a <RFP_RunningFunction+0x5e>
 80069d8:	2b03      	cmp	r3, #3
 80069da:	dc3b      	bgt.n	8006a54 <RFP_RunningFunction+0x88>
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d002      	beq.n	80069e6 <RFP_RunningFunction+0x1a>
 80069e0:	2b02      	cmp	r3, #2
 80069e2:	d015      	beq.n	8006a10 <RFP_RunningFunction+0x44>
         }
         break;
      }
      default:
      {
         break;
 80069e4:	e036      	b.n	8006a54 <RFP_RunningFunction+0x88>
         if(RfpCommandFunction[RfpDataRecive[3] - 1].RfpCommandFunction != NULL)
 80069e6:	4b22      	ldr	r3, [pc, #136]	; (8006a70 <RFP_RunningFunction+0xa4>)
 80069e8:	78db      	ldrb	r3, [r3, #3]
 80069ea:	3b01      	subs	r3, #1
 80069ec:	4a21      	ldr	r2, [pc, #132]	; (8006a74 <RFP_RunningFunction+0xa8>)
 80069ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d030      	beq.n	8006a58 <RFP_RunningFunction+0x8c>
            RfpCommandFunction[RfpDataRecive[3] - 1].RfpCommandFunction(RfpDataRecive, Rfp->DataSize, 4);
 80069f6:	4b1e      	ldr	r3, [pc, #120]	; (8006a70 <RFP_RunningFunction+0xa4>)
 80069f8:	78db      	ldrb	r3, [r3, #3]
 80069fa:	3b01      	subs	r3, #1
 80069fc:	4a1d      	ldr	r2, [pc, #116]	; (8006a74 <RFP_RunningFunction+0xa8>)
 80069fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a02:	4a1d      	ldr	r2, [pc, #116]	; (8006a78 <RFP_RunningFunction+0xac>)
 8006a04:	6812      	ldr	r2, [r2, #0]
 8006a06:	6891      	ldr	r1, [r2, #8]
 8006a08:	2204      	movs	r2, #4
 8006a0a:	4819      	ldr	r0, [pc, #100]	; (8006a70 <RFP_RunningFunction+0xa4>)
 8006a0c:	4798      	blx	r3
         break;
 8006a0e:	e023      	b.n	8006a58 <RFP_RunningFunction+0x8c>
         if(RfpDataFunctions.RfpDataFunction != NULL)
 8006a10:	4b1a      	ldr	r3, [pc, #104]	; (8006a7c <RFP_RunningFunction+0xb0>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d021      	beq.n	8006a5c <RFP_RunningFunction+0x90>
            RfpDataFunctions.RfpDataFunction(RfpDataRecive, Rfp->DataSize, 4);
 8006a18:	4b18      	ldr	r3, [pc, #96]	; (8006a7c <RFP_RunningFunction+0xb0>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a16      	ldr	r2, [pc, #88]	; (8006a78 <RFP_RunningFunction+0xac>)
 8006a1e:	6812      	ldr	r2, [r2, #0]
 8006a20:	6891      	ldr	r1, [r2, #8]
 8006a22:	2204      	movs	r2, #4
 8006a24:	4812      	ldr	r0, [pc, #72]	; (8006a70 <RFP_RunningFunction+0xa4>)
 8006a26:	4798      	blx	r3
         break;
 8006a28:	e018      	b.n	8006a5c <RFP_RunningFunction+0x90>
         if(RfpMessageFunction[RfpDataRecive[3] - 1].RfpMessageFunction != NULL)
 8006a2a:	4b11      	ldr	r3, [pc, #68]	; (8006a70 <RFP_RunningFunction+0xa4>)
 8006a2c:	78db      	ldrb	r3, [r3, #3]
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	4a13      	ldr	r2, [pc, #76]	; (8006a80 <RFP_RunningFunction+0xb4>)
 8006a32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d012      	beq.n	8006a60 <RFP_RunningFunction+0x94>
            RfpMessageFunction[RfpDataRecive[3] - 1].RfpMessageFunction(RfpDataRecive, Rfp->DataSize, 4);
 8006a3a:	4b0d      	ldr	r3, [pc, #52]	; (8006a70 <RFP_RunningFunction+0xa4>)
 8006a3c:	78db      	ldrb	r3, [r3, #3]
 8006a3e:	3b01      	subs	r3, #1
 8006a40:	4a0f      	ldr	r2, [pc, #60]	; (8006a80 <RFP_RunningFunction+0xb4>)
 8006a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a46:	4a0c      	ldr	r2, [pc, #48]	; (8006a78 <RFP_RunningFunction+0xac>)
 8006a48:	6812      	ldr	r2, [r2, #0]
 8006a4a:	6891      	ldr	r1, [r2, #8]
 8006a4c:	2204      	movs	r2, #4
 8006a4e:	4808      	ldr	r0, [pc, #32]	; (8006a70 <RFP_RunningFunction+0xa4>)
 8006a50:	4798      	blx	r3
         break;
 8006a52:	e005      	b.n	8006a60 <RFP_RunningFunction+0x94>
         break;
 8006a54:	bf00      	nop
 8006a56:	e004      	b.n	8006a62 <RFP_RunningFunction+0x96>
         break;
 8006a58:	bf00      	nop
 8006a5a:	e002      	b.n	8006a62 <RFP_RunningFunction+0x96>
         break;
 8006a5c:	bf00      	nop
 8006a5e:	e000      	b.n	8006a62 <RFP_RunningFunction+0x96>
         break;
 8006a60:	bf00      	nop
      }
   }
   HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 8006a62:	2164      	movs	r1, #100	; 0x64
 8006a64:	4802      	ldr	r0, [pc, #8]	; (8006a70 <RFP_RunningFunction+0xa4>)
 8006a66:	f7fa fd77 	bl	8001558 <HC12_ReciveToIdleDMA>
}
 8006a6a:	bf00      	nop
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	bf00      	nop
 8006a70:	20003df4 	.word	0x20003df4
 8006a74:	20003ec0 	.word	0x20003ec0
 8006a78:	20003ebc 	.word	0x20003ebc
 8006a7c:	20003ed8 	.word	0x20003ed8
 8006a80:	20003edc 	.word	0x20003edc

08006a84 <RFP_SendFunction>:
static void RFP_SendFunction(void)
{
 8006a84:	b598      	push	{r3, r4, r7, lr}
 8006a86:	af00      	add	r7, sp, #0
   if(Rfp->Cnt < 5)
 8006a88:	4b16      	ldr	r3, [pc, #88]	; (8006ae4 <RFP_SendFunction+0x60>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	695b      	ldr	r3, [r3, #20]
 8006a8e:	2b04      	cmp	r3, #4
 8006a90:	d819      	bhi.n	8006ac6 <RFP_SendFunction+0x42>
   {
      osDelay(200);
 8006a92:	20c8      	movs	r0, #200	; 0xc8
 8006a94:	f007 ffca 	bl	800ea2c <osDelay>
      HC12_TransmitData(RfpDataTransmit, Rfp->DataSizeTransmit);
 8006a98:	4b12      	ldr	r3, [pc, #72]	; (8006ae4 <RFP_SendFunction+0x60>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	4811      	ldr	r0, [pc, #68]	; (8006ae8 <RFP_SendFunction+0x64>)
 8006aa2:	f7fa fd41 	bl	8001528 <HC12_TransmitData>
      Rfp->Cnt++;
 8006aa6:	4b0f      	ldr	r3, [pc, #60]	; (8006ae4 <RFP_SendFunction+0x60>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	695a      	ldr	r2, [r3, #20]
 8006aac:	3201      	adds	r2, #1
 8006aae:	615a      	str	r2, [r3, #20]
      Rfp->NewEvent = RFP_EVENT_WAIT_FOR_RESPONSE;
 8006ab0:	4b0c      	ldr	r3, [pc, #48]	; (8006ae4 <RFP_SendFunction+0x60>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	2205      	movs	r2, #5
 8006ab6:	705a      	strb	r2, [r3, #1]
      Rfp->LastTick = HAL_GetTick();
 8006ab8:	4b0a      	ldr	r3, [pc, #40]	; (8006ae4 <RFP_SendFunction+0x60>)
 8006aba:	681c      	ldr	r4, [r3, #0]
 8006abc:	f000 fff8 	bl	8007ab0 <HAL_GetTick>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	61a3      	str	r3, [r4, #24]
   {
      Rfp->Cnt      = 0;
      Rfp->NewEvent = RFP_EVENT_ERROR;
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
   }
}
 8006ac4:	e00b      	b.n	8006ade <RFP_SendFunction+0x5a>
      Rfp->Cnt      = 0;
 8006ac6:	4b07      	ldr	r3, [pc, #28]	; (8006ae4 <RFP_SendFunction+0x60>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	2200      	movs	r2, #0
 8006acc:	615a      	str	r2, [r3, #20]
      Rfp->NewEvent = RFP_EVENT_ERROR;
 8006ace:	4b05      	ldr	r3, [pc, #20]	; (8006ae4 <RFP_SendFunction+0x60>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	2203      	movs	r2, #3
 8006ad4:	705a      	strb	r2, [r3, #1]
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 8006ad6:	2164      	movs	r1, #100	; 0x64
 8006ad8:	4804      	ldr	r0, [pc, #16]	; (8006aec <RFP_SendFunction+0x68>)
 8006ada:	f7fa fd3d 	bl	8001558 <HC12_ReciveToIdleDMA>
}
 8006ade:	bf00      	nop
 8006ae0:	bd98      	pop	{r3, r4, r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	20003ebc 	.word	0x20003ebc
 8006ae8:	20003e58 	.word	0x20003e58
 8006aec:	20003df4 	.word	0x20003df4

08006af0 <RFP_WaitForResponseFunction>:
static void RFP_WaitForResponseFunction(void)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	af00      	add	r7, sp, #0
   if(HAL_GetTick() - Rfp->LastTick > 2000)
 8006af4:	f000 ffdc 	bl	8007ab0 <HAL_GetTick>
 8006af8:	4602      	mov	r2, r0
 8006afa:	4b0e      	ldr	r3, [pc, #56]	; (8006b34 <RFP_WaitForResponseFunction+0x44>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	699b      	ldr	r3, [r3, #24]
 8006b00:	1ad3      	subs	r3, r2, r3
 8006b02:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006b06:	d904      	bls.n	8006b12 <RFP_WaitForResponseFunction+0x22>
   {
      Rfp->NewEvent = RFP_EVENT_ERROR;
 8006b08:	4b0a      	ldr	r3, [pc, #40]	; (8006b34 <RFP_WaitForResponseFunction+0x44>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	2203      	movs	r2, #3
 8006b0e:	705a      	strb	r2, [r3, #1]
   else if(Rfp->NewDataFlag == RFP_NEW_DATA_FLAG_SET)
   {
      Rfp->NewDataFlag = RFP_NEW_DATA_FLAG_RESET;
      Rfp->NewEvent    = RFP_EVENT_NEW_DATA;
   }
}
 8006b10:	e00d      	b.n	8006b2e <RFP_WaitForResponseFunction+0x3e>
   else if(Rfp->NewDataFlag == RFP_NEW_DATA_FLAG_SET)
 8006b12:	4b08      	ldr	r3, [pc, #32]	; (8006b34 <RFP_WaitForResponseFunction+0x44>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	791b      	ldrb	r3, [r3, #4]
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d107      	bne.n	8006b2e <RFP_WaitForResponseFunction+0x3e>
      Rfp->NewDataFlag = RFP_NEW_DATA_FLAG_RESET;
 8006b1e:	4b05      	ldr	r3, [pc, #20]	; (8006b34 <RFP_WaitForResponseFunction+0x44>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2200      	movs	r2, #0
 8006b24:	711a      	strb	r2, [r3, #4]
      Rfp->NewEvent    = RFP_EVENT_NEW_DATA;
 8006b26:	4b03      	ldr	r3, [pc, #12]	; (8006b34 <RFP_WaitForResponseFunction+0x44>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	705a      	strb	r2, [r3, #1]
}
 8006b2e:	bf00      	nop
 8006b30:	bd80      	pop	{r7, pc}
 8006b32:	bf00      	nop
 8006b34:	20003ebc 	.word	0x20003ebc

08006b38 <RFP_ParseResponseFunction>:
static void RFP_ParseResponseFunction(void)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
   uint32_t MessageCRC = (((uint32_t)RfpDataRecive[Rfp->DataSize - 4] << 24) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 3] << 16)
 8006b3e:	4b50      	ldr	r3, [pc, #320]	; (8006c80 <RFP_ParseResponseFunction+0x148>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	3b04      	subs	r3, #4
 8006b46:	4a4f      	ldr	r2, [pc, #316]	; (8006c84 <RFP_ParseResponseFunction+0x14c>)
 8006b48:	5cd3      	ldrb	r3, [r2, r3]
 8006b4a:	061a      	lsls	r2, r3, #24
 8006b4c:	4b4c      	ldr	r3, [pc, #304]	; (8006c80 <RFP_ParseResponseFunction+0x148>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	3b03      	subs	r3, #3
 8006b54:	494b      	ldr	r1, [pc, #300]	; (8006c84 <RFP_ParseResponseFunction+0x14c>)
 8006b56:	5ccb      	ldrb	r3, [r1, r3]
 8006b58:	041b      	lsls	r3, r3, #16
 8006b5a:	431a      	orrs	r2, r3
                          | ((uint32_t)RfpDataRecive[Rfp->DataSize - 2] << 8) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 1]));
 8006b5c:	4b48      	ldr	r3, [pc, #288]	; (8006c80 <RFP_ParseResponseFunction+0x148>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	3b02      	subs	r3, #2
 8006b64:	4947      	ldr	r1, [pc, #284]	; (8006c84 <RFP_ParseResponseFunction+0x14c>)
 8006b66:	5ccb      	ldrb	r3, [r1, r3]
 8006b68:	021b      	lsls	r3, r3, #8
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	4a44      	ldr	r2, [pc, #272]	; (8006c80 <RFP_ParseResponseFunction+0x148>)
 8006b6e:	6812      	ldr	r2, [r2, #0]
 8006b70:	6892      	ldr	r2, [r2, #8]
 8006b72:	3a01      	subs	r2, #1
 8006b74:	4943      	ldr	r1, [pc, #268]	; (8006c84 <RFP_ParseResponseFunction+0x14c>)
 8006b76:	5c8a      	ldrb	r2, [r1, r2]
   uint32_t MessageCRC = (((uint32_t)RfpDataRecive[Rfp->DataSize - 4] << 24) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 3] << 16)
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	607b      	str	r3, [r7, #4]
   if(MessageCRC == Crc(CRC_INITIAL_VALUE, Rfp->DataSize - 4, RfpDataRecive))
 8006b7c:	4b40      	ldr	r3, [pc, #256]	; (8006c80 <RFP_ParseResponseFunction+0x148>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	3b04      	subs	r3, #4
 8006b84:	4a3f      	ldr	r2, [pc, #252]	; (8006c84 <RFP_ParseResponseFunction+0x14c>)
 8006b86:	4619      	mov	r1, r3
 8006b88:	f04f 30ff 	mov.w	r0, #4294967295
 8006b8c:	f7fb fe94 	bl	80028b8 <Crc>
 8006b90:	4602      	mov	r2, r0
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d12d      	bne.n	8006bf4 <RFP_ParseResponseFunction+0xbc>
   {
      if(RfpDataRecive[0] == Rfp->DeviceType && RfpDataRecive[2] == RFP_MESSAGE)
 8006b98:	4b3a      	ldr	r3, [pc, #232]	; (8006c84 <RFP_ParseResponseFunction+0x14c>)
 8006b9a:	781a      	ldrb	r2, [r3, #0]
 8006b9c:	4b38      	ldr	r3, [pc, #224]	; (8006c80 <RFP_ParseResponseFunction+0x148>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	795b      	ldrb	r3, [r3, #5]
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d11d      	bne.n	8006be2 <RFP_ParseResponseFunction+0xaa>
 8006ba6:	4b37      	ldr	r3, [pc, #220]	; (8006c84 <RFP_ParseResponseFunction+0x14c>)
 8006ba8:	789b      	ldrb	r3, [r3, #2]
 8006baa:	2b03      	cmp	r3, #3
 8006bac:	d119      	bne.n	8006be2 <RFP_ParseResponseFunction+0xaa>
      {
         if(RfpDataRecive[3] == RFP_OK)
 8006bae:	4b35      	ldr	r3, [pc, #212]	; (8006c84 <RFP_ParseResponseFunction+0x14c>)
 8006bb0:	78db      	ldrb	r3, [r3, #3]
 8006bb2:	2b04      	cmp	r3, #4
 8006bb4:	d10c      	bne.n	8006bd0 <RFP_ParseResponseFunction+0x98>
         {
            Rfp->NewEvent = RFP_EVENT_DATA_OK;
 8006bb6:	4b32      	ldr	r3, [pc, #200]	; (8006c80 <RFP_ParseResponseFunction+0x148>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	2204      	movs	r2, #4
 8006bbc:	705a      	strb	r2, [r3, #1]
            Rfp->Cnt      = 0;
 8006bbe:	4b30      	ldr	r3, [pc, #192]	; (8006c80 <RFP_ParseResponseFunction+0x148>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	615a      	str	r2, [r3, #20]
            HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 8006bc6:	2164      	movs	r1, #100	; 0x64
 8006bc8:	482e      	ldr	r0, [pc, #184]	; (8006c84 <RFP_ParseResponseFunction+0x14c>)
 8006bca:	f7fa fcc5 	bl	8001558 <HC12_ReciveToIdleDMA>
         if(RfpDataRecive[3] == RFP_OK)
 8006bce:	e053      	b.n	8006c78 <RFP_ParseResponseFunction+0x140>
         }
         else
         {
            Rfp->NewEvent = RFP_EVENT_ERROR;
 8006bd0:	4b2b      	ldr	r3, [pc, #172]	; (8006c80 <RFP_ParseResponseFunction+0x148>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	2203      	movs	r2, #3
 8006bd6:	705a      	strb	r2, [r3, #1]
            HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 8006bd8:	2164      	movs	r1, #100	; 0x64
 8006bda:	482a      	ldr	r0, [pc, #168]	; (8006c84 <RFP_ParseResponseFunction+0x14c>)
 8006bdc:	f7fa fcbc 	bl	8001558 <HC12_ReciveToIdleDMA>
         if(RfpDataRecive[3] == RFP_OK)
 8006be0:	e04a      	b.n	8006c78 <RFP_ParseResponseFunction+0x140>
         }
      }
      else
      {
         Rfp->NewEvent = RFP_EVENT_ERROR;
 8006be2:	4b27      	ldr	r3, [pc, #156]	; (8006c80 <RFP_ParseResponseFunction+0x148>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	2203      	movs	r2, #3
 8006be8:	705a      	strb	r2, [r3, #1]
         HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 8006bea:	2164      	movs	r1, #100	; 0x64
 8006bec:	4825      	ldr	r0, [pc, #148]	; (8006c84 <RFP_ParseResponseFunction+0x14c>)
 8006bee:	f7fa fcb3 	bl	8001558 <HC12_ReciveToIdleDMA>
   else
   {
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
      Rfp->NewEvent = RFP_EVENT_ERROR;
   }
}
 8006bf2:	e041      	b.n	8006c78 <RFP_ParseResponseFunction+0x140>
   else if(RepareMessage(MessageCRC, RfpDataRecive, Rfp->DataSize) == CRC_OK)
 8006bf4:	4b22      	ldr	r3, [pc, #136]	; (8006c80 <RFP_ParseResponseFunction+0x148>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	4921      	ldr	r1, [pc, #132]	; (8006c84 <RFP_ParseResponseFunction+0x14c>)
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f7fb feb2 	bl	8002968 <RepareMessage>
 8006c04:	4603      	mov	r3, r0
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d12d      	bne.n	8006c66 <RFP_ParseResponseFunction+0x12e>
      if(RfpDataRecive[0] == Rfp->DeviceType && RfpDataRecive[2] == RFP_MESSAGE)
 8006c0a:	4b1e      	ldr	r3, [pc, #120]	; (8006c84 <RFP_ParseResponseFunction+0x14c>)
 8006c0c:	781a      	ldrb	r2, [r3, #0]
 8006c0e:	4b1c      	ldr	r3, [pc, #112]	; (8006c80 <RFP_ParseResponseFunction+0x148>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	795b      	ldrb	r3, [r3, #5]
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d11d      	bne.n	8006c54 <RFP_ParseResponseFunction+0x11c>
 8006c18:	4b1a      	ldr	r3, [pc, #104]	; (8006c84 <RFP_ParseResponseFunction+0x14c>)
 8006c1a:	789b      	ldrb	r3, [r3, #2]
 8006c1c:	2b03      	cmp	r3, #3
 8006c1e:	d119      	bne.n	8006c54 <RFP_ParseResponseFunction+0x11c>
         if(RfpDataRecive[3] == RFP_OK)
 8006c20:	4b18      	ldr	r3, [pc, #96]	; (8006c84 <RFP_ParseResponseFunction+0x14c>)
 8006c22:	78db      	ldrb	r3, [r3, #3]
 8006c24:	2b04      	cmp	r3, #4
 8006c26:	d10c      	bne.n	8006c42 <RFP_ParseResponseFunction+0x10a>
            Rfp->NewEvent = RFP_EVENT_DATA_OK;
 8006c28:	4b15      	ldr	r3, [pc, #84]	; (8006c80 <RFP_ParseResponseFunction+0x148>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	2204      	movs	r2, #4
 8006c2e:	705a      	strb	r2, [r3, #1]
            Rfp->Cnt      = 0;
 8006c30:	4b13      	ldr	r3, [pc, #76]	; (8006c80 <RFP_ParseResponseFunction+0x148>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	2200      	movs	r2, #0
 8006c36:	615a      	str	r2, [r3, #20]
            HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 8006c38:	2164      	movs	r1, #100	; 0x64
 8006c3a:	4812      	ldr	r0, [pc, #72]	; (8006c84 <RFP_ParseResponseFunction+0x14c>)
 8006c3c:	f7fa fc8c 	bl	8001558 <HC12_ReciveToIdleDMA>
         if(RfpDataRecive[3] == RFP_OK)
 8006c40:	e01a      	b.n	8006c78 <RFP_ParseResponseFunction+0x140>
            Rfp->NewEvent = RFP_EVENT_ERROR;
 8006c42:	4b0f      	ldr	r3, [pc, #60]	; (8006c80 <RFP_ParseResponseFunction+0x148>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	2203      	movs	r2, #3
 8006c48:	705a      	strb	r2, [r3, #1]
            HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 8006c4a:	2164      	movs	r1, #100	; 0x64
 8006c4c:	480d      	ldr	r0, [pc, #52]	; (8006c84 <RFP_ParseResponseFunction+0x14c>)
 8006c4e:	f7fa fc83 	bl	8001558 <HC12_ReciveToIdleDMA>
         if(RfpDataRecive[3] == RFP_OK)
 8006c52:	e011      	b.n	8006c78 <RFP_ParseResponseFunction+0x140>
         Rfp->NewEvent = RFP_EVENT_ERROR;
 8006c54:	4b0a      	ldr	r3, [pc, #40]	; (8006c80 <RFP_ParseResponseFunction+0x148>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	2203      	movs	r2, #3
 8006c5a:	705a      	strb	r2, [r3, #1]
         HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 8006c5c:	2164      	movs	r1, #100	; 0x64
 8006c5e:	4809      	ldr	r0, [pc, #36]	; (8006c84 <RFP_ParseResponseFunction+0x14c>)
 8006c60:	f7fa fc7a 	bl	8001558 <HC12_ReciveToIdleDMA>
}
 8006c64:	e008      	b.n	8006c78 <RFP_ParseResponseFunction+0x140>
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 8006c66:	2164      	movs	r1, #100	; 0x64
 8006c68:	4806      	ldr	r0, [pc, #24]	; (8006c84 <RFP_ParseResponseFunction+0x14c>)
 8006c6a:	f7fa fc75 	bl	8001558 <HC12_ReciveToIdleDMA>
      Rfp->NewEvent = RFP_EVENT_ERROR;
 8006c6e:	4b04      	ldr	r3, [pc, #16]	; (8006c80 <RFP_ParseResponseFunction+0x148>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	2203      	movs	r2, #3
 8006c74:	705a      	strb	r2, [r3, #1]
}
 8006c76:	e7ff      	b.n	8006c78 <RFP_ParseResponseFunction+0x140>
 8006c78:	bf00      	nop
 8006c7a:	3708      	adds	r7, #8
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}
 8006c80:	20003ebc 	.word	0x20003ebc
 8006c84:	20003df4 	.word	0x20003df4

08006c88 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8006c8c:	4b07      	ldr	r3, [pc, #28]	; (8006cac <MX_RNG_Init+0x24>)
 8006c8e:	4a08      	ldr	r2, [pc, #32]	; (8006cb0 <MX_RNG_Init+0x28>)
 8006c90:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8006c92:	4b06      	ldr	r3, [pc, #24]	; (8006cac <MX_RNG_Init+0x24>)
 8006c94:	2200      	movs	r2, #0
 8006c96:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8006c98:	4804      	ldr	r0, [pc, #16]	; (8006cac <MX_RNG_Init+0x24>)
 8006c9a:	f003 fb35 	bl	800a308 <HAL_RNG_Init>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d001      	beq.n	8006ca8 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8006ca4:	f7fe f81e 	bl	8004ce4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8006ca8:	bf00      	nop
 8006caa:	bd80      	pop	{r7, pc}
 8006cac:	20003ef0 	.word	0x20003ef0
 8006cb0:	50060800 	.word	0x50060800

08006cb4 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b0aa      	sub	sp, #168	; 0xa8
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006cbc:	f107 0310 	add.w	r3, r7, #16
 8006cc0:	2298      	movs	r2, #152	; 0x98
 8006cc2:	2100      	movs	r1, #0
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f00b fe39 	bl	801293c <memset>
  if(rngHandle->Instance==RNG)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a11      	ldr	r2, [pc, #68]	; (8006d14 <HAL_RNG_MspInit+0x60>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d11b      	bne.n	8006d0c <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8006cd4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006cd8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006ce0:	f107 0310 	add.w	r3, r7, #16
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f002 fdbb 	bl	8009860 <HAL_RCCEx_PeriphCLKConfig>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d001      	beq.n	8006cf4 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8006cf0:	f7fd fff8 	bl	8004ce4 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8006cf4:	4b08      	ldr	r3, [pc, #32]	; (8006d18 <HAL_RNG_MspInit+0x64>)
 8006cf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cf8:	4a07      	ldr	r2, [pc, #28]	; (8006d18 <HAL_RNG_MspInit+0x64>)
 8006cfa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006cfe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006d00:	4b05      	ldr	r3, [pc, #20]	; (8006d18 <HAL_RNG_MspInit+0x64>)
 8006d02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d08:	60fb      	str	r3, [r7, #12]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8006d0c:	bf00      	nop
 8006d0e:	37a8      	adds	r7, #168	; 0xa8
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}
 8006d14:	50060800 	.word	0x50060800
 8006d18:	40021000 	.word	0x40021000

08006d1c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b086      	sub	sp, #24
 8006d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8006d22:	1d3b      	adds	r3, r7, #4
 8006d24:	2200      	movs	r2, #0
 8006d26:	601a      	str	r2, [r3, #0]
 8006d28:	605a      	str	r2, [r3, #4]
 8006d2a:	609a      	str	r2, [r3, #8]
 8006d2c:	60da      	str	r2, [r3, #12]
 8006d2e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8006d30:	2300      	movs	r3, #0
 8006d32:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8006d34:	4b13      	ldr	r3, [pc, #76]	; (8006d84 <MX_RTC_Init+0x68>)
 8006d36:	4a14      	ldr	r2, [pc, #80]	; (8006d88 <MX_RTC_Init+0x6c>)
 8006d38:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8006d3a:	4b12      	ldr	r3, [pc, #72]	; (8006d84 <MX_RTC_Init+0x68>)
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8006d40:	4b10      	ldr	r3, [pc, #64]	; (8006d84 <MX_RTC_Init+0x68>)
 8006d42:	227f      	movs	r2, #127	; 0x7f
 8006d44:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8006d46:	4b0f      	ldr	r3, [pc, #60]	; (8006d84 <MX_RTC_Init+0x68>)
 8006d48:	22ff      	movs	r2, #255	; 0xff
 8006d4a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8006d4c:	4b0d      	ldr	r3, [pc, #52]	; (8006d84 <MX_RTC_Init+0x68>)
 8006d4e:	2200      	movs	r2, #0
 8006d50:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8006d52:	4b0c      	ldr	r3, [pc, #48]	; (8006d84 <MX_RTC_Init+0x68>)
 8006d54:	2200      	movs	r2, #0
 8006d56:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8006d58:	4b0a      	ldr	r3, [pc, #40]	; (8006d84 <MX_RTC_Init+0x68>)
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8006d5e:	4b09      	ldr	r3, [pc, #36]	; (8006d84 <MX_RTC_Init+0x68>)
 8006d60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006d64:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8006d66:	4b07      	ldr	r3, [pc, #28]	; (8006d84 <MX_RTC_Init+0x68>)
 8006d68:	2200      	movs	r2, #0
 8006d6a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8006d6c:	4805      	ldr	r0, [pc, #20]	; (8006d84 <MX_RTC_Init+0x68>)
 8006d6e:	f003 fbc5 	bl	800a4fc <HAL_RTC_Init>
 8006d72:	4603      	mov	r3, r0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d001      	beq.n	8006d7c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8006d78:	f7fd ffb4 	bl	8004ce4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8006d7c:	3718      	adds	r7, #24
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	20003f04 	.word	0x20003f04
 8006d88:	40002800 	.word	0x40002800

08006d8c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b0aa      	sub	sp, #168	; 0xa8
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006d94:	f107 0310 	add.w	r3, r7, #16
 8006d98:	2298      	movs	r2, #152	; 0x98
 8006d9a:	2100      	movs	r1, #0
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f00b fdcd 	bl	801293c <memset>
  if(rtcHandle->Instance==RTC)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a16      	ldr	r2, [pc, #88]	; (8006e00 <HAL_RTC_MspInit+0x74>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d124      	bne.n	8006df6 <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8006dac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006db0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8006db2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006db6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006dba:	f107 0310 	add.w	r3, r7, #16
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f002 fd4e 	bl	8009860 <HAL_RCCEx_PeriphCLKConfig>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d001      	beq.n	8006dce <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8006dca:	f7fd ff8b 	bl	8004ce4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8006dce:	4b0d      	ldr	r3, [pc, #52]	; (8006e04 <HAL_RTC_MspInit+0x78>)
 8006dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dd4:	4a0b      	ldr	r2, [pc, #44]	; (8006e04 <HAL_RTC_MspInit+0x78>)
 8006dd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8006dde:	4b09      	ldr	r3, [pc, #36]	; (8006e04 <HAL_RTC_MspInit+0x78>)
 8006de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006de2:	4a08      	ldr	r2, [pc, #32]	; (8006e04 <HAL_RTC_MspInit+0x78>)
 8006de4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006de8:	6593      	str	r3, [r2, #88]	; 0x58
 8006dea:	4b06      	ldr	r3, [pc, #24]	; (8006e04 <HAL_RTC_MspInit+0x78>)
 8006dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006df2:	60fb      	str	r3, [r7, #12]
 8006df4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8006df6:	bf00      	nop
 8006df8:	37a8      	adds	r7, #168	; 0xa8
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	40002800 	.word	0x40002800
 8006e04:	40021000 	.word	0x40021000

08006e08 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8006e0c:	4b1b      	ldr	r3, [pc, #108]	; (8006e7c <MX_SPI1_Init+0x74>)
 8006e0e:	4a1c      	ldr	r2, [pc, #112]	; (8006e80 <MX_SPI1_Init+0x78>)
 8006e10:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006e12:	4b1a      	ldr	r3, [pc, #104]	; (8006e7c <MX_SPI1_Init+0x74>)
 8006e14:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006e18:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006e1a:	4b18      	ldr	r3, [pc, #96]	; (8006e7c <MX_SPI1_Init+0x74>)
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006e20:	4b16      	ldr	r3, [pc, #88]	; (8006e7c <MX_SPI1_Init+0x74>)
 8006e22:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006e26:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006e28:	4b14      	ldr	r3, [pc, #80]	; (8006e7c <MX_SPI1_Init+0x74>)
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006e2e:	4b13      	ldr	r3, [pc, #76]	; (8006e7c <MX_SPI1_Init+0x74>)
 8006e30:	2200      	movs	r2, #0
 8006e32:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006e34:	4b11      	ldr	r3, [pc, #68]	; (8006e7c <MX_SPI1_Init+0x74>)
 8006e36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e3a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8006e3c:	4b0f      	ldr	r3, [pc, #60]	; (8006e7c <MX_SPI1_Init+0x74>)
 8006e3e:	2228      	movs	r2, #40	; 0x28
 8006e40:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006e42:	4b0e      	ldr	r3, [pc, #56]	; (8006e7c <MX_SPI1_Init+0x74>)
 8006e44:	2200      	movs	r2, #0
 8006e46:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006e48:	4b0c      	ldr	r3, [pc, #48]	; (8006e7c <MX_SPI1_Init+0x74>)
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e4e:	4b0b      	ldr	r3, [pc, #44]	; (8006e7c <MX_SPI1_Init+0x74>)
 8006e50:	2200      	movs	r2, #0
 8006e52:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8006e54:	4b09      	ldr	r3, [pc, #36]	; (8006e7c <MX_SPI1_Init+0x74>)
 8006e56:	2207      	movs	r2, #7
 8006e58:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8006e5a:	4b08      	ldr	r3, [pc, #32]	; (8006e7c <MX_SPI1_Init+0x74>)
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006e60:	4b06      	ldr	r3, [pc, #24]	; (8006e7c <MX_SPI1_Init+0x74>)
 8006e62:	2208      	movs	r2, #8
 8006e64:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006e66:	4805      	ldr	r0, [pc, #20]	; (8006e7c <MX_SPI1_Init+0x74>)
 8006e68:	f003 fe84 	bl	800ab74 <HAL_SPI_Init>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d001      	beq.n	8006e76 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8006e72:	f7fd ff37 	bl	8004ce4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8006e76:	bf00      	nop
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop
 8006e7c:	20003f38 	.word	0x20003f38
 8006e80:	40013000 	.word	0x40013000

08006e84 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8006e88:	4b1b      	ldr	r3, [pc, #108]	; (8006ef8 <MX_SPI3_Init+0x74>)
 8006e8a:	4a1c      	ldr	r2, [pc, #112]	; (8006efc <MX_SPI3_Init+0x78>)
 8006e8c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8006e8e:	4b1a      	ldr	r3, [pc, #104]	; (8006ef8 <MX_SPI3_Init+0x74>)
 8006e90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006e94:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8006e96:	4b18      	ldr	r3, [pc, #96]	; (8006ef8 <MX_SPI3_Init+0x74>)
 8006e98:	2200      	movs	r2, #0
 8006e9a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8006e9c:	4b16      	ldr	r3, [pc, #88]	; (8006ef8 <MX_SPI3_Init+0x74>)
 8006e9e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006ea2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006ea4:	4b14      	ldr	r3, [pc, #80]	; (8006ef8 <MX_SPI3_Init+0x74>)
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006eaa:	4b13      	ldr	r3, [pc, #76]	; (8006ef8 <MX_SPI3_Init+0x74>)
 8006eac:	2200      	movs	r2, #0
 8006eae:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8006eb0:	4b11      	ldr	r3, [pc, #68]	; (8006ef8 <MX_SPI3_Init+0x74>)
 8006eb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006eb6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8006eb8:	4b0f      	ldr	r3, [pc, #60]	; (8006ef8 <MX_SPI3_Init+0x74>)
 8006eba:	2220      	movs	r2, #32
 8006ebc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006ebe:	4b0e      	ldr	r3, [pc, #56]	; (8006ef8 <MX_SPI3_Init+0x74>)
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8006ec4:	4b0c      	ldr	r3, [pc, #48]	; (8006ef8 <MX_SPI3_Init+0x74>)
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006eca:	4b0b      	ldr	r3, [pc, #44]	; (8006ef8 <MX_SPI3_Init+0x74>)
 8006ecc:	2200      	movs	r2, #0
 8006ece:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8006ed0:	4b09      	ldr	r3, [pc, #36]	; (8006ef8 <MX_SPI3_Init+0x74>)
 8006ed2:	2207      	movs	r2, #7
 8006ed4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8006ed6:	4b08      	ldr	r3, [pc, #32]	; (8006ef8 <MX_SPI3_Init+0x74>)
 8006ed8:	2200      	movs	r2, #0
 8006eda:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006edc:	4b06      	ldr	r3, [pc, #24]	; (8006ef8 <MX_SPI3_Init+0x74>)
 8006ede:	2208      	movs	r2, #8
 8006ee0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8006ee2:	4805      	ldr	r0, [pc, #20]	; (8006ef8 <MX_SPI3_Init+0x74>)
 8006ee4:	f003 fe46 	bl	800ab74 <HAL_SPI_Init>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d001      	beq.n	8006ef2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8006eee:	f7fd fef9 	bl	8004ce4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8006ef2:	bf00      	nop
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	bf00      	nop
 8006ef8:	20003f9c 	.word	0x20003f9c
 8006efc:	40003c00 	.word	0x40003c00

08006f00 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b08c      	sub	sp, #48	; 0x30
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f08:	f107 031c 	add.w	r3, r7, #28
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	601a      	str	r2, [r3, #0]
 8006f10:	605a      	str	r2, [r3, #4]
 8006f12:	609a      	str	r2, [r3, #8]
 8006f14:	60da      	str	r2, [r3, #12]
 8006f16:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a2e      	ldr	r2, [pc, #184]	; (8006fd8 <HAL_SPI_MspInit+0xd8>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d129      	bne.n	8006f76 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006f22:	4b2e      	ldr	r3, [pc, #184]	; (8006fdc <HAL_SPI_MspInit+0xdc>)
 8006f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f26:	4a2d      	ldr	r2, [pc, #180]	; (8006fdc <HAL_SPI_MspInit+0xdc>)
 8006f28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006f2c:	6613      	str	r3, [r2, #96]	; 0x60
 8006f2e:	4b2b      	ldr	r3, [pc, #172]	; (8006fdc <HAL_SPI_MspInit+0xdc>)
 8006f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f36:	61bb      	str	r3, [r7, #24]
 8006f38:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f3a:	4b28      	ldr	r3, [pc, #160]	; (8006fdc <HAL_SPI_MspInit+0xdc>)
 8006f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f3e:	4a27      	ldr	r2, [pc, #156]	; (8006fdc <HAL_SPI_MspInit+0xdc>)
 8006f40:	f043 0301 	orr.w	r3, r3, #1
 8006f44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006f46:	4b25      	ldr	r3, [pc, #148]	; (8006fdc <HAL_SPI_MspInit+0xdc>)
 8006f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f4a:	f003 0301 	and.w	r3, r3, #1
 8006f4e:	617b      	str	r3, [r7, #20]
 8006f50:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006f52:	23e0      	movs	r3, #224	; 0xe0
 8006f54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f56:	2302      	movs	r3, #2
 8006f58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f5e:	2303      	movs	r3, #3
 8006f60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006f62:	2305      	movs	r3, #5
 8006f64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f66:	f107 031c 	add.w	r3, r7, #28
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006f70:	f001 f9fa 	bl	8008368 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8006f74:	e02c      	b.n	8006fd0 <HAL_SPI_MspInit+0xd0>
  else if(spiHandle->Instance==SPI3)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a19      	ldr	r2, [pc, #100]	; (8006fe0 <HAL_SPI_MspInit+0xe0>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d127      	bne.n	8006fd0 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8006f80:	4b16      	ldr	r3, [pc, #88]	; (8006fdc <HAL_SPI_MspInit+0xdc>)
 8006f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f84:	4a15      	ldr	r2, [pc, #84]	; (8006fdc <HAL_SPI_MspInit+0xdc>)
 8006f86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f8a:	6593      	str	r3, [r2, #88]	; 0x58
 8006f8c:	4b13      	ldr	r3, [pc, #76]	; (8006fdc <HAL_SPI_MspInit+0xdc>)
 8006f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f94:	613b      	str	r3, [r7, #16]
 8006f96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f98:	4b10      	ldr	r3, [pc, #64]	; (8006fdc <HAL_SPI_MspInit+0xdc>)
 8006f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f9c:	4a0f      	ldr	r2, [pc, #60]	; (8006fdc <HAL_SPI_MspInit+0xdc>)
 8006f9e:	f043 0302 	orr.w	r3, r3, #2
 8006fa2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006fa4:	4b0d      	ldr	r3, [pc, #52]	; (8006fdc <HAL_SPI_MspInit+0xdc>)
 8006fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fa8:	f003 0302 	and.w	r3, r3, #2
 8006fac:	60fb      	str	r3, [r7, #12]
 8006fae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8006fb0:	2338      	movs	r3, #56	; 0x38
 8006fb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fb4:	2302      	movs	r3, #2
 8006fb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006fbc:	2303      	movs	r3, #3
 8006fbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8006fc0:	2306      	movs	r3, #6
 8006fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006fc4:	f107 031c 	add.w	r3, r7, #28
 8006fc8:	4619      	mov	r1, r3
 8006fca:	4806      	ldr	r0, [pc, #24]	; (8006fe4 <HAL_SPI_MspInit+0xe4>)
 8006fcc:	f001 f9cc 	bl	8008368 <HAL_GPIO_Init>
}
 8006fd0:	bf00      	nop
 8006fd2:	3730      	adds	r7, #48	; 0x30
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	40013000 	.word	0x40013000
 8006fdc:	40021000 	.word	0x40021000
 8006fe0:	40003c00 	.word	0x40003c00
 8006fe4:	48000400 	.word	0x48000400

08006fe8 <ssd1306_command>:
#include "main.h"
#include "string.h"
SPI_HandleTypeDef *ssd1306_spi;
static uint8_t buffer[(SSD1306_LCDWIDTH * SSD1306_LCDHEIGHT) / 8];
static void ssd1306_command(uint8_t command)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b082      	sub	sp, #8
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	4603      	mov	r3, r0
 8006ff0:	71fb      	strb	r3, [r7, #7]
   HAL_GPIO_WritePin(ssd1306_dc_GPIO_Port, ssd1306_dc_Pin, GPIO_PIN_RESET);
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	2101      	movs	r1, #1
 8006ff6:	480d      	ldr	r0, [pc, #52]	; (800702c <ssd1306_command+0x44>)
 8006ff8:	f001 fb60 	bl	80086bc <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(ssd1306_cs_GPIO_Port, ssd1306_cs_Pin, GPIO_PIN_RESET);
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	2110      	movs	r1, #16
 8007000:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007004:	f001 fb5a 	bl	80086bc <HAL_GPIO_WritePin>
   HAL_SPI_Transmit(ssd1306_spi, &command, 1, 10);
 8007008:	4b09      	ldr	r3, [pc, #36]	; (8007030 <ssd1306_command+0x48>)
 800700a:	6818      	ldr	r0, [r3, #0]
 800700c:	1df9      	adds	r1, r7, #7
 800700e:	230a      	movs	r3, #10
 8007010:	2201      	movs	r2, #1
 8007012:	f003 fe52 	bl	800acba <HAL_SPI_Transmit>
   HAL_GPIO_WritePin(ssd1306_cs_GPIO_Port, ssd1306_cs_Pin, GPIO_PIN_SET);
 8007016:	2201      	movs	r2, #1
 8007018:	2110      	movs	r1, #16
 800701a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800701e:	f001 fb4d 	bl	80086bc <HAL_GPIO_WritePin>
}
 8007022:	bf00      	nop
 8007024:	3708      	adds	r7, #8
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
 800702a:	bf00      	nop
 800702c:	48000400 	.word	0x48000400
 8007030:	20004000 	.word	0x20004000

08007034 <ssd1306_set_pixel>:
//    HAL_GPIO_WritePin(ssd1306_cs_GPIO_Port, ssd1306_cs_Pin, GPIO_PIN_RESET);
//    HAL_SPI_Transmit(ssd1306_spi, &data, 1, 10);
//    HAL_GPIO_WritePin(ssd1306_cs_GPIO_Port, ssd1306_cs_Pin, GPIO_PIN_SET);
// }
void ssd1306_set_pixel(uint8_t x, uint8_t y, uint8_t color)
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
 800703a:	4603      	mov	r3, r0
 800703c:	71fb      	strb	r3, [r7, #7]
 800703e:	460b      	mov	r3, r1
 8007040:	71bb      	strb	r3, [r7, #6]
 8007042:	4613      	mov	r3, r2
 8007044:	717b      	strb	r3, [r7, #5]
   if((x < 0) || (x >= SSD1306_LCDWIDTH) || (y < 0) || (y >= SSD1306_LCDHEIGHT))
 8007046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800704a:	2b00      	cmp	r3, #0
 800704c:	db43      	blt.n	80070d6 <ssd1306_set_pixel+0xa2>
 800704e:	79bb      	ldrb	r3, [r7, #6]
 8007050:	2b3f      	cmp	r3, #63	; 0x3f
 8007052:	d840      	bhi.n	80070d6 <ssd1306_set_pixel+0xa2>
   {
      return;
   }
   if(color != 0 && color != 1)
 8007054:	797b      	ldrb	r3, [r7, #5]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d002      	beq.n	8007060 <ssd1306_set_pixel+0x2c>
 800705a:	797b      	ldrb	r3, [r7, #5]
 800705c:	2b01      	cmp	r3, #1
 800705e:	d13c      	bne.n	80070da <ssd1306_set_pixel+0xa6>
   {
      return;
   }
   if(color == 0)
 8007060:	797b      	ldrb	r3, [r7, #5]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d11c      	bne.n	80070a0 <ssd1306_set_pixel+0x6c>
   {
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] &= ~(1 << (y & 7));
 8007066:	79fa      	ldrb	r2, [r7, #7]
 8007068:	79bb      	ldrb	r3, [r7, #6]
 800706a:	08db      	lsrs	r3, r3, #3
 800706c:	b2d8      	uxtb	r0, r3
 800706e:	4603      	mov	r3, r0
 8007070:	01db      	lsls	r3, r3, #7
 8007072:	4413      	add	r3, r2
 8007074:	4a1c      	ldr	r2, [pc, #112]	; (80070e8 <ssd1306_set_pixel+0xb4>)
 8007076:	5cd3      	ldrb	r3, [r2, r3]
 8007078:	b25a      	sxtb	r2, r3
 800707a:	79bb      	ldrb	r3, [r7, #6]
 800707c:	f003 0307 	and.w	r3, r3, #7
 8007080:	2101      	movs	r1, #1
 8007082:	fa01 f303 	lsl.w	r3, r1, r3
 8007086:	b25b      	sxtb	r3, r3
 8007088:	43db      	mvns	r3, r3
 800708a:	b25b      	sxtb	r3, r3
 800708c:	4013      	ands	r3, r2
 800708e:	b259      	sxtb	r1, r3
 8007090:	79fa      	ldrb	r2, [r7, #7]
 8007092:	4603      	mov	r3, r0
 8007094:	01db      	lsls	r3, r3, #7
 8007096:	4413      	add	r3, r2
 8007098:	b2c9      	uxtb	r1, r1
 800709a:	4a13      	ldr	r2, [pc, #76]	; (80070e8 <ssd1306_set_pixel+0xb4>)
 800709c:	54d1      	strb	r1, [r2, r3]
 800709e:	e01d      	b.n	80070dc <ssd1306_set_pixel+0xa8>
   }
   else
   {
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] |= (1 << (y & 7));
 80070a0:	79fa      	ldrb	r2, [r7, #7]
 80070a2:	79bb      	ldrb	r3, [r7, #6]
 80070a4:	08db      	lsrs	r3, r3, #3
 80070a6:	b2d8      	uxtb	r0, r3
 80070a8:	4603      	mov	r3, r0
 80070aa:	01db      	lsls	r3, r3, #7
 80070ac:	4413      	add	r3, r2
 80070ae:	4a0e      	ldr	r2, [pc, #56]	; (80070e8 <ssd1306_set_pixel+0xb4>)
 80070b0:	5cd3      	ldrb	r3, [r2, r3]
 80070b2:	b25a      	sxtb	r2, r3
 80070b4:	79bb      	ldrb	r3, [r7, #6]
 80070b6:	f003 0307 	and.w	r3, r3, #7
 80070ba:	2101      	movs	r1, #1
 80070bc:	fa01 f303 	lsl.w	r3, r1, r3
 80070c0:	b25b      	sxtb	r3, r3
 80070c2:	4313      	orrs	r3, r2
 80070c4:	b259      	sxtb	r1, r3
 80070c6:	79fa      	ldrb	r2, [r7, #7]
 80070c8:	4603      	mov	r3, r0
 80070ca:	01db      	lsls	r3, r3, #7
 80070cc:	4413      	add	r3, r2
 80070ce:	b2c9      	uxtb	r1, r1
 80070d0:	4a05      	ldr	r2, [pc, #20]	; (80070e8 <ssd1306_set_pixel+0xb4>)
 80070d2:	54d1      	strb	r1, [r2, r3]
 80070d4:	e002      	b.n	80070dc <ssd1306_set_pixel+0xa8>
      return;
 80070d6:	bf00      	nop
 80070d8:	e000      	b.n	80070dc <ssd1306_set_pixel+0xa8>
      return;
 80070da:	bf00      	nop
   }
}
 80070dc:	370c      	adds	r7, #12
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr
 80070e6:	bf00      	nop
 80070e8:	20004004 	.word	0x20004004

080070ec <ssd1306_display>:
void ssd1306_display()
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	af00      	add	r7, sp, #0
   ssd1306_command(0x22);
 80070f0:	2022      	movs	r0, #34	; 0x22
 80070f2:	f7ff ff79 	bl	8006fe8 <ssd1306_command>
   ssd1306_command(0x00);
 80070f6:	2000      	movs	r0, #0
 80070f8:	f7ff ff76 	bl	8006fe8 <ssd1306_command>
   ssd1306_command(0x07);
 80070fc:	2007      	movs	r0, #7
 80070fe:	f7ff ff73 	bl	8006fe8 <ssd1306_command>
   HAL_GPIO_WritePin(ssd1306_dc_GPIO_Port, ssd1306_dc_Pin, GPIO_PIN_SET);
 8007102:	2201      	movs	r2, #1
 8007104:	2101      	movs	r1, #1
 8007106:	480c      	ldr	r0, [pc, #48]	; (8007138 <ssd1306_display+0x4c>)
 8007108:	f001 fad8 	bl	80086bc <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(ssd1306_cs_GPIO_Port, ssd1306_cs_Pin, GPIO_PIN_RESET);
 800710c:	2200      	movs	r2, #0
 800710e:	2110      	movs	r1, #16
 8007110:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007114:	f001 fad2 	bl	80086bc <HAL_GPIO_WritePin>
   HAL_SPI_Transmit(ssd1306_spi, (uint8_t *)&buffer, (SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH / 8), 100);
 8007118:	4b08      	ldr	r3, [pc, #32]	; (800713c <ssd1306_display+0x50>)
 800711a:	6818      	ldr	r0, [r3, #0]
 800711c:	2364      	movs	r3, #100	; 0x64
 800711e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007122:	4907      	ldr	r1, [pc, #28]	; (8007140 <ssd1306_display+0x54>)
 8007124:	f003 fdc9 	bl	800acba <HAL_SPI_Transmit>
   HAL_GPIO_WritePin(ssd1306_cs_GPIO_Port, ssd1306_cs_Pin, GPIO_PIN_SET);
 8007128:	2201      	movs	r2, #1
 800712a:	2110      	movs	r1, #16
 800712c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007130:	f001 fac4 	bl	80086bc <HAL_GPIO_WritePin>
}
 8007134:	bf00      	nop
 8007136:	bd80      	pop	{r7, pc}
 8007138:	48000400 	.word	0x48000400
 800713c:	20004000 	.word	0x20004000
 8007140:	20004004 	.word	0x20004004

08007144 <ssd1306_clear>:
void ssd1306_clear()
{
 8007144:	b580      	push	{r7, lr}
 8007146:	af00      	add	r7, sp, #0
   memset(buffer, 0x00, (SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH / 8));
 8007148:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800714c:	2100      	movs	r1, #0
 800714e:	4802      	ldr	r0, [pc, #8]	; (8007158 <ssd1306_clear+0x14>)
 8007150:	f00b fbf4 	bl	801293c <memset>
}
 8007154:	bf00      	nop
 8007156:	bd80      	pop	{r7, pc}
 8007158:	20004004 	.word	0x20004004

0800715c <ssd1306_init>:
void ssd1306_init(SPI_HandleTypeDef *spi)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
   HAL_GPIO_WritePin(ssd1306_res_GPIO_Port, ssd1306_res_Pin, GPIO_PIN_RESET);
 8007164:	2200      	movs	r2, #0
 8007166:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800716a:	4833      	ldr	r0, [pc, #204]	; (8007238 <ssd1306_init+0xdc>)
 800716c:	f001 faa6 	bl	80086bc <HAL_GPIO_WritePin>
   HAL_Delay(150);
 8007170:	2096      	movs	r0, #150	; 0x96
 8007172:	f000 fca9 	bl	8007ac8 <HAL_Delay>
   HAL_GPIO_WritePin(ssd1306_res_GPIO_Port, ssd1306_res_Pin, GPIO_PIN_SET);
 8007176:	2201      	movs	r2, #1
 8007178:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800717c:	482e      	ldr	r0, [pc, #184]	; (8007238 <ssd1306_init+0xdc>)
 800717e:	f001 fa9d 	bl	80086bc <HAL_GPIO_WritePin>
   HAL_Delay(100);
 8007182:	2064      	movs	r0, #100	; 0x64
 8007184:	f000 fca0 	bl	8007ac8 <HAL_Delay>
   ssd1306_spi = spi;
 8007188:	4a2c      	ldr	r2, [pc, #176]	; (800723c <ssd1306_init+0xe0>)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6013      	str	r3, [r2, #0]
   ssd1306_command(0xAE); // Display Off
 800718e:	20ae      	movs	r0, #174	; 0xae
 8007190:	f7ff ff2a 	bl	8006fe8 <ssd1306_command>

   ssd1306_command(0x00);
 8007194:	2000      	movs	r0, #0
 8007196:	f7ff ff27 	bl	8006fe8 <ssd1306_command>
   ssd1306_command(0x10);
 800719a:	2010      	movs	r0, #16
 800719c:	f7ff ff24 	bl	8006fe8 <ssd1306_command>
   ssd1306_command(0x40);
 80071a0:	2040      	movs	r0, #64	; 0x40
 80071a2:	f7ff ff21 	bl	8006fe8 <ssd1306_command>
   ssd1306_command(0x20); // Set addressing mode
 80071a6:	2020      	movs	r0, #32
 80071a8:	f7ff ff1e 	bl	8006fe8 <ssd1306_command>
   ssd1306_command(0x00); // Horizontal Addressing Mode
 80071ac:	2000      	movs	r0, #0
 80071ae:	f7ff ff1b 	bl	8006fe8 <ssd1306_command>

   ssd1306_command(0x81); // Set Contrast Control
 80071b2:	2081      	movs	r0, #129	; 0x81
 80071b4:	f7ff ff18 	bl	8006fe8 <ssd1306_command>
   ssd1306_command(0xff);
 80071b8:	20ff      	movs	r0, #255	; 0xff
 80071ba:	f7ff ff15 	bl	8006fe8 <ssd1306_command>
   ssd1306_command(0xA0 | (0x01 & 1));
 80071be:	20a1      	movs	r0, #161	; 0xa1
 80071c0:	f7ff ff12 	bl	8006fe8 <ssd1306_command>
   ssd1306_command(0xC0 | (0x08 & (1 << 3)));
 80071c4:	20c8      	movs	r0, #200	; 0xc8
 80071c6:	f7ff ff0f 	bl	8006fe8 <ssd1306_command>

   ssd1306_command(0xA6); // Set Normal Display
 80071ca:	20a6      	movs	r0, #166	; 0xa6
 80071cc:	f7ff ff0c 	bl	8006fe8 <ssd1306_command>

   ssd1306_command(0xA8); // Select Multiplex Ratio
 80071d0:	20a8      	movs	r0, #168	; 0xa8
 80071d2:	f7ff ff09 	bl	8006fe8 <ssd1306_command>
   ssd1306_command(0x3F); // Default => 0x3F (1/64 Duty)	0x1F(1/32 Duty)
 80071d6:	203f      	movs	r0, #63	; 0x3f
 80071d8:	f7ff ff06 	bl	8006fe8 <ssd1306_command>

   ssd1306_command(0xD3); // Setting Display Offset
 80071dc:	20d3      	movs	r0, #211	; 0xd3
 80071de:	f7ff ff03 	bl	8006fe8 <ssd1306_command>
   ssd1306_command(0x00); // 00H Reset
 80071e2:	2000      	movs	r0, #0
 80071e4:	f7ff ff00 	bl	8006fe8 <ssd1306_command>

   ssd1306_command(0xD5); // SET DISPLAY CLOCK
 80071e8:	20d5      	movs	r0, #213	; 0xd5
 80071ea:	f7ff fefd 	bl	8006fe8 <ssd1306_command>
   ssd1306_command(0x80); // 105HZ
 80071ee:	2080      	movs	r0, #128	; 0x80
 80071f0:	f7ff fefa 	bl	8006fe8 <ssd1306_command>

   ssd1306_command(0xD9); // Set Pre-Charge period
 80071f4:	20d9      	movs	r0, #217	; 0xd9
 80071f6:	f7ff fef7 	bl	8006fe8 <ssd1306_command>
   ssd1306_command(0x22);
 80071fa:	2022      	movs	r0, #34	; 0x22
 80071fc:	f7ff fef4 	bl	8006fe8 <ssd1306_command>

   ssd1306_command(0xDA); // Set COM Hardware Configuration
 8007200:	20da      	movs	r0, #218	; 0xda
 8007202:	f7ff fef1 	bl	8006fe8 <ssd1306_command>
   ssd1306_command(0x12); // Alternative COM Pin---See IC Spec page 34
 8007206:	2012      	movs	r0, #18
 8007208:	f7ff feee 	bl	8006fe8 <ssd1306_command>
                          // (0x02)=> A4=0;Sequential COM pin configuration;A5=0;Disable COM Left/Right remap

   ssd1306_command(0xDB); // Set Deselect Vcomh level
 800720c:	20db      	movs	r0, #219	; 0xdb
 800720e:	f7ff feeb 	bl	8006fe8 <ssd1306_command>
   ssd1306_command(0x40);
 8007212:	2040      	movs	r0, #64	; 0x40
 8007214:	f7ff fee8 	bl	8006fe8 <ssd1306_command>

   ssd1306_command(0x8D); // Set Charge Pump
 8007218:	208d      	movs	r0, #141	; 0x8d
 800721a:	f7ff fee5 	bl	8006fe8 <ssd1306_command>
   // ssd1306_command(0x10);  // Disable Charge Pump
   ssd1306_command(0x14); // Endable Charge Pump
 800721e:	2014      	movs	r0, #20
 8007220:	f7ff fee2 	bl	8006fe8 <ssd1306_command>

   ssd1306_command(0xA4); // Entire Display ON
 8007224:	20a4      	movs	r0, #164	; 0xa4
 8007226:	f7ff fedf 	bl	8006fe8 <ssd1306_command>
   ssd1306_command(SSD1306_DISPLAYON);
 800722a:	20af      	movs	r0, #175	; 0xaf
 800722c:	f7ff fedc 	bl	8006fe8 <ssd1306_command>
}
 8007230:	bf00      	nop
 8007232:	3708      	adds	r7, #8
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}
 8007238:	48000400 	.word	0x48000400
 800723c:	20004000 	.word	0x20004000

08007240 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b082      	sub	sp, #8
 8007244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007246:	4b11      	ldr	r3, [pc, #68]	; (800728c <HAL_MspInit+0x4c>)
 8007248:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800724a:	4a10      	ldr	r2, [pc, #64]	; (800728c <HAL_MspInit+0x4c>)
 800724c:	f043 0301 	orr.w	r3, r3, #1
 8007250:	6613      	str	r3, [r2, #96]	; 0x60
 8007252:	4b0e      	ldr	r3, [pc, #56]	; (800728c <HAL_MspInit+0x4c>)
 8007254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007256:	f003 0301 	and.w	r3, r3, #1
 800725a:	607b      	str	r3, [r7, #4]
 800725c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800725e:	4b0b      	ldr	r3, [pc, #44]	; (800728c <HAL_MspInit+0x4c>)
 8007260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007262:	4a0a      	ldr	r2, [pc, #40]	; (800728c <HAL_MspInit+0x4c>)
 8007264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007268:	6593      	str	r3, [r2, #88]	; 0x58
 800726a:	4b08      	ldr	r3, [pc, #32]	; (800728c <HAL_MspInit+0x4c>)
 800726c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800726e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007272:	603b      	str	r3, [r7, #0]
 8007274:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007276:	2200      	movs	r2, #0
 8007278:	210f      	movs	r1, #15
 800727a:	f06f 0001 	mvn.w	r0, #1
 800727e:	f000 fd16 	bl	8007cae <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007282:	bf00      	nop
 8007284:	3708      	adds	r7, #8
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	40021000 	.word	0x40021000

08007290 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b08c      	sub	sp, #48	; 0x30
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8007298:	2300      	movs	r3, #0
 800729a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 800729e:	4b2e      	ldr	r3, [pc, #184]	; (8007358 <HAL_InitTick+0xc8>)
 80072a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072a2:	4a2d      	ldr	r2, [pc, #180]	; (8007358 <HAL_InitTick+0xc8>)
 80072a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80072a8:	6613      	str	r3, [r2, #96]	; 0x60
 80072aa:	4b2b      	ldr	r3, [pc, #172]	; (8007358 <HAL_InitTick+0xc8>)
 80072ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80072b2:	60bb      	str	r3, [r7, #8]
 80072b4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80072b6:	f107 020c 	add.w	r2, r7, #12
 80072ba:	f107 0310 	add.w	r3, r7, #16
 80072be:	4611      	mov	r1, r2
 80072c0:	4618      	mov	r0, r3
 80072c2:	f002 f9db 	bl	800967c <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80072c6:	f002 f9c3 	bl	8009650 <HAL_RCC_GetPCLK2Freq>
 80072ca:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80072cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ce:	4a23      	ldr	r2, [pc, #140]	; (800735c <HAL_InitTick+0xcc>)
 80072d0:	fba2 2303 	umull	r2, r3, r2, r3
 80072d4:	0c9b      	lsrs	r3, r3, #18
 80072d6:	3b01      	subs	r3, #1
 80072d8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 80072da:	4b21      	ldr	r3, [pc, #132]	; (8007360 <HAL_InitTick+0xd0>)
 80072dc:	4a21      	ldr	r2, [pc, #132]	; (8007364 <HAL_InitTick+0xd4>)
 80072de:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 80072e0:	4b1f      	ldr	r3, [pc, #124]	; (8007360 <HAL_InitTick+0xd0>)
 80072e2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80072e6:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 80072e8:	4a1d      	ldr	r2, [pc, #116]	; (8007360 <HAL_InitTick+0xd0>)
 80072ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ec:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 80072ee:	4b1c      	ldr	r3, [pc, #112]	; (8007360 <HAL_InitTick+0xd0>)
 80072f0:	2200      	movs	r2, #0
 80072f2:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80072f4:	4b1a      	ldr	r3, [pc, #104]	; (8007360 <HAL_InitTick+0xd0>)
 80072f6:	2200      	movs	r2, #0
 80072f8:	609a      	str	r2, [r3, #8]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80072fa:	4b19      	ldr	r3, [pc, #100]	; (8007360 <HAL_InitTick+0xd0>)
 80072fc:	2200      	movs	r2, #0
 80072fe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim17);
 8007300:	4817      	ldr	r0, [pc, #92]	; (8007360 <HAL_InitTick+0xd0>)
 8007302:	f004 fb47 	bl	800b994 <HAL_TIM_Base_Init>
 8007306:	4603      	mov	r3, r0
 8007308:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800730c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007310:	2b00      	cmp	r3, #0
 8007312:	d11b      	bne.n	800734c <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 8007314:	4812      	ldr	r0, [pc, #72]	; (8007360 <HAL_InitTick+0xd0>)
 8007316:	f004 fb95 	bl	800ba44 <HAL_TIM_Base_Start_IT>
 800731a:	4603      	mov	r3, r0
 800731c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8007320:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007324:	2b00      	cmp	r3, #0
 8007326:	d111      	bne.n	800734c <HAL_InitTick+0xbc>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8007328:	201a      	movs	r0, #26
 800732a:	f000 fcdc 	bl	8007ce6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2b0f      	cmp	r3, #15
 8007332:	d808      	bhi.n	8007346 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority, 0U);
 8007334:	2200      	movs	r2, #0
 8007336:	6879      	ldr	r1, [r7, #4]
 8007338:	201a      	movs	r0, #26
 800733a:	f000 fcb8 	bl	8007cae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800733e:	4a0a      	ldr	r2, [pc, #40]	; (8007368 <HAL_InitTick+0xd8>)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6013      	str	r3, [r2, #0]
 8007344:	e002      	b.n	800734c <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800734c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007350:	4618      	mov	r0, r3
 8007352:	3730      	adds	r7, #48	; 0x30
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}
 8007358:	40021000 	.word	0x40021000
 800735c:	431bde83 	.word	0x431bde83
 8007360:	20004404 	.word	0x20004404
 8007364:	40014800 	.word	0x40014800
 8007368:	20000098 	.word	0x20000098

0800736c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800736c:	b480      	push	{r7}
 800736e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007370:	e7fe      	b.n	8007370 <NMI_Handler+0x4>

08007372 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007372:	b480      	push	{r7}
 8007374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007376:	e7fe      	b.n	8007376 <HardFault_Handler+0x4>

08007378 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007378:	b480      	push	{r7}
 800737a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800737c:	e7fe      	b.n	800737c <MemManage_Handler+0x4>

0800737e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800737e:	b480      	push	{r7}
 8007380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007382:	e7fe      	b.n	8007382 <BusFault_Handler+0x4>

08007384 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007384:	b480      	push	{r7}
 8007386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007388:	e7fe      	b.n	8007388 <UsageFault_Handler+0x4>

0800738a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800738a:	b480      	push	{r7}
 800738c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800738e:	bf00      	nop
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr

08007398 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800739c:	4802      	ldr	r0, [pc, #8]	; (80073a8 <DMA1_Channel1_IRQHandler+0x10>)
 800739e:	f000 fe93 	bl	80080c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80073a2:	bf00      	nop
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop
 80073a8:	2000457c 	.word	0x2000457c

080073ac <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80073b0:	4802      	ldr	r0, [pc, #8]	; (80073bc <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80073b2:	f004 fd4c 	bl	800be4e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80073b6:	bf00      	nop
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	bf00      	nop
 80073bc:	20004404 	.word	0x20004404

080073c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80073c4:	4802      	ldr	r0, [pc, #8]	; (80073d0 <USART1_IRQHandler+0x10>)
 80073c6:	f005 fe23 	bl	800d010 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80073ca:	bf00      	nop
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop
 80073d0:	200044ec 	.word	0x200044ec

080073d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80073d4:	b480      	push	{r7}
 80073d6:	af00      	add	r7, sp, #0
  return 1;
 80073d8:	2301      	movs	r3, #1
}
 80073da:	4618      	mov	r0, r3
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr

080073e4 <_kill>:

int _kill(int pid, int sig)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b082      	sub	sp, #8
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80073ee:	f00b fa6d 	bl	80128cc <__errno>
 80073f2:	4603      	mov	r3, r0
 80073f4:	2216      	movs	r2, #22
 80073f6:	601a      	str	r2, [r3, #0]
  return -1;
 80073f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3708      	adds	r7, #8
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <_exit>:

void _exit (int status)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b082      	sub	sp, #8
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800740c:	f04f 31ff 	mov.w	r1, #4294967295
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f7ff ffe7 	bl	80073e4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8007416:	e7fe      	b.n	8007416 <_exit+0x12>

08007418 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b086      	sub	sp, #24
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007424:	2300      	movs	r3, #0
 8007426:	617b      	str	r3, [r7, #20]
 8007428:	e00a      	b.n	8007440 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800742a:	f3af 8000 	nop.w
 800742e:	4601      	mov	r1, r0
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	1c5a      	adds	r2, r3, #1
 8007434:	60ba      	str	r2, [r7, #8]
 8007436:	b2ca      	uxtb	r2, r1
 8007438:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	3301      	adds	r3, #1
 800743e:	617b      	str	r3, [r7, #20]
 8007440:	697a      	ldr	r2, [r7, #20]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	429a      	cmp	r2, r3
 8007446:	dbf0      	blt.n	800742a <_read+0x12>
  }

  return len;
 8007448:	687b      	ldr	r3, [r7, #4]
}
 800744a:	4618      	mov	r0, r3
 800744c:	3718      	adds	r7, #24
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}

08007452 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007452:	b580      	push	{r7, lr}
 8007454:	b086      	sub	sp, #24
 8007456:	af00      	add	r7, sp, #0
 8007458:	60f8      	str	r0, [r7, #12]
 800745a:	60b9      	str	r1, [r7, #8]
 800745c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800745e:	2300      	movs	r3, #0
 8007460:	617b      	str	r3, [r7, #20]
 8007462:	e009      	b.n	8007478 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	1c5a      	adds	r2, r3, #1
 8007468:	60ba      	str	r2, [r7, #8]
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	4618      	mov	r0, r3
 800746e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	3301      	adds	r3, #1
 8007476:	617b      	str	r3, [r7, #20]
 8007478:	697a      	ldr	r2, [r7, #20]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	429a      	cmp	r2, r3
 800747e:	dbf1      	blt.n	8007464 <_write+0x12>
  }
  return len;
 8007480:	687b      	ldr	r3, [r7, #4]
}
 8007482:	4618      	mov	r0, r3
 8007484:	3718      	adds	r7, #24
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}

0800748a <_close>:

int _close(int file)
{
 800748a:	b480      	push	{r7}
 800748c:	b083      	sub	sp, #12
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8007492:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007496:	4618      	mov	r0, r3
 8007498:	370c      	adds	r7, #12
 800749a:	46bd      	mov	sp, r7
 800749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a0:	4770      	bx	lr

080074a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80074a2:	b480      	push	{r7}
 80074a4:	b083      	sub	sp, #12
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
 80074aa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80074b2:	605a      	str	r2, [r3, #4]
  return 0;
 80074b4:	2300      	movs	r3, #0
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	370c      	adds	r7, #12
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr

080074c2 <_isatty>:

int _isatty(int file)
{
 80074c2:	b480      	push	{r7}
 80074c4:	b083      	sub	sp, #12
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80074ca:	2301      	movs	r3, #1
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	370c      	adds	r7, #12
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80074d8:	b480      	push	{r7}
 80074da:	b085      	sub	sp, #20
 80074dc:	af00      	add	r7, sp, #0
 80074de:	60f8      	str	r0, [r7, #12]
 80074e0:	60b9      	str	r1, [r7, #8]
 80074e2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80074e4:	2300      	movs	r3, #0
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3714      	adds	r7, #20
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr
	...

080074f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b086      	sub	sp, #24
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80074fc:	4a14      	ldr	r2, [pc, #80]	; (8007550 <_sbrk+0x5c>)
 80074fe:	4b15      	ldr	r3, [pc, #84]	; (8007554 <_sbrk+0x60>)
 8007500:	1ad3      	subs	r3, r2, r3
 8007502:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007508:	4b13      	ldr	r3, [pc, #76]	; (8007558 <_sbrk+0x64>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d102      	bne.n	8007516 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007510:	4b11      	ldr	r3, [pc, #68]	; (8007558 <_sbrk+0x64>)
 8007512:	4a12      	ldr	r2, [pc, #72]	; (800755c <_sbrk+0x68>)
 8007514:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007516:	4b10      	ldr	r3, [pc, #64]	; (8007558 <_sbrk+0x64>)
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4413      	add	r3, r2
 800751e:	693a      	ldr	r2, [r7, #16]
 8007520:	429a      	cmp	r2, r3
 8007522:	d207      	bcs.n	8007534 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007524:	f00b f9d2 	bl	80128cc <__errno>
 8007528:	4603      	mov	r3, r0
 800752a:	220c      	movs	r2, #12
 800752c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800752e:	f04f 33ff 	mov.w	r3, #4294967295
 8007532:	e009      	b.n	8007548 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007534:	4b08      	ldr	r3, [pc, #32]	; (8007558 <_sbrk+0x64>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800753a:	4b07      	ldr	r3, [pc, #28]	; (8007558 <_sbrk+0x64>)
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	4413      	add	r3, r2
 8007542:	4a05      	ldr	r2, [pc, #20]	; (8007558 <_sbrk+0x64>)
 8007544:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007546:	68fb      	ldr	r3, [r7, #12]
}
 8007548:	4618      	mov	r0, r3
 800754a:	3718      	adds	r7, #24
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}
 8007550:	20050000 	.word	0x20050000
 8007554:	00000c00 	.word	0x00000c00
 8007558:	20004450 	.word	0x20004450
 800755c:	20012610 	.word	0x20012610

08007560 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8007560:	b480      	push	{r7}
 8007562:	af00      	add	r7, sp, #0
#if defined(USER_VECT_TAB_ADDRESS)
  /* Configure the Vector Table location -------------------------------------*/
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
 8007564:	4b08      	ldr	r3, [pc, #32]	; (8007588 <SystemInit+0x28>)
 8007566:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800756a:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800756c:	4b06      	ldr	r3, [pc, #24]	; (8007588 <SystemInit+0x28>)
 800756e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007572:	4a05      	ldr	r2, [pc, #20]	; (8007588 <SystemInit+0x28>)
 8007574:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007578:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800757c:	bf00      	nop
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr
 8007586:	bf00      	nop
 8007588:	e000ed00 	.word	0xe000ed00

0800758c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b08e      	sub	sp, #56	; 0x38
 8007590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007592:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007596:	2200      	movs	r2, #0
 8007598:	601a      	str	r2, [r3, #0]
 800759a:	605a      	str	r2, [r3, #4]
 800759c:	609a      	str	r2, [r3, #8]
 800759e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80075a0:	f107 031c 	add.w	r3, r7, #28
 80075a4:	2200      	movs	r2, #0
 80075a6:	601a      	str	r2, [r3, #0]
 80075a8:	605a      	str	r2, [r3, #4]
 80075aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80075ac:	463b      	mov	r3, r7
 80075ae:	2200      	movs	r2, #0
 80075b0:	601a      	str	r2, [r3, #0]
 80075b2:	605a      	str	r2, [r3, #4]
 80075b4:	609a      	str	r2, [r3, #8]
 80075b6:	60da      	str	r2, [r3, #12]
 80075b8:	611a      	str	r2, [r3, #16]
 80075ba:	615a      	str	r2, [r3, #20]
 80075bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80075be:	4b2d      	ldr	r3, [pc, #180]	; (8007674 <MX_TIM2_Init+0xe8>)
 80075c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80075c4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80075c6:	4b2b      	ldr	r3, [pc, #172]	; (8007674 <MX_TIM2_Init+0xe8>)
 80075c8:	2200      	movs	r2, #0
 80075ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80075cc:	4b29      	ldr	r3, [pc, #164]	; (8007674 <MX_TIM2_Init+0xe8>)
 80075ce:	2200      	movs	r2, #0
 80075d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80075d2:	4b28      	ldr	r3, [pc, #160]	; (8007674 <MX_TIM2_Init+0xe8>)
 80075d4:	f04f 32ff 	mov.w	r2, #4294967295
 80075d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80075da:	4b26      	ldr	r3, [pc, #152]	; (8007674 <MX_TIM2_Init+0xe8>)
 80075dc:	2200      	movs	r2, #0
 80075de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80075e0:	4b24      	ldr	r3, [pc, #144]	; (8007674 <MX_TIM2_Init+0xe8>)
 80075e2:	2200      	movs	r2, #0
 80075e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80075e6:	4823      	ldr	r0, [pc, #140]	; (8007674 <MX_TIM2_Init+0xe8>)
 80075e8:	f004 f9d4 	bl	800b994 <HAL_TIM_Base_Init>
 80075ec:	4603      	mov	r3, r0
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d001      	beq.n	80075f6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80075f2:	f7fd fb77 	bl	8004ce4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80075f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80075fa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80075fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007600:	4619      	mov	r1, r3
 8007602:	481c      	ldr	r0, [pc, #112]	; (8007674 <MX_TIM2_Init+0xe8>)
 8007604:	f004 fe56 	bl	800c2b4 <HAL_TIM_ConfigClockSource>
 8007608:	4603      	mov	r3, r0
 800760a:	2b00      	cmp	r3, #0
 800760c:	d001      	beq.n	8007612 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800760e:	f7fd fb69 	bl	8004ce4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8007612:	4818      	ldr	r0, [pc, #96]	; (8007674 <MX_TIM2_Init+0xe8>)
 8007614:	f004 fa86 	bl	800bb24 <HAL_TIM_PWM_Init>
 8007618:	4603      	mov	r3, r0
 800761a:	2b00      	cmp	r3, #0
 800761c:	d001      	beq.n	8007622 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800761e:	f7fd fb61 	bl	8004ce4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007622:	2300      	movs	r3, #0
 8007624:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007626:	2300      	movs	r3, #0
 8007628:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800762a:	f107 031c 	add.w	r3, r7, #28
 800762e:	4619      	mov	r1, r3
 8007630:	4810      	ldr	r0, [pc, #64]	; (8007674 <MX_TIM2_Init+0xe8>)
 8007632:	f005 fb61 	bl	800ccf8 <HAL_TIMEx_MasterConfigSynchronization>
 8007636:	4603      	mov	r3, r0
 8007638:	2b00      	cmp	r3, #0
 800763a:	d001      	beq.n	8007640 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800763c:	f7fd fb52 	bl	8004ce4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007640:	2360      	movs	r3, #96	; 0x60
 8007642:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8007644:	2300      	movs	r3, #0
 8007646:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007648:	2300      	movs	r3, #0
 800764a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800764c:	2300      	movs	r3, #0
 800764e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007650:	463b      	mov	r3, r7
 8007652:	2200      	movs	r2, #0
 8007654:	4619      	mov	r1, r3
 8007656:	4807      	ldr	r0, [pc, #28]	; (8007674 <MX_TIM2_Init+0xe8>)
 8007658:	f004 fd18 	bl	800c08c <HAL_TIM_PWM_ConfigChannel>
 800765c:	4603      	mov	r3, r0
 800765e:	2b00      	cmp	r3, #0
 8007660:	d001      	beq.n	8007666 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8007662:	f7fd fb3f 	bl	8004ce4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8007666:	4803      	ldr	r0, [pc, #12]	; (8007674 <MX_TIM2_Init+0xe8>)
 8007668:	f000 f8bc 	bl	80077e4 <HAL_TIM_MspPostInit>

}
 800766c:	bf00      	nop
 800766e:	3738      	adds	r7, #56	; 0x38
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}
 8007674:	20004454 	.word	0x20004454

08007678 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b08c      	sub	sp, #48	; 0x30
 800767c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800767e:	f107 030c 	add.w	r3, r7, #12
 8007682:	2224      	movs	r2, #36	; 0x24
 8007684:	2100      	movs	r1, #0
 8007686:	4618      	mov	r0, r3
 8007688:	f00b f958 	bl	801293c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800768c:	463b      	mov	r3, r7
 800768e:	2200      	movs	r2, #0
 8007690:	601a      	str	r2, [r3, #0]
 8007692:	605a      	str	r2, [r3, #4]
 8007694:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8007696:	4b21      	ldr	r3, [pc, #132]	; (800771c <MX_TIM5_Init+0xa4>)
 8007698:	4a21      	ldr	r2, [pc, #132]	; (8007720 <MX_TIM5_Init+0xa8>)
 800769a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800769c:	4b1f      	ldr	r3, [pc, #124]	; (800771c <MX_TIM5_Init+0xa4>)
 800769e:	2200      	movs	r2, #0
 80076a0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80076a2:	4b1e      	ldr	r3, [pc, #120]	; (800771c <MX_TIM5_Init+0xa4>)
 80076a4:	2200      	movs	r2, #0
 80076a6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80076a8:	4b1c      	ldr	r3, [pc, #112]	; (800771c <MX_TIM5_Init+0xa4>)
 80076aa:	f04f 32ff 	mov.w	r2, #4294967295
 80076ae:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80076b0:	4b1a      	ldr	r3, [pc, #104]	; (800771c <MX_TIM5_Init+0xa4>)
 80076b2:	2200      	movs	r2, #0
 80076b4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80076b6:	4b19      	ldr	r3, [pc, #100]	; (800771c <MX_TIM5_Init+0xa4>)
 80076b8:	2200      	movs	r2, #0
 80076ba:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80076bc:	2303      	movs	r3, #3
 80076be:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80076c0:	2300      	movs	r3, #0
 80076c2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80076c4:	2301      	movs	r3, #1
 80076c6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80076c8:	2300      	movs	r3, #0
 80076ca:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80076cc:	230f      	movs	r3, #15
 80076ce:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80076d0:	2300      	movs	r3, #0
 80076d2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80076d4:	2301      	movs	r3, #1
 80076d6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80076d8:	2300      	movs	r3, #0
 80076da:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 80076dc:	230f      	movs	r3, #15
 80076de:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80076e0:	f107 030c 	add.w	r3, r7, #12
 80076e4:	4619      	mov	r1, r3
 80076e6:	480d      	ldr	r0, [pc, #52]	; (800771c <MX_TIM5_Init+0xa4>)
 80076e8:	f004 fa7d 	bl	800bbe6 <HAL_TIM_Encoder_Init>
 80076ec:	4603      	mov	r3, r0
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d001      	beq.n	80076f6 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 80076f2:	f7fd faf7 	bl	8004ce4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80076f6:	2300      	movs	r3, #0
 80076f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80076fa:	2300      	movs	r3, #0
 80076fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80076fe:	463b      	mov	r3, r7
 8007700:	4619      	mov	r1, r3
 8007702:	4806      	ldr	r0, [pc, #24]	; (800771c <MX_TIM5_Init+0xa4>)
 8007704:	f005 faf8 	bl	800ccf8 <HAL_TIMEx_MasterConfigSynchronization>
 8007708:	4603      	mov	r3, r0
 800770a:	2b00      	cmp	r3, #0
 800770c:	d001      	beq.n	8007712 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 800770e:	f7fd fae9 	bl	8004ce4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8007712:	bf00      	nop
 8007714:	3730      	adds	r7, #48	; 0x30
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}
 800771a:	bf00      	nop
 800771c:	200044a0 	.word	0x200044a0
 8007720:	40000c00 	.word	0x40000c00

08007724 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8007724:	b480      	push	{r7}
 8007726:	b085      	sub	sp, #20
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007734:	d10b      	bne.n	800774e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007736:	4b09      	ldr	r3, [pc, #36]	; (800775c <HAL_TIM_Base_MspInit+0x38>)
 8007738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800773a:	4a08      	ldr	r2, [pc, #32]	; (800775c <HAL_TIM_Base_MspInit+0x38>)
 800773c:	f043 0301 	orr.w	r3, r3, #1
 8007740:	6593      	str	r3, [r2, #88]	; 0x58
 8007742:	4b06      	ldr	r3, [pc, #24]	; (800775c <HAL_TIM_Base_MspInit+0x38>)
 8007744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007746:	f003 0301 	and.w	r3, r3, #1
 800774a:	60fb      	str	r3, [r7, #12]
 800774c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800774e:	bf00      	nop
 8007750:	3714      	adds	r7, #20
 8007752:	46bd      	mov	sp, r7
 8007754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007758:	4770      	bx	lr
 800775a:	bf00      	nop
 800775c:	40021000 	.word	0x40021000

08007760 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b08a      	sub	sp, #40	; 0x28
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007768:	f107 0314 	add.w	r3, r7, #20
 800776c:	2200      	movs	r2, #0
 800776e:	601a      	str	r2, [r3, #0]
 8007770:	605a      	str	r2, [r3, #4]
 8007772:	609a      	str	r2, [r3, #8]
 8007774:	60da      	str	r2, [r3, #12]
 8007776:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM5)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a17      	ldr	r2, [pc, #92]	; (80077dc <HAL_TIM_Encoder_MspInit+0x7c>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d128      	bne.n	80077d4 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8007782:	4b17      	ldr	r3, [pc, #92]	; (80077e0 <HAL_TIM_Encoder_MspInit+0x80>)
 8007784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007786:	4a16      	ldr	r2, [pc, #88]	; (80077e0 <HAL_TIM_Encoder_MspInit+0x80>)
 8007788:	f043 0308 	orr.w	r3, r3, #8
 800778c:	6593      	str	r3, [r2, #88]	; 0x58
 800778e:	4b14      	ldr	r3, [pc, #80]	; (80077e0 <HAL_TIM_Encoder_MspInit+0x80>)
 8007790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007792:	f003 0308 	and.w	r3, r3, #8
 8007796:	613b      	str	r3, [r7, #16]
 8007798:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800779a:	4b11      	ldr	r3, [pc, #68]	; (80077e0 <HAL_TIM_Encoder_MspInit+0x80>)
 800779c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800779e:	4a10      	ldr	r2, [pc, #64]	; (80077e0 <HAL_TIM_Encoder_MspInit+0x80>)
 80077a0:	f043 0301 	orr.w	r3, r3, #1
 80077a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80077a6:	4b0e      	ldr	r3, [pc, #56]	; (80077e0 <HAL_TIM_Encoder_MspInit+0x80>)
 80077a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077aa:	f003 0301 	and.w	r3, r3, #1
 80077ae:	60fb      	str	r3, [r7, #12]
 80077b0:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80077b2:	2303      	movs	r3, #3
 80077b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077b6:	2302      	movs	r3, #2
 80077b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077ba:	2300      	movs	r3, #0
 80077bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80077be:	2300      	movs	r3, #0
 80077c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80077c2:	2302      	movs	r3, #2
 80077c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80077c6:	f107 0314 	add.w	r3, r7, #20
 80077ca:	4619      	mov	r1, r3
 80077cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80077d0:	f000 fdca 	bl	8008368 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80077d4:	bf00      	nop
 80077d6:	3728      	adds	r7, #40	; 0x28
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}
 80077dc:	40000c00 	.word	0x40000c00
 80077e0:	40021000 	.word	0x40021000

080077e4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b088      	sub	sp, #32
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077ec:	f107 030c 	add.w	r3, r7, #12
 80077f0:	2200      	movs	r2, #0
 80077f2:	601a      	str	r2, [r3, #0]
 80077f4:	605a      	str	r2, [r3, #4]
 80077f6:	609a      	str	r2, [r3, #8]
 80077f8:	60da      	str	r2, [r3, #12]
 80077fa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007804:	d11d      	bne.n	8007842 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007806:	4b11      	ldr	r3, [pc, #68]	; (800784c <HAL_TIM_MspPostInit+0x68>)
 8007808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800780a:	4a10      	ldr	r2, [pc, #64]	; (800784c <HAL_TIM_MspPostInit+0x68>)
 800780c:	f043 0301 	orr.w	r3, r3, #1
 8007810:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007812:	4b0e      	ldr	r3, [pc, #56]	; (800784c <HAL_TIM_MspPostInit+0x68>)
 8007814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007816:	f003 0301 	and.w	r3, r3, #1
 800781a:	60bb      	str	r3, [r7, #8]
 800781c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800781e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007822:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007824:	2302      	movs	r3, #2
 8007826:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007828:	2300      	movs	r3, #0
 800782a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800782c:	2300      	movs	r3, #0
 800782e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8007830:	2301      	movs	r3, #1
 8007832:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007834:	f107 030c 	add.w	r3, r7, #12
 8007838:	4619      	mov	r1, r3
 800783a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800783e:	f000 fd93 	bl	8008368 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8007842:	bf00      	nop
 8007844:	3720      	adds	r7, #32
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
 800784a:	bf00      	nop
 800784c:	40021000 	.word	0x40021000

08007850 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007854:	4b24      	ldr	r3, [pc, #144]	; (80078e8 <MX_USART1_UART_Init+0x98>)
 8007856:	4a25      	ldr	r2, [pc, #148]	; (80078ec <MX_USART1_UART_Init+0x9c>)
 8007858:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2400;
 800785a:	4b23      	ldr	r3, [pc, #140]	; (80078e8 <MX_USART1_UART_Init+0x98>)
 800785c:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8007860:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007862:	4b21      	ldr	r3, [pc, #132]	; (80078e8 <MX_USART1_UART_Init+0x98>)
 8007864:	2200      	movs	r2, #0
 8007866:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007868:	4b1f      	ldr	r3, [pc, #124]	; (80078e8 <MX_USART1_UART_Init+0x98>)
 800786a:	2200      	movs	r2, #0
 800786c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800786e:	4b1e      	ldr	r3, [pc, #120]	; (80078e8 <MX_USART1_UART_Init+0x98>)
 8007870:	2200      	movs	r2, #0
 8007872:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007874:	4b1c      	ldr	r3, [pc, #112]	; (80078e8 <MX_USART1_UART_Init+0x98>)
 8007876:	220c      	movs	r2, #12
 8007878:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800787a:	4b1b      	ldr	r3, [pc, #108]	; (80078e8 <MX_USART1_UART_Init+0x98>)
 800787c:	2200      	movs	r2, #0
 800787e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007880:	4b19      	ldr	r3, [pc, #100]	; (80078e8 <MX_USART1_UART_Init+0x98>)
 8007882:	2200      	movs	r2, #0
 8007884:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007886:	4b18      	ldr	r3, [pc, #96]	; (80078e8 <MX_USART1_UART_Init+0x98>)
 8007888:	2200      	movs	r2, #0
 800788a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800788c:	4b16      	ldr	r3, [pc, #88]	; (80078e8 <MX_USART1_UART_Init+0x98>)
 800788e:	2200      	movs	r2, #0
 8007890:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8007892:	4b15      	ldr	r3, [pc, #84]	; (80078e8 <MX_USART1_UART_Init+0x98>)
 8007894:	2210      	movs	r2, #16
 8007896:	629a      	str	r2, [r3, #40]	; 0x28
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8007898:	4b13      	ldr	r3, [pc, #76]	; (80078e8 <MX_USART1_UART_Init+0x98>)
 800789a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800789e:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80078a0:	4811      	ldr	r0, [pc, #68]	; (80078e8 <MX_USART1_UART_Init+0x98>)
 80078a2:	f005 facf 	bl	800ce44 <HAL_UART_Init>
 80078a6:	4603      	mov	r3, r0
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d001      	beq.n	80078b0 <MX_USART1_UART_Init+0x60>
  {
    Error_Handler();
 80078ac:	f7fd fa1a 	bl	8004ce4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80078b0:	2100      	movs	r1, #0
 80078b2:	480d      	ldr	r0, [pc, #52]	; (80078e8 <MX_USART1_UART_Init+0x98>)
 80078b4:	f006 fe74 	bl	800e5a0 <HAL_UARTEx_SetTxFifoThreshold>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d001      	beq.n	80078c2 <MX_USART1_UART_Init+0x72>
  {
    Error_Handler();
 80078be:	f7fd fa11 	bl	8004ce4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80078c2:	2100      	movs	r1, #0
 80078c4:	4808      	ldr	r0, [pc, #32]	; (80078e8 <MX_USART1_UART_Init+0x98>)
 80078c6:	f006 fea9 	bl	800e61c <HAL_UARTEx_SetRxFifoThreshold>
 80078ca:	4603      	mov	r3, r0
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d001      	beq.n	80078d4 <MX_USART1_UART_Init+0x84>
  {
    Error_Handler();
 80078d0:	f7fd fa08 	bl	8004ce4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80078d4:	4804      	ldr	r0, [pc, #16]	; (80078e8 <MX_USART1_UART_Init+0x98>)
 80078d6:	f006 fe2a 	bl	800e52e <HAL_UARTEx_DisableFifoMode>
 80078da:	4603      	mov	r3, r0
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d001      	beq.n	80078e4 <MX_USART1_UART_Init+0x94>
  {
    Error_Handler();
 80078e0:	f7fd fa00 	bl	8004ce4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80078e4:	bf00      	nop
 80078e6:	bd80      	pop	{r7, pc}
 80078e8:	200044ec 	.word	0x200044ec
 80078ec:	40013800 	.word	0x40013800

080078f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b0b0      	sub	sp, #192	; 0xc0
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078f8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80078fc:	2200      	movs	r2, #0
 80078fe:	601a      	str	r2, [r3, #0]
 8007900:	605a      	str	r2, [r3, #4]
 8007902:	609a      	str	r2, [r3, #8]
 8007904:	60da      	str	r2, [r3, #12]
 8007906:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007908:	f107 0314 	add.w	r3, r7, #20
 800790c:	2298      	movs	r2, #152	; 0x98
 800790e:	2100      	movs	r1, #0
 8007910:	4618      	mov	r0, r3
 8007912:	f00b f813 	bl	801293c <memset>
  if(uartHandle->Instance==USART1)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a36      	ldr	r2, [pc, #216]	; (80079f4 <HAL_UART_MspInit+0x104>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d165      	bne.n	80079ec <HAL_UART_MspInit+0xfc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8007920:	2301      	movs	r3, #1
 8007922:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8007924:	2300      	movs	r3, #0
 8007926:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007928:	f107 0314 	add.w	r3, r7, #20
 800792c:	4618      	mov	r0, r3
 800792e:	f001 ff97 	bl	8009860 <HAL_RCCEx_PeriphCLKConfig>
 8007932:	4603      	mov	r3, r0
 8007934:	2b00      	cmp	r3, #0
 8007936:	d001      	beq.n	800793c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8007938:	f7fd f9d4 	bl	8004ce4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800793c:	4b2e      	ldr	r3, [pc, #184]	; (80079f8 <HAL_UART_MspInit+0x108>)
 800793e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007940:	4a2d      	ldr	r2, [pc, #180]	; (80079f8 <HAL_UART_MspInit+0x108>)
 8007942:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007946:	6613      	str	r3, [r2, #96]	; 0x60
 8007948:	4b2b      	ldr	r3, [pc, #172]	; (80079f8 <HAL_UART_MspInit+0x108>)
 800794a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800794c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007950:	613b      	str	r3, [r7, #16]
 8007952:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007954:	4b28      	ldr	r3, [pc, #160]	; (80079f8 <HAL_UART_MspInit+0x108>)
 8007956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007958:	4a27      	ldr	r2, [pc, #156]	; (80079f8 <HAL_UART_MspInit+0x108>)
 800795a:	f043 0301 	orr.w	r3, r3, #1
 800795e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007960:	4b25      	ldr	r3, [pc, #148]	; (80079f8 <HAL_UART_MspInit+0x108>)
 8007962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007964:	f003 0301 	and.w	r3, r3, #1
 8007968:	60fb      	str	r3, [r7, #12]
 800796a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800796c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8007970:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007974:	2302      	movs	r3, #2
 8007976:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800797a:	2300      	movs	r3, #0
 800797c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007980:	2303      	movs	r3, #3
 8007982:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007986:	2307      	movs	r3, #7
 8007988:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800798c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8007990:	4619      	mov	r1, r3
 8007992:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007996:	f000 fce7 	bl	8008368 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 800799a:	4b18      	ldr	r3, [pc, #96]	; (80079fc <HAL_UART_MspInit+0x10c>)
 800799c:	4a18      	ldr	r2, [pc, #96]	; (8007a00 <HAL_UART_MspInit+0x110>)
 800799e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80079a0:	4b16      	ldr	r3, [pc, #88]	; (80079fc <HAL_UART_MspInit+0x10c>)
 80079a2:	2219      	movs	r2, #25
 80079a4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80079a6:	4b15      	ldr	r3, [pc, #84]	; (80079fc <HAL_UART_MspInit+0x10c>)
 80079a8:	2200      	movs	r2, #0
 80079aa:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80079ac:	4b13      	ldr	r3, [pc, #76]	; (80079fc <HAL_UART_MspInit+0x10c>)
 80079ae:	2200      	movs	r2, #0
 80079b0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80079b2:	4b12      	ldr	r3, [pc, #72]	; (80079fc <HAL_UART_MspInit+0x10c>)
 80079b4:	2280      	movs	r2, #128	; 0x80
 80079b6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80079b8:	4b10      	ldr	r3, [pc, #64]	; (80079fc <HAL_UART_MspInit+0x10c>)
 80079ba:	2200      	movs	r2, #0
 80079bc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80079be:	4b0f      	ldr	r3, [pc, #60]	; (80079fc <HAL_UART_MspInit+0x10c>)
 80079c0:	2200      	movs	r2, #0
 80079c2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80079c4:	4b0d      	ldr	r3, [pc, #52]	; (80079fc <HAL_UART_MspInit+0x10c>)
 80079c6:	2200      	movs	r2, #0
 80079c8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80079ca:	4b0c      	ldr	r3, [pc, #48]	; (80079fc <HAL_UART_MspInit+0x10c>)
 80079cc:	2200      	movs	r2, #0
 80079ce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80079d0:	480a      	ldr	r0, [pc, #40]	; (80079fc <HAL_UART_MspInit+0x10c>)
 80079d2:	f000 f99b 	bl	8007d0c <HAL_DMA_Init>
 80079d6:	4603      	mov	r3, r0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d001      	beq.n	80079e0 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 80079dc:	f7fd f982 	bl	8004ce4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	4a06      	ldr	r2, [pc, #24]	; (80079fc <HAL_UART_MspInit+0x10c>)
 80079e4:	67da      	str	r2, [r3, #124]	; 0x7c
 80079e6:	4a05      	ldr	r2, [pc, #20]	; (80079fc <HAL_UART_MspInit+0x10c>)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80079ec:	bf00      	nop
 80079ee:	37c0      	adds	r7, #192	; 0xc0
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}
 80079f4:	40013800 	.word	0x40013800
 80079f8:	40021000 	.word	0x40021000
 80079fc:	2000457c 	.word	0x2000457c
 8007a00:	40020008 	.word	0x40020008

08007a04 <Reset_Handler>:
 8007a04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007a3c <LoopForever+0x2>
 8007a08:	f7ff fdaa 	bl	8007560 <SystemInit>
 8007a0c:	480c      	ldr	r0, [pc, #48]	; (8007a40 <LoopForever+0x6>)
 8007a0e:	490d      	ldr	r1, [pc, #52]	; (8007a44 <LoopForever+0xa>)
 8007a10:	4a0d      	ldr	r2, [pc, #52]	; (8007a48 <LoopForever+0xe>)
 8007a12:	2300      	movs	r3, #0
 8007a14:	e002      	b.n	8007a1c <LoopCopyDataInit>

08007a16 <CopyDataInit>:
 8007a16:	58d4      	ldr	r4, [r2, r3]
 8007a18:	50c4      	str	r4, [r0, r3]
 8007a1a:	3304      	adds	r3, #4

08007a1c <LoopCopyDataInit>:
 8007a1c:	18c4      	adds	r4, r0, r3
 8007a1e:	428c      	cmp	r4, r1
 8007a20:	d3f9      	bcc.n	8007a16 <CopyDataInit>
 8007a22:	4a0a      	ldr	r2, [pc, #40]	; (8007a4c <LoopForever+0x12>)
 8007a24:	4c0a      	ldr	r4, [pc, #40]	; (8007a50 <LoopForever+0x16>)
 8007a26:	2300      	movs	r3, #0
 8007a28:	e001      	b.n	8007a2e <LoopFillZerobss>

08007a2a <FillZerobss>:
 8007a2a:	6013      	str	r3, [r2, #0]
 8007a2c:	3204      	adds	r2, #4

08007a2e <LoopFillZerobss>:
 8007a2e:	42a2      	cmp	r2, r4
 8007a30:	d3fb      	bcc.n	8007a2a <FillZerobss>
 8007a32:	f00a ff51 	bl	80128d8 <__libc_init_array>
 8007a36:	f7fd f8a5 	bl	8004b84 <main>

08007a3a <LoopForever>:
 8007a3a:	e7fe      	b.n	8007a3a <LoopForever>
 8007a3c:	20050000 	.word	0x20050000
 8007a40:	20000000 	.word	0x20000000
 8007a44:	20000278 	.word	0x20000278
 8007a48:	08019210 	.word	0x08019210
 8007a4c:	20000278 	.word	0x20000278
 8007a50:	20012610 	.word	0x20012610

08007a54 <ADC1_2_IRQHandler>:
 8007a54:	e7fe      	b.n	8007a54 <ADC1_2_IRQHandler>

08007a56 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007a56:	b580      	push	{r7, lr}
 8007a58:	b082      	sub	sp, #8
 8007a5a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007a60:	2003      	movs	r0, #3
 8007a62:	f000 f919 	bl	8007c98 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007a66:	2000      	movs	r0, #0
 8007a68:	f7ff fc12 	bl	8007290 <HAL_InitTick>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d002      	beq.n	8007a78 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	71fb      	strb	r3, [r7, #7]
 8007a76:	e001      	b.n	8007a7c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8007a78:	f7ff fbe2 	bl	8007240 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007a7c:	79fb      	ldrb	r3, [r7, #7]
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3708      	adds	r7, #8
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
	...

08007a88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007a8c:	4b06      	ldr	r3, [pc, #24]	; (8007aa8 <HAL_IncTick+0x20>)
 8007a8e:	781b      	ldrb	r3, [r3, #0]
 8007a90:	461a      	mov	r2, r3
 8007a92:	4b06      	ldr	r3, [pc, #24]	; (8007aac <HAL_IncTick+0x24>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4413      	add	r3, r2
 8007a98:	4a04      	ldr	r2, [pc, #16]	; (8007aac <HAL_IncTick+0x24>)
 8007a9a:	6013      	str	r3, [r2, #0]
}
 8007a9c:	bf00      	nop
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop
 8007aa8:	2000009c 	.word	0x2000009c
 8007aac:	200045dc 	.word	0x200045dc

08007ab0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	af00      	add	r7, sp, #0
  return uwTick;
 8007ab4:	4b03      	ldr	r3, [pc, #12]	; (8007ac4 <HAL_GetTick+0x14>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr
 8007ac2:	bf00      	nop
 8007ac4:	200045dc 	.word	0x200045dc

08007ac8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007ad0:	f7ff ffee 	bl	8007ab0 <HAL_GetTick>
 8007ad4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ae0:	d005      	beq.n	8007aee <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8007ae2:	4b0a      	ldr	r3, [pc, #40]	; (8007b0c <HAL_Delay+0x44>)
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	4413      	add	r3, r2
 8007aec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007aee:	bf00      	nop
 8007af0:	f7ff ffde 	bl	8007ab0 <HAL_GetTick>
 8007af4:	4602      	mov	r2, r0
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	1ad3      	subs	r3, r2, r3
 8007afa:	68fa      	ldr	r2, [r7, #12]
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d8f7      	bhi.n	8007af0 <HAL_Delay+0x28>
  {
  }
}
 8007b00:	bf00      	nop
 8007b02:	bf00      	nop
 8007b04:	3710      	adds	r7, #16
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}
 8007b0a:	bf00      	nop
 8007b0c:	2000009c 	.word	0x2000009c

08007b10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b085      	sub	sp, #20
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f003 0307 	and.w	r3, r3, #7
 8007b1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007b20:	4b0c      	ldr	r3, [pc, #48]	; (8007b54 <__NVIC_SetPriorityGrouping+0x44>)
 8007b22:	68db      	ldr	r3, [r3, #12]
 8007b24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007b26:	68ba      	ldr	r2, [r7, #8]
 8007b28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007b2c:	4013      	ands	r3, r2
 8007b2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007b38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007b42:	4a04      	ldr	r2, [pc, #16]	; (8007b54 <__NVIC_SetPriorityGrouping+0x44>)
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	60d3      	str	r3, [r2, #12]
}
 8007b48:	bf00      	nop
 8007b4a:	3714      	adds	r7, #20
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr
 8007b54:	e000ed00 	.word	0xe000ed00

08007b58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007b5c:	4b04      	ldr	r3, [pc, #16]	; (8007b70 <__NVIC_GetPriorityGrouping+0x18>)
 8007b5e:	68db      	ldr	r3, [r3, #12]
 8007b60:	0a1b      	lsrs	r3, r3, #8
 8007b62:	f003 0307 	and.w	r3, r3, #7
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr
 8007b70:	e000ed00 	.word	0xe000ed00

08007b74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	db0b      	blt.n	8007b9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007b86:	79fb      	ldrb	r3, [r7, #7]
 8007b88:	f003 021f 	and.w	r2, r3, #31
 8007b8c:	4907      	ldr	r1, [pc, #28]	; (8007bac <__NVIC_EnableIRQ+0x38>)
 8007b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b92:	095b      	lsrs	r3, r3, #5
 8007b94:	2001      	movs	r0, #1
 8007b96:	fa00 f202 	lsl.w	r2, r0, r2
 8007b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007b9e:	bf00      	nop
 8007ba0:	370c      	adds	r7, #12
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr
 8007baa:	bf00      	nop
 8007bac:	e000e100 	.word	0xe000e100

08007bb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b083      	sub	sp, #12
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	6039      	str	r1, [r7, #0]
 8007bba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	db0a      	blt.n	8007bda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	b2da      	uxtb	r2, r3
 8007bc8:	490c      	ldr	r1, [pc, #48]	; (8007bfc <__NVIC_SetPriority+0x4c>)
 8007bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bce:	0112      	lsls	r2, r2, #4
 8007bd0:	b2d2      	uxtb	r2, r2
 8007bd2:	440b      	add	r3, r1
 8007bd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007bd8:	e00a      	b.n	8007bf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	b2da      	uxtb	r2, r3
 8007bde:	4908      	ldr	r1, [pc, #32]	; (8007c00 <__NVIC_SetPriority+0x50>)
 8007be0:	79fb      	ldrb	r3, [r7, #7]
 8007be2:	f003 030f 	and.w	r3, r3, #15
 8007be6:	3b04      	subs	r3, #4
 8007be8:	0112      	lsls	r2, r2, #4
 8007bea:	b2d2      	uxtb	r2, r2
 8007bec:	440b      	add	r3, r1
 8007bee:	761a      	strb	r2, [r3, #24]
}
 8007bf0:	bf00      	nop
 8007bf2:	370c      	adds	r7, #12
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr
 8007bfc:	e000e100 	.word	0xe000e100
 8007c00:	e000ed00 	.word	0xe000ed00

08007c04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b089      	sub	sp, #36	; 0x24
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	60b9      	str	r1, [r7, #8]
 8007c0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f003 0307 	and.w	r3, r3, #7
 8007c16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007c18:	69fb      	ldr	r3, [r7, #28]
 8007c1a:	f1c3 0307 	rsb	r3, r3, #7
 8007c1e:	2b04      	cmp	r3, #4
 8007c20:	bf28      	it	cs
 8007c22:	2304      	movcs	r3, #4
 8007c24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007c26:	69fb      	ldr	r3, [r7, #28]
 8007c28:	3304      	adds	r3, #4
 8007c2a:	2b06      	cmp	r3, #6
 8007c2c:	d902      	bls.n	8007c34 <NVIC_EncodePriority+0x30>
 8007c2e:	69fb      	ldr	r3, [r7, #28]
 8007c30:	3b03      	subs	r3, #3
 8007c32:	e000      	b.n	8007c36 <NVIC_EncodePriority+0x32>
 8007c34:	2300      	movs	r3, #0
 8007c36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007c38:	f04f 32ff 	mov.w	r2, #4294967295
 8007c3c:	69bb      	ldr	r3, [r7, #24]
 8007c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c42:	43da      	mvns	r2, r3
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	401a      	ands	r2, r3
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	fa01 f303 	lsl.w	r3, r1, r3
 8007c56:	43d9      	mvns	r1, r3
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007c5c:	4313      	orrs	r3, r2
         );
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3724      	adds	r7, #36	; 0x24
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr
	...

08007c6c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007c70:	f3bf 8f4f 	dsb	sy
}
 8007c74:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8007c76:	4b06      	ldr	r3, [pc, #24]	; (8007c90 <__NVIC_SystemReset+0x24>)
 8007c78:	68db      	ldr	r3, [r3, #12]
 8007c7a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8007c7e:	4904      	ldr	r1, [pc, #16]	; (8007c90 <__NVIC_SystemReset+0x24>)
 8007c80:	4b04      	ldr	r3, [pc, #16]	; (8007c94 <__NVIC_SystemReset+0x28>)
 8007c82:	4313      	orrs	r3, r2
 8007c84:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8007c86:	f3bf 8f4f 	dsb	sy
}
 8007c8a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8007c8c:	bf00      	nop
 8007c8e:	e7fd      	b.n	8007c8c <__NVIC_SystemReset+0x20>
 8007c90:	e000ed00 	.word	0xe000ed00
 8007c94:	05fa0004 	.word	0x05fa0004

08007c98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b082      	sub	sp, #8
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f7ff ff35 	bl	8007b10 <__NVIC_SetPriorityGrouping>
}
 8007ca6:	bf00      	nop
 8007ca8:	3708      	adds	r7, #8
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}

08007cae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007cae:	b580      	push	{r7, lr}
 8007cb0:	b086      	sub	sp, #24
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	60b9      	str	r1, [r7, #8]
 8007cb8:	607a      	str	r2, [r7, #4]
 8007cba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007cc0:	f7ff ff4a 	bl	8007b58 <__NVIC_GetPriorityGrouping>
 8007cc4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007cc6:	687a      	ldr	r2, [r7, #4]
 8007cc8:	68b9      	ldr	r1, [r7, #8]
 8007cca:	6978      	ldr	r0, [r7, #20]
 8007ccc:	f7ff ff9a 	bl	8007c04 <NVIC_EncodePriority>
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cd6:	4611      	mov	r1, r2
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f7ff ff69 	bl	8007bb0 <__NVIC_SetPriority>
}
 8007cde:	bf00      	nop
 8007ce0:	3718      	adds	r7, #24
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}

08007ce6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007ce6:	b580      	push	{r7, lr}
 8007ce8:	b082      	sub	sp, #8
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	4603      	mov	r3, r0
 8007cee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f7ff ff3d 	bl	8007b74 <__NVIC_EnableIRQ>
}
 8007cfa:	bf00      	nop
 8007cfc:	3708      	adds	r7, #8
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8007d02:	b580      	push	{r7, lr}
 8007d04:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8007d06:	f7ff ffb1 	bl	8007c6c <__NVIC_SystemReset>
	...

08007d0c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b084      	sub	sp, #16
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d101      	bne.n	8007d1e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	e08d      	b.n	8007e3a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	461a      	mov	r2, r3
 8007d24:	4b47      	ldr	r3, [pc, #284]	; (8007e44 <HAL_DMA_Init+0x138>)
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d80f      	bhi.n	8007d4a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	461a      	mov	r2, r3
 8007d30:	4b45      	ldr	r3, [pc, #276]	; (8007e48 <HAL_DMA_Init+0x13c>)
 8007d32:	4413      	add	r3, r2
 8007d34:	4a45      	ldr	r2, [pc, #276]	; (8007e4c <HAL_DMA_Init+0x140>)
 8007d36:	fba2 2303 	umull	r2, r3, r2, r3
 8007d3a:	091b      	lsrs	r3, r3, #4
 8007d3c:	009a      	lsls	r2, r3, #2
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	4a42      	ldr	r2, [pc, #264]	; (8007e50 <HAL_DMA_Init+0x144>)
 8007d46:	641a      	str	r2, [r3, #64]	; 0x40
 8007d48:	e00e      	b.n	8007d68 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	461a      	mov	r2, r3
 8007d50:	4b40      	ldr	r3, [pc, #256]	; (8007e54 <HAL_DMA_Init+0x148>)
 8007d52:	4413      	add	r3, r2
 8007d54:	4a3d      	ldr	r2, [pc, #244]	; (8007e4c <HAL_DMA_Init+0x140>)
 8007d56:	fba2 2303 	umull	r2, r3, r2, r3
 8007d5a:	091b      	lsrs	r3, r3, #4
 8007d5c:	009a      	lsls	r2, r3, #2
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	4a3c      	ldr	r2, [pc, #240]	; (8007e58 <HAL_DMA_Init+0x14c>)
 8007d66:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2202      	movs	r2, #2
 8007d6c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d82:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007d8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	691b      	ldr	r3, [r3, #16]
 8007d92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007d98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	699b      	ldr	r3, [r3, #24]
 8007d9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007da4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6a1b      	ldr	r3, [r3, #32]
 8007daa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007dac:	68fa      	ldr	r2, [r7, #12]
 8007dae:	4313      	orrs	r3, r2
 8007db0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	68fa      	ldr	r2, [r7, #12]
 8007db8:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 fa72 	bl	80082a4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007dc8:	d102      	bne.n	8007dd0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	685a      	ldr	r2, [r3, #4]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007dd8:	b2d2      	uxtb	r2, r2
 8007dda:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007de4:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d010      	beq.n	8007e10 <HAL_DMA_Init+0x104>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	2b04      	cmp	r3, #4
 8007df4:	d80c      	bhi.n	8007e10 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 fa92 	bl	8008320 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e00:	2200      	movs	r2, #0
 8007e02:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007e0c:	605a      	str	r2, [r3, #4]
 8007e0e:	e008      	b.n	8007e22 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2200      	movs	r2, #0
 8007e26:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2200      	movs	r2, #0
 8007e34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007e38:	2300      	movs	r3, #0
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3710      	adds	r7, #16
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
 8007e42:	bf00      	nop
 8007e44:	40020407 	.word	0x40020407
 8007e48:	bffdfff8 	.word	0xbffdfff8
 8007e4c:	cccccccd 	.word	0xcccccccd
 8007e50:	40020000 	.word	0x40020000
 8007e54:	bffdfbf8 	.word	0xbffdfbf8
 8007e58:	40020400 	.word	0x40020400

08007e5c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b086      	sub	sp, #24
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	60f8      	str	r0, [r7, #12]
 8007e64:	60b9      	str	r1, [r7, #8]
 8007e66:	607a      	str	r2, [r7, #4]
 8007e68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d101      	bne.n	8007e7c <HAL_DMA_Start_IT+0x20>
 8007e78:	2302      	movs	r3, #2
 8007e7a:	e066      	b.n	8007f4a <HAL_DMA_Start_IT+0xee>
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2201      	movs	r2, #1
 8007e80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	2b01      	cmp	r3, #1
 8007e8e:	d155      	bne.n	8007f3c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2202      	movs	r2, #2
 8007e94:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	681a      	ldr	r2, [r3, #0]
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f022 0201 	bic.w	r2, r2, #1
 8007eac:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	68b9      	ldr	r1, [r7, #8]
 8007eb4:	68f8      	ldr	r0, [r7, #12]
 8007eb6:	f000 f9b6 	bl	8008226 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d008      	beq.n	8007ed4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	681a      	ldr	r2, [r3, #0]
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f042 020e 	orr.w	r2, r2, #14
 8007ed0:	601a      	str	r2, [r3, #0]
 8007ed2:	e00f      	b.n	8007ef4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f022 0204 	bic.w	r2, r2, #4
 8007ee2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f042 020a 	orr.w	r2, r2, #10
 8007ef2:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d007      	beq.n	8007f12 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f06:	681a      	ldr	r2, [r3, #0]
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f10:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d007      	beq.n	8007f2a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f1e:	681a      	ldr	r2, [r3, #0]
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f28:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	681a      	ldr	r2, [r3, #0]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f042 0201 	orr.w	r2, r2, #1
 8007f38:	601a      	str	r2, [r3, #0]
 8007f3a:	e005      	b.n	8007f48 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007f44:	2302      	movs	r3, #2
 8007f46:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007f48:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3718      	adds	r7, #24
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}

08007f52 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007f52:	b480      	push	{r7}
 8007f54:	b085      	sub	sp, #20
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007f64:	b2db      	uxtb	r3, r3
 8007f66:	2b02      	cmp	r3, #2
 8007f68:	d008      	beq.n	8007f7c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2204      	movs	r2, #4
 8007f6e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2200      	movs	r2, #0
 8007f74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	e040      	b.n	8007ffe <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	681a      	ldr	r2, [r3, #0]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f022 020e 	bic.w	r2, r2, #14
 8007f8a:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f90:	681a      	ldr	r2, [r3, #0]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007f9a:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f022 0201 	bic.w	r2, r2, #1
 8007faa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fb0:	f003 021c 	and.w	r2, r3, #28
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb8:	2101      	movs	r1, #1
 8007fba:	fa01 f202 	lsl.w	r2, r1, r2
 8007fbe:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007fc8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d00c      	beq.n	8007fec <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fdc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007fe0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fe6:	687a      	ldr	r2, [r7, #4]
 8007fe8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007fea:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2201      	movs	r2, #1
 8007ff0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8007ffc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3714      	adds	r7, #20
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr

0800800a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800800a:	b580      	push	{r7, lr}
 800800c:	b084      	sub	sp, #16
 800800e:	af00      	add	r7, sp, #0
 8008010:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008012:	2300      	movs	r3, #0
 8008014:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800801c:	b2db      	uxtb	r3, r3
 800801e:	2b02      	cmp	r3, #2
 8008020:	d005      	beq.n	800802e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2204      	movs	r2, #4
 8008026:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8008028:	2301      	movs	r3, #1
 800802a:	73fb      	strb	r3, [r7, #15]
 800802c:	e047      	b.n	80080be <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	681a      	ldr	r2, [r3, #0]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f022 020e 	bic.w	r2, r2, #14
 800803c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f022 0201 	bic.w	r2, r2, #1
 800804c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008058:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800805c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008062:	f003 021c 	and.w	r2, r3, #28
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800806a:	2101      	movs	r1, #1
 800806c:	fa01 f202 	lsl.w	r2, r1, r2
 8008070:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008076:	687a      	ldr	r2, [r7, #4]
 8008078:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800807a:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008080:	2b00      	cmp	r3, #0
 8008082:	d00c      	beq.n	800809e <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800808e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008092:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800809c:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2201      	movs	r2, #1
 80080a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2200      	movs	r2, #0
 80080aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d003      	beq.n	80080be <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	4798      	blx	r3
    }
  }
  return status;
 80080be:	7bfb      	ldrb	r3, [r7, #15]
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3710      	adds	r7, #16
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b084      	sub	sp, #16
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080e4:	f003 031c 	and.w	r3, r3, #28
 80080e8:	2204      	movs	r2, #4
 80080ea:	409a      	lsls	r2, r3
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	4013      	ands	r3, r2
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d026      	beq.n	8008142 <HAL_DMA_IRQHandler+0x7a>
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	f003 0304 	and.w	r3, r3, #4
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d021      	beq.n	8008142 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f003 0320 	and.w	r3, r3, #32
 8008108:	2b00      	cmp	r3, #0
 800810a:	d107      	bne.n	800811c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f022 0204 	bic.w	r2, r2, #4
 800811a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008120:	f003 021c 	and.w	r2, r3, #28
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008128:	2104      	movs	r1, #4
 800812a:	fa01 f202 	lsl.w	r2, r1, r2
 800812e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008134:	2b00      	cmp	r3, #0
 8008136:	d071      	beq.n	800821c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8008140:	e06c      	b.n	800821c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008146:	f003 031c 	and.w	r3, r3, #28
 800814a:	2202      	movs	r2, #2
 800814c:	409a      	lsls	r2, r3
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	4013      	ands	r3, r2
 8008152:	2b00      	cmp	r3, #0
 8008154:	d02e      	beq.n	80081b4 <HAL_DMA_IRQHandler+0xec>
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	f003 0302 	and.w	r3, r3, #2
 800815c:	2b00      	cmp	r3, #0
 800815e:	d029      	beq.n	80081b4 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f003 0320 	and.w	r3, r3, #32
 800816a:	2b00      	cmp	r3, #0
 800816c:	d10b      	bne.n	8008186 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	681a      	ldr	r2, [r3, #0]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f022 020a 	bic.w	r2, r2, #10
 800817c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2201      	movs	r2, #1
 8008182:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800818a:	f003 021c 	and.w	r2, r3, #28
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008192:	2102      	movs	r1, #2
 8008194:	fa01 f202 	lsl.w	r2, r1, r2
 8008198:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2200      	movs	r2, #0
 800819e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d038      	beq.n	800821c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80081b2:	e033      	b.n	800821c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081b8:	f003 031c 	and.w	r3, r3, #28
 80081bc:	2208      	movs	r2, #8
 80081be:	409a      	lsls	r2, r3
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	4013      	ands	r3, r2
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d02a      	beq.n	800821e <HAL_DMA_IRQHandler+0x156>
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	f003 0308 	and.w	r3, r3, #8
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d025      	beq.n	800821e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	681a      	ldr	r2, [r3, #0]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f022 020e 	bic.w	r2, r2, #14
 80081e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081e6:	f003 021c 	and.w	r2, r3, #28
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ee:	2101      	movs	r1, #1
 80081f0:	fa01 f202 	lsl.w	r2, r1, r2
 80081f4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2201      	movs	r2, #1
 80081fa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2201      	movs	r2, #1
 8008200:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2200      	movs	r2, #0
 8008208:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008210:	2b00      	cmp	r3, #0
 8008212:	d004      	beq.n	800821e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800821c:	bf00      	nop
 800821e:	bf00      	nop
}
 8008220:	3710      	adds	r7, #16
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}

08008226 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008226:	b480      	push	{r7}
 8008228:	b085      	sub	sp, #20
 800822a:	af00      	add	r7, sp, #0
 800822c:	60f8      	str	r0, [r7, #12]
 800822e:	60b9      	str	r1, [r7, #8]
 8008230:	607a      	str	r2, [r7, #4]
 8008232:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008238:	68fa      	ldr	r2, [r7, #12]
 800823a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800823c:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008242:	2b00      	cmp	r3, #0
 8008244:	d004      	beq.n	8008250 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800824a:	68fa      	ldr	r2, [r7, #12]
 800824c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800824e:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008254:	f003 021c 	and.w	r2, r3, #28
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800825c:	2101      	movs	r1, #1
 800825e:	fa01 f202 	lsl.w	r2, r1, r2
 8008262:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	683a      	ldr	r2, [r7, #0]
 800826a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	2b10      	cmp	r3, #16
 8008272:	d108      	bne.n	8008286 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	68ba      	ldr	r2, [r7, #8]
 8008282:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008284:	e007      	b.n	8008296 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	68ba      	ldr	r2, [r7, #8]
 800828c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	687a      	ldr	r2, [r7, #4]
 8008294:	60da      	str	r2, [r3, #12]
}
 8008296:	bf00      	nop
 8008298:	3714      	adds	r7, #20
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr
	...

080082a4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b085      	sub	sp, #20
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	461a      	mov	r2, r3
 80082b2:	4b17      	ldr	r3, [pc, #92]	; (8008310 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d80a      	bhi.n	80082ce <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082bc:	089b      	lsrs	r3, r3, #2
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80082c4:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	6493      	str	r3, [r2, #72]	; 0x48
 80082cc:	e007      	b.n	80082de <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082d2:	089b      	lsrs	r3, r3, #2
 80082d4:	009a      	lsls	r2, r3, #2
 80082d6:	4b0f      	ldr	r3, [pc, #60]	; (8008314 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80082d8:	4413      	add	r3, r2
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	3b08      	subs	r3, #8
 80082e6:	4a0c      	ldr	r2, [pc, #48]	; (8008318 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80082e8:	fba2 2303 	umull	r2, r3, r2, r3
 80082ec:	091b      	lsrs	r3, r3, #4
 80082ee:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	4a0a      	ldr	r2, [pc, #40]	; (800831c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80082f4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	f003 031f 	and.w	r3, r3, #31
 80082fc:	2201      	movs	r2, #1
 80082fe:	409a      	lsls	r2, r3
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008304:	bf00      	nop
 8008306:	3714      	adds	r7, #20
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr
 8008310:	40020407 	.word	0x40020407
 8008314:	4002081c 	.word	0x4002081c
 8008318:	cccccccd 	.word	0xcccccccd
 800831c:	40020880 	.word	0x40020880

08008320 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008320:	b480      	push	{r7}
 8008322:	b085      	sub	sp, #20
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	b2db      	uxtb	r3, r3
 800832e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008330:	68fa      	ldr	r2, [r7, #12]
 8008332:	4b0b      	ldr	r3, [pc, #44]	; (8008360 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8008334:	4413      	add	r3, r2
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	461a      	mov	r2, r3
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	4a08      	ldr	r2, [pc, #32]	; (8008364 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8008342:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	3b01      	subs	r3, #1
 8008348:	f003 0303 	and.w	r3, r3, #3
 800834c:	2201      	movs	r2, #1
 800834e:	409a      	lsls	r2, r3
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8008354:	bf00      	nop
 8008356:	3714      	adds	r7, #20
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr
 8008360:	1000823f 	.word	0x1000823f
 8008364:	40020940 	.word	0x40020940

08008368 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008368:	b480      	push	{r7}
 800836a:	b087      	sub	sp, #28
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008372:	2300      	movs	r3, #0
 8008374:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008376:	e166      	b.n	8008646 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	2101      	movs	r1, #1
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	fa01 f303 	lsl.w	r3, r1, r3
 8008384:	4013      	ands	r3, r2
 8008386:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2b00      	cmp	r3, #0
 800838c:	f000 8158 	beq.w	8008640 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	f003 0303 	and.w	r3, r3, #3
 8008398:	2b01      	cmp	r3, #1
 800839a:	d005      	beq.n	80083a8 <HAL_GPIO_Init+0x40>
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	f003 0303 	and.w	r3, r3, #3
 80083a4:	2b02      	cmp	r3, #2
 80083a6:	d130      	bne.n	800840a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	005b      	lsls	r3, r3, #1
 80083b2:	2203      	movs	r2, #3
 80083b4:	fa02 f303 	lsl.w	r3, r2, r3
 80083b8:	43db      	mvns	r3, r3
 80083ba:	693a      	ldr	r2, [r7, #16]
 80083bc:	4013      	ands	r3, r2
 80083be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	68da      	ldr	r2, [r3, #12]
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	005b      	lsls	r3, r3, #1
 80083c8:	fa02 f303 	lsl.w	r3, r2, r3
 80083cc:	693a      	ldr	r2, [r7, #16]
 80083ce:	4313      	orrs	r3, r2
 80083d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	693a      	ldr	r2, [r7, #16]
 80083d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80083de:	2201      	movs	r2, #1
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	fa02 f303 	lsl.w	r3, r2, r3
 80083e6:	43db      	mvns	r3, r3
 80083e8:	693a      	ldr	r2, [r7, #16]
 80083ea:	4013      	ands	r3, r2
 80083ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	091b      	lsrs	r3, r3, #4
 80083f4:	f003 0201 	and.w	r2, r3, #1
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	fa02 f303 	lsl.w	r3, r2, r3
 80083fe:	693a      	ldr	r2, [r7, #16]
 8008400:	4313      	orrs	r3, r2
 8008402:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	693a      	ldr	r2, [r7, #16]
 8008408:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	f003 0303 	and.w	r3, r3, #3
 8008412:	2b03      	cmp	r3, #3
 8008414:	d017      	beq.n	8008446 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	68db      	ldr	r3, [r3, #12]
 800841a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	005b      	lsls	r3, r3, #1
 8008420:	2203      	movs	r2, #3
 8008422:	fa02 f303 	lsl.w	r3, r2, r3
 8008426:	43db      	mvns	r3, r3
 8008428:	693a      	ldr	r2, [r7, #16]
 800842a:	4013      	ands	r3, r2
 800842c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	689a      	ldr	r2, [r3, #8]
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	005b      	lsls	r3, r3, #1
 8008436:	fa02 f303 	lsl.w	r3, r2, r3
 800843a:	693a      	ldr	r2, [r7, #16]
 800843c:	4313      	orrs	r3, r2
 800843e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	693a      	ldr	r2, [r7, #16]
 8008444:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	f003 0303 	and.w	r3, r3, #3
 800844e:	2b02      	cmp	r3, #2
 8008450:	d123      	bne.n	800849a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	08da      	lsrs	r2, r3, #3
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	3208      	adds	r2, #8
 800845a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800845e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	f003 0307 	and.w	r3, r3, #7
 8008466:	009b      	lsls	r3, r3, #2
 8008468:	220f      	movs	r2, #15
 800846a:	fa02 f303 	lsl.w	r3, r2, r3
 800846e:	43db      	mvns	r3, r3
 8008470:	693a      	ldr	r2, [r7, #16]
 8008472:	4013      	ands	r3, r2
 8008474:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	691a      	ldr	r2, [r3, #16]
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	f003 0307 	and.w	r3, r3, #7
 8008480:	009b      	lsls	r3, r3, #2
 8008482:	fa02 f303 	lsl.w	r3, r2, r3
 8008486:	693a      	ldr	r2, [r7, #16]
 8008488:	4313      	orrs	r3, r2
 800848a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	08da      	lsrs	r2, r3, #3
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	3208      	adds	r2, #8
 8008494:	6939      	ldr	r1, [r7, #16]
 8008496:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	005b      	lsls	r3, r3, #1
 80084a4:	2203      	movs	r2, #3
 80084a6:	fa02 f303 	lsl.w	r3, r2, r3
 80084aa:	43db      	mvns	r3, r3
 80084ac:	693a      	ldr	r2, [r7, #16]
 80084ae:	4013      	ands	r3, r2
 80084b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	f003 0203 	and.w	r2, r3, #3
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	005b      	lsls	r3, r3, #1
 80084be:	fa02 f303 	lsl.w	r3, r2, r3
 80084c2:	693a      	ldr	r2, [r7, #16]
 80084c4:	4313      	orrs	r3, r2
 80084c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	693a      	ldr	r2, [r7, #16]
 80084cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	f000 80b2 	beq.w	8008640 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80084dc:	4b61      	ldr	r3, [pc, #388]	; (8008664 <HAL_GPIO_Init+0x2fc>)
 80084de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084e0:	4a60      	ldr	r2, [pc, #384]	; (8008664 <HAL_GPIO_Init+0x2fc>)
 80084e2:	f043 0301 	orr.w	r3, r3, #1
 80084e6:	6613      	str	r3, [r2, #96]	; 0x60
 80084e8:	4b5e      	ldr	r3, [pc, #376]	; (8008664 <HAL_GPIO_Init+0x2fc>)
 80084ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084ec:	f003 0301 	and.w	r3, r3, #1
 80084f0:	60bb      	str	r3, [r7, #8]
 80084f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80084f4:	4a5c      	ldr	r2, [pc, #368]	; (8008668 <HAL_GPIO_Init+0x300>)
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	089b      	lsrs	r3, r3, #2
 80084fa:	3302      	adds	r3, #2
 80084fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008500:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	f003 0303 	and.w	r3, r3, #3
 8008508:	009b      	lsls	r3, r3, #2
 800850a:	220f      	movs	r2, #15
 800850c:	fa02 f303 	lsl.w	r3, r2, r3
 8008510:	43db      	mvns	r3, r3
 8008512:	693a      	ldr	r2, [r7, #16]
 8008514:	4013      	ands	r3, r2
 8008516:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800851e:	d02b      	beq.n	8008578 <HAL_GPIO_Init+0x210>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	4a52      	ldr	r2, [pc, #328]	; (800866c <HAL_GPIO_Init+0x304>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d025      	beq.n	8008574 <HAL_GPIO_Init+0x20c>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	4a51      	ldr	r2, [pc, #324]	; (8008670 <HAL_GPIO_Init+0x308>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d01f      	beq.n	8008570 <HAL_GPIO_Init+0x208>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	4a50      	ldr	r2, [pc, #320]	; (8008674 <HAL_GPIO_Init+0x30c>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d019      	beq.n	800856c <HAL_GPIO_Init+0x204>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	4a4f      	ldr	r2, [pc, #316]	; (8008678 <HAL_GPIO_Init+0x310>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d013      	beq.n	8008568 <HAL_GPIO_Init+0x200>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	4a4e      	ldr	r2, [pc, #312]	; (800867c <HAL_GPIO_Init+0x314>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d00d      	beq.n	8008564 <HAL_GPIO_Init+0x1fc>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	4a4d      	ldr	r2, [pc, #308]	; (8008680 <HAL_GPIO_Init+0x318>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d007      	beq.n	8008560 <HAL_GPIO_Init+0x1f8>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	4a4c      	ldr	r2, [pc, #304]	; (8008684 <HAL_GPIO_Init+0x31c>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d101      	bne.n	800855c <HAL_GPIO_Init+0x1f4>
 8008558:	2307      	movs	r3, #7
 800855a:	e00e      	b.n	800857a <HAL_GPIO_Init+0x212>
 800855c:	2308      	movs	r3, #8
 800855e:	e00c      	b.n	800857a <HAL_GPIO_Init+0x212>
 8008560:	2306      	movs	r3, #6
 8008562:	e00a      	b.n	800857a <HAL_GPIO_Init+0x212>
 8008564:	2305      	movs	r3, #5
 8008566:	e008      	b.n	800857a <HAL_GPIO_Init+0x212>
 8008568:	2304      	movs	r3, #4
 800856a:	e006      	b.n	800857a <HAL_GPIO_Init+0x212>
 800856c:	2303      	movs	r3, #3
 800856e:	e004      	b.n	800857a <HAL_GPIO_Init+0x212>
 8008570:	2302      	movs	r3, #2
 8008572:	e002      	b.n	800857a <HAL_GPIO_Init+0x212>
 8008574:	2301      	movs	r3, #1
 8008576:	e000      	b.n	800857a <HAL_GPIO_Init+0x212>
 8008578:	2300      	movs	r3, #0
 800857a:	697a      	ldr	r2, [r7, #20]
 800857c:	f002 0203 	and.w	r2, r2, #3
 8008580:	0092      	lsls	r2, r2, #2
 8008582:	4093      	lsls	r3, r2
 8008584:	693a      	ldr	r2, [r7, #16]
 8008586:	4313      	orrs	r3, r2
 8008588:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800858a:	4937      	ldr	r1, [pc, #220]	; (8008668 <HAL_GPIO_Init+0x300>)
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	089b      	lsrs	r3, r3, #2
 8008590:	3302      	adds	r3, #2
 8008592:	693a      	ldr	r2, [r7, #16]
 8008594:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008598:	4b3b      	ldr	r3, [pc, #236]	; (8008688 <HAL_GPIO_Init+0x320>)
 800859a:	689b      	ldr	r3, [r3, #8]
 800859c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	43db      	mvns	r3, r3
 80085a2:	693a      	ldr	r2, [r7, #16]
 80085a4:	4013      	ands	r3, r2
 80085a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d003      	beq.n	80085bc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80085b4:	693a      	ldr	r2, [r7, #16]
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	4313      	orrs	r3, r2
 80085ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80085bc:	4a32      	ldr	r2, [pc, #200]	; (8008688 <HAL_GPIO_Init+0x320>)
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80085c2:	4b31      	ldr	r3, [pc, #196]	; (8008688 <HAL_GPIO_Init+0x320>)
 80085c4:	68db      	ldr	r3, [r3, #12]
 80085c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	43db      	mvns	r3, r3
 80085cc:	693a      	ldr	r2, [r7, #16]
 80085ce:	4013      	ands	r3, r2
 80085d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d003      	beq.n	80085e6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80085de:	693a      	ldr	r2, [r7, #16]
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	4313      	orrs	r3, r2
 80085e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80085e6:	4a28      	ldr	r2, [pc, #160]	; (8008688 <HAL_GPIO_Init+0x320>)
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80085ec:	4b26      	ldr	r3, [pc, #152]	; (8008688 <HAL_GPIO_Init+0x320>)
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	43db      	mvns	r3, r3
 80085f6:	693a      	ldr	r2, [r7, #16]
 80085f8:	4013      	ands	r3, r2
 80085fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008604:	2b00      	cmp	r3, #0
 8008606:	d003      	beq.n	8008610 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8008608:	693a      	ldr	r2, [r7, #16]
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	4313      	orrs	r3, r2
 800860e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008610:	4a1d      	ldr	r2, [pc, #116]	; (8008688 <HAL_GPIO_Init+0x320>)
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8008616:	4b1c      	ldr	r3, [pc, #112]	; (8008688 <HAL_GPIO_Init+0x320>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	43db      	mvns	r3, r3
 8008620:	693a      	ldr	r2, [r7, #16]
 8008622:	4013      	ands	r3, r2
 8008624:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800862e:	2b00      	cmp	r3, #0
 8008630:	d003      	beq.n	800863a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8008632:	693a      	ldr	r2, [r7, #16]
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	4313      	orrs	r3, r2
 8008638:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800863a:	4a13      	ldr	r2, [pc, #76]	; (8008688 <HAL_GPIO_Init+0x320>)
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	3301      	adds	r3, #1
 8008644:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	681a      	ldr	r2, [r3, #0]
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	fa22 f303 	lsr.w	r3, r2, r3
 8008650:	2b00      	cmp	r3, #0
 8008652:	f47f ae91 	bne.w	8008378 <HAL_GPIO_Init+0x10>
  }
}
 8008656:	bf00      	nop
 8008658:	bf00      	nop
 800865a:	371c      	adds	r7, #28
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr
 8008664:	40021000 	.word	0x40021000
 8008668:	40010000 	.word	0x40010000
 800866c:	48000400 	.word	0x48000400
 8008670:	48000800 	.word	0x48000800
 8008674:	48000c00 	.word	0x48000c00
 8008678:	48001000 	.word	0x48001000
 800867c:	48001400 	.word	0x48001400
 8008680:	48001800 	.word	0x48001800
 8008684:	48001c00 	.word	0x48001c00
 8008688:	40010400 	.word	0x40010400

0800868c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800868c:	b480      	push	{r7}
 800868e:	b085      	sub	sp, #20
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	460b      	mov	r3, r1
 8008696:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	691a      	ldr	r2, [r3, #16]
 800869c:	887b      	ldrh	r3, [r7, #2]
 800869e:	4013      	ands	r3, r2
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d002      	beq.n	80086aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80086a4:	2301      	movs	r3, #1
 80086a6:	73fb      	strb	r3, [r7, #15]
 80086a8:	e001      	b.n	80086ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80086aa:	2300      	movs	r3, #0
 80086ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80086ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3714      	adds	r7, #20
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr

080086bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80086bc:	b480      	push	{r7}
 80086be:	b083      	sub	sp, #12
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	460b      	mov	r3, r1
 80086c6:	807b      	strh	r3, [r7, #2]
 80086c8:	4613      	mov	r3, r2
 80086ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80086cc:	787b      	ldrb	r3, [r7, #1]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d003      	beq.n	80086da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80086d2:	887a      	ldrh	r2, [r7, #2]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80086d8:	e002      	b.n	80086e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80086da:	887a      	ldrh	r2, [r7, #2]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80086e0:	bf00      	nop
 80086e2:	370c      	adds	r7, #12
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr

080086ec <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b085      	sub	sp, #20
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	460b      	mov	r3, r1
 80086f6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	695b      	ldr	r3, [r3, #20]
 80086fc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80086fe:	887a      	ldrh	r2, [r7, #2]
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	4013      	ands	r3, r2
 8008704:	041a      	lsls	r2, r3, #16
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	43d9      	mvns	r1, r3
 800870a:	887b      	ldrh	r3, [r7, #2]
 800870c:	400b      	ands	r3, r1
 800870e:	431a      	orrs	r2, r3
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	619a      	str	r2, [r3, #24]
}
 8008714:	bf00      	nop
 8008716:	3714      	adds	r7, #20
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr

08008720 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b084      	sub	sp, #16
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d101      	bne.n	8008732 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800872e:	2301      	movs	r3, #1
 8008730:	e041      	b.n	80087b6 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800873a:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f245 5255 	movw	r2, #21845	; 0x5555
 8008744:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	687a      	ldr	r2, [r7, #4]
 800874c:	6852      	ldr	r2, [r2, #4]
 800874e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	6892      	ldr	r2, [r2, #8]
 8008758:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800875a:	f7ff f9a9 	bl	8007ab0 <HAL_GetTick>
 800875e:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8008760:	e00f      	b.n	8008782 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8008762:	f7ff f9a5 	bl	8007ab0 <HAL_GetTick>
 8008766:	4602      	mov	r2, r0
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	1ad3      	subs	r3, r2, r3
 800876c:	2b31      	cmp	r3, #49	; 0x31
 800876e:	d908      	bls.n	8008782 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	68db      	ldr	r3, [r3, #12]
 8008776:	f003 0307 	and.w	r3, r3, #7
 800877a:	2b00      	cmp	r3, #0
 800877c:	d001      	beq.n	8008782 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800877e:	2303      	movs	r3, #3
 8008780:	e019      	b.n	80087b6 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	68db      	ldr	r3, [r3, #12]
 8008788:	f003 0307 	and.w	r3, r3, #7
 800878c:	2b00      	cmp	r3, #0
 800878e:	d1e8      	bne.n	8008762 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	691a      	ldr	r2, [r3, #16]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	68db      	ldr	r3, [r3, #12]
 800879a:	429a      	cmp	r2, r3
 800879c:	d005      	beq.n	80087aa <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	687a      	ldr	r2, [r7, #4]
 80087a4:	68d2      	ldr	r2, [r2, #12]
 80087a6:	611a      	str	r2, [r3, #16]
 80087a8:	e004      	b.n	80087b4 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80087b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80087b4:	2300      	movs	r3, #0
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3710      	adds	r7, #16
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}

080087be <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80087be:	b480      	push	{r7}
 80087c0:	b083      	sub	sp, #12
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80087ce:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80087d0:	2300      	movs	r3, #0
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	370c      	adds	r7, #12
 80087d6:	46bd      	mov	sp, r7
 80087d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087dc:	4770      	bx	lr
	...

080087e0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80087e0:	b480      	push	{r7}
 80087e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80087e4:	4b05      	ldr	r3, [pc, #20]	; (80087fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a04      	ldr	r2, [pc, #16]	; (80087fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80087ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087ee:	6013      	str	r3, [r2, #0]
}
 80087f0:	bf00      	nop
 80087f2:	46bd      	mov	sp, r7
 80087f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f8:	4770      	bx	lr
 80087fa:	bf00      	nop
 80087fc:	40007000 	.word	0x40007000

08008800 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008800:	b480      	push	{r7}
 8008802:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008804:	4b0d      	ldr	r3, [pc, #52]	; (800883c <HAL_PWREx_GetVoltageRange+0x3c>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800880c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008810:	d102      	bne.n	8008818 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8008812:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008816:	e00b      	b.n	8008830 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8008818:	4b08      	ldr	r3, [pc, #32]	; (800883c <HAL_PWREx_GetVoltageRange+0x3c>)
 800881a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800881e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008822:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008826:	d102      	bne.n	800882e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8008828:	f44f 7300 	mov.w	r3, #512	; 0x200
 800882c:	e000      	b.n	8008830 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800882e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8008830:	4618      	mov	r0, r3
 8008832:	46bd      	mov	sp, r7
 8008834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008838:	4770      	bx	lr
 800883a:	bf00      	nop
 800883c:	40007000 	.word	0x40007000

08008840 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008840:	b480      	push	{r7}
 8008842:	b085      	sub	sp, #20
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d141      	bne.n	80088d2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800884e:	4b4b      	ldr	r3, [pc, #300]	; (800897c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008856:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800885a:	d131      	bne.n	80088c0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800885c:	4b47      	ldr	r3, [pc, #284]	; (800897c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800885e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008862:	4a46      	ldr	r2, [pc, #280]	; (800897c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008864:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008868:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800886c:	4b43      	ldr	r3, [pc, #268]	; (800897c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008874:	4a41      	ldr	r2, [pc, #260]	; (800897c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008876:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800887a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800887c:	4b40      	ldr	r3, [pc, #256]	; (8008980 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	2232      	movs	r2, #50	; 0x32
 8008882:	fb02 f303 	mul.w	r3, r2, r3
 8008886:	4a3f      	ldr	r2, [pc, #252]	; (8008984 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008888:	fba2 2303 	umull	r2, r3, r2, r3
 800888c:	0c9b      	lsrs	r3, r3, #18
 800888e:	3301      	adds	r3, #1
 8008890:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008892:	e002      	b.n	800889a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	3b01      	subs	r3, #1
 8008898:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800889a:	4b38      	ldr	r3, [pc, #224]	; (800897c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800889c:	695b      	ldr	r3, [r3, #20]
 800889e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088a6:	d102      	bne.n	80088ae <HAL_PWREx_ControlVoltageScaling+0x6e>
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d1f2      	bne.n	8008894 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80088ae:	4b33      	ldr	r3, [pc, #204]	; (800897c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80088b0:	695b      	ldr	r3, [r3, #20]
 80088b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088ba:	d158      	bne.n	800896e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80088bc:	2303      	movs	r3, #3
 80088be:	e057      	b.n	8008970 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80088c0:	4b2e      	ldr	r3, [pc, #184]	; (800897c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80088c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80088c6:	4a2d      	ldr	r2, [pc, #180]	; (800897c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80088c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80088d0:	e04d      	b.n	800896e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088d8:	d141      	bne.n	800895e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80088da:	4b28      	ldr	r3, [pc, #160]	; (800897c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80088e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088e6:	d131      	bne.n	800894c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80088e8:	4b24      	ldr	r3, [pc, #144]	; (800897c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80088ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80088ee:	4a23      	ldr	r2, [pc, #140]	; (800897c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80088f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80088f8:	4b20      	ldr	r3, [pc, #128]	; (800897c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008900:	4a1e      	ldr	r2, [pc, #120]	; (800897c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008902:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008906:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8008908:	4b1d      	ldr	r3, [pc, #116]	; (8008980 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	2232      	movs	r2, #50	; 0x32
 800890e:	fb02 f303 	mul.w	r3, r2, r3
 8008912:	4a1c      	ldr	r2, [pc, #112]	; (8008984 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008914:	fba2 2303 	umull	r2, r3, r2, r3
 8008918:	0c9b      	lsrs	r3, r3, #18
 800891a:	3301      	adds	r3, #1
 800891c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800891e:	e002      	b.n	8008926 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	3b01      	subs	r3, #1
 8008924:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008926:	4b15      	ldr	r3, [pc, #84]	; (800897c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008928:	695b      	ldr	r3, [r3, #20]
 800892a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800892e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008932:	d102      	bne.n	800893a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d1f2      	bne.n	8008920 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800893a:	4b10      	ldr	r3, [pc, #64]	; (800897c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800893c:	695b      	ldr	r3, [r3, #20]
 800893e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008942:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008946:	d112      	bne.n	800896e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008948:	2303      	movs	r3, #3
 800894a:	e011      	b.n	8008970 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800894c:	4b0b      	ldr	r3, [pc, #44]	; (800897c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800894e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008952:	4a0a      	ldr	r2, [pc, #40]	; (800897c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008954:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008958:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800895c:	e007      	b.n	800896e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800895e:	4b07      	ldr	r3, [pc, #28]	; (800897c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008966:	4a05      	ldr	r2, [pc, #20]	; (800897c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008968:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800896c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800896e:	2300      	movs	r3, #0
}
 8008970:	4618      	mov	r0, r3
 8008972:	3714      	adds	r7, #20
 8008974:	46bd      	mov	sp, r7
 8008976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897a:	4770      	bx	lr
 800897c:	40007000 	.word	0x40007000
 8008980:	20000094 	.word	0x20000094
 8008984:	431bde83 	.word	0x431bde83

08008988 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b08a      	sub	sp, #40	; 0x28
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d102      	bne.n	800899c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008996:	2301      	movs	r3, #1
 8008998:	f000 bc68 	b.w	800926c <HAL_RCC_OscConfig+0x8e4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800899c:	4b97      	ldr	r3, [pc, #604]	; (8008bfc <HAL_RCC_OscConfig+0x274>)
 800899e:	689b      	ldr	r3, [r3, #8]
 80089a0:	f003 030c 	and.w	r3, r3, #12
 80089a4:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80089a6:	4b95      	ldr	r3, [pc, #596]	; (8008bfc <HAL_RCC_OscConfig+0x274>)
 80089a8:	68db      	ldr	r3, [r3, #12]
 80089aa:	f003 0303 	and.w	r3, r3, #3
 80089ae:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f003 0310 	and.w	r3, r3, #16
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	f000 80e6 	beq.w	8008b8a <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80089be:	6a3b      	ldr	r3, [r7, #32]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d007      	beq.n	80089d4 <HAL_RCC_OscConfig+0x4c>
 80089c4:	6a3b      	ldr	r3, [r7, #32]
 80089c6:	2b0c      	cmp	r3, #12
 80089c8:	f040 808d 	bne.w	8008ae6 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80089cc:	69fb      	ldr	r3, [r7, #28]
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	f040 8089 	bne.w	8008ae6 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80089d4:	4b89      	ldr	r3, [pc, #548]	; (8008bfc <HAL_RCC_OscConfig+0x274>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f003 0302 	and.w	r3, r3, #2
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d006      	beq.n	80089ee <HAL_RCC_OscConfig+0x66>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	69db      	ldr	r3, [r3, #28]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d102      	bne.n	80089ee <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80089e8:	2301      	movs	r3, #1
 80089ea:	f000 bc3f 	b.w	800926c <HAL_RCC_OscConfig+0x8e4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80089f2:	4b82      	ldr	r3, [pc, #520]	; (8008bfc <HAL_RCC_OscConfig+0x274>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f003 0308 	and.w	r3, r3, #8
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d004      	beq.n	8008a08 <HAL_RCC_OscConfig+0x80>
 80089fe:	4b7f      	ldr	r3, [pc, #508]	; (8008bfc <HAL_RCC_OscConfig+0x274>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a06:	e005      	b.n	8008a14 <HAL_RCC_OscConfig+0x8c>
 8008a08:	4b7c      	ldr	r3, [pc, #496]	; (8008bfc <HAL_RCC_OscConfig+0x274>)
 8008a0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008a0e:	091b      	lsrs	r3, r3, #4
 8008a10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d224      	bcs.n	8008a62 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f000 fe5f 	bl	80096e0 <RCC_SetFlashLatencyFromMSIRange>
 8008a22:	4603      	mov	r3, r0
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d002      	beq.n	8008a2e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	f000 bc1f 	b.w	800926c <HAL_RCC_OscConfig+0x8e4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008a2e:	4b73      	ldr	r3, [pc, #460]	; (8008bfc <HAL_RCC_OscConfig+0x274>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4a72      	ldr	r2, [pc, #456]	; (8008bfc <HAL_RCC_OscConfig+0x274>)
 8008a34:	f043 0308 	orr.w	r3, r3, #8
 8008a38:	6013      	str	r3, [r2, #0]
 8008a3a:	4b70      	ldr	r3, [pc, #448]	; (8008bfc <HAL_RCC_OscConfig+0x274>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a46:	496d      	ldr	r1, [pc, #436]	; (8008bfc <HAL_RCC_OscConfig+0x274>)
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008a4c:	4b6b      	ldr	r3, [pc, #428]	; (8008bfc <HAL_RCC_OscConfig+0x274>)
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6a1b      	ldr	r3, [r3, #32]
 8008a58:	021b      	lsls	r3, r3, #8
 8008a5a:	4968      	ldr	r1, [pc, #416]	; (8008bfc <HAL_RCC_OscConfig+0x274>)
 8008a5c:	4313      	orrs	r3, r2
 8008a5e:	604b      	str	r3, [r1, #4]
 8008a60:	e025      	b.n	8008aae <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008a62:	4b66      	ldr	r3, [pc, #408]	; (8008bfc <HAL_RCC_OscConfig+0x274>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4a65      	ldr	r2, [pc, #404]	; (8008bfc <HAL_RCC_OscConfig+0x274>)
 8008a68:	f043 0308 	orr.w	r3, r3, #8
 8008a6c:	6013      	str	r3, [r2, #0]
 8008a6e:	4b63      	ldr	r3, [pc, #396]	; (8008bfc <HAL_RCC_OscConfig+0x274>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a7a:	4960      	ldr	r1, [pc, #384]	; (8008bfc <HAL_RCC_OscConfig+0x274>)
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008a80:	4b5e      	ldr	r3, [pc, #376]	; (8008bfc <HAL_RCC_OscConfig+0x274>)
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6a1b      	ldr	r3, [r3, #32]
 8008a8c:	021b      	lsls	r3, r3, #8
 8008a8e:	495b      	ldr	r1, [pc, #364]	; (8008bfc <HAL_RCC_OscConfig+0x274>)
 8008a90:	4313      	orrs	r3, r2
 8008a92:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008a94:	6a3b      	ldr	r3, [r7, #32]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d109      	bne.n	8008aae <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f000 fe1e 	bl	80096e0 <RCC_SetFlashLatencyFromMSIRange>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d001      	beq.n	8008aae <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8008aaa:	2301      	movs	r3, #1
 8008aac:	e3de      	b.n	800926c <HAL_RCC_OscConfig+0x8e4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008aae:	f000 fd21 	bl	80094f4 <HAL_RCC_GetSysClockFreq>
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	4b51      	ldr	r3, [pc, #324]	; (8008bfc <HAL_RCC_OscConfig+0x274>)
 8008ab6:	689b      	ldr	r3, [r3, #8]
 8008ab8:	091b      	lsrs	r3, r3, #4
 8008aba:	f003 030f 	and.w	r3, r3, #15
 8008abe:	4950      	ldr	r1, [pc, #320]	; (8008c00 <HAL_RCC_OscConfig+0x278>)
 8008ac0:	5ccb      	ldrb	r3, [r1, r3]
 8008ac2:	f003 031f 	and.w	r3, r3, #31
 8008ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8008aca:	4a4e      	ldr	r2, [pc, #312]	; (8008c04 <HAL_RCC_OscConfig+0x27c>)
 8008acc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8008ace:	4b4e      	ldr	r3, [pc, #312]	; (8008c08 <HAL_RCC_OscConfig+0x280>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f7fe fbdc 	bl	8007290 <HAL_InitTick>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8008adc:	7dfb      	ldrb	r3, [r7, #23]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d052      	beq.n	8008b88 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8008ae2:	7dfb      	ldrb	r3, [r7, #23]
 8008ae4:	e3c2      	b.n	800926c <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	69db      	ldr	r3, [r3, #28]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d032      	beq.n	8008b54 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008aee:	4b43      	ldr	r3, [pc, #268]	; (8008bfc <HAL_RCC_OscConfig+0x274>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4a42      	ldr	r2, [pc, #264]	; (8008bfc <HAL_RCC_OscConfig+0x274>)
 8008af4:	f043 0301 	orr.w	r3, r3, #1
 8008af8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008afa:	f7fe ffd9 	bl	8007ab0 <HAL_GetTick>
 8008afe:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008b00:	e008      	b.n	8008b14 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008b02:	f7fe ffd5 	bl	8007ab0 <HAL_GetTick>
 8008b06:	4602      	mov	r2, r0
 8008b08:	69bb      	ldr	r3, [r7, #24]
 8008b0a:	1ad3      	subs	r3, r2, r3
 8008b0c:	2b02      	cmp	r3, #2
 8008b0e:	d901      	bls.n	8008b14 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8008b10:	2303      	movs	r3, #3
 8008b12:	e3ab      	b.n	800926c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008b14:	4b39      	ldr	r3, [pc, #228]	; (8008bfc <HAL_RCC_OscConfig+0x274>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f003 0302 	and.w	r3, r3, #2
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d0f0      	beq.n	8008b02 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008b20:	4b36      	ldr	r3, [pc, #216]	; (8008bfc <HAL_RCC_OscConfig+0x274>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a35      	ldr	r2, [pc, #212]	; (8008bfc <HAL_RCC_OscConfig+0x274>)
 8008b26:	f043 0308 	orr.w	r3, r3, #8
 8008b2a:	6013      	str	r3, [r2, #0]
 8008b2c:	4b33      	ldr	r3, [pc, #204]	; (8008bfc <HAL_RCC_OscConfig+0x274>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b38:	4930      	ldr	r1, [pc, #192]	; (8008bfc <HAL_RCC_OscConfig+0x274>)
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008b3e:	4b2f      	ldr	r3, [pc, #188]	; (8008bfc <HAL_RCC_OscConfig+0x274>)
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6a1b      	ldr	r3, [r3, #32]
 8008b4a:	021b      	lsls	r3, r3, #8
 8008b4c:	492b      	ldr	r1, [pc, #172]	; (8008bfc <HAL_RCC_OscConfig+0x274>)
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	604b      	str	r3, [r1, #4]
 8008b52:	e01a      	b.n	8008b8a <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008b54:	4b29      	ldr	r3, [pc, #164]	; (8008bfc <HAL_RCC_OscConfig+0x274>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a28      	ldr	r2, [pc, #160]	; (8008bfc <HAL_RCC_OscConfig+0x274>)
 8008b5a:	f023 0301 	bic.w	r3, r3, #1
 8008b5e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008b60:	f7fe ffa6 	bl	8007ab0 <HAL_GetTick>
 8008b64:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008b66:	e008      	b.n	8008b7a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008b68:	f7fe ffa2 	bl	8007ab0 <HAL_GetTick>
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	69bb      	ldr	r3, [r7, #24]
 8008b70:	1ad3      	subs	r3, r2, r3
 8008b72:	2b02      	cmp	r3, #2
 8008b74:	d901      	bls.n	8008b7a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008b76:	2303      	movs	r3, #3
 8008b78:	e378      	b.n	800926c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008b7a:	4b20      	ldr	r3, [pc, #128]	; (8008bfc <HAL_RCC_OscConfig+0x274>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f003 0302 	and.w	r3, r3, #2
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d1f0      	bne.n	8008b68 <HAL_RCC_OscConfig+0x1e0>
 8008b86:	e000      	b.n	8008b8a <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008b88:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f003 0301 	and.w	r3, r3, #1
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d073      	beq.n	8008c7e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8008b96:	6a3b      	ldr	r3, [r7, #32]
 8008b98:	2b08      	cmp	r3, #8
 8008b9a:	d005      	beq.n	8008ba8 <HAL_RCC_OscConfig+0x220>
 8008b9c:	6a3b      	ldr	r3, [r7, #32]
 8008b9e:	2b0c      	cmp	r3, #12
 8008ba0:	d10e      	bne.n	8008bc0 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008ba2:	69fb      	ldr	r3, [r7, #28]
 8008ba4:	2b03      	cmp	r3, #3
 8008ba6:	d10b      	bne.n	8008bc0 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ba8:	4b14      	ldr	r3, [pc, #80]	; (8008bfc <HAL_RCC_OscConfig+0x274>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d063      	beq.n	8008c7c <HAL_RCC_OscConfig+0x2f4>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d15f      	bne.n	8008c7c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	e355      	b.n	800926c <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bc8:	d106      	bne.n	8008bd8 <HAL_RCC_OscConfig+0x250>
 8008bca:	4b0c      	ldr	r3, [pc, #48]	; (8008bfc <HAL_RCC_OscConfig+0x274>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4a0b      	ldr	r2, [pc, #44]	; (8008bfc <HAL_RCC_OscConfig+0x274>)
 8008bd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008bd4:	6013      	str	r3, [r2, #0]
 8008bd6:	e025      	b.n	8008c24 <HAL_RCC_OscConfig+0x29c>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008be0:	d114      	bne.n	8008c0c <HAL_RCC_OscConfig+0x284>
 8008be2:	4b06      	ldr	r3, [pc, #24]	; (8008bfc <HAL_RCC_OscConfig+0x274>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a05      	ldr	r2, [pc, #20]	; (8008bfc <HAL_RCC_OscConfig+0x274>)
 8008be8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008bec:	6013      	str	r3, [r2, #0]
 8008bee:	4b03      	ldr	r3, [pc, #12]	; (8008bfc <HAL_RCC_OscConfig+0x274>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4a02      	ldr	r2, [pc, #8]	; (8008bfc <HAL_RCC_OscConfig+0x274>)
 8008bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008bf8:	6013      	str	r3, [r2, #0]
 8008bfa:	e013      	b.n	8008c24 <HAL_RCC_OscConfig+0x29c>
 8008bfc:	40021000 	.word	0x40021000
 8008c00:	08018b10 	.word	0x08018b10
 8008c04:	20000094 	.word	0x20000094
 8008c08:	20000098 	.word	0x20000098
 8008c0c:	4b8f      	ldr	r3, [pc, #572]	; (8008e4c <HAL_RCC_OscConfig+0x4c4>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a8e      	ldr	r2, [pc, #568]	; (8008e4c <HAL_RCC_OscConfig+0x4c4>)
 8008c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c16:	6013      	str	r3, [r2, #0]
 8008c18:	4b8c      	ldr	r3, [pc, #560]	; (8008e4c <HAL_RCC_OscConfig+0x4c4>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	4a8b      	ldr	r2, [pc, #556]	; (8008e4c <HAL_RCC_OscConfig+0x4c4>)
 8008c1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d013      	beq.n	8008c54 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c2c:	f7fe ff40 	bl	8007ab0 <HAL_GetTick>
 8008c30:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008c32:	e008      	b.n	8008c46 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008c34:	f7fe ff3c 	bl	8007ab0 <HAL_GetTick>
 8008c38:	4602      	mov	r2, r0
 8008c3a:	69bb      	ldr	r3, [r7, #24]
 8008c3c:	1ad3      	subs	r3, r2, r3
 8008c3e:	2b64      	cmp	r3, #100	; 0x64
 8008c40:	d901      	bls.n	8008c46 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8008c42:	2303      	movs	r3, #3
 8008c44:	e312      	b.n	800926c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008c46:	4b81      	ldr	r3, [pc, #516]	; (8008e4c <HAL_RCC_OscConfig+0x4c4>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d0f0      	beq.n	8008c34 <HAL_RCC_OscConfig+0x2ac>
 8008c52:	e014      	b.n	8008c7e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c54:	f7fe ff2c 	bl	8007ab0 <HAL_GetTick>
 8008c58:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008c5a:	e008      	b.n	8008c6e <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008c5c:	f7fe ff28 	bl	8007ab0 <HAL_GetTick>
 8008c60:	4602      	mov	r2, r0
 8008c62:	69bb      	ldr	r3, [r7, #24]
 8008c64:	1ad3      	subs	r3, r2, r3
 8008c66:	2b64      	cmp	r3, #100	; 0x64
 8008c68:	d901      	bls.n	8008c6e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8008c6a:	2303      	movs	r3, #3
 8008c6c:	e2fe      	b.n	800926c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008c6e:	4b77      	ldr	r3, [pc, #476]	; (8008e4c <HAL_RCC_OscConfig+0x4c4>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d1f0      	bne.n	8008c5c <HAL_RCC_OscConfig+0x2d4>
 8008c7a:	e000      	b.n	8008c7e <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f003 0302 	and.w	r3, r3, #2
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d060      	beq.n	8008d4c <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8008c8a:	6a3b      	ldr	r3, [r7, #32]
 8008c8c:	2b04      	cmp	r3, #4
 8008c8e:	d005      	beq.n	8008c9c <HAL_RCC_OscConfig+0x314>
 8008c90:	6a3b      	ldr	r3, [r7, #32]
 8008c92:	2b0c      	cmp	r3, #12
 8008c94:	d119      	bne.n	8008cca <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008c96:	69fb      	ldr	r3, [r7, #28]
 8008c98:	2b02      	cmp	r3, #2
 8008c9a:	d116      	bne.n	8008cca <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008c9c:	4b6b      	ldr	r3, [pc, #428]	; (8008e4c <HAL_RCC_OscConfig+0x4c4>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d005      	beq.n	8008cb4 <HAL_RCC_OscConfig+0x32c>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	68db      	ldr	r3, [r3, #12]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d101      	bne.n	8008cb4 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	e2db      	b.n	800926c <HAL_RCC_OscConfig+0x8e4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008cb4:	4b65      	ldr	r3, [pc, #404]	; (8008e4c <HAL_RCC_OscConfig+0x4c4>)
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	691b      	ldr	r3, [r3, #16]
 8008cc0:	061b      	lsls	r3, r3, #24
 8008cc2:	4962      	ldr	r1, [pc, #392]	; (8008e4c <HAL_RCC_OscConfig+0x4c4>)
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008cc8:	e040      	b.n	8008d4c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	68db      	ldr	r3, [r3, #12]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d023      	beq.n	8008d1a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008cd2:	4b5e      	ldr	r3, [pc, #376]	; (8008e4c <HAL_RCC_OscConfig+0x4c4>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	4a5d      	ldr	r2, [pc, #372]	; (8008e4c <HAL_RCC_OscConfig+0x4c4>)
 8008cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cde:	f7fe fee7 	bl	8007ab0 <HAL_GetTick>
 8008ce2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008ce4:	e008      	b.n	8008cf8 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008ce6:	f7fe fee3 	bl	8007ab0 <HAL_GetTick>
 8008cea:	4602      	mov	r2, r0
 8008cec:	69bb      	ldr	r3, [r7, #24]
 8008cee:	1ad3      	subs	r3, r2, r3
 8008cf0:	2b02      	cmp	r3, #2
 8008cf2:	d901      	bls.n	8008cf8 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8008cf4:	2303      	movs	r3, #3
 8008cf6:	e2b9      	b.n	800926c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008cf8:	4b54      	ldr	r3, [pc, #336]	; (8008e4c <HAL_RCC_OscConfig+0x4c4>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d0f0      	beq.n	8008ce6 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d04:	4b51      	ldr	r3, [pc, #324]	; (8008e4c <HAL_RCC_OscConfig+0x4c4>)
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	691b      	ldr	r3, [r3, #16]
 8008d10:	061b      	lsls	r3, r3, #24
 8008d12:	494e      	ldr	r1, [pc, #312]	; (8008e4c <HAL_RCC_OscConfig+0x4c4>)
 8008d14:	4313      	orrs	r3, r2
 8008d16:	604b      	str	r3, [r1, #4]
 8008d18:	e018      	b.n	8008d4c <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008d1a:	4b4c      	ldr	r3, [pc, #304]	; (8008e4c <HAL_RCC_OscConfig+0x4c4>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	4a4b      	ldr	r2, [pc, #300]	; (8008e4c <HAL_RCC_OscConfig+0x4c4>)
 8008d20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d26:	f7fe fec3 	bl	8007ab0 <HAL_GetTick>
 8008d2a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008d2c:	e008      	b.n	8008d40 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008d2e:	f7fe febf 	bl	8007ab0 <HAL_GetTick>
 8008d32:	4602      	mov	r2, r0
 8008d34:	69bb      	ldr	r3, [r7, #24]
 8008d36:	1ad3      	subs	r3, r2, r3
 8008d38:	2b02      	cmp	r3, #2
 8008d3a:	d901      	bls.n	8008d40 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8008d3c:	2303      	movs	r3, #3
 8008d3e:	e295      	b.n	800926c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008d40:	4b42      	ldr	r3, [pc, #264]	; (8008e4c <HAL_RCC_OscConfig+0x4c4>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d1f0      	bne.n	8008d2e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f003 0308 	and.w	r3, r3, #8
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	f000 8082 	beq.w	8008e5e <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	695b      	ldr	r3, [r3, #20]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d05f      	beq.n	8008e22 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8008d62:	4b3a      	ldr	r3, [pc, #232]	; (8008e4c <HAL_RCC_OscConfig+0x4c4>)
 8008d64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008d68:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	699a      	ldr	r2, [r3, #24]
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	f003 0310 	and.w	r3, r3, #16
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d037      	beq.n	8008de8 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	f003 0302 	and.w	r3, r3, #2
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d006      	beq.n	8008d90 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d101      	bne.n	8008d90 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	e26d      	b.n	800926c <HAL_RCC_OscConfig+0x8e4>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	f003 0301 	and.w	r3, r3, #1
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d01b      	beq.n	8008dd2 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8008d9a:	4b2c      	ldr	r3, [pc, #176]	; (8008e4c <HAL_RCC_OscConfig+0x4c4>)
 8008d9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008da0:	4a2a      	ldr	r2, [pc, #168]	; (8008e4c <HAL_RCC_OscConfig+0x4c4>)
 8008da2:	f023 0301 	bic.w	r3, r3, #1
 8008da6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008daa:	f7fe fe81 	bl	8007ab0 <HAL_GetTick>
 8008dae:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008db0:	e008      	b.n	8008dc4 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008db2:	f7fe fe7d 	bl	8007ab0 <HAL_GetTick>
 8008db6:	4602      	mov	r2, r0
 8008db8:	69bb      	ldr	r3, [r7, #24]
 8008dba:	1ad3      	subs	r3, r2, r3
 8008dbc:	2b11      	cmp	r3, #17
 8008dbe:	d901      	bls.n	8008dc4 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8008dc0:	2303      	movs	r3, #3
 8008dc2:	e253      	b.n	800926c <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008dc4:	4b21      	ldr	r3, [pc, #132]	; (8008e4c <HAL_RCC_OscConfig+0x4c4>)
 8008dc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008dca:	f003 0302 	and.w	r3, r3, #2
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d1ef      	bne.n	8008db2 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8008dd2:	4b1e      	ldr	r3, [pc, #120]	; (8008e4c <HAL_RCC_OscConfig+0x4c4>)
 8008dd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008dd8:	f023 0210 	bic.w	r2, r3, #16
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	699b      	ldr	r3, [r3, #24]
 8008de0:	491a      	ldr	r1, [pc, #104]	; (8008e4c <HAL_RCC_OscConfig+0x4c4>)
 8008de2:	4313      	orrs	r3, r2
 8008de4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008de8:	4b18      	ldr	r3, [pc, #96]	; (8008e4c <HAL_RCC_OscConfig+0x4c4>)
 8008dea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008dee:	4a17      	ldr	r2, [pc, #92]	; (8008e4c <HAL_RCC_OscConfig+0x4c4>)
 8008df0:	f043 0301 	orr.w	r3, r3, #1
 8008df4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008df8:	f7fe fe5a 	bl	8007ab0 <HAL_GetTick>
 8008dfc:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008dfe:	e008      	b.n	8008e12 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008e00:	f7fe fe56 	bl	8007ab0 <HAL_GetTick>
 8008e04:	4602      	mov	r2, r0
 8008e06:	69bb      	ldr	r3, [r7, #24]
 8008e08:	1ad3      	subs	r3, r2, r3
 8008e0a:	2b11      	cmp	r3, #17
 8008e0c:	d901      	bls.n	8008e12 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8008e0e:	2303      	movs	r3, #3
 8008e10:	e22c      	b.n	800926c <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008e12:	4b0e      	ldr	r3, [pc, #56]	; (8008e4c <HAL_RCC_OscConfig+0x4c4>)
 8008e14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008e18:	f003 0302 	and.w	r3, r3, #2
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d0ef      	beq.n	8008e00 <HAL_RCC_OscConfig+0x478>
 8008e20:	e01d      	b.n	8008e5e <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008e22:	4b0a      	ldr	r3, [pc, #40]	; (8008e4c <HAL_RCC_OscConfig+0x4c4>)
 8008e24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008e28:	4a08      	ldr	r2, [pc, #32]	; (8008e4c <HAL_RCC_OscConfig+0x4c4>)
 8008e2a:	f023 0301 	bic.w	r3, r3, #1
 8008e2e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e32:	f7fe fe3d 	bl	8007ab0 <HAL_GetTick>
 8008e36:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008e38:	e00a      	b.n	8008e50 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008e3a:	f7fe fe39 	bl	8007ab0 <HAL_GetTick>
 8008e3e:	4602      	mov	r2, r0
 8008e40:	69bb      	ldr	r3, [r7, #24]
 8008e42:	1ad3      	subs	r3, r2, r3
 8008e44:	2b11      	cmp	r3, #17
 8008e46:	d903      	bls.n	8008e50 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8008e48:	2303      	movs	r3, #3
 8008e4a:	e20f      	b.n	800926c <HAL_RCC_OscConfig+0x8e4>
 8008e4c:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008e50:	4b83      	ldr	r3, [pc, #524]	; (8009060 <HAL_RCC_OscConfig+0x6d8>)
 8008e52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008e56:	f003 0302 	and.w	r3, r3, #2
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d1ed      	bne.n	8008e3a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f003 0304 	and.w	r3, r3, #4
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	f000 80bd 	beq.w	8008fe6 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8008e72:	4b7b      	ldr	r3, [pc, #492]	; (8009060 <HAL_RCC_OscConfig+0x6d8>)
 8008e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d10e      	bne.n	8008e9c <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008e7e:	4b78      	ldr	r3, [pc, #480]	; (8009060 <HAL_RCC_OscConfig+0x6d8>)
 8008e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e82:	4a77      	ldr	r2, [pc, #476]	; (8009060 <HAL_RCC_OscConfig+0x6d8>)
 8008e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e88:	6593      	str	r3, [r2, #88]	; 0x58
 8008e8a:	4b75      	ldr	r3, [pc, #468]	; (8009060 <HAL_RCC_OscConfig+0x6d8>)
 8008e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e92:	60fb      	str	r3, [r7, #12]
 8008e94:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008e96:	2301      	movs	r3, #1
 8008e98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008e9c:	4b71      	ldr	r3, [pc, #452]	; (8009064 <HAL_RCC_OscConfig+0x6dc>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d118      	bne.n	8008eda <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008ea8:	4b6e      	ldr	r3, [pc, #440]	; (8009064 <HAL_RCC_OscConfig+0x6dc>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4a6d      	ldr	r2, [pc, #436]	; (8009064 <HAL_RCC_OscConfig+0x6dc>)
 8008eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008eb2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008eb4:	f7fe fdfc 	bl	8007ab0 <HAL_GetTick>
 8008eb8:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008eba:	e008      	b.n	8008ece <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ebc:	f7fe fdf8 	bl	8007ab0 <HAL_GetTick>
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	69bb      	ldr	r3, [r7, #24]
 8008ec4:	1ad3      	subs	r3, r2, r3
 8008ec6:	2b02      	cmp	r3, #2
 8008ec8:	d901      	bls.n	8008ece <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8008eca:	2303      	movs	r3, #3
 8008ecc:	e1ce      	b.n	800926c <HAL_RCC_OscConfig+0x8e4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008ece:	4b65      	ldr	r3, [pc, #404]	; (8009064 <HAL_RCC_OscConfig+0x6dc>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d0f0      	beq.n	8008ebc <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	689b      	ldr	r3, [r3, #8]
 8008ede:	f003 0301 	and.w	r3, r3, #1
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d02c      	beq.n	8008f40 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8008ee6:	4b5e      	ldr	r3, [pc, #376]	; (8009060 <HAL_RCC_OscConfig+0x6d8>)
 8008ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008eec:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	689b      	ldr	r3, [r3, #8]
 8008ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ef8:	4959      	ldr	r1, [pc, #356]	; (8009060 <HAL_RCC_OscConfig+0x6d8>)
 8008efa:	4313      	orrs	r3, r2
 8008efc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	689b      	ldr	r3, [r3, #8]
 8008f04:	f003 0304 	and.w	r3, r3, #4
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d010      	beq.n	8008f2e <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8008f0c:	4b54      	ldr	r3, [pc, #336]	; (8009060 <HAL_RCC_OscConfig+0x6d8>)
 8008f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f12:	4a53      	ldr	r2, [pc, #332]	; (8009060 <HAL_RCC_OscConfig+0x6d8>)
 8008f14:	f043 0304 	orr.w	r3, r3, #4
 8008f18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008f1c:	4b50      	ldr	r3, [pc, #320]	; (8009060 <HAL_RCC_OscConfig+0x6d8>)
 8008f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f22:	4a4f      	ldr	r2, [pc, #316]	; (8009060 <HAL_RCC_OscConfig+0x6d8>)
 8008f24:	f043 0301 	orr.w	r3, r3, #1
 8008f28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008f2c:	e018      	b.n	8008f60 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008f2e:	4b4c      	ldr	r3, [pc, #304]	; (8009060 <HAL_RCC_OscConfig+0x6d8>)
 8008f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f34:	4a4a      	ldr	r2, [pc, #296]	; (8009060 <HAL_RCC_OscConfig+0x6d8>)
 8008f36:	f043 0301 	orr.w	r3, r3, #1
 8008f3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008f3e:	e00f      	b.n	8008f60 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008f40:	4b47      	ldr	r3, [pc, #284]	; (8009060 <HAL_RCC_OscConfig+0x6d8>)
 8008f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f46:	4a46      	ldr	r2, [pc, #280]	; (8009060 <HAL_RCC_OscConfig+0x6d8>)
 8008f48:	f023 0301 	bic.w	r3, r3, #1
 8008f4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8008f50:	4b43      	ldr	r3, [pc, #268]	; (8009060 <HAL_RCC_OscConfig+0x6d8>)
 8008f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f56:	4a42      	ldr	r2, [pc, #264]	; (8009060 <HAL_RCC_OscConfig+0x6d8>)
 8008f58:	f023 0304 	bic.w	r3, r3, #4
 8008f5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	689b      	ldr	r3, [r3, #8]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d016      	beq.n	8008f96 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f68:	f7fe fda2 	bl	8007ab0 <HAL_GetTick>
 8008f6c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008f6e:	e00a      	b.n	8008f86 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f70:	f7fe fd9e 	bl	8007ab0 <HAL_GetTick>
 8008f74:	4602      	mov	r2, r0
 8008f76:	69bb      	ldr	r3, [r7, #24]
 8008f78:	1ad3      	subs	r3, r2, r3
 8008f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d901      	bls.n	8008f86 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8008f82:	2303      	movs	r3, #3
 8008f84:	e172      	b.n	800926c <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008f86:	4b36      	ldr	r3, [pc, #216]	; (8009060 <HAL_RCC_OscConfig+0x6d8>)
 8008f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f8c:	f003 0302 	and.w	r3, r3, #2
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d0ed      	beq.n	8008f70 <HAL_RCC_OscConfig+0x5e8>
 8008f94:	e01d      	b.n	8008fd2 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f96:	f7fe fd8b 	bl	8007ab0 <HAL_GetTick>
 8008f9a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008f9c:	e00a      	b.n	8008fb4 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f9e:	f7fe fd87 	bl	8007ab0 <HAL_GetTick>
 8008fa2:	4602      	mov	r2, r0
 8008fa4:	69bb      	ldr	r3, [r7, #24]
 8008fa6:	1ad3      	subs	r3, r2, r3
 8008fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d901      	bls.n	8008fb4 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8008fb0:	2303      	movs	r3, #3
 8008fb2:	e15b      	b.n	800926c <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008fb4:	4b2a      	ldr	r3, [pc, #168]	; (8009060 <HAL_RCC_OscConfig+0x6d8>)
 8008fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fba:	f003 0302 	and.w	r3, r3, #2
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d1ed      	bne.n	8008f9e <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8008fc2:	4b27      	ldr	r3, [pc, #156]	; (8009060 <HAL_RCC_OscConfig+0x6d8>)
 8008fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fc8:	4a25      	ldr	r2, [pc, #148]	; (8009060 <HAL_RCC_OscConfig+0x6d8>)
 8008fca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008fce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008fd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008fd6:	2b01      	cmp	r3, #1
 8008fd8:	d105      	bne.n	8008fe6 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008fda:	4b21      	ldr	r3, [pc, #132]	; (8009060 <HAL_RCC_OscConfig+0x6d8>)
 8008fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fde:	4a20      	ldr	r2, [pc, #128]	; (8009060 <HAL_RCC_OscConfig+0x6d8>)
 8008fe0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008fe4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f003 0320 	and.w	r3, r3, #32
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d041      	beq.n	8009076 <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d01c      	beq.n	8009034 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008ffa:	4b19      	ldr	r3, [pc, #100]	; (8009060 <HAL_RCC_OscConfig+0x6d8>)
 8008ffc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009000:	4a17      	ldr	r2, [pc, #92]	; (8009060 <HAL_RCC_OscConfig+0x6d8>)
 8009002:	f043 0301 	orr.w	r3, r3, #1
 8009006:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800900a:	f7fe fd51 	bl	8007ab0 <HAL_GetTick>
 800900e:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009010:	e008      	b.n	8009024 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009012:	f7fe fd4d 	bl	8007ab0 <HAL_GetTick>
 8009016:	4602      	mov	r2, r0
 8009018:	69bb      	ldr	r3, [r7, #24]
 800901a:	1ad3      	subs	r3, r2, r3
 800901c:	2b02      	cmp	r3, #2
 800901e:	d901      	bls.n	8009024 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8009020:	2303      	movs	r3, #3
 8009022:	e123      	b.n	800926c <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009024:	4b0e      	ldr	r3, [pc, #56]	; (8009060 <HAL_RCC_OscConfig+0x6d8>)
 8009026:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800902a:	f003 0302 	and.w	r3, r3, #2
 800902e:	2b00      	cmp	r3, #0
 8009030:	d0ef      	beq.n	8009012 <HAL_RCC_OscConfig+0x68a>
 8009032:	e020      	b.n	8009076 <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009034:	4b0a      	ldr	r3, [pc, #40]	; (8009060 <HAL_RCC_OscConfig+0x6d8>)
 8009036:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800903a:	4a09      	ldr	r2, [pc, #36]	; (8009060 <HAL_RCC_OscConfig+0x6d8>)
 800903c:	f023 0301 	bic.w	r3, r3, #1
 8009040:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009044:	f7fe fd34 	bl	8007ab0 <HAL_GetTick>
 8009048:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800904a:	e00d      	b.n	8009068 <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800904c:	f7fe fd30 	bl	8007ab0 <HAL_GetTick>
 8009050:	4602      	mov	r2, r0
 8009052:	69bb      	ldr	r3, [r7, #24]
 8009054:	1ad3      	subs	r3, r2, r3
 8009056:	2b02      	cmp	r3, #2
 8009058:	d906      	bls.n	8009068 <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 800905a:	2303      	movs	r3, #3
 800905c:	e106      	b.n	800926c <HAL_RCC_OscConfig+0x8e4>
 800905e:	bf00      	nop
 8009060:	40021000 	.word	0x40021000
 8009064:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009068:	4b82      	ldr	r3, [pc, #520]	; (8009274 <HAL_RCC_OscConfig+0x8ec>)
 800906a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800906e:	f003 0302 	and.w	r3, r3, #2
 8009072:	2b00      	cmp	r3, #0
 8009074:	d1ea      	bne.n	800904c <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800907a:	2b00      	cmp	r3, #0
 800907c:	f000 80f5 	beq.w	800926a <HAL_RCC_OscConfig+0x8e2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009084:	2b02      	cmp	r3, #2
 8009086:	f040 80cb 	bne.w	8009220 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800908a:	4b7a      	ldr	r3, [pc, #488]	; (8009274 <HAL_RCC_OscConfig+0x8ec>)
 800908c:	68db      	ldr	r3, [r3, #12]
 800908e:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009090:	69fb      	ldr	r3, [r7, #28]
 8009092:	f003 0203 	and.w	r2, r3, #3
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800909a:	429a      	cmp	r2, r3
 800909c:	d12c      	bne.n	80090f8 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800909e:	69fb      	ldr	r3, [r7, #28]
 80090a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090a8:	3b01      	subs	r3, #1
 80090aa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80090ac:	429a      	cmp	r2, r3
 80090ae:	d123      	bne.n	80090f8 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80090b0:	69fb      	ldr	r3, [r7, #28]
 80090b2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ba:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80090bc:	429a      	cmp	r2, r3
 80090be:	d11b      	bne.n	80090f8 <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80090c0:	69fb      	ldr	r3, [r7, #28]
 80090c2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090ca:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80090cc:	429a      	cmp	r2, r3
 80090ce:	d113      	bne.n	80090f8 <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80090d0:	69fb      	ldr	r3, [r7, #28]
 80090d2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090da:	085b      	lsrs	r3, r3, #1
 80090dc:	3b01      	subs	r3, #1
 80090de:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80090e0:	429a      	cmp	r2, r3
 80090e2:	d109      	bne.n	80090f8 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80090e4:	69fb      	ldr	r3, [r7, #28]
 80090e6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090ee:	085b      	lsrs	r3, r3, #1
 80090f0:	3b01      	subs	r3, #1
 80090f2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d06d      	beq.n	80091d4 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80090f8:	6a3b      	ldr	r3, [r7, #32]
 80090fa:	2b0c      	cmp	r3, #12
 80090fc:	d068      	beq.n	80091d0 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80090fe:	4b5d      	ldr	r3, [pc, #372]	; (8009274 <HAL_RCC_OscConfig+0x8ec>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009106:	2b00      	cmp	r3, #0
 8009108:	d105      	bne.n	8009116 <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800910a:	4b5a      	ldr	r3, [pc, #360]	; (8009274 <HAL_RCC_OscConfig+0x8ec>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009112:	2b00      	cmp	r3, #0
 8009114:	d001      	beq.n	800911a <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 8009116:	2301      	movs	r3, #1
 8009118:	e0a8      	b.n	800926c <HAL_RCC_OscConfig+0x8e4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800911a:	4b56      	ldr	r3, [pc, #344]	; (8009274 <HAL_RCC_OscConfig+0x8ec>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	4a55      	ldr	r2, [pc, #340]	; (8009274 <HAL_RCC_OscConfig+0x8ec>)
 8009120:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009124:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009126:	f7fe fcc3 	bl	8007ab0 <HAL_GetTick>
 800912a:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800912c:	e008      	b.n	8009140 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800912e:	f7fe fcbf 	bl	8007ab0 <HAL_GetTick>
 8009132:	4602      	mov	r2, r0
 8009134:	69bb      	ldr	r3, [r7, #24]
 8009136:	1ad3      	subs	r3, r2, r3
 8009138:	2b02      	cmp	r3, #2
 800913a:	d901      	bls.n	8009140 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 800913c:	2303      	movs	r3, #3
 800913e:	e095      	b.n	800926c <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009140:	4b4c      	ldr	r3, [pc, #304]	; (8009274 <HAL_RCC_OscConfig+0x8ec>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009148:	2b00      	cmp	r3, #0
 800914a:	d1f0      	bne.n	800912e <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800914c:	4b49      	ldr	r3, [pc, #292]	; (8009274 <HAL_RCC_OscConfig+0x8ec>)
 800914e:	68da      	ldr	r2, [r3, #12]
 8009150:	4b49      	ldr	r3, [pc, #292]	; (8009278 <HAL_RCC_OscConfig+0x8f0>)
 8009152:	4013      	ands	r3, r2
 8009154:	687a      	ldr	r2, [r7, #4]
 8009156:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8009158:	687a      	ldr	r2, [r7, #4]
 800915a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800915c:	3a01      	subs	r2, #1
 800915e:	0112      	lsls	r2, r2, #4
 8009160:	4311      	orrs	r1, r2
 8009162:	687a      	ldr	r2, [r7, #4]
 8009164:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009166:	0212      	lsls	r2, r2, #8
 8009168:	4311      	orrs	r1, r2
 800916a:	687a      	ldr	r2, [r7, #4]
 800916c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800916e:	0852      	lsrs	r2, r2, #1
 8009170:	3a01      	subs	r2, #1
 8009172:	0552      	lsls	r2, r2, #21
 8009174:	4311      	orrs	r1, r2
 8009176:	687a      	ldr	r2, [r7, #4]
 8009178:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800917a:	0852      	lsrs	r2, r2, #1
 800917c:	3a01      	subs	r2, #1
 800917e:	0652      	lsls	r2, r2, #25
 8009180:	4311      	orrs	r1, r2
 8009182:	687a      	ldr	r2, [r7, #4]
 8009184:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009186:	06d2      	lsls	r2, r2, #27
 8009188:	430a      	orrs	r2, r1
 800918a:	493a      	ldr	r1, [pc, #232]	; (8009274 <HAL_RCC_OscConfig+0x8ec>)
 800918c:	4313      	orrs	r3, r2
 800918e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8009190:	4b38      	ldr	r3, [pc, #224]	; (8009274 <HAL_RCC_OscConfig+0x8ec>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	4a37      	ldr	r2, [pc, #220]	; (8009274 <HAL_RCC_OscConfig+0x8ec>)
 8009196:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800919a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800919c:	4b35      	ldr	r3, [pc, #212]	; (8009274 <HAL_RCC_OscConfig+0x8ec>)
 800919e:	68db      	ldr	r3, [r3, #12]
 80091a0:	4a34      	ldr	r2, [pc, #208]	; (8009274 <HAL_RCC_OscConfig+0x8ec>)
 80091a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80091a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80091a8:	f7fe fc82 	bl	8007ab0 <HAL_GetTick>
 80091ac:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80091ae:	e008      	b.n	80091c2 <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80091b0:	f7fe fc7e 	bl	8007ab0 <HAL_GetTick>
 80091b4:	4602      	mov	r2, r0
 80091b6:	69bb      	ldr	r3, [r7, #24]
 80091b8:	1ad3      	subs	r3, r2, r3
 80091ba:	2b02      	cmp	r3, #2
 80091bc:	d901      	bls.n	80091c2 <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 80091be:	2303      	movs	r3, #3
 80091c0:	e054      	b.n	800926c <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80091c2:	4b2c      	ldr	r3, [pc, #176]	; (8009274 <HAL_RCC_OscConfig+0x8ec>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d0f0      	beq.n	80091b0 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80091ce:	e04c      	b.n	800926a <HAL_RCC_OscConfig+0x8e2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80091d0:	2301      	movs	r3, #1
 80091d2:	e04b      	b.n	800926c <HAL_RCC_OscConfig+0x8e4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80091d4:	4b27      	ldr	r3, [pc, #156]	; (8009274 <HAL_RCC_OscConfig+0x8ec>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d144      	bne.n	800926a <HAL_RCC_OscConfig+0x8e2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80091e0:	4b24      	ldr	r3, [pc, #144]	; (8009274 <HAL_RCC_OscConfig+0x8ec>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4a23      	ldr	r2, [pc, #140]	; (8009274 <HAL_RCC_OscConfig+0x8ec>)
 80091e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80091ea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80091ec:	4b21      	ldr	r3, [pc, #132]	; (8009274 <HAL_RCC_OscConfig+0x8ec>)
 80091ee:	68db      	ldr	r3, [r3, #12]
 80091f0:	4a20      	ldr	r2, [pc, #128]	; (8009274 <HAL_RCC_OscConfig+0x8ec>)
 80091f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80091f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80091f8:	f7fe fc5a 	bl	8007ab0 <HAL_GetTick>
 80091fc:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80091fe:	e008      	b.n	8009212 <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009200:	f7fe fc56 	bl	8007ab0 <HAL_GetTick>
 8009204:	4602      	mov	r2, r0
 8009206:	69bb      	ldr	r3, [r7, #24]
 8009208:	1ad3      	subs	r3, r2, r3
 800920a:	2b02      	cmp	r3, #2
 800920c:	d901      	bls.n	8009212 <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 800920e:	2303      	movs	r3, #3
 8009210:	e02c      	b.n	800926c <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009212:	4b18      	ldr	r3, [pc, #96]	; (8009274 <HAL_RCC_OscConfig+0x8ec>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800921a:	2b00      	cmp	r3, #0
 800921c:	d0f0      	beq.n	8009200 <HAL_RCC_OscConfig+0x878>
 800921e:	e024      	b.n	800926a <HAL_RCC_OscConfig+0x8e2>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009220:	6a3b      	ldr	r3, [r7, #32]
 8009222:	2b0c      	cmp	r3, #12
 8009224:	d01f      	beq.n	8009266 <HAL_RCC_OscConfig+0x8de>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009226:	4b13      	ldr	r3, [pc, #76]	; (8009274 <HAL_RCC_OscConfig+0x8ec>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	4a12      	ldr	r2, [pc, #72]	; (8009274 <HAL_RCC_OscConfig+0x8ec>)
 800922c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009230:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009232:	f7fe fc3d 	bl	8007ab0 <HAL_GetTick>
 8009236:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009238:	e008      	b.n	800924c <HAL_RCC_OscConfig+0x8c4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800923a:	f7fe fc39 	bl	8007ab0 <HAL_GetTick>
 800923e:	4602      	mov	r2, r0
 8009240:	69bb      	ldr	r3, [r7, #24]
 8009242:	1ad3      	subs	r3, r2, r3
 8009244:	2b02      	cmp	r3, #2
 8009246:	d901      	bls.n	800924c <HAL_RCC_OscConfig+0x8c4>
          {
            return HAL_TIMEOUT;
 8009248:	2303      	movs	r3, #3
 800924a:	e00f      	b.n	800926c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800924c:	4b09      	ldr	r3, [pc, #36]	; (8009274 <HAL_RCC_OscConfig+0x8ec>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009254:	2b00      	cmp	r3, #0
 8009256:	d1f0      	bne.n	800923a <HAL_RCC_OscConfig+0x8b2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8009258:	4b06      	ldr	r3, [pc, #24]	; (8009274 <HAL_RCC_OscConfig+0x8ec>)
 800925a:	68da      	ldr	r2, [r3, #12]
 800925c:	4905      	ldr	r1, [pc, #20]	; (8009274 <HAL_RCC_OscConfig+0x8ec>)
 800925e:	4b07      	ldr	r3, [pc, #28]	; (800927c <HAL_RCC_OscConfig+0x8f4>)
 8009260:	4013      	ands	r3, r2
 8009262:	60cb      	str	r3, [r1, #12]
 8009264:	e001      	b.n	800926a <HAL_RCC_OscConfig+0x8e2>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8009266:	2301      	movs	r3, #1
 8009268:	e000      	b.n	800926c <HAL_RCC_OscConfig+0x8e4>
      }
    }
  }
  return HAL_OK;
 800926a:	2300      	movs	r3, #0
}
 800926c:	4618      	mov	r0, r3
 800926e:	3728      	adds	r7, #40	; 0x28
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}
 8009274:	40021000 	.word	0x40021000
 8009278:	019d800c 	.word	0x019d800c
 800927c:	feeefffc 	.word	0xfeeefffc

08009280 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b086      	sub	sp, #24
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
 8009288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800928a:	2300      	movs	r3, #0
 800928c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d101      	bne.n	8009298 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009294:	2301      	movs	r3, #1
 8009296:	e11d      	b.n	80094d4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009298:	4b90      	ldr	r3, [pc, #576]	; (80094dc <HAL_RCC_ClockConfig+0x25c>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f003 030f 	and.w	r3, r3, #15
 80092a0:	683a      	ldr	r2, [r7, #0]
 80092a2:	429a      	cmp	r2, r3
 80092a4:	d910      	bls.n	80092c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80092a6:	4b8d      	ldr	r3, [pc, #564]	; (80094dc <HAL_RCC_ClockConfig+0x25c>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f023 020f 	bic.w	r2, r3, #15
 80092ae:	498b      	ldr	r1, [pc, #556]	; (80094dc <HAL_RCC_ClockConfig+0x25c>)
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	4313      	orrs	r3, r2
 80092b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80092b6:	4b89      	ldr	r3, [pc, #548]	; (80094dc <HAL_RCC_ClockConfig+0x25c>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f003 030f 	and.w	r3, r3, #15
 80092be:	683a      	ldr	r2, [r7, #0]
 80092c0:	429a      	cmp	r2, r3
 80092c2:	d001      	beq.n	80092c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80092c4:	2301      	movs	r3, #1
 80092c6:	e105      	b.n	80094d4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f003 0302 	and.w	r3, r3, #2
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d010      	beq.n	80092f6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	689a      	ldr	r2, [r3, #8]
 80092d8:	4b81      	ldr	r3, [pc, #516]	; (80094e0 <HAL_RCC_ClockConfig+0x260>)
 80092da:	689b      	ldr	r3, [r3, #8]
 80092dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80092e0:	429a      	cmp	r2, r3
 80092e2:	d908      	bls.n	80092f6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80092e4:	4b7e      	ldr	r3, [pc, #504]	; (80094e0 <HAL_RCC_ClockConfig+0x260>)
 80092e6:	689b      	ldr	r3, [r3, #8]
 80092e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	689b      	ldr	r3, [r3, #8]
 80092f0:	497b      	ldr	r1, [pc, #492]	; (80094e0 <HAL_RCC_ClockConfig+0x260>)
 80092f2:	4313      	orrs	r3, r2
 80092f4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f003 0301 	and.w	r3, r3, #1
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d079      	beq.n	80093f6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	2b03      	cmp	r3, #3
 8009308:	d11e      	bne.n	8009348 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800930a:	4b75      	ldr	r3, [pc, #468]	; (80094e0 <HAL_RCC_ClockConfig+0x260>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009312:	2b00      	cmp	r3, #0
 8009314:	d101      	bne.n	800931a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8009316:	2301      	movs	r3, #1
 8009318:	e0dc      	b.n	80094d4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800931a:	f000 fa3b 	bl	8009794 <RCC_GetSysClockFreqFromPLLSource>
 800931e:	4603      	mov	r3, r0
 8009320:	4a70      	ldr	r2, [pc, #448]	; (80094e4 <HAL_RCC_ClockConfig+0x264>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d946      	bls.n	80093b4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8009326:	4b6e      	ldr	r3, [pc, #440]	; (80094e0 <HAL_RCC_ClockConfig+0x260>)
 8009328:	689b      	ldr	r3, [r3, #8]
 800932a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800932e:	2b00      	cmp	r3, #0
 8009330:	d140      	bne.n	80093b4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009332:	4b6b      	ldr	r3, [pc, #428]	; (80094e0 <HAL_RCC_ClockConfig+0x260>)
 8009334:	689b      	ldr	r3, [r3, #8]
 8009336:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800933a:	4a69      	ldr	r2, [pc, #420]	; (80094e0 <HAL_RCC_ClockConfig+0x260>)
 800933c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009340:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009342:	2380      	movs	r3, #128	; 0x80
 8009344:	617b      	str	r3, [r7, #20]
 8009346:	e035      	b.n	80093b4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	685b      	ldr	r3, [r3, #4]
 800934c:	2b02      	cmp	r3, #2
 800934e:	d107      	bne.n	8009360 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009350:	4b63      	ldr	r3, [pc, #396]	; (80094e0 <HAL_RCC_ClockConfig+0x260>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009358:	2b00      	cmp	r3, #0
 800935a:	d115      	bne.n	8009388 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800935c:	2301      	movs	r3, #1
 800935e:	e0b9      	b.n	80094d4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	685b      	ldr	r3, [r3, #4]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d107      	bne.n	8009378 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009368:	4b5d      	ldr	r3, [pc, #372]	; (80094e0 <HAL_RCC_ClockConfig+0x260>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f003 0302 	and.w	r3, r3, #2
 8009370:	2b00      	cmp	r3, #0
 8009372:	d109      	bne.n	8009388 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8009374:	2301      	movs	r3, #1
 8009376:	e0ad      	b.n	80094d4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009378:	4b59      	ldr	r3, [pc, #356]	; (80094e0 <HAL_RCC_ClockConfig+0x260>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009380:	2b00      	cmp	r3, #0
 8009382:	d101      	bne.n	8009388 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8009384:	2301      	movs	r3, #1
 8009386:	e0a5      	b.n	80094d4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8009388:	f000 f8b4 	bl	80094f4 <HAL_RCC_GetSysClockFreq>
 800938c:	4603      	mov	r3, r0
 800938e:	4a55      	ldr	r2, [pc, #340]	; (80094e4 <HAL_RCC_ClockConfig+0x264>)
 8009390:	4293      	cmp	r3, r2
 8009392:	d90f      	bls.n	80093b4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8009394:	4b52      	ldr	r3, [pc, #328]	; (80094e0 <HAL_RCC_ClockConfig+0x260>)
 8009396:	689b      	ldr	r3, [r3, #8]
 8009398:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800939c:	2b00      	cmp	r3, #0
 800939e:	d109      	bne.n	80093b4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80093a0:	4b4f      	ldr	r3, [pc, #316]	; (80094e0 <HAL_RCC_ClockConfig+0x260>)
 80093a2:	689b      	ldr	r3, [r3, #8]
 80093a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80093a8:	4a4d      	ldr	r2, [pc, #308]	; (80094e0 <HAL_RCC_ClockConfig+0x260>)
 80093aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093ae:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80093b0:	2380      	movs	r3, #128	; 0x80
 80093b2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80093b4:	4b4a      	ldr	r3, [pc, #296]	; (80094e0 <HAL_RCC_ClockConfig+0x260>)
 80093b6:	689b      	ldr	r3, [r3, #8]
 80093b8:	f023 0203 	bic.w	r2, r3, #3
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	685b      	ldr	r3, [r3, #4]
 80093c0:	4947      	ldr	r1, [pc, #284]	; (80094e0 <HAL_RCC_ClockConfig+0x260>)
 80093c2:	4313      	orrs	r3, r2
 80093c4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80093c6:	f7fe fb73 	bl	8007ab0 <HAL_GetTick>
 80093ca:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80093cc:	e00a      	b.n	80093e4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80093ce:	f7fe fb6f 	bl	8007ab0 <HAL_GetTick>
 80093d2:	4602      	mov	r2, r0
 80093d4:	693b      	ldr	r3, [r7, #16]
 80093d6:	1ad3      	subs	r3, r2, r3
 80093d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80093dc:	4293      	cmp	r3, r2
 80093de:	d901      	bls.n	80093e4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80093e0:	2303      	movs	r3, #3
 80093e2:	e077      	b.n	80094d4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80093e4:	4b3e      	ldr	r3, [pc, #248]	; (80094e0 <HAL_RCC_ClockConfig+0x260>)
 80093e6:	689b      	ldr	r3, [r3, #8]
 80093e8:	f003 020c 	and.w	r2, r3, #12
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	009b      	lsls	r3, r3, #2
 80093f2:	429a      	cmp	r2, r3
 80093f4:	d1eb      	bne.n	80093ce <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	2b80      	cmp	r3, #128	; 0x80
 80093fa:	d105      	bne.n	8009408 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80093fc:	4b38      	ldr	r3, [pc, #224]	; (80094e0 <HAL_RCC_ClockConfig+0x260>)
 80093fe:	689b      	ldr	r3, [r3, #8]
 8009400:	4a37      	ldr	r2, [pc, #220]	; (80094e0 <HAL_RCC_ClockConfig+0x260>)
 8009402:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009406:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f003 0302 	and.w	r3, r3, #2
 8009410:	2b00      	cmp	r3, #0
 8009412:	d010      	beq.n	8009436 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	689a      	ldr	r2, [r3, #8]
 8009418:	4b31      	ldr	r3, [pc, #196]	; (80094e0 <HAL_RCC_ClockConfig+0x260>)
 800941a:	689b      	ldr	r3, [r3, #8]
 800941c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009420:	429a      	cmp	r2, r3
 8009422:	d208      	bcs.n	8009436 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009424:	4b2e      	ldr	r3, [pc, #184]	; (80094e0 <HAL_RCC_ClockConfig+0x260>)
 8009426:	689b      	ldr	r3, [r3, #8]
 8009428:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	492b      	ldr	r1, [pc, #172]	; (80094e0 <HAL_RCC_ClockConfig+0x260>)
 8009432:	4313      	orrs	r3, r2
 8009434:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009436:	4b29      	ldr	r3, [pc, #164]	; (80094dc <HAL_RCC_ClockConfig+0x25c>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f003 030f 	and.w	r3, r3, #15
 800943e:	683a      	ldr	r2, [r7, #0]
 8009440:	429a      	cmp	r2, r3
 8009442:	d210      	bcs.n	8009466 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009444:	4b25      	ldr	r3, [pc, #148]	; (80094dc <HAL_RCC_ClockConfig+0x25c>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f023 020f 	bic.w	r2, r3, #15
 800944c:	4923      	ldr	r1, [pc, #140]	; (80094dc <HAL_RCC_ClockConfig+0x25c>)
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	4313      	orrs	r3, r2
 8009452:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009454:	4b21      	ldr	r3, [pc, #132]	; (80094dc <HAL_RCC_ClockConfig+0x25c>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f003 030f 	and.w	r3, r3, #15
 800945c:	683a      	ldr	r2, [r7, #0]
 800945e:	429a      	cmp	r2, r3
 8009460:	d001      	beq.n	8009466 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8009462:	2301      	movs	r3, #1
 8009464:	e036      	b.n	80094d4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f003 0304 	and.w	r3, r3, #4
 800946e:	2b00      	cmp	r3, #0
 8009470:	d008      	beq.n	8009484 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009472:	4b1b      	ldr	r3, [pc, #108]	; (80094e0 <HAL_RCC_ClockConfig+0x260>)
 8009474:	689b      	ldr	r3, [r3, #8]
 8009476:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	68db      	ldr	r3, [r3, #12]
 800947e:	4918      	ldr	r1, [pc, #96]	; (80094e0 <HAL_RCC_ClockConfig+0x260>)
 8009480:	4313      	orrs	r3, r2
 8009482:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f003 0308 	and.w	r3, r3, #8
 800948c:	2b00      	cmp	r3, #0
 800948e:	d009      	beq.n	80094a4 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009490:	4b13      	ldr	r3, [pc, #76]	; (80094e0 <HAL_RCC_ClockConfig+0x260>)
 8009492:	689b      	ldr	r3, [r3, #8]
 8009494:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	691b      	ldr	r3, [r3, #16]
 800949c:	00db      	lsls	r3, r3, #3
 800949e:	4910      	ldr	r1, [pc, #64]	; (80094e0 <HAL_RCC_ClockConfig+0x260>)
 80094a0:	4313      	orrs	r3, r2
 80094a2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80094a4:	f000 f826 	bl	80094f4 <HAL_RCC_GetSysClockFreq>
 80094a8:	4602      	mov	r2, r0
 80094aa:	4b0d      	ldr	r3, [pc, #52]	; (80094e0 <HAL_RCC_ClockConfig+0x260>)
 80094ac:	689b      	ldr	r3, [r3, #8]
 80094ae:	091b      	lsrs	r3, r3, #4
 80094b0:	f003 030f 	and.w	r3, r3, #15
 80094b4:	490c      	ldr	r1, [pc, #48]	; (80094e8 <HAL_RCC_ClockConfig+0x268>)
 80094b6:	5ccb      	ldrb	r3, [r1, r3]
 80094b8:	f003 031f 	and.w	r3, r3, #31
 80094bc:	fa22 f303 	lsr.w	r3, r2, r3
 80094c0:	4a0a      	ldr	r2, [pc, #40]	; (80094ec <HAL_RCC_ClockConfig+0x26c>)
 80094c2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80094c4:	4b0a      	ldr	r3, [pc, #40]	; (80094f0 <HAL_RCC_ClockConfig+0x270>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	4618      	mov	r0, r3
 80094ca:	f7fd fee1 	bl	8007290 <HAL_InitTick>
 80094ce:	4603      	mov	r3, r0
 80094d0:	73fb      	strb	r3, [r7, #15]

  return status;
 80094d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3718      	adds	r7, #24
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}
 80094dc:	40022000 	.word	0x40022000
 80094e0:	40021000 	.word	0x40021000
 80094e4:	04c4b400 	.word	0x04c4b400
 80094e8:	08018b10 	.word	0x08018b10
 80094ec:	20000094 	.word	0x20000094
 80094f0:	20000098 	.word	0x20000098

080094f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b089      	sub	sp, #36	; 0x24
 80094f8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80094fa:	2300      	movs	r3, #0
 80094fc:	61fb      	str	r3, [r7, #28]
 80094fe:	2300      	movs	r3, #0
 8009500:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009502:	4b3e      	ldr	r3, [pc, #248]	; (80095fc <HAL_RCC_GetSysClockFreq+0x108>)
 8009504:	689b      	ldr	r3, [r3, #8]
 8009506:	f003 030c 	and.w	r3, r3, #12
 800950a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800950c:	4b3b      	ldr	r3, [pc, #236]	; (80095fc <HAL_RCC_GetSysClockFreq+0x108>)
 800950e:	68db      	ldr	r3, [r3, #12]
 8009510:	f003 0303 	and.w	r3, r3, #3
 8009514:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009516:	693b      	ldr	r3, [r7, #16]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d005      	beq.n	8009528 <HAL_RCC_GetSysClockFreq+0x34>
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	2b0c      	cmp	r3, #12
 8009520:	d121      	bne.n	8009566 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	2b01      	cmp	r3, #1
 8009526:	d11e      	bne.n	8009566 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009528:	4b34      	ldr	r3, [pc, #208]	; (80095fc <HAL_RCC_GetSysClockFreq+0x108>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f003 0308 	and.w	r3, r3, #8
 8009530:	2b00      	cmp	r3, #0
 8009532:	d107      	bne.n	8009544 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009534:	4b31      	ldr	r3, [pc, #196]	; (80095fc <HAL_RCC_GetSysClockFreq+0x108>)
 8009536:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800953a:	0a1b      	lsrs	r3, r3, #8
 800953c:	f003 030f 	and.w	r3, r3, #15
 8009540:	61fb      	str	r3, [r7, #28]
 8009542:	e005      	b.n	8009550 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009544:	4b2d      	ldr	r3, [pc, #180]	; (80095fc <HAL_RCC_GetSysClockFreq+0x108>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	091b      	lsrs	r3, r3, #4
 800954a:	f003 030f 	and.w	r3, r3, #15
 800954e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8009550:	4a2b      	ldr	r2, [pc, #172]	; (8009600 <HAL_RCC_GetSysClockFreq+0x10c>)
 8009552:	69fb      	ldr	r3, [r7, #28]
 8009554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009558:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d10d      	bne.n	800957c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8009560:	69fb      	ldr	r3, [r7, #28]
 8009562:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009564:	e00a      	b.n	800957c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	2b04      	cmp	r3, #4
 800956a:	d102      	bne.n	8009572 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800956c:	4b25      	ldr	r3, [pc, #148]	; (8009604 <HAL_RCC_GetSysClockFreq+0x110>)
 800956e:	61bb      	str	r3, [r7, #24]
 8009570:	e004      	b.n	800957c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	2b08      	cmp	r3, #8
 8009576:	d101      	bne.n	800957c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009578:	4b23      	ldr	r3, [pc, #140]	; (8009608 <HAL_RCC_GetSysClockFreq+0x114>)
 800957a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800957c:	693b      	ldr	r3, [r7, #16]
 800957e:	2b0c      	cmp	r3, #12
 8009580:	d134      	bne.n	80095ec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009582:	4b1e      	ldr	r3, [pc, #120]	; (80095fc <HAL_RCC_GetSysClockFreq+0x108>)
 8009584:	68db      	ldr	r3, [r3, #12]
 8009586:	f003 0303 	and.w	r3, r3, #3
 800958a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	2b02      	cmp	r3, #2
 8009590:	d003      	beq.n	800959a <HAL_RCC_GetSysClockFreq+0xa6>
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	2b03      	cmp	r3, #3
 8009596:	d003      	beq.n	80095a0 <HAL_RCC_GetSysClockFreq+0xac>
 8009598:	e005      	b.n	80095a6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800959a:	4b1a      	ldr	r3, [pc, #104]	; (8009604 <HAL_RCC_GetSysClockFreq+0x110>)
 800959c:	617b      	str	r3, [r7, #20]
      break;
 800959e:	e005      	b.n	80095ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80095a0:	4b19      	ldr	r3, [pc, #100]	; (8009608 <HAL_RCC_GetSysClockFreq+0x114>)
 80095a2:	617b      	str	r3, [r7, #20]
      break;
 80095a4:	e002      	b.n	80095ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80095a6:	69fb      	ldr	r3, [r7, #28]
 80095a8:	617b      	str	r3, [r7, #20]
      break;
 80095aa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80095ac:	4b13      	ldr	r3, [pc, #76]	; (80095fc <HAL_RCC_GetSysClockFreq+0x108>)
 80095ae:	68db      	ldr	r3, [r3, #12]
 80095b0:	091b      	lsrs	r3, r3, #4
 80095b2:	f003 030f 	and.w	r3, r3, #15
 80095b6:	3301      	adds	r3, #1
 80095b8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80095ba:	4b10      	ldr	r3, [pc, #64]	; (80095fc <HAL_RCC_GetSysClockFreq+0x108>)
 80095bc:	68db      	ldr	r3, [r3, #12]
 80095be:	0a1b      	lsrs	r3, r3, #8
 80095c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095c4:	697a      	ldr	r2, [r7, #20]
 80095c6:	fb03 f202 	mul.w	r2, r3, r2
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80095d0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80095d2:	4b0a      	ldr	r3, [pc, #40]	; (80095fc <HAL_RCC_GetSysClockFreq+0x108>)
 80095d4:	68db      	ldr	r3, [r3, #12]
 80095d6:	0e5b      	lsrs	r3, r3, #25
 80095d8:	f003 0303 	and.w	r3, r3, #3
 80095dc:	3301      	adds	r3, #1
 80095de:	005b      	lsls	r3, r3, #1
 80095e0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80095e2:	697a      	ldr	r2, [r7, #20]
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80095ea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80095ec:	69bb      	ldr	r3, [r7, #24]
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	3724      	adds	r7, #36	; 0x24
 80095f2:	46bd      	mov	sp, r7
 80095f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f8:	4770      	bx	lr
 80095fa:	bf00      	nop
 80095fc:	40021000 	.word	0x40021000
 8009600:	08018b28 	.word	0x08018b28
 8009604:	00f42400 	.word	0x00f42400
 8009608:	007a1200 	.word	0x007a1200

0800960c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800960c:	b480      	push	{r7}
 800960e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009610:	4b03      	ldr	r3, [pc, #12]	; (8009620 <HAL_RCC_GetHCLKFreq+0x14>)
 8009612:	681b      	ldr	r3, [r3, #0]
}
 8009614:	4618      	mov	r0, r3
 8009616:	46bd      	mov	sp, r7
 8009618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961c:	4770      	bx	lr
 800961e:	bf00      	nop
 8009620:	20000094 	.word	0x20000094

08009624 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009628:	f7ff fff0 	bl	800960c <HAL_RCC_GetHCLKFreq>
 800962c:	4602      	mov	r2, r0
 800962e:	4b06      	ldr	r3, [pc, #24]	; (8009648 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009630:	689b      	ldr	r3, [r3, #8]
 8009632:	0a1b      	lsrs	r3, r3, #8
 8009634:	f003 0307 	and.w	r3, r3, #7
 8009638:	4904      	ldr	r1, [pc, #16]	; (800964c <HAL_RCC_GetPCLK1Freq+0x28>)
 800963a:	5ccb      	ldrb	r3, [r1, r3]
 800963c:	f003 031f 	and.w	r3, r3, #31
 8009640:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009644:	4618      	mov	r0, r3
 8009646:	bd80      	pop	{r7, pc}
 8009648:	40021000 	.word	0x40021000
 800964c:	08018b20 	.word	0x08018b20

08009650 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009654:	f7ff ffda 	bl	800960c <HAL_RCC_GetHCLKFreq>
 8009658:	4602      	mov	r2, r0
 800965a:	4b06      	ldr	r3, [pc, #24]	; (8009674 <HAL_RCC_GetPCLK2Freq+0x24>)
 800965c:	689b      	ldr	r3, [r3, #8]
 800965e:	0adb      	lsrs	r3, r3, #11
 8009660:	f003 0307 	and.w	r3, r3, #7
 8009664:	4904      	ldr	r1, [pc, #16]	; (8009678 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009666:	5ccb      	ldrb	r3, [r1, r3]
 8009668:	f003 031f 	and.w	r3, r3, #31
 800966c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009670:	4618      	mov	r0, r3
 8009672:	bd80      	pop	{r7, pc}
 8009674:	40021000 	.word	0x40021000
 8009678:	08018b20 	.word	0x08018b20

0800967c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800967c:	b480      	push	{r7}
 800967e:	b083      	sub	sp, #12
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	220f      	movs	r2, #15
 800968a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800968c:	4b12      	ldr	r3, [pc, #72]	; (80096d8 <HAL_RCC_GetClockConfig+0x5c>)
 800968e:	689b      	ldr	r3, [r3, #8]
 8009690:	f003 0203 	and.w	r2, r3, #3
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8009698:	4b0f      	ldr	r3, [pc, #60]	; (80096d8 <HAL_RCC_GetClockConfig+0x5c>)
 800969a:	689b      	ldr	r3, [r3, #8]
 800969c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80096a4:	4b0c      	ldr	r3, [pc, #48]	; (80096d8 <HAL_RCC_GetClockConfig+0x5c>)
 80096a6:	689b      	ldr	r3, [r3, #8]
 80096a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80096b0:	4b09      	ldr	r3, [pc, #36]	; (80096d8 <HAL_RCC_GetClockConfig+0x5c>)
 80096b2:	689b      	ldr	r3, [r3, #8]
 80096b4:	08db      	lsrs	r3, r3, #3
 80096b6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80096be:	4b07      	ldr	r3, [pc, #28]	; (80096dc <HAL_RCC_GetClockConfig+0x60>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f003 020f 	and.w	r2, r3, #15
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	601a      	str	r2, [r3, #0]
}
 80096ca:	bf00      	nop
 80096cc:	370c      	adds	r7, #12
 80096ce:	46bd      	mov	sp, r7
 80096d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d4:	4770      	bx	lr
 80096d6:	bf00      	nop
 80096d8:	40021000 	.word	0x40021000
 80096dc:	40022000 	.word	0x40022000

080096e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b086      	sub	sp, #24
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80096e8:	2300      	movs	r3, #0
 80096ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80096ec:	4b27      	ldr	r3, [pc, #156]	; (800978c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80096ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d003      	beq.n	8009700 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80096f8:	f7ff f882 	bl	8008800 <HAL_PWREx_GetVoltageRange>
 80096fc:	6178      	str	r0, [r7, #20]
 80096fe:	e014      	b.n	800972a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8009700:	4b22      	ldr	r3, [pc, #136]	; (800978c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8009702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009704:	4a21      	ldr	r2, [pc, #132]	; (800978c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8009706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800970a:	6593      	str	r3, [r2, #88]	; 0x58
 800970c:	4b1f      	ldr	r3, [pc, #124]	; (800978c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800970e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009714:	60fb      	str	r3, [r7, #12]
 8009716:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8009718:	f7ff f872 	bl	8008800 <HAL_PWREx_GetVoltageRange>
 800971c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800971e:	4b1b      	ldr	r3, [pc, #108]	; (800978c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8009720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009722:	4a1a      	ldr	r2, [pc, #104]	; (800978c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8009724:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009728:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009730:	d10b      	bne.n	800974a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2b80      	cmp	r3, #128	; 0x80
 8009736:	d913      	bls.n	8009760 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2ba0      	cmp	r3, #160	; 0xa0
 800973c:	d902      	bls.n	8009744 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800973e:	2302      	movs	r3, #2
 8009740:	613b      	str	r3, [r7, #16]
 8009742:	e00d      	b.n	8009760 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009744:	2301      	movs	r3, #1
 8009746:	613b      	str	r3, [r7, #16]
 8009748:	e00a      	b.n	8009760 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2b7f      	cmp	r3, #127	; 0x7f
 800974e:	d902      	bls.n	8009756 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8009750:	2302      	movs	r3, #2
 8009752:	613b      	str	r3, [r7, #16]
 8009754:	e004      	b.n	8009760 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2b70      	cmp	r3, #112	; 0x70
 800975a:	d101      	bne.n	8009760 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800975c:	2301      	movs	r3, #1
 800975e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009760:	4b0b      	ldr	r3, [pc, #44]	; (8009790 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f023 020f 	bic.w	r2, r3, #15
 8009768:	4909      	ldr	r1, [pc, #36]	; (8009790 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	4313      	orrs	r3, r2
 800976e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8009770:	4b07      	ldr	r3, [pc, #28]	; (8009790 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f003 030f 	and.w	r3, r3, #15
 8009778:	693a      	ldr	r2, [r7, #16]
 800977a:	429a      	cmp	r2, r3
 800977c:	d001      	beq.n	8009782 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800977e:	2301      	movs	r3, #1
 8009780:	e000      	b.n	8009784 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8009782:	2300      	movs	r3, #0
}
 8009784:	4618      	mov	r0, r3
 8009786:	3718      	adds	r7, #24
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}
 800978c:	40021000 	.word	0x40021000
 8009790:	40022000 	.word	0x40022000

08009794 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009794:	b480      	push	{r7}
 8009796:	b087      	sub	sp, #28
 8009798:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800979a:	4b2d      	ldr	r3, [pc, #180]	; (8009850 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800979c:	68db      	ldr	r3, [r3, #12]
 800979e:	f003 0303 	and.w	r3, r3, #3
 80097a2:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	2b03      	cmp	r3, #3
 80097a8:	d00b      	beq.n	80097c2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2b03      	cmp	r3, #3
 80097ae:	d825      	bhi.n	80097fc <RCC_GetSysClockFreqFromPLLSource+0x68>
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2b01      	cmp	r3, #1
 80097b4:	d008      	beq.n	80097c8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	2b02      	cmp	r3, #2
 80097ba:	d11f      	bne.n	80097fc <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80097bc:	4b25      	ldr	r3, [pc, #148]	; (8009854 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80097be:	613b      	str	r3, [r7, #16]
    break;
 80097c0:	e01f      	b.n	8009802 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80097c2:	4b25      	ldr	r3, [pc, #148]	; (8009858 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80097c4:	613b      	str	r3, [r7, #16]
    break;
 80097c6:	e01c      	b.n	8009802 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80097c8:	4b21      	ldr	r3, [pc, #132]	; (8009850 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f003 0308 	and.w	r3, r3, #8
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d107      	bne.n	80097e4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80097d4:	4b1e      	ldr	r3, [pc, #120]	; (8009850 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80097d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80097da:	0a1b      	lsrs	r3, r3, #8
 80097dc:	f003 030f 	and.w	r3, r3, #15
 80097e0:	617b      	str	r3, [r7, #20]
 80097e2:	e005      	b.n	80097f0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80097e4:	4b1a      	ldr	r3, [pc, #104]	; (8009850 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	091b      	lsrs	r3, r3, #4
 80097ea:	f003 030f 	and.w	r3, r3, #15
 80097ee:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80097f0:	4a1a      	ldr	r2, [pc, #104]	; (800985c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097f8:	613b      	str	r3, [r7, #16]
    break;
 80097fa:	e002      	b.n	8009802 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80097fc:	2300      	movs	r3, #0
 80097fe:	613b      	str	r3, [r7, #16]
    break;
 8009800:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009802:	4b13      	ldr	r3, [pc, #76]	; (8009850 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009804:	68db      	ldr	r3, [r3, #12]
 8009806:	091b      	lsrs	r3, r3, #4
 8009808:	f003 030f 	and.w	r3, r3, #15
 800980c:	3301      	adds	r3, #1
 800980e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009810:	4b0f      	ldr	r3, [pc, #60]	; (8009850 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009812:	68db      	ldr	r3, [r3, #12]
 8009814:	0a1b      	lsrs	r3, r3, #8
 8009816:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800981a:	693a      	ldr	r2, [r7, #16]
 800981c:	fb03 f202 	mul.w	r2, r3, r2
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	fbb2 f3f3 	udiv	r3, r2, r3
 8009826:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009828:	4b09      	ldr	r3, [pc, #36]	; (8009850 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800982a:	68db      	ldr	r3, [r3, #12]
 800982c:	0e5b      	lsrs	r3, r3, #25
 800982e:	f003 0303 	and.w	r3, r3, #3
 8009832:	3301      	adds	r3, #1
 8009834:	005b      	lsls	r3, r3, #1
 8009836:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8009838:	693a      	ldr	r2, [r7, #16]
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009840:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8009842:	683b      	ldr	r3, [r7, #0]
}
 8009844:	4618      	mov	r0, r3
 8009846:	371c      	adds	r7, #28
 8009848:	46bd      	mov	sp, r7
 800984a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984e:	4770      	bx	lr
 8009850:	40021000 	.word	0x40021000
 8009854:	00f42400 	.word	0x00f42400
 8009858:	007a1200 	.word	0x007a1200
 800985c:	08018b28 	.word	0x08018b28

08009860 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b086      	sub	sp, #24
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009868:	2300      	movs	r3, #0
 800986a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800986c:	2300      	movs	r3, #0
 800986e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009878:	2b00      	cmp	r3, #0
 800987a:	d040      	beq.n	80098fe <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009880:	2b80      	cmp	r3, #128	; 0x80
 8009882:	d02a      	beq.n	80098da <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009884:	2b80      	cmp	r3, #128	; 0x80
 8009886:	d825      	bhi.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8009888:	2b60      	cmp	r3, #96	; 0x60
 800988a:	d026      	beq.n	80098da <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800988c:	2b60      	cmp	r3, #96	; 0x60
 800988e:	d821      	bhi.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8009890:	2b40      	cmp	r3, #64	; 0x40
 8009892:	d006      	beq.n	80098a2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8009894:	2b40      	cmp	r3, #64	; 0x40
 8009896:	d81d      	bhi.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8009898:	2b00      	cmp	r3, #0
 800989a:	d009      	beq.n	80098b0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800989c:	2b20      	cmp	r3, #32
 800989e:	d010      	beq.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80098a0:	e018      	b.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80098a2:	4b89      	ldr	r3, [pc, #548]	; (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80098a4:	68db      	ldr	r3, [r3, #12]
 80098a6:	4a88      	ldr	r2, [pc, #544]	; (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80098a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80098ac:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80098ae:	e015      	b.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	3304      	adds	r3, #4
 80098b4:	2100      	movs	r1, #0
 80098b6:	4618      	mov	r0, r3
 80098b8:	f000 fb3e 	bl	8009f38 <RCCEx_PLLSAI1_Config>
 80098bc:	4603      	mov	r3, r0
 80098be:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80098c0:	e00c      	b.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	3320      	adds	r3, #32
 80098c6:	2100      	movs	r1, #0
 80098c8:	4618      	mov	r0, r3
 80098ca:	f000 fc29 	bl	800a120 <RCCEx_PLLSAI2_Config>
 80098ce:	4603      	mov	r3, r0
 80098d0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80098d2:	e003      	b.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80098d4:	2301      	movs	r3, #1
 80098d6:	74fb      	strb	r3, [r7, #19]
      break;
 80098d8:	e000      	b.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80098da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098dc:	7cfb      	ldrb	r3, [r7, #19]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d10b      	bne.n	80098fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80098e2:	4b79      	ldr	r3, [pc, #484]	; (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80098e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80098e8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098f0:	4975      	ldr	r1, [pc, #468]	; (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80098f2:	4313      	orrs	r3, r2
 80098f4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80098f8:	e001      	b.n	80098fe <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098fa:	7cfb      	ldrb	r3, [r7, #19]
 80098fc:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009906:	2b00      	cmp	r3, #0
 8009908:	d047      	beq.n	800999a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800990e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009912:	d030      	beq.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8009914:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009918:	d82a      	bhi.n	8009970 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800991a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800991e:	d02a      	beq.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8009920:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009924:	d824      	bhi.n	8009970 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8009926:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800992a:	d008      	beq.n	800993e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800992c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009930:	d81e      	bhi.n	8009970 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8009932:	2b00      	cmp	r3, #0
 8009934:	d00a      	beq.n	800994c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8009936:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800993a:	d010      	beq.n	800995e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800993c:	e018      	b.n	8009970 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800993e:	4b62      	ldr	r3, [pc, #392]	; (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009940:	68db      	ldr	r3, [r3, #12]
 8009942:	4a61      	ldr	r2, [pc, #388]	; (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009944:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009948:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800994a:	e015      	b.n	8009978 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	3304      	adds	r3, #4
 8009950:	2100      	movs	r1, #0
 8009952:	4618      	mov	r0, r3
 8009954:	f000 faf0 	bl	8009f38 <RCCEx_PLLSAI1_Config>
 8009958:	4603      	mov	r3, r0
 800995a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800995c:	e00c      	b.n	8009978 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	3320      	adds	r3, #32
 8009962:	2100      	movs	r1, #0
 8009964:	4618      	mov	r0, r3
 8009966:	f000 fbdb 	bl	800a120 <RCCEx_PLLSAI2_Config>
 800996a:	4603      	mov	r3, r0
 800996c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800996e:	e003      	b.n	8009978 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009970:	2301      	movs	r3, #1
 8009972:	74fb      	strb	r3, [r7, #19]
      break;
 8009974:	e000      	b.n	8009978 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8009976:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009978:	7cfb      	ldrb	r3, [r7, #19]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d10b      	bne.n	8009996 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800997e:	4b52      	ldr	r3, [pc, #328]	; (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009980:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009984:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800998c:	494e      	ldr	r1, [pc, #312]	; (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800998e:	4313      	orrs	r3, r2
 8009990:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8009994:	e001      	b.n	800999a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009996:	7cfb      	ldrb	r3, [r7, #19]
 8009998:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	f000 809f 	beq.w	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80099a8:	2300      	movs	r3, #0
 80099aa:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80099ac:	4b46      	ldr	r3, [pc, #280]	; (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80099ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d101      	bne.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80099b8:	2301      	movs	r3, #1
 80099ba:	e000      	b.n	80099be <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80099bc:	2300      	movs	r3, #0
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d00d      	beq.n	80099de <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80099c2:	4b41      	ldr	r3, [pc, #260]	; (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80099c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099c6:	4a40      	ldr	r2, [pc, #256]	; (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80099c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80099cc:	6593      	str	r3, [r2, #88]	; 0x58
 80099ce:	4b3e      	ldr	r3, [pc, #248]	; (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80099d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80099d6:	60bb      	str	r3, [r7, #8]
 80099d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80099da:	2301      	movs	r3, #1
 80099dc:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80099de:	4b3b      	ldr	r3, [pc, #236]	; (8009acc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	4a3a      	ldr	r2, [pc, #232]	; (8009acc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80099e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80099e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80099ea:	f7fe f861 	bl	8007ab0 <HAL_GetTick>
 80099ee:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80099f0:	e009      	b.n	8009a06 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80099f2:	f7fe f85d 	bl	8007ab0 <HAL_GetTick>
 80099f6:	4602      	mov	r2, r0
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	1ad3      	subs	r3, r2, r3
 80099fc:	2b02      	cmp	r3, #2
 80099fe:	d902      	bls.n	8009a06 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8009a00:	2303      	movs	r3, #3
 8009a02:	74fb      	strb	r3, [r7, #19]
        break;
 8009a04:	e005      	b.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009a06:	4b31      	ldr	r3, [pc, #196]	; (8009acc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d0ef      	beq.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8009a12:	7cfb      	ldrb	r3, [r7, #19]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d15b      	bne.n	8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009a18:	4b2b      	ldr	r3, [pc, #172]	; (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a22:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d01f      	beq.n	8009a6a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009a30:	697a      	ldr	r2, [r7, #20]
 8009a32:	429a      	cmp	r2, r3
 8009a34:	d019      	beq.n	8009a6a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009a36:	4b24      	ldr	r3, [pc, #144]	; (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a40:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009a42:	4b21      	ldr	r3, [pc, #132]	; (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a48:	4a1f      	ldr	r2, [pc, #124]	; (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009a4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009a52:	4b1d      	ldr	r3, [pc, #116]	; (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a58:	4a1b      	ldr	r2, [pc, #108]	; (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009a5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009a62:	4a19      	ldr	r2, [pc, #100]	; (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009a6a:	697b      	ldr	r3, [r7, #20]
 8009a6c:	f003 0301 	and.w	r3, r3, #1
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d016      	beq.n	8009aa2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a74:	f7fe f81c 	bl	8007ab0 <HAL_GetTick>
 8009a78:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009a7a:	e00b      	b.n	8009a94 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009a7c:	f7fe f818 	bl	8007ab0 <HAL_GetTick>
 8009a80:	4602      	mov	r2, r0
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	1ad3      	subs	r3, r2, r3
 8009a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d902      	bls.n	8009a94 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8009a8e:	2303      	movs	r3, #3
 8009a90:	74fb      	strb	r3, [r7, #19]
            break;
 8009a92:	e006      	b.n	8009aa2 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009a94:	4b0c      	ldr	r3, [pc, #48]	; (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a9a:	f003 0302 	and.w	r3, r3, #2
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d0ec      	beq.n	8009a7c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8009aa2:	7cfb      	ldrb	r3, [r7, #19]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d10c      	bne.n	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009aa8:	4b07      	ldr	r3, [pc, #28]	; (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009aae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009ab8:	4903      	ldr	r1, [pc, #12]	; (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009aba:	4313      	orrs	r3, r2
 8009abc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8009ac0:	e008      	b.n	8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009ac2:	7cfb      	ldrb	r3, [r7, #19]
 8009ac4:	74bb      	strb	r3, [r7, #18]
 8009ac6:	e005      	b.n	8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8009ac8:	40021000 	.word	0x40021000
 8009acc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ad0:	7cfb      	ldrb	r3, [r7, #19]
 8009ad2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009ad4:	7c7b      	ldrb	r3, [r7, #17]
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d105      	bne.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009ada:	4ba0      	ldr	r3, [pc, #640]	; (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ade:	4a9f      	ldr	r2, [pc, #636]	; (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009ae0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009ae4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f003 0301 	and.w	r3, r3, #1
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d00a      	beq.n	8009b08 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009af2:	4b9a      	ldr	r3, [pc, #616]	; (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009af8:	f023 0203 	bic.w	r2, r3, #3
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b00:	4996      	ldr	r1, [pc, #600]	; (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009b02:	4313      	orrs	r3, r2
 8009b04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f003 0302 	and.w	r3, r3, #2
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d00a      	beq.n	8009b2a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009b14:	4b91      	ldr	r3, [pc, #580]	; (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b1a:	f023 020c 	bic.w	r2, r3, #12
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b22:	498e      	ldr	r1, [pc, #568]	; (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009b24:	4313      	orrs	r3, r2
 8009b26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f003 0304 	and.w	r3, r3, #4
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d00a      	beq.n	8009b4c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009b36:	4b89      	ldr	r3, [pc, #548]	; (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b3c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b44:	4985      	ldr	r1, [pc, #532]	; (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009b46:	4313      	orrs	r3, r2
 8009b48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f003 0308 	and.w	r3, r3, #8
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d00a      	beq.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009b58:	4b80      	ldr	r3, [pc, #512]	; (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b5e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b66:	497d      	ldr	r1, [pc, #500]	; (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009b68:	4313      	orrs	r3, r2
 8009b6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f003 0310 	and.w	r3, r3, #16
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d00a      	beq.n	8009b90 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009b7a:	4b78      	ldr	r3, [pc, #480]	; (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b88:	4974      	ldr	r1, [pc, #464]	; (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009b8a:	4313      	orrs	r3, r2
 8009b8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f003 0320 	and.w	r3, r3, #32
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d00a      	beq.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009b9c:	4b6f      	ldr	r3, [pc, #444]	; (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ba2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009baa:	496c      	ldr	r1, [pc, #432]	; (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009bac:	4313      	orrs	r3, r2
 8009bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d00a      	beq.n	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009bbe:	4b67      	ldr	r3, [pc, #412]	; (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bc4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009bcc:	4963      	ldr	r1, [pc, #396]	; (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d00a      	beq.n	8009bf6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009be0:	4b5e      	ldr	r3, [pc, #376]	; (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009be6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009bee:	495b      	ldr	r1, [pc, #364]	; (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009bf0:	4313      	orrs	r3, r2
 8009bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d00a      	beq.n	8009c18 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009c02:	4b56      	ldr	r3, [pc, #344]	; (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c08:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c10:	4952      	ldr	r1, [pc, #328]	; (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009c12:	4313      	orrs	r3, r2
 8009c14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d00a      	beq.n	8009c3a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009c24:	4b4d      	ldr	r3, [pc, #308]	; (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c2a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c32:	494a      	ldr	r1, [pc, #296]	; (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009c34:	4313      	orrs	r3, r2
 8009c36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d00a      	beq.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009c46:	4b45      	ldr	r3, [pc, #276]	; (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c54:	4941      	ldr	r1, [pc, #260]	; (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009c56:	4313      	orrs	r3, r2
 8009c58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d00a      	beq.n	8009c7e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009c68:	4b3c      	ldr	r3, [pc, #240]	; (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009c6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009c6e:	f023 0203 	bic.w	r2, r3, #3
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c76:	4939      	ldr	r1, [pc, #228]	; (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009c78:	4313      	orrs	r3, r2
 8009c7a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d028      	beq.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009c8a:	4b34      	ldr	r3, [pc, #208]	; (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c90:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c98:	4930      	ldr	r1, [pc, #192]	; (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009c9a:	4313      	orrs	r3, r2
 8009c9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ca4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009ca8:	d106      	bne.n	8009cb8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009caa:	4b2c      	ldr	r3, [pc, #176]	; (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009cac:	68db      	ldr	r3, [r3, #12]
 8009cae:	4a2b      	ldr	r2, [pc, #172]	; (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009cb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009cb4:	60d3      	str	r3, [r2, #12]
 8009cb6:	e011      	b.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009cbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009cc0:	d10c      	bne.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	3304      	adds	r3, #4
 8009cc6:	2101      	movs	r1, #1
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f000 f935 	bl	8009f38 <RCCEx_PLLSAI1_Config>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8009cd2:	7cfb      	ldrb	r3, [r7, #19]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d001      	beq.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8009cd8:	7cfb      	ldrb	r3, [r7, #19]
 8009cda:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d04d      	beq.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009cec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009cf0:	d108      	bne.n	8009d04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8009cf2:	4b1a      	ldr	r3, [pc, #104]	; (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009cf4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009cf8:	4a18      	ldr	r2, [pc, #96]	; (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009cfa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009cfe:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8009d02:	e012      	b.n	8009d2a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8009d04:	4b15      	ldr	r3, [pc, #84]	; (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009d06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009d0a:	4a14      	ldr	r2, [pc, #80]	; (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009d0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d10:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8009d14:	4b11      	ldr	r3, [pc, #68]	; (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d22:	490e      	ldr	r1, [pc, #56]	; (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009d24:	4313      	orrs	r3, r2
 8009d26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009d32:	d106      	bne.n	8009d42 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009d34:	4b09      	ldr	r3, [pc, #36]	; (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009d36:	68db      	ldr	r3, [r3, #12]
 8009d38:	4a08      	ldr	r2, [pc, #32]	; (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009d3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009d3e:	60d3      	str	r3, [r2, #12]
 8009d40:	e020      	b.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009d4a:	d109      	bne.n	8009d60 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009d4c:	4b03      	ldr	r3, [pc, #12]	; (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009d4e:	68db      	ldr	r3, [r3, #12]
 8009d50:	4a02      	ldr	r2, [pc, #8]	; (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009d52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d56:	60d3      	str	r3, [r2, #12]
 8009d58:	e014      	b.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8009d5a:	bf00      	nop
 8009d5c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009d68:	d10c      	bne.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	3304      	adds	r3, #4
 8009d6e:	2101      	movs	r1, #1
 8009d70:	4618      	mov	r0, r3
 8009d72:	f000 f8e1 	bl	8009f38 <RCCEx_PLLSAI1_Config>
 8009d76:	4603      	mov	r3, r0
 8009d78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009d7a:	7cfb      	ldrb	r3, [r7, #19]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d001      	beq.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8009d80:	7cfb      	ldrb	r3, [r7, #19]
 8009d82:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d028      	beq.n	8009de2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009d90:	4b68      	ldr	r3, [pc, #416]	; (8009f34 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d96:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d9e:	4965      	ldr	r1, [pc, #404]	; (8009f34 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009da0:	4313      	orrs	r3, r2
 8009da2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009daa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009dae:	d106      	bne.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009db0:	4b60      	ldr	r3, [pc, #384]	; (8009f34 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009db2:	68db      	ldr	r3, [r3, #12]
 8009db4:	4a5f      	ldr	r2, [pc, #380]	; (8009f34 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009db6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009dba:	60d3      	str	r3, [r2, #12]
 8009dbc:	e011      	b.n	8009de2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009dc2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009dc6:	d10c      	bne.n	8009de2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	3304      	adds	r3, #4
 8009dcc:	2101      	movs	r1, #1
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f000 f8b2 	bl	8009f38 <RCCEx_PLLSAI1_Config>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009dd8:	7cfb      	ldrb	r3, [r7, #19]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d001      	beq.n	8009de2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8009dde:	7cfb      	ldrb	r3, [r7, #19]
 8009de0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d01e      	beq.n	8009e2c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009dee:	4b51      	ldr	r3, [pc, #324]	; (8009f34 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009df4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009dfe:	494d      	ldr	r1, [pc, #308]	; (8009f34 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009e00:	4313      	orrs	r3, r2
 8009e02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e10:	d10c      	bne.n	8009e2c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	3304      	adds	r3, #4
 8009e16:	2102      	movs	r1, #2
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f000 f88d 	bl	8009f38 <RCCEx_PLLSAI1_Config>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009e22:	7cfb      	ldrb	r3, [r7, #19]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d001      	beq.n	8009e2c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8009e28:	7cfb      	ldrb	r3, [r7, #19]
 8009e2a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d00b      	beq.n	8009e50 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009e38:	4b3e      	ldr	r3, [pc, #248]	; (8009f34 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009e3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009e3e:	f023 0204 	bic.w	r2, r3, #4
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e48:	493a      	ldr	r1, [pc, #232]	; (8009f34 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009e4a:	4313      	orrs	r3, r2
 8009e4c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d00b      	beq.n	8009e74 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8009e5c:	4b35      	ldr	r3, [pc, #212]	; (8009f34 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009e5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009e62:	f023 0218 	bic.w	r2, r3, #24
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e6c:	4931      	ldr	r1, [pc, #196]	; (8009f34 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009e6e:	4313      	orrs	r3, r2
 8009e70:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d035      	beq.n	8009eec <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8009e80:	4b2c      	ldr	r3, [pc, #176]	; (8009f34 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	4a2b      	ldr	r2, [pc, #172]	; (8009f34 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009e86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009e8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e8c:	f7fd fe10 	bl	8007ab0 <HAL_GetTick>
 8009e90:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009e92:	e009      	b.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009e94:	f7fd fe0c 	bl	8007ab0 <HAL_GetTick>
 8009e98:	4602      	mov	r2, r0
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	1ad3      	subs	r3, r2, r3
 8009e9e:	2b02      	cmp	r3, #2
 8009ea0:	d902      	bls.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8009ea2:	2303      	movs	r3, #3
 8009ea4:	74fb      	strb	r3, [r7, #19]
        break;
 8009ea6:	e005      	b.n	8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009ea8:	4b22      	ldr	r3, [pc, #136]	; (8009f34 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d1ef      	bne.n	8009e94 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8009eb4:	7cfb      	ldrb	r3, [r7, #19]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d113      	bne.n	8009ee2 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8009eba:	4b1e      	ldr	r3, [pc, #120]	; (8009f34 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009ebc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009ec0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009eca:	491a      	ldr	r1, [pc, #104]	; (8009f34 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009ecc:	4313      	orrs	r3, r2
 8009ece:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	3320      	adds	r3, #32
 8009ed6:	2102      	movs	r1, #2
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f000 f921 	bl	800a120 <RCCEx_PLLSAI2_Config>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8009ee2:	7cfb      	ldrb	r3, [r7, #19]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d001      	beq.n	8009eec <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8009ee8:	7cfb      	ldrb	r3, [r7, #19]
 8009eea:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d017      	beq.n	8009f28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009ef8:	4b0e      	ldr	r3, [pc, #56]	; (8009f34 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009efa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009efe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f08:	490a      	ldr	r1, [pc, #40]	; (8009f34 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009f0a:	4313      	orrs	r3, r2
 8009f0c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009f1a:	d105      	bne.n	8009f28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009f1c:	4b05      	ldr	r3, [pc, #20]	; (8009f34 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009f1e:	68db      	ldr	r3, [r3, #12]
 8009f20:	4a04      	ldr	r2, [pc, #16]	; (8009f34 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009f22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f26:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8009f28:	7cbb      	ldrb	r3, [r7, #18]
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	3718      	adds	r7, #24
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}
 8009f32:	bf00      	nop
 8009f34:	40021000 	.word	0x40021000

08009f38 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b084      	sub	sp, #16
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
 8009f40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009f42:	2300      	movs	r3, #0
 8009f44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009f46:	4b72      	ldr	r3, [pc, #456]	; (800a110 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009f48:	68db      	ldr	r3, [r3, #12]
 8009f4a:	f003 0303 	and.w	r3, r3, #3
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d00e      	beq.n	8009f70 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8009f52:	4b6f      	ldr	r3, [pc, #444]	; (800a110 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009f54:	68db      	ldr	r3, [r3, #12]
 8009f56:	f003 0203 	and.w	r2, r3, #3
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	429a      	cmp	r2, r3
 8009f60:	d103      	bne.n	8009f6a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
       ||
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d142      	bne.n	8009ff0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	73fb      	strb	r3, [r7, #15]
 8009f6e:	e03f      	b.n	8009ff0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	2b03      	cmp	r3, #3
 8009f76:	d018      	beq.n	8009faa <RCCEx_PLLSAI1_Config+0x72>
 8009f78:	2b03      	cmp	r3, #3
 8009f7a:	d825      	bhi.n	8009fc8 <RCCEx_PLLSAI1_Config+0x90>
 8009f7c:	2b01      	cmp	r3, #1
 8009f7e:	d002      	beq.n	8009f86 <RCCEx_PLLSAI1_Config+0x4e>
 8009f80:	2b02      	cmp	r3, #2
 8009f82:	d009      	beq.n	8009f98 <RCCEx_PLLSAI1_Config+0x60>
 8009f84:	e020      	b.n	8009fc8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009f86:	4b62      	ldr	r3, [pc, #392]	; (800a110 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f003 0302 	and.w	r3, r3, #2
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d11d      	bne.n	8009fce <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8009f92:	2301      	movs	r3, #1
 8009f94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009f96:	e01a      	b.n	8009fce <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009f98:	4b5d      	ldr	r3, [pc, #372]	; (800a110 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d116      	bne.n	8009fd2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009fa8:	e013      	b.n	8009fd2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009faa:	4b59      	ldr	r3, [pc, #356]	; (800a110 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d10f      	bne.n	8009fd6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009fb6:	4b56      	ldr	r3, [pc, #344]	; (800a110 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d109      	bne.n	8009fd6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009fc6:	e006      	b.n	8009fd6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8009fc8:	2301      	movs	r3, #1
 8009fca:	73fb      	strb	r3, [r7, #15]
      break;
 8009fcc:	e004      	b.n	8009fd8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8009fce:	bf00      	nop
 8009fd0:	e002      	b.n	8009fd8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8009fd2:	bf00      	nop
 8009fd4:	e000      	b.n	8009fd8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8009fd6:	bf00      	nop
    }

    if(status == HAL_OK)
 8009fd8:	7bfb      	ldrb	r3, [r7, #15]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d108      	bne.n	8009ff0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8009fde:	4b4c      	ldr	r3, [pc, #304]	; (800a110 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009fe0:	68db      	ldr	r3, [r3, #12]
 8009fe2:	f023 0203 	bic.w	r2, r3, #3
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	4949      	ldr	r1, [pc, #292]	; (800a110 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009fec:	4313      	orrs	r3, r2
 8009fee:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8009ff0:	7bfb      	ldrb	r3, [r7, #15]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	f040 8086 	bne.w	800a104 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8009ff8:	4b45      	ldr	r3, [pc, #276]	; (800a110 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	4a44      	ldr	r2, [pc, #272]	; (800a110 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009ffe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a002:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a004:	f7fd fd54 	bl	8007ab0 <HAL_GetTick>
 800a008:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a00a:	e009      	b.n	800a020 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a00c:	f7fd fd50 	bl	8007ab0 <HAL_GetTick>
 800a010:	4602      	mov	r2, r0
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	1ad3      	subs	r3, r2, r3
 800a016:	2b02      	cmp	r3, #2
 800a018:	d902      	bls.n	800a020 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800a01a:	2303      	movs	r3, #3
 800a01c:	73fb      	strb	r3, [r7, #15]
        break;
 800a01e:	e005      	b.n	800a02c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a020:	4b3b      	ldr	r3, [pc, #236]	; (800a110 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d1ef      	bne.n	800a00c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800a02c:	7bfb      	ldrb	r3, [r7, #15]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d168      	bne.n	800a104 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d113      	bne.n	800a060 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a038:	4b35      	ldr	r3, [pc, #212]	; (800a110 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a03a:	691a      	ldr	r2, [r3, #16]
 800a03c:	4b35      	ldr	r3, [pc, #212]	; (800a114 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a03e:	4013      	ands	r3, r2
 800a040:	687a      	ldr	r2, [r7, #4]
 800a042:	6892      	ldr	r2, [r2, #8]
 800a044:	0211      	lsls	r1, r2, #8
 800a046:	687a      	ldr	r2, [r7, #4]
 800a048:	68d2      	ldr	r2, [r2, #12]
 800a04a:	06d2      	lsls	r2, r2, #27
 800a04c:	4311      	orrs	r1, r2
 800a04e:	687a      	ldr	r2, [r7, #4]
 800a050:	6852      	ldr	r2, [r2, #4]
 800a052:	3a01      	subs	r2, #1
 800a054:	0112      	lsls	r2, r2, #4
 800a056:	430a      	orrs	r2, r1
 800a058:	492d      	ldr	r1, [pc, #180]	; (800a110 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a05a:	4313      	orrs	r3, r2
 800a05c:	610b      	str	r3, [r1, #16]
 800a05e:	e02d      	b.n	800a0bc <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	2b01      	cmp	r3, #1
 800a064:	d115      	bne.n	800a092 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a066:	4b2a      	ldr	r3, [pc, #168]	; (800a110 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a068:	691a      	ldr	r2, [r3, #16]
 800a06a:	4b2b      	ldr	r3, [pc, #172]	; (800a118 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a06c:	4013      	ands	r3, r2
 800a06e:	687a      	ldr	r2, [r7, #4]
 800a070:	6892      	ldr	r2, [r2, #8]
 800a072:	0211      	lsls	r1, r2, #8
 800a074:	687a      	ldr	r2, [r7, #4]
 800a076:	6912      	ldr	r2, [r2, #16]
 800a078:	0852      	lsrs	r2, r2, #1
 800a07a:	3a01      	subs	r2, #1
 800a07c:	0552      	lsls	r2, r2, #21
 800a07e:	4311      	orrs	r1, r2
 800a080:	687a      	ldr	r2, [r7, #4]
 800a082:	6852      	ldr	r2, [r2, #4]
 800a084:	3a01      	subs	r2, #1
 800a086:	0112      	lsls	r2, r2, #4
 800a088:	430a      	orrs	r2, r1
 800a08a:	4921      	ldr	r1, [pc, #132]	; (800a110 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a08c:	4313      	orrs	r3, r2
 800a08e:	610b      	str	r3, [r1, #16]
 800a090:	e014      	b.n	800a0bc <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a092:	4b1f      	ldr	r3, [pc, #124]	; (800a110 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a094:	691a      	ldr	r2, [r3, #16]
 800a096:	4b21      	ldr	r3, [pc, #132]	; (800a11c <RCCEx_PLLSAI1_Config+0x1e4>)
 800a098:	4013      	ands	r3, r2
 800a09a:	687a      	ldr	r2, [r7, #4]
 800a09c:	6892      	ldr	r2, [r2, #8]
 800a09e:	0211      	lsls	r1, r2, #8
 800a0a0:	687a      	ldr	r2, [r7, #4]
 800a0a2:	6952      	ldr	r2, [r2, #20]
 800a0a4:	0852      	lsrs	r2, r2, #1
 800a0a6:	3a01      	subs	r2, #1
 800a0a8:	0652      	lsls	r2, r2, #25
 800a0aa:	4311      	orrs	r1, r2
 800a0ac:	687a      	ldr	r2, [r7, #4]
 800a0ae:	6852      	ldr	r2, [r2, #4]
 800a0b0:	3a01      	subs	r2, #1
 800a0b2:	0112      	lsls	r2, r2, #4
 800a0b4:	430a      	orrs	r2, r1
 800a0b6:	4916      	ldr	r1, [pc, #88]	; (800a110 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a0b8:	4313      	orrs	r3, r2
 800a0ba:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800a0bc:	4b14      	ldr	r3, [pc, #80]	; (800a110 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	4a13      	ldr	r2, [pc, #76]	; (800a110 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a0c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a0c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a0c8:	f7fd fcf2 	bl	8007ab0 <HAL_GetTick>
 800a0cc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a0ce:	e009      	b.n	800a0e4 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a0d0:	f7fd fcee 	bl	8007ab0 <HAL_GetTick>
 800a0d4:	4602      	mov	r2, r0
 800a0d6:	68bb      	ldr	r3, [r7, #8]
 800a0d8:	1ad3      	subs	r3, r2, r3
 800a0da:	2b02      	cmp	r3, #2
 800a0dc:	d902      	bls.n	800a0e4 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800a0de:	2303      	movs	r3, #3
 800a0e0:	73fb      	strb	r3, [r7, #15]
          break;
 800a0e2:	e005      	b.n	800a0f0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a0e4:	4b0a      	ldr	r3, [pc, #40]	; (800a110 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d0ef      	beq.n	800a0d0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800a0f0:	7bfb      	ldrb	r3, [r7, #15]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d106      	bne.n	800a104 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800a0f6:	4b06      	ldr	r3, [pc, #24]	; (800a110 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a0f8:	691a      	ldr	r2, [r3, #16]
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	699b      	ldr	r3, [r3, #24]
 800a0fe:	4904      	ldr	r1, [pc, #16]	; (800a110 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a100:	4313      	orrs	r3, r2
 800a102:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800a104:	7bfb      	ldrb	r3, [r7, #15]
}
 800a106:	4618      	mov	r0, r3
 800a108:	3710      	adds	r7, #16
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}
 800a10e:	bf00      	nop
 800a110:	40021000 	.word	0x40021000
 800a114:	07ff800f 	.word	0x07ff800f
 800a118:	ff9f800f 	.word	0xff9f800f
 800a11c:	f9ff800f 	.word	0xf9ff800f

0800a120 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b084      	sub	sp, #16
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
 800a128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a12a:	2300      	movs	r3, #0
 800a12c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a12e:	4b72      	ldr	r3, [pc, #456]	; (800a2f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a130:	68db      	ldr	r3, [r3, #12]
 800a132:	f003 0303 	and.w	r3, r3, #3
 800a136:	2b00      	cmp	r3, #0
 800a138:	d00e      	beq.n	800a158 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800a13a:	4b6f      	ldr	r3, [pc, #444]	; (800a2f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a13c:	68db      	ldr	r3, [r3, #12]
 800a13e:	f003 0203 	and.w	r2, r3, #3
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	429a      	cmp	r2, r3
 800a148:	d103      	bne.n	800a152 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
       ||
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d142      	bne.n	800a1d8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800a152:	2301      	movs	r3, #1
 800a154:	73fb      	strb	r3, [r7, #15]
 800a156:	e03f      	b.n	800a1d8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	2b03      	cmp	r3, #3
 800a15e:	d018      	beq.n	800a192 <RCCEx_PLLSAI2_Config+0x72>
 800a160:	2b03      	cmp	r3, #3
 800a162:	d825      	bhi.n	800a1b0 <RCCEx_PLLSAI2_Config+0x90>
 800a164:	2b01      	cmp	r3, #1
 800a166:	d002      	beq.n	800a16e <RCCEx_PLLSAI2_Config+0x4e>
 800a168:	2b02      	cmp	r3, #2
 800a16a:	d009      	beq.n	800a180 <RCCEx_PLLSAI2_Config+0x60>
 800a16c:	e020      	b.n	800a1b0 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a16e:	4b62      	ldr	r3, [pc, #392]	; (800a2f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f003 0302 	and.w	r3, r3, #2
 800a176:	2b00      	cmp	r3, #0
 800a178:	d11d      	bne.n	800a1b6 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800a17a:	2301      	movs	r3, #1
 800a17c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a17e:	e01a      	b.n	800a1b6 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a180:	4b5d      	ldr	r3, [pc, #372]	; (800a2f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d116      	bne.n	800a1ba <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800a18c:	2301      	movs	r3, #1
 800a18e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a190:	e013      	b.n	800a1ba <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a192:	4b59      	ldr	r3, [pc, #356]	; (800a2f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d10f      	bne.n	800a1be <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a19e:	4b56      	ldr	r3, [pc, #344]	; (800a2f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d109      	bne.n	800a1be <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a1ae:	e006      	b.n	800a1be <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	73fb      	strb	r3, [r7, #15]
      break;
 800a1b4:	e004      	b.n	800a1c0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800a1b6:	bf00      	nop
 800a1b8:	e002      	b.n	800a1c0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800a1ba:	bf00      	nop
 800a1bc:	e000      	b.n	800a1c0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800a1be:	bf00      	nop
    }

    if(status == HAL_OK)
 800a1c0:	7bfb      	ldrb	r3, [r7, #15]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d108      	bne.n	800a1d8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800a1c6:	4b4c      	ldr	r3, [pc, #304]	; (800a2f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a1c8:	68db      	ldr	r3, [r3, #12]
 800a1ca:	f023 0203 	bic.w	r2, r3, #3
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	4949      	ldr	r1, [pc, #292]	; (800a2f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a1d4:	4313      	orrs	r3, r2
 800a1d6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800a1d8:	7bfb      	ldrb	r3, [r7, #15]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	f040 8086 	bne.w	800a2ec <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800a1e0:	4b45      	ldr	r3, [pc, #276]	; (800a2f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	4a44      	ldr	r2, [pc, #272]	; (800a2f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a1e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a1ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a1ec:	f7fd fc60 	bl	8007ab0 <HAL_GetTick>
 800a1f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a1f2:	e009      	b.n	800a208 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a1f4:	f7fd fc5c 	bl	8007ab0 <HAL_GetTick>
 800a1f8:	4602      	mov	r2, r0
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	1ad3      	subs	r3, r2, r3
 800a1fe:	2b02      	cmp	r3, #2
 800a200:	d902      	bls.n	800a208 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800a202:	2303      	movs	r3, #3
 800a204:	73fb      	strb	r3, [r7, #15]
        break;
 800a206:	e005      	b.n	800a214 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a208:	4b3b      	ldr	r3, [pc, #236]	; (800a2f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a210:	2b00      	cmp	r3, #0
 800a212:	d1ef      	bne.n	800a1f4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800a214:	7bfb      	ldrb	r3, [r7, #15]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d168      	bne.n	800a2ec <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d113      	bne.n	800a248 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a220:	4b35      	ldr	r3, [pc, #212]	; (800a2f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a222:	695a      	ldr	r2, [r3, #20]
 800a224:	4b35      	ldr	r3, [pc, #212]	; (800a2fc <RCCEx_PLLSAI2_Config+0x1dc>)
 800a226:	4013      	ands	r3, r2
 800a228:	687a      	ldr	r2, [r7, #4]
 800a22a:	6892      	ldr	r2, [r2, #8]
 800a22c:	0211      	lsls	r1, r2, #8
 800a22e:	687a      	ldr	r2, [r7, #4]
 800a230:	68d2      	ldr	r2, [r2, #12]
 800a232:	06d2      	lsls	r2, r2, #27
 800a234:	4311      	orrs	r1, r2
 800a236:	687a      	ldr	r2, [r7, #4]
 800a238:	6852      	ldr	r2, [r2, #4]
 800a23a:	3a01      	subs	r2, #1
 800a23c:	0112      	lsls	r2, r2, #4
 800a23e:	430a      	orrs	r2, r1
 800a240:	492d      	ldr	r1, [pc, #180]	; (800a2f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a242:	4313      	orrs	r3, r2
 800a244:	614b      	str	r3, [r1, #20]
 800a246:	e02d      	b.n	800a2a4 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	2b01      	cmp	r3, #1
 800a24c:	d115      	bne.n	800a27a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a24e:	4b2a      	ldr	r3, [pc, #168]	; (800a2f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a250:	695a      	ldr	r2, [r3, #20]
 800a252:	4b2b      	ldr	r3, [pc, #172]	; (800a300 <RCCEx_PLLSAI2_Config+0x1e0>)
 800a254:	4013      	ands	r3, r2
 800a256:	687a      	ldr	r2, [r7, #4]
 800a258:	6892      	ldr	r2, [r2, #8]
 800a25a:	0211      	lsls	r1, r2, #8
 800a25c:	687a      	ldr	r2, [r7, #4]
 800a25e:	6912      	ldr	r2, [r2, #16]
 800a260:	0852      	lsrs	r2, r2, #1
 800a262:	3a01      	subs	r2, #1
 800a264:	0552      	lsls	r2, r2, #21
 800a266:	4311      	orrs	r1, r2
 800a268:	687a      	ldr	r2, [r7, #4]
 800a26a:	6852      	ldr	r2, [r2, #4]
 800a26c:	3a01      	subs	r2, #1
 800a26e:	0112      	lsls	r2, r2, #4
 800a270:	430a      	orrs	r2, r1
 800a272:	4921      	ldr	r1, [pc, #132]	; (800a2f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a274:	4313      	orrs	r3, r2
 800a276:	614b      	str	r3, [r1, #20]
 800a278:	e014      	b.n	800a2a4 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a27a:	4b1f      	ldr	r3, [pc, #124]	; (800a2f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a27c:	695a      	ldr	r2, [r3, #20]
 800a27e:	4b21      	ldr	r3, [pc, #132]	; (800a304 <RCCEx_PLLSAI2_Config+0x1e4>)
 800a280:	4013      	ands	r3, r2
 800a282:	687a      	ldr	r2, [r7, #4]
 800a284:	6892      	ldr	r2, [r2, #8]
 800a286:	0211      	lsls	r1, r2, #8
 800a288:	687a      	ldr	r2, [r7, #4]
 800a28a:	6952      	ldr	r2, [r2, #20]
 800a28c:	0852      	lsrs	r2, r2, #1
 800a28e:	3a01      	subs	r2, #1
 800a290:	0652      	lsls	r2, r2, #25
 800a292:	4311      	orrs	r1, r2
 800a294:	687a      	ldr	r2, [r7, #4]
 800a296:	6852      	ldr	r2, [r2, #4]
 800a298:	3a01      	subs	r2, #1
 800a29a:	0112      	lsls	r2, r2, #4
 800a29c:	430a      	orrs	r2, r1
 800a29e:	4916      	ldr	r1, [pc, #88]	; (800a2f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a2a0:	4313      	orrs	r3, r2
 800a2a2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800a2a4:	4b14      	ldr	r3, [pc, #80]	; (800a2f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	4a13      	ldr	r2, [pc, #76]	; (800a2f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a2aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a2ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a2b0:	f7fd fbfe 	bl	8007ab0 <HAL_GetTick>
 800a2b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a2b6:	e009      	b.n	800a2cc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a2b8:	f7fd fbfa 	bl	8007ab0 <HAL_GetTick>
 800a2bc:	4602      	mov	r2, r0
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	1ad3      	subs	r3, r2, r3
 800a2c2:	2b02      	cmp	r3, #2
 800a2c4:	d902      	bls.n	800a2cc <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800a2c6:	2303      	movs	r3, #3
 800a2c8:	73fb      	strb	r3, [r7, #15]
          break;
 800a2ca:	e005      	b.n	800a2d8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a2cc:	4b0a      	ldr	r3, [pc, #40]	; (800a2f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d0ef      	beq.n	800a2b8 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800a2d8:	7bfb      	ldrb	r3, [r7, #15]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d106      	bne.n	800a2ec <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800a2de:	4b06      	ldr	r3, [pc, #24]	; (800a2f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a2e0:	695a      	ldr	r2, [r3, #20]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	699b      	ldr	r3, [r3, #24]
 800a2e6:	4904      	ldr	r1, [pc, #16]	; (800a2f8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a2e8:	4313      	orrs	r3, r2
 800a2ea:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800a2ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	3710      	adds	r7, #16
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}
 800a2f6:	bf00      	nop
 800a2f8:	40021000 	.word	0x40021000
 800a2fc:	07ff800f 	.word	0x07ff800f
 800a300:	ff9f800f 	.word	0xff9f800f
 800a304:	f9ff800f 	.word	0xf9ff800f

0800a308 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b084      	sub	sp, #16
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d101      	bne.n	800a31a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800a316:	2301      	movs	r3, #1
 800a318:	e096      	b.n	800a448 <HAL_RNG_Init+0x140>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	7a5b      	ldrb	r3, [r3, #9]
 800a31e:	b2db      	uxtb	r3, r3
 800a320:	2b00      	cmp	r3, #0
 800a322:	d105      	bne.n	800a330 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2200      	movs	r2, #0
 800a328:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f7fc fcc2 	bl	8006cb4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2202      	movs	r2, #2
 800a334:	725a      	strb	r2, [r3, #9]

#if defined(RNG_CR_CONDRST)
  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	681a      	ldr	r2, [r3, #0]
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f022 0204 	bic.w	r2, r2, #4
 800a344:	601a      	str	r2, [r3, #0]

  /* RNG CR register configuration. Set value in CR register for CONFIG 1, CONFIG 2 and CONFIG 3 values */
  cr_value = (uint32_t) (RNG_CR_CONFIG_VAL);
 800a346:	4b42      	ldr	r3, [pc, #264]	; (800a450 <HAL_RNG_Init+0x148>)
 800a348:	60fb      	str	r3, [r7, #12]

  /* Configuration of 
     - Clock Error Detection 
     - CONFIG1, CONFIG2, CONFIG3 fields
     when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST | RNG_CR_RNG_CONFIG1
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	681a      	ldr	r2, [r3, #0]
 800a350:	4b40      	ldr	r3, [pc, #256]	; (800a454 <HAL_RNG_Init+0x14c>)
 800a352:	4013      	ands	r3, r2
 800a354:	687a      	ldr	r2, [r7, #4]
 800a356:	6851      	ldr	r1, [r2, #4]
 800a358:	68fa      	ldr	r2, [r7, #12]
 800a35a:	430a      	orrs	r2, r1
 800a35c:	431a      	orrs	r2, r3
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800a366:	601a      	str	r2, [r3, #0]
                                 | RNG_CR_RNG_CONFIG2 | RNG_CR_RNG_CONFIG3,
                                 (uint32_t) (RNG_CR_CONDRST | hrng->Init.ClockErrorDetection | cr_value));

#if defined(RNG_VER_3_2) || defined(RNG_VER_3_1) || defined(RNG_VER_3_0)
  /*!< magic number must be written immediately before to RNG_HTCRG */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG_1);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	4a3a      	ldr	r2, [pc, #232]	; (800a458 <HAL_RNG_Init+0x150>)
 800a36e:	611a      	str	r2, [r3, #16]
  /* for best latency and to be compliant with NIST */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f64a 2274 	movw	r2, #43636	; 0xaa74
 800a378:	611a      	str	r2, [r3, #16]
#endif /* RNG_VER_3_2 || RNG_VER_3_1 || RNG_VER_3_0 */

  /* Writing bits CONDRST=0*/
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	681a      	ldr	r2, [r3, #0]
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800a388:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a38a:	f7fd fb91 	bl	8007ab0 <HAL_GetTick>
 800a38e:	60b8      	str	r0, [r7, #8]

  /* Wait for conditioning reset process to be completed */
  while(HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800a390:	e016      	b.n	800a3c0 <HAL_RNG_Init+0xb8>
  {
    if((HAL_GetTick() - tickstart ) > RNG_TIMEOUT_VALUE)
 800a392:	f7fd fb8d 	bl	8007ab0 <HAL_GetTick>
 800a396:	4602      	mov	r2, r0
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	1ad3      	subs	r3, r2, r3
 800a39c:	2b02      	cmp	r3, #2
 800a39e:	d90f      	bls.n	800a3c0 <HAL_RNG_Init+0xb8>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a3aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3ae:	d107      	bne.n	800a3c0 <HAL_RNG_Init+0xb8>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2201      	movs	r2, #1
 800a3b4:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2202      	movs	r2, #2
 800a3ba:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800a3bc:	2301      	movs	r3, #1
 800a3be:	e043      	b.n	800a448 <HAL_RNG_Init+0x140>
  while(HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a3ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3ce:	d0e0      	beq.n	800a392 <HAL_RNG_Init+0x8a>
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	681a      	ldr	r2, [r3, #0]
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f042 0204 	orr.w	r2, r2, #4
 800a3de:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	685b      	ldr	r3, [r3, #4]
 800a3e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3ea:	2b40      	cmp	r3, #64	; 0x40
 800a3ec:	d104      	bne.n	800a3f8 <HAL_RNG_Init+0xf0>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2204      	movs	r2, #4
 800a3f2:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	e027      	b.n	800a448 <HAL_RNG_Init+0x140>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800a3f8:	f7fd fb5a 	bl	8007ab0 <HAL_GetTick>
 800a3fc:	60b8      	str	r0, [r7, #8]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800a3fe:	e015      	b.n	800a42c <HAL_RNG_Init+0x124>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800a400:	f7fd fb56 	bl	8007ab0 <HAL_GetTick>
 800a404:	4602      	mov	r2, r0
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	1ad3      	subs	r3, r2, r3
 800a40a:	2b02      	cmp	r3, #2
 800a40c:	d90e      	bls.n	800a42c <HAL_RNG_Init+0x124>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	685b      	ldr	r3, [r3, #4]
 800a414:	f003 0304 	and.w	r3, r3, #4
 800a418:	2b04      	cmp	r3, #4
 800a41a:	d107      	bne.n	800a42c <HAL_RNG_Init+0x124>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2204      	movs	r2, #4
 800a420:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2202      	movs	r2, #2
 800a426:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800a428:	2301      	movs	r3, #1
 800a42a:	e00d      	b.n	800a448 <HAL_RNG_Init+0x140>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	685b      	ldr	r3, [r3, #4]
 800a432:	f003 0304 	and.w	r3, r3, #4
 800a436:	2b04      	cmp	r3, #4
 800a438:	d0e2      	beq.n	800a400 <HAL_RNG_Init+0xf8>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2201      	movs	r2, #1
 800a43e:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2200      	movs	r2, #0
 800a444:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800a446:	2300      	movs	r3, #0
}
 800a448:	4618      	mov	r0, r3
 800a44a:	3710      	adds	r7, #16
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}
 800a450:	00f00d00 	.word	0x00f00d00
 800a454:	bc0f10df 	.word	0xbc0f10df
 800a458:	17590abc 	.word	0x17590abc

0800a45c <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b084      	sub	sp, #16
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
 800a464:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a466:	2300      	movs	r3, #0
 800a468:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	7a1b      	ldrb	r3, [r3, #8]
 800a46e:	2b01      	cmp	r3, #1
 800a470:	d101      	bne.n	800a476 <HAL_RNG_GenerateRandomNumber+0x1a>
 800a472:	2302      	movs	r3, #2
 800a474:	e03d      	b.n	800a4f2 <HAL_RNG_GenerateRandomNumber+0x96>
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2201      	movs	r2, #1
 800a47a:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	7a5b      	ldrb	r3, [r3, #9]
 800a480:	b2db      	uxtb	r3, r3
 800a482:	2b01      	cmp	r3, #1
 800a484:	d12c      	bne.n	800a4e0 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2202      	movs	r2, #2
 800a48a:	725a      	strb	r2, [r3, #9]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a48c:	f7fd fb10 	bl	8007ab0 <HAL_GetTick>
 800a490:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800a492:	e011      	b.n	800a4b8 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800a494:	f7fd fb0c 	bl	8007ab0 <HAL_GetTick>
 800a498:	4602      	mov	r2, r0
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	1ad3      	subs	r3, r2, r3
 800a49e:	2b02      	cmp	r3, #2
 800a4a0:	d90a      	bls.n	800a4b8 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2201      	movs	r2, #1
 800a4a6:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2202      	movs	r2, #2
 800a4ac:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	721a      	strb	r2, [r3, #8]
        return HAL_ERROR;
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	e01c      	b.n	800a4f2 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	685b      	ldr	r3, [r3, #4]
 800a4be:	f003 0301 	and.w	r3, r3, #1
 800a4c2:	2b01      	cmp	r3, #1
 800a4c4:	d1e6      	bne.n	800a494 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	689a      	ldr	r2, [r3, #8]
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	611a      	str	r2, [r3, #16]
    *random32bit = hrng->RandomNumber;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	691a      	ldr	r2, [r3, #16]
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2201      	movs	r2, #1
 800a4dc:	725a      	strb	r2, [r3, #9]
 800a4de:	e004      	b.n	800a4ea <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2204      	movs	r2, #4
 800a4e4:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	721a      	strb	r2, [r3, #8]

  return status;
 800a4f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3710      	adds	r7, #16
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}
	...

0800a4fc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b084      	sub	sp, #16
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a504:	2301      	movs	r3, #1
 800a506:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d07f      	beq.n	800a60e <HAL_RTC_Init+0x112>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a514:	b2db      	uxtb	r3, r3
 800a516:	2b00      	cmp	r3, #0
 800a518:	d106      	bne.n	800a528 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2200      	movs	r2, #0
 800a51e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f7fc fc32 	bl	8006d8c <HAL_RTC_MspInit>
    }
#endif /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800a52e:	605a      	str	r2, [r3, #4]
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2202      	movs	r2, #2
 800a534:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	22ca      	movs	r2, #202	; 0xca
 800a53e:	625a      	str	r2, [r3, #36]	; 0x24
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	2253      	movs	r2, #83	; 0x53
 800a546:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f000 fa65 	bl	800aa18 <RTC_EnterInitMode>
 800a54e:	4603      	mov	r3, r0
 800a550:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800a552:	7bfb      	ldrb	r3, [r7, #15]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d15a      	bne.n	800a60e <HAL_RTC_Init+0x112>
    {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	699b      	ldr	r3, [r3, #24]
 800a55e:	687a      	ldr	r2, [r7, #4]
 800a560:	6812      	ldr	r2, [r2, #0]
 800a562:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800a566:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a56a:	6193      	str	r3, [r2, #24]
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	6999      	ldr	r1, [r3, #24]
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	689a      	ldr	r2, [r3, #8]
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	695b      	ldr	r3, [r3, #20]
 800a57a:	431a      	orrs	r2, r3
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	69db      	ldr	r3, [r3, #28]
 800a580:	431a      	orrs	r2, r3
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	430a      	orrs	r2, r1
 800a588:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	687a      	ldr	r2, [r7, #4]
 800a590:	6912      	ldr	r2, [r2, #16]
 800a592:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	6919      	ldr	r1, [r3, #16]
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	68db      	ldr	r3, [r3, #12]
 800a59e:	041a      	lsls	r2, r3, #16
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	430a      	orrs	r2, r1
 800a5a6:	611a      	str	r2, [r3, #16]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800a5a8:	4b1b      	ldr	r3, [pc, #108]	; (800a618 <HAL_RTC_Init+0x11c>)
 800a5aa:	68db      	ldr	r3, [r3, #12]
 800a5ac:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5b8:	430b      	orrs	r3, r1
 800a5ba:	4917      	ldr	r1, [pc, #92]	; (800a618 <HAL_RTC_Init+0x11c>)
 800a5bc:	4313      	orrs	r3, r2
 800a5be:	60cb      	str	r3, [r1, #12]
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f000 fa5f 	bl	800aa84 <RTC_ExitInitMode>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800a5ca:	7bfb      	ldrb	r3, [r7, #15]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d11e      	bne.n	800a60e <HAL_RTC_Init+0x112>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	699a      	ldr	r2, [r3, #24]
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 800a5de:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	6999      	ldr	r1, [r3, #24]
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6a1b      	ldr	r3, [r3, #32]
 800a5ee:	431a      	orrs	r2, r3
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	699b      	ldr	r3, [r3, #24]
 800a5f4:	431a      	orrs	r2, r3
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	430a      	orrs	r2, r1
 800a5fc:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	22ff      	movs	r2, #255	; 0xff
 800a604:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2201      	movs	r2, #1
 800a60a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      }
    }
  }

  return status;
 800a60e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a610:	4618      	mov	r0, r3
 800a612:	3710      	adds	r7, #16
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}
 800a618:	40002800 	.word	0x40002800

0800a61c <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a61c:	b590      	push	{r4, r7, lr}
 800a61e:	b087      	sub	sp, #28
 800a620:	af00      	add	r7, sp, #0
 800a622:	60f8      	str	r0, [r7, #12]
 800a624:	60b9      	str	r1, [r7, #8]
 800a626:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a62e:	2b01      	cmp	r3, #1
 800a630:	d101      	bne.n	800a636 <HAL_RTC_SetTime+0x1a>
 800a632:	2302      	movs	r3, #2
 800a634:	e08b      	b.n	800a74e <HAL_RTC_SetTime+0x132>
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	2201      	movs	r2, #1
 800a63a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	2202      	movs	r2, #2
 800a642:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	22ca      	movs	r2, #202	; 0xca
 800a64c:	625a      	str	r2, [r3, #36]	; 0x24
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	2253      	movs	r2, #83	; 0x53
 800a654:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a656:	68f8      	ldr	r0, [r7, #12]
 800a658:	f000 f9de 	bl	800aa18 <RTC_EnterInitMode>
 800a65c:	4603      	mov	r3, r0
 800a65e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800a660:	7cfb      	ldrb	r3, [r7, #19]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d15e      	bne.n	800a724 <HAL_RTC_SetTime+0x108>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800a666:	4b3c      	ldr	r3, [pc, #240]	; (800a758 <HAL_RTC_SetTime+0x13c>)
 800a668:	68db      	ldr	r3, [r3, #12]
 800a66a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a66e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a672:	d057      	beq.n	800a724 <HAL_RTC_SetTime+0x108>
    {
      if (Format == RTC_FORMAT_BIN)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d125      	bne.n	800a6c6 <HAL_RTC_SetTime+0xaa>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800a67a:	4b37      	ldr	r3, [pc, #220]	; (800a758 <HAL_RTC_SetTime+0x13c>)
 800a67c:	699b      	ldr	r3, [r3, #24]
 800a67e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a682:	2b00      	cmp	r3, #0
 800a684:	d102      	bne.n	800a68c <HAL_RTC_SetTime+0x70>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	2200      	movs	r2, #0
 800a68a:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	781b      	ldrb	r3, [r3, #0]
 800a690:	4618      	mov	r0, r3
 800a692:	f000 fa35 	bl	800ab00 <RTC_ByteToBcd2>
 800a696:	4603      	mov	r3, r0
 800a698:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	785b      	ldrb	r3, [r3, #1]
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f000 fa2e 	bl	800ab00 <RTC_ByteToBcd2>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a6a8:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	789b      	ldrb	r3, [r3, #2]
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	f000 fa26 	bl	800ab00 <RTC_ByteToBcd2>
 800a6b4:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a6b6:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	78db      	ldrb	r3, [r3, #3]
 800a6be:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a6c0:	4313      	orrs	r3, r2
 800a6c2:	617b      	str	r3, [r7, #20]
 800a6c4:	e017      	b.n	800a6f6 <HAL_RTC_SetTime+0xda>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800a6c6:	4b24      	ldr	r3, [pc, #144]	; (800a758 <HAL_RTC_SetTime+0x13c>)
 800a6c8:	699b      	ldr	r3, [r3, #24]
 800a6ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d102      	bne.n	800a6d8 <HAL_RTC_SetTime+0xbc>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	781b      	ldrb	r3, [r3, #0]
 800a6dc:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	785b      	ldrb	r3, [r3, #1]
 800a6e2:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a6e4:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800a6e6:	68ba      	ldr	r2, [r7, #8]
 800a6e8:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a6ea:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	78db      	ldrb	r3, [r3, #3]
 800a6f0:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a6f2:	4313      	orrs	r3, r2
 800a6f4:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800a6f6:	4a18      	ldr	r2, [pc, #96]	; (800a758 <HAL_RTC_SetTime+0x13c>)
 800a6f8:	697b      	ldr	r3, [r7, #20]
 800a6fa:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800a6fe:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800a702:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800a704:	4b14      	ldr	r3, [pc, #80]	; (800a758 <HAL_RTC_SetTime+0x13c>)
 800a706:	699b      	ldr	r3, [r3, #24]
 800a708:	4a13      	ldr	r2, [pc, #76]	; (800a758 <HAL_RTC_SetTime+0x13c>)
 800a70a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a70e:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 800a710:	4b11      	ldr	r3, [pc, #68]	; (800a758 <HAL_RTC_SetTime+0x13c>)
 800a712:	699a      	ldr	r2, [r3, #24]
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	68d9      	ldr	r1, [r3, #12]
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	691b      	ldr	r3, [r3, #16]
 800a71c:	430b      	orrs	r3, r1
 800a71e:	490e      	ldr	r1, [pc, #56]	; (800a758 <HAL_RTC_SetTime+0x13c>)
 800a720:	4313      	orrs	r3, r2
 800a722:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 800a724:	68f8      	ldr	r0, [r7, #12]
 800a726:	f000 f9ad 	bl	800aa84 <RTC_ExitInitMode>
 800a72a:	4603      	mov	r3, r0
 800a72c:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	22ff      	movs	r2, #255	; 0xff
 800a734:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800a736:	7cfb      	ldrb	r3, [r7, #19]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d103      	bne.n	800a744 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	2201      	movs	r2, #1
 800a740:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	2200      	movs	r2, #0
 800a748:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800a74c:	7cfb      	ldrb	r3, [r7, #19]
}
 800a74e:	4618      	mov	r0, r3
 800a750:	371c      	adds	r7, #28
 800a752:	46bd      	mov	sp, r7
 800a754:	bd90      	pop	{r4, r7, pc}
 800a756:	bf00      	nop
 800a758:	40002800 	.word	0x40002800

0800a75c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b086      	sub	sp, #24
 800a760:	af00      	add	r7, sp, #0
 800a762:	60f8      	str	r0, [r7, #12]
 800a764:	60b9      	str	r1, [r7, #8]
 800a766:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 800a768:	4b2c      	ldr	r3, [pc, #176]	; (800a81c <HAL_RTC_GetTime+0xc0>)
 800a76a:	689a      	ldr	r2, [r3, #8]
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800a770:	4b2a      	ldr	r3, [pc, #168]	; (800a81c <HAL_RTC_GetTime+0xc0>)
 800a772:	68db      	ldr	r3, [r3, #12]
 800a774:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a778:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a77c:	d049      	beq.n	800a812 <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field*/
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 800a77e:	4b27      	ldr	r3, [pc, #156]	; (800a81c <HAL_RTC_GetTime+0xc0>)
 800a780:	691b      	ldr	r3, [r3, #16]
 800a782:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 800a78a:	4b24      	ldr	r3, [pc, #144]	; (800a81c <HAL_RTC_GetTime+0xc0>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800a792:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800a796:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800a798:	697b      	ldr	r3, [r7, #20]
 800a79a:	0c1b      	lsrs	r3, r3, #16
 800a79c:	b2db      	uxtb	r3, r3
 800a79e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a7a2:	b2da      	uxtb	r2, r3
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800a7a8:	697b      	ldr	r3, [r7, #20]
 800a7aa:	0a1b      	lsrs	r3, r3, #8
 800a7ac:	b2db      	uxtb	r3, r3
 800a7ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7b2:	b2da      	uxtb	r2, r3
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800a7b8:	697b      	ldr	r3, [r7, #20]
 800a7ba:	b2db      	uxtb	r3, r3
 800a7bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7c0:	b2da      	uxtb	r2, r3
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800a7c6:	697b      	ldr	r3, [r7, #20]
 800a7c8:	0d9b      	lsrs	r3, r3, #22
 800a7ca:	b2db      	uxtb	r3, r3
 800a7cc:	f003 0301 	and.w	r3, r3, #1
 800a7d0:	b2da      	uxtb	r2, r3
 800a7d2:	68bb      	ldr	r3, [r7, #8]
 800a7d4:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d11a      	bne.n	800a812 <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	781b      	ldrb	r3, [r3, #0]
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f000 f9ad 	bl	800ab40 <RTC_Bcd2ToByte>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	461a      	mov	r2, r3
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	785b      	ldrb	r3, [r3, #1]
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f000 f9a4 	bl	800ab40 <RTC_Bcd2ToByte>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	461a      	mov	r2, r3
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	789b      	ldrb	r3, [r3, #2]
 800a804:	4618      	mov	r0, r3
 800a806:	f000 f99b 	bl	800ab40 <RTC_Bcd2ToByte>
 800a80a:	4603      	mov	r3, r0
 800a80c:	461a      	mov	r2, r3
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 800a812:	2300      	movs	r3, #0
}
 800a814:	4618      	mov	r0, r3
 800a816:	3718      	adds	r7, #24
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}
 800a81c:	40002800 	.word	0x40002800

0800a820 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a820:	b590      	push	{r4, r7, lr}
 800a822:	b087      	sub	sp, #28
 800a824:	af00      	add	r7, sp, #0
 800a826:	60f8      	str	r0, [r7, #12]
 800a828:	60b9      	str	r1, [r7, #8]
 800a82a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a832:	2b01      	cmp	r3, #1
 800a834:	d101      	bne.n	800a83a <HAL_RTC_SetDate+0x1a>
 800a836:	2302      	movs	r3, #2
 800a838:	e074      	b.n	800a924 <HAL_RTC_SetDate+0x104>
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	2201      	movs	r2, #1
 800a83e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	2202      	movs	r2, #2
 800a846:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d10e      	bne.n	800a86e <HAL_RTC_SetDate+0x4e>
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	785b      	ldrb	r3, [r3, #1]
 800a854:	f003 0310 	and.w	r3, r3, #16
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d008      	beq.n	800a86e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	785b      	ldrb	r3, [r3, #1]
 800a860:	f023 0310 	bic.w	r3, r3, #16
 800a864:	b2db      	uxtb	r3, r3
 800a866:	330a      	adds	r3, #10
 800a868:	b2da      	uxtb	r2, r3
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d11c      	bne.n	800a8ae <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	78db      	ldrb	r3, [r3, #3]
 800a878:	4618      	mov	r0, r3
 800a87a:	f000 f941 	bl	800ab00 <RTC_ByteToBcd2>
 800a87e:	4603      	mov	r3, r0
 800a880:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a882:	68bb      	ldr	r3, [r7, #8]
 800a884:	785b      	ldrb	r3, [r3, #1]
 800a886:	4618      	mov	r0, r3
 800a888:	f000 f93a 	bl	800ab00 <RTC_ByteToBcd2>
 800a88c:	4603      	mov	r3, r0
 800a88e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800a890:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	789b      	ldrb	r3, [r3, #2]
 800a896:	4618      	mov	r0, r3
 800a898:	f000 f932 	bl	800ab00 <RTC_ByteToBcd2>
 800a89c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a89e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	781b      	ldrb	r3, [r3, #0]
 800a8a6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800a8a8:	4313      	orrs	r3, r2
 800a8aa:	617b      	str	r3, [r7, #20]
 800a8ac:	e00e      	b.n	800a8cc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	78db      	ldrb	r3, [r3, #3]
 800a8b2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	785b      	ldrb	r3, [r3, #1]
 800a8b8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a8ba:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800a8bc:	68ba      	ldr	r2, [r7, #8]
 800a8be:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800a8c0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	781b      	ldrb	r3, [r3, #0]
 800a8c6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a8c8:	4313      	orrs	r3, r2
 800a8ca:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	22ca      	movs	r2, #202	; 0xca
 800a8d2:	625a      	str	r2, [r3, #36]	; 0x24
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	2253      	movs	r2, #83	; 0x53
 800a8da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a8dc:	68f8      	ldr	r0, [r7, #12]
 800a8de:	f000 f89b 	bl	800aa18 <RTC_EnterInitMode>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800a8e6:	7cfb      	ldrb	r3, [r7, #19]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d10b      	bne.n	800a904 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800a8ec:	4a0f      	ldr	r2, [pc, #60]	; (800a92c <HAL_RTC_SetDate+0x10c>)
 800a8ee:	697b      	ldr	r3, [r7, #20]
 800a8f0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a8f4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a8f8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a8fa:	68f8      	ldr	r0, [r7, #12]
 800a8fc:	f000 f8c2 	bl	800aa84 <RTC_ExitInitMode>
 800a900:	4603      	mov	r3, r0
 800a902:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	22ff      	movs	r2, #255	; 0xff
 800a90a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800a90c:	7cfb      	ldrb	r3, [r7, #19]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d103      	bne.n	800a91a <HAL_RTC_SetDate+0xfa>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	2201      	movs	r2, #1
 800a916:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	2200      	movs	r2, #0
 800a91e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800a922:	7cfb      	ldrb	r3, [r7, #19]
}
 800a924:	4618      	mov	r0, r3
 800a926:	371c      	adds	r7, #28
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd90      	pop	{r4, r7, pc}
 800a92c:	40002800 	.word	0x40002800

0800a930 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b086      	sub	sp, #24
 800a934:	af00      	add	r7, sp, #0
 800a936:	60f8      	str	r0, [r7, #12]
 800a938:	60b9      	str	r1, [r7, #8]
 800a93a:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 800a93c:	4b22      	ldr	r3, [pc, #136]	; (800a9c8 <HAL_RTC_GetDate+0x98>)
 800a93e:	685b      	ldr	r3, [r3, #4]
 800a940:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a944:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a948:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800a94a:	697b      	ldr	r3, [r7, #20]
 800a94c:	0c1b      	lsrs	r3, r3, #16
 800a94e:	b2da      	uxtb	r2, r3
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	0a1b      	lsrs	r3, r3, #8
 800a958:	b2db      	uxtb	r3, r3
 800a95a:	f003 031f 	and.w	r3, r3, #31
 800a95e:	b2da      	uxtb	r2, r3
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	b2db      	uxtb	r3, r3
 800a968:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a96c:	b2da      	uxtb	r2, r3
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800a972:	697b      	ldr	r3, [r7, #20]
 800a974:	0b5b      	lsrs	r3, r3, #13
 800a976:	b2db      	uxtb	r3, r3
 800a978:	f003 0307 	and.w	r3, r3, #7
 800a97c:	b2da      	uxtb	r2, r3
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d11a      	bne.n	800a9be <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800a988:	68bb      	ldr	r3, [r7, #8]
 800a98a:	78db      	ldrb	r3, [r3, #3]
 800a98c:	4618      	mov	r0, r3
 800a98e:	f000 f8d7 	bl	800ab40 <RTC_Bcd2ToByte>
 800a992:	4603      	mov	r3, r0
 800a994:	461a      	mov	r2, r3
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	785b      	ldrb	r3, [r3, #1]
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f000 f8ce 	bl	800ab40 <RTC_Bcd2ToByte>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	461a      	mov	r2, r3
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	789b      	ldrb	r3, [r3, #2]
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	f000 f8c5 	bl	800ab40 <RTC_Bcd2ToByte>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	461a      	mov	r2, r3
 800a9ba:	68bb      	ldr	r3, [r7, #8]
 800a9bc:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800a9be:	2300      	movs	r3, #0
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	3718      	adds	r7, #24
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}
 800a9c8:	40002800 	.word	0x40002800

0800a9cc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b084      	sub	sp, #16
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	68da      	ldr	r2, [r3, #12]
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a9e2:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
#endif

  tickstart = HAL_GetTick();
 800a9e4:	f7fd f864 	bl	8007ab0 <HAL_GetTick>
 800a9e8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800a9ea:	e009      	b.n	800aa00 <HAL_RTC_WaitForSynchro+0x34>
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a9ec:	f7fd f860 	bl	8007ab0 <HAL_GetTick>
 800a9f0:	4602      	mov	r2, r0
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	1ad3      	subs	r3, r2, r3
 800a9f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a9fa:	d901      	bls.n	800aa00 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800a9fc:	2303      	movs	r3, #3
 800a9fe:	e007      	b.n	800aa10 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	68db      	ldr	r3, [r3, #12]
 800aa06:	f003 0320 	and.w	r3, r3, #32
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d0ee      	beq.n	800a9ec <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800aa0e:	2300      	movs	r3, #0
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	3710      	adds	r7, #16
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bd80      	pop	{r7, pc}

0800aa18 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b084      	sub	sp, #16
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800aa20:	2300      	movs	r3, #0
 800aa22:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	68db      	ldr	r3, [r3, #12]
 800aa2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d123      	bne.n	800aa7a <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	68da      	ldr	r2, [r3, #12]
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800aa40:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800aa42:	f7fd f835 	bl	8007ab0 <HAL_GetTick>
 800aa46:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800aa48:	e00d      	b.n	800aa66 <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800aa4a:	f7fd f831 	bl	8007ab0 <HAL_GetTick>
 800aa4e:	4602      	mov	r2, r0
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	1ad3      	subs	r3, r2, r3
 800aa54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aa58:	d905      	bls.n	800aa66 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 800aa5a:	2303      	movs	r3, #3
 800aa5c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2203      	movs	r2, #3
 800aa62:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	68db      	ldr	r3, [r3, #12]
 800aa6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d102      	bne.n	800aa7a <RTC_EnterInitMode+0x62>
 800aa74:	7bfb      	ldrb	r3, [r7, #15]
 800aa76:	2b03      	cmp	r3, #3
 800aa78:	d1e7      	bne.n	800aa4a <RTC_EnterInitMode+0x32>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800aa7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	3710      	adds	r7, #16
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd80      	pop	{r7, pc}

0800aa84 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b084      	sub	sp, #16
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800aa90:	4b1a      	ldr	r3, [pc, #104]	; (800aafc <RTC_ExitInitMode+0x78>)
 800aa92:	68db      	ldr	r3, [r3, #12]
 800aa94:	4a19      	ldr	r2, [pc, #100]	; (800aafc <RTC_ExitInitMode+0x78>)
 800aa96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa9a:	60d3      	str	r3, [r2, #12]
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800aa9c:	4b17      	ldr	r3, [pc, #92]	; (800aafc <RTC_ExitInitMode+0x78>)
 800aa9e:	699b      	ldr	r3, [r3, #24]
 800aaa0:	f003 0320 	and.w	r3, r3, #32
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d10c      	bne.n	800aac2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f7ff ff8f 	bl	800a9cc <HAL_RTC_WaitForSynchro>
 800aaae:	4603      	mov	r3, r0
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d01e      	beq.n	800aaf2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2203      	movs	r2, #3
 800aab8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      status = HAL_TIMEOUT;
 800aabc:	2303      	movs	r3, #3
 800aabe:	73fb      	strb	r3, [r7, #15]
 800aac0:	e017      	b.n	800aaf2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800aac2:	4b0e      	ldr	r3, [pc, #56]	; (800aafc <RTC_ExitInitMode+0x78>)
 800aac4:	699b      	ldr	r3, [r3, #24]
 800aac6:	4a0d      	ldr	r2, [pc, #52]	; (800aafc <RTC_ExitInitMode+0x78>)
 800aac8:	f023 0320 	bic.w	r3, r3, #32
 800aacc:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f7ff ff7c 	bl	800a9cc <HAL_RTC_WaitForSynchro>
 800aad4:	4603      	mov	r3, r0
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d005      	beq.n	800aae6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2203      	movs	r2, #3
 800aade:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      status = HAL_TIMEOUT;
 800aae2:	2303      	movs	r3, #3
 800aae4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800aae6:	4b05      	ldr	r3, [pc, #20]	; (800aafc <RTC_ExitInitMode+0x78>)
 800aae8:	699b      	ldr	r3, [r3, #24]
 800aaea:	4a04      	ldr	r2, [pc, #16]	; (800aafc <RTC_ExitInitMode+0x78>)
 800aaec:	f043 0320 	orr.w	r3, r3, #32
 800aaf0:	6193      	str	r3, [r2, #24]
  }

  return status;
 800aaf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	3710      	adds	r7, #16
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}
 800aafc:	40002800 	.word	0x40002800

0800ab00 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800ab00:	b480      	push	{r7}
 800ab02:	b085      	sub	sp, #20
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	4603      	mov	r3, r0
 800ab08:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800ab0e:	79fb      	ldrb	r3, [r7, #7]
 800ab10:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800ab12:	e005      	b.n	800ab20 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	3301      	adds	r3, #1
 800ab18:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800ab1a:	7afb      	ldrb	r3, [r7, #11]
 800ab1c:	3b0a      	subs	r3, #10
 800ab1e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800ab20:	7afb      	ldrb	r3, [r7, #11]
 800ab22:	2b09      	cmp	r3, #9
 800ab24:	d8f6      	bhi.n	800ab14 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	b2db      	uxtb	r3, r3
 800ab2a:	011b      	lsls	r3, r3, #4
 800ab2c:	b2da      	uxtb	r2, r3
 800ab2e:	7afb      	ldrb	r3, [r7, #11]
 800ab30:	4313      	orrs	r3, r2
 800ab32:	b2db      	uxtb	r3, r3
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3714      	adds	r7, #20
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3e:	4770      	bx	lr

0800ab40 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800ab40:	b480      	push	{r7}
 800ab42:	b085      	sub	sp, #20
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	4603      	mov	r3, r0
 800ab48:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800ab4a:	79fb      	ldrb	r3, [r7, #7]
 800ab4c:	091b      	lsrs	r3, r3, #4
 800ab4e:	b2db      	uxtb	r3, r3
 800ab50:	461a      	mov	r2, r3
 800ab52:	0092      	lsls	r2, r2, #2
 800ab54:	4413      	add	r3, r2
 800ab56:	005b      	lsls	r3, r3, #1
 800ab58:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800ab5a:	79fb      	ldrb	r3, [r7, #7]
 800ab5c:	f003 030f 	and.w	r3, r3, #15
 800ab60:	b2da      	uxtb	r2, r3
 800ab62:	7bfb      	ldrb	r3, [r7, #15]
 800ab64:	4413      	add	r3, r2
 800ab66:	b2db      	uxtb	r3, r3
}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	3714      	adds	r7, #20
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab72:	4770      	bx	lr

0800ab74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b084      	sub	sp, #16
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d101      	bne.n	800ab86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ab82:	2301      	movs	r3, #1
 800ab84:	e095      	b.n	800acb2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d108      	bne.n	800aba0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	685b      	ldr	r3, [r3, #4]
 800ab92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ab96:	d009      	beq.n	800abac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	61da      	str	r2, [r3, #28]
 800ab9e:	e005      	b.n	800abac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2200      	movs	r2, #0
 800aba4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2200      	movs	r2, #0
 800abaa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2200      	movs	r2, #0
 800abb0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800abb8:	b2db      	uxtb	r3, r3
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d106      	bne.n	800abcc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2200      	movs	r2, #0
 800abc2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f7fc f99a 	bl	8006f00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2202      	movs	r2, #2
 800abd0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	681a      	ldr	r2, [r3, #0]
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800abe2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	68db      	ldr	r3, [r3, #12]
 800abe8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800abec:	d902      	bls.n	800abf4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800abee:	2300      	movs	r3, #0
 800abf0:	60fb      	str	r3, [r7, #12]
 800abf2:	e002      	b.n	800abfa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800abf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800abf8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	68db      	ldr	r3, [r3, #12]
 800abfe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800ac02:	d007      	beq.n	800ac14 <HAL_SPI_Init+0xa0>
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	68db      	ldr	r3, [r3, #12]
 800ac08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ac0c:	d002      	beq.n	800ac14 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2200      	movs	r2, #0
 800ac12:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	685b      	ldr	r3, [r3, #4]
 800ac18:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	689b      	ldr	r3, [r3, #8]
 800ac20:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800ac24:	431a      	orrs	r2, r3
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	691b      	ldr	r3, [r3, #16]
 800ac2a:	f003 0302 	and.w	r3, r3, #2
 800ac2e:	431a      	orrs	r2, r3
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	695b      	ldr	r3, [r3, #20]
 800ac34:	f003 0301 	and.w	r3, r3, #1
 800ac38:	431a      	orrs	r2, r3
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	699b      	ldr	r3, [r3, #24]
 800ac3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ac42:	431a      	orrs	r2, r3
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	69db      	ldr	r3, [r3, #28]
 800ac48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ac4c:	431a      	orrs	r2, r3
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6a1b      	ldr	r3, [r3, #32]
 800ac52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac56:	ea42 0103 	orr.w	r1, r2, r3
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac5e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	430a      	orrs	r2, r1
 800ac68:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	699b      	ldr	r3, [r3, #24]
 800ac6e:	0c1b      	lsrs	r3, r3, #16
 800ac70:	f003 0204 	and.w	r2, r3, #4
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac78:	f003 0310 	and.w	r3, r3, #16
 800ac7c:	431a      	orrs	r2, r3
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac82:	f003 0308 	and.w	r3, r3, #8
 800ac86:	431a      	orrs	r2, r3
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	68db      	ldr	r3, [r3, #12]
 800ac8c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800ac90:	ea42 0103 	orr.w	r1, r2, r3
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	430a      	orrs	r2, r1
 800aca0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2200      	movs	r2, #0
 800aca6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2201      	movs	r2, #1
 800acac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800acb0:	2300      	movs	r3, #0
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	3710      	adds	r7, #16
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}

0800acba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800acba:	b580      	push	{r7, lr}
 800acbc:	b088      	sub	sp, #32
 800acbe:	af00      	add	r7, sp, #0
 800acc0:	60f8      	str	r0, [r7, #12]
 800acc2:	60b9      	str	r1, [r7, #8]
 800acc4:	603b      	str	r3, [r7, #0]
 800acc6:	4613      	mov	r3, r2
 800acc8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800acca:	2300      	movs	r3, #0
 800accc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800acd4:	2b01      	cmp	r3, #1
 800acd6:	d101      	bne.n	800acdc <HAL_SPI_Transmit+0x22>
 800acd8:	2302      	movs	r3, #2
 800acda:	e158      	b.n	800af8e <HAL_SPI_Transmit+0x2d4>
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	2201      	movs	r2, #1
 800ace0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ace4:	f7fc fee4 	bl	8007ab0 <HAL_GetTick>
 800ace8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800acea:	88fb      	ldrh	r3, [r7, #6]
 800acec:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800acf4:	b2db      	uxtb	r3, r3
 800acf6:	2b01      	cmp	r3, #1
 800acf8:	d002      	beq.n	800ad00 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800acfa:	2302      	movs	r3, #2
 800acfc:	77fb      	strb	r3, [r7, #31]
    goto error;
 800acfe:	e13d      	b.n	800af7c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d002      	beq.n	800ad0c <HAL_SPI_Transmit+0x52>
 800ad06:	88fb      	ldrh	r3, [r7, #6]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d102      	bne.n	800ad12 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ad10:	e134      	b.n	800af7c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	2203      	movs	r2, #3
 800ad16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	68ba      	ldr	r2, [r7, #8]
 800ad24:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	88fa      	ldrh	r2, [r7, #6]
 800ad2a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	88fa      	ldrh	r2, [r7, #6]
 800ad30:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	2200      	movs	r2, #0
 800ad36:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	2200      	movs	r2, #0
 800ad44:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	2200      	movs	r2, #0
 800ad52:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	689b      	ldr	r3, [r3, #8]
 800ad58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad5c:	d10f      	bne.n	800ad7e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	681a      	ldr	r2, [r3, #0]
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad6c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	681a      	ldr	r2, [r3, #0]
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ad7c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad88:	2b40      	cmp	r3, #64	; 0x40
 800ad8a:	d007      	beq.n	800ad9c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	681a      	ldr	r2, [r3, #0]
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ad9a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	68db      	ldr	r3, [r3, #12]
 800ada0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ada4:	d94b      	bls.n	800ae3e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	685b      	ldr	r3, [r3, #4]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d002      	beq.n	800adb4 <HAL_SPI_Transmit+0xfa>
 800adae:	8afb      	ldrh	r3, [r7, #22]
 800adb0:	2b01      	cmp	r3, #1
 800adb2:	d13e      	bne.n	800ae32 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adb8:	881a      	ldrh	r2, [r3, #0]
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adc4:	1c9a      	adds	r2, r3, #2
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800adce:	b29b      	uxth	r3, r3
 800add0:	3b01      	subs	r3, #1
 800add2:	b29a      	uxth	r2, r3
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800add8:	e02b      	b.n	800ae32 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	689b      	ldr	r3, [r3, #8]
 800ade0:	f003 0302 	and.w	r3, r3, #2
 800ade4:	2b02      	cmp	r3, #2
 800ade6:	d112      	bne.n	800ae0e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adec:	881a      	ldrh	r2, [r3, #0]
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adf8:	1c9a      	adds	r2, r3, #2
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ae02:	b29b      	uxth	r3, r3
 800ae04:	3b01      	subs	r3, #1
 800ae06:	b29a      	uxth	r2, r3
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ae0c:	e011      	b.n	800ae32 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ae0e:	f7fc fe4f 	bl	8007ab0 <HAL_GetTick>
 800ae12:	4602      	mov	r2, r0
 800ae14:	69bb      	ldr	r3, [r7, #24]
 800ae16:	1ad3      	subs	r3, r2, r3
 800ae18:	683a      	ldr	r2, [r7, #0]
 800ae1a:	429a      	cmp	r2, r3
 800ae1c:	d803      	bhi.n	800ae26 <HAL_SPI_Transmit+0x16c>
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae24:	d102      	bne.n	800ae2c <HAL_SPI_Transmit+0x172>
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d102      	bne.n	800ae32 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800ae2c:	2303      	movs	r3, #3
 800ae2e:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ae30:	e0a4      	b.n	800af7c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ae36:	b29b      	uxth	r3, r3
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d1ce      	bne.n	800adda <HAL_SPI_Transmit+0x120>
 800ae3c:	e07c      	b.n	800af38 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	685b      	ldr	r3, [r3, #4]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d002      	beq.n	800ae4c <HAL_SPI_Transmit+0x192>
 800ae46:	8afb      	ldrh	r3, [r7, #22]
 800ae48:	2b01      	cmp	r3, #1
 800ae4a:	d170      	bne.n	800af2e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ae50:	b29b      	uxth	r3, r3
 800ae52:	2b01      	cmp	r3, #1
 800ae54:	d912      	bls.n	800ae7c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae5a:	881a      	ldrh	r2, [r3, #0]
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae66:	1c9a      	adds	r2, r3, #2
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ae70:	b29b      	uxth	r3, r3
 800ae72:	3b02      	subs	r3, #2
 800ae74:	b29a      	uxth	r2, r3
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ae7a:	e058      	b.n	800af2e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	330c      	adds	r3, #12
 800ae86:	7812      	ldrb	r2, [r2, #0]
 800ae88:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae8e:	1c5a      	adds	r2, r3, #1
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ae98:	b29b      	uxth	r3, r3
 800ae9a:	3b01      	subs	r3, #1
 800ae9c:	b29a      	uxth	r2, r3
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800aea2:	e044      	b.n	800af2e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	689b      	ldr	r3, [r3, #8]
 800aeaa:	f003 0302 	and.w	r3, r3, #2
 800aeae:	2b02      	cmp	r3, #2
 800aeb0:	d12b      	bne.n	800af0a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aeb6:	b29b      	uxth	r3, r3
 800aeb8:	2b01      	cmp	r3, #1
 800aeba:	d912      	bls.n	800aee2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aec0:	881a      	ldrh	r2, [r3, #0]
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aecc:	1c9a      	adds	r2, r3, #2
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aed6:	b29b      	uxth	r3, r3
 800aed8:	3b02      	subs	r3, #2
 800aeda:	b29a      	uxth	r2, r3
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	87da      	strh	r2, [r3, #62]	; 0x3e
 800aee0:	e025      	b.n	800af2e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	330c      	adds	r3, #12
 800aeec:	7812      	ldrb	r2, [r2, #0]
 800aeee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aef4:	1c5a      	adds	r2, r3, #1
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aefe:	b29b      	uxth	r3, r3
 800af00:	3b01      	subs	r3, #1
 800af02:	b29a      	uxth	r2, r3
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	87da      	strh	r2, [r3, #62]	; 0x3e
 800af08:	e011      	b.n	800af2e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800af0a:	f7fc fdd1 	bl	8007ab0 <HAL_GetTick>
 800af0e:	4602      	mov	r2, r0
 800af10:	69bb      	ldr	r3, [r7, #24]
 800af12:	1ad3      	subs	r3, r2, r3
 800af14:	683a      	ldr	r2, [r7, #0]
 800af16:	429a      	cmp	r2, r3
 800af18:	d803      	bhi.n	800af22 <HAL_SPI_Transmit+0x268>
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af20:	d102      	bne.n	800af28 <HAL_SPI_Transmit+0x26e>
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d102      	bne.n	800af2e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800af28:	2303      	movs	r3, #3
 800af2a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800af2c:	e026      	b.n	800af7c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800af32:	b29b      	uxth	r3, r3
 800af34:	2b00      	cmp	r3, #0
 800af36:	d1b5      	bne.n	800aea4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800af38:	69ba      	ldr	r2, [r7, #24]
 800af3a:	6839      	ldr	r1, [r7, #0]
 800af3c:	68f8      	ldr	r0, [r7, #12]
 800af3e:	f000 fce3 	bl	800b908 <SPI_EndRxTxTransaction>
 800af42:	4603      	mov	r3, r0
 800af44:	2b00      	cmp	r3, #0
 800af46:	d002      	beq.n	800af4e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	2220      	movs	r2, #32
 800af4c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	689b      	ldr	r3, [r3, #8]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d10a      	bne.n	800af6c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800af56:	2300      	movs	r3, #0
 800af58:	613b      	str	r3, [r7, #16]
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	68db      	ldr	r3, [r3, #12]
 800af60:	613b      	str	r3, [r7, #16]
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	689b      	ldr	r3, [r3, #8]
 800af68:	613b      	str	r3, [r7, #16]
 800af6a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af70:	2b00      	cmp	r3, #0
 800af72:	d002      	beq.n	800af7a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800af74:	2301      	movs	r3, #1
 800af76:	77fb      	strb	r3, [r7, #31]
 800af78:	e000      	b.n	800af7c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800af7a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	2201      	movs	r2, #1
 800af80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	2200      	movs	r2, #0
 800af88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800af8c:	7ffb      	ldrb	r3, [r7, #31]
}
 800af8e:	4618      	mov	r0, r3
 800af90:	3720      	adds	r7, #32
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}

0800af96 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800af96:	b580      	push	{r7, lr}
 800af98:	b088      	sub	sp, #32
 800af9a:	af02      	add	r7, sp, #8
 800af9c:	60f8      	str	r0, [r7, #12]
 800af9e:	60b9      	str	r1, [r7, #8]
 800afa0:	603b      	str	r3, [r7, #0]
 800afa2:	4613      	mov	r3, r2
 800afa4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800afa6:	2300      	movs	r3, #0
 800afa8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	685b      	ldr	r3, [r3, #4]
 800afae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800afb2:	d112      	bne.n	800afda <HAL_SPI_Receive+0x44>
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	689b      	ldr	r3, [r3, #8]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d10e      	bne.n	800afda <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	2204      	movs	r2, #4
 800afc0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800afc4:	88fa      	ldrh	r2, [r7, #6]
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	9300      	str	r3, [sp, #0]
 800afca:	4613      	mov	r3, r2
 800afcc:	68ba      	ldr	r2, [r7, #8]
 800afce:	68b9      	ldr	r1, [r7, #8]
 800afd0:	68f8      	ldr	r0, [r7, #12]
 800afd2:	f000 f910 	bl	800b1f6 <HAL_SPI_TransmitReceive>
 800afd6:	4603      	mov	r3, r0
 800afd8:	e109      	b.n	800b1ee <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800afe0:	2b01      	cmp	r3, #1
 800afe2:	d101      	bne.n	800afe8 <HAL_SPI_Receive+0x52>
 800afe4:	2302      	movs	r3, #2
 800afe6:	e102      	b.n	800b1ee <HAL_SPI_Receive+0x258>
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	2201      	movs	r2, #1
 800afec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800aff0:	f7fc fd5e 	bl	8007ab0 <HAL_GetTick>
 800aff4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800affc:	b2db      	uxtb	r3, r3
 800affe:	2b01      	cmp	r3, #1
 800b000:	d002      	beq.n	800b008 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800b002:	2302      	movs	r3, #2
 800b004:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b006:	e0e9      	b.n	800b1dc <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d002      	beq.n	800b014 <HAL_SPI_Receive+0x7e>
 800b00e:	88fb      	ldrh	r3, [r7, #6]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d102      	bne.n	800b01a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800b014:	2301      	movs	r3, #1
 800b016:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b018:	e0e0      	b.n	800b1dc <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	2204      	movs	r2, #4
 800b01e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	2200      	movs	r2, #0
 800b026:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	68ba      	ldr	r2, [r7, #8]
 800b02c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	88fa      	ldrh	r2, [r7, #6]
 800b032:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	88fa      	ldrh	r2, [r7, #6]
 800b03a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	2200      	movs	r2, #0
 800b042:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	2200      	movs	r2, #0
 800b048:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	2200      	movs	r2, #0
 800b04e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	2200      	movs	r2, #0
 800b054:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	2200      	movs	r2, #0
 800b05a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	68db      	ldr	r3, [r3, #12]
 800b060:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b064:	d908      	bls.n	800b078 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	685a      	ldr	r2, [r3, #4]
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b074:	605a      	str	r2, [r3, #4]
 800b076:	e007      	b.n	800b088 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	685a      	ldr	r2, [r3, #4]
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b086:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	689b      	ldr	r3, [r3, #8]
 800b08c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b090:	d10f      	bne.n	800b0b2 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	681a      	ldr	r2, [r3, #0]
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b0a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	681a      	ldr	r2, [r3, #0]
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b0b0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0bc:	2b40      	cmp	r3, #64	; 0x40
 800b0be:	d007      	beq.n	800b0d0 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	681a      	ldr	r2, [r3, #0]
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b0ce:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	68db      	ldr	r3, [r3, #12]
 800b0d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b0d8:	d867      	bhi.n	800b1aa <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b0da:	e030      	b.n	800b13e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	689b      	ldr	r3, [r3, #8]
 800b0e2:	f003 0301 	and.w	r3, r3, #1
 800b0e6:	2b01      	cmp	r3, #1
 800b0e8:	d117      	bne.n	800b11a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	f103 020c 	add.w	r2, r3, #12
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0f6:	7812      	ldrb	r2, [r2, #0]
 800b0f8:	b2d2      	uxtb	r2, r2
 800b0fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b100:	1c5a      	adds	r2, r3, #1
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b10c:	b29b      	uxth	r3, r3
 800b10e:	3b01      	subs	r3, #1
 800b110:	b29a      	uxth	r2, r3
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800b118:	e011      	b.n	800b13e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b11a:	f7fc fcc9 	bl	8007ab0 <HAL_GetTick>
 800b11e:	4602      	mov	r2, r0
 800b120:	693b      	ldr	r3, [r7, #16]
 800b122:	1ad3      	subs	r3, r2, r3
 800b124:	683a      	ldr	r2, [r7, #0]
 800b126:	429a      	cmp	r2, r3
 800b128:	d803      	bhi.n	800b132 <HAL_SPI_Receive+0x19c>
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b130:	d102      	bne.n	800b138 <HAL_SPI_Receive+0x1a2>
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d102      	bne.n	800b13e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800b138:	2303      	movs	r3, #3
 800b13a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b13c:	e04e      	b.n	800b1dc <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b144:	b29b      	uxth	r3, r3
 800b146:	2b00      	cmp	r3, #0
 800b148:	d1c8      	bne.n	800b0dc <HAL_SPI_Receive+0x146>
 800b14a:	e034      	b.n	800b1b6 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	689b      	ldr	r3, [r3, #8]
 800b152:	f003 0301 	and.w	r3, r3, #1
 800b156:	2b01      	cmp	r3, #1
 800b158:	d115      	bne.n	800b186 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	68da      	ldr	r2, [r3, #12]
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b164:	b292      	uxth	r2, r2
 800b166:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b16c:	1c9a      	adds	r2, r3, #2
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b178:	b29b      	uxth	r3, r3
 800b17a:	3b01      	subs	r3, #1
 800b17c:	b29a      	uxth	r2, r3
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800b184:	e011      	b.n	800b1aa <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b186:	f7fc fc93 	bl	8007ab0 <HAL_GetTick>
 800b18a:	4602      	mov	r2, r0
 800b18c:	693b      	ldr	r3, [r7, #16]
 800b18e:	1ad3      	subs	r3, r2, r3
 800b190:	683a      	ldr	r2, [r7, #0]
 800b192:	429a      	cmp	r2, r3
 800b194:	d803      	bhi.n	800b19e <HAL_SPI_Receive+0x208>
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b19c:	d102      	bne.n	800b1a4 <HAL_SPI_Receive+0x20e>
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d102      	bne.n	800b1aa <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800b1a4:	2303      	movs	r3, #3
 800b1a6:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b1a8:	e018      	b.n	800b1dc <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b1b0:	b29b      	uxth	r3, r3
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d1ca      	bne.n	800b14c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b1b6:	693a      	ldr	r2, [r7, #16]
 800b1b8:	6839      	ldr	r1, [r7, #0]
 800b1ba:	68f8      	ldr	r0, [r7, #12]
 800b1bc:	f000 fb4c 	bl	800b858 <SPI_EndRxTransaction>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d002      	beq.n	800b1cc <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	2220      	movs	r2, #32
 800b1ca:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d002      	beq.n	800b1da <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	75fb      	strb	r3, [r7, #23]
 800b1d8:	e000      	b.n	800b1dc <HAL_SPI_Receive+0x246>
  }

error :
 800b1da:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	2201      	movs	r2, #1
 800b1e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800b1ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	3718      	adds	r7, #24
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}

0800b1f6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b1f6:	b580      	push	{r7, lr}
 800b1f8:	b08a      	sub	sp, #40	; 0x28
 800b1fa:	af00      	add	r7, sp, #0
 800b1fc:	60f8      	str	r0, [r7, #12]
 800b1fe:	60b9      	str	r1, [r7, #8]
 800b200:	607a      	str	r2, [r7, #4]
 800b202:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b204:	2301      	movs	r3, #1
 800b206:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b208:	2300      	movs	r3, #0
 800b20a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b214:	2b01      	cmp	r3, #1
 800b216:	d101      	bne.n	800b21c <HAL_SPI_TransmitReceive+0x26>
 800b218:	2302      	movs	r3, #2
 800b21a:	e1fb      	b.n	800b614 <HAL_SPI_TransmitReceive+0x41e>
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	2201      	movs	r2, #1
 800b220:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b224:	f7fc fc44 	bl	8007ab0 <HAL_GetTick>
 800b228:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b230:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	685b      	ldr	r3, [r3, #4]
 800b236:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800b238:	887b      	ldrh	r3, [r7, #2]
 800b23a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800b23c:	887b      	ldrh	r3, [r7, #2]
 800b23e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b240:	7efb      	ldrb	r3, [r7, #27]
 800b242:	2b01      	cmp	r3, #1
 800b244:	d00e      	beq.n	800b264 <HAL_SPI_TransmitReceive+0x6e>
 800b246:	697b      	ldr	r3, [r7, #20]
 800b248:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b24c:	d106      	bne.n	800b25c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	689b      	ldr	r3, [r3, #8]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d102      	bne.n	800b25c <HAL_SPI_TransmitReceive+0x66>
 800b256:	7efb      	ldrb	r3, [r7, #27]
 800b258:	2b04      	cmp	r3, #4
 800b25a:	d003      	beq.n	800b264 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800b25c:	2302      	movs	r3, #2
 800b25e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800b262:	e1cd      	b.n	800b600 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d005      	beq.n	800b276 <HAL_SPI_TransmitReceive+0x80>
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d002      	beq.n	800b276 <HAL_SPI_TransmitReceive+0x80>
 800b270:	887b      	ldrh	r3, [r7, #2]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d103      	bne.n	800b27e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800b276:	2301      	movs	r3, #1
 800b278:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800b27c:	e1c0      	b.n	800b600 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b284:	b2db      	uxtb	r3, r3
 800b286:	2b04      	cmp	r3, #4
 800b288:	d003      	beq.n	800b292 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	2205      	movs	r2, #5
 800b28e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	2200      	movs	r2, #0
 800b296:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	687a      	ldr	r2, [r7, #4]
 800b29c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	887a      	ldrh	r2, [r7, #2]
 800b2a2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	887a      	ldrh	r2, [r7, #2]
 800b2aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	68ba      	ldr	r2, [r7, #8]
 800b2b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	887a      	ldrh	r2, [r7, #2]
 800b2b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	887a      	ldrh	r2, [r7, #2]
 800b2be:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	68db      	ldr	r3, [r3, #12]
 800b2d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b2d4:	d802      	bhi.n	800b2dc <HAL_SPI_TransmitReceive+0xe6>
 800b2d6:	8a3b      	ldrh	r3, [r7, #16]
 800b2d8:	2b01      	cmp	r3, #1
 800b2da:	d908      	bls.n	800b2ee <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	685a      	ldr	r2, [r3, #4]
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b2ea:	605a      	str	r2, [r3, #4]
 800b2ec:	e007      	b.n	800b2fe <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	685a      	ldr	r2, [r3, #4]
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b2fc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b308:	2b40      	cmp	r3, #64	; 0x40
 800b30a:	d007      	beq.n	800b31c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	681a      	ldr	r2, [r3, #0]
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b31a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	68db      	ldr	r3, [r3, #12]
 800b320:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b324:	d97c      	bls.n	800b420 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	685b      	ldr	r3, [r3, #4]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d002      	beq.n	800b334 <HAL_SPI_TransmitReceive+0x13e>
 800b32e:	8a7b      	ldrh	r3, [r7, #18]
 800b330:	2b01      	cmp	r3, #1
 800b332:	d169      	bne.n	800b408 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b338:	881a      	ldrh	r2, [r3, #0]
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b344:	1c9a      	adds	r2, r3, #2
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b34e:	b29b      	uxth	r3, r3
 800b350:	3b01      	subs	r3, #1
 800b352:	b29a      	uxth	r2, r3
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b358:	e056      	b.n	800b408 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	689b      	ldr	r3, [r3, #8]
 800b360:	f003 0302 	and.w	r3, r3, #2
 800b364:	2b02      	cmp	r3, #2
 800b366:	d11b      	bne.n	800b3a0 <HAL_SPI_TransmitReceive+0x1aa>
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b36c:	b29b      	uxth	r3, r3
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d016      	beq.n	800b3a0 <HAL_SPI_TransmitReceive+0x1aa>
 800b372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b374:	2b01      	cmp	r3, #1
 800b376:	d113      	bne.n	800b3a0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b37c:	881a      	ldrh	r2, [r3, #0]
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b388:	1c9a      	adds	r2, r3, #2
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b392:	b29b      	uxth	r3, r3
 800b394:	3b01      	subs	r3, #1
 800b396:	b29a      	uxth	r2, r3
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b39c:	2300      	movs	r3, #0
 800b39e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	689b      	ldr	r3, [r3, #8]
 800b3a6:	f003 0301 	and.w	r3, r3, #1
 800b3aa:	2b01      	cmp	r3, #1
 800b3ac:	d11c      	bne.n	800b3e8 <HAL_SPI_TransmitReceive+0x1f2>
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b3b4:	b29b      	uxth	r3, r3
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d016      	beq.n	800b3e8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	68da      	ldr	r2, [r3, #12]
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3c4:	b292      	uxth	r2, r2
 800b3c6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3cc:	1c9a      	adds	r2, r3, #2
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b3d8:	b29b      	uxth	r3, r3
 800b3da:	3b01      	subs	r3, #1
 800b3dc:	b29a      	uxth	r2, r3
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b3e4:	2301      	movs	r3, #1
 800b3e6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b3e8:	f7fc fb62 	bl	8007ab0 <HAL_GetTick>
 800b3ec:	4602      	mov	r2, r0
 800b3ee:	69fb      	ldr	r3, [r7, #28]
 800b3f0:	1ad3      	subs	r3, r2, r3
 800b3f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3f4:	429a      	cmp	r2, r3
 800b3f6:	d807      	bhi.n	800b408 <HAL_SPI_TransmitReceive+0x212>
 800b3f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3fe:	d003      	beq.n	800b408 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800b400:	2303      	movs	r3, #3
 800b402:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800b406:	e0fb      	b.n	800b600 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b40c:	b29b      	uxth	r3, r3
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d1a3      	bne.n	800b35a <HAL_SPI_TransmitReceive+0x164>
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b418:	b29b      	uxth	r3, r3
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d19d      	bne.n	800b35a <HAL_SPI_TransmitReceive+0x164>
 800b41e:	e0df      	b.n	800b5e0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	685b      	ldr	r3, [r3, #4]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d003      	beq.n	800b430 <HAL_SPI_TransmitReceive+0x23a>
 800b428:	8a7b      	ldrh	r3, [r7, #18]
 800b42a:	2b01      	cmp	r3, #1
 800b42c:	f040 80cb 	bne.w	800b5c6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b434:	b29b      	uxth	r3, r3
 800b436:	2b01      	cmp	r3, #1
 800b438:	d912      	bls.n	800b460 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b43e:	881a      	ldrh	r2, [r3, #0]
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b44a:	1c9a      	adds	r2, r3, #2
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b454:	b29b      	uxth	r3, r3
 800b456:	3b02      	subs	r3, #2
 800b458:	b29a      	uxth	r2, r3
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b45e:	e0b2      	b.n	800b5c6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	330c      	adds	r3, #12
 800b46a:	7812      	ldrb	r2, [r2, #0]
 800b46c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b472:	1c5a      	adds	r2, r3, #1
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b47c:	b29b      	uxth	r3, r3
 800b47e:	3b01      	subs	r3, #1
 800b480:	b29a      	uxth	r2, r3
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b486:	e09e      	b.n	800b5c6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	689b      	ldr	r3, [r3, #8]
 800b48e:	f003 0302 	and.w	r3, r3, #2
 800b492:	2b02      	cmp	r3, #2
 800b494:	d134      	bne.n	800b500 <HAL_SPI_TransmitReceive+0x30a>
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b49a:	b29b      	uxth	r3, r3
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d02f      	beq.n	800b500 <HAL_SPI_TransmitReceive+0x30a>
 800b4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4a2:	2b01      	cmp	r3, #1
 800b4a4:	d12c      	bne.n	800b500 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b4aa:	b29b      	uxth	r3, r3
 800b4ac:	2b01      	cmp	r3, #1
 800b4ae:	d912      	bls.n	800b4d6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4b4:	881a      	ldrh	r2, [r3, #0]
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4c0:	1c9a      	adds	r2, r3, #2
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b4ca:	b29b      	uxth	r3, r3
 800b4cc:	3b02      	subs	r3, #2
 800b4ce:	b29a      	uxth	r2, r3
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b4d4:	e012      	b.n	800b4fc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	330c      	adds	r3, #12
 800b4e0:	7812      	ldrb	r2, [r2, #0]
 800b4e2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4e8:	1c5a      	adds	r2, r3, #1
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b4f2:	b29b      	uxth	r3, r3
 800b4f4:	3b01      	subs	r3, #1
 800b4f6:	b29a      	uxth	r2, r3
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	689b      	ldr	r3, [r3, #8]
 800b506:	f003 0301 	and.w	r3, r3, #1
 800b50a:	2b01      	cmp	r3, #1
 800b50c:	d148      	bne.n	800b5a0 <HAL_SPI_TransmitReceive+0x3aa>
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b514:	b29b      	uxth	r3, r3
 800b516:	2b00      	cmp	r3, #0
 800b518:	d042      	beq.n	800b5a0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b520:	b29b      	uxth	r3, r3
 800b522:	2b01      	cmp	r3, #1
 800b524:	d923      	bls.n	800b56e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	68da      	ldr	r2, [r3, #12]
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b530:	b292      	uxth	r2, r2
 800b532:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b538:	1c9a      	adds	r2, r3, #2
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b544:	b29b      	uxth	r3, r3
 800b546:	3b02      	subs	r3, #2
 800b548:	b29a      	uxth	r2, r3
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b556:	b29b      	uxth	r3, r3
 800b558:	2b01      	cmp	r3, #1
 800b55a:	d81f      	bhi.n	800b59c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	685a      	ldr	r2, [r3, #4]
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b56a:	605a      	str	r2, [r3, #4]
 800b56c:	e016      	b.n	800b59c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	f103 020c 	add.w	r2, r3, #12
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b57a:	7812      	ldrb	r2, [r2, #0]
 800b57c:	b2d2      	uxtb	r2, r2
 800b57e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b584:	1c5a      	adds	r2, r3, #1
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b590:	b29b      	uxth	r3, r3
 800b592:	3b01      	subs	r3, #1
 800b594:	b29a      	uxth	r2, r3
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b59c:	2301      	movs	r3, #1
 800b59e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b5a0:	f7fc fa86 	bl	8007ab0 <HAL_GetTick>
 800b5a4:	4602      	mov	r2, r0
 800b5a6:	69fb      	ldr	r3, [r7, #28]
 800b5a8:	1ad3      	subs	r3, r2, r3
 800b5aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5ac:	429a      	cmp	r2, r3
 800b5ae:	d803      	bhi.n	800b5b8 <HAL_SPI_TransmitReceive+0x3c2>
 800b5b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5b6:	d102      	bne.n	800b5be <HAL_SPI_TransmitReceive+0x3c8>
 800b5b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d103      	bne.n	800b5c6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800b5be:	2303      	movs	r3, #3
 800b5c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800b5c4:	e01c      	b.n	800b600 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b5ca:	b29b      	uxth	r3, r3
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	f47f af5b 	bne.w	800b488 <HAL_SPI_TransmitReceive+0x292>
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b5d8:	b29b      	uxth	r3, r3
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	f47f af54 	bne.w	800b488 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b5e0:	69fa      	ldr	r2, [r7, #28]
 800b5e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b5e4:	68f8      	ldr	r0, [r7, #12]
 800b5e6:	f000 f98f 	bl	800b908 <SPI_EndRxTxTransaction>
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d006      	beq.n	800b5fe <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800b5f0:	2301      	movs	r3, #1
 800b5f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	2220      	movs	r2, #32
 800b5fa:	661a      	str	r2, [r3, #96]	; 0x60
 800b5fc:	e000      	b.n	800b600 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800b5fe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	2201      	movs	r2, #1
 800b604:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	2200      	movs	r2, #0
 800b60c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800b610:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800b614:	4618      	mov	r0, r3
 800b616:	3728      	adds	r7, #40	; 0x28
 800b618:	46bd      	mov	sp, r7
 800b61a:	bd80      	pop	{r7, pc}

0800b61c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b088      	sub	sp, #32
 800b620:	af00      	add	r7, sp, #0
 800b622:	60f8      	str	r0, [r7, #12]
 800b624:	60b9      	str	r1, [r7, #8]
 800b626:	603b      	str	r3, [r7, #0]
 800b628:	4613      	mov	r3, r2
 800b62a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b62c:	f7fc fa40 	bl	8007ab0 <HAL_GetTick>
 800b630:	4602      	mov	r2, r0
 800b632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b634:	1a9b      	subs	r3, r3, r2
 800b636:	683a      	ldr	r2, [r7, #0]
 800b638:	4413      	add	r3, r2
 800b63a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b63c:	f7fc fa38 	bl	8007ab0 <HAL_GetTick>
 800b640:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b642:	4b39      	ldr	r3, [pc, #228]	; (800b728 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	015b      	lsls	r3, r3, #5
 800b648:	0d1b      	lsrs	r3, r3, #20
 800b64a:	69fa      	ldr	r2, [r7, #28]
 800b64c:	fb02 f303 	mul.w	r3, r2, r3
 800b650:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b652:	e054      	b.n	800b6fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b65a:	d050      	beq.n	800b6fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b65c:	f7fc fa28 	bl	8007ab0 <HAL_GetTick>
 800b660:	4602      	mov	r2, r0
 800b662:	69bb      	ldr	r3, [r7, #24]
 800b664:	1ad3      	subs	r3, r2, r3
 800b666:	69fa      	ldr	r2, [r7, #28]
 800b668:	429a      	cmp	r2, r3
 800b66a:	d902      	bls.n	800b672 <SPI_WaitFlagStateUntilTimeout+0x56>
 800b66c:	69fb      	ldr	r3, [r7, #28]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d13d      	bne.n	800b6ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	685a      	ldr	r2, [r3, #4]
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b680:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	685b      	ldr	r3, [r3, #4]
 800b686:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b68a:	d111      	bne.n	800b6b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	689b      	ldr	r3, [r3, #8]
 800b690:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b694:	d004      	beq.n	800b6a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	689b      	ldr	r3, [r3, #8]
 800b69a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b69e:	d107      	bne.n	800b6b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	681a      	ldr	r2, [r3, #0]
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b6ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b6b8:	d10f      	bne.n	800b6da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	681a      	ldr	r2, [r3, #0]
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b6c8:	601a      	str	r2, [r3, #0]
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	681a      	ldr	r2, [r3, #0]
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b6d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	2201      	movs	r2, #1
 800b6de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800b6ea:	2303      	movs	r3, #3
 800b6ec:	e017      	b.n	800b71e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b6ee:	697b      	ldr	r3, [r7, #20]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d101      	bne.n	800b6f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b6f8:	697b      	ldr	r3, [r7, #20]
 800b6fa:	3b01      	subs	r3, #1
 800b6fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	689a      	ldr	r2, [r3, #8]
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	4013      	ands	r3, r2
 800b708:	68ba      	ldr	r2, [r7, #8]
 800b70a:	429a      	cmp	r2, r3
 800b70c:	bf0c      	ite	eq
 800b70e:	2301      	moveq	r3, #1
 800b710:	2300      	movne	r3, #0
 800b712:	b2db      	uxtb	r3, r3
 800b714:	461a      	mov	r2, r3
 800b716:	79fb      	ldrb	r3, [r7, #7]
 800b718:	429a      	cmp	r2, r3
 800b71a:	d19b      	bne.n	800b654 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b71c:	2300      	movs	r3, #0
}
 800b71e:	4618      	mov	r0, r3
 800b720:	3720      	adds	r7, #32
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}
 800b726:	bf00      	nop
 800b728:	20000094 	.word	0x20000094

0800b72c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b08a      	sub	sp, #40	; 0x28
 800b730:	af00      	add	r7, sp, #0
 800b732:	60f8      	str	r0, [r7, #12]
 800b734:	60b9      	str	r1, [r7, #8]
 800b736:	607a      	str	r2, [r7, #4]
 800b738:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800b73a:	2300      	movs	r3, #0
 800b73c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800b73e:	f7fc f9b7 	bl	8007ab0 <HAL_GetTick>
 800b742:	4602      	mov	r2, r0
 800b744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b746:	1a9b      	subs	r3, r3, r2
 800b748:	683a      	ldr	r2, [r7, #0]
 800b74a:	4413      	add	r3, r2
 800b74c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800b74e:	f7fc f9af 	bl	8007ab0 <HAL_GetTick>
 800b752:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	330c      	adds	r3, #12
 800b75a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800b75c:	4b3d      	ldr	r3, [pc, #244]	; (800b854 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800b75e:	681a      	ldr	r2, [r3, #0]
 800b760:	4613      	mov	r3, r2
 800b762:	009b      	lsls	r3, r3, #2
 800b764:	4413      	add	r3, r2
 800b766:	00da      	lsls	r2, r3, #3
 800b768:	1ad3      	subs	r3, r2, r3
 800b76a:	0d1b      	lsrs	r3, r3, #20
 800b76c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b76e:	fb02 f303 	mul.w	r3, r2, r3
 800b772:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800b774:	e060      	b.n	800b838 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800b776:	68bb      	ldr	r3, [r7, #8]
 800b778:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b77c:	d107      	bne.n	800b78e <SPI_WaitFifoStateUntilTimeout+0x62>
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d104      	bne.n	800b78e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800b784:	69fb      	ldr	r3, [r7, #28]
 800b786:	781b      	ldrb	r3, [r3, #0]
 800b788:	b2db      	uxtb	r3, r3
 800b78a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800b78c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b794:	d050      	beq.n	800b838 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b796:	f7fc f98b 	bl	8007ab0 <HAL_GetTick>
 800b79a:	4602      	mov	r2, r0
 800b79c:	6a3b      	ldr	r3, [r7, #32]
 800b79e:	1ad3      	subs	r3, r2, r3
 800b7a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7a2:	429a      	cmp	r2, r3
 800b7a4:	d902      	bls.n	800b7ac <SPI_WaitFifoStateUntilTimeout+0x80>
 800b7a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d13d      	bne.n	800b828 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	685a      	ldr	r2, [r3, #4]
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b7ba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	685b      	ldr	r3, [r3, #4]
 800b7c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b7c4:	d111      	bne.n	800b7ea <SPI_WaitFifoStateUntilTimeout+0xbe>
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	689b      	ldr	r3, [r3, #8]
 800b7ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b7ce:	d004      	beq.n	800b7da <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	689b      	ldr	r3, [r3, #8]
 800b7d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b7d8:	d107      	bne.n	800b7ea <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	681a      	ldr	r2, [r3, #0]
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b7e8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b7f2:	d10f      	bne.n	800b814 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	681a      	ldr	r2, [r3, #0]
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b802:	601a      	str	r2, [r3, #0]
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	681a      	ldr	r2, [r3, #0]
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b812:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	2201      	movs	r2, #1
 800b818:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	2200      	movs	r2, #0
 800b820:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800b824:	2303      	movs	r3, #3
 800b826:	e010      	b.n	800b84a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b828:	69bb      	ldr	r3, [r7, #24]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d101      	bne.n	800b832 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800b82e:	2300      	movs	r3, #0
 800b830:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800b832:	69bb      	ldr	r3, [r7, #24]
 800b834:	3b01      	subs	r3, #1
 800b836:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	689a      	ldr	r2, [r3, #8]
 800b83e:	68bb      	ldr	r3, [r7, #8]
 800b840:	4013      	ands	r3, r2
 800b842:	687a      	ldr	r2, [r7, #4]
 800b844:	429a      	cmp	r2, r3
 800b846:	d196      	bne.n	800b776 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800b848:	2300      	movs	r3, #0
}
 800b84a:	4618      	mov	r0, r3
 800b84c:	3728      	adds	r7, #40	; 0x28
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}
 800b852:	bf00      	nop
 800b854:	20000094 	.word	0x20000094

0800b858 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b086      	sub	sp, #24
 800b85c:	af02      	add	r7, sp, #8
 800b85e:	60f8      	str	r0, [r7, #12]
 800b860:	60b9      	str	r1, [r7, #8]
 800b862:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	685b      	ldr	r3, [r3, #4]
 800b868:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b86c:	d111      	bne.n	800b892 <SPI_EndRxTransaction+0x3a>
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	689b      	ldr	r3, [r3, #8]
 800b872:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b876:	d004      	beq.n	800b882 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	689b      	ldr	r3, [r3, #8]
 800b87c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b880:	d107      	bne.n	800b892 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	681a      	ldr	r2, [r3, #0]
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b890:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	9300      	str	r3, [sp, #0]
 800b896:	68bb      	ldr	r3, [r7, #8]
 800b898:	2200      	movs	r2, #0
 800b89a:	2180      	movs	r1, #128	; 0x80
 800b89c:	68f8      	ldr	r0, [r7, #12]
 800b89e:	f7ff febd 	bl	800b61c <SPI_WaitFlagStateUntilTimeout>
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d007      	beq.n	800b8b8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b8ac:	f043 0220 	orr.w	r2, r3, #32
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b8b4:	2303      	movs	r3, #3
 800b8b6:	e023      	b.n	800b900 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	685b      	ldr	r3, [r3, #4]
 800b8bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b8c0:	d11d      	bne.n	800b8fe <SPI_EndRxTransaction+0xa6>
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	689b      	ldr	r3, [r3, #8]
 800b8c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b8ca:	d004      	beq.n	800b8d6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	689b      	ldr	r3, [r3, #8]
 800b8d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b8d4:	d113      	bne.n	800b8fe <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	9300      	str	r3, [sp, #0]
 800b8da:	68bb      	ldr	r3, [r7, #8]
 800b8dc:	2200      	movs	r2, #0
 800b8de:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800b8e2:	68f8      	ldr	r0, [r7, #12]
 800b8e4:	f7ff ff22 	bl	800b72c <SPI_WaitFifoStateUntilTimeout>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d007      	beq.n	800b8fe <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b8f2:	f043 0220 	orr.w	r2, r3, #32
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800b8fa:	2303      	movs	r3, #3
 800b8fc:	e000      	b.n	800b900 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800b8fe:	2300      	movs	r3, #0
}
 800b900:	4618      	mov	r0, r3
 800b902:	3710      	adds	r7, #16
 800b904:	46bd      	mov	sp, r7
 800b906:	bd80      	pop	{r7, pc}

0800b908 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b086      	sub	sp, #24
 800b90c:	af02      	add	r7, sp, #8
 800b90e:	60f8      	str	r0, [r7, #12]
 800b910:	60b9      	str	r1, [r7, #8]
 800b912:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	9300      	str	r3, [sp, #0]
 800b918:	68bb      	ldr	r3, [r7, #8]
 800b91a:	2200      	movs	r2, #0
 800b91c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800b920:	68f8      	ldr	r0, [r7, #12]
 800b922:	f7ff ff03 	bl	800b72c <SPI_WaitFifoStateUntilTimeout>
 800b926:	4603      	mov	r3, r0
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d007      	beq.n	800b93c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b930:	f043 0220 	orr.w	r2, r3, #32
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b938:	2303      	movs	r3, #3
 800b93a:	e027      	b.n	800b98c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	9300      	str	r3, [sp, #0]
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	2200      	movs	r2, #0
 800b944:	2180      	movs	r1, #128	; 0x80
 800b946:	68f8      	ldr	r0, [r7, #12]
 800b948:	f7ff fe68 	bl	800b61c <SPI_WaitFlagStateUntilTimeout>
 800b94c:	4603      	mov	r3, r0
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d007      	beq.n	800b962 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b956:	f043 0220 	orr.w	r2, r3, #32
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b95e:	2303      	movs	r3, #3
 800b960:	e014      	b.n	800b98c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	9300      	str	r3, [sp, #0]
 800b966:	68bb      	ldr	r3, [r7, #8]
 800b968:	2200      	movs	r2, #0
 800b96a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800b96e:	68f8      	ldr	r0, [r7, #12]
 800b970:	f7ff fedc 	bl	800b72c <SPI_WaitFifoStateUntilTimeout>
 800b974:	4603      	mov	r3, r0
 800b976:	2b00      	cmp	r3, #0
 800b978:	d007      	beq.n	800b98a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b97e:	f043 0220 	orr.w	r2, r3, #32
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b986:	2303      	movs	r3, #3
 800b988:	e000      	b.n	800b98c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800b98a:	2300      	movs	r3, #0
}
 800b98c:	4618      	mov	r0, r3
 800b98e:	3710      	adds	r7, #16
 800b990:	46bd      	mov	sp, r7
 800b992:	bd80      	pop	{r7, pc}

0800b994 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b082      	sub	sp, #8
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d101      	bne.n	800b9a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b9a2:	2301      	movs	r3, #1
 800b9a4:	e049      	b.n	800ba3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b9ac:	b2db      	uxtb	r3, r3
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d106      	bne.n	800b9c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f7fb feb2 	bl	8007724 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2202      	movs	r2, #2
 800b9c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681a      	ldr	r2, [r3, #0]
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	3304      	adds	r3, #4
 800b9d0:	4619      	mov	r1, r3
 800b9d2:	4610      	mov	r0, r2
 800b9d4:	f000 fd60 	bl	800c498 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2201      	movs	r2, #1
 800b9dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2201      	movs	r2, #1
 800b9e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2201      	movs	r2, #1
 800b9ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2201      	movs	r2, #1
 800b9f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2201      	movs	r2, #1
 800b9fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2201      	movs	r2, #1
 800ba04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2201      	movs	r2, #1
 800ba0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2201      	movs	r2, #1
 800ba14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2201      	movs	r2, #1
 800ba1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2201      	movs	r2, #1
 800ba24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2201      	movs	r2, #1
 800ba2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2201      	movs	r2, #1
 800ba34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ba38:	2300      	movs	r3, #0
}
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	3708      	adds	r7, #8
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	bd80      	pop	{r7, pc}
	...

0800ba44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ba44:	b480      	push	{r7}
 800ba46:	b085      	sub	sp, #20
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba52:	b2db      	uxtb	r3, r3
 800ba54:	2b01      	cmp	r3, #1
 800ba56:	d001      	beq.n	800ba5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ba58:	2301      	movs	r3, #1
 800ba5a:	e04f      	b.n	800bafc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2202      	movs	r2, #2
 800ba60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	68da      	ldr	r2, [r3, #12]
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	f042 0201 	orr.w	r2, r2, #1
 800ba72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	4a23      	ldr	r2, [pc, #140]	; (800bb08 <HAL_TIM_Base_Start_IT+0xc4>)
 800ba7a:	4293      	cmp	r3, r2
 800ba7c:	d01d      	beq.n	800baba <HAL_TIM_Base_Start_IT+0x76>
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba86:	d018      	beq.n	800baba <HAL_TIM_Base_Start_IT+0x76>
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	4a1f      	ldr	r2, [pc, #124]	; (800bb0c <HAL_TIM_Base_Start_IT+0xc8>)
 800ba8e:	4293      	cmp	r3, r2
 800ba90:	d013      	beq.n	800baba <HAL_TIM_Base_Start_IT+0x76>
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	4a1e      	ldr	r2, [pc, #120]	; (800bb10 <HAL_TIM_Base_Start_IT+0xcc>)
 800ba98:	4293      	cmp	r3, r2
 800ba9a:	d00e      	beq.n	800baba <HAL_TIM_Base_Start_IT+0x76>
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	4a1c      	ldr	r2, [pc, #112]	; (800bb14 <HAL_TIM_Base_Start_IT+0xd0>)
 800baa2:	4293      	cmp	r3, r2
 800baa4:	d009      	beq.n	800baba <HAL_TIM_Base_Start_IT+0x76>
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	4a1b      	ldr	r2, [pc, #108]	; (800bb18 <HAL_TIM_Base_Start_IT+0xd4>)
 800baac:	4293      	cmp	r3, r2
 800baae:	d004      	beq.n	800baba <HAL_TIM_Base_Start_IT+0x76>
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	4a19      	ldr	r2, [pc, #100]	; (800bb1c <HAL_TIM_Base_Start_IT+0xd8>)
 800bab6:	4293      	cmp	r3, r2
 800bab8:	d115      	bne.n	800bae6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	689a      	ldr	r2, [r3, #8]
 800bac0:	4b17      	ldr	r3, [pc, #92]	; (800bb20 <HAL_TIM_Base_Start_IT+0xdc>)
 800bac2:	4013      	ands	r3, r2
 800bac4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	2b06      	cmp	r3, #6
 800baca:	d015      	beq.n	800baf8 <HAL_TIM_Base_Start_IT+0xb4>
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bad2:	d011      	beq.n	800baf8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	681a      	ldr	r2, [r3, #0]
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	f042 0201 	orr.w	r2, r2, #1
 800bae2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bae4:	e008      	b.n	800baf8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	681a      	ldr	r2, [r3, #0]
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	f042 0201 	orr.w	r2, r2, #1
 800baf4:	601a      	str	r2, [r3, #0]
 800baf6:	e000      	b.n	800bafa <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800baf8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bafa:	2300      	movs	r3, #0
}
 800bafc:	4618      	mov	r0, r3
 800bafe:	3714      	adds	r7, #20
 800bb00:	46bd      	mov	sp, r7
 800bb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb06:	4770      	bx	lr
 800bb08:	40012c00 	.word	0x40012c00
 800bb0c:	40000400 	.word	0x40000400
 800bb10:	40000800 	.word	0x40000800
 800bb14:	40000c00 	.word	0x40000c00
 800bb18:	40013400 	.word	0x40013400
 800bb1c:	40014000 	.word	0x40014000
 800bb20:	00010007 	.word	0x00010007

0800bb24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b082      	sub	sp, #8
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d101      	bne.n	800bb36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bb32:	2301      	movs	r3, #1
 800bb34:	e049      	b.n	800bbca <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb3c:	b2db      	uxtb	r3, r3
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d106      	bne.n	800bb50 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2200      	movs	r2, #0
 800bb46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bb4a:	6878      	ldr	r0, [r7, #4]
 800bb4c:	f000 f841 	bl	800bbd2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2202      	movs	r2, #2
 800bb54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681a      	ldr	r2, [r3, #0]
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	3304      	adds	r3, #4
 800bb60:	4619      	mov	r1, r3
 800bb62:	4610      	mov	r0, r2
 800bb64:	f000 fc98 	bl	800c498 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2201      	movs	r2, #1
 800bb6c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2201      	movs	r2, #1
 800bb74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2201      	movs	r2, #1
 800bb7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2201      	movs	r2, #1
 800bb84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2201      	movs	r2, #1
 800bb8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2201      	movs	r2, #1
 800bb94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2201      	movs	r2, #1
 800bb9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2201      	movs	r2, #1
 800bba4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2201      	movs	r2, #1
 800bbac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2201      	movs	r2, #1
 800bbb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2201      	movs	r2, #1
 800bbbc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2201      	movs	r2, #1
 800bbc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bbc8:	2300      	movs	r3, #0
}
 800bbca:	4618      	mov	r0, r3
 800bbcc:	3708      	adds	r7, #8
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bd80      	pop	{r7, pc}

0800bbd2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800bbd2:	b480      	push	{r7}
 800bbd4:	b083      	sub	sp, #12
 800bbd6:	af00      	add	r7, sp, #0
 800bbd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800bbda:	bf00      	nop
 800bbdc:	370c      	adds	r7, #12
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe4:	4770      	bx	lr

0800bbe6 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800bbe6:	b580      	push	{r7, lr}
 800bbe8:	b086      	sub	sp, #24
 800bbea:	af00      	add	r7, sp, #0
 800bbec:	6078      	str	r0, [r7, #4]
 800bbee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d101      	bne.n	800bbfa <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800bbf6:	2301      	movs	r3, #1
 800bbf8:	e097      	b.n	800bd2a <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc00:	b2db      	uxtb	r3, r3
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d106      	bne.n	800bc14 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	2200      	movs	r2, #0
 800bc0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f7fb fda6 	bl	8007760 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2202      	movs	r2, #2
 800bc18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	689b      	ldr	r3, [r3, #8]
 800bc22:	687a      	ldr	r2, [r7, #4]
 800bc24:	6812      	ldr	r2, [r2, #0]
 800bc26:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800bc2a:	f023 0307 	bic.w	r3, r3, #7
 800bc2e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681a      	ldr	r2, [r3, #0]
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	3304      	adds	r3, #4
 800bc38:	4619      	mov	r1, r3
 800bc3a:	4610      	mov	r0, r2
 800bc3c:	f000 fc2c 	bl	800c498 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	689b      	ldr	r3, [r3, #8]
 800bc46:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	699b      	ldr	r3, [r3, #24]
 800bc4e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	6a1b      	ldr	r3, [r3, #32]
 800bc56:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	697a      	ldr	r2, [r7, #20]
 800bc5e:	4313      	orrs	r3, r2
 800bc60:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800bc62:	693b      	ldr	r3, [r7, #16]
 800bc64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bc68:	f023 0303 	bic.w	r3, r3, #3
 800bc6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	689a      	ldr	r2, [r3, #8]
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	699b      	ldr	r3, [r3, #24]
 800bc76:	021b      	lsls	r3, r3, #8
 800bc78:	4313      	orrs	r3, r2
 800bc7a:	693a      	ldr	r2, [r7, #16]
 800bc7c:	4313      	orrs	r3, r2
 800bc7e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800bc80:	693b      	ldr	r3, [r7, #16]
 800bc82:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800bc86:	f023 030c 	bic.w	r3, r3, #12
 800bc8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800bc8c:	693b      	ldr	r3, [r7, #16]
 800bc8e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bc92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bc96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	68da      	ldr	r2, [r3, #12]
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	69db      	ldr	r3, [r3, #28]
 800bca0:	021b      	lsls	r3, r3, #8
 800bca2:	4313      	orrs	r3, r2
 800bca4:	693a      	ldr	r2, [r7, #16]
 800bca6:	4313      	orrs	r3, r2
 800bca8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	691b      	ldr	r3, [r3, #16]
 800bcae:	011a      	lsls	r2, r3, #4
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	6a1b      	ldr	r3, [r3, #32]
 800bcb4:	031b      	lsls	r3, r3, #12
 800bcb6:	4313      	orrs	r3, r2
 800bcb8:	693a      	ldr	r2, [r7, #16]
 800bcba:	4313      	orrs	r3, r2
 800bcbc:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800bcc4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800bccc:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	685a      	ldr	r2, [r3, #4]
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	695b      	ldr	r3, [r3, #20]
 800bcd6:	011b      	lsls	r3, r3, #4
 800bcd8:	4313      	orrs	r3, r2
 800bcda:	68fa      	ldr	r2, [r7, #12]
 800bcdc:	4313      	orrs	r3, r2
 800bcde:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	697a      	ldr	r2, [r7, #20]
 800bce6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	693a      	ldr	r2, [r7, #16]
 800bcee:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	68fa      	ldr	r2, [r7, #12]
 800bcf6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2201      	movs	r2, #1
 800bcfc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2201      	movs	r2, #1
 800bd04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2201      	movs	r2, #1
 800bd0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2201      	movs	r2, #1
 800bd14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2201      	movs	r2, #1
 800bd1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2201      	movs	r2, #1
 800bd24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bd28:	2300      	movs	r3, #0
}
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	3718      	adds	r7, #24
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}

0800bd32 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bd32:	b580      	push	{r7, lr}
 800bd34:	b084      	sub	sp, #16
 800bd36:	af00      	add	r7, sp, #0
 800bd38:	6078      	str	r0, [r7, #4]
 800bd3a:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bd42:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800bd4a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bd52:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd5a:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d110      	bne.n	800bd84 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bd62:	7bfb      	ldrb	r3, [r7, #15]
 800bd64:	2b01      	cmp	r3, #1
 800bd66:	d102      	bne.n	800bd6e <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800bd68:	7b7b      	ldrb	r3, [r7, #13]
 800bd6a:	2b01      	cmp	r3, #1
 800bd6c:	d001      	beq.n	800bd72 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800bd6e:	2301      	movs	r3, #1
 800bd70:	e069      	b.n	800be46 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2202      	movs	r2, #2
 800bd76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	2202      	movs	r2, #2
 800bd7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bd82:	e031      	b.n	800bde8 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800bd84:	683b      	ldr	r3, [r7, #0]
 800bd86:	2b04      	cmp	r3, #4
 800bd88:	d110      	bne.n	800bdac <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800bd8a:	7bbb      	ldrb	r3, [r7, #14]
 800bd8c:	2b01      	cmp	r3, #1
 800bd8e:	d102      	bne.n	800bd96 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800bd90:	7b3b      	ldrb	r3, [r7, #12]
 800bd92:	2b01      	cmp	r3, #1
 800bd94:	d001      	beq.n	800bd9a <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800bd96:	2301      	movs	r3, #1
 800bd98:	e055      	b.n	800be46 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	2202      	movs	r2, #2
 800bd9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	2202      	movs	r2, #2
 800bda6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bdaa:	e01d      	b.n	800bde8 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bdac:	7bfb      	ldrb	r3, [r7, #15]
 800bdae:	2b01      	cmp	r3, #1
 800bdb0:	d108      	bne.n	800bdc4 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800bdb2:	7bbb      	ldrb	r3, [r7, #14]
 800bdb4:	2b01      	cmp	r3, #1
 800bdb6:	d105      	bne.n	800bdc4 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bdb8:	7b7b      	ldrb	r3, [r7, #13]
 800bdba:	2b01      	cmp	r3, #1
 800bdbc:	d102      	bne.n	800bdc4 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800bdbe:	7b3b      	ldrb	r3, [r7, #12]
 800bdc0:	2b01      	cmp	r3, #1
 800bdc2:	d001      	beq.n	800bdc8 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800bdc4:	2301      	movs	r3, #1
 800bdc6:	e03e      	b.n	800be46 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2202      	movs	r2, #2
 800bdcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2202      	movs	r2, #2
 800bdd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2202      	movs	r2, #2
 800bddc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2202      	movs	r2, #2
 800bde4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800bde8:	683b      	ldr	r3, [r7, #0]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d003      	beq.n	800bdf6 <HAL_TIM_Encoder_Start+0xc4>
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	2b04      	cmp	r3, #4
 800bdf2:	d008      	beq.n	800be06 <HAL_TIM_Encoder_Start+0xd4>
 800bdf4:	e00f      	b.n	800be16 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	2201      	movs	r2, #1
 800bdfc:	2100      	movs	r1, #0
 800bdfe:	4618      	mov	r0, r3
 800be00:	f000 ff54 	bl	800ccac <TIM_CCxChannelCmd>
      break;
 800be04:	e016      	b.n	800be34 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	2201      	movs	r2, #1
 800be0c:	2104      	movs	r1, #4
 800be0e:	4618      	mov	r0, r3
 800be10:	f000 ff4c 	bl	800ccac <TIM_CCxChannelCmd>
      break;
 800be14:	e00e      	b.n	800be34 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	2201      	movs	r2, #1
 800be1c:	2100      	movs	r1, #0
 800be1e:	4618      	mov	r0, r3
 800be20:	f000 ff44 	bl	800ccac <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	2201      	movs	r2, #1
 800be2a:	2104      	movs	r1, #4
 800be2c:	4618      	mov	r0, r3
 800be2e:	f000 ff3d 	bl	800ccac <TIM_CCxChannelCmd>
      break;
 800be32:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	681a      	ldr	r2, [r3, #0]
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	f042 0201 	orr.w	r2, r2, #1
 800be42:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800be44:	2300      	movs	r3, #0
}
 800be46:	4618      	mov	r0, r3
 800be48:	3710      	adds	r7, #16
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}

0800be4e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800be4e:	b580      	push	{r7, lr}
 800be50:	b082      	sub	sp, #8
 800be52:	af00      	add	r7, sp, #0
 800be54:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	691b      	ldr	r3, [r3, #16]
 800be5c:	f003 0302 	and.w	r3, r3, #2
 800be60:	2b02      	cmp	r3, #2
 800be62:	d122      	bne.n	800beaa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	68db      	ldr	r3, [r3, #12]
 800be6a:	f003 0302 	and.w	r3, r3, #2
 800be6e:	2b02      	cmp	r3, #2
 800be70:	d11b      	bne.n	800beaa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	f06f 0202 	mvn.w	r2, #2
 800be7a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2201      	movs	r2, #1
 800be80:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	699b      	ldr	r3, [r3, #24]
 800be88:	f003 0303 	and.w	r3, r3, #3
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d003      	beq.n	800be98 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800be90:	6878      	ldr	r0, [r7, #4]
 800be92:	f000 fae2 	bl	800c45a <HAL_TIM_IC_CaptureCallback>
 800be96:	e005      	b.n	800bea4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800be98:	6878      	ldr	r0, [r7, #4]
 800be9a:	f000 fad4 	bl	800c446 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be9e:	6878      	ldr	r0, [r7, #4]
 800bea0:	f000 fae5 	bl	800c46e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2200      	movs	r2, #0
 800bea8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	691b      	ldr	r3, [r3, #16]
 800beb0:	f003 0304 	and.w	r3, r3, #4
 800beb4:	2b04      	cmp	r3, #4
 800beb6:	d122      	bne.n	800befe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	68db      	ldr	r3, [r3, #12]
 800bebe:	f003 0304 	and.w	r3, r3, #4
 800bec2:	2b04      	cmp	r3, #4
 800bec4:	d11b      	bne.n	800befe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	f06f 0204 	mvn.w	r2, #4
 800bece:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2202      	movs	r2, #2
 800bed4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	699b      	ldr	r3, [r3, #24]
 800bedc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d003      	beq.n	800beec <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bee4:	6878      	ldr	r0, [r7, #4]
 800bee6:	f000 fab8 	bl	800c45a <HAL_TIM_IC_CaptureCallback>
 800beea:	e005      	b.n	800bef8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800beec:	6878      	ldr	r0, [r7, #4]
 800beee:	f000 faaa 	bl	800c446 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bef2:	6878      	ldr	r0, [r7, #4]
 800bef4:	f000 fabb 	bl	800c46e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2200      	movs	r2, #0
 800befc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	691b      	ldr	r3, [r3, #16]
 800bf04:	f003 0308 	and.w	r3, r3, #8
 800bf08:	2b08      	cmp	r3, #8
 800bf0a:	d122      	bne.n	800bf52 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	68db      	ldr	r3, [r3, #12]
 800bf12:	f003 0308 	and.w	r3, r3, #8
 800bf16:	2b08      	cmp	r3, #8
 800bf18:	d11b      	bne.n	800bf52 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	f06f 0208 	mvn.w	r2, #8
 800bf22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2204      	movs	r2, #4
 800bf28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	69db      	ldr	r3, [r3, #28]
 800bf30:	f003 0303 	and.w	r3, r3, #3
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d003      	beq.n	800bf40 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf38:	6878      	ldr	r0, [r7, #4]
 800bf3a:	f000 fa8e 	bl	800c45a <HAL_TIM_IC_CaptureCallback>
 800bf3e:	e005      	b.n	800bf4c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf40:	6878      	ldr	r0, [r7, #4]
 800bf42:	f000 fa80 	bl	800c446 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f000 fa91 	bl	800c46e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2200      	movs	r2, #0
 800bf50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	691b      	ldr	r3, [r3, #16]
 800bf58:	f003 0310 	and.w	r3, r3, #16
 800bf5c:	2b10      	cmp	r3, #16
 800bf5e:	d122      	bne.n	800bfa6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	68db      	ldr	r3, [r3, #12]
 800bf66:	f003 0310 	and.w	r3, r3, #16
 800bf6a:	2b10      	cmp	r3, #16
 800bf6c:	d11b      	bne.n	800bfa6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	f06f 0210 	mvn.w	r2, #16
 800bf76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2208      	movs	r2, #8
 800bf7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	69db      	ldr	r3, [r3, #28]
 800bf84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d003      	beq.n	800bf94 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf8c:	6878      	ldr	r0, [r7, #4]
 800bf8e:	f000 fa64 	bl	800c45a <HAL_TIM_IC_CaptureCallback>
 800bf92:	e005      	b.n	800bfa0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf94:	6878      	ldr	r0, [r7, #4]
 800bf96:	f000 fa56 	bl	800c446 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	f000 fa67 	bl	800c46e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	691b      	ldr	r3, [r3, #16]
 800bfac:	f003 0301 	and.w	r3, r3, #1
 800bfb0:	2b01      	cmp	r3, #1
 800bfb2:	d10e      	bne.n	800bfd2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	68db      	ldr	r3, [r3, #12]
 800bfba:	f003 0301 	and.w	r3, r3, #1
 800bfbe:	2b01      	cmp	r3, #1
 800bfc0:	d107      	bne.n	800bfd2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	f06f 0201 	mvn.w	r2, #1
 800bfca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bfcc:	6878      	ldr	r0, [r7, #4]
 800bfce:	f7f8 fe77 	bl	8004cc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	691b      	ldr	r3, [r3, #16]
 800bfd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfdc:	2b80      	cmp	r3, #128	; 0x80
 800bfde:	d10e      	bne.n	800bffe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	68db      	ldr	r3, [r3, #12]
 800bfe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfea:	2b80      	cmp	r3, #128	; 0x80
 800bfec:	d107      	bne.n	800bffe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bff6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bff8:	6878      	ldr	r0, [r7, #4]
 800bffa:	f000 ff0f 	bl	800ce1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	691b      	ldr	r3, [r3, #16]
 800c004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c008:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c00c:	d10e      	bne.n	800c02c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	68db      	ldr	r3, [r3, #12]
 800c014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c018:	2b80      	cmp	r3, #128	; 0x80
 800c01a:	d107      	bne.n	800c02c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c026:	6878      	ldr	r0, [r7, #4]
 800c028:	f000 ff02 	bl	800ce30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	691b      	ldr	r3, [r3, #16]
 800c032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c036:	2b40      	cmp	r3, #64	; 0x40
 800c038:	d10e      	bne.n	800c058 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	68db      	ldr	r3, [r3, #12]
 800c040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c044:	2b40      	cmp	r3, #64	; 0x40
 800c046:	d107      	bne.n	800c058 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c052:	6878      	ldr	r0, [r7, #4]
 800c054:	f000 fa15 	bl	800c482 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	691b      	ldr	r3, [r3, #16]
 800c05e:	f003 0320 	and.w	r3, r3, #32
 800c062:	2b20      	cmp	r3, #32
 800c064:	d10e      	bne.n	800c084 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	68db      	ldr	r3, [r3, #12]
 800c06c:	f003 0320 	and.w	r3, r3, #32
 800c070:	2b20      	cmp	r3, #32
 800c072:	d107      	bne.n	800c084 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	f06f 0220 	mvn.w	r2, #32
 800c07c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f000 fec2 	bl	800ce08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c084:	bf00      	nop
 800c086:	3708      	adds	r7, #8
 800c088:	46bd      	mov	sp, r7
 800c08a:	bd80      	pop	{r7, pc}

0800c08c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b086      	sub	sp, #24
 800c090:	af00      	add	r7, sp, #0
 800c092:	60f8      	str	r0, [r7, #12]
 800c094:	60b9      	str	r1, [r7, #8]
 800c096:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c098:	2300      	movs	r3, #0
 800c09a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c0a2:	2b01      	cmp	r3, #1
 800c0a4:	d101      	bne.n	800c0aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c0a6:	2302      	movs	r3, #2
 800c0a8:	e0ff      	b.n	800c2aa <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	2201      	movs	r2, #1
 800c0ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	2b14      	cmp	r3, #20
 800c0b6:	f200 80f0 	bhi.w	800c29a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c0ba:	a201      	add	r2, pc, #4	; (adr r2, 800c0c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c0bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0c0:	0800c115 	.word	0x0800c115
 800c0c4:	0800c29b 	.word	0x0800c29b
 800c0c8:	0800c29b 	.word	0x0800c29b
 800c0cc:	0800c29b 	.word	0x0800c29b
 800c0d0:	0800c155 	.word	0x0800c155
 800c0d4:	0800c29b 	.word	0x0800c29b
 800c0d8:	0800c29b 	.word	0x0800c29b
 800c0dc:	0800c29b 	.word	0x0800c29b
 800c0e0:	0800c197 	.word	0x0800c197
 800c0e4:	0800c29b 	.word	0x0800c29b
 800c0e8:	0800c29b 	.word	0x0800c29b
 800c0ec:	0800c29b 	.word	0x0800c29b
 800c0f0:	0800c1d7 	.word	0x0800c1d7
 800c0f4:	0800c29b 	.word	0x0800c29b
 800c0f8:	0800c29b 	.word	0x0800c29b
 800c0fc:	0800c29b 	.word	0x0800c29b
 800c100:	0800c219 	.word	0x0800c219
 800c104:	0800c29b 	.word	0x0800c29b
 800c108:	0800c29b 	.word	0x0800c29b
 800c10c:	0800c29b 	.word	0x0800c29b
 800c110:	0800c259 	.word	0x0800c259
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	68b9      	ldr	r1, [r7, #8]
 800c11a:	4618      	mov	r0, r3
 800c11c:	f000 fa56 	bl	800c5cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	699a      	ldr	r2, [r3, #24]
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	f042 0208 	orr.w	r2, r2, #8
 800c12e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	699a      	ldr	r2, [r3, #24]
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	f022 0204 	bic.w	r2, r2, #4
 800c13e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	6999      	ldr	r1, [r3, #24]
 800c146:	68bb      	ldr	r3, [r7, #8]
 800c148:	691a      	ldr	r2, [r3, #16]
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	430a      	orrs	r2, r1
 800c150:	619a      	str	r2, [r3, #24]
      break;
 800c152:	e0a5      	b.n	800c2a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	68b9      	ldr	r1, [r7, #8]
 800c15a:	4618      	mov	r0, r3
 800c15c:	f000 fac6 	bl	800c6ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	699a      	ldr	r2, [r3, #24]
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c16e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	699a      	ldr	r2, [r3, #24]
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c17e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	6999      	ldr	r1, [r3, #24]
 800c186:	68bb      	ldr	r3, [r7, #8]
 800c188:	691b      	ldr	r3, [r3, #16]
 800c18a:	021a      	lsls	r2, r3, #8
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	430a      	orrs	r2, r1
 800c192:	619a      	str	r2, [r3, #24]
      break;
 800c194:	e084      	b.n	800c2a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	68b9      	ldr	r1, [r7, #8]
 800c19c:	4618      	mov	r0, r3
 800c19e:	f000 fb2f 	bl	800c800 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	69da      	ldr	r2, [r3, #28]
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	f042 0208 	orr.w	r2, r2, #8
 800c1b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	69da      	ldr	r2, [r3, #28]
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	f022 0204 	bic.w	r2, r2, #4
 800c1c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	69d9      	ldr	r1, [r3, #28]
 800c1c8:	68bb      	ldr	r3, [r7, #8]
 800c1ca:	691a      	ldr	r2, [r3, #16]
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	430a      	orrs	r2, r1
 800c1d2:	61da      	str	r2, [r3, #28]
      break;
 800c1d4:	e064      	b.n	800c2a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	68b9      	ldr	r1, [r7, #8]
 800c1dc:	4618      	mov	r0, r3
 800c1de:	f000 fb97 	bl	800c910 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	69da      	ldr	r2, [r3, #28]
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c1f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	69da      	ldr	r2, [r3, #28]
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c200:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	69d9      	ldr	r1, [r3, #28]
 800c208:	68bb      	ldr	r3, [r7, #8]
 800c20a:	691b      	ldr	r3, [r3, #16]
 800c20c:	021a      	lsls	r2, r3, #8
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	430a      	orrs	r2, r1
 800c214:	61da      	str	r2, [r3, #28]
      break;
 800c216:	e043      	b.n	800c2a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	68b9      	ldr	r1, [r7, #8]
 800c21e:	4618      	mov	r0, r3
 800c220:	f000 fbe0 	bl	800c9e4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	f042 0208 	orr.w	r2, r2, #8
 800c232:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	f022 0204 	bic.w	r2, r2, #4
 800c242:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c24a:	68bb      	ldr	r3, [r7, #8]
 800c24c:	691a      	ldr	r2, [r3, #16]
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	430a      	orrs	r2, r1
 800c254:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c256:	e023      	b.n	800c2a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	68b9      	ldr	r1, [r7, #8]
 800c25e:	4618      	mov	r0, r3
 800c260:	f000 fc24 	bl	800caac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c272:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c282:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c28a:	68bb      	ldr	r3, [r7, #8]
 800c28c:	691b      	ldr	r3, [r3, #16]
 800c28e:	021a      	lsls	r2, r3, #8
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	430a      	orrs	r2, r1
 800c296:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c298:	e002      	b.n	800c2a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c29a:	2301      	movs	r3, #1
 800c29c:	75fb      	strb	r3, [r7, #23]
      break;
 800c29e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c2a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	3718      	adds	r7, #24
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}
 800c2b2:	bf00      	nop

0800c2b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b084      	sub	sp, #16
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
 800c2bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c2be:	2300      	movs	r3, #0
 800c2c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c2c8:	2b01      	cmp	r3, #1
 800c2ca:	d101      	bne.n	800c2d0 <HAL_TIM_ConfigClockSource+0x1c>
 800c2cc:	2302      	movs	r3, #2
 800c2ce:	e0b6      	b.n	800c43e <HAL_TIM_ConfigClockSource+0x18a>
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2201      	movs	r2, #1
 800c2d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	2202      	movs	r2, #2
 800c2dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	689b      	ldr	r3, [r3, #8]
 800c2e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c2e8:	68bb      	ldr	r3, [r7, #8]
 800c2ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c2ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c2f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c2f4:	68bb      	ldr	r3, [r7, #8]
 800c2f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c2fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	68ba      	ldr	r2, [r7, #8]
 800c302:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c304:	683b      	ldr	r3, [r7, #0]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c30c:	d03e      	beq.n	800c38c <HAL_TIM_ConfigClockSource+0xd8>
 800c30e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c312:	f200 8087 	bhi.w	800c424 <HAL_TIM_ConfigClockSource+0x170>
 800c316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c31a:	f000 8086 	beq.w	800c42a <HAL_TIM_ConfigClockSource+0x176>
 800c31e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c322:	d87f      	bhi.n	800c424 <HAL_TIM_ConfigClockSource+0x170>
 800c324:	2b70      	cmp	r3, #112	; 0x70
 800c326:	d01a      	beq.n	800c35e <HAL_TIM_ConfigClockSource+0xaa>
 800c328:	2b70      	cmp	r3, #112	; 0x70
 800c32a:	d87b      	bhi.n	800c424 <HAL_TIM_ConfigClockSource+0x170>
 800c32c:	2b60      	cmp	r3, #96	; 0x60
 800c32e:	d050      	beq.n	800c3d2 <HAL_TIM_ConfigClockSource+0x11e>
 800c330:	2b60      	cmp	r3, #96	; 0x60
 800c332:	d877      	bhi.n	800c424 <HAL_TIM_ConfigClockSource+0x170>
 800c334:	2b50      	cmp	r3, #80	; 0x50
 800c336:	d03c      	beq.n	800c3b2 <HAL_TIM_ConfigClockSource+0xfe>
 800c338:	2b50      	cmp	r3, #80	; 0x50
 800c33a:	d873      	bhi.n	800c424 <HAL_TIM_ConfigClockSource+0x170>
 800c33c:	2b40      	cmp	r3, #64	; 0x40
 800c33e:	d058      	beq.n	800c3f2 <HAL_TIM_ConfigClockSource+0x13e>
 800c340:	2b40      	cmp	r3, #64	; 0x40
 800c342:	d86f      	bhi.n	800c424 <HAL_TIM_ConfigClockSource+0x170>
 800c344:	2b30      	cmp	r3, #48	; 0x30
 800c346:	d064      	beq.n	800c412 <HAL_TIM_ConfigClockSource+0x15e>
 800c348:	2b30      	cmp	r3, #48	; 0x30
 800c34a:	d86b      	bhi.n	800c424 <HAL_TIM_ConfigClockSource+0x170>
 800c34c:	2b20      	cmp	r3, #32
 800c34e:	d060      	beq.n	800c412 <HAL_TIM_ConfigClockSource+0x15e>
 800c350:	2b20      	cmp	r3, #32
 800c352:	d867      	bhi.n	800c424 <HAL_TIM_ConfigClockSource+0x170>
 800c354:	2b00      	cmp	r3, #0
 800c356:	d05c      	beq.n	800c412 <HAL_TIM_ConfigClockSource+0x15e>
 800c358:	2b10      	cmp	r3, #16
 800c35a:	d05a      	beq.n	800c412 <HAL_TIM_ConfigClockSource+0x15e>
 800c35c:	e062      	b.n	800c424 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	6818      	ldr	r0, [r3, #0]
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	6899      	ldr	r1, [r3, #8]
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	685a      	ldr	r2, [r3, #4]
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	68db      	ldr	r3, [r3, #12]
 800c36e:	f000 fc7d 	bl	800cc6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	689b      	ldr	r3, [r3, #8]
 800c378:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c37a:	68bb      	ldr	r3, [r7, #8]
 800c37c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c380:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	68ba      	ldr	r2, [r7, #8]
 800c388:	609a      	str	r2, [r3, #8]
      break;
 800c38a:	e04f      	b.n	800c42c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	6818      	ldr	r0, [r3, #0]
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	6899      	ldr	r1, [r3, #8]
 800c394:	683b      	ldr	r3, [r7, #0]
 800c396:	685a      	ldr	r2, [r3, #4]
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	68db      	ldr	r3, [r3, #12]
 800c39c:	f000 fc66 	bl	800cc6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	689a      	ldr	r2, [r3, #8]
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c3ae:	609a      	str	r2, [r3, #8]
      break;
 800c3b0:	e03c      	b.n	800c42c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	6818      	ldr	r0, [r3, #0]
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	6859      	ldr	r1, [r3, #4]
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	68db      	ldr	r3, [r3, #12]
 800c3be:	461a      	mov	r2, r3
 800c3c0:	f000 fbda 	bl	800cb78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	2150      	movs	r1, #80	; 0x50
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	f000 fc33 	bl	800cc36 <TIM_ITRx_SetConfig>
      break;
 800c3d0:	e02c      	b.n	800c42c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	6818      	ldr	r0, [r3, #0]
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	6859      	ldr	r1, [r3, #4]
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	68db      	ldr	r3, [r3, #12]
 800c3de:	461a      	mov	r2, r3
 800c3e0:	f000 fbf9 	bl	800cbd6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	2160      	movs	r1, #96	; 0x60
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	f000 fc23 	bl	800cc36 <TIM_ITRx_SetConfig>
      break;
 800c3f0:	e01c      	b.n	800c42c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	6818      	ldr	r0, [r3, #0]
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	6859      	ldr	r1, [r3, #4]
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	68db      	ldr	r3, [r3, #12]
 800c3fe:	461a      	mov	r2, r3
 800c400:	f000 fbba 	bl	800cb78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	2140      	movs	r1, #64	; 0x40
 800c40a:	4618      	mov	r0, r3
 800c40c:	f000 fc13 	bl	800cc36 <TIM_ITRx_SetConfig>
      break;
 800c410:	e00c      	b.n	800c42c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681a      	ldr	r2, [r3, #0]
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	4619      	mov	r1, r3
 800c41c:	4610      	mov	r0, r2
 800c41e:	f000 fc0a 	bl	800cc36 <TIM_ITRx_SetConfig>
      break;
 800c422:	e003      	b.n	800c42c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800c424:	2301      	movs	r3, #1
 800c426:	73fb      	strb	r3, [r7, #15]
      break;
 800c428:	e000      	b.n	800c42c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800c42a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	2201      	movs	r2, #1
 800c430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2200      	movs	r2, #0
 800c438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c43c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c43e:	4618      	mov	r0, r3
 800c440:	3710      	adds	r7, #16
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}

0800c446 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c446:	b480      	push	{r7}
 800c448:	b083      	sub	sp, #12
 800c44a:	af00      	add	r7, sp, #0
 800c44c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c44e:	bf00      	nop
 800c450:	370c      	adds	r7, #12
 800c452:	46bd      	mov	sp, r7
 800c454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c458:	4770      	bx	lr

0800c45a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c45a:	b480      	push	{r7}
 800c45c:	b083      	sub	sp, #12
 800c45e:	af00      	add	r7, sp, #0
 800c460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c462:	bf00      	nop
 800c464:	370c      	adds	r7, #12
 800c466:	46bd      	mov	sp, r7
 800c468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46c:	4770      	bx	lr

0800c46e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c46e:	b480      	push	{r7}
 800c470:	b083      	sub	sp, #12
 800c472:	af00      	add	r7, sp, #0
 800c474:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c476:	bf00      	nop
 800c478:	370c      	adds	r7, #12
 800c47a:	46bd      	mov	sp, r7
 800c47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c480:	4770      	bx	lr

0800c482 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c482:	b480      	push	{r7}
 800c484:	b083      	sub	sp, #12
 800c486:	af00      	add	r7, sp, #0
 800c488:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c48a:	bf00      	nop
 800c48c:	370c      	adds	r7, #12
 800c48e:	46bd      	mov	sp, r7
 800c490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c494:	4770      	bx	lr
	...

0800c498 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c498:	b480      	push	{r7}
 800c49a:	b085      	sub	sp, #20
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
 800c4a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	4a40      	ldr	r2, [pc, #256]	; (800c5ac <TIM_Base_SetConfig+0x114>)
 800c4ac:	4293      	cmp	r3, r2
 800c4ae:	d013      	beq.n	800c4d8 <TIM_Base_SetConfig+0x40>
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c4b6:	d00f      	beq.n	800c4d8 <TIM_Base_SetConfig+0x40>
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	4a3d      	ldr	r2, [pc, #244]	; (800c5b0 <TIM_Base_SetConfig+0x118>)
 800c4bc:	4293      	cmp	r3, r2
 800c4be:	d00b      	beq.n	800c4d8 <TIM_Base_SetConfig+0x40>
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	4a3c      	ldr	r2, [pc, #240]	; (800c5b4 <TIM_Base_SetConfig+0x11c>)
 800c4c4:	4293      	cmp	r3, r2
 800c4c6:	d007      	beq.n	800c4d8 <TIM_Base_SetConfig+0x40>
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	4a3b      	ldr	r2, [pc, #236]	; (800c5b8 <TIM_Base_SetConfig+0x120>)
 800c4cc:	4293      	cmp	r3, r2
 800c4ce:	d003      	beq.n	800c4d8 <TIM_Base_SetConfig+0x40>
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	4a3a      	ldr	r2, [pc, #232]	; (800c5bc <TIM_Base_SetConfig+0x124>)
 800c4d4:	4293      	cmp	r3, r2
 800c4d6:	d108      	bne.n	800c4ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c4de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c4e0:	683b      	ldr	r3, [r7, #0]
 800c4e2:	685b      	ldr	r3, [r3, #4]
 800c4e4:	68fa      	ldr	r2, [r7, #12]
 800c4e6:	4313      	orrs	r3, r2
 800c4e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	4a2f      	ldr	r2, [pc, #188]	; (800c5ac <TIM_Base_SetConfig+0x114>)
 800c4ee:	4293      	cmp	r3, r2
 800c4f0:	d01f      	beq.n	800c532 <TIM_Base_SetConfig+0x9a>
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c4f8:	d01b      	beq.n	800c532 <TIM_Base_SetConfig+0x9a>
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	4a2c      	ldr	r2, [pc, #176]	; (800c5b0 <TIM_Base_SetConfig+0x118>)
 800c4fe:	4293      	cmp	r3, r2
 800c500:	d017      	beq.n	800c532 <TIM_Base_SetConfig+0x9a>
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	4a2b      	ldr	r2, [pc, #172]	; (800c5b4 <TIM_Base_SetConfig+0x11c>)
 800c506:	4293      	cmp	r3, r2
 800c508:	d013      	beq.n	800c532 <TIM_Base_SetConfig+0x9a>
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	4a2a      	ldr	r2, [pc, #168]	; (800c5b8 <TIM_Base_SetConfig+0x120>)
 800c50e:	4293      	cmp	r3, r2
 800c510:	d00f      	beq.n	800c532 <TIM_Base_SetConfig+0x9a>
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	4a29      	ldr	r2, [pc, #164]	; (800c5bc <TIM_Base_SetConfig+0x124>)
 800c516:	4293      	cmp	r3, r2
 800c518:	d00b      	beq.n	800c532 <TIM_Base_SetConfig+0x9a>
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	4a28      	ldr	r2, [pc, #160]	; (800c5c0 <TIM_Base_SetConfig+0x128>)
 800c51e:	4293      	cmp	r3, r2
 800c520:	d007      	beq.n	800c532 <TIM_Base_SetConfig+0x9a>
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	4a27      	ldr	r2, [pc, #156]	; (800c5c4 <TIM_Base_SetConfig+0x12c>)
 800c526:	4293      	cmp	r3, r2
 800c528:	d003      	beq.n	800c532 <TIM_Base_SetConfig+0x9a>
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	4a26      	ldr	r2, [pc, #152]	; (800c5c8 <TIM_Base_SetConfig+0x130>)
 800c52e:	4293      	cmp	r3, r2
 800c530:	d108      	bne.n	800c544 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c538:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	68db      	ldr	r3, [r3, #12]
 800c53e:	68fa      	ldr	r2, [r7, #12]
 800c540:	4313      	orrs	r3, r2
 800c542:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	695b      	ldr	r3, [r3, #20]
 800c54e:	4313      	orrs	r3, r2
 800c550:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	68fa      	ldr	r2, [r7, #12]
 800c556:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	689a      	ldr	r2, [r3, #8]
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	681a      	ldr	r2, [r3, #0]
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	4a10      	ldr	r2, [pc, #64]	; (800c5ac <TIM_Base_SetConfig+0x114>)
 800c56c:	4293      	cmp	r3, r2
 800c56e:	d00f      	beq.n	800c590 <TIM_Base_SetConfig+0xf8>
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	4a12      	ldr	r2, [pc, #72]	; (800c5bc <TIM_Base_SetConfig+0x124>)
 800c574:	4293      	cmp	r3, r2
 800c576:	d00b      	beq.n	800c590 <TIM_Base_SetConfig+0xf8>
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	4a11      	ldr	r2, [pc, #68]	; (800c5c0 <TIM_Base_SetConfig+0x128>)
 800c57c:	4293      	cmp	r3, r2
 800c57e:	d007      	beq.n	800c590 <TIM_Base_SetConfig+0xf8>
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	4a10      	ldr	r2, [pc, #64]	; (800c5c4 <TIM_Base_SetConfig+0x12c>)
 800c584:	4293      	cmp	r3, r2
 800c586:	d003      	beq.n	800c590 <TIM_Base_SetConfig+0xf8>
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	4a0f      	ldr	r2, [pc, #60]	; (800c5c8 <TIM_Base_SetConfig+0x130>)
 800c58c:	4293      	cmp	r3, r2
 800c58e:	d103      	bne.n	800c598 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	691a      	ldr	r2, [r3, #16]
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	2201      	movs	r2, #1
 800c59c:	615a      	str	r2, [r3, #20]
}
 800c59e:	bf00      	nop
 800c5a0:	3714      	adds	r7, #20
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a8:	4770      	bx	lr
 800c5aa:	bf00      	nop
 800c5ac:	40012c00 	.word	0x40012c00
 800c5b0:	40000400 	.word	0x40000400
 800c5b4:	40000800 	.word	0x40000800
 800c5b8:	40000c00 	.word	0x40000c00
 800c5bc:	40013400 	.word	0x40013400
 800c5c0:	40014000 	.word	0x40014000
 800c5c4:	40014400 	.word	0x40014400
 800c5c8:	40014800 	.word	0x40014800

0800c5cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c5cc:	b480      	push	{r7}
 800c5ce:	b087      	sub	sp, #28
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
 800c5d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	6a1b      	ldr	r3, [r3, #32]
 800c5da:	f023 0201 	bic.w	r2, r3, #1
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	6a1b      	ldr	r3, [r3, #32]
 800c5e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	685b      	ldr	r3, [r3, #4]
 800c5ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	699b      	ldr	r3, [r3, #24]
 800c5f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c5fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c5fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	f023 0303 	bic.w	r3, r3, #3
 800c606:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	68fa      	ldr	r2, [r7, #12]
 800c60e:	4313      	orrs	r3, r2
 800c610:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c612:	697b      	ldr	r3, [r7, #20]
 800c614:	f023 0302 	bic.w	r3, r3, #2
 800c618:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	689b      	ldr	r3, [r3, #8]
 800c61e:	697a      	ldr	r2, [r7, #20]
 800c620:	4313      	orrs	r3, r2
 800c622:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	4a2c      	ldr	r2, [pc, #176]	; (800c6d8 <TIM_OC1_SetConfig+0x10c>)
 800c628:	4293      	cmp	r3, r2
 800c62a:	d00f      	beq.n	800c64c <TIM_OC1_SetConfig+0x80>
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	4a2b      	ldr	r2, [pc, #172]	; (800c6dc <TIM_OC1_SetConfig+0x110>)
 800c630:	4293      	cmp	r3, r2
 800c632:	d00b      	beq.n	800c64c <TIM_OC1_SetConfig+0x80>
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	4a2a      	ldr	r2, [pc, #168]	; (800c6e0 <TIM_OC1_SetConfig+0x114>)
 800c638:	4293      	cmp	r3, r2
 800c63a:	d007      	beq.n	800c64c <TIM_OC1_SetConfig+0x80>
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	4a29      	ldr	r2, [pc, #164]	; (800c6e4 <TIM_OC1_SetConfig+0x118>)
 800c640:	4293      	cmp	r3, r2
 800c642:	d003      	beq.n	800c64c <TIM_OC1_SetConfig+0x80>
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	4a28      	ldr	r2, [pc, #160]	; (800c6e8 <TIM_OC1_SetConfig+0x11c>)
 800c648:	4293      	cmp	r3, r2
 800c64a:	d10c      	bne.n	800c666 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c64c:	697b      	ldr	r3, [r7, #20]
 800c64e:	f023 0308 	bic.w	r3, r3, #8
 800c652:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	68db      	ldr	r3, [r3, #12]
 800c658:	697a      	ldr	r2, [r7, #20]
 800c65a:	4313      	orrs	r3, r2
 800c65c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c65e:	697b      	ldr	r3, [r7, #20]
 800c660:	f023 0304 	bic.w	r3, r3, #4
 800c664:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	4a1b      	ldr	r2, [pc, #108]	; (800c6d8 <TIM_OC1_SetConfig+0x10c>)
 800c66a:	4293      	cmp	r3, r2
 800c66c:	d00f      	beq.n	800c68e <TIM_OC1_SetConfig+0xc2>
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	4a1a      	ldr	r2, [pc, #104]	; (800c6dc <TIM_OC1_SetConfig+0x110>)
 800c672:	4293      	cmp	r3, r2
 800c674:	d00b      	beq.n	800c68e <TIM_OC1_SetConfig+0xc2>
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	4a19      	ldr	r2, [pc, #100]	; (800c6e0 <TIM_OC1_SetConfig+0x114>)
 800c67a:	4293      	cmp	r3, r2
 800c67c:	d007      	beq.n	800c68e <TIM_OC1_SetConfig+0xc2>
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	4a18      	ldr	r2, [pc, #96]	; (800c6e4 <TIM_OC1_SetConfig+0x118>)
 800c682:	4293      	cmp	r3, r2
 800c684:	d003      	beq.n	800c68e <TIM_OC1_SetConfig+0xc2>
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	4a17      	ldr	r2, [pc, #92]	; (800c6e8 <TIM_OC1_SetConfig+0x11c>)
 800c68a:	4293      	cmp	r3, r2
 800c68c:	d111      	bne.n	800c6b2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c68e:	693b      	ldr	r3, [r7, #16]
 800c690:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c694:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c696:	693b      	ldr	r3, [r7, #16]
 800c698:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c69c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	695b      	ldr	r3, [r3, #20]
 800c6a2:	693a      	ldr	r2, [r7, #16]
 800c6a4:	4313      	orrs	r3, r2
 800c6a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	699b      	ldr	r3, [r3, #24]
 800c6ac:	693a      	ldr	r2, [r7, #16]
 800c6ae:	4313      	orrs	r3, r2
 800c6b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	693a      	ldr	r2, [r7, #16]
 800c6b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	68fa      	ldr	r2, [r7, #12]
 800c6bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	685a      	ldr	r2, [r3, #4]
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	697a      	ldr	r2, [r7, #20]
 800c6ca:	621a      	str	r2, [r3, #32]
}
 800c6cc:	bf00      	nop
 800c6ce:	371c      	adds	r7, #28
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d6:	4770      	bx	lr
 800c6d8:	40012c00 	.word	0x40012c00
 800c6dc:	40013400 	.word	0x40013400
 800c6e0:	40014000 	.word	0x40014000
 800c6e4:	40014400 	.word	0x40014400
 800c6e8:	40014800 	.word	0x40014800

0800c6ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c6ec:	b480      	push	{r7}
 800c6ee:	b087      	sub	sp, #28
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
 800c6f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	6a1b      	ldr	r3, [r3, #32]
 800c6fa:	f023 0210 	bic.w	r2, r3, #16
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	6a1b      	ldr	r3, [r3, #32]
 800c706:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	685b      	ldr	r3, [r3, #4]
 800c70c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	699b      	ldr	r3, [r3, #24]
 800c712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c71a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c71e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c726:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	021b      	lsls	r3, r3, #8
 800c72e:	68fa      	ldr	r2, [r7, #12]
 800c730:	4313      	orrs	r3, r2
 800c732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c734:	697b      	ldr	r3, [r7, #20]
 800c736:	f023 0320 	bic.w	r3, r3, #32
 800c73a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	689b      	ldr	r3, [r3, #8]
 800c740:	011b      	lsls	r3, r3, #4
 800c742:	697a      	ldr	r2, [r7, #20]
 800c744:	4313      	orrs	r3, r2
 800c746:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	4a28      	ldr	r2, [pc, #160]	; (800c7ec <TIM_OC2_SetConfig+0x100>)
 800c74c:	4293      	cmp	r3, r2
 800c74e:	d003      	beq.n	800c758 <TIM_OC2_SetConfig+0x6c>
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	4a27      	ldr	r2, [pc, #156]	; (800c7f0 <TIM_OC2_SetConfig+0x104>)
 800c754:	4293      	cmp	r3, r2
 800c756:	d10d      	bne.n	800c774 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c758:	697b      	ldr	r3, [r7, #20]
 800c75a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c75e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c760:	683b      	ldr	r3, [r7, #0]
 800c762:	68db      	ldr	r3, [r3, #12]
 800c764:	011b      	lsls	r3, r3, #4
 800c766:	697a      	ldr	r2, [r7, #20]
 800c768:	4313      	orrs	r3, r2
 800c76a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c76c:	697b      	ldr	r3, [r7, #20]
 800c76e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c772:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	4a1d      	ldr	r2, [pc, #116]	; (800c7ec <TIM_OC2_SetConfig+0x100>)
 800c778:	4293      	cmp	r3, r2
 800c77a:	d00f      	beq.n	800c79c <TIM_OC2_SetConfig+0xb0>
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	4a1c      	ldr	r2, [pc, #112]	; (800c7f0 <TIM_OC2_SetConfig+0x104>)
 800c780:	4293      	cmp	r3, r2
 800c782:	d00b      	beq.n	800c79c <TIM_OC2_SetConfig+0xb0>
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	4a1b      	ldr	r2, [pc, #108]	; (800c7f4 <TIM_OC2_SetConfig+0x108>)
 800c788:	4293      	cmp	r3, r2
 800c78a:	d007      	beq.n	800c79c <TIM_OC2_SetConfig+0xb0>
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	4a1a      	ldr	r2, [pc, #104]	; (800c7f8 <TIM_OC2_SetConfig+0x10c>)
 800c790:	4293      	cmp	r3, r2
 800c792:	d003      	beq.n	800c79c <TIM_OC2_SetConfig+0xb0>
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	4a19      	ldr	r2, [pc, #100]	; (800c7fc <TIM_OC2_SetConfig+0x110>)
 800c798:	4293      	cmp	r3, r2
 800c79a:	d113      	bne.n	800c7c4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c79c:	693b      	ldr	r3, [r7, #16]
 800c79e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c7a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c7a4:	693b      	ldr	r3, [r7, #16]
 800c7a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c7aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c7ac:	683b      	ldr	r3, [r7, #0]
 800c7ae:	695b      	ldr	r3, [r3, #20]
 800c7b0:	009b      	lsls	r3, r3, #2
 800c7b2:	693a      	ldr	r2, [r7, #16]
 800c7b4:	4313      	orrs	r3, r2
 800c7b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c7b8:	683b      	ldr	r3, [r7, #0]
 800c7ba:	699b      	ldr	r3, [r3, #24]
 800c7bc:	009b      	lsls	r3, r3, #2
 800c7be:	693a      	ldr	r2, [r7, #16]
 800c7c0:	4313      	orrs	r3, r2
 800c7c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	693a      	ldr	r2, [r7, #16]
 800c7c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	68fa      	ldr	r2, [r7, #12]
 800c7ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	685a      	ldr	r2, [r3, #4]
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	697a      	ldr	r2, [r7, #20]
 800c7dc:	621a      	str	r2, [r3, #32]
}
 800c7de:	bf00      	nop
 800c7e0:	371c      	adds	r7, #28
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e8:	4770      	bx	lr
 800c7ea:	bf00      	nop
 800c7ec:	40012c00 	.word	0x40012c00
 800c7f0:	40013400 	.word	0x40013400
 800c7f4:	40014000 	.word	0x40014000
 800c7f8:	40014400 	.word	0x40014400
 800c7fc:	40014800 	.word	0x40014800

0800c800 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c800:	b480      	push	{r7}
 800c802:	b087      	sub	sp, #28
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
 800c808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	6a1b      	ldr	r3, [r3, #32]
 800c80e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	6a1b      	ldr	r3, [r3, #32]
 800c81a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	685b      	ldr	r3, [r3, #4]
 800c820:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	69db      	ldr	r3, [r3, #28]
 800c826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c82e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	f023 0303 	bic.w	r3, r3, #3
 800c83a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	68fa      	ldr	r2, [r7, #12]
 800c842:	4313      	orrs	r3, r2
 800c844:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c846:	697b      	ldr	r3, [r7, #20]
 800c848:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c84c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c84e:	683b      	ldr	r3, [r7, #0]
 800c850:	689b      	ldr	r3, [r3, #8]
 800c852:	021b      	lsls	r3, r3, #8
 800c854:	697a      	ldr	r2, [r7, #20]
 800c856:	4313      	orrs	r3, r2
 800c858:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	4a27      	ldr	r2, [pc, #156]	; (800c8fc <TIM_OC3_SetConfig+0xfc>)
 800c85e:	4293      	cmp	r3, r2
 800c860:	d003      	beq.n	800c86a <TIM_OC3_SetConfig+0x6a>
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	4a26      	ldr	r2, [pc, #152]	; (800c900 <TIM_OC3_SetConfig+0x100>)
 800c866:	4293      	cmp	r3, r2
 800c868:	d10d      	bne.n	800c886 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c86a:	697b      	ldr	r3, [r7, #20]
 800c86c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c870:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c872:	683b      	ldr	r3, [r7, #0]
 800c874:	68db      	ldr	r3, [r3, #12]
 800c876:	021b      	lsls	r3, r3, #8
 800c878:	697a      	ldr	r2, [r7, #20]
 800c87a:	4313      	orrs	r3, r2
 800c87c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c87e:	697b      	ldr	r3, [r7, #20]
 800c880:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c884:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	4a1c      	ldr	r2, [pc, #112]	; (800c8fc <TIM_OC3_SetConfig+0xfc>)
 800c88a:	4293      	cmp	r3, r2
 800c88c:	d00f      	beq.n	800c8ae <TIM_OC3_SetConfig+0xae>
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	4a1b      	ldr	r2, [pc, #108]	; (800c900 <TIM_OC3_SetConfig+0x100>)
 800c892:	4293      	cmp	r3, r2
 800c894:	d00b      	beq.n	800c8ae <TIM_OC3_SetConfig+0xae>
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	4a1a      	ldr	r2, [pc, #104]	; (800c904 <TIM_OC3_SetConfig+0x104>)
 800c89a:	4293      	cmp	r3, r2
 800c89c:	d007      	beq.n	800c8ae <TIM_OC3_SetConfig+0xae>
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	4a19      	ldr	r2, [pc, #100]	; (800c908 <TIM_OC3_SetConfig+0x108>)
 800c8a2:	4293      	cmp	r3, r2
 800c8a4:	d003      	beq.n	800c8ae <TIM_OC3_SetConfig+0xae>
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	4a18      	ldr	r2, [pc, #96]	; (800c90c <TIM_OC3_SetConfig+0x10c>)
 800c8aa:	4293      	cmp	r3, r2
 800c8ac:	d113      	bne.n	800c8d6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c8ae:	693b      	ldr	r3, [r7, #16]
 800c8b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c8b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c8b6:	693b      	ldr	r3, [r7, #16]
 800c8b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c8bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	695b      	ldr	r3, [r3, #20]
 800c8c2:	011b      	lsls	r3, r3, #4
 800c8c4:	693a      	ldr	r2, [r7, #16]
 800c8c6:	4313      	orrs	r3, r2
 800c8c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c8ca:	683b      	ldr	r3, [r7, #0]
 800c8cc:	699b      	ldr	r3, [r3, #24]
 800c8ce:	011b      	lsls	r3, r3, #4
 800c8d0:	693a      	ldr	r2, [r7, #16]
 800c8d2:	4313      	orrs	r3, r2
 800c8d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	693a      	ldr	r2, [r7, #16]
 800c8da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	68fa      	ldr	r2, [r7, #12]
 800c8e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	685a      	ldr	r2, [r3, #4]
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	697a      	ldr	r2, [r7, #20]
 800c8ee:	621a      	str	r2, [r3, #32]
}
 800c8f0:	bf00      	nop
 800c8f2:	371c      	adds	r7, #28
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fa:	4770      	bx	lr
 800c8fc:	40012c00 	.word	0x40012c00
 800c900:	40013400 	.word	0x40013400
 800c904:	40014000 	.word	0x40014000
 800c908:	40014400 	.word	0x40014400
 800c90c:	40014800 	.word	0x40014800

0800c910 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c910:	b480      	push	{r7}
 800c912:	b087      	sub	sp, #28
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
 800c918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	6a1b      	ldr	r3, [r3, #32]
 800c91e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	6a1b      	ldr	r3, [r3, #32]
 800c92a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	685b      	ldr	r3, [r3, #4]
 800c930:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	69db      	ldr	r3, [r3, #28]
 800c936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c93e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c94a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	021b      	lsls	r3, r3, #8
 800c952:	68fa      	ldr	r2, [r7, #12]
 800c954:	4313      	orrs	r3, r2
 800c956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c958:	693b      	ldr	r3, [r7, #16]
 800c95a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c95e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c960:	683b      	ldr	r3, [r7, #0]
 800c962:	689b      	ldr	r3, [r3, #8]
 800c964:	031b      	lsls	r3, r3, #12
 800c966:	693a      	ldr	r2, [r7, #16]
 800c968:	4313      	orrs	r3, r2
 800c96a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	4a18      	ldr	r2, [pc, #96]	; (800c9d0 <TIM_OC4_SetConfig+0xc0>)
 800c970:	4293      	cmp	r3, r2
 800c972:	d00f      	beq.n	800c994 <TIM_OC4_SetConfig+0x84>
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	4a17      	ldr	r2, [pc, #92]	; (800c9d4 <TIM_OC4_SetConfig+0xc4>)
 800c978:	4293      	cmp	r3, r2
 800c97a:	d00b      	beq.n	800c994 <TIM_OC4_SetConfig+0x84>
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	4a16      	ldr	r2, [pc, #88]	; (800c9d8 <TIM_OC4_SetConfig+0xc8>)
 800c980:	4293      	cmp	r3, r2
 800c982:	d007      	beq.n	800c994 <TIM_OC4_SetConfig+0x84>
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	4a15      	ldr	r2, [pc, #84]	; (800c9dc <TIM_OC4_SetConfig+0xcc>)
 800c988:	4293      	cmp	r3, r2
 800c98a:	d003      	beq.n	800c994 <TIM_OC4_SetConfig+0x84>
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	4a14      	ldr	r2, [pc, #80]	; (800c9e0 <TIM_OC4_SetConfig+0xd0>)
 800c990:	4293      	cmp	r3, r2
 800c992:	d109      	bne.n	800c9a8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c994:	697b      	ldr	r3, [r7, #20]
 800c996:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c99a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c99c:	683b      	ldr	r3, [r7, #0]
 800c99e:	695b      	ldr	r3, [r3, #20]
 800c9a0:	019b      	lsls	r3, r3, #6
 800c9a2:	697a      	ldr	r2, [r7, #20]
 800c9a4:	4313      	orrs	r3, r2
 800c9a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	697a      	ldr	r2, [r7, #20]
 800c9ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	68fa      	ldr	r2, [r7, #12]
 800c9b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c9b4:	683b      	ldr	r3, [r7, #0]
 800c9b6:	685a      	ldr	r2, [r3, #4]
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	693a      	ldr	r2, [r7, #16]
 800c9c0:	621a      	str	r2, [r3, #32]
}
 800c9c2:	bf00      	nop
 800c9c4:	371c      	adds	r7, #28
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9cc:	4770      	bx	lr
 800c9ce:	bf00      	nop
 800c9d0:	40012c00 	.word	0x40012c00
 800c9d4:	40013400 	.word	0x40013400
 800c9d8:	40014000 	.word	0x40014000
 800c9dc:	40014400 	.word	0x40014400
 800c9e0:	40014800 	.word	0x40014800

0800c9e4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c9e4:	b480      	push	{r7}
 800c9e6:	b087      	sub	sp, #28
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
 800c9ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	6a1b      	ldr	r3, [r3, #32]
 800c9f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	6a1b      	ldr	r3, [r3, #32]
 800c9fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	685b      	ldr	r3, [r3, #4]
 800ca04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ca12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	68fa      	ldr	r2, [r7, #12]
 800ca1e:	4313      	orrs	r3, r2
 800ca20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ca22:	693b      	ldr	r3, [r7, #16]
 800ca24:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ca28:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	689b      	ldr	r3, [r3, #8]
 800ca2e:	041b      	lsls	r3, r3, #16
 800ca30:	693a      	ldr	r2, [r7, #16]
 800ca32:	4313      	orrs	r3, r2
 800ca34:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	4a17      	ldr	r2, [pc, #92]	; (800ca98 <TIM_OC5_SetConfig+0xb4>)
 800ca3a:	4293      	cmp	r3, r2
 800ca3c:	d00f      	beq.n	800ca5e <TIM_OC5_SetConfig+0x7a>
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	4a16      	ldr	r2, [pc, #88]	; (800ca9c <TIM_OC5_SetConfig+0xb8>)
 800ca42:	4293      	cmp	r3, r2
 800ca44:	d00b      	beq.n	800ca5e <TIM_OC5_SetConfig+0x7a>
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	4a15      	ldr	r2, [pc, #84]	; (800caa0 <TIM_OC5_SetConfig+0xbc>)
 800ca4a:	4293      	cmp	r3, r2
 800ca4c:	d007      	beq.n	800ca5e <TIM_OC5_SetConfig+0x7a>
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	4a14      	ldr	r2, [pc, #80]	; (800caa4 <TIM_OC5_SetConfig+0xc0>)
 800ca52:	4293      	cmp	r3, r2
 800ca54:	d003      	beq.n	800ca5e <TIM_OC5_SetConfig+0x7a>
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	4a13      	ldr	r2, [pc, #76]	; (800caa8 <TIM_OC5_SetConfig+0xc4>)
 800ca5a:	4293      	cmp	r3, r2
 800ca5c:	d109      	bne.n	800ca72 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ca5e:	697b      	ldr	r3, [r7, #20]
 800ca60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ca64:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	695b      	ldr	r3, [r3, #20]
 800ca6a:	021b      	lsls	r3, r3, #8
 800ca6c:	697a      	ldr	r2, [r7, #20]
 800ca6e:	4313      	orrs	r3, r2
 800ca70:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	697a      	ldr	r2, [r7, #20]
 800ca76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	68fa      	ldr	r2, [r7, #12]
 800ca7c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ca7e:	683b      	ldr	r3, [r7, #0]
 800ca80:	685a      	ldr	r2, [r3, #4]
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	693a      	ldr	r2, [r7, #16]
 800ca8a:	621a      	str	r2, [r3, #32]
}
 800ca8c:	bf00      	nop
 800ca8e:	371c      	adds	r7, #28
 800ca90:	46bd      	mov	sp, r7
 800ca92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca96:	4770      	bx	lr
 800ca98:	40012c00 	.word	0x40012c00
 800ca9c:	40013400 	.word	0x40013400
 800caa0:	40014000 	.word	0x40014000
 800caa4:	40014400 	.word	0x40014400
 800caa8:	40014800 	.word	0x40014800

0800caac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800caac:	b480      	push	{r7}
 800caae:	b087      	sub	sp, #28
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
 800cab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	6a1b      	ldr	r3, [r3, #32]
 800caba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	6a1b      	ldr	r3, [r3, #32]
 800cac6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	685b      	ldr	r3, [r3, #4]
 800cacc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cada:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cade:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cae0:	683b      	ldr	r3, [r7, #0]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	021b      	lsls	r3, r3, #8
 800cae6:	68fa      	ldr	r2, [r7, #12]
 800cae8:	4313      	orrs	r3, r2
 800caea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800caec:	693b      	ldr	r3, [r7, #16]
 800caee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800caf2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800caf4:	683b      	ldr	r3, [r7, #0]
 800caf6:	689b      	ldr	r3, [r3, #8]
 800caf8:	051b      	lsls	r3, r3, #20
 800cafa:	693a      	ldr	r2, [r7, #16]
 800cafc:	4313      	orrs	r3, r2
 800cafe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	4a18      	ldr	r2, [pc, #96]	; (800cb64 <TIM_OC6_SetConfig+0xb8>)
 800cb04:	4293      	cmp	r3, r2
 800cb06:	d00f      	beq.n	800cb28 <TIM_OC6_SetConfig+0x7c>
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	4a17      	ldr	r2, [pc, #92]	; (800cb68 <TIM_OC6_SetConfig+0xbc>)
 800cb0c:	4293      	cmp	r3, r2
 800cb0e:	d00b      	beq.n	800cb28 <TIM_OC6_SetConfig+0x7c>
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	4a16      	ldr	r2, [pc, #88]	; (800cb6c <TIM_OC6_SetConfig+0xc0>)
 800cb14:	4293      	cmp	r3, r2
 800cb16:	d007      	beq.n	800cb28 <TIM_OC6_SetConfig+0x7c>
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	4a15      	ldr	r2, [pc, #84]	; (800cb70 <TIM_OC6_SetConfig+0xc4>)
 800cb1c:	4293      	cmp	r3, r2
 800cb1e:	d003      	beq.n	800cb28 <TIM_OC6_SetConfig+0x7c>
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	4a14      	ldr	r2, [pc, #80]	; (800cb74 <TIM_OC6_SetConfig+0xc8>)
 800cb24:	4293      	cmp	r3, r2
 800cb26:	d109      	bne.n	800cb3c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800cb28:	697b      	ldr	r3, [r7, #20]
 800cb2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cb2e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800cb30:	683b      	ldr	r3, [r7, #0]
 800cb32:	695b      	ldr	r3, [r3, #20]
 800cb34:	029b      	lsls	r3, r3, #10
 800cb36:	697a      	ldr	r2, [r7, #20]
 800cb38:	4313      	orrs	r3, r2
 800cb3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	697a      	ldr	r2, [r7, #20]
 800cb40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	68fa      	ldr	r2, [r7, #12]
 800cb46:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	685a      	ldr	r2, [r3, #4]
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	693a      	ldr	r2, [r7, #16]
 800cb54:	621a      	str	r2, [r3, #32]
}
 800cb56:	bf00      	nop
 800cb58:	371c      	adds	r7, #28
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb60:	4770      	bx	lr
 800cb62:	bf00      	nop
 800cb64:	40012c00 	.word	0x40012c00
 800cb68:	40013400 	.word	0x40013400
 800cb6c:	40014000 	.word	0x40014000
 800cb70:	40014400 	.word	0x40014400
 800cb74:	40014800 	.word	0x40014800

0800cb78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cb78:	b480      	push	{r7}
 800cb7a:	b087      	sub	sp, #28
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	60f8      	str	r0, [r7, #12]
 800cb80:	60b9      	str	r1, [r7, #8]
 800cb82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	6a1b      	ldr	r3, [r3, #32]
 800cb88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	6a1b      	ldr	r3, [r3, #32]
 800cb8e:	f023 0201 	bic.w	r2, r3, #1
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	699b      	ldr	r3, [r3, #24]
 800cb9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cb9c:	693b      	ldr	r3, [r7, #16]
 800cb9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cba2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	011b      	lsls	r3, r3, #4
 800cba8:	693a      	ldr	r2, [r7, #16]
 800cbaa:	4313      	orrs	r3, r2
 800cbac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cbae:	697b      	ldr	r3, [r7, #20]
 800cbb0:	f023 030a 	bic.w	r3, r3, #10
 800cbb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cbb6:	697a      	ldr	r2, [r7, #20]
 800cbb8:	68bb      	ldr	r3, [r7, #8]
 800cbba:	4313      	orrs	r3, r2
 800cbbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	693a      	ldr	r2, [r7, #16]
 800cbc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	697a      	ldr	r2, [r7, #20]
 800cbc8:	621a      	str	r2, [r3, #32]
}
 800cbca:	bf00      	nop
 800cbcc:	371c      	adds	r7, #28
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd4:	4770      	bx	lr

0800cbd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cbd6:	b480      	push	{r7}
 800cbd8:	b087      	sub	sp, #28
 800cbda:	af00      	add	r7, sp, #0
 800cbdc:	60f8      	str	r0, [r7, #12]
 800cbde:	60b9      	str	r1, [r7, #8]
 800cbe0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	6a1b      	ldr	r3, [r3, #32]
 800cbe6:	f023 0210 	bic.w	r2, r3, #16
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	699b      	ldr	r3, [r3, #24]
 800cbf2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	6a1b      	ldr	r3, [r3, #32]
 800cbf8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cbfa:	697b      	ldr	r3, [r7, #20]
 800cbfc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cc00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	031b      	lsls	r3, r3, #12
 800cc06:	697a      	ldr	r2, [r7, #20]
 800cc08:	4313      	orrs	r3, r2
 800cc0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cc0c:	693b      	ldr	r3, [r7, #16]
 800cc0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cc12:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cc14:	68bb      	ldr	r3, [r7, #8]
 800cc16:	011b      	lsls	r3, r3, #4
 800cc18:	693a      	ldr	r2, [r7, #16]
 800cc1a:	4313      	orrs	r3, r2
 800cc1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	697a      	ldr	r2, [r7, #20]
 800cc22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	693a      	ldr	r2, [r7, #16]
 800cc28:	621a      	str	r2, [r3, #32]
}
 800cc2a:	bf00      	nop
 800cc2c:	371c      	adds	r7, #28
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc34:	4770      	bx	lr

0800cc36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cc36:	b480      	push	{r7}
 800cc38:	b085      	sub	sp, #20
 800cc3a:	af00      	add	r7, sp, #0
 800cc3c:	6078      	str	r0, [r7, #4]
 800cc3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	689b      	ldr	r3, [r3, #8]
 800cc44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cc4e:	683a      	ldr	r2, [r7, #0]
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	4313      	orrs	r3, r2
 800cc54:	f043 0307 	orr.w	r3, r3, #7
 800cc58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	68fa      	ldr	r2, [r7, #12]
 800cc5e:	609a      	str	r2, [r3, #8]
}
 800cc60:	bf00      	nop
 800cc62:	3714      	adds	r7, #20
 800cc64:	46bd      	mov	sp, r7
 800cc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6a:	4770      	bx	lr

0800cc6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cc6c:	b480      	push	{r7}
 800cc6e:	b087      	sub	sp, #28
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	60f8      	str	r0, [r7, #12]
 800cc74:	60b9      	str	r1, [r7, #8]
 800cc76:	607a      	str	r2, [r7, #4]
 800cc78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	689b      	ldr	r3, [r3, #8]
 800cc7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cc80:	697b      	ldr	r3, [r7, #20]
 800cc82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cc86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cc88:	683b      	ldr	r3, [r7, #0]
 800cc8a:	021a      	lsls	r2, r3, #8
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	431a      	orrs	r2, r3
 800cc90:	68bb      	ldr	r3, [r7, #8]
 800cc92:	4313      	orrs	r3, r2
 800cc94:	697a      	ldr	r2, [r7, #20]
 800cc96:	4313      	orrs	r3, r2
 800cc98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	697a      	ldr	r2, [r7, #20]
 800cc9e:	609a      	str	r2, [r3, #8]
}
 800cca0:	bf00      	nop
 800cca2:	371c      	adds	r7, #28
 800cca4:	46bd      	mov	sp, r7
 800cca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccaa:	4770      	bx	lr

0800ccac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ccac:	b480      	push	{r7}
 800ccae:	b087      	sub	sp, #28
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	60f8      	str	r0, [r7, #12]
 800ccb4:	60b9      	str	r1, [r7, #8]
 800ccb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ccb8:	68bb      	ldr	r3, [r7, #8]
 800ccba:	f003 031f 	and.w	r3, r3, #31
 800ccbe:	2201      	movs	r2, #1
 800ccc0:	fa02 f303 	lsl.w	r3, r2, r3
 800ccc4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	6a1a      	ldr	r2, [r3, #32]
 800ccca:	697b      	ldr	r3, [r7, #20]
 800cccc:	43db      	mvns	r3, r3
 800ccce:	401a      	ands	r2, r3
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	6a1a      	ldr	r2, [r3, #32]
 800ccd8:	68bb      	ldr	r3, [r7, #8]
 800ccda:	f003 031f 	and.w	r3, r3, #31
 800ccde:	6879      	ldr	r1, [r7, #4]
 800cce0:	fa01 f303 	lsl.w	r3, r1, r3
 800cce4:	431a      	orrs	r2, r3
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	621a      	str	r2, [r3, #32]
}
 800ccea:	bf00      	nop
 800ccec:	371c      	adds	r7, #28
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf4:	4770      	bx	lr
	...

0800ccf8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ccf8:	b480      	push	{r7}
 800ccfa:	b085      	sub	sp, #20
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
 800cd00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cd08:	2b01      	cmp	r3, #1
 800cd0a:	d101      	bne.n	800cd10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cd0c:	2302      	movs	r3, #2
 800cd0e:	e068      	b.n	800cde2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	2201      	movs	r2, #1
 800cd14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	2202      	movs	r2, #2
 800cd1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	685b      	ldr	r3, [r3, #4]
 800cd26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	689b      	ldr	r3, [r3, #8]
 800cd2e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	4a2e      	ldr	r2, [pc, #184]	; (800cdf0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800cd36:	4293      	cmp	r3, r2
 800cd38:	d004      	beq.n	800cd44 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	4a2d      	ldr	r2, [pc, #180]	; (800cdf4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800cd40:	4293      	cmp	r3, r2
 800cd42:	d108      	bne.n	800cd56 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cd4a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	685b      	ldr	r3, [r3, #4]
 800cd50:	68fa      	ldr	r2, [r7, #12]
 800cd52:	4313      	orrs	r3, r2
 800cd54:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd5c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cd5e:	683b      	ldr	r3, [r7, #0]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	68fa      	ldr	r2, [r7, #12]
 800cd64:	4313      	orrs	r3, r2
 800cd66:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	68fa      	ldr	r2, [r7, #12]
 800cd6e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	4a1e      	ldr	r2, [pc, #120]	; (800cdf0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800cd76:	4293      	cmp	r3, r2
 800cd78:	d01d      	beq.n	800cdb6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd82:	d018      	beq.n	800cdb6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	4a1b      	ldr	r2, [pc, #108]	; (800cdf8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cd8a:	4293      	cmp	r3, r2
 800cd8c:	d013      	beq.n	800cdb6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	4a1a      	ldr	r2, [pc, #104]	; (800cdfc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cd94:	4293      	cmp	r3, r2
 800cd96:	d00e      	beq.n	800cdb6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	4a18      	ldr	r2, [pc, #96]	; (800ce00 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800cd9e:	4293      	cmp	r3, r2
 800cda0:	d009      	beq.n	800cdb6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	4a13      	ldr	r2, [pc, #76]	; (800cdf4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800cda8:	4293      	cmp	r3, r2
 800cdaa:	d004      	beq.n	800cdb6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	4a14      	ldr	r2, [pc, #80]	; (800ce04 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800cdb2:	4293      	cmp	r3, r2
 800cdb4:	d10c      	bne.n	800cdd0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cdb6:	68bb      	ldr	r3, [r7, #8]
 800cdb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cdbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cdbe:	683b      	ldr	r3, [r7, #0]
 800cdc0:	689b      	ldr	r3, [r3, #8]
 800cdc2:	68ba      	ldr	r2, [r7, #8]
 800cdc4:	4313      	orrs	r3, r2
 800cdc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	68ba      	ldr	r2, [r7, #8]
 800cdce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2201      	movs	r2, #1
 800cdd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	2200      	movs	r2, #0
 800cddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cde0:	2300      	movs	r3, #0
}
 800cde2:	4618      	mov	r0, r3
 800cde4:	3714      	adds	r7, #20
 800cde6:	46bd      	mov	sp, r7
 800cde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdec:	4770      	bx	lr
 800cdee:	bf00      	nop
 800cdf0:	40012c00 	.word	0x40012c00
 800cdf4:	40013400 	.word	0x40013400
 800cdf8:	40000400 	.word	0x40000400
 800cdfc:	40000800 	.word	0x40000800
 800ce00:	40000c00 	.word	0x40000c00
 800ce04:	40014000 	.word	0x40014000

0800ce08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ce08:	b480      	push	{r7}
 800ce0a:	b083      	sub	sp, #12
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ce10:	bf00      	nop
 800ce12:	370c      	adds	r7, #12
 800ce14:	46bd      	mov	sp, r7
 800ce16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1a:	4770      	bx	lr

0800ce1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ce1c:	b480      	push	{r7}
 800ce1e:	b083      	sub	sp, #12
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ce24:	bf00      	nop
 800ce26:	370c      	adds	r7, #12
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2e:	4770      	bx	lr

0800ce30 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ce30:	b480      	push	{r7}
 800ce32:	b083      	sub	sp, #12
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ce38:	bf00      	nop
 800ce3a:	370c      	adds	r7, #12
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce42:	4770      	bx	lr

0800ce44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b082      	sub	sp, #8
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d101      	bne.n	800ce56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ce52:	2301      	movs	r3, #1
 800ce54:	e042      	b.n	800cedc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d106      	bne.n	800ce6e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	2200      	movs	r2, #0
 800ce64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ce68:	6878      	ldr	r0, [r7, #4]
 800ce6a:	f7fa fd41 	bl	80078f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	2224      	movs	r2, #36	; 0x24
 800ce72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	681a      	ldr	r2, [r3, #0]
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	f022 0201 	bic.w	r2, r2, #1
 800ce84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ce86:	6878      	ldr	r0, [r7, #4]
 800ce88:	f000 fc02 	bl	800d690 <UART_SetConfig>
 800ce8c:	4603      	mov	r3, r0
 800ce8e:	2b01      	cmp	r3, #1
 800ce90:	d101      	bne.n	800ce96 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ce92:	2301      	movs	r3, #1
 800ce94:	e022      	b.n	800cedc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d002      	beq.n	800cea4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ce9e:	6878      	ldr	r0, [r7, #4]
 800cea0:	f000 fef2 	bl	800dc88 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	685a      	ldr	r2, [r3, #4]
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ceb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	689a      	ldr	r2, [r3, #8]
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cec2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	681a      	ldr	r2, [r3, #0]
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	f042 0201 	orr.w	r2, r2, #1
 800ced2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ced4:	6878      	ldr	r0, [r7, #4]
 800ced6:	f000 ff79 	bl	800ddcc <UART_CheckIdleState>
 800ceda:	4603      	mov	r3, r0
}
 800cedc:	4618      	mov	r0, r3
 800cede:	3708      	adds	r7, #8
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bd80      	pop	{r7, pc}

0800cee4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b08a      	sub	sp, #40	; 0x28
 800cee8:	af02      	add	r7, sp, #8
 800ceea:	60f8      	str	r0, [r7, #12]
 800ceec:	60b9      	str	r1, [r7, #8]
 800ceee:	603b      	str	r3, [r7, #0]
 800cef0:	4613      	mov	r3, r2
 800cef2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cefa:	2b20      	cmp	r3, #32
 800cefc:	f040 8083 	bne.w	800d006 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800cf00:	68bb      	ldr	r3, [r7, #8]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d002      	beq.n	800cf0c <HAL_UART_Transmit+0x28>
 800cf06:	88fb      	ldrh	r3, [r7, #6]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d101      	bne.n	800cf10 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800cf0c:	2301      	movs	r3, #1
 800cf0e:	e07b      	b.n	800d008 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cf16:	2b01      	cmp	r3, #1
 800cf18:	d101      	bne.n	800cf1e <HAL_UART_Transmit+0x3a>
 800cf1a:	2302      	movs	r3, #2
 800cf1c:	e074      	b.n	800d008 <HAL_UART_Transmit+0x124>
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	2201      	movs	r2, #1
 800cf22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	2200      	movs	r2, #0
 800cf2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	2221      	movs	r2, #33	; 0x21
 800cf32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cf36:	f7fa fdbb 	bl	8007ab0 <HAL_GetTick>
 800cf3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	88fa      	ldrh	r2, [r7, #6]
 800cf40:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	88fa      	ldrh	r2, [r7, #6]
 800cf48:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	689b      	ldr	r3, [r3, #8]
 800cf50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cf54:	d108      	bne.n	800cf68 <HAL_UART_Transmit+0x84>
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	691b      	ldr	r3, [r3, #16]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d104      	bne.n	800cf68 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800cf5e:	2300      	movs	r3, #0
 800cf60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cf62:	68bb      	ldr	r3, [r7, #8]
 800cf64:	61bb      	str	r3, [r7, #24]
 800cf66:	e003      	b.n	800cf70 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800cf68:	68bb      	ldr	r3, [r7, #8]
 800cf6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	2200      	movs	r2, #0
 800cf74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800cf78:	e02c      	b.n	800cfd4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cf7a:	683b      	ldr	r3, [r7, #0]
 800cf7c:	9300      	str	r3, [sp, #0]
 800cf7e:	697b      	ldr	r3, [r7, #20]
 800cf80:	2200      	movs	r2, #0
 800cf82:	2180      	movs	r1, #128	; 0x80
 800cf84:	68f8      	ldr	r0, [r7, #12]
 800cf86:	f000 ff6c 	bl	800de62 <UART_WaitOnFlagUntilTimeout>
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d001      	beq.n	800cf94 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800cf90:	2303      	movs	r3, #3
 800cf92:	e039      	b.n	800d008 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800cf94:	69fb      	ldr	r3, [r7, #28]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d10b      	bne.n	800cfb2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cf9a:	69bb      	ldr	r3, [r7, #24]
 800cf9c:	881b      	ldrh	r3, [r3, #0]
 800cf9e:	461a      	mov	r2, r3
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cfa8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800cfaa:	69bb      	ldr	r3, [r7, #24]
 800cfac:	3302      	adds	r3, #2
 800cfae:	61bb      	str	r3, [r7, #24]
 800cfb0:	e007      	b.n	800cfc2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800cfb2:	69fb      	ldr	r3, [r7, #28]
 800cfb4:	781a      	ldrb	r2, [r3, #0]
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800cfbc:	69fb      	ldr	r3, [r7, #28]
 800cfbe:	3301      	adds	r3, #1
 800cfc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800cfc8:	b29b      	uxth	r3, r3
 800cfca:	3b01      	subs	r3, #1
 800cfcc:	b29a      	uxth	r2, r3
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800cfda:	b29b      	uxth	r3, r3
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d1cc      	bne.n	800cf7a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cfe0:	683b      	ldr	r3, [r7, #0]
 800cfe2:	9300      	str	r3, [sp, #0]
 800cfe4:	697b      	ldr	r3, [r7, #20]
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	2140      	movs	r1, #64	; 0x40
 800cfea:	68f8      	ldr	r0, [r7, #12]
 800cfec:	f000 ff39 	bl	800de62 <UART_WaitOnFlagUntilTimeout>
 800cff0:	4603      	mov	r3, r0
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d001      	beq.n	800cffa <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800cff6:	2303      	movs	r3, #3
 800cff8:	e006      	b.n	800d008 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	2220      	movs	r2, #32
 800cffe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800d002:	2300      	movs	r3, #0
 800d004:	e000      	b.n	800d008 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800d006:	2302      	movs	r3, #2
  }
}
 800d008:	4618      	mov	r0, r3
 800d00a:	3720      	adds	r7, #32
 800d00c:	46bd      	mov	sp, r7
 800d00e:	bd80      	pop	{r7, pc}

0800d010 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b0ba      	sub	sp, #232	; 0xe8
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	69db      	ldr	r3, [r3, #28]
 800d01e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	689b      	ldr	r3, [r3, #8]
 800d032:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d036:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d03a:	f640 030f 	movw	r3, #2063	; 0x80f
 800d03e:	4013      	ands	r3, r2
 800d040:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d044:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d11b      	bne.n	800d084 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d04c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d050:	f003 0320 	and.w	r3, r3, #32
 800d054:	2b00      	cmp	r3, #0
 800d056:	d015      	beq.n	800d084 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d05c:	f003 0320 	and.w	r3, r3, #32
 800d060:	2b00      	cmp	r3, #0
 800d062:	d105      	bne.n	800d070 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d064:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d009      	beq.n	800d084 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d074:	2b00      	cmp	r3, #0
 800d076:	f000 82d6 	beq.w	800d626 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d07e:	6878      	ldr	r0, [r7, #4]
 800d080:	4798      	blx	r3
      }
      return;
 800d082:	e2d0      	b.n	800d626 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 800d084:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d088:	2b00      	cmp	r3, #0
 800d08a:	f000 811f 	beq.w	800d2cc <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d08e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d092:	4b8b      	ldr	r3, [pc, #556]	; (800d2c0 <HAL_UART_IRQHandler+0x2b0>)
 800d094:	4013      	ands	r3, r2
 800d096:	2b00      	cmp	r3, #0
 800d098:	d106      	bne.n	800d0a8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d09a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d09e:	4b89      	ldr	r3, [pc, #548]	; (800d2c4 <HAL_UART_IRQHandler+0x2b4>)
 800d0a0:	4013      	ands	r3, r2
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	f000 8112 	beq.w	800d2cc <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d0a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d0ac:	f003 0301 	and.w	r3, r3, #1
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d011      	beq.n	800d0d8 <HAL_UART_IRQHandler+0xc8>
 800d0b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d0b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d00b      	beq.n	800d0d8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	2201      	movs	r2, #1
 800d0c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d0ce:	f043 0201 	orr.w	r2, r3, #1
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d0d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d0dc:	f003 0302 	and.w	r3, r3, #2
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d011      	beq.n	800d108 <HAL_UART_IRQHandler+0xf8>
 800d0e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d0e8:	f003 0301 	and.w	r3, r3, #1
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d00b      	beq.n	800d108 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	2202      	movs	r2, #2
 800d0f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d0fe:	f043 0204 	orr.w	r2, r3, #4
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d10c:	f003 0304 	and.w	r3, r3, #4
 800d110:	2b00      	cmp	r3, #0
 800d112:	d011      	beq.n	800d138 <HAL_UART_IRQHandler+0x128>
 800d114:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d118:	f003 0301 	and.w	r3, r3, #1
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d00b      	beq.n	800d138 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	2204      	movs	r2, #4
 800d126:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d12e:	f043 0202 	orr.w	r2, r3, #2
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d13c:	f003 0308 	and.w	r3, r3, #8
 800d140:	2b00      	cmp	r3, #0
 800d142:	d017      	beq.n	800d174 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d148:	f003 0320 	and.w	r3, r3, #32
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d105      	bne.n	800d15c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d150:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d154:	4b5a      	ldr	r3, [pc, #360]	; (800d2c0 <HAL_UART_IRQHandler+0x2b0>)
 800d156:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d00b      	beq.n	800d174 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	2208      	movs	r2, #8
 800d162:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d16a:	f043 0208 	orr.w	r2, r3, #8
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d178:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d012      	beq.n	800d1a6 <HAL_UART_IRQHandler+0x196>
 800d180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d184:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d00c      	beq.n	800d1a6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d194:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d19c:	f043 0220 	orr.w	r2, r3, #32
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	f000 823c 	beq.w	800d62a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d1b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d1b6:	f003 0320 	and.w	r3, r3, #32
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d013      	beq.n	800d1e6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d1be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d1c2:	f003 0320 	and.w	r3, r3, #32
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d105      	bne.n	800d1d6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d1ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d1ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d007      	beq.n	800d1e6 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d003      	beq.n	800d1e6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1e2:	6878      	ldr	r0, [r7, #4]
 800d1e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d1ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	689b      	ldr	r3, [r3, #8]
 800d1f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1fa:	2b40      	cmp	r3, #64	; 0x40
 800d1fc:	d005      	beq.n	800d20a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d1fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d202:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d206:	2b00      	cmp	r3, #0
 800d208:	d04f      	beq.n	800d2aa <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d20a:	6878      	ldr	r0, [r7, #4]
 800d20c:	f000 ffdb 	bl	800e1c6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	689b      	ldr	r3, [r3, #8]
 800d216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d21a:	2b40      	cmp	r3, #64	; 0x40
 800d21c:	d141      	bne.n	800d2a2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	3308      	adds	r3, #8
 800d224:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d228:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d22c:	e853 3f00 	ldrex	r3, [r3]
 800d230:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d234:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d238:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d23c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	3308      	adds	r3, #8
 800d246:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d24a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d24e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d252:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d256:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d25a:	e841 2300 	strex	r3, r2, [r1]
 800d25e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d262:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d266:	2b00      	cmp	r3, #0
 800d268:	d1d9      	bne.n	800d21e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d013      	beq.n	800d29a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d276:	4a14      	ldr	r2, [pc, #80]	; (800d2c8 <HAL_UART_IRQHandler+0x2b8>)
 800d278:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d27e:	4618      	mov	r0, r3
 800d280:	f7fa fec3 	bl	800800a <HAL_DMA_Abort_IT>
 800d284:	4603      	mov	r3, r0
 800d286:	2b00      	cmp	r3, #0
 800d288:	d017      	beq.n	800d2ba <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d28e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d290:	687a      	ldr	r2, [r7, #4]
 800d292:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800d294:	4610      	mov	r0, r2
 800d296:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d298:	e00f      	b.n	800d2ba <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d29a:	6878      	ldr	r0, [r7, #4]
 800d29c:	f000 f9ee 	bl	800d67c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d2a0:	e00b      	b.n	800d2ba <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d2a2:	6878      	ldr	r0, [r7, #4]
 800d2a4:	f000 f9ea 	bl	800d67c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d2a8:	e007      	b.n	800d2ba <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d2aa:	6878      	ldr	r0, [r7, #4]
 800d2ac:	f000 f9e6 	bl	800d67c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800d2b8:	e1b7      	b.n	800d62a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d2ba:	bf00      	nop
    return;
 800d2bc:	e1b5      	b.n	800d62a <HAL_UART_IRQHandler+0x61a>
 800d2be:	bf00      	nop
 800d2c0:	10000001 	.word	0x10000001
 800d2c4:	04000120 	.word	0x04000120
 800d2c8:	0800e471 	.word	0x0800e471

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2d0:	2b01      	cmp	r3, #1
 800d2d2:	f040 814a 	bne.w	800d56a <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d2d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d2da:	f003 0310 	and.w	r3, r3, #16
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	f000 8143 	beq.w	800d56a <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d2e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d2e8:	f003 0310 	and.w	r3, r3, #16
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	f000 813c 	beq.w	800d56a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	2210      	movs	r2, #16
 800d2f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	689b      	ldr	r3, [r3, #8]
 800d300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d304:	2b40      	cmp	r3, #64	; 0x40
 800d306:	f040 80b5 	bne.w	800d474 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	685b      	ldr	r3, [r3, #4]
 800d312:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d316:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	f000 8187 	beq.w	800d62e <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d326:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d32a:	429a      	cmp	r2, r3
 800d32c:	f080 817f 	bcs.w	800d62e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d336:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	f003 0320 	and.w	r3, r3, #32
 800d346:	2b00      	cmp	r3, #0
 800d348:	f040 8086 	bne.w	800d458 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d354:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d358:	e853 3f00 	ldrex	r3, [r3]
 800d35c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d360:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d364:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d368:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	461a      	mov	r2, r3
 800d372:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d376:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d37a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d37e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d382:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d386:	e841 2300 	strex	r3, r2, [r1]
 800d38a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d38e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d392:	2b00      	cmp	r3, #0
 800d394:	d1da      	bne.n	800d34c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	3308      	adds	r3, #8
 800d39c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d39e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d3a0:	e853 3f00 	ldrex	r3, [r3]
 800d3a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d3a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d3a8:	f023 0301 	bic.w	r3, r3, #1
 800d3ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	3308      	adds	r3, #8
 800d3b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d3ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d3be:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d3c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d3c6:	e841 2300 	strex	r3, r2, [r1]
 800d3ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d3cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d1e1      	bne.n	800d396 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	3308      	adds	r3, #8
 800d3d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d3dc:	e853 3f00 	ldrex	r3, [r3]
 800d3e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d3e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d3e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d3e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	3308      	adds	r3, #8
 800d3f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d3f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d3f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d3fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d3fe:	e841 2300 	strex	r3, r2, [r1]
 800d402:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d404:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d406:	2b00      	cmp	r3, #0
 800d408:	d1e3      	bne.n	800d3d2 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	2220      	movs	r2, #32
 800d40e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	2200      	movs	r2, #0
 800d416:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d41e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d420:	e853 3f00 	ldrex	r3, [r3]
 800d424:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d426:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d428:	f023 0310 	bic.w	r3, r3, #16
 800d42c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	461a      	mov	r2, r3
 800d436:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d43a:	65bb      	str	r3, [r7, #88]	; 0x58
 800d43c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d43e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d440:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d442:	e841 2300 	strex	r3, r2, [r1]
 800d446:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d448:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d1e4      	bne.n	800d418 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d452:	4618      	mov	r0, r3
 800d454:	f7fa fd7d 	bl	8007f52 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d464:	b29b      	uxth	r3, r3
 800d466:	1ad3      	subs	r3, r2, r3
 800d468:	b29b      	uxth	r3, r3
 800d46a:	4619      	mov	r1, r3
 800d46c:	6878      	ldr	r0, [r7, #4]
 800d46e:	f7f7 fab9 	bl	80049e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d472:	e0dc      	b.n	800d62e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d480:	b29b      	uxth	r3, r3
 800d482:	1ad3      	subs	r3, r2, r3
 800d484:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d48e:	b29b      	uxth	r3, r3
 800d490:	2b00      	cmp	r3, #0
 800d492:	f000 80ce 	beq.w	800d632 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800d496:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	f000 80c9 	beq.w	800d632 <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4a8:	e853 3f00 	ldrex	r3, [r3]
 800d4ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d4ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d4b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	461a      	mov	r2, r3
 800d4be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d4c2:	647b      	str	r3, [r7, #68]	; 0x44
 800d4c4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d4c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d4ca:	e841 2300 	strex	r3, r2, [r1]
 800d4ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d4d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d1e4      	bne.n	800d4a0 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	3308      	adds	r3, #8
 800d4dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4e0:	e853 3f00 	ldrex	r3, [r3]
 800d4e4:	623b      	str	r3, [r7, #32]
   return(result);
 800d4e6:	6a3b      	ldr	r3, [r7, #32]
 800d4e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d4ec:	f023 0301 	bic.w	r3, r3, #1
 800d4f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	3308      	adds	r3, #8
 800d4fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d4fe:	633a      	str	r2, [r7, #48]	; 0x30
 800d500:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d502:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d504:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d506:	e841 2300 	strex	r3, r2, [r1]
 800d50a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d50c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d1e1      	bne.n	800d4d6 <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	2220      	movs	r2, #32
 800d516:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	2200      	movs	r2, #0
 800d51e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	2200      	movs	r2, #0
 800d524:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d52c:	693b      	ldr	r3, [r7, #16]
 800d52e:	e853 3f00 	ldrex	r3, [r3]
 800d532:	60fb      	str	r3, [r7, #12]
   return(result);
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	f023 0310 	bic.w	r3, r3, #16
 800d53a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	461a      	mov	r2, r3
 800d544:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d548:	61fb      	str	r3, [r7, #28]
 800d54a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d54c:	69b9      	ldr	r1, [r7, #24]
 800d54e:	69fa      	ldr	r2, [r7, #28]
 800d550:	e841 2300 	strex	r3, r2, [r1]
 800d554:	617b      	str	r3, [r7, #20]
   return(result);
 800d556:	697b      	ldr	r3, [r7, #20]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d1e4      	bne.n	800d526 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d55c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d560:	4619      	mov	r1, r3
 800d562:	6878      	ldr	r0, [r7, #4]
 800d564:	f7f7 fa3e 	bl	80049e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d568:	e063      	b.n	800d632 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d56a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d56e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d572:	2b00      	cmp	r3, #0
 800d574:	d00e      	beq.n	800d594 <HAL_UART_IRQHandler+0x584>
 800d576:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d57a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d008      	beq.n	800d594 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d58a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d58c:	6878      	ldr	r0, [r7, #4]
 800d58e:	f000 ffb0 	bl	800e4f2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d592:	e051      	b.n	800d638 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d014      	beq.n	800d5ca <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d5a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d5a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d105      	bne.n	800d5b8 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d5ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d5b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d008      	beq.n	800d5ca <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d03a      	beq.n	800d636 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d5c4:	6878      	ldr	r0, [r7, #4]
 800d5c6:	4798      	blx	r3
    }
    return;
 800d5c8:	e035      	b.n	800d636 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d5ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d5ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d009      	beq.n	800d5ea <HAL_UART_IRQHandler+0x5da>
 800d5d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d5da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d003      	beq.n	800d5ea <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800d5e2:	6878      	ldr	r0, [r7, #4]
 800d5e4:	f000 ff5a 	bl	800e49c <UART_EndTransmit_IT>
    return;
 800d5e8:	e026      	b.n	800d638 <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d5ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d5ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d009      	beq.n	800d60a <HAL_UART_IRQHandler+0x5fa>
 800d5f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d5fa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d003      	beq.n	800d60a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d602:	6878      	ldr	r0, [r7, #4]
 800d604:	f000 ff89 	bl	800e51a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d608:	e016      	b.n	800d638 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d60a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d60e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d612:	2b00      	cmp	r3, #0
 800d614:	d010      	beq.n	800d638 <HAL_UART_IRQHandler+0x628>
 800d616:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	da0c      	bge.n	800d638 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d61e:	6878      	ldr	r0, [r7, #4]
 800d620:	f000 ff71 	bl	800e506 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d624:	e008      	b.n	800d638 <HAL_UART_IRQHandler+0x628>
      return;
 800d626:	bf00      	nop
 800d628:	e006      	b.n	800d638 <HAL_UART_IRQHandler+0x628>
    return;
 800d62a:	bf00      	nop
 800d62c:	e004      	b.n	800d638 <HAL_UART_IRQHandler+0x628>
      return;
 800d62e:	bf00      	nop
 800d630:	e002      	b.n	800d638 <HAL_UART_IRQHandler+0x628>
      return;
 800d632:	bf00      	nop
 800d634:	e000      	b.n	800d638 <HAL_UART_IRQHandler+0x628>
    return;
 800d636:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 800d638:	37e8      	adds	r7, #232	; 0xe8
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bd80      	pop	{r7, pc}
 800d63e:	bf00      	nop

0800d640 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d640:	b480      	push	{r7}
 800d642:	b083      	sub	sp, #12
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d648:	bf00      	nop
 800d64a:	370c      	adds	r7, #12
 800d64c:	46bd      	mov	sp, r7
 800d64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d652:	4770      	bx	lr

0800d654 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d654:	b480      	push	{r7}
 800d656:	b083      	sub	sp, #12
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800d65c:	bf00      	nop
 800d65e:	370c      	adds	r7, #12
 800d660:	46bd      	mov	sp, r7
 800d662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d666:	4770      	bx	lr

0800d668 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d668:	b480      	push	{r7}
 800d66a:	b083      	sub	sp, #12
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d670:	bf00      	nop
 800d672:	370c      	adds	r7, #12
 800d674:	46bd      	mov	sp, r7
 800d676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67a:	4770      	bx	lr

0800d67c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d67c:	b480      	push	{r7}
 800d67e:	b083      	sub	sp, #12
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d684:	bf00      	nop
 800d686:	370c      	adds	r7, #12
 800d688:	46bd      	mov	sp, r7
 800d68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68e:	4770      	bx	lr

0800d690 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d690:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d694:	b08c      	sub	sp, #48	; 0x30
 800d696:	af00      	add	r7, sp, #0
 800d698:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d69a:	2300      	movs	r3, #0
 800d69c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d6a0:	697b      	ldr	r3, [r7, #20]
 800d6a2:	689a      	ldr	r2, [r3, #8]
 800d6a4:	697b      	ldr	r3, [r7, #20]
 800d6a6:	691b      	ldr	r3, [r3, #16]
 800d6a8:	431a      	orrs	r2, r3
 800d6aa:	697b      	ldr	r3, [r7, #20]
 800d6ac:	695b      	ldr	r3, [r3, #20]
 800d6ae:	431a      	orrs	r2, r3
 800d6b0:	697b      	ldr	r3, [r7, #20]
 800d6b2:	69db      	ldr	r3, [r3, #28]
 800d6b4:	4313      	orrs	r3, r2
 800d6b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d6b8:	697b      	ldr	r3, [r7, #20]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	681a      	ldr	r2, [r3, #0]
 800d6be:	4baa      	ldr	r3, [pc, #680]	; (800d968 <UART_SetConfig+0x2d8>)
 800d6c0:	4013      	ands	r3, r2
 800d6c2:	697a      	ldr	r2, [r7, #20]
 800d6c4:	6812      	ldr	r2, [r2, #0]
 800d6c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d6c8:	430b      	orrs	r3, r1
 800d6ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d6cc:	697b      	ldr	r3, [r7, #20]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	685b      	ldr	r3, [r3, #4]
 800d6d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d6d6:	697b      	ldr	r3, [r7, #20]
 800d6d8:	68da      	ldr	r2, [r3, #12]
 800d6da:	697b      	ldr	r3, [r7, #20]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	430a      	orrs	r2, r1
 800d6e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d6e2:	697b      	ldr	r3, [r7, #20]
 800d6e4:	699b      	ldr	r3, [r3, #24]
 800d6e6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d6e8:	697b      	ldr	r3, [r7, #20]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	4a9f      	ldr	r2, [pc, #636]	; (800d96c <UART_SetConfig+0x2dc>)
 800d6ee:	4293      	cmp	r3, r2
 800d6f0:	d004      	beq.n	800d6fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d6f2:	697b      	ldr	r3, [r7, #20]
 800d6f4:	6a1b      	ldr	r3, [r3, #32]
 800d6f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d6f8:	4313      	orrs	r3, r2
 800d6fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d6fc:	697b      	ldr	r3, [r7, #20]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	689b      	ldr	r3, [r3, #8]
 800d702:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800d706:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800d70a:	697a      	ldr	r2, [r7, #20]
 800d70c:	6812      	ldr	r2, [r2, #0]
 800d70e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d710:	430b      	orrs	r3, r1
 800d712:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d714:	697b      	ldr	r3, [r7, #20]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d71a:	f023 010f 	bic.w	r1, r3, #15
 800d71e:	697b      	ldr	r3, [r7, #20]
 800d720:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d722:	697b      	ldr	r3, [r7, #20]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	430a      	orrs	r2, r1
 800d728:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d72a:	697b      	ldr	r3, [r7, #20]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	4a90      	ldr	r2, [pc, #576]	; (800d970 <UART_SetConfig+0x2e0>)
 800d730:	4293      	cmp	r3, r2
 800d732:	d125      	bne.n	800d780 <UART_SetConfig+0xf0>
 800d734:	4b8f      	ldr	r3, [pc, #572]	; (800d974 <UART_SetConfig+0x2e4>)
 800d736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d73a:	f003 0303 	and.w	r3, r3, #3
 800d73e:	2b03      	cmp	r3, #3
 800d740:	d81a      	bhi.n	800d778 <UART_SetConfig+0xe8>
 800d742:	a201      	add	r2, pc, #4	; (adr r2, 800d748 <UART_SetConfig+0xb8>)
 800d744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d748:	0800d759 	.word	0x0800d759
 800d74c:	0800d769 	.word	0x0800d769
 800d750:	0800d761 	.word	0x0800d761
 800d754:	0800d771 	.word	0x0800d771
 800d758:	2301      	movs	r3, #1
 800d75a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d75e:	e116      	b.n	800d98e <UART_SetConfig+0x2fe>
 800d760:	2302      	movs	r3, #2
 800d762:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d766:	e112      	b.n	800d98e <UART_SetConfig+0x2fe>
 800d768:	2304      	movs	r3, #4
 800d76a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d76e:	e10e      	b.n	800d98e <UART_SetConfig+0x2fe>
 800d770:	2308      	movs	r3, #8
 800d772:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d776:	e10a      	b.n	800d98e <UART_SetConfig+0x2fe>
 800d778:	2310      	movs	r3, #16
 800d77a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d77e:	e106      	b.n	800d98e <UART_SetConfig+0x2fe>
 800d780:	697b      	ldr	r3, [r7, #20]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	4a7c      	ldr	r2, [pc, #496]	; (800d978 <UART_SetConfig+0x2e8>)
 800d786:	4293      	cmp	r3, r2
 800d788:	d138      	bne.n	800d7fc <UART_SetConfig+0x16c>
 800d78a:	4b7a      	ldr	r3, [pc, #488]	; (800d974 <UART_SetConfig+0x2e4>)
 800d78c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d790:	f003 030c 	and.w	r3, r3, #12
 800d794:	2b0c      	cmp	r3, #12
 800d796:	d82d      	bhi.n	800d7f4 <UART_SetConfig+0x164>
 800d798:	a201      	add	r2, pc, #4	; (adr r2, 800d7a0 <UART_SetConfig+0x110>)
 800d79a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d79e:	bf00      	nop
 800d7a0:	0800d7d5 	.word	0x0800d7d5
 800d7a4:	0800d7f5 	.word	0x0800d7f5
 800d7a8:	0800d7f5 	.word	0x0800d7f5
 800d7ac:	0800d7f5 	.word	0x0800d7f5
 800d7b0:	0800d7e5 	.word	0x0800d7e5
 800d7b4:	0800d7f5 	.word	0x0800d7f5
 800d7b8:	0800d7f5 	.word	0x0800d7f5
 800d7bc:	0800d7f5 	.word	0x0800d7f5
 800d7c0:	0800d7dd 	.word	0x0800d7dd
 800d7c4:	0800d7f5 	.word	0x0800d7f5
 800d7c8:	0800d7f5 	.word	0x0800d7f5
 800d7cc:	0800d7f5 	.word	0x0800d7f5
 800d7d0:	0800d7ed 	.word	0x0800d7ed
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d7da:	e0d8      	b.n	800d98e <UART_SetConfig+0x2fe>
 800d7dc:	2302      	movs	r3, #2
 800d7de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d7e2:	e0d4      	b.n	800d98e <UART_SetConfig+0x2fe>
 800d7e4:	2304      	movs	r3, #4
 800d7e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d7ea:	e0d0      	b.n	800d98e <UART_SetConfig+0x2fe>
 800d7ec:	2308      	movs	r3, #8
 800d7ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d7f2:	e0cc      	b.n	800d98e <UART_SetConfig+0x2fe>
 800d7f4:	2310      	movs	r3, #16
 800d7f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d7fa:	e0c8      	b.n	800d98e <UART_SetConfig+0x2fe>
 800d7fc:	697b      	ldr	r3, [r7, #20]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	4a5e      	ldr	r2, [pc, #376]	; (800d97c <UART_SetConfig+0x2ec>)
 800d802:	4293      	cmp	r3, r2
 800d804:	d125      	bne.n	800d852 <UART_SetConfig+0x1c2>
 800d806:	4b5b      	ldr	r3, [pc, #364]	; (800d974 <UART_SetConfig+0x2e4>)
 800d808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d80c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d810:	2b30      	cmp	r3, #48	; 0x30
 800d812:	d016      	beq.n	800d842 <UART_SetConfig+0x1b2>
 800d814:	2b30      	cmp	r3, #48	; 0x30
 800d816:	d818      	bhi.n	800d84a <UART_SetConfig+0x1ba>
 800d818:	2b20      	cmp	r3, #32
 800d81a:	d00a      	beq.n	800d832 <UART_SetConfig+0x1a2>
 800d81c:	2b20      	cmp	r3, #32
 800d81e:	d814      	bhi.n	800d84a <UART_SetConfig+0x1ba>
 800d820:	2b00      	cmp	r3, #0
 800d822:	d002      	beq.n	800d82a <UART_SetConfig+0x19a>
 800d824:	2b10      	cmp	r3, #16
 800d826:	d008      	beq.n	800d83a <UART_SetConfig+0x1aa>
 800d828:	e00f      	b.n	800d84a <UART_SetConfig+0x1ba>
 800d82a:	2300      	movs	r3, #0
 800d82c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d830:	e0ad      	b.n	800d98e <UART_SetConfig+0x2fe>
 800d832:	2302      	movs	r3, #2
 800d834:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d838:	e0a9      	b.n	800d98e <UART_SetConfig+0x2fe>
 800d83a:	2304      	movs	r3, #4
 800d83c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d840:	e0a5      	b.n	800d98e <UART_SetConfig+0x2fe>
 800d842:	2308      	movs	r3, #8
 800d844:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d848:	e0a1      	b.n	800d98e <UART_SetConfig+0x2fe>
 800d84a:	2310      	movs	r3, #16
 800d84c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d850:	e09d      	b.n	800d98e <UART_SetConfig+0x2fe>
 800d852:	697b      	ldr	r3, [r7, #20]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	4a4a      	ldr	r2, [pc, #296]	; (800d980 <UART_SetConfig+0x2f0>)
 800d858:	4293      	cmp	r3, r2
 800d85a:	d125      	bne.n	800d8a8 <UART_SetConfig+0x218>
 800d85c:	4b45      	ldr	r3, [pc, #276]	; (800d974 <UART_SetConfig+0x2e4>)
 800d85e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d862:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800d866:	2bc0      	cmp	r3, #192	; 0xc0
 800d868:	d016      	beq.n	800d898 <UART_SetConfig+0x208>
 800d86a:	2bc0      	cmp	r3, #192	; 0xc0
 800d86c:	d818      	bhi.n	800d8a0 <UART_SetConfig+0x210>
 800d86e:	2b80      	cmp	r3, #128	; 0x80
 800d870:	d00a      	beq.n	800d888 <UART_SetConfig+0x1f8>
 800d872:	2b80      	cmp	r3, #128	; 0x80
 800d874:	d814      	bhi.n	800d8a0 <UART_SetConfig+0x210>
 800d876:	2b00      	cmp	r3, #0
 800d878:	d002      	beq.n	800d880 <UART_SetConfig+0x1f0>
 800d87a:	2b40      	cmp	r3, #64	; 0x40
 800d87c:	d008      	beq.n	800d890 <UART_SetConfig+0x200>
 800d87e:	e00f      	b.n	800d8a0 <UART_SetConfig+0x210>
 800d880:	2300      	movs	r3, #0
 800d882:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d886:	e082      	b.n	800d98e <UART_SetConfig+0x2fe>
 800d888:	2302      	movs	r3, #2
 800d88a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d88e:	e07e      	b.n	800d98e <UART_SetConfig+0x2fe>
 800d890:	2304      	movs	r3, #4
 800d892:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d896:	e07a      	b.n	800d98e <UART_SetConfig+0x2fe>
 800d898:	2308      	movs	r3, #8
 800d89a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d89e:	e076      	b.n	800d98e <UART_SetConfig+0x2fe>
 800d8a0:	2310      	movs	r3, #16
 800d8a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d8a6:	e072      	b.n	800d98e <UART_SetConfig+0x2fe>
 800d8a8:	697b      	ldr	r3, [r7, #20]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	4a35      	ldr	r2, [pc, #212]	; (800d984 <UART_SetConfig+0x2f4>)
 800d8ae:	4293      	cmp	r3, r2
 800d8b0:	d12a      	bne.n	800d908 <UART_SetConfig+0x278>
 800d8b2:	4b30      	ldr	r3, [pc, #192]	; (800d974 <UART_SetConfig+0x2e4>)
 800d8b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d8b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d8bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d8c0:	d01a      	beq.n	800d8f8 <UART_SetConfig+0x268>
 800d8c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d8c6:	d81b      	bhi.n	800d900 <UART_SetConfig+0x270>
 800d8c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d8cc:	d00c      	beq.n	800d8e8 <UART_SetConfig+0x258>
 800d8ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d8d2:	d815      	bhi.n	800d900 <UART_SetConfig+0x270>
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d003      	beq.n	800d8e0 <UART_SetConfig+0x250>
 800d8d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d8dc:	d008      	beq.n	800d8f0 <UART_SetConfig+0x260>
 800d8de:	e00f      	b.n	800d900 <UART_SetConfig+0x270>
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d8e6:	e052      	b.n	800d98e <UART_SetConfig+0x2fe>
 800d8e8:	2302      	movs	r3, #2
 800d8ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d8ee:	e04e      	b.n	800d98e <UART_SetConfig+0x2fe>
 800d8f0:	2304      	movs	r3, #4
 800d8f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d8f6:	e04a      	b.n	800d98e <UART_SetConfig+0x2fe>
 800d8f8:	2308      	movs	r3, #8
 800d8fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d8fe:	e046      	b.n	800d98e <UART_SetConfig+0x2fe>
 800d900:	2310      	movs	r3, #16
 800d902:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d906:	e042      	b.n	800d98e <UART_SetConfig+0x2fe>
 800d908:	697b      	ldr	r3, [r7, #20]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	4a17      	ldr	r2, [pc, #92]	; (800d96c <UART_SetConfig+0x2dc>)
 800d90e:	4293      	cmp	r3, r2
 800d910:	d13a      	bne.n	800d988 <UART_SetConfig+0x2f8>
 800d912:	4b18      	ldr	r3, [pc, #96]	; (800d974 <UART_SetConfig+0x2e4>)
 800d914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d918:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800d91c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d920:	d01a      	beq.n	800d958 <UART_SetConfig+0x2c8>
 800d922:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d926:	d81b      	bhi.n	800d960 <UART_SetConfig+0x2d0>
 800d928:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d92c:	d00c      	beq.n	800d948 <UART_SetConfig+0x2b8>
 800d92e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d932:	d815      	bhi.n	800d960 <UART_SetConfig+0x2d0>
 800d934:	2b00      	cmp	r3, #0
 800d936:	d003      	beq.n	800d940 <UART_SetConfig+0x2b0>
 800d938:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d93c:	d008      	beq.n	800d950 <UART_SetConfig+0x2c0>
 800d93e:	e00f      	b.n	800d960 <UART_SetConfig+0x2d0>
 800d940:	2300      	movs	r3, #0
 800d942:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d946:	e022      	b.n	800d98e <UART_SetConfig+0x2fe>
 800d948:	2302      	movs	r3, #2
 800d94a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d94e:	e01e      	b.n	800d98e <UART_SetConfig+0x2fe>
 800d950:	2304      	movs	r3, #4
 800d952:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d956:	e01a      	b.n	800d98e <UART_SetConfig+0x2fe>
 800d958:	2308      	movs	r3, #8
 800d95a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d95e:	e016      	b.n	800d98e <UART_SetConfig+0x2fe>
 800d960:	2310      	movs	r3, #16
 800d962:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d966:	e012      	b.n	800d98e <UART_SetConfig+0x2fe>
 800d968:	cfff69f3 	.word	0xcfff69f3
 800d96c:	40008000 	.word	0x40008000
 800d970:	40013800 	.word	0x40013800
 800d974:	40021000 	.word	0x40021000
 800d978:	40004400 	.word	0x40004400
 800d97c:	40004800 	.word	0x40004800
 800d980:	40004c00 	.word	0x40004c00
 800d984:	40005000 	.word	0x40005000
 800d988:	2310      	movs	r3, #16
 800d98a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d98e:	697b      	ldr	r3, [r7, #20]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	4aae      	ldr	r2, [pc, #696]	; (800dc4c <UART_SetConfig+0x5bc>)
 800d994:	4293      	cmp	r3, r2
 800d996:	f040 8097 	bne.w	800dac8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d99a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d99e:	2b08      	cmp	r3, #8
 800d9a0:	d823      	bhi.n	800d9ea <UART_SetConfig+0x35a>
 800d9a2:	a201      	add	r2, pc, #4	; (adr r2, 800d9a8 <UART_SetConfig+0x318>)
 800d9a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9a8:	0800d9cd 	.word	0x0800d9cd
 800d9ac:	0800d9eb 	.word	0x0800d9eb
 800d9b0:	0800d9d5 	.word	0x0800d9d5
 800d9b4:	0800d9eb 	.word	0x0800d9eb
 800d9b8:	0800d9db 	.word	0x0800d9db
 800d9bc:	0800d9eb 	.word	0x0800d9eb
 800d9c0:	0800d9eb 	.word	0x0800d9eb
 800d9c4:	0800d9eb 	.word	0x0800d9eb
 800d9c8:	0800d9e3 	.word	0x0800d9e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d9cc:	f7fb fe2a 	bl	8009624 <HAL_RCC_GetPCLK1Freq>
 800d9d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800d9d2:	e010      	b.n	800d9f6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d9d4:	4b9e      	ldr	r3, [pc, #632]	; (800dc50 <UART_SetConfig+0x5c0>)
 800d9d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800d9d8:	e00d      	b.n	800d9f6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d9da:	f7fb fd8b 	bl	80094f4 <HAL_RCC_GetSysClockFreq>
 800d9de:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800d9e0:	e009      	b.n	800d9f6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d9e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d9e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800d9e8:	e005      	b.n	800d9f6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800d9ee:	2301      	movs	r3, #1
 800d9f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800d9f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	f000 8130 	beq.w	800dc5e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d9fe:	697b      	ldr	r3, [r7, #20]
 800da00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da02:	4a94      	ldr	r2, [pc, #592]	; (800dc54 <UART_SetConfig+0x5c4>)
 800da04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800da08:	461a      	mov	r2, r3
 800da0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da0c:	fbb3 f3f2 	udiv	r3, r3, r2
 800da10:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800da12:	697b      	ldr	r3, [r7, #20]
 800da14:	685a      	ldr	r2, [r3, #4]
 800da16:	4613      	mov	r3, r2
 800da18:	005b      	lsls	r3, r3, #1
 800da1a:	4413      	add	r3, r2
 800da1c:	69ba      	ldr	r2, [r7, #24]
 800da1e:	429a      	cmp	r2, r3
 800da20:	d305      	bcc.n	800da2e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800da22:	697b      	ldr	r3, [r7, #20]
 800da24:	685b      	ldr	r3, [r3, #4]
 800da26:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800da28:	69ba      	ldr	r2, [r7, #24]
 800da2a:	429a      	cmp	r2, r3
 800da2c:	d903      	bls.n	800da36 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800da2e:	2301      	movs	r3, #1
 800da30:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800da34:	e113      	b.n	800dc5e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800da36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da38:	2200      	movs	r2, #0
 800da3a:	60bb      	str	r3, [r7, #8]
 800da3c:	60fa      	str	r2, [r7, #12]
 800da3e:	697b      	ldr	r3, [r7, #20]
 800da40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da42:	4a84      	ldr	r2, [pc, #528]	; (800dc54 <UART_SetConfig+0x5c4>)
 800da44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800da48:	b29b      	uxth	r3, r3
 800da4a:	2200      	movs	r2, #0
 800da4c:	603b      	str	r3, [r7, #0]
 800da4e:	607a      	str	r2, [r7, #4]
 800da50:	e9d7 2300 	ldrd	r2, r3, [r7]
 800da54:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800da58:	f7f3 f97e 	bl	8000d58 <__aeabi_uldivmod>
 800da5c:	4602      	mov	r2, r0
 800da5e:	460b      	mov	r3, r1
 800da60:	4610      	mov	r0, r2
 800da62:	4619      	mov	r1, r3
 800da64:	f04f 0200 	mov.w	r2, #0
 800da68:	f04f 0300 	mov.w	r3, #0
 800da6c:	020b      	lsls	r3, r1, #8
 800da6e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800da72:	0202      	lsls	r2, r0, #8
 800da74:	6979      	ldr	r1, [r7, #20]
 800da76:	6849      	ldr	r1, [r1, #4]
 800da78:	0849      	lsrs	r1, r1, #1
 800da7a:	2000      	movs	r0, #0
 800da7c:	460c      	mov	r4, r1
 800da7e:	4605      	mov	r5, r0
 800da80:	eb12 0804 	adds.w	r8, r2, r4
 800da84:	eb43 0905 	adc.w	r9, r3, r5
 800da88:	697b      	ldr	r3, [r7, #20]
 800da8a:	685b      	ldr	r3, [r3, #4]
 800da8c:	2200      	movs	r2, #0
 800da8e:	469a      	mov	sl, r3
 800da90:	4693      	mov	fp, r2
 800da92:	4652      	mov	r2, sl
 800da94:	465b      	mov	r3, fp
 800da96:	4640      	mov	r0, r8
 800da98:	4649      	mov	r1, r9
 800da9a:	f7f3 f95d 	bl	8000d58 <__aeabi_uldivmod>
 800da9e:	4602      	mov	r2, r0
 800daa0:	460b      	mov	r3, r1
 800daa2:	4613      	mov	r3, r2
 800daa4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800daa6:	6a3b      	ldr	r3, [r7, #32]
 800daa8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800daac:	d308      	bcc.n	800dac0 <UART_SetConfig+0x430>
 800daae:	6a3b      	ldr	r3, [r7, #32]
 800dab0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dab4:	d204      	bcs.n	800dac0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800dab6:	697b      	ldr	r3, [r7, #20]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	6a3a      	ldr	r2, [r7, #32]
 800dabc:	60da      	str	r2, [r3, #12]
 800dabe:	e0ce      	b.n	800dc5e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800dac0:	2301      	movs	r3, #1
 800dac2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800dac6:	e0ca      	b.n	800dc5e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dac8:	697b      	ldr	r3, [r7, #20]
 800daca:	69db      	ldr	r3, [r3, #28]
 800dacc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dad0:	d166      	bne.n	800dba0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800dad2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dad6:	2b08      	cmp	r3, #8
 800dad8:	d827      	bhi.n	800db2a <UART_SetConfig+0x49a>
 800dada:	a201      	add	r2, pc, #4	; (adr r2, 800dae0 <UART_SetConfig+0x450>)
 800dadc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dae0:	0800db05 	.word	0x0800db05
 800dae4:	0800db0d 	.word	0x0800db0d
 800dae8:	0800db15 	.word	0x0800db15
 800daec:	0800db2b 	.word	0x0800db2b
 800daf0:	0800db1b 	.word	0x0800db1b
 800daf4:	0800db2b 	.word	0x0800db2b
 800daf8:	0800db2b 	.word	0x0800db2b
 800dafc:	0800db2b 	.word	0x0800db2b
 800db00:	0800db23 	.word	0x0800db23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800db04:	f7fb fd8e 	bl	8009624 <HAL_RCC_GetPCLK1Freq>
 800db08:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800db0a:	e014      	b.n	800db36 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800db0c:	f7fb fda0 	bl	8009650 <HAL_RCC_GetPCLK2Freq>
 800db10:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800db12:	e010      	b.n	800db36 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800db14:	4b4e      	ldr	r3, [pc, #312]	; (800dc50 <UART_SetConfig+0x5c0>)
 800db16:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800db18:	e00d      	b.n	800db36 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800db1a:	f7fb fceb 	bl	80094f4 <HAL_RCC_GetSysClockFreq>
 800db1e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800db20:	e009      	b.n	800db36 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800db22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800db26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800db28:	e005      	b.n	800db36 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800db2a:	2300      	movs	r3, #0
 800db2c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800db2e:	2301      	movs	r3, #1
 800db30:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800db34:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800db36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db38:	2b00      	cmp	r3, #0
 800db3a:	f000 8090 	beq.w	800dc5e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800db3e:	697b      	ldr	r3, [r7, #20]
 800db40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db42:	4a44      	ldr	r2, [pc, #272]	; (800dc54 <UART_SetConfig+0x5c4>)
 800db44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800db48:	461a      	mov	r2, r3
 800db4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db4c:	fbb3 f3f2 	udiv	r3, r3, r2
 800db50:	005a      	lsls	r2, r3, #1
 800db52:	697b      	ldr	r3, [r7, #20]
 800db54:	685b      	ldr	r3, [r3, #4]
 800db56:	085b      	lsrs	r3, r3, #1
 800db58:	441a      	add	r2, r3
 800db5a:	697b      	ldr	r3, [r7, #20]
 800db5c:	685b      	ldr	r3, [r3, #4]
 800db5e:	fbb2 f3f3 	udiv	r3, r2, r3
 800db62:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800db64:	6a3b      	ldr	r3, [r7, #32]
 800db66:	2b0f      	cmp	r3, #15
 800db68:	d916      	bls.n	800db98 <UART_SetConfig+0x508>
 800db6a:	6a3b      	ldr	r3, [r7, #32]
 800db6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db70:	d212      	bcs.n	800db98 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800db72:	6a3b      	ldr	r3, [r7, #32]
 800db74:	b29b      	uxth	r3, r3
 800db76:	f023 030f 	bic.w	r3, r3, #15
 800db7a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800db7c:	6a3b      	ldr	r3, [r7, #32]
 800db7e:	085b      	lsrs	r3, r3, #1
 800db80:	b29b      	uxth	r3, r3
 800db82:	f003 0307 	and.w	r3, r3, #7
 800db86:	b29a      	uxth	r2, r3
 800db88:	8bfb      	ldrh	r3, [r7, #30]
 800db8a:	4313      	orrs	r3, r2
 800db8c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800db8e:	697b      	ldr	r3, [r7, #20]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	8bfa      	ldrh	r2, [r7, #30]
 800db94:	60da      	str	r2, [r3, #12]
 800db96:	e062      	b.n	800dc5e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800db98:	2301      	movs	r3, #1
 800db9a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800db9e:	e05e      	b.n	800dc5e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800dba0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dba4:	2b08      	cmp	r3, #8
 800dba6:	d828      	bhi.n	800dbfa <UART_SetConfig+0x56a>
 800dba8:	a201      	add	r2, pc, #4	; (adr r2, 800dbb0 <UART_SetConfig+0x520>)
 800dbaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbae:	bf00      	nop
 800dbb0:	0800dbd5 	.word	0x0800dbd5
 800dbb4:	0800dbdd 	.word	0x0800dbdd
 800dbb8:	0800dbe5 	.word	0x0800dbe5
 800dbbc:	0800dbfb 	.word	0x0800dbfb
 800dbc0:	0800dbeb 	.word	0x0800dbeb
 800dbc4:	0800dbfb 	.word	0x0800dbfb
 800dbc8:	0800dbfb 	.word	0x0800dbfb
 800dbcc:	0800dbfb 	.word	0x0800dbfb
 800dbd0:	0800dbf3 	.word	0x0800dbf3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dbd4:	f7fb fd26 	bl	8009624 <HAL_RCC_GetPCLK1Freq>
 800dbd8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800dbda:	e014      	b.n	800dc06 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dbdc:	f7fb fd38 	bl	8009650 <HAL_RCC_GetPCLK2Freq>
 800dbe0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800dbe2:	e010      	b.n	800dc06 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800dbe4:	4b1a      	ldr	r3, [pc, #104]	; (800dc50 <UART_SetConfig+0x5c0>)
 800dbe6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800dbe8:	e00d      	b.n	800dc06 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800dbea:	f7fb fc83 	bl	80094f4 <HAL_RCC_GetSysClockFreq>
 800dbee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800dbf0:	e009      	b.n	800dc06 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dbf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dbf6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800dbf8:	e005      	b.n	800dc06 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800dbfe:	2301      	movs	r3, #1
 800dc00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800dc04:	bf00      	nop
    }

    if (pclk != 0U)
 800dc06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d028      	beq.n	800dc5e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dc0c:	697b      	ldr	r3, [r7, #20]
 800dc0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc10:	4a10      	ldr	r2, [pc, #64]	; (800dc54 <UART_SetConfig+0x5c4>)
 800dc12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dc16:	461a      	mov	r2, r3
 800dc18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc1a:	fbb3 f2f2 	udiv	r2, r3, r2
 800dc1e:	697b      	ldr	r3, [r7, #20]
 800dc20:	685b      	ldr	r3, [r3, #4]
 800dc22:	085b      	lsrs	r3, r3, #1
 800dc24:	441a      	add	r2, r3
 800dc26:	697b      	ldr	r3, [r7, #20]
 800dc28:	685b      	ldr	r3, [r3, #4]
 800dc2a:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc2e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dc30:	6a3b      	ldr	r3, [r7, #32]
 800dc32:	2b0f      	cmp	r3, #15
 800dc34:	d910      	bls.n	800dc58 <UART_SetConfig+0x5c8>
 800dc36:	6a3b      	ldr	r3, [r7, #32]
 800dc38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dc3c:	d20c      	bcs.n	800dc58 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800dc3e:	6a3b      	ldr	r3, [r7, #32]
 800dc40:	b29a      	uxth	r2, r3
 800dc42:	697b      	ldr	r3, [r7, #20]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	60da      	str	r2, [r3, #12]
 800dc48:	e009      	b.n	800dc5e <UART_SetConfig+0x5ce>
 800dc4a:	bf00      	nop
 800dc4c:	40008000 	.word	0x40008000
 800dc50:	00f42400 	.word	0x00f42400
 800dc54:	08018b58 	.word	0x08018b58
      }
      else
      {
        ret = HAL_ERROR;
 800dc58:	2301      	movs	r3, #1
 800dc5a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800dc5e:	697b      	ldr	r3, [r7, #20]
 800dc60:	2201      	movs	r2, #1
 800dc62:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800dc66:	697b      	ldr	r3, [r7, #20]
 800dc68:	2201      	movs	r2, #1
 800dc6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800dc6e:	697b      	ldr	r3, [r7, #20]
 800dc70:	2200      	movs	r2, #0
 800dc72:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800dc74:	697b      	ldr	r3, [r7, #20]
 800dc76:	2200      	movs	r2, #0
 800dc78:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800dc7a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800dc7e:	4618      	mov	r0, r3
 800dc80:	3730      	adds	r7, #48	; 0x30
 800dc82:	46bd      	mov	sp, r7
 800dc84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800dc88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dc88:	b480      	push	{r7}
 800dc8a:	b083      	sub	sp, #12
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc94:	f003 0301 	and.w	r3, r3, #1
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d00a      	beq.n	800dcb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	685b      	ldr	r3, [r3, #4]
 800dca2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	430a      	orrs	r2, r1
 800dcb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcb6:	f003 0302 	and.w	r3, r3, #2
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d00a      	beq.n	800dcd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	685b      	ldr	r3, [r3, #4]
 800dcc4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	430a      	orrs	r2, r1
 800dcd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcd8:	f003 0304 	and.w	r3, r3, #4
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d00a      	beq.n	800dcf6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	685b      	ldr	r3, [r3, #4]
 800dce6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	430a      	orrs	r2, r1
 800dcf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcfa:	f003 0308 	and.w	r3, r3, #8
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d00a      	beq.n	800dd18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	685b      	ldr	r3, [r3, #4]
 800dd08:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	430a      	orrs	r2, r1
 800dd16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd1c:	f003 0310 	and.w	r3, r3, #16
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d00a      	beq.n	800dd3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	689b      	ldr	r3, [r3, #8]
 800dd2a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	430a      	orrs	r2, r1
 800dd38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd3e:	f003 0320 	and.w	r3, r3, #32
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d00a      	beq.n	800dd5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	689b      	ldr	r3, [r3, #8]
 800dd4c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	430a      	orrs	r2, r1
 800dd5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d01a      	beq.n	800dd9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	685b      	ldr	r3, [r3, #4]
 800dd6e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	430a      	orrs	r2, r1
 800dd7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dd86:	d10a      	bne.n	800dd9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	685b      	ldr	r3, [r3, #4]
 800dd8e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	430a      	orrs	r2, r1
 800dd9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dda2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d00a      	beq.n	800ddc0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	685b      	ldr	r3, [r3, #4]
 800ddb0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	430a      	orrs	r2, r1
 800ddbe:	605a      	str	r2, [r3, #4]
  }
}
 800ddc0:	bf00      	nop
 800ddc2:	370c      	adds	r7, #12
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddca:	4770      	bx	lr

0800ddcc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ddcc:	b580      	push	{r7, lr}
 800ddce:	b086      	sub	sp, #24
 800ddd0:	af02      	add	r7, sp, #8
 800ddd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	2200      	movs	r2, #0
 800ddd8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800dddc:	f7f9 fe68 	bl	8007ab0 <HAL_GetTick>
 800dde0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	f003 0308 	and.w	r3, r3, #8
 800ddec:	2b08      	cmp	r3, #8
 800ddee:	d10e      	bne.n	800de0e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ddf0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ddf4:	9300      	str	r3, [sp, #0]
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ddfe:	6878      	ldr	r0, [r7, #4]
 800de00:	f000 f82f 	bl	800de62 <UART_WaitOnFlagUntilTimeout>
 800de04:	4603      	mov	r3, r0
 800de06:	2b00      	cmp	r3, #0
 800de08:	d001      	beq.n	800de0e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800de0a:	2303      	movs	r3, #3
 800de0c:	e025      	b.n	800de5a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	f003 0304 	and.w	r3, r3, #4
 800de18:	2b04      	cmp	r3, #4
 800de1a:	d10e      	bne.n	800de3a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800de1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800de20:	9300      	str	r3, [sp, #0]
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	2200      	movs	r2, #0
 800de26:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800de2a:	6878      	ldr	r0, [r7, #4]
 800de2c:	f000 f819 	bl	800de62 <UART_WaitOnFlagUntilTimeout>
 800de30:	4603      	mov	r3, r0
 800de32:	2b00      	cmp	r3, #0
 800de34:	d001      	beq.n	800de3a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800de36:	2303      	movs	r3, #3
 800de38:	e00f      	b.n	800de5a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	2220      	movs	r2, #32
 800de3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	2220      	movs	r2, #32
 800de46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	2200      	movs	r2, #0
 800de4e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	2200      	movs	r2, #0
 800de54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800de58:	2300      	movs	r3, #0
}
 800de5a:	4618      	mov	r0, r3
 800de5c:	3710      	adds	r7, #16
 800de5e:	46bd      	mov	sp, r7
 800de60:	bd80      	pop	{r7, pc}

0800de62 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800de62:	b580      	push	{r7, lr}
 800de64:	b09c      	sub	sp, #112	; 0x70
 800de66:	af00      	add	r7, sp, #0
 800de68:	60f8      	str	r0, [r7, #12]
 800de6a:	60b9      	str	r1, [r7, #8]
 800de6c:	603b      	str	r3, [r7, #0]
 800de6e:	4613      	mov	r3, r2
 800de70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800de72:	e0a9      	b.n	800dfc8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800de74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800de76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de7a:	f000 80a5 	beq.w	800dfc8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800de7e:	f7f9 fe17 	bl	8007ab0 <HAL_GetTick>
 800de82:	4602      	mov	r2, r0
 800de84:	683b      	ldr	r3, [r7, #0]
 800de86:	1ad3      	subs	r3, r2, r3
 800de88:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800de8a:	429a      	cmp	r2, r3
 800de8c:	d302      	bcc.n	800de94 <UART_WaitOnFlagUntilTimeout+0x32>
 800de8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800de90:	2b00      	cmp	r3, #0
 800de92:	d140      	bne.n	800df16 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de9c:	e853 3f00 	ldrex	r3, [r3]
 800dea0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800dea2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dea4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800dea8:	667b      	str	r3, [r7, #100]	; 0x64
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	461a      	mov	r2, r3
 800deb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800deb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800deb4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800deb6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800deb8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800deba:	e841 2300 	strex	r3, r2, [r1]
 800debe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800dec0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d1e6      	bne.n	800de94 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	3308      	adds	r3, #8
 800decc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ded0:	e853 3f00 	ldrex	r3, [r3]
 800ded4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ded6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ded8:	f023 0301 	bic.w	r3, r3, #1
 800dedc:	663b      	str	r3, [r7, #96]	; 0x60
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	3308      	adds	r3, #8
 800dee4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dee6:	64ba      	str	r2, [r7, #72]	; 0x48
 800dee8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800deea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800deec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800deee:	e841 2300 	strex	r3, r2, [r1]
 800def2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800def4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800def6:	2b00      	cmp	r3, #0
 800def8:	d1e5      	bne.n	800dec6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	2220      	movs	r2, #32
 800defe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	2220      	movs	r2, #32
 800df06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	2200      	movs	r2, #0
 800df0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800df12:	2303      	movs	r3, #3
 800df14:	e069      	b.n	800dfea <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	f003 0304 	and.w	r3, r3, #4
 800df20:	2b00      	cmp	r3, #0
 800df22:	d051      	beq.n	800dfc8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	69db      	ldr	r3, [r3, #28]
 800df2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800df2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800df32:	d149      	bne.n	800dfc8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800df3c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df46:	e853 3f00 	ldrex	r3, [r3]
 800df4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800df4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df4e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800df52:	66fb      	str	r3, [r7, #108]	; 0x6c
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	461a      	mov	r2, r3
 800df5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800df5c:	637b      	str	r3, [r7, #52]	; 0x34
 800df5e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800df62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800df64:	e841 2300 	strex	r3, r2, [r1]
 800df68:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800df6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d1e6      	bne.n	800df3e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	3308      	adds	r3, #8
 800df76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df78:	697b      	ldr	r3, [r7, #20]
 800df7a:	e853 3f00 	ldrex	r3, [r3]
 800df7e:	613b      	str	r3, [r7, #16]
   return(result);
 800df80:	693b      	ldr	r3, [r7, #16]
 800df82:	f023 0301 	bic.w	r3, r3, #1
 800df86:	66bb      	str	r3, [r7, #104]	; 0x68
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	3308      	adds	r3, #8
 800df8e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800df90:	623a      	str	r2, [r7, #32]
 800df92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df94:	69f9      	ldr	r1, [r7, #28]
 800df96:	6a3a      	ldr	r2, [r7, #32]
 800df98:	e841 2300 	strex	r3, r2, [r1]
 800df9c:	61bb      	str	r3, [r7, #24]
   return(result);
 800df9e:	69bb      	ldr	r3, [r7, #24]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d1e5      	bne.n	800df70 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	2220      	movs	r2, #32
 800dfa8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	2220      	movs	r2, #32
 800dfb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	2220      	movs	r2, #32
 800dfb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800dfc4:	2303      	movs	r3, #3
 800dfc6:	e010      	b.n	800dfea <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	69da      	ldr	r2, [r3, #28]
 800dfce:	68bb      	ldr	r3, [r7, #8]
 800dfd0:	4013      	ands	r3, r2
 800dfd2:	68ba      	ldr	r2, [r7, #8]
 800dfd4:	429a      	cmp	r2, r3
 800dfd6:	bf0c      	ite	eq
 800dfd8:	2301      	moveq	r3, #1
 800dfda:	2300      	movne	r3, #0
 800dfdc:	b2db      	uxtb	r3, r3
 800dfde:	461a      	mov	r2, r3
 800dfe0:	79fb      	ldrb	r3, [r7, #7]
 800dfe2:	429a      	cmp	r2, r3
 800dfe4:	f43f af46 	beq.w	800de74 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dfe8:	2300      	movs	r3, #0
}
 800dfea:	4618      	mov	r0, r3
 800dfec:	3770      	adds	r7, #112	; 0x70
 800dfee:	46bd      	mov	sp, r7
 800dff0:	bd80      	pop	{r7, pc}
	...

0800dff4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b096      	sub	sp, #88	; 0x58
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	60f8      	str	r0, [r7, #12]
 800dffc:	60b9      	str	r1, [r7, #8]
 800dffe:	4613      	mov	r3, r2
 800e000:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	68ba      	ldr	r2, [r7, #8]
 800e006:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	88fa      	ldrh	r2, [r7, #6]
 800e00c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	2200      	movs	r2, #0
 800e014:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	2222      	movs	r2, #34	; 0x22
 800e01c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e024:	2b00      	cmp	r3, #0
 800e026:	d02c      	beq.n	800e082 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e02c:	4a42      	ldr	r2, [pc, #264]	; (800e138 <UART_Start_Receive_DMA+0x144>)
 800e02e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e034:	4a41      	ldr	r2, [pc, #260]	; (800e13c <UART_Start_Receive_DMA+0x148>)
 800e036:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e03c:	4a40      	ldr	r2, [pc, #256]	; (800e140 <UART_Start_Receive_DMA+0x14c>)
 800e03e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e044:	2200      	movs	r2, #0
 800e046:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	3324      	adds	r3, #36	; 0x24
 800e052:	4619      	mov	r1, r3
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e058:	461a      	mov	r2, r3
 800e05a:	88fb      	ldrh	r3, [r7, #6]
 800e05c:	f7f9 fefe 	bl	8007e5c <HAL_DMA_Start_IT>
 800e060:	4603      	mov	r3, r0
 800e062:	2b00      	cmp	r3, #0
 800e064:	d00d      	beq.n	800e082 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	2210      	movs	r2, #16
 800e06a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	2200      	movs	r2, #0
 800e072:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	2220      	movs	r2, #32
 800e07a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800e07e:	2301      	movs	r3, #1
 800e080:	e055      	b.n	800e12e <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	2200      	movs	r2, #0
 800e086:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	691b      	ldr	r3, [r3, #16]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d018      	beq.n	800e0c4 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e09a:	e853 3f00 	ldrex	r3, [r3]
 800e09e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e0a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e0a6:	657b      	str	r3, [r7, #84]	; 0x54
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	461a      	mov	r2, r3
 800e0ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e0b0:	64bb      	str	r3, [r7, #72]	; 0x48
 800e0b2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0b4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e0b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e0b8:	e841 2300 	strex	r3, r2, [r1]
 800e0bc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e0be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d1e6      	bne.n	800e092 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	3308      	adds	r3, #8
 800e0ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ce:	e853 3f00 	ldrex	r3, [r3]
 800e0d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0d6:	f043 0301 	orr.w	r3, r3, #1
 800e0da:	653b      	str	r3, [r7, #80]	; 0x50
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	3308      	adds	r3, #8
 800e0e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e0e4:	637a      	str	r2, [r7, #52]	; 0x34
 800e0e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e0ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e0ec:	e841 2300 	strex	r3, r2, [r1]
 800e0f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e0f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d1e5      	bne.n	800e0c4 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	3308      	adds	r3, #8
 800e0fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e100:	697b      	ldr	r3, [r7, #20]
 800e102:	e853 3f00 	ldrex	r3, [r3]
 800e106:	613b      	str	r3, [r7, #16]
   return(result);
 800e108:	693b      	ldr	r3, [r7, #16]
 800e10a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e10e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	3308      	adds	r3, #8
 800e116:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e118:	623a      	str	r2, [r7, #32]
 800e11a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e11c:	69f9      	ldr	r1, [r7, #28]
 800e11e:	6a3a      	ldr	r2, [r7, #32]
 800e120:	e841 2300 	strex	r3, r2, [r1]
 800e124:	61bb      	str	r3, [r7, #24]
   return(result);
 800e126:	69bb      	ldr	r3, [r7, #24]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d1e5      	bne.n	800e0f8 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800e12c:	2300      	movs	r3, #0
}
 800e12e:	4618      	mov	r0, r3
 800e130:	3758      	adds	r7, #88	; 0x58
 800e132:	46bd      	mov	sp, r7
 800e134:	bd80      	pop	{r7, pc}
 800e136:	bf00      	nop
 800e138:	0800e293 	.word	0x0800e293
 800e13c:	0800e3b9 	.word	0x0800e3b9
 800e140:	0800e3f1 	.word	0x0800e3f1

0800e144 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e144:	b480      	push	{r7}
 800e146:	b08f      	sub	sp, #60	; 0x3c
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
#if defined(USART_CR1_FIFOEN)
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e152:	6a3b      	ldr	r3, [r7, #32]
 800e154:	e853 3f00 	ldrex	r3, [r3]
 800e158:	61fb      	str	r3, [r7, #28]
   return(result);
 800e15a:	69fb      	ldr	r3, [r7, #28]
 800e15c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e160:	637b      	str	r3, [r7, #52]	; 0x34
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	461a      	mov	r2, r3
 800e168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e16a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e16c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e16e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e170:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e172:	e841 2300 	strex	r3, r2, [r1]
 800e176:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d1e6      	bne.n	800e14c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	3308      	adds	r3, #8
 800e184:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	e853 3f00 	ldrex	r3, [r3]
 800e18c:	60bb      	str	r3, [r7, #8]
   return(result);
 800e18e:	68bb      	ldr	r3, [r7, #8]
 800e190:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800e194:	633b      	str	r3, [r7, #48]	; 0x30
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	3308      	adds	r3, #8
 800e19c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e19e:	61ba      	str	r2, [r7, #24]
 800e1a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1a2:	6979      	ldr	r1, [r7, #20]
 800e1a4:	69ba      	ldr	r2, [r7, #24]
 800e1a6:	e841 2300 	strex	r3, r2, [r1]
 800e1aa:	613b      	str	r3, [r7, #16]
   return(result);
 800e1ac:	693b      	ldr	r3, [r7, #16]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d1e5      	bne.n	800e17e <UART_EndTxTransfer+0x3a>
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	2220      	movs	r2, #32
 800e1b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800e1ba:	bf00      	nop
 800e1bc:	373c      	adds	r7, #60	; 0x3c
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c4:	4770      	bx	lr

0800e1c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e1c6:	b480      	push	{r7}
 800e1c8:	b095      	sub	sp, #84	; 0x54
 800e1ca:	af00      	add	r7, sp, #0
 800e1cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1d6:	e853 3f00 	ldrex	r3, [r3]
 800e1da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e1dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e1e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	461a      	mov	r2, r3
 800e1ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e1ec:	643b      	str	r3, [r7, #64]	; 0x40
 800e1ee:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e1f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e1f4:	e841 2300 	strex	r3, r2, [r1]
 800e1f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e1fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d1e6      	bne.n	800e1ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	3308      	adds	r3, #8
 800e206:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e208:	6a3b      	ldr	r3, [r7, #32]
 800e20a:	e853 3f00 	ldrex	r3, [r3]
 800e20e:	61fb      	str	r3, [r7, #28]
   return(result);
 800e210:	69fb      	ldr	r3, [r7, #28]
 800e212:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e216:	f023 0301 	bic.w	r3, r3, #1
 800e21a:	64bb      	str	r3, [r7, #72]	; 0x48
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	3308      	adds	r3, #8
 800e222:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e224:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e226:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e228:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e22a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e22c:	e841 2300 	strex	r3, r2, [r1]
 800e230:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e234:	2b00      	cmp	r3, #0
 800e236:	d1e3      	bne.n	800e200 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e23c:	2b01      	cmp	r3, #1
 800e23e:	d118      	bne.n	800e272 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	e853 3f00 	ldrex	r3, [r3]
 800e24c:	60bb      	str	r3, [r7, #8]
   return(result);
 800e24e:	68bb      	ldr	r3, [r7, #8]
 800e250:	f023 0310 	bic.w	r3, r3, #16
 800e254:	647b      	str	r3, [r7, #68]	; 0x44
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	461a      	mov	r2, r3
 800e25c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e25e:	61bb      	str	r3, [r7, #24]
 800e260:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e262:	6979      	ldr	r1, [r7, #20]
 800e264:	69ba      	ldr	r2, [r7, #24]
 800e266:	e841 2300 	strex	r3, r2, [r1]
 800e26a:	613b      	str	r3, [r7, #16]
   return(result);
 800e26c:	693b      	ldr	r3, [r7, #16]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d1e6      	bne.n	800e240 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	2220      	movs	r2, #32
 800e276:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	2200      	movs	r2, #0
 800e27e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	2200      	movs	r2, #0
 800e284:	671a      	str	r2, [r3, #112]	; 0x70
}
 800e286:	bf00      	nop
 800e288:	3754      	adds	r7, #84	; 0x54
 800e28a:	46bd      	mov	sp, r7
 800e28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e290:	4770      	bx	lr

0800e292 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e292:	b580      	push	{r7, lr}
 800e294:	b09c      	sub	sp, #112	; 0x70
 800e296:	af00      	add	r7, sp, #0
 800e298:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e29e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	f003 0320 	and.w	r3, r3, #32
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d171      	bne.n	800e392 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800e2ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e2b0:	2200      	movs	r2, #0
 800e2b2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e2b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e2be:	e853 3f00 	ldrex	r3, [r3]
 800e2c2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e2c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e2c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e2ca:	66bb      	str	r3, [r7, #104]	; 0x68
 800e2cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	461a      	mov	r2, r3
 800e2d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e2d4:	65bb      	str	r3, [r7, #88]	; 0x58
 800e2d6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e2da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e2dc:	e841 2300 	strex	r3, r2, [r1]
 800e2e0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e2e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d1e6      	bne.n	800e2b6 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e2e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	3308      	adds	r3, #8
 800e2ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2f2:	e853 3f00 	ldrex	r3, [r3]
 800e2f6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e2f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2fa:	f023 0301 	bic.w	r3, r3, #1
 800e2fe:	667b      	str	r3, [r7, #100]	; 0x64
 800e300:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	3308      	adds	r3, #8
 800e306:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e308:	647a      	str	r2, [r7, #68]	; 0x44
 800e30a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e30c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e30e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e310:	e841 2300 	strex	r3, r2, [r1]
 800e314:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d1e5      	bne.n	800e2e8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e31c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	3308      	adds	r3, #8
 800e322:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e326:	e853 3f00 	ldrex	r3, [r3]
 800e32a:	623b      	str	r3, [r7, #32]
   return(result);
 800e32c:	6a3b      	ldr	r3, [r7, #32]
 800e32e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e332:	663b      	str	r3, [r7, #96]	; 0x60
 800e334:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	3308      	adds	r3, #8
 800e33a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e33c:	633a      	str	r2, [r7, #48]	; 0x30
 800e33e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e340:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e342:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e344:	e841 2300 	strex	r3, r2, [r1]
 800e348:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e34a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d1e5      	bne.n	800e31c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e350:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e352:	2220      	movs	r2, #32
 800e354:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e358:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e35a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e35c:	2b01      	cmp	r3, #1
 800e35e:	d118      	bne.n	800e392 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e360:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e366:	693b      	ldr	r3, [r7, #16]
 800e368:	e853 3f00 	ldrex	r3, [r3]
 800e36c:	60fb      	str	r3, [r7, #12]
   return(result);
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	f023 0310 	bic.w	r3, r3, #16
 800e374:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e376:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	461a      	mov	r2, r3
 800e37c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e37e:	61fb      	str	r3, [r7, #28]
 800e380:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e382:	69b9      	ldr	r1, [r7, #24]
 800e384:	69fa      	ldr	r2, [r7, #28]
 800e386:	e841 2300 	strex	r3, r2, [r1]
 800e38a:	617b      	str	r3, [r7, #20]
   return(result);
 800e38c:	697b      	ldr	r3, [r7, #20]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d1e6      	bne.n	800e360 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e392:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e394:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e396:	2b01      	cmp	r3, #1
 800e398:	d107      	bne.n	800e3aa <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e39a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e39c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e3a0:	4619      	mov	r1, r3
 800e3a2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e3a4:	f7f6 fb1e 	bl	80049e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e3a8:	e002      	b.n	800e3b0 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800e3aa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e3ac:	f7ff f952 	bl	800d654 <HAL_UART_RxCpltCallback>
}
 800e3b0:	bf00      	nop
 800e3b2:	3770      	adds	r7, #112	; 0x70
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	bd80      	pop	{r7, pc}

0800e3b8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b084      	sub	sp, #16
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3c4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e3ca:	2b01      	cmp	r3, #1
 800e3cc:	d109      	bne.n	800e3e2 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e3d4:	085b      	lsrs	r3, r3, #1
 800e3d6:	b29b      	uxth	r3, r3
 800e3d8:	4619      	mov	r1, r3
 800e3da:	68f8      	ldr	r0, [r7, #12]
 800e3dc:	f7f6 fb02 	bl	80049e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e3e0:	e002      	b.n	800e3e8 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800e3e2:	68f8      	ldr	r0, [r7, #12]
 800e3e4:	f7ff f940 	bl	800d668 <HAL_UART_RxHalfCpltCallback>
}
 800e3e8:	bf00      	nop
 800e3ea:	3710      	adds	r7, #16
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	bd80      	pop	{r7, pc}

0800e3f0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e3f0:	b580      	push	{r7, lr}
 800e3f2:	b086      	sub	sp, #24
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3fc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e3fe:	697b      	ldr	r3, [r7, #20]
 800e400:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e404:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e406:	697b      	ldr	r3, [r7, #20]
 800e408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e40c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e40e:	697b      	ldr	r3, [r7, #20]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	689b      	ldr	r3, [r3, #8]
 800e414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e418:	2b80      	cmp	r3, #128	; 0x80
 800e41a:	d109      	bne.n	800e430 <UART_DMAError+0x40>
 800e41c:	693b      	ldr	r3, [r7, #16]
 800e41e:	2b21      	cmp	r3, #33	; 0x21
 800e420:	d106      	bne.n	800e430 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e422:	697b      	ldr	r3, [r7, #20]
 800e424:	2200      	movs	r2, #0
 800e426:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800e42a:	6978      	ldr	r0, [r7, #20]
 800e42c:	f7ff fe8a 	bl	800e144 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e430:	697b      	ldr	r3, [r7, #20]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	689b      	ldr	r3, [r3, #8]
 800e436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e43a:	2b40      	cmp	r3, #64	; 0x40
 800e43c:	d109      	bne.n	800e452 <UART_DMAError+0x62>
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	2b22      	cmp	r3, #34	; 0x22
 800e442:	d106      	bne.n	800e452 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e444:	697b      	ldr	r3, [r7, #20]
 800e446:	2200      	movs	r2, #0
 800e448:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800e44c:	6978      	ldr	r0, [r7, #20]
 800e44e:	f7ff feba 	bl	800e1c6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e452:	697b      	ldr	r3, [r7, #20]
 800e454:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e458:	f043 0210 	orr.w	r2, r3, #16
 800e45c:	697b      	ldr	r3, [r7, #20]
 800e45e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e462:	6978      	ldr	r0, [r7, #20]
 800e464:	f7ff f90a 	bl	800d67c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e468:	bf00      	nop
 800e46a:	3718      	adds	r7, #24
 800e46c:	46bd      	mov	sp, r7
 800e46e:	bd80      	pop	{r7, pc}

0800e470 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e470:	b580      	push	{r7, lr}
 800e472:	b084      	sub	sp, #16
 800e474:	af00      	add	r7, sp, #0
 800e476:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e47c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	2200      	movs	r2, #0
 800e482:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	2200      	movs	r2, #0
 800e48a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e48e:	68f8      	ldr	r0, [r7, #12]
 800e490:	f7ff f8f4 	bl	800d67c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e494:	bf00      	nop
 800e496:	3710      	adds	r7, #16
 800e498:	46bd      	mov	sp, r7
 800e49a:	bd80      	pop	{r7, pc}

0800e49c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b088      	sub	sp, #32
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	e853 3f00 	ldrex	r3, [r3]
 800e4b0:	60bb      	str	r3, [r7, #8]
   return(result);
 800e4b2:	68bb      	ldr	r3, [r7, #8]
 800e4b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e4b8:	61fb      	str	r3, [r7, #28]
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	461a      	mov	r2, r3
 800e4c0:	69fb      	ldr	r3, [r7, #28]
 800e4c2:	61bb      	str	r3, [r7, #24]
 800e4c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4c6:	6979      	ldr	r1, [r7, #20]
 800e4c8:	69ba      	ldr	r2, [r7, #24]
 800e4ca:	e841 2300 	strex	r3, r2, [r1]
 800e4ce:	613b      	str	r3, [r7, #16]
   return(result);
 800e4d0:	693b      	ldr	r3, [r7, #16]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d1e6      	bne.n	800e4a4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	2220      	movs	r2, #32
 800e4da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	2200      	movs	r2, #0
 800e4e2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e4e4:	6878      	ldr	r0, [r7, #4]
 800e4e6:	f7ff f8ab 	bl	800d640 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e4ea:	bf00      	nop
 800e4ec:	3720      	adds	r7, #32
 800e4ee:	46bd      	mov	sp, r7
 800e4f0:	bd80      	pop	{r7, pc}

0800e4f2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e4f2:	b480      	push	{r7}
 800e4f4:	b083      	sub	sp, #12
 800e4f6:	af00      	add	r7, sp, #0
 800e4f8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e4fa:	bf00      	nop
 800e4fc:	370c      	adds	r7, #12
 800e4fe:	46bd      	mov	sp, r7
 800e500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e504:	4770      	bx	lr

0800e506 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e506:	b480      	push	{r7}
 800e508:	b083      	sub	sp, #12
 800e50a:	af00      	add	r7, sp, #0
 800e50c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e50e:	bf00      	nop
 800e510:	370c      	adds	r7, #12
 800e512:	46bd      	mov	sp, r7
 800e514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e518:	4770      	bx	lr

0800e51a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e51a:	b480      	push	{r7}
 800e51c:	b083      	sub	sp, #12
 800e51e:	af00      	add	r7, sp, #0
 800e520:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e522:	bf00      	nop
 800e524:	370c      	adds	r7, #12
 800e526:	46bd      	mov	sp, r7
 800e528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e52c:	4770      	bx	lr

0800e52e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e52e:	b480      	push	{r7}
 800e530:	b085      	sub	sp, #20
 800e532:	af00      	add	r7, sp, #0
 800e534:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e53c:	2b01      	cmp	r3, #1
 800e53e:	d101      	bne.n	800e544 <HAL_UARTEx_DisableFifoMode+0x16>
 800e540:	2302      	movs	r3, #2
 800e542:	e027      	b.n	800e594 <HAL_UARTEx_DisableFifoMode+0x66>
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	2201      	movs	r2, #1
 800e548:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	2224      	movs	r2, #36	; 0x24
 800e550:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	681a      	ldr	r2, [r3, #0]
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	f022 0201 	bic.w	r2, r2, #1
 800e56a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e572:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	2200      	movs	r2, #0
 800e578:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	68fa      	ldr	r2, [r7, #12]
 800e580:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	2220      	movs	r2, #32
 800e586:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	2200      	movs	r2, #0
 800e58e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e592:	2300      	movs	r3, #0
}
 800e594:	4618      	mov	r0, r3
 800e596:	3714      	adds	r7, #20
 800e598:	46bd      	mov	sp, r7
 800e59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e59e:	4770      	bx	lr

0800e5a0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b084      	sub	sp, #16
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	6078      	str	r0, [r7, #4]
 800e5a8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e5b0:	2b01      	cmp	r3, #1
 800e5b2:	d101      	bne.n	800e5b8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e5b4:	2302      	movs	r3, #2
 800e5b6:	e02d      	b.n	800e614 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	2201      	movs	r2, #1
 800e5bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	2224      	movs	r2, #36	; 0x24
 800e5c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	681a      	ldr	r2, [r3, #0]
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	f022 0201 	bic.w	r2, r2, #1
 800e5de:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	689b      	ldr	r3, [r3, #8]
 800e5e6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	683a      	ldr	r2, [r7, #0]
 800e5f0:	430a      	orrs	r2, r1
 800e5f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e5f4:	6878      	ldr	r0, [r7, #4]
 800e5f6:	f000 f8ab 	bl	800e750 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	68fa      	ldr	r2, [r7, #12]
 800e600:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	2220      	movs	r2, #32
 800e606:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	2200      	movs	r2, #0
 800e60e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e612:	2300      	movs	r3, #0
}
 800e614:	4618      	mov	r0, r3
 800e616:	3710      	adds	r7, #16
 800e618:	46bd      	mov	sp, r7
 800e61a:	bd80      	pop	{r7, pc}

0800e61c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b084      	sub	sp, #16
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
 800e624:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e62c:	2b01      	cmp	r3, #1
 800e62e:	d101      	bne.n	800e634 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e630:	2302      	movs	r3, #2
 800e632:	e02d      	b.n	800e690 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	2201      	movs	r2, #1
 800e638:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	2224      	movs	r2, #36	; 0x24
 800e640:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	681a      	ldr	r2, [r3, #0]
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	f022 0201 	bic.w	r2, r2, #1
 800e65a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	689b      	ldr	r3, [r3, #8]
 800e662:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	683a      	ldr	r2, [r7, #0]
 800e66c:	430a      	orrs	r2, r1
 800e66e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e670:	6878      	ldr	r0, [r7, #4]
 800e672:	f000 f86d 	bl	800e750 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	68fa      	ldr	r2, [r7, #12]
 800e67c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	2220      	movs	r2, #32
 800e682:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	2200      	movs	r2, #0
 800e68a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e68e:	2300      	movs	r3, #0
}
 800e690:	4618      	mov	r0, r3
 800e692:	3710      	adds	r7, #16
 800e694:	46bd      	mov	sp, r7
 800e696:	bd80      	pop	{r7, pc}

0800e698 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e698:	b580      	push	{r7, lr}
 800e69a:	b08c      	sub	sp, #48	; 0x30
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	60f8      	str	r0, [r7, #12]
 800e6a0:	60b9      	str	r1, [r7, #8]
 800e6a2:	4613      	mov	r3, r2
 800e6a4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e6ac:	2b20      	cmp	r3, #32
 800e6ae:	d14a      	bne.n	800e746 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800e6b0:	68bb      	ldr	r3, [r7, #8]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d002      	beq.n	800e6bc <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800e6b6:	88fb      	ldrh	r3, [r7, #6]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d101      	bne.n	800e6c0 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800e6bc:	2301      	movs	r3, #1
 800e6be:	e043      	b.n	800e748 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
    }

    __HAL_LOCK(huart);
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e6c6:	2b01      	cmp	r3, #1
 800e6c8:	d101      	bne.n	800e6ce <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 800e6ca:	2302      	movs	r3, #2
 800e6cc:	e03c      	b.n	800e748 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	2201      	movs	r2, #1
 800e6d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	2201      	movs	r2, #1
 800e6da:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800e6dc:	88fb      	ldrh	r3, [r7, #6]
 800e6de:	461a      	mov	r2, r3
 800e6e0:	68b9      	ldr	r1, [r7, #8]
 800e6e2:	68f8      	ldr	r0, [r7, #12]
 800e6e4:	f7ff fc86 	bl	800dff4 <UART_Start_Receive_DMA>
 800e6e8:	4603      	mov	r3, r0
 800e6ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800e6ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d124      	bne.n	800e740 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e6fa:	2b01      	cmp	r3, #1
 800e6fc:	d11d      	bne.n	800e73a <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	2210      	movs	r2, #16
 800e704:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e70c:	69bb      	ldr	r3, [r7, #24]
 800e70e:	e853 3f00 	ldrex	r3, [r3]
 800e712:	617b      	str	r3, [r7, #20]
   return(result);
 800e714:	697b      	ldr	r3, [r7, #20]
 800e716:	f043 0310 	orr.w	r3, r3, #16
 800e71a:	62bb      	str	r3, [r7, #40]	; 0x28
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	461a      	mov	r2, r3
 800e722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e724:	627b      	str	r3, [r7, #36]	; 0x24
 800e726:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e728:	6a39      	ldr	r1, [r7, #32]
 800e72a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e72c:	e841 2300 	strex	r3, r2, [r1]
 800e730:	61fb      	str	r3, [r7, #28]
   return(result);
 800e732:	69fb      	ldr	r3, [r7, #28]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d1e6      	bne.n	800e706 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800e738:	e002      	b.n	800e740 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800e73a:	2301      	movs	r3, #1
 800e73c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800e740:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e744:	e000      	b.n	800e748 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800e746:	2302      	movs	r3, #2
  }
}
 800e748:	4618      	mov	r0, r3
 800e74a:	3730      	adds	r7, #48	; 0x30
 800e74c:	46bd      	mov	sp, r7
 800e74e:	bd80      	pop	{r7, pc}

0800e750 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e750:	b480      	push	{r7}
 800e752:	b085      	sub	sp, #20
 800e754:	af00      	add	r7, sp, #0
 800e756:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d108      	bne.n	800e772 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	2201      	movs	r2, #1
 800e764:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	2201      	movs	r2, #1
 800e76c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e770:	e031      	b.n	800e7d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e772:	2308      	movs	r3, #8
 800e774:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e776:	2308      	movs	r3, #8
 800e778:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	689b      	ldr	r3, [r3, #8]
 800e780:	0e5b      	lsrs	r3, r3, #25
 800e782:	b2db      	uxtb	r3, r3
 800e784:	f003 0307 	and.w	r3, r3, #7
 800e788:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	689b      	ldr	r3, [r3, #8]
 800e790:	0f5b      	lsrs	r3, r3, #29
 800e792:	b2db      	uxtb	r3, r3
 800e794:	f003 0307 	and.w	r3, r3, #7
 800e798:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e79a:	7bbb      	ldrb	r3, [r7, #14]
 800e79c:	7b3a      	ldrb	r2, [r7, #12]
 800e79e:	4911      	ldr	r1, [pc, #68]	; (800e7e4 <UARTEx_SetNbDataToProcess+0x94>)
 800e7a0:	5c8a      	ldrb	r2, [r1, r2]
 800e7a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e7a6:	7b3a      	ldrb	r2, [r7, #12]
 800e7a8:	490f      	ldr	r1, [pc, #60]	; (800e7e8 <UARTEx_SetNbDataToProcess+0x98>)
 800e7aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e7ac:	fb93 f3f2 	sdiv	r3, r3, r2
 800e7b0:	b29a      	uxth	r2, r3
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e7b8:	7bfb      	ldrb	r3, [r7, #15]
 800e7ba:	7b7a      	ldrb	r2, [r7, #13]
 800e7bc:	4909      	ldr	r1, [pc, #36]	; (800e7e4 <UARTEx_SetNbDataToProcess+0x94>)
 800e7be:	5c8a      	ldrb	r2, [r1, r2]
 800e7c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e7c4:	7b7a      	ldrb	r2, [r7, #13]
 800e7c6:	4908      	ldr	r1, [pc, #32]	; (800e7e8 <UARTEx_SetNbDataToProcess+0x98>)
 800e7c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e7ca:	fb93 f3f2 	sdiv	r3, r3, r2
 800e7ce:	b29a      	uxth	r2, r3
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e7d6:	bf00      	nop
 800e7d8:	3714      	adds	r7, #20
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e0:	4770      	bx	lr
 800e7e2:	bf00      	nop
 800e7e4:	08018b70 	.word	0x08018b70
 800e7e8:	08018b78 	.word	0x08018b78

0800e7ec <__NVIC_SetPriority>:
{
 800e7ec:	b480      	push	{r7}
 800e7ee:	b083      	sub	sp, #12
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	4603      	mov	r3, r0
 800e7f4:	6039      	str	r1, [r7, #0]
 800e7f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e7f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	db0a      	blt.n	800e816 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e800:	683b      	ldr	r3, [r7, #0]
 800e802:	b2da      	uxtb	r2, r3
 800e804:	490c      	ldr	r1, [pc, #48]	; (800e838 <__NVIC_SetPriority+0x4c>)
 800e806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e80a:	0112      	lsls	r2, r2, #4
 800e80c:	b2d2      	uxtb	r2, r2
 800e80e:	440b      	add	r3, r1
 800e810:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800e814:	e00a      	b.n	800e82c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e816:	683b      	ldr	r3, [r7, #0]
 800e818:	b2da      	uxtb	r2, r3
 800e81a:	4908      	ldr	r1, [pc, #32]	; (800e83c <__NVIC_SetPriority+0x50>)
 800e81c:	79fb      	ldrb	r3, [r7, #7]
 800e81e:	f003 030f 	and.w	r3, r3, #15
 800e822:	3b04      	subs	r3, #4
 800e824:	0112      	lsls	r2, r2, #4
 800e826:	b2d2      	uxtb	r2, r2
 800e828:	440b      	add	r3, r1
 800e82a:	761a      	strb	r2, [r3, #24]
}
 800e82c:	bf00      	nop
 800e82e:	370c      	adds	r7, #12
 800e830:	46bd      	mov	sp, r7
 800e832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e836:	4770      	bx	lr
 800e838:	e000e100 	.word	0xe000e100
 800e83c:	e000ed00 	.word	0xe000ed00

0800e840 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800e840:	b580      	push	{r7, lr}
 800e842:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800e844:	4b05      	ldr	r3, [pc, #20]	; (800e85c <SysTick_Handler+0x1c>)
 800e846:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800e848:	f002 fde8 	bl	801141c <xTaskGetSchedulerState>
 800e84c:	4603      	mov	r3, r0
 800e84e:	2b01      	cmp	r3, #1
 800e850:	d001      	beq.n	800e856 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800e852:	f003 fdc1 	bl	80123d8 <xPortSysTickHandler>
  }
}
 800e856:	bf00      	nop
 800e858:	bd80      	pop	{r7, pc}
 800e85a:	bf00      	nop
 800e85c:	e000e010 	.word	0xe000e010

0800e860 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800e860:	b580      	push	{r7, lr}
 800e862:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800e864:	2100      	movs	r1, #0
 800e866:	f06f 0004 	mvn.w	r0, #4
 800e86a:	f7ff ffbf 	bl	800e7ec <__NVIC_SetPriority>
#endif
}
 800e86e:	bf00      	nop
 800e870:	bd80      	pop	{r7, pc}
	...

0800e874 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e874:	b480      	push	{r7}
 800e876:	b083      	sub	sp, #12
 800e878:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e87a:	f3ef 8305 	mrs	r3, IPSR
 800e87e:	603b      	str	r3, [r7, #0]
  return(result);
 800e880:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e882:	2b00      	cmp	r3, #0
 800e884:	d003      	beq.n	800e88e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800e886:	f06f 0305 	mvn.w	r3, #5
 800e88a:	607b      	str	r3, [r7, #4]
 800e88c:	e00c      	b.n	800e8a8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e88e:	4b0a      	ldr	r3, [pc, #40]	; (800e8b8 <osKernelInitialize+0x44>)
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d105      	bne.n	800e8a2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e896:	4b08      	ldr	r3, [pc, #32]	; (800e8b8 <osKernelInitialize+0x44>)
 800e898:	2201      	movs	r2, #1
 800e89a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e89c:	2300      	movs	r3, #0
 800e89e:	607b      	str	r3, [r7, #4]
 800e8a0:	e002      	b.n	800e8a8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800e8a2:	f04f 33ff 	mov.w	r3, #4294967295
 800e8a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e8a8:	687b      	ldr	r3, [r7, #4]
}
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	370c      	adds	r7, #12
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b4:	4770      	bx	lr
 800e8b6:	bf00      	nop
 800e8b8:	200045e0 	.word	0x200045e0

0800e8bc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	b082      	sub	sp, #8
 800e8c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e8c2:	f3ef 8305 	mrs	r3, IPSR
 800e8c6:	603b      	str	r3, [r7, #0]
  return(result);
 800e8c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d003      	beq.n	800e8d6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800e8ce:	f06f 0305 	mvn.w	r3, #5
 800e8d2:	607b      	str	r3, [r7, #4]
 800e8d4:	e010      	b.n	800e8f8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800e8d6:	4b0b      	ldr	r3, [pc, #44]	; (800e904 <osKernelStart+0x48>)
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	2b01      	cmp	r3, #1
 800e8dc:	d109      	bne.n	800e8f2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800e8de:	f7ff ffbf 	bl	800e860 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e8e2:	4b08      	ldr	r3, [pc, #32]	; (800e904 <osKernelStart+0x48>)
 800e8e4:	2202      	movs	r2, #2
 800e8e6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e8e8:	f002 f8a2 	bl	8010a30 <vTaskStartScheduler>
      stat = osOK;
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	607b      	str	r3, [r7, #4]
 800e8f0:	e002      	b.n	800e8f8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800e8f2:	f04f 33ff 	mov.w	r3, #4294967295
 800e8f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e8f8:	687b      	ldr	r3, [r7, #4]
}
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	3708      	adds	r7, #8
 800e8fe:	46bd      	mov	sp, r7
 800e900:	bd80      	pop	{r7, pc}
 800e902:	bf00      	nop
 800e904:	200045e0 	.word	0x200045e0

0800e908 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e908:	b580      	push	{r7, lr}
 800e90a:	b08e      	sub	sp, #56	; 0x38
 800e90c:	af04      	add	r7, sp, #16
 800e90e:	60f8      	str	r0, [r7, #12]
 800e910:	60b9      	str	r1, [r7, #8]
 800e912:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e914:	2300      	movs	r3, #0
 800e916:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e918:	f3ef 8305 	mrs	r3, IPSR
 800e91c:	617b      	str	r3, [r7, #20]
  return(result);
 800e91e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800e920:	2b00      	cmp	r3, #0
 800e922:	d17e      	bne.n	800ea22 <osThreadNew+0x11a>
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	2b00      	cmp	r3, #0
 800e928:	d07b      	beq.n	800ea22 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800e92a:	2380      	movs	r3, #128	; 0x80
 800e92c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800e92e:	2318      	movs	r3, #24
 800e930:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800e932:	2300      	movs	r3, #0
 800e934:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800e936:	f04f 33ff 	mov.w	r3, #4294967295
 800e93a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d045      	beq.n	800e9ce <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d002      	beq.n	800e950 <osThreadNew+0x48>
        name = attr->name;
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	699b      	ldr	r3, [r3, #24]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d002      	beq.n	800e95e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	699b      	ldr	r3, [r3, #24]
 800e95c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e95e:	69fb      	ldr	r3, [r7, #28]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d008      	beq.n	800e976 <osThreadNew+0x6e>
 800e964:	69fb      	ldr	r3, [r7, #28]
 800e966:	2b38      	cmp	r3, #56	; 0x38
 800e968:	d805      	bhi.n	800e976 <osThreadNew+0x6e>
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	685b      	ldr	r3, [r3, #4]
 800e96e:	f003 0301 	and.w	r3, r3, #1
 800e972:	2b00      	cmp	r3, #0
 800e974:	d001      	beq.n	800e97a <osThreadNew+0x72>
        return (NULL);
 800e976:	2300      	movs	r3, #0
 800e978:	e054      	b.n	800ea24 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	695b      	ldr	r3, [r3, #20]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d003      	beq.n	800e98a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	695b      	ldr	r3, [r3, #20]
 800e986:	089b      	lsrs	r3, r3, #2
 800e988:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	689b      	ldr	r3, [r3, #8]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d00e      	beq.n	800e9b0 <osThreadNew+0xa8>
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	68db      	ldr	r3, [r3, #12]
 800e996:	2b6b      	cmp	r3, #107	; 0x6b
 800e998:	d90a      	bls.n	800e9b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d006      	beq.n	800e9b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	695b      	ldr	r3, [r3, #20]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d002      	beq.n	800e9b0 <osThreadNew+0xa8>
        mem = 1;
 800e9aa:	2301      	movs	r3, #1
 800e9ac:	61bb      	str	r3, [r7, #24]
 800e9ae:	e010      	b.n	800e9d2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	689b      	ldr	r3, [r3, #8]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d10c      	bne.n	800e9d2 <osThreadNew+0xca>
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	68db      	ldr	r3, [r3, #12]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d108      	bne.n	800e9d2 <osThreadNew+0xca>
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	691b      	ldr	r3, [r3, #16]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d104      	bne.n	800e9d2 <osThreadNew+0xca>
          mem = 0;
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	61bb      	str	r3, [r7, #24]
 800e9cc:	e001      	b.n	800e9d2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e9d2:	69bb      	ldr	r3, [r7, #24]
 800e9d4:	2b01      	cmp	r3, #1
 800e9d6:	d110      	bne.n	800e9fa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800e9dc:	687a      	ldr	r2, [r7, #4]
 800e9de:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e9e0:	9202      	str	r2, [sp, #8]
 800e9e2:	9301      	str	r3, [sp, #4]
 800e9e4:	69fb      	ldr	r3, [r7, #28]
 800e9e6:	9300      	str	r3, [sp, #0]
 800e9e8:	68bb      	ldr	r3, [r7, #8]
 800e9ea:	6a3a      	ldr	r2, [r7, #32]
 800e9ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e9ee:	68f8      	ldr	r0, [r7, #12]
 800e9f0:	f001 fe48 	bl	8010684 <xTaskCreateStatic>
 800e9f4:	4603      	mov	r3, r0
 800e9f6:	613b      	str	r3, [r7, #16]
 800e9f8:	e013      	b.n	800ea22 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800e9fa:	69bb      	ldr	r3, [r7, #24]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d110      	bne.n	800ea22 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ea00:	6a3b      	ldr	r3, [r7, #32]
 800ea02:	b29a      	uxth	r2, r3
 800ea04:	f107 0310 	add.w	r3, r7, #16
 800ea08:	9301      	str	r3, [sp, #4]
 800ea0a:	69fb      	ldr	r3, [r7, #28]
 800ea0c:	9300      	str	r3, [sp, #0]
 800ea0e:	68bb      	ldr	r3, [r7, #8]
 800ea10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ea12:	68f8      	ldr	r0, [r7, #12]
 800ea14:	f001 fe93 	bl	801073e <xTaskCreate>
 800ea18:	4603      	mov	r3, r0
 800ea1a:	2b01      	cmp	r3, #1
 800ea1c:	d001      	beq.n	800ea22 <osThreadNew+0x11a>
            hTask = NULL;
 800ea1e:	2300      	movs	r3, #0
 800ea20:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ea22:	693b      	ldr	r3, [r7, #16]
}
 800ea24:	4618      	mov	r0, r3
 800ea26:	3728      	adds	r7, #40	; 0x28
 800ea28:	46bd      	mov	sp, r7
 800ea2a:	bd80      	pop	{r7, pc}

0800ea2c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ea2c:	b580      	push	{r7, lr}
 800ea2e:	b084      	sub	sp, #16
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ea34:	f3ef 8305 	mrs	r3, IPSR
 800ea38:	60bb      	str	r3, [r7, #8]
  return(result);
 800ea3a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d003      	beq.n	800ea48 <osDelay+0x1c>
    stat = osErrorISR;
 800ea40:	f06f 0305 	mvn.w	r3, #5
 800ea44:	60fb      	str	r3, [r7, #12]
 800ea46:	e007      	b.n	800ea58 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ea48:	2300      	movs	r3, #0
 800ea4a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d002      	beq.n	800ea58 <osDelay+0x2c>
      vTaskDelay(ticks);
 800ea52:	6878      	ldr	r0, [r7, #4]
 800ea54:	f001 ffb8 	bl	80109c8 <vTaskDelay>
    }
  }

  return (stat);
 800ea58:	68fb      	ldr	r3, [r7, #12]
}
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	3710      	adds	r7, #16
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	bd80      	pop	{r7, pc}

0800ea62 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800ea62:	b580      	push	{r7, lr}
 800ea64:	b084      	sub	sp, #16
 800ea66:	af00      	add	r7, sp, #0
 800ea68:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800ea6a:	6878      	ldr	r0, [r7, #4]
 800ea6c:	f003 fab4 	bl	8011fd8 <pvTimerGetTimerID>
 800ea70:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d005      	beq.n	800ea84 <TimerCallback+0x22>
    callb->func (callb->arg);
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	68fa      	ldr	r2, [r7, #12]
 800ea7e:	6852      	ldr	r2, [r2, #4]
 800ea80:	4610      	mov	r0, r2
 800ea82:	4798      	blx	r3
  }
}
 800ea84:	bf00      	nop
 800ea86:	3710      	adds	r7, #16
 800ea88:	46bd      	mov	sp, r7
 800ea8a:	bd80      	pop	{r7, pc}

0800ea8c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800ea8c:	b580      	push	{r7, lr}
 800ea8e:	b08c      	sub	sp, #48	; 0x30
 800ea90:	af02      	add	r7, sp, #8
 800ea92:	60f8      	str	r0, [r7, #12]
 800ea94:	607a      	str	r2, [r7, #4]
 800ea96:	603b      	str	r3, [r7, #0]
 800ea98:	460b      	mov	r3, r1
 800ea9a:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800ea9c:	2300      	movs	r3, #0
 800ea9e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eaa0:	f3ef 8305 	mrs	r3, IPSR
 800eaa4:	613b      	str	r3, [r7, #16]
  return(result);
 800eaa6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d163      	bne.n	800eb74 <osTimerNew+0xe8>
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d060      	beq.n	800eb74 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800eab2:	2008      	movs	r0, #8
 800eab4:	f003 fd20 	bl	80124f8 <pvPortMalloc>
 800eab8:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800eaba:	697b      	ldr	r3, [r7, #20]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d059      	beq.n	800eb74 <osTimerNew+0xe8>
      callb->func = func;
 800eac0:	697b      	ldr	r3, [r7, #20]
 800eac2:	68fa      	ldr	r2, [r7, #12]
 800eac4:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800eac6:	697b      	ldr	r3, [r7, #20]
 800eac8:	687a      	ldr	r2, [r7, #4]
 800eaca:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800eacc:	7afb      	ldrb	r3, [r7, #11]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d102      	bne.n	800ead8 <osTimerNew+0x4c>
        reload = pdFALSE;
 800ead2:	2300      	movs	r3, #0
 800ead4:	61fb      	str	r3, [r7, #28]
 800ead6:	e001      	b.n	800eadc <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800ead8:	2301      	movs	r3, #1
 800eada:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800eadc:	f04f 33ff 	mov.w	r3, #4294967295
 800eae0:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800eae2:	2300      	movs	r3, #0
 800eae4:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800eae6:	683b      	ldr	r3, [r7, #0]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d01c      	beq.n	800eb26 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800eaec:	683b      	ldr	r3, [r7, #0]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d002      	beq.n	800eafa <osTimerNew+0x6e>
          name = attr->name;
 800eaf4:	683b      	ldr	r3, [r7, #0]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800eafa:	683b      	ldr	r3, [r7, #0]
 800eafc:	689b      	ldr	r3, [r3, #8]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d006      	beq.n	800eb10 <osTimerNew+0x84>
 800eb02:	683b      	ldr	r3, [r7, #0]
 800eb04:	68db      	ldr	r3, [r3, #12]
 800eb06:	2b2b      	cmp	r3, #43	; 0x2b
 800eb08:	d902      	bls.n	800eb10 <osTimerNew+0x84>
          mem = 1;
 800eb0a:	2301      	movs	r3, #1
 800eb0c:	61bb      	str	r3, [r7, #24]
 800eb0e:	e00c      	b.n	800eb2a <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800eb10:	683b      	ldr	r3, [r7, #0]
 800eb12:	689b      	ldr	r3, [r3, #8]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d108      	bne.n	800eb2a <osTimerNew+0x9e>
 800eb18:	683b      	ldr	r3, [r7, #0]
 800eb1a:	68db      	ldr	r3, [r3, #12]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d104      	bne.n	800eb2a <osTimerNew+0x9e>
            mem = 0;
 800eb20:	2300      	movs	r3, #0
 800eb22:	61bb      	str	r3, [r7, #24]
 800eb24:	e001      	b.n	800eb2a <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800eb26:	2300      	movs	r3, #0
 800eb28:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800eb2a:	69bb      	ldr	r3, [r7, #24]
 800eb2c:	2b01      	cmp	r3, #1
 800eb2e:	d10c      	bne.n	800eb4a <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800eb30:	683b      	ldr	r3, [r7, #0]
 800eb32:	689b      	ldr	r3, [r3, #8]
 800eb34:	9301      	str	r3, [sp, #4]
 800eb36:	4b12      	ldr	r3, [pc, #72]	; (800eb80 <osTimerNew+0xf4>)
 800eb38:	9300      	str	r3, [sp, #0]
 800eb3a:	697b      	ldr	r3, [r7, #20]
 800eb3c:	69fa      	ldr	r2, [r7, #28]
 800eb3e:	2101      	movs	r1, #1
 800eb40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eb42:	f002 feca 	bl	80118da <xTimerCreateStatic>
 800eb46:	6238      	str	r0, [r7, #32]
 800eb48:	e00b      	b.n	800eb62 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800eb4a:	69bb      	ldr	r3, [r7, #24]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d108      	bne.n	800eb62 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800eb50:	4b0b      	ldr	r3, [pc, #44]	; (800eb80 <osTimerNew+0xf4>)
 800eb52:	9300      	str	r3, [sp, #0]
 800eb54:	697b      	ldr	r3, [r7, #20]
 800eb56:	69fa      	ldr	r2, [r7, #28]
 800eb58:	2101      	movs	r1, #1
 800eb5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eb5c:	f002 fe9c 	bl	8011898 <xTimerCreate>
 800eb60:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800eb62:	6a3b      	ldr	r3, [r7, #32]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d105      	bne.n	800eb74 <osTimerNew+0xe8>
 800eb68:	697b      	ldr	r3, [r7, #20]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d002      	beq.n	800eb74 <osTimerNew+0xe8>
        vPortFree (callb);
 800eb6e:	6978      	ldr	r0, [r7, #20]
 800eb70:	f003 fd8e 	bl	8012690 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800eb74:	6a3b      	ldr	r3, [r7, #32]
}
 800eb76:	4618      	mov	r0, r3
 800eb78:	3728      	adds	r7, #40	; 0x28
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	bd80      	pop	{r7, pc}
 800eb7e:	bf00      	nop
 800eb80:	0800ea63 	.word	0x0800ea63

0800eb84 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800eb84:	b580      	push	{r7, lr}
 800eb86:	b086      	sub	sp, #24
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eb90:	f3ef 8305 	mrs	r3, IPSR
 800eb94:	60fb      	str	r3, [r7, #12]
  return(result);
 800eb96:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d12d      	bne.n	800ebf8 <osEventFlagsNew+0x74>
    mem = -1;
 800eb9c:	f04f 33ff 	mov.w	r3, #4294967295
 800eba0:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d015      	beq.n	800ebd4 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	689b      	ldr	r3, [r3, #8]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d006      	beq.n	800ebbe <osEventFlagsNew+0x3a>
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	68db      	ldr	r3, [r3, #12]
 800ebb4:	2b1f      	cmp	r3, #31
 800ebb6:	d902      	bls.n	800ebbe <osEventFlagsNew+0x3a>
        mem = 1;
 800ebb8:	2301      	movs	r3, #1
 800ebba:	613b      	str	r3, [r7, #16]
 800ebbc:	e00c      	b.n	800ebd8 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	689b      	ldr	r3, [r3, #8]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d108      	bne.n	800ebd8 <osEventFlagsNew+0x54>
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	68db      	ldr	r3, [r3, #12]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d104      	bne.n	800ebd8 <osEventFlagsNew+0x54>
          mem = 0;
 800ebce:	2300      	movs	r3, #0
 800ebd0:	613b      	str	r3, [r7, #16]
 800ebd2:	e001      	b.n	800ebd8 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800ebd8:	693b      	ldr	r3, [r7, #16]
 800ebda:	2b01      	cmp	r3, #1
 800ebdc:	d106      	bne.n	800ebec <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	689b      	ldr	r3, [r3, #8]
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	f000 fb2c 	bl	800f240 <xEventGroupCreateStatic>
 800ebe8:	6178      	str	r0, [r7, #20]
 800ebea:	e005      	b.n	800ebf8 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800ebec:	693b      	ldr	r3, [r7, #16]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d102      	bne.n	800ebf8 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800ebf2:	f000 fb5c 	bl	800f2ae <xEventGroupCreate>
 800ebf6:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800ebf8:	697b      	ldr	r3, [r7, #20]
}
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	3718      	adds	r7, #24
 800ebfe:	46bd      	mov	sp, r7
 800ec00:	bd80      	pop	{r7, pc}
	...

0800ec04 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b086      	sub	sp, #24
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	6078      	str	r0, [r7, #4]
 800ec0c:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800ec12:	693b      	ldr	r3, [r7, #16]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d004      	beq.n	800ec22 <osEventFlagsSet+0x1e>
 800ec18:	683b      	ldr	r3, [r7, #0]
 800ec1a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d003      	beq.n	800ec2a <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800ec22:	f06f 0303 	mvn.w	r3, #3
 800ec26:	617b      	str	r3, [r7, #20]
 800ec28:	e028      	b.n	800ec7c <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ec2a:	f3ef 8305 	mrs	r3, IPSR
 800ec2e:	60fb      	str	r3, [r7, #12]
  return(result);
 800ec30:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d01d      	beq.n	800ec72 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800ec36:	2300      	movs	r3, #0
 800ec38:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800ec3a:	f107 0308 	add.w	r3, r7, #8
 800ec3e:	461a      	mov	r2, r3
 800ec40:	6839      	ldr	r1, [r7, #0]
 800ec42:	6938      	ldr	r0, [r7, #16]
 800ec44:	f000 fcd6 	bl	800f5f4 <xEventGroupSetBitsFromISR>
 800ec48:	4603      	mov	r3, r0
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d103      	bne.n	800ec56 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 800ec4e:	f06f 0302 	mvn.w	r3, #2
 800ec52:	617b      	str	r3, [r7, #20]
 800ec54:	e012      	b.n	800ec7c <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 800ec56:	683b      	ldr	r3, [r7, #0]
 800ec58:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 800ec5a:	68bb      	ldr	r3, [r7, #8]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d00d      	beq.n	800ec7c <osEventFlagsSet+0x78>
 800ec60:	4b09      	ldr	r3, [pc, #36]	; (800ec88 <osEventFlagsSet+0x84>)
 800ec62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec66:	601a      	str	r2, [r3, #0]
 800ec68:	f3bf 8f4f 	dsb	sy
 800ec6c:	f3bf 8f6f 	isb	sy
 800ec70:	e004      	b.n	800ec7c <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800ec72:	6839      	ldr	r1, [r7, #0]
 800ec74:	6938      	ldr	r0, [r7, #16]
 800ec76:	f000 fc03 	bl	800f480 <xEventGroupSetBits>
 800ec7a:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800ec7c:	697b      	ldr	r3, [r7, #20]
}
 800ec7e:	4618      	mov	r0, r3
 800ec80:	3718      	adds	r7, #24
 800ec82:	46bd      	mov	sp, r7
 800ec84:	bd80      	pop	{r7, pc}
 800ec86:	bf00      	nop
 800ec88:	e000ed04 	.word	0xe000ed04

0800ec8c <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	b08c      	sub	sp, #48	; 0x30
 800ec90:	af02      	add	r7, sp, #8
 800ec92:	60f8      	str	r0, [r7, #12]
 800ec94:	60b9      	str	r1, [r7, #8]
 800ec96:	607a      	str	r2, [r7, #4]
 800ec98:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800ec9e:	69bb      	ldr	r3, [r7, #24]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d004      	beq.n	800ecae <osEventFlagsWait+0x22>
 800eca4:	68bb      	ldr	r3, [r7, #8]
 800eca6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d003      	beq.n	800ecb6 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800ecae:	f06f 0303 	mvn.w	r3, #3
 800ecb2:	61fb      	str	r3, [r7, #28]
 800ecb4:	e04b      	b.n	800ed4e <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ecb6:	f3ef 8305 	mrs	r3, IPSR
 800ecba:	617b      	str	r3, [r7, #20]
  return(result);
 800ecbc:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d003      	beq.n	800ecca <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 800ecc2:	f06f 0305 	mvn.w	r3, #5
 800ecc6:	61fb      	str	r3, [r7, #28]
 800ecc8:	e041      	b.n	800ed4e <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	f003 0301 	and.w	r3, r3, #1
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d002      	beq.n	800ecda <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 800ecd4:	2301      	movs	r3, #1
 800ecd6:	627b      	str	r3, [r7, #36]	; 0x24
 800ecd8:	e001      	b.n	800ecde <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 800ecda:	2300      	movs	r3, #0
 800ecdc:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	f003 0302 	and.w	r3, r3, #2
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d002      	beq.n	800ecee <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 800ece8:	2300      	movs	r3, #0
 800ecea:	623b      	str	r3, [r7, #32]
 800ecec:	e001      	b.n	800ecf2 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 800ecee:	2301      	movs	r3, #1
 800ecf0:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800ecf2:	683b      	ldr	r3, [r7, #0]
 800ecf4:	9300      	str	r3, [sp, #0]
 800ecf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecf8:	6a3a      	ldr	r2, [r7, #32]
 800ecfa:	68b9      	ldr	r1, [r7, #8]
 800ecfc:	69b8      	ldr	r0, [r7, #24]
 800ecfe:	f000 faf1 	bl	800f2e4 <xEventGroupWaitBits>
 800ed02:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	f003 0301 	and.w	r3, r3, #1
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d010      	beq.n	800ed30 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 800ed0e:	68ba      	ldr	r2, [r7, #8]
 800ed10:	69fb      	ldr	r3, [r7, #28]
 800ed12:	4013      	ands	r3, r2
 800ed14:	68ba      	ldr	r2, [r7, #8]
 800ed16:	429a      	cmp	r2, r3
 800ed18:	d019      	beq.n	800ed4e <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800ed1a:	683b      	ldr	r3, [r7, #0]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d003      	beq.n	800ed28 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 800ed20:	f06f 0301 	mvn.w	r3, #1
 800ed24:	61fb      	str	r3, [r7, #28]
 800ed26:	e012      	b.n	800ed4e <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800ed28:	f06f 0302 	mvn.w	r3, #2
 800ed2c:	61fb      	str	r3, [r7, #28]
 800ed2e:	e00e      	b.n	800ed4e <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800ed30:	68ba      	ldr	r2, [r7, #8]
 800ed32:	69fb      	ldr	r3, [r7, #28]
 800ed34:	4013      	ands	r3, r2
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d109      	bne.n	800ed4e <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800ed3a:	683b      	ldr	r3, [r7, #0]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d003      	beq.n	800ed48 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 800ed40:	f06f 0301 	mvn.w	r3, #1
 800ed44:	61fb      	str	r3, [r7, #28]
 800ed46:	e002      	b.n	800ed4e <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800ed48:	f06f 0302 	mvn.w	r3, #2
 800ed4c:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800ed4e:	69fb      	ldr	r3, [r7, #28]
}
 800ed50:	4618      	mov	r0, r3
 800ed52:	3728      	adds	r7, #40	; 0x28
 800ed54:	46bd      	mov	sp, r7
 800ed56:	bd80      	pop	{r7, pc}

0800ed58 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	b088      	sub	sp, #32
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800ed60:	2300      	movs	r3, #0
 800ed62:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ed64:	f3ef 8305 	mrs	r3, IPSR
 800ed68:	60bb      	str	r3, [r7, #8]
  return(result);
 800ed6a:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d174      	bne.n	800ee5a <osMutexNew+0x102>
    if (attr != NULL) {
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d003      	beq.n	800ed7e <osMutexNew+0x26>
      type = attr->attr_bits;
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	685b      	ldr	r3, [r3, #4]
 800ed7a:	61bb      	str	r3, [r7, #24]
 800ed7c:	e001      	b.n	800ed82 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800ed7e:	2300      	movs	r3, #0
 800ed80:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800ed82:	69bb      	ldr	r3, [r7, #24]
 800ed84:	f003 0301 	and.w	r3, r3, #1
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d002      	beq.n	800ed92 <osMutexNew+0x3a>
      rmtx = 1U;
 800ed8c:	2301      	movs	r3, #1
 800ed8e:	617b      	str	r3, [r7, #20]
 800ed90:	e001      	b.n	800ed96 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800ed92:	2300      	movs	r3, #0
 800ed94:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800ed96:	69bb      	ldr	r3, [r7, #24]
 800ed98:	f003 0308 	and.w	r3, r3, #8
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d15c      	bne.n	800ee5a <osMutexNew+0x102>
      mem = -1;
 800eda0:	f04f 33ff 	mov.w	r3, #4294967295
 800eda4:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d015      	beq.n	800edd8 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	689b      	ldr	r3, [r3, #8]
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d006      	beq.n	800edc2 <osMutexNew+0x6a>
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	68db      	ldr	r3, [r3, #12]
 800edb8:	2b4f      	cmp	r3, #79	; 0x4f
 800edba:	d902      	bls.n	800edc2 <osMutexNew+0x6a>
          mem = 1;
 800edbc:	2301      	movs	r3, #1
 800edbe:	613b      	str	r3, [r7, #16]
 800edc0:	e00c      	b.n	800eddc <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	689b      	ldr	r3, [r3, #8]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d108      	bne.n	800eddc <osMutexNew+0x84>
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	68db      	ldr	r3, [r3, #12]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d104      	bne.n	800eddc <osMutexNew+0x84>
            mem = 0;
 800edd2:	2300      	movs	r3, #0
 800edd4:	613b      	str	r3, [r7, #16]
 800edd6:	e001      	b.n	800eddc <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800edd8:	2300      	movs	r3, #0
 800edda:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800eddc:	693b      	ldr	r3, [r7, #16]
 800edde:	2b01      	cmp	r3, #1
 800ede0:	d112      	bne.n	800ee08 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800ede2:	697b      	ldr	r3, [r7, #20]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d007      	beq.n	800edf8 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	689b      	ldr	r3, [r3, #8]
 800edec:	4619      	mov	r1, r3
 800edee:	2004      	movs	r0, #4
 800edf0:	f000 fe37 	bl	800fa62 <xQueueCreateMutexStatic>
 800edf4:	61f8      	str	r0, [r7, #28]
 800edf6:	e016      	b.n	800ee26 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	689b      	ldr	r3, [r3, #8]
 800edfc:	4619      	mov	r1, r3
 800edfe:	2001      	movs	r0, #1
 800ee00:	f000 fe2f 	bl	800fa62 <xQueueCreateMutexStatic>
 800ee04:	61f8      	str	r0, [r7, #28]
 800ee06:	e00e      	b.n	800ee26 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800ee08:	693b      	ldr	r3, [r7, #16]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d10b      	bne.n	800ee26 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800ee0e:	697b      	ldr	r3, [r7, #20]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d004      	beq.n	800ee1e <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800ee14:	2004      	movs	r0, #4
 800ee16:	f000 fe0c 	bl	800fa32 <xQueueCreateMutex>
 800ee1a:	61f8      	str	r0, [r7, #28]
 800ee1c:	e003      	b.n	800ee26 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800ee1e:	2001      	movs	r0, #1
 800ee20:	f000 fe07 	bl	800fa32 <xQueueCreateMutex>
 800ee24:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800ee26:	69fb      	ldr	r3, [r7, #28]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d00c      	beq.n	800ee46 <osMutexNew+0xee>
        if (attr != NULL) {
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d003      	beq.n	800ee3a <osMutexNew+0xe2>
          name = attr->name;
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	60fb      	str	r3, [r7, #12]
 800ee38:	e001      	b.n	800ee3e <osMutexNew+0xe6>
        } else {
          name = NULL;
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800ee3e:	68f9      	ldr	r1, [r7, #12]
 800ee40:	69f8      	ldr	r0, [r7, #28]
 800ee42:	f001 fbc1 	bl	80105c8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800ee46:	69fb      	ldr	r3, [r7, #28]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d006      	beq.n	800ee5a <osMutexNew+0x102>
 800ee4c:	697b      	ldr	r3, [r7, #20]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d003      	beq.n	800ee5a <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800ee52:	69fb      	ldr	r3, [r7, #28]
 800ee54:	f043 0301 	orr.w	r3, r3, #1
 800ee58:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800ee5a:	69fb      	ldr	r3, [r7, #28]
}
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	3720      	adds	r7, #32
 800ee60:	46bd      	mov	sp, r7
 800ee62:	bd80      	pop	{r7, pc}

0800ee64 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800ee64:	b580      	push	{r7, lr}
 800ee66:	b086      	sub	sp, #24
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	6078      	str	r0, [r7, #4]
 800ee6c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	f023 0301 	bic.w	r3, r3, #1
 800ee74:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	f003 0301 	and.w	r3, r3, #1
 800ee7c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800ee7e:	2300      	movs	r3, #0
 800ee80:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ee82:	f3ef 8305 	mrs	r3, IPSR
 800ee86:	60bb      	str	r3, [r7, #8]
  return(result);
 800ee88:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d003      	beq.n	800ee96 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800ee8e:	f06f 0305 	mvn.w	r3, #5
 800ee92:	617b      	str	r3, [r7, #20]
 800ee94:	e02c      	b.n	800eef0 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800ee96:	693b      	ldr	r3, [r7, #16]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d103      	bne.n	800eea4 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800ee9c:	f06f 0303 	mvn.w	r3, #3
 800eea0:	617b      	str	r3, [r7, #20]
 800eea2:	e025      	b.n	800eef0 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d011      	beq.n	800eece <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800eeaa:	6839      	ldr	r1, [r7, #0]
 800eeac:	6938      	ldr	r0, [r7, #16]
 800eeae:	f000 fe27 	bl	800fb00 <xQueueTakeMutexRecursive>
 800eeb2:	4603      	mov	r3, r0
 800eeb4:	2b01      	cmp	r3, #1
 800eeb6:	d01b      	beq.n	800eef0 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800eeb8:	683b      	ldr	r3, [r7, #0]
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d003      	beq.n	800eec6 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800eebe:	f06f 0301 	mvn.w	r3, #1
 800eec2:	617b      	str	r3, [r7, #20]
 800eec4:	e014      	b.n	800eef0 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800eec6:	f06f 0302 	mvn.w	r3, #2
 800eeca:	617b      	str	r3, [r7, #20]
 800eecc:	e010      	b.n	800eef0 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800eece:	6839      	ldr	r1, [r7, #0]
 800eed0:	6938      	ldr	r0, [r7, #16]
 800eed2:	f001 f8c5 	bl	8010060 <xQueueSemaphoreTake>
 800eed6:	4603      	mov	r3, r0
 800eed8:	2b01      	cmp	r3, #1
 800eeda:	d009      	beq.n	800eef0 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800eedc:	683b      	ldr	r3, [r7, #0]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d003      	beq.n	800eeea <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800eee2:	f06f 0301 	mvn.w	r3, #1
 800eee6:	617b      	str	r3, [r7, #20]
 800eee8:	e002      	b.n	800eef0 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800eeea:	f06f 0302 	mvn.w	r3, #2
 800eeee:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800eef0:	697b      	ldr	r3, [r7, #20]
}
 800eef2:	4618      	mov	r0, r3
 800eef4:	3718      	adds	r7, #24
 800eef6:	46bd      	mov	sp, r7
 800eef8:	bd80      	pop	{r7, pc}

0800eefa <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800eefa:	b580      	push	{r7, lr}
 800eefc:	b086      	sub	sp, #24
 800eefe:	af00      	add	r7, sp, #0
 800ef00:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	f023 0301 	bic.w	r3, r3, #1
 800ef08:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	f003 0301 	and.w	r3, r3, #1
 800ef10:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800ef12:	2300      	movs	r3, #0
 800ef14:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ef16:	f3ef 8305 	mrs	r3, IPSR
 800ef1a:	60bb      	str	r3, [r7, #8]
  return(result);
 800ef1c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d003      	beq.n	800ef2a <osMutexRelease+0x30>
    stat = osErrorISR;
 800ef22:	f06f 0305 	mvn.w	r3, #5
 800ef26:	617b      	str	r3, [r7, #20]
 800ef28:	e01f      	b.n	800ef6a <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800ef2a:	693b      	ldr	r3, [r7, #16]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d103      	bne.n	800ef38 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800ef30:	f06f 0303 	mvn.w	r3, #3
 800ef34:	617b      	str	r3, [r7, #20]
 800ef36:	e018      	b.n	800ef6a <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d009      	beq.n	800ef52 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800ef3e:	6938      	ldr	r0, [r7, #16]
 800ef40:	f000 fdaa 	bl	800fa98 <xQueueGiveMutexRecursive>
 800ef44:	4603      	mov	r3, r0
 800ef46:	2b01      	cmp	r3, #1
 800ef48:	d00f      	beq.n	800ef6a <osMutexRelease+0x70>
        stat = osErrorResource;
 800ef4a:	f06f 0302 	mvn.w	r3, #2
 800ef4e:	617b      	str	r3, [r7, #20]
 800ef50:	e00b      	b.n	800ef6a <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800ef52:	2300      	movs	r3, #0
 800ef54:	2200      	movs	r2, #0
 800ef56:	2100      	movs	r1, #0
 800ef58:	6938      	ldr	r0, [r7, #16]
 800ef5a:	f000 fe07 	bl	800fb6c <xQueueGenericSend>
 800ef5e:	4603      	mov	r3, r0
 800ef60:	2b01      	cmp	r3, #1
 800ef62:	d002      	beq.n	800ef6a <osMutexRelease+0x70>
        stat = osErrorResource;
 800ef64:	f06f 0302 	mvn.w	r3, #2
 800ef68:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800ef6a:	697b      	ldr	r3, [r7, #20]
}
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	3718      	adds	r7, #24
 800ef70:	46bd      	mov	sp, r7
 800ef72:	bd80      	pop	{r7, pc}

0800ef74 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b08a      	sub	sp, #40	; 0x28
 800ef78:	af02      	add	r7, sp, #8
 800ef7a:	60f8      	str	r0, [r7, #12]
 800ef7c:	60b9      	str	r1, [r7, #8]
 800ef7e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800ef80:	2300      	movs	r3, #0
 800ef82:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ef84:	f3ef 8305 	mrs	r3, IPSR
 800ef88:	613b      	str	r3, [r7, #16]
  return(result);
 800ef8a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d15f      	bne.n	800f050 <osMessageQueueNew+0xdc>
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d05c      	beq.n	800f050 <osMessageQueueNew+0xdc>
 800ef96:	68bb      	ldr	r3, [r7, #8]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d059      	beq.n	800f050 <osMessageQueueNew+0xdc>
    mem = -1;
 800ef9c:	f04f 33ff 	mov.w	r3, #4294967295
 800efa0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d029      	beq.n	800effc <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	689b      	ldr	r3, [r3, #8]
 800efac:	2b00      	cmp	r3, #0
 800efae:	d012      	beq.n	800efd6 <osMessageQueueNew+0x62>
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	68db      	ldr	r3, [r3, #12]
 800efb4:	2b4f      	cmp	r3, #79	; 0x4f
 800efb6:	d90e      	bls.n	800efd6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d00a      	beq.n	800efd6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	695a      	ldr	r2, [r3, #20]
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	68b9      	ldr	r1, [r7, #8]
 800efc8:	fb01 f303 	mul.w	r3, r1, r3
 800efcc:	429a      	cmp	r2, r3
 800efce:	d302      	bcc.n	800efd6 <osMessageQueueNew+0x62>
        mem = 1;
 800efd0:	2301      	movs	r3, #1
 800efd2:	61bb      	str	r3, [r7, #24]
 800efd4:	e014      	b.n	800f000 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	689b      	ldr	r3, [r3, #8]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d110      	bne.n	800f000 <osMessageQueueNew+0x8c>
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	68db      	ldr	r3, [r3, #12]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d10c      	bne.n	800f000 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800efea:	2b00      	cmp	r3, #0
 800efec:	d108      	bne.n	800f000 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	695b      	ldr	r3, [r3, #20]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d104      	bne.n	800f000 <osMessageQueueNew+0x8c>
          mem = 0;
 800eff6:	2300      	movs	r3, #0
 800eff8:	61bb      	str	r3, [r7, #24]
 800effa:	e001      	b.n	800f000 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800effc:	2300      	movs	r3, #0
 800effe:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800f000:	69bb      	ldr	r3, [r7, #24]
 800f002:	2b01      	cmp	r3, #1
 800f004:	d10b      	bne.n	800f01e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	691a      	ldr	r2, [r3, #16]
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	689b      	ldr	r3, [r3, #8]
 800f00e:	2100      	movs	r1, #0
 800f010:	9100      	str	r1, [sp, #0]
 800f012:	68b9      	ldr	r1, [r7, #8]
 800f014:	68f8      	ldr	r0, [r7, #12]
 800f016:	f000 fc1d 	bl	800f854 <xQueueGenericCreateStatic>
 800f01a:	61f8      	str	r0, [r7, #28]
 800f01c:	e008      	b.n	800f030 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800f01e:	69bb      	ldr	r3, [r7, #24]
 800f020:	2b00      	cmp	r3, #0
 800f022:	d105      	bne.n	800f030 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800f024:	2200      	movs	r2, #0
 800f026:	68b9      	ldr	r1, [r7, #8]
 800f028:	68f8      	ldr	r0, [r7, #12]
 800f02a:	f000 fc8b 	bl	800f944 <xQueueGenericCreate>
 800f02e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800f030:	69fb      	ldr	r3, [r7, #28]
 800f032:	2b00      	cmp	r3, #0
 800f034:	d00c      	beq.n	800f050 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d003      	beq.n	800f044 <osMessageQueueNew+0xd0>
        name = attr->name;
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	617b      	str	r3, [r7, #20]
 800f042:	e001      	b.n	800f048 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800f044:	2300      	movs	r3, #0
 800f046:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800f048:	6979      	ldr	r1, [r7, #20]
 800f04a:	69f8      	ldr	r0, [r7, #28]
 800f04c:	f001 fabc 	bl	80105c8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800f050:	69fb      	ldr	r3, [r7, #28]
}
 800f052:	4618      	mov	r0, r3
 800f054:	3720      	adds	r7, #32
 800f056:	46bd      	mov	sp, r7
 800f058:	bd80      	pop	{r7, pc}
	...

0800f05c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800f05c:	b580      	push	{r7, lr}
 800f05e:	b088      	sub	sp, #32
 800f060:	af00      	add	r7, sp, #0
 800f062:	60f8      	str	r0, [r7, #12]
 800f064:	60b9      	str	r1, [r7, #8]
 800f066:	603b      	str	r3, [r7, #0]
 800f068:	4613      	mov	r3, r2
 800f06a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800f070:	2300      	movs	r3, #0
 800f072:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f074:	f3ef 8305 	mrs	r3, IPSR
 800f078:	617b      	str	r3, [r7, #20]
  return(result);
 800f07a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d028      	beq.n	800f0d2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f080:	69bb      	ldr	r3, [r7, #24]
 800f082:	2b00      	cmp	r3, #0
 800f084:	d005      	beq.n	800f092 <osMessageQueuePut+0x36>
 800f086:	68bb      	ldr	r3, [r7, #8]
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d002      	beq.n	800f092 <osMessageQueuePut+0x36>
 800f08c:	683b      	ldr	r3, [r7, #0]
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d003      	beq.n	800f09a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800f092:	f06f 0303 	mvn.w	r3, #3
 800f096:	61fb      	str	r3, [r7, #28]
 800f098:	e038      	b.n	800f10c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800f09a:	2300      	movs	r3, #0
 800f09c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800f09e:	f107 0210 	add.w	r2, r7, #16
 800f0a2:	2300      	movs	r3, #0
 800f0a4:	68b9      	ldr	r1, [r7, #8]
 800f0a6:	69b8      	ldr	r0, [r7, #24]
 800f0a8:	f000 fe5e 	bl	800fd68 <xQueueGenericSendFromISR>
 800f0ac:	4603      	mov	r3, r0
 800f0ae:	2b01      	cmp	r3, #1
 800f0b0:	d003      	beq.n	800f0ba <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800f0b2:	f06f 0302 	mvn.w	r3, #2
 800f0b6:	61fb      	str	r3, [r7, #28]
 800f0b8:	e028      	b.n	800f10c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800f0ba:	693b      	ldr	r3, [r7, #16]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d025      	beq.n	800f10c <osMessageQueuePut+0xb0>
 800f0c0:	4b15      	ldr	r3, [pc, #84]	; (800f118 <osMessageQueuePut+0xbc>)
 800f0c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f0c6:	601a      	str	r2, [r3, #0]
 800f0c8:	f3bf 8f4f 	dsb	sy
 800f0cc:	f3bf 8f6f 	isb	sy
 800f0d0:	e01c      	b.n	800f10c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f0d2:	69bb      	ldr	r3, [r7, #24]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d002      	beq.n	800f0de <osMessageQueuePut+0x82>
 800f0d8:	68bb      	ldr	r3, [r7, #8]
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d103      	bne.n	800f0e6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800f0de:	f06f 0303 	mvn.w	r3, #3
 800f0e2:	61fb      	str	r3, [r7, #28]
 800f0e4:	e012      	b.n	800f10c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	683a      	ldr	r2, [r7, #0]
 800f0ea:	68b9      	ldr	r1, [r7, #8]
 800f0ec:	69b8      	ldr	r0, [r7, #24]
 800f0ee:	f000 fd3d 	bl	800fb6c <xQueueGenericSend>
 800f0f2:	4603      	mov	r3, r0
 800f0f4:	2b01      	cmp	r3, #1
 800f0f6:	d009      	beq.n	800f10c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800f0f8:	683b      	ldr	r3, [r7, #0]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d003      	beq.n	800f106 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800f0fe:	f06f 0301 	mvn.w	r3, #1
 800f102:	61fb      	str	r3, [r7, #28]
 800f104:	e002      	b.n	800f10c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800f106:	f06f 0302 	mvn.w	r3, #2
 800f10a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800f10c:	69fb      	ldr	r3, [r7, #28]
}
 800f10e:	4618      	mov	r0, r3
 800f110:	3720      	adds	r7, #32
 800f112:	46bd      	mov	sp, r7
 800f114:	bd80      	pop	{r7, pc}
 800f116:	bf00      	nop
 800f118:	e000ed04 	.word	0xe000ed04

0800f11c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800f11c:	b580      	push	{r7, lr}
 800f11e:	b088      	sub	sp, #32
 800f120:	af00      	add	r7, sp, #0
 800f122:	60f8      	str	r0, [r7, #12]
 800f124:	60b9      	str	r1, [r7, #8]
 800f126:	607a      	str	r2, [r7, #4]
 800f128:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800f12e:	2300      	movs	r3, #0
 800f130:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f132:	f3ef 8305 	mrs	r3, IPSR
 800f136:	617b      	str	r3, [r7, #20]
  return(result);
 800f138:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d028      	beq.n	800f190 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f13e:	69bb      	ldr	r3, [r7, #24]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d005      	beq.n	800f150 <osMessageQueueGet+0x34>
 800f144:	68bb      	ldr	r3, [r7, #8]
 800f146:	2b00      	cmp	r3, #0
 800f148:	d002      	beq.n	800f150 <osMessageQueueGet+0x34>
 800f14a:	683b      	ldr	r3, [r7, #0]
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d003      	beq.n	800f158 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800f150:	f06f 0303 	mvn.w	r3, #3
 800f154:	61fb      	str	r3, [r7, #28]
 800f156:	e037      	b.n	800f1c8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800f158:	2300      	movs	r3, #0
 800f15a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800f15c:	f107 0310 	add.w	r3, r7, #16
 800f160:	461a      	mov	r2, r3
 800f162:	68b9      	ldr	r1, [r7, #8]
 800f164:	69b8      	ldr	r0, [r7, #24]
 800f166:	f001 f887 	bl	8010278 <xQueueReceiveFromISR>
 800f16a:	4603      	mov	r3, r0
 800f16c:	2b01      	cmp	r3, #1
 800f16e:	d003      	beq.n	800f178 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800f170:	f06f 0302 	mvn.w	r3, #2
 800f174:	61fb      	str	r3, [r7, #28]
 800f176:	e027      	b.n	800f1c8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800f178:	693b      	ldr	r3, [r7, #16]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d024      	beq.n	800f1c8 <osMessageQueueGet+0xac>
 800f17e:	4b15      	ldr	r3, [pc, #84]	; (800f1d4 <osMessageQueueGet+0xb8>)
 800f180:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f184:	601a      	str	r2, [r3, #0]
 800f186:	f3bf 8f4f 	dsb	sy
 800f18a:	f3bf 8f6f 	isb	sy
 800f18e:	e01b      	b.n	800f1c8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f190:	69bb      	ldr	r3, [r7, #24]
 800f192:	2b00      	cmp	r3, #0
 800f194:	d002      	beq.n	800f19c <osMessageQueueGet+0x80>
 800f196:	68bb      	ldr	r3, [r7, #8]
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d103      	bne.n	800f1a4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800f19c:	f06f 0303 	mvn.w	r3, #3
 800f1a0:	61fb      	str	r3, [r7, #28]
 800f1a2:	e011      	b.n	800f1c8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f1a4:	683a      	ldr	r2, [r7, #0]
 800f1a6:	68b9      	ldr	r1, [r7, #8]
 800f1a8:	69b8      	ldr	r0, [r7, #24]
 800f1aa:	f000 fe79 	bl	800fea0 <xQueueReceive>
 800f1ae:	4603      	mov	r3, r0
 800f1b0:	2b01      	cmp	r3, #1
 800f1b2:	d009      	beq.n	800f1c8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800f1b4:	683b      	ldr	r3, [r7, #0]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d003      	beq.n	800f1c2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800f1ba:	f06f 0301 	mvn.w	r3, #1
 800f1be:	61fb      	str	r3, [r7, #28]
 800f1c0:	e002      	b.n	800f1c8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800f1c2:	f06f 0302 	mvn.w	r3, #2
 800f1c6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800f1c8:	69fb      	ldr	r3, [r7, #28]
}
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	3720      	adds	r7, #32
 800f1ce:	46bd      	mov	sp, r7
 800f1d0:	bd80      	pop	{r7, pc}
 800f1d2:	bf00      	nop
 800f1d4:	e000ed04 	.word	0xe000ed04

0800f1d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800f1d8:	b480      	push	{r7}
 800f1da:	b085      	sub	sp, #20
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	60f8      	str	r0, [r7, #12]
 800f1e0:	60b9      	str	r1, [r7, #8]
 800f1e2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	4a07      	ldr	r2, [pc, #28]	; (800f204 <vApplicationGetIdleTaskMemory+0x2c>)
 800f1e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f1ea:	68bb      	ldr	r3, [r7, #8]
 800f1ec:	4a06      	ldr	r2, [pc, #24]	; (800f208 <vApplicationGetIdleTaskMemory+0x30>)
 800f1ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	2280      	movs	r2, #128	; 0x80
 800f1f4:	601a      	str	r2, [r3, #0]
}
 800f1f6:	bf00      	nop
 800f1f8:	3714      	adds	r7, #20
 800f1fa:	46bd      	mov	sp, r7
 800f1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f200:	4770      	bx	lr
 800f202:	bf00      	nop
 800f204:	200045e4 	.word	0x200045e4
 800f208:	20004650 	.word	0x20004650

0800f20c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800f20c:	b480      	push	{r7}
 800f20e:	b085      	sub	sp, #20
 800f210:	af00      	add	r7, sp, #0
 800f212:	60f8      	str	r0, [r7, #12]
 800f214:	60b9      	str	r1, [r7, #8]
 800f216:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	4a07      	ldr	r2, [pc, #28]	; (800f238 <vApplicationGetTimerTaskMemory+0x2c>)
 800f21c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f21e:	68bb      	ldr	r3, [r7, #8]
 800f220:	4a06      	ldr	r2, [pc, #24]	; (800f23c <vApplicationGetTimerTaskMemory+0x30>)
 800f222:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f22a:	601a      	str	r2, [r3, #0]
}
 800f22c:	bf00      	nop
 800f22e:	3714      	adds	r7, #20
 800f230:	46bd      	mov	sp, r7
 800f232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f236:	4770      	bx	lr
 800f238:	20004850 	.word	0x20004850
 800f23c:	200048bc 	.word	0x200048bc

0800f240 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800f240:	b580      	push	{r7, lr}
 800f242:	b086      	sub	sp, #24
 800f244:	af00      	add	r7, sp, #0
 800f246:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d10a      	bne.n	800f264 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f252:	f383 8811 	msr	BASEPRI, r3
 800f256:	f3bf 8f6f 	isb	sy
 800f25a:	f3bf 8f4f 	dsb	sy
 800f25e:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f260:	bf00      	nop
 800f262:	e7fe      	b.n	800f262 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800f264:	2320      	movs	r3, #32
 800f266:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800f268:	68bb      	ldr	r3, [r7, #8]
 800f26a:	2b20      	cmp	r3, #32
 800f26c:	d00a      	beq.n	800f284 <xEventGroupCreateStatic+0x44>
	__asm volatile
 800f26e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f272:	f383 8811 	msr	BASEPRI, r3
 800f276:	f3bf 8f6f 	isb	sy
 800f27a:	f3bf 8f4f 	dsb	sy
 800f27e:	60fb      	str	r3, [r7, #12]
}
 800f280:	bf00      	nop
 800f282:	e7fe      	b.n	800f282 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800f288:	697b      	ldr	r3, [r7, #20]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d00a      	beq.n	800f2a4 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800f28e:	697b      	ldr	r3, [r7, #20]
 800f290:	2200      	movs	r2, #0
 800f292:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800f294:	697b      	ldr	r3, [r7, #20]
 800f296:	3304      	adds	r3, #4
 800f298:	4618      	mov	r0, r3
 800f29a:	f000 f9bf 	bl	800f61c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800f29e:	697b      	ldr	r3, [r7, #20]
 800f2a0:	2201      	movs	r2, #1
 800f2a2:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800f2a4:	697b      	ldr	r3, [r7, #20]
	}
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	3718      	adds	r7, #24
 800f2aa:	46bd      	mov	sp, r7
 800f2ac:	bd80      	pop	{r7, pc}

0800f2ae <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800f2ae:	b580      	push	{r7, lr}
 800f2b0:	b082      	sub	sp, #8
 800f2b2:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800f2b4:	2020      	movs	r0, #32
 800f2b6:	f003 f91f 	bl	80124f8 <pvPortMalloc>
 800f2ba:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d00a      	beq.n	800f2d8 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	2200      	movs	r2, #0
 800f2c6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	3304      	adds	r3, #4
 800f2cc:	4618      	mov	r0, r3
 800f2ce:	f000 f9a5 	bl	800f61c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	2200      	movs	r2, #0
 800f2d6:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800f2d8:	687b      	ldr	r3, [r7, #4]
	}
 800f2da:	4618      	mov	r0, r3
 800f2dc:	3708      	adds	r7, #8
 800f2de:	46bd      	mov	sp, r7
 800f2e0:	bd80      	pop	{r7, pc}
	...

0800f2e4 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800f2e4:	b580      	push	{r7, lr}
 800f2e6:	b090      	sub	sp, #64	; 0x40
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	60f8      	str	r0, [r7, #12]
 800f2ec:	60b9      	str	r1, [r7, #8]
 800f2ee:	607a      	str	r2, [r7, #4]
 800f2f0:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	2b00      	cmp	r3, #0
 800f302:	d10a      	bne.n	800f31a <xEventGroupWaitBits+0x36>
	__asm volatile
 800f304:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f308:	f383 8811 	msr	BASEPRI, r3
 800f30c:	f3bf 8f6f 	isb	sy
 800f310:	f3bf 8f4f 	dsb	sy
 800f314:	623b      	str	r3, [r7, #32]
}
 800f316:	bf00      	nop
 800f318:	e7fe      	b.n	800f318 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800f31a:	68bb      	ldr	r3, [r7, #8]
 800f31c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800f320:	2b00      	cmp	r3, #0
 800f322:	d00a      	beq.n	800f33a <xEventGroupWaitBits+0x56>
	__asm volatile
 800f324:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f328:	f383 8811 	msr	BASEPRI, r3
 800f32c:	f3bf 8f6f 	isb	sy
 800f330:	f3bf 8f4f 	dsb	sy
 800f334:	61fb      	str	r3, [r7, #28]
}
 800f336:	bf00      	nop
 800f338:	e7fe      	b.n	800f338 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800f33a:	68bb      	ldr	r3, [r7, #8]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d10a      	bne.n	800f356 <xEventGroupWaitBits+0x72>
	__asm volatile
 800f340:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f344:	f383 8811 	msr	BASEPRI, r3
 800f348:	f3bf 8f6f 	isb	sy
 800f34c:	f3bf 8f4f 	dsb	sy
 800f350:	61bb      	str	r3, [r7, #24]
}
 800f352:	bf00      	nop
 800f354:	e7fe      	b.n	800f354 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f356:	f002 f861 	bl	801141c <xTaskGetSchedulerState>
 800f35a:	4603      	mov	r3, r0
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d102      	bne.n	800f366 <xEventGroupWaitBits+0x82>
 800f360:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f362:	2b00      	cmp	r3, #0
 800f364:	d101      	bne.n	800f36a <xEventGroupWaitBits+0x86>
 800f366:	2301      	movs	r3, #1
 800f368:	e000      	b.n	800f36c <xEventGroupWaitBits+0x88>
 800f36a:	2300      	movs	r3, #0
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d10a      	bne.n	800f386 <xEventGroupWaitBits+0xa2>
	__asm volatile
 800f370:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f374:	f383 8811 	msr	BASEPRI, r3
 800f378:	f3bf 8f6f 	isb	sy
 800f37c:	f3bf 8f4f 	dsb	sy
 800f380:	617b      	str	r3, [r7, #20]
}
 800f382:	bf00      	nop
 800f384:	e7fe      	b.n	800f384 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800f386:	f001 fbb9 	bl	8010afc <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800f38a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800f390:	683a      	ldr	r2, [r7, #0]
 800f392:	68b9      	ldr	r1, [r7, #8]
 800f394:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f396:	f000 f90b 	bl	800f5b0 <prvTestWaitCondition>
 800f39a:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800f39c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d00e      	beq.n	800f3c0 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800f3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3a4:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800f3a6:	2300      	movs	r3, #0
 800f3a8:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d028      	beq.n	800f402 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800f3b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3b2:	681a      	ldr	r2, [r3, #0]
 800f3b4:	68bb      	ldr	r3, [r7, #8]
 800f3b6:	43db      	mvns	r3, r3
 800f3b8:	401a      	ands	r2, r3
 800f3ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3bc:	601a      	str	r2, [r3, #0]
 800f3be:	e020      	b.n	800f402 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800f3c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d104      	bne.n	800f3d0 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800f3c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3c8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800f3ca:	2301      	movs	r3, #1
 800f3cc:	633b      	str	r3, [r7, #48]	; 0x30
 800f3ce:	e018      	b.n	800f402 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d003      	beq.n	800f3de <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800f3d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f3dc:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800f3de:	683b      	ldr	r3, [r7, #0]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d003      	beq.n	800f3ec <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800f3e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f3ea:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800f3ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3ee:	1d18      	adds	r0, r3, #4
 800f3f0:	68ba      	ldr	r2, [r7, #8]
 800f3f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3f4:	4313      	orrs	r3, r2
 800f3f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f3f8:	4619      	mov	r1, r3
 800f3fa:	f001 fd77 	bl	8010eec <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800f3fe:	2300      	movs	r3, #0
 800f400:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800f402:	f001 fb89 	bl	8010b18 <xTaskResumeAll>
 800f406:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800f408:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d031      	beq.n	800f472 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800f40e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f410:	2b00      	cmp	r3, #0
 800f412:	d107      	bne.n	800f424 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800f414:	4b19      	ldr	r3, [pc, #100]	; (800f47c <xEventGroupWaitBits+0x198>)
 800f416:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f41a:	601a      	str	r2, [r3, #0]
 800f41c:	f3bf 8f4f 	dsb	sy
 800f420:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800f424:	f002 f970 	bl	8011708 <uxTaskResetEventItemValue>
 800f428:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800f42a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f42c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f430:	2b00      	cmp	r3, #0
 800f432:	d11a      	bne.n	800f46a <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800f434:	f002 ff3e 	bl	80122b4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800f438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800f43e:	683a      	ldr	r2, [r7, #0]
 800f440:	68b9      	ldr	r1, [r7, #8]
 800f442:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f444:	f000 f8b4 	bl	800f5b0 <prvTestWaitCondition>
 800f448:	4603      	mov	r3, r0
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d009      	beq.n	800f462 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	2b00      	cmp	r3, #0
 800f452:	d006      	beq.n	800f462 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800f454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f456:	681a      	ldr	r2, [r3, #0]
 800f458:	68bb      	ldr	r3, [r7, #8]
 800f45a:	43db      	mvns	r3, r3
 800f45c:	401a      	ands	r2, r3
 800f45e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f460:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800f462:	2301      	movs	r3, #1
 800f464:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800f466:	f002 ff55 	bl	8012314 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800f46a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f46c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f470:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800f472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800f474:	4618      	mov	r0, r3
 800f476:	3740      	adds	r7, #64	; 0x40
 800f478:	46bd      	mov	sp, r7
 800f47a:	bd80      	pop	{r7, pc}
 800f47c:	e000ed04 	.word	0xe000ed04

0800f480 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800f480:	b580      	push	{r7, lr}
 800f482:	b08e      	sub	sp, #56	; 0x38
 800f484:	af00      	add	r7, sp, #0
 800f486:	6078      	str	r0, [r7, #4]
 800f488:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800f48a:	2300      	movs	r3, #0
 800f48c:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800f492:	2300      	movs	r3, #0
 800f494:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d10a      	bne.n	800f4b2 <xEventGroupSetBits+0x32>
	__asm volatile
 800f49c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4a0:	f383 8811 	msr	BASEPRI, r3
 800f4a4:	f3bf 8f6f 	isb	sy
 800f4a8:	f3bf 8f4f 	dsb	sy
 800f4ac:	613b      	str	r3, [r7, #16]
}
 800f4ae:	bf00      	nop
 800f4b0:	e7fe      	b.n	800f4b0 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800f4b2:	683b      	ldr	r3, [r7, #0]
 800f4b4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d00a      	beq.n	800f4d2 <xEventGroupSetBits+0x52>
	__asm volatile
 800f4bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4c0:	f383 8811 	msr	BASEPRI, r3
 800f4c4:	f3bf 8f6f 	isb	sy
 800f4c8:	f3bf 8f4f 	dsb	sy
 800f4cc:	60fb      	str	r3, [r7, #12]
}
 800f4ce:	bf00      	nop
 800f4d0:	e7fe      	b.n	800f4d0 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800f4d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4d4:	3304      	adds	r3, #4
 800f4d6:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4da:	3308      	adds	r3, #8
 800f4dc:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800f4de:	f001 fb0d 	bl	8010afc <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800f4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4e4:	68db      	ldr	r3, [r3, #12]
 800f4e6:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800f4e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4ea:	681a      	ldr	r2, [r3, #0]
 800f4ec:	683b      	ldr	r3, [r7, #0]
 800f4ee:	431a      	orrs	r2, r3
 800f4f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4f2:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800f4f4:	e03c      	b.n	800f570 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800f4f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4f8:	685b      	ldr	r3, [r3, #4]
 800f4fa:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800f4fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800f502:	2300      	movs	r3, #0
 800f504:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800f506:	69bb      	ldr	r3, [r7, #24]
 800f508:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800f50c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800f50e:	69bb      	ldr	r3, [r7, #24]
 800f510:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f514:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800f516:	697b      	ldr	r3, [r7, #20]
 800f518:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d108      	bne.n	800f532 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800f520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f522:	681a      	ldr	r2, [r3, #0]
 800f524:	69bb      	ldr	r3, [r7, #24]
 800f526:	4013      	ands	r3, r2
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d00b      	beq.n	800f544 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800f52c:	2301      	movs	r3, #1
 800f52e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f530:	e008      	b.n	800f544 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800f532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f534:	681a      	ldr	r2, [r3, #0]
 800f536:	69bb      	ldr	r3, [r7, #24]
 800f538:	4013      	ands	r3, r2
 800f53a:	69ba      	ldr	r2, [r7, #24]
 800f53c:	429a      	cmp	r2, r3
 800f53e:	d101      	bne.n	800f544 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800f540:	2301      	movs	r3, #1
 800f542:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800f544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f546:	2b00      	cmp	r3, #0
 800f548:	d010      	beq.n	800f56c <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800f54a:	697b      	ldr	r3, [r7, #20]
 800f54c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f550:	2b00      	cmp	r3, #0
 800f552:	d003      	beq.n	800f55c <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800f554:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f556:	69bb      	ldr	r3, [r7, #24]
 800f558:	4313      	orrs	r3, r2
 800f55a:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800f55c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800f564:	4619      	mov	r1, r3
 800f566:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f568:	f001 fd8c 	bl	8011084 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800f56c:	69fb      	ldr	r3, [r7, #28]
 800f56e:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800f570:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f572:	6a3b      	ldr	r3, [r7, #32]
 800f574:	429a      	cmp	r2, r3
 800f576:	d1be      	bne.n	800f4f6 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800f578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f57a:	681a      	ldr	r2, [r3, #0]
 800f57c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f57e:	43db      	mvns	r3, r3
 800f580:	401a      	ands	r2, r3
 800f582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f584:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800f586:	f001 fac7 	bl	8010b18 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800f58a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f58c:	681b      	ldr	r3, [r3, #0]
}
 800f58e:	4618      	mov	r0, r3
 800f590:	3738      	adds	r7, #56	; 0x38
 800f592:	46bd      	mov	sp, r7
 800f594:	bd80      	pop	{r7, pc}

0800f596 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800f596:	b580      	push	{r7, lr}
 800f598:	b082      	sub	sp, #8
 800f59a:	af00      	add	r7, sp, #0
 800f59c:	6078      	str	r0, [r7, #4]
 800f59e:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800f5a0:	6839      	ldr	r1, [r7, #0]
 800f5a2:	6878      	ldr	r0, [r7, #4]
 800f5a4:	f7ff ff6c 	bl	800f480 <xEventGroupSetBits>
}
 800f5a8:	bf00      	nop
 800f5aa:	3708      	adds	r7, #8
 800f5ac:	46bd      	mov	sp, r7
 800f5ae:	bd80      	pop	{r7, pc}

0800f5b0 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800f5b0:	b480      	push	{r7}
 800f5b2:	b087      	sub	sp, #28
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	60f8      	str	r0, [r7, #12]
 800f5b8:	60b9      	str	r1, [r7, #8]
 800f5ba:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800f5bc:	2300      	movs	r3, #0
 800f5be:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d107      	bne.n	800f5d6 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800f5c6:	68fa      	ldr	r2, [r7, #12]
 800f5c8:	68bb      	ldr	r3, [r7, #8]
 800f5ca:	4013      	ands	r3, r2
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d00a      	beq.n	800f5e6 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800f5d0:	2301      	movs	r3, #1
 800f5d2:	617b      	str	r3, [r7, #20]
 800f5d4:	e007      	b.n	800f5e6 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800f5d6:	68fa      	ldr	r2, [r7, #12]
 800f5d8:	68bb      	ldr	r3, [r7, #8]
 800f5da:	4013      	ands	r3, r2
 800f5dc:	68ba      	ldr	r2, [r7, #8]
 800f5de:	429a      	cmp	r2, r3
 800f5e0:	d101      	bne.n	800f5e6 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800f5e2:	2301      	movs	r3, #1
 800f5e4:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800f5e6:	697b      	ldr	r3, [r7, #20]
}
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	371c      	adds	r7, #28
 800f5ec:	46bd      	mov	sp, r7
 800f5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f2:	4770      	bx	lr

0800f5f4 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800f5f4:	b580      	push	{r7, lr}
 800f5f6:	b086      	sub	sp, #24
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	60f8      	str	r0, [r7, #12]
 800f5fc:	60b9      	str	r1, [r7, #8]
 800f5fe:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	68ba      	ldr	r2, [r7, #8]
 800f604:	68f9      	ldr	r1, [r7, #12]
 800f606:	4804      	ldr	r0, [pc, #16]	; (800f618 <xEventGroupSetBitsFromISR+0x24>)
 800f608:	f002 fd06 	bl	8012018 <xTimerPendFunctionCallFromISR>
 800f60c:	6178      	str	r0, [r7, #20]

		return xReturn;
 800f60e:	697b      	ldr	r3, [r7, #20]
	}
 800f610:	4618      	mov	r0, r3
 800f612:	3718      	adds	r7, #24
 800f614:	46bd      	mov	sp, r7
 800f616:	bd80      	pop	{r7, pc}
 800f618:	0800f597 	.word	0x0800f597

0800f61c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f61c:	b480      	push	{r7}
 800f61e:	b083      	sub	sp, #12
 800f620:	af00      	add	r7, sp, #0
 800f622:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	f103 0208 	add.w	r2, r3, #8
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	f04f 32ff 	mov.w	r2, #4294967295
 800f634:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	f103 0208 	add.w	r2, r3, #8
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	f103 0208 	add.w	r2, r3, #8
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	2200      	movs	r2, #0
 800f64e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f650:	bf00      	nop
 800f652:	370c      	adds	r7, #12
 800f654:	46bd      	mov	sp, r7
 800f656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f65a:	4770      	bx	lr

0800f65c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f65c:	b480      	push	{r7}
 800f65e:	b083      	sub	sp, #12
 800f660:	af00      	add	r7, sp, #0
 800f662:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	2200      	movs	r2, #0
 800f668:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f66a:	bf00      	nop
 800f66c:	370c      	adds	r7, #12
 800f66e:	46bd      	mov	sp, r7
 800f670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f674:	4770      	bx	lr

0800f676 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f676:	b480      	push	{r7}
 800f678:	b085      	sub	sp, #20
 800f67a:	af00      	add	r7, sp, #0
 800f67c:	6078      	str	r0, [r7, #4]
 800f67e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	685b      	ldr	r3, [r3, #4]
 800f684:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f686:	683b      	ldr	r3, [r7, #0]
 800f688:	68fa      	ldr	r2, [r7, #12]
 800f68a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	689a      	ldr	r2, [r3, #8]
 800f690:	683b      	ldr	r3, [r7, #0]
 800f692:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	689b      	ldr	r3, [r3, #8]
 800f698:	683a      	ldr	r2, [r7, #0]
 800f69a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	683a      	ldr	r2, [r7, #0]
 800f6a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f6a2:	683b      	ldr	r3, [r7, #0]
 800f6a4:	687a      	ldr	r2, [r7, #4]
 800f6a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	1c5a      	adds	r2, r3, #1
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	601a      	str	r2, [r3, #0]
}
 800f6b2:	bf00      	nop
 800f6b4:	3714      	adds	r7, #20
 800f6b6:	46bd      	mov	sp, r7
 800f6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6bc:	4770      	bx	lr

0800f6be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f6be:	b480      	push	{r7}
 800f6c0:	b085      	sub	sp, #20
 800f6c2:	af00      	add	r7, sp, #0
 800f6c4:	6078      	str	r0, [r7, #4]
 800f6c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f6c8:	683b      	ldr	r3, [r7, #0]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f6ce:	68bb      	ldr	r3, [r7, #8]
 800f6d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6d4:	d103      	bne.n	800f6de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	691b      	ldr	r3, [r3, #16]
 800f6da:	60fb      	str	r3, [r7, #12]
 800f6dc:	e00c      	b.n	800f6f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	3308      	adds	r3, #8
 800f6e2:	60fb      	str	r3, [r7, #12]
 800f6e4:	e002      	b.n	800f6ec <vListInsert+0x2e>
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	685b      	ldr	r3, [r3, #4]
 800f6ea:	60fb      	str	r3, [r7, #12]
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	685b      	ldr	r3, [r3, #4]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	68ba      	ldr	r2, [r7, #8]
 800f6f4:	429a      	cmp	r2, r3
 800f6f6:	d2f6      	bcs.n	800f6e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	685a      	ldr	r2, [r3, #4]
 800f6fc:	683b      	ldr	r3, [r7, #0]
 800f6fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f700:	683b      	ldr	r3, [r7, #0]
 800f702:	685b      	ldr	r3, [r3, #4]
 800f704:	683a      	ldr	r2, [r7, #0]
 800f706:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f708:	683b      	ldr	r3, [r7, #0]
 800f70a:	68fa      	ldr	r2, [r7, #12]
 800f70c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	683a      	ldr	r2, [r7, #0]
 800f712:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f714:	683b      	ldr	r3, [r7, #0]
 800f716:	687a      	ldr	r2, [r7, #4]
 800f718:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	1c5a      	adds	r2, r3, #1
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	601a      	str	r2, [r3, #0]
}
 800f724:	bf00      	nop
 800f726:	3714      	adds	r7, #20
 800f728:	46bd      	mov	sp, r7
 800f72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f72e:	4770      	bx	lr

0800f730 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f730:	b480      	push	{r7}
 800f732:	b085      	sub	sp, #20
 800f734:	af00      	add	r7, sp, #0
 800f736:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	691b      	ldr	r3, [r3, #16]
 800f73c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	685b      	ldr	r3, [r3, #4]
 800f742:	687a      	ldr	r2, [r7, #4]
 800f744:	6892      	ldr	r2, [r2, #8]
 800f746:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	689b      	ldr	r3, [r3, #8]
 800f74c:	687a      	ldr	r2, [r7, #4]
 800f74e:	6852      	ldr	r2, [r2, #4]
 800f750:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	685b      	ldr	r3, [r3, #4]
 800f756:	687a      	ldr	r2, [r7, #4]
 800f758:	429a      	cmp	r2, r3
 800f75a:	d103      	bne.n	800f764 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	689a      	ldr	r2, [r3, #8]
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	2200      	movs	r2, #0
 800f768:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	1e5a      	subs	r2, r3, #1
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	681b      	ldr	r3, [r3, #0]
}
 800f778:	4618      	mov	r0, r3
 800f77a:	3714      	adds	r7, #20
 800f77c:	46bd      	mov	sp, r7
 800f77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f782:	4770      	bx	lr

0800f784 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f784:	b580      	push	{r7, lr}
 800f786:	b084      	sub	sp, #16
 800f788:	af00      	add	r7, sp, #0
 800f78a:	6078      	str	r0, [r7, #4]
 800f78c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	2b00      	cmp	r3, #0
 800f796:	d10a      	bne.n	800f7ae <xQueueGenericReset+0x2a>
	__asm volatile
 800f798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f79c:	f383 8811 	msr	BASEPRI, r3
 800f7a0:	f3bf 8f6f 	isb	sy
 800f7a4:	f3bf 8f4f 	dsb	sy
 800f7a8:	60bb      	str	r3, [r7, #8]
}
 800f7aa:	bf00      	nop
 800f7ac:	e7fe      	b.n	800f7ac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800f7ae:	f002 fd81 	bl	80122b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	681a      	ldr	r2, [r3, #0]
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f7ba:	68f9      	ldr	r1, [r7, #12]
 800f7bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f7be:	fb01 f303 	mul.w	r3, r1, r3
 800f7c2:	441a      	add	r2, r3
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	2200      	movs	r2, #0
 800f7cc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	681a      	ldr	r2, [r3, #0]
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	681a      	ldr	r2, [r3, #0]
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f7de:	3b01      	subs	r3, #1
 800f7e0:	68f9      	ldr	r1, [r7, #12]
 800f7e2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f7e4:	fb01 f303 	mul.w	r3, r1, r3
 800f7e8:	441a      	add	r2, r3
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	22ff      	movs	r2, #255	; 0xff
 800f7f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	22ff      	movs	r2, #255	; 0xff
 800f7fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f7fe:	683b      	ldr	r3, [r7, #0]
 800f800:	2b00      	cmp	r3, #0
 800f802:	d114      	bne.n	800f82e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	691b      	ldr	r3, [r3, #16]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d01a      	beq.n	800f842 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	3310      	adds	r3, #16
 800f810:	4618      	mov	r0, r3
 800f812:	f001 fbd3 	bl	8010fbc <xTaskRemoveFromEventList>
 800f816:	4603      	mov	r3, r0
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d012      	beq.n	800f842 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f81c:	4b0c      	ldr	r3, [pc, #48]	; (800f850 <xQueueGenericReset+0xcc>)
 800f81e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f822:	601a      	str	r2, [r3, #0]
 800f824:	f3bf 8f4f 	dsb	sy
 800f828:	f3bf 8f6f 	isb	sy
 800f82c:	e009      	b.n	800f842 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	3310      	adds	r3, #16
 800f832:	4618      	mov	r0, r3
 800f834:	f7ff fef2 	bl	800f61c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	3324      	adds	r3, #36	; 0x24
 800f83c:	4618      	mov	r0, r3
 800f83e:	f7ff feed 	bl	800f61c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f842:	f002 fd67 	bl	8012314 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f846:	2301      	movs	r3, #1
}
 800f848:	4618      	mov	r0, r3
 800f84a:	3710      	adds	r7, #16
 800f84c:	46bd      	mov	sp, r7
 800f84e:	bd80      	pop	{r7, pc}
 800f850:	e000ed04 	.word	0xe000ed04

0800f854 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f854:	b580      	push	{r7, lr}
 800f856:	b08e      	sub	sp, #56	; 0x38
 800f858:	af02      	add	r7, sp, #8
 800f85a:	60f8      	str	r0, [r7, #12]
 800f85c:	60b9      	str	r1, [r7, #8]
 800f85e:	607a      	str	r2, [r7, #4]
 800f860:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d10a      	bne.n	800f87e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800f868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f86c:	f383 8811 	msr	BASEPRI, r3
 800f870:	f3bf 8f6f 	isb	sy
 800f874:	f3bf 8f4f 	dsb	sy
 800f878:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f87a:	bf00      	nop
 800f87c:	e7fe      	b.n	800f87c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f87e:	683b      	ldr	r3, [r7, #0]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d10a      	bne.n	800f89a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800f884:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f888:	f383 8811 	msr	BASEPRI, r3
 800f88c:	f3bf 8f6f 	isb	sy
 800f890:	f3bf 8f4f 	dsb	sy
 800f894:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f896:	bf00      	nop
 800f898:	e7fe      	b.n	800f898 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d002      	beq.n	800f8a6 <xQueueGenericCreateStatic+0x52>
 800f8a0:	68bb      	ldr	r3, [r7, #8]
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d001      	beq.n	800f8aa <xQueueGenericCreateStatic+0x56>
 800f8a6:	2301      	movs	r3, #1
 800f8a8:	e000      	b.n	800f8ac <xQueueGenericCreateStatic+0x58>
 800f8aa:	2300      	movs	r3, #0
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d10a      	bne.n	800f8c6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800f8b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8b4:	f383 8811 	msr	BASEPRI, r3
 800f8b8:	f3bf 8f6f 	isb	sy
 800f8bc:	f3bf 8f4f 	dsb	sy
 800f8c0:	623b      	str	r3, [r7, #32]
}
 800f8c2:	bf00      	nop
 800f8c4:	e7fe      	b.n	800f8c4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d102      	bne.n	800f8d2 <xQueueGenericCreateStatic+0x7e>
 800f8cc:	68bb      	ldr	r3, [r7, #8]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d101      	bne.n	800f8d6 <xQueueGenericCreateStatic+0x82>
 800f8d2:	2301      	movs	r3, #1
 800f8d4:	e000      	b.n	800f8d8 <xQueueGenericCreateStatic+0x84>
 800f8d6:	2300      	movs	r3, #0
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d10a      	bne.n	800f8f2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800f8dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8e0:	f383 8811 	msr	BASEPRI, r3
 800f8e4:	f3bf 8f6f 	isb	sy
 800f8e8:	f3bf 8f4f 	dsb	sy
 800f8ec:	61fb      	str	r3, [r7, #28]
}
 800f8ee:	bf00      	nop
 800f8f0:	e7fe      	b.n	800f8f0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f8f2:	2350      	movs	r3, #80	; 0x50
 800f8f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f8f6:	697b      	ldr	r3, [r7, #20]
 800f8f8:	2b50      	cmp	r3, #80	; 0x50
 800f8fa:	d00a      	beq.n	800f912 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800f8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f900:	f383 8811 	msr	BASEPRI, r3
 800f904:	f3bf 8f6f 	isb	sy
 800f908:	f3bf 8f4f 	dsb	sy
 800f90c:	61bb      	str	r3, [r7, #24]
}
 800f90e:	bf00      	nop
 800f910:	e7fe      	b.n	800f910 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f912:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f914:	683b      	ldr	r3, [r7, #0]
 800f916:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800f918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d00d      	beq.n	800f93a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f91e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f920:	2201      	movs	r2, #1
 800f922:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f926:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800f92a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f92c:	9300      	str	r3, [sp, #0]
 800f92e:	4613      	mov	r3, r2
 800f930:	687a      	ldr	r2, [r7, #4]
 800f932:	68b9      	ldr	r1, [r7, #8]
 800f934:	68f8      	ldr	r0, [r7, #12]
 800f936:	f000 f83f 	bl	800f9b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f93a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800f93c:	4618      	mov	r0, r3
 800f93e:	3730      	adds	r7, #48	; 0x30
 800f940:	46bd      	mov	sp, r7
 800f942:	bd80      	pop	{r7, pc}

0800f944 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f944:	b580      	push	{r7, lr}
 800f946:	b08a      	sub	sp, #40	; 0x28
 800f948:	af02      	add	r7, sp, #8
 800f94a:	60f8      	str	r0, [r7, #12]
 800f94c:	60b9      	str	r1, [r7, #8]
 800f94e:	4613      	mov	r3, r2
 800f950:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	2b00      	cmp	r3, #0
 800f956:	d10a      	bne.n	800f96e <xQueueGenericCreate+0x2a>
	__asm volatile
 800f958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f95c:	f383 8811 	msr	BASEPRI, r3
 800f960:	f3bf 8f6f 	isb	sy
 800f964:	f3bf 8f4f 	dsb	sy
 800f968:	613b      	str	r3, [r7, #16]
}
 800f96a:	bf00      	nop
 800f96c:	e7fe      	b.n	800f96c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	68ba      	ldr	r2, [r7, #8]
 800f972:	fb02 f303 	mul.w	r3, r2, r3
 800f976:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f978:	69fb      	ldr	r3, [r7, #28]
 800f97a:	3350      	adds	r3, #80	; 0x50
 800f97c:	4618      	mov	r0, r3
 800f97e:	f002 fdbb 	bl	80124f8 <pvPortMalloc>
 800f982:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f984:	69bb      	ldr	r3, [r7, #24]
 800f986:	2b00      	cmp	r3, #0
 800f988:	d011      	beq.n	800f9ae <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f98a:	69bb      	ldr	r3, [r7, #24]
 800f98c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f98e:	697b      	ldr	r3, [r7, #20]
 800f990:	3350      	adds	r3, #80	; 0x50
 800f992:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f994:	69bb      	ldr	r3, [r7, #24]
 800f996:	2200      	movs	r2, #0
 800f998:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f99c:	79fa      	ldrb	r2, [r7, #7]
 800f99e:	69bb      	ldr	r3, [r7, #24]
 800f9a0:	9300      	str	r3, [sp, #0]
 800f9a2:	4613      	mov	r3, r2
 800f9a4:	697a      	ldr	r2, [r7, #20]
 800f9a6:	68b9      	ldr	r1, [r7, #8]
 800f9a8:	68f8      	ldr	r0, [r7, #12]
 800f9aa:	f000 f805 	bl	800f9b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f9ae:	69bb      	ldr	r3, [r7, #24]
	}
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	3720      	adds	r7, #32
 800f9b4:	46bd      	mov	sp, r7
 800f9b6:	bd80      	pop	{r7, pc}

0800f9b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	b084      	sub	sp, #16
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	60f8      	str	r0, [r7, #12]
 800f9c0:	60b9      	str	r1, [r7, #8]
 800f9c2:	607a      	str	r2, [r7, #4]
 800f9c4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f9c6:	68bb      	ldr	r3, [r7, #8]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d103      	bne.n	800f9d4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f9cc:	69bb      	ldr	r3, [r7, #24]
 800f9ce:	69ba      	ldr	r2, [r7, #24]
 800f9d0:	601a      	str	r2, [r3, #0]
 800f9d2:	e002      	b.n	800f9da <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f9d4:	69bb      	ldr	r3, [r7, #24]
 800f9d6:	687a      	ldr	r2, [r7, #4]
 800f9d8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f9da:	69bb      	ldr	r3, [r7, #24]
 800f9dc:	68fa      	ldr	r2, [r7, #12]
 800f9de:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f9e0:	69bb      	ldr	r3, [r7, #24]
 800f9e2:	68ba      	ldr	r2, [r7, #8]
 800f9e4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f9e6:	2101      	movs	r1, #1
 800f9e8:	69b8      	ldr	r0, [r7, #24]
 800f9ea:	f7ff fecb 	bl	800f784 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f9ee:	69bb      	ldr	r3, [r7, #24]
 800f9f0:	78fa      	ldrb	r2, [r7, #3]
 800f9f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f9f6:	bf00      	nop
 800f9f8:	3710      	adds	r7, #16
 800f9fa:	46bd      	mov	sp, r7
 800f9fc:	bd80      	pop	{r7, pc}

0800f9fe <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800f9fe:	b580      	push	{r7, lr}
 800fa00:	b082      	sub	sp, #8
 800fa02:	af00      	add	r7, sp, #0
 800fa04:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d00e      	beq.n	800fa2a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	2200      	movs	r2, #0
 800fa10:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	2200      	movs	r2, #0
 800fa16:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	2200      	movs	r2, #0
 800fa1c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800fa1e:	2300      	movs	r3, #0
 800fa20:	2200      	movs	r2, #0
 800fa22:	2100      	movs	r1, #0
 800fa24:	6878      	ldr	r0, [r7, #4]
 800fa26:	f000 f8a1 	bl	800fb6c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800fa2a:	bf00      	nop
 800fa2c:	3708      	adds	r7, #8
 800fa2e:	46bd      	mov	sp, r7
 800fa30:	bd80      	pop	{r7, pc}

0800fa32 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800fa32:	b580      	push	{r7, lr}
 800fa34:	b086      	sub	sp, #24
 800fa36:	af00      	add	r7, sp, #0
 800fa38:	4603      	mov	r3, r0
 800fa3a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800fa3c:	2301      	movs	r3, #1
 800fa3e:	617b      	str	r3, [r7, #20]
 800fa40:	2300      	movs	r3, #0
 800fa42:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800fa44:	79fb      	ldrb	r3, [r7, #7]
 800fa46:	461a      	mov	r2, r3
 800fa48:	6939      	ldr	r1, [r7, #16]
 800fa4a:	6978      	ldr	r0, [r7, #20]
 800fa4c:	f7ff ff7a 	bl	800f944 <xQueueGenericCreate>
 800fa50:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800fa52:	68f8      	ldr	r0, [r7, #12]
 800fa54:	f7ff ffd3 	bl	800f9fe <prvInitialiseMutex>

		return xNewQueue;
 800fa58:	68fb      	ldr	r3, [r7, #12]
	}
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	3718      	adds	r7, #24
 800fa5e:	46bd      	mov	sp, r7
 800fa60:	bd80      	pop	{r7, pc}

0800fa62 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800fa62:	b580      	push	{r7, lr}
 800fa64:	b088      	sub	sp, #32
 800fa66:	af02      	add	r7, sp, #8
 800fa68:	4603      	mov	r3, r0
 800fa6a:	6039      	str	r1, [r7, #0]
 800fa6c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800fa6e:	2301      	movs	r3, #1
 800fa70:	617b      	str	r3, [r7, #20]
 800fa72:	2300      	movs	r3, #0
 800fa74:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800fa76:	79fb      	ldrb	r3, [r7, #7]
 800fa78:	9300      	str	r3, [sp, #0]
 800fa7a:	683b      	ldr	r3, [r7, #0]
 800fa7c:	2200      	movs	r2, #0
 800fa7e:	6939      	ldr	r1, [r7, #16]
 800fa80:	6978      	ldr	r0, [r7, #20]
 800fa82:	f7ff fee7 	bl	800f854 <xQueueGenericCreateStatic>
 800fa86:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800fa88:	68f8      	ldr	r0, [r7, #12]
 800fa8a:	f7ff ffb8 	bl	800f9fe <prvInitialiseMutex>

		return xNewQueue;
 800fa8e:	68fb      	ldr	r3, [r7, #12]
	}
 800fa90:	4618      	mov	r0, r3
 800fa92:	3718      	adds	r7, #24
 800fa94:	46bd      	mov	sp, r7
 800fa96:	bd80      	pop	{r7, pc}

0800fa98 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800fa98:	b590      	push	{r4, r7, lr}
 800fa9a:	b087      	sub	sp, #28
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800faa4:	693b      	ldr	r3, [r7, #16]
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d10a      	bne.n	800fac0 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800faaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faae:	f383 8811 	msr	BASEPRI, r3
 800fab2:	f3bf 8f6f 	isb	sy
 800fab6:	f3bf 8f4f 	dsb	sy
 800faba:	60fb      	str	r3, [r7, #12]
}
 800fabc:	bf00      	nop
 800fabe:	e7fe      	b.n	800fabe <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800fac0:	693b      	ldr	r3, [r7, #16]
 800fac2:	689c      	ldr	r4, [r3, #8]
 800fac4:	f001 fc9a 	bl	80113fc <xTaskGetCurrentTaskHandle>
 800fac8:	4603      	mov	r3, r0
 800faca:	429c      	cmp	r4, r3
 800facc:	d111      	bne.n	800faf2 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800face:	693b      	ldr	r3, [r7, #16]
 800fad0:	68db      	ldr	r3, [r3, #12]
 800fad2:	1e5a      	subs	r2, r3, #1
 800fad4:	693b      	ldr	r3, [r7, #16]
 800fad6:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800fad8:	693b      	ldr	r3, [r7, #16]
 800fada:	68db      	ldr	r3, [r3, #12]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d105      	bne.n	800faec <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800fae0:	2300      	movs	r3, #0
 800fae2:	2200      	movs	r2, #0
 800fae4:	2100      	movs	r1, #0
 800fae6:	6938      	ldr	r0, [r7, #16]
 800fae8:	f000 f840 	bl	800fb6c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800faec:	2301      	movs	r3, #1
 800faee:	617b      	str	r3, [r7, #20]
 800faf0:	e001      	b.n	800faf6 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800faf2:	2300      	movs	r3, #0
 800faf4:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800faf6:	697b      	ldr	r3, [r7, #20]
	}
 800faf8:	4618      	mov	r0, r3
 800fafa:	371c      	adds	r7, #28
 800fafc:	46bd      	mov	sp, r7
 800fafe:	bd90      	pop	{r4, r7, pc}

0800fb00 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800fb00:	b590      	push	{r4, r7, lr}
 800fb02:	b087      	sub	sp, #28
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
 800fb08:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800fb0e:	693b      	ldr	r3, [r7, #16]
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d10a      	bne.n	800fb2a <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800fb14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb18:	f383 8811 	msr	BASEPRI, r3
 800fb1c:	f3bf 8f6f 	isb	sy
 800fb20:	f3bf 8f4f 	dsb	sy
 800fb24:	60fb      	str	r3, [r7, #12]
}
 800fb26:	bf00      	nop
 800fb28:	e7fe      	b.n	800fb28 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800fb2a:	693b      	ldr	r3, [r7, #16]
 800fb2c:	689c      	ldr	r4, [r3, #8]
 800fb2e:	f001 fc65 	bl	80113fc <xTaskGetCurrentTaskHandle>
 800fb32:	4603      	mov	r3, r0
 800fb34:	429c      	cmp	r4, r3
 800fb36:	d107      	bne.n	800fb48 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800fb38:	693b      	ldr	r3, [r7, #16]
 800fb3a:	68db      	ldr	r3, [r3, #12]
 800fb3c:	1c5a      	adds	r2, r3, #1
 800fb3e:	693b      	ldr	r3, [r7, #16]
 800fb40:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800fb42:	2301      	movs	r3, #1
 800fb44:	617b      	str	r3, [r7, #20]
 800fb46:	e00c      	b.n	800fb62 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800fb48:	6839      	ldr	r1, [r7, #0]
 800fb4a:	6938      	ldr	r0, [r7, #16]
 800fb4c:	f000 fa88 	bl	8010060 <xQueueSemaphoreTake>
 800fb50:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800fb52:	697b      	ldr	r3, [r7, #20]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d004      	beq.n	800fb62 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800fb58:	693b      	ldr	r3, [r7, #16]
 800fb5a:	68db      	ldr	r3, [r3, #12]
 800fb5c:	1c5a      	adds	r2, r3, #1
 800fb5e:	693b      	ldr	r3, [r7, #16]
 800fb60:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800fb62:	697b      	ldr	r3, [r7, #20]
	}
 800fb64:	4618      	mov	r0, r3
 800fb66:	371c      	adds	r7, #28
 800fb68:	46bd      	mov	sp, r7
 800fb6a:	bd90      	pop	{r4, r7, pc}

0800fb6c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800fb6c:	b580      	push	{r7, lr}
 800fb6e:	b08e      	sub	sp, #56	; 0x38
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	60f8      	str	r0, [r7, #12]
 800fb74:	60b9      	str	r1, [r7, #8]
 800fb76:	607a      	str	r2, [r7, #4]
 800fb78:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800fb7a:	2300      	movs	r3, #0
 800fb7c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800fb82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d10a      	bne.n	800fb9e <xQueueGenericSend+0x32>
	__asm volatile
 800fb88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb8c:	f383 8811 	msr	BASEPRI, r3
 800fb90:	f3bf 8f6f 	isb	sy
 800fb94:	f3bf 8f4f 	dsb	sy
 800fb98:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800fb9a:	bf00      	nop
 800fb9c:	e7fe      	b.n	800fb9c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fb9e:	68bb      	ldr	r3, [r7, #8]
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d103      	bne.n	800fbac <xQueueGenericSend+0x40>
 800fba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d101      	bne.n	800fbb0 <xQueueGenericSend+0x44>
 800fbac:	2301      	movs	r3, #1
 800fbae:	e000      	b.n	800fbb2 <xQueueGenericSend+0x46>
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d10a      	bne.n	800fbcc <xQueueGenericSend+0x60>
	__asm volatile
 800fbb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbba:	f383 8811 	msr	BASEPRI, r3
 800fbbe:	f3bf 8f6f 	isb	sy
 800fbc2:	f3bf 8f4f 	dsb	sy
 800fbc6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fbc8:	bf00      	nop
 800fbca:	e7fe      	b.n	800fbca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fbcc:	683b      	ldr	r3, [r7, #0]
 800fbce:	2b02      	cmp	r3, #2
 800fbd0:	d103      	bne.n	800fbda <xQueueGenericSend+0x6e>
 800fbd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fbd6:	2b01      	cmp	r3, #1
 800fbd8:	d101      	bne.n	800fbde <xQueueGenericSend+0x72>
 800fbda:	2301      	movs	r3, #1
 800fbdc:	e000      	b.n	800fbe0 <xQueueGenericSend+0x74>
 800fbde:	2300      	movs	r3, #0
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d10a      	bne.n	800fbfa <xQueueGenericSend+0x8e>
	__asm volatile
 800fbe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbe8:	f383 8811 	msr	BASEPRI, r3
 800fbec:	f3bf 8f6f 	isb	sy
 800fbf0:	f3bf 8f4f 	dsb	sy
 800fbf4:	623b      	str	r3, [r7, #32]
}
 800fbf6:	bf00      	nop
 800fbf8:	e7fe      	b.n	800fbf8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fbfa:	f001 fc0f 	bl	801141c <xTaskGetSchedulerState>
 800fbfe:	4603      	mov	r3, r0
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d102      	bne.n	800fc0a <xQueueGenericSend+0x9e>
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d101      	bne.n	800fc0e <xQueueGenericSend+0xa2>
 800fc0a:	2301      	movs	r3, #1
 800fc0c:	e000      	b.n	800fc10 <xQueueGenericSend+0xa4>
 800fc0e:	2300      	movs	r3, #0
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d10a      	bne.n	800fc2a <xQueueGenericSend+0xbe>
	__asm volatile
 800fc14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc18:	f383 8811 	msr	BASEPRI, r3
 800fc1c:	f3bf 8f6f 	isb	sy
 800fc20:	f3bf 8f4f 	dsb	sy
 800fc24:	61fb      	str	r3, [r7, #28]
}
 800fc26:	bf00      	nop
 800fc28:	e7fe      	b.n	800fc28 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fc2a:	f002 fb43 	bl	80122b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fc2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fc32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc36:	429a      	cmp	r2, r3
 800fc38:	d302      	bcc.n	800fc40 <xQueueGenericSend+0xd4>
 800fc3a:	683b      	ldr	r3, [r7, #0]
 800fc3c:	2b02      	cmp	r3, #2
 800fc3e:	d129      	bne.n	800fc94 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fc40:	683a      	ldr	r2, [r7, #0]
 800fc42:	68b9      	ldr	r1, [r7, #8]
 800fc44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fc46:	f000 fbaf 	bl	80103a8 <prvCopyDataToQueue>
 800fc4a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fc4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d010      	beq.n	800fc76 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fc54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc56:	3324      	adds	r3, #36	; 0x24
 800fc58:	4618      	mov	r0, r3
 800fc5a:	f001 f9af 	bl	8010fbc <xTaskRemoveFromEventList>
 800fc5e:	4603      	mov	r3, r0
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d013      	beq.n	800fc8c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800fc64:	4b3f      	ldr	r3, [pc, #252]	; (800fd64 <xQueueGenericSend+0x1f8>)
 800fc66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc6a:	601a      	str	r2, [r3, #0]
 800fc6c:	f3bf 8f4f 	dsb	sy
 800fc70:	f3bf 8f6f 	isb	sy
 800fc74:	e00a      	b.n	800fc8c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800fc76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d007      	beq.n	800fc8c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800fc7c:	4b39      	ldr	r3, [pc, #228]	; (800fd64 <xQueueGenericSend+0x1f8>)
 800fc7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc82:	601a      	str	r2, [r3, #0]
 800fc84:	f3bf 8f4f 	dsb	sy
 800fc88:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800fc8c:	f002 fb42 	bl	8012314 <vPortExitCritical>
				return pdPASS;
 800fc90:	2301      	movs	r3, #1
 800fc92:	e063      	b.n	800fd5c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d103      	bne.n	800fca2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fc9a:	f002 fb3b 	bl	8012314 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800fc9e:	2300      	movs	r3, #0
 800fca0:	e05c      	b.n	800fd5c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d106      	bne.n	800fcb6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fca8:	f107 0314 	add.w	r3, r7, #20
 800fcac:	4618      	mov	r0, r3
 800fcae:	f001 fa4b 	bl	8011148 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fcb2:	2301      	movs	r3, #1
 800fcb4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fcb6:	f002 fb2d 	bl	8012314 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fcba:	f000 ff1f 	bl	8010afc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fcbe:	f002 faf9 	bl	80122b4 <vPortEnterCritical>
 800fcc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcc4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fcc8:	b25b      	sxtb	r3, r3
 800fcca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcce:	d103      	bne.n	800fcd8 <xQueueGenericSend+0x16c>
 800fcd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcd2:	2200      	movs	r2, #0
 800fcd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fcd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fcde:	b25b      	sxtb	r3, r3
 800fce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fce4:	d103      	bne.n	800fcee <xQueueGenericSend+0x182>
 800fce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fce8:	2200      	movs	r2, #0
 800fcea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fcee:	f002 fb11 	bl	8012314 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fcf2:	1d3a      	adds	r2, r7, #4
 800fcf4:	f107 0314 	add.w	r3, r7, #20
 800fcf8:	4611      	mov	r1, r2
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	f001 fa3a 	bl	8011174 <xTaskCheckForTimeOut>
 800fd00:	4603      	mov	r3, r0
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d124      	bne.n	800fd50 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800fd06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fd08:	f000 fc46 	bl	8010598 <prvIsQueueFull>
 800fd0c:	4603      	mov	r3, r0
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d018      	beq.n	800fd44 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800fd12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd14:	3310      	adds	r3, #16
 800fd16:	687a      	ldr	r2, [r7, #4]
 800fd18:	4611      	mov	r1, r2
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	f001 f8c2 	bl	8010ea4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800fd20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fd22:	f000 fbd1 	bl	80104c8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800fd26:	f000 fef7 	bl	8010b18 <xTaskResumeAll>
 800fd2a:	4603      	mov	r3, r0
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	f47f af7c 	bne.w	800fc2a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800fd32:	4b0c      	ldr	r3, [pc, #48]	; (800fd64 <xQueueGenericSend+0x1f8>)
 800fd34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd38:	601a      	str	r2, [r3, #0]
 800fd3a:	f3bf 8f4f 	dsb	sy
 800fd3e:	f3bf 8f6f 	isb	sy
 800fd42:	e772      	b.n	800fc2a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800fd44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fd46:	f000 fbbf 	bl	80104c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fd4a:	f000 fee5 	bl	8010b18 <xTaskResumeAll>
 800fd4e:	e76c      	b.n	800fc2a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800fd50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fd52:	f000 fbb9 	bl	80104c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fd56:	f000 fedf 	bl	8010b18 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800fd5a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	3738      	adds	r7, #56	; 0x38
 800fd60:	46bd      	mov	sp, r7
 800fd62:	bd80      	pop	{r7, pc}
 800fd64:	e000ed04 	.word	0xe000ed04

0800fd68 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800fd68:	b580      	push	{r7, lr}
 800fd6a:	b090      	sub	sp, #64	; 0x40
 800fd6c:	af00      	add	r7, sp, #0
 800fd6e:	60f8      	str	r0, [r7, #12]
 800fd70:	60b9      	str	r1, [r7, #8]
 800fd72:	607a      	str	r2, [r7, #4]
 800fd74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800fd7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d10a      	bne.n	800fd96 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800fd80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd84:	f383 8811 	msr	BASEPRI, r3
 800fd88:	f3bf 8f6f 	isb	sy
 800fd8c:	f3bf 8f4f 	dsb	sy
 800fd90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800fd92:	bf00      	nop
 800fd94:	e7fe      	b.n	800fd94 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fd96:	68bb      	ldr	r3, [r7, #8]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d103      	bne.n	800fda4 <xQueueGenericSendFromISR+0x3c>
 800fd9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d101      	bne.n	800fda8 <xQueueGenericSendFromISR+0x40>
 800fda4:	2301      	movs	r3, #1
 800fda6:	e000      	b.n	800fdaa <xQueueGenericSendFromISR+0x42>
 800fda8:	2300      	movs	r3, #0
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d10a      	bne.n	800fdc4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800fdae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdb2:	f383 8811 	msr	BASEPRI, r3
 800fdb6:	f3bf 8f6f 	isb	sy
 800fdba:	f3bf 8f4f 	dsb	sy
 800fdbe:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fdc0:	bf00      	nop
 800fdc2:	e7fe      	b.n	800fdc2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fdc4:	683b      	ldr	r3, [r7, #0]
 800fdc6:	2b02      	cmp	r3, #2
 800fdc8:	d103      	bne.n	800fdd2 <xQueueGenericSendFromISR+0x6a>
 800fdca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fdce:	2b01      	cmp	r3, #1
 800fdd0:	d101      	bne.n	800fdd6 <xQueueGenericSendFromISR+0x6e>
 800fdd2:	2301      	movs	r3, #1
 800fdd4:	e000      	b.n	800fdd8 <xQueueGenericSendFromISR+0x70>
 800fdd6:	2300      	movs	r3, #0
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d10a      	bne.n	800fdf2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800fddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fde0:	f383 8811 	msr	BASEPRI, r3
 800fde4:	f3bf 8f6f 	isb	sy
 800fde8:	f3bf 8f4f 	dsb	sy
 800fdec:	623b      	str	r3, [r7, #32]
}
 800fdee:	bf00      	nop
 800fdf0:	e7fe      	b.n	800fdf0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fdf2:	f002 fb41 	bl	8012478 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800fdf6:	f3ef 8211 	mrs	r2, BASEPRI
 800fdfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdfe:	f383 8811 	msr	BASEPRI, r3
 800fe02:	f3bf 8f6f 	isb	sy
 800fe06:	f3bf 8f4f 	dsb	sy
 800fe0a:	61fa      	str	r2, [r7, #28]
 800fe0c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800fe0e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fe10:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fe12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fe16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe1a:	429a      	cmp	r2, r3
 800fe1c:	d302      	bcc.n	800fe24 <xQueueGenericSendFromISR+0xbc>
 800fe1e:	683b      	ldr	r3, [r7, #0]
 800fe20:	2b02      	cmp	r3, #2
 800fe22:	d12f      	bne.n	800fe84 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fe24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fe2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fe2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe32:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fe34:	683a      	ldr	r2, [r7, #0]
 800fe36:	68b9      	ldr	r1, [r7, #8]
 800fe38:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fe3a:	f000 fab5 	bl	80103a8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fe3e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800fe42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe46:	d112      	bne.n	800fe6e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fe48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d016      	beq.n	800fe7e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fe50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe52:	3324      	adds	r3, #36	; 0x24
 800fe54:	4618      	mov	r0, r3
 800fe56:	f001 f8b1 	bl	8010fbc <xTaskRemoveFromEventList>
 800fe5a:	4603      	mov	r3, r0
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d00e      	beq.n	800fe7e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d00b      	beq.n	800fe7e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	2201      	movs	r2, #1
 800fe6a:	601a      	str	r2, [r3, #0]
 800fe6c:	e007      	b.n	800fe7e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fe6e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800fe72:	3301      	adds	r3, #1
 800fe74:	b2db      	uxtb	r3, r3
 800fe76:	b25a      	sxtb	r2, r3
 800fe78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800fe7e:	2301      	movs	r3, #1
 800fe80:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800fe82:	e001      	b.n	800fe88 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800fe84:	2300      	movs	r3, #0
 800fe86:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fe88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe8a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800fe8c:	697b      	ldr	r3, [r7, #20]
 800fe8e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800fe92:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fe94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800fe96:	4618      	mov	r0, r3
 800fe98:	3740      	adds	r7, #64	; 0x40
 800fe9a:	46bd      	mov	sp, r7
 800fe9c:	bd80      	pop	{r7, pc}
	...

0800fea0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800fea0:	b580      	push	{r7, lr}
 800fea2:	b08c      	sub	sp, #48	; 0x30
 800fea4:	af00      	add	r7, sp, #0
 800fea6:	60f8      	str	r0, [r7, #12]
 800fea8:	60b9      	str	r1, [r7, #8]
 800feaa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800feac:	2300      	movs	r3, #0
 800feae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800feb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d10a      	bne.n	800fed0 <xQueueReceive+0x30>
	__asm volatile
 800feba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800febe:	f383 8811 	msr	BASEPRI, r3
 800fec2:	f3bf 8f6f 	isb	sy
 800fec6:	f3bf 8f4f 	dsb	sy
 800feca:	623b      	str	r3, [r7, #32]
}
 800fecc:	bf00      	nop
 800fece:	e7fe      	b.n	800fece <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fed0:	68bb      	ldr	r3, [r7, #8]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d103      	bne.n	800fede <xQueueReceive+0x3e>
 800fed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d101      	bne.n	800fee2 <xQueueReceive+0x42>
 800fede:	2301      	movs	r3, #1
 800fee0:	e000      	b.n	800fee4 <xQueueReceive+0x44>
 800fee2:	2300      	movs	r3, #0
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d10a      	bne.n	800fefe <xQueueReceive+0x5e>
	__asm volatile
 800fee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feec:	f383 8811 	msr	BASEPRI, r3
 800fef0:	f3bf 8f6f 	isb	sy
 800fef4:	f3bf 8f4f 	dsb	sy
 800fef8:	61fb      	str	r3, [r7, #28]
}
 800fefa:	bf00      	nop
 800fefc:	e7fe      	b.n	800fefc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fefe:	f001 fa8d 	bl	801141c <xTaskGetSchedulerState>
 800ff02:	4603      	mov	r3, r0
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d102      	bne.n	800ff0e <xQueueReceive+0x6e>
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d101      	bne.n	800ff12 <xQueueReceive+0x72>
 800ff0e:	2301      	movs	r3, #1
 800ff10:	e000      	b.n	800ff14 <xQueueReceive+0x74>
 800ff12:	2300      	movs	r3, #0
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d10a      	bne.n	800ff2e <xQueueReceive+0x8e>
	__asm volatile
 800ff18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff1c:	f383 8811 	msr	BASEPRI, r3
 800ff20:	f3bf 8f6f 	isb	sy
 800ff24:	f3bf 8f4f 	dsb	sy
 800ff28:	61bb      	str	r3, [r7, #24]
}
 800ff2a:	bf00      	nop
 800ff2c:	e7fe      	b.n	800ff2c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ff2e:	f002 f9c1 	bl	80122b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ff32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff36:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ff38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d01f      	beq.n	800ff7e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ff3e:	68b9      	ldr	r1, [r7, #8]
 800ff40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ff42:	f000 fa9b 	bl	801047c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ff46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff48:	1e5a      	subs	r2, r3, #1
 800ff4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff4c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ff4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff50:	691b      	ldr	r3, [r3, #16]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d00f      	beq.n	800ff76 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ff56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff58:	3310      	adds	r3, #16
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	f001 f82e 	bl	8010fbc <xTaskRemoveFromEventList>
 800ff60:	4603      	mov	r3, r0
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d007      	beq.n	800ff76 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ff66:	4b3d      	ldr	r3, [pc, #244]	; (801005c <xQueueReceive+0x1bc>)
 800ff68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff6c:	601a      	str	r2, [r3, #0]
 800ff6e:	f3bf 8f4f 	dsb	sy
 800ff72:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ff76:	f002 f9cd 	bl	8012314 <vPortExitCritical>
				return pdPASS;
 800ff7a:	2301      	movs	r3, #1
 800ff7c:	e069      	b.n	8010052 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d103      	bne.n	800ff8c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ff84:	f002 f9c6 	bl	8012314 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ff88:	2300      	movs	r3, #0
 800ff8a:	e062      	b.n	8010052 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ff8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d106      	bne.n	800ffa0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ff92:	f107 0310 	add.w	r3, r7, #16
 800ff96:	4618      	mov	r0, r3
 800ff98:	f001 f8d6 	bl	8011148 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ff9c:	2301      	movs	r3, #1
 800ff9e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ffa0:	f002 f9b8 	bl	8012314 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ffa4:	f000 fdaa 	bl	8010afc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ffa8:	f002 f984 	bl	80122b4 <vPortEnterCritical>
 800ffac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ffb2:	b25b      	sxtb	r3, r3
 800ffb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffb8:	d103      	bne.n	800ffc2 <xQueueReceive+0x122>
 800ffba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffbc:	2200      	movs	r2, #0
 800ffbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ffc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ffc8:	b25b      	sxtb	r3, r3
 800ffca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffce:	d103      	bne.n	800ffd8 <xQueueReceive+0x138>
 800ffd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffd2:	2200      	movs	r2, #0
 800ffd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ffd8:	f002 f99c 	bl	8012314 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ffdc:	1d3a      	adds	r2, r7, #4
 800ffde:	f107 0310 	add.w	r3, r7, #16
 800ffe2:	4611      	mov	r1, r2
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	f001 f8c5 	bl	8011174 <xTaskCheckForTimeOut>
 800ffea:	4603      	mov	r3, r0
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d123      	bne.n	8010038 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fff0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fff2:	f000 fabb 	bl	801056c <prvIsQueueEmpty>
 800fff6:	4603      	mov	r3, r0
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d017      	beq.n	801002c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fffe:	3324      	adds	r3, #36	; 0x24
 8010000:	687a      	ldr	r2, [r7, #4]
 8010002:	4611      	mov	r1, r2
 8010004:	4618      	mov	r0, r3
 8010006:	f000 ff4d 	bl	8010ea4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801000a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801000c:	f000 fa5c 	bl	80104c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010010:	f000 fd82 	bl	8010b18 <xTaskResumeAll>
 8010014:	4603      	mov	r3, r0
 8010016:	2b00      	cmp	r3, #0
 8010018:	d189      	bne.n	800ff2e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801001a:	4b10      	ldr	r3, [pc, #64]	; (801005c <xQueueReceive+0x1bc>)
 801001c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010020:	601a      	str	r2, [r3, #0]
 8010022:	f3bf 8f4f 	dsb	sy
 8010026:	f3bf 8f6f 	isb	sy
 801002a:	e780      	b.n	800ff2e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801002c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801002e:	f000 fa4b 	bl	80104c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010032:	f000 fd71 	bl	8010b18 <xTaskResumeAll>
 8010036:	e77a      	b.n	800ff2e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010038:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801003a:	f000 fa45 	bl	80104c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801003e:	f000 fd6b 	bl	8010b18 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010042:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010044:	f000 fa92 	bl	801056c <prvIsQueueEmpty>
 8010048:	4603      	mov	r3, r0
 801004a:	2b00      	cmp	r3, #0
 801004c:	f43f af6f 	beq.w	800ff2e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010050:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010052:	4618      	mov	r0, r3
 8010054:	3730      	adds	r7, #48	; 0x30
 8010056:	46bd      	mov	sp, r7
 8010058:	bd80      	pop	{r7, pc}
 801005a:	bf00      	nop
 801005c:	e000ed04 	.word	0xe000ed04

08010060 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8010060:	b580      	push	{r7, lr}
 8010062:	b08e      	sub	sp, #56	; 0x38
 8010064:	af00      	add	r7, sp, #0
 8010066:	6078      	str	r0, [r7, #4]
 8010068:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801006a:	2300      	movs	r3, #0
 801006c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8010072:	2300      	movs	r3, #0
 8010074:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010078:	2b00      	cmp	r3, #0
 801007a:	d10a      	bne.n	8010092 <xQueueSemaphoreTake+0x32>
	__asm volatile
 801007c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010080:	f383 8811 	msr	BASEPRI, r3
 8010084:	f3bf 8f6f 	isb	sy
 8010088:	f3bf 8f4f 	dsb	sy
 801008c:	623b      	str	r3, [r7, #32]
}
 801008e:	bf00      	nop
 8010090:	e7fe      	b.n	8010090 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010096:	2b00      	cmp	r3, #0
 8010098:	d00a      	beq.n	80100b0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 801009a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801009e:	f383 8811 	msr	BASEPRI, r3
 80100a2:	f3bf 8f6f 	isb	sy
 80100a6:	f3bf 8f4f 	dsb	sy
 80100aa:	61fb      	str	r3, [r7, #28]
}
 80100ac:	bf00      	nop
 80100ae:	e7fe      	b.n	80100ae <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80100b0:	f001 f9b4 	bl	801141c <xTaskGetSchedulerState>
 80100b4:	4603      	mov	r3, r0
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d102      	bne.n	80100c0 <xQueueSemaphoreTake+0x60>
 80100ba:	683b      	ldr	r3, [r7, #0]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d101      	bne.n	80100c4 <xQueueSemaphoreTake+0x64>
 80100c0:	2301      	movs	r3, #1
 80100c2:	e000      	b.n	80100c6 <xQueueSemaphoreTake+0x66>
 80100c4:	2300      	movs	r3, #0
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d10a      	bne.n	80100e0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80100ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100ce:	f383 8811 	msr	BASEPRI, r3
 80100d2:	f3bf 8f6f 	isb	sy
 80100d6:	f3bf 8f4f 	dsb	sy
 80100da:	61bb      	str	r3, [r7, #24]
}
 80100dc:	bf00      	nop
 80100de:	e7fe      	b.n	80100de <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80100e0:	f002 f8e8 	bl	80122b4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80100e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100e8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80100ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d024      	beq.n	801013a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80100f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100f2:	1e5a      	subs	r2, r3, #1
 80100f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100f6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80100f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d104      	bne.n	801010a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8010100:	f001 fb1a 	bl	8011738 <pvTaskIncrementMutexHeldCount>
 8010104:	4602      	mov	r2, r0
 8010106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010108:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801010a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801010c:	691b      	ldr	r3, [r3, #16]
 801010e:	2b00      	cmp	r3, #0
 8010110:	d00f      	beq.n	8010132 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010114:	3310      	adds	r3, #16
 8010116:	4618      	mov	r0, r3
 8010118:	f000 ff50 	bl	8010fbc <xTaskRemoveFromEventList>
 801011c:	4603      	mov	r3, r0
 801011e:	2b00      	cmp	r3, #0
 8010120:	d007      	beq.n	8010132 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010122:	4b54      	ldr	r3, [pc, #336]	; (8010274 <xQueueSemaphoreTake+0x214>)
 8010124:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010128:	601a      	str	r2, [r3, #0]
 801012a:	f3bf 8f4f 	dsb	sy
 801012e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010132:	f002 f8ef 	bl	8012314 <vPortExitCritical>
				return pdPASS;
 8010136:	2301      	movs	r3, #1
 8010138:	e097      	b.n	801026a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801013a:	683b      	ldr	r3, [r7, #0]
 801013c:	2b00      	cmp	r3, #0
 801013e:	d111      	bne.n	8010164 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010142:	2b00      	cmp	r3, #0
 8010144:	d00a      	beq.n	801015c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8010146:	f04f 0350 	mov.w	r3, #80	; 0x50
 801014a:	f383 8811 	msr	BASEPRI, r3
 801014e:	f3bf 8f6f 	isb	sy
 8010152:	f3bf 8f4f 	dsb	sy
 8010156:	617b      	str	r3, [r7, #20]
}
 8010158:	bf00      	nop
 801015a:	e7fe      	b.n	801015a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801015c:	f002 f8da 	bl	8012314 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010160:	2300      	movs	r3, #0
 8010162:	e082      	b.n	801026a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010166:	2b00      	cmp	r3, #0
 8010168:	d106      	bne.n	8010178 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801016a:	f107 030c 	add.w	r3, r7, #12
 801016e:	4618      	mov	r0, r3
 8010170:	f000 ffea 	bl	8011148 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010174:	2301      	movs	r3, #1
 8010176:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010178:	f002 f8cc 	bl	8012314 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801017c:	f000 fcbe 	bl	8010afc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010180:	f002 f898 	bl	80122b4 <vPortEnterCritical>
 8010184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010186:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801018a:	b25b      	sxtb	r3, r3
 801018c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010190:	d103      	bne.n	801019a <xQueueSemaphoreTake+0x13a>
 8010192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010194:	2200      	movs	r2, #0
 8010196:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801019a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801019c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80101a0:	b25b      	sxtb	r3, r3
 80101a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101a6:	d103      	bne.n	80101b0 <xQueueSemaphoreTake+0x150>
 80101a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101aa:	2200      	movs	r2, #0
 80101ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80101b0:	f002 f8b0 	bl	8012314 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80101b4:	463a      	mov	r2, r7
 80101b6:	f107 030c 	add.w	r3, r7, #12
 80101ba:	4611      	mov	r1, r2
 80101bc:	4618      	mov	r0, r3
 80101be:	f000 ffd9 	bl	8011174 <xTaskCheckForTimeOut>
 80101c2:	4603      	mov	r3, r0
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d132      	bne.n	801022e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80101c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80101ca:	f000 f9cf 	bl	801056c <prvIsQueueEmpty>
 80101ce:	4603      	mov	r3, r0
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d026      	beq.n	8010222 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80101d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d109      	bne.n	80101f0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80101dc:	f002 f86a 	bl	80122b4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80101e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101e2:	689b      	ldr	r3, [r3, #8]
 80101e4:	4618      	mov	r0, r3
 80101e6:	f001 f937 	bl	8011458 <xTaskPriorityInherit>
 80101ea:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80101ec:	f002 f892 	bl	8012314 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80101f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101f2:	3324      	adds	r3, #36	; 0x24
 80101f4:	683a      	ldr	r2, [r7, #0]
 80101f6:	4611      	mov	r1, r2
 80101f8:	4618      	mov	r0, r3
 80101fa:	f000 fe53 	bl	8010ea4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80101fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010200:	f000 f962 	bl	80104c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010204:	f000 fc88 	bl	8010b18 <xTaskResumeAll>
 8010208:	4603      	mov	r3, r0
 801020a:	2b00      	cmp	r3, #0
 801020c:	f47f af68 	bne.w	80100e0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8010210:	4b18      	ldr	r3, [pc, #96]	; (8010274 <xQueueSemaphoreTake+0x214>)
 8010212:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010216:	601a      	str	r2, [r3, #0]
 8010218:	f3bf 8f4f 	dsb	sy
 801021c:	f3bf 8f6f 	isb	sy
 8010220:	e75e      	b.n	80100e0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8010222:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010224:	f000 f950 	bl	80104c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010228:	f000 fc76 	bl	8010b18 <xTaskResumeAll>
 801022c:	e758      	b.n	80100e0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801022e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010230:	f000 f94a 	bl	80104c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010234:	f000 fc70 	bl	8010b18 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010238:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801023a:	f000 f997 	bl	801056c <prvIsQueueEmpty>
 801023e:	4603      	mov	r3, r0
 8010240:	2b00      	cmp	r3, #0
 8010242:	f43f af4d 	beq.w	80100e0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8010246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010248:	2b00      	cmp	r3, #0
 801024a:	d00d      	beq.n	8010268 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 801024c:	f002 f832 	bl	80122b4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010250:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010252:	f000 f891 	bl	8010378 <prvGetDisinheritPriorityAfterTimeout>
 8010256:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8010258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801025a:	689b      	ldr	r3, [r3, #8]
 801025c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801025e:	4618      	mov	r0, r3
 8010260:	f001 f9d0 	bl	8011604 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010264:	f002 f856 	bl	8012314 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010268:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801026a:	4618      	mov	r0, r3
 801026c:	3738      	adds	r7, #56	; 0x38
 801026e:	46bd      	mov	sp, r7
 8010270:	bd80      	pop	{r7, pc}
 8010272:	bf00      	nop
 8010274:	e000ed04 	.word	0xe000ed04

08010278 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010278:	b580      	push	{r7, lr}
 801027a:	b08e      	sub	sp, #56	; 0x38
 801027c:	af00      	add	r7, sp, #0
 801027e:	60f8      	str	r0, [r7, #12]
 8010280:	60b9      	str	r1, [r7, #8]
 8010282:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801028a:	2b00      	cmp	r3, #0
 801028c:	d10a      	bne.n	80102a4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 801028e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010292:	f383 8811 	msr	BASEPRI, r3
 8010296:	f3bf 8f6f 	isb	sy
 801029a:	f3bf 8f4f 	dsb	sy
 801029e:	623b      	str	r3, [r7, #32]
}
 80102a0:	bf00      	nop
 80102a2:	e7fe      	b.n	80102a2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80102a4:	68bb      	ldr	r3, [r7, #8]
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d103      	bne.n	80102b2 <xQueueReceiveFromISR+0x3a>
 80102aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d101      	bne.n	80102b6 <xQueueReceiveFromISR+0x3e>
 80102b2:	2301      	movs	r3, #1
 80102b4:	e000      	b.n	80102b8 <xQueueReceiveFromISR+0x40>
 80102b6:	2300      	movs	r3, #0
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d10a      	bne.n	80102d2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80102bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102c0:	f383 8811 	msr	BASEPRI, r3
 80102c4:	f3bf 8f6f 	isb	sy
 80102c8:	f3bf 8f4f 	dsb	sy
 80102cc:	61fb      	str	r3, [r7, #28]
}
 80102ce:	bf00      	nop
 80102d0:	e7fe      	b.n	80102d0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80102d2:	f002 f8d1 	bl	8012478 <vPortValidateInterruptPriority>
	__asm volatile
 80102d6:	f3ef 8211 	mrs	r2, BASEPRI
 80102da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102de:	f383 8811 	msr	BASEPRI, r3
 80102e2:	f3bf 8f6f 	isb	sy
 80102e6:	f3bf 8f4f 	dsb	sy
 80102ea:	61ba      	str	r2, [r7, #24]
 80102ec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80102ee:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80102f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80102f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80102f6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80102f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d02f      	beq.n	801035e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80102fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010300:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010304:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010308:	68b9      	ldr	r1, [r7, #8]
 801030a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801030c:	f000 f8b6 	bl	801047c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010312:	1e5a      	subs	r2, r3, #1
 8010314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010316:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010318:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801031c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010320:	d112      	bne.n	8010348 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010324:	691b      	ldr	r3, [r3, #16]
 8010326:	2b00      	cmp	r3, #0
 8010328:	d016      	beq.n	8010358 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801032a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801032c:	3310      	adds	r3, #16
 801032e:	4618      	mov	r0, r3
 8010330:	f000 fe44 	bl	8010fbc <xTaskRemoveFromEventList>
 8010334:	4603      	mov	r3, r0
 8010336:	2b00      	cmp	r3, #0
 8010338:	d00e      	beq.n	8010358 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	2b00      	cmp	r3, #0
 801033e:	d00b      	beq.n	8010358 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	2201      	movs	r2, #1
 8010344:	601a      	str	r2, [r3, #0]
 8010346:	e007      	b.n	8010358 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010348:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801034c:	3301      	adds	r3, #1
 801034e:	b2db      	uxtb	r3, r3
 8010350:	b25a      	sxtb	r2, r3
 8010352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010354:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8010358:	2301      	movs	r3, #1
 801035a:	637b      	str	r3, [r7, #52]	; 0x34
 801035c:	e001      	b.n	8010362 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 801035e:	2300      	movs	r3, #0
 8010360:	637b      	str	r3, [r7, #52]	; 0x34
 8010362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010364:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010366:	693b      	ldr	r3, [r7, #16]
 8010368:	f383 8811 	msr	BASEPRI, r3
}
 801036c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801036e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010370:	4618      	mov	r0, r3
 8010372:	3738      	adds	r7, #56	; 0x38
 8010374:	46bd      	mov	sp, r7
 8010376:	bd80      	pop	{r7, pc}

08010378 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8010378:	b480      	push	{r7}
 801037a:	b085      	sub	sp, #20
 801037c:	af00      	add	r7, sp, #0
 801037e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010384:	2b00      	cmp	r3, #0
 8010386:	d006      	beq.n	8010396 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8010392:	60fb      	str	r3, [r7, #12]
 8010394:	e001      	b.n	801039a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8010396:	2300      	movs	r3, #0
 8010398:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801039a:	68fb      	ldr	r3, [r7, #12]
	}
 801039c:	4618      	mov	r0, r3
 801039e:	3714      	adds	r7, #20
 80103a0:	46bd      	mov	sp, r7
 80103a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a6:	4770      	bx	lr

080103a8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80103a8:	b580      	push	{r7, lr}
 80103aa:	b086      	sub	sp, #24
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	60f8      	str	r0, [r7, #12]
 80103b0:	60b9      	str	r1, [r7, #8]
 80103b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80103b4:	2300      	movs	r3, #0
 80103b6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103bc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d10d      	bne.n	80103e2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d14d      	bne.n	801046a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	689b      	ldr	r3, [r3, #8]
 80103d2:	4618      	mov	r0, r3
 80103d4:	f001 f8a8 	bl	8011528 <xTaskPriorityDisinherit>
 80103d8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	2200      	movs	r2, #0
 80103de:	609a      	str	r2, [r3, #8]
 80103e0:	e043      	b.n	801046a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d119      	bne.n	801041c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	6858      	ldr	r0, [r3, #4]
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103f0:	461a      	mov	r2, r3
 80103f2:	68b9      	ldr	r1, [r7, #8]
 80103f4:	f002 fa94 	bl	8012920 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	685a      	ldr	r2, [r3, #4]
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010400:	441a      	add	r2, r3
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	685a      	ldr	r2, [r3, #4]
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	689b      	ldr	r3, [r3, #8]
 801040e:	429a      	cmp	r2, r3
 8010410:	d32b      	bcc.n	801046a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	681a      	ldr	r2, [r3, #0]
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	605a      	str	r2, [r3, #4]
 801041a:	e026      	b.n	801046a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	68d8      	ldr	r0, [r3, #12]
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010424:	461a      	mov	r2, r3
 8010426:	68b9      	ldr	r1, [r7, #8]
 8010428:	f002 fa7a 	bl	8012920 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	68da      	ldr	r2, [r3, #12]
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010434:	425b      	negs	r3, r3
 8010436:	441a      	add	r2, r3
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	68da      	ldr	r2, [r3, #12]
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	429a      	cmp	r2, r3
 8010446:	d207      	bcs.n	8010458 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	689a      	ldr	r2, [r3, #8]
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010450:	425b      	negs	r3, r3
 8010452:	441a      	add	r2, r3
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	2b02      	cmp	r3, #2
 801045c:	d105      	bne.n	801046a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801045e:	693b      	ldr	r3, [r7, #16]
 8010460:	2b00      	cmp	r3, #0
 8010462:	d002      	beq.n	801046a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010464:	693b      	ldr	r3, [r7, #16]
 8010466:	3b01      	subs	r3, #1
 8010468:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801046a:	693b      	ldr	r3, [r7, #16]
 801046c:	1c5a      	adds	r2, r3, #1
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010472:	697b      	ldr	r3, [r7, #20]
}
 8010474:	4618      	mov	r0, r3
 8010476:	3718      	adds	r7, #24
 8010478:	46bd      	mov	sp, r7
 801047a:	bd80      	pop	{r7, pc}

0801047c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801047c:	b580      	push	{r7, lr}
 801047e:	b082      	sub	sp, #8
 8010480:	af00      	add	r7, sp, #0
 8010482:	6078      	str	r0, [r7, #4]
 8010484:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801048a:	2b00      	cmp	r3, #0
 801048c:	d018      	beq.n	80104c0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	68da      	ldr	r2, [r3, #12]
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010496:	441a      	add	r2, r3
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	68da      	ldr	r2, [r3, #12]
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	689b      	ldr	r3, [r3, #8]
 80104a4:	429a      	cmp	r2, r3
 80104a6:	d303      	bcc.n	80104b0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	681a      	ldr	r2, [r3, #0]
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	68d9      	ldr	r1, [r3, #12]
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104b8:	461a      	mov	r2, r3
 80104ba:	6838      	ldr	r0, [r7, #0]
 80104bc:	f002 fa30 	bl	8012920 <memcpy>
	}
}
 80104c0:	bf00      	nop
 80104c2:	3708      	adds	r7, #8
 80104c4:	46bd      	mov	sp, r7
 80104c6:	bd80      	pop	{r7, pc}

080104c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80104c8:	b580      	push	{r7, lr}
 80104ca:	b084      	sub	sp, #16
 80104cc:	af00      	add	r7, sp, #0
 80104ce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80104d0:	f001 fef0 	bl	80122b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80104da:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80104dc:	e011      	b.n	8010502 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d012      	beq.n	801050c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	3324      	adds	r3, #36	; 0x24
 80104ea:	4618      	mov	r0, r3
 80104ec:	f000 fd66 	bl	8010fbc <xTaskRemoveFromEventList>
 80104f0:	4603      	mov	r3, r0
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d001      	beq.n	80104fa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80104f6:	f000 fe9f 	bl	8011238 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80104fa:	7bfb      	ldrb	r3, [r7, #15]
 80104fc:	3b01      	subs	r3, #1
 80104fe:	b2db      	uxtb	r3, r3
 8010500:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010506:	2b00      	cmp	r3, #0
 8010508:	dce9      	bgt.n	80104de <prvUnlockQueue+0x16>
 801050a:	e000      	b.n	801050e <prvUnlockQueue+0x46>
					break;
 801050c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	22ff      	movs	r2, #255	; 0xff
 8010512:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010516:	f001 fefd 	bl	8012314 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801051a:	f001 fecb 	bl	80122b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010524:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010526:	e011      	b.n	801054c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	691b      	ldr	r3, [r3, #16]
 801052c:	2b00      	cmp	r3, #0
 801052e:	d012      	beq.n	8010556 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	3310      	adds	r3, #16
 8010534:	4618      	mov	r0, r3
 8010536:	f000 fd41 	bl	8010fbc <xTaskRemoveFromEventList>
 801053a:	4603      	mov	r3, r0
 801053c:	2b00      	cmp	r3, #0
 801053e:	d001      	beq.n	8010544 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010540:	f000 fe7a 	bl	8011238 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010544:	7bbb      	ldrb	r3, [r7, #14]
 8010546:	3b01      	subs	r3, #1
 8010548:	b2db      	uxtb	r3, r3
 801054a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801054c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010550:	2b00      	cmp	r3, #0
 8010552:	dce9      	bgt.n	8010528 <prvUnlockQueue+0x60>
 8010554:	e000      	b.n	8010558 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010556:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	22ff      	movs	r2, #255	; 0xff
 801055c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8010560:	f001 fed8 	bl	8012314 <vPortExitCritical>
}
 8010564:	bf00      	nop
 8010566:	3710      	adds	r7, #16
 8010568:	46bd      	mov	sp, r7
 801056a:	bd80      	pop	{r7, pc}

0801056c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801056c:	b580      	push	{r7, lr}
 801056e:	b084      	sub	sp, #16
 8010570:	af00      	add	r7, sp, #0
 8010572:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010574:	f001 fe9e 	bl	80122b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801057c:	2b00      	cmp	r3, #0
 801057e:	d102      	bne.n	8010586 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010580:	2301      	movs	r3, #1
 8010582:	60fb      	str	r3, [r7, #12]
 8010584:	e001      	b.n	801058a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010586:	2300      	movs	r3, #0
 8010588:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801058a:	f001 fec3 	bl	8012314 <vPortExitCritical>

	return xReturn;
 801058e:	68fb      	ldr	r3, [r7, #12]
}
 8010590:	4618      	mov	r0, r3
 8010592:	3710      	adds	r7, #16
 8010594:	46bd      	mov	sp, r7
 8010596:	bd80      	pop	{r7, pc}

08010598 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010598:	b580      	push	{r7, lr}
 801059a:	b084      	sub	sp, #16
 801059c:	af00      	add	r7, sp, #0
 801059e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80105a0:	f001 fe88 	bl	80122b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80105ac:	429a      	cmp	r2, r3
 80105ae:	d102      	bne.n	80105b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80105b0:	2301      	movs	r3, #1
 80105b2:	60fb      	str	r3, [r7, #12]
 80105b4:	e001      	b.n	80105ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80105b6:	2300      	movs	r3, #0
 80105b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80105ba:	f001 feab 	bl	8012314 <vPortExitCritical>

	return xReturn;
 80105be:	68fb      	ldr	r3, [r7, #12]
}
 80105c0:	4618      	mov	r0, r3
 80105c2:	3710      	adds	r7, #16
 80105c4:	46bd      	mov	sp, r7
 80105c6:	bd80      	pop	{r7, pc}

080105c8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80105c8:	b480      	push	{r7}
 80105ca:	b085      	sub	sp, #20
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	6078      	str	r0, [r7, #4]
 80105d0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80105d2:	2300      	movs	r3, #0
 80105d4:	60fb      	str	r3, [r7, #12]
 80105d6:	e014      	b.n	8010602 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80105d8:	4a0f      	ldr	r2, [pc, #60]	; (8010618 <vQueueAddToRegistry+0x50>)
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d10b      	bne.n	80105fc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80105e4:	490c      	ldr	r1, [pc, #48]	; (8010618 <vQueueAddToRegistry+0x50>)
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	683a      	ldr	r2, [r7, #0]
 80105ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80105ee:	4a0a      	ldr	r2, [pc, #40]	; (8010618 <vQueueAddToRegistry+0x50>)
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	00db      	lsls	r3, r3, #3
 80105f4:	4413      	add	r3, r2
 80105f6:	687a      	ldr	r2, [r7, #4]
 80105f8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80105fa:	e006      	b.n	801060a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	3301      	adds	r3, #1
 8010600:	60fb      	str	r3, [r7, #12]
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	2b07      	cmp	r3, #7
 8010606:	d9e7      	bls.n	80105d8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010608:	bf00      	nop
 801060a:	bf00      	nop
 801060c:	3714      	adds	r7, #20
 801060e:	46bd      	mov	sp, r7
 8010610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010614:	4770      	bx	lr
 8010616:	bf00      	nop
 8010618:	200058bc 	.word	0x200058bc

0801061c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801061c:	b580      	push	{r7, lr}
 801061e:	b086      	sub	sp, #24
 8010620:	af00      	add	r7, sp, #0
 8010622:	60f8      	str	r0, [r7, #12]
 8010624:	60b9      	str	r1, [r7, #8]
 8010626:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801062c:	f001 fe42 	bl	80122b4 <vPortEnterCritical>
 8010630:	697b      	ldr	r3, [r7, #20]
 8010632:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010636:	b25b      	sxtb	r3, r3
 8010638:	f1b3 3fff 	cmp.w	r3, #4294967295
 801063c:	d103      	bne.n	8010646 <vQueueWaitForMessageRestricted+0x2a>
 801063e:	697b      	ldr	r3, [r7, #20]
 8010640:	2200      	movs	r2, #0
 8010642:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010646:	697b      	ldr	r3, [r7, #20]
 8010648:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801064c:	b25b      	sxtb	r3, r3
 801064e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010652:	d103      	bne.n	801065c <vQueueWaitForMessageRestricted+0x40>
 8010654:	697b      	ldr	r3, [r7, #20]
 8010656:	2200      	movs	r2, #0
 8010658:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801065c:	f001 fe5a 	bl	8012314 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8010660:	697b      	ldr	r3, [r7, #20]
 8010662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010664:	2b00      	cmp	r3, #0
 8010666:	d106      	bne.n	8010676 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010668:	697b      	ldr	r3, [r7, #20]
 801066a:	3324      	adds	r3, #36	; 0x24
 801066c:	687a      	ldr	r2, [r7, #4]
 801066e:	68b9      	ldr	r1, [r7, #8]
 8010670:	4618      	mov	r0, r3
 8010672:	f000 fc77 	bl	8010f64 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8010676:	6978      	ldr	r0, [r7, #20]
 8010678:	f7ff ff26 	bl	80104c8 <prvUnlockQueue>
	}
 801067c:	bf00      	nop
 801067e:	3718      	adds	r7, #24
 8010680:	46bd      	mov	sp, r7
 8010682:	bd80      	pop	{r7, pc}

08010684 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010684:	b580      	push	{r7, lr}
 8010686:	b08e      	sub	sp, #56	; 0x38
 8010688:	af04      	add	r7, sp, #16
 801068a:	60f8      	str	r0, [r7, #12]
 801068c:	60b9      	str	r1, [r7, #8]
 801068e:	607a      	str	r2, [r7, #4]
 8010690:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010694:	2b00      	cmp	r3, #0
 8010696:	d10a      	bne.n	80106ae <xTaskCreateStatic+0x2a>
	__asm volatile
 8010698:	f04f 0350 	mov.w	r3, #80	; 0x50
 801069c:	f383 8811 	msr	BASEPRI, r3
 80106a0:	f3bf 8f6f 	isb	sy
 80106a4:	f3bf 8f4f 	dsb	sy
 80106a8:	623b      	str	r3, [r7, #32]
}
 80106aa:	bf00      	nop
 80106ac:	e7fe      	b.n	80106ac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80106ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d10a      	bne.n	80106ca <xTaskCreateStatic+0x46>
	__asm volatile
 80106b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106b8:	f383 8811 	msr	BASEPRI, r3
 80106bc:	f3bf 8f6f 	isb	sy
 80106c0:	f3bf 8f4f 	dsb	sy
 80106c4:	61fb      	str	r3, [r7, #28]
}
 80106c6:	bf00      	nop
 80106c8:	e7fe      	b.n	80106c8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80106ca:	236c      	movs	r3, #108	; 0x6c
 80106cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80106ce:	693b      	ldr	r3, [r7, #16]
 80106d0:	2b6c      	cmp	r3, #108	; 0x6c
 80106d2:	d00a      	beq.n	80106ea <xTaskCreateStatic+0x66>
	__asm volatile
 80106d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106d8:	f383 8811 	msr	BASEPRI, r3
 80106dc:	f3bf 8f6f 	isb	sy
 80106e0:	f3bf 8f4f 	dsb	sy
 80106e4:	61bb      	str	r3, [r7, #24]
}
 80106e6:	bf00      	nop
 80106e8:	e7fe      	b.n	80106e8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80106ea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80106ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d01e      	beq.n	8010730 <xTaskCreateStatic+0xac>
 80106f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d01b      	beq.n	8010730 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80106f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106fa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80106fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010700:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010704:	2202      	movs	r2, #2
 8010706:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801070a:	2300      	movs	r3, #0
 801070c:	9303      	str	r3, [sp, #12]
 801070e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010710:	9302      	str	r3, [sp, #8]
 8010712:	f107 0314 	add.w	r3, r7, #20
 8010716:	9301      	str	r3, [sp, #4]
 8010718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801071a:	9300      	str	r3, [sp, #0]
 801071c:	683b      	ldr	r3, [r7, #0]
 801071e:	687a      	ldr	r2, [r7, #4]
 8010720:	68b9      	ldr	r1, [r7, #8]
 8010722:	68f8      	ldr	r0, [r7, #12]
 8010724:	f000 f850 	bl	80107c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010728:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801072a:	f000 f8dd 	bl	80108e8 <prvAddNewTaskToReadyList>
 801072e:	e001      	b.n	8010734 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8010730:	2300      	movs	r3, #0
 8010732:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010734:	697b      	ldr	r3, [r7, #20]
	}
 8010736:	4618      	mov	r0, r3
 8010738:	3728      	adds	r7, #40	; 0x28
 801073a:	46bd      	mov	sp, r7
 801073c:	bd80      	pop	{r7, pc}

0801073e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801073e:	b580      	push	{r7, lr}
 8010740:	b08c      	sub	sp, #48	; 0x30
 8010742:	af04      	add	r7, sp, #16
 8010744:	60f8      	str	r0, [r7, #12]
 8010746:	60b9      	str	r1, [r7, #8]
 8010748:	603b      	str	r3, [r7, #0]
 801074a:	4613      	mov	r3, r2
 801074c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801074e:	88fb      	ldrh	r3, [r7, #6]
 8010750:	009b      	lsls	r3, r3, #2
 8010752:	4618      	mov	r0, r3
 8010754:	f001 fed0 	bl	80124f8 <pvPortMalloc>
 8010758:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801075a:	697b      	ldr	r3, [r7, #20]
 801075c:	2b00      	cmp	r3, #0
 801075e:	d00e      	beq.n	801077e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010760:	206c      	movs	r0, #108	; 0x6c
 8010762:	f001 fec9 	bl	80124f8 <pvPortMalloc>
 8010766:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010768:	69fb      	ldr	r3, [r7, #28]
 801076a:	2b00      	cmp	r3, #0
 801076c:	d003      	beq.n	8010776 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801076e:	69fb      	ldr	r3, [r7, #28]
 8010770:	697a      	ldr	r2, [r7, #20]
 8010772:	631a      	str	r2, [r3, #48]	; 0x30
 8010774:	e005      	b.n	8010782 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010776:	6978      	ldr	r0, [r7, #20]
 8010778:	f001 ff8a 	bl	8012690 <vPortFree>
 801077c:	e001      	b.n	8010782 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801077e:	2300      	movs	r3, #0
 8010780:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010782:	69fb      	ldr	r3, [r7, #28]
 8010784:	2b00      	cmp	r3, #0
 8010786:	d017      	beq.n	80107b8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010788:	69fb      	ldr	r3, [r7, #28]
 801078a:	2200      	movs	r2, #0
 801078c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010790:	88fa      	ldrh	r2, [r7, #6]
 8010792:	2300      	movs	r3, #0
 8010794:	9303      	str	r3, [sp, #12]
 8010796:	69fb      	ldr	r3, [r7, #28]
 8010798:	9302      	str	r3, [sp, #8]
 801079a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801079c:	9301      	str	r3, [sp, #4]
 801079e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107a0:	9300      	str	r3, [sp, #0]
 80107a2:	683b      	ldr	r3, [r7, #0]
 80107a4:	68b9      	ldr	r1, [r7, #8]
 80107a6:	68f8      	ldr	r0, [r7, #12]
 80107a8:	f000 f80e 	bl	80107c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80107ac:	69f8      	ldr	r0, [r7, #28]
 80107ae:	f000 f89b 	bl	80108e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80107b2:	2301      	movs	r3, #1
 80107b4:	61bb      	str	r3, [r7, #24]
 80107b6:	e002      	b.n	80107be <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80107b8:	f04f 33ff 	mov.w	r3, #4294967295
 80107bc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80107be:	69bb      	ldr	r3, [r7, #24]
	}
 80107c0:	4618      	mov	r0, r3
 80107c2:	3720      	adds	r7, #32
 80107c4:	46bd      	mov	sp, r7
 80107c6:	bd80      	pop	{r7, pc}

080107c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80107c8:	b580      	push	{r7, lr}
 80107ca:	b088      	sub	sp, #32
 80107cc:	af00      	add	r7, sp, #0
 80107ce:	60f8      	str	r0, [r7, #12]
 80107d0:	60b9      	str	r1, [r7, #8]
 80107d2:	607a      	str	r2, [r7, #4]
 80107d4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80107d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107d8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	009b      	lsls	r3, r3, #2
 80107de:	461a      	mov	r2, r3
 80107e0:	21a5      	movs	r1, #165	; 0xa5
 80107e2:	f002 f8ab 	bl	801293c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80107e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80107f0:	3b01      	subs	r3, #1
 80107f2:	009b      	lsls	r3, r3, #2
 80107f4:	4413      	add	r3, r2
 80107f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80107f8:	69bb      	ldr	r3, [r7, #24]
 80107fa:	f023 0307 	bic.w	r3, r3, #7
 80107fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010800:	69bb      	ldr	r3, [r7, #24]
 8010802:	f003 0307 	and.w	r3, r3, #7
 8010806:	2b00      	cmp	r3, #0
 8010808:	d00a      	beq.n	8010820 <prvInitialiseNewTask+0x58>
	__asm volatile
 801080a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801080e:	f383 8811 	msr	BASEPRI, r3
 8010812:	f3bf 8f6f 	isb	sy
 8010816:	f3bf 8f4f 	dsb	sy
 801081a:	617b      	str	r3, [r7, #20]
}
 801081c:	bf00      	nop
 801081e:	e7fe      	b.n	801081e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010820:	68bb      	ldr	r3, [r7, #8]
 8010822:	2b00      	cmp	r3, #0
 8010824:	d01f      	beq.n	8010866 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010826:	2300      	movs	r3, #0
 8010828:	61fb      	str	r3, [r7, #28]
 801082a:	e012      	b.n	8010852 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801082c:	68ba      	ldr	r2, [r7, #8]
 801082e:	69fb      	ldr	r3, [r7, #28]
 8010830:	4413      	add	r3, r2
 8010832:	7819      	ldrb	r1, [r3, #0]
 8010834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010836:	69fb      	ldr	r3, [r7, #28]
 8010838:	4413      	add	r3, r2
 801083a:	3334      	adds	r3, #52	; 0x34
 801083c:	460a      	mov	r2, r1
 801083e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010840:	68ba      	ldr	r2, [r7, #8]
 8010842:	69fb      	ldr	r3, [r7, #28]
 8010844:	4413      	add	r3, r2
 8010846:	781b      	ldrb	r3, [r3, #0]
 8010848:	2b00      	cmp	r3, #0
 801084a:	d006      	beq.n	801085a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801084c:	69fb      	ldr	r3, [r7, #28]
 801084e:	3301      	adds	r3, #1
 8010850:	61fb      	str	r3, [r7, #28]
 8010852:	69fb      	ldr	r3, [r7, #28]
 8010854:	2b1f      	cmp	r3, #31
 8010856:	d9e9      	bls.n	801082c <prvInitialiseNewTask+0x64>
 8010858:	e000      	b.n	801085c <prvInitialiseNewTask+0x94>
			{
				break;
 801085a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801085c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801085e:	2200      	movs	r2, #0
 8010860:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8010864:	e003      	b.n	801086e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010868:	2200      	movs	r2, #0
 801086a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801086e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010870:	2b37      	cmp	r3, #55	; 0x37
 8010872:	d901      	bls.n	8010878 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010874:	2337      	movs	r3, #55	; 0x37
 8010876:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801087a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801087c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801087e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010880:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010882:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 8010884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010886:	2200      	movs	r2, #0
 8010888:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801088a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801088c:	3304      	adds	r3, #4
 801088e:	4618      	mov	r0, r3
 8010890:	f7fe fee4 	bl	800f65c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010896:	3318      	adds	r3, #24
 8010898:	4618      	mov	r0, r3
 801089a:	f7fe fedf 	bl	800f65c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801089e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80108a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80108a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108a6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80108aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80108ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80108b2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80108b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108b6:	2200      	movs	r2, #0
 80108b8:	665a      	str	r2, [r3, #100]	; 0x64
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80108ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108bc:	2200      	movs	r2, #0
 80108be:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80108c2:	683a      	ldr	r2, [r7, #0]
 80108c4:	68f9      	ldr	r1, [r7, #12]
 80108c6:	69b8      	ldr	r0, [r7, #24]
 80108c8:	f001 fbc6 	bl	8012058 <pxPortInitialiseStack>
 80108cc:	4602      	mov	r2, r0
 80108ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108d0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80108d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d002      	beq.n	80108de <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80108d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80108dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80108de:	bf00      	nop
 80108e0:	3720      	adds	r7, #32
 80108e2:	46bd      	mov	sp, r7
 80108e4:	bd80      	pop	{r7, pc}
	...

080108e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80108e8:	b580      	push	{r7, lr}
 80108ea:	b082      	sub	sp, #8
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80108f0:	f001 fce0 	bl	80122b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80108f4:	4b2d      	ldr	r3, [pc, #180]	; (80109ac <prvAddNewTaskToReadyList+0xc4>)
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	3301      	adds	r3, #1
 80108fa:	4a2c      	ldr	r2, [pc, #176]	; (80109ac <prvAddNewTaskToReadyList+0xc4>)
 80108fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80108fe:	4b2c      	ldr	r3, [pc, #176]	; (80109b0 <prvAddNewTaskToReadyList+0xc8>)
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	2b00      	cmp	r3, #0
 8010904:	d109      	bne.n	801091a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010906:	4a2a      	ldr	r2, [pc, #168]	; (80109b0 <prvAddNewTaskToReadyList+0xc8>)
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801090c:	4b27      	ldr	r3, [pc, #156]	; (80109ac <prvAddNewTaskToReadyList+0xc4>)
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	2b01      	cmp	r3, #1
 8010912:	d110      	bne.n	8010936 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010914:	f000 fcb4 	bl	8011280 <prvInitialiseTaskLists>
 8010918:	e00d      	b.n	8010936 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801091a:	4b26      	ldr	r3, [pc, #152]	; (80109b4 <prvAddNewTaskToReadyList+0xcc>)
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	2b00      	cmp	r3, #0
 8010920:	d109      	bne.n	8010936 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010922:	4b23      	ldr	r3, [pc, #140]	; (80109b0 <prvAddNewTaskToReadyList+0xc8>)
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801092c:	429a      	cmp	r2, r3
 801092e:	d802      	bhi.n	8010936 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010930:	4a1f      	ldr	r2, [pc, #124]	; (80109b0 <prvAddNewTaskToReadyList+0xc8>)
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010936:	4b20      	ldr	r3, [pc, #128]	; (80109b8 <prvAddNewTaskToReadyList+0xd0>)
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	3301      	adds	r3, #1
 801093c:	4a1e      	ldr	r2, [pc, #120]	; (80109b8 <prvAddNewTaskToReadyList+0xd0>)
 801093e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010940:	4b1d      	ldr	r3, [pc, #116]	; (80109b8 <prvAddNewTaskToReadyList+0xd0>)
 8010942:	681a      	ldr	r2, [r3, #0]
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801094c:	4b1b      	ldr	r3, [pc, #108]	; (80109bc <prvAddNewTaskToReadyList+0xd4>)
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	429a      	cmp	r2, r3
 8010952:	d903      	bls.n	801095c <prvAddNewTaskToReadyList+0x74>
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010958:	4a18      	ldr	r2, [pc, #96]	; (80109bc <prvAddNewTaskToReadyList+0xd4>)
 801095a:	6013      	str	r3, [r2, #0]
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010960:	4613      	mov	r3, r2
 8010962:	009b      	lsls	r3, r3, #2
 8010964:	4413      	add	r3, r2
 8010966:	009b      	lsls	r3, r3, #2
 8010968:	4a15      	ldr	r2, [pc, #84]	; (80109c0 <prvAddNewTaskToReadyList+0xd8>)
 801096a:	441a      	add	r2, r3
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	3304      	adds	r3, #4
 8010970:	4619      	mov	r1, r3
 8010972:	4610      	mov	r0, r2
 8010974:	f7fe fe7f 	bl	800f676 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010978:	f001 fccc 	bl	8012314 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801097c:	4b0d      	ldr	r3, [pc, #52]	; (80109b4 <prvAddNewTaskToReadyList+0xcc>)
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	2b00      	cmp	r3, #0
 8010982:	d00e      	beq.n	80109a2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010984:	4b0a      	ldr	r3, [pc, #40]	; (80109b0 <prvAddNewTaskToReadyList+0xc8>)
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801098e:	429a      	cmp	r2, r3
 8010990:	d207      	bcs.n	80109a2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010992:	4b0c      	ldr	r3, [pc, #48]	; (80109c4 <prvAddNewTaskToReadyList+0xdc>)
 8010994:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010998:	601a      	str	r2, [r3, #0]
 801099a:	f3bf 8f4f 	dsb	sy
 801099e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80109a2:	bf00      	nop
 80109a4:	3708      	adds	r7, #8
 80109a6:	46bd      	mov	sp, r7
 80109a8:	bd80      	pop	{r7, pc}
 80109aa:	bf00      	nop
 80109ac:	20005dd0 	.word	0x20005dd0
 80109b0:	200058fc 	.word	0x200058fc
 80109b4:	20005ddc 	.word	0x20005ddc
 80109b8:	20005dec 	.word	0x20005dec
 80109bc:	20005dd8 	.word	0x20005dd8
 80109c0:	20005900 	.word	0x20005900
 80109c4:	e000ed04 	.word	0xe000ed04

080109c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80109c8:	b580      	push	{r7, lr}
 80109ca:	b084      	sub	sp, #16
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80109d0:	2300      	movs	r3, #0
 80109d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d017      	beq.n	8010a0a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80109da:	4b13      	ldr	r3, [pc, #76]	; (8010a28 <vTaskDelay+0x60>)
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d00a      	beq.n	80109f8 <vTaskDelay+0x30>
	__asm volatile
 80109e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109e6:	f383 8811 	msr	BASEPRI, r3
 80109ea:	f3bf 8f6f 	isb	sy
 80109ee:	f3bf 8f4f 	dsb	sy
 80109f2:	60bb      	str	r3, [r7, #8]
}
 80109f4:	bf00      	nop
 80109f6:	e7fe      	b.n	80109f6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80109f8:	f000 f880 	bl	8010afc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80109fc:	2100      	movs	r1, #0
 80109fe:	6878      	ldr	r0, [r7, #4]
 8010a00:	f000 feae 	bl	8011760 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010a04:	f000 f888 	bl	8010b18 <xTaskResumeAll>
 8010a08:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d107      	bne.n	8010a20 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8010a10:	4b06      	ldr	r3, [pc, #24]	; (8010a2c <vTaskDelay+0x64>)
 8010a12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a16:	601a      	str	r2, [r3, #0]
 8010a18:	f3bf 8f4f 	dsb	sy
 8010a1c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010a20:	bf00      	nop
 8010a22:	3710      	adds	r7, #16
 8010a24:	46bd      	mov	sp, r7
 8010a26:	bd80      	pop	{r7, pc}
 8010a28:	20005df8 	.word	0x20005df8
 8010a2c:	e000ed04 	.word	0xe000ed04

08010a30 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010a30:	b580      	push	{r7, lr}
 8010a32:	b08a      	sub	sp, #40	; 0x28
 8010a34:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010a36:	2300      	movs	r3, #0
 8010a38:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010a3a:	2300      	movs	r3, #0
 8010a3c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010a3e:	463a      	mov	r2, r7
 8010a40:	1d39      	adds	r1, r7, #4
 8010a42:	f107 0308 	add.w	r3, r7, #8
 8010a46:	4618      	mov	r0, r3
 8010a48:	f7fe fbc6 	bl	800f1d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010a4c:	6839      	ldr	r1, [r7, #0]
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	68ba      	ldr	r2, [r7, #8]
 8010a52:	9202      	str	r2, [sp, #8]
 8010a54:	9301      	str	r3, [sp, #4]
 8010a56:	2300      	movs	r3, #0
 8010a58:	9300      	str	r3, [sp, #0]
 8010a5a:	2300      	movs	r3, #0
 8010a5c:	460a      	mov	r2, r1
 8010a5e:	4921      	ldr	r1, [pc, #132]	; (8010ae4 <vTaskStartScheduler+0xb4>)
 8010a60:	4821      	ldr	r0, [pc, #132]	; (8010ae8 <vTaskStartScheduler+0xb8>)
 8010a62:	f7ff fe0f 	bl	8010684 <xTaskCreateStatic>
 8010a66:	4603      	mov	r3, r0
 8010a68:	4a20      	ldr	r2, [pc, #128]	; (8010aec <vTaskStartScheduler+0xbc>)
 8010a6a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010a6c:	4b1f      	ldr	r3, [pc, #124]	; (8010aec <vTaskStartScheduler+0xbc>)
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d002      	beq.n	8010a7a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010a74:	2301      	movs	r3, #1
 8010a76:	617b      	str	r3, [r7, #20]
 8010a78:	e001      	b.n	8010a7e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010a7a:	2300      	movs	r3, #0
 8010a7c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8010a7e:	697b      	ldr	r3, [r7, #20]
 8010a80:	2b01      	cmp	r3, #1
 8010a82:	d102      	bne.n	8010a8a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8010a84:	f000 fec0 	bl	8011808 <xTimerCreateTimerTask>
 8010a88:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010a8a:	697b      	ldr	r3, [r7, #20]
 8010a8c:	2b01      	cmp	r3, #1
 8010a8e:	d116      	bne.n	8010abe <vTaskStartScheduler+0x8e>
	__asm volatile
 8010a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a94:	f383 8811 	msr	BASEPRI, r3
 8010a98:	f3bf 8f6f 	isb	sy
 8010a9c:	f3bf 8f4f 	dsb	sy
 8010aa0:	613b      	str	r3, [r7, #16]
}
 8010aa2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010aa4:	4b12      	ldr	r3, [pc, #72]	; (8010af0 <vTaskStartScheduler+0xc0>)
 8010aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8010aaa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010aac:	4b11      	ldr	r3, [pc, #68]	; (8010af4 <vTaskStartScheduler+0xc4>)
 8010aae:	2201      	movs	r2, #1
 8010ab0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010ab2:	4b11      	ldr	r3, [pc, #68]	; (8010af8 <vTaskStartScheduler+0xc8>)
 8010ab4:	2200      	movs	r2, #0
 8010ab6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010ab8:	f001 fb5a 	bl	8012170 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010abc:	e00e      	b.n	8010adc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010abe:	697b      	ldr	r3, [r7, #20]
 8010ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ac4:	d10a      	bne.n	8010adc <vTaskStartScheduler+0xac>
	__asm volatile
 8010ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010aca:	f383 8811 	msr	BASEPRI, r3
 8010ace:	f3bf 8f6f 	isb	sy
 8010ad2:	f3bf 8f4f 	dsb	sy
 8010ad6:	60fb      	str	r3, [r7, #12]
}
 8010ad8:	bf00      	nop
 8010ada:	e7fe      	b.n	8010ada <vTaskStartScheduler+0xaa>
}
 8010adc:	bf00      	nop
 8010ade:	3718      	adds	r7, #24
 8010ae0:	46bd      	mov	sp, r7
 8010ae2:	bd80      	pop	{r7, pc}
 8010ae4:	080185f8 	.word	0x080185f8
 8010ae8:	08011251 	.word	0x08011251
 8010aec:	20005df4 	.word	0x20005df4
 8010af0:	20005df0 	.word	0x20005df0
 8010af4:	20005ddc 	.word	0x20005ddc
 8010af8:	20005dd4 	.word	0x20005dd4

08010afc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010afc:	b480      	push	{r7}
 8010afe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8010b00:	4b04      	ldr	r3, [pc, #16]	; (8010b14 <vTaskSuspendAll+0x18>)
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	3301      	adds	r3, #1
 8010b06:	4a03      	ldr	r2, [pc, #12]	; (8010b14 <vTaskSuspendAll+0x18>)
 8010b08:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8010b0a:	bf00      	nop
 8010b0c:	46bd      	mov	sp, r7
 8010b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b12:	4770      	bx	lr
 8010b14:	20005df8 	.word	0x20005df8

08010b18 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010b18:	b580      	push	{r7, lr}
 8010b1a:	b084      	sub	sp, #16
 8010b1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010b1e:	2300      	movs	r3, #0
 8010b20:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010b22:	2300      	movs	r3, #0
 8010b24:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010b26:	4b42      	ldr	r3, [pc, #264]	; (8010c30 <xTaskResumeAll+0x118>)
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d10a      	bne.n	8010b44 <xTaskResumeAll+0x2c>
	__asm volatile
 8010b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b32:	f383 8811 	msr	BASEPRI, r3
 8010b36:	f3bf 8f6f 	isb	sy
 8010b3a:	f3bf 8f4f 	dsb	sy
 8010b3e:	603b      	str	r3, [r7, #0]
}
 8010b40:	bf00      	nop
 8010b42:	e7fe      	b.n	8010b42 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010b44:	f001 fbb6 	bl	80122b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010b48:	4b39      	ldr	r3, [pc, #228]	; (8010c30 <xTaskResumeAll+0x118>)
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	3b01      	subs	r3, #1
 8010b4e:	4a38      	ldr	r2, [pc, #224]	; (8010c30 <xTaskResumeAll+0x118>)
 8010b50:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010b52:	4b37      	ldr	r3, [pc, #220]	; (8010c30 <xTaskResumeAll+0x118>)
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d162      	bne.n	8010c20 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010b5a:	4b36      	ldr	r3, [pc, #216]	; (8010c34 <xTaskResumeAll+0x11c>)
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d05e      	beq.n	8010c20 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010b62:	e02f      	b.n	8010bc4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010b64:	4b34      	ldr	r3, [pc, #208]	; (8010c38 <xTaskResumeAll+0x120>)
 8010b66:	68db      	ldr	r3, [r3, #12]
 8010b68:	68db      	ldr	r3, [r3, #12]
 8010b6a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	3318      	adds	r3, #24
 8010b70:	4618      	mov	r0, r3
 8010b72:	f7fe fddd 	bl	800f730 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	3304      	adds	r3, #4
 8010b7a:	4618      	mov	r0, r3
 8010b7c:	f7fe fdd8 	bl	800f730 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b84:	4b2d      	ldr	r3, [pc, #180]	; (8010c3c <xTaskResumeAll+0x124>)
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	429a      	cmp	r2, r3
 8010b8a:	d903      	bls.n	8010b94 <xTaskResumeAll+0x7c>
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b90:	4a2a      	ldr	r2, [pc, #168]	; (8010c3c <xTaskResumeAll+0x124>)
 8010b92:	6013      	str	r3, [r2, #0]
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b98:	4613      	mov	r3, r2
 8010b9a:	009b      	lsls	r3, r3, #2
 8010b9c:	4413      	add	r3, r2
 8010b9e:	009b      	lsls	r3, r3, #2
 8010ba0:	4a27      	ldr	r2, [pc, #156]	; (8010c40 <xTaskResumeAll+0x128>)
 8010ba2:	441a      	add	r2, r3
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	3304      	adds	r3, #4
 8010ba8:	4619      	mov	r1, r3
 8010baa:	4610      	mov	r0, r2
 8010bac:	f7fe fd63 	bl	800f676 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010bb4:	4b23      	ldr	r3, [pc, #140]	; (8010c44 <xTaskResumeAll+0x12c>)
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010bba:	429a      	cmp	r2, r3
 8010bbc:	d302      	bcc.n	8010bc4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8010bbe:	4b22      	ldr	r3, [pc, #136]	; (8010c48 <xTaskResumeAll+0x130>)
 8010bc0:	2201      	movs	r2, #1
 8010bc2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010bc4:	4b1c      	ldr	r3, [pc, #112]	; (8010c38 <xTaskResumeAll+0x120>)
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d1cb      	bne.n	8010b64 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d001      	beq.n	8010bd6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010bd2:	f000 fbf3 	bl	80113bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8010bd6:	4b1d      	ldr	r3, [pc, #116]	; (8010c4c <xTaskResumeAll+0x134>)
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d010      	beq.n	8010c04 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010be2:	f000 f847 	bl	8010c74 <xTaskIncrementTick>
 8010be6:	4603      	mov	r3, r0
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d002      	beq.n	8010bf2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8010bec:	4b16      	ldr	r3, [pc, #88]	; (8010c48 <xTaskResumeAll+0x130>)
 8010bee:	2201      	movs	r2, #1
 8010bf0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	3b01      	subs	r3, #1
 8010bf6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d1f1      	bne.n	8010be2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8010bfe:	4b13      	ldr	r3, [pc, #76]	; (8010c4c <xTaskResumeAll+0x134>)
 8010c00:	2200      	movs	r2, #0
 8010c02:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010c04:	4b10      	ldr	r3, [pc, #64]	; (8010c48 <xTaskResumeAll+0x130>)
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d009      	beq.n	8010c20 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010c0c:	2301      	movs	r3, #1
 8010c0e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010c10:	4b0f      	ldr	r3, [pc, #60]	; (8010c50 <xTaskResumeAll+0x138>)
 8010c12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c16:	601a      	str	r2, [r3, #0]
 8010c18:	f3bf 8f4f 	dsb	sy
 8010c1c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010c20:	f001 fb78 	bl	8012314 <vPortExitCritical>

	return xAlreadyYielded;
 8010c24:	68bb      	ldr	r3, [r7, #8]
}
 8010c26:	4618      	mov	r0, r3
 8010c28:	3710      	adds	r7, #16
 8010c2a:	46bd      	mov	sp, r7
 8010c2c:	bd80      	pop	{r7, pc}
 8010c2e:	bf00      	nop
 8010c30:	20005df8 	.word	0x20005df8
 8010c34:	20005dd0 	.word	0x20005dd0
 8010c38:	20005d90 	.word	0x20005d90
 8010c3c:	20005dd8 	.word	0x20005dd8
 8010c40:	20005900 	.word	0x20005900
 8010c44:	200058fc 	.word	0x200058fc
 8010c48:	20005de4 	.word	0x20005de4
 8010c4c:	20005de0 	.word	0x20005de0
 8010c50:	e000ed04 	.word	0xe000ed04

08010c54 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010c54:	b480      	push	{r7}
 8010c56:	b083      	sub	sp, #12
 8010c58:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010c5a:	4b05      	ldr	r3, [pc, #20]	; (8010c70 <xTaskGetTickCount+0x1c>)
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010c60:	687b      	ldr	r3, [r7, #4]
}
 8010c62:	4618      	mov	r0, r3
 8010c64:	370c      	adds	r7, #12
 8010c66:	46bd      	mov	sp, r7
 8010c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c6c:	4770      	bx	lr
 8010c6e:	bf00      	nop
 8010c70:	20005dd4 	.word	0x20005dd4

08010c74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010c74:	b580      	push	{r7, lr}
 8010c76:	b086      	sub	sp, #24
 8010c78:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010c7a:	2300      	movs	r3, #0
 8010c7c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010c7e:	4b4f      	ldr	r3, [pc, #316]	; (8010dbc <xTaskIncrementTick+0x148>)
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	f040 808f 	bne.w	8010da6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010c88:	4b4d      	ldr	r3, [pc, #308]	; (8010dc0 <xTaskIncrementTick+0x14c>)
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	3301      	adds	r3, #1
 8010c8e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010c90:	4a4b      	ldr	r2, [pc, #300]	; (8010dc0 <xTaskIncrementTick+0x14c>)
 8010c92:	693b      	ldr	r3, [r7, #16]
 8010c94:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010c96:	693b      	ldr	r3, [r7, #16]
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d120      	bne.n	8010cde <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8010c9c:	4b49      	ldr	r3, [pc, #292]	; (8010dc4 <xTaskIncrementTick+0x150>)
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d00a      	beq.n	8010cbc <xTaskIncrementTick+0x48>
	__asm volatile
 8010ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010caa:	f383 8811 	msr	BASEPRI, r3
 8010cae:	f3bf 8f6f 	isb	sy
 8010cb2:	f3bf 8f4f 	dsb	sy
 8010cb6:	603b      	str	r3, [r7, #0]
}
 8010cb8:	bf00      	nop
 8010cba:	e7fe      	b.n	8010cba <xTaskIncrementTick+0x46>
 8010cbc:	4b41      	ldr	r3, [pc, #260]	; (8010dc4 <xTaskIncrementTick+0x150>)
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	60fb      	str	r3, [r7, #12]
 8010cc2:	4b41      	ldr	r3, [pc, #260]	; (8010dc8 <xTaskIncrementTick+0x154>)
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	4a3f      	ldr	r2, [pc, #252]	; (8010dc4 <xTaskIncrementTick+0x150>)
 8010cc8:	6013      	str	r3, [r2, #0]
 8010cca:	4a3f      	ldr	r2, [pc, #252]	; (8010dc8 <xTaskIncrementTick+0x154>)
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	6013      	str	r3, [r2, #0]
 8010cd0:	4b3e      	ldr	r3, [pc, #248]	; (8010dcc <xTaskIncrementTick+0x158>)
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	3301      	adds	r3, #1
 8010cd6:	4a3d      	ldr	r2, [pc, #244]	; (8010dcc <xTaskIncrementTick+0x158>)
 8010cd8:	6013      	str	r3, [r2, #0]
 8010cda:	f000 fb6f 	bl	80113bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010cde:	4b3c      	ldr	r3, [pc, #240]	; (8010dd0 <xTaskIncrementTick+0x15c>)
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	693a      	ldr	r2, [r7, #16]
 8010ce4:	429a      	cmp	r2, r3
 8010ce6:	d349      	bcc.n	8010d7c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010ce8:	4b36      	ldr	r3, [pc, #216]	; (8010dc4 <xTaskIncrementTick+0x150>)
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d104      	bne.n	8010cfc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010cf2:	4b37      	ldr	r3, [pc, #220]	; (8010dd0 <xTaskIncrementTick+0x15c>)
 8010cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8010cf8:	601a      	str	r2, [r3, #0]
					break;
 8010cfa:	e03f      	b.n	8010d7c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010cfc:	4b31      	ldr	r3, [pc, #196]	; (8010dc4 <xTaskIncrementTick+0x150>)
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	68db      	ldr	r3, [r3, #12]
 8010d02:	68db      	ldr	r3, [r3, #12]
 8010d04:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010d06:	68bb      	ldr	r3, [r7, #8]
 8010d08:	685b      	ldr	r3, [r3, #4]
 8010d0a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010d0c:	693a      	ldr	r2, [r7, #16]
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	429a      	cmp	r2, r3
 8010d12:	d203      	bcs.n	8010d1c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010d14:	4a2e      	ldr	r2, [pc, #184]	; (8010dd0 <xTaskIncrementTick+0x15c>)
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010d1a:	e02f      	b.n	8010d7c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010d1c:	68bb      	ldr	r3, [r7, #8]
 8010d1e:	3304      	adds	r3, #4
 8010d20:	4618      	mov	r0, r3
 8010d22:	f7fe fd05 	bl	800f730 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010d26:	68bb      	ldr	r3, [r7, #8]
 8010d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d004      	beq.n	8010d38 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010d2e:	68bb      	ldr	r3, [r7, #8]
 8010d30:	3318      	adds	r3, #24
 8010d32:	4618      	mov	r0, r3
 8010d34:	f7fe fcfc 	bl	800f730 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010d38:	68bb      	ldr	r3, [r7, #8]
 8010d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d3c:	4b25      	ldr	r3, [pc, #148]	; (8010dd4 <xTaskIncrementTick+0x160>)
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	429a      	cmp	r2, r3
 8010d42:	d903      	bls.n	8010d4c <xTaskIncrementTick+0xd8>
 8010d44:	68bb      	ldr	r3, [r7, #8]
 8010d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d48:	4a22      	ldr	r2, [pc, #136]	; (8010dd4 <xTaskIncrementTick+0x160>)
 8010d4a:	6013      	str	r3, [r2, #0]
 8010d4c:	68bb      	ldr	r3, [r7, #8]
 8010d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d50:	4613      	mov	r3, r2
 8010d52:	009b      	lsls	r3, r3, #2
 8010d54:	4413      	add	r3, r2
 8010d56:	009b      	lsls	r3, r3, #2
 8010d58:	4a1f      	ldr	r2, [pc, #124]	; (8010dd8 <xTaskIncrementTick+0x164>)
 8010d5a:	441a      	add	r2, r3
 8010d5c:	68bb      	ldr	r3, [r7, #8]
 8010d5e:	3304      	adds	r3, #4
 8010d60:	4619      	mov	r1, r3
 8010d62:	4610      	mov	r0, r2
 8010d64:	f7fe fc87 	bl	800f676 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010d68:	68bb      	ldr	r3, [r7, #8]
 8010d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d6c:	4b1b      	ldr	r3, [pc, #108]	; (8010ddc <xTaskIncrementTick+0x168>)
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d72:	429a      	cmp	r2, r3
 8010d74:	d3b8      	bcc.n	8010ce8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8010d76:	2301      	movs	r3, #1
 8010d78:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010d7a:	e7b5      	b.n	8010ce8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010d7c:	4b17      	ldr	r3, [pc, #92]	; (8010ddc <xTaskIncrementTick+0x168>)
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d82:	4915      	ldr	r1, [pc, #84]	; (8010dd8 <xTaskIncrementTick+0x164>)
 8010d84:	4613      	mov	r3, r2
 8010d86:	009b      	lsls	r3, r3, #2
 8010d88:	4413      	add	r3, r2
 8010d8a:	009b      	lsls	r3, r3, #2
 8010d8c:	440b      	add	r3, r1
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	2b01      	cmp	r3, #1
 8010d92:	d901      	bls.n	8010d98 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8010d94:	2301      	movs	r3, #1
 8010d96:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8010d98:	4b11      	ldr	r3, [pc, #68]	; (8010de0 <xTaskIncrementTick+0x16c>)
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d007      	beq.n	8010db0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8010da0:	2301      	movs	r3, #1
 8010da2:	617b      	str	r3, [r7, #20]
 8010da4:	e004      	b.n	8010db0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8010da6:	4b0f      	ldr	r3, [pc, #60]	; (8010de4 <xTaskIncrementTick+0x170>)
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	3301      	adds	r3, #1
 8010dac:	4a0d      	ldr	r2, [pc, #52]	; (8010de4 <xTaskIncrementTick+0x170>)
 8010dae:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8010db0:	697b      	ldr	r3, [r7, #20]
}
 8010db2:	4618      	mov	r0, r3
 8010db4:	3718      	adds	r7, #24
 8010db6:	46bd      	mov	sp, r7
 8010db8:	bd80      	pop	{r7, pc}
 8010dba:	bf00      	nop
 8010dbc:	20005df8 	.word	0x20005df8
 8010dc0:	20005dd4 	.word	0x20005dd4
 8010dc4:	20005d88 	.word	0x20005d88
 8010dc8:	20005d8c 	.word	0x20005d8c
 8010dcc:	20005de8 	.word	0x20005de8
 8010dd0:	20005df0 	.word	0x20005df0
 8010dd4:	20005dd8 	.word	0x20005dd8
 8010dd8:	20005900 	.word	0x20005900
 8010ddc:	200058fc 	.word	0x200058fc
 8010de0:	20005de4 	.word	0x20005de4
 8010de4:	20005de0 	.word	0x20005de0

08010de8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010de8:	b480      	push	{r7}
 8010dea:	b085      	sub	sp, #20
 8010dec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010dee:	4b28      	ldr	r3, [pc, #160]	; (8010e90 <vTaskSwitchContext+0xa8>)
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d003      	beq.n	8010dfe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010df6:	4b27      	ldr	r3, [pc, #156]	; (8010e94 <vTaskSwitchContext+0xac>)
 8010df8:	2201      	movs	r2, #1
 8010dfa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010dfc:	e041      	b.n	8010e82 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8010dfe:	4b25      	ldr	r3, [pc, #148]	; (8010e94 <vTaskSwitchContext+0xac>)
 8010e00:	2200      	movs	r2, #0
 8010e02:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010e04:	4b24      	ldr	r3, [pc, #144]	; (8010e98 <vTaskSwitchContext+0xb0>)
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	60fb      	str	r3, [r7, #12]
 8010e0a:	e010      	b.n	8010e2e <vTaskSwitchContext+0x46>
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d10a      	bne.n	8010e28 <vTaskSwitchContext+0x40>
	__asm volatile
 8010e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e16:	f383 8811 	msr	BASEPRI, r3
 8010e1a:	f3bf 8f6f 	isb	sy
 8010e1e:	f3bf 8f4f 	dsb	sy
 8010e22:	607b      	str	r3, [r7, #4]
}
 8010e24:	bf00      	nop
 8010e26:	e7fe      	b.n	8010e26 <vTaskSwitchContext+0x3e>
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	3b01      	subs	r3, #1
 8010e2c:	60fb      	str	r3, [r7, #12]
 8010e2e:	491b      	ldr	r1, [pc, #108]	; (8010e9c <vTaskSwitchContext+0xb4>)
 8010e30:	68fa      	ldr	r2, [r7, #12]
 8010e32:	4613      	mov	r3, r2
 8010e34:	009b      	lsls	r3, r3, #2
 8010e36:	4413      	add	r3, r2
 8010e38:	009b      	lsls	r3, r3, #2
 8010e3a:	440b      	add	r3, r1
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d0e4      	beq.n	8010e0c <vTaskSwitchContext+0x24>
 8010e42:	68fa      	ldr	r2, [r7, #12]
 8010e44:	4613      	mov	r3, r2
 8010e46:	009b      	lsls	r3, r3, #2
 8010e48:	4413      	add	r3, r2
 8010e4a:	009b      	lsls	r3, r3, #2
 8010e4c:	4a13      	ldr	r2, [pc, #76]	; (8010e9c <vTaskSwitchContext+0xb4>)
 8010e4e:	4413      	add	r3, r2
 8010e50:	60bb      	str	r3, [r7, #8]
 8010e52:	68bb      	ldr	r3, [r7, #8]
 8010e54:	685b      	ldr	r3, [r3, #4]
 8010e56:	685a      	ldr	r2, [r3, #4]
 8010e58:	68bb      	ldr	r3, [r7, #8]
 8010e5a:	605a      	str	r2, [r3, #4]
 8010e5c:	68bb      	ldr	r3, [r7, #8]
 8010e5e:	685a      	ldr	r2, [r3, #4]
 8010e60:	68bb      	ldr	r3, [r7, #8]
 8010e62:	3308      	adds	r3, #8
 8010e64:	429a      	cmp	r2, r3
 8010e66:	d104      	bne.n	8010e72 <vTaskSwitchContext+0x8a>
 8010e68:	68bb      	ldr	r3, [r7, #8]
 8010e6a:	685b      	ldr	r3, [r3, #4]
 8010e6c:	685a      	ldr	r2, [r3, #4]
 8010e6e:	68bb      	ldr	r3, [r7, #8]
 8010e70:	605a      	str	r2, [r3, #4]
 8010e72:	68bb      	ldr	r3, [r7, #8]
 8010e74:	685b      	ldr	r3, [r3, #4]
 8010e76:	68db      	ldr	r3, [r3, #12]
 8010e78:	4a09      	ldr	r2, [pc, #36]	; (8010ea0 <vTaskSwitchContext+0xb8>)
 8010e7a:	6013      	str	r3, [r2, #0]
 8010e7c:	4a06      	ldr	r2, [pc, #24]	; (8010e98 <vTaskSwitchContext+0xb0>)
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	6013      	str	r3, [r2, #0]
}
 8010e82:	bf00      	nop
 8010e84:	3714      	adds	r7, #20
 8010e86:	46bd      	mov	sp, r7
 8010e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e8c:	4770      	bx	lr
 8010e8e:	bf00      	nop
 8010e90:	20005df8 	.word	0x20005df8
 8010e94:	20005de4 	.word	0x20005de4
 8010e98:	20005dd8 	.word	0x20005dd8
 8010e9c:	20005900 	.word	0x20005900
 8010ea0:	200058fc 	.word	0x200058fc

08010ea4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010ea4:	b580      	push	{r7, lr}
 8010ea6:	b084      	sub	sp, #16
 8010ea8:	af00      	add	r7, sp, #0
 8010eaa:	6078      	str	r0, [r7, #4]
 8010eac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d10a      	bne.n	8010eca <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8010eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010eb8:	f383 8811 	msr	BASEPRI, r3
 8010ebc:	f3bf 8f6f 	isb	sy
 8010ec0:	f3bf 8f4f 	dsb	sy
 8010ec4:	60fb      	str	r3, [r7, #12]
}
 8010ec6:	bf00      	nop
 8010ec8:	e7fe      	b.n	8010ec8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010eca:	4b07      	ldr	r3, [pc, #28]	; (8010ee8 <vTaskPlaceOnEventList+0x44>)
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	3318      	adds	r3, #24
 8010ed0:	4619      	mov	r1, r3
 8010ed2:	6878      	ldr	r0, [r7, #4]
 8010ed4:	f7fe fbf3 	bl	800f6be <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010ed8:	2101      	movs	r1, #1
 8010eda:	6838      	ldr	r0, [r7, #0]
 8010edc:	f000 fc40 	bl	8011760 <prvAddCurrentTaskToDelayedList>
}
 8010ee0:	bf00      	nop
 8010ee2:	3710      	adds	r7, #16
 8010ee4:	46bd      	mov	sp, r7
 8010ee6:	bd80      	pop	{r7, pc}
 8010ee8:	200058fc 	.word	0x200058fc

08010eec <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8010eec:	b580      	push	{r7, lr}
 8010eee:	b086      	sub	sp, #24
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	60f8      	str	r0, [r7, #12]
 8010ef4:	60b9      	str	r1, [r7, #8]
 8010ef6:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8010ef8:	68fb      	ldr	r3, [r7, #12]
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d10a      	bne.n	8010f14 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8010efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f02:	f383 8811 	msr	BASEPRI, r3
 8010f06:	f3bf 8f6f 	isb	sy
 8010f0a:	f3bf 8f4f 	dsb	sy
 8010f0e:	617b      	str	r3, [r7, #20]
}
 8010f10:	bf00      	nop
 8010f12:	e7fe      	b.n	8010f12 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8010f14:	4b11      	ldr	r3, [pc, #68]	; (8010f5c <vTaskPlaceOnUnorderedEventList+0x70>)
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d10a      	bne.n	8010f32 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8010f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f20:	f383 8811 	msr	BASEPRI, r3
 8010f24:	f3bf 8f6f 	isb	sy
 8010f28:	f3bf 8f4f 	dsb	sy
 8010f2c:	613b      	str	r3, [r7, #16]
}
 8010f2e:	bf00      	nop
 8010f30:	e7fe      	b.n	8010f30 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8010f32:	4b0b      	ldr	r3, [pc, #44]	; (8010f60 <vTaskPlaceOnUnorderedEventList+0x74>)
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	68ba      	ldr	r2, [r7, #8]
 8010f38:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8010f3c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010f3e:	4b08      	ldr	r3, [pc, #32]	; (8010f60 <vTaskPlaceOnUnorderedEventList+0x74>)
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	3318      	adds	r3, #24
 8010f44:	4619      	mov	r1, r3
 8010f46:	68f8      	ldr	r0, [r7, #12]
 8010f48:	f7fe fb95 	bl	800f676 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010f4c:	2101      	movs	r1, #1
 8010f4e:	6878      	ldr	r0, [r7, #4]
 8010f50:	f000 fc06 	bl	8011760 <prvAddCurrentTaskToDelayedList>
}
 8010f54:	bf00      	nop
 8010f56:	3718      	adds	r7, #24
 8010f58:	46bd      	mov	sp, r7
 8010f5a:	bd80      	pop	{r7, pc}
 8010f5c:	20005df8 	.word	0x20005df8
 8010f60:	200058fc 	.word	0x200058fc

08010f64 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010f64:	b580      	push	{r7, lr}
 8010f66:	b086      	sub	sp, #24
 8010f68:	af00      	add	r7, sp, #0
 8010f6a:	60f8      	str	r0, [r7, #12]
 8010f6c:	60b9      	str	r1, [r7, #8]
 8010f6e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d10a      	bne.n	8010f8c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8010f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f7a:	f383 8811 	msr	BASEPRI, r3
 8010f7e:	f3bf 8f6f 	isb	sy
 8010f82:	f3bf 8f4f 	dsb	sy
 8010f86:	617b      	str	r3, [r7, #20]
}
 8010f88:	bf00      	nop
 8010f8a:	e7fe      	b.n	8010f8a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010f8c:	4b0a      	ldr	r3, [pc, #40]	; (8010fb8 <vTaskPlaceOnEventListRestricted+0x54>)
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	3318      	adds	r3, #24
 8010f92:	4619      	mov	r1, r3
 8010f94:	68f8      	ldr	r0, [r7, #12]
 8010f96:	f7fe fb6e 	bl	800f676 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d002      	beq.n	8010fa6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8010fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8010fa4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010fa6:	6879      	ldr	r1, [r7, #4]
 8010fa8:	68b8      	ldr	r0, [r7, #8]
 8010faa:	f000 fbd9 	bl	8011760 <prvAddCurrentTaskToDelayedList>
	}
 8010fae:	bf00      	nop
 8010fb0:	3718      	adds	r7, #24
 8010fb2:	46bd      	mov	sp, r7
 8010fb4:	bd80      	pop	{r7, pc}
 8010fb6:	bf00      	nop
 8010fb8:	200058fc 	.word	0x200058fc

08010fbc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010fbc:	b580      	push	{r7, lr}
 8010fbe:	b086      	sub	sp, #24
 8010fc0:	af00      	add	r7, sp, #0
 8010fc2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	68db      	ldr	r3, [r3, #12]
 8010fc8:	68db      	ldr	r3, [r3, #12]
 8010fca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010fcc:	693b      	ldr	r3, [r7, #16]
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d10a      	bne.n	8010fe8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8010fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fd6:	f383 8811 	msr	BASEPRI, r3
 8010fda:	f3bf 8f6f 	isb	sy
 8010fde:	f3bf 8f4f 	dsb	sy
 8010fe2:	60fb      	str	r3, [r7, #12]
}
 8010fe4:	bf00      	nop
 8010fe6:	e7fe      	b.n	8010fe6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010fe8:	693b      	ldr	r3, [r7, #16]
 8010fea:	3318      	adds	r3, #24
 8010fec:	4618      	mov	r0, r3
 8010fee:	f7fe fb9f 	bl	800f730 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010ff2:	4b1e      	ldr	r3, [pc, #120]	; (801106c <xTaskRemoveFromEventList+0xb0>)
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d11d      	bne.n	8011036 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010ffa:	693b      	ldr	r3, [r7, #16]
 8010ffc:	3304      	adds	r3, #4
 8010ffe:	4618      	mov	r0, r3
 8011000:	f7fe fb96 	bl	800f730 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011004:	693b      	ldr	r3, [r7, #16]
 8011006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011008:	4b19      	ldr	r3, [pc, #100]	; (8011070 <xTaskRemoveFromEventList+0xb4>)
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	429a      	cmp	r2, r3
 801100e:	d903      	bls.n	8011018 <xTaskRemoveFromEventList+0x5c>
 8011010:	693b      	ldr	r3, [r7, #16]
 8011012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011014:	4a16      	ldr	r2, [pc, #88]	; (8011070 <xTaskRemoveFromEventList+0xb4>)
 8011016:	6013      	str	r3, [r2, #0]
 8011018:	693b      	ldr	r3, [r7, #16]
 801101a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801101c:	4613      	mov	r3, r2
 801101e:	009b      	lsls	r3, r3, #2
 8011020:	4413      	add	r3, r2
 8011022:	009b      	lsls	r3, r3, #2
 8011024:	4a13      	ldr	r2, [pc, #76]	; (8011074 <xTaskRemoveFromEventList+0xb8>)
 8011026:	441a      	add	r2, r3
 8011028:	693b      	ldr	r3, [r7, #16]
 801102a:	3304      	adds	r3, #4
 801102c:	4619      	mov	r1, r3
 801102e:	4610      	mov	r0, r2
 8011030:	f7fe fb21 	bl	800f676 <vListInsertEnd>
 8011034:	e005      	b.n	8011042 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011036:	693b      	ldr	r3, [r7, #16]
 8011038:	3318      	adds	r3, #24
 801103a:	4619      	mov	r1, r3
 801103c:	480e      	ldr	r0, [pc, #56]	; (8011078 <xTaskRemoveFromEventList+0xbc>)
 801103e:	f7fe fb1a 	bl	800f676 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011042:	693b      	ldr	r3, [r7, #16]
 8011044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011046:	4b0d      	ldr	r3, [pc, #52]	; (801107c <xTaskRemoveFromEventList+0xc0>)
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801104c:	429a      	cmp	r2, r3
 801104e:	d905      	bls.n	801105c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011050:	2301      	movs	r3, #1
 8011052:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011054:	4b0a      	ldr	r3, [pc, #40]	; (8011080 <xTaskRemoveFromEventList+0xc4>)
 8011056:	2201      	movs	r2, #1
 8011058:	601a      	str	r2, [r3, #0]
 801105a:	e001      	b.n	8011060 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 801105c:	2300      	movs	r3, #0
 801105e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011060:	697b      	ldr	r3, [r7, #20]
}
 8011062:	4618      	mov	r0, r3
 8011064:	3718      	adds	r7, #24
 8011066:	46bd      	mov	sp, r7
 8011068:	bd80      	pop	{r7, pc}
 801106a:	bf00      	nop
 801106c:	20005df8 	.word	0x20005df8
 8011070:	20005dd8 	.word	0x20005dd8
 8011074:	20005900 	.word	0x20005900
 8011078:	20005d90 	.word	0x20005d90
 801107c:	200058fc 	.word	0x200058fc
 8011080:	20005de4 	.word	0x20005de4

08011084 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8011084:	b580      	push	{r7, lr}
 8011086:	b086      	sub	sp, #24
 8011088:	af00      	add	r7, sp, #0
 801108a:	6078      	str	r0, [r7, #4]
 801108c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 801108e:	4b29      	ldr	r3, [pc, #164]	; (8011134 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	2b00      	cmp	r3, #0
 8011094:	d10a      	bne.n	80110ac <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8011096:	f04f 0350 	mov.w	r3, #80	; 0x50
 801109a:	f383 8811 	msr	BASEPRI, r3
 801109e:	f3bf 8f6f 	isb	sy
 80110a2:	f3bf 8f4f 	dsb	sy
 80110a6:	613b      	str	r3, [r7, #16]
}
 80110a8:	bf00      	nop
 80110aa:	e7fe      	b.n	80110aa <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80110ac:	683b      	ldr	r3, [r7, #0]
 80110ae:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	68db      	ldr	r3, [r3, #12]
 80110ba:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80110bc:	697b      	ldr	r3, [r7, #20]
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d10a      	bne.n	80110d8 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 80110c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110c6:	f383 8811 	msr	BASEPRI, r3
 80110ca:	f3bf 8f6f 	isb	sy
 80110ce:	f3bf 8f4f 	dsb	sy
 80110d2:	60fb      	str	r3, [r7, #12]
}
 80110d4:	bf00      	nop
 80110d6:	e7fe      	b.n	80110d6 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 80110d8:	6878      	ldr	r0, [r7, #4]
 80110da:	f7fe fb29 	bl	800f730 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80110de:	697b      	ldr	r3, [r7, #20]
 80110e0:	3304      	adds	r3, #4
 80110e2:	4618      	mov	r0, r3
 80110e4:	f7fe fb24 	bl	800f730 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80110e8:	697b      	ldr	r3, [r7, #20]
 80110ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80110ec:	4b12      	ldr	r3, [pc, #72]	; (8011138 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	429a      	cmp	r2, r3
 80110f2:	d903      	bls.n	80110fc <vTaskRemoveFromUnorderedEventList+0x78>
 80110f4:	697b      	ldr	r3, [r7, #20]
 80110f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110f8:	4a0f      	ldr	r2, [pc, #60]	; (8011138 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80110fa:	6013      	str	r3, [r2, #0]
 80110fc:	697b      	ldr	r3, [r7, #20]
 80110fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011100:	4613      	mov	r3, r2
 8011102:	009b      	lsls	r3, r3, #2
 8011104:	4413      	add	r3, r2
 8011106:	009b      	lsls	r3, r3, #2
 8011108:	4a0c      	ldr	r2, [pc, #48]	; (801113c <vTaskRemoveFromUnorderedEventList+0xb8>)
 801110a:	441a      	add	r2, r3
 801110c:	697b      	ldr	r3, [r7, #20]
 801110e:	3304      	adds	r3, #4
 8011110:	4619      	mov	r1, r3
 8011112:	4610      	mov	r0, r2
 8011114:	f7fe faaf 	bl	800f676 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011118:	697b      	ldr	r3, [r7, #20]
 801111a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801111c:	4b08      	ldr	r3, [pc, #32]	; (8011140 <vTaskRemoveFromUnorderedEventList+0xbc>)
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011122:	429a      	cmp	r2, r3
 8011124:	d902      	bls.n	801112c <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8011126:	4b07      	ldr	r3, [pc, #28]	; (8011144 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8011128:	2201      	movs	r2, #1
 801112a:	601a      	str	r2, [r3, #0]
	}
}
 801112c:	bf00      	nop
 801112e:	3718      	adds	r7, #24
 8011130:	46bd      	mov	sp, r7
 8011132:	bd80      	pop	{r7, pc}
 8011134:	20005df8 	.word	0x20005df8
 8011138:	20005dd8 	.word	0x20005dd8
 801113c:	20005900 	.word	0x20005900
 8011140:	200058fc 	.word	0x200058fc
 8011144:	20005de4 	.word	0x20005de4

08011148 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011148:	b480      	push	{r7}
 801114a:	b083      	sub	sp, #12
 801114c:	af00      	add	r7, sp, #0
 801114e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011150:	4b06      	ldr	r3, [pc, #24]	; (801116c <vTaskInternalSetTimeOutState+0x24>)
 8011152:	681a      	ldr	r2, [r3, #0]
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011158:	4b05      	ldr	r3, [pc, #20]	; (8011170 <vTaskInternalSetTimeOutState+0x28>)
 801115a:	681a      	ldr	r2, [r3, #0]
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	605a      	str	r2, [r3, #4]
}
 8011160:	bf00      	nop
 8011162:	370c      	adds	r7, #12
 8011164:	46bd      	mov	sp, r7
 8011166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801116a:	4770      	bx	lr
 801116c:	20005de8 	.word	0x20005de8
 8011170:	20005dd4 	.word	0x20005dd4

08011174 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011174:	b580      	push	{r7, lr}
 8011176:	b088      	sub	sp, #32
 8011178:	af00      	add	r7, sp, #0
 801117a:	6078      	str	r0, [r7, #4]
 801117c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	2b00      	cmp	r3, #0
 8011182:	d10a      	bne.n	801119a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8011184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011188:	f383 8811 	msr	BASEPRI, r3
 801118c:	f3bf 8f6f 	isb	sy
 8011190:	f3bf 8f4f 	dsb	sy
 8011194:	613b      	str	r3, [r7, #16]
}
 8011196:	bf00      	nop
 8011198:	e7fe      	b.n	8011198 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801119a:	683b      	ldr	r3, [r7, #0]
 801119c:	2b00      	cmp	r3, #0
 801119e:	d10a      	bne.n	80111b6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80111a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111a4:	f383 8811 	msr	BASEPRI, r3
 80111a8:	f3bf 8f6f 	isb	sy
 80111ac:	f3bf 8f4f 	dsb	sy
 80111b0:	60fb      	str	r3, [r7, #12]
}
 80111b2:	bf00      	nop
 80111b4:	e7fe      	b.n	80111b4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80111b6:	f001 f87d 	bl	80122b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80111ba:	4b1d      	ldr	r3, [pc, #116]	; (8011230 <xTaskCheckForTimeOut+0xbc>)
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	685b      	ldr	r3, [r3, #4]
 80111c4:	69ba      	ldr	r2, [r7, #24]
 80111c6:	1ad3      	subs	r3, r2, r3
 80111c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80111ca:	683b      	ldr	r3, [r7, #0]
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111d2:	d102      	bne.n	80111da <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80111d4:	2300      	movs	r3, #0
 80111d6:	61fb      	str	r3, [r7, #28]
 80111d8:	e023      	b.n	8011222 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	681a      	ldr	r2, [r3, #0]
 80111de:	4b15      	ldr	r3, [pc, #84]	; (8011234 <xTaskCheckForTimeOut+0xc0>)
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	429a      	cmp	r2, r3
 80111e4:	d007      	beq.n	80111f6 <xTaskCheckForTimeOut+0x82>
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	685b      	ldr	r3, [r3, #4]
 80111ea:	69ba      	ldr	r2, [r7, #24]
 80111ec:	429a      	cmp	r2, r3
 80111ee:	d302      	bcc.n	80111f6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80111f0:	2301      	movs	r3, #1
 80111f2:	61fb      	str	r3, [r7, #28]
 80111f4:	e015      	b.n	8011222 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80111f6:	683b      	ldr	r3, [r7, #0]
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	697a      	ldr	r2, [r7, #20]
 80111fc:	429a      	cmp	r2, r3
 80111fe:	d20b      	bcs.n	8011218 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011200:	683b      	ldr	r3, [r7, #0]
 8011202:	681a      	ldr	r2, [r3, #0]
 8011204:	697b      	ldr	r3, [r7, #20]
 8011206:	1ad2      	subs	r2, r2, r3
 8011208:	683b      	ldr	r3, [r7, #0]
 801120a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801120c:	6878      	ldr	r0, [r7, #4]
 801120e:	f7ff ff9b 	bl	8011148 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011212:	2300      	movs	r3, #0
 8011214:	61fb      	str	r3, [r7, #28]
 8011216:	e004      	b.n	8011222 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8011218:	683b      	ldr	r3, [r7, #0]
 801121a:	2200      	movs	r2, #0
 801121c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801121e:	2301      	movs	r3, #1
 8011220:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011222:	f001 f877 	bl	8012314 <vPortExitCritical>

	return xReturn;
 8011226:	69fb      	ldr	r3, [r7, #28]
}
 8011228:	4618      	mov	r0, r3
 801122a:	3720      	adds	r7, #32
 801122c:	46bd      	mov	sp, r7
 801122e:	bd80      	pop	{r7, pc}
 8011230:	20005dd4 	.word	0x20005dd4
 8011234:	20005de8 	.word	0x20005de8

08011238 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011238:	b480      	push	{r7}
 801123a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801123c:	4b03      	ldr	r3, [pc, #12]	; (801124c <vTaskMissedYield+0x14>)
 801123e:	2201      	movs	r2, #1
 8011240:	601a      	str	r2, [r3, #0]
}
 8011242:	bf00      	nop
 8011244:	46bd      	mov	sp, r7
 8011246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801124a:	4770      	bx	lr
 801124c:	20005de4 	.word	0x20005de4

08011250 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011250:	b580      	push	{r7, lr}
 8011252:	b082      	sub	sp, #8
 8011254:	af00      	add	r7, sp, #0
 8011256:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011258:	f000 f852 	bl	8011300 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801125c:	4b06      	ldr	r3, [pc, #24]	; (8011278 <prvIdleTask+0x28>)
 801125e:	681b      	ldr	r3, [r3, #0]
 8011260:	2b01      	cmp	r3, #1
 8011262:	d9f9      	bls.n	8011258 <prvIdleTask+0x8>
			{
				taskYIELD();
 8011264:	4b05      	ldr	r3, [pc, #20]	; (801127c <prvIdleTask+0x2c>)
 8011266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801126a:	601a      	str	r2, [r3, #0]
 801126c:	f3bf 8f4f 	dsb	sy
 8011270:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011274:	e7f0      	b.n	8011258 <prvIdleTask+0x8>
 8011276:	bf00      	nop
 8011278:	20005900 	.word	0x20005900
 801127c:	e000ed04 	.word	0xe000ed04

08011280 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011280:	b580      	push	{r7, lr}
 8011282:	b082      	sub	sp, #8
 8011284:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011286:	2300      	movs	r3, #0
 8011288:	607b      	str	r3, [r7, #4]
 801128a:	e00c      	b.n	80112a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801128c:	687a      	ldr	r2, [r7, #4]
 801128e:	4613      	mov	r3, r2
 8011290:	009b      	lsls	r3, r3, #2
 8011292:	4413      	add	r3, r2
 8011294:	009b      	lsls	r3, r3, #2
 8011296:	4a12      	ldr	r2, [pc, #72]	; (80112e0 <prvInitialiseTaskLists+0x60>)
 8011298:	4413      	add	r3, r2
 801129a:	4618      	mov	r0, r3
 801129c:	f7fe f9be 	bl	800f61c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	3301      	adds	r3, #1
 80112a4:	607b      	str	r3, [r7, #4]
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	2b37      	cmp	r3, #55	; 0x37
 80112aa:	d9ef      	bls.n	801128c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80112ac:	480d      	ldr	r0, [pc, #52]	; (80112e4 <prvInitialiseTaskLists+0x64>)
 80112ae:	f7fe f9b5 	bl	800f61c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80112b2:	480d      	ldr	r0, [pc, #52]	; (80112e8 <prvInitialiseTaskLists+0x68>)
 80112b4:	f7fe f9b2 	bl	800f61c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80112b8:	480c      	ldr	r0, [pc, #48]	; (80112ec <prvInitialiseTaskLists+0x6c>)
 80112ba:	f7fe f9af 	bl	800f61c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80112be:	480c      	ldr	r0, [pc, #48]	; (80112f0 <prvInitialiseTaskLists+0x70>)
 80112c0:	f7fe f9ac 	bl	800f61c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80112c4:	480b      	ldr	r0, [pc, #44]	; (80112f4 <prvInitialiseTaskLists+0x74>)
 80112c6:	f7fe f9a9 	bl	800f61c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80112ca:	4b0b      	ldr	r3, [pc, #44]	; (80112f8 <prvInitialiseTaskLists+0x78>)
 80112cc:	4a05      	ldr	r2, [pc, #20]	; (80112e4 <prvInitialiseTaskLists+0x64>)
 80112ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80112d0:	4b0a      	ldr	r3, [pc, #40]	; (80112fc <prvInitialiseTaskLists+0x7c>)
 80112d2:	4a05      	ldr	r2, [pc, #20]	; (80112e8 <prvInitialiseTaskLists+0x68>)
 80112d4:	601a      	str	r2, [r3, #0]
}
 80112d6:	bf00      	nop
 80112d8:	3708      	adds	r7, #8
 80112da:	46bd      	mov	sp, r7
 80112dc:	bd80      	pop	{r7, pc}
 80112de:	bf00      	nop
 80112e0:	20005900 	.word	0x20005900
 80112e4:	20005d60 	.word	0x20005d60
 80112e8:	20005d74 	.word	0x20005d74
 80112ec:	20005d90 	.word	0x20005d90
 80112f0:	20005da4 	.word	0x20005da4
 80112f4:	20005dbc 	.word	0x20005dbc
 80112f8:	20005d88 	.word	0x20005d88
 80112fc:	20005d8c 	.word	0x20005d8c

08011300 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011300:	b580      	push	{r7, lr}
 8011302:	b082      	sub	sp, #8
 8011304:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011306:	e019      	b.n	801133c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011308:	f000 ffd4 	bl	80122b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801130c:	4b10      	ldr	r3, [pc, #64]	; (8011350 <prvCheckTasksWaitingTermination+0x50>)
 801130e:	68db      	ldr	r3, [r3, #12]
 8011310:	68db      	ldr	r3, [r3, #12]
 8011312:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	3304      	adds	r3, #4
 8011318:	4618      	mov	r0, r3
 801131a:	f7fe fa09 	bl	800f730 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801131e:	4b0d      	ldr	r3, [pc, #52]	; (8011354 <prvCheckTasksWaitingTermination+0x54>)
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	3b01      	subs	r3, #1
 8011324:	4a0b      	ldr	r2, [pc, #44]	; (8011354 <prvCheckTasksWaitingTermination+0x54>)
 8011326:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011328:	4b0b      	ldr	r3, [pc, #44]	; (8011358 <prvCheckTasksWaitingTermination+0x58>)
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	3b01      	subs	r3, #1
 801132e:	4a0a      	ldr	r2, [pc, #40]	; (8011358 <prvCheckTasksWaitingTermination+0x58>)
 8011330:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011332:	f000 ffef 	bl	8012314 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011336:	6878      	ldr	r0, [r7, #4]
 8011338:	f000 f810 	bl	801135c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801133c:	4b06      	ldr	r3, [pc, #24]	; (8011358 <prvCheckTasksWaitingTermination+0x58>)
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	2b00      	cmp	r3, #0
 8011342:	d1e1      	bne.n	8011308 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011344:	bf00      	nop
 8011346:	bf00      	nop
 8011348:	3708      	adds	r7, #8
 801134a:	46bd      	mov	sp, r7
 801134c:	bd80      	pop	{r7, pc}
 801134e:	bf00      	nop
 8011350:	20005da4 	.word	0x20005da4
 8011354:	20005dd0 	.word	0x20005dd0
 8011358:	20005db8 	.word	0x20005db8

0801135c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801135c:	b580      	push	{r7, lr}
 801135e:	b084      	sub	sp, #16
 8011360:	af00      	add	r7, sp, #0
 8011362:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 801136a:	2b00      	cmp	r3, #0
 801136c:	d108      	bne.n	8011380 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011372:	4618      	mov	r0, r3
 8011374:	f001 f98c 	bl	8012690 <vPortFree>
				vPortFree( pxTCB );
 8011378:	6878      	ldr	r0, [r7, #4]
 801137a:	f001 f989 	bl	8012690 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801137e:	e018      	b.n	80113b2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8011386:	2b01      	cmp	r3, #1
 8011388:	d103      	bne.n	8011392 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801138a:	6878      	ldr	r0, [r7, #4]
 801138c:	f001 f980 	bl	8012690 <vPortFree>
	}
 8011390:	e00f      	b.n	80113b2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8011398:	2b02      	cmp	r3, #2
 801139a:	d00a      	beq.n	80113b2 <prvDeleteTCB+0x56>
	__asm volatile
 801139c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113a0:	f383 8811 	msr	BASEPRI, r3
 80113a4:	f3bf 8f6f 	isb	sy
 80113a8:	f3bf 8f4f 	dsb	sy
 80113ac:	60fb      	str	r3, [r7, #12]
}
 80113ae:	bf00      	nop
 80113b0:	e7fe      	b.n	80113b0 <prvDeleteTCB+0x54>
	}
 80113b2:	bf00      	nop
 80113b4:	3710      	adds	r7, #16
 80113b6:	46bd      	mov	sp, r7
 80113b8:	bd80      	pop	{r7, pc}
	...

080113bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80113bc:	b480      	push	{r7}
 80113be:	b083      	sub	sp, #12
 80113c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80113c2:	4b0c      	ldr	r3, [pc, #48]	; (80113f4 <prvResetNextTaskUnblockTime+0x38>)
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d104      	bne.n	80113d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80113cc:	4b0a      	ldr	r3, [pc, #40]	; (80113f8 <prvResetNextTaskUnblockTime+0x3c>)
 80113ce:	f04f 32ff 	mov.w	r2, #4294967295
 80113d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80113d4:	e008      	b.n	80113e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80113d6:	4b07      	ldr	r3, [pc, #28]	; (80113f4 <prvResetNextTaskUnblockTime+0x38>)
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	68db      	ldr	r3, [r3, #12]
 80113dc:	68db      	ldr	r3, [r3, #12]
 80113de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	685b      	ldr	r3, [r3, #4]
 80113e4:	4a04      	ldr	r2, [pc, #16]	; (80113f8 <prvResetNextTaskUnblockTime+0x3c>)
 80113e6:	6013      	str	r3, [r2, #0]
}
 80113e8:	bf00      	nop
 80113ea:	370c      	adds	r7, #12
 80113ec:	46bd      	mov	sp, r7
 80113ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113f2:	4770      	bx	lr
 80113f4:	20005d88 	.word	0x20005d88
 80113f8:	20005df0 	.word	0x20005df0

080113fc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80113fc:	b480      	push	{r7}
 80113fe:	b083      	sub	sp, #12
 8011400:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8011402:	4b05      	ldr	r3, [pc, #20]	; (8011418 <xTaskGetCurrentTaskHandle+0x1c>)
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	607b      	str	r3, [r7, #4]

		return xReturn;
 8011408:	687b      	ldr	r3, [r7, #4]
	}
 801140a:	4618      	mov	r0, r3
 801140c:	370c      	adds	r7, #12
 801140e:	46bd      	mov	sp, r7
 8011410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011414:	4770      	bx	lr
 8011416:	bf00      	nop
 8011418:	200058fc 	.word	0x200058fc

0801141c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801141c:	b480      	push	{r7}
 801141e:	b083      	sub	sp, #12
 8011420:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011422:	4b0b      	ldr	r3, [pc, #44]	; (8011450 <xTaskGetSchedulerState+0x34>)
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	2b00      	cmp	r3, #0
 8011428:	d102      	bne.n	8011430 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801142a:	2301      	movs	r3, #1
 801142c:	607b      	str	r3, [r7, #4]
 801142e:	e008      	b.n	8011442 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011430:	4b08      	ldr	r3, [pc, #32]	; (8011454 <xTaskGetSchedulerState+0x38>)
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	2b00      	cmp	r3, #0
 8011436:	d102      	bne.n	801143e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011438:	2302      	movs	r3, #2
 801143a:	607b      	str	r3, [r7, #4]
 801143c:	e001      	b.n	8011442 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801143e:	2300      	movs	r3, #0
 8011440:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011442:	687b      	ldr	r3, [r7, #4]
	}
 8011444:	4618      	mov	r0, r3
 8011446:	370c      	adds	r7, #12
 8011448:	46bd      	mov	sp, r7
 801144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801144e:	4770      	bx	lr
 8011450:	20005ddc 	.word	0x20005ddc
 8011454:	20005df8 	.word	0x20005df8

08011458 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8011458:	b580      	push	{r7, lr}
 801145a:	b084      	sub	sp, #16
 801145c:	af00      	add	r7, sp, #0
 801145e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011464:	2300      	movs	r3, #0
 8011466:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	2b00      	cmp	r3, #0
 801146c:	d051      	beq.n	8011512 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801146e:	68bb      	ldr	r3, [r7, #8]
 8011470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011472:	4b2a      	ldr	r3, [pc, #168]	; (801151c <xTaskPriorityInherit+0xc4>)
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011478:	429a      	cmp	r2, r3
 801147a:	d241      	bcs.n	8011500 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801147c:	68bb      	ldr	r3, [r7, #8]
 801147e:	699b      	ldr	r3, [r3, #24]
 8011480:	2b00      	cmp	r3, #0
 8011482:	db06      	blt.n	8011492 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011484:	4b25      	ldr	r3, [pc, #148]	; (801151c <xTaskPriorityInherit+0xc4>)
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801148a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801148e:	68bb      	ldr	r3, [r7, #8]
 8011490:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011492:	68bb      	ldr	r3, [r7, #8]
 8011494:	6959      	ldr	r1, [r3, #20]
 8011496:	68bb      	ldr	r3, [r7, #8]
 8011498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801149a:	4613      	mov	r3, r2
 801149c:	009b      	lsls	r3, r3, #2
 801149e:	4413      	add	r3, r2
 80114a0:	009b      	lsls	r3, r3, #2
 80114a2:	4a1f      	ldr	r2, [pc, #124]	; (8011520 <xTaskPriorityInherit+0xc8>)
 80114a4:	4413      	add	r3, r2
 80114a6:	4299      	cmp	r1, r3
 80114a8:	d122      	bne.n	80114f0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80114aa:	68bb      	ldr	r3, [r7, #8]
 80114ac:	3304      	adds	r3, #4
 80114ae:	4618      	mov	r0, r3
 80114b0:	f7fe f93e 	bl	800f730 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80114b4:	4b19      	ldr	r3, [pc, #100]	; (801151c <xTaskPriorityInherit+0xc4>)
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114ba:	68bb      	ldr	r3, [r7, #8]
 80114bc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80114be:	68bb      	ldr	r3, [r7, #8]
 80114c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114c2:	4b18      	ldr	r3, [pc, #96]	; (8011524 <xTaskPriorityInherit+0xcc>)
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	429a      	cmp	r2, r3
 80114c8:	d903      	bls.n	80114d2 <xTaskPriorityInherit+0x7a>
 80114ca:	68bb      	ldr	r3, [r7, #8]
 80114cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114ce:	4a15      	ldr	r2, [pc, #84]	; (8011524 <xTaskPriorityInherit+0xcc>)
 80114d0:	6013      	str	r3, [r2, #0]
 80114d2:	68bb      	ldr	r3, [r7, #8]
 80114d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114d6:	4613      	mov	r3, r2
 80114d8:	009b      	lsls	r3, r3, #2
 80114da:	4413      	add	r3, r2
 80114dc:	009b      	lsls	r3, r3, #2
 80114de:	4a10      	ldr	r2, [pc, #64]	; (8011520 <xTaskPriorityInherit+0xc8>)
 80114e0:	441a      	add	r2, r3
 80114e2:	68bb      	ldr	r3, [r7, #8]
 80114e4:	3304      	adds	r3, #4
 80114e6:	4619      	mov	r1, r3
 80114e8:	4610      	mov	r0, r2
 80114ea:	f7fe f8c4 	bl	800f676 <vListInsertEnd>
 80114ee:	e004      	b.n	80114fa <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80114f0:	4b0a      	ldr	r3, [pc, #40]	; (801151c <xTaskPriorityInherit+0xc4>)
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114f6:	68bb      	ldr	r3, [r7, #8]
 80114f8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80114fa:	2301      	movs	r3, #1
 80114fc:	60fb      	str	r3, [r7, #12]
 80114fe:	e008      	b.n	8011512 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011500:	68bb      	ldr	r3, [r7, #8]
 8011502:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011504:	4b05      	ldr	r3, [pc, #20]	; (801151c <xTaskPriorityInherit+0xc4>)
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801150a:	429a      	cmp	r2, r3
 801150c:	d201      	bcs.n	8011512 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801150e:	2301      	movs	r3, #1
 8011510:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011512:	68fb      	ldr	r3, [r7, #12]
	}
 8011514:	4618      	mov	r0, r3
 8011516:	3710      	adds	r7, #16
 8011518:	46bd      	mov	sp, r7
 801151a:	bd80      	pop	{r7, pc}
 801151c:	200058fc 	.word	0x200058fc
 8011520:	20005900 	.word	0x20005900
 8011524:	20005dd8 	.word	0x20005dd8

08011528 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011528:	b580      	push	{r7, lr}
 801152a:	b086      	sub	sp, #24
 801152c:	af00      	add	r7, sp, #0
 801152e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011534:	2300      	movs	r3, #0
 8011536:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	2b00      	cmp	r3, #0
 801153c:	d056      	beq.n	80115ec <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801153e:	4b2e      	ldr	r3, [pc, #184]	; (80115f8 <xTaskPriorityDisinherit+0xd0>)
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	693a      	ldr	r2, [r7, #16]
 8011544:	429a      	cmp	r2, r3
 8011546:	d00a      	beq.n	801155e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8011548:	f04f 0350 	mov.w	r3, #80	; 0x50
 801154c:	f383 8811 	msr	BASEPRI, r3
 8011550:	f3bf 8f6f 	isb	sy
 8011554:	f3bf 8f4f 	dsb	sy
 8011558:	60fb      	str	r3, [r7, #12]
}
 801155a:	bf00      	nop
 801155c:	e7fe      	b.n	801155c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801155e:	693b      	ldr	r3, [r7, #16]
 8011560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011562:	2b00      	cmp	r3, #0
 8011564:	d10a      	bne.n	801157c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8011566:	f04f 0350 	mov.w	r3, #80	; 0x50
 801156a:	f383 8811 	msr	BASEPRI, r3
 801156e:	f3bf 8f6f 	isb	sy
 8011572:	f3bf 8f4f 	dsb	sy
 8011576:	60bb      	str	r3, [r7, #8]
}
 8011578:	bf00      	nop
 801157a:	e7fe      	b.n	801157a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801157c:	693b      	ldr	r3, [r7, #16]
 801157e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011580:	1e5a      	subs	r2, r3, #1
 8011582:	693b      	ldr	r3, [r7, #16]
 8011584:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011586:	693b      	ldr	r3, [r7, #16]
 8011588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801158a:	693b      	ldr	r3, [r7, #16]
 801158c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801158e:	429a      	cmp	r2, r3
 8011590:	d02c      	beq.n	80115ec <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011592:	693b      	ldr	r3, [r7, #16]
 8011594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011596:	2b00      	cmp	r3, #0
 8011598:	d128      	bne.n	80115ec <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801159a:	693b      	ldr	r3, [r7, #16]
 801159c:	3304      	adds	r3, #4
 801159e:	4618      	mov	r0, r3
 80115a0:	f7fe f8c6 	bl	800f730 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80115a4:	693b      	ldr	r3, [r7, #16]
 80115a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80115a8:	693b      	ldr	r3, [r7, #16]
 80115aa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80115ac:	693b      	ldr	r3, [r7, #16]
 80115ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115b0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80115b4:	693b      	ldr	r3, [r7, #16]
 80115b6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80115b8:	693b      	ldr	r3, [r7, #16]
 80115ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115bc:	4b0f      	ldr	r3, [pc, #60]	; (80115fc <xTaskPriorityDisinherit+0xd4>)
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	429a      	cmp	r2, r3
 80115c2:	d903      	bls.n	80115cc <xTaskPriorityDisinherit+0xa4>
 80115c4:	693b      	ldr	r3, [r7, #16]
 80115c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115c8:	4a0c      	ldr	r2, [pc, #48]	; (80115fc <xTaskPriorityDisinherit+0xd4>)
 80115ca:	6013      	str	r3, [r2, #0]
 80115cc:	693b      	ldr	r3, [r7, #16]
 80115ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115d0:	4613      	mov	r3, r2
 80115d2:	009b      	lsls	r3, r3, #2
 80115d4:	4413      	add	r3, r2
 80115d6:	009b      	lsls	r3, r3, #2
 80115d8:	4a09      	ldr	r2, [pc, #36]	; (8011600 <xTaskPriorityDisinherit+0xd8>)
 80115da:	441a      	add	r2, r3
 80115dc:	693b      	ldr	r3, [r7, #16]
 80115de:	3304      	adds	r3, #4
 80115e0:	4619      	mov	r1, r3
 80115e2:	4610      	mov	r0, r2
 80115e4:	f7fe f847 	bl	800f676 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80115e8:	2301      	movs	r3, #1
 80115ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80115ec:	697b      	ldr	r3, [r7, #20]
	}
 80115ee:	4618      	mov	r0, r3
 80115f0:	3718      	adds	r7, #24
 80115f2:	46bd      	mov	sp, r7
 80115f4:	bd80      	pop	{r7, pc}
 80115f6:	bf00      	nop
 80115f8:	200058fc 	.word	0x200058fc
 80115fc:	20005dd8 	.word	0x20005dd8
 8011600:	20005900 	.word	0x20005900

08011604 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011604:	b580      	push	{r7, lr}
 8011606:	b088      	sub	sp, #32
 8011608:	af00      	add	r7, sp, #0
 801160a:	6078      	str	r0, [r7, #4]
 801160c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8011612:	2301      	movs	r3, #1
 8011614:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	2b00      	cmp	r3, #0
 801161a:	d06a      	beq.n	80116f2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801161c:	69bb      	ldr	r3, [r7, #24]
 801161e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011620:	2b00      	cmp	r3, #0
 8011622:	d10a      	bne.n	801163a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8011624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011628:	f383 8811 	msr	BASEPRI, r3
 801162c:	f3bf 8f6f 	isb	sy
 8011630:	f3bf 8f4f 	dsb	sy
 8011634:	60fb      	str	r3, [r7, #12]
}
 8011636:	bf00      	nop
 8011638:	e7fe      	b.n	8011638 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801163a:	69bb      	ldr	r3, [r7, #24]
 801163c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801163e:	683a      	ldr	r2, [r7, #0]
 8011640:	429a      	cmp	r2, r3
 8011642:	d902      	bls.n	801164a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8011644:	683b      	ldr	r3, [r7, #0]
 8011646:	61fb      	str	r3, [r7, #28]
 8011648:	e002      	b.n	8011650 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801164a:	69bb      	ldr	r3, [r7, #24]
 801164c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801164e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011650:	69bb      	ldr	r3, [r7, #24]
 8011652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011654:	69fa      	ldr	r2, [r7, #28]
 8011656:	429a      	cmp	r2, r3
 8011658:	d04b      	beq.n	80116f2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801165a:	69bb      	ldr	r3, [r7, #24]
 801165c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801165e:	697a      	ldr	r2, [r7, #20]
 8011660:	429a      	cmp	r2, r3
 8011662:	d146      	bne.n	80116f2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8011664:	4b25      	ldr	r3, [pc, #148]	; (80116fc <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	69ba      	ldr	r2, [r7, #24]
 801166a:	429a      	cmp	r2, r3
 801166c:	d10a      	bne.n	8011684 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 801166e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011672:	f383 8811 	msr	BASEPRI, r3
 8011676:	f3bf 8f6f 	isb	sy
 801167a:	f3bf 8f4f 	dsb	sy
 801167e:	60bb      	str	r3, [r7, #8]
}
 8011680:	bf00      	nop
 8011682:	e7fe      	b.n	8011682 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8011684:	69bb      	ldr	r3, [r7, #24]
 8011686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011688:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801168a:	69bb      	ldr	r3, [r7, #24]
 801168c:	69fa      	ldr	r2, [r7, #28]
 801168e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011690:	69bb      	ldr	r3, [r7, #24]
 8011692:	699b      	ldr	r3, [r3, #24]
 8011694:	2b00      	cmp	r3, #0
 8011696:	db04      	blt.n	80116a2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011698:	69fb      	ldr	r3, [r7, #28]
 801169a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801169e:	69bb      	ldr	r3, [r7, #24]
 80116a0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80116a2:	69bb      	ldr	r3, [r7, #24]
 80116a4:	6959      	ldr	r1, [r3, #20]
 80116a6:	693a      	ldr	r2, [r7, #16]
 80116a8:	4613      	mov	r3, r2
 80116aa:	009b      	lsls	r3, r3, #2
 80116ac:	4413      	add	r3, r2
 80116ae:	009b      	lsls	r3, r3, #2
 80116b0:	4a13      	ldr	r2, [pc, #76]	; (8011700 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80116b2:	4413      	add	r3, r2
 80116b4:	4299      	cmp	r1, r3
 80116b6:	d11c      	bne.n	80116f2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80116b8:	69bb      	ldr	r3, [r7, #24]
 80116ba:	3304      	adds	r3, #4
 80116bc:	4618      	mov	r0, r3
 80116be:	f7fe f837 	bl	800f730 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80116c2:	69bb      	ldr	r3, [r7, #24]
 80116c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116c6:	4b0f      	ldr	r3, [pc, #60]	; (8011704 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	429a      	cmp	r2, r3
 80116cc:	d903      	bls.n	80116d6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80116ce:	69bb      	ldr	r3, [r7, #24]
 80116d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116d2:	4a0c      	ldr	r2, [pc, #48]	; (8011704 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80116d4:	6013      	str	r3, [r2, #0]
 80116d6:	69bb      	ldr	r3, [r7, #24]
 80116d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116da:	4613      	mov	r3, r2
 80116dc:	009b      	lsls	r3, r3, #2
 80116de:	4413      	add	r3, r2
 80116e0:	009b      	lsls	r3, r3, #2
 80116e2:	4a07      	ldr	r2, [pc, #28]	; (8011700 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80116e4:	441a      	add	r2, r3
 80116e6:	69bb      	ldr	r3, [r7, #24]
 80116e8:	3304      	adds	r3, #4
 80116ea:	4619      	mov	r1, r3
 80116ec:	4610      	mov	r0, r2
 80116ee:	f7fd ffc2 	bl	800f676 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80116f2:	bf00      	nop
 80116f4:	3720      	adds	r7, #32
 80116f6:	46bd      	mov	sp, r7
 80116f8:	bd80      	pop	{r7, pc}
 80116fa:	bf00      	nop
 80116fc:	200058fc 	.word	0x200058fc
 8011700:	20005900 	.word	0x20005900
 8011704:	20005dd8 	.word	0x20005dd8

08011708 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8011708:	b480      	push	{r7}
 801170a:	b083      	sub	sp, #12
 801170c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 801170e:	4b09      	ldr	r3, [pc, #36]	; (8011734 <uxTaskResetEventItemValue+0x2c>)
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	699b      	ldr	r3, [r3, #24]
 8011714:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011716:	4b07      	ldr	r3, [pc, #28]	; (8011734 <uxTaskResetEventItemValue+0x2c>)
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801171c:	4b05      	ldr	r3, [pc, #20]	; (8011734 <uxTaskResetEventItemValue+0x2c>)
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8011724:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8011726:	687b      	ldr	r3, [r7, #4]
}
 8011728:	4618      	mov	r0, r3
 801172a:	370c      	adds	r7, #12
 801172c:	46bd      	mov	sp, r7
 801172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011732:	4770      	bx	lr
 8011734:	200058fc 	.word	0x200058fc

08011738 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8011738:	b480      	push	{r7}
 801173a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801173c:	4b07      	ldr	r3, [pc, #28]	; (801175c <pvTaskIncrementMutexHeldCount+0x24>)
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	2b00      	cmp	r3, #0
 8011742:	d004      	beq.n	801174e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011744:	4b05      	ldr	r3, [pc, #20]	; (801175c <pvTaskIncrementMutexHeldCount+0x24>)
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801174a:	3201      	adds	r2, #1
 801174c:	661a      	str	r2, [r3, #96]	; 0x60
		}

		return pxCurrentTCB;
 801174e:	4b03      	ldr	r3, [pc, #12]	; (801175c <pvTaskIncrementMutexHeldCount+0x24>)
 8011750:	681b      	ldr	r3, [r3, #0]
	}
 8011752:	4618      	mov	r0, r3
 8011754:	46bd      	mov	sp, r7
 8011756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801175a:	4770      	bx	lr
 801175c:	200058fc 	.word	0x200058fc

08011760 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011760:	b580      	push	{r7, lr}
 8011762:	b084      	sub	sp, #16
 8011764:	af00      	add	r7, sp, #0
 8011766:	6078      	str	r0, [r7, #4]
 8011768:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801176a:	4b21      	ldr	r3, [pc, #132]	; (80117f0 <prvAddCurrentTaskToDelayedList+0x90>)
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011770:	4b20      	ldr	r3, [pc, #128]	; (80117f4 <prvAddCurrentTaskToDelayedList+0x94>)
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	3304      	adds	r3, #4
 8011776:	4618      	mov	r0, r3
 8011778:	f7fd ffda 	bl	800f730 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011782:	d10a      	bne.n	801179a <prvAddCurrentTaskToDelayedList+0x3a>
 8011784:	683b      	ldr	r3, [r7, #0]
 8011786:	2b00      	cmp	r3, #0
 8011788:	d007      	beq.n	801179a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801178a:	4b1a      	ldr	r3, [pc, #104]	; (80117f4 <prvAddCurrentTaskToDelayedList+0x94>)
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	3304      	adds	r3, #4
 8011790:	4619      	mov	r1, r3
 8011792:	4819      	ldr	r0, [pc, #100]	; (80117f8 <prvAddCurrentTaskToDelayedList+0x98>)
 8011794:	f7fd ff6f 	bl	800f676 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011798:	e026      	b.n	80117e8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801179a:	68fa      	ldr	r2, [r7, #12]
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	4413      	add	r3, r2
 80117a0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80117a2:	4b14      	ldr	r3, [pc, #80]	; (80117f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	68ba      	ldr	r2, [r7, #8]
 80117a8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80117aa:	68ba      	ldr	r2, [r7, #8]
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	429a      	cmp	r2, r3
 80117b0:	d209      	bcs.n	80117c6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80117b2:	4b12      	ldr	r3, [pc, #72]	; (80117fc <prvAddCurrentTaskToDelayedList+0x9c>)
 80117b4:	681a      	ldr	r2, [r3, #0]
 80117b6:	4b0f      	ldr	r3, [pc, #60]	; (80117f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	3304      	adds	r3, #4
 80117bc:	4619      	mov	r1, r3
 80117be:	4610      	mov	r0, r2
 80117c0:	f7fd ff7d 	bl	800f6be <vListInsert>
}
 80117c4:	e010      	b.n	80117e8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80117c6:	4b0e      	ldr	r3, [pc, #56]	; (8011800 <prvAddCurrentTaskToDelayedList+0xa0>)
 80117c8:	681a      	ldr	r2, [r3, #0]
 80117ca:	4b0a      	ldr	r3, [pc, #40]	; (80117f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	3304      	adds	r3, #4
 80117d0:	4619      	mov	r1, r3
 80117d2:	4610      	mov	r0, r2
 80117d4:	f7fd ff73 	bl	800f6be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80117d8:	4b0a      	ldr	r3, [pc, #40]	; (8011804 <prvAddCurrentTaskToDelayedList+0xa4>)
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	68ba      	ldr	r2, [r7, #8]
 80117de:	429a      	cmp	r2, r3
 80117e0:	d202      	bcs.n	80117e8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80117e2:	4a08      	ldr	r2, [pc, #32]	; (8011804 <prvAddCurrentTaskToDelayedList+0xa4>)
 80117e4:	68bb      	ldr	r3, [r7, #8]
 80117e6:	6013      	str	r3, [r2, #0]
}
 80117e8:	bf00      	nop
 80117ea:	3710      	adds	r7, #16
 80117ec:	46bd      	mov	sp, r7
 80117ee:	bd80      	pop	{r7, pc}
 80117f0:	20005dd4 	.word	0x20005dd4
 80117f4:	200058fc 	.word	0x200058fc
 80117f8:	20005dbc 	.word	0x20005dbc
 80117fc:	20005d8c 	.word	0x20005d8c
 8011800:	20005d88 	.word	0x20005d88
 8011804:	20005df0 	.word	0x20005df0

08011808 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8011808:	b580      	push	{r7, lr}
 801180a:	b08a      	sub	sp, #40	; 0x28
 801180c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801180e:	2300      	movs	r3, #0
 8011810:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8011812:	f000 fba1 	bl	8011f58 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8011816:	4b1c      	ldr	r3, [pc, #112]	; (8011888 <xTimerCreateTimerTask+0x80>)
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	2b00      	cmp	r3, #0
 801181c:	d021      	beq.n	8011862 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801181e:	2300      	movs	r3, #0
 8011820:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8011822:	2300      	movs	r3, #0
 8011824:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8011826:	1d3a      	adds	r2, r7, #4
 8011828:	f107 0108 	add.w	r1, r7, #8
 801182c:	f107 030c 	add.w	r3, r7, #12
 8011830:	4618      	mov	r0, r3
 8011832:	f7fd fceb 	bl	800f20c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8011836:	6879      	ldr	r1, [r7, #4]
 8011838:	68bb      	ldr	r3, [r7, #8]
 801183a:	68fa      	ldr	r2, [r7, #12]
 801183c:	9202      	str	r2, [sp, #8]
 801183e:	9301      	str	r3, [sp, #4]
 8011840:	2302      	movs	r3, #2
 8011842:	9300      	str	r3, [sp, #0]
 8011844:	2300      	movs	r3, #0
 8011846:	460a      	mov	r2, r1
 8011848:	4910      	ldr	r1, [pc, #64]	; (801188c <xTimerCreateTimerTask+0x84>)
 801184a:	4811      	ldr	r0, [pc, #68]	; (8011890 <xTimerCreateTimerTask+0x88>)
 801184c:	f7fe ff1a 	bl	8010684 <xTaskCreateStatic>
 8011850:	4603      	mov	r3, r0
 8011852:	4a10      	ldr	r2, [pc, #64]	; (8011894 <xTimerCreateTimerTask+0x8c>)
 8011854:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8011856:	4b0f      	ldr	r3, [pc, #60]	; (8011894 <xTimerCreateTimerTask+0x8c>)
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	2b00      	cmp	r3, #0
 801185c:	d001      	beq.n	8011862 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801185e:	2301      	movs	r3, #1
 8011860:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8011862:	697b      	ldr	r3, [r7, #20]
 8011864:	2b00      	cmp	r3, #0
 8011866:	d10a      	bne.n	801187e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8011868:	f04f 0350 	mov.w	r3, #80	; 0x50
 801186c:	f383 8811 	msr	BASEPRI, r3
 8011870:	f3bf 8f6f 	isb	sy
 8011874:	f3bf 8f4f 	dsb	sy
 8011878:	613b      	str	r3, [r7, #16]
}
 801187a:	bf00      	nop
 801187c:	e7fe      	b.n	801187c <xTimerCreateTimerTask+0x74>
	return xReturn;
 801187e:	697b      	ldr	r3, [r7, #20]
}
 8011880:	4618      	mov	r0, r3
 8011882:	3718      	adds	r7, #24
 8011884:	46bd      	mov	sp, r7
 8011886:	bd80      	pop	{r7, pc}
 8011888:	20005e2c 	.word	0x20005e2c
 801188c:	08018600 	.word	0x08018600
 8011890:	08011b01 	.word	0x08011b01
 8011894:	20005e30 	.word	0x20005e30

08011898 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8011898:	b580      	push	{r7, lr}
 801189a:	b088      	sub	sp, #32
 801189c:	af02      	add	r7, sp, #8
 801189e:	60f8      	str	r0, [r7, #12]
 80118a0:	60b9      	str	r1, [r7, #8]
 80118a2:	607a      	str	r2, [r7, #4]
 80118a4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80118a6:	202c      	movs	r0, #44	; 0x2c
 80118a8:	f000 fe26 	bl	80124f8 <pvPortMalloc>
 80118ac:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80118ae:	697b      	ldr	r3, [r7, #20]
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d00d      	beq.n	80118d0 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80118b4:	697b      	ldr	r3, [r7, #20]
 80118b6:	2200      	movs	r2, #0
 80118b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80118bc:	697b      	ldr	r3, [r7, #20]
 80118be:	9301      	str	r3, [sp, #4]
 80118c0:	6a3b      	ldr	r3, [r7, #32]
 80118c2:	9300      	str	r3, [sp, #0]
 80118c4:	683b      	ldr	r3, [r7, #0]
 80118c6:	687a      	ldr	r2, [r7, #4]
 80118c8:	68b9      	ldr	r1, [r7, #8]
 80118ca:	68f8      	ldr	r0, [r7, #12]
 80118cc:	f000 f843 	bl	8011956 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80118d0:	697b      	ldr	r3, [r7, #20]
	}
 80118d2:	4618      	mov	r0, r3
 80118d4:	3718      	adds	r7, #24
 80118d6:	46bd      	mov	sp, r7
 80118d8:	bd80      	pop	{r7, pc}

080118da <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80118da:	b580      	push	{r7, lr}
 80118dc:	b08a      	sub	sp, #40	; 0x28
 80118de:	af02      	add	r7, sp, #8
 80118e0:	60f8      	str	r0, [r7, #12]
 80118e2:	60b9      	str	r1, [r7, #8]
 80118e4:	607a      	str	r2, [r7, #4]
 80118e6:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80118e8:	232c      	movs	r3, #44	; 0x2c
 80118ea:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80118ec:	693b      	ldr	r3, [r7, #16]
 80118ee:	2b2c      	cmp	r3, #44	; 0x2c
 80118f0:	d00a      	beq.n	8011908 <xTimerCreateStatic+0x2e>
	__asm volatile
 80118f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118f6:	f383 8811 	msr	BASEPRI, r3
 80118fa:	f3bf 8f6f 	isb	sy
 80118fe:	f3bf 8f4f 	dsb	sy
 8011902:	61bb      	str	r3, [r7, #24]
}
 8011904:	bf00      	nop
 8011906:	e7fe      	b.n	8011906 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8011908:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 801190a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801190c:	2b00      	cmp	r3, #0
 801190e:	d10a      	bne.n	8011926 <xTimerCreateStatic+0x4c>
	__asm volatile
 8011910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011914:	f383 8811 	msr	BASEPRI, r3
 8011918:	f3bf 8f6f 	isb	sy
 801191c:	f3bf 8f4f 	dsb	sy
 8011920:	617b      	str	r3, [r7, #20]
}
 8011922:	bf00      	nop
 8011924:	e7fe      	b.n	8011924 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8011926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011928:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 801192a:	69fb      	ldr	r3, [r7, #28]
 801192c:	2b00      	cmp	r3, #0
 801192e:	d00d      	beq.n	801194c <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8011930:	69fb      	ldr	r3, [r7, #28]
 8011932:	2202      	movs	r2, #2
 8011934:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8011938:	69fb      	ldr	r3, [r7, #28]
 801193a:	9301      	str	r3, [sp, #4]
 801193c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801193e:	9300      	str	r3, [sp, #0]
 8011940:	683b      	ldr	r3, [r7, #0]
 8011942:	687a      	ldr	r2, [r7, #4]
 8011944:	68b9      	ldr	r1, [r7, #8]
 8011946:	68f8      	ldr	r0, [r7, #12]
 8011948:	f000 f805 	bl	8011956 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 801194c:	69fb      	ldr	r3, [r7, #28]
	}
 801194e:	4618      	mov	r0, r3
 8011950:	3720      	adds	r7, #32
 8011952:	46bd      	mov	sp, r7
 8011954:	bd80      	pop	{r7, pc}

08011956 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8011956:	b580      	push	{r7, lr}
 8011958:	b086      	sub	sp, #24
 801195a:	af00      	add	r7, sp, #0
 801195c:	60f8      	str	r0, [r7, #12]
 801195e:	60b9      	str	r1, [r7, #8]
 8011960:	607a      	str	r2, [r7, #4]
 8011962:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8011964:	68bb      	ldr	r3, [r7, #8]
 8011966:	2b00      	cmp	r3, #0
 8011968:	d10a      	bne.n	8011980 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 801196a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801196e:	f383 8811 	msr	BASEPRI, r3
 8011972:	f3bf 8f6f 	isb	sy
 8011976:	f3bf 8f4f 	dsb	sy
 801197a:	617b      	str	r3, [r7, #20]
}
 801197c:	bf00      	nop
 801197e:	e7fe      	b.n	801197e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8011980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011982:	2b00      	cmp	r3, #0
 8011984:	d01e      	beq.n	80119c4 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8011986:	f000 fae7 	bl	8011f58 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 801198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801198c:	68fa      	ldr	r2, [r7, #12]
 801198e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8011990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011992:	68ba      	ldr	r2, [r7, #8]
 8011994:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8011996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011998:	683a      	ldr	r2, [r7, #0]
 801199a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 801199c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801199e:	6a3a      	ldr	r2, [r7, #32]
 80119a0:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80119a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119a4:	3304      	adds	r3, #4
 80119a6:	4618      	mov	r0, r3
 80119a8:	f7fd fe58 	bl	800f65c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d008      	beq.n	80119c4 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80119b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80119b8:	f043 0304 	orr.w	r3, r3, #4
 80119bc:	b2da      	uxtb	r2, r3
 80119be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80119c4:	bf00      	nop
 80119c6:	3718      	adds	r7, #24
 80119c8:	46bd      	mov	sp, r7
 80119ca:	bd80      	pop	{r7, pc}

080119cc <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80119cc:	b580      	push	{r7, lr}
 80119ce:	b08a      	sub	sp, #40	; 0x28
 80119d0:	af00      	add	r7, sp, #0
 80119d2:	60f8      	str	r0, [r7, #12]
 80119d4:	60b9      	str	r1, [r7, #8]
 80119d6:	607a      	str	r2, [r7, #4]
 80119d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80119da:	2300      	movs	r3, #0
 80119dc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d10a      	bne.n	80119fa <xTimerGenericCommand+0x2e>
	__asm volatile
 80119e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119e8:	f383 8811 	msr	BASEPRI, r3
 80119ec:	f3bf 8f6f 	isb	sy
 80119f0:	f3bf 8f4f 	dsb	sy
 80119f4:	623b      	str	r3, [r7, #32]
}
 80119f6:	bf00      	nop
 80119f8:	e7fe      	b.n	80119f8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80119fa:	4b1a      	ldr	r3, [pc, #104]	; (8011a64 <xTimerGenericCommand+0x98>)
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d02a      	beq.n	8011a58 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8011a02:	68bb      	ldr	r3, [r7, #8]
 8011a04:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8011a0a:	68fb      	ldr	r3, [r7, #12]
 8011a0c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8011a0e:	68bb      	ldr	r3, [r7, #8]
 8011a10:	2b05      	cmp	r3, #5
 8011a12:	dc18      	bgt.n	8011a46 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8011a14:	f7ff fd02 	bl	801141c <xTaskGetSchedulerState>
 8011a18:	4603      	mov	r3, r0
 8011a1a:	2b02      	cmp	r3, #2
 8011a1c:	d109      	bne.n	8011a32 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8011a1e:	4b11      	ldr	r3, [pc, #68]	; (8011a64 <xTimerGenericCommand+0x98>)
 8011a20:	6818      	ldr	r0, [r3, #0]
 8011a22:	f107 0110 	add.w	r1, r7, #16
 8011a26:	2300      	movs	r3, #0
 8011a28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011a2a:	f7fe f89f 	bl	800fb6c <xQueueGenericSend>
 8011a2e:	6278      	str	r0, [r7, #36]	; 0x24
 8011a30:	e012      	b.n	8011a58 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8011a32:	4b0c      	ldr	r3, [pc, #48]	; (8011a64 <xTimerGenericCommand+0x98>)
 8011a34:	6818      	ldr	r0, [r3, #0]
 8011a36:	f107 0110 	add.w	r1, r7, #16
 8011a3a:	2300      	movs	r3, #0
 8011a3c:	2200      	movs	r2, #0
 8011a3e:	f7fe f895 	bl	800fb6c <xQueueGenericSend>
 8011a42:	6278      	str	r0, [r7, #36]	; 0x24
 8011a44:	e008      	b.n	8011a58 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8011a46:	4b07      	ldr	r3, [pc, #28]	; (8011a64 <xTimerGenericCommand+0x98>)
 8011a48:	6818      	ldr	r0, [r3, #0]
 8011a4a:	f107 0110 	add.w	r1, r7, #16
 8011a4e:	2300      	movs	r3, #0
 8011a50:	683a      	ldr	r2, [r7, #0]
 8011a52:	f7fe f989 	bl	800fd68 <xQueueGenericSendFromISR>
 8011a56:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8011a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011a5a:	4618      	mov	r0, r3
 8011a5c:	3728      	adds	r7, #40	; 0x28
 8011a5e:	46bd      	mov	sp, r7
 8011a60:	bd80      	pop	{r7, pc}
 8011a62:	bf00      	nop
 8011a64:	20005e2c 	.word	0x20005e2c

08011a68 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8011a68:	b580      	push	{r7, lr}
 8011a6a:	b088      	sub	sp, #32
 8011a6c:	af02      	add	r7, sp, #8
 8011a6e:	6078      	str	r0, [r7, #4]
 8011a70:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011a72:	4b22      	ldr	r3, [pc, #136]	; (8011afc <prvProcessExpiredTimer+0x94>)
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	68db      	ldr	r3, [r3, #12]
 8011a78:	68db      	ldr	r3, [r3, #12]
 8011a7a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011a7c:	697b      	ldr	r3, [r7, #20]
 8011a7e:	3304      	adds	r3, #4
 8011a80:	4618      	mov	r0, r3
 8011a82:	f7fd fe55 	bl	800f730 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011a86:	697b      	ldr	r3, [r7, #20]
 8011a88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011a8c:	f003 0304 	and.w	r3, r3, #4
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d022      	beq.n	8011ada <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011a94:	697b      	ldr	r3, [r7, #20]
 8011a96:	699a      	ldr	r2, [r3, #24]
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	18d1      	adds	r1, r2, r3
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	683a      	ldr	r2, [r7, #0]
 8011aa0:	6978      	ldr	r0, [r7, #20]
 8011aa2:	f000 f8d1 	bl	8011c48 <prvInsertTimerInActiveList>
 8011aa6:	4603      	mov	r3, r0
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d01f      	beq.n	8011aec <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011aac:	2300      	movs	r3, #0
 8011aae:	9300      	str	r3, [sp, #0]
 8011ab0:	2300      	movs	r3, #0
 8011ab2:	687a      	ldr	r2, [r7, #4]
 8011ab4:	2100      	movs	r1, #0
 8011ab6:	6978      	ldr	r0, [r7, #20]
 8011ab8:	f7ff ff88 	bl	80119cc <xTimerGenericCommand>
 8011abc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8011abe:	693b      	ldr	r3, [r7, #16]
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d113      	bne.n	8011aec <prvProcessExpiredTimer+0x84>
	__asm volatile
 8011ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ac8:	f383 8811 	msr	BASEPRI, r3
 8011acc:	f3bf 8f6f 	isb	sy
 8011ad0:	f3bf 8f4f 	dsb	sy
 8011ad4:	60fb      	str	r3, [r7, #12]
}
 8011ad6:	bf00      	nop
 8011ad8:	e7fe      	b.n	8011ad8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011ada:	697b      	ldr	r3, [r7, #20]
 8011adc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011ae0:	f023 0301 	bic.w	r3, r3, #1
 8011ae4:	b2da      	uxtb	r2, r3
 8011ae6:	697b      	ldr	r3, [r7, #20]
 8011ae8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011aec:	697b      	ldr	r3, [r7, #20]
 8011aee:	6a1b      	ldr	r3, [r3, #32]
 8011af0:	6978      	ldr	r0, [r7, #20]
 8011af2:	4798      	blx	r3
}
 8011af4:	bf00      	nop
 8011af6:	3718      	adds	r7, #24
 8011af8:	46bd      	mov	sp, r7
 8011afa:	bd80      	pop	{r7, pc}
 8011afc:	20005e24 	.word	0x20005e24

08011b00 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8011b00:	b580      	push	{r7, lr}
 8011b02:	b084      	sub	sp, #16
 8011b04:	af00      	add	r7, sp, #0
 8011b06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011b08:	f107 0308 	add.w	r3, r7, #8
 8011b0c:	4618      	mov	r0, r3
 8011b0e:	f000 f857 	bl	8011bc0 <prvGetNextExpireTime>
 8011b12:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8011b14:	68bb      	ldr	r3, [r7, #8]
 8011b16:	4619      	mov	r1, r3
 8011b18:	68f8      	ldr	r0, [r7, #12]
 8011b1a:	f000 f803 	bl	8011b24 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8011b1e:	f000 f8d5 	bl	8011ccc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011b22:	e7f1      	b.n	8011b08 <prvTimerTask+0x8>

08011b24 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8011b24:	b580      	push	{r7, lr}
 8011b26:	b084      	sub	sp, #16
 8011b28:	af00      	add	r7, sp, #0
 8011b2a:	6078      	str	r0, [r7, #4]
 8011b2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8011b2e:	f7fe ffe5 	bl	8010afc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011b32:	f107 0308 	add.w	r3, r7, #8
 8011b36:	4618      	mov	r0, r3
 8011b38:	f000 f866 	bl	8011c08 <prvSampleTimeNow>
 8011b3c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8011b3e:	68bb      	ldr	r3, [r7, #8]
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d130      	bne.n	8011ba6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011b44:	683b      	ldr	r3, [r7, #0]
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d10a      	bne.n	8011b60 <prvProcessTimerOrBlockTask+0x3c>
 8011b4a:	687a      	ldr	r2, [r7, #4]
 8011b4c:	68fb      	ldr	r3, [r7, #12]
 8011b4e:	429a      	cmp	r2, r3
 8011b50:	d806      	bhi.n	8011b60 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8011b52:	f7fe ffe1 	bl	8010b18 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8011b56:	68f9      	ldr	r1, [r7, #12]
 8011b58:	6878      	ldr	r0, [r7, #4]
 8011b5a:	f7ff ff85 	bl	8011a68 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8011b5e:	e024      	b.n	8011baa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8011b60:	683b      	ldr	r3, [r7, #0]
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d008      	beq.n	8011b78 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8011b66:	4b13      	ldr	r3, [pc, #76]	; (8011bb4 <prvProcessTimerOrBlockTask+0x90>)
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d101      	bne.n	8011b74 <prvProcessTimerOrBlockTask+0x50>
 8011b70:	2301      	movs	r3, #1
 8011b72:	e000      	b.n	8011b76 <prvProcessTimerOrBlockTask+0x52>
 8011b74:	2300      	movs	r3, #0
 8011b76:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011b78:	4b0f      	ldr	r3, [pc, #60]	; (8011bb8 <prvProcessTimerOrBlockTask+0x94>)
 8011b7a:	6818      	ldr	r0, [r3, #0]
 8011b7c:	687a      	ldr	r2, [r7, #4]
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	1ad3      	subs	r3, r2, r3
 8011b82:	683a      	ldr	r2, [r7, #0]
 8011b84:	4619      	mov	r1, r3
 8011b86:	f7fe fd49 	bl	801061c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011b8a:	f7fe ffc5 	bl	8010b18 <xTaskResumeAll>
 8011b8e:	4603      	mov	r3, r0
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d10a      	bne.n	8011baa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8011b94:	4b09      	ldr	r3, [pc, #36]	; (8011bbc <prvProcessTimerOrBlockTask+0x98>)
 8011b96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b9a:	601a      	str	r2, [r3, #0]
 8011b9c:	f3bf 8f4f 	dsb	sy
 8011ba0:	f3bf 8f6f 	isb	sy
}
 8011ba4:	e001      	b.n	8011baa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8011ba6:	f7fe ffb7 	bl	8010b18 <xTaskResumeAll>
}
 8011baa:	bf00      	nop
 8011bac:	3710      	adds	r7, #16
 8011bae:	46bd      	mov	sp, r7
 8011bb0:	bd80      	pop	{r7, pc}
 8011bb2:	bf00      	nop
 8011bb4:	20005e28 	.word	0x20005e28
 8011bb8:	20005e2c 	.word	0x20005e2c
 8011bbc:	e000ed04 	.word	0xe000ed04

08011bc0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8011bc0:	b480      	push	{r7}
 8011bc2:	b085      	sub	sp, #20
 8011bc4:	af00      	add	r7, sp, #0
 8011bc6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011bc8:	4b0e      	ldr	r3, [pc, #56]	; (8011c04 <prvGetNextExpireTime+0x44>)
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d101      	bne.n	8011bd6 <prvGetNextExpireTime+0x16>
 8011bd2:	2201      	movs	r2, #1
 8011bd4:	e000      	b.n	8011bd8 <prvGetNextExpireTime+0x18>
 8011bd6:	2200      	movs	r2, #0
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d105      	bne.n	8011bf0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011be4:	4b07      	ldr	r3, [pc, #28]	; (8011c04 <prvGetNextExpireTime+0x44>)
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	68db      	ldr	r3, [r3, #12]
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	60fb      	str	r3, [r7, #12]
 8011bee:	e001      	b.n	8011bf4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8011bf0:	2300      	movs	r3, #0
 8011bf2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8011bf4:	68fb      	ldr	r3, [r7, #12]
}
 8011bf6:	4618      	mov	r0, r3
 8011bf8:	3714      	adds	r7, #20
 8011bfa:	46bd      	mov	sp, r7
 8011bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c00:	4770      	bx	lr
 8011c02:	bf00      	nop
 8011c04:	20005e24 	.word	0x20005e24

08011c08 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8011c08:	b580      	push	{r7, lr}
 8011c0a:	b084      	sub	sp, #16
 8011c0c:	af00      	add	r7, sp, #0
 8011c0e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8011c10:	f7ff f820 	bl	8010c54 <xTaskGetTickCount>
 8011c14:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8011c16:	4b0b      	ldr	r3, [pc, #44]	; (8011c44 <prvSampleTimeNow+0x3c>)
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	68fa      	ldr	r2, [r7, #12]
 8011c1c:	429a      	cmp	r2, r3
 8011c1e:	d205      	bcs.n	8011c2c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8011c20:	f000 f936 	bl	8011e90 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	2201      	movs	r2, #1
 8011c28:	601a      	str	r2, [r3, #0]
 8011c2a:	e002      	b.n	8011c32 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	2200      	movs	r2, #0
 8011c30:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8011c32:	4a04      	ldr	r2, [pc, #16]	; (8011c44 <prvSampleTimeNow+0x3c>)
 8011c34:	68fb      	ldr	r3, [r7, #12]
 8011c36:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8011c38:	68fb      	ldr	r3, [r7, #12]
}
 8011c3a:	4618      	mov	r0, r3
 8011c3c:	3710      	adds	r7, #16
 8011c3e:	46bd      	mov	sp, r7
 8011c40:	bd80      	pop	{r7, pc}
 8011c42:	bf00      	nop
 8011c44:	20005e34 	.word	0x20005e34

08011c48 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8011c48:	b580      	push	{r7, lr}
 8011c4a:	b086      	sub	sp, #24
 8011c4c:	af00      	add	r7, sp, #0
 8011c4e:	60f8      	str	r0, [r7, #12]
 8011c50:	60b9      	str	r1, [r7, #8]
 8011c52:	607a      	str	r2, [r7, #4]
 8011c54:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8011c56:	2300      	movs	r3, #0
 8011c58:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011c5a:	68fb      	ldr	r3, [r7, #12]
 8011c5c:	68ba      	ldr	r2, [r7, #8]
 8011c5e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	68fa      	ldr	r2, [r7, #12]
 8011c64:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8011c66:	68ba      	ldr	r2, [r7, #8]
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	429a      	cmp	r2, r3
 8011c6c:	d812      	bhi.n	8011c94 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011c6e:	687a      	ldr	r2, [r7, #4]
 8011c70:	683b      	ldr	r3, [r7, #0]
 8011c72:	1ad2      	subs	r2, r2, r3
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	699b      	ldr	r3, [r3, #24]
 8011c78:	429a      	cmp	r2, r3
 8011c7a:	d302      	bcc.n	8011c82 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011c7c:	2301      	movs	r3, #1
 8011c7e:	617b      	str	r3, [r7, #20]
 8011c80:	e01b      	b.n	8011cba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8011c82:	4b10      	ldr	r3, [pc, #64]	; (8011cc4 <prvInsertTimerInActiveList+0x7c>)
 8011c84:	681a      	ldr	r2, [r3, #0]
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	3304      	adds	r3, #4
 8011c8a:	4619      	mov	r1, r3
 8011c8c:	4610      	mov	r0, r2
 8011c8e:	f7fd fd16 	bl	800f6be <vListInsert>
 8011c92:	e012      	b.n	8011cba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011c94:	687a      	ldr	r2, [r7, #4]
 8011c96:	683b      	ldr	r3, [r7, #0]
 8011c98:	429a      	cmp	r2, r3
 8011c9a:	d206      	bcs.n	8011caa <prvInsertTimerInActiveList+0x62>
 8011c9c:	68ba      	ldr	r2, [r7, #8]
 8011c9e:	683b      	ldr	r3, [r7, #0]
 8011ca0:	429a      	cmp	r2, r3
 8011ca2:	d302      	bcc.n	8011caa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8011ca4:	2301      	movs	r3, #1
 8011ca6:	617b      	str	r3, [r7, #20]
 8011ca8:	e007      	b.n	8011cba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011caa:	4b07      	ldr	r3, [pc, #28]	; (8011cc8 <prvInsertTimerInActiveList+0x80>)
 8011cac:	681a      	ldr	r2, [r3, #0]
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	3304      	adds	r3, #4
 8011cb2:	4619      	mov	r1, r3
 8011cb4:	4610      	mov	r0, r2
 8011cb6:	f7fd fd02 	bl	800f6be <vListInsert>
		}
	}

	return xProcessTimerNow;
 8011cba:	697b      	ldr	r3, [r7, #20]
}
 8011cbc:	4618      	mov	r0, r3
 8011cbe:	3718      	adds	r7, #24
 8011cc0:	46bd      	mov	sp, r7
 8011cc2:	bd80      	pop	{r7, pc}
 8011cc4:	20005e28 	.word	0x20005e28
 8011cc8:	20005e24 	.word	0x20005e24

08011ccc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8011ccc:	b580      	push	{r7, lr}
 8011cce:	b08e      	sub	sp, #56	; 0x38
 8011cd0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011cd2:	e0ca      	b.n	8011e6a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	da18      	bge.n	8011d0c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8011cda:	1d3b      	adds	r3, r7, #4
 8011cdc:	3304      	adds	r3, #4
 8011cde:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8011ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d10a      	bne.n	8011cfc <prvProcessReceivedCommands+0x30>
	__asm volatile
 8011ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cea:	f383 8811 	msr	BASEPRI, r3
 8011cee:	f3bf 8f6f 	isb	sy
 8011cf2:	f3bf 8f4f 	dsb	sy
 8011cf6:	61fb      	str	r3, [r7, #28]
}
 8011cf8:	bf00      	nop
 8011cfa:	e7fe      	b.n	8011cfa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8011cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011d02:	6850      	ldr	r0, [r2, #4]
 8011d04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011d06:	6892      	ldr	r2, [r2, #8]
 8011d08:	4611      	mov	r1, r2
 8011d0a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	f2c0 80aa 	blt.w	8011e68 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8011d14:	68fb      	ldr	r3, [r7, #12]
 8011d16:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8011d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d1a:	695b      	ldr	r3, [r3, #20]
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d004      	beq.n	8011d2a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d22:	3304      	adds	r3, #4
 8011d24:	4618      	mov	r0, r3
 8011d26:	f7fd fd03 	bl	800f730 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011d2a:	463b      	mov	r3, r7
 8011d2c:	4618      	mov	r0, r3
 8011d2e:	f7ff ff6b 	bl	8011c08 <prvSampleTimeNow>
 8011d32:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	2b09      	cmp	r3, #9
 8011d38:	f200 8097 	bhi.w	8011e6a <prvProcessReceivedCommands+0x19e>
 8011d3c:	a201      	add	r2, pc, #4	; (adr r2, 8011d44 <prvProcessReceivedCommands+0x78>)
 8011d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d42:	bf00      	nop
 8011d44:	08011d6d 	.word	0x08011d6d
 8011d48:	08011d6d 	.word	0x08011d6d
 8011d4c:	08011d6d 	.word	0x08011d6d
 8011d50:	08011de1 	.word	0x08011de1
 8011d54:	08011df5 	.word	0x08011df5
 8011d58:	08011e3f 	.word	0x08011e3f
 8011d5c:	08011d6d 	.word	0x08011d6d
 8011d60:	08011d6d 	.word	0x08011d6d
 8011d64:	08011de1 	.word	0x08011de1
 8011d68:	08011df5 	.word	0x08011df5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011d72:	f043 0301 	orr.w	r3, r3, #1
 8011d76:	b2da      	uxtb	r2, r3
 8011d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011d7e:	68ba      	ldr	r2, [r7, #8]
 8011d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d82:	699b      	ldr	r3, [r3, #24]
 8011d84:	18d1      	adds	r1, r2, r3
 8011d86:	68bb      	ldr	r3, [r7, #8]
 8011d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011d8c:	f7ff ff5c 	bl	8011c48 <prvInsertTimerInActiveList>
 8011d90:	4603      	mov	r3, r0
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d069      	beq.n	8011e6a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d98:	6a1b      	ldr	r3, [r3, #32]
 8011d9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011d9c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011da0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011da4:	f003 0304 	and.w	r3, r3, #4
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d05e      	beq.n	8011e6a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011dac:	68ba      	ldr	r2, [r7, #8]
 8011dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011db0:	699b      	ldr	r3, [r3, #24]
 8011db2:	441a      	add	r2, r3
 8011db4:	2300      	movs	r3, #0
 8011db6:	9300      	str	r3, [sp, #0]
 8011db8:	2300      	movs	r3, #0
 8011dba:	2100      	movs	r1, #0
 8011dbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011dbe:	f7ff fe05 	bl	80119cc <xTimerGenericCommand>
 8011dc2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8011dc4:	6a3b      	ldr	r3, [r7, #32]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d14f      	bne.n	8011e6a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8011dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dce:	f383 8811 	msr	BASEPRI, r3
 8011dd2:	f3bf 8f6f 	isb	sy
 8011dd6:	f3bf 8f4f 	dsb	sy
 8011dda:	61bb      	str	r3, [r7, #24]
}
 8011ddc:	bf00      	nop
 8011dde:	e7fe      	b.n	8011dde <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011de2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011de6:	f023 0301 	bic.w	r3, r3, #1
 8011dea:	b2da      	uxtb	r2, r3
 8011dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8011df2:	e03a      	b.n	8011e6a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011df6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011dfa:	f043 0301 	orr.w	r3, r3, #1
 8011dfe:	b2da      	uxtb	r2, r3
 8011e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011e06:	68ba      	ldr	r2, [r7, #8]
 8011e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e0a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8011e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e0e:	699b      	ldr	r3, [r3, #24]
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d10a      	bne.n	8011e2a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8011e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e18:	f383 8811 	msr	BASEPRI, r3
 8011e1c:	f3bf 8f6f 	isb	sy
 8011e20:	f3bf 8f4f 	dsb	sy
 8011e24:	617b      	str	r3, [r7, #20]
}
 8011e26:	bf00      	nop
 8011e28:	e7fe      	b.n	8011e28 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e2c:	699a      	ldr	r2, [r3, #24]
 8011e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e30:	18d1      	adds	r1, r2, r3
 8011e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011e36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011e38:	f7ff ff06 	bl	8011c48 <prvInsertTimerInActiveList>
					break;
 8011e3c:	e015      	b.n	8011e6a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8011e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011e44:	f003 0302 	and.w	r3, r3, #2
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d103      	bne.n	8011e54 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8011e4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011e4e:	f000 fc1f 	bl	8012690 <vPortFree>
 8011e52:	e00a      	b.n	8011e6a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011e5a:	f023 0301 	bic.w	r3, r3, #1
 8011e5e:	b2da      	uxtb	r2, r3
 8011e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8011e66:	e000      	b.n	8011e6a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8011e68:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011e6a:	4b08      	ldr	r3, [pc, #32]	; (8011e8c <prvProcessReceivedCommands+0x1c0>)
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	1d39      	adds	r1, r7, #4
 8011e70:	2200      	movs	r2, #0
 8011e72:	4618      	mov	r0, r3
 8011e74:	f7fe f814 	bl	800fea0 <xQueueReceive>
 8011e78:	4603      	mov	r3, r0
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	f47f af2a 	bne.w	8011cd4 <prvProcessReceivedCommands+0x8>
	}
}
 8011e80:	bf00      	nop
 8011e82:	bf00      	nop
 8011e84:	3730      	adds	r7, #48	; 0x30
 8011e86:	46bd      	mov	sp, r7
 8011e88:	bd80      	pop	{r7, pc}
 8011e8a:	bf00      	nop
 8011e8c:	20005e2c 	.word	0x20005e2c

08011e90 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8011e90:	b580      	push	{r7, lr}
 8011e92:	b088      	sub	sp, #32
 8011e94:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011e96:	e048      	b.n	8011f2a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011e98:	4b2d      	ldr	r3, [pc, #180]	; (8011f50 <prvSwitchTimerLists+0xc0>)
 8011e9a:	681b      	ldr	r3, [r3, #0]
 8011e9c:	68db      	ldr	r3, [r3, #12]
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011ea2:	4b2b      	ldr	r3, [pc, #172]	; (8011f50 <prvSwitchTimerLists+0xc0>)
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	68db      	ldr	r3, [r3, #12]
 8011ea8:	68db      	ldr	r3, [r3, #12]
 8011eaa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011eac:	68fb      	ldr	r3, [r7, #12]
 8011eae:	3304      	adds	r3, #4
 8011eb0:	4618      	mov	r0, r3
 8011eb2:	f7fd fc3d 	bl	800f730 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011eb6:	68fb      	ldr	r3, [r7, #12]
 8011eb8:	6a1b      	ldr	r3, [r3, #32]
 8011eba:	68f8      	ldr	r0, [r7, #12]
 8011ebc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011ec4:	f003 0304 	and.w	r3, r3, #4
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d02e      	beq.n	8011f2a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	699b      	ldr	r3, [r3, #24]
 8011ed0:	693a      	ldr	r2, [r7, #16]
 8011ed2:	4413      	add	r3, r2
 8011ed4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8011ed6:	68ba      	ldr	r2, [r7, #8]
 8011ed8:	693b      	ldr	r3, [r7, #16]
 8011eda:	429a      	cmp	r2, r3
 8011edc:	d90e      	bls.n	8011efc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	68ba      	ldr	r2, [r7, #8]
 8011ee2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	68fa      	ldr	r2, [r7, #12]
 8011ee8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011eea:	4b19      	ldr	r3, [pc, #100]	; (8011f50 <prvSwitchTimerLists+0xc0>)
 8011eec:	681a      	ldr	r2, [r3, #0]
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	3304      	adds	r3, #4
 8011ef2:	4619      	mov	r1, r3
 8011ef4:	4610      	mov	r0, r2
 8011ef6:	f7fd fbe2 	bl	800f6be <vListInsert>
 8011efa:	e016      	b.n	8011f2a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011efc:	2300      	movs	r3, #0
 8011efe:	9300      	str	r3, [sp, #0]
 8011f00:	2300      	movs	r3, #0
 8011f02:	693a      	ldr	r2, [r7, #16]
 8011f04:	2100      	movs	r1, #0
 8011f06:	68f8      	ldr	r0, [r7, #12]
 8011f08:	f7ff fd60 	bl	80119cc <xTimerGenericCommand>
 8011f0c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d10a      	bne.n	8011f2a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8011f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f18:	f383 8811 	msr	BASEPRI, r3
 8011f1c:	f3bf 8f6f 	isb	sy
 8011f20:	f3bf 8f4f 	dsb	sy
 8011f24:	603b      	str	r3, [r7, #0]
}
 8011f26:	bf00      	nop
 8011f28:	e7fe      	b.n	8011f28 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011f2a:	4b09      	ldr	r3, [pc, #36]	; (8011f50 <prvSwitchTimerLists+0xc0>)
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d1b1      	bne.n	8011e98 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8011f34:	4b06      	ldr	r3, [pc, #24]	; (8011f50 <prvSwitchTimerLists+0xc0>)
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8011f3a:	4b06      	ldr	r3, [pc, #24]	; (8011f54 <prvSwitchTimerLists+0xc4>)
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	4a04      	ldr	r2, [pc, #16]	; (8011f50 <prvSwitchTimerLists+0xc0>)
 8011f40:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8011f42:	4a04      	ldr	r2, [pc, #16]	; (8011f54 <prvSwitchTimerLists+0xc4>)
 8011f44:	697b      	ldr	r3, [r7, #20]
 8011f46:	6013      	str	r3, [r2, #0]
}
 8011f48:	bf00      	nop
 8011f4a:	3718      	adds	r7, #24
 8011f4c:	46bd      	mov	sp, r7
 8011f4e:	bd80      	pop	{r7, pc}
 8011f50:	20005e24 	.word	0x20005e24
 8011f54:	20005e28 	.word	0x20005e28

08011f58 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011f58:	b580      	push	{r7, lr}
 8011f5a:	b082      	sub	sp, #8
 8011f5c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8011f5e:	f000 f9a9 	bl	80122b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8011f62:	4b15      	ldr	r3, [pc, #84]	; (8011fb8 <prvCheckForValidListAndQueue+0x60>)
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d120      	bne.n	8011fac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8011f6a:	4814      	ldr	r0, [pc, #80]	; (8011fbc <prvCheckForValidListAndQueue+0x64>)
 8011f6c:	f7fd fb56 	bl	800f61c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011f70:	4813      	ldr	r0, [pc, #76]	; (8011fc0 <prvCheckForValidListAndQueue+0x68>)
 8011f72:	f7fd fb53 	bl	800f61c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8011f76:	4b13      	ldr	r3, [pc, #76]	; (8011fc4 <prvCheckForValidListAndQueue+0x6c>)
 8011f78:	4a10      	ldr	r2, [pc, #64]	; (8011fbc <prvCheckForValidListAndQueue+0x64>)
 8011f7a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011f7c:	4b12      	ldr	r3, [pc, #72]	; (8011fc8 <prvCheckForValidListAndQueue+0x70>)
 8011f7e:	4a10      	ldr	r2, [pc, #64]	; (8011fc0 <prvCheckForValidListAndQueue+0x68>)
 8011f80:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8011f82:	2300      	movs	r3, #0
 8011f84:	9300      	str	r3, [sp, #0]
 8011f86:	4b11      	ldr	r3, [pc, #68]	; (8011fcc <prvCheckForValidListAndQueue+0x74>)
 8011f88:	4a11      	ldr	r2, [pc, #68]	; (8011fd0 <prvCheckForValidListAndQueue+0x78>)
 8011f8a:	2110      	movs	r1, #16
 8011f8c:	2040      	movs	r0, #64	; 0x40
 8011f8e:	f7fd fc61 	bl	800f854 <xQueueGenericCreateStatic>
 8011f92:	4603      	mov	r3, r0
 8011f94:	4a08      	ldr	r2, [pc, #32]	; (8011fb8 <prvCheckForValidListAndQueue+0x60>)
 8011f96:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8011f98:	4b07      	ldr	r3, [pc, #28]	; (8011fb8 <prvCheckForValidListAndQueue+0x60>)
 8011f9a:	681b      	ldr	r3, [r3, #0]
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d005      	beq.n	8011fac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011fa0:	4b05      	ldr	r3, [pc, #20]	; (8011fb8 <prvCheckForValidListAndQueue+0x60>)
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	490b      	ldr	r1, [pc, #44]	; (8011fd4 <prvCheckForValidListAndQueue+0x7c>)
 8011fa6:	4618      	mov	r0, r3
 8011fa8:	f7fe fb0e 	bl	80105c8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011fac:	f000 f9b2 	bl	8012314 <vPortExitCritical>
}
 8011fb0:	bf00      	nop
 8011fb2:	46bd      	mov	sp, r7
 8011fb4:	bd80      	pop	{r7, pc}
 8011fb6:	bf00      	nop
 8011fb8:	20005e2c 	.word	0x20005e2c
 8011fbc:	20005dfc 	.word	0x20005dfc
 8011fc0:	20005e10 	.word	0x20005e10
 8011fc4:	20005e24 	.word	0x20005e24
 8011fc8:	20005e28 	.word	0x20005e28
 8011fcc:	20006238 	.word	0x20006238
 8011fd0:	20005e38 	.word	0x20005e38
 8011fd4:	08018608 	.word	0x08018608

08011fd8 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8011fd8:	b580      	push	{r7, lr}
 8011fda:	b086      	sub	sp, #24
 8011fdc:	af00      	add	r7, sp, #0
 8011fde:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d10a      	bne.n	8012000 <pvTimerGetTimerID+0x28>
	__asm volatile
 8011fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fee:	f383 8811 	msr	BASEPRI, r3
 8011ff2:	f3bf 8f6f 	isb	sy
 8011ff6:	f3bf 8f4f 	dsb	sy
 8011ffa:	60fb      	str	r3, [r7, #12]
}
 8011ffc:	bf00      	nop
 8011ffe:	e7fe      	b.n	8011ffe <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8012000:	f000 f958 	bl	80122b4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8012004:	697b      	ldr	r3, [r7, #20]
 8012006:	69db      	ldr	r3, [r3, #28]
 8012008:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 801200a:	f000 f983 	bl	8012314 <vPortExitCritical>

	return pvReturn;
 801200e:	693b      	ldr	r3, [r7, #16]
}
 8012010:	4618      	mov	r0, r3
 8012012:	3718      	adds	r7, #24
 8012014:	46bd      	mov	sp, r7
 8012016:	bd80      	pop	{r7, pc}

08012018 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8012018:	b580      	push	{r7, lr}
 801201a:	b08a      	sub	sp, #40	; 0x28
 801201c:	af00      	add	r7, sp, #0
 801201e:	60f8      	str	r0, [r7, #12]
 8012020:	60b9      	str	r1, [r7, #8]
 8012022:	607a      	str	r2, [r7, #4]
 8012024:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8012026:	f06f 0301 	mvn.w	r3, #1
 801202a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8012030:	68bb      	ldr	r3, [r7, #8]
 8012032:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8012038:	4b06      	ldr	r3, [pc, #24]	; (8012054 <xTimerPendFunctionCallFromISR+0x3c>)
 801203a:	6818      	ldr	r0, [r3, #0]
 801203c:	f107 0114 	add.w	r1, r7, #20
 8012040:	2300      	movs	r3, #0
 8012042:	683a      	ldr	r2, [r7, #0]
 8012044:	f7fd fe90 	bl	800fd68 <xQueueGenericSendFromISR>
 8012048:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 801204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801204c:	4618      	mov	r0, r3
 801204e:	3728      	adds	r7, #40	; 0x28
 8012050:	46bd      	mov	sp, r7
 8012052:	bd80      	pop	{r7, pc}
 8012054:	20005e2c 	.word	0x20005e2c

08012058 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012058:	b480      	push	{r7}
 801205a:	b085      	sub	sp, #20
 801205c:	af00      	add	r7, sp, #0
 801205e:	60f8      	str	r0, [r7, #12]
 8012060:	60b9      	str	r1, [r7, #8]
 8012062:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	3b04      	subs	r3, #4
 8012068:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801206a:	68fb      	ldr	r3, [r7, #12]
 801206c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012070:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012072:	68fb      	ldr	r3, [r7, #12]
 8012074:	3b04      	subs	r3, #4
 8012076:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012078:	68bb      	ldr	r3, [r7, #8]
 801207a:	f023 0201 	bic.w	r2, r3, #1
 801207e:	68fb      	ldr	r3, [r7, #12]
 8012080:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	3b04      	subs	r3, #4
 8012086:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012088:	4a0c      	ldr	r2, [pc, #48]	; (80120bc <pxPortInitialiseStack+0x64>)
 801208a:	68fb      	ldr	r3, [r7, #12]
 801208c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	3b14      	subs	r3, #20
 8012092:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012094:	687a      	ldr	r2, [r7, #4]
 8012096:	68fb      	ldr	r3, [r7, #12]
 8012098:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	3b04      	subs	r3, #4
 801209e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80120a0:	68fb      	ldr	r3, [r7, #12]
 80120a2:	f06f 0202 	mvn.w	r2, #2
 80120a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80120a8:	68fb      	ldr	r3, [r7, #12]
 80120aa:	3b20      	subs	r3, #32
 80120ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80120ae:	68fb      	ldr	r3, [r7, #12]
}
 80120b0:	4618      	mov	r0, r3
 80120b2:	3714      	adds	r7, #20
 80120b4:	46bd      	mov	sp, r7
 80120b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ba:	4770      	bx	lr
 80120bc:	080120c1 	.word	0x080120c1

080120c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80120c0:	b480      	push	{r7}
 80120c2:	b085      	sub	sp, #20
 80120c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80120c6:	2300      	movs	r3, #0
 80120c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80120ca:	4b12      	ldr	r3, [pc, #72]	; (8012114 <prvTaskExitError+0x54>)
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120d2:	d00a      	beq.n	80120ea <prvTaskExitError+0x2a>
	__asm volatile
 80120d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120d8:	f383 8811 	msr	BASEPRI, r3
 80120dc:	f3bf 8f6f 	isb	sy
 80120e0:	f3bf 8f4f 	dsb	sy
 80120e4:	60fb      	str	r3, [r7, #12]
}
 80120e6:	bf00      	nop
 80120e8:	e7fe      	b.n	80120e8 <prvTaskExitError+0x28>
	__asm volatile
 80120ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120ee:	f383 8811 	msr	BASEPRI, r3
 80120f2:	f3bf 8f6f 	isb	sy
 80120f6:	f3bf 8f4f 	dsb	sy
 80120fa:	60bb      	str	r3, [r7, #8]
}
 80120fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80120fe:	bf00      	nop
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	2b00      	cmp	r3, #0
 8012104:	d0fc      	beq.n	8012100 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012106:	bf00      	nop
 8012108:	bf00      	nop
 801210a:	3714      	adds	r7, #20
 801210c:	46bd      	mov	sp, r7
 801210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012112:	4770      	bx	lr
 8012114:	200000a0 	.word	0x200000a0
	...

08012120 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012120:	4b07      	ldr	r3, [pc, #28]	; (8012140 <pxCurrentTCBConst2>)
 8012122:	6819      	ldr	r1, [r3, #0]
 8012124:	6808      	ldr	r0, [r1, #0]
 8012126:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801212a:	f380 8809 	msr	PSP, r0
 801212e:	f3bf 8f6f 	isb	sy
 8012132:	f04f 0000 	mov.w	r0, #0
 8012136:	f380 8811 	msr	BASEPRI, r0
 801213a:	4770      	bx	lr
 801213c:	f3af 8000 	nop.w

08012140 <pxCurrentTCBConst2>:
 8012140:	200058fc 	.word	0x200058fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012144:	bf00      	nop
 8012146:	bf00      	nop

08012148 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012148:	4808      	ldr	r0, [pc, #32]	; (801216c <prvPortStartFirstTask+0x24>)
 801214a:	6800      	ldr	r0, [r0, #0]
 801214c:	6800      	ldr	r0, [r0, #0]
 801214e:	f380 8808 	msr	MSP, r0
 8012152:	f04f 0000 	mov.w	r0, #0
 8012156:	f380 8814 	msr	CONTROL, r0
 801215a:	b662      	cpsie	i
 801215c:	b661      	cpsie	f
 801215e:	f3bf 8f4f 	dsb	sy
 8012162:	f3bf 8f6f 	isb	sy
 8012166:	df00      	svc	0
 8012168:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801216a:	bf00      	nop
 801216c:	e000ed08 	.word	0xe000ed08

08012170 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012170:	b580      	push	{r7, lr}
 8012172:	b086      	sub	sp, #24
 8012174:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012176:	4b46      	ldr	r3, [pc, #280]	; (8012290 <xPortStartScheduler+0x120>)
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	4a46      	ldr	r2, [pc, #280]	; (8012294 <xPortStartScheduler+0x124>)
 801217c:	4293      	cmp	r3, r2
 801217e:	d10a      	bne.n	8012196 <xPortStartScheduler+0x26>
	__asm volatile
 8012180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012184:	f383 8811 	msr	BASEPRI, r3
 8012188:	f3bf 8f6f 	isb	sy
 801218c:	f3bf 8f4f 	dsb	sy
 8012190:	613b      	str	r3, [r7, #16]
}
 8012192:	bf00      	nop
 8012194:	e7fe      	b.n	8012194 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012196:	4b3e      	ldr	r3, [pc, #248]	; (8012290 <xPortStartScheduler+0x120>)
 8012198:	681b      	ldr	r3, [r3, #0]
 801219a:	4a3f      	ldr	r2, [pc, #252]	; (8012298 <xPortStartScheduler+0x128>)
 801219c:	4293      	cmp	r3, r2
 801219e:	d10a      	bne.n	80121b6 <xPortStartScheduler+0x46>
	__asm volatile
 80121a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121a4:	f383 8811 	msr	BASEPRI, r3
 80121a8:	f3bf 8f6f 	isb	sy
 80121ac:	f3bf 8f4f 	dsb	sy
 80121b0:	60fb      	str	r3, [r7, #12]
}
 80121b2:	bf00      	nop
 80121b4:	e7fe      	b.n	80121b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80121b6:	4b39      	ldr	r3, [pc, #228]	; (801229c <xPortStartScheduler+0x12c>)
 80121b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80121ba:	697b      	ldr	r3, [r7, #20]
 80121bc:	781b      	ldrb	r3, [r3, #0]
 80121be:	b2db      	uxtb	r3, r3
 80121c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80121c2:	697b      	ldr	r3, [r7, #20]
 80121c4:	22ff      	movs	r2, #255	; 0xff
 80121c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80121c8:	697b      	ldr	r3, [r7, #20]
 80121ca:	781b      	ldrb	r3, [r3, #0]
 80121cc:	b2db      	uxtb	r3, r3
 80121ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80121d0:	78fb      	ldrb	r3, [r7, #3]
 80121d2:	b2db      	uxtb	r3, r3
 80121d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80121d8:	b2da      	uxtb	r2, r3
 80121da:	4b31      	ldr	r3, [pc, #196]	; (80122a0 <xPortStartScheduler+0x130>)
 80121dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80121de:	4b31      	ldr	r3, [pc, #196]	; (80122a4 <xPortStartScheduler+0x134>)
 80121e0:	2207      	movs	r2, #7
 80121e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80121e4:	e009      	b.n	80121fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80121e6:	4b2f      	ldr	r3, [pc, #188]	; (80122a4 <xPortStartScheduler+0x134>)
 80121e8:	681b      	ldr	r3, [r3, #0]
 80121ea:	3b01      	subs	r3, #1
 80121ec:	4a2d      	ldr	r2, [pc, #180]	; (80122a4 <xPortStartScheduler+0x134>)
 80121ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80121f0:	78fb      	ldrb	r3, [r7, #3]
 80121f2:	b2db      	uxtb	r3, r3
 80121f4:	005b      	lsls	r3, r3, #1
 80121f6:	b2db      	uxtb	r3, r3
 80121f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80121fa:	78fb      	ldrb	r3, [r7, #3]
 80121fc:	b2db      	uxtb	r3, r3
 80121fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012202:	2b80      	cmp	r3, #128	; 0x80
 8012204:	d0ef      	beq.n	80121e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012206:	4b27      	ldr	r3, [pc, #156]	; (80122a4 <xPortStartScheduler+0x134>)
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	f1c3 0307 	rsb	r3, r3, #7
 801220e:	2b04      	cmp	r3, #4
 8012210:	d00a      	beq.n	8012228 <xPortStartScheduler+0xb8>
	__asm volatile
 8012212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012216:	f383 8811 	msr	BASEPRI, r3
 801221a:	f3bf 8f6f 	isb	sy
 801221e:	f3bf 8f4f 	dsb	sy
 8012222:	60bb      	str	r3, [r7, #8]
}
 8012224:	bf00      	nop
 8012226:	e7fe      	b.n	8012226 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012228:	4b1e      	ldr	r3, [pc, #120]	; (80122a4 <xPortStartScheduler+0x134>)
 801222a:	681b      	ldr	r3, [r3, #0]
 801222c:	021b      	lsls	r3, r3, #8
 801222e:	4a1d      	ldr	r2, [pc, #116]	; (80122a4 <xPortStartScheduler+0x134>)
 8012230:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012232:	4b1c      	ldr	r3, [pc, #112]	; (80122a4 <xPortStartScheduler+0x134>)
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801223a:	4a1a      	ldr	r2, [pc, #104]	; (80122a4 <xPortStartScheduler+0x134>)
 801223c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	b2da      	uxtb	r2, r3
 8012242:	697b      	ldr	r3, [r7, #20]
 8012244:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012246:	4b18      	ldr	r3, [pc, #96]	; (80122a8 <xPortStartScheduler+0x138>)
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	4a17      	ldr	r2, [pc, #92]	; (80122a8 <xPortStartScheduler+0x138>)
 801224c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012250:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012252:	4b15      	ldr	r3, [pc, #84]	; (80122a8 <xPortStartScheduler+0x138>)
 8012254:	681b      	ldr	r3, [r3, #0]
 8012256:	4a14      	ldr	r2, [pc, #80]	; (80122a8 <xPortStartScheduler+0x138>)
 8012258:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801225c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801225e:	f000 f8dd 	bl	801241c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012262:	4b12      	ldr	r3, [pc, #72]	; (80122ac <xPortStartScheduler+0x13c>)
 8012264:	2200      	movs	r2, #0
 8012266:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012268:	f000 f8fc 	bl	8012464 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801226c:	4b10      	ldr	r3, [pc, #64]	; (80122b0 <xPortStartScheduler+0x140>)
 801226e:	681b      	ldr	r3, [r3, #0]
 8012270:	4a0f      	ldr	r2, [pc, #60]	; (80122b0 <xPortStartScheduler+0x140>)
 8012272:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012276:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012278:	f7ff ff66 	bl	8012148 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801227c:	f7fe fdb4 	bl	8010de8 <vTaskSwitchContext>
	prvTaskExitError();
 8012280:	f7ff ff1e 	bl	80120c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012284:	2300      	movs	r3, #0
}
 8012286:	4618      	mov	r0, r3
 8012288:	3718      	adds	r7, #24
 801228a:	46bd      	mov	sp, r7
 801228c:	bd80      	pop	{r7, pc}
 801228e:	bf00      	nop
 8012290:	e000ed00 	.word	0xe000ed00
 8012294:	410fc271 	.word	0x410fc271
 8012298:	410fc270 	.word	0x410fc270
 801229c:	e000e400 	.word	0xe000e400
 80122a0:	20006288 	.word	0x20006288
 80122a4:	2000628c 	.word	0x2000628c
 80122a8:	e000ed20 	.word	0xe000ed20
 80122ac:	200000a0 	.word	0x200000a0
 80122b0:	e000ef34 	.word	0xe000ef34

080122b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80122b4:	b480      	push	{r7}
 80122b6:	b083      	sub	sp, #12
 80122b8:	af00      	add	r7, sp, #0
	__asm volatile
 80122ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122be:	f383 8811 	msr	BASEPRI, r3
 80122c2:	f3bf 8f6f 	isb	sy
 80122c6:	f3bf 8f4f 	dsb	sy
 80122ca:	607b      	str	r3, [r7, #4]
}
 80122cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80122ce:	4b0f      	ldr	r3, [pc, #60]	; (801230c <vPortEnterCritical+0x58>)
 80122d0:	681b      	ldr	r3, [r3, #0]
 80122d2:	3301      	adds	r3, #1
 80122d4:	4a0d      	ldr	r2, [pc, #52]	; (801230c <vPortEnterCritical+0x58>)
 80122d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80122d8:	4b0c      	ldr	r3, [pc, #48]	; (801230c <vPortEnterCritical+0x58>)
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	2b01      	cmp	r3, #1
 80122de:	d10f      	bne.n	8012300 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80122e0:	4b0b      	ldr	r3, [pc, #44]	; (8012310 <vPortEnterCritical+0x5c>)
 80122e2:	681b      	ldr	r3, [r3, #0]
 80122e4:	b2db      	uxtb	r3, r3
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d00a      	beq.n	8012300 <vPortEnterCritical+0x4c>
	__asm volatile
 80122ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122ee:	f383 8811 	msr	BASEPRI, r3
 80122f2:	f3bf 8f6f 	isb	sy
 80122f6:	f3bf 8f4f 	dsb	sy
 80122fa:	603b      	str	r3, [r7, #0]
}
 80122fc:	bf00      	nop
 80122fe:	e7fe      	b.n	80122fe <vPortEnterCritical+0x4a>
	}
}
 8012300:	bf00      	nop
 8012302:	370c      	adds	r7, #12
 8012304:	46bd      	mov	sp, r7
 8012306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801230a:	4770      	bx	lr
 801230c:	200000a0 	.word	0x200000a0
 8012310:	e000ed04 	.word	0xe000ed04

08012314 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012314:	b480      	push	{r7}
 8012316:	b083      	sub	sp, #12
 8012318:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801231a:	4b12      	ldr	r3, [pc, #72]	; (8012364 <vPortExitCritical+0x50>)
 801231c:	681b      	ldr	r3, [r3, #0]
 801231e:	2b00      	cmp	r3, #0
 8012320:	d10a      	bne.n	8012338 <vPortExitCritical+0x24>
	__asm volatile
 8012322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012326:	f383 8811 	msr	BASEPRI, r3
 801232a:	f3bf 8f6f 	isb	sy
 801232e:	f3bf 8f4f 	dsb	sy
 8012332:	607b      	str	r3, [r7, #4]
}
 8012334:	bf00      	nop
 8012336:	e7fe      	b.n	8012336 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012338:	4b0a      	ldr	r3, [pc, #40]	; (8012364 <vPortExitCritical+0x50>)
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	3b01      	subs	r3, #1
 801233e:	4a09      	ldr	r2, [pc, #36]	; (8012364 <vPortExitCritical+0x50>)
 8012340:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012342:	4b08      	ldr	r3, [pc, #32]	; (8012364 <vPortExitCritical+0x50>)
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	2b00      	cmp	r3, #0
 8012348:	d105      	bne.n	8012356 <vPortExitCritical+0x42>
 801234a:	2300      	movs	r3, #0
 801234c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801234e:	683b      	ldr	r3, [r7, #0]
 8012350:	f383 8811 	msr	BASEPRI, r3
}
 8012354:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012356:	bf00      	nop
 8012358:	370c      	adds	r7, #12
 801235a:	46bd      	mov	sp, r7
 801235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012360:	4770      	bx	lr
 8012362:	bf00      	nop
 8012364:	200000a0 	.word	0x200000a0
	...

08012370 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012370:	f3ef 8009 	mrs	r0, PSP
 8012374:	f3bf 8f6f 	isb	sy
 8012378:	4b15      	ldr	r3, [pc, #84]	; (80123d0 <pxCurrentTCBConst>)
 801237a:	681a      	ldr	r2, [r3, #0]
 801237c:	f01e 0f10 	tst.w	lr, #16
 8012380:	bf08      	it	eq
 8012382:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012386:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801238a:	6010      	str	r0, [r2, #0]
 801238c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012390:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012394:	f380 8811 	msr	BASEPRI, r0
 8012398:	f3bf 8f4f 	dsb	sy
 801239c:	f3bf 8f6f 	isb	sy
 80123a0:	f7fe fd22 	bl	8010de8 <vTaskSwitchContext>
 80123a4:	f04f 0000 	mov.w	r0, #0
 80123a8:	f380 8811 	msr	BASEPRI, r0
 80123ac:	bc09      	pop	{r0, r3}
 80123ae:	6819      	ldr	r1, [r3, #0]
 80123b0:	6808      	ldr	r0, [r1, #0]
 80123b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123b6:	f01e 0f10 	tst.w	lr, #16
 80123ba:	bf08      	it	eq
 80123bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80123c0:	f380 8809 	msr	PSP, r0
 80123c4:	f3bf 8f6f 	isb	sy
 80123c8:	4770      	bx	lr
 80123ca:	bf00      	nop
 80123cc:	f3af 8000 	nop.w

080123d0 <pxCurrentTCBConst>:
 80123d0:	200058fc 	.word	0x200058fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80123d4:	bf00      	nop
 80123d6:	bf00      	nop

080123d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80123d8:	b580      	push	{r7, lr}
 80123da:	b082      	sub	sp, #8
 80123dc:	af00      	add	r7, sp, #0
	__asm volatile
 80123de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123e2:	f383 8811 	msr	BASEPRI, r3
 80123e6:	f3bf 8f6f 	isb	sy
 80123ea:	f3bf 8f4f 	dsb	sy
 80123ee:	607b      	str	r3, [r7, #4]
}
 80123f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80123f2:	f7fe fc3f 	bl	8010c74 <xTaskIncrementTick>
 80123f6:	4603      	mov	r3, r0
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d003      	beq.n	8012404 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80123fc:	4b06      	ldr	r3, [pc, #24]	; (8012418 <xPortSysTickHandler+0x40>)
 80123fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012402:	601a      	str	r2, [r3, #0]
 8012404:	2300      	movs	r3, #0
 8012406:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012408:	683b      	ldr	r3, [r7, #0]
 801240a:	f383 8811 	msr	BASEPRI, r3
}
 801240e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012410:	bf00      	nop
 8012412:	3708      	adds	r7, #8
 8012414:	46bd      	mov	sp, r7
 8012416:	bd80      	pop	{r7, pc}
 8012418:	e000ed04 	.word	0xe000ed04

0801241c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801241c:	b480      	push	{r7}
 801241e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012420:	4b0b      	ldr	r3, [pc, #44]	; (8012450 <vPortSetupTimerInterrupt+0x34>)
 8012422:	2200      	movs	r2, #0
 8012424:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012426:	4b0b      	ldr	r3, [pc, #44]	; (8012454 <vPortSetupTimerInterrupt+0x38>)
 8012428:	2200      	movs	r2, #0
 801242a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801242c:	4b0a      	ldr	r3, [pc, #40]	; (8012458 <vPortSetupTimerInterrupt+0x3c>)
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	4a0a      	ldr	r2, [pc, #40]	; (801245c <vPortSetupTimerInterrupt+0x40>)
 8012432:	fba2 2303 	umull	r2, r3, r2, r3
 8012436:	099b      	lsrs	r3, r3, #6
 8012438:	4a09      	ldr	r2, [pc, #36]	; (8012460 <vPortSetupTimerInterrupt+0x44>)
 801243a:	3b01      	subs	r3, #1
 801243c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801243e:	4b04      	ldr	r3, [pc, #16]	; (8012450 <vPortSetupTimerInterrupt+0x34>)
 8012440:	2207      	movs	r2, #7
 8012442:	601a      	str	r2, [r3, #0]
}
 8012444:	bf00      	nop
 8012446:	46bd      	mov	sp, r7
 8012448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801244c:	4770      	bx	lr
 801244e:	bf00      	nop
 8012450:	e000e010 	.word	0xe000e010
 8012454:	e000e018 	.word	0xe000e018
 8012458:	20000094 	.word	0x20000094
 801245c:	10624dd3 	.word	0x10624dd3
 8012460:	e000e014 	.word	0xe000e014

08012464 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012464:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012474 <vPortEnableVFP+0x10>
 8012468:	6801      	ldr	r1, [r0, #0]
 801246a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801246e:	6001      	str	r1, [r0, #0]
 8012470:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012472:	bf00      	nop
 8012474:	e000ed88 	.word	0xe000ed88

08012478 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012478:	b480      	push	{r7}
 801247a:	b085      	sub	sp, #20
 801247c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801247e:	f3ef 8305 	mrs	r3, IPSR
 8012482:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	2b0f      	cmp	r3, #15
 8012488:	d914      	bls.n	80124b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801248a:	4a17      	ldr	r2, [pc, #92]	; (80124e8 <vPortValidateInterruptPriority+0x70>)
 801248c:	68fb      	ldr	r3, [r7, #12]
 801248e:	4413      	add	r3, r2
 8012490:	781b      	ldrb	r3, [r3, #0]
 8012492:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012494:	4b15      	ldr	r3, [pc, #84]	; (80124ec <vPortValidateInterruptPriority+0x74>)
 8012496:	781b      	ldrb	r3, [r3, #0]
 8012498:	7afa      	ldrb	r2, [r7, #11]
 801249a:	429a      	cmp	r2, r3
 801249c:	d20a      	bcs.n	80124b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801249e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124a2:	f383 8811 	msr	BASEPRI, r3
 80124a6:	f3bf 8f6f 	isb	sy
 80124aa:	f3bf 8f4f 	dsb	sy
 80124ae:	607b      	str	r3, [r7, #4]
}
 80124b0:	bf00      	nop
 80124b2:	e7fe      	b.n	80124b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80124b4:	4b0e      	ldr	r3, [pc, #56]	; (80124f0 <vPortValidateInterruptPriority+0x78>)
 80124b6:	681b      	ldr	r3, [r3, #0]
 80124b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80124bc:	4b0d      	ldr	r3, [pc, #52]	; (80124f4 <vPortValidateInterruptPriority+0x7c>)
 80124be:	681b      	ldr	r3, [r3, #0]
 80124c0:	429a      	cmp	r2, r3
 80124c2:	d90a      	bls.n	80124da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80124c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124c8:	f383 8811 	msr	BASEPRI, r3
 80124cc:	f3bf 8f6f 	isb	sy
 80124d0:	f3bf 8f4f 	dsb	sy
 80124d4:	603b      	str	r3, [r7, #0]
}
 80124d6:	bf00      	nop
 80124d8:	e7fe      	b.n	80124d8 <vPortValidateInterruptPriority+0x60>
	}
 80124da:	bf00      	nop
 80124dc:	3714      	adds	r7, #20
 80124de:	46bd      	mov	sp, r7
 80124e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124e4:	4770      	bx	lr
 80124e6:	bf00      	nop
 80124e8:	e000e3f0 	.word	0xe000e3f0
 80124ec:	20006288 	.word	0x20006288
 80124f0:	e000ed0c 	.word	0xe000ed0c
 80124f4:	2000628c 	.word	0x2000628c

080124f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80124f8:	b580      	push	{r7, lr}
 80124fa:	b08a      	sub	sp, #40	; 0x28
 80124fc:	af00      	add	r7, sp, #0
 80124fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012500:	2300      	movs	r3, #0
 8012502:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012504:	f7fe fafa 	bl	8010afc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012508:	4b5b      	ldr	r3, [pc, #364]	; (8012678 <pvPortMalloc+0x180>)
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	2b00      	cmp	r3, #0
 801250e:	d101      	bne.n	8012514 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012510:	f000 f920 	bl	8012754 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012514:	4b59      	ldr	r3, [pc, #356]	; (801267c <pvPortMalloc+0x184>)
 8012516:	681a      	ldr	r2, [r3, #0]
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	4013      	ands	r3, r2
 801251c:	2b00      	cmp	r3, #0
 801251e:	f040 8093 	bne.w	8012648 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	2b00      	cmp	r3, #0
 8012526:	d01d      	beq.n	8012564 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8012528:	2208      	movs	r2, #8
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	4413      	add	r3, r2
 801252e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	f003 0307 	and.w	r3, r3, #7
 8012536:	2b00      	cmp	r3, #0
 8012538:	d014      	beq.n	8012564 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	f023 0307 	bic.w	r3, r3, #7
 8012540:	3308      	adds	r3, #8
 8012542:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	f003 0307 	and.w	r3, r3, #7
 801254a:	2b00      	cmp	r3, #0
 801254c:	d00a      	beq.n	8012564 <pvPortMalloc+0x6c>
	__asm volatile
 801254e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012552:	f383 8811 	msr	BASEPRI, r3
 8012556:	f3bf 8f6f 	isb	sy
 801255a:	f3bf 8f4f 	dsb	sy
 801255e:	617b      	str	r3, [r7, #20]
}
 8012560:	bf00      	nop
 8012562:	e7fe      	b.n	8012562 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	2b00      	cmp	r3, #0
 8012568:	d06e      	beq.n	8012648 <pvPortMalloc+0x150>
 801256a:	4b45      	ldr	r3, [pc, #276]	; (8012680 <pvPortMalloc+0x188>)
 801256c:	681b      	ldr	r3, [r3, #0]
 801256e:	687a      	ldr	r2, [r7, #4]
 8012570:	429a      	cmp	r2, r3
 8012572:	d869      	bhi.n	8012648 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012574:	4b43      	ldr	r3, [pc, #268]	; (8012684 <pvPortMalloc+0x18c>)
 8012576:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012578:	4b42      	ldr	r3, [pc, #264]	; (8012684 <pvPortMalloc+0x18c>)
 801257a:	681b      	ldr	r3, [r3, #0]
 801257c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801257e:	e004      	b.n	801258a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8012580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012582:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801258a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801258c:	685b      	ldr	r3, [r3, #4]
 801258e:	687a      	ldr	r2, [r7, #4]
 8012590:	429a      	cmp	r2, r3
 8012592:	d903      	bls.n	801259c <pvPortMalloc+0xa4>
 8012594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012596:	681b      	ldr	r3, [r3, #0]
 8012598:	2b00      	cmp	r3, #0
 801259a:	d1f1      	bne.n	8012580 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801259c:	4b36      	ldr	r3, [pc, #216]	; (8012678 <pvPortMalloc+0x180>)
 801259e:	681b      	ldr	r3, [r3, #0]
 80125a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80125a2:	429a      	cmp	r2, r3
 80125a4:	d050      	beq.n	8012648 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80125a6:	6a3b      	ldr	r3, [r7, #32]
 80125a8:	681b      	ldr	r3, [r3, #0]
 80125aa:	2208      	movs	r2, #8
 80125ac:	4413      	add	r3, r2
 80125ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80125b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125b2:	681a      	ldr	r2, [r3, #0]
 80125b4:	6a3b      	ldr	r3, [r7, #32]
 80125b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80125b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125ba:	685a      	ldr	r2, [r3, #4]
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	1ad2      	subs	r2, r2, r3
 80125c0:	2308      	movs	r3, #8
 80125c2:	005b      	lsls	r3, r3, #1
 80125c4:	429a      	cmp	r2, r3
 80125c6:	d91f      	bls.n	8012608 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80125c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	4413      	add	r3, r2
 80125ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80125d0:	69bb      	ldr	r3, [r7, #24]
 80125d2:	f003 0307 	and.w	r3, r3, #7
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d00a      	beq.n	80125f0 <pvPortMalloc+0xf8>
	__asm volatile
 80125da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125de:	f383 8811 	msr	BASEPRI, r3
 80125e2:	f3bf 8f6f 	isb	sy
 80125e6:	f3bf 8f4f 	dsb	sy
 80125ea:	613b      	str	r3, [r7, #16]
}
 80125ec:	bf00      	nop
 80125ee:	e7fe      	b.n	80125ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80125f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125f2:	685a      	ldr	r2, [r3, #4]
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	1ad2      	subs	r2, r2, r3
 80125f8:	69bb      	ldr	r3, [r7, #24]
 80125fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80125fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125fe:	687a      	ldr	r2, [r7, #4]
 8012600:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012602:	69b8      	ldr	r0, [r7, #24]
 8012604:	f000 f908 	bl	8012818 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012608:	4b1d      	ldr	r3, [pc, #116]	; (8012680 <pvPortMalloc+0x188>)
 801260a:	681a      	ldr	r2, [r3, #0]
 801260c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801260e:	685b      	ldr	r3, [r3, #4]
 8012610:	1ad3      	subs	r3, r2, r3
 8012612:	4a1b      	ldr	r2, [pc, #108]	; (8012680 <pvPortMalloc+0x188>)
 8012614:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012616:	4b1a      	ldr	r3, [pc, #104]	; (8012680 <pvPortMalloc+0x188>)
 8012618:	681a      	ldr	r2, [r3, #0]
 801261a:	4b1b      	ldr	r3, [pc, #108]	; (8012688 <pvPortMalloc+0x190>)
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	429a      	cmp	r2, r3
 8012620:	d203      	bcs.n	801262a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012622:	4b17      	ldr	r3, [pc, #92]	; (8012680 <pvPortMalloc+0x188>)
 8012624:	681b      	ldr	r3, [r3, #0]
 8012626:	4a18      	ldr	r2, [pc, #96]	; (8012688 <pvPortMalloc+0x190>)
 8012628:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801262a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801262c:	685a      	ldr	r2, [r3, #4]
 801262e:	4b13      	ldr	r3, [pc, #76]	; (801267c <pvPortMalloc+0x184>)
 8012630:	681b      	ldr	r3, [r3, #0]
 8012632:	431a      	orrs	r2, r3
 8012634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012636:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801263a:	2200      	movs	r2, #0
 801263c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801263e:	4b13      	ldr	r3, [pc, #76]	; (801268c <pvPortMalloc+0x194>)
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	3301      	adds	r3, #1
 8012644:	4a11      	ldr	r2, [pc, #68]	; (801268c <pvPortMalloc+0x194>)
 8012646:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012648:	f7fe fa66 	bl	8010b18 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801264c:	69fb      	ldr	r3, [r7, #28]
 801264e:	f003 0307 	and.w	r3, r3, #7
 8012652:	2b00      	cmp	r3, #0
 8012654:	d00a      	beq.n	801266c <pvPortMalloc+0x174>
	__asm volatile
 8012656:	f04f 0350 	mov.w	r3, #80	; 0x50
 801265a:	f383 8811 	msr	BASEPRI, r3
 801265e:	f3bf 8f6f 	isb	sy
 8012662:	f3bf 8f4f 	dsb	sy
 8012666:	60fb      	str	r3, [r7, #12]
}
 8012668:	bf00      	nop
 801266a:	e7fe      	b.n	801266a <pvPortMalloc+0x172>
	return pvReturn;
 801266c:	69fb      	ldr	r3, [r7, #28]
}
 801266e:	4618      	mov	r0, r3
 8012670:	3728      	adds	r7, #40	; 0x28
 8012672:	46bd      	mov	sp, r7
 8012674:	bd80      	pop	{r7, pc}
 8012676:	bf00      	nop
 8012678:	200125e8 	.word	0x200125e8
 801267c:	200125fc 	.word	0x200125fc
 8012680:	200125ec 	.word	0x200125ec
 8012684:	200125e0 	.word	0x200125e0
 8012688:	200125f0 	.word	0x200125f0
 801268c:	200125f4 	.word	0x200125f4

08012690 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012690:	b580      	push	{r7, lr}
 8012692:	b086      	sub	sp, #24
 8012694:	af00      	add	r7, sp, #0
 8012696:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d04d      	beq.n	801273e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80126a2:	2308      	movs	r3, #8
 80126a4:	425b      	negs	r3, r3
 80126a6:	697a      	ldr	r2, [r7, #20]
 80126a8:	4413      	add	r3, r2
 80126aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80126ac:	697b      	ldr	r3, [r7, #20]
 80126ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80126b0:	693b      	ldr	r3, [r7, #16]
 80126b2:	685a      	ldr	r2, [r3, #4]
 80126b4:	4b24      	ldr	r3, [pc, #144]	; (8012748 <vPortFree+0xb8>)
 80126b6:	681b      	ldr	r3, [r3, #0]
 80126b8:	4013      	ands	r3, r2
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d10a      	bne.n	80126d4 <vPortFree+0x44>
	__asm volatile
 80126be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126c2:	f383 8811 	msr	BASEPRI, r3
 80126c6:	f3bf 8f6f 	isb	sy
 80126ca:	f3bf 8f4f 	dsb	sy
 80126ce:	60fb      	str	r3, [r7, #12]
}
 80126d0:	bf00      	nop
 80126d2:	e7fe      	b.n	80126d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80126d4:	693b      	ldr	r3, [r7, #16]
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d00a      	beq.n	80126f2 <vPortFree+0x62>
	__asm volatile
 80126dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126e0:	f383 8811 	msr	BASEPRI, r3
 80126e4:	f3bf 8f6f 	isb	sy
 80126e8:	f3bf 8f4f 	dsb	sy
 80126ec:	60bb      	str	r3, [r7, #8]
}
 80126ee:	bf00      	nop
 80126f0:	e7fe      	b.n	80126f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80126f2:	693b      	ldr	r3, [r7, #16]
 80126f4:	685a      	ldr	r2, [r3, #4]
 80126f6:	4b14      	ldr	r3, [pc, #80]	; (8012748 <vPortFree+0xb8>)
 80126f8:	681b      	ldr	r3, [r3, #0]
 80126fa:	4013      	ands	r3, r2
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d01e      	beq.n	801273e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012700:	693b      	ldr	r3, [r7, #16]
 8012702:	681b      	ldr	r3, [r3, #0]
 8012704:	2b00      	cmp	r3, #0
 8012706:	d11a      	bne.n	801273e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012708:	693b      	ldr	r3, [r7, #16]
 801270a:	685a      	ldr	r2, [r3, #4]
 801270c:	4b0e      	ldr	r3, [pc, #56]	; (8012748 <vPortFree+0xb8>)
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	43db      	mvns	r3, r3
 8012712:	401a      	ands	r2, r3
 8012714:	693b      	ldr	r3, [r7, #16]
 8012716:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012718:	f7fe f9f0 	bl	8010afc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801271c:	693b      	ldr	r3, [r7, #16]
 801271e:	685a      	ldr	r2, [r3, #4]
 8012720:	4b0a      	ldr	r3, [pc, #40]	; (801274c <vPortFree+0xbc>)
 8012722:	681b      	ldr	r3, [r3, #0]
 8012724:	4413      	add	r3, r2
 8012726:	4a09      	ldr	r2, [pc, #36]	; (801274c <vPortFree+0xbc>)
 8012728:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801272a:	6938      	ldr	r0, [r7, #16]
 801272c:	f000 f874 	bl	8012818 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8012730:	4b07      	ldr	r3, [pc, #28]	; (8012750 <vPortFree+0xc0>)
 8012732:	681b      	ldr	r3, [r3, #0]
 8012734:	3301      	adds	r3, #1
 8012736:	4a06      	ldr	r2, [pc, #24]	; (8012750 <vPortFree+0xc0>)
 8012738:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801273a:	f7fe f9ed 	bl	8010b18 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801273e:	bf00      	nop
 8012740:	3718      	adds	r7, #24
 8012742:	46bd      	mov	sp, r7
 8012744:	bd80      	pop	{r7, pc}
 8012746:	bf00      	nop
 8012748:	200125fc 	.word	0x200125fc
 801274c:	200125ec 	.word	0x200125ec
 8012750:	200125f8 	.word	0x200125f8

08012754 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012754:	b480      	push	{r7}
 8012756:	b085      	sub	sp, #20
 8012758:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801275a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801275e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012760:	4b27      	ldr	r3, [pc, #156]	; (8012800 <prvHeapInit+0xac>)
 8012762:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012764:	68fb      	ldr	r3, [r7, #12]
 8012766:	f003 0307 	and.w	r3, r3, #7
 801276a:	2b00      	cmp	r3, #0
 801276c:	d00c      	beq.n	8012788 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801276e:	68fb      	ldr	r3, [r7, #12]
 8012770:	3307      	adds	r3, #7
 8012772:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012774:	68fb      	ldr	r3, [r7, #12]
 8012776:	f023 0307 	bic.w	r3, r3, #7
 801277a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801277c:	68ba      	ldr	r2, [r7, #8]
 801277e:	68fb      	ldr	r3, [r7, #12]
 8012780:	1ad3      	subs	r3, r2, r3
 8012782:	4a1f      	ldr	r2, [pc, #124]	; (8012800 <prvHeapInit+0xac>)
 8012784:	4413      	add	r3, r2
 8012786:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012788:	68fb      	ldr	r3, [r7, #12]
 801278a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801278c:	4a1d      	ldr	r2, [pc, #116]	; (8012804 <prvHeapInit+0xb0>)
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012792:	4b1c      	ldr	r3, [pc, #112]	; (8012804 <prvHeapInit+0xb0>)
 8012794:	2200      	movs	r2, #0
 8012796:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	68ba      	ldr	r2, [r7, #8]
 801279c:	4413      	add	r3, r2
 801279e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80127a0:	2208      	movs	r2, #8
 80127a2:	68fb      	ldr	r3, [r7, #12]
 80127a4:	1a9b      	subs	r3, r3, r2
 80127a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80127a8:	68fb      	ldr	r3, [r7, #12]
 80127aa:	f023 0307 	bic.w	r3, r3, #7
 80127ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80127b0:	68fb      	ldr	r3, [r7, #12]
 80127b2:	4a15      	ldr	r2, [pc, #84]	; (8012808 <prvHeapInit+0xb4>)
 80127b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80127b6:	4b14      	ldr	r3, [pc, #80]	; (8012808 <prvHeapInit+0xb4>)
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	2200      	movs	r2, #0
 80127bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80127be:	4b12      	ldr	r3, [pc, #72]	; (8012808 <prvHeapInit+0xb4>)
 80127c0:	681b      	ldr	r3, [r3, #0]
 80127c2:	2200      	movs	r2, #0
 80127c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80127ca:	683b      	ldr	r3, [r7, #0]
 80127cc:	68fa      	ldr	r2, [r7, #12]
 80127ce:	1ad2      	subs	r2, r2, r3
 80127d0:	683b      	ldr	r3, [r7, #0]
 80127d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80127d4:	4b0c      	ldr	r3, [pc, #48]	; (8012808 <prvHeapInit+0xb4>)
 80127d6:	681a      	ldr	r2, [r3, #0]
 80127d8:	683b      	ldr	r3, [r7, #0]
 80127da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80127dc:	683b      	ldr	r3, [r7, #0]
 80127de:	685b      	ldr	r3, [r3, #4]
 80127e0:	4a0a      	ldr	r2, [pc, #40]	; (801280c <prvHeapInit+0xb8>)
 80127e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80127e4:	683b      	ldr	r3, [r7, #0]
 80127e6:	685b      	ldr	r3, [r3, #4]
 80127e8:	4a09      	ldr	r2, [pc, #36]	; (8012810 <prvHeapInit+0xbc>)
 80127ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80127ec:	4b09      	ldr	r3, [pc, #36]	; (8012814 <prvHeapInit+0xc0>)
 80127ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80127f2:	601a      	str	r2, [r3, #0]
}
 80127f4:	bf00      	nop
 80127f6:	3714      	adds	r7, #20
 80127f8:	46bd      	mov	sp, r7
 80127fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127fe:	4770      	bx	lr
 8012800:	20006290 	.word	0x20006290
 8012804:	200125e0 	.word	0x200125e0
 8012808:	200125e8 	.word	0x200125e8
 801280c:	200125f0 	.word	0x200125f0
 8012810:	200125ec 	.word	0x200125ec
 8012814:	200125fc 	.word	0x200125fc

08012818 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012818:	b480      	push	{r7}
 801281a:	b085      	sub	sp, #20
 801281c:	af00      	add	r7, sp, #0
 801281e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012820:	4b28      	ldr	r3, [pc, #160]	; (80128c4 <prvInsertBlockIntoFreeList+0xac>)
 8012822:	60fb      	str	r3, [r7, #12]
 8012824:	e002      	b.n	801282c <prvInsertBlockIntoFreeList+0x14>
 8012826:	68fb      	ldr	r3, [r7, #12]
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	60fb      	str	r3, [r7, #12]
 801282c:	68fb      	ldr	r3, [r7, #12]
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	687a      	ldr	r2, [r7, #4]
 8012832:	429a      	cmp	r2, r3
 8012834:	d8f7      	bhi.n	8012826 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012836:	68fb      	ldr	r3, [r7, #12]
 8012838:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	685b      	ldr	r3, [r3, #4]
 801283e:	68ba      	ldr	r2, [r7, #8]
 8012840:	4413      	add	r3, r2
 8012842:	687a      	ldr	r2, [r7, #4]
 8012844:	429a      	cmp	r2, r3
 8012846:	d108      	bne.n	801285a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012848:	68fb      	ldr	r3, [r7, #12]
 801284a:	685a      	ldr	r2, [r3, #4]
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	685b      	ldr	r3, [r3, #4]
 8012850:	441a      	add	r2, r3
 8012852:	68fb      	ldr	r3, [r7, #12]
 8012854:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012856:	68fb      	ldr	r3, [r7, #12]
 8012858:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	685b      	ldr	r3, [r3, #4]
 8012862:	68ba      	ldr	r2, [r7, #8]
 8012864:	441a      	add	r2, r3
 8012866:	68fb      	ldr	r3, [r7, #12]
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	429a      	cmp	r2, r3
 801286c:	d118      	bne.n	80128a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801286e:	68fb      	ldr	r3, [r7, #12]
 8012870:	681a      	ldr	r2, [r3, #0]
 8012872:	4b15      	ldr	r3, [pc, #84]	; (80128c8 <prvInsertBlockIntoFreeList+0xb0>)
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	429a      	cmp	r2, r3
 8012878:	d00d      	beq.n	8012896 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	685a      	ldr	r2, [r3, #4]
 801287e:	68fb      	ldr	r3, [r7, #12]
 8012880:	681b      	ldr	r3, [r3, #0]
 8012882:	685b      	ldr	r3, [r3, #4]
 8012884:	441a      	add	r2, r3
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801288a:	68fb      	ldr	r3, [r7, #12]
 801288c:	681b      	ldr	r3, [r3, #0]
 801288e:	681a      	ldr	r2, [r3, #0]
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	601a      	str	r2, [r3, #0]
 8012894:	e008      	b.n	80128a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012896:	4b0c      	ldr	r3, [pc, #48]	; (80128c8 <prvInsertBlockIntoFreeList+0xb0>)
 8012898:	681a      	ldr	r2, [r3, #0]
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	601a      	str	r2, [r3, #0]
 801289e:	e003      	b.n	80128a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80128a0:	68fb      	ldr	r3, [r7, #12]
 80128a2:	681a      	ldr	r2, [r3, #0]
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80128a8:	68fa      	ldr	r2, [r7, #12]
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	429a      	cmp	r2, r3
 80128ae:	d002      	beq.n	80128b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80128b0:	68fb      	ldr	r3, [r7, #12]
 80128b2:	687a      	ldr	r2, [r7, #4]
 80128b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80128b6:	bf00      	nop
 80128b8:	3714      	adds	r7, #20
 80128ba:	46bd      	mov	sp, r7
 80128bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128c0:	4770      	bx	lr
 80128c2:	bf00      	nop
 80128c4:	200125e0 	.word	0x200125e0
 80128c8:	200125e8 	.word	0x200125e8

080128cc <__errno>:
 80128cc:	4b01      	ldr	r3, [pc, #4]	; (80128d4 <__errno+0x8>)
 80128ce:	6818      	ldr	r0, [r3, #0]
 80128d0:	4770      	bx	lr
 80128d2:	bf00      	nop
 80128d4:	200000a4 	.word	0x200000a4

080128d8 <__libc_init_array>:
 80128d8:	b570      	push	{r4, r5, r6, lr}
 80128da:	4d0d      	ldr	r5, [pc, #52]	; (8012910 <__libc_init_array+0x38>)
 80128dc:	4c0d      	ldr	r4, [pc, #52]	; (8012914 <__libc_init_array+0x3c>)
 80128de:	1b64      	subs	r4, r4, r5
 80128e0:	10a4      	asrs	r4, r4, #2
 80128e2:	2600      	movs	r6, #0
 80128e4:	42a6      	cmp	r6, r4
 80128e6:	d109      	bne.n	80128fc <__libc_init_array+0x24>
 80128e8:	4d0b      	ldr	r5, [pc, #44]	; (8012918 <__libc_init_array+0x40>)
 80128ea:	4c0c      	ldr	r4, [pc, #48]	; (801291c <__libc_init_array+0x44>)
 80128ec:	f005 fd2e 	bl	801834c <_init>
 80128f0:	1b64      	subs	r4, r4, r5
 80128f2:	10a4      	asrs	r4, r4, #2
 80128f4:	2600      	movs	r6, #0
 80128f6:	42a6      	cmp	r6, r4
 80128f8:	d105      	bne.n	8012906 <__libc_init_array+0x2e>
 80128fa:	bd70      	pop	{r4, r5, r6, pc}
 80128fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8012900:	4798      	blx	r3
 8012902:	3601      	adds	r6, #1
 8012904:	e7ee      	b.n	80128e4 <__libc_init_array+0xc>
 8012906:	f855 3b04 	ldr.w	r3, [r5], #4
 801290a:	4798      	blx	r3
 801290c:	3601      	adds	r6, #1
 801290e:	e7f2      	b.n	80128f6 <__libc_init_array+0x1e>
 8012910:	08019208 	.word	0x08019208
 8012914:	08019208 	.word	0x08019208
 8012918:	08019208 	.word	0x08019208
 801291c:	0801920c 	.word	0x0801920c

08012920 <memcpy>:
 8012920:	440a      	add	r2, r1
 8012922:	4291      	cmp	r1, r2
 8012924:	f100 33ff 	add.w	r3, r0, #4294967295
 8012928:	d100      	bne.n	801292c <memcpy+0xc>
 801292a:	4770      	bx	lr
 801292c:	b510      	push	{r4, lr}
 801292e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012932:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012936:	4291      	cmp	r1, r2
 8012938:	d1f9      	bne.n	801292e <memcpy+0xe>
 801293a:	bd10      	pop	{r4, pc}

0801293c <memset>:
 801293c:	4402      	add	r2, r0
 801293e:	4603      	mov	r3, r0
 8012940:	4293      	cmp	r3, r2
 8012942:	d100      	bne.n	8012946 <memset+0xa>
 8012944:	4770      	bx	lr
 8012946:	f803 1b01 	strb.w	r1, [r3], #1
 801294a:	e7f9      	b.n	8012940 <memset+0x4>

0801294c <__cvt>:
 801294c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012950:	ec55 4b10 	vmov	r4, r5, d0
 8012954:	2d00      	cmp	r5, #0
 8012956:	460e      	mov	r6, r1
 8012958:	4619      	mov	r1, r3
 801295a:	462b      	mov	r3, r5
 801295c:	bfbb      	ittet	lt
 801295e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8012962:	461d      	movlt	r5, r3
 8012964:	2300      	movge	r3, #0
 8012966:	232d      	movlt	r3, #45	; 0x2d
 8012968:	700b      	strb	r3, [r1, #0]
 801296a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801296c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012970:	4691      	mov	r9, r2
 8012972:	f023 0820 	bic.w	r8, r3, #32
 8012976:	bfbc      	itt	lt
 8012978:	4622      	movlt	r2, r4
 801297a:	4614      	movlt	r4, r2
 801297c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012980:	d005      	beq.n	801298e <__cvt+0x42>
 8012982:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8012986:	d100      	bne.n	801298a <__cvt+0x3e>
 8012988:	3601      	adds	r6, #1
 801298a:	2102      	movs	r1, #2
 801298c:	e000      	b.n	8012990 <__cvt+0x44>
 801298e:	2103      	movs	r1, #3
 8012990:	ab03      	add	r3, sp, #12
 8012992:	9301      	str	r3, [sp, #4]
 8012994:	ab02      	add	r3, sp, #8
 8012996:	9300      	str	r3, [sp, #0]
 8012998:	ec45 4b10 	vmov	d0, r4, r5
 801299c:	4653      	mov	r3, sl
 801299e:	4632      	mov	r2, r6
 80129a0:	f001 fdae 	bl	8014500 <_dtoa_r>
 80129a4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80129a8:	4607      	mov	r7, r0
 80129aa:	d102      	bne.n	80129b2 <__cvt+0x66>
 80129ac:	f019 0f01 	tst.w	r9, #1
 80129b0:	d022      	beq.n	80129f8 <__cvt+0xac>
 80129b2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80129b6:	eb07 0906 	add.w	r9, r7, r6
 80129ba:	d110      	bne.n	80129de <__cvt+0x92>
 80129bc:	783b      	ldrb	r3, [r7, #0]
 80129be:	2b30      	cmp	r3, #48	; 0x30
 80129c0:	d10a      	bne.n	80129d8 <__cvt+0x8c>
 80129c2:	2200      	movs	r2, #0
 80129c4:	2300      	movs	r3, #0
 80129c6:	4620      	mov	r0, r4
 80129c8:	4629      	mov	r1, r5
 80129ca:	f7ee f895 	bl	8000af8 <__aeabi_dcmpeq>
 80129ce:	b918      	cbnz	r0, 80129d8 <__cvt+0x8c>
 80129d0:	f1c6 0601 	rsb	r6, r6, #1
 80129d4:	f8ca 6000 	str.w	r6, [sl]
 80129d8:	f8da 3000 	ldr.w	r3, [sl]
 80129dc:	4499      	add	r9, r3
 80129de:	2200      	movs	r2, #0
 80129e0:	2300      	movs	r3, #0
 80129e2:	4620      	mov	r0, r4
 80129e4:	4629      	mov	r1, r5
 80129e6:	f7ee f887 	bl	8000af8 <__aeabi_dcmpeq>
 80129ea:	b108      	cbz	r0, 80129f0 <__cvt+0xa4>
 80129ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80129f0:	2230      	movs	r2, #48	; 0x30
 80129f2:	9b03      	ldr	r3, [sp, #12]
 80129f4:	454b      	cmp	r3, r9
 80129f6:	d307      	bcc.n	8012a08 <__cvt+0xbc>
 80129f8:	9b03      	ldr	r3, [sp, #12]
 80129fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80129fc:	1bdb      	subs	r3, r3, r7
 80129fe:	4638      	mov	r0, r7
 8012a00:	6013      	str	r3, [r2, #0]
 8012a02:	b004      	add	sp, #16
 8012a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a08:	1c59      	adds	r1, r3, #1
 8012a0a:	9103      	str	r1, [sp, #12]
 8012a0c:	701a      	strb	r2, [r3, #0]
 8012a0e:	e7f0      	b.n	80129f2 <__cvt+0xa6>

08012a10 <__exponent>:
 8012a10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012a12:	4603      	mov	r3, r0
 8012a14:	2900      	cmp	r1, #0
 8012a16:	bfb8      	it	lt
 8012a18:	4249      	neglt	r1, r1
 8012a1a:	f803 2b02 	strb.w	r2, [r3], #2
 8012a1e:	bfb4      	ite	lt
 8012a20:	222d      	movlt	r2, #45	; 0x2d
 8012a22:	222b      	movge	r2, #43	; 0x2b
 8012a24:	2909      	cmp	r1, #9
 8012a26:	7042      	strb	r2, [r0, #1]
 8012a28:	dd2a      	ble.n	8012a80 <__exponent+0x70>
 8012a2a:	f10d 0407 	add.w	r4, sp, #7
 8012a2e:	46a4      	mov	ip, r4
 8012a30:	270a      	movs	r7, #10
 8012a32:	46a6      	mov	lr, r4
 8012a34:	460a      	mov	r2, r1
 8012a36:	fb91 f6f7 	sdiv	r6, r1, r7
 8012a3a:	fb07 1516 	mls	r5, r7, r6, r1
 8012a3e:	3530      	adds	r5, #48	; 0x30
 8012a40:	2a63      	cmp	r2, #99	; 0x63
 8012a42:	f104 34ff 	add.w	r4, r4, #4294967295
 8012a46:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8012a4a:	4631      	mov	r1, r6
 8012a4c:	dcf1      	bgt.n	8012a32 <__exponent+0x22>
 8012a4e:	3130      	adds	r1, #48	; 0x30
 8012a50:	f1ae 0502 	sub.w	r5, lr, #2
 8012a54:	f804 1c01 	strb.w	r1, [r4, #-1]
 8012a58:	1c44      	adds	r4, r0, #1
 8012a5a:	4629      	mov	r1, r5
 8012a5c:	4561      	cmp	r1, ip
 8012a5e:	d30a      	bcc.n	8012a76 <__exponent+0x66>
 8012a60:	f10d 0209 	add.w	r2, sp, #9
 8012a64:	eba2 020e 	sub.w	r2, r2, lr
 8012a68:	4565      	cmp	r5, ip
 8012a6a:	bf88      	it	hi
 8012a6c:	2200      	movhi	r2, #0
 8012a6e:	4413      	add	r3, r2
 8012a70:	1a18      	subs	r0, r3, r0
 8012a72:	b003      	add	sp, #12
 8012a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012a7a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8012a7e:	e7ed      	b.n	8012a5c <__exponent+0x4c>
 8012a80:	2330      	movs	r3, #48	; 0x30
 8012a82:	3130      	adds	r1, #48	; 0x30
 8012a84:	7083      	strb	r3, [r0, #2]
 8012a86:	70c1      	strb	r1, [r0, #3]
 8012a88:	1d03      	adds	r3, r0, #4
 8012a8a:	e7f1      	b.n	8012a70 <__exponent+0x60>

08012a8c <_printf_float>:
 8012a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a90:	ed2d 8b02 	vpush	{d8}
 8012a94:	b08d      	sub	sp, #52	; 0x34
 8012a96:	460c      	mov	r4, r1
 8012a98:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8012a9c:	4616      	mov	r6, r2
 8012a9e:	461f      	mov	r7, r3
 8012aa0:	4605      	mov	r5, r0
 8012aa2:	f002 fe8b 	bl	80157bc <_localeconv_r>
 8012aa6:	f8d0 a000 	ldr.w	sl, [r0]
 8012aaa:	4650      	mov	r0, sl
 8012aac:	f7ed fba8 	bl	8000200 <strlen>
 8012ab0:	2300      	movs	r3, #0
 8012ab2:	930a      	str	r3, [sp, #40]	; 0x28
 8012ab4:	6823      	ldr	r3, [r4, #0]
 8012ab6:	9305      	str	r3, [sp, #20]
 8012ab8:	f8d8 3000 	ldr.w	r3, [r8]
 8012abc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8012ac0:	3307      	adds	r3, #7
 8012ac2:	f023 0307 	bic.w	r3, r3, #7
 8012ac6:	f103 0208 	add.w	r2, r3, #8
 8012aca:	f8c8 2000 	str.w	r2, [r8]
 8012ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ad2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012ad6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8012ada:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012ade:	9307      	str	r3, [sp, #28]
 8012ae0:	f8cd 8018 	str.w	r8, [sp, #24]
 8012ae4:	ee08 0a10 	vmov	s16, r0
 8012ae8:	4b9f      	ldr	r3, [pc, #636]	; (8012d68 <_printf_float+0x2dc>)
 8012aea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012aee:	f04f 32ff 	mov.w	r2, #4294967295
 8012af2:	f7ee f833 	bl	8000b5c <__aeabi_dcmpun>
 8012af6:	bb88      	cbnz	r0, 8012b5c <_printf_float+0xd0>
 8012af8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012afc:	4b9a      	ldr	r3, [pc, #616]	; (8012d68 <_printf_float+0x2dc>)
 8012afe:	f04f 32ff 	mov.w	r2, #4294967295
 8012b02:	f7ee f80d 	bl	8000b20 <__aeabi_dcmple>
 8012b06:	bb48      	cbnz	r0, 8012b5c <_printf_float+0xd0>
 8012b08:	2200      	movs	r2, #0
 8012b0a:	2300      	movs	r3, #0
 8012b0c:	4640      	mov	r0, r8
 8012b0e:	4649      	mov	r1, r9
 8012b10:	f7ed fffc 	bl	8000b0c <__aeabi_dcmplt>
 8012b14:	b110      	cbz	r0, 8012b1c <_printf_float+0x90>
 8012b16:	232d      	movs	r3, #45	; 0x2d
 8012b18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012b1c:	4b93      	ldr	r3, [pc, #588]	; (8012d6c <_printf_float+0x2e0>)
 8012b1e:	4894      	ldr	r0, [pc, #592]	; (8012d70 <_printf_float+0x2e4>)
 8012b20:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8012b24:	bf94      	ite	ls
 8012b26:	4698      	movls	r8, r3
 8012b28:	4680      	movhi	r8, r0
 8012b2a:	2303      	movs	r3, #3
 8012b2c:	6123      	str	r3, [r4, #16]
 8012b2e:	9b05      	ldr	r3, [sp, #20]
 8012b30:	f023 0204 	bic.w	r2, r3, #4
 8012b34:	6022      	str	r2, [r4, #0]
 8012b36:	f04f 0900 	mov.w	r9, #0
 8012b3a:	9700      	str	r7, [sp, #0]
 8012b3c:	4633      	mov	r3, r6
 8012b3e:	aa0b      	add	r2, sp, #44	; 0x2c
 8012b40:	4621      	mov	r1, r4
 8012b42:	4628      	mov	r0, r5
 8012b44:	f000 f9d8 	bl	8012ef8 <_printf_common>
 8012b48:	3001      	adds	r0, #1
 8012b4a:	f040 8090 	bne.w	8012c6e <_printf_float+0x1e2>
 8012b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8012b52:	b00d      	add	sp, #52	; 0x34
 8012b54:	ecbd 8b02 	vpop	{d8}
 8012b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b5c:	4642      	mov	r2, r8
 8012b5e:	464b      	mov	r3, r9
 8012b60:	4640      	mov	r0, r8
 8012b62:	4649      	mov	r1, r9
 8012b64:	f7ed fffa 	bl	8000b5c <__aeabi_dcmpun>
 8012b68:	b140      	cbz	r0, 8012b7c <_printf_float+0xf0>
 8012b6a:	464b      	mov	r3, r9
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	bfbc      	itt	lt
 8012b70:	232d      	movlt	r3, #45	; 0x2d
 8012b72:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8012b76:	487f      	ldr	r0, [pc, #508]	; (8012d74 <_printf_float+0x2e8>)
 8012b78:	4b7f      	ldr	r3, [pc, #508]	; (8012d78 <_printf_float+0x2ec>)
 8012b7a:	e7d1      	b.n	8012b20 <_printf_float+0x94>
 8012b7c:	6863      	ldr	r3, [r4, #4]
 8012b7e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8012b82:	9206      	str	r2, [sp, #24]
 8012b84:	1c5a      	adds	r2, r3, #1
 8012b86:	d13f      	bne.n	8012c08 <_printf_float+0x17c>
 8012b88:	2306      	movs	r3, #6
 8012b8a:	6063      	str	r3, [r4, #4]
 8012b8c:	9b05      	ldr	r3, [sp, #20]
 8012b8e:	6861      	ldr	r1, [r4, #4]
 8012b90:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8012b94:	2300      	movs	r3, #0
 8012b96:	9303      	str	r3, [sp, #12]
 8012b98:	ab0a      	add	r3, sp, #40	; 0x28
 8012b9a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8012b9e:	ab09      	add	r3, sp, #36	; 0x24
 8012ba0:	ec49 8b10 	vmov	d0, r8, r9
 8012ba4:	9300      	str	r3, [sp, #0]
 8012ba6:	6022      	str	r2, [r4, #0]
 8012ba8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012bac:	4628      	mov	r0, r5
 8012bae:	f7ff fecd 	bl	801294c <__cvt>
 8012bb2:	9b06      	ldr	r3, [sp, #24]
 8012bb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012bb6:	2b47      	cmp	r3, #71	; 0x47
 8012bb8:	4680      	mov	r8, r0
 8012bba:	d108      	bne.n	8012bce <_printf_float+0x142>
 8012bbc:	1cc8      	adds	r0, r1, #3
 8012bbe:	db02      	blt.n	8012bc6 <_printf_float+0x13a>
 8012bc0:	6863      	ldr	r3, [r4, #4]
 8012bc2:	4299      	cmp	r1, r3
 8012bc4:	dd41      	ble.n	8012c4a <_printf_float+0x1be>
 8012bc6:	f1ab 0b02 	sub.w	fp, fp, #2
 8012bca:	fa5f fb8b 	uxtb.w	fp, fp
 8012bce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012bd2:	d820      	bhi.n	8012c16 <_printf_float+0x18a>
 8012bd4:	3901      	subs	r1, #1
 8012bd6:	465a      	mov	r2, fp
 8012bd8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012bdc:	9109      	str	r1, [sp, #36]	; 0x24
 8012bde:	f7ff ff17 	bl	8012a10 <__exponent>
 8012be2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012be4:	1813      	adds	r3, r2, r0
 8012be6:	2a01      	cmp	r2, #1
 8012be8:	4681      	mov	r9, r0
 8012bea:	6123      	str	r3, [r4, #16]
 8012bec:	dc02      	bgt.n	8012bf4 <_printf_float+0x168>
 8012bee:	6822      	ldr	r2, [r4, #0]
 8012bf0:	07d2      	lsls	r2, r2, #31
 8012bf2:	d501      	bpl.n	8012bf8 <_printf_float+0x16c>
 8012bf4:	3301      	adds	r3, #1
 8012bf6:	6123      	str	r3, [r4, #16]
 8012bf8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d09c      	beq.n	8012b3a <_printf_float+0xae>
 8012c00:	232d      	movs	r3, #45	; 0x2d
 8012c02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012c06:	e798      	b.n	8012b3a <_printf_float+0xae>
 8012c08:	9a06      	ldr	r2, [sp, #24]
 8012c0a:	2a47      	cmp	r2, #71	; 0x47
 8012c0c:	d1be      	bne.n	8012b8c <_printf_float+0x100>
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d1bc      	bne.n	8012b8c <_printf_float+0x100>
 8012c12:	2301      	movs	r3, #1
 8012c14:	e7b9      	b.n	8012b8a <_printf_float+0xfe>
 8012c16:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8012c1a:	d118      	bne.n	8012c4e <_printf_float+0x1c2>
 8012c1c:	2900      	cmp	r1, #0
 8012c1e:	6863      	ldr	r3, [r4, #4]
 8012c20:	dd0b      	ble.n	8012c3a <_printf_float+0x1ae>
 8012c22:	6121      	str	r1, [r4, #16]
 8012c24:	b913      	cbnz	r3, 8012c2c <_printf_float+0x1a0>
 8012c26:	6822      	ldr	r2, [r4, #0]
 8012c28:	07d0      	lsls	r0, r2, #31
 8012c2a:	d502      	bpl.n	8012c32 <_printf_float+0x1a6>
 8012c2c:	3301      	adds	r3, #1
 8012c2e:	440b      	add	r3, r1
 8012c30:	6123      	str	r3, [r4, #16]
 8012c32:	65a1      	str	r1, [r4, #88]	; 0x58
 8012c34:	f04f 0900 	mov.w	r9, #0
 8012c38:	e7de      	b.n	8012bf8 <_printf_float+0x16c>
 8012c3a:	b913      	cbnz	r3, 8012c42 <_printf_float+0x1b6>
 8012c3c:	6822      	ldr	r2, [r4, #0]
 8012c3e:	07d2      	lsls	r2, r2, #31
 8012c40:	d501      	bpl.n	8012c46 <_printf_float+0x1ba>
 8012c42:	3302      	adds	r3, #2
 8012c44:	e7f4      	b.n	8012c30 <_printf_float+0x1a4>
 8012c46:	2301      	movs	r3, #1
 8012c48:	e7f2      	b.n	8012c30 <_printf_float+0x1a4>
 8012c4a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8012c4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c50:	4299      	cmp	r1, r3
 8012c52:	db05      	blt.n	8012c60 <_printf_float+0x1d4>
 8012c54:	6823      	ldr	r3, [r4, #0]
 8012c56:	6121      	str	r1, [r4, #16]
 8012c58:	07d8      	lsls	r0, r3, #31
 8012c5a:	d5ea      	bpl.n	8012c32 <_printf_float+0x1a6>
 8012c5c:	1c4b      	adds	r3, r1, #1
 8012c5e:	e7e7      	b.n	8012c30 <_printf_float+0x1a4>
 8012c60:	2900      	cmp	r1, #0
 8012c62:	bfd4      	ite	le
 8012c64:	f1c1 0202 	rsble	r2, r1, #2
 8012c68:	2201      	movgt	r2, #1
 8012c6a:	4413      	add	r3, r2
 8012c6c:	e7e0      	b.n	8012c30 <_printf_float+0x1a4>
 8012c6e:	6823      	ldr	r3, [r4, #0]
 8012c70:	055a      	lsls	r2, r3, #21
 8012c72:	d407      	bmi.n	8012c84 <_printf_float+0x1f8>
 8012c74:	6923      	ldr	r3, [r4, #16]
 8012c76:	4642      	mov	r2, r8
 8012c78:	4631      	mov	r1, r6
 8012c7a:	4628      	mov	r0, r5
 8012c7c:	47b8      	blx	r7
 8012c7e:	3001      	adds	r0, #1
 8012c80:	d12c      	bne.n	8012cdc <_printf_float+0x250>
 8012c82:	e764      	b.n	8012b4e <_printf_float+0xc2>
 8012c84:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012c88:	f240 80e0 	bls.w	8012e4c <_printf_float+0x3c0>
 8012c8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012c90:	2200      	movs	r2, #0
 8012c92:	2300      	movs	r3, #0
 8012c94:	f7ed ff30 	bl	8000af8 <__aeabi_dcmpeq>
 8012c98:	2800      	cmp	r0, #0
 8012c9a:	d034      	beq.n	8012d06 <_printf_float+0x27a>
 8012c9c:	4a37      	ldr	r2, [pc, #220]	; (8012d7c <_printf_float+0x2f0>)
 8012c9e:	2301      	movs	r3, #1
 8012ca0:	4631      	mov	r1, r6
 8012ca2:	4628      	mov	r0, r5
 8012ca4:	47b8      	blx	r7
 8012ca6:	3001      	adds	r0, #1
 8012ca8:	f43f af51 	beq.w	8012b4e <_printf_float+0xc2>
 8012cac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012cb0:	429a      	cmp	r2, r3
 8012cb2:	db02      	blt.n	8012cba <_printf_float+0x22e>
 8012cb4:	6823      	ldr	r3, [r4, #0]
 8012cb6:	07d8      	lsls	r0, r3, #31
 8012cb8:	d510      	bpl.n	8012cdc <_printf_float+0x250>
 8012cba:	ee18 3a10 	vmov	r3, s16
 8012cbe:	4652      	mov	r2, sl
 8012cc0:	4631      	mov	r1, r6
 8012cc2:	4628      	mov	r0, r5
 8012cc4:	47b8      	blx	r7
 8012cc6:	3001      	adds	r0, #1
 8012cc8:	f43f af41 	beq.w	8012b4e <_printf_float+0xc2>
 8012ccc:	f04f 0800 	mov.w	r8, #0
 8012cd0:	f104 091a 	add.w	r9, r4, #26
 8012cd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012cd6:	3b01      	subs	r3, #1
 8012cd8:	4543      	cmp	r3, r8
 8012cda:	dc09      	bgt.n	8012cf0 <_printf_float+0x264>
 8012cdc:	6823      	ldr	r3, [r4, #0]
 8012cde:	079b      	lsls	r3, r3, #30
 8012ce0:	f100 8105 	bmi.w	8012eee <_printf_float+0x462>
 8012ce4:	68e0      	ldr	r0, [r4, #12]
 8012ce6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012ce8:	4298      	cmp	r0, r3
 8012cea:	bfb8      	it	lt
 8012cec:	4618      	movlt	r0, r3
 8012cee:	e730      	b.n	8012b52 <_printf_float+0xc6>
 8012cf0:	2301      	movs	r3, #1
 8012cf2:	464a      	mov	r2, r9
 8012cf4:	4631      	mov	r1, r6
 8012cf6:	4628      	mov	r0, r5
 8012cf8:	47b8      	blx	r7
 8012cfa:	3001      	adds	r0, #1
 8012cfc:	f43f af27 	beq.w	8012b4e <_printf_float+0xc2>
 8012d00:	f108 0801 	add.w	r8, r8, #1
 8012d04:	e7e6      	b.n	8012cd4 <_printf_float+0x248>
 8012d06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	dc39      	bgt.n	8012d80 <_printf_float+0x2f4>
 8012d0c:	4a1b      	ldr	r2, [pc, #108]	; (8012d7c <_printf_float+0x2f0>)
 8012d0e:	2301      	movs	r3, #1
 8012d10:	4631      	mov	r1, r6
 8012d12:	4628      	mov	r0, r5
 8012d14:	47b8      	blx	r7
 8012d16:	3001      	adds	r0, #1
 8012d18:	f43f af19 	beq.w	8012b4e <_printf_float+0xc2>
 8012d1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012d20:	4313      	orrs	r3, r2
 8012d22:	d102      	bne.n	8012d2a <_printf_float+0x29e>
 8012d24:	6823      	ldr	r3, [r4, #0]
 8012d26:	07d9      	lsls	r1, r3, #31
 8012d28:	d5d8      	bpl.n	8012cdc <_printf_float+0x250>
 8012d2a:	ee18 3a10 	vmov	r3, s16
 8012d2e:	4652      	mov	r2, sl
 8012d30:	4631      	mov	r1, r6
 8012d32:	4628      	mov	r0, r5
 8012d34:	47b8      	blx	r7
 8012d36:	3001      	adds	r0, #1
 8012d38:	f43f af09 	beq.w	8012b4e <_printf_float+0xc2>
 8012d3c:	f04f 0900 	mov.w	r9, #0
 8012d40:	f104 0a1a 	add.w	sl, r4, #26
 8012d44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d46:	425b      	negs	r3, r3
 8012d48:	454b      	cmp	r3, r9
 8012d4a:	dc01      	bgt.n	8012d50 <_printf_float+0x2c4>
 8012d4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012d4e:	e792      	b.n	8012c76 <_printf_float+0x1ea>
 8012d50:	2301      	movs	r3, #1
 8012d52:	4652      	mov	r2, sl
 8012d54:	4631      	mov	r1, r6
 8012d56:	4628      	mov	r0, r5
 8012d58:	47b8      	blx	r7
 8012d5a:	3001      	adds	r0, #1
 8012d5c:	f43f aef7 	beq.w	8012b4e <_printf_float+0xc2>
 8012d60:	f109 0901 	add.w	r9, r9, #1
 8012d64:	e7ee      	b.n	8012d44 <_printf_float+0x2b8>
 8012d66:	bf00      	nop
 8012d68:	7fefffff 	.word	0x7fefffff
 8012d6c:	08018b84 	.word	0x08018b84
 8012d70:	08018b88 	.word	0x08018b88
 8012d74:	08018b90 	.word	0x08018b90
 8012d78:	08018b8c 	.word	0x08018b8c
 8012d7c:	08018b94 	.word	0x08018b94
 8012d80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012d82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012d84:	429a      	cmp	r2, r3
 8012d86:	bfa8      	it	ge
 8012d88:	461a      	movge	r2, r3
 8012d8a:	2a00      	cmp	r2, #0
 8012d8c:	4691      	mov	r9, r2
 8012d8e:	dc37      	bgt.n	8012e00 <_printf_float+0x374>
 8012d90:	f04f 0b00 	mov.w	fp, #0
 8012d94:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012d98:	f104 021a 	add.w	r2, r4, #26
 8012d9c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012d9e:	9305      	str	r3, [sp, #20]
 8012da0:	eba3 0309 	sub.w	r3, r3, r9
 8012da4:	455b      	cmp	r3, fp
 8012da6:	dc33      	bgt.n	8012e10 <_printf_float+0x384>
 8012da8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012dac:	429a      	cmp	r2, r3
 8012dae:	db3b      	blt.n	8012e28 <_printf_float+0x39c>
 8012db0:	6823      	ldr	r3, [r4, #0]
 8012db2:	07da      	lsls	r2, r3, #31
 8012db4:	d438      	bmi.n	8012e28 <_printf_float+0x39c>
 8012db6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012db8:	9a05      	ldr	r2, [sp, #20]
 8012dba:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012dbc:	1a9a      	subs	r2, r3, r2
 8012dbe:	eba3 0901 	sub.w	r9, r3, r1
 8012dc2:	4591      	cmp	r9, r2
 8012dc4:	bfa8      	it	ge
 8012dc6:	4691      	movge	r9, r2
 8012dc8:	f1b9 0f00 	cmp.w	r9, #0
 8012dcc:	dc35      	bgt.n	8012e3a <_printf_float+0x3ae>
 8012dce:	f04f 0800 	mov.w	r8, #0
 8012dd2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012dd6:	f104 0a1a 	add.w	sl, r4, #26
 8012dda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012dde:	1a9b      	subs	r3, r3, r2
 8012de0:	eba3 0309 	sub.w	r3, r3, r9
 8012de4:	4543      	cmp	r3, r8
 8012de6:	f77f af79 	ble.w	8012cdc <_printf_float+0x250>
 8012dea:	2301      	movs	r3, #1
 8012dec:	4652      	mov	r2, sl
 8012dee:	4631      	mov	r1, r6
 8012df0:	4628      	mov	r0, r5
 8012df2:	47b8      	blx	r7
 8012df4:	3001      	adds	r0, #1
 8012df6:	f43f aeaa 	beq.w	8012b4e <_printf_float+0xc2>
 8012dfa:	f108 0801 	add.w	r8, r8, #1
 8012dfe:	e7ec      	b.n	8012dda <_printf_float+0x34e>
 8012e00:	4613      	mov	r3, r2
 8012e02:	4631      	mov	r1, r6
 8012e04:	4642      	mov	r2, r8
 8012e06:	4628      	mov	r0, r5
 8012e08:	47b8      	blx	r7
 8012e0a:	3001      	adds	r0, #1
 8012e0c:	d1c0      	bne.n	8012d90 <_printf_float+0x304>
 8012e0e:	e69e      	b.n	8012b4e <_printf_float+0xc2>
 8012e10:	2301      	movs	r3, #1
 8012e12:	4631      	mov	r1, r6
 8012e14:	4628      	mov	r0, r5
 8012e16:	9205      	str	r2, [sp, #20]
 8012e18:	47b8      	blx	r7
 8012e1a:	3001      	adds	r0, #1
 8012e1c:	f43f ae97 	beq.w	8012b4e <_printf_float+0xc2>
 8012e20:	9a05      	ldr	r2, [sp, #20]
 8012e22:	f10b 0b01 	add.w	fp, fp, #1
 8012e26:	e7b9      	b.n	8012d9c <_printf_float+0x310>
 8012e28:	ee18 3a10 	vmov	r3, s16
 8012e2c:	4652      	mov	r2, sl
 8012e2e:	4631      	mov	r1, r6
 8012e30:	4628      	mov	r0, r5
 8012e32:	47b8      	blx	r7
 8012e34:	3001      	adds	r0, #1
 8012e36:	d1be      	bne.n	8012db6 <_printf_float+0x32a>
 8012e38:	e689      	b.n	8012b4e <_printf_float+0xc2>
 8012e3a:	9a05      	ldr	r2, [sp, #20]
 8012e3c:	464b      	mov	r3, r9
 8012e3e:	4442      	add	r2, r8
 8012e40:	4631      	mov	r1, r6
 8012e42:	4628      	mov	r0, r5
 8012e44:	47b8      	blx	r7
 8012e46:	3001      	adds	r0, #1
 8012e48:	d1c1      	bne.n	8012dce <_printf_float+0x342>
 8012e4a:	e680      	b.n	8012b4e <_printf_float+0xc2>
 8012e4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012e4e:	2a01      	cmp	r2, #1
 8012e50:	dc01      	bgt.n	8012e56 <_printf_float+0x3ca>
 8012e52:	07db      	lsls	r3, r3, #31
 8012e54:	d538      	bpl.n	8012ec8 <_printf_float+0x43c>
 8012e56:	2301      	movs	r3, #1
 8012e58:	4642      	mov	r2, r8
 8012e5a:	4631      	mov	r1, r6
 8012e5c:	4628      	mov	r0, r5
 8012e5e:	47b8      	blx	r7
 8012e60:	3001      	adds	r0, #1
 8012e62:	f43f ae74 	beq.w	8012b4e <_printf_float+0xc2>
 8012e66:	ee18 3a10 	vmov	r3, s16
 8012e6a:	4652      	mov	r2, sl
 8012e6c:	4631      	mov	r1, r6
 8012e6e:	4628      	mov	r0, r5
 8012e70:	47b8      	blx	r7
 8012e72:	3001      	adds	r0, #1
 8012e74:	f43f ae6b 	beq.w	8012b4e <_printf_float+0xc2>
 8012e78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012e7c:	2200      	movs	r2, #0
 8012e7e:	2300      	movs	r3, #0
 8012e80:	f7ed fe3a 	bl	8000af8 <__aeabi_dcmpeq>
 8012e84:	b9d8      	cbnz	r0, 8012ebe <_printf_float+0x432>
 8012e86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012e88:	f108 0201 	add.w	r2, r8, #1
 8012e8c:	3b01      	subs	r3, #1
 8012e8e:	4631      	mov	r1, r6
 8012e90:	4628      	mov	r0, r5
 8012e92:	47b8      	blx	r7
 8012e94:	3001      	adds	r0, #1
 8012e96:	d10e      	bne.n	8012eb6 <_printf_float+0x42a>
 8012e98:	e659      	b.n	8012b4e <_printf_float+0xc2>
 8012e9a:	2301      	movs	r3, #1
 8012e9c:	4652      	mov	r2, sl
 8012e9e:	4631      	mov	r1, r6
 8012ea0:	4628      	mov	r0, r5
 8012ea2:	47b8      	blx	r7
 8012ea4:	3001      	adds	r0, #1
 8012ea6:	f43f ae52 	beq.w	8012b4e <_printf_float+0xc2>
 8012eaa:	f108 0801 	add.w	r8, r8, #1
 8012eae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012eb0:	3b01      	subs	r3, #1
 8012eb2:	4543      	cmp	r3, r8
 8012eb4:	dcf1      	bgt.n	8012e9a <_printf_float+0x40e>
 8012eb6:	464b      	mov	r3, r9
 8012eb8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012ebc:	e6dc      	b.n	8012c78 <_printf_float+0x1ec>
 8012ebe:	f04f 0800 	mov.w	r8, #0
 8012ec2:	f104 0a1a 	add.w	sl, r4, #26
 8012ec6:	e7f2      	b.n	8012eae <_printf_float+0x422>
 8012ec8:	2301      	movs	r3, #1
 8012eca:	4642      	mov	r2, r8
 8012ecc:	e7df      	b.n	8012e8e <_printf_float+0x402>
 8012ece:	2301      	movs	r3, #1
 8012ed0:	464a      	mov	r2, r9
 8012ed2:	4631      	mov	r1, r6
 8012ed4:	4628      	mov	r0, r5
 8012ed6:	47b8      	blx	r7
 8012ed8:	3001      	adds	r0, #1
 8012eda:	f43f ae38 	beq.w	8012b4e <_printf_float+0xc2>
 8012ede:	f108 0801 	add.w	r8, r8, #1
 8012ee2:	68e3      	ldr	r3, [r4, #12]
 8012ee4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012ee6:	1a5b      	subs	r3, r3, r1
 8012ee8:	4543      	cmp	r3, r8
 8012eea:	dcf0      	bgt.n	8012ece <_printf_float+0x442>
 8012eec:	e6fa      	b.n	8012ce4 <_printf_float+0x258>
 8012eee:	f04f 0800 	mov.w	r8, #0
 8012ef2:	f104 0919 	add.w	r9, r4, #25
 8012ef6:	e7f4      	b.n	8012ee2 <_printf_float+0x456>

08012ef8 <_printf_common>:
 8012ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012efc:	4616      	mov	r6, r2
 8012efe:	4699      	mov	r9, r3
 8012f00:	688a      	ldr	r2, [r1, #8]
 8012f02:	690b      	ldr	r3, [r1, #16]
 8012f04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012f08:	4293      	cmp	r3, r2
 8012f0a:	bfb8      	it	lt
 8012f0c:	4613      	movlt	r3, r2
 8012f0e:	6033      	str	r3, [r6, #0]
 8012f10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012f14:	4607      	mov	r7, r0
 8012f16:	460c      	mov	r4, r1
 8012f18:	b10a      	cbz	r2, 8012f1e <_printf_common+0x26>
 8012f1a:	3301      	adds	r3, #1
 8012f1c:	6033      	str	r3, [r6, #0]
 8012f1e:	6823      	ldr	r3, [r4, #0]
 8012f20:	0699      	lsls	r1, r3, #26
 8012f22:	bf42      	ittt	mi
 8012f24:	6833      	ldrmi	r3, [r6, #0]
 8012f26:	3302      	addmi	r3, #2
 8012f28:	6033      	strmi	r3, [r6, #0]
 8012f2a:	6825      	ldr	r5, [r4, #0]
 8012f2c:	f015 0506 	ands.w	r5, r5, #6
 8012f30:	d106      	bne.n	8012f40 <_printf_common+0x48>
 8012f32:	f104 0a19 	add.w	sl, r4, #25
 8012f36:	68e3      	ldr	r3, [r4, #12]
 8012f38:	6832      	ldr	r2, [r6, #0]
 8012f3a:	1a9b      	subs	r3, r3, r2
 8012f3c:	42ab      	cmp	r3, r5
 8012f3e:	dc26      	bgt.n	8012f8e <_printf_common+0x96>
 8012f40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012f44:	1e13      	subs	r3, r2, #0
 8012f46:	6822      	ldr	r2, [r4, #0]
 8012f48:	bf18      	it	ne
 8012f4a:	2301      	movne	r3, #1
 8012f4c:	0692      	lsls	r2, r2, #26
 8012f4e:	d42b      	bmi.n	8012fa8 <_printf_common+0xb0>
 8012f50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012f54:	4649      	mov	r1, r9
 8012f56:	4638      	mov	r0, r7
 8012f58:	47c0      	blx	r8
 8012f5a:	3001      	adds	r0, #1
 8012f5c:	d01e      	beq.n	8012f9c <_printf_common+0xa4>
 8012f5e:	6823      	ldr	r3, [r4, #0]
 8012f60:	68e5      	ldr	r5, [r4, #12]
 8012f62:	6832      	ldr	r2, [r6, #0]
 8012f64:	f003 0306 	and.w	r3, r3, #6
 8012f68:	2b04      	cmp	r3, #4
 8012f6a:	bf08      	it	eq
 8012f6c:	1aad      	subeq	r5, r5, r2
 8012f6e:	68a3      	ldr	r3, [r4, #8]
 8012f70:	6922      	ldr	r2, [r4, #16]
 8012f72:	bf0c      	ite	eq
 8012f74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012f78:	2500      	movne	r5, #0
 8012f7a:	4293      	cmp	r3, r2
 8012f7c:	bfc4      	itt	gt
 8012f7e:	1a9b      	subgt	r3, r3, r2
 8012f80:	18ed      	addgt	r5, r5, r3
 8012f82:	2600      	movs	r6, #0
 8012f84:	341a      	adds	r4, #26
 8012f86:	42b5      	cmp	r5, r6
 8012f88:	d11a      	bne.n	8012fc0 <_printf_common+0xc8>
 8012f8a:	2000      	movs	r0, #0
 8012f8c:	e008      	b.n	8012fa0 <_printf_common+0xa8>
 8012f8e:	2301      	movs	r3, #1
 8012f90:	4652      	mov	r2, sl
 8012f92:	4649      	mov	r1, r9
 8012f94:	4638      	mov	r0, r7
 8012f96:	47c0      	blx	r8
 8012f98:	3001      	adds	r0, #1
 8012f9a:	d103      	bne.n	8012fa4 <_printf_common+0xac>
 8012f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8012fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012fa4:	3501      	adds	r5, #1
 8012fa6:	e7c6      	b.n	8012f36 <_printf_common+0x3e>
 8012fa8:	18e1      	adds	r1, r4, r3
 8012faa:	1c5a      	adds	r2, r3, #1
 8012fac:	2030      	movs	r0, #48	; 0x30
 8012fae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012fb2:	4422      	add	r2, r4
 8012fb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012fb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012fbc:	3302      	adds	r3, #2
 8012fbe:	e7c7      	b.n	8012f50 <_printf_common+0x58>
 8012fc0:	2301      	movs	r3, #1
 8012fc2:	4622      	mov	r2, r4
 8012fc4:	4649      	mov	r1, r9
 8012fc6:	4638      	mov	r0, r7
 8012fc8:	47c0      	blx	r8
 8012fca:	3001      	adds	r0, #1
 8012fcc:	d0e6      	beq.n	8012f9c <_printf_common+0xa4>
 8012fce:	3601      	adds	r6, #1
 8012fd0:	e7d9      	b.n	8012f86 <_printf_common+0x8e>
	...

08012fd4 <_printf_i>:
 8012fd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012fd8:	7e0f      	ldrb	r7, [r1, #24]
 8012fda:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012fdc:	2f78      	cmp	r7, #120	; 0x78
 8012fde:	4691      	mov	r9, r2
 8012fe0:	4680      	mov	r8, r0
 8012fe2:	460c      	mov	r4, r1
 8012fe4:	469a      	mov	sl, r3
 8012fe6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012fea:	d807      	bhi.n	8012ffc <_printf_i+0x28>
 8012fec:	2f62      	cmp	r7, #98	; 0x62
 8012fee:	d80a      	bhi.n	8013006 <_printf_i+0x32>
 8012ff0:	2f00      	cmp	r7, #0
 8012ff2:	f000 80d8 	beq.w	80131a6 <_printf_i+0x1d2>
 8012ff6:	2f58      	cmp	r7, #88	; 0x58
 8012ff8:	f000 80a3 	beq.w	8013142 <_printf_i+0x16e>
 8012ffc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013000:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013004:	e03a      	b.n	801307c <_printf_i+0xa8>
 8013006:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801300a:	2b15      	cmp	r3, #21
 801300c:	d8f6      	bhi.n	8012ffc <_printf_i+0x28>
 801300e:	a101      	add	r1, pc, #4	; (adr r1, 8013014 <_printf_i+0x40>)
 8013010:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013014:	0801306d 	.word	0x0801306d
 8013018:	08013081 	.word	0x08013081
 801301c:	08012ffd 	.word	0x08012ffd
 8013020:	08012ffd 	.word	0x08012ffd
 8013024:	08012ffd 	.word	0x08012ffd
 8013028:	08012ffd 	.word	0x08012ffd
 801302c:	08013081 	.word	0x08013081
 8013030:	08012ffd 	.word	0x08012ffd
 8013034:	08012ffd 	.word	0x08012ffd
 8013038:	08012ffd 	.word	0x08012ffd
 801303c:	08012ffd 	.word	0x08012ffd
 8013040:	0801318d 	.word	0x0801318d
 8013044:	080130b1 	.word	0x080130b1
 8013048:	0801316f 	.word	0x0801316f
 801304c:	08012ffd 	.word	0x08012ffd
 8013050:	08012ffd 	.word	0x08012ffd
 8013054:	080131af 	.word	0x080131af
 8013058:	08012ffd 	.word	0x08012ffd
 801305c:	080130b1 	.word	0x080130b1
 8013060:	08012ffd 	.word	0x08012ffd
 8013064:	08012ffd 	.word	0x08012ffd
 8013068:	08013177 	.word	0x08013177
 801306c:	682b      	ldr	r3, [r5, #0]
 801306e:	1d1a      	adds	r2, r3, #4
 8013070:	681b      	ldr	r3, [r3, #0]
 8013072:	602a      	str	r2, [r5, #0]
 8013074:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013078:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801307c:	2301      	movs	r3, #1
 801307e:	e0a3      	b.n	80131c8 <_printf_i+0x1f4>
 8013080:	6820      	ldr	r0, [r4, #0]
 8013082:	6829      	ldr	r1, [r5, #0]
 8013084:	0606      	lsls	r6, r0, #24
 8013086:	f101 0304 	add.w	r3, r1, #4
 801308a:	d50a      	bpl.n	80130a2 <_printf_i+0xce>
 801308c:	680e      	ldr	r6, [r1, #0]
 801308e:	602b      	str	r3, [r5, #0]
 8013090:	2e00      	cmp	r6, #0
 8013092:	da03      	bge.n	801309c <_printf_i+0xc8>
 8013094:	232d      	movs	r3, #45	; 0x2d
 8013096:	4276      	negs	r6, r6
 8013098:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801309c:	485e      	ldr	r0, [pc, #376]	; (8013218 <_printf_i+0x244>)
 801309e:	230a      	movs	r3, #10
 80130a0:	e019      	b.n	80130d6 <_printf_i+0x102>
 80130a2:	680e      	ldr	r6, [r1, #0]
 80130a4:	602b      	str	r3, [r5, #0]
 80130a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80130aa:	bf18      	it	ne
 80130ac:	b236      	sxthne	r6, r6
 80130ae:	e7ef      	b.n	8013090 <_printf_i+0xbc>
 80130b0:	682b      	ldr	r3, [r5, #0]
 80130b2:	6820      	ldr	r0, [r4, #0]
 80130b4:	1d19      	adds	r1, r3, #4
 80130b6:	6029      	str	r1, [r5, #0]
 80130b8:	0601      	lsls	r1, r0, #24
 80130ba:	d501      	bpl.n	80130c0 <_printf_i+0xec>
 80130bc:	681e      	ldr	r6, [r3, #0]
 80130be:	e002      	b.n	80130c6 <_printf_i+0xf2>
 80130c0:	0646      	lsls	r6, r0, #25
 80130c2:	d5fb      	bpl.n	80130bc <_printf_i+0xe8>
 80130c4:	881e      	ldrh	r6, [r3, #0]
 80130c6:	4854      	ldr	r0, [pc, #336]	; (8013218 <_printf_i+0x244>)
 80130c8:	2f6f      	cmp	r7, #111	; 0x6f
 80130ca:	bf0c      	ite	eq
 80130cc:	2308      	moveq	r3, #8
 80130ce:	230a      	movne	r3, #10
 80130d0:	2100      	movs	r1, #0
 80130d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80130d6:	6865      	ldr	r5, [r4, #4]
 80130d8:	60a5      	str	r5, [r4, #8]
 80130da:	2d00      	cmp	r5, #0
 80130dc:	bfa2      	ittt	ge
 80130de:	6821      	ldrge	r1, [r4, #0]
 80130e0:	f021 0104 	bicge.w	r1, r1, #4
 80130e4:	6021      	strge	r1, [r4, #0]
 80130e6:	b90e      	cbnz	r6, 80130ec <_printf_i+0x118>
 80130e8:	2d00      	cmp	r5, #0
 80130ea:	d04d      	beq.n	8013188 <_printf_i+0x1b4>
 80130ec:	4615      	mov	r5, r2
 80130ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80130f2:	fb03 6711 	mls	r7, r3, r1, r6
 80130f6:	5dc7      	ldrb	r7, [r0, r7]
 80130f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80130fc:	4637      	mov	r7, r6
 80130fe:	42bb      	cmp	r3, r7
 8013100:	460e      	mov	r6, r1
 8013102:	d9f4      	bls.n	80130ee <_printf_i+0x11a>
 8013104:	2b08      	cmp	r3, #8
 8013106:	d10b      	bne.n	8013120 <_printf_i+0x14c>
 8013108:	6823      	ldr	r3, [r4, #0]
 801310a:	07de      	lsls	r6, r3, #31
 801310c:	d508      	bpl.n	8013120 <_printf_i+0x14c>
 801310e:	6923      	ldr	r3, [r4, #16]
 8013110:	6861      	ldr	r1, [r4, #4]
 8013112:	4299      	cmp	r1, r3
 8013114:	bfde      	ittt	le
 8013116:	2330      	movle	r3, #48	; 0x30
 8013118:	f805 3c01 	strble.w	r3, [r5, #-1]
 801311c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013120:	1b52      	subs	r2, r2, r5
 8013122:	6122      	str	r2, [r4, #16]
 8013124:	f8cd a000 	str.w	sl, [sp]
 8013128:	464b      	mov	r3, r9
 801312a:	aa03      	add	r2, sp, #12
 801312c:	4621      	mov	r1, r4
 801312e:	4640      	mov	r0, r8
 8013130:	f7ff fee2 	bl	8012ef8 <_printf_common>
 8013134:	3001      	adds	r0, #1
 8013136:	d14c      	bne.n	80131d2 <_printf_i+0x1fe>
 8013138:	f04f 30ff 	mov.w	r0, #4294967295
 801313c:	b004      	add	sp, #16
 801313e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013142:	4835      	ldr	r0, [pc, #212]	; (8013218 <_printf_i+0x244>)
 8013144:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8013148:	6829      	ldr	r1, [r5, #0]
 801314a:	6823      	ldr	r3, [r4, #0]
 801314c:	f851 6b04 	ldr.w	r6, [r1], #4
 8013150:	6029      	str	r1, [r5, #0]
 8013152:	061d      	lsls	r5, r3, #24
 8013154:	d514      	bpl.n	8013180 <_printf_i+0x1ac>
 8013156:	07df      	lsls	r7, r3, #31
 8013158:	bf44      	itt	mi
 801315a:	f043 0320 	orrmi.w	r3, r3, #32
 801315e:	6023      	strmi	r3, [r4, #0]
 8013160:	b91e      	cbnz	r6, 801316a <_printf_i+0x196>
 8013162:	6823      	ldr	r3, [r4, #0]
 8013164:	f023 0320 	bic.w	r3, r3, #32
 8013168:	6023      	str	r3, [r4, #0]
 801316a:	2310      	movs	r3, #16
 801316c:	e7b0      	b.n	80130d0 <_printf_i+0xfc>
 801316e:	6823      	ldr	r3, [r4, #0]
 8013170:	f043 0320 	orr.w	r3, r3, #32
 8013174:	6023      	str	r3, [r4, #0]
 8013176:	2378      	movs	r3, #120	; 0x78
 8013178:	4828      	ldr	r0, [pc, #160]	; (801321c <_printf_i+0x248>)
 801317a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801317e:	e7e3      	b.n	8013148 <_printf_i+0x174>
 8013180:	0659      	lsls	r1, r3, #25
 8013182:	bf48      	it	mi
 8013184:	b2b6      	uxthmi	r6, r6
 8013186:	e7e6      	b.n	8013156 <_printf_i+0x182>
 8013188:	4615      	mov	r5, r2
 801318a:	e7bb      	b.n	8013104 <_printf_i+0x130>
 801318c:	682b      	ldr	r3, [r5, #0]
 801318e:	6826      	ldr	r6, [r4, #0]
 8013190:	6961      	ldr	r1, [r4, #20]
 8013192:	1d18      	adds	r0, r3, #4
 8013194:	6028      	str	r0, [r5, #0]
 8013196:	0635      	lsls	r5, r6, #24
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	d501      	bpl.n	80131a0 <_printf_i+0x1cc>
 801319c:	6019      	str	r1, [r3, #0]
 801319e:	e002      	b.n	80131a6 <_printf_i+0x1d2>
 80131a0:	0670      	lsls	r0, r6, #25
 80131a2:	d5fb      	bpl.n	801319c <_printf_i+0x1c8>
 80131a4:	8019      	strh	r1, [r3, #0]
 80131a6:	2300      	movs	r3, #0
 80131a8:	6123      	str	r3, [r4, #16]
 80131aa:	4615      	mov	r5, r2
 80131ac:	e7ba      	b.n	8013124 <_printf_i+0x150>
 80131ae:	682b      	ldr	r3, [r5, #0]
 80131b0:	1d1a      	adds	r2, r3, #4
 80131b2:	602a      	str	r2, [r5, #0]
 80131b4:	681d      	ldr	r5, [r3, #0]
 80131b6:	6862      	ldr	r2, [r4, #4]
 80131b8:	2100      	movs	r1, #0
 80131ba:	4628      	mov	r0, r5
 80131bc:	f7ed f828 	bl	8000210 <memchr>
 80131c0:	b108      	cbz	r0, 80131c6 <_printf_i+0x1f2>
 80131c2:	1b40      	subs	r0, r0, r5
 80131c4:	6060      	str	r0, [r4, #4]
 80131c6:	6863      	ldr	r3, [r4, #4]
 80131c8:	6123      	str	r3, [r4, #16]
 80131ca:	2300      	movs	r3, #0
 80131cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80131d0:	e7a8      	b.n	8013124 <_printf_i+0x150>
 80131d2:	6923      	ldr	r3, [r4, #16]
 80131d4:	462a      	mov	r2, r5
 80131d6:	4649      	mov	r1, r9
 80131d8:	4640      	mov	r0, r8
 80131da:	47d0      	blx	sl
 80131dc:	3001      	adds	r0, #1
 80131de:	d0ab      	beq.n	8013138 <_printf_i+0x164>
 80131e0:	6823      	ldr	r3, [r4, #0]
 80131e2:	079b      	lsls	r3, r3, #30
 80131e4:	d413      	bmi.n	801320e <_printf_i+0x23a>
 80131e6:	68e0      	ldr	r0, [r4, #12]
 80131e8:	9b03      	ldr	r3, [sp, #12]
 80131ea:	4298      	cmp	r0, r3
 80131ec:	bfb8      	it	lt
 80131ee:	4618      	movlt	r0, r3
 80131f0:	e7a4      	b.n	801313c <_printf_i+0x168>
 80131f2:	2301      	movs	r3, #1
 80131f4:	4632      	mov	r2, r6
 80131f6:	4649      	mov	r1, r9
 80131f8:	4640      	mov	r0, r8
 80131fa:	47d0      	blx	sl
 80131fc:	3001      	adds	r0, #1
 80131fe:	d09b      	beq.n	8013138 <_printf_i+0x164>
 8013200:	3501      	adds	r5, #1
 8013202:	68e3      	ldr	r3, [r4, #12]
 8013204:	9903      	ldr	r1, [sp, #12]
 8013206:	1a5b      	subs	r3, r3, r1
 8013208:	42ab      	cmp	r3, r5
 801320a:	dcf2      	bgt.n	80131f2 <_printf_i+0x21e>
 801320c:	e7eb      	b.n	80131e6 <_printf_i+0x212>
 801320e:	2500      	movs	r5, #0
 8013210:	f104 0619 	add.w	r6, r4, #25
 8013214:	e7f5      	b.n	8013202 <_printf_i+0x22e>
 8013216:	bf00      	nop
 8013218:	08018b96 	.word	0x08018b96
 801321c:	08018ba7 	.word	0x08018ba7

08013220 <_scanf_float>:
 8013220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013224:	b087      	sub	sp, #28
 8013226:	4617      	mov	r7, r2
 8013228:	9303      	str	r3, [sp, #12]
 801322a:	688b      	ldr	r3, [r1, #8]
 801322c:	1e5a      	subs	r2, r3, #1
 801322e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8013232:	bf83      	ittte	hi
 8013234:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8013238:	195b      	addhi	r3, r3, r5
 801323a:	9302      	strhi	r3, [sp, #8]
 801323c:	2300      	movls	r3, #0
 801323e:	bf86      	itte	hi
 8013240:	f240 135d 	movwhi	r3, #349	; 0x15d
 8013244:	608b      	strhi	r3, [r1, #8]
 8013246:	9302      	strls	r3, [sp, #8]
 8013248:	680b      	ldr	r3, [r1, #0]
 801324a:	468b      	mov	fp, r1
 801324c:	2500      	movs	r5, #0
 801324e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8013252:	f84b 3b1c 	str.w	r3, [fp], #28
 8013256:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801325a:	4680      	mov	r8, r0
 801325c:	460c      	mov	r4, r1
 801325e:	465e      	mov	r6, fp
 8013260:	46aa      	mov	sl, r5
 8013262:	46a9      	mov	r9, r5
 8013264:	9501      	str	r5, [sp, #4]
 8013266:	68a2      	ldr	r2, [r4, #8]
 8013268:	b152      	cbz	r2, 8013280 <_scanf_float+0x60>
 801326a:	683b      	ldr	r3, [r7, #0]
 801326c:	781b      	ldrb	r3, [r3, #0]
 801326e:	2b4e      	cmp	r3, #78	; 0x4e
 8013270:	d864      	bhi.n	801333c <_scanf_float+0x11c>
 8013272:	2b40      	cmp	r3, #64	; 0x40
 8013274:	d83c      	bhi.n	80132f0 <_scanf_float+0xd0>
 8013276:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801327a:	b2c8      	uxtb	r0, r1
 801327c:	280e      	cmp	r0, #14
 801327e:	d93a      	bls.n	80132f6 <_scanf_float+0xd6>
 8013280:	f1b9 0f00 	cmp.w	r9, #0
 8013284:	d003      	beq.n	801328e <_scanf_float+0x6e>
 8013286:	6823      	ldr	r3, [r4, #0]
 8013288:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801328c:	6023      	str	r3, [r4, #0]
 801328e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013292:	f1ba 0f01 	cmp.w	sl, #1
 8013296:	f200 8113 	bhi.w	80134c0 <_scanf_float+0x2a0>
 801329a:	455e      	cmp	r6, fp
 801329c:	f200 8105 	bhi.w	80134aa <_scanf_float+0x28a>
 80132a0:	2501      	movs	r5, #1
 80132a2:	4628      	mov	r0, r5
 80132a4:	b007      	add	sp, #28
 80132a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132aa:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80132ae:	2a0d      	cmp	r2, #13
 80132b0:	d8e6      	bhi.n	8013280 <_scanf_float+0x60>
 80132b2:	a101      	add	r1, pc, #4	; (adr r1, 80132b8 <_scanf_float+0x98>)
 80132b4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80132b8:	080133f7 	.word	0x080133f7
 80132bc:	08013281 	.word	0x08013281
 80132c0:	08013281 	.word	0x08013281
 80132c4:	08013281 	.word	0x08013281
 80132c8:	08013457 	.word	0x08013457
 80132cc:	0801342f 	.word	0x0801342f
 80132d0:	08013281 	.word	0x08013281
 80132d4:	08013281 	.word	0x08013281
 80132d8:	08013405 	.word	0x08013405
 80132dc:	08013281 	.word	0x08013281
 80132e0:	08013281 	.word	0x08013281
 80132e4:	08013281 	.word	0x08013281
 80132e8:	08013281 	.word	0x08013281
 80132ec:	080133bd 	.word	0x080133bd
 80132f0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80132f4:	e7db      	b.n	80132ae <_scanf_float+0x8e>
 80132f6:	290e      	cmp	r1, #14
 80132f8:	d8c2      	bhi.n	8013280 <_scanf_float+0x60>
 80132fa:	a001      	add	r0, pc, #4	; (adr r0, 8013300 <_scanf_float+0xe0>)
 80132fc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8013300:	080133af 	.word	0x080133af
 8013304:	08013281 	.word	0x08013281
 8013308:	080133af 	.word	0x080133af
 801330c:	08013443 	.word	0x08013443
 8013310:	08013281 	.word	0x08013281
 8013314:	0801335d 	.word	0x0801335d
 8013318:	08013399 	.word	0x08013399
 801331c:	08013399 	.word	0x08013399
 8013320:	08013399 	.word	0x08013399
 8013324:	08013399 	.word	0x08013399
 8013328:	08013399 	.word	0x08013399
 801332c:	08013399 	.word	0x08013399
 8013330:	08013399 	.word	0x08013399
 8013334:	08013399 	.word	0x08013399
 8013338:	08013399 	.word	0x08013399
 801333c:	2b6e      	cmp	r3, #110	; 0x6e
 801333e:	d809      	bhi.n	8013354 <_scanf_float+0x134>
 8013340:	2b60      	cmp	r3, #96	; 0x60
 8013342:	d8b2      	bhi.n	80132aa <_scanf_float+0x8a>
 8013344:	2b54      	cmp	r3, #84	; 0x54
 8013346:	d077      	beq.n	8013438 <_scanf_float+0x218>
 8013348:	2b59      	cmp	r3, #89	; 0x59
 801334a:	d199      	bne.n	8013280 <_scanf_float+0x60>
 801334c:	2d07      	cmp	r5, #7
 801334e:	d197      	bne.n	8013280 <_scanf_float+0x60>
 8013350:	2508      	movs	r5, #8
 8013352:	e029      	b.n	80133a8 <_scanf_float+0x188>
 8013354:	2b74      	cmp	r3, #116	; 0x74
 8013356:	d06f      	beq.n	8013438 <_scanf_float+0x218>
 8013358:	2b79      	cmp	r3, #121	; 0x79
 801335a:	e7f6      	b.n	801334a <_scanf_float+0x12a>
 801335c:	6821      	ldr	r1, [r4, #0]
 801335e:	05c8      	lsls	r0, r1, #23
 8013360:	d51a      	bpl.n	8013398 <_scanf_float+0x178>
 8013362:	9b02      	ldr	r3, [sp, #8]
 8013364:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8013368:	6021      	str	r1, [r4, #0]
 801336a:	f109 0901 	add.w	r9, r9, #1
 801336e:	b11b      	cbz	r3, 8013378 <_scanf_float+0x158>
 8013370:	3b01      	subs	r3, #1
 8013372:	3201      	adds	r2, #1
 8013374:	9302      	str	r3, [sp, #8]
 8013376:	60a2      	str	r2, [r4, #8]
 8013378:	68a3      	ldr	r3, [r4, #8]
 801337a:	3b01      	subs	r3, #1
 801337c:	60a3      	str	r3, [r4, #8]
 801337e:	6923      	ldr	r3, [r4, #16]
 8013380:	3301      	adds	r3, #1
 8013382:	6123      	str	r3, [r4, #16]
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	3b01      	subs	r3, #1
 8013388:	2b00      	cmp	r3, #0
 801338a:	607b      	str	r3, [r7, #4]
 801338c:	f340 8084 	ble.w	8013498 <_scanf_float+0x278>
 8013390:	683b      	ldr	r3, [r7, #0]
 8013392:	3301      	adds	r3, #1
 8013394:	603b      	str	r3, [r7, #0]
 8013396:	e766      	b.n	8013266 <_scanf_float+0x46>
 8013398:	eb1a 0f05 	cmn.w	sl, r5
 801339c:	f47f af70 	bne.w	8013280 <_scanf_float+0x60>
 80133a0:	6822      	ldr	r2, [r4, #0]
 80133a2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80133a6:	6022      	str	r2, [r4, #0]
 80133a8:	f806 3b01 	strb.w	r3, [r6], #1
 80133ac:	e7e4      	b.n	8013378 <_scanf_float+0x158>
 80133ae:	6822      	ldr	r2, [r4, #0]
 80133b0:	0610      	lsls	r0, r2, #24
 80133b2:	f57f af65 	bpl.w	8013280 <_scanf_float+0x60>
 80133b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80133ba:	e7f4      	b.n	80133a6 <_scanf_float+0x186>
 80133bc:	f1ba 0f00 	cmp.w	sl, #0
 80133c0:	d10e      	bne.n	80133e0 <_scanf_float+0x1c0>
 80133c2:	f1b9 0f00 	cmp.w	r9, #0
 80133c6:	d10e      	bne.n	80133e6 <_scanf_float+0x1c6>
 80133c8:	6822      	ldr	r2, [r4, #0]
 80133ca:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80133ce:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80133d2:	d108      	bne.n	80133e6 <_scanf_float+0x1c6>
 80133d4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80133d8:	6022      	str	r2, [r4, #0]
 80133da:	f04f 0a01 	mov.w	sl, #1
 80133de:	e7e3      	b.n	80133a8 <_scanf_float+0x188>
 80133e0:	f1ba 0f02 	cmp.w	sl, #2
 80133e4:	d055      	beq.n	8013492 <_scanf_float+0x272>
 80133e6:	2d01      	cmp	r5, #1
 80133e8:	d002      	beq.n	80133f0 <_scanf_float+0x1d0>
 80133ea:	2d04      	cmp	r5, #4
 80133ec:	f47f af48 	bne.w	8013280 <_scanf_float+0x60>
 80133f0:	3501      	adds	r5, #1
 80133f2:	b2ed      	uxtb	r5, r5
 80133f4:	e7d8      	b.n	80133a8 <_scanf_float+0x188>
 80133f6:	f1ba 0f01 	cmp.w	sl, #1
 80133fa:	f47f af41 	bne.w	8013280 <_scanf_float+0x60>
 80133fe:	f04f 0a02 	mov.w	sl, #2
 8013402:	e7d1      	b.n	80133a8 <_scanf_float+0x188>
 8013404:	b97d      	cbnz	r5, 8013426 <_scanf_float+0x206>
 8013406:	f1b9 0f00 	cmp.w	r9, #0
 801340a:	f47f af3c 	bne.w	8013286 <_scanf_float+0x66>
 801340e:	6822      	ldr	r2, [r4, #0]
 8013410:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8013414:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8013418:	f47f af39 	bne.w	801328e <_scanf_float+0x6e>
 801341c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013420:	6022      	str	r2, [r4, #0]
 8013422:	2501      	movs	r5, #1
 8013424:	e7c0      	b.n	80133a8 <_scanf_float+0x188>
 8013426:	2d03      	cmp	r5, #3
 8013428:	d0e2      	beq.n	80133f0 <_scanf_float+0x1d0>
 801342a:	2d05      	cmp	r5, #5
 801342c:	e7de      	b.n	80133ec <_scanf_float+0x1cc>
 801342e:	2d02      	cmp	r5, #2
 8013430:	f47f af26 	bne.w	8013280 <_scanf_float+0x60>
 8013434:	2503      	movs	r5, #3
 8013436:	e7b7      	b.n	80133a8 <_scanf_float+0x188>
 8013438:	2d06      	cmp	r5, #6
 801343a:	f47f af21 	bne.w	8013280 <_scanf_float+0x60>
 801343e:	2507      	movs	r5, #7
 8013440:	e7b2      	b.n	80133a8 <_scanf_float+0x188>
 8013442:	6822      	ldr	r2, [r4, #0]
 8013444:	0591      	lsls	r1, r2, #22
 8013446:	f57f af1b 	bpl.w	8013280 <_scanf_float+0x60>
 801344a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801344e:	6022      	str	r2, [r4, #0]
 8013450:	f8cd 9004 	str.w	r9, [sp, #4]
 8013454:	e7a8      	b.n	80133a8 <_scanf_float+0x188>
 8013456:	6822      	ldr	r2, [r4, #0]
 8013458:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801345c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8013460:	d006      	beq.n	8013470 <_scanf_float+0x250>
 8013462:	0550      	lsls	r0, r2, #21
 8013464:	f57f af0c 	bpl.w	8013280 <_scanf_float+0x60>
 8013468:	f1b9 0f00 	cmp.w	r9, #0
 801346c:	f43f af0f 	beq.w	801328e <_scanf_float+0x6e>
 8013470:	0591      	lsls	r1, r2, #22
 8013472:	bf58      	it	pl
 8013474:	9901      	ldrpl	r1, [sp, #4]
 8013476:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801347a:	bf58      	it	pl
 801347c:	eba9 0101 	subpl.w	r1, r9, r1
 8013480:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8013484:	bf58      	it	pl
 8013486:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801348a:	6022      	str	r2, [r4, #0]
 801348c:	f04f 0900 	mov.w	r9, #0
 8013490:	e78a      	b.n	80133a8 <_scanf_float+0x188>
 8013492:	f04f 0a03 	mov.w	sl, #3
 8013496:	e787      	b.n	80133a8 <_scanf_float+0x188>
 8013498:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801349c:	4639      	mov	r1, r7
 801349e:	4640      	mov	r0, r8
 80134a0:	4798      	blx	r3
 80134a2:	2800      	cmp	r0, #0
 80134a4:	f43f aedf 	beq.w	8013266 <_scanf_float+0x46>
 80134a8:	e6ea      	b.n	8013280 <_scanf_float+0x60>
 80134aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80134ae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80134b2:	463a      	mov	r2, r7
 80134b4:	4640      	mov	r0, r8
 80134b6:	4798      	blx	r3
 80134b8:	6923      	ldr	r3, [r4, #16]
 80134ba:	3b01      	subs	r3, #1
 80134bc:	6123      	str	r3, [r4, #16]
 80134be:	e6ec      	b.n	801329a <_scanf_float+0x7a>
 80134c0:	1e6b      	subs	r3, r5, #1
 80134c2:	2b06      	cmp	r3, #6
 80134c4:	d825      	bhi.n	8013512 <_scanf_float+0x2f2>
 80134c6:	2d02      	cmp	r5, #2
 80134c8:	d836      	bhi.n	8013538 <_scanf_float+0x318>
 80134ca:	455e      	cmp	r6, fp
 80134cc:	f67f aee8 	bls.w	80132a0 <_scanf_float+0x80>
 80134d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80134d4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80134d8:	463a      	mov	r2, r7
 80134da:	4640      	mov	r0, r8
 80134dc:	4798      	blx	r3
 80134de:	6923      	ldr	r3, [r4, #16]
 80134e0:	3b01      	subs	r3, #1
 80134e2:	6123      	str	r3, [r4, #16]
 80134e4:	e7f1      	b.n	80134ca <_scanf_float+0x2aa>
 80134e6:	9802      	ldr	r0, [sp, #8]
 80134e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80134ec:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80134f0:	9002      	str	r0, [sp, #8]
 80134f2:	463a      	mov	r2, r7
 80134f4:	4640      	mov	r0, r8
 80134f6:	4798      	blx	r3
 80134f8:	6923      	ldr	r3, [r4, #16]
 80134fa:	3b01      	subs	r3, #1
 80134fc:	6123      	str	r3, [r4, #16]
 80134fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013502:	fa5f fa8a 	uxtb.w	sl, sl
 8013506:	f1ba 0f02 	cmp.w	sl, #2
 801350a:	d1ec      	bne.n	80134e6 <_scanf_float+0x2c6>
 801350c:	3d03      	subs	r5, #3
 801350e:	b2ed      	uxtb	r5, r5
 8013510:	1b76      	subs	r6, r6, r5
 8013512:	6823      	ldr	r3, [r4, #0]
 8013514:	05da      	lsls	r2, r3, #23
 8013516:	d52f      	bpl.n	8013578 <_scanf_float+0x358>
 8013518:	055b      	lsls	r3, r3, #21
 801351a:	d510      	bpl.n	801353e <_scanf_float+0x31e>
 801351c:	455e      	cmp	r6, fp
 801351e:	f67f aebf 	bls.w	80132a0 <_scanf_float+0x80>
 8013522:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013526:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801352a:	463a      	mov	r2, r7
 801352c:	4640      	mov	r0, r8
 801352e:	4798      	blx	r3
 8013530:	6923      	ldr	r3, [r4, #16]
 8013532:	3b01      	subs	r3, #1
 8013534:	6123      	str	r3, [r4, #16]
 8013536:	e7f1      	b.n	801351c <_scanf_float+0x2fc>
 8013538:	46aa      	mov	sl, r5
 801353a:	9602      	str	r6, [sp, #8]
 801353c:	e7df      	b.n	80134fe <_scanf_float+0x2de>
 801353e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8013542:	6923      	ldr	r3, [r4, #16]
 8013544:	2965      	cmp	r1, #101	; 0x65
 8013546:	f103 33ff 	add.w	r3, r3, #4294967295
 801354a:	f106 35ff 	add.w	r5, r6, #4294967295
 801354e:	6123      	str	r3, [r4, #16]
 8013550:	d00c      	beq.n	801356c <_scanf_float+0x34c>
 8013552:	2945      	cmp	r1, #69	; 0x45
 8013554:	d00a      	beq.n	801356c <_scanf_float+0x34c>
 8013556:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801355a:	463a      	mov	r2, r7
 801355c:	4640      	mov	r0, r8
 801355e:	4798      	blx	r3
 8013560:	6923      	ldr	r3, [r4, #16]
 8013562:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8013566:	3b01      	subs	r3, #1
 8013568:	1eb5      	subs	r5, r6, #2
 801356a:	6123      	str	r3, [r4, #16]
 801356c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013570:	463a      	mov	r2, r7
 8013572:	4640      	mov	r0, r8
 8013574:	4798      	blx	r3
 8013576:	462e      	mov	r6, r5
 8013578:	6825      	ldr	r5, [r4, #0]
 801357a:	f015 0510 	ands.w	r5, r5, #16
 801357e:	d159      	bne.n	8013634 <_scanf_float+0x414>
 8013580:	7035      	strb	r5, [r6, #0]
 8013582:	6823      	ldr	r3, [r4, #0]
 8013584:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8013588:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801358c:	d11b      	bne.n	80135c6 <_scanf_float+0x3a6>
 801358e:	9b01      	ldr	r3, [sp, #4]
 8013590:	454b      	cmp	r3, r9
 8013592:	eba3 0209 	sub.w	r2, r3, r9
 8013596:	d123      	bne.n	80135e0 <_scanf_float+0x3c0>
 8013598:	2200      	movs	r2, #0
 801359a:	4659      	mov	r1, fp
 801359c:	4640      	mov	r0, r8
 801359e:	f000 fe99 	bl	80142d4 <_strtod_r>
 80135a2:	6822      	ldr	r2, [r4, #0]
 80135a4:	9b03      	ldr	r3, [sp, #12]
 80135a6:	f012 0f02 	tst.w	r2, #2
 80135aa:	ec57 6b10 	vmov	r6, r7, d0
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	d021      	beq.n	80135f6 <_scanf_float+0x3d6>
 80135b2:	9903      	ldr	r1, [sp, #12]
 80135b4:	1d1a      	adds	r2, r3, #4
 80135b6:	600a      	str	r2, [r1, #0]
 80135b8:	681b      	ldr	r3, [r3, #0]
 80135ba:	e9c3 6700 	strd	r6, r7, [r3]
 80135be:	68e3      	ldr	r3, [r4, #12]
 80135c0:	3301      	adds	r3, #1
 80135c2:	60e3      	str	r3, [r4, #12]
 80135c4:	e66d      	b.n	80132a2 <_scanf_float+0x82>
 80135c6:	9b04      	ldr	r3, [sp, #16]
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d0e5      	beq.n	8013598 <_scanf_float+0x378>
 80135cc:	9905      	ldr	r1, [sp, #20]
 80135ce:	230a      	movs	r3, #10
 80135d0:	462a      	mov	r2, r5
 80135d2:	3101      	adds	r1, #1
 80135d4:	4640      	mov	r0, r8
 80135d6:	f000 ff05 	bl	80143e4 <_strtol_r>
 80135da:	9b04      	ldr	r3, [sp, #16]
 80135dc:	9e05      	ldr	r6, [sp, #20]
 80135de:	1ac2      	subs	r2, r0, r3
 80135e0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80135e4:	429e      	cmp	r6, r3
 80135e6:	bf28      	it	cs
 80135e8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80135ec:	4912      	ldr	r1, [pc, #72]	; (8013638 <_scanf_float+0x418>)
 80135ee:	4630      	mov	r0, r6
 80135f0:	f000 f82c 	bl	801364c <siprintf>
 80135f4:	e7d0      	b.n	8013598 <_scanf_float+0x378>
 80135f6:	9903      	ldr	r1, [sp, #12]
 80135f8:	f012 0f04 	tst.w	r2, #4
 80135fc:	f103 0204 	add.w	r2, r3, #4
 8013600:	600a      	str	r2, [r1, #0]
 8013602:	d1d9      	bne.n	80135b8 <_scanf_float+0x398>
 8013604:	f8d3 8000 	ldr.w	r8, [r3]
 8013608:	ee10 2a10 	vmov	r2, s0
 801360c:	ee10 0a10 	vmov	r0, s0
 8013610:	463b      	mov	r3, r7
 8013612:	4639      	mov	r1, r7
 8013614:	f7ed faa2 	bl	8000b5c <__aeabi_dcmpun>
 8013618:	b128      	cbz	r0, 8013626 <_scanf_float+0x406>
 801361a:	4808      	ldr	r0, [pc, #32]	; (801363c <_scanf_float+0x41c>)
 801361c:	f000 f810 	bl	8013640 <nanf>
 8013620:	ed88 0a00 	vstr	s0, [r8]
 8013624:	e7cb      	b.n	80135be <_scanf_float+0x39e>
 8013626:	4630      	mov	r0, r6
 8013628:	4639      	mov	r1, r7
 801362a:	f7ed faf5 	bl	8000c18 <__aeabi_d2f>
 801362e:	f8c8 0000 	str.w	r0, [r8]
 8013632:	e7c4      	b.n	80135be <_scanf_float+0x39e>
 8013634:	2500      	movs	r5, #0
 8013636:	e634      	b.n	80132a2 <_scanf_float+0x82>
 8013638:	08018bb8 	.word	0x08018bb8
 801363c:	08018fc0 	.word	0x08018fc0

08013640 <nanf>:
 8013640:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013648 <nanf+0x8>
 8013644:	4770      	bx	lr
 8013646:	bf00      	nop
 8013648:	7fc00000 	.word	0x7fc00000

0801364c <siprintf>:
 801364c:	b40e      	push	{r1, r2, r3}
 801364e:	b500      	push	{lr}
 8013650:	b09c      	sub	sp, #112	; 0x70
 8013652:	ab1d      	add	r3, sp, #116	; 0x74
 8013654:	9002      	str	r0, [sp, #8]
 8013656:	9006      	str	r0, [sp, #24]
 8013658:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801365c:	4809      	ldr	r0, [pc, #36]	; (8013684 <siprintf+0x38>)
 801365e:	9107      	str	r1, [sp, #28]
 8013660:	9104      	str	r1, [sp, #16]
 8013662:	4909      	ldr	r1, [pc, #36]	; (8013688 <siprintf+0x3c>)
 8013664:	f853 2b04 	ldr.w	r2, [r3], #4
 8013668:	9105      	str	r1, [sp, #20]
 801366a:	6800      	ldr	r0, [r0, #0]
 801366c:	9301      	str	r3, [sp, #4]
 801366e:	a902      	add	r1, sp, #8
 8013670:	f002 fed6 	bl	8016420 <_svfiprintf_r>
 8013674:	9b02      	ldr	r3, [sp, #8]
 8013676:	2200      	movs	r2, #0
 8013678:	701a      	strb	r2, [r3, #0]
 801367a:	b01c      	add	sp, #112	; 0x70
 801367c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013680:	b003      	add	sp, #12
 8013682:	4770      	bx	lr
 8013684:	200000a4 	.word	0x200000a4
 8013688:	ffff0208 	.word	0xffff0208

0801368c <sulp>:
 801368c:	b570      	push	{r4, r5, r6, lr}
 801368e:	4604      	mov	r4, r0
 8013690:	460d      	mov	r5, r1
 8013692:	ec45 4b10 	vmov	d0, r4, r5
 8013696:	4616      	mov	r6, r2
 8013698:	f002 fc20 	bl	8015edc <__ulp>
 801369c:	ec51 0b10 	vmov	r0, r1, d0
 80136a0:	b17e      	cbz	r6, 80136c2 <sulp+0x36>
 80136a2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80136a6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	dd09      	ble.n	80136c2 <sulp+0x36>
 80136ae:	051b      	lsls	r3, r3, #20
 80136b0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80136b4:	2400      	movs	r4, #0
 80136b6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80136ba:	4622      	mov	r2, r4
 80136bc:	462b      	mov	r3, r5
 80136be:	f7ec ffb3 	bl	8000628 <__aeabi_dmul>
 80136c2:	bd70      	pop	{r4, r5, r6, pc}
 80136c4:	0000      	movs	r0, r0
	...

080136c8 <_strtod_l>:
 80136c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136cc:	ed2d 8b02 	vpush	{d8}
 80136d0:	b09d      	sub	sp, #116	; 0x74
 80136d2:	461f      	mov	r7, r3
 80136d4:	2300      	movs	r3, #0
 80136d6:	9318      	str	r3, [sp, #96]	; 0x60
 80136d8:	4ba2      	ldr	r3, [pc, #648]	; (8013964 <_strtod_l+0x29c>)
 80136da:	9213      	str	r2, [sp, #76]	; 0x4c
 80136dc:	681b      	ldr	r3, [r3, #0]
 80136de:	9305      	str	r3, [sp, #20]
 80136e0:	4604      	mov	r4, r0
 80136e2:	4618      	mov	r0, r3
 80136e4:	4688      	mov	r8, r1
 80136e6:	f7ec fd8b 	bl	8000200 <strlen>
 80136ea:	f04f 0a00 	mov.w	sl, #0
 80136ee:	4605      	mov	r5, r0
 80136f0:	f04f 0b00 	mov.w	fp, #0
 80136f4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80136f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80136fa:	781a      	ldrb	r2, [r3, #0]
 80136fc:	2a2b      	cmp	r2, #43	; 0x2b
 80136fe:	d04e      	beq.n	801379e <_strtod_l+0xd6>
 8013700:	d83b      	bhi.n	801377a <_strtod_l+0xb2>
 8013702:	2a0d      	cmp	r2, #13
 8013704:	d834      	bhi.n	8013770 <_strtod_l+0xa8>
 8013706:	2a08      	cmp	r2, #8
 8013708:	d834      	bhi.n	8013774 <_strtod_l+0xac>
 801370a:	2a00      	cmp	r2, #0
 801370c:	d03e      	beq.n	801378c <_strtod_l+0xc4>
 801370e:	2300      	movs	r3, #0
 8013710:	930a      	str	r3, [sp, #40]	; 0x28
 8013712:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8013714:	7833      	ldrb	r3, [r6, #0]
 8013716:	2b30      	cmp	r3, #48	; 0x30
 8013718:	f040 80b0 	bne.w	801387c <_strtod_l+0x1b4>
 801371c:	7873      	ldrb	r3, [r6, #1]
 801371e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013722:	2b58      	cmp	r3, #88	; 0x58
 8013724:	d168      	bne.n	80137f8 <_strtod_l+0x130>
 8013726:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013728:	9301      	str	r3, [sp, #4]
 801372a:	ab18      	add	r3, sp, #96	; 0x60
 801372c:	9702      	str	r7, [sp, #8]
 801372e:	9300      	str	r3, [sp, #0]
 8013730:	4a8d      	ldr	r2, [pc, #564]	; (8013968 <_strtod_l+0x2a0>)
 8013732:	ab19      	add	r3, sp, #100	; 0x64
 8013734:	a917      	add	r1, sp, #92	; 0x5c
 8013736:	4620      	mov	r0, r4
 8013738:	f001 fd38 	bl	80151ac <__gethex>
 801373c:	f010 0707 	ands.w	r7, r0, #7
 8013740:	4605      	mov	r5, r0
 8013742:	d005      	beq.n	8013750 <_strtod_l+0x88>
 8013744:	2f06      	cmp	r7, #6
 8013746:	d12c      	bne.n	80137a2 <_strtod_l+0xda>
 8013748:	3601      	adds	r6, #1
 801374a:	2300      	movs	r3, #0
 801374c:	9617      	str	r6, [sp, #92]	; 0x5c
 801374e:	930a      	str	r3, [sp, #40]	; 0x28
 8013750:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013752:	2b00      	cmp	r3, #0
 8013754:	f040 8590 	bne.w	8014278 <_strtod_l+0xbb0>
 8013758:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801375a:	b1eb      	cbz	r3, 8013798 <_strtod_l+0xd0>
 801375c:	4652      	mov	r2, sl
 801375e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8013762:	ec43 2b10 	vmov	d0, r2, r3
 8013766:	b01d      	add	sp, #116	; 0x74
 8013768:	ecbd 8b02 	vpop	{d8}
 801376c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013770:	2a20      	cmp	r2, #32
 8013772:	d1cc      	bne.n	801370e <_strtod_l+0x46>
 8013774:	3301      	adds	r3, #1
 8013776:	9317      	str	r3, [sp, #92]	; 0x5c
 8013778:	e7be      	b.n	80136f8 <_strtod_l+0x30>
 801377a:	2a2d      	cmp	r2, #45	; 0x2d
 801377c:	d1c7      	bne.n	801370e <_strtod_l+0x46>
 801377e:	2201      	movs	r2, #1
 8013780:	920a      	str	r2, [sp, #40]	; 0x28
 8013782:	1c5a      	adds	r2, r3, #1
 8013784:	9217      	str	r2, [sp, #92]	; 0x5c
 8013786:	785b      	ldrb	r3, [r3, #1]
 8013788:	2b00      	cmp	r3, #0
 801378a:	d1c2      	bne.n	8013712 <_strtod_l+0x4a>
 801378c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801378e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8013792:	2b00      	cmp	r3, #0
 8013794:	f040 856e 	bne.w	8014274 <_strtod_l+0xbac>
 8013798:	4652      	mov	r2, sl
 801379a:	465b      	mov	r3, fp
 801379c:	e7e1      	b.n	8013762 <_strtod_l+0x9a>
 801379e:	2200      	movs	r2, #0
 80137a0:	e7ee      	b.n	8013780 <_strtod_l+0xb8>
 80137a2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80137a4:	b13a      	cbz	r2, 80137b6 <_strtod_l+0xee>
 80137a6:	2135      	movs	r1, #53	; 0x35
 80137a8:	a81a      	add	r0, sp, #104	; 0x68
 80137aa:	f002 fca2 	bl	80160f2 <__copybits>
 80137ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 80137b0:	4620      	mov	r0, r4
 80137b2:	f002 f861 	bl	8015878 <_Bfree>
 80137b6:	3f01      	subs	r7, #1
 80137b8:	2f04      	cmp	r7, #4
 80137ba:	d806      	bhi.n	80137ca <_strtod_l+0x102>
 80137bc:	e8df f007 	tbb	[pc, r7]
 80137c0:	1714030a 	.word	0x1714030a
 80137c4:	0a          	.byte	0x0a
 80137c5:	00          	.byte	0x00
 80137c6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80137ca:	0728      	lsls	r0, r5, #28
 80137cc:	d5c0      	bpl.n	8013750 <_strtod_l+0x88>
 80137ce:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80137d2:	e7bd      	b.n	8013750 <_strtod_l+0x88>
 80137d4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80137d8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80137da:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80137de:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80137e2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80137e6:	e7f0      	b.n	80137ca <_strtod_l+0x102>
 80137e8:	f8df b180 	ldr.w	fp, [pc, #384]	; 801396c <_strtod_l+0x2a4>
 80137ec:	e7ed      	b.n	80137ca <_strtod_l+0x102>
 80137ee:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80137f2:	f04f 3aff 	mov.w	sl, #4294967295
 80137f6:	e7e8      	b.n	80137ca <_strtod_l+0x102>
 80137f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80137fa:	1c5a      	adds	r2, r3, #1
 80137fc:	9217      	str	r2, [sp, #92]	; 0x5c
 80137fe:	785b      	ldrb	r3, [r3, #1]
 8013800:	2b30      	cmp	r3, #48	; 0x30
 8013802:	d0f9      	beq.n	80137f8 <_strtod_l+0x130>
 8013804:	2b00      	cmp	r3, #0
 8013806:	d0a3      	beq.n	8013750 <_strtod_l+0x88>
 8013808:	2301      	movs	r3, #1
 801380a:	f04f 0900 	mov.w	r9, #0
 801380e:	9304      	str	r3, [sp, #16]
 8013810:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013812:	9308      	str	r3, [sp, #32]
 8013814:	f8cd 901c 	str.w	r9, [sp, #28]
 8013818:	464f      	mov	r7, r9
 801381a:	220a      	movs	r2, #10
 801381c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801381e:	7806      	ldrb	r6, [r0, #0]
 8013820:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8013824:	b2d9      	uxtb	r1, r3
 8013826:	2909      	cmp	r1, #9
 8013828:	d92a      	bls.n	8013880 <_strtod_l+0x1b8>
 801382a:	9905      	ldr	r1, [sp, #20]
 801382c:	462a      	mov	r2, r5
 801382e:	f002 ff0f 	bl	8016650 <strncmp>
 8013832:	b398      	cbz	r0, 801389c <_strtod_l+0x1d4>
 8013834:	2000      	movs	r0, #0
 8013836:	4632      	mov	r2, r6
 8013838:	463d      	mov	r5, r7
 801383a:	9005      	str	r0, [sp, #20]
 801383c:	4603      	mov	r3, r0
 801383e:	2a65      	cmp	r2, #101	; 0x65
 8013840:	d001      	beq.n	8013846 <_strtod_l+0x17e>
 8013842:	2a45      	cmp	r2, #69	; 0x45
 8013844:	d118      	bne.n	8013878 <_strtod_l+0x1b0>
 8013846:	b91d      	cbnz	r5, 8013850 <_strtod_l+0x188>
 8013848:	9a04      	ldr	r2, [sp, #16]
 801384a:	4302      	orrs	r2, r0
 801384c:	d09e      	beq.n	801378c <_strtod_l+0xc4>
 801384e:	2500      	movs	r5, #0
 8013850:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8013854:	f108 0201 	add.w	r2, r8, #1
 8013858:	9217      	str	r2, [sp, #92]	; 0x5c
 801385a:	f898 2001 	ldrb.w	r2, [r8, #1]
 801385e:	2a2b      	cmp	r2, #43	; 0x2b
 8013860:	d075      	beq.n	801394e <_strtod_l+0x286>
 8013862:	2a2d      	cmp	r2, #45	; 0x2d
 8013864:	d07b      	beq.n	801395e <_strtod_l+0x296>
 8013866:	f04f 0c00 	mov.w	ip, #0
 801386a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801386e:	2909      	cmp	r1, #9
 8013870:	f240 8082 	bls.w	8013978 <_strtod_l+0x2b0>
 8013874:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8013878:	2600      	movs	r6, #0
 801387a:	e09d      	b.n	80139b8 <_strtod_l+0x2f0>
 801387c:	2300      	movs	r3, #0
 801387e:	e7c4      	b.n	801380a <_strtod_l+0x142>
 8013880:	2f08      	cmp	r7, #8
 8013882:	bfd8      	it	le
 8013884:	9907      	ldrle	r1, [sp, #28]
 8013886:	f100 0001 	add.w	r0, r0, #1
 801388a:	bfda      	itte	le
 801388c:	fb02 3301 	mlale	r3, r2, r1, r3
 8013890:	9307      	strle	r3, [sp, #28]
 8013892:	fb02 3909 	mlagt	r9, r2, r9, r3
 8013896:	3701      	adds	r7, #1
 8013898:	9017      	str	r0, [sp, #92]	; 0x5c
 801389a:	e7bf      	b.n	801381c <_strtod_l+0x154>
 801389c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801389e:	195a      	adds	r2, r3, r5
 80138a0:	9217      	str	r2, [sp, #92]	; 0x5c
 80138a2:	5d5a      	ldrb	r2, [r3, r5]
 80138a4:	2f00      	cmp	r7, #0
 80138a6:	d037      	beq.n	8013918 <_strtod_l+0x250>
 80138a8:	9005      	str	r0, [sp, #20]
 80138aa:	463d      	mov	r5, r7
 80138ac:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80138b0:	2b09      	cmp	r3, #9
 80138b2:	d912      	bls.n	80138da <_strtod_l+0x212>
 80138b4:	2301      	movs	r3, #1
 80138b6:	e7c2      	b.n	801383e <_strtod_l+0x176>
 80138b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80138ba:	1c5a      	adds	r2, r3, #1
 80138bc:	9217      	str	r2, [sp, #92]	; 0x5c
 80138be:	785a      	ldrb	r2, [r3, #1]
 80138c0:	3001      	adds	r0, #1
 80138c2:	2a30      	cmp	r2, #48	; 0x30
 80138c4:	d0f8      	beq.n	80138b8 <_strtod_l+0x1f0>
 80138c6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80138ca:	2b08      	cmp	r3, #8
 80138cc:	f200 84d9 	bhi.w	8014282 <_strtod_l+0xbba>
 80138d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80138d2:	9005      	str	r0, [sp, #20]
 80138d4:	2000      	movs	r0, #0
 80138d6:	9308      	str	r3, [sp, #32]
 80138d8:	4605      	mov	r5, r0
 80138da:	3a30      	subs	r2, #48	; 0x30
 80138dc:	f100 0301 	add.w	r3, r0, #1
 80138e0:	d014      	beq.n	801390c <_strtod_l+0x244>
 80138e2:	9905      	ldr	r1, [sp, #20]
 80138e4:	4419      	add	r1, r3
 80138e6:	9105      	str	r1, [sp, #20]
 80138e8:	462b      	mov	r3, r5
 80138ea:	eb00 0e05 	add.w	lr, r0, r5
 80138ee:	210a      	movs	r1, #10
 80138f0:	4573      	cmp	r3, lr
 80138f2:	d113      	bne.n	801391c <_strtod_l+0x254>
 80138f4:	182b      	adds	r3, r5, r0
 80138f6:	2b08      	cmp	r3, #8
 80138f8:	f105 0501 	add.w	r5, r5, #1
 80138fc:	4405      	add	r5, r0
 80138fe:	dc1c      	bgt.n	801393a <_strtod_l+0x272>
 8013900:	9907      	ldr	r1, [sp, #28]
 8013902:	230a      	movs	r3, #10
 8013904:	fb03 2301 	mla	r3, r3, r1, r2
 8013908:	9307      	str	r3, [sp, #28]
 801390a:	2300      	movs	r3, #0
 801390c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801390e:	1c51      	adds	r1, r2, #1
 8013910:	9117      	str	r1, [sp, #92]	; 0x5c
 8013912:	7852      	ldrb	r2, [r2, #1]
 8013914:	4618      	mov	r0, r3
 8013916:	e7c9      	b.n	80138ac <_strtod_l+0x1e4>
 8013918:	4638      	mov	r0, r7
 801391a:	e7d2      	b.n	80138c2 <_strtod_l+0x1fa>
 801391c:	2b08      	cmp	r3, #8
 801391e:	dc04      	bgt.n	801392a <_strtod_l+0x262>
 8013920:	9e07      	ldr	r6, [sp, #28]
 8013922:	434e      	muls	r6, r1
 8013924:	9607      	str	r6, [sp, #28]
 8013926:	3301      	adds	r3, #1
 8013928:	e7e2      	b.n	80138f0 <_strtod_l+0x228>
 801392a:	f103 0c01 	add.w	ip, r3, #1
 801392e:	f1bc 0f10 	cmp.w	ip, #16
 8013932:	bfd8      	it	le
 8013934:	fb01 f909 	mulle.w	r9, r1, r9
 8013938:	e7f5      	b.n	8013926 <_strtod_l+0x25e>
 801393a:	2d10      	cmp	r5, #16
 801393c:	bfdc      	itt	le
 801393e:	230a      	movle	r3, #10
 8013940:	fb03 2909 	mlale	r9, r3, r9, r2
 8013944:	e7e1      	b.n	801390a <_strtod_l+0x242>
 8013946:	2300      	movs	r3, #0
 8013948:	9305      	str	r3, [sp, #20]
 801394a:	2301      	movs	r3, #1
 801394c:	e77c      	b.n	8013848 <_strtod_l+0x180>
 801394e:	f04f 0c00 	mov.w	ip, #0
 8013952:	f108 0202 	add.w	r2, r8, #2
 8013956:	9217      	str	r2, [sp, #92]	; 0x5c
 8013958:	f898 2002 	ldrb.w	r2, [r8, #2]
 801395c:	e785      	b.n	801386a <_strtod_l+0x1a2>
 801395e:	f04f 0c01 	mov.w	ip, #1
 8013962:	e7f6      	b.n	8013952 <_strtod_l+0x28a>
 8013964:	08018e08 	.word	0x08018e08
 8013968:	08018bc0 	.word	0x08018bc0
 801396c:	7ff00000 	.word	0x7ff00000
 8013970:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013972:	1c51      	adds	r1, r2, #1
 8013974:	9117      	str	r1, [sp, #92]	; 0x5c
 8013976:	7852      	ldrb	r2, [r2, #1]
 8013978:	2a30      	cmp	r2, #48	; 0x30
 801397a:	d0f9      	beq.n	8013970 <_strtod_l+0x2a8>
 801397c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8013980:	2908      	cmp	r1, #8
 8013982:	f63f af79 	bhi.w	8013878 <_strtod_l+0x1b0>
 8013986:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801398a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801398c:	9206      	str	r2, [sp, #24]
 801398e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013990:	1c51      	adds	r1, r2, #1
 8013992:	9117      	str	r1, [sp, #92]	; 0x5c
 8013994:	7852      	ldrb	r2, [r2, #1]
 8013996:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801399a:	2e09      	cmp	r6, #9
 801399c:	d937      	bls.n	8013a0e <_strtod_l+0x346>
 801399e:	9e06      	ldr	r6, [sp, #24]
 80139a0:	1b89      	subs	r1, r1, r6
 80139a2:	2908      	cmp	r1, #8
 80139a4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80139a8:	dc02      	bgt.n	80139b0 <_strtod_l+0x2e8>
 80139aa:	4576      	cmp	r6, lr
 80139ac:	bfa8      	it	ge
 80139ae:	4676      	movge	r6, lr
 80139b0:	f1bc 0f00 	cmp.w	ip, #0
 80139b4:	d000      	beq.n	80139b8 <_strtod_l+0x2f0>
 80139b6:	4276      	negs	r6, r6
 80139b8:	2d00      	cmp	r5, #0
 80139ba:	d14d      	bne.n	8013a58 <_strtod_l+0x390>
 80139bc:	9904      	ldr	r1, [sp, #16]
 80139be:	4301      	orrs	r1, r0
 80139c0:	f47f aec6 	bne.w	8013750 <_strtod_l+0x88>
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	f47f aee1 	bne.w	801378c <_strtod_l+0xc4>
 80139ca:	2a69      	cmp	r2, #105	; 0x69
 80139cc:	d027      	beq.n	8013a1e <_strtod_l+0x356>
 80139ce:	dc24      	bgt.n	8013a1a <_strtod_l+0x352>
 80139d0:	2a49      	cmp	r2, #73	; 0x49
 80139d2:	d024      	beq.n	8013a1e <_strtod_l+0x356>
 80139d4:	2a4e      	cmp	r2, #78	; 0x4e
 80139d6:	f47f aed9 	bne.w	801378c <_strtod_l+0xc4>
 80139da:	499f      	ldr	r1, [pc, #636]	; (8013c58 <_strtod_l+0x590>)
 80139dc:	a817      	add	r0, sp, #92	; 0x5c
 80139de:	f001 fe3d 	bl	801565c <__match>
 80139e2:	2800      	cmp	r0, #0
 80139e4:	f43f aed2 	beq.w	801378c <_strtod_l+0xc4>
 80139e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80139ea:	781b      	ldrb	r3, [r3, #0]
 80139ec:	2b28      	cmp	r3, #40	; 0x28
 80139ee:	d12d      	bne.n	8013a4c <_strtod_l+0x384>
 80139f0:	499a      	ldr	r1, [pc, #616]	; (8013c5c <_strtod_l+0x594>)
 80139f2:	aa1a      	add	r2, sp, #104	; 0x68
 80139f4:	a817      	add	r0, sp, #92	; 0x5c
 80139f6:	f001 fe45 	bl	8015684 <__hexnan>
 80139fa:	2805      	cmp	r0, #5
 80139fc:	d126      	bne.n	8013a4c <_strtod_l+0x384>
 80139fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013a00:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8013a04:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8013a08:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8013a0c:	e6a0      	b.n	8013750 <_strtod_l+0x88>
 8013a0e:	210a      	movs	r1, #10
 8013a10:	fb01 2e0e 	mla	lr, r1, lr, r2
 8013a14:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8013a18:	e7b9      	b.n	801398e <_strtod_l+0x2c6>
 8013a1a:	2a6e      	cmp	r2, #110	; 0x6e
 8013a1c:	e7db      	b.n	80139d6 <_strtod_l+0x30e>
 8013a1e:	4990      	ldr	r1, [pc, #576]	; (8013c60 <_strtod_l+0x598>)
 8013a20:	a817      	add	r0, sp, #92	; 0x5c
 8013a22:	f001 fe1b 	bl	801565c <__match>
 8013a26:	2800      	cmp	r0, #0
 8013a28:	f43f aeb0 	beq.w	801378c <_strtod_l+0xc4>
 8013a2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013a2e:	498d      	ldr	r1, [pc, #564]	; (8013c64 <_strtod_l+0x59c>)
 8013a30:	3b01      	subs	r3, #1
 8013a32:	a817      	add	r0, sp, #92	; 0x5c
 8013a34:	9317      	str	r3, [sp, #92]	; 0x5c
 8013a36:	f001 fe11 	bl	801565c <__match>
 8013a3a:	b910      	cbnz	r0, 8013a42 <_strtod_l+0x37a>
 8013a3c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013a3e:	3301      	adds	r3, #1
 8013a40:	9317      	str	r3, [sp, #92]	; 0x5c
 8013a42:	f8df b230 	ldr.w	fp, [pc, #560]	; 8013c74 <_strtod_l+0x5ac>
 8013a46:	f04f 0a00 	mov.w	sl, #0
 8013a4a:	e681      	b.n	8013750 <_strtod_l+0x88>
 8013a4c:	4886      	ldr	r0, [pc, #536]	; (8013c68 <_strtod_l+0x5a0>)
 8013a4e:	f002 fde7 	bl	8016620 <nan>
 8013a52:	ec5b ab10 	vmov	sl, fp, d0
 8013a56:	e67b      	b.n	8013750 <_strtod_l+0x88>
 8013a58:	9b05      	ldr	r3, [sp, #20]
 8013a5a:	9807      	ldr	r0, [sp, #28]
 8013a5c:	1af3      	subs	r3, r6, r3
 8013a5e:	2f00      	cmp	r7, #0
 8013a60:	bf08      	it	eq
 8013a62:	462f      	moveq	r7, r5
 8013a64:	2d10      	cmp	r5, #16
 8013a66:	9306      	str	r3, [sp, #24]
 8013a68:	46a8      	mov	r8, r5
 8013a6a:	bfa8      	it	ge
 8013a6c:	f04f 0810 	movge.w	r8, #16
 8013a70:	f7ec fd60 	bl	8000534 <__aeabi_ui2d>
 8013a74:	2d09      	cmp	r5, #9
 8013a76:	4682      	mov	sl, r0
 8013a78:	468b      	mov	fp, r1
 8013a7a:	dd13      	ble.n	8013aa4 <_strtod_l+0x3dc>
 8013a7c:	4b7b      	ldr	r3, [pc, #492]	; (8013c6c <_strtod_l+0x5a4>)
 8013a7e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8013a82:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8013a86:	f7ec fdcf 	bl	8000628 <__aeabi_dmul>
 8013a8a:	4682      	mov	sl, r0
 8013a8c:	4648      	mov	r0, r9
 8013a8e:	468b      	mov	fp, r1
 8013a90:	f7ec fd50 	bl	8000534 <__aeabi_ui2d>
 8013a94:	4602      	mov	r2, r0
 8013a96:	460b      	mov	r3, r1
 8013a98:	4650      	mov	r0, sl
 8013a9a:	4659      	mov	r1, fp
 8013a9c:	f7ec fc0e 	bl	80002bc <__adddf3>
 8013aa0:	4682      	mov	sl, r0
 8013aa2:	468b      	mov	fp, r1
 8013aa4:	2d0f      	cmp	r5, #15
 8013aa6:	dc38      	bgt.n	8013b1a <_strtod_l+0x452>
 8013aa8:	9b06      	ldr	r3, [sp, #24]
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	f43f ae50 	beq.w	8013750 <_strtod_l+0x88>
 8013ab0:	dd24      	ble.n	8013afc <_strtod_l+0x434>
 8013ab2:	2b16      	cmp	r3, #22
 8013ab4:	dc0b      	bgt.n	8013ace <_strtod_l+0x406>
 8013ab6:	496d      	ldr	r1, [pc, #436]	; (8013c6c <_strtod_l+0x5a4>)
 8013ab8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013abc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013ac0:	4652      	mov	r2, sl
 8013ac2:	465b      	mov	r3, fp
 8013ac4:	f7ec fdb0 	bl	8000628 <__aeabi_dmul>
 8013ac8:	4682      	mov	sl, r0
 8013aca:	468b      	mov	fp, r1
 8013acc:	e640      	b.n	8013750 <_strtod_l+0x88>
 8013ace:	9a06      	ldr	r2, [sp, #24]
 8013ad0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8013ad4:	4293      	cmp	r3, r2
 8013ad6:	db20      	blt.n	8013b1a <_strtod_l+0x452>
 8013ad8:	4c64      	ldr	r4, [pc, #400]	; (8013c6c <_strtod_l+0x5a4>)
 8013ada:	f1c5 050f 	rsb	r5, r5, #15
 8013ade:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8013ae2:	4652      	mov	r2, sl
 8013ae4:	465b      	mov	r3, fp
 8013ae6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013aea:	f7ec fd9d 	bl	8000628 <__aeabi_dmul>
 8013aee:	9b06      	ldr	r3, [sp, #24]
 8013af0:	1b5d      	subs	r5, r3, r5
 8013af2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8013af6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013afa:	e7e3      	b.n	8013ac4 <_strtod_l+0x3fc>
 8013afc:	9b06      	ldr	r3, [sp, #24]
 8013afe:	3316      	adds	r3, #22
 8013b00:	db0b      	blt.n	8013b1a <_strtod_l+0x452>
 8013b02:	9b05      	ldr	r3, [sp, #20]
 8013b04:	1b9e      	subs	r6, r3, r6
 8013b06:	4b59      	ldr	r3, [pc, #356]	; (8013c6c <_strtod_l+0x5a4>)
 8013b08:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8013b0c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013b10:	4650      	mov	r0, sl
 8013b12:	4659      	mov	r1, fp
 8013b14:	f7ec feb2 	bl	800087c <__aeabi_ddiv>
 8013b18:	e7d6      	b.n	8013ac8 <_strtod_l+0x400>
 8013b1a:	9b06      	ldr	r3, [sp, #24]
 8013b1c:	eba5 0808 	sub.w	r8, r5, r8
 8013b20:	4498      	add	r8, r3
 8013b22:	f1b8 0f00 	cmp.w	r8, #0
 8013b26:	dd74      	ble.n	8013c12 <_strtod_l+0x54a>
 8013b28:	f018 030f 	ands.w	r3, r8, #15
 8013b2c:	d00a      	beq.n	8013b44 <_strtod_l+0x47c>
 8013b2e:	494f      	ldr	r1, [pc, #316]	; (8013c6c <_strtod_l+0x5a4>)
 8013b30:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013b34:	4652      	mov	r2, sl
 8013b36:	465b      	mov	r3, fp
 8013b38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013b3c:	f7ec fd74 	bl	8000628 <__aeabi_dmul>
 8013b40:	4682      	mov	sl, r0
 8013b42:	468b      	mov	fp, r1
 8013b44:	f038 080f 	bics.w	r8, r8, #15
 8013b48:	d04f      	beq.n	8013bea <_strtod_l+0x522>
 8013b4a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8013b4e:	dd22      	ble.n	8013b96 <_strtod_l+0x4ce>
 8013b50:	2500      	movs	r5, #0
 8013b52:	462e      	mov	r6, r5
 8013b54:	9507      	str	r5, [sp, #28]
 8013b56:	9505      	str	r5, [sp, #20]
 8013b58:	2322      	movs	r3, #34	; 0x22
 8013b5a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8013c74 <_strtod_l+0x5ac>
 8013b5e:	6023      	str	r3, [r4, #0]
 8013b60:	f04f 0a00 	mov.w	sl, #0
 8013b64:	9b07      	ldr	r3, [sp, #28]
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	f43f adf2 	beq.w	8013750 <_strtod_l+0x88>
 8013b6c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013b6e:	4620      	mov	r0, r4
 8013b70:	f001 fe82 	bl	8015878 <_Bfree>
 8013b74:	9905      	ldr	r1, [sp, #20]
 8013b76:	4620      	mov	r0, r4
 8013b78:	f001 fe7e 	bl	8015878 <_Bfree>
 8013b7c:	4631      	mov	r1, r6
 8013b7e:	4620      	mov	r0, r4
 8013b80:	f001 fe7a 	bl	8015878 <_Bfree>
 8013b84:	9907      	ldr	r1, [sp, #28]
 8013b86:	4620      	mov	r0, r4
 8013b88:	f001 fe76 	bl	8015878 <_Bfree>
 8013b8c:	4629      	mov	r1, r5
 8013b8e:	4620      	mov	r0, r4
 8013b90:	f001 fe72 	bl	8015878 <_Bfree>
 8013b94:	e5dc      	b.n	8013750 <_strtod_l+0x88>
 8013b96:	4b36      	ldr	r3, [pc, #216]	; (8013c70 <_strtod_l+0x5a8>)
 8013b98:	9304      	str	r3, [sp, #16]
 8013b9a:	2300      	movs	r3, #0
 8013b9c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8013ba0:	4650      	mov	r0, sl
 8013ba2:	4659      	mov	r1, fp
 8013ba4:	4699      	mov	r9, r3
 8013ba6:	f1b8 0f01 	cmp.w	r8, #1
 8013baa:	dc21      	bgt.n	8013bf0 <_strtod_l+0x528>
 8013bac:	b10b      	cbz	r3, 8013bb2 <_strtod_l+0x4ea>
 8013bae:	4682      	mov	sl, r0
 8013bb0:	468b      	mov	fp, r1
 8013bb2:	4b2f      	ldr	r3, [pc, #188]	; (8013c70 <_strtod_l+0x5a8>)
 8013bb4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8013bb8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8013bbc:	4652      	mov	r2, sl
 8013bbe:	465b      	mov	r3, fp
 8013bc0:	e9d9 0100 	ldrd	r0, r1, [r9]
 8013bc4:	f7ec fd30 	bl	8000628 <__aeabi_dmul>
 8013bc8:	4b2a      	ldr	r3, [pc, #168]	; (8013c74 <_strtod_l+0x5ac>)
 8013bca:	460a      	mov	r2, r1
 8013bcc:	400b      	ands	r3, r1
 8013bce:	492a      	ldr	r1, [pc, #168]	; (8013c78 <_strtod_l+0x5b0>)
 8013bd0:	428b      	cmp	r3, r1
 8013bd2:	4682      	mov	sl, r0
 8013bd4:	d8bc      	bhi.n	8013b50 <_strtod_l+0x488>
 8013bd6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8013bda:	428b      	cmp	r3, r1
 8013bdc:	bf86      	itte	hi
 8013bde:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8013c7c <_strtod_l+0x5b4>
 8013be2:	f04f 3aff 	movhi.w	sl, #4294967295
 8013be6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8013bea:	2300      	movs	r3, #0
 8013bec:	9304      	str	r3, [sp, #16]
 8013bee:	e084      	b.n	8013cfa <_strtod_l+0x632>
 8013bf0:	f018 0f01 	tst.w	r8, #1
 8013bf4:	d005      	beq.n	8013c02 <_strtod_l+0x53a>
 8013bf6:	9b04      	ldr	r3, [sp, #16]
 8013bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bfc:	f7ec fd14 	bl	8000628 <__aeabi_dmul>
 8013c00:	2301      	movs	r3, #1
 8013c02:	9a04      	ldr	r2, [sp, #16]
 8013c04:	3208      	adds	r2, #8
 8013c06:	f109 0901 	add.w	r9, r9, #1
 8013c0a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8013c0e:	9204      	str	r2, [sp, #16]
 8013c10:	e7c9      	b.n	8013ba6 <_strtod_l+0x4de>
 8013c12:	d0ea      	beq.n	8013bea <_strtod_l+0x522>
 8013c14:	f1c8 0800 	rsb	r8, r8, #0
 8013c18:	f018 020f 	ands.w	r2, r8, #15
 8013c1c:	d00a      	beq.n	8013c34 <_strtod_l+0x56c>
 8013c1e:	4b13      	ldr	r3, [pc, #76]	; (8013c6c <_strtod_l+0x5a4>)
 8013c20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013c24:	4650      	mov	r0, sl
 8013c26:	4659      	mov	r1, fp
 8013c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c2c:	f7ec fe26 	bl	800087c <__aeabi_ddiv>
 8013c30:	4682      	mov	sl, r0
 8013c32:	468b      	mov	fp, r1
 8013c34:	ea5f 1828 	movs.w	r8, r8, asr #4
 8013c38:	d0d7      	beq.n	8013bea <_strtod_l+0x522>
 8013c3a:	f1b8 0f1f 	cmp.w	r8, #31
 8013c3e:	dd1f      	ble.n	8013c80 <_strtod_l+0x5b8>
 8013c40:	2500      	movs	r5, #0
 8013c42:	462e      	mov	r6, r5
 8013c44:	9507      	str	r5, [sp, #28]
 8013c46:	9505      	str	r5, [sp, #20]
 8013c48:	2322      	movs	r3, #34	; 0x22
 8013c4a:	f04f 0a00 	mov.w	sl, #0
 8013c4e:	f04f 0b00 	mov.w	fp, #0
 8013c52:	6023      	str	r3, [r4, #0]
 8013c54:	e786      	b.n	8013b64 <_strtod_l+0x49c>
 8013c56:	bf00      	nop
 8013c58:	08018b91 	.word	0x08018b91
 8013c5c:	08018bd4 	.word	0x08018bd4
 8013c60:	08018b89 	.word	0x08018b89
 8013c64:	08018d14 	.word	0x08018d14
 8013c68:	08018fc0 	.word	0x08018fc0
 8013c6c:	08018ea0 	.word	0x08018ea0
 8013c70:	08018e78 	.word	0x08018e78
 8013c74:	7ff00000 	.word	0x7ff00000
 8013c78:	7ca00000 	.word	0x7ca00000
 8013c7c:	7fefffff 	.word	0x7fefffff
 8013c80:	f018 0310 	ands.w	r3, r8, #16
 8013c84:	bf18      	it	ne
 8013c86:	236a      	movne	r3, #106	; 0x6a
 8013c88:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8014038 <_strtod_l+0x970>
 8013c8c:	9304      	str	r3, [sp, #16]
 8013c8e:	4650      	mov	r0, sl
 8013c90:	4659      	mov	r1, fp
 8013c92:	2300      	movs	r3, #0
 8013c94:	f018 0f01 	tst.w	r8, #1
 8013c98:	d004      	beq.n	8013ca4 <_strtod_l+0x5dc>
 8013c9a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8013c9e:	f7ec fcc3 	bl	8000628 <__aeabi_dmul>
 8013ca2:	2301      	movs	r3, #1
 8013ca4:	ea5f 0868 	movs.w	r8, r8, asr #1
 8013ca8:	f109 0908 	add.w	r9, r9, #8
 8013cac:	d1f2      	bne.n	8013c94 <_strtod_l+0x5cc>
 8013cae:	b10b      	cbz	r3, 8013cb4 <_strtod_l+0x5ec>
 8013cb0:	4682      	mov	sl, r0
 8013cb2:	468b      	mov	fp, r1
 8013cb4:	9b04      	ldr	r3, [sp, #16]
 8013cb6:	b1c3      	cbz	r3, 8013cea <_strtod_l+0x622>
 8013cb8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8013cbc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	4659      	mov	r1, fp
 8013cc4:	dd11      	ble.n	8013cea <_strtod_l+0x622>
 8013cc6:	2b1f      	cmp	r3, #31
 8013cc8:	f340 8124 	ble.w	8013f14 <_strtod_l+0x84c>
 8013ccc:	2b34      	cmp	r3, #52	; 0x34
 8013cce:	bfde      	ittt	le
 8013cd0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8013cd4:	f04f 33ff 	movle.w	r3, #4294967295
 8013cd8:	fa03 f202 	lslle.w	r2, r3, r2
 8013cdc:	f04f 0a00 	mov.w	sl, #0
 8013ce0:	bfcc      	ite	gt
 8013ce2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8013ce6:	ea02 0b01 	andle.w	fp, r2, r1
 8013cea:	2200      	movs	r2, #0
 8013cec:	2300      	movs	r3, #0
 8013cee:	4650      	mov	r0, sl
 8013cf0:	4659      	mov	r1, fp
 8013cf2:	f7ec ff01 	bl	8000af8 <__aeabi_dcmpeq>
 8013cf6:	2800      	cmp	r0, #0
 8013cf8:	d1a2      	bne.n	8013c40 <_strtod_l+0x578>
 8013cfa:	9b07      	ldr	r3, [sp, #28]
 8013cfc:	9300      	str	r3, [sp, #0]
 8013cfe:	9908      	ldr	r1, [sp, #32]
 8013d00:	462b      	mov	r3, r5
 8013d02:	463a      	mov	r2, r7
 8013d04:	4620      	mov	r0, r4
 8013d06:	f001 fe1f 	bl	8015948 <__s2b>
 8013d0a:	9007      	str	r0, [sp, #28]
 8013d0c:	2800      	cmp	r0, #0
 8013d0e:	f43f af1f 	beq.w	8013b50 <_strtod_l+0x488>
 8013d12:	9b05      	ldr	r3, [sp, #20]
 8013d14:	1b9e      	subs	r6, r3, r6
 8013d16:	9b06      	ldr	r3, [sp, #24]
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	bfb4      	ite	lt
 8013d1c:	4633      	movlt	r3, r6
 8013d1e:	2300      	movge	r3, #0
 8013d20:	930c      	str	r3, [sp, #48]	; 0x30
 8013d22:	9b06      	ldr	r3, [sp, #24]
 8013d24:	2500      	movs	r5, #0
 8013d26:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013d2a:	9312      	str	r3, [sp, #72]	; 0x48
 8013d2c:	462e      	mov	r6, r5
 8013d2e:	9b07      	ldr	r3, [sp, #28]
 8013d30:	4620      	mov	r0, r4
 8013d32:	6859      	ldr	r1, [r3, #4]
 8013d34:	f001 fd60 	bl	80157f8 <_Balloc>
 8013d38:	9005      	str	r0, [sp, #20]
 8013d3a:	2800      	cmp	r0, #0
 8013d3c:	f43f af0c 	beq.w	8013b58 <_strtod_l+0x490>
 8013d40:	9b07      	ldr	r3, [sp, #28]
 8013d42:	691a      	ldr	r2, [r3, #16]
 8013d44:	3202      	adds	r2, #2
 8013d46:	f103 010c 	add.w	r1, r3, #12
 8013d4a:	0092      	lsls	r2, r2, #2
 8013d4c:	300c      	adds	r0, #12
 8013d4e:	f7fe fde7 	bl	8012920 <memcpy>
 8013d52:	ec4b ab10 	vmov	d0, sl, fp
 8013d56:	aa1a      	add	r2, sp, #104	; 0x68
 8013d58:	a919      	add	r1, sp, #100	; 0x64
 8013d5a:	4620      	mov	r0, r4
 8013d5c:	f002 f93a 	bl	8015fd4 <__d2b>
 8013d60:	ec4b ab18 	vmov	d8, sl, fp
 8013d64:	9018      	str	r0, [sp, #96]	; 0x60
 8013d66:	2800      	cmp	r0, #0
 8013d68:	f43f aef6 	beq.w	8013b58 <_strtod_l+0x490>
 8013d6c:	2101      	movs	r1, #1
 8013d6e:	4620      	mov	r0, r4
 8013d70:	f001 fe84 	bl	8015a7c <__i2b>
 8013d74:	4606      	mov	r6, r0
 8013d76:	2800      	cmp	r0, #0
 8013d78:	f43f aeee 	beq.w	8013b58 <_strtod_l+0x490>
 8013d7c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013d7e:	9904      	ldr	r1, [sp, #16]
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	bfab      	itete	ge
 8013d84:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8013d86:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8013d88:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8013d8a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8013d8e:	bfac      	ite	ge
 8013d90:	eb03 0902 	addge.w	r9, r3, r2
 8013d94:	1ad7      	sublt	r7, r2, r3
 8013d96:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8013d98:	eba3 0801 	sub.w	r8, r3, r1
 8013d9c:	4490      	add	r8, r2
 8013d9e:	4ba1      	ldr	r3, [pc, #644]	; (8014024 <_strtod_l+0x95c>)
 8013da0:	f108 38ff 	add.w	r8, r8, #4294967295
 8013da4:	4598      	cmp	r8, r3
 8013da6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013daa:	f280 80c7 	bge.w	8013f3c <_strtod_l+0x874>
 8013dae:	eba3 0308 	sub.w	r3, r3, r8
 8013db2:	2b1f      	cmp	r3, #31
 8013db4:	eba2 0203 	sub.w	r2, r2, r3
 8013db8:	f04f 0101 	mov.w	r1, #1
 8013dbc:	f300 80b1 	bgt.w	8013f22 <_strtod_l+0x85a>
 8013dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8013dc4:	930d      	str	r3, [sp, #52]	; 0x34
 8013dc6:	2300      	movs	r3, #0
 8013dc8:	9308      	str	r3, [sp, #32]
 8013dca:	eb09 0802 	add.w	r8, r9, r2
 8013dce:	9b04      	ldr	r3, [sp, #16]
 8013dd0:	45c1      	cmp	r9, r8
 8013dd2:	4417      	add	r7, r2
 8013dd4:	441f      	add	r7, r3
 8013dd6:	464b      	mov	r3, r9
 8013dd8:	bfa8      	it	ge
 8013dda:	4643      	movge	r3, r8
 8013ddc:	42bb      	cmp	r3, r7
 8013dde:	bfa8      	it	ge
 8013de0:	463b      	movge	r3, r7
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	bfc2      	ittt	gt
 8013de6:	eba8 0803 	subgt.w	r8, r8, r3
 8013dea:	1aff      	subgt	r7, r7, r3
 8013dec:	eba9 0903 	subgt.w	r9, r9, r3
 8013df0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	dd17      	ble.n	8013e26 <_strtod_l+0x75e>
 8013df6:	4631      	mov	r1, r6
 8013df8:	461a      	mov	r2, r3
 8013dfa:	4620      	mov	r0, r4
 8013dfc:	f001 fefe 	bl	8015bfc <__pow5mult>
 8013e00:	4606      	mov	r6, r0
 8013e02:	2800      	cmp	r0, #0
 8013e04:	f43f aea8 	beq.w	8013b58 <_strtod_l+0x490>
 8013e08:	4601      	mov	r1, r0
 8013e0a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013e0c:	4620      	mov	r0, r4
 8013e0e:	f001 fe4b 	bl	8015aa8 <__multiply>
 8013e12:	900b      	str	r0, [sp, #44]	; 0x2c
 8013e14:	2800      	cmp	r0, #0
 8013e16:	f43f ae9f 	beq.w	8013b58 <_strtod_l+0x490>
 8013e1a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013e1c:	4620      	mov	r0, r4
 8013e1e:	f001 fd2b 	bl	8015878 <_Bfree>
 8013e22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013e24:	9318      	str	r3, [sp, #96]	; 0x60
 8013e26:	f1b8 0f00 	cmp.w	r8, #0
 8013e2a:	f300 808c 	bgt.w	8013f46 <_strtod_l+0x87e>
 8013e2e:	9b06      	ldr	r3, [sp, #24]
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	dd08      	ble.n	8013e46 <_strtod_l+0x77e>
 8013e34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013e36:	9905      	ldr	r1, [sp, #20]
 8013e38:	4620      	mov	r0, r4
 8013e3a:	f001 fedf 	bl	8015bfc <__pow5mult>
 8013e3e:	9005      	str	r0, [sp, #20]
 8013e40:	2800      	cmp	r0, #0
 8013e42:	f43f ae89 	beq.w	8013b58 <_strtod_l+0x490>
 8013e46:	2f00      	cmp	r7, #0
 8013e48:	dd08      	ble.n	8013e5c <_strtod_l+0x794>
 8013e4a:	9905      	ldr	r1, [sp, #20]
 8013e4c:	463a      	mov	r2, r7
 8013e4e:	4620      	mov	r0, r4
 8013e50:	f001 ff2e 	bl	8015cb0 <__lshift>
 8013e54:	9005      	str	r0, [sp, #20]
 8013e56:	2800      	cmp	r0, #0
 8013e58:	f43f ae7e 	beq.w	8013b58 <_strtod_l+0x490>
 8013e5c:	f1b9 0f00 	cmp.w	r9, #0
 8013e60:	dd08      	ble.n	8013e74 <_strtod_l+0x7ac>
 8013e62:	4631      	mov	r1, r6
 8013e64:	464a      	mov	r2, r9
 8013e66:	4620      	mov	r0, r4
 8013e68:	f001 ff22 	bl	8015cb0 <__lshift>
 8013e6c:	4606      	mov	r6, r0
 8013e6e:	2800      	cmp	r0, #0
 8013e70:	f43f ae72 	beq.w	8013b58 <_strtod_l+0x490>
 8013e74:	9a05      	ldr	r2, [sp, #20]
 8013e76:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013e78:	4620      	mov	r0, r4
 8013e7a:	f001 ffa5 	bl	8015dc8 <__mdiff>
 8013e7e:	4605      	mov	r5, r0
 8013e80:	2800      	cmp	r0, #0
 8013e82:	f43f ae69 	beq.w	8013b58 <_strtod_l+0x490>
 8013e86:	68c3      	ldr	r3, [r0, #12]
 8013e88:	930b      	str	r3, [sp, #44]	; 0x2c
 8013e8a:	2300      	movs	r3, #0
 8013e8c:	60c3      	str	r3, [r0, #12]
 8013e8e:	4631      	mov	r1, r6
 8013e90:	f001 ff7e 	bl	8015d90 <__mcmp>
 8013e94:	2800      	cmp	r0, #0
 8013e96:	da60      	bge.n	8013f5a <_strtod_l+0x892>
 8013e98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013e9a:	ea53 030a 	orrs.w	r3, r3, sl
 8013e9e:	f040 8082 	bne.w	8013fa6 <_strtod_l+0x8de>
 8013ea2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d17d      	bne.n	8013fa6 <_strtod_l+0x8de>
 8013eaa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013eae:	0d1b      	lsrs	r3, r3, #20
 8013eb0:	051b      	lsls	r3, r3, #20
 8013eb2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8013eb6:	d976      	bls.n	8013fa6 <_strtod_l+0x8de>
 8013eb8:	696b      	ldr	r3, [r5, #20]
 8013eba:	b913      	cbnz	r3, 8013ec2 <_strtod_l+0x7fa>
 8013ebc:	692b      	ldr	r3, [r5, #16]
 8013ebe:	2b01      	cmp	r3, #1
 8013ec0:	dd71      	ble.n	8013fa6 <_strtod_l+0x8de>
 8013ec2:	4629      	mov	r1, r5
 8013ec4:	2201      	movs	r2, #1
 8013ec6:	4620      	mov	r0, r4
 8013ec8:	f001 fef2 	bl	8015cb0 <__lshift>
 8013ecc:	4631      	mov	r1, r6
 8013ece:	4605      	mov	r5, r0
 8013ed0:	f001 ff5e 	bl	8015d90 <__mcmp>
 8013ed4:	2800      	cmp	r0, #0
 8013ed6:	dd66      	ble.n	8013fa6 <_strtod_l+0x8de>
 8013ed8:	9904      	ldr	r1, [sp, #16]
 8013eda:	4a53      	ldr	r2, [pc, #332]	; (8014028 <_strtod_l+0x960>)
 8013edc:	465b      	mov	r3, fp
 8013ede:	2900      	cmp	r1, #0
 8013ee0:	f000 8081 	beq.w	8013fe6 <_strtod_l+0x91e>
 8013ee4:	ea02 010b 	and.w	r1, r2, fp
 8013ee8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8013eec:	dc7b      	bgt.n	8013fe6 <_strtod_l+0x91e>
 8013eee:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8013ef2:	f77f aea9 	ble.w	8013c48 <_strtod_l+0x580>
 8013ef6:	4b4d      	ldr	r3, [pc, #308]	; (801402c <_strtod_l+0x964>)
 8013ef8:	4650      	mov	r0, sl
 8013efa:	4659      	mov	r1, fp
 8013efc:	2200      	movs	r2, #0
 8013efe:	f7ec fb93 	bl	8000628 <__aeabi_dmul>
 8013f02:	460b      	mov	r3, r1
 8013f04:	4303      	orrs	r3, r0
 8013f06:	bf08      	it	eq
 8013f08:	2322      	moveq	r3, #34	; 0x22
 8013f0a:	4682      	mov	sl, r0
 8013f0c:	468b      	mov	fp, r1
 8013f0e:	bf08      	it	eq
 8013f10:	6023      	streq	r3, [r4, #0]
 8013f12:	e62b      	b.n	8013b6c <_strtod_l+0x4a4>
 8013f14:	f04f 32ff 	mov.w	r2, #4294967295
 8013f18:	fa02 f303 	lsl.w	r3, r2, r3
 8013f1c:	ea03 0a0a 	and.w	sl, r3, sl
 8013f20:	e6e3      	b.n	8013cea <_strtod_l+0x622>
 8013f22:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8013f26:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8013f2a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8013f2e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8013f32:	fa01 f308 	lsl.w	r3, r1, r8
 8013f36:	9308      	str	r3, [sp, #32]
 8013f38:	910d      	str	r1, [sp, #52]	; 0x34
 8013f3a:	e746      	b.n	8013dca <_strtod_l+0x702>
 8013f3c:	2300      	movs	r3, #0
 8013f3e:	9308      	str	r3, [sp, #32]
 8013f40:	2301      	movs	r3, #1
 8013f42:	930d      	str	r3, [sp, #52]	; 0x34
 8013f44:	e741      	b.n	8013dca <_strtod_l+0x702>
 8013f46:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013f48:	4642      	mov	r2, r8
 8013f4a:	4620      	mov	r0, r4
 8013f4c:	f001 feb0 	bl	8015cb0 <__lshift>
 8013f50:	9018      	str	r0, [sp, #96]	; 0x60
 8013f52:	2800      	cmp	r0, #0
 8013f54:	f47f af6b 	bne.w	8013e2e <_strtod_l+0x766>
 8013f58:	e5fe      	b.n	8013b58 <_strtod_l+0x490>
 8013f5a:	465f      	mov	r7, fp
 8013f5c:	d16e      	bne.n	801403c <_strtod_l+0x974>
 8013f5e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013f60:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013f64:	b342      	cbz	r2, 8013fb8 <_strtod_l+0x8f0>
 8013f66:	4a32      	ldr	r2, [pc, #200]	; (8014030 <_strtod_l+0x968>)
 8013f68:	4293      	cmp	r3, r2
 8013f6a:	d128      	bne.n	8013fbe <_strtod_l+0x8f6>
 8013f6c:	9b04      	ldr	r3, [sp, #16]
 8013f6e:	4651      	mov	r1, sl
 8013f70:	b1eb      	cbz	r3, 8013fae <_strtod_l+0x8e6>
 8013f72:	4b2d      	ldr	r3, [pc, #180]	; (8014028 <_strtod_l+0x960>)
 8013f74:	403b      	ands	r3, r7
 8013f76:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8013f7e:	d819      	bhi.n	8013fb4 <_strtod_l+0x8ec>
 8013f80:	0d1b      	lsrs	r3, r3, #20
 8013f82:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013f86:	fa02 f303 	lsl.w	r3, r2, r3
 8013f8a:	4299      	cmp	r1, r3
 8013f8c:	d117      	bne.n	8013fbe <_strtod_l+0x8f6>
 8013f8e:	4b29      	ldr	r3, [pc, #164]	; (8014034 <_strtod_l+0x96c>)
 8013f90:	429f      	cmp	r7, r3
 8013f92:	d102      	bne.n	8013f9a <_strtod_l+0x8d2>
 8013f94:	3101      	adds	r1, #1
 8013f96:	f43f addf 	beq.w	8013b58 <_strtod_l+0x490>
 8013f9a:	4b23      	ldr	r3, [pc, #140]	; (8014028 <_strtod_l+0x960>)
 8013f9c:	403b      	ands	r3, r7
 8013f9e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8013fa2:	f04f 0a00 	mov.w	sl, #0
 8013fa6:	9b04      	ldr	r3, [sp, #16]
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	d1a4      	bne.n	8013ef6 <_strtod_l+0x82e>
 8013fac:	e5de      	b.n	8013b6c <_strtod_l+0x4a4>
 8013fae:	f04f 33ff 	mov.w	r3, #4294967295
 8013fb2:	e7ea      	b.n	8013f8a <_strtod_l+0x8c2>
 8013fb4:	4613      	mov	r3, r2
 8013fb6:	e7e8      	b.n	8013f8a <_strtod_l+0x8c2>
 8013fb8:	ea53 030a 	orrs.w	r3, r3, sl
 8013fbc:	d08c      	beq.n	8013ed8 <_strtod_l+0x810>
 8013fbe:	9b08      	ldr	r3, [sp, #32]
 8013fc0:	b1db      	cbz	r3, 8013ffa <_strtod_l+0x932>
 8013fc2:	423b      	tst	r3, r7
 8013fc4:	d0ef      	beq.n	8013fa6 <_strtod_l+0x8de>
 8013fc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013fc8:	9a04      	ldr	r2, [sp, #16]
 8013fca:	4650      	mov	r0, sl
 8013fcc:	4659      	mov	r1, fp
 8013fce:	b1c3      	cbz	r3, 8014002 <_strtod_l+0x93a>
 8013fd0:	f7ff fb5c 	bl	801368c <sulp>
 8013fd4:	4602      	mov	r2, r0
 8013fd6:	460b      	mov	r3, r1
 8013fd8:	ec51 0b18 	vmov	r0, r1, d8
 8013fdc:	f7ec f96e 	bl	80002bc <__adddf3>
 8013fe0:	4682      	mov	sl, r0
 8013fe2:	468b      	mov	fp, r1
 8013fe4:	e7df      	b.n	8013fa6 <_strtod_l+0x8de>
 8013fe6:	4013      	ands	r3, r2
 8013fe8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8013fec:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8013ff0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8013ff4:	f04f 3aff 	mov.w	sl, #4294967295
 8013ff8:	e7d5      	b.n	8013fa6 <_strtod_l+0x8de>
 8013ffa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013ffc:	ea13 0f0a 	tst.w	r3, sl
 8014000:	e7e0      	b.n	8013fc4 <_strtod_l+0x8fc>
 8014002:	f7ff fb43 	bl	801368c <sulp>
 8014006:	4602      	mov	r2, r0
 8014008:	460b      	mov	r3, r1
 801400a:	ec51 0b18 	vmov	r0, r1, d8
 801400e:	f7ec f953 	bl	80002b8 <__aeabi_dsub>
 8014012:	2200      	movs	r2, #0
 8014014:	2300      	movs	r3, #0
 8014016:	4682      	mov	sl, r0
 8014018:	468b      	mov	fp, r1
 801401a:	f7ec fd6d 	bl	8000af8 <__aeabi_dcmpeq>
 801401e:	2800      	cmp	r0, #0
 8014020:	d0c1      	beq.n	8013fa6 <_strtod_l+0x8de>
 8014022:	e611      	b.n	8013c48 <_strtod_l+0x580>
 8014024:	fffffc02 	.word	0xfffffc02
 8014028:	7ff00000 	.word	0x7ff00000
 801402c:	39500000 	.word	0x39500000
 8014030:	000fffff 	.word	0x000fffff
 8014034:	7fefffff 	.word	0x7fefffff
 8014038:	08018be8 	.word	0x08018be8
 801403c:	4631      	mov	r1, r6
 801403e:	4628      	mov	r0, r5
 8014040:	f002 f824 	bl	801608c <__ratio>
 8014044:	ec59 8b10 	vmov	r8, r9, d0
 8014048:	ee10 0a10 	vmov	r0, s0
 801404c:	2200      	movs	r2, #0
 801404e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014052:	4649      	mov	r1, r9
 8014054:	f7ec fd64 	bl	8000b20 <__aeabi_dcmple>
 8014058:	2800      	cmp	r0, #0
 801405a:	d07a      	beq.n	8014152 <_strtod_l+0xa8a>
 801405c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801405e:	2b00      	cmp	r3, #0
 8014060:	d04a      	beq.n	80140f8 <_strtod_l+0xa30>
 8014062:	4b95      	ldr	r3, [pc, #596]	; (80142b8 <_strtod_l+0xbf0>)
 8014064:	2200      	movs	r2, #0
 8014066:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801406a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80142b8 <_strtod_l+0xbf0>
 801406e:	f04f 0800 	mov.w	r8, #0
 8014072:	4b92      	ldr	r3, [pc, #584]	; (80142bc <_strtod_l+0xbf4>)
 8014074:	403b      	ands	r3, r7
 8014076:	930d      	str	r3, [sp, #52]	; 0x34
 8014078:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801407a:	4b91      	ldr	r3, [pc, #580]	; (80142c0 <_strtod_l+0xbf8>)
 801407c:	429a      	cmp	r2, r3
 801407e:	f040 80b0 	bne.w	80141e2 <_strtod_l+0xb1a>
 8014082:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014086:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801408a:	ec4b ab10 	vmov	d0, sl, fp
 801408e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014092:	f001 ff23 	bl	8015edc <__ulp>
 8014096:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801409a:	ec53 2b10 	vmov	r2, r3, d0
 801409e:	f7ec fac3 	bl	8000628 <__aeabi_dmul>
 80140a2:	4652      	mov	r2, sl
 80140a4:	465b      	mov	r3, fp
 80140a6:	f7ec f909 	bl	80002bc <__adddf3>
 80140aa:	460b      	mov	r3, r1
 80140ac:	4983      	ldr	r1, [pc, #524]	; (80142bc <_strtod_l+0xbf4>)
 80140ae:	4a85      	ldr	r2, [pc, #532]	; (80142c4 <_strtod_l+0xbfc>)
 80140b0:	4019      	ands	r1, r3
 80140b2:	4291      	cmp	r1, r2
 80140b4:	4682      	mov	sl, r0
 80140b6:	d960      	bls.n	801417a <_strtod_l+0xab2>
 80140b8:	ee18 3a90 	vmov	r3, s17
 80140bc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80140c0:	4293      	cmp	r3, r2
 80140c2:	d104      	bne.n	80140ce <_strtod_l+0xa06>
 80140c4:	ee18 3a10 	vmov	r3, s16
 80140c8:	3301      	adds	r3, #1
 80140ca:	f43f ad45 	beq.w	8013b58 <_strtod_l+0x490>
 80140ce:	f8df b200 	ldr.w	fp, [pc, #512]	; 80142d0 <_strtod_l+0xc08>
 80140d2:	f04f 3aff 	mov.w	sl, #4294967295
 80140d6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80140d8:	4620      	mov	r0, r4
 80140da:	f001 fbcd 	bl	8015878 <_Bfree>
 80140de:	9905      	ldr	r1, [sp, #20]
 80140e0:	4620      	mov	r0, r4
 80140e2:	f001 fbc9 	bl	8015878 <_Bfree>
 80140e6:	4631      	mov	r1, r6
 80140e8:	4620      	mov	r0, r4
 80140ea:	f001 fbc5 	bl	8015878 <_Bfree>
 80140ee:	4629      	mov	r1, r5
 80140f0:	4620      	mov	r0, r4
 80140f2:	f001 fbc1 	bl	8015878 <_Bfree>
 80140f6:	e61a      	b.n	8013d2e <_strtod_l+0x666>
 80140f8:	f1ba 0f00 	cmp.w	sl, #0
 80140fc:	d11b      	bne.n	8014136 <_strtod_l+0xa6e>
 80140fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014102:	b9f3      	cbnz	r3, 8014142 <_strtod_l+0xa7a>
 8014104:	4b6c      	ldr	r3, [pc, #432]	; (80142b8 <_strtod_l+0xbf0>)
 8014106:	2200      	movs	r2, #0
 8014108:	4640      	mov	r0, r8
 801410a:	4649      	mov	r1, r9
 801410c:	f7ec fcfe 	bl	8000b0c <__aeabi_dcmplt>
 8014110:	b9d0      	cbnz	r0, 8014148 <_strtod_l+0xa80>
 8014112:	4640      	mov	r0, r8
 8014114:	4649      	mov	r1, r9
 8014116:	4b6c      	ldr	r3, [pc, #432]	; (80142c8 <_strtod_l+0xc00>)
 8014118:	2200      	movs	r2, #0
 801411a:	f7ec fa85 	bl	8000628 <__aeabi_dmul>
 801411e:	4680      	mov	r8, r0
 8014120:	4689      	mov	r9, r1
 8014122:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014126:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 801412a:	9315      	str	r3, [sp, #84]	; 0x54
 801412c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8014130:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014134:	e79d      	b.n	8014072 <_strtod_l+0x9aa>
 8014136:	f1ba 0f01 	cmp.w	sl, #1
 801413a:	d102      	bne.n	8014142 <_strtod_l+0xa7a>
 801413c:	2f00      	cmp	r7, #0
 801413e:	f43f ad83 	beq.w	8013c48 <_strtod_l+0x580>
 8014142:	4b62      	ldr	r3, [pc, #392]	; (80142cc <_strtod_l+0xc04>)
 8014144:	2200      	movs	r2, #0
 8014146:	e78e      	b.n	8014066 <_strtod_l+0x99e>
 8014148:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80142c8 <_strtod_l+0xc00>
 801414c:	f04f 0800 	mov.w	r8, #0
 8014150:	e7e7      	b.n	8014122 <_strtod_l+0xa5a>
 8014152:	4b5d      	ldr	r3, [pc, #372]	; (80142c8 <_strtod_l+0xc00>)
 8014154:	4640      	mov	r0, r8
 8014156:	4649      	mov	r1, r9
 8014158:	2200      	movs	r2, #0
 801415a:	f7ec fa65 	bl	8000628 <__aeabi_dmul>
 801415e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014160:	4680      	mov	r8, r0
 8014162:	4689      	mov	r9, r1
 8014164:	b933      	cbnz	r3, 8014174 <_strtod_l+0xaac>
 8014166:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801416a:	900e      	str	r0, [sp, #56]	; 0x38
 801416c:	930f      	str	r3, [sp, #60]	; 0x3c
 801416e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8014172:	e7dd      	b.n	8014130 <_strtod_l+0xa68>
 8014174:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8014178:	e7f9      	b.n	801416e <_strtod_l+0xaa6>
 801417a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801417e:	9b04      	ldr	r3, [sp, #16]
 8014180:	2b00      	cmp	r3, #0
 8014182:	d1a8      	bne.n	80140d6 <_strtod_l+0xa0e>
 8014184:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014188:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801418a:	0d1b      	lsrs	r3, r3, #20
 801418c:	051b      	lsls	r3, r3, #20
 801418e:	429a      	cmp	r2, r3
 8014190:	d1a1      	bne.n	80140d6 <_strtod_l+0xa0e>
 8014192:	4640      	mov	r0, r8
 8014194:	4649      	mov	r1, r9
 8014196:	f7ec fdf7 	bl	8000d88 <__aeabi_d2lz>
 801419a:	f7ec fa17 	bl	80005cc <__aeabi_l2d>
 801419e:	4602      	mov	r2, r0
 80141a0:	460b      	mov	r3, r1
 80141a2:	4640      	mov	r0, r8
 80141a4:	4649      	mov	r1, r9
 80141a6:	f7ec f887 	bl	80002b8 <__aeabi_dsub>
 80141aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80141ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80141b0:	ea43 030a 	orr.w	r3, r3, sl
 80141b4:	4313      	orrs	r3, r2
 80141b6:	4680      	mov	r8, r0
 80141b8:	4689      	mov	r9, r1
 80141ba:	d055      	beq.n	8014268 <_strtod_l+0xba0>
 80141bc:	a336      	add	r3, pc, #216	; (adr r3, 8014298 <_strtod_l+0xbd0>)
 80141be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141c2:	f7ec fca3 	bl	8000b0c <__aeabi_dcmplt>
 80141c6:	2800      	cmp	r0, #0
 80141c8:	f47f acd0 	bne.w	8013b6c <_strtod_l+0x4a4>
 80141cc:	a334      	add	r3, pc, #208	; (adr r3, 80142a0 <_strtod_l+0xbd8>)
 80141ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141d2:	4640      	mov	r0, r8
 80141d4:	4649      	mov	r1, r9
 80141d6:	f7ec fcb7 	bl	8000b48 <__aeabi_dcmpgt>
 80141da:	2800      	cmp	r0, #0
 80141dc:	f43f af7b 	beq.w	80140d6 <_strtod_l+0xa0e>
 80141e0:	e4c4      	b.n	8013b6c <_strtod_l+0x4a4>
 80141e2:	9b04      	ldr	r3, [sp, #16]
 80141e4:	b333      	cbz	r3, 8014234 <_strtod_l+0xb6c>
 80141e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80141e8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80141ec:	d822      	bhi.n	8014234 <_strtod_l+0xb6c>
 80141ee:	a32e      	add	r3, pc, #184	; (adr r3, 80142a8 <_strtod_l+0xbe0>)
 80141f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141f4:	4640      	mov	r0, r8
 80141f6:	4649      	mov	r1, r9
 80141f8:	f7ec fc92 	bl	8000b20 <__aeabi_dcmple>
 80141fc:	b1a0      	cbz	r0, 8014228 <_strtod_l+0xb60>
 80141fe:	4649      	mov	r1, r9
 8014200:	4640      	mov	r0, r8
 8014202:	f7ec fce9 	bl	8000bd8 <__aeabi_d2uiz>
 8014206:	2801      	cmp	r0, #1
 8014208:	bf38      	it	cc
 801420a:	2001      	movcc	r0, #1
 801420c:	f7ec f992 	bl	8000534 <__aeabi_ui2d>
 8014210:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014212:	4680      	mov	r8, r0
 8014214:	4689      	mov	r9, r1
 8014216:	bb23      	cbnz	r3, 8014262 <_strtod_l+0xb9a>
 8014218:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801421c:	9010      	str	r0, [sp, #64]	; 0x40
 801421e:	9311      	str	r3, [sp, #68]	; 0x44
 8014220:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014224:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801422a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801422c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8014230:	1a9b      	subs	r3, r3, r2
 8014232:	9309      	str	r3, [sp, #36]	; 0x24
 8014234:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014238:	eeb0 0a48 	vmov.f32	s0, s16
 801423c:	eef0 0a68 	vmov.f32	s1, s17
 8014240:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014244:	f001 fe4a 	bl	8015edc <__ulp>
 8014248:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801424c:	ec53 2b10 	vmov	r2, r3, d0
 8014250:	f7ec f9ea 	bl	8000628 <__aeabi_dmul>
 8014254:	ec53 2b18 	vmov	r2, r3, d8
 8014258:	f7ec f830 	bl	80002bc <__adddf3>
 801425c:	4682      	mov	sl, r0
 801425e:	468b      	mov	fp, r1
 8014260:	e78d      	b.n	801417e <_strtod_l+0xab6>
 8014262:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8014266:	e7db      	b.n	8014220 <_strtod_l+0xb58>
 8014268:	a311      	add	r3, pc, #68	; (adr r3, 80142b0 <_strtod_l+0xbe8>)
 801426a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801426e:	f7ec fc4d 	bl	8000b0c <__aeabi_dcmplt>
 8014272:	e7b2      	b.n	80141da <_strtod_l+0xb12>
 8014274:	2300      	movs	r3, #0
 8014276:	930a      	str	r3, [sp, #40]	; 0x28
 8014278:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801427a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801427c:	6013      	str	r3, [r2, #0]
 801427e:	f7ff ba6b 	b.w	8013758 <_strtod_l+0x90>
 8014282:	2a65      	cmp	r2, #101	; 0x65
 8014284:	f43f ab5f 	beq.w	8013946 <_strtod_l+0x27e>
 8014288:	2a45      	cmp	r2, #69	; 0x45
 801428a:	f43f ab5c 	beq.w	8013946 <_strtod_l+0x27e>
 801428e:	2301      	movs	r3, #1
 8014290:	f7ff bb94 	b.w	80139bc <_strtod_l+0x2f4>
 8014294:	f3af 8000 	nop.w
 8014298:	94a03595 	.word	0x94a03595
 801429c:	3fdfffff 	.word	0x3fdfffff
 80142a0:	35afe535 	.word	0x35afe535
 80142a4:	3fe00000 	.word	0x3fe00000
 80142a8:	ffc00000 	.word	0xffc00000
 80142ac:	41dfffff 	.word	0x41dfffff
 80142b0:	94a03595 	.word	0x94a03595
 80142b4:	3fcfffff 	.word	0x3fcfffff
 80142b8:	3ff00000 	.word	0x3ff00000
 80142bc:	7ff00000 	.word	0x7ff00000
 80142c0:	7fe00000 	.word	0x7fe00000
 80142c4:	7c9fffff 	.word	0x7c9fffff
 80142c8:	3fe00000 	.word	0x3fe00000
 80142cc:	bff00000 	.word	0xbff00000
 80142d0:	7fefffff 	.word	0x7fefffff

080142d4 <_strtod_r>:
 80142d4:	4b01      	ldr	r3, [pc, #4]	; (80142dc <_strtod_r+0x8>)
 80142d6:	f7ff b9f7 	b.w	80136c8 <_strtod_l>
 80142da:	bf00      	nop
 80142dc:	2000010c 	.word	0x2000010c

080142e0 <_strtol_l.constprop.0>:
 80142e0:	2b01      	cmp	r3, #1
 80142e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80142e6:	d001      	beq.n	80142ec <_strtol_l.constprop.0+0xc>
 80142e8:	2b24      	cmp	r3, #36	; 0x24
 80142ea:	d906      	bls.n	80142fa <_strtol_l.constprop.0+0x1a>
 80142ec:	f7fe faee 	bl	80128cc <__errno>
 80142f0:	2316      	movs	r3, #22
 80142f2:	6003      	str	r3, [r0, #0]
 80142f4:	2000      	movs	r0, #0
 80142f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80142fa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80143e0 <_strtol_l.constprop.0+0x100>
 80142fe:	460d      	mov	r5, r1
 8014300:	462e      	mov	r6, r5
 8014302:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014306:	f814 700c 	ldrb.w	r7, [r4, ip]
 801430a:	f017 0708 	ands.w	r7, r7, #8
 801430e:	d1f7      	bne.n	8014300 <_strtol_l.constprop.0+0x20>
 8014310:	2c2d      	cmp	r4, #45	; 0x2d
 8014312:	d132      	bne.n	801437a <_strtol_l.constprop.0+0x9a>
 8014314:	782c      	ldrb	r4, [r5, #0]
 8014316:	2701      	movs	r7, #1
 8014318:	1cb5      	adds	r5, r6, #2
 801431a:	2b00      	cmp	r3, #0
 801431c:	d05b      	beq.n	80143d6 <_strtol_l.constprop.0+0xf6>
 801431e:	2b10      	cmp	r3, #16
 8014320:	d109      	bne.n	8014336 <_strtol_l.constprop.0+0x56>
 8014322:	2c30      	cmp	r4, #48	; 0x30
 8014324:	d107      	bne.n	8014336 <_strtol_l.constprop.0+0x56>
 8014326:	782c      	ldrb	r4, [r5, #0]
 8014328:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801432c:	2c58      	cmp	r4, #88	; 0x58
 801432e:	d14d      	bne.n	80143cc <_strtol_l.constprop.0+0xec>
 8014330:	786c      	ldrb	r4, [r5, #1]
 8014332:	2310      	movs	r3, #16
 8014334:	3502      	adds	r5, #2
 8014336:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801433a:	f108 38ff 	add.w	r8, r8, #4294967295
 801433e:	f04f 0c00 	mov.w	ip, #0
 8014342:	fbb8 f9f3 	udiv	r9, r8, r3
 8014346:	4666      	mov	r6, ip
 8014348:	fb03 8a19 	mls	sl, r3, r9, r8
 801434c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8014350:	f1be 0f09 	cmp.w	lr, #9
 8014354:	d816      	bhi.n	8014384 <_strtol_l.constprop.0+0xa4>
 8014356:	4674      	mov	r4, lr
 8014358:	42a3      	cmp	r3, r4
 801435a:	dd24      	ble.n	80143a6 <_strtol_l.constprop.0+0xc6>
 801435c:	f1bc 0f00 	cmp.w	ip, #0
 8014360:	db1e      	blt.n	80143a0 <_strtol_l.constprop.0+0xc0>
 8014362:	45b1      	cmp	r9, r6
 8014364:	d31c      	bcc.n	80143a0 <_strtol_l.constprop.0+0xc0>
 8014366:	d101      	bne.n	801436c <_strtol_l.constprop.0+0x8c>
 8014368:	45a2      	cmp	sl, r4
 801436a:	db19      	blt.n	80143a0 <_strtol_l.constprop.0+0xc0>
 801436c:	fb06 4603 	mla	r6, r6, r3, r4
 8014370:	f04f 0c01 	mov.w	ip, #1
 8014374:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014378:	e7e8      	b.n	801434c <_strtol_l.constprop.0+0x6c>
 801437a:	2c2b      	cmp	r4, #43	; 0x2b
 801437c:	bf04      	itt	eq
 801437e:	782c      	ldrbeq	r4, [r5, #0]
 8014380:	1cb5      	addeq	r5, r6, #2
 8014382:	e7ca      	b.n	801431a <_strtol_l.constprop.0+0x3a>
 8014384:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8014388:	f1be 0f19 	cmp.w	lr, #25
 801438c:	d801      	bhi.n	8014392 <_strtol_l.constprop.0+0xb2>
 801438e:	3c37      	subs	r4, #55	; 0x37
 8014390:	e7e2      	b.n	8014358 <_strtol_l.constprop.0+0x78>
 8014392:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8014396:	f1be 0f19 	cmp.w	lr, #25
 801439a:	d804      	bhi.n	80143a6 <_strtol_l.constprop.0+0xc6>
 801439c:	3c57      	subs	r4, #87	; 0x57
 801439e:	e7db      	b.n	8014358 <_strtol_l.constprop.0+0x78>
 80143a0:	f04f 3cff 	mov.w	ip, #4294967295
 80143a4:	e7e6      	b.n	8014374 <_strtol_l.constprop.0+0x94>
 80143a6:	f1bc 0f00 	cmp.w	ip, #0
 80143aa:	da05      	bge.n	80143b8 <_strtol_l.constprop.0+0xd8>
 80143ac:	2322      	movs	r3, #34	; 0x22
 80143ae:	6003      	str	r3, [r0, #0]
 80143b0:	4646      	mov	r6, r8
 80143b2:	b942      	cbnz	r2, 80143c6 <_strtol_l.constprop.0+0xe6>
 80143b4:	4630      	mov	r0, r6
 80143b6:	e79e      	b.n	80142f6 <_strtol_l.constprop.0+0x16>
 80143b8:	b107      	cbz	r7, 80143bc <_strtol_l.constprop.0+0xdc>
 80143ba:	4276      	negs	r6, r6
 80143bc:	2a00      	cmp	r2, #0
 80143be:	d0f9      	beq.n	80143b4 <_strtol_l.constprop.0+0xd4>
 80143c0:	f1bc 0f00 	cmp.w	ip, #0
 80143c4:	d000      	beq.n	80143c8 <_strtol_l.constprop.0+0xe8>
 80143c6:	1e69      	subs	r1, r5, #1
 80143c8:	6011      	str	r1, [r2, #0]
 80143ca:	e7f3      	b.n	80143b4 <_strtol_l.constprop.0+0xd4>
 80143cc:	2430      	movs	r4, #48	; 0x30
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d1b1      	bne.n	8014336 <_strtol_l.constprop.0+0x56>
 80143d2:	2308      	movs	r3, #8
 80143d4:	e7af      	b.n	8014336 <_strtol_l.constprop.0+0x56>
 80143d6:	2c30      	cmp	r4, #48	; 0x30
 80143d8:	d0a5      	beq.n	8014326 <_strtol_l.constprop.0+0x46>
 80143da:	230a      	movs	r3, #10
 80143dc:	e7ab      	b.n	8014336 <_strtol_l.constprop.0+0x56>
 80143de:	bf00      	nop
 80143e0:	08018c11 	.word	0x08018c11

080143e4 <_strtol_r>:
 80143e4:	f7ff bf7c 	b.w	80142e0 <_strtol_l.constprop.0>

080143e8 <quorem>:
 80143e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143ec:	6903      	ldr	r3, [r0, #16]
 80143ee:	690c      	ldr	r4, [r1, #16]
 80143f0:	42a3      	cmp	r3, r4
 80143f2:	4607      	mov	r7, r0
 80143f4:	f2c0 8081 	blt.w	80144fa <quorem+0x112>
 80143f8:	3c01      	subs	r4, #1
 80143fa:	f101 0814 	add.w	r8, r1, #20
 80143fe:	f100 0514 	add.w	r5, r0, #20
 8014402:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014406:	9301      	str	r3, [sp, #4]
 8014408:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801440c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014410:	3301      	adds	r3, #1
 8014412:	429a      	cmp	r2, r3
 8014414:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014418:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801441c:	fbb2 f6f3 	udiv	r6, r2, r3
 8014420:	d331      	bcc.n	8014486 <quorem+0x9e>
 8014422:	f04f 0e00 	mov.w	lr, #0
 8014426:	4640      	mov	r0, r8
 8014428:	46ac      	mov	ip, r5
 801442a:	46f2      	mov	sl, lr
 801442c:	f850 2b04 	ldr.w	r2, [r0], #4
 8014430:	b293      	uxth	r3, r2
 8014432:	fb06 e303 	mla	r3, r6, r3, lr
 8014436:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801443a:	b29b      	uxth	r3, r3
 801443c:	ebaa 0303 	sub.w	r3, sl, r3
 8014440:	f8dc a000 	ldr.w	sl, [ip]
 8014444:	0c12      	lsrs	r2, r2, #16
 8014446:	fa13 f38a 	uxtah	r3, r3, sl
 801444a:	fb06 e202 	mla	r2, r6, r2, lr
 801444e:	9300      	str	r3, [sp, #0]
 8014450:	9b00      	ldr	r3, [sp, #0]
 8014452:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8014456:	b292      	uxth	r2, r2
 8014458:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801445c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014460:	f8bd 3000 	ldrh.w	r3, [sp]
 8014464:	4581      	cmp	r9, r0
 8014466:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801446a:	f84c 3b04 	str.w	r3, [ip], #4
 801446e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8014472:	d2db      	bcs.n	801442c <quorem+0x44>
 8014474:	f855 300b 	ldr.w	r3, [r5, fp]
 8014478:	b92b      	cbnz	r3, 8014486 <quorem+0x9e>
 801447a:	9b01      	ldr	r3, [sp, #4]
 801447c:	3b04      	subs	r3, #4
 801447e:	429d      	cmp	r5, r3
 8014480:	461a      	mov	r2, r3
 8014482:	d32e      	bcc.n	80144e2 <quorem+0xfa>
 8014484:	613c      	str	r4, [r7, #16]
 8014486:	4638      	mov	r0, r7
 8014488:	f001 fc82 	bl	8015d90 <__mcmp>
 801448c:	2800      	cmp	r0, #0
 801448e:	db24      	blt.n	80144da <quorem+0xf2>
 8014490:	3601      	adds	r6, #1
 8014492:	4628      	mov	r0, r5
 8014494:	f04f 0c00 	mov.w	ip, #0
 8014498:	f858 2b04 	ldr.w	r2, [r8], #4
 801449c:	f8d0 e000 	ldr.w	lr, [r0]
 80144a0:	b293      	uxth	r3, r2
 80144a2:	ebac 0303 	sub.w	r3, ip, r3
 80144a6:	0c12      	lsrs	r2, r2, #16
 80144a8:	fa13 f38e 	uxtah	r3, r3, lr
 80144ac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80144b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80144b4:	b29b      	uxth	r3, r3
 80144b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80144ba:	45c1      	cmp	r9, r8
 80144bc:	f840 3b04 	str.w	r3, [r0], #4
 80144c0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80144c4:	d2e8      	bcs.n	8014498 <quorem+0xb0>
 80144c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80144ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80144ce:	b922      	cbnz	r2, 80144da <quorem+0xf2>
 80144d0:	3b04      	subs	r3, #4
 80144d2:	429d      	cmp	r5, r3
 80144d4:	461a      	mov	r2, r3
 80144d6:	d30a      	bcc.n	80144ee <quorem+0x106>
 80144d8:	613c      	str	r4, [r7, #16]
 80144da:	4630      	mov	r0, r6
 80144dc:	b003      	add	sp, #12
 80144de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144e2:	6812      	ldr	r2, [r2, #0]
 80144e4:	3b04      	subs	r3, #4
 80144e6:	2a00      	cmp	r2, #0
 80144e8:	d1cc      	bne.n	8014484 <quorem+0x9c>
 80144ea:	3c01      	subs	r4, #1
 80144ec:	e7c7      	b.n	801447e <quorem+0x96>
 80144ee:	6812      	ldr	r2, [r2, #0]
 80144f0:	3b04      	subs	r3, #4
 80144f2:	2a00      	cmp	r2, #0
 80144f4:	d1f0      	bne.n	80144d8 <quorem+0xf0>
 80144f6:	3c01      	subs	r4, #1
 80144f8:	e7eb      	b.n	80144d2 <quorem+0xea>
 80144fa:	2000      	movs	r0, #0
 80144fc:	e7ee      	b.n	80144dc <quorem+0xf4>
	...

08014500 <_dtoa_r>:
 8014500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014504:	ed2d 8b04 	vpush	{d8-d9}
 8014508:	ec57 6b10 	vmov	r6, r7, d0
 801450c:	b093      	sub	sp, #76	; 0x4c
 801450e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014510:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8014514:	9106      	str	r1, [sp, #24]
 8014516:	ee10 aa10 	vmov	sl, s0
 801451a:	4604      	mov	r4, r0
 801451c:	9209      	str	r2, [sp, #36]	; 0x24
 801451e:	930c      	str	r3, [sp, #48]	; 0x30
 8014520:	46bb      	mov	fp, r7
 8014522:	b975      	cbnz	r5, 8014542 <_dtoa_r+0x42>
 8014524:	2010      	movs	r0, #16
 8014526:	f001 f94d 	bl	80157c4 <malloc>
 801452a:	4602      	mov	r2, r0
 801452c:	6260      	str	r0, [r4, #36]	; 0x24
 801452e:	b920      	cbnz	r0, 801453a <_dtoa_r+0x3a>
 8014530:	4ba7      	ldr	r3, [pc, #668]	; (80147d0 <_dtoa_r+0x2d0>)
 8014532:	21ea      	movs	r1, #234	; 0xea
 8014534:	48a7      	ldr	r0, [pc, #668]	; (80147d4 <_dtoa_r+0x2d4>)
 8014536:	f002 f8ad 	bl	8016694 <__assert_func>
 801453a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801453e:	6005      	str	r5, [r0, #0]
 8014540:	60c5      	str	r5, [r0, #12]
 8014542:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014544:	6819      	ldr	r1, [r3, #0]
 8014546:	b151      	cbz	r1, 801455e <_dtoa_r+0x5e>
 8014548:	685a      	ldr	r2, [r3, #4]
 801454a:	604a      	str	r2, [r1, #4]
 801454c:	2301      	movs	r3, #1
 801454e:	4093      	lsls	r3, r2
 8014550:	608b      	str	r3, [r1, #8]
 8014552:	4620      	mov	r0, r4
 8014554:	f001 f990 	bl	8015878 <_Bfree>
 8014558:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801455a:	2200      	movs	r2, #0
 801455c:	601a      	str	r2, [r3, #0]
 801455e:	1e3b      	subs	r3, r7, #0
 8014560:	bfaa      	itet	ge
 8014562:	2300      	movge	r3, #0
 8014564:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8014568:	f8c8 3000 	strge.w	r3, [r8]
 801456c:	4b9a      	ldr	r3, [pc, #616]	; (80147d8 <_dtoa_r+0x2d8>)
 801456e:	bfbc      	itt	lt
 8014570:	2201      	movlt	r2, #1
 8014572:	f8c8 2000 	strlt.w	r2, [r8]
 8014576:	ea33 030b 	bics.w	r3, r3, fp
 801457a:	d11b      	bne.n	80145b4 <_dtoa_r+0xb4>
 801457c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801457e:	f242 730f 	movw	r3, #9999	; 0x270f
 8014582:	6013      	str	r3, [r2, #0]
 8014584:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014588:	4333      	orrs	r3, r6
 801458a:	f000 8592 	beq.w	80150b2 <_dtoa_r+0xbb2>
 801458e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014590:	b963      	cbnz	r3, 80145ac <_dtoa_r+0xac>
 8014592:	4b92      	ldr	r3, [pc, #584]	; (80147dc <_dtoa_r+0x2dc>)
 8014594:	e022      	b.n	80145dc <_dtoa_r+0xdc>
 8014596:	4b92      	ldr	r3, [pc, #584]	; (80147e0 <_dtoa_r+0x2e0>)
 8014598:	9301      	str	r3, [sp, #4]
 801459a:	3308      	adds	r3, #8
 801459c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801459e:	6013      	str	r3, [r2, #0]
 80145a0:	9801      	ldr	r0, [sp, #4]
 80145a2:	b013      	add	sp, #76	; 0x4c
 80145a4:	ecbd 8b04 	vpop	{d8-d9}
 80145a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145ac:	4b8b      	ldr	r3, [pc, #556]	; (80147dc <_dtoa_r+0x2dc>)
 80145ae:	9301      	str	r3, [sp, #4]
 80145b0:	3303      	adds	r3, #3
 80145b2:	e7f3      	b.n	801459c <_dtoa_r+0x9c>
 80145b4:	2200      	movs	r2, #0
 80145b6:	2300      	movs	r3, #0
 80145b8:	4650      	mov	r0, sl
 80145ba:	4659      	mov	r1, fp
 80145bc:	f7ec fa9c 	bl	8000af8 <__aeabi_dcmpeq>
 80145c0:	ec4b ab19 	vmov	d9, sl, fp
 80145c4:	4680      	mov	r8, r0
 80145c6:	b158      	cbz	r0, 80145e0 <_dtoa_r+0xe0>
 80145c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80145ca:	2301      	movs	r3, #1
 80145cc:	6013      	str	r3, [r2, #0]
 80145ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	f000 856b 	beq.w	80150ac <_dtoa_r+0xbac>
 80145d6:	4883      	ldr	r0, [pc, #524]	; (80147e4 <_dtoa_r+0x2e4>)
 80145d8:	6018      	str	r0, [r3, #0]
 80145da:	1e43      	subs	r3, r0, #1
 80145dc:	9301      	str	r3, [sp, #4]
 80145de:	e7df      	b.n	80145a0 <_dtoa_r+0xa0>
 80145e0:	ec4b ab10 	vmov	d0, sl, fp
 80145e4:	aa10      	add	r2, sp, #64	; 0x40
 80145e6:	a911      	add	r1, sp, #68	; 0x44
 80145e8:	4620      	mov	r0, r4
 80145ea:	f001 fcf3 	bl	8015fd4 <__d2b>
 80145ee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80145f2:	ee08 0a10 	vmov	s16, r0
 80145f6:	2d00      	cmp	r5, #0
 80145f8:	f000 8084 	beq.w	8014704 <_dtoa_r+0x204>
 80145fc:	ee19 3a90 	vmov	r3, s19
 8014600:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014604:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8014608:	4656      	mov	r6, sl
 801460a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801460e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8014612:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8014616:	4b74      	ldr	r3, [pc, #464]	; (80147e8 <_dtoa_r+0x2e8>)
 8014618:	2200      	movs	r2, #0
 801461a:	4630      	mov	r0, r6
 801461c:	4639      	mov	r1, r7
 801461e:	f7eb fe4b 	bl	80002b8 <__aeabi_dsub>
 8014622:	a365      	add	r3, pc, #404	; (adr r3, 80147b8 <_dtoa_r+0x2b8>)
 8014624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014628:	f7eb fffe 	bl	8000628 <__aeabi_dmul>
 801462c:	a364      	add	r3, pc, #400	; (adr r3, 80147c0 <_dtoa_r+0x2c0>)
 801462e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014632:	f7eb fe43 	bl	80002bc <__adddf3>
 8014636:	4606      	mov	r6, r0
 8014638:	4628      	mov	r0, r5
 801463a:	460f      	mov	r7, r1
 801463c:	f7eb ff8a 	bl	8000554 <__aeabi_i2d>
 8014640:	a361      	add	r3, pc, #388	; (adr r3, 80147c8 <_dtoa_r+0x2c8>)
 8014642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014646:	f7eb ffef 	bl	8000628 <__aeabi_dmul>
 801464a:	4602      	mov	r2, r0
 801464c:	460b      	mov	r3, r1
 801464e:	4630      	mov	r0, r6
 8014650:	4639      	mov	r1, r7
 8014652:	f7eb fe33 	bl	80002bc <__adddf3>
 8014656:	4606      	mov	r6, r0
 8014658:	460f      	mov	r7, r1
 801465a:	f7ec fa95 	bl	8000b88 <__aeabi_d2iz>
 801465e:	2200      	movs	r2, #0
 8014660:	9000      	str	r0, [sp, #0]
 8014662:	2300      	movs	r3, #0
 8014664:	4630      	mov	r0, r6
 8014666:	4639      	mov	r1, r7
 8014668:	f7ec fa50 	bl	8000b0c <__aeabi_dcmplt>
 801466c:	b150      	cbz	r0, 8014684 <_dtoa_r+0x184>
 801466e:	9800      	ldr	r0, [sp, #0]
 8014670:	f7eb ff70 	bl	8000554 <__aeabi_i2d>
 8014674:	4632      	mov	r2, r6
 8014676:	463b      	mov	r3, r7
 8014678:	f7ec fa3e 	bl	8000af8 <__aeabi_dcmpeq>
 801467c:	b910      	cbnz	r0, 8014684 <_dtoa_r+0x184>
 801467e:	9b00      	ldr	r3, [sp, #0]
 8014680:	3b01      	subs	r3, #1
 8014682:	9300      	str	r3, [sp, #0]
 8014684:	9b00      	ldr	r3, [sp, #0]
 8014686:	2b16      	cmp	r3, #22
 8014688:	d85a      	bhi.n	8014740 <_dtoa_r+0x240>
 801468a:	9a00      	ldr	r2, [sp, #0]
 801468c:	4b57      	ldr	r3, [pc, #348]	; (80147ec <_dtoa_r+0x2ec>)
 801468e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014696:	ec51 0b19 	vmov	r0, r1, d9
 801469a:	f7ec fa37 	bl	8000b0c <__aeabi_dcmplt>
 801469e:	2800      	cmp	r0, #0
 80146a0:	d050      	beq.n	8014744 <_dtoa_r+0x244>
 80146a2:	9b00      	ldr	r3, [sp, #0]
 80146a4:	3b01      	subs	r3, #1
 80146a6:	9300      	str	r3, [sp, #0]
 80146a8:	2300      	movs	r3, #0
 80146aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80146ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80146ae:	1b5d      	subs	r5, r3, r5
 80146b0:	1e6b      	subs	r3, r5, #1
 80146b2:	9305      	str	r3, [sp, #20]
 80146b4:	bf45      	ittet	mi
 80146b6:	f1c5 0301 	rsbmi	r3, r5, #1
 80146ba:	9304      	strmi	r3, [sp, #16]
 80146bc:	2300      	movpl	r3, #0
 80146be:	2300      	movmi	r3, #0
 80146c0:	bf4c      	ite	mi
 80146c2:	9305      	strmi	r3, [sp, #20]
 80146c4:	9304      	strpl	r3, [sp, #16]
 80146c6:	9b00      	ldr	r3, [sp, #0]
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	db3d      	blt.n	8014748 <_dtoa_r+0x248>
 80146cc:	9b05      	ldr	r3, [sp, #20]
 80146ce:	9a00      	ldr	r2, [sp, #0]
 80146d0:	920a      	str	r2, [sp, #40]	; 0x28
 80146d2:	4413      	add	r3, r2
 80146d4:	9305      	str	r3, [sp, #20]
 80146d6:	2300      	movs	r3, #0
 80146d8:	9307      	str	r3, [sp, #28]
 80146da:	9b06      	ldr	r3, [sp, #24]
 80146dc:	2b09      	cmp	r3, #9
 80146de:	f200 8089 	bhi.w	80147f4 <_dtoa_r+0x2f4>
 80146e2:	2b05      	cmp	r3, #5
 80146e4:	bfc4      	itt	gt
 80146e6:	3b04      	subgt	r3, #4
 80146e8:	9306      	strgt	r3, [sp, #24]
 80146ea:	9b06      	ldr	r3, [sp, #24]
 80146ec:	f1a3 0302 	sub.w	r3, r3, #2
 80146f0:	bfcc      	ite	gt
 80146f2:	2500      	movgt	r5, #0
 80146f4:	2501      	movle	r5, #1
 80146f6:	2b03      	cmp	r3, #3
 80146f8:	f200 8087 	bhi.w	801480a <_dtoa_r+0x30a>
 80146fc:	e8df f003 	tbb	[pc, r3]
 8014700:	59383a2d 	.word	0x59383a2d
 8014704:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8014708:	441d      	add	r5, r3
 801470a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801470e:	2b20      	cmp	r3, #32
 8014710:	bfc1      	itttt	gt
 8014712:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8014716:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801471a:	fa0b f303 	lslgt.w	r3, fp, r3
 801471e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8014722:	bfda      	itte	le
 8014724:	f1c3 0320 	rsble	r3, r3, #32
 8014728:	fa06 f003 	lslle.w	r0, r6, r3
 801472c:	4318      	orrgt	r0, r3
 801472e:	f7eb ff01 	bl	8000534 <__aeabi_ui2d>
 8014732:	2301      	movs	r3, #1
 8014734:	4606      	mov	r6, r0
 8014736:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801473a:	3d01      	subs	r5, #1
 801473c:	930e      	str	r3, [sp, #56]	; 0x38
 801473e:	e76a      	b.n	8014616 <_dtoa_r+0x116>
 8014740:	2301      	movs	r3, #1
 8014742:	e7b2      	b.n	80146aa <_dtoa_r+0x1aa>
 8014744:	900b      	str	r0, [sp, #44]	; 0x2c
 8014746:	e7b1      	b.n	80146ac <_dtoa_r+0x1ac>
 8014748:	9b04      	ldr	r3, [sp, #16]
 801474a:	9a00      	ldr	r2, [sp, #0]
 801474c:	1a9b      	subs	r3, r3, r2
 801474e:	9304      	str	r3, [sp, #16]
 8014750:	4253      	negs	r3, r2
 8014752:	9307      	str	r3, [sp, #28]
 8014754:	2300      	movs	r3, #0
 8014756:	930a      	str	r3, [sp, #40]	; 0x28
 8014758:	e7bf      	b.n	80146da <_dtoa_r+0x1da>
 801475a:	2300      	movs	r3, #0
 801475c:	9308      	str	r3, [sp, #32]
 801475e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014760:	2b00      	cmp	r3, #0
 8014762:	dc55      	bgt.n	8014810 <_dtoa_r+0x310>
 8014764:	2301      	movs	r3, #1
 8014766:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801476a:	461a      	mov	r2, r3
 801476c:	9209      	str	r2, [sp, #36]	; 0x24
 801476e:	e00c      	b.n	801478a <_dtoa_r+0x28a>
 8014770:	2301      	movs	r3, #1
 8014772:	e7f3      	b.n	801475c <_dtoa_r+0x25c>
 8014774:	2300      	movs	r3, #0
 8014776:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014778:	9308      	str	r3, [sp, #32]
 801477a:	9b00      	ldr	r3, [sp, #0]
 801477c:	4413      	add	r3, r2
 801477e:	9302      	str	r3, [sp, #8]
 8014780:	3301      	adds	r3, #1
 8014782:	2b01      	cmp	r3, #1
 8014784:	9303      	str	r3, [sp, #12]
 8014786:	bfb8      	it	lt
 8014788:	2301      	movlt	r3, #1
 801478a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801478c:	2200      	movs	r2, #0
 801478e:	6042      	str	r2, [r0, #4]
 8014790:	2204      	movs	r2, #4
 8014792:	f102 0614 	add.w	r6, r2, #20
 8014796:	429e      	cmp	r6, r3
 8014798:	6841      	ldr	r1, [r0, #4]
 801479a:	d93d      	bls.n	8014818 <_dtoa_r+0x318>
 801479c:	4620      	mov	r0, r4
 801479e:	f001 f82b 	bl	80157f8 <_Balloc>
 80147a2:	9001      	str	r0, [sp, #4]
 80147a4:	2800      	cmp	r0, #0
 80147a6:	d13b      	bne.n	8014820 <_dtoa_r+0x320>
 80147a8:	4b11      	ldr	r3, [pc, #68]	; (80147f0 <_dtoa_r+0x2f0>)
 80147aa:	4602      	mov	r2, r0
 80147ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80147b0:	e6c0      	b.n	8014534 <_dtoa_r+0x34>
 80147b2:	2301      	movs	r3, #1
 80147b4:	e7df      	b.n	8014776 <_dtoa_r+0x276>
 80147b6:	bf00      	nop
 80147b8:	636f4361 	.word	0x636f4361
 80147bc:	3fd287a7 	.word	0x3fd287a7
 80147c0:	8b60c8b3 	.word	0x8b60c8b3
 80147c4:	3fc68a28 	.word	0x3fc68a28
 80147c8:	509f79fb 	.word	0x509f79fb
 80147cc:	3fd34413 	.word	0x3fd34413
 80147d0:	08018d1e 	.word	0x08018d1e
 80147d4:	08018d35 	.word	0x08018d35
 80147d8:	7ff00000 	.word	0x7ff00000
 80147dc:	08018d1a 	.word	0x08018d1a
 80147e0:	08018d11 	.word	0x08018d11
 80147e4:	08018b95 	.word	0x08018b95
 80147e8:	3ff80000 	.word	0x3ff80000
 80147ec:	08018ea0 	.word	0x08018ea0
 80147f0:	08018d90 	.word	0x08018d90
 80147f4:	2501      	movs	r5, #1
 80147f6:	2300      	movs	r3, #0
 80147f8:	9306      	str	r3, [sp, #24]
 80147fa:	9508      	str	r5, [sp, #32]
 80147fc:	f04f 33ff 	mov.w	r3, #4294967295
 8014800:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014804:	2200      	movs	r2, #0
 8014806:	2312      	movs	r3, #18
 8014808:	e7b0      	b.n	801476c <_dtoa_r+0x26c>
 801480a:	2301      	movs	r3, #1
 801480c:	9308      	str	r3, [sp, #32]
 801480e:	e7f5      	b.n	80147fc <_dtoa_r+0x2fc>
 8014810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014812:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014816:	e7b8      	b.n	801478a <_dtoa_r+0x28a>
 8014818:	3101      	adds	r1, #1
 801481a:	6041      	str	r1, [r0, #4]
 801481c:	0052      	lsls	r2, r2, #1
 801481e:	e7b8      	b.n	8014792 <_dtoa_r+0x292>
 8014820:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014822:	9a01      	ldr	r2, [sp, #4]
 8014824:	601a      	str	r2, [r3, #0]
 8014826:	9b03      	ldr	r3, [sp, #12]
 8014828:	2b0e      	cmp	r3, #14
 801482a:	f200 809d 	bhi.w	8014968 <_dtoa_r+0x468>
 801482e:	2d00      	cmp	r5, #0
 8014830:	f000 809a 	beq.w	8014968 <_dtoa_r+0x468>
 8014834:	9b00      	ldr	r3, [sp, #0]
 8014836:	2b00      	cmp	r3, #0
 8014838:	dd32      	ble.n	80148a0 <_dtoa_r+0x3a0>
 801483a:	4ab7      	ldr	r2, [pc, #732]	; (8014b18 <_dtoa_r+0x618>)
 801483c:	f003 030f 	and.w	r3, r3, #15
 8014840:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8014844:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014848:	9b00      	ldr	r3, [sp, #0]
 801484a:	05d8      	lsls	r0, r3, #23
 801484c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8014850:	d516      	bpl.n	8014880 <_dtoa_r+0x380>
 8014852:	4bb2      	ldr	r3, [pc, #712]	; (8014b1c <_dtoa_r+0x61c>)
 8014854:	ec51 0b19 	vmov	r0, r1, d9
 8014858:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801485c:	f7ec f80e 	bl	800087c <__aeabi_ddiv>
 8014860:	f007 070f 	and.w	r7, r7, #15
 8014864:	4682      	mov	sl, r0
 8014866:	468b      	mov	fp, r1
 8014868:	2503      	movs	r5, #3
 801486a:	4eac      	ldr	r6, [pc, #688]	; (8014b1c <_dtoa_r+0x61c>)
 801486c:	b957      	cbnz	r7, 8014884 <_dtoa_r+0x384>
 801486e:	4642      	mov	r2, r8
 8014870:	464b      	mov	r3, r9
 8014872:	4650      	mov	r0, sl
 8014874:	4659      	mov	r1, fp
 8014876:	f7ec f801 	bl	800087c <__aeabi_ddiv>
 801487a:	4682      	mov	sl, r0
 801487c:	468b      	mov	fp, r1
 801487e:	e028      	b.n	80148d2 <_dtoa_r+0x3d2>
 8014880:	2502      	movs	r5, #2
 8014882:	e7f2      	b.n	801486a <_dtoa_r+0x36a>
 8014884:	07f9      	lsls	r1, r7, #31
 8014886:	d508      	bpl.n	801489a <_dtoa_r+0x39a>
 8014888:	4640      	mov	r0, r8
 801488a:	4649      	mov	r1, r9
 801488c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8014890:	f7eb feca 	bl	8000628 <__aeabi_dmul>
 8014894:	3501      	adds	r5, #1
 8014896:	4680      	mov	r8, r0
 8014898:	4689      	mov	r9, r1
 801489a:	107f      	asrs	r7, r7, #1
 801489c:	3608      	adds	r6, #8
 801489e:	e7e5      	b.n	801486c <_dtoa_r+0x36c>
 80148a0:	f000 809b 	beq.w	80149da <_dtoa_r+0x4da>
 80148a4:	9b00      	ldr	r3, [sp, #0]
 80148a6:	4f9d      	ldr	r7, [pc, #628]	; (8014b1c <_dtoa_r+0x61c>)
 80148a8:	425e      	negs	r6, r3
 80148aa:	4b9b      	ldr	r3, [pc, #620]	; (8014b18 <_dtoa_r+0x618>)
 80148ac:	f006 020f 	and.w	r2, r6, #15
 80148b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80148b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148b8:	ec51 0b19 	vmov	r0, r1, d9
 80148bc:	f7eb feb4 	bl	8000628 <__aeabi_dmul>
 80148c0:	1136      	asrs	r6, r6, #4
 80148c2:	4682      	mov	sl, r0
 80148c4:	468b      	mov	fp, r1
 80148c6:	2300      	movs	r3, #0
 80148c8:	2502      	movs	r5, #2
 80148ca:	2e00      	cmp	r6, #0
 80148cc:	d17a      	bne.n	80149c4 <_dtoa_r+0x4c4>
 80148ce:	2b00      	cmp	r3, #0
 80148d0:	d1d3      	bne.n	801487a <_dtoa_r+0x37a>
 80148d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	f000 8082 	beq.w	80149de <_dtoa_r+0x4de>
 80148da:	4b91      	ldr	r3, [pc, #580]	; (8014b20 <_dtoa_r+0x620>)
 80148dc:	2200      	movs	r2, #0
 80148de:	4650      	mov	r0, sl
 80148e0:	4659      	mov	r1, fp
 80148e2:	f7ec f913 	bl	8000b0c <__aeabi_dcmplt>
 80148e6:	2800      	cmp	r0, #0
 80148e8:	d079      	beq.n	80149de <_dtoa_r+0x4de>
 80148ea:	9b03      	ldr	r3, [sp, #12]
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d076      	beq.n	80149de <_dtoa_r+0x4de>
 80148f0:	9b02      	ldr	r3, [sp, #8]
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	dd36      	ble.n	8014964 <_dtoa_r+0x464>
 80148f6:	9b00      	ldr	r3, [sp, #0]
 80148f8:	4650      	mov	r0, sl
 80148fa:	4659      	mov	r1, fp
 80148fc:	1e5f      	subs	r7, r3, #1
 80148fe:	2200      	movs	r2, #0
 8014900:	4b88      	ldr	r3, [pc, #544]	; (8014b24 <_dtoa_r+0x624>)
 8014902:	f7eb fe91 	bl	8000628 <__aeabi_dmul>
 8014906:	9e02      	ldr	r6, [sp, #8]
 8014908:	4682      	mov	sl, r0
 801490a:	468b      	mov	fp, r1
 801490c:	3501      	adds	r5, #1
 801490e:	4628      	mov	r0, r5
 8014910:	f7eb fe20 	bl	8000554 <__aeabi_i2d>
 8014914:	4652      	mov	r2, sl
 8014916:	465b      	mov	r3, fp
 8014918:	f7eb fe86 	bl	8000628 <__aeabi_dmul>
 801491c:	4b82      	ldr	r3, [pc, #520]	; (8014b28 <_dtoa_r+0x628>)
 801491e:	2200      	movs	r2, #0
 8014920:	f7eb fccc 	bl	80002bc <__adddf3>
 8014924:	46d0      	mov	r8, sl
 8014926:	46d9      	mov	r9, fp
 8014928:	4682      	mov	sl, r0
 801492a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801492e:	2e00      	cmp	r6, #0
 8014930:	d158      	bne.n	80149e4 <_dtoa_r+0x4e4>
 8014932:	4b7e      	ldr	r3, [pc, #504]	; (8014b2c <_dtoa_r+0x62c>)
 8014934:	2200      	movs	r2, #0
 8014936:	4640      	mov	r0, r8
 8014938:	4649      	mov	r1, r9
 801493a:	f7eb fcbd 	bl	80002b8 <__aeabi_dsub>
 801493e:	4652      	mov	r2, sl
 8014940:	465b      	mov	r3, fp
 8014942:	4680      	mov	r8, r0
 8014944:	4689      	mov	r9, r1
 8014946:	f7ec f8ff 	bl	8000b48 <__aeabi_dcmpgt>
 801494a:	2800      	cmp	r0, #0
 801494c:	f040 8295 	bne.w	8014e7a <_dtoa_r+0x97a>
 8014950:	4652      	mov	r2, sl
 8014952:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8014956:	4640      	mov	r0, r8
 8014958:	4649      	mov	r1, r9
 801495a:	f7ec f8d7 	bl	8000b0c <__aeabi_dcmplt>
 801495e:	2800      	cmp	r0, #0
 8014960:	f040 8289 	bne.w	8014e76 <_dtoa_r+0x976>
 8014964:	ec5b ab19 	vmov	sl, fp, d9
 8014968:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801496a:	2b00      	cmp	r3, #0
 801496c:	f2c0 8148 	blt.w	8014c00 <_dtoa_r+0x700>
 8014970:	9a00      	ldr	r2, [sp, #0]
 8014972:	2a0e      	cmp	r2, #14
 8014974:	f300 8144 	bgt.w	8014c00 <_dtoa_r+0x700>
 8014978:	4b67      	ldr	r3, [pc, #412]	; (8014b18 <_dtoa_r+0x618>)
 801497a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801497e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014982:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014984:	2b00      	cmp	r3, #0
 8014986:	f280 80d5 	bge.w	8014b34 <_dtoa_r+0x634>
 801498a:	9b03      	ldr	r3, [sp, #12]
 801498c:	2b00      	cmp	r3, #0
 801498e:	f300 80d1 	bgt.w	8014b34 <_dtoa_r+0x634>
 8014992:	f040 826f 	bne.w	8014e74 <_dtoa_r+0x974>
 8014996:	4b65      	ldr	r3, [pc, #404]	; (8014b2c <_dtoa_r+0x62c>)
 8014998:	2200      	movs	r2, #0
 801499a:	4640      	mov	r0, r8
 801499c:	4649      	mov	r1, r9
 801499e:	f7eb fe43 	bl	8000628 <__aeabi_dmul>
 80149a2:	4652      	mov	r2, sl
 80149a4:	465b      	mov	r3, fp
 80149a6:	f7ec f8c5 	bl	8000b34 <__aeabi_dcmpge>
 80149aa:	9e03      	ldr	r6, [sp, #12]
 80149ac:	4637      	mov	r7, r6
 80149ae:	2800      	cmp	r0, #0
 80149b0:	f040 8245 	bne.w	8014e3e <_dtoa_r+0x93e>
 80149b4:	9d01      	ldr	r5, [sp, #4]
 80149b6:	2331      	movs	r3, #49	; 0x31
 80149b8:	f805 3b01 	strb.w	r3, [r5], #1
 80149bc:	9b00      	ldr	r3, [sp, #0]
 80149be:	3301      	adds	r3, #1
 80149c0:	9300      	str	r3, [sp, #0]
 80149c2:	e240      	b.n	8014e46 <_dtoa_r+0x946>
 80149c4:	07f2      	lsls	r2, r6, #31
 80149c6:	d505      	bpl.n	80149d4 <_dtoa_r+0x4d4>
 80149c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80149cc:	f7eb fe2c 	bl	8000628 <__aeabi_dmul>
 80149d0:	3501      	adds	r5, #1
 80149d2:	2301      	movs	r3, #1
 80149d4:	1076      	asrs	r6, r6, #1
 80149d6:	3708      	adds	r7, #8
 80149d8:	e777      	b.n	80148ca <_dtoa_r+0x3ca>
 80149da:	2502      	movs	r5, #2
 80149dc:	e779      	b.n	80148d2 <_dtoa_r+0x3d2>
 80149de:	9f00      	ldr	r7, [sp, #0]
 80149e0:	9e03      	ldr	r6, [sp, #12]
 80149e2:	e794      	b.n	801490e <_dtoa_r+0x40e>
 80149e4:	9901      	ldr	r1, [sp, #4]
 80149e6:	4b4c      	ldr	r3, [pc, #304]	; (8014b18 <_dtoa_r+0x618>)
 80149e8:	4431      	add	r1, r6
 80149ea:	910d      	str	r1, [sp, #52]	; 0x34
 80149ec:	9908      	ldr	r1, [sp, #32]
 80149ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80149f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80149f6:	2900      	cmp	r1, #0
 80149f8:	d043      	beq.n	8014a82 <_dtoa_r+0x582>
 80149fa:	494d      	ldr	r1, [pc, #308]	; (8014b30 <_dtoa_r+0x630>)
 80149fc:	2000      	movs	r0, #0
 80149fe:	f7eb ff3d 	bl	800087c <__aeabi_ddiv>
 8014a02:	4652      	mov	r2, sl
 8014a04:	465b      	mov	r3, fp
 8014a06:	f7eb fc57 	bl	80002b8 <__aeabi_dsub>
 8014a0a:	9d01      	ldr	r5, [sp, #4]
 8014a0c:	4682      	mov	sl, r0
 8014a0e:	468b      	mov	fp, r1
 8014a10:	4649      	mov	r1, r9
 8014a12:	4640      	mov	r0, r8
 8014a14:	f7ec f8b8 	bl	8000b88 <__aeabi_d2iz>
 8014a18:	4606      	mov	r6, r0
 8014a1a:	f7eb fd9b 	bl	8000554 <__aeabi_i2d>
 8014a1e:	4602      	mov	r2, r0
 8014a20:	460b      	mov	r3, r1
 8014a22:	4640      	mov	r0, r8
 8014a24:	4649      	mov	r1, r9
 8014a26:	f7eb fc47 	bl	80002b8 <__aeabi_dsub>
 8014a2a:	3630      	adds	r6, #48	; 0x30
 8014a2c:	f805 6b01 	strb.w	r6, [r5], #1
 8014a30:	4652      	mov	r2, sl
 8014a32:	465b      	mov	r3, fp
 8014a34:	4680      	mov	r8, r0
 8014a36:	4689      	mov	r9, r1
 8014a38:	f7ec f868 	bl	8000b0c <__aeabi_dcmplt>
 8014a3c:	2800      	cmp	r0, #0
 8014a3e:	d163      	bne.n	8014b08 <_dtoa_r+0x608>
 8014a40:	4642      	mov	r2, r8
 8014a42:	464b      	mov	r3, r9
 8014a44:	4936      	ldr	r1, [pc, #216]	; (8014b20 <_dtoa_r+0x620>)
 8014a46:	2000      	movs	r0, #0
 8014a48:	f7eb fc36 	bl	80002b8 <__aeabi_dsub>
 8014a4c:	4652      	mov	r2, sl
 8014a4e:	465b      	mov	r3, fp
 8014a50:	f7ec f85c 	bl	8000b0c <__aeabi_dcmplt>
 8014a54:	2800      	cmp	r0, #0
 8014a56:	f040 80b5 	bne.w	8014bc4 <_dtoa_r+0x6c4>
 8014a5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014a5c:	429d      	cmp	r5, r3
 8014a5e:	d081      	beq.n	8014964 <_dtoa_r+0x464>
 8014a60:	4b30      	ldr	r3, [pc, #192]	; (8014b24 <_dtoa_r+0x624>)
 8014a62:	2200      	movs	r2, #0
 8014a64:	4650      	mov	r0, sl
 8014a66:	4659      	mov	r1, fp
 8014a68:	f7eb fdde 	bl	8000628 <__aeabi_dmul>
 8014a6c:	4b2d      	ldr	r3, [pc, #180]	; (8014b24 <_dtoa_r+0x624>)
 8014a6e:	4682      	mov	sl, r0
 8014a70:	468b      	mov	fp, r1
 8014a72:	4640      	mov	r0, r8
 8014a74:	4649      	mov	r1, r9
 8014a76:	2200      	movs	r2, #0
 8014a78:	f7eb fdd6 	bl	8000628 <__aeabi_dmul>
 8014a7c:	4680      	mov	r8, r0
 8014a7e:	4689      	mov	r9, r1
 8014a80:	e7c6      	b.n	8014a10 <_dtoa_r+0x510>
 8014a82:	4650      	mov	r0, sl
 8014a84:	4659      	mov	r1, fp
 8014a86:	f7eb fdcf 	bl	8000628 <__aeabi_dmul>
 8014a8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014a8c:	9d01      	ldr	r5, [sp, #4]
 8014a8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8014a90:	4682      	mov	sl, r0
 8014a92:	468b      	mov	fp, r1
 8014a94:	4649      	mov	r1, r9
 8014a96:	4640      	mov	r0, r8
 8014a98:	f7ec f876 	bl	8000b88 <__aeabi_d2iz>
 8014a9c:	4606      	mov	r6, r0
 8014a9e:	f7eb fd59 	bl	8000554 <__aeabi_i2d>
 8014aa2:	3630      	adds	r6, #48	; 0x30
 8014aa4:	4602      	mov	r2, r0
 8014aa6:	460b      	mov	r3, r1
 8014aa8:	4640      	mov	r0, r8
 8014aaa:	4649      	mov	r1, r9
 8014aac:	f7eb fc04 	bl	80002b8 <__aeabi_dsub>
 8014ab0:	f805 6b01 	strb.w	r6, [r5], #1
 8014ab4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014ab6:	429d      	cmp	r5, r3
 8014ab8:	4680      	mov	r8, r0
 8014aba:	4689      	mov	r9, r1
 8014abc:	f04f 0200 	mov.w	r2, #0
 8014ac0:	d124      	bne.n	8014b0c <_dtoa_r+0x60c>
 8014ac2:	4b1b      	ldr	r3, [pc, #108]	; (8014b30 <_dtoa_r+0x630>)
 8014ac4:	4650      	mov	r0, sl
 8014ac6:	4659      	mov	r1, fp
 8014ac8:	f7eb fbf8 	bl	80002bc <__adddf3>
 8014acc:	4602      	mov	r2, r0
 8014ace:	460b      	mov	r3, r1
 8014ad0:	4640      	mov	r0, r8
 8014ad2:	4649      	mov	r1, r9
 8014ad4:	f7ec f838 	bl	8000b48 <__aeabi_dcmpgt>
 8014ad8:	2800      	cmp	r0, #0
 8014ada:	d173      	bne.n	8014bc4 <_dtoa_r+0x6c4>
 8014adc:	4652      	mov	r2, sl
 8014ade:	465b      	mov	r3, fp
 8014ae0:	4913      	ldr	r1, [pc, #76]	; (8014b30 <_dtoa_r+0x630>)
 8014ae2:	2000      	movs	r0, #0
 8014ae4:	f7eb fbe8 	bl	80002b8 <__aeabi_dsub>
 8014ae8:	4602      	mov	r2, r0
 8014aea:	460b      	mov	r3, r1
 8014aec:	4640      	mov	r0, r8
 8014aee:	4649      	mov	r1, r9
 8014af0:	f7ec f80c 	bl	8000b0c <__aeabi_dcmplt>
 8014af4:	2800      	cmp	r0, #0
 8014af6:	f43f af35 	beq.w	8014964 <_dtoa_r+0x464>
 8014afa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8014afc:	1e6b      	subs	r3, r5, #1
 8014afe:	930f      	str	r3, [sp, #60]	; 0x3c
 8014b00:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014b04:	2b30      	cmp	r3, #48	; 0x30
 8014b06:	d0f8      	beq.n	8014afa <_dtoa_r+0x5fa>
 8014b08:	9700      	str	r7, [sp, #0]
 8014b0a:	e049      	b.n	8014ba0 <_dtoa_r+0x6a0>
 8014b0c:	4b05      	ldr	r3, [pc, #20]	; (8014b24 <_dtoa_r+0x624>)
 8014b0e:	f7eb fd8b 	bl	8000628 <__aeabi_dmul>
 8014b12:	4680      	mov	r8, r0
 8014b14:	4689      	mov	r9, r1
 8014b16:	e7bd      	b.n	8014a94 <_dtoa_r+0x594>
 8014b18:	08018ea0 	.word	0x08018ea0
 8014b1c:	08018e78 	.word	0x08018e78
 8014b20:	3ff00000 	.word	0x3ff00000
 8014b24:	40240000 	.word	0x40240000
 8014b28:	401c0000 	.word	0x401c0000
 8014b2c:	40140000 	.word	0x40140000
 8014b30:	3fe00000 	.word	0x3fe00000
 8014b34:	9d01      	ldr	r5, [sp, #4]
 8014b36:	4656      	mov	r6, sl
 8014b38:	465f      	mov	r7, fp
 8014b3a:	4642      	mov	r2, r8
 8014b3c:	464b      	mov	r3, r9
 8014b3e:	4630      	mov	r0, r6
 8014b40:	4639      	mov	r1, r7
 8014b42:	f7eb fe9b 	bl	800087c <__aeabi_ddiv>
 8014b46:	f7ec f81f 	bl	8000b88 <__aeabi_d2iz>
 8014b4a:	4682      	mov	sl, r0
 8014b4c:	f7eb fd02 	bl	8000554 <__aeabi_i2d>
 8014b50:	4642      	mov	r2, r8
 8014b52:	464b      	mov	r3, r9
 8014b54:	f7eb fd68 	bl	8000628 <__aeabi_dmul>
 8014b58:	4602      	mov	r2, r0
 8014b5a:	460b      	mov	r3, r1
 8014b5c:	4630      	mov	r0, r6
 8014b5e:	4639      	mov	r1, r7
 8014b60:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8014b64:	f7eb fba8 	bl	80002b8 <__aeabi_dsub>
 8014b68:	f805 6b01 	strb.w	r6, [r5], #1
 8014b6c:	9e01      	ldr	r6, [sp, #4]
 8014b6e:	9f03      	ldr	r7, [sp, #12]
 8014b70:	1bae      	subs	r6, r5, r6
 8014b72:	42b7      	cmp	r7, r6
 8014b74:	4602      	mov	r2, r0
 8014b76:	460b      	mov	r3, r1
 8014b78:	d135      	bne.n	8014be6 <_dtoa_r+0x6e6>
 8014b7a:	f7eb fb9f 	bl	80002bc <__adddf3>
 8014b7e:	4642      	mov	r2, r8
 8014b80:	464b      	mov	r3, r9
 8014b82:	4606      	mov	r6, r0
 8014b84:	460f      	mov	r7, r1
 8014b86:	f7eb ffdf 	bl	8000b48 <__aeabi_dcmpgt>
 8014b8a:	b9d0      	cbnz	r0, 8014bc2 <_dtoa_r+0x6c2>
 8014b8c:	4642      	mov	r2, r8
 8014b8e:	464b      	mov	r3, r9
 8014b90:	4630      	mov	r0, r6
 8014b92:	4639      	mov	r1, r7
 8014b94:	f7eb ffb0 	bl	8000af8 <__aeabi_dcmpeq>
 8014b98:	b110      	cbz	r0, 8014ba0 <_dtoa_r+0x6a0>
 8014b9a:	f01a 0f01 	tst.w	sl, #1
 8014b9e:	d110      	bne.n	8014bc2 <_dtoa_r+0x6c2>
 8014ba0:	4620      	mov	r0, r4
 8014ba2:	ee18 1a10 	vmov	r1, s16
 8014ba6:	f000 fe67 	bl	8015878 <_Bfree>
 8014baa:	2300      	movs	r3, #0
 8014bac:	9800      	ldr	r0, [sp, #0]
 8014bae:	702b      	strb	r3, [r5, #0]
 8014bb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014bb2:	3001      	adds	r0, #1
 8014bb4:	6018      	str	r0, [r3, #0]
 8014bb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014bb8:	2b00      	cmp	r3, #0
 8014bba:	f43f acf1 	beq.w	80145a0 <_dtoa_r+0xa0>
 8014bbe:	601d      	str	r5, [r3, #0]
 8014bc0:	e4ee      	b.n	80145a0 <_dtoa_r+0xa0>
 8014bc2:	9f00      	ldr	r7, [sp, #0]
 8014bc4:	462b      	mov	r3, r5
 8014bc6:	461d      	mov	r5, r3
 8014bc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014bcc:	2a39      	cmp	r2, #57	; 0x39
 8014bce:	d106      	bne.n	8014bde <_dtoa_r+0x6de>
 8014bd0:	9a01      	ldr	r2, [sp, #4]
 8014bd2:	429a      	cmp	r2, r3
 8014bd4:	d1f7      	bne.n	8014bc6 <_dtoa_r+0x6c6>
 8014bd6:	9901      	ldr	r1, [sp, #4]
 8014bd8:	2230      	movs	r2, #48	; 0x30
 8014bda:	3701      	adds	r7, #1
 8014bdc:	700a      	strb	r2, [r1, #0]
 8014bde:	781a      	ldrb	r2, [r3, #0]
 8014be0:	3201      	adds	r2, #1
 8014be2:	701a      	strb	r2, [r3, #0]
 8014be4:	e790      	b.n	8014b08 <_dtoa_r+0x608>
 8014be6:	4ba6      	ldr	r3, [pc, #664]	; (8014e80 <_dtoa_r+0x980>)
 8014be8:	2200      	movs	r2, #0
 8014bea:	f7eb fd1d 	bl	8000628 <__aeabi_dmul>
 8014bee:	2200      	movs	r2, #0
 8014bf0:	2300      	movs	r3, #0
 8014bf2:	4606      	mov	r6, r0
 8014bf4:	460f      	mov	r7, r1
 8014bf6:	f7eb ff7f 	bl	8000af8 <__aeabi_dcmpeq>
 8014bfa:	2800      	cmp	r0, #0
 8014bfc:	d09d      	beq.n	8014b3a <_dtoa_r+0x63a>
 8014bfe:	e7cf      	b.n	8014ba0 <_dtoa_r+0x6a0>
 8014c00:	9a08      	ldr	r2, [sp, #32]
 8014c02:	2a00      	cmp	r2, #0
 8014c04:	f000 80d7 	beq.w	8014db6 <_dtoa_r+0x8b6>
 8014c08:	9a06      	ldr	r2, [sp, #24]
 8014c0a:	2a01      	cmp	r2, #1
 8014c0c:	f300 80ba 	bgt.w	8014d84 <_dtoa_r+0x884>
 8014c10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014c12:	2a00      	cmp	r2, #0
 8014c14:	f000 80b2 	beq.w	8014d7c <_dtoa_r+0x87c>
 8014c18:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014c1c:	9e07      	ldr	r6, [sp, #28]
 8014c1e:	9d04      	ldr	r5, [sp, #16]
 8014c20:	9a04      	ldr	r2, [sp, #16]
 8014c22:	441a      	add	r2, r3
 8014c24:	9204      	str	r2, [sp, #16]
 8014c26:	9a05      	ldr	r2, [sp, #20]
 8014c28:	2101      	movs	r1, #1
 8014c2a:	441a      	add	r2, r3
 8014c2c:	4620      	mov	r0, r4
 8014c2e:	9205      	str	r2, [sp, #20]
 8014c30:	f000 ff24 	bl	8015a7c <__i2b>
 8014c34:	4607      	mov	r7, r0
 8014c36:	2d00      	cmp	r5, #0
 8014c38:	dd0c      	ble.n	8014c54 <_dtoa_r+0x754>
 8014c3a:	9b05      	ldr	r3, [sp, #20]
 8014c3c:	2b00      	cmp	r3, #0
 8014c3e:	dd09      	ble.n	8014c54 <_dtoa_r+0x754>
 8014c40:	42ab      	cmp	r3, r5
 8014c42:	9a04      	ldr	r2, [sp, #16]
 8014c44:	bfa8      	it	ge
 8014c46:	462b      	movge	r3, r5
 8014c48:	1ad2      	subs	r2, r2, r3
 8014c4a:	9204      	str	r2, [sp, #16]
 8014c4c:	9a05      	ldr	r2, [sp, #20]
 8014c4e:	1aed      	subs	r5, r5, r3
 8014c50:	1ad3      	subs	r3, r2, r3
 8014c52:	9305      	str	r3, [sp, #20]
 8014c54:	9b07      	ldr	r3, [sp, #28]
 8014c56:	b31b      	cbz	r3, 8014ca0 <_dtoa_r+0x7a0>
 8014c58:	9b08      	ldr	r3, [sp, #32]
 8014c5a:	2b00      	cmp	r3, #0
 8014c5c:	f000 80af 	beq.w	8014dbe <_dtoa_r+0x8be>
 8014c60:	2e00      	cmp	r6, #0
 8014c62:	dd13      	ble.n	8014c8c <_dtoa_r+0x78c>
 8014c64:	4639      	mov	r1, r7
 8014c66:	4632      	mov	r2, r6
 8014c68:	4620      	mov	r0, r4
 8014c6a:	f000 ffc7 	bl	8015bfc <__pow5mult>
 8014c6e:	ee18 2a10 	vmov	r2, s16
 8014c72:	4601      	mov	r1, r0
 8014c74:	4607      	mov	r7, r0
 8014c76:	4620      	mov	r0, r4
 8014c78:	f000 ff16 	bl	8015aa8 <__multiply>
 8014c7c:	ee18 1a10 	vmov	r1, s16
 8014c80:	4680      	mov	r8, r0
 8014c82:	4620      	mov	r0, r4
 8014c84:	f000 fdf8 	bl	8015878 <_Bfree>
 8014c88:	ee08 8a10 	vmov	s16, r8
 8014c8c:	9b07      	ldr	r3, [sp, #28]
 8014c8e:	1b9a      	subs	r2, r3, r6
 8014c90:	d006      	beq.n	8014ca0 <_dtoa_r+0x7a0>
 8014c92:	ee18 1a10 	vmov	r1, s16
 8014c96:	4620      	mov	r0, r4
 8014c98:	f000 ffb0 	bl	8015bfc <__pow5mult>
 8014c9c:	ee08 0a10 	vmov	s16, r0
 8014ca0:	2101      	movs	r1, #1
 8014ca2:	4620      	mov	r0, r4
 8014ca4:	f000 feea 	bl	8015a7c <__i2b>
 8014ca8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	4606      	mov	r6, r0
 8014cae:	f340 8088 	ble.w	8014dc2 <_dtoa_r+0x8c2>
 8014cb2:	461a      	mov	r2, r3
 8014cb4:	4601      	mov	r1, r0
 8014cb6:	4620      	mov	r0, r4
 8014cb8:	f000 ffa0 	bl	8015bfc <__pow5mult>
 8014cbc:	9b06      	ldr	r3, [sp, #24]
 8014cbe:	2b01      	cmp	r3, #1
 8014cc0:	4606      	mov	r6, r0
 8014cc2:	f340 8081 	ble.w	8014dc8 <_dtoa_r+0x8c8>
 8014cc6:	f04f 0800 	mov.w	r8, #0
 8014cca:	6933      	ldr	r3, [r6, #16]
 8014ccc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8014cd0:	6918      	ldr	r0, [r3, #16]
 8014cd2:	f000 fe83 	bl	80159dc <__hi0bits>
 8014cd6:	f1c0 0020 	rsb	r0, r0, #32
 8014cda:	9b05      	ldr	r3, [sp, #20]
 8014cdc:	4418      	add	r0, r3
 8014cde:	f010 001f 	ands.w	r0, r0, #31
 8014ce2:	f000 8092 	beq.w	8014e0a <_dtoa_r+0x90a>
 8014ce6:	f1c0 0320 	rsb	r3, r0, #32
 8014cea:	2b04      	cmp	r3, #4
 8014cec:	f340 808a 	ble.w	8014e04 <_dtoa_r+0x904>
 8014cf0:	f1c0 001c 	rsb	r0, r0, #28
 8014cf4:	9b04      	ldr	r3, [sp, #16]
 8014cf6:	4403      	add	r3, r0
 8014cf8:	9304      	str	r3, [sp, #16]
 8014cfa:	9b05      	ldr	r3, [sp, #20]
 8014cfc:	4403      	add	r3, r0
 8014cfe:	4405      	add	r5, r0
 8014d00:	9305      	str	r3, [sp, #20]
 8014d02:	9b04      	ldr	r3, [sp, #16]
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	dd07      	ble.n	8014d18 <_dtoa_r+0x818>
 8014d08:	ee18 1a10 	vmov	r1, s16
 8014d0c:	461a      	mov	r2, r3
 8014d0e:	4620      	mov	r0, r4
 8014d10:	f000 ffce 	bl	8015cb0 <__lshift>
 8014d14:	ee08 0a10 	vmov	s16, r0
 8014d18:	9b05      	ldr	r3, [sp, #20]
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	dd05      	ble.n	8014d2a <_dtoa_r+0x82a>
 8014d1e:	4631      	mov	r1, r6
 8014d20:	461a      	mov	r2, r3
 8014d22:	4620      	mov	r0, r4
 8014d24:	f000 ffc4 	bl	8015cb0 <__lshift>
 8014d28:	4606      	mov	r6, r0
 8014d2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	d06e      	beq.n	8014e0e <_dtoa_r+0x90e>
 8014d30:	ee18 0a10 	vmov	r0, s16
 8014d34:	4631      	mov	r1, r6
 8014d36:	f001 f82b 	bl	8015d90 <__mcmp>
 8014d3a:	2800      	cmp	r0, #0
 8014d3c:	da67      	bge.n	8014e0e <_dtoa_r+0x90e>
 8014d3e:	9b00      	ldr	r3, [sp, #0]
 8014d40:	3b01      	subs	r3, #1
 8014d42:	ee18 1a10 	vmov	r1, s16
 8014d46:	9300      	str	r3, [sp, #0]
 8014d48:	220a      	movs	r2, #10
 8014d4a:	2300      	movs	r3, #0
 8014d4c:	4620      	mov	r0, r4
 8014d4e:	f000 fdb5 	bl	80158bc <__multadd>
 8014d52:	9b08      	ldr	r3, [sp, #32]
 8014d54:	ee08 0a10 	vmov	s16, r0
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	f000 81b1 	beq.w	80150c0 <_dtoa_r+0xbc0>
 8014d5e:	2300      	movs	r3, #0
 8014d60:	4639      	mov	r1, r7
 8014d62:	220a      	movs	r2, #10
 8014d64:	4620      	mov	r0, r4
 8014d66:	f000 fda9 	bl	80158bc <__multadd>
 8014d6a:	9b02      	ldr	r3, [sp, #8]
 8014d6c:	2b00      	cmp	r3, #0
 8014d6e:	4607      	mov	r7, r0
 8014d70:	f300 808e 	bgt.w	8014e90 <_dtoa_r+0x990>
 8014d74:	9b06      	ldr	r3, [sp, #24]
 8014d76:	2b02      	cmp	r3, #2
 8014d78:	dc51      	bgt.n	8014e1e <_dtoa_r+0x91e>
 8014d7a:	e089      	b.n	8014e90 <_dtoa_r+0x990>
 8014d7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014d7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014d82:	e74b      	b.n	8014c1c <_dtoa_r+0x71c>
 8014d84:	9b03      	ldr	r3, [sp, #12]
 8014d86:	1e5e      	subs	r6, r3, #1
 8014d88:	9b07      	ldr	r3, [sp, #28]
 8014d8a:	42b3      	cmp	r3, r6
 8014d8c:	bfbf      	itttt	lt
 8014d8e:	9b07      	ldrlt	r3, [sp, #28]
 8014d90:	9607      	strlt	r6, [sp, #28]
 8014d92:	1af2      	sublt	r2, r6, r3
 8014d94:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8014d96:	bfb6      	itet	lt
 8014d98:	189b      	addlt	r3, r3, r2
 8014d9a:	1b9e      	subge	r6, r3, r6
 8014d9c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8014d9e:	9b03      	ldr	r3, [sp, #12]
 8014da0:	bfb8      	it	lt
 8014da2:	2600      	movlt	r6, #0
 8014da4:	2b00      	cmp	r3, #0
 8014da6:	bfb7      	itett	lt
 8014da8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8014dac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8014db0:	1a9d      	sublt	r5, r3, r2
 8014db2:	2300      	movlt	r3, #0
 8014db4:	e734      	b.n	8014c20 <_dtoa_r+0x720>
 8014db6:	9e07      	ldr	r6, [sp, #28]
 8014db8:	9d04      	ldr	r5, [sp, #16]
 8014dba:	9f08      	ldr	r7, [sp, #32]
 8014dbc:	e73b      	b.n	8014c36 <_dtoa_r+0x736>
 8014dbe:	9a07      	ldr	r2, [sp, #28]
 8014dc0:	e767      	b.n	8014c92 <_dtoa_r+0x792>
 8014dc2:	9b06      	ldr	r3, [sp, #24]
 8014dc4:	2b01      	cmp	r3, #1
 8014dc6:	dc18      	bgt.n	8014dfa <_dtoa_r+0x8fa>
 8014dc8:	f1ba 0f00 	cmp.w	sl, #0
 8014dcc:	d115      	bne.n	8014dfa <_dtoa_r+0x8fa>
 8014dce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014dd2:	b993      	cbnz	r3, 8014dfa <_dtoa_r+0x8fa>
 8014dd4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014dd8:	0d1b      	lsrs	r3, r3, #20
 8014dda:	051b      	lsls	r3, r3, #20
 8014ddc:	b183      	cbz	r3, 8014e00 <_dtoa_r+0x900>
 8014dde:	9b04      	ldr	r3, [sp, #16]
 8014de0:	3301      	adds	r3, #1
 8014de2:	9304      	str	r3, [sp, #16]
 8014de4:	9b05      	ldr	r3, [sp, #20]
 8014de6:	3301      	adds	r3, #1
 8014de8:	9305      	str	r3, [sp, #20]
 8014dea:	f04f 0801 	mov.w	r8, #1
 8014dee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	f47f af6a 	bne.w	8014cca <_dtoa_r+0x7ca>
 8014df6:	2001      	movs	r0, #1
 8014df8:	e76f      	b.n	8014cda <_dtoa_r+0x7da>
 8014dfa:	f04f 0800 	mov.w	r8, #0
 8014dfe:	e7f6      	b.n	8014dee <_dtoa_r+0x8ee>
 8014e00:	4698      	mov	r8, r3
 8014e02:	e7f4      	b.n	8014dee <_dtoa_r+0x8ee>
 8014e04:	f43f af7d 	beq.w	8014d02 <_dtoa_r+0x802>
 8014e08:	4618      	mov	r0, r3
 8014e0a:	301c      	adds	r0, #28
 8014e0c:	e772      	b.n	8014cf4 <_dtoa_r+0x7f4>
 8014e0e:	9b03      	ldr	r3, [sp, #12]
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	dc37      	bgt.n	8014e84 <_dtoa_r+0x984>
 8014e14:	9b06      	ldr	r3, [sp, #24]
 8014e16:	2b02      	cmp	r3, #2
 8014e18:	dd34      	ble.n	8014e84 <_dtoa_r+0x984>
 8014e1a:	9b03      	ldr	r3, [sp, #12]
 8014e1c:	9302      	str	r3, [sp, #8]
 8014e1e:	9b02      	ldr	r3, [sp, #8]
 8014e20:	b96b      	cbnz	r3, 8014e3e <_dtoa_r+0x93e>
 8014e22:	4631      	mov	r1, r6
 8014e24:	2205      	movs	r2, #5
 8014e26:	4620      	mov	r0, r4
 8014e28:	f000 fd48 	bl	80158bc <__multadd>
 8014e2c:	4601      	mov	r1, r0
 8014e2e:	4606      	mov	r6, r0
 8014e30:	ee18 0a10 	vmov	r0, s16
 8014e34:	f000 ffac 	bl	8015d90 <__mcmp>
 8014e38:	2800      	cmp	r0, #0
 8014e3a:	f73f adbb 	bgt.w	80149b4 <_dtoa_r+0x4b4>
 8014e3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e40:	9d01      	ldr	r5, [sp, #4]
 8014e42:	43db      	mvns	r3, r3
 8014e44:	9300      	str	r3, [sp, #0]
 8014e46:	f04f 0800 	mov.w	r8, #0
 8014e4a:	4631      	mov	r1, r6
 8014e4c:	4620      	mov	r0, r4
 8014e4e:	f000 fd13 	bl	8015878 <_Bfree>
 8014e52:	2f00      	cmp	r7, #0
 8014e54:	f43f aea4 	beq.w	8014ba0 <_dtoa_r+0x6a0>
 8014e58:	f1b8 0f00 	cmp.w	r8, #0
 8014e5c:	d005      	beq.n	8014e6a <_dtoa_r+0x96a>
 8014e5e:	45b8      	cmp	r8, r7
 8014e60:	d003      	beq.n	8014e6a <_dtoa_r+0x96a>
 8014e62:	4641      	mov	r1, r8
 8014e64:	4620      	mov	r0, r4
 8014e66:	f000 fd07 	bl	8015878 <_Bfree>
 8014e6a:	4639      	mov	r1, r7
 8014e6c:	4620      	mov	r0, r4
 8014e6e:	f000 fd03 	bl	8015878 <_Bfree>
 8014e72:	e695      	b.n	8014ba0 <_dtoa_r+0x6a0>
 8014e74:	2600      	movs	r6, #0
 8014e76:	4637      	mov	r7, r6
 8014e78:	e7e1      	b.n	8014e3e <_dtoa_r+0x93e>
 8014e7a:	9700      	str	r7, [sp, #0]
 8014e7c:	4637      	mov	r7, r6
 8014e7e:	e599      	b.n	80149b4 <_dtoa_r+0x4b4>
 8014e80:	40240000 	.word	0x40240000
 8014e84:	9b08      	ldr	r3, [sp, #32]
 8014e86:	2b00      	cmp	r3, #0
 8014e88:	f000 80ca 	beq.w	8015020 <_dtoa_r+0xb20>
 8014e8c:	9b03      	ldr	r3, [sp, #12]
 8014e8e:	9302      	str	r3, [sp, #8]
 8014e90:	2d00      	cmp	r5, #0
 8014e92:	dd05      	ble.n	8014ea0 <_dtoa_r+0x9a0>
 8014e94:	4639      	mov	r1, r7
 8014e96:	462a      	mov	r2, r5
 8014e98:	4620      	mov	r0, r4
 8014e9a:	f000 ff09 	bl	8015cb0 <__lshift>
 8014e9e:	4607      	mov	r7, r0
 8014ea0:	f1b8 0f00 	cmp.w	r8, #0
 8014ea4:	d05b      	beq.n	8014f5e <_dtoa_r+0xa5e>
 8014ea6:	6879      	ldr	r1, [r7, #4]
 8014ea8:	4620      	mov	r0, r4
 8014eaa:	f000 fca5 	bl	80157f8 <_Balloc>
 8014eae:	4605      	mov	r5, r0
 8014eb0:	b928      	cbnz	r0, 8014ebe <_dtoa_r+0x9be>
 8014eb2:	4b87      	ldr	r3, [pc, #540]	; (80150d0 <_dtoa_r+0xbd0>)
 8014eb4:	4602      	mov	r2, r0
 8014eb6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8014eba:	f7ff bb3b 	b.w	8014534 <_dtoa_r+0x34>
 8014ebe:	693a      	ldr	r2, [r7, #16]
 8014ec0:	3202      	adds	r2, #2
 8014ec2:	0092      	lsls	r2, r2, #2
 8014ec4:	f107 010c 	add.w	r1, r7, #12
 8014ec8:	300c      	adds	r0, #12
 8014eca:	f7fd fd29 	bl	8012920 <memcpy>
 8014ece:	2201      	movs	r2, #1
 8014ed0:	4629      	mov	r1, r5
 8014ed2:	4620      	mov	r0, r4
 8014ed4:	f000 feec 	bl	8015cb0 <__lshift>
 8014ed8:	9b01      	ldr	r3, [sp, #4]
 8014eda:	f103 0901 	add.w	r9, r3, #1
 8014ede:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8014ee2:	4413      	add	r3, r2
 8014ee4:	9305      	str	r3, [sp, #20]
 8014ee6:	f00a 0301 	and.w	r3, sl, #1
 8014eea:	46b8      	mov	r8, r7
 8014eec:	9304      	str	r3, [sp, #16]
 8014eee:	4607      	mov	r7, r0
 8014ef0:	4631      	mov	r1, r6
 8014ef2:	ee18 0a10 	vmov	r0, s16
 8014ef6:	f7ff fa77 	bl	80143e8 <quorem>
 8014efa:	4641      	mov	r1, r8
 8014efc:	9002      	str	r0, [sp, #8]
 8014efe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8014f02:	ee18 0a10 	vmov	r0, s16
 8014f06:	f000 ff43 	bl	8015d90 <__mcmp>
 8014f0a:	463a      	mov	r2, r7
 8014f0c:	9003      	str	r0, [sp, #12]
 8014f0e:	4631      	mov	r1, r6
 8014f10:	4620      	mov	r0, r4
 8014f12:	f000 ff59 	bl	8015dc8 <__mdiff>
 8014f16:	68c2      	ldr	r2, [r0, #12]
 8014f18:	f109 3bff 	add.w	fp, r9, #4294967295
 8014f1c:	4605      	mov	r5, r0
 8014f1e:	bb02      	cbnz	r2, 8014f62 <_dtoa_r+0xa62>
 8014f20:	4601      	mov	r1, r0
 8014f22:	ee18 0a10 	vmov	r0, s16
 8014f26:	f000 ff33 	bl	8015d90 <__mcmp>
 8014f2a:	4602      	mov	r2, r0
 8014f2c:	4629      	mov	r1, r5
 8014f2e:	4620      	mov	r0, r4
 8014f30:	9207      	str	r2, [sp, #28]
 8014f32:	f000 fca1 	bl	8015878 <_Bfree>
 8014f36:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8014f3a:	ea43 0102 	orr.w	r1, r3, r2
 8014f3e:	9b04      	ldr	r3, [sp, #16]
 8014f40:	430b      	orrs	r3, r1
 8014f42:	464d      	mov	r5, r9
 8014f44:	d10f      	bne.n	8014f66 <_dtoa_r+0xa66>
 8014f46:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8014f4a:	d02a      	beq.n	8014fa2 <_dtoa_r+0xaa2>
 8014f4c:	9b03      	ldr	r3, [sp, #12]
 8014f4e:	2b00      	cmp	r3, #0
 8014f50:	dd02      	ble.n	8014f58 <_dtoa_r+0xa58>
 8014f52:	9b02      	ldr	r3, [sp, #8]
 8014f54:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8014f58:	f88b a000 	strb.w	sl, [fp]
 8014f5c:	e775      	b.n	8014e4a <_dtoa_r+0x94a>
 8014f5e:	4638      	mov	r0, r7
 8014f60:	e7ba      	b.n	8014ed8 <_dtoa_r+0x9d8>
 8014f62:	2201      	movs	r2, #1
 8014f64:	e7e2      	b.n	8014f2c <_dtoa_r+0xa2c>
 8014f66:	9b03      	ldr	r3, [sp, #12]
 8014f68:	2b00      	cmp	r3, #0
 8014f6a:	db04      	blt.n	8014f76 <_dtoa_r+0xa76>
 8014f6c:	9906      	ldr	r1, [sp, #24]
 8014f6e:	430b      	orrs	r3, r1
 8014f70:	9904      	ldr	r1, [sp, #16]
 8014f72:	430b      	orrs	r3, r1
 8014f74:	d122      	bne.n	8014fbc <_dtoa_r+0xabc>
 8014f76:	2a00      	cmp	r2, #0
 8014f78:	ddee      	ble.n	8014f58 <_dtoa_r+0xa58>
 8014f7a:	ee18 1a10 	vmov	r1, s16
 8014f7e:	2201      	movs	r2, #1
 8014f80:	4620      	mov	r0, r4
 8014f82:	f000 fe95 	bl	8015cb0 <__lshift>
 8014f86:	4631      	mov	r1, r6
 8014f88:	ee08 0a10 	vmov	s16, r0
 8014f8c:	f000 ff00 	bl	8015d90 <__mcmp>
 8014f90:	2800      	cmp	r0, #0
 8014f92:	dc03      	bgt.n	8014f9c <_dtoa_r+0xa9c>
 8014f94:	d1e0      	bne.n	8014f58 <_dtoa_r+0xa58>
 8014f96:	f01a 0f01 	tst.w	sl, #1
 8014f9a:	d0dd      	beq.n	8014f58 <_dtoa_r+0xa58>
 8014f9c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8014fa0:	d1d7      	bne.n	8014f52 <_dtoa_r+0xa52>
 8014fa2:	2339      	movs	r3, #57	; 0x39
 8014fa4:	f88b 3000 	strb.w	r3, [fp]
 8014fa8:	462b      	mov	r3, r5
 8014faa:	461d      	mov	r5, r3
 8014fac:	3b01      	subs	r3, #1
 8014fae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8014fb2:	2a39      	cmp	r2, #57	; 0x39
 8014fb4:	d071      	beq.n	801509a <_dtoa_r+0xb9a>
 8014fb6:	3201      	adds	r2, #1
 8014fb8:	701a      	strb	r2, [r3, #0]
 8014fba:	e746      	b.n	8014e4a <_dtoa_r+0x94a>
 8014fbc:	2a00      	cmp	r2, #0
 8014fbe:	dd07      	ble.n	8014fd0 <_dtoa_r+0xad0>
 8014fc0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8014fc4:	d0ed      	beq.n	8014fa2 <_dtoa_r+0xaa2>
 8014fc6:	f10a 0301 	add.w	r3, sl, #1
 8014fca:	f88b 3000 	strb.w	r3, [fp]
 8014fce:	e73c      	b.n	8014e4a <_dtoa_r+0x94a>
 8014fd0:	9b05      	ldr	r3, [sp, #20]
 8014fd2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8014fd6:	4599      	cmp	r9, r3
 8014fd8:	d047      	beq.n	801506a <_dtoa_r+0xb6a>
 8014fda:	ee18 1a10 	vmov	r1, s16
 8014fde:	2300      	movs	r3, #0
 8014fe0:	220a      	movs	r2, #10
 8014fe2:	4620      	mov	r0, r4
 8014fe4:	f000 fc6a 	bl	80158bc <__multadd>
 8014fe8:	45b8      	cmp	r8, r7
 8014fea:	ee08 0a10 	vmov	s16, r0
 8014fee:	f04f 0300 	mov.w	r3, #0
 8014ff2:	f04f 020a 	mov.w	r2, #10
 8014ff6:	4641      	mov	r1, r8
 8014ff8:	4620      	mov	r0, r4
 8014ffa:	d106      	bne.n	801500a <_dtoa_r+0xb0a>
 8014ffc:	f000 fc5e 	bl	80158bc <__multadd>
 8015000:	4680      	mov	r8, r0
 8015002:	4607      	mov	r7, r0
 8015004:	f109 0901 	add.w	r9, r9, #1
 8015008:	e772      	b.n	8014ef0 <_dtoa_r+0x9f0>
 801500a:	f000 fc57 	bl	80158bc <__multadd>
 801500e:	4639      	mov	r1, r7
 8015010:	4680      	mov	r8, r0
 8015012:	2300      	movs	r3, #0
 8015014:	220a      	movs	r2, #10
 8015016:	4620      	mov	r0, r4
 8015018:	f000 fc50 	bl	80158bc <__multadd>
 801501c:	4607      	mov	r7, r0
 801501e:	e7f1      	b.n	8015004 <_dtoa_r+0xb04>
 8015020:	9b03      	ldr	r3, [sp, #12]
 8015022:	9302      	str	r3, [sp, #8]
 8015024:	9d01      	ldr	r5, [sp, #4]
 8015026:	ee18 0a10 	vmov	r0, s16
 801502a:	4631      	mov	r1, r6
 801502c:	f7ff f9dc 	bl	80143e8 <quorem>
 8015030:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8015034:	9b01      	ldr	r3, [sp, #4]
 8015036:	f805 ab01 	strb.w	sl, [r5], #1
 801503a:	1aea      	subs	r2, r5, r3
 801503c:	9b02      	ldr	r3, [sp, #8]
 801503e:	4293      	cmp	r3, r2
 8015040:	dd09      	ble.n	8015056 <_dtoa_r+0xb56>
 8015042:	ee18 1a10 	vmov	r1, s16
 8015046:	2300      	movs	r3, #0
 8015048:	220a      	movs	r2, #10
 801504a:	4620      	mov	r0, r4
 801504c:	f000 fc36 	bl	80158bc <__multadd>
 8015050:	ee08 0a10 	vmov	s16, r0
 8015054:	e7e7      	b.n	8015026 <_dtoa_r+0xb26>
 8015056:	9b02      	ldr	r3, [sp, #8]
 8015058:	2b00      	cmp	r3, #0
 801505a:	bfc8      	it	gt
 801505c:	461d      	movgt	r5, r3
 801505e:	9b01      	ldr	r3, [sp, #4]
 8015060:	bfd8      	it	le
 8015062:	2501      	movle	r5, #1
 8015064:	441d      	add	r5, r3
 8015066:	f04f 0800 	mov.w	r8, #0
 801506a:	ee18 1a10 	vmov	r1, s16
 801506e:	2201      	movs	r2, #1
 8015070:	4620      	mov	r0, r4
 8015072:	f000 fe1d 	bl	8015cb0 <__lshift>
 8015076:	4631      	mov	r1, r6
 8015078:	ee08 0a10 	vmov	s16, r0
 801507c:	f000 fe88 	bl	8015d90 <__mcmp>
 8015080:	2800      	cmp	r0, #0
 8015082:	dc91      	bgt.n	8014fa8 <_dtoa_r+0xaa8>
 8015084:	d102      	bne.n	801508c <_dtoa_r+0xb8c>
 8015086:	f01a 0f01 	tst.w	sl, #1
 801508a:	d18d      	bne.n	8014fa8 <_dtoa_r+0xaa8>
 801508c:	462b      	mov	r3, r5
 801508e:	461d      	mov	r5, r3
 8015090:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015094:	2a30      	cmp	r2, #48	; 0x30
 8015096:	d0fa      	beq.n	801508e <_dtoa_r+0xb8e>
 8015098:	e6d7      	b.n	8014e4a <_dtoa_r+0x94a>
 801509a:	9a01      	ldr	r2, [sp, #4]
 801509c:	429a      	cmp	r2, r3
 801509e:	d184      	bne.n	8014faa <_dtoa_r+0xaaa>
 80150a0:	9b00      	ldr	r3, [sp, #0]
 80150a2:	3301      	adds	r3, #1
 80150a4:	9300      	str	r3, [sp, #0]
 80150a6:	2331      	movs	r3, #49	; 0x31
 80150a8:	7013      	strb	r3, [r2, #0]
 80150aa:	e6ce      	b.n	8014e4a <_dtoa_r+0x94a>
 80150ac:	4b09      	ldr	r3, [pc, #36]	; (80150d4 <_dtoa_r+0xbd4>)
 80150ae:	f7ff ba95 	b.w	80145dc <_dtoa_r+0xdc>
 80150b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80150b4:	2b00      	cmp	r3, #0
 80150b6:	f47f aa6e 	bne.w	8014596 <_dtoa_r+0x96>
 80150ba:	4b07      	ldr	r3, [pc, #28]	; (80150d8 <_dtoa_r+0xbd8>)
 80150bc:	f7ff ba8e 	b.w	80145dc <_dtoa_r+0xdc>
 80150c0:	9b02      	ldr	r3, [sp, #8]
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	dcae      	bgt.n	8015024 <_dtoa_r+0xb24>
 80150c6:	9b06      	ldr	r3, [sp, #24]
 80150c8:	2b02      	cmp	r3, #2
 80150ca:	f73f aea8 	bgt.w	8014e1e <_dtoa_r+0x91e>
 80150ce:	e7a9      	b.n	8015024 <_dtoa_r+0xb24>
 80150d0:	08018d90 	.word	0x08018d90
 80150d4:	08018b94 	.word	0x08018b94
 80150d8:	08018d11 	.word	0x08018d11

080150dc <rshift>:
 80150dc:	6903      	ldr	r3, [r0, #16]
 80150de:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80150e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80150e6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80150ea:	f100 0414 	add.w	r4, r0, #20
 80150ee:	dd45      	ble.n	801517c <rshift+0xa0>
 80150f0:	f011 011f 	ands.w	r1, r1, #31
 80150f4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80150f8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80150fc:	d10c      	bne.n	8015118 <rshift+0x3c>
 80150fe:	f100 0710 	add.w	r7, r0, #16
 8015102:	4629      	mov	r1, r5
 8015104:	42b1      	cmp	r1, r6
 8015106:	d334      	bcc.n	8015172 <rshift+0x96>
 8015108:	1a9b      	subs	r3, r3, r2
 801510a:	009b      	lsls	r3, r3, #2
 801510c:	1eea      	subs	r2, r5, #3
 801510e:	4296      	cmp	r6, r2
 8015110:	bf38      	it	cc
 8015112:	2300      	movcc	r3, #0
 8015114:	4423      	add	r3, r4
 8015116:	e015      	b.n	8015144 <rshift+0x68>
 8015118:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801511c:	f1c1 0820 	rsb	r8, r1, #32
 8015120:	40cf      	lsrs	r7, r1
 8015122:	f105 0e04 	add.w	lr, r5, #4
 8015126:	46a1      	mov	r9, r4
 8015128:	4576      	cmp	r6, lr
 801512a:	46f4      	mov	ip, lr
 801512c:	d815      	bhi.n	801515a <rshift+0x7e>
 801512e:	1a9a      	subs	r2, r3, r2
 8015130:	0092      	lsls	r2, r2, #2
 8015132:	3a04      	subs	r2, #4
 8015134:	3501      	adds	r5, #1
 8015136:	42ae      	cmp	r6, r5
 8015138:	bf38      	it	cc
 801513a:	2200      	movcc	r2, #0
 801513c:	18a3      	adds	r3, r4, r2
 801513e:	50a7      	str	r7, [r4, r2]
 8015140:	b107      	cbz	r7, 8015144 <rshift+0x68>
 8015142:	3304      	adds	r3, #4
 8015144:	1b1a      	subs	r2, r3, r4
 8015146:	42a3      	cmp	r3, r4
 8015148:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801514c:	bf08      	it	eq
 801514e:	2300      	moveq	r3, #0
 8015150:	6102      	str	r2, [r0, #16]
 8015152:	bf08      	it	eq
 8015154:	6143      	streq	r3, [r0, #20]
 8015156:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801515a:	f8dc c000 	ldr.w	ip, [ip]
 801515e:	fa0c fc08 	lsl.w	ip, ip, r8
 8015162:	ea4c 0707 	orr.w	r7, ip, r7
 8015166:	f849 7b04 	str.w	r7, [r9], #4
 801516a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801516e:	40cf      	lsrs	r7, r1
 8015170:	e7da      	b.n	8015128 <rshift+0x4c>
 8015172:	f851 cb04 	ldr.w	ip, [r1], #4
 8015176:	f847 cf04 	str.w	ip, [r7, #4]!
 801517a:	e7c3      	b.n	8015104 <rshift+0x28>
 801517c:	4623      	mov	r3, r4
 801517e:	e7e1      	b.n	8015144 <rshift+0x68>

08015180 <__hexdig_fun>:
 8015180:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8015184:	2b09      	cmp	r3, #9
 8015186:	d802      	bhi.n	801518e <__hexdig_fun+0xe>
 8015188:	3820      	subs	r0, #32
 801518a:	b2c0      	uxtb	r0, r0
 801518c:	4770      	bx	lr
 801518e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8015192:	2b05      	cmp	r3, #5
 8015194:	d801      	bhi.n	801519a <__hexdig_fun+0x1a>
 8015196:	3847      	subs	r0, #71	; 0x47
 8015198:	e7f7      	b.n	801518a <__hexdig_fun+0xa>
 801519a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801519e:	2b05      	cmp	r3, #5
 80151a0:	d801      	bhi.n	80151a6 <__hexdig_fun+0x26>
 80151a2:	3827      	subs	r0, #39	; 0x27
 80151a4:	e7f1      	b.n	801518a <__hexdig_fun+0xa>
 80151a6:	2000      	movs	r0, #0
 80151a8:	4770      	bx	lr
	...

080151ac <__gethex>:
 80151ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151b0:	ed2d 8b02 	vpush	{d8}
 80151b4:	b089      	sub	sp, #36	; 0x24
 80151b6:	ee08 0a10 	vmov	s16, r0
 80151ba:	9304      	str	r3, [sp, #16]
 80151bc:	4bb4      	ldr	r3, [pc, #720]	; (8015490 <__gethex+0x2e4>)
 80151be:	681b      	ldr	r3, [r3, #0]
 80151c0:	9301      	str	r3, [sp, #4]
 80151c2:	4618      	mov	r0, r3
 80151c4:	468b      	mov	fp, r1
 80151c6:	4690      	mov	r8, r2
 80151c8:	f7eb f81a 	bl	8000200 <strlen>
 80151cc:	9b01      	ldr	r3, [sp, #4]
 80151ce:	f8db 2000 	ldr.w	r2, [fp]
 80151d2:	4403      	add	r3, r0
 80151d4:	4682      	mov	sl, r0
 80151d6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80151da:	9305      	str	r3, [sp, #20]
 80151dc:	1c93      	adds	r3, r2, #2
 80151de:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80151e2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80151e6:	32fe      	adds	r2, #254	; 0xfe
 80151e8:	18d1      	adds	r1, r2, r3
 80151ea:	461f      	mov	r7, r3
 80151ec:	f813 0b01 	ldrb.w	r0, [r3], #1
 80151f0:	9100      	str	r1, [sp, #0]
 80151f2:	2830      	cmp	r0, #48	; 0x30
 80151f4:	d0f8      	beq.n	80151e8 <__gethex+0x3c>
 80151f6:	f7ff ffc3 	bl	8015180 <__hexdig_fun>
 80151fa:	4604      	mov	r4, r0
 80151fc:	2800      	cmp	r0, #0
 80151fe:	d13a      	bne.n	8015276 <__gethex+0xca>
 8015200:	9901      	ldr	r1, [sp, #4]
 8015202:	4652      	mov	r2, sl
 8015204:	4638      	mov	r0, r7
 8015206:	f001 fa23 	bl	8016650 <strncmp>
 801520a:	4605      	mov	r5, r0
 801520c:	2800      	cmp	r0, #0
 801520e:	d168      	bne.n	80152e2 <__gethex+0x136>
 8015210:	f817 000a 	ldrb.w	r0, [r7, sl]
 8015214:	eb07 060a 	add.w	r6, r7, sl
 8015218:	f7ff ffb2 	bl	8015180 <__hexdig_fun>
 801521c:	2800      	cmp	r0, #0
 801521e:	d062      	beq.n	80152e6 <__gethex+0x13a>
 8015220:	4633      	mov	r3, r6
 8015222:	7818      	ldrb	r0, [r3, #0]
 8015224:	2830      	cmp	r0, #48	; 0x30
 8015226:	461f      	mov	r7, r3
 8015228:	f103 0301 	add.w	r3, r3, #1
 801522c:	d0f9      	beq.n	8015222 <__gethex+0x76>
 801522e:	f7ff ffa7 	bl	8015180 <__hexdig_fun>
 8015232:	2301      	movs	r3, #1
 8015234:	fab0 f480 	clz	r4, r0
 8015238:	0964      	lsrs	r4, r4, #5
 801523a:	4635      	mov	r5, r6
 801523c:	9300      	str	r3, [sp, #0]
 801523e:	463a      	mov	r2, r7
 8015240:	4616      	mov	r6, r2
 8015242:	3201      	adds	r2, #1
 8015244:	7830      	ldrb	r0, [r6, #0]
 8015246:	f7ff ff9b 	bl	8015180 <__hexdig_fun>
 801524a:	2800      	cmp	r0, #0
 801524c:	d1f8      	bne.n	8015240 <__gethex+0x94>
 801524e:	9901      	ldr	r1, [sp, #4]
 8015250:	4652      	mov	r2, sl
 8015252:	4630      	mov	r0, r6
 8015254:	f001 f9fc 	bl	8016650 <strncmp>
 8015258:	b980      	cbnz	r0, 801527c <__gethex+0xd0>
 801525a:	b94d      	cbnz	r5, 8015270 <__gethex+0xc4>
 801525c:	eb06 050a 	add.w	r5, r6, sl
 8015260:	462a      	mov	r2, r5
 8015262:	4616      	mov	r6, r2
 8015264:	3201      	adds	r2, #1
 8015266:	7830      	ldrb	r0, [r6, #0]
 8015268:	f7ff ff8a 	bl	8015180 <__hexdig_fun>
 801526c:	2800      	cmp	r0, #0
 801526e:	d1f8      	bne.n	8015262 <__gethex+0xb6>
 8015270:	1bad      	subs	r5, r5, r6
 8015272:	00ad      	lsls	r5, r5, #2
 8015274:	e004      	b.n	8015280 <__gethex+0xd4>
 8015276:	2400      	movs	r4, #0
 8015278:	4625      	mov	r5, r4
 801527a:	e7e0      	b.n	801523e <__gethex+0x92>
 801527c:	2d00      	cmp	r5, #0
 801527e:	d1f7      	bne.n	8015270 <__gethex+0xc4>
 8015280:	7833      	ldrb	r3, [r6, #0]
 8015282:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8015286:	2b50      	cmp	r3, #80	; 0x50
 8015288:	d13b      	bne.n	8015302 <__gethex+0x156>
 801528a:	7873      	ldrb	r3, [r6, #1]
 801528c:	2b2b      	cmp	r3, #43	; 0x2b
 801528e:	d02c      	beq.n	80152ea <__gethex+0x13e>
 8015290:	2b2d      	cmp	r3, #45	; 0x2d
 8015292:	d02e      	beq.n	80152f2 <__gethex+0x146>
 8015294:	1c71      	adds	r1, r6, #1
 8015296:	f04f 0900 	mov.w	r9, #0
 801529a:	7808      	ldrb	r0, [r1, #0]
 801529c:	f7ff ff70 	bl	8015180 <__hexdig_fun>
 80152a0:	1e43      	subs	r3, r0, #1
 80152a2:	b2db      	uxtb	r3, r3
 80152a4:	2b18      	cmp	r3, #24
 80152a6:	d82c      	bhi.n	8015302 <__gethex+0x156>
 80152a8:	f1a0 0210 	sub.w	r2, r0, #16
 80152ac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80152b0:	f7ff ff66 	bl	8015180 <__hexdig_fun>
 80152b4:	1e43      	subs	r3, r0, #1
 80152b6:	b2db      	uxtb	r3, r3
 80152b8:	2b18      	cmp	r3, #24
 80152ba:	d91d      	bls.n	80152f8 <__gethex+0x14c>
 80152bc:	f1b9 0f00 	cmp.w	r9, #0
 80152c0:	d000      	beq.n	80152c4 <__gethex+0x118>
 80152c2:	4252      	negs	r2, r2
 80152c4:	4415      	add	r5, r2
 80152c6:	f8cb 1000 	str.w	r1, [fp]
 80152ca:	b1e4      	cbz	r4, 8015306 <__gethex+0x15a>
 80152cc:	9b00      	ldr	r3, [sp, #0]
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	bf14      	ite	ne
 80152d2:	2700      	movne	r7, #0
 80152d4:	2706      	moveq	r7, #6
 80152d6:	4638      	mov	r0, r7
 80152d8:	b009      	add	sp, #36	; 0x24
 80152da:	ecbd 8b02 	vpop	{d8}
 80152de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152e2:	463e      	mov	r6, r7
 80152e4:	4625      	mov	r5, r4
 80152e6:	2401      	movs	r4, #1
 80152e8:	e7ca      	b.n	8015280 <__gethex+0xd4>
 80152ea:	f04f 0900 	mov.w	r9, #0
 80152ee:	1cb1      	adds	r1, r6, #2
 80152f0:	e7d3      	b.n	801529a <__gethex+0xee>
 80152f2:	f04f 0901 	mov.w	r9, #1
 80152f6:	e7fa      	b.n	80152ee <__gethex+0x142>
 80152f8:	230a      	movs	r3, #10
 80152fa:	fb03 0202 	mla	r2, r3, r2, r0
 80152fe:	3a10      	subs	r2, #16
 8015300:	e7d4      	b.n	80152ac <__gethex+0x100>
 8015302:	4631      	mov	r1, r6
 8015304:	e7df      	b.n	80152c6 <__gethex+0x11a>
 8015306:	1bf3      	subs	r3, r6, r7
 8015308:	3b01      	subs	r3, #1
 801530a:	4621      	mov	r1, r4
 801530c:	2b07      	cmp	r3, #7
 801530e:	dc0b      	bgt.n	8015328 <__gethex+0x17c>
 8015310:	ee18 0a10 	vmov	r0, s16
 8015314:	f000 fa70 	bl	80157f8 <_Balloc>
 8015318:	4604      	mov	r4, r0
 801531a:	b940      	cbnz	r0, 801532e <__gethex+0x182>
 801531c:	4b5d      	ldr	r3, [pc, #372]	; (8015494 <__gethex+0x2e8>)
 801531e:	4602      	mov	r2, r0
 8015320:	21de      	movs	r1, #222	; 0xde
 8015322:	485d      	ldr	r0, [pc, #372]	; (8015498 <__gethex+0x2ec>)
 8015324:	f001 f9b6 	bl	8016694 <__assert_func>
 8015328:	3101      	adds	r1, #1
 801532a:	105b      	asrs	r3, r3, #1
 801532c:	e7ee      	b.n	801530c <__gethex+0x160>
 801532e:	f100 0914 	add.w	r9, r0, #20
 8015332:	f04f 0b00 	mov.w	fp, #0
 8015336:	f1ca 0301 	rsb	r3, sl, #1
 801533a:	f8cd 9008 	str.w	r9, [sp, #8]
 801533e:	f8cd b000 	str.w	fp, [sp]
 8015342:	9306      	str	r3, [sp, #24]
 8015344:	42b7      	cmp	r7, r6
 8015346:	d340      	bcc.n	80153ca <__gethex+0x21e>
 8015348:	9802      	ldr	r0, [sp, #8]
 801534a:	9b00      	ldr	r3, [sp, #0]
 801534c:	f840 3b04 	str.w	r3, [r0], #4
 8015350:	eba0 0009 	sub.w	r0, r0, r9
 8015354:	1080      	asrs	r0, r0, #2
 8015356:	0146      	lsls	r6, r0, #5
 8015358:	6120      	str	r0, [r4, #16]
 801535a:	4618      	mov	r0, r3
 801535c:	f000 fb3e 	bl	80159dc <__hi0bits>
 8015360:	1a30      	subs	r0, r6, r0
 8015362:	f8d8 6000 	ldr.w	r6, [r8]
 8015366:	42b0      	cmp	r0, r6
 8015368:	dd63      	ble.n	8015432 <__gethex+0x286>
 801536a:	1b87      	subs	r7, r0, r6
 801536c:	4639      	mov	r1, r7
 801536e:	4620      	mov	r0, r4
 8015370:	f000 fee2 	bl	8016138 <__any_on>
 8015374:	4682      	mov	sl, r0
 8015376:	b1a8      	cbz	r0, 80153a4 <__gethex+0x1f8>
 8015378:	1e7b      	subs	r3, r7, #1
 801537a:	1159      	asrs	r1, r3, #5
 801537c:	f003 021f 	and.w	r2, r3, #31
 8015380:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8015384:	f04f 0a01 	mov.w	sl, #1
 8015388:	fa0a f202 	lsl.w	r2, sl, r2
 801538c:	420a      	tst	r2, r1
 801538e:	d009      	beq.n	80153a4 <__gethex+0x1f8>
 8015390:	4553      	cmp	r3, sl
 8015392:	dd05      	ble.n	80153a0 <__gethex+0x1f4>
 8015394:	1eb9      	subs	r1, r7, #2
 8015396:	4620      	mov	r0, r4
 8015398:	f000 fece 	bl	8016138 <__any_on>
 801539c:	2800      	cmp	r0, #0
 801539e:	d145      	bne.n	801542c <__gethex+0x280>
 80153a0:	f04f 0a02 	mov.w	sl, #2
 80153a4:	4639      	mov	r1, r7
 80153a6:	4620      	mov	r0, r4
 80153a8:	f7ff fe98 	bl	80150dc <rshift>
 80153ac:	443d      	add	r5, r7
 80153ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80153b2:	42ab      	cmp	r3, r5
 80153b4:	da4c      	bge.n	8015450 <__gethex+0x2a4>
 80153b6:	ee18 0a10 	vmov	r0, s16
 80153ba:	4621      	mov	r1, r4
 80153bc:	f000 fa5c 	bl	8015878 <_Bfree>
 80153c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80153c2:	2300      	movs	r3, #0
 80153c4:	6013      	str	r3, [r2, #0]
 80153c6:	27a3      	movs	r7, #163	; 0xa3
 80153c8:	e785      	b.n	80152d6 <__gethex+0x12a>
 80153ca:	1e73      	subs	r3, r6, #1
 80153cc:	9a05      	ldr	r2, [sp, #20]
 80153ce:	9303      	str	r3, [sp, #12]
 80153d0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80153d4:	4293      	cmp	r3, r2
 80153d6:	d019      	beq.n	801540c <__gethex+0x260>
 80153d8:	f1bb 0f20 	cmp.w	fp, #32
 80153dc:	d107      	bne.n	80153ee <__gethex+0x242>
 80153de:	9b02      	ldr	r3, [sp, #8]
 80153e0:	9a00      	ldr	r2, [sp, #0]
 80153e2:	f843 2b04 	str.w	r2, [r3], #4
 80153e6:	9302      	str	r3, [sp, #8]
 80153e8:	2300      	movs	r3, #0
 80153ea:	9300      	str	r3, [sp, #0]
 80153ec:	469b      	mov	fp, r3
 80153ee:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80153f2:	f7ff fec5 	bl	8015180 <__hexdig_fun>
 80153f6:	9b00      	ldr	r3, [sp, #0]
 80153f8:	f000 000f 	and.w	r0, r0, #15
 80153fc:	fa00 f00b 	lsl.w	r0, r0, fp
 8015400:	4303      	orrs	r3, r0
 8015402:	9300      	str	r3, [sp, #0]
 8015404:	f10b 0b04 	add.w	fp, fp, #4
 8015408:	9b03      	ldr	r3, [sp, #12]
 801540a:	e00d      	b.n	8015428 <__gethex+0x27c>
 801540c:	9b03      	ldr	r3, [sp, #12]
 801540e:	9a06      	ldr	r2, [sp, #24]
 8015410:	4413      	add	r3, r2
 8015412:	42bb      	cmp	r3, r7
 8015414:	d3e0      	bcc.n	80153d8 <__gethex+0x22c>
 8015416:	4618      	mov	r0, r3
 8015418:	9901      	ldr	r1, [sp, #4]
 801541a:	9307      	str	r3, [sp, #28]
 801541c:	4652      	mov	r2, sl
 801541e:	f001 f917 	bl	8016650 <strncmp>
 8015422:	9b07      	ldr	r3, [sp, #28]
 8015424:	2800      	cmp	r0, #0
 8015426:	d1d7      	bne.n	80153d8 <__gethex+0x22c>
 8015428:	461e      	mov	r6, r3
 801542a:	e78b      	b.n	8015344 <__gethex+0x198>
 801542c:	f04f 0a03 	mov.w	sl, #3
 8015430:	e7b8      	b.n	80153a4 <__gethex+0x1f8>
 8015432:	da0a      	bge.n	801544a <__gethex+0x29e>
 8015434:	1a37      	subs	r7, r6, r0
 8015436:	4621      	mov	r1, r4
 8015438:	ee18 0a10 	vmov	r0, s16
 801543c:	463a      	mov	r2, r7
 801543e:	f000 fc37 	bl	8015cb0 <__lshift>
 8015442:	1bed      	subs	r5, r5, r7
 8015444:	4604      	mov	r4, r0
 8015446:	f100 0914 	add.w	r9, r0, #20
 801544a:	f04f 0a00 	mov.w	sl, #0
 801544e:	e7ae      	b.n	80153ae <__gethex+0x202>
 8015450:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8015454:	42a8      	cmp	r0, r5
 8015456:	dd72      	ble.n	801553e <__gethex+0x392>
 8015458:	1b45      	subs	r5, r0, r5
 801545a:	42ae      	cmp	r6, r5
 801545c:	dc36      	bgt.n	80154cc <__gethex+0x320>
 801545e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015462:	2b02      	cmp	r3, #2
 8015464:	d02a      	beq.n	80154bc <__gethex+0x310>
 8015466:	2b03      	cmp	r3, #3
 8015468:	d02c      	beq.n	80154c4 <__gethex+0x318>
 801546a:	2b01      	cmp	r3, #1
 801546c:	d11c      	bne.n	80154a8 <__gethex+0x2fc>
 801546e:	42ae      	cmp	r6, r5
 8015470:	d11a      	bne.n	80154a8 <__gethex+0x2fc>
 8015472:	2e01      	cmp	r6, #1
 8015474:	d112      	bne.n	801549c <__gethex+0x2f0>
 8015476:	9a04      	ldr	r2, [sp, #16]
 8015478:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801547c:	6013      	str	r3, [r2, #0]
 801547e:	2301      	movs	r3, #1
 8015480:	6123      	str	r3, [r4, #16]
 8015482:	f8c9 3000 	str.w	r3, [r9]
 8015486:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015488:	2762      	movs	r7, #98	; 0x62
 801548a:	601c      	str	r4, [r3, #0]
 801548c:	e723      	b.n	80152d6 <__gethex+0x12a>
 801548e:	bf00      	nop
 8015490:	08018e08 	.word	0x08018e08
 8015494:	08018d90 	.word	0x08018d90
 8015498:	08018da1 	.word	0x08018da1
 801549c:	1e71      	subs	r1, r6, #1
 801549e:	4620      	mov	r0, r4
 80154a0:	f000 fe4a 	bl	8016138 <__any_on>
 80154a4:	2800      	cmp	r0, #0
 80154a6:	d1e6      	bne.n	8015476 <__gethex+0x2ca>
 80154a8:	ee18 0a10 	vmov	r0, s16
 80154ac:	4621      	mov	r1, r4
 80154ae:	f000 f9e3 	bl	8015878 <_Bfree>
 80154b2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80154b4:	2300      	movs	r3, #0
 80154b6:	6013      	str	r3, [r2, #0]
 80154b8:	2750      	movs	r7, #80	; 0x50
 80154ba:	e70c      	b.n	80152d6 <__gethex+0x12a>
 80154bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80154be:	2b00      	cmp	r3, #0
 80154c0:	d1f2      	bne.n	80154a8 <__gethex+0x2fc>
 80154c2:	e7d8      	b.n	8015476 <__gethex+0x2ca>
 80154c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80154c6:	2b00      	cmp	r3, #0
 80154c8:	d1d5      	bne.n	8015476 <__gethex+0x2ca>
 80154ca:	e7ed      	b.n	80154a8 <__gethex+0x2fc>
 80154cc:	1e6f      	subs	r7, r5, #1
 80154ce:	f1ba 0f00 	cmp.w	sl, #0
 80154d2:	d131      	bne.n	8015538 <__gethex+0x38c>
 80154d4:	b127      	cbz	r7, 80154e0 <__gethex+0x334>
 80154d6:	4639      	mov	r1, r7
 80154d8:	4620      	mov	r0, r4
 80154da:	f000 fe2d 	bl	8016138 <__any_on>
 80154de:	4682      	mov	sl, r0
 80154e0:	117b      	asrs	r3, r7, #5
 80154e2:	2101      	movs	r1, #1
 80154e4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80154e8:	f007 071f 	and.w	r7, r7, #31
 80154ec:	fa01 f707 	lsl.w	r7, r1, r7
 80154f0:	421f      	tst	r7, r3
 80154f2:	4629      	mov	r1, r5
 80154f4:	4620      	mov	r0, r4
 80154f6:	bf18      	it	ne
 80154f8:	f04a 0a02 	orrne.w	sl, sl, #2
 80154fc:	1b76      	subs	r6, r6, r5
 80154fe:	f7ff fded 	bl	80150dc <rshift>
 8015502:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8015506:	2702      	movs	r7, #2
 8015508:	f1ba 0f00 	cmp.w	sl, #0
 801550c:	d048      	beq.n	80155a0 <__gethex+0x3f4>
 801550e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015512:	2b02      	cmp	r3, #2
 8015514:	d015      	beq.n	8015542 <__gethex+0x396>
 8015516:	2b03      	cmp	r3, #3
 8015518:	d017      	beq.n	801554a <__gethex+0x39e>
 801551a:	2b01      	cmp	r3, #1
 801551c:	d109      	bne.n	8015532 <__gethex+0x386>
 801551e:	f01a 0f02 	tst.w	sl, #2
 8015522:	d006      	beq.n	8015532 <__gethex+0x386>
 8015524:	f8d9 0000 	ldr.w	r0, [r9]
 8015528:	ea4a 0a00 	orr.w	sl, sl, r0
 801552c:	f01a 0f01 	tst.w	sl, #1
 8015530:	d10e      	bne.n	8015550 <__gethex+0x3a4>
 8015532:	f047 0710 	orr.w	r7, r7, #16
 8015536:	e033      	b.n	80155a0 <__gethex+0x3f4>
 8015538:	f04f 0a01 	mov.w	sl, #1
 801553c:	e7d0      	b.n	80154e0 <__gethex+0x334>
 801553e:	2701      	movs	r7, #1
 8015540:	e7e2      	b.n	8015508 <__gethex+0x35c>
 8015542:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015544:	f1c3 0301 	rsb	r3, r3, #1
 8015548:	9315      	str	r3, [sp, #84]	; 0x54
 801554a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801554c:	2b00      	cmp	r3, #0
 801554e:	d0f0      	beq.n	8015532 <__gethex+0x386>
 8015550:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8015554:	f104 0314 	add.w	r3, r4, #20
 8015558:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801555c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8015560:	f04f 0c00 	mov.w	ip, #0
 8015564:	4618      	mov	r0, r3
 8015566:	f853 2b04 	ldr.w	r2, [r3], #4
 801556a:	f1b2 3fff 	cmp.w	r2, #4294967295
 801556e:	d01c      	beq.n	80155aa <__gethex+0x3fe>
 8015570:	3201      	adds	r2, #1
 8015572:	6002      	str	r2, [r0, #0]
 8015574:	2f02      	cmp	r7, #2
 8015576:	f104 0314 	add.w	r3, r4, #20
 801557a:	d13f      	bne.n	80155fc <__gethex+0x450>
 801557c:	f8d8 2000 	ldr.w	r2, [r8]
 8015580:	3a01      	subs	r2, #1
 8015582:	42b2      	cmp	r2, r6
 8015584:	d10a      	bne.n	801559c <__gethex+0x3f0>
 8015586:	1171      	asrs	r1, r6, #5
 8015588:	2201      	movs	r2, #1
 801558a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801558e:	f006 061f 	and.w	r6, r6, #31
 8015592:	fa02 f606 	lsl.w	r6, r2, r6
 8015596:	421e      	tst	r6, r3
 8015598:	bf18      	it	ne
 801559a:	4617      	movne	r7, r2
 801559c:	f047 0720 	orr.w	r7, r7, #32
 80155a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80155a2:	601c      	str	r4, [r3, #0]
 80155a4:	9b04      	ldr	r3, [sp, #16]
 80155a6:	601d      	str	r5, [r3, #0]
 80155a8:	e695      	b.n	80152d6 <__gethex+0x12a>
 80155aa:	4299      	cmp	r1, r3
 80155ac:	f843 cc04 	str.w	ip, [r3, #-4]
 80155b0:	d8d8      	bhi.n	8015564 <__gethex+0x3b8>
 80155b2:	68a3      	ldr	r3, [r4, #8]
 80155b4:	459b      	cmp	fp, r3
 80155b6:	db19      	blt.n	80155ec <__gethex+0x440>
 80155b8:	6861      	ldr	r1, [r4, #4]
 80155ba:	ee18 0a10 	vmov	r0, s16
 80155be:	3101      	adds	r1, #1
 80155c0:	f000 f91a 	bl	80157f8 <_Balloc>
 80155c4:	4681      	mov	r9, r0
 80155c6:	b918      	cbnz	r0, 80155d0 <__gethex+0x424>
 80155c8:	4b1a      	ldr	r3, [pc, #104]	; (8015634 <__gethex+0x488>)
 80155ca:	4602      	mov	r2, r0
 80155cc:	2184      	movs	r1, #132	; 0x84
 80155ce:	e6a8      	b.n	8015322 <__gethex+0x176>
 80155d0:	6922      	ldr	r2, [r4, #16]
 80155d2:	3202      	adds	r2, #2
 80155d4:	f104 010c 	add.w	r1, r4, #12
 80155d8:	0092      	lsls	r2, r2, #2
 80155da:	300c      	adds	r0, #12
 80155dc:	f7fd f9a0 	bl	8012920 <memcpy>
 80155e0:	4621      	mov	r1, r4
 80155e2:	ee18 0a10 	vmov	r0, s16
 80155e6:	f000 f947 	bl	8015878 <_Bfree>
 80155ea:	464c      	mov	r4, r9
 80155ec:	6923      	ldr	r3, [r4, #16]
 80155ee:	1c5a      	adds	r2, r3, #1
 80155f0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80155f4:	6122      	str	r2, [r4, #16]
 80155f6:	2201      	movs	r2, #1
 80155f8:	615a      	str	r2, [r3, #20]
 80155fa:	e7bb      	b.n	8015574 <__gethex+0x3c8>
 80155fc:	6922      	ldr	r2, [r4, #16]
 80155fe:	455a      	cmp	r2, fp
 8015600:	dd0b      	ble.n	801561a <__gethex+0x46e>
 8015602:	2101      	movs	r1, #1
 8015604:	4620      	mov	r0, r4
 8015606:	f7ff fd69 	bl	80150dc <rshift>
 801560a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801560e:	3501      	adds	r5, #1
 8015610:	42ab      	cmp	r3, r5
 8015612:	f6ff aed0 	blt.w	80153b6 <__gethex+0x20a>
 8015616:	2701      	movs	r7, #1
 8015618:	e7c0      	b.n	801559c <__gethex+0x3f0>
 801561a:	f016 061f 	ands.w	r6, r6, #31
 801561e:	d0fa      	beq.n	8015616 <__gethex+0x46a>
 8015620:	4453      	add	r3, sl
 8015622:	f1c6 0620 	rsb	r6, r6, #32
 8015626:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801562a:	f000 f9d7 	bl	80159dc <__hi0bits>
 801562e:	42b0      	cmp	r0, r6
 8015630:	dbe7      	blt.n	8015602 <__gethex+0x456>
 8015632:	e7f0      	b.n	8015616 <__gethex+0x46a>
 8015634:	08018d90 	.word	0x08018d90

08015638 <L_shift>:
 8015638:	f1c2 0208 	rsb	r2, r2, #8
 801563c:	0092      	lsls	r2, r2, #2
 801563e:	b570      	push	{r4, r5, r6, lr}
 8015640:	f1c2 0620 	rsb	r6, r2, #32
 8015644:	6843      	ldr	r3, [r0, #4]
 8015646:	6804      	ldr	r4, [r0, #0]
 8015648:	fa03 f506 	lsl.w	r5, r3, r6
 801564c:	432c      	orrs	r4, r5
 801564e:	40d3      	lsrs	r3, r2
 8015650:	6004      	str	r4, [r0, #0]
 8015652:	f840 3f04 	str.w	r3, [r0, #4]!
 8015656:	4288      	cmp	r0, r1
 8015658:	d3f4      	bcc.n	8015644 <L_shift+0xc>
 801565a:	bd70      	pop	{r4, r5, r6, pc}

0801565c <__match>:
 801565c:	b530      	push	{r4, r5, lr}
 801565e:	6803      	ldr	r3, [r0, #0]
 8015660:	3301      	adds	r3, #1
 8015662:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015666:	b914      	cbnz	r4, 801566e <__match+0x12>
 8015668:	6003      	str	r3, [r0, #0]
 801566a:	2001      	movs	r0, #1
 801566c:	bd30      	pop	{r4, r5, pc}
 801566e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015672:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8015676:	2d19      	cmp	r5, #25
 8015678:	bf98      	it	ls
 801567a:	3220      	addls	r2, #32
 801567c:	42a2      	cmp	r2, r4
 801567e:	d0f0      	beq.n	8015662 <__match+0x6>
 8015680:	2000      	movs	r0, #0
 8015682:	e7f3      	b.n	801566c <__match+0x10>

08015684 <__hexnan>:
 8015684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015688:	680b      	ldr	r3, [r1, #0]
 801568a:	115e      	asrs	r6, r3, #5
 801568c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8015690:	f013 031f 	ands.w	r3, r3, #31
 8015694:	b087      	sub	sp, #28
 8015696:	bf18      	it	ne
 8015698:	3604      	addne	r6, #4
 801569a:	2500      	movs	r5, #0
 801569c:	1f37      	subs	r7, r6, #4
 801569e:	4690      	mov	r8, r2
 80156a0:	6802      	ldr	r2, [r0, #0]
 80156a2:	9301      	str	r3, [sp, #4]
 80156a4:	4682      	mov	sl, r0
 80156a6:	f846 5c04 	str.w	r5, [r6, #-4]
 80156aa:	46b9      	mov	r9, r7
 80156ac:	463c      	mov	r4, r7
 80156ae:	9502      	str	r5, [sp, #8]
 80156b0:	46ab      	mov	fp, r5
 80156b2:	7851      	ldrb	r1, [r2, #1]
 80156b4:	1c53      	adds	r3, r2, #1
 80156b6:	9303      	str	r3, [sp, #12]
 80156b8:	b341      	cbz	r1, 801570c <__hexnan+0x88>
 80156ba:	4608      	mov	r0, r1
 80156bc:	9205      	str	r2, [sp, #20]
 80156be:	9104      	str	r1, [sp, #16]
 80156c0:	f7ff fd5e 	bl	8015180 <__hexdig_fun>
 80156c4:	2800      	cmp	r0, #0
 80156c6:	d14f      	bne.n	8015768 <__hexnan+0xe4>
 80156c8:	9904      	ldr	r1, [sp, #16]
 80156ca:	9a05      	ldr	r2, [sp, #20]
 80156cc:	2920      	cmp	r1, #32
 80156ce:	d818      	bhi.n	8015702 <__hexnan+0x7e>
 80156d0:	9b02      	ldr	r3, [sp, #8]
 80156d2:	459b      	cmp	fp, r3
 80156d4:	dd13      	ble.n	80156fe <__hexnan+0x7a>
 80156d6:	454c      	cmp	r4, r9
 80156d8:	d206      	bcs.n	80156e8 <__hexnan+0x64>
 80156da:	2d07      	cmp	r5, #7
 80156dc:	dc04      	bgt.n	80156e8 <__hexnan+0x64>
 80156de:	462a      	mov	r2, r5
 80156e0:	4649      	mov	r1, r9
 80156e2:	4620      	mov	r0, r4
 80156e4:	f7ff ffa8 	bl	8015638 <L_shift>
 80156e8:	4544      	cmp	r4, r8
 80156ea:	d950      	bls.n	801578e <__hexnan+0x10a>
 80156ec:	2300      	movs	r3, #0
 80156ee:	f1a4 0904 	sub.w	r9, r4, #4
 80156f2:	f844 3c04 	str.w	r3, [r4, #-4]
 80156f6:	f8cd b008 	str.w	fp, [sp, #8]
 80156fa:	464c      	mov	r4, r9
 80156fc:	461d      	mov	r5, r3
 80156fe:	9a03      	ldr	r2, [sp, #12]
 8015700:	e7d7      	b.n	80156b2 <__hexnan+0x2e>
 8015702:	2929      	cmp	r1, #41	; 0x29
 8015704:	d156      	bne.n	80157b4 <__hexnan+0x130>
 8015706:	3202      	adds	r2, #2
 8015708:	f8ca 2000 	str.w	r2, [sl]
 801570c:	f1bb 0f00 	cmp.w	fp, #0
 8015710:	d050      	beq.n	80157b4 <__hexnan+0x130>
 8015712:	454c      	cmp	r4, r9
 8015714:	d206      	bcs.n	8015724 <__hexnan+0xa0>
 8015716:	2d07      	cmp	r5, #7
 8015718:	dc04      	bgt.n	8015724 <__hexnan+0xa0>
 801571a:	462a      	mov	r2, r5
 801571c:	4649      	mov	r1, r9
 801571e:	4620      	mov	r0, r4
 8015720:	f7ff ff8a 	bl	8015638 <L_shift>
 8015724:	4544      	cmp	r4, r8
 8015726:	d934      	bls.n	8015792 <__hexnan+0x10e>
 8015728:	f1a8 0204 	sub.w	r2, r8, #4
 801572c:	4623      	mov	r3, r4
 801572e:	f853 1b04 	ldr.w	r1, [r3], #4
 8015732:	f842 1f04 	str.w	r1, [r2, #4]!
 8015736:	429f      	cmp	r7, r3
 8015738:	d2f9      	bcs.n	801572e <__hexnan+0xaa>
 801573a:	1b3b      	subs	r3, r7, r4
 801573c:	f023 0303 	bic.w	r3, r3, #3
 8015740:	3304      	adds	r3, #4
 8015742:	3401      	adds	r4, #1
 8015744:	3e03      	subs	r6, #3
 8015746:	42b4      	cmp	r4, r6
 8015748:	bf88      	it	hi
 801574a:	2304      	movhi	r3, #4
 801574c:	4443      	add	r3, r8
 801574e:	2200      	movs	r2, #0
 8015750:	f843 2b04 	str.w	r2, [r3], #4
 8015754:	429f      	cmp	r7, r3
 8015756:	d2fb      	bcs.n	8015750 <__hexnan+0xcc>
 8015758:	683b      	ldr	r3, [r7, #0]
 801575a:	b91b      	cbnz	r3, 8015764 <__hexnan+0xe0>
 801575c:	4547      	cmp	r7, r8
 801575e:	d127      	bne.n	80157b0 <__hexnan+0x12c>
 8015760:	2301      	movs	r3, #1
 8015762:	603b      	str	r3, [r7, #0]
 8015764:	2005      	movs	r0, #5
 8015766:	e026      	b.n	80157b6 <__hexnan+0x132>
 8015768:	3501      	adds	r5, #1
 801576a:	2d08      	cmp	r5, #8
 801576c:	f10b 0b01 	add.w	fp, fp, #1
 8015770:	dd06      	ble.n	8015780 <__hexnan+0xfc>
 8015772:	4544      	cmp	r4, r8
 8015774:	d9c3      	bls.n	80156fe <__hexnan+0x7a>
 8015776:	2300      	movs	r3, #0
 8015778:	f844 3c04 	str.w	r3, [r4, #-4]
 801577c:	2501      	movs	r5, #1
 801577e:	3c04      	subs	r4, #4
 8015780:	6822      	ldr	r2, [r4, #0]
 8015782:	f000 000f 	and.w	r0, r0, #15
 8015786:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801578a:	6022      	str	r2, [r4, #0]
 801578c:	e7b7      	b.n	80156fe <__hexnan+0x7a>
 801578e:	2508      	movs	r5, #8
 8015790:	e7b5      	b.n	80156fe <__hexnan+0x7a>
 8015792:	9b01      	ldr	r3, [sp, #4]
 8015794:	2b00      	cmp	r3, #0
 8015796:	d0df      	beq.n	8015758 <__hexnan+0xd4>
 8015798:	f04f 32ff 	mov.w	r2, #4294967295
 801579c:	f1c3 0320 	rsb	r3, r3, #32
 80157a0:	fa22 f303 	lsr.w	r3, r2, r3
 80157a4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80157a8:	401a      	ands	r2, r3
 80157aa:	f846 2c04 	str.w	r2, [r6, #-4]
 80157ae:	e7d3      	b.n	8015758 <__hexnan+0xd4>
 80157b0:	3f04      	subs	r7, #4
 80157b2:	e7d1      	b.n	8015758 <__hexnan+0xd4>
 80157b4:	2004      	movs	r0, #4
 80157b6:	b007      	add	sp, #28
 80157b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080157bc <_localeconv_r>:
 80157bc:	4800      	ldr	r0, [pc, #0]	; (80157c0 <_localeconv_r+0x4>)
 80157be:	4770      	bx	lr
 80157c0:	200001fc 	.word	0x200001fc

080157c4 <malloc>:
 80157c4:	4b02      	ldr	r3, [pc, #8]	; (80157d0 <malloc+0xc>)
 80157c6:	4601      	mov	r1, r0
 80157c8:	6818      	ldr	r0, [r3, #0]
 80157ca:	f000 bd59 	b.w	8016280 <_malloc_r>
 80157ce:	bf00      	nop
 80157d0:	200000a4 	.word	0x200000a4

080157d4 <__ascii_mbtowc>:
 80157d4:	b082      	sub	sp, #8
 80157d6:	b901      	cbnz	r1, 80157da <__ascii_mbtowc+0x6>
 80157d8:	a901      	add	r1, sp, #4
 80157da:	b142      	cbz	r2, 80157ee <__ascii_mbtowc+0x1a>
 80157dc:	b14b      	cbz	r3, 80157f2 <__ascii_mbtowc+0x1e>
 80157de:	7813      	ldrb	r3, [r2, #0]
 80157e0:	600b      	str	r3, [r1, #0]
 80157e2:	7812      	ldrb	r2, [r2, #0]
 80157e4:	1e10      	subs	r0, r2, #0
 80157e6:	bf18      	it	ne
 80157e8:	2001      	movne	r0, #1
 80157ea:	b002      	add	sp, #8
 80157ec:	4770      	bx	lr
 80157ee:	4610      	mov	r0, r2
 80157f0:	e7fb      	b.n	80157ea <__ascii_mbtowc+0x16>
 80157f2:	f06f 0001 	mvn.w	r0, #1
 80157f6:	e7f8      	b.n	80157ea <__ascii_mbtowc+0x16>

080157f8 <_Balloc>:
 80157f8:	b570      	push	{r4, r5, r6, lr}
 80157fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80157fc:	4604      	mov	r4, r0
 80157fe:	460d      	mov	r5, r1
 8015800:	b976      	cbnz	r6, 8015820 <_Balloc+0x28>
 8015802:	2010      	movs	r0, #16
 8015804:	f7ff ffde 	bl	80157c4 <malloc>
 8015808:	4602      	mov	r2, r0
 801580a:	6260      	str	r0, [r4, #36]	; 0x24
 801580c:	b920      	cbnz	r0, 8015818 <_Balloc+0x20>
 801580e:	4b18      	ldr	r3, [pc, #96]	; (8015870 <_Balloc+0x78>)
 8015810:	4818      	ldr	r0, [pc, #96]	; (8015874 <_Balloc+0x7c>)
 8015812:	2166      	movs	r1, #102	; 0x66
 8015814:	f000 ff3e 	bl	8016694 <__assert_func>
 8015818:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801581c:	6006      	str	r6, [r0, #0]
 801581e:	60c6      	str	r6, [r0, #12]
 8015820:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015822:	68f3      	ldr	r3, [r6, #12]
 8015824:	b183      	cbz	r3, 8015848 <_Balloc+0x50>
 8015826:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015828:	68db      	ldr	r3, [r3, #12]
 801582a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801582e:	b9b8      	cbnz	r0, 8015860 <_Balloc+0x68>
 8015830:	2101      	movs	r1, #1
 8015832:	fa01 f605 	lsl.w	r6, r1, r5
 8015836:	1d72      	adds	r2, r6, #5
 8015838:	0092      	lsls	r2, r2, #2
 801583a:	4620      	mov	r0, r4
 801583c:	f000 fc9d 	bl	801617a <_calloc_r>
 8015840:	b160      	cbz	r0, 801585c <_Balloc+0x64>
 8015842:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015846:	e00e      	b.n	8015866 <_Balloc+0x6e>
 8015848:	2221      	movs	r2, #33	; 0x21
 801584a:	2104      	movs	r1, #4
 801584c:	4620      	mov	r0, r4
 801584e:	f000 fc94 	bl	801617a <_calloc_r>
 8015852:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015854:	60f0      	str	r0, [r6, #12]
 8015856:	68db      	ldr	r3, [r3, #12]
 8015858:	2b00      	cmp	r3, #0
 801585a:	d1e4      	bne.n	8015826 <_Balloc+0x2e>
 801585c:	2000      	movs	r0, #0
 801585e:	bd70      	pop	{r4, r5, r6, pc}
 8015860:	6802      	ldr	r2, [r0, #0]
 8015862:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015866:	2300      	movs	r3, #0
 8015868:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801586c:	e7f7      	b.n	801585e <_Balloc+0x66>
 801586e:	bf00      	nop
 8015870:	08018d1e 	.word	0x08018d1e
 8015874:	08018e1c 	.word	0x08018e1c

08015878 <_Bfree>:
 8015878:	b570      	push	{r4, r5, r6, lr}
 801587a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801587c:	4605      	mov	r5, r0
 801587e:	460c      	mov	r4, r1
 8015880:	b976      	cbnz	r6, 80158a0 <_Bfree+0x28>
 8015882:	2010      	movs	r0, #16
 8015884:	f7ff ff9e 	bl	80157c4 <malloc>
 8015888:	4602      	mov	r2, r0
 801588a:	6268      	str	r0, [r5, #36]	; 0x24
 801588c:	b920      	cbnz	r0, 8015898 <_Bfree+0x20>
 801588e:	4b09      	ldr	r3, [pc, #36]	; (80158b4 <_Bfree+0x3c>)
 8015890:	4809      	ldr	r0, [pc, #36]	; (80158b8 <_Bfree+0x40>)
 8015892:	218a      	movs	r1, #138	; 0x8a
 8015894:	f000 fefe 	bl	8016694 <__assert_func>
 8015898:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801589c:	6006      	str	r6, [r0, #0]
 801589e:	60c6      	str	r6, [r0, #12]
 80158a0:	b13c      	cbz	r4, 80158b2 <_Bfree+0x3a>
 80158a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80158a4:	6862      	ldr	r2, [r4, #4]
 80158a6:	68db      	ldr	r3, [r3, #12]
 80158a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80158ac:	6021      	str	r1, [r4, #0]
 80158ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80158b2:	bd70      	pop	{r4, r5, r6, pc}
 80158b4:	08018d1e 	.word	0x08018d1e
 80158b8:	08018e1c 	.word	0x08018e1c

080158bc <__multadd>:
 80158bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80158c0:	690d      	ldr	r5, [r1, #16]
 80158c2:	4607      	mov	r7, r0
 80158c4:	460c      	mov	r4, r1
 80158c6:	461e      	mov	r6, r3
 80158c8:	f101 0c14 	add.w	ip, r1, #20
 80158cc:	2000      	movs	r0, #0
 80158ce:	f8dc 3000 	ldr.w	r3, [ip]
 80158d2:	b299      	uxth	r1, r3
 80158d4:	fb02 6101 	mla	r1, r2, r1, r6
 80158d8:	0c1e      	lsrs	r6, r3, #16
 80158da:	0c0b      	lsrs	r3, r1, #16
 80158dc:	fb02 3306 	mla	r3, r2, r6, r3
 80158e0:	b289      	uxth	r1, r1
 80158e2:	3001      	adds	r0, #1
 80158e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80158e8:	4285      	cmp	r5, r0
 80158ea:	f84c 1b04 	str.w	r1, [ip], #4
 80158ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80158f2:	dcec      	bgt.n	80158ce <__multadd+0x12>
 80158f4:	b30e      	cbz	r6, 801593a <__multadd+0x7e>
 80158f6:	68a3      	ldr	r3, [r4, #8]
 80158f8:	42ab      	cmp	r3, r5
 80158fa:	dc19      	bgt.n	8015930 <__multadd+0x74>
 80158fc:	6861      	ldr	r1, [r4, #4]
 80158fe:	4638      	mov	r0, r7
 8015900:	3101      	adds	r1, #1
 8015902:	f7ff ff79 	bl	80157f8 <_Balloc>
 8015906:	4680      	mov	r8, r0
 8015908:	b928      	cbnz	r0, 8015916 <__multadd+0x5a>
 801590a:	4602      	mov	r2, r0
 801590c:	4b0c      	ldr	r3, [pc, #48]	; (8015940 <__multadd+0x84>)
 801590e:	480d      	ldr	r0, [pc, #52]	; (8015944 <__multadd+0x88>)
 8015910:	21b5      	movs	r1, #181	; 0xb5
 8015912:	f000 febf 	bl	8016694 <__assert_func>
 8015916:	6922      	ldr	r2, [r4, #16]
 8015918:	3202      	adds	r2, #2
 801591a:	f104 010c 	add.w	r1, r4, #12
 801591e:	0092      	lsls	r2, r2, #2
 8015920:	300c      	adds	r0, #12
 8015922:	f7fc fffd 	bl	8012920 <memcpy>
 8015926:	4621      	mov	r1, r4
 8015928:	4638      	mov	r0, r7
 801592a:	f7ff ffa5 	bl	8015878 <_Bfree>
 801592e:	4644      	mov	r4, r8
 8015930:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015934:	3501      	adds	r5, #1
 8015936:	615e      	str	r6, [r3, #20]
 8015938:	6125      	str	r5, [r4, #16]
 801593a:	4620      	mov	r0, r4
 801593c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015940:	08018d90 	.word	0x08018d90
 8015944:	08018e1c 	.word	0x08018e1c

08015948 <__s2b>:
 8015948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801594c:	460c      	mov	r4, r1
 801594e:	4615      	mov	r5, r2
 8015950:	461f      	mov	r7, r3
 8015952:	2209      	movs	r2, #9
 8015954:	3308      	adds	r3, #8
 8015956:	4606      	mov	r6, r0
 8015958:	fb93 f3f2 	sdiv	r3, r3, r2
 801595c:	2100      	movs	r1, #0
 801595e:	2201      	movs	r2, #1
 8015960:	429a      	cmp	r2, r3
 8015962:	db09      	blt.n	8015978 <__s2b+0x30>
 8015964:	4630      	mov	r0, r6
 8015966:	f7ff ff47 	bl	80157f8 <_Balloc>
 801596a:	b940      	cbnz	r0, 801597e <__s2b+0x36>
 801596c:	4602      	mov	r2, r0
 801596e:	4b19      	ldr	r3, [pc, #100]	; (80159d4 <__s2b+0x8c>)
 8015970:	4819      	ldr	r0, [pc, #100]	; (80159d8 <__s2b+0x90>)
 8015972:	21ce      	movs	r1, #206	; 0xce
 8015974:	f000 fe8e 	bl	8016694 <__assert_func>
 8015978:	0052      	lsls	r2, r2, #1
 801597a:	3101      	adds	r1, #1
 801597c:	e7f0      	b.n	8015960 <__s2b+0x18>
 801597e:	9b08      	ldr	r3, [sp, #32]
 8015980:	6143      	str	r3, [r0, #20]
 8015982:	2d09      	cmp	r5, #9
 8015984:	f04f 0301 	mov.w	r3, #1
 8015988:	6103      	str	r3, [r0, #16]
 801598a:	dd16      	ble.n	80159ba <__s2b+0x72>
 801598c:	f104 0909 	add.w	r9, r4, #9
 8015990:	46c8      	mov	r8, r9
 8015992:	442c      	add	r4, r5
 8015994:	f818 3b01 	ldrb.w	r3, [r8], #1
 8015998:	4601      	mov	r1, r0
 801599a:	3b30      	subs	r3, #48	; 0x30
 801599c:	220a      	movs	r2, #10
 801599e:	4630      	mov	r0, r6
 80159a0:	f7ff ff8c 	bl	80158bc <__multadd>
 80159a4:	45a0      	cmp	r8, r4
 80159a6:	d1f5      	bne.n	8015994 <__s2b+0x4c>
 80159a8:	f1a5 0408 	sub.w	r4, r5, #8
 80159ac:	444c      	add	r4, r9
 80159ae:	1b2d      	subs	r5, r5, r4
 80159b0:	1963      	adds	r3, r4, r5
 80159b2:	42bb      	cmp	r3, r7
 80159b4:	db04      	blt.n	80159c0 <__s2b+0x78>
 80159b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80159ba:	340a      	adds	r4, #10
 80159bc:	2509      	movs	r5, #9
 80159be:	e7f6      	b.n	80159ae <__s2b+0x66>
 80159c0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80159c4:	4601      	mov	r1, r0
 80159c6:	3b30      	subs	r3, #48	; 0x30
 80159c8:	220a      	movs	r2, #10
 80159ca:	4630      	mov	r0, r6
 80159cc:	f7ff ff76 	bl	80158bc <__multadd>
 80159d0:	e7ee      	b.n	80159b0 <__s2b+0x68>
 80159d2:	bf00      	nop
 80159d4:	08018d90 	.word	0x08018d90
 80159d8:	08018e1c 	.word	0x08018e1c

080159dc <__hi0bits>:
 80159dc:	0c03      	lsrs	r3, r0, #16
 80159de:	041b      	lsls	r3, r3, #16
 80159e0:	b9d3      	cbnz	r3, 8015a18 <__hi0bits+0x3c>
 80159e2:	0400      	lsls	r0, r0, #16
 80159e4:	2310      	movs	r3, #16
 80159e6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80159ea:	bf04      	itt	eq
 80159ec:	0200      	lsleq	r0, r0, #8
 80159ee:	3308      	addeq	r3, #8
 80159f0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80159f4:	bf04      	itt	eq
 80159f6:	0100      	lsleq	r0, r0, #4
 80159f8:	3304      	addeq	r3, #4
 80159fa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80159fe:	bf04      	itt	eq
 8015a00:	0080      	lsleq	r0, r0, #2
 8015a02:	3302      	addeq	r3, #2
 8015a04:	2800      	cmp	r0, #0
 8015a06:	db05      	blt.n	8015a14 <__hi0bits+0x38>
 8015a08:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8015a0c:	f103 0301 	add.w	r3, r3, #1
 8015a10:	bf08      	it	eq
 8015a12:	2320      	moveq	r3, #32
 8015a14:	4618      	mov	r0, r3
 8015a16:	4770      	bx	lr
 8015a18:	2300      	movs	r3, #0
 8015a1a:	e7e4      	b.n	80159e6 <__hi0bits+0xa>

08015a1c <__lo0bits>:
 8015a1c:	6803      	ldr	r3, [r0, #0]
 8015a1e:	f013 0207 	ands.w	r2, r3, #7
 8015a22:	4601      	mov	r1, r0
 8015a24:	d00b      	beq.n	8015a3e <__lo0bits+0x22>
 8015a26:	07da      	lsls	r2, r3, #31
 8015a28:	d423      	bmi.n	8015a72 <__lo0bits+0x56>
 8015a2a:	0798      	lsls	r0, r3, #30
 8015a2c:	bf49      	itett	mi
 8015a2e:	085b      	lsrmi	r3, r3, #1
 8015a30:	089b      	lsrpl	r3, r3, #2
 8015a32:	2001      	movmi	r0, #1
 8015a34:	600b      	strmi	r3, [r1, #0]
 8015a36:	bf5c      	itt	pl
 8015a38:	600b      	strpl	r3, [r1, #0]
 8015a3a:	2002      	movpl	r0, #2
 8015a3c:	4770      	bx	lr
 8015a3e:	b298      	uxth	r0, r3
 8015a40:	b9a8      	cbnz	r0, 8015a6e <__lo0bits+0x52>
 8015a42:	0c1b      	lsrs	r3, r3, #16
 8015a44:	2010      	movs	r0, #16
 8015a46:	b2da      	uxtb	r2, r3
 8015a48:	b90a      	cbnz	r2, 8015a4e <__lo0bits+0x32>
 8015a4a:	3008      	adds	r0, #8
 8015a4c:	0a1b      	lsrs	r3, r3, #8
 8015a4e:	071a      	lsls	r2, r3, #28
 8015a50:	bf04      	itt	eq
 8015a52:	091b      	lsreq	r3, r3, #4
 8015a54:	3004      	addeq	r0, #4
 8015a56:	079a      	lsls	r2, r3, #30
 8015a58:	bf04      	itt	eq
 8015a5a:	089b      	lsreq	r3, r3, #2
 8015a5c:	3002      	addeq	r0, #2
 8015a5e:	07da      	lsls	r2, r3, #31
 8015a60:	d403      	bmi.n	8015a6a <__lo0bits+0x4e>
 8015a62:	085b      	lsrs	r3, r3, #1
 8015a64:	f100 0001 	add.w	r0, r0, #1
 8015a68:	d005      	beq.n	8015a76 <__lo0bits+0x5a>
 8015a6a:	600b      	str	r3, [r1, #0]
 8015a6c:	4770      	bx	lr
 8015a6e:	4610      	mov	r0, r2
 8015a70:	e7e9      	b.n	8015a46 <__lo0bits+0x2a>
 8015a72:	2000      	movs	r0, #0
 8015a74:	4770      	bx	lr
 8015a76:	2020      	movs	r0, #32
 8015a78:	4770      	bx	lr
	...

08015a7c <__i2b>:
 8015a7c:	b510      	push	{r4, lr}
 8015a7e:	460c      	mov	r4, r1
 8015a80:	2101      	movs	r1, #1
 8015a82:	f7ff feb9 	bl	80157f8 <_Balloc>
 8015a86:	4602      	mov	r2, r0
 8015a88:	b928      	cbnz	r0, 8015a96 <__i2b+0x1a>
 8015a8a:	4b05      	ldr	r3, [pc, #20]	; (8015aa0 <__i2b+0x24>)
 8015a8c:	4805      	ldr	r0, [pc, #20]	; (8015aa4 <__i2b+0x28>)
 8015a8e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8015a92:	f000 fdff 	bl	8016694 <__assert_func>
 8015a96:	2301      	movs	r3, #1
 8015a98:	6144      	str	r4, [r0, #20]
 8015a9a:	6103      	str	r3, [r0, #16]
 8015a9c:	bd10      	pop	{r4, pc}
 8015a9e:	bf00      	nop
 8015aa0:	08018d90 	.word	0x08018d90
 8015aa4:	08018e1c 	.word	0x08018e1c

08015aa8 <__multiply>:
 8015aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015aac:	4691      	mov	r9, r2
 8015aae:	690a      	ldr	r2, [r1, #16]
 8015ab0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015ab4:	429a      	cmp	r2, r3
 8015ab6:	bfb8      	it	lt
 8015ab8:	460b      	movlt	r3, r1
 8015aba:	460c      	mov	r4, r1
 8015abc:	bfbc      	itt	lt
 8015abe:	464c      	movlt	r4, r9
 8015ac0:	4699      	movlt	r9, r3
 8015ac2:	6927      	ldr	r7, [r4, #16]
 8015ac4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015ac8:	68a3      	ldr	r3, [r4, #8]
 8015aca:	6861      	ldr	r1, [r4, #4]
 8015acc:	eb07 060a 	add.w	r6, r7, sl
 8015ad0:	42b3      	cmp	r3, r6
 8015ad2:	b085      	sub	sp, #20
 8015ad4:	bfb8      	it	lt
 8015ad6:	3101      	addlt	r1, #1
 8015ad8:	f7ff fe8e 	bl	80157f8 <_Balloc>
 8015adc:	b930      	cbnz	r0, 8015aec <__multiply+0x44>
 8015ade:	4602      	mov	r2, r0
 8015ae0:	4b44      	ldr	r3, [pc, #272]	; (8015bf4 <__multiply+0x14c>)
 8015ae2:	4845      	ldr	r0, [pc, #276]	; (8015bf8 <__multiply+0x150>)
 8015ae4:	f240 115d 	movw	r1, #349	; 0x15d
 8015ae8:	f000 fdd4 	bl	8016694 <__assert_func>
 8015aec:	f100 0514 	add.w	r5, r0, #20
 8015af0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8015af4:	462b      	mov	r3, r5
 8015af6:	2200      	movs	r2, #0
 8015af8:	4543      	cmp	r3, r8
 8015afa:	d321      	bcc.n	8015b40 <__multiply+0x98>
 8015afc:	f104 0314 	add.w	r3, r4, #20
 8015b00:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8015b04:	f109 0314 	add.w	r3, r9, #20
 8015b08:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8015b0c:	9202      	str	r2, [sp, #8]
 8015b0e:	1b3a      	subs	r2, r7, r4
 8015b10:	3a15      	subs	r2, #21
 8015b12:	f022 0203 	bic.w	r2, r2, #3
 8015b16:	3204      	adds	r2, #4
 8015b18:	f104 0115 	add.w	r1, r4, #21
 8015b1c:	428f      	cmp	r7, r1
 8015b1e:	bf38      	it	cc
 8015b20:	2204      	movcc	r2, #4
 8015b22:	9201      	str	r2, [sp, #4]
 8015b24:	9a02      	ldr	r2, [sp, #8]
 8015b26:	9303      	str	r3, [sp, #12]
 8015b28:	429a      	cmp	r2, r3
 8015b2a:	d80c      	bhi.n	8015b46 <__multiply+0x9e>
 8015b2c:	2e00      	cmp	r6, #0
 8015b2e:	dd03      	ble.n	8015b38 <__multiply+0x90>
 8015b30:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d05a      	beq.n	8015bee <__multiply+0x146>
 8015b38:	6106      	str	r6, [r0, #16]
 8015b3a:	b005      	add	sp, #20
 8015b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b40:	f843 2b04 	str.w	r2, [r3], #4
 8015b44:	e7d8      	b.n	8015af8 <__multiply+0x50>
 8015b46:	f8b3 a000 	ldrh.w	sl, [r3]
 8015b4a:	f1ba 0f00 	cmp.w	sl, #0
 8015b4e:	d024      	beq.n	8015b9a <__multiply+0xf2>
 8015b50:	f104 0e14 	add.w	lr, r4, #20
 8015b54:	46a9      	mov	r9, r5
 8015b56:	f04f 0c00 	mov.w	ip, #0
 8015b5a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8015b5e:	f8d9 1000 	ldr.w	r1, [r9]
 8015b62:	fa1f fb82 	uxth.w	fp, r2
 8015b66:	b289      	uxth	r1, r1
 8015b68:	fb0a 110b 	mla	r1, sl, fp, r1
 8015b6c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8015b70:	f8d9 2000 	ldr.w	r2, [r9]
 8015b74:	4461      	add	r1, ip
 8015b76:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015b7a:	fb0a c20b 	mla	r2, sl, fp, ip
 8015b7e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8015b82:	b289      	uxth	r1, r1
 8015b84:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8015b88:	4577      	cmp	r7, lr
 8015b8a:	f849 1b04 	str.w	r1, [r9], #4
 8015b8e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015b92:	d8e2      	bhi.n	8015b5a <__multiply+0xb2>
 8015b94:	9a01      	ldr	r2, [sp, #4]
 8015b96:	f845 c002 	str.w	ip, [r5, r2]
 8015b9a:	9a03      	ldr	r2, [sp, #12]
 8015b9c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8015ba0:	3304      	adds	r3, #4
 8015ba2:	f1b9 0f00 	cmp.w	r9, #0
 8015ba6:	d020      	beq.n	8015bea <__multiply+0x142>
 8015ba8:	6829      	ldr	r1, [r5, #0]
 8015baa:	f104 0c14 	add.w	ip, r4, #20
 8015bae:	46ae      	mov	lr, r5
 8015bb0:	f04f 0a00 	mov.w	sl, #0
 8015bb4:	f8bc b000 	ldrh.w	fp, [ip]
 8015bb8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8015bbc:	fb09 220b 	mla	r2, r9, fp, r2
 8015bc0:	4492      	add	sl, r2
 8015bc2:	b289      	uxth	r1, r1
 8015bc4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8015bc8:	f84e 1b04 	str.w	r1, [lr], #4
 8015bcc:	f85c 2b04 	ldr.w	r2, [ip], #4
 8015bd0:	f8be 1000 	ldrh.w	r1, [lr]
 8015bd4:	0c12      	lsrs	r2, r2, #16
 8015bd6:	fb09 1102 	mla	r1, r9, r2, r1
 8015bda:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8015bde:	4567      	cmp	r7, ip
 8015be0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8015be4:	d8e6      	bhi.n	8015bb4 <__multiply+0x10c>
 8015be6:	9a01      	ldr	r2, [sp, #4]
 8015be8:	50a9      	str	r1, [r5, r2]
 8015bea:	3504      	adds	r5, #4
 8015bec:	e79a      	b.n	8015b24 <__multiply+0x7c>
 8015bee:	3e01      	subs	r6, #1
 8015bf0:	e79c      	b.n	8015b2c <__multiply+0x84>
 8015bf2:	bf00      	nop
 8015bf4:	08018d90 	.word	0x08018d90
 8015bf8:	08018e1c 	.word	0x08018e1c

08015bfc <__pow5mult>:
 8015bfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015c00:	4615      	mov	r5, r2
 8015c02:	f012 0203 	ands.w	r2, r2, #3
 8015c06:	4606      	mov	r6, r0
 8015c08:	460f      	mov	r7, r1
 8015c0a:	d007      	beq.n	8015c1c <__pow5mult+0x20>
 8015c0c:	4c25      	ldr	r4, [pc, #148]	; (8015ca4 <__pow5mult+0xa8>)
 8015c0e:	3a01      	subs	r2, #1
 8015c10:	2300      	movs	r3, #0
 8015c12:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015c16:	f7ff fe51 	bl	80158bc <__multadd>
 8015c1a:	4607      	mov	r7, r0
 8015c1c:	10ad      	asrs	r5, r5, #2
 8015c1e:	d03d      	beq.n	8015c9c <__pow5mult+0xa0>
 8015c20:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8015c22:	b97c      	cbnz	r4, 8015c44 <__pow5mult+0x48>
 8015c24:	2010      	movs	r0, #16
 8015c26:	f7ff fdcd 	bl	80157c4 <malloc>
 8015c2a:	4602      	mov	r2, r0
 8015c2c:	6270      	str	r0, [r6, #36]	; 0x24
 8015c2e:	b928      	cbnz	r0, 8015c3c <__pow5mult+0x40>
 8015c30:	4b1d      	ldr	r3, [pc, #116]	; (8015ca8 <__pow5mult+0xac>)
 8015c32:	481e      	ldr	r0, [pc, #120]	; (8015cac <__pow5mult+0xb0>)
 8015c34:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8015c38:	f000 fd2c 	bl	8016694 <__assert_func>
 8015c3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015c40:	6004      	str	r4, [r0, #0]
 8015c42:	60c4      	str	r4, [r0, #12]
 8015c44:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015c48:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015c4c:	b94c      	cbnz	r4, 8015c62 <__pow5mult+0x66>
 8015c4e:	f240 2171 	movw	r1, #625	; 0x271
 8015c52:	4630      	mov	r0, r6
 8015c54:	f7ff ff12 	bl	8015a7c <__i2b>
 8015c58:	2300      	movs	r3, #0
 8015c5a:	f8c8 0008 	str.w	r0, [r8, #8]
 8015c5e:	4604      	mov	r4, r0
 8015c60:	6003      	str	r3, [r0, #0]
 8015c62:	f04f 0900 	mov.w	r9, #0
 8015c66:	07eb      	lsls	r3, r5, #31
 8015c68:	d50a      	bpl.n	8015c80 <__pow5mult+0x84>
 8015c6a:	4639      	mov	r1, r7
 8015c6c:	4622      	mov	r2, r4
 8015c6e:	4630      	mov	r0, r6
 8015c70:	f7ff ff1a 	bl	8015aa8 <__multiply>
 8015c74:	4639      	mov	r1, r7
 8015c76:	4680      	mov	r8, r0
 8015c78:	4630      	mov	r0, r6
 8015c7a:	f7ff fdfd 	bl	8015878 <_Bfree>
 8015c7e:	4647      	mov	r7, r8
 8015c80:	106d      	asrs	r5, r5, #1
 8015c82:	d00b      	beq.n	8015c9c <__pow5mult+0xa0>
 8015c84:	6820      	ldr	r0, [r4, #0]
 8015c86:	b938      	cbnz	r0, 8015c98 <__pow5mult+0x9c>
 8015c88:	4622      	mov	r2, r4
 8015c8a:	4621      	mov	r1, r4
 8015c8c:	4630      	mov	r0, r6
 8015c8e:	f7ff ff0b 	bl	8015aa8 <__multiply>
 8015c92:	6020      	str	r0, [r4, #0]
 8015c94:	f8c0 9000 	str.w	r9, [r0]
 8015c98:	4604      	mov	r4, r0
 8015c9a:	e7e4      	b.n	8015c66 <__pow5mult+0x6a>
 8015c9c:	4638      	mov	r0, r7
 8015c9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015ca2:	bf00      	nop
 8015ca4:	08018f68 	.word	0x08018f68
 8015ca8:	08018d1e 	.word	0x08018d1e
 8015cac:	08018e1c 	.word	0x08018e1c

08015cb0 <__lshift>:
 8015cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015cb4:	460c      	mov	r4, r1
 8015cb6:	6849      	ldr	r1, [r1, #4]
 8015cb8:	6923      	ldr	r3, [r4, #16]
 8015cba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015cbe:	68a3      	ldr	r3, [r4, #8]
 8015cc0:	4607      	mov	r7, r0
 8015cc2:	4691      	mov	r9, r2
 8015cc4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015cc8:	f108 0601 	add.w	r6, r8, #1
 8015ccc:	42b3      	cmp	r3, r6
 8015cce:	db0b      	blt.n	8015ce8 <__lshift+0x38>
 8015cd0:	4638      	mov	r0, r7
 8015cd2:	f7ff fd91 	bl	80157f8 <_Balloc>
 8015cd6:	4605      	mov	r5, r0
 8015cd8:	b948      	cbnz	r0, 8015cee <__lshift+0x3e>
 8015cda:	4602      	mov	r2, r0
 8015cdc:	4b2a      	ldr	r3, [pc, #168]	; (8015d88 <__lshift+0xd8>)
 8015cde:	482b      	ldr	r0, [pc, #172]	; (8015d8c <__lshift+0xdc>)
 8015ce0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8015ce4:	f000 fcd6 	bl	8016694 <__assert_func>
 8015ce8:	3101      	adds	r1, #1
 8015cea:	005b      	lsls	r3, r3, #1
 8015cec:	e7ee      	b.n	8015ccc <__lshift+0x1c>
 8015cee:	2300      	movs	r3, #0
 8015cf0:	f100 0114 	add.w	r1, r0, #20
 8015cf4:	f100 0210 	add.w	r2, r0, #16
 8015cf8:	4618      	mov	r0, r3
 8015cfa:	4553      	cmp	r3, sl
 8015cfc:	db37      	blt.n	8015d6e <__lshift+0xbe>
 8015cfe:	6920      	ldr	r0, [r4, #16]
 8015d00:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015d04:	f104 0314 	add.w	r3, r4, #20
 8015d08:	f019 091f 	ands.w	r9, r9, #31
 8015d0c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015d10:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8015d14:	d02f      	beq.n	8015d76 <__lshift+0xc6>
 8015d16:	f1c9 0e20 	rsb	lr, r9, #32
 8015d1a:	468a      	mov	sl, r1
 8015d1c:	f04f 0c00 	mov.w	ip, #0
 8015d20:	681a      	ldr	r2, [r3, #0]
 8015d22:	fa02 f209 	lsl.w	r2, r2, r9
 8015d26:	ea42 020c 	orr.w	r2, r2, ip
 8015d2a:	f84a 2b04 	str.w	r2, [sl], #4
 8015d2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015d32:	4298      	cmp	r0, r3
 8015d34:	fa22 fc0e 	lsr.w	ip, r2, lr
 8015d38:	d8f2      	bhi.n	8015d20 <__lshift+0x70>
 8015d3a:	1b03      	subs	r3, r0, r4
 8015d3c:	3b15      	subs	r3, #21
 8015d3e:	f023 0303 	bic.w	r3, r3, #3
 8015d42:	3304      	adds	r3, #4
 8015d44:	f104 0215 	add.w	r2, r4, #21
 8015d48:	4290      	cmp	r0, r2
 8015d4a:	bf38      	it	cc
 8015d4c:	2304      	movcc	r3, #4
 8015d4e:	f841 c003 	str.w	ip, [r1, r3]
 8015d52:	f1bc 0f00 	cmp.w	ip, #0
 8015d56:	d001      	beq.n	8015d5c <__lshift+0xac>
 8015d58:	f108 0602 	add.w	r6, r8, #2
 8015d5c:	3e01      	subs	r6, #1
 8015d5e:	4638      	mov	r0, r7
 8015d60:	612e      	str	r6, [r5, #16]
 8015d62:	4621      	mov	r1, r4
 8015d64:	f7ff fd88 	bl	8015878 <_Bfree>
 8015d68:	4628      	mov	r0, r5
 8015d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d6e:	f842 0f04 	str.w	r0, [r2, #4]!
 8015d72:	3301      	adds	r3, #1
 8015d74:	e7c1      	b.n	8015cfa <__lshift+0x4a>
 8015d76:	3904      	subs	r1, #4
 8015d78:	f853 2b04 	ldr.w	r2, [r3], #4
 8015d7c:	f841 2f04 	str.w	r2, [r1, #4]!
 8015d80:	4298      	cmp	r0, r3
 8015d82:	d8f9      	bhi.n	8015d78 <__lshift+0xc8>
 8015d84:	e7ea      	b.n	8015d5c <__lshift+0xac>
 8015d86:	bf00      	nop
 8015d88:	08018d90 	.word	0x08018d90
 8015d8c:	08018e1c 	.word	0x08018e1c

08015d90 <__mcmp>:
 8015d90:	b530      	push	{r4, r5, lr}
 8015d92:	6902      	ldr	r2, [r0, #16]
 8015d94:	690c      	ldr	r4, [r1, #16]
 8015d96:	1b12      	subs	r2, r2, r4
 8015d98:	d10e      	bne.n	8015db8 <__mcmp+0x28>
 8015d9a:	f100 0314 	add.w	r3, r0, #20
 8015d9e:	3114      	adds	r1, #20
 8015da0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8015da4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015da8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8015dac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8015db0:	42a5      	cmp	r5, r4
 8015db2:	d003      	beq.n	8015dbc <__mcmp+0x2c>
 8015db4:	d305      	bcc.n	8015dc2 <__mcmp+0x32>
 8015db6:	2201      	movs	r2, #1
 8015db8:	4610      	mov	r0, r2
 8015dba:	bd30      	pop	{r4, r5, pc}
 8015dbc:	4283      	cmp	r3, r0
 8015dbe:	d3f3      	bcc.n	8015da8 <__mcmp+0x18>
 8015dc0:	e7fa      	b.n	8015db8 <__mcmp+0x28>
 8015dc2:	f04f 32ff 	mov.w	r2, #4294967295
 8015dc6:	e7f7      	b.n	8015db8 <__mcmp+0x28>

08015dc8 <__mdiff>:
 8015dc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015dcc:	460c      	mov	r4, r1
 8015dce:	4606      	mov	r6, r0
 8015dd0:	4611      	mov	r1, r2
 8015dd2:	4620      	mov	r0, r4
 8015dd4:	4690      	mov	r8, r2
 8015dd6:	f7ff ffdb 	bl	8015d90 <__mcmp>
 8015dda:	1e05      	subs	r5, r0, #0
 8015ddc:	d110      	bne.n	8015e00 <__mdiff+0x38>
 8015dde:	4629      	mov	r1, r5
 8015de0:	4630      	mov	r0, r6
 8015de2:	f7ff fd09 	bl	80157f8 <_Balloc>
 8015de6:	b930      	cbnz	r0, 8015df6 <__mdiff+0x2e>
 8015de8:	4b3a      	ldr	r3, [pc, #232]	; (8015ed4 <__mdiff+0x10c>)
 8015dea:	4602      	mov	r2, r0
 8015dec:	f240 2132 	movw	r1, #562	; 0x232
 8015df0:	4839      	ldr	r0, [pc, #228]	; (8015ed8 <__mdiff+0x110>)
 8015df2:	f000 fc4f 	bl	8016694 <__assert_func>
 8015df6:	2301      	movs	r3, #1
 8015df8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015dfc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e00:	bfa4      	itt	ge
 8015e02:	4643      	movge	r3, r8
 8015e04:	46a0      	movge	r8, r4
 8015e06:	4630      	mov	r0, r6
 8015e08:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015e0c:	bfa6      	itte	ge
 8015e0e:	461c      	movge	r4, r3
 8015e10:	2500      	movge	r5, #0
 8015e12:	2501      	movlt	r5, #1
 8015e14:	f7ff fcf0 	bl	80157f8 <_Balloc>
 8015e18:	b920      	cbnz	r0, 8015e24 <__mdiff+0x5c>
 8015e1a:	4b2e      	ldr	r3, [pc, #184]	; (8015ed4 <__mdiff+0x10c>)
 8015e1c:	4602      	mov	r2, r0
 8015e1e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8015e22:	e7e5      	b.n	8015df0 <__mdiff+0x28>
 8015e24:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8015e28:	6926      	ldr	r6, [r4, #16]
 8015e2a:	60c5      	str	r5, [r0, #12]
 8015e2c:	f104 0914 	add.w	r9, r4, #20
 8015e30:	f108 0514 	add.w	r5, r8, #20
 8015e34:	f100 0e14 	add.w	lr, r0, #20
 8015e38:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8015e3c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8015e40:	f108 0210 	add.w	r2, r8, #16
 8015e44:	46f2      	mov	sl, lr
 8015e46:	2100      	movs	r1, #0
 8015e48:	f859 3b04 	ldr.w	r3, [r9], #4
 8015e4c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8015e50:	fa1f f883 	uxth.w	r8, r3
 8015e54:	fa11 f18b 	uxtah	r1, r1, fp
 8015e58:	0c1b      	lsrs	r3, r3, #16
 8015e5a:	eba1 0808 	sub.w	r8, r1, r8
 8015e5e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8015e62:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8015e66:	fa1f f888 	uxth.w	r8, r8
 8015e6a:	1419      	asrs	r1, r3, #16
 8015e6c:	454e      	cmp	r6, r9
 8015e6e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8015e72:	f84a 3b04 	str.w	r3, [sl], #4
 8015e76:	d8e7      	bhi.n	8015e48 <__mdiff+0x80>
 8015e78:	1b33      	subs	r3, r6, r4
 8015e7a:	3b15      	subs	r3, #21
 8015e7c:	f023 0303 	bic.w	r3, r3, #3
 8015e80:	3304      	adds	r3, #4
 8015e82:	3415      	adds	r4, #21
 8015e84:	42a6      	cmp	r6, r4
 8015e86:	bf38      	it	cc
 8015e88:	2304      	movcc	r3, #4
 8015e8a:	441d      	add	r5, r3
 8015e8c:	4473      	add	r3, lr
 8015e8e:	469e      	mov	lr, r3
 8015e90:	462e      	mov	r6, r5
 8015e92:	4566      	cmp	r6, ip
 8015e94:	d30e      	bcc.n	8015eb4 <__mdiff+0xec>
 8015e96:	f10c 0203 	add.w	r2, ip, #3
 8015e9a:	1b52      	subs	r2, r2, r5
 8015e9c:	f022 0203 	bic.w	r2, r2, #3
 8015ea0:	3d03      	subs	r5, #3
 8015ea2:	45ac      	cmp	ip, r5
 8015ea4:	bf38      	it	cc
 8015ea6:	2200      	movcc	r2, #0
 8015ea8:	441a      	add	r2, r3
 8015eaa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8015eae:	b17b      	cbz	r3, 8015ed0 <__mdiff+0x108>
 8015eb0:	6107      	str	r7, [r0, #16]
 8015eb2:	e7a3      	b.n	8015dfc <__mdiff+0x34>
 8015eb4:	f856 8b04 	ldr.w	r8, [r6], #4
 8015eb8:	fa11 f288 	uxtah	r2, r1, r8
 8015ebc:	1414      	asrs	r4, r2, #16
 8015ebe:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8015ec2:	b292      	uxth	r2, r2
 8015ec4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8015ec8:	f84e 2b04 	str.w	r2, [lr], #4
 8015ecc:	1421      	asrs	r1, r4, #16
 8015ece:	e7e0      	b.n	8015e92 <__mdiff+0xca>
 8015ed0:	3f01      	subs	r7, #1
 8015ed2:	e7ea      	b.n	8015eaa <__mdiff+0xe2>
 8015ed4:	08018d90 	.word	0x08018d90
 8015ed8:	08018e1c 	.word	0x08018e1c

08015edc <__ulp>:
 8015edc:	b082      	sub	sp, #8
 8015ede:	ed8d 0b00 	vstr	d0, [sp]
 8015ee2:	9b01      	ldr	r3, [sp, #4]
 8015ee4:	4912      	ldr	r1, [pc, #72]	; (8015f30 <__ulp+0x54>)
 8015ee6:	4019      	ands	r1, r3
 8015ee8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8015eec:	2900      	cmp	r1, #0
 8015eee:	dd05      	ble.n	8015efc <__ulp+0x20>
 8015ef0:	2200      	movs	r2, #0
 8015ef2:	460b      	mov	r3, r1
 8015ef4:	ec43 2b10 	vmov	d0, r2, r3
 8015ef8:	b002      	add	sp, #8
 8015efa:	4770      	bx	lr
 8015efc:	4249      	negs	r1, r1
 8015efe:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8015f02:	ea4f 5021 	mov.w	r0, r1, asr #20
 8015f06:	f04f 0200 	mov.w	r2, #0
 8015f0a:	f04f 0300 	mov.w	r3, #0
 8015f0e:	da04      	bge.n	8015f1a <__ulp+0x3e>
 8015f10:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8015f14:	fa41 f300 	asr.w	r3, r1, r0
 8015f18:	e7ec      	b.n	8015ef4 <__ulp+0x18>
 8015f1a:	f1a0 0114 	sub.w	r1, r0, #20
 8015f1e:	291e      	cmp	r1, #30
 8015f20:	bfda      	itte	le
 8015f22:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8015f26:	fa20 f101 	lsrle.w	r1, r0, r1
 8015f2a:	2101      	movgt	r1, #1
 8015f2c:	460a      	mov	r2, r1
 8015f2e:	e7e1      	b.n	8015ef4 <__ulp+0x18>
 8015f30:	7ff00000 	.word	0x7ff00000

08015f34 <__b2d>:
 8015f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f36:	6905      	ldr	r5, [r0, #16]
 8015f38:	f100 0714 	add.w	r7, r0, #20
 8015f3c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8015f40:	1f2e      	subs	r6, r5, #4
 8015f42:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8015f46:	4620      	mov	r0, r4
 8015f48:	f7ff fd48 	bl	80159dc <__hi0bits>
 8015f4c:	f1c0 0320 	rsb	r3, r0, #32
 8015f50:	280a      	cmp	r0, #10
 8015f52:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8015fd0 <__b2d+0x9c>
 8015f56:	600b      	str	r3, [r1, #0]
 8015f58:	dc14      	bgt.n	8015f84 <__b2d+0x50>
 8015f5a:	f1c0 0e0b 	rsb	lr, r0, #11
 8015f5e:	fa24 f10e 	lsr.w	r1, r4, lr
 8015f62:	42b7      	cmp	r7, r6
 8015f64:	ea41 030c 	orr.w	r3, r1, ip
 8015f68:	bf34      	ite	cc
 8015f6a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015f6e:	2100      	movcs	r1, #0
 8015f70:	3015      	adds	r0, #21
 8015f72:	fa04 f000 	lsl.w	r0, r4, r0
 8015f76:	fa21 f10e 	lsr.w	r1, r1, lr
 8015f7a:	ea40 0201 	orr.w	r2, r0, r1
 8015f7e:	ec43 2b10 	vmov	d0, r2, r3
 8015f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015f84:	42b7      	cmp	r7, r6
 8015f86:	bf3a      	itte	cc
 8015f88:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015f8c:	f1a5 0608 	subcc.w	r6, r5, #8
 8015f90:	2100      	movcs	r1, #0
 8015f92:	380b      	subs	r0, #11
 8015f94:	d017      	beq.n	8015fc6 <__b2d+0x92>
 8015f96:	f1c0 0c20 	rsb	ip, r0, #32
 8015f9a:	fa04 f500 	lsl.w	r5, r4, r0
 8015f9e:	42be      	cmp	r6, r7
 8015fa0:	fa21 f40c 	lsr.w	r4, r1, ip
 8015fa4:	ea45 0504 	orr.w	r5, r5, r4
 8015fa8:	bf8c      	ite	hi
 8015faa:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8015fae:	2400      	movls	r4, #0
 8015fb0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8015fb4:	fa01 f000 	lsl.w	r0, r1, r0
 8015fb8:	fa24 f40c 	lsr.w	r4, r4, ip
 8015fbc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8015fc0:	ea40 0204 	orr.w	r2, r0, r4
 8015fc4:	e7db      	b.n	8015f7e <__b2d+0x4a>
 8015fc6:	ea44 030c 	orr.w	r3, r4, ip
 8015fca:	460a      	mov	r2, r1
 8015fcc:	e7d7      	b.n	8015f7e <__b2d+0x4a>
 8015fce:	bf00      	nop
 8015fd0:	3ff00000 	.word	0x3ff00000

08015fd4 <__d2b>:
 8015fd4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015fd8:	4689      	mov	r9, r1
 8015fda:	2101      	movs	r1, #1
 8015fdc:	ec57 6b10 	vmov	r6, r7, d0
 8015fe0:	4690      	mov	r8, r2
 8015fe2:	f7ff fc09 	bl	80157f8 <_Balloc>
 8015fe6:	4604      	mov	r4, r0
 8015fe8:	b930      	cbnz	r0, 8015ff8 <__d2b+0x24>
 8015fea:	4602      	mov	r2, r0
 8015fec:	4b25      	ldr	r3, [pc, #148]	; (8016084 <__d2b+0xb0>)
 8015fee:	4826      	ldr	r0, [pc, #152]	; (8016088 <__d2b+0xb4>)
 8015ff0:	f240 310a 	movw	r1, #778	; 0x30a
 8015ff4:	f000 fb4e 	bl	8016694 <__assert_func>
 8015ff8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8015ffc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016000:	bb35      	cbnz	r5, 8016050 <__d2b+0x7c>
 8016002:	2e00      	cmp	r6, #0
 8016004:	9301      	str	r3, [sp, #4]
 8016006:	d028      	beq.n	801605a <__d2b+0x86>
 8016008:	4668      	mov	r0, sp
 801600a:	9600      	str	r6, [sp, #0]
 801600c:	f7ff fd06 	bl	8015a1c <__lo0bits>
 8016010:	9900      	ldr	r1, [sp, #0]
 8016012:	b300      	cbz	r0, 8016056 <__d2b+0x82>
 8016014:	9a01      	ldr	r2, [sp, #4]
 8016016:	f1c0 0320 	rsb	r3, r0, #32
 801601a:	fa02 f303 	lsl.w	r3, r2, r3
 801601e:	430b      	orrs	r3, r1
 8016020:	40c2      	lsrs	r2, r0
 8016022:	6163      	str	r3, [r4, #20]
 8016024:	9201      	str	r2, [sp, #4]
 8016026:	9b01      	ldr	r3, [sp, #4]
 8016028:	61a3      	str	r3, [r4, #24]
 801602a:	2b00      	cmp	r3, #0
 801602c:	bf14      	ite	ne
 801602e:	2202      	movne	r2, #2
 8016030:	2201      	moveq	r2, #1
 8016032:	6122      	str	r2, [r4, #16]
 8016034:	b1d5      	cbz	r5, 801606c <__d2b+0x98>
 8016036:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801603a:	4405      	add	r5, r0
 801603c:	f8c9 5000 	str.w	r5, [r9]
 8016040:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016044:	f8c8 0000 	str.w	r0, [r8]
 8016048:	4620      	mov	r0, r4
 801604a:	b003      	add	sp, #12
 801604c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016050:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016054:	e7d5      	b.n	8016002 <__d2b+0x2e>
 8016056:	6161      	str	r1, [r4, #20]
 8016058:	e7e5      	b.n	8016026 <__d2b+0x52>
 801605a:	a801      	add	r0, sp, #4
 801605c:	f7ff fcde 	bl	8015a1c <__lo0bits>
 8016060:	9b01      	ldr	r3, [sp, #4]
 8016062:	6163      	str	r3, [r4, #20]
 8016064:	2201      	movs	r2, #1
 8016066:	6122      	str	r2, [r4, #16]
 8016068:	3020      	adds	r0, #32
 801606a:	e7e3      	b.n	8016034 <__d2b+0x60>
 801606c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016070:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016074:	f8c9 0000 	str.w	r0, [r9]
 8016078:	6918      	ldr	r0, [r3, #16]
 801607a:	f7ff fcaf 	bl	80159dc <__hi0bits>
 801607e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016082:	e7df      	b.n	8016044 <__d2b+0x70>
 8016084:	08018d90 	.word	0x08018d90
 8016088:	08018e1c 	.word	0x08018e1c

0801608c <__ratio>:
 801608c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016090:	4688      	mov	r8, r1
 8016092:	4669      	mov	r1, sp
 8016094:	4681      	mov	r9, r0
 8016096:	f7ff ff4d 	bl	8015f34 <__b2d>
 801609a:	a901      	add	r1, sp, #4
 801609c:	4640      	mov	r0, r8
 801609e:	ec55 4b10 	vmov	r4, r5, d0
 80160a2:	f7ff ff47 	bl	8015f34 <__b2d>
 80160a6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80160aa:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80160ae:	eba3 0c02 	sub.w	ip, r3, r2
 80160b2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80160b6:	1a9b      	subs	r3, r3, r2
 80160b8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80160bc:	ec51 0b10 	vmov	r0, r1, d0
 80160c0:	2b00      	cmp	r3, #0
 80160c2:	bfd6      	itet	le
 80160c4:	460a      	movle	r2, r1
 80160c6:	462a      	movgt	r2, r5
 80160c8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80160cc:	468b      	mov	fp, r1
 80160ce:	462f      	mov	r7, r5
 80160d0:	bfd4      	ite	le
 80160d2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80160d6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80160da:	4620      	mov	r0, r4
 80160dc:	ee10 2a10 	vmov	r2, s0
 80160e0:	465b      	mov	r3, fp
 80160e2:	4639      	mov	r1, r7
 80160e4:	f7ea fbca 	bl	800087c <__aeabi_ddiv>
 80160e8:	ec41 0b10 	vmov	d0, r0, r1
 80160ec:	b003      	add	sp, #12
 80160ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080160f2 <__copybits>:
 80160f2:	3901      	subs	r1, #1
 80160f4:	b570      	push	{r4, r5, r6, lr}
 80160f6:	1149      	asrs	r1, r1, #5
 80160f8:	6914      	ldr	r4, [r2, #16]
 80160fa:	3101      	adds	r1, #1
 80160fc:	f102 0314 	add.w	r3, r2, #20
 8016100:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016104:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016108:	1f05      	subs	r5, r0, #4
 801610a:	42a3      	cmp	r3, r4
 801610c:	d30c      	bcc.n	8016128 <__copybits+0x36>
 801610e:	1aa3      	subs	r3, r4, r2
 8016110:	3b11      	subs	r3, #17
 8016112:	f023 0303 	bic.w	r3, r3, #3
 8016116:	3211      	adds	r2, #17
 8016118:	42a2      	cmp	r2, r4
 801611a:	bf88      	it	hi
 801611c:	2300      	movhi	r3, #0
 801611e:	4418      	add	r0, r3
 8016120:	2300      	movs	r3, #0
 8016122:	4288      	cmp	r0, r1
 8016124:	d305      	bcc.n	8016132 <__copybits+0x40>
 8016126:	bd70      	pop	{r4, r5, r6, pc}
 8016128:	f853 6b04 	ldr.w	r6, [r3], #4
 801612c:	f845 6f04 	str.w	r6, [r5, #4]!
 8016130:	e7eb      	b.n	801610a <__copybits+0x18>
 8016132:	f840 3b04 	str.w	r3, [r0], #4
 8016136:	e7f4      	b.n	8016122 <__copybits+0x30>

08016138 <__any_on>:
 8016138:	f100 0214 	add.w	r2, r0, #20
 801613c:	6900      	ldr	r0, [r0, #16]
 801613e:	114b      	asrs	r3, r1, #5
 8016140:	4298      	cmp	r0, r3
 8016142:	b510      	push	{r4, lr}
 8016144:	db11      	blt.n	801616a <__any_on+0x32>
 8016146:	dd0a      	ble.n	801615e <__any_on+0x26>
 8016148:	f011 011f 	ands.w	r1, r1, #31
 801614c:	d007      	beq.n	801615e <__any_on+0x26>
 801614e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016152:	fa24 f001 	lsr.w	r0, r4, r1
 8016156:	fa00 f101 	lsl.w	r1, r0, r1
 801615a:	428c      	cmp	r4, r1
 801615c:	d10b      	bne.n	8016176 <__any_on+0x3e>
 801615e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016162:	4293      	cmp	r3, r2
 8016164:	d803      	bhi.n	801616e <__any_on+0x36>
 8016166:	2000      	movs	r0, #0
 8016168:	bd10      	pop	{r4, pc}
 801616a:	4603      	mov	r3, r0
 801616c:	e7f7      	b.n	801615e <__any_on+0x26>
 801616e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016172:	2900      	cmp	r1, #0
 8016174:	d0f5      	beq.n	8016162 <__any_on+0x2a>
 8016176:	2001      	movs	r0, #1
 8016178:	e7f6      	b.n	8016168 <__any_on+0x30>

0801617a <_calloc_r>:
 801617a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801617c:	fba1 2402 	umull	r2, r4, r1, r2
 8016180:	b94c      	cbnz	r4, 8016196 <_calloc_r+0x1c>
 8016182:	4611      	mov	r1, r2
 8016184:	9201      	str	r2, [sp, #4]
 8016186:	f000 f87b 	bl	8016280 <_malloc_r>
 801618a:	9a01      	ldr	r2, [sp, #4]
 801618c:	4605      	mov	r5, r0
 801618e:	b930      	cbnz	r0, 801619e <_calloc_r+0x24>
 8016190:	4628      	mov	r0, r5
 8016192:	b003      	add	sp, #12
 8016194:	bd30      	pop	{r4, r5, pc}
 8016196:	220c      	movs	r2, #12
 8016198:	6002      	str	r2, [r0, #0]
 801619a:	2500      	movs	r5, #0
 801619c:	e7f8      	b.n	8016190 <_calloc_r+0x16>
 801619e:	4621      	mov	r1, r4
 80161a0:	f7fc fbcc 	bl	801293c <memset>
 80161a4:	e7f4      	b.n	8016190 <_calloc_r+0x16>
	...

080161a8 <_free_r>:
 80161a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80161aa:	2900      	cmp	r1, #0
 80161ac:	d044      	beq.n	8016238 <_free_r+0x90>
 80161ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80161b2:	9001      	str	r0, [sp, #4]
 80161b4:	2b00      	cmp	r3, #0
 80161b6:	f1a1 0404 	sub.w	r4, r1, #4
 80161ba:	bfb8      	it	lt
 80161bc:	18e4      	addlt	r4, r4, r3
 80161be:	f000 fab3 	bl	8016728 <__malloc_lock>
 80161c2:	4a1e      	ldr	r2, [pc, #120]	; (801623c <_free_r+0x94>)
 80161c4:	9801      	ldr	r0, [sp, #4]
 80161c6:	6813      	ldr	r3, [r2, #0]
 80161c8:	b933      	cbnz	r3, 80161d8 <_free_r+0x30>
 80161ca:	6063      	str	r3, [r4, #4]
 80161cc:	6014      	str	r4, [r2, #0]
 80161ce:	b003      	add	sp, #12
 80161d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80161d4:	f000 baae 	b.w	8016734 <__malloc_unlock>
 80161d8:	42a3      	cmp	r3, r4
 80161da:	d908      	bls.n	80161ee <_free_r+0x46>
 80161dc:	6825      	ldr	r5, [r4, #0]
 80161de:	1961      	adds	r1, r4, r5
 80161e0:	428b      	cmp	r3, r1
 80161e2:	bf01      	itttt	eq
 80161e4:	6819      	ldreq	r1, [r3, #0]
 80161e6:	685b      	ldreq	r3, [r3, #4]
 80161e8:	1949      	addeq	r1, r1, r5
 80161ea:	6021      	streq	r1, [r4, #0]
 80161ec:	e7ed      	b.n	80161ca <_free_r+0x22>
 80161ee:	461a      	mov	r2, r3
 80161f0:	685b      	ldr	r3, [r3, #4]
 80161f2:	b10b      	cbz	r3, 80161f8 <_free_r+0x50>
 80161f4:	42a3      	cmp	r3, r4
 80161f6:	d9fa      	bls.n	80161ee <_free_r+0x46>
 80161f8:	6811      	ldr	r1, [r2, #0]
 80161fa:	1855      	adds	r5, r2, r1
 80161fc:	42a5      	cmp	r5, r4
 80161fe:	d10b      	bne.n	8016218 <_free_r+0x70>
 8016200:	6824      	ldr	r4, [r4, #0]
 8016202:	4421      	add	r1, r4
 8016204:	1854      	adds	r4, r2, r1
 8016206:	42a3      	cmp	r3, r4
 8016208:	6011      	str	r1, [r2, #0]
 801620a:	d1e0      	bne.n	80161ce <_free_r+0x26>
 801620c:	681c      	ldr	r4, [r3, #0]
 801620e:	685b      	ldr	r3, [r3, #4]
 8016210:	6053      	str	r3, [r2, #4]
 8016212:	4421      	add	r1, r4
 8016214:	6011      	str	r1, [r2, #0]
 8016216:	e7da      	b.n	80161ce <_free_r+0x26>
 8016218:	d902      	bls.n	8016220 <_free_r+0x78>
 801621a:	230c      	movs	r3, #12
 801621c:	6003      	str	r3, [r0, #0]
 801621e:	e7d6      	b.n	80161ce <_free_r+0x26>
 8016220:	6825      	ldr	r5, [r4, #0]
 8016222:	1961      	adds	r1, r4, r5
 8016224:	428b      	cmp	r3, r1
 8016226:	bf04      	itt	eq
 8016228:	6819      	ldreq	r1, [r3, #0]
 801622a:	685b      	ldreq	r3, [r3, #4]
 801622c:	6063      	str	r3, [r4, #4]
 801622e:	bf04      	itt	eq
 8016230:	1949      	addeq	r1, r1, r5
 8016232:	6021      	streq	r1, [r4, #0]
 8016234:	6054      	str	r4, [r2, #4]
 8016236:	e7ca      	b.n	80161ce <_free_r+0x26>
 8016238:	b003      	add	sp, #12
 801623a:	bd30      	pop	{r4, r5, pc}
 801623c:	20012600 	.word	0x20012600

08016240 <sbrk_aligned>:
 8016240:	b570      	push	{r4, r5, r6, lr}
 8016242:	4e0e      	ldr	r6, [pc, #56]	; (801627c <sbrk_aligned+0x3c>)
 8016244:	460c      	mov	r4, r1
 8016246:	6831      	ldr	r1, [r6, #0]
 8016248:	4605      	mov	r5, r0
 801624a:	b911      	cbnz	r1, 8016252 <sbrk_aligned+0x12>
 801624c:	f000 f9f0 	bl	8016630 <_sbrk_r>
 8016250:	6030      	str	r0, [r6, #0]
 8016252:	4621      	mov	r1, r4
 8016254:	4628      	mov	r0, r5
 8016256:	f000 f9eb 	bl	8016630 <_sbrk_r>
 801625a:	1c43      	adds	r3, r0, #1
 801625c:	d00a      	beq.n	8016274 <sbrk_aligned+0x34>
 801625e:	1cc4      	adds	r4, r0, #3
 8016260:	f024 0403 	bic.w	r4, r4, #3
 8016264:	42a0      	cmp	r0, r4
 8016266:	d007      	beq.n	8016278 <sbrk_aligned+0x38>
 8016268:	1a21      	subs	r1, r4, r0
 801626a:	4628      	mov	r0, r5
 801626c:	f000 f9e0 	bl	8016630 <_sbrk_r>
 8016270:	3001      	adds	r0, #1
 8016272:	d101      	bne.n	8016278 <sbrk_aligned+0x38>
 8016274:	f04f 34ff 	mov.w	r4, #4294967295
 8016278:	4620      	mov	r0, r4
 801627a:	bd70      	pop	{r4, r5, r6, pc}
 801627c:	20012604 	.word	0x20012604

08016280 <_malloc_r>:
 8016280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016284:	1ccd      	adds	r5, r1, #3
 8016286:	f025 0503 	bic.w	r5, r5, #3
 801628a:	3508      	adds	r5, #8
 801628c:	2d0c      	cmp	r5, #12
 801628e:	bf38      	it	cc
 8016290:	250c      	movcc	r5, #12
 8016292:	2d00      	cmp	r5, #0
 8016294:	4607      	mov	r7, r0
 8016296:	db01      	blt.n	801629c <_malloc_r+0x1c>
 8016298:	42a9      	cmp	r1, r5
 801629a:	d905      	bls.n	80162a8 <_malloc_r+0x28>
 801629c:	230c      	movs	r3, #12
 801629e:	603b      	str	r3, [r7, #0]
 80162a0:	2600      	movs	r6, #0
 80162a2:	4630      	mov	r0, r6
 80162a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162a8:	4e2e      	ldr	r6, [pc, #184]	; (8016364 <_malloc_r+0xe4>)
 80162aa:	f000 fa3d 	bl	8016728 <__malloc_lock>
 80162ae:	6833      	ldr	r3, [r6, #0]
 80162b0:	461c      	mov	r4, r3
 80162b2:	bb34      	cbnz	r4, 8016302 <_malloc_r+0x82>
 80162b4:	4629      	mov	r1, r5
 80162b6:	4638      	mov	r0, r7
 80162b8:	f7ff ffc2 	bl	8016240 <sbrk_aligned>
 80162bc:	1c43      	adds	r3, r0, #1
 80162be:	4604      	mov	r4, r0
 80162c0:	d14d      	bne.n	801635e <_malloc_r+0xde>
 80162c2:	6834      	ldr	r4, [r6, #0]
 80162c4:	4626      	mov	r6, r4
 80162c6:	2e00      	cmp	r6, #0
 80162c8:	d140      	bne.n	801634c <_malloc_r+0xcc>
 80162ca:	6823      	ldr	r3, [r4, #0]
 80162cc:	4631      	mov	r1, r6
 80162ce:	4638      	mov	r0, r7
 80162d0:	eb04 0803 	add.w	r8, r4, r3
 80162d4:	f000 f9ac 	bl	8016630 <_sbrk_r>
 80162d8:	4580      	cmp	r8, r0
 80162da:	d13a      	bne.n	8016352 <_malloc_r+0xd2>
 80162dc:	6821      	ldr	r1, [r4, #0]
 80162de:	3503      	adds	r5, #3
 80162e0:	1a6d      	subs	r5, r5, r1
 80162e2:	f025 0503 	bic.w	r5, r5, #3
 80162e6:	3508      	adds	r5, #8
 80162e8:	2d0c      	cmp	r5, #12
 80162ea:	bf38      	it	cc
 80162ec:	250c      	movcc	r5, #12
 80162ee:	4629      	mov	r1, r5
 80162f0:	4638      	mov	r0, r7
 80162f2:	f7ff ffa5 	bl	8016240 <sbrk_aligned>
 80162f6:	3001      	adds	r0, #1
 80162f8:	d02b      	beq.n	8016352 <_malloc_r+0xd2>
 80162fa:	6823      	ldr	r3, [r4, #0]
 80162fc:	442b      	add	r3, r5
 80162fe:	6023      	str	r3, [r4, #0]
 8016300:	e00e      	b.n	8016320 <_malloc_r+0xa0>
 8016302:	6822      	ldr	r2, [r4, #0]
 8016304:	1b52      	subs	r2, r2, r5
 8016306:	d41e      	bmi.n	8016346 <_malloc_r+0xc6>
 8016308:	2a0b      	cmp	r2, #11
 801630a:	d916      	bls.n	801633a <_malloc_r+0xba>
 801630c:	1961      	adds	r1, r4, r5
 801630e:	42a3      	cmp	r3, r4
 8016310:	6025      	str	r5, [r4, #0]
 8016312:	bf18      	it	ne
 8016314:	6059      	strne	r1, [r3, #4]
 8016316:	6863      	ldr	r3, [r4, #4]
 8016318:	bf08      	it	eq
 801631a:	6031      	streq	r1, [r6, #0]
 801631c:	5162      	str	r2, [r4, r5]
 801631e:	604b      	str	r3, [r1, #4]
 8016320:	4638      	mov	r0, r7
 8016322:	f104 060b 	add.w	r6, r4, #11
 8016326:	f000 fa05 	bl	8016734 <__malloc_unlock>
 801632a:	f026 0607 	bic.w	r6, r6, #7
 801632e:	1d23      	adds	r3, r4, #4
 8016330:	1af2      	subs	r2, r6, r3
 8016332:	d0b6      	beq.n	80162a2 <_malloc_r+0x22>
 8016334:	1b9b      	subs	r3, r3, r6
 8016336:	50a3      	str	r3, [r4, r2]
 8016338:	e7b3      	b.n	80162a2 <_malloc_r+0x22>
 801633a:	6862      	ldr	r2, [r4, #4]
 801633c:	42a3      	cmp	r3, r4
 801633e:	bf0c      	ite	eq
 8016340:	6032      	streq	r2, [r6, #0]
 8016342:	605a      	strne	r2, [r3, #4]
 8016344:	e7ec      	b.n	8016320 <_malloc_r+0xa0>
 8016346:	4623      	mov	r3, r4
 8016348:	6864      	ldr	r4, [r4, #4]
 801634a:	e7b2      	b.n	80162b2 <_malloc_r+0x32>
 801634c:	4634      	mov	r4, r6
 801634e:	6876      	ldr	r6, [r6, #4]
 8016350:	e7b9      	b.n	80162c6 <_malloc_r+0x46>
 8016352:	230c      	movs	r3, #12
 8016354:	603b      	str	r3, [r7, #0]
 8016356:	4638      	mov	r0, r7
 8016358:	f000 f9ec 	bl	8016734 <__malloc_unlock>
 801635c:	e7a1      	b.n	80162a2 <_malloc_r+0x22>
 801635e:	6025      	str	r5, [r4, #0]
 8016360:	e7de      	b.n	8016320 <_malloc_r+0xa0>
 8016362:	bf00      	nop
 8016364:	20012600 	.word	0x20012600

08016368 <__ssputs_r>:
 8016368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801636c:	688e      	ldr	r6, [r1, #8]
 801636e:	429e      	cmp	r6, r3
 8016370:	4682      	mov	sl, r0
 8016372:	460c      	mov	r4, r1
 8016374:	4690      	mov	r8, r2
 8016376:	461f      	mov	r7, r3
 8016378:	d838      	bhi.n	80163ec <__ssputs_r+0x84>
 801637a:	898a      	ldrh	r2, [r1, #12]
 801637c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016380:	d032      	beq.n	80163e8 <__ssputs_r+0x80>
 8016382:	6825      	ldr	r5, [r4, #0]
 8016384:	6909      	ldr	r1, [r1, #16]
 8016386:	eba5 0901 	sub.w	r9, r5, r1
 801638a:	6965      	ldr	r5, [r4, #20]
 801638c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016390:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016394:	3301      	adds	r3, #1
 8016396:	444b      	add	r3, r9
 8016398:	106d      	asrs	r5, r5, #1
 801639a:	429d      	cmp	r5, r3
 801639c:	bf38      	it	cc
 801639e:	461d      	movcc	r5, r3
 80163a0:	0553      	lsls	r3, r2, #21
 80163a2:	d531      	bpl.n	8016408 <__ssputs_r+0xa0>
 80163a4:	4629      	mov	r1, r5
 80163a6:	f7ff ff6b 	bl	8016280 <_malloc_r>
 80163aa:	4606      	mov	r6, r0
 80163ac:	b950      	cbnz	r0, 80163c4 <__ssputs_r+0x5c>
 80163ae:	230c      	movs	r3, #12
 80163b0:	f8ca 3000 	str.w	r3, [sl]
 80163b4:	89a3      	ldrh	r3, [r4, #12]
 80163b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80163ba:	81a3      	strh	r3, [r4, #12]
 80163bc:	f04f 30ff 	mov.w	r0, #4294967295
 80163c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80163c4:	6921      	ldr	r1, [r4, #16]
 80163c6:	464a      	mov	r2, r9
 80163c8:	f7fc faaa 	bl	8012920 <memcpy>
 80163cc:	89a3      	ldrh	r3, [r4, #12]
 80163ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80163d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80163d6:	81a3      	strh	r3, [r4, #12]
 80163d8:	6126      	str	r6, [r4, #16]
 80163da:	6165      	str	r5, [r4, #20]
 80163dc:	444e      	add	r6, r9
 80163de:	eba5 0509 	sub.w	r5, r5, r9
 80163e2:	6026      	str	r6, [r4, #0]
 80163e4:	60a5      	str	r5, [r4, #8]
 80163e6:	463e      	mov	r6, r7
 80163e8:	42be      	cmp	r6, r7
 80163ea:	d900      	bls.n	80163ee <__ssputs_r+0x86>
 80163ec:	463e      	mov	r6, r7
 80163ee:	6820      	ldr	r0, [r4, #0]
 80163f0:	4632      	mov	r2, r6
 80163f2:	4641      	mov	r1, r8
 80163f4:	f000 f97e 	bl	80166f4 <memmove>
 80163f8:	68a3      	ldr	r3, [r4, #8]
 80163fa:	1b9b      	subs	r3, r3, r6
 80163fc:	60a3      	str	r3, [r4, #8]
 80163fe:	6823      	ldr	r3, [r4, #0]
 8016400:	4433      	add	r3, r6
 8016402:	6023      	str	r3, [r4, #0]
 8016404:	2000      	movs	r0, #0
 8016406:	e7db      	b.n	80163c0 <__ssputs_r+0x58>
 8016408:	462a      	mov	r2, r5
 801640a:	f000 f999 	bl	8016740 <_realloc_r>
 801640e:	4606      	mov	r6, r0
 8016410:	2800      	cmp	r0, #0
 8016412:	d1e1      	bne.n	80163d8 <__ssputs_r+0x70>
 8016414:	6921      	ldr	r1, [r4, #16]
 8016416:	4650      	mov	r0, sl
 8016418:	f7ff fec6 	bl	80161a8 <_free_r>
 801641c:	e7c7      	b.n	80163ae <__ssputs_r+0x46>
	...

08016420 <_svfiprintf_r>:
 8016420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016424:	4698      	mov	r8, r3
 8016426:	898b      	ldrh	r3, [r1, #12]
 8016428:	061b      	lsls	r3, r3, #24
 801642a:	b09d      	sub	sp, #116	; 0x74
 801642c:	4607      	mov	r7, r0
 801642e:	460d      	mov	r5, r1
 8016430:	4614      	mov	r4, r2
 8016432:	d50e      	bpl.n	8016452 <_svfiprintf_r+0x32>
 8016434:	690b      	ldr	r3, [r1, #16]
 8016436:	b963      	cbnz	r3, 8016452 <_svfiprintf_r+0x32>
 8016438:	2140      	movs	r1, #64	; 0x40
 801643a:	f7ff ff21 	bl	8016280 <_malloc_r>
 801643e:	6028      	str	r0, [r5, #0]
 8016440:	6128      	str	r0, [r5, #16]
 8016442:	b920      	cbnz	r0, 801644e <_svfiprintf_r+0x2e>
 8016444:	230c      	movs	r3, #12
 8016446:	603b      	str	r3, [r7, #0]
 8016448:	f04f 30ff 	mov.w	r0, #4294967295
 801644c:	e0d1      	b.n	80165f2 <_svfiprintf_r+0x1d2>
 801644e:	2340      	movs	r3, #64	; 0x40
 8016450:	616b      	str	r3, [r5, #20]
 8016452:	2300      	movs	r3, #0
 8016454:	9309      	str	r3, [sp, #36]	; 0x24
 8016456:	2320      	movs	r3, #32
 8016458:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801645c:	f8cd 800c 	str.w	r8, [sp, #12]
 8016460:	2330      	movs	r3, #48	; 0x30
 8016462:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801660c <_svfiprintf_r+0x1ec>
 8016466:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801646a:	f04f 0901 	mov.w	r9, #1
 801646e:	4623      	mov	r3, r4
 8016470:	469a      	mov	sl, r3
 8016472:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016476:	b10a      	cbz	r2, 801647c <_svfiprintf_r+0x5c>
 8016478:	2a25      	cmp	r2, #37	; 0x25
 801647a:	d1f9      	bne.n	8016470 <_svfiprintf_r+0x50>
 801647c:	ebba 0b04 	subs.w	fp, sl, r4
 8016480:	d00b      	beq.n	801649a <_svfiprintf_r+0x7a>
 8016482:	465b      	mov	r3, fp
 8016484:	4622      	mov	r2, r4
 8016486:	4629      	mov	r1, r5
 8016488:	4638      	mov	r0, r7
 801648a:	f7ff ff6d 	bl	8016368 <__ssputs_r>
 801648e:	3001      	adds	r0, #1
 8016490:	f000 80aa 	beq.w	80165e8 <_svfiprintf_r+0x1c8>
 8016494:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016496:	445a      	add	r2, fp
 8016498:	9209      	str	r2, [sp, #36]	; 0x24
 801649a:	f89a 3000 	ldrb.w	r3, [sl]
 801649e:	2b00      	cmp	r3, #0
 80164a0:	f000 80a2 	beq.w	80165e8 <_svfiprintf_r+0x1c8>
 80164a4:	2300      	movs	r3, #0
 80164a6:	f04f 32ff 	mov.w	r2, #4294967295
 80164aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80164ae:	f10a 0a01 	add.w	sl, sl, #1
 80164b2:	9304      	str	r3, [sp, #16]
 80164b4:	9307      	str	r3, [sp, #28]
 80164b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80164ba:	931a      	str	r3, [sp, #104]	; 0x68
 80164bc:	4654      	mov	r4, sl
 80164be:	2205      	movs	r2, #5
 80164c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80164c4:	4851      	ldr	r0, [pc, #324]	; (801660c <_svfiprintf_r+0x1ec>)
 80164c6:	f7e9 fea3 	bl	8000210 <memchr>
 80164ca:	9a04      	ldr	r2, [sp, #16]
 80164cc:	b9d8      	cbnz	r0, 8016506 <_svfiprintf_r+0xe6>
 80164ce:	06d0      	lsls	r0, r2, #27
 80164d0:	bf44      	itt	mi
 80164d2:	2320      	movmi	r3, #32
 80164d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80164d8:	0711      	lsls	r1, r2, #28
 80164da:	bf44      	itt	mi
 80164dc:	232b      	movmi	r3, #43	; 0x2b
 80164de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80164e2:	f89a 3000 	ldrb.w	r3, [sl]
 80164e6:	2b2a      	cmp	r3, #42	; 0x2a
 80164e8:	d015      	beq.n	8016516 <_svfiprintf_r+0xf6>
 80164ea:	9a07      	ldr	r2, [sp, #28]
 80164ec:	4654      	mov	r4, sl
 80164ee:	2000      	movs	r0, #0
 80164f0:	f04f 0c0a 	mov.w	ip, #10
 80164f4:	4621      	mov	r1, r4
 80164f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80164fa:	3b30      	subs	r3, #48	; 0x30
 80164fc:	2b09      	cmp	r3, #9
 80164fe:	d94e      	bls.n	801659e <_svfiprintf_r+0x17e>
 8016500:	b1b0      	cbz	r0, 8016530 <_svfiprintf_r+0x110>
 8016502:	9207      	str	r2, [sp, #28]
 8016504:	e014      	b.n	8016530 <_svfiprintf_r+0x110>
 8016506:	eba0 0308 	sub.w	r3, r0, r8
 801650a:	fa09 f303 	lsl.w	r3, r9, r3
 801650e:	4313      	orrs	r3, r2
 8016510:	9304      	str	r3, [sp, #16]
 8016512:	46a2      	mov	sl, r4
 8016514:	e7d2      	b.n	80164bc <_svfiprintf_r+0x9c>
 8016516:	9b03      	ldr	r3, [sp, #12]
 8016518:	1d19      	adds	r1, r3, #4
 801651a:	681b      	ldr	r3, [r3, #0]
 801651c:	9103      	str	r1, [sp, #12]
 801651e:	2b00      	cmp	r3, #0
 8016520:	bfbb      	ittet	lt
 8016522:	425b      	neglt	r3, r3
 8016524:	f042 0202 	orrlt.w	r2, r2, #2
 8016528:	9307      	strge	r3, [sp, #28]
 801652a:	9307      	strlt	r3, [sp, #28]
 801652c:	bfb8      	it	lt
 801652e:	9204      	strlt	r2, [sp, #16]
 8016530:	7823      	ldrb	r3, [r4, #0]
 8016532:	2b2e      	cmp	r3, #46	; 0x2e
 8016534:	d10c      	bne.n	8016550 <_svfiprintf_r+0x130>
 8016536:	7863      	ldrb	r3, [r4, #1]
 8016538:	2b2a      	cmp	r3, #42	; 0x2a
 801653a:	d135      	bne.n	80165a8 <_svfiprintf_r+0x188>
 801653c:	9b03      	ldr	r3, [sp, #12]
 801653e:	1d1a      	adds	r2, r3, #4
 8016540:	681b      	ldr	r3, [r3, #0]
 8016542:	9203      	str	r2, [sp, #12]
 8016544:	2b00      	cmp	r3, #0
 8016546:	bfb8      	it	lt
 8016548:	f04f 33ff 	movlt.w	r3, #4294967295
 801654c:	3402      	adds	r4, #2
 801654e:	9305      	str	r3, [sp, #20]
 8016550:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801661c <_svfiprintf_r+0x1fc>
 8016554:	7821      	ldrb	r1, [r4, #0]
 8016556:	2203      	movs	r2, #3
 8016558:	4650      	mov	r0, sl
 801655a:	f7e9 fe59 	bl	8000210 <memchr>
 801655e:	b140      	cbz	r0, 8016572 <_svfiprintf_r+0x152>
 8016560:	2340      	movs	r3, #64	; 0x40
 8016562:	eba0 000a 	sub.w	r0, r0, sl
 8016566:	fa03 f000 	lsl.w	r0, r3, r0
 801656a:	9b04      	ldr	r3, [sp, #16]
 801656c:	4303      	orrs	r3, r0
 801656e:	3401      	adds	r4, #1
 8016570:	9304      	str	r3, [sp, #16]
 8016572:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016576:	4826      	ldr	r0, [pc, #152]	; (8016610 <_svfiprintf_r+0x1f0>)
 8016578:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801657c:	2206      	movs	r2, #6
 801657e:	f7e9 fe47 	bl	8000210 <memchr>
 8016582:	2800      	cmp	r0, #0
 8016584:	d038      	beq.n	80165f8 <_svfiprintf_r+0x1d8>
 8016586:	4b23      	ldr	r3, [pc, #140]	; (8016614 <_svfiprintf_r+0x1f4>)
 8016588:	bb1b      	cbnz	r3, 80165d2 <_svfiprintf_r+0x1b2>
 801658a:	9b03      	ldr	r3, [sp, #12]
 801658c:	3307      	adds	r3, #7
 801658e:	f023 0307 	bic.w	r3, r3, #7
 8016592:	3308      	adds	r3, #8
 8016594:	9303      	str	r3, [sp, #12]
 8016596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016598:	4433      	add	r3, r6
 801659a:	9309      	str	r3, [sp, #36]	; 0x24
 801659c:	e767      	b.n	801646e <_svfiprintf_r+0x4e>
 801659e:	fb0c 3202 	mla	r2, ip, r2, r3
 80165a2:	460c      	mov	r4, r1
 80165a4:	2001      	movs	r0, #1
 80165a6:	e7a5      	b.n	80164f4 <_svfiprintf_r+0xd4>
 80165a8:	2300      	movs	r3, #0
 80165aa:	3401      	adds	r4, #1
 80165ac:	9305      	str	r3, [sp, #20]
 80165ae:	4619      	mov	r1, r3
 80165b0:	f04f 0c0a 	mov.w	ip, #10
 80165b4:	4620      	mov	r0, r4
 80165b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80165ba:	3a30      	subs	r2, #48	; 0x30
 80165bc:	2a09      	cmp	r2, #9
 80165be:	d903      	bls.n	80165c8 <_svfiprintf_r+0x1a8>
 80165c0:	2b00      	cmp	r3, #0
 80165c2:	d0c5      	beq.n	8016550 <_svfiprintf_r+0x130>
 80165c4:	9105      	str	r1, [sp, #20]
 80165c6:	e7c3      	b.n	8016550 <_svfiprintf_r+0x130>
 80165c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80165cc:	4604      	mov	r4, r0
 80165ce:	2301      	movs	r3, #1
 80165d0:	e7f0      	b.n	80165b4 <_svfiprintf_r+0x194>
 80165d2:	ab03      	add	r3, sp, #12
 80165d4:	9300      	str	r3, [sp, #0]
 80165d6:	462a      	mov	r2, r5
 80165d8:	4b0f      	ldr	r3, [pc, #60]	; (8016618 <_svfiprintf_r+0x1f8>)
 80165da:	a904      	add	r1, sp, #16
 80165dc:	4638      	mov	r0, r7
 80165de:	f7fc fa55 	bl	8012a8c <_printf_float>
 80165e2:	1c42      	adds	r2, r0, #1
 80165e4:	4606      	mov	r6, r0
 80165e6:	d1d6      	bne.n	8016596 <_svfiprintf_r+0x176>
 80165e8:	89ab      	ldrh	r3, [r5, #12]
 80165ea:	065b      	lsls	r3, r3, #25
 80165ec:	f53f af2c 	bmi.w	8016448 <_svfiprintf_r+0x28>
 80165f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80165f2:	b01d      	add	sp, #116	; 0x74
 80165f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165f8:	ab03      	add	r3, sp, #12
 80165fa:	9300      	str	r3, [sp, #0]
 80165fc:	462a      	mov	r2, r5
 80165fe:	4b06      	ldr	r3, [pc, #24]	; (8016618 <_svfiprintf_r+0x1f8>)
 8016600:	a904      	add	r1, sp, #16
 8016602:	4638      	mov	r0, r7
 8016604:	f7fc fce6 	bl	8012fd4 <_printf_i>
 8016608:	e7eb      	b.n	80165e2 <_svfiprintf_r+0x1c2>
 801660a:	bf00      	nop
 801660c:	08018f74 	.word	0x08018f74
 8016610:	08018f7e 	.word	0x08018f7e
 8016614:	08012a8d 	.word	0x08012a8d
 8016618:	08016369 	.word	0x08016369
 801661c:	08018f7a 	.word	0x08018f7a

08016620 <nan>:
 8016620:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016628 <nan+0x8>
 8016624:	4770      	bx	lr
 8016626:	bf00      	nop
 8016628:	00000000 	.word	0x00000000
 801662c:	7ff80000 	.word	0x7ff80000

08016630 <_sbrk_r>:
 8016630:	b538      	push	{r3, r4, r5, lr}
 8016632:	4d06      	ldr	r5, [pc, #24]	; (801664c <_sbrk_r+0x1c>)
 8016634:	2300      	movs	r3, #0
 8016636:	4604      	mov	r4, r0
 8016638:	4608      	mov	r0, r1
 801663a:	602b      	str	r3, [r5, #0]
 801663c:	f7f0 ff5a 	bl	80074f4 <_sbrk>
 8016640:	1c43      	adds	r3, r0, #1
 8016642:	d102      	bne.n	801664a <_sbrk_r+0x1a>
 8016644:	682b      	ldr	r3, [r5, #0]
 8016646:	b103      	cbz	r3, 801664a <_sbrk_r+0x1a>
 8016648:	6023      	str	r3, [r4, #0]
 801664a:	bd38      	pop	{r3, r4, r5, pc}
 801664c:	20012608 	.word	0x20012608

08016650 <strncmp>:
 8016650:	b510      	push	{r4, lr}
 8016652:	b17a      	cbz	r2, 8016674 <strncmp+0x24>
 8016654:	4603      	mov	r3, r0
 8016656:	3901      	subs	r1, #1
 8016658:	1884      	adds	r4, r0, r2
 801665a:	f813 0b01 	ldrb.w	r0, [r3], #1
 801665e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8016662:	4290      	cmp	r0, r2
 8016664:	d101      	bne.n	801666a <strncmp+0x1a>
 8016666:	42a3      	cmp	r3, r4
 8016668:	d101      	bne.n	801666e <strncmp+0x1e>
 801666a:	1a80      	subs	r0, r0, r2
 801666c:	bd10      	pop	{r4, pc}
 801666e:	2800      	cmp	r0, #0
 8016670:	d1f3      	bne.n	801665a <strncmp+0xa>
 8016672:	e7fa      	b.n	801666a <strncmp+0x1a>
 8016674:	4610      	mov	r0, r2
 8016676:	e7f9      	b.n	801666c <strncmp+0x1c>

08016678 <__ascii_wctomb>:
 8016678:	b149      	cbz	r1, 801668e <__ascii_wctomb+0x16>
 801667a:	2aff      	cmp	r2, #255	; 0xff
 801667c:	bf85      	ittet	hi
 801667e:	238a      	movhi	r3, #138	; 0x8a
 8016680:	6003      	strhi	r3, [r0, #0]
 8016682:	700a      	strbls	r2, [r1, #0]
 8016684:	f04f 30ff 	movhi.w	r0, #4294967295
 8016688:	bf98      	it	ls
 801668a:	2001      	movls	r0, #1
 801668c:	4770      	bx	lr
 801668e:	4608      	mov	r0, r1
 8016690:	4770      	bx	lr
	...

08016694 <__assert_func>:
 8016694:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016696:	4614      	mov	r4, r2
 8016698:	461a      	mov	r2, r3
 801669a:	4b09      	ldr	r3, [pc, #36]	; (80166c0 <__assert_func+0x2c>)
 801669c:	681b      	ldr	r3, [r3, #0]
 801669e:	4605      	mov	r5, r0
 80166a0:	68d8      	ldr	r0, [r3, #12]
 80166a2:	b14c      	cbz	r4, 80166b8 <__assert_func+0x24>
 80166a4:	4b07      	ldr	r3, [pc, #28]	; (80166c4 <__assert_func+0x30>)
 80166a6:	9100      	str	r1, [sp, #0]
 80166a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80166ac:	4906      	ldr	r1, [pc, #24]	; (80166c8 <__assert_func+0x34>)
 80166ae:	462b      	mov	r3, r5
 80166b0:	f000 f80e 	bl	80166d0 <fiprintf>
 80166b4:	f000 fa8c 	bl	8016bd0 <abort>
 80166b8:	4b04      	ldr	r3, [pc, #16]	; (80166cc <__assert_func+0x38>)
 80166ba:	461c      	mov	r4, r3
 80166bc:	e7f3      	b.n	80166a6 <__assert_func+0x12>
 80166be:	bf00      	nop
 80166c0:	200000a4 	.word	0x200000a4
 80166c4:	08018f85 	.word	0x08018f85
 80166c8:	08018f92 	.word	0x08018f92
 80166cc:	08018fc0 	.word	0x08018fc0

080166d0 <fiprintf>:
 80166d0:	b40e      	push	{r1, r2, r3}
 80166d2:	b503      	push	{r0, r1, lr}
 80166d4:	4601      	mov	r1, r0
 80166d6:	ab03      	add	r3, sp, #12
 80166d8:	4805      	ldr	r0, [pc, #20]	; (80166f0 <fiprintf+0x20>)
 80166da:	f853 2b04 	ldr.w	r2, [r3], #4
 80166de:	6800      	ldr	r0, [r0, #0]
 80166e0:	9301      	str	r3, [sp, #4]
 80166e2:	f000 f885 	bl	80167f0 <_vfiprintf_r>
 80166e6:	b002      	add	sp, #8
 80166e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80166ec:	b003      	add	sp, #12
 80166ee:	4770      	bx	lr
 80166f0:	200000a4 	.word	0x200000a4

080166f4 <memmove>:
 80166f4:	4288      	cmp	r0, r1
 80166f6:	b510      	push	{r4, lr}
 80166f8:	eb01 0402 	add.w	r4, r1, r2
 80166fc:	d902      	bls.n	8016704 <memmove+0x10>
 80166fe:	4284      	cmp	r4, r0
 8016700:	4623      	mov	r3, r4
 8016702:	d807      	bhi.n	8016714 <memmove+0x20>
 8016704:	1e43      	subs	r3, r0, #1
 8016706:	42a1      	cmp	r1, r4
 8016708:	d008      	beq.n	801671c <memmove+0x28>
 801670a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801670e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016712:	e7f8      	b.n	8016706 <memmove+0x12>
 8016714:	4402      	add	r2, r0
 8016716:	4601      	mov	r1, r0
 8016718:	428a      	cmp	r2, r1
 801671a:	d100      	bne.n	801671e <memmove+0x2a>
 801671c:	bd10      	pop	{r4, pc}
 801671e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016722:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016726:	e7f7      	b.n	8016718 <memmove+0x24>

08016728 <__malloc_lock>:
 8016728:	4801      	ldr	r0, [pc, #4]	; (8016730 <__malloc_lock+0x8>)
 801672a:	f000 bc11 	b.w	8016f50 <__retarget_lock_acquire_recursive>
 801672e:	bf00      	nop
 8016730:	2001260c 	.word	0x2001260c

08016734 <__malloc_unlock>:
 8016734:	4801      	ldr	r0, [pc, #4]	; (801673c <__malloc_unlock+0x8>)
 8016736:	f000 bc0c 	b.w	8016f52 <__retarget_lock_release_recursive>
 801673a:	bf00      	nop
 801673c:	2001260c 	.word	0x2001260c

08016740 <_realloc_r>:
 8016740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016744:	4680      	mov	r8, r0
 8016746:	4614      	mov	r4, r2
 8016748:	460e      	mov	r6, r1
 801674a:	b921      	cbnz	r1, 8016756 <_realloc_r+0x16>
 801674c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016750:	4611      	mov	r1, r2
 8016752:	f7ff bd95 	b.w	8016280 <_malloc_r>
 8016756:	b92a      	cbnz	r2, 8016764 <_realloc_r+0x24>
 8016758:	f7ff fd26 	bl	80161a8 <_free_r>
 801675c:	4625      	mov	r5, r4
 801675e:	4628      	mov	r0, r5
 8016760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016764:	f000 fc5c 	bl	8017020 <_malloc_usable_size_r>
 8016768:	4284      	cmp	r4, r0
 801676a:	4607      	mov	r7, r0
 801676c:	d802      	bhi.n	8016774 <_realloc_r+0x34>
 801676e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8016772:	d812      	bhi.n	801679a <_realloc_r+0x5a>
 8016774:	4621      	mov	r1, r4
 8016776:	4640      	mov	r0, r8
 8016778:	f7ff fd82 	bl	8016280 <_malloc_r>
 801677c:	4605      	mov	r5, r0
 801677e:	2800      	cmp	r0, #0
 8016780:	d0ed      	beq.n	801675e <_realloc_r+0x1e>
 8016782:	42bc      	cmp	r4, r7
 8016784:	4622      	mov	r2, r4
 8016786:	4631      	mov	r1, r6
 8016788:	bf28      	it	cs
 801678a:	463a      	movcs	r2, r7
 801678c:	f7fc f8c8 	bl	8012920 <memcpy>
 8016790:	4631      	mov	r1, r6
 8016792:	4640      	mov	r0, r8
 8016794:	f7ff fd08 	bl	80161a8 <_free_r>
 8016798:	e7e1      	b.n	801675e <_realloc_r+0x1e>
 801679a:	4635      	mov	r5, r6
 801679c:	e7df      	b.n	801675e <_realloc_r+0x1e>

0801679e <__sfputc_r>:
 801679e:	6893      	ldr	r3, [r2, #8]
 80167a0:	3b01      	subs	r3, #1
 80167a2:	2b00      	cmp	r3, #0
 80167a4:	b410      	push	{r4}
 80167a6:	6093      	str	r3, [r2, #8]
 80167a8:	da08      	bge.n	80167bc <__sfputc_r+0x1e>
 80167aa:	6994      	ldr	r4, [r2, #24]
 80167ac:	42a3      	cmp	r3, r4
 80167ae:	db01      	blt.n	80167b4 <__sfputc_r+0x16>
 80167b0:	290a      	cmp	r1, #10
 80167b2:	d103      	bne.n	80167bc <__sfputc_r+0x1e>
 80167b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80167b8:	f000 b94a 	b.w	8016a50 <__swbuf_r>
 80167bc:	6813      	ldr	r3, [r2, #0]
 80167be:	1c58      	adds	r0, r3, #1
 80167c0:	6010      	str	r0, [r2, #0]
 80167c2:	7019      	strb	r1, [r3, #0]
 80167c4:	4608      	mov	r0, r1
 80167c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80167ca:	4770      	bx	lr

080167cc <__sfputs_r>:
 80167cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80167ce:	4606      	mov	r6, r0
 80167d0:	460f      	mov	r7, r1
 80167d2:	4614      	mov	r4, r2
 80167d4:	18d5      	adds	r5, r2, r3
 80167d6:	42ac      	cmp	r4, r5
 80167d8:	d101      	bne.n	80167de <__sfputs_r+0x12>
 80167da:	2000      	movs	r0, #0
 80167dc:	e007      	b.n	80167ee <__sfputs_r+0x22>
 80167de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80167e2:	463a      	mov	r2, r7
 80167e4:	4630      	mov	r0, r6
 80167e6:	f7ff ffda 	bl	801679e <__sfputc_r>
 80167ea:	1c43      	adds	r3, r0, #1
 80167ec:	d1f3      	bne.n	80167d6 <__sfputs_r+0xa>
 80167ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080167f0 <_vfiprintf_r>:
 80167f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167f4:	460d      	mov	r5, r1
 80167f6:	b09d      	sub	sp, #116	; 0x74
 80167f8:	4614      	mov	r4, r2
 80167fa:	4698      	mov	r8, r3
 80167fc:	4606      	mov	r6, r0
 80167fe:	b118      	cbz	r0, 8016808 <_vfiprintf_r+0x18>
 8016800:	6983      	ldr	r3, [r0, #24]
 8016802:	b90b      	cbnz	r3, 8016808 <_vfiprintf_r+0x18>
 8016804:	f000 fb06 	bl	8016e14 <__sinit>
 8016808:	4b89      	ldr	r3, [pc, #548]	; (8016a30 <_vfiprintf_r+0x240>)
 801680a:	429d      	cmp	r5, r3
 801680c:	d11b      	bne.n	8016846 <_vfiprintf_r+0x56>
 801680e:	6875      	ldr	r5, [r6, #4]
 8016810:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016812:	07d9      	lsls	r1, r3, #31
 8016814:	d405      	bmi.n	8016822 <_vfiprintf_r+0x32>
 8016816:	89ab      	ldrh	r3, [r5, #12]
 8016818:	059a      	lsls	r2, r3, #22
 801681a:	d402      	bmi.n	8016822 <_vfiprintf_r+0x32>
 801681c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801681e:	f000 fb97 	bl	8016f50 <__retarget_lock_acquire_recursive>
 8016822:	89ab      	ldrh	r3, [r5, #12]
 8016824:	071b      	lsls	r3, r3, #28
 8016826:	d501      	bpl.n	801682c <_vfiprintf_r+0x3c>
 8016828:	692b      	ldr	r3, [r5, #16]
 801682a:	b9eb      	cbnz	r3, 8016868 <_vfiprintf_r+0x78>
 801682c:	4629      	mov	r1, r5
 801682e:	4630      	mov	r0, r6
 8016830:	f000 f960 	bl	8016af4 <__swsetup_r>
 8016834:	b1c0      	cbz	r0, 8016868 <_vfiprintf_r+0x78>
 8016836:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016838:	07dc      	lsls	r4, r3, #31
 801683a:	d50e      	bpl.n	801685a <_vfiprintf_r+0x6a>
 801683c:	f04f 30ff 	mov.w	r0, #4294967295
 8016840:	b01d      	add	sp, #116	; 0x74
 8016842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016846:	4b7b      	ldr	r3, [pc, #492]	; (8016a34 <_vfiprintf_r+0x244>)
 8016848:	429d      	cmp	r5, r3
 801684a:	d101      	bne.n	8016850 <_vfiprintf_r+0x60>
 801684c:	68b5      	ldr	r5, [r6, #8]
 801684e:	e7df      	b.n	8016810 <_vfiprintf_r+0x20>
 8016850:	4b79      	ldr	r3, [pc, #484]	; (8016a38 <_vfiprintf_r+0x248>)
 8016852:	429d      	cmp	r5, r3
 8016854:	bf08      	it	eq
 8016856:	68f5      	ldreq	r5, [r6, #12]
 8016858:	e7da      	b.n	8016810 <_vfiprintf_r+0x20>
 801685a:	89ab      	ldrh	r3, [r5, #12]
 801685c:	0598      	lsls	r0, r3, #22
 801685e:	d4ed      	bmi.n	801683c <_vfiprintf_r+0x4c>
 8016860:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016862:	f000 fb76 	bl	8016f52 <__retarget_lock_release_recursive>
 8016866:	e7e9      	b.n	801683c <_vfiprintf_r+0x4c>
 8016868:	2300      	movs	r3, #0
 801686a:	9309      	str	r3, [sp, #36]	; 0x24
 801686c:	2320      	movs	r3, #32
 801686e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016872:	f8cd 800c 	str.w	r8, [sp, #12]
 8016876:	2330      	movs	r3, #48	; 0x30
 8016878:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8016a3c <_vfiprintf_r+0x24c>
 801687c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016880:	f04f 0901 	mov.w	r9, #1
 8016884:	4623      	mov	r3, r4
 8016886:	469a      	mov	sl, r3
 8016888:	f813 2b01 	ldrb.w	r2, [r3], #1
 801688c:	b10a      	cbz	r2, 8016892 <_vfiprintf_r+0xa2>
 801688e:	2a25      	cmp	r2, #37	; 0x25
 8016890:	d1f9      	bne.n	8016886 <_vfiprintf_r+0x96>
 8016892:	ebba 0b04 	subs.w	fp, sl, r4
 8016896:	d00b      	beq.n	80168b0 <_vfiprintf_r+0xc0>
 8016898:	465b      	mov	r3, fp
 801689a:	4622      	mov	r2, r4
 801689c:	4629      	mov	r1, r5
 801689e:	4630      	mov	r0, r6
 80168a0:	f7ff ff94 	bl	80167cc <__sfputs_r>
 80168a4:	3001      	adds	r0, #1
 80168a6:	f000 80aa 	beq.w	80169fe <_vfiprintf_r+0x20e>
 80168aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80168ac:	445a      	add	r2, fp
 80168ae:	9209      	str	r2, [sp, #36]	; 0x24
 80168b0:	f89a 3000 	ldrb.w	r3, [sl]
 80168b4:	2b00      	cmp	r3, #0
 80168b6:	f000 80a2 	beq.w	80169fe <_vfiprintf_r+0x20e>
 80168ba:	2300      	movs	r3, #0
 80168bc:	f04f 32ff 	mov.w	r2, #4294967295
 80168c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80168c4:	f10a 0a01 	add.w	sl, sl, #1
 80168c8:	9304      	str	r3, [sp, #16]
 80168ca:	9307      	str	r3, [sp, #28]
 80168cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80168d0:	931a      	str	r3, [sp, #104]	; 0x68
 80168d2:	4654      	mov	r4, sl
 80168d4:	2205      	movs	r2, #5
 80168d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80168da:	4858      	ldr	r0, [pc, #352]	; (8016a3c <_vfiprintf_r+0x24c>)
 80168dc:	f7e9 fc98 	bl	8000210 <memchr>
 80168e0:	9a04      	ldr	r2, [sp, #16]
 80168e2:	b9d8      	cbnz	r0, 801691c <_vfiprintf_r+0x12c>
 80168e4:	06d1      	lsls	r1, r2, #27
 80168e6:	bf44      	itt	mi
 80168e8:	2320      	movmi	r3, #32
 80168ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80168ee:	0713      	lsls	r3, r2, #28
 80168f0:	bf44      	itt	mi
 80168f2:	232b      	movmi	r3, #43	; 0x2b
 80168f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80168f8:	f89a 3000 	ldrb.w	r3, [sl]
 80168fc:	2b2a      	cmp	r3, #42	; 0x2a
 80168fe:	d015      	beq.n	801692c <_vfiprintf_r+0x13c>
 8016900:	9a07      	ldr	r2, [sp, #28]
 8016902:	4654      	mov	r4, sl
 8016904:	2000      	movs	r0, #0
 8016906:	f04f 0c0a 	mov.w	ip, #10
 801690a:	4621      	mov	r1, r4
 801690c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016910:	3b30      	subs	r3, #48	; 0x30
 8016912:	2b09      	cmp	r3, #9
 8016914:	d94e      	bls.n	80169b4 <_vfiprintf_r+0x1c4>
 8016916:	b1b0      	cbz	r0, 8016946 <_vfiprintf_r+0x156>
 8016918:	9207      	str	r2, [sp, #28]
 801691a:	e014      	b.n	8016946 <_vfiprintf_r+0x156>
 801691c:	eba0 0308 	sub.w	r3, r0, r8
 8016920:	fa09 f303 	lsl.w	r3, r9, r3
 8016924:	4313      	orrs	r3, r2
 8016926:	9304      	str	r3, [sp, #16]
 8016928:	46a2      	mov	sl, r4
 801692a:	e7d2      	b.n	80168d2 <_vfiprintf_r+0xe2>
 801692c:	9b03      	ldr	r3, [sp, #12]
 801692e:	1d19      	adds	r1, r3, #4
 8016930:	681b      	ldr	r3, [r3, #0]
 8016932:	9103      	str	r1, [sp, #12]
 8016934:	2b00      	cmp	r3, #0
 8016936:	bfbb      	ittet	lt
 8016938:	425b      	neglt	r3, r3
 801693a:	f042 0202 	orrlt.w	r2, r2, #2
 801693e:	9307      	strge	r3, [sp, #28]
 8016940:	9307      	strlt	r3, [sp, #28]
 8016942:	bfb8      	it	lt
 8016944:	9204      	strlt	r2, [sp, #16]
 8016946:	7823      	ldrb	r3, [r4, #0]
 8016948:	2b2e      	cmp	r3, #46	; 0x2e
 801694a:	d10c      	bne.n	8016966 <_vfiprintf_r+0x176>
 801694c:	7863      	ldrb	r3, [r4, #1]
 801694e:	2b2a      	cmp	r3, #42	; 0x2a
 8016950:	d135      	bne.n	80169be <_vfiprintf_r+0x1ce>
 8016952:	9b03      	ldr	r3, [sp, #12]
 8016954:	1d1a      	adds	r2, r3, #4
 8016956:	681b      	ldr	r3, [r3, #0]
 8016958:	9203      	str	r2, [sp, #12]
 801695a:	2b00      	cmp	r3, #0
 801695c:	bfb8      	it	lt
 801695e:	f04f 33ff 	movlt.w	r3, #4294967295
 8016962:	3402      	adds	r4, #2
 8016964:	9305      	str	r3, [sp, #20]
 8016966:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8016a4c <_vfiprintf_r+0x25c>
 801696a:	7821      	ldrb	r1, [r4, #0]
 801696c:	2203      	movs	r2, #3
 801696e:	4650      	mov	r0, sl
 8016970:	f7e9 fc4e 	bl	8000210 <memchr>
 8016974:	b140      	cbz	r0, 8016988 <_vfiprintf_r+0x198>
 8016976:	2340      	movs	r3, #64	; 0x40
 8016978:	eba0 000a 	sub.w	r0, r0, sl
 801697c:	fa03 f000 	lsl.w	r0, r3, r0
 8016980:	9b04      	ldr	r3, [sp, #16]
 8016982:	4303      	orrs	r3, r0
 8016984:	3401      	adds	r4, #1
 8016986:	9304      	str	r3, [sp, #16]
 8016988:	f814 1b01 	ldrb.w	r1, [r4], #1
 801698c:	482c      	ldr	r0, [pc, #176]	; (8016a40 <_vfiprintf_r+0x250>)
 801698e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016992:	2206      	movs	r2, #6
 8016994:	f7e9 fc3c 	bl	8000210 <memchr>
 8016998:	2800      	cmp	r0, #0
 801699a:	d03f      	beq.n	8016a1c <_vfiprintf_r+0x22c>
 801699c:	4b29      	ldr	r3, [pc, #164]	; (8016a44 <_vfiprintf_r+0x254>)
 801699e:	bb1b      	cbnz	r3, 80169e8 <_vfiprintf_r+0x1f8>
 80169a0:	9b03      	ldr	r3, [sp, #12]
 80169a2:	3307      	adds	r3, #7
 80169a4:	f023 0307 	bic.w	r3, r3, #7
 80169a8:	3308      	adds	r3, #8
 80169aa:	9303      	str	r3, [sp, #12]
 80169ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80169ae:	443b      	add	r3, r7
 80169b0:	9309      	str	r3, [sp, #36]	; 0x24
 80169b2:	e767      	b.n	8016884 <_vfiprintf_r+0x94>
 80169b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80169b8:	460c      	mov	r4, r1
 80169ba:	2001      	movs	r0, #1
 80169bc:	e7a5      	b.n	801690a <_vfiprintf_r+0x11a>
 80169be:	2300      	movs	r3, #0
 80169c0:	3401      	adds	r4, #1
 80169c2:	9305      	str	r3, [sp, #20]
 80169c4:	4619      	mov	r1, r3
 80169c6:	f04f 0c0a 	mov.w	ip, #10
 80169ca:	4620      	mov	r0, r4
 80169cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80169d0:	3a30      	subs	r2, #48	; 0x30
 80169d2:	2a09      	cmp	r2, #9
 80169d4:	d903      	bls.n	80169de <_vfiprintf_r+0x1ee>
 80169d6:	2b00      	cmp	r3, #0
 80169d8:	d0c5      	beq.n	8016966 <_vfiprintf_r+0x176>
 80169da:	9105      	str	r1, [sp, #20]
 80169dc:	e7c3      	b.n	8016966 <_vfiprintf_r+0x176>
 80169de:	fb0c 2101 	mla	r1, ip, r1, r2
 80169e2:	4604      	mov	r4, r0
 80169e4:	2301      	movs	r3, #1
 80169e6:	e7f0      	b.n	80169ca <_vfiprintf_r+0x1da>
 80169e8:	ab03      	add	r3, sp, #12
 80169ea:	9300      	str	r3, [sp, #0]
 80169ec:	462a      	mov	r2, r5
 80169ee:	4b16      	ldr	r3, [pc, #88]	; (8016a48 <_vfiprintf_r+0x258>)
 80169f0:	a904      	add	r1, sp, #16
 80169f2:	4630      	mov	r0, r6
 80169f4:	f7fc f84a 	bl	8012a8c <_printf_float>
 80169f8:	4607      	mov	r7, r0
 80169fa:	1c78      	adds	r0, r7, #1
 80169fc:	d1d6      	bne.n	80169ac <_vfiprintf_r+0x1bc>
 80169fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016a00:	07d9      	lsls	r1, r3, #31
 8016a02:	d405      	bmi.n	8016a10 <_vfiprintf_r+0x220>
 8016a04:	89ab      	ldrh	r3, [r5, #12]
 8016a06:	059a      	lsls	r2, r3, #22
 8016a08:	d402      	bmi.n	8016a10 <_vfiprintf_r+0x220>
 8016a0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016a0c:	f000 faa1 	bl	8016f52 <__retarget_lock_release_recursive>
 8016a10:	89ab      	ldrh	r3, [r5, #12]
 8016a12:	065b      	lsls	r3, r3, #25
 8016a14:	f53f af12 	bmi.w	801683c <_vfiprintf_r+0x4c>
 8016a18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016a1a:	e711      	b.n	8016840 <_vfiprintf_r+0x50>
 8016a1c:	ab03      	add	r3, sp, #12
 8016a1e:	9300      	str	r3, [sp, #0]
 8016a20:	462a      	mov	r2, r5
 8016a22:	4b09      	ldr	r3, [pc, #36]	; (8016a48 <_vfiprintf_r+0x258>)
 8016a24:	a904      	add	r1, sp, #16
 8016a26:	4630      	mov	r0, r6
 8016a28:	f7fc fad4 	bl	8012fd4 <_printf_i>
 8016a2c:	e7e4      	b.n	80169f8 <_vfiprintf_r+0x208>
 8016a2e:	bf00      	nop
 8016a30:	08018fe4 	.word	0x08018fe4
 8016a34:	08019004 	.word	0x08019004
 8016a38:	08018fc4 	.word	0x08018fc4
 8016a3c:	08018f74 	.word	0x08018f74
 8016a40:	08018f7e 	.word	0x08018f7e
 8016a44:	08012a8d 	.word	0x08012a8d
 8016a48:	080167cd 	.word	0x080167cd
 8016a4c:	08018f7a 	.word	0x08018f7a

08016a50 <__swbuf_r>:
 8016a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a52:	460e      	mov	r6, r1
 8016a54:	4614      	mov	r4, r2
 8016a56:	4605      	mov	r5, r0
 8016a58:	b118      	cbz	r0, 8016a62 <__swbuf_r+0x12>
 8016a5a:	6983      	ldr	r3, [r0, #24]
 8016a5c:	b90b      	cbnz	r3, 8016a62 <__swbuf_r+0x12>
 8016a5e:	f000 f9d9 	bl	8016e14 <__sinit>
 8016a62:	4b21      	ldr	r3, [pc, #132]	; (8016ae8 <__swbuf_r+0x98>)
 8016a64:	429c      	cmp	r4, r3
 8016a66:	d12b      	bne.n	8016ac0 <__swbuf_r+0x70>
 8016a68:	686c      	ldr	r4, [r5, #4]
 8016a6a:	69a3      	ldr	r3, [r4, #24]
 8016a6c:	60a3      	str	r3, [r4, #8]
 8016a6e:	89a3      	ldrh	r3, [r4, #12]
 8016a70:	071a      	lsls	r2, r3, #28
 8016a72:	d52f      	bpl.n	8016ad4 <__swbuf_r+0x84>
 8016a74:	6923      	ldr	r3, [r4, #16]
 8016a76:	b36b      	cbz	r3, 8016ad4 <__swbuf_r+0x84>
 8016a78:	6923      	ldr	r3, [r4, #16]
 8016a7a:	6820      	ldr	r0, [r4, #0]
 8016a7c:	1ac0      	subs	r0, r0, r3
 8016a7e:	6963      	ldr	r3, [r4, #20]
 8016a80:	b2f6      	uxtb	r6, r6
 8016a82:	4283      	cmp	r3, r0
 8016a84:	4637      	mov	r7, r6
 8016a86:	dc04      	bgt.n	8016a92 <__swbuf_r+0x42>
 8016a88:	4621      	mov	r1, r4
 8016a8a:	4628      	mov	r0, r5
 8016a8c:	f000 f92e 	bl	8016cec <_fflush_r>
 8016a90:	bb30      	cbnz	r0, 8016ae0 <__swbuf_r+0x90>
 8016a92:	68a3      	ldr	r3, [r4, #8]
 8016a94:	3b01      	subs	r3, #1
 8016a96:	60a3      	str	r3, [r4, #8]
 8016a98:	6823      	ldr	r3, [r4, #0]
 8016a9a:	1c5a      	adds	r2, r3, #1
 8016a9c:	6022      	str	r2, [r4, #0]
 8016a9e:	701e      	strb	r6, [r3, #0]
 8016aa0:	6963      	ldr	r3, [r4, #20]
 8016aa2:	3001      	adds	r0, #1
 8016aa4:	4283      	cmp	r3, r0
 8016aa6:	d004      	beq.n	8016ab2 <__swbuf_r+0x62>
 8016aa8:	89a3      	ldrh	r3, [r4, #12]
 8016aaa:	07db      	lsls	r3, r3, #31
 8016aac:	d506      	bpl.n	8016abc <__swbuf_r+0x6c>
 8016aae:	2e0a      	cmp	r6, #10
 8016ab0:	d104      	bne.n	8016abc <__swbuf_r+0x6c>
 8016ab2:	4621      	mov	r1, r4
 8016ab4:	4628      	mov	r0, r5
 8016ab6:	f000 f919 	bl	8016cec <_fflush_r>
 8016aba:	b988      	cbnz	r0, 8016ae0 <__swbuf_r+0x90>
 8016abc:	4638      	mov	r0, r7
 8016abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016ac0:	4b0a      	ldr	r3, [pc, #40]	; (8016aec <__swbuf_r+0x9c>)
 8016ac2:	429c      	cmp	r4, r3
 8016ac4:	d101      	bne.n	8016aca <__swbuf_r+0x7a>
 8016ac6:	68ac      	ldr	r4, [r5, #8]
 8016ac8:	e7cf      	b.n	8016a6a <__swbuf_r+0x1a>
 8016aca:	4b09      	ldr	r3, [pc, #36]	; (8016af0 <__swbuf_r+0xa0>)
 8016acc:	429c      	cmp	r4, r3
 8016ace:	bf08      	it	eq
 8016ad0:	68ec      	ldreq	r4, [r5, #12]
 8016ad2:	e7ca      	b.n	8016a6a <__swbuf_r+0x1a>
 8016ad4:	4621      	mov	r1, r4
 8016ad6:	4628      	mov	r0, r5
 8016ad8:	f000 f80c 	bl	8016af4 <__swsetup_r>
 8016adc:	2800      	cmp	r0, #0
 8016ade:	d0cb      	beq.n	8016a78 <__swbuf_r+0x28>
 8016ae0:	f04f 37ff 	mov.w	r7, #4294967295
 8016ae4:	e7ea      	b.n	8016abc <__swbuf_r+0x6c>
 8016ae6:	bf00      	nop
 8016ae8:	08018fe4 	.word	0x08018fe4
 8016aec:	08019004 	.word	0x08019004
 8016af0:	08018fc4 	.word	0x08018fc4

08016af4 <__swsetup_r>:
 8016af4:	4b32      	ldr	r3, [pc, #200]	; (8016bc0 <__swsetup_r+0xcc>)
 8016af6:	b570      	push	{r4, r5, r6, lr}
 8016af8:	681d      	ldr	r5, [r3, #0]
 8016afa:	4606      	mov	r6, r0
 8016afc:	460c      	mov	r4, r1
 8016afe:	b125      	cbz	r5, 8016b0a <__swsetup_r+0x16>
 8016b00:	69ab      	ldr	r3, [r5, #24]
 8016b02:	b913      	cbnz	r3, 8016b0a <__swsetup_r+0x16>
 8016b04:	4628      	mov	r0, r5
 8016b06:	f000 f985 	bl	8016e14 <__sinit>
 8016b0a:	4b2e      	ldr	r3, [pc, #184]	; (8016bc4 <__swsetup_r+0xd0>)
 8016b0c:	429c      	cmp	r4, r3
 8016b0e:	d10f      	bne.n	8016b30 <__swsetup_r+0x3c>
 8016b10:	686c      	ldr	r4, [r5, #4]
 8016b12:	89a3      	ldrh	r3, [r4, #12]
 8016b14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016b18:	0719      	lsls	r1, r3, #28
 8016b1a:	d42c      	bmi.n	8016b76 <__swsetup_r+0x82>
 8016b1c:	06dd      	lsls	r5, r3, #27
 8016b1e:	d411      	bmi.n	8016b44 <__swsetup_r+0x50>
 8016b20:	2309      	movs	r3, #9
 8016b22:	6033      	str	r3, [r6, #0]
 8016b24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016b28:	81a3      	strh	r3, [r4, #12]
 8016b2a:	f04f 30ff 	mov.w	r0, #4294967295
 8016b2e:	e03e      	b.n	8016bae <__swsetup_r+0xba>
 8016b30:	4b25      	ldr	r3, [pc, #148]	; (8016bc8 <__swsetup_r+0xd4>)
 8016b32:	429c      	cmp	r4, r3
 8016b34:	d101      	bne.n	8016b3a <__swsetup_r+0x46>
 8016b36:	68ac      	ldr	r4, [r5, #8]
 8016b38:	e7eb      	b.n	8016b12 <__swsetup_r+0x1e>
 8016b3a:	4b24      	ldr	r3, [pc, #144]	; (8016bcc <__swsetup_r+0xd8>)
 8016b3c:	429c      	cmp	r4, r3
 8016b3e:	bf08      	it	eq
 8016b40:	68ec      	ldreq	r4, [r5, #12]
 8016b42:	e7e6      	b.n	8016b12 <__swsetup_r+0x1e>
 8016b44:	0758      	lsls	r0, r3, #29
 8016b46:	d512      	bpl.n	8016b6e <__swsetup_r+0x7a>
 8016b48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016b4a:	b141      	cbz	r1, 8016b5e <__swsetup_r+0x6a>
 8016b4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016b50:	4299      	cmp	r1, r3
 8016b52:	d002      	beq.n	8016b5a <__swsetup_r+0x66>
 8016b54:	4630      	mov	r0, r6
 8016b56:	f7ff fb27 	bl	80161a8 <_free_r>
 8016b5a:	2300      	movs	r3, #0
 8016b5c:	6363      	str	r3, [r4, #52]	; 0x34
 8016b5e:	89a3      	ldrh	r3, [r4, #12]
 8016b60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016b64:	81a3      	strh	r3, [r4, #12]
 8016b66:	2300      	movs	r3, #0
 8016b68:	6063      	str	r3, [r4, #4]
 8016b6a:	6923      	ldr	r3, [r4, #16]
 8016b6c:	6023      	str	r3, [r4, #0]
 8016b6e:	89a3      	ldrh	r3, [r4, #12]
 8016b70:	f043 0308 	orr.w	r3, r3, #8
 8016b74:	81a3      	strh	r3, [r4, #12]
 8016b76:	6923      	ldr	r3, [r4, #16]
 8016b78:	b94b      	cbnz	r3, 8016b8e <__swsetup_r+0x9a>
 8016b7a:	89a3      	ldrh	r3, [r4, #12]
 8016b7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016b80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016b84:	d003      	beq.n	8016b8e <__swsetup_r+0x9a>
 8016b86:	4621      	mov	r1, r4
 8016b88:	4630      	mov	r0, r6
 8016b8a:	f000 fa09 	bl	8016fa0 <__smakebuf_r>
 8016b8e:	89a0      	ldrh	r0, [r4, #12]
 8016b90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016b94:	f010 0301 	ands.w	r3, r0, #1
 8016b98:	d00a      	beq.n	8016bb0 <__swsetup_r+0xbc>
 8016b9a:	2300      	movs	r3, #0
 8016b9c:	60a3      	str	r3, [r4, #8]
 8016b9e:	6963      	ldr	r3, [r4, #20]
 8016ba0:	425b      	negs	r3, r3
 8016ba2:	61a3      	str	r3, [r4, #24]
 8016ba4:	6923      	ldr	r3, [r4, #16]
 8016ba6:	b943      	cbnz	r3, 8016bba <__swsetup_r+0xc6>
 8016ba8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016bac:	d1ba      	bne.n	8016b24 <__swsetup_r+0x30>
 8016bae:	bd70      	pop	{r4, r5, r6, pc}
 8016bb0:	0781      	lsls	r1, r0, #30
 8016bb2:	bf58      	it	pl
 8016bb4:	6963      	ldrpl	r3, [r4, #20]
 8016bb6:	60a3      	str	r3, [r4, #8]
 8016bb8:	e7f4      	b.n	8016ba4 <__swsetup_r+0xb0>
 8016bba:	2000      	movs	r0, #0
 8016bbc:	e7f7      	b.n	8016bae <__swsetup_r+0xba>
 8016bbe:	bf00      	nop
 8016bc0:	200000a4 	.word	0x200000a4
 8016bc4:	08018fe4 	.word	0x08018fe4
 8016bc8:	08019004 	.word	0x08019004
 8016bcc:	08018fc4 	.word	0x08018fc4

08016bd0 <abort>:
 8016bd0:	b508      	push	{r3, lr}
 8016bd2:	2006      	movs	r0, #6
 8016bd4:	f000 fa54 	bl	8017080 <raise>
 8016bd8:	2001      	movs	r0, #1
 8016bda:	f7f0 fc13 	bl	8007404 <_exit>
	...

08016be0 <__sflush_r>:
 8016be0:	898a      	ldrh	r2, [r1, #12]
 8016be2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016be6:	4605      	mov	r5, r0
 8016be8:	0710      	lsls	r0, r2, #28
 8016bea:	460c      	mov	r4, r1
 8016bec:	d458      	bmi.n	8016ca0 <__sflush_r+0xc0>
 8016bee:	684b      	ldr	r3, [r1, #4]
 8016bf0:	2b00      	cmp	r3, #0
 8016bf2:	dc05      	bgt.n	8016c00 <__sflush_r+0x20>
 8016bf4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016bf6:	2b00      	cmp	r3, #0
 8016bf8:	dc02      	bgt.n	8016c00 <__sflush_r+0x20>
 8016bfa:	2000      	movs	r0, #0
 8016bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016c02:	2e00      	cmp	r6, #0
 8016c04:	d0f9      	beq.n	8016bfa <__sflush_r+0x1a>
 8016c06:	2300      	movs	r3, #0
 8016c08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016c0c:	682f      	ldr	r7, [r5, #0]
 8016c0e:	602b      	str	r3, [r5, #0]
 8016c10:	d032      	beq.n	8016c78 <__sflush_r+0x98>
 8016c12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016c14:	89a3      	ldrh	r3, [r4, #12]
 8016c16:	075a      	lsls	r2, r3, #29
 8016c18:	d505      	bpl.n	8016c26 <__sflush_r+0x46>
 8016c1a:	6863      	ldr	r3, [r4, #4]
 8016c1c:	1ac0      	subs	r0, r0, r3
 8016c1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016c20:	b10b      	cbz	r3, 8016c26 <__sflush_r+0x46>
 8016c22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016c24:	1ac0      	subs	r0, r0, r3
 8016c26:	2300      	movs	r3, #0
 8016c28:	4602      	mov	r2, r0
 8016c2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016c2c:	6a21      	ldr	r1, [r4, #32]
 8016c2e:	4628      	mov	r0, r5
 8016c30:	47b0      	blx	r6
 8016c32:	1c43      	adds	r3, r0, #1
 8016c34:	89a3      	ldrh	r3, [r4, #12]
 8016c36:	d106      	bne.n	8016c46 <__sflush_r+0x66>
 8016c38:	6829      	ldr	r1, [r5, #0]
 8016c3a:	291d      	cmp	r1, #29
 8016c3c:	d82c      	bhi.n	8016c98 <__sflush_r+0xb8>
 8016c3e:	4a2a      	ldr	r2, [pc, #168]	; (8016ce8 <__sflush_r+0x108>)
 8016c40:	40ca      	lsrs	r2, r1
 8016c42:	07d6      	lsls	r6, r2, #31
 8016c44:	d528      	bpl.n	8016c98 <__sflush_r+0xb8>
 8016c46:	2200      	movs	r2, #0
 8016c48:	6062      	str	r2, [r4, #4]
 8016c4a:	04d9      	lsls	r1, r3, #19
 8016c4c:	6922      	ldr	r2, [r4, #16]
 8016c4e:	6022      	str	r2, [r4, #0]
 8016c50:	d504      	bpl.n	8016c5c <__sflush_r+0x7c>
 8016c52:	1c42      	adds	r2, r0, #1
 8016c54:	d101      	bne.n	8016c5a <__sflush_r+0x7a>
 8016c56:	682b      	ldr	r3, [r5, #0]
 8016c58:	b903      	cbnz	r3, 8016c5c <__sflush_r+0x7c>
 8016c5a:	6560      	str	r0, [r4, #84]	; 0x54
 8016c5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016c5e:	602f      	str	r7, [r5, #0]
 8016c60:	2900      	cmp	r1, #0
 8016c62:	d0ca      	beq.n	8016bfa <__sflush_r+0x1a>
 8016c64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016c68:	4299      	cmp	r1, r3
 8016c6a:	d002      	beq.n	8016c72 <__sflush_r+0x92>
 8016c6c:	4628      	mov	r0, r5
 8016c6e:	f7ff fa9b 	bl	80161a8 <_free_r>
 8016c72:	2000      	movs	r0, #0
 8016c74:	6360      	str	r0, [r4, #52]	; 0x34
 8016c76:	e7c1      	b.n	8016bfc <__sflush_r+0x1c>
 8016c78:	6a21      	ldr	r1, [r4, #32]
 8016c7a:	2301      	movs	r3, #1
 8016c7c:	4628      	mov	r0, r5
 8016c7e:	47b0      	blx	r6
 8016c80:	1c41      	adds	r1, r0, #1
 8016c82:	d1c7      	bne.n	8016c14 <__sflush_r+0x34>
 8016c84:	682b      	ldr	r3, [r5, #0]
 8016c86:	2b00      	cmp	r3, #0
 8016c88:	d0c4      	beq.n	8016c14 <__sflush_r+0x34>
 8016c8a:	2b1d      	cmp	r3, #29
 8016c8c:	d001      	beq.n	8016c92 <__sflush_r+0xb2>
 8016c8e:	2b16      	cmp	r3, #22
 8016c90:	d101      	bne.n	8016c96 <__sflush_r+0xb6>
 8016c92:	602f      	str	r7, [r5, #0]
 8016c94:	e7b1      	b.n	8016bfa <__sflush_r+0x1a>
 8016c96:	89a3      	ldrh	r3, [r4, #12]
 8016c98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016c9c:	81a3      	strh	r3, [r4, #12]
 8016c9e:	e7ad      	b.n	8016bfc <__sflush_r+0x1c>
 8016ca0:	690f      	ldr	r7, [r1, #16]
 8016ca2:	2f00      	cmp	r7, #0
 8016ca4:	d0a9      	beq.n	8016bfa <__sflush_r+0x1a>
 8016ca6:	0793      	lsls	r3, r2, #30
 8016ca8:	680e      	ldr	r6, [r1, #0]
 8016caa:	bf08      	it	eq
 8016cac:	694b      	ldreq	r3, [r1, #20]
 8016cae:	600f      	str	r7, [r1, #0]
 8016cb0:	bf18      	it	ne
 8016cb2:	2300      	movne	r3, #0
 8016cb4:	eba6 0807 	sub.w	r8, r6, r7
 8016cb8:	608b      	str	r3, [r1, #8]
 8016cba:	f1b8 0f00 	cmp.w	r8, #0
 8016cbe:	dd9c      	ble.n	8016bfa <__sflush_r+0x1a>
 8016cc0:	6a21      	ldr	r1, [r4, #32]
 8016cc2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016cc4:	4643      	mov	r3, r8
 8016cc6:	463a      	mov	r2, r7
 8016cc8:	4628      	mov	r0, r5
 8016cca:	47b0      	blx	r6
 8016ccc:	2800      	cmp	r0, #0
 8016cce:	dc06      	bgt.n	8016cde <__sflush_r+0xfe>
 8016cd0:	89a3      	ldrh	r3, [r4, #12]
 8016cd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016cd6:	81a3      	strh	r3, [r4, #12]
 8016cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8016cdc:	e78e      	b.n	8016bfc <__sflush_r+0x1c>
 8016cde:	4407      	add	r7, r0
 8016ce0:	eba8 0800 	sub.w	r8, r8, r0
 8016ce4:	e7e9      	b.n	8016cba <__sflush_r+0xda>
 8016ce6:	bf00      	nop
 8016ce8:	20400001 	.word	0x20400001

08016cec <_fflush_r>:
 8016cec:	b538      	push	{r3, r4, r5, lr}
 8016cee:	690b      	ldr	r3, [r1, #16]
 8016cf0:	4605      	mov	r5, r0
 8016cf2:	460c      	mov	r4, r1
 8016cf4:	b913      	cbnz	r3, 8016cfc <_fflush_r+0x10>
 8016cf6:	2500      	movs	r5, #0
 8016cf8:	4628      	mov	r0, r5
 8016cfa:	bd38      	pop	{r3, r4, r5, pc}
 8016cfc:	b118      	cbz	r0, 8016d06 <_fflush_r+0x1a>
 8016cfe:	6983      	ldr	r3, [r0, #24]
 8016d00:	b90b      	cbnz	r3, 8016d06 <_fflush_r+0x1a>
 8016d02:	f000 f887 	bl	8016e14 <__sinit>
 8016d06:	4b14      	ldr	r3, [pc, #80]	; (8016d58 <_fflush_r+0x6c>)
 8016d08:	429c      	cmp	r4, r3
 8016d0a:	d11b      	bne.n	8016d44 <_fflush_r+0x58>
 8016d0c:	686c      	ldr	r4, [r5, #4]
 8016d0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016d12:	2b00      	cmp	r3, #0
 8016d14:	d0ef      	beq.n	8016cf6 <_fflush_r+0xa>
 8016d16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016d18:	07d0      	lsls	r0, r2, #31
 8016d1a:	d404      	bmi.n	8016d26 <_fflush_r+0x3a>
 8016d1c:	0599      	lsls	r1, r3, #22
 8016d1e:	d402      	bmi.n	8016d26 <_fflush_r+0x3a>
 8016d20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016d22:	f000 f915 	bl	8016f50 <__retarget_lock_acquire_recursive>
 8016d26:	4628      	mov	r0, r5
 8016d28:	4621      	mov	r1, r4
 8016d2a:	f7ff ff59 	bl	8016be0 <__sflush_r>
 8016d2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016d30:	07da      	lsls	r2, r3, #31
 8016d32:	4605      	mov	r5, r0
 8016d34:	d4e0      	bmi.n	8016cf8 <_fflush_r+0xc>
 8016d36:	89a3      	ldrh	r3, [r4, #12]
 8016d38:	059b      	lsls	r3, r3, #22
 8016d3a:	d4dd      	bmi.n	8016cf8 <_fflush_r+0xc>
 8016d3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016d3e:	f000 f908 	bl	8016f52 <__retarget_lock_release_recursive>
 8016d42:	e7d9      	b.n	8016cf8 <_fflush_r+0xc>
 8016d44:	4b05      	ldr	r3, [pc, #20]	; (8016d5c <_fflush_r+0x70>)
 8016d46:	429c      	cmp	r4, r3
 8016d48:	d101      	bne.n	8016d4e <_fflush_r+0x62>
 8016d4a:	68ac      	ldr	r4, [r5, #8]
 8016d4c:	e7df      	b.n	8016d0e <_fflush_r+0x22>
 8016d4e:	4b04      	ldr	r3, [pc, #16]	; (8016d60 <_fflush_r+0x74>)
 8016d50:	429c      	cmp	r4, r3
 8016d52:	bf08      	it	eq
 8016d54:	68ec      	ldreq	r4, [r5, #12]
 8016d56:	e7da      	b.n	8016d0e <_fflush_r+0x22>
 8016d58:	08018fe4 	.word	0x08018fe4
 8016d5c:	08019004 	.word	0x08019004
 8016d60:	08018fc4 	.word	0x08018fc4

08016d64 <std>:
 8016d64:	2300      	movs	r3, #0
 8016d66:	b510      	push	{r4, lr}
 8016d68:	4604      	mov	r4, r0
 8016d6a:	e9c0 3300 	strd	r3, r3, [r0]
 8016d6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016d72:	6083      	str	r3, [r0, #8]
 8016d74:	8181      	strh	r1, [r0, #12]
 8016d76:	6643      	str	r3, [r0, #100]	; 0x64
 8016d78:	81c2      	strh	r2, [r0, #14]
 8016d7a:	6183      	str	r3, [r0, #24]
 8016d7c:	4619      	mov	r1, r3
 8016d7e:	2208      	movs	r2, #8
 8016d80:	305c      	adds	r0, #92	; 0x5c
 8016d82:	f7fb fddb 	bl	801293c <memset>
 8016d86:	4b05      	ldr	r3, [pc, #20]	; (8016d9c <std+0x38>)
 8016d88:	6263      	str	r3, [r4, #36]	; 0x24
 8016d8a:	4b05      	ldr	r3, [pc, #20]	; (8016da0 <std+0x3c>)
 8016d8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8016d8e:	4b05      	ldr	r3, [pc, #20]	; (8016da4 <std+0x40>)
 8016d90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016d92:	4b05      	ldr	r3, [pc, #20]	; (8016da8 <std+0x44>)
 8016d94:	6224      	str	r4, [r4, #32]
 8016d96:	6323      	str	r3, [r4, #48]	; 0x30
 8016d98:	bd10      	pop	{r4, pc}
 8016d9a:	bf00      	nop
 8016d9c:	080170b9 	.word	0x080170b9
 8016da0:	080170db 	.word	0x080170db
 8016da4:	08017113 	.word	0x08017113
 8016da8:	08017137 	.word	0x08017137

08016dac <_cleanup_r>:
 8016dac:	4901      	ldr	r1, [pc, #4]	; (8016db4 <_cleanup_r+0x8>)
 8016dae:	f000 b8af 	b.w	8016f10 <_fwalk_reent>
 8016db2:	bf00      	nop
 8016db4:	08016ced 	.word	0x08016ced

08016db8 <__sfmoreglue>:
 8016db8:	b570      	push	{r4, r5, r6, lr}
 8016dba:	2268      	movs	r2, #104	; 0x68
 8016dbc:	1e4d      	subs	r5, r1, #1
 8016dbe:	4355      	muls	r5, r2
 8016dc0:	460e      	mov	r6, r1
 8016dc2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016dc6:	f7ff fa5b 	bl	8016280 <_malloc_r>
 8016dca:	4604      	mov	r4, r0
 8016dcc:	b140      	cbz	r0, 8016de0 <__sfmoreglue+0x28>
 8016dce:	2100      	movs	r1, #0
 8016dd0:	e9c0 1600 	strd	r1, r6, [r0]
 8016dd4:	300c      	adds	r0, #12
 8016dd6:	60a0      	str	r0, [r4, #8]
 8016dd8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016ddc:	f7fb fdae 	bl	801293c <memset>
 8016de0:	4620      	mov	r0, r4
 8016de2:	bd70      	pop	{r4, r5, r6, pc}

08016de4 <__sfp_lock_acquire>:
 8016de4:	4801      	ldr	r0, [pc, #4]	; (8016dec <__sfp_lock_acquire+0x8>)
 8016de6:	f000 b8b3 	b.w	8016f50 <__retarget_lock_acquire_recursive>
 8016dea:	bf00      	nop
 8016dec:	2001260d 	.word	0x2001260d

08016df0 <__sfp_lock_release>:
 8016df0:	4801      	ldr	r0, [pc, #4]	; (8016df8 <__sfp_lock_release+0x8>)
 8016df2:	f000 b8ae 	b.w	8016f52 <__retarget_lock_release_recursive>
 8016df6:	bf00      	nop
 8016df8:	2001260d 	.word	0x2001260d

08016dfc <__sinit_lock_acquire>:
 8016dfc:	4801      	ldr	r0, [pc, #4]	; (8016e04 <__sinit_lock_acquire+0x8>)
 8016dfe:	f000 b8a7 	b.w	8016f50 <__retarget_lock_acquire_recursive>
 8016e02:	bf00      	nop
 8016e04:	2001260e 	.word	0x2001260e

08016e08 <__sinit_lock_release>:
 8016e08:	4801      	ldr	r0, [pc, #4]	; (8016e10 <__sinit_lock_release+0x8>)
 8016e0a:	f000 b8a2 	b.w	8016f52 <__retarget_lock_release_recursive>
 8016e0e:	bf00      	nop
 8016e10:	2001260e 	.word	0x2001260e

08016e14 <__sinit>:
 8016e14:	b510      	push	{r4, lr}
 8016e16:	4604      	mov	r4, r0
 8016e18:	f7ff fff0 	bl	8016dfc <__sinit_lock_acquire>
 8016e1c:	69a3      	ldr	r3, [r4, #24]
 8016e1e:	b11b      	cbz	r3, 8016e28 <__sinit+0x14>
 8016e20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016e24:	f7ff bff0 	b.w	8016e08 <__sinit_lock_release>
 8016e28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016e2c:	6523      	str	r3, [r4, #80]	; 0x50
 8016e2e:	4b13      	ldr	r3, [pc, #76]	; (8016e7c <__sinit+0x68>)
 8016e30:	4a13      	ldr	r2, [pc, #76]	; (8016e80 <__sinit+0x6c>)
 8016e32:	681b      	ldr	r3, [r3, #0]
 8016e34:	62a2      	str	r2, [r4, #40]	; 0x28
 8016e36:	42a3      	cmp	r3, r4
 8016e38:	bf04      	itt	eq
 8016e3a:	2301      	moveq	r3, #1
 8016e3c:	61a3      	streq	r3, [r4, #24]
 8016e3e:	4620      	mov	r0, r4
 8016e40:	f000 f820 	bl	8016e84 <__sfp>
 8016e44:	6060      	str	r0, [r4, #4]
 8016e46:	4620      	mov	r0, r4
 8016e48:	f000 f81c 	bl	8016e84 <__sfp>
 8016e4c:	60a0      	str	r0, [r4, #8]
 8016e4e:	4620      	mov	r0, r4
 8016e50:	f000 f818 	bl	8016e84 <__sfp>
 8016e54:	2200      	movs	r2, #0
 8016e56:	60e0      	str	r0, [r4, #12]
 8016e58:	2104      	movs	r1, #4
 8016e5a:	6860      	ldr	r0, [r4, #4]
 8016e5c:	f7ff ff82 	bl	8016d64 <std>
 8016e60:	68a0      	ldr	r0, [r4, #8]
 8016e62:	2201      	movs	r2, #1
 8016e64:	2109      	movs	r1, #9
 8016e66:	f7ff ff7d 	bl	8016d64 <std>
 8016e6a:	68e0      	ldr	r0, [r4, #12]
 8016e6c:	2202      	movs	r2, #2
 8016e6e:	2112      	movs	r1, #18
 8016e70:	f7ff ff78 	bl	8016d64 <std>
 8016e74:	2301      	movs	r3, #1
 8016e76:	61a3      	str	r3, [r4, #24]
 8016e78:	e7d2      	b.n	8016e20 <__sinit+0xc>
 8016e7a:	bf00      	nop
 8016e7c:	08018b80 	.word	0x08018b80
 8016e80:	08016dad 	.word	0x08016dad

08016e84 <__sfp>:
 8016e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e86:	4607      	mov	r7, r0
 8016e88:	f7ff ffac 	bl	8016de4 <__sfp_lock_acquire>
 8016e8c:	4b1e      	ldr	r3, [pc, #120]	; (8016f08 <__sfp+0x84>)
 8016e8e:	681e      	ldr	r6, [r3, #0]
 8016e90:	69b3      	ldr	r3, [r6, #24]
 8016e92:	b913      	cbnz	r3, 8016e9a <__sfp+0x16>
 8016e94:	4630      	mov	r0, r6
 8016e96:	f7ff ffbd 	bl	8016e14 <__sinit>
 8016e9a:	3648      	adds	r6, #72	; 0x48
 8016e9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016ea0:	3b01      	subs	r3, #1
 8016ea2:	d503      	bpl.n	8016eac <__sfp+0x28>
 8016ea4:	6833      	ldr	r3, [r6, #0]
 8016ea6:	b30b      	cbz	r3, 8016eec <__sfp+0x68>
 8016ea8:	6836      	ldr	r6, [r6, #0]
 8016eaa:	e7f7      	b.n	8016e9c <__sfp+0x18>
 8016eac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016eb0:	b9d5      	cbnz	r5, 8016ee8 <__sfp+0x64>
 8016eb2:	4b16      	ldr	r3, [pc, #88]	; (8016f0c <__sfp+0x88>)
 8016eb4:	60e3      	str	r3, [r4, #12]
 8016eb6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016eba:	6665      	str	r5, [r4, #100]	; 0x64
 8016ebc:	f000 f847 	bl	8016f4e <__retarget_lock_init_recursive>
 8016ec0:	f7ff ff96 	bl	8016df0 <__sfp_lock_release>
 8016ec4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016ec8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016ecc:	6025      	str	r5, [r4, #0]
 8016ece:	61a5      	str	r5, [r4, #24]
 8016ed0:	2208      	movs	r2, #8
 8016ed2:	4629      	mov	r1, r5
 8016ed4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016ed8:	f7fb fd30 	bl	801293c <memset>
 8016edc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016ee0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016ee4:	4620      	mov	r0, r4
 8016ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016ee8:	3468      	adds	r4, #104	; 0x68
 8016eea:	e7d9      	b.n	8016ea0 <__sfp+0x1c>
 8016eec:	2104      	movs	r1, #4
 8016eee:	4638      	mov	r0, r7
 8016ef0:	f7ff ff62 	bl	8016db8 <__sfmoreglue>
 8016ef4:	4604      	mov	r4, r0
 8016ef6:	6030      	str	r0, [r6, #0]
 8016ef8:	2800      	cmp	r0, #0
 8016efa:	d1d5      	bne.n	8016ea8 <__sfp+0x24>
 8016efc:	f7ff ff78 	bl	8016df0 <__sfp_lock_release>
 8016f00:	230c      	movs	r3, #12
 8016f02:	603b      	str	r3, [r7, #0]
 8016f04:	e7ee      	b.n	8016ee4 <__sfp+0x60>
 8016f06:	bf00      	nop
 8016f08:	08018b80 	.word	0x08018b80
 8016f0c:	ffff0001 	.word	0xffff0001

08016f10 <_fwalk_reent>:
 8016f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016f14:	4606      	mov	r6, r0
 8016f16:	4688      	mov	r8, r1
 8016f18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016f1c:	2700      	movs	r7, #0
 8016f1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016f22:	f1b9 0901 	subs.w	r9, r9, #1
 8016f26:	d505      	bpl.n	8016f34 <_fwalk_reent+0x24>
 8016f28:	6824      	ldr	r4, [r4, #0]
 8016f2a:	2c00      	cmp	r4, #0
 8016f2c:	d1f7      	bne.n	8016f1e <_fwalk_reent+0xe>
 8016f2e:	4638      	mov	r0, r7
 8016f30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016f34:	89ab      	ldrh	r3, [r5, #12]
 8016f36:	2b01      	cmp	r3, #1
 8016f38:	d907      	bls.n	8016f4a <_fwalk_reent+0x3a>
 8016f3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016f3e:	3301      	adds	r3, #1
 8016f40:	d003      	beq.n	8016f4a <_fwalk_reent+0x3a>
 8016f42:	4629      	mov	r1, r5
 8016f44:	4630      	mov	r0, r6
 8016f46:	47c0      	blx	r8
 8016f48:	4307      	orrs	r7, r0
 8016f4a:	3568      	adds	r5, #104	; 0x68
 8016f4c:	e7e9      	b.n	8016f22 <_fwalk_reent+0x12>

08016f4e <__retarget_lock_init_recursive>:
 8016f4e:	4770      	bx	lr

08016f50 <__retarget_lock_acquire_recursive>:
 8016f50:	4770      	bx	lr

08016f52 <__retarget_lock_release_recursive>:
 8016f52:	4770      	bx	lr

08016f54 <__swhatbuf_r>:
 8016f54:	b570      	push	{r4, r5, r6, lr}
 8016f56:	460e      	mov	r6, r1
 8016f58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f5c:	2900      	cmp	r1, #0
 8016f5e:	b096      	sub	sp, #88	; 0x58
 8016f60:	4614      	mov	r4, r2
 8016f62:	461d      	mov	r5, r3
 8016f64:	da08      	bge.n	8016f78 <__swhatbuf_r+0x24>
 8016f66:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8016f6a:	2200      	movs	r2, #0
 8016f6c:	602a      	str	r2, [r5, #0]
 8016f6e:	061a      	lsls	r2, r3, #24
 8016f70:	d410      	bmi.n	8016f94 <__swhatbuf_r+0x40>
 8016f72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016f76:	e00e      	b.n	8016f96 <__swhatbuf_r+0x42>
 8016f78:	466a      	mov	r2, sp
 8016f7a:	f000 f903 	bl	8017184 <_fstat_r>
 8016f7e:	2800      	cmp	r0, #0
 8016f80:	dbf1      	blt.n	8016f66 <__swhatbuf_r+0x12>
 8016f82:	9a01      	ldr	r2, [sp, #4]
 8016f84:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016f88:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016f8c:	425a      	negs	r2, r3
 8016f8e:	415a      	adcs	r2, r3
 8016f90:	602a      	str	r2, [r5, #0]
 8016f92:	e7ee      	b.n	8016f72 <__swhatbuf_r+0x1e>
 8016f94:	2340      	movs	r3, #64	; 0x40
 8016f96:	2000      	movs	r0, #0
 8016f98:	6023      	str	r3, [r4, #0]
 8016f9a:	b016      	add	sp, #88	; 0x58
 8016f9c:	bd70      	pop	{r4, r5, r6, pc}
	...

08016fa0 <__smakebuf_r>:
 8016fa0:	898b      	ldrh	r3, [r1, #12]
 8016fa2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016fa4:	079d      	lsls	r5, r3, #30
 8016fa6:	4606      	mov	r6, r0
 8016fa8:	460c      	mov	r4, r1
 8016faa:	d507      	bpl.n	8016fbc <__smakebuf_r+0x1c>
 8016fac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016fb0:	6023      	str	r3, [r4, #0]
 8016fb2:	6123      	str	r3, [r4, #16]
 8016fb4:	2301      	movs	r3, #1
 8016fb6:	6163      	str	r3, [r4, #20]
 8016fb8:	b002      	add	sp, #8
 8016fba:	bd70      	pop	{r4, r5, r6, pc}
 8016fbc:	ab01      	add	r3, sp, #4
 8016fbe:	466a      	mov	r2, sp
 8016fc0:	f7ff ffc8 	bl	8016f54 <__swhatbuf_r>
 8016fc4:	9900      	ldr	r1, [sp, #0]
 8016fc6:	4605      	mov	r5, r0
 8016fc8:	4630      	mov	r0, r6
 8016fca:	f7ff f959 	bl	8016280 <_malloc_r>
 8016fce:	b948      	cbnz	r0, 8016fe4 <__smakebuf_r+0x44>
 8016fd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016fd4:	059a      	lsls	r2, r3, #22
 8016fd6:	d4ef      	bmi.n	8016fb8 <__smakebuf_r+0x18>
 8016fd8:	f023 0303 	bic.w	r3, r3, #3
 8016fdc:	f043 0302 	orr.w	r3, r3, #2
 8016fe0:	81a3      	strh	r3, [r4, #12]
 8016fe2:	e7e3      	b.n	8016fac <__smakebuf_r+0xc>
 8016fe4:	4b0d      	ldr	r3, [pc, #52]	; (801701c <__smakebuf_r+0x7c>)
 8016fe6:	62b3      	str	r3, [r6, #40]	; 0x28
 8016fe8:	89a3      	ldrh	r3, [r4, #12]
 8016fea:	6020      	str	r0, [r4, #0]
 8016fec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016ff0:	81a3      	strh	r3, [r4, #12]
 8016ff2:	9b00      	ldr	r3, [sp, #0]
 8016ff4:	6163      	str	r3, [r4, #20]
 8016ff6:	9b01      	ldr	r3, [sp, #4]
 8016ff8:	6120      	str	r0, [r4, #16]
 8016ffa:	b15b      	cbz	r3, 8017014 <__smakebuf_r+0x74>
 8016ffc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017000:	4630      	mov	r0, r6
 8017002:	f000 f8d1 	bl	80171a8 <_isatty_r>
 8017006:	b128      	cbz	r0, 8017014 <__smakebuf_r+0x74>
 8017008:	89a3      	ldrh	r3, [r4, #12]
 801700a:	f023 0303 	bic.w	r3, r3, #3
 801700e:	f043 0301 	orr.w	r3, r3, #1
 8017012:	81a3      	strh	r3, [r4, #12]
 8017014:	89a0      	ldrh	r0, [r4, #12]
 8017016:	4305      	orrs	r5, r0
 8017018:	81a5      	strh	r5, [r4, #12]
 801701a:	e7cd      	b.n	8016fb8 <__smakebuf_r+0x18>
 801701c:	08016dad 	.word	0x08016dad

08017020 <_malloc_usable_size_r>:
 8017020:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017024:	1f18      	subs	r0, r3, #4
 8017026:	2b00      	cmp	r3, #0
 8017028:	bfbc      	itt	lt
 801702a:	580b      	ldrlt	r3, [r1, r0]
 801702c:	18c0      	addlt	r0, r0, r3
 801702e:	4770      	bx	lr

08017030 <_raise_r>:
 8017030:	291f      	cmp	r1, #31
 8017032:	b538      	push	{r3, r4, r5, lr}
 8017034:	4604      	mov	r4, r0
 8017036:	460d      	mov	r5, r1
 8017038:	d904      	bls.n	8017044 <_raise_r+0x14>
 801703a:	2316      	movs	r3, #22
 801703c:	6003      	str	r3, [r0, #0]
 801703e:	f04f 30ff 	mov.w	r0, #4294967295
 8017042:	bd38      	pop	{r3, r4, r5, pc}
 8017044:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017046:	b112      	cbz	r2, 801704e <_raise_r+0x1e>
 8017048:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801704c:	b94b      	cbnz	r3, 8017062 <_raise_r+0x32>
 801704e:	4620      	mov	r0, r4
 8017050:	f000 f830 	bl	80170b4 <_getpid_r>
 8017054:	462a      	mov	r2, r5
 8017056:	4601      	mov	r1, r0
 8017058:	4620      	mov	r0, r4
 801705a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801705e:	f000 b817 	b.w	8017090 <_kill_r>
 8017062:	2b01      	cmp	r3, #1
 8017064:	d00a      	beq.n	801707c <_raise_r+0x4c>
 8017066:	1c59      	adds	r1, r3, #1
 8017068:	d103      	bne.n	8017072 <_raise_r+0x42>
 801706a:	2316      	movs	r3, #22
 801706c:	6003      	str	r3, [r0, #0]
 801706e:	2001      	movs	r0, #1
 8017070:	e7e7      	b.n	8017042 <_raise_r+0x12>
 8017072:	2400      	movs	r4, #0
 8017074:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017078:	4628      	mov	r0, r5
 801707a:	4798      	blx	r3
 801707c:	2000      	movs	r0, #0
 801707e:	e7e0      	b.n	8017042 <_raise_r+0x12>

08017080 <raise>:
 8017080:	4b02      	ldr	r3, [pc, #8]	; (801708c <raise+0xc>)
 8017082:	4601      	mov	r1, r0
 8017084:	6818      	ldr	r0, [r3, #0]
 8017086:	f7ff bfd3 	b.w	8017030 <_raise_r>
 801708a:	bf00      	nop
 801708c:	200000a4 	.word	0x200000a4

08017090 <_kill_r>:
 8017090:	b538      	push	{r3, r4, r5, lr}
 8017092:	4d07      	ldr	r5, [pc, #28]	; (80170b0 <_kill_r+0x20>)
 8017094:	2300      	movs	r3, #0
 8017096:	4604      	mov	r4, r0
 8017098:	4608      	mov	r0, r1
 801709a:	4611      	mov	r1, r2
 801709c:	602b      	str	r3, [r5, #0]
 801709e:	f7f0 f9a1 	bl	80073e4 <_kill>
 80170a2:	1c43      	adds	r3, r0, #1
 80170a4:	d102      	bne.n	80170ac <_kill_r+0x1c>
 80170a6:	682b      	ldr	r3, [r5, #0]
 80170a8:	b103      	cbz	r3, 80170ac <_kill_r+0x1c>
 80170aa:	6023      	str	r3, [r4, #0]
 80170ac:	bd38      	pop	{r3, r4, r5, pc}
 80170ae:	bf00      	nop
 80170b0:	20012608 	.word	0x20012608

080170b4 <_getpid_r>:
 80170b4:	f7f0 b98e 	b.w	80073d4 <_getpid>

080170b8 <__sread>:
 80170b8:	b510      	push	{r4, lr}
 80170ba:	460c      	mov	r4, r1
 80170bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80170c0:	f000 f894 	bl	80171ec <_read_r>
 80170c4:	2800      	cmp	r0, #0
 80170c6:	bfab      	itete	ge
 80170c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80170ca:	89a3      	ldrhlt	r3, [r4, #12]
 80170cc:	181b      	addge	r3, r3, r0
 80170ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80170d2:	bfac      	ite	ge
 80170d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80170d6:	81a3      	strhlt	r3, [r4, #12]
 80170d8:	bd10      	pop	{r4, pc}

080170da <__swrite>:
 80170da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80170de:	461f      	mov	r7, r3
 80170e0:	898b      	ldrh	r3, [r1, #12]
 80170e2:	05db      	lsls	r3, r3, #23
 80170e4:	4605      	mov	r5, r0
 80170e6:	460c      	mov	r4, r1
 80170e8:	4616      	mov	r6, r2
 80170ea:	d505      	bpl.n	80170f8 <__swrite+0x1e>
 80170ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80170f0:	2302      	movs	r3, #2
 80170f2:	2200      	movs	r2, #0
 80170f4:	f000 f868 	bl	80171c8 <_lseek_r>
 80170f8:	89a3      	ldrh	r3, [r4, #12]
 80170fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80170fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017102:	81a3      	strh	r3, [r4, #12]
 8017104:	4632      	mov	r2, r6
 8017106:	463b      	mov	r3, r7
 8017108:	4628      	mov	r0, r5
 801710a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801710e:	f000 b817 	b.w	8017140 <_write_r>

08017112 <__sseek>:
 8017112:	b510      	push	{r4, lr}
 8017114:	460c      	mov	r4, r1
 8017116:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801711a:	f000 f855 	bl	80171c8 <_lseek_r>
 801711e:	1c43      	adds	r3, r0, #1
 8017120:	89a3      	ldrh	r3, [r4, #12]
 8017122:	bf15      	itete	ne
 8017124:	6560      	strne	r0, [r4, #84]	; 0x54
 8017126:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801712a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801712e:	81a3      	strheq	r3, [r4, #12]
 8017130:	bf18      	it	ne
 8017132:	81a3      	strhne	r3, [r4, #12]
 8017134:	bd10      	pop	{r4, pc}

08017136 <__sclose>:
 8017136:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801713a:	f000 b813 	b.w	8017164 <_close_r>
	...

08017140 <_write_r>:
 8017140:	b538      	push	{r3, r4, r5, lr}
 8017142:	4d07      	ldr	r5, [pc, #28]	; (8017160 <_write_r+0x20>)
 8017144:	4604      	mov	r4, r0
 8017146:	4608      	mov	r0, r1
 8017148:	4611      	mov	r1, r2
 801714a:	2200      	movs	r2, #0
 801714c:	602a      	str	r2, [r5, #0]
 801714e:	461a      	mov	r2, r3
 8017150:	f7f0 f97f 	bl	8007452 <_write>
 8017154:	1c43      	adds	r3, r0, #1
 8017156:	d102      	bne.n	801715e <_write_r+0x1e>
 8017158:	682b      	ldr	r3, [r5, #0]
 801715a:	b103      	cbz	r3, 801715e <_write_r+0x1e>
 801715c:	6023      	str	r3, [r4, #0]
 801715e:	bd38      	pop	{r3, r4, r5, pc}
 8017160:	20012608 	.word	0x20012608

08017164 <_close_r>:
 8017164:	b538      	push	{r3, r4, r5, lr}
 8017166:	4d06      	ldr	r5, [pc, #24]	; (8017180 <_close_r+0x1c>)
 8017168:	2300      	movs	r3, #0
 801716a:	4604      	mov	r4, r0
 801716c:	4608      	mov	r0, r1
 801716e:	602b      	str	r3, [r5, #0]
 8017170:	f7f0 f98b 	bl	800748a <_close>
 8017174:	1c43      	adds	r3, r0, #1
 8017176:	d102      	bne.n	801717e <_close_r+0x1a>
 8017178:	682b      	ldr	r3, [r5, #0]
 801717a:	b103      	cbz	r3, 801717e <_close_r+0x1a>
 801717c:	6023      	str	r3, [r4, #0]
 801717e:	bd38      	pop	{r3, r4, r5, pc}
 8017180:	20012608 	.word	0x20012608

08017184 <_fstat_r>:
 8017184:	b538      	push	{r3, r4, r5, lr}
 8017186:	4d07      	ldr	r5, [pc, #28]	; (80171a4 <_fstat_r+0x20>)
 8017188:	2300      	movs	r3, #0
 801718a:	4604      	mov	r4, r0
 801718c:	4608      	mov	r0, r1
 801718e:	4611      	mov	r1, r2
 8017190:	602b      	str	r3, [r5, #0]
 8017192:	f7f0 f986 	bl	80074a2 <_fstat>
 8017196:	1c43      	adds	r3, r0, #1
 8017198:	d102      	bne.n	80171a0 <_fstat_r+0x1c>
 801719a:	682b      	ldr	r3, [r5, #0]
 801719c:	b103      	cbz	r3, 80171a0 <_fstat_r+0x1c>
 801719e:	6023      	str	r3, [r4, #0]
 80171a0:	bd38      	pop	{r3, r4, r5, pc}
 80171a2:	bf00      	nop
 80171a4:	20012608 	.word	0x20012608

080171a8 <_isatty_r>:
 80171a8:	b538      	push	{r3, r4, r5, lr}
 80171aa:	4d06      	ldr	r5, [pc, #24]	; (80171c4 <_isatty_r+0x1c>)
 80171ac:	2300      	movs	r3, #0
 80171ae:	4604      	mov	r4, r0
 80171b0:	4608      	mov	r0, r1
 80171b2:	602b      	str	r3, [r5, #0]
 80171b4:	f7f0 f985 	bl	80074c2 <_isatty>
 80171b8:	1c43      	adds	r3, r0, #1
 80171ba:	d102      	bne.n	80171c2 <_isatty_r+0x1a>
 80171bc:	682b      	ldr	r3, [r5, #0]
 80171be:	b103      	cbz	r3, 80171c2 <_isatty_r+0x1a>
 80171c0:	6023      	str	r3, [r4, #0]
 80171c2:	bd38      	pop	{r3, r4, r5, pc}
 80171c4:	20012608 	.word	0x20012608

080171c8 <_lseek_r>:
 80171c8:	b538      	push	{r3, r4, r5, lr}
 80171ca:	4d07      	ldr	r5, [pc, #28]	; (80171e8 <_lseek_r+0x20>)
 80171cc:	4604      	mov	r4, r0
 80171ce:	4608      	mov	r0, r1
 80171d0:	4611      	mov	r1, r2
 80171d2:	2200      	movs	r2, #0
 80171d4:	602a      	str	r2, [r5, #0]
 80171d6:	461a      	mov	r2, r3
 80171d8:	f7f0 f97e 	bl	80074d8 <_lseek>
 80171dc:	1c43      	adds	r3, r0, #1
 80171de:	d102      	bne.n	80171e6 <_lseek_r+0x1e>
 80171e0:	682b      	ldr	r3, [r5, #0]
 80171e2:	b103      	cbz	r3, 80171e6 <_lseek_r+0x1e>
 80171e4:	6023      	str	r3, [r4, #0]
 80171e6:	bd38      	pop	{r3, r4, r5, pc}
 80171e8:	20012608 	.word	0x20012608

080171ec <_read_r>:
 80171ec:	b538      	push	{r3, r4, r5, lr}
 80171ee:	4d07      	ldr	r5, [pc, #28]	; (801720c <_read_r+0x20>)
 80171f0:	4604      	mov	r4, r0
 80171f2:	4608      	mov	r0, r1
 80171f4:	4611      	mov	r1, r2
 80171f6:	2200      	movs	r2, #0
 80171f8:	602a      	str	r2, [r5, #0]
 80171fa:	461a      	mov	r2, r3
 80171fc:	f7f0 f90c 	bl	8007418 <_read>
 8017200:	1c43      	adds	r3, r0, #1
 8017202:	d102      	bne.n	801720a <_read_r+0x1e>
 8017204:	682b      	ldr	r3, [r5, #0]
 8017206:	b103      	cbz	r3, 801720a <_read_r+0x1e>
 8017208:	6023      	str	r3, [r4, #0]
 801720a:	bd38      	pop	{r3, r4, r5, pc}
 801720c:	20012608 	.word	0x20012608

08017210 <cos>:
 8017210:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017212:	ec53 2b10 	vmov	r2, r3, d0
 8017216:	4826      	ldr	r0, [pc, #152]	; (80172b0 <cos+0xa0>)
 8017218:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801721c:	4281      	cmp	r1, r0
 801721e:	dc06      	bgt.n	801722e <cos+0x1e>
 8017220:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80172a8 <cos+0x98>
 8017224:	b005      	add	sp, #20
 8017226:	f85d eb04 	ldr.w	lr, [sp], #4
 801722a:	f000 baa9 	b.w	8017780 <__kernel_cos>
 801722e:	4821      	ldr	r0, [pc, #132]	; (80172b4 <cos+0xa4>)
 8017230:	4281      	cmp	r1, r0
 8017232:	dd09      	ble.n	8017248 <cos+0x38>
 8017234:	ee10 0a10 	vmov	r0, s0
 8017238:	4619      	mov	r1, r3
 801723a:	f7e9 f83d 	bl	80002b8 <__aeabi_dsub>
 801723e:	ec41 0b10 	vmov	d0, r0, r1
 8017242:	b005      	add	sp, #20
 8017244:	f85d fb04 	ldr.w	pc, [sp], #4
 8017248:	4668      	mov	r0, sp
 801724a:	f000 f88d 	bl	8017368 <__ieee754_rem_pio2>
 801724e:	f000 0003 	and.w	r0, r0, #3
 8017252:	2801      	cmp	r0, #1
 8017254:	d00b      	beq.n	801726e <cos+0x5e>
 8017256:	2802      	cmp	r0, #2
 8017258:	d016      	beq.n	8017288 <cos+0x78>
 801725a:	b9e0      	cbnz	r0, 8017296 <cos+0x86>
 801725c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017260:	ed9d 0b00 	vldr	d0, [sp]
 8017264:	f000 fa8c 	bl	8017780 <__kernel_cos>
 8017268:	ec51 0b10 	vmov	r0, r1, d0
 801726c:	e7e7      	b.n	801723e <cos+0x2e>
 801726e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017272:	ed9d 0b00 	vldr	d0, [sp]
 8017276:	f000 fe9b 	bl	8017fb0 <__kernel_sin>
 801727a:	ec53 2b10 	vmov	r2, r3, d0
 801727e:	ee10 0a10 	vmov	r0, s0
 8017282:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8017286:	e7da      	b.n	801723e <cos+0x2e>
 8017288:	ed9d 1b02 	vldr	d1, [sp, #8]
 801728c:	ed9d 0b00 	vldr	d0, [sp]
 8017290:	f000 fa76 	bl	8017780 <__kernel_cos>
 8017294:	e7f1      	b.n	801727a <cos+0x6a>
 8017296:	ed9d 1b02 	vldr	d1, [sp, #8]
 801729a:	ed9d 0b00 	vldr	d0, [sp]
 801729e:	2001      	movs	r0, #1
 80172a0:	f000 fe86 	bl	8017fb0 <__kernel_sin>
 80172a4:	e7e0      	b.n	8017268 <cos+0x58>
 80172a6:	bf00      	nop
	...
 80172b0:	3fe921fb 	.word	0x3fe921fb
 80172b4:	7fefffff 	.word	0x7fefffff

080172b8 <sin>:
 80172b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80172ba:	ec53 2b10 	vmov	r2, r3, d0
 80172be:	4828      	ldr	r0, [pc, #160]	; (8017360 <sin+0xa8>)
 80172c0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80172c4:	4281      	cmp	r1, r0
 80172c6:	dc07      	bgt.n	80172d8 <sin+0x20>
 80172c8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8017358 <sin+0xa0>
 80172cc:	2000      	movs	r0, #0
 80172ce:	b005      	add	sp, #20
 80172d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80172d4:	f000 be6c 	b.w	8017fb0 <__kernel_sin>
 80172d8:	4822      	ldr	r0, [pc, #136]	; (8017364 <sin+0xac>)
 80172da:	4281      	cmp	r1, r0
 80172dc:	dd09      	ble.n	80172f2 <sin+0x3a>
 80172de:	ee10 0a10 	vmov	r0, s0
 80172e2:	4619      	mov	r1, r3
 80172e4:	f7e8 ffe8 	bl	80002b8 <__aeabi_dsub>
 80172e8:	ec41 0b10 	vmov	d0, r0, r1
 80172ec:	b005      	add	sp, #20
 80172ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80172f2:	4668      	mov	r0, sp
 80172f4:	f000 f838 	bl	8017368 <__ieee754_rem_pio2>
 80172f8:	f000 0003 	and.w	r0, r0, #3
 80172fc:	2801      	cmp	r0, #1
 80172fe:	d00c      	beq.n	801731a <sin+0x62>
 8017300:	2802      	cmp	r0, #2
 8017302:	d011      	beq.n	8017328 <sin+0x70>
 8017304:	b9f0      	cbnz	r0, 8017344 <sin+0x8c>
 8017306:	ed9d 1b02 	vldr	d1, [sp, #8]
 801730a:	ed9d 0b00 	vldr	d0, [sp]
 801730e:	2001      	movs	r0, #1
 8017310:	f000 fe4e 	bl	8017fb0 <__kernel_sin>
 8017314:	ec51 0b10 	vmov	r0, r1, d0
 8017318:	e7e6      	b.n	80172e8 <sin+0x30>
 801731a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801731e:	ed9d 0b00 	vldr	d0, [sp]
 8017322:	f000 fa2d 	bl	8017780 <__kernel_cos>
 8017326:	e7f5      	b.n	8017314 <sin+0x5c>
 8017328:	ed9d 1b02 	vldr	d1, [sp, #8]
 801732c:	ed9d 0b00 	vldr	d0, [sp]
 8017330:	2001      	movs	r0, #1
 8017332:	f000 fe3d 	bl	8017fb0 <__kernel_sin>
 8017336:	ec53 2b10 	vmov	r2, r3, d0
 801733a:	ee10 0a10 	vmov	r0, s0
 801733e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8017342:	e7d1      	b.n	80172e8 <sin+0x30>
 8017344:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017348:	ed9d 0b00 	vldr	d0, [sp]
 801734c:	f000 fa18 	bl	8017780 <__kernel_cos>
 8017350:	e7f1      	b.n	8017336 <sin+0x7e>
 8017352:	bf00      	nop
 8017354:	f3af 8000 	nop.w
	...
 8017360:	3fe921fb 	.word	0x3fe921fb
 8017364:	7fefffff 	.word	0x7fefffff

08017368 <__ieee754_rem_pio2>:
 8017368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801736c:	ed2d 8b02 	vpush	{d8}
 8017370:	ec55 4b10 	vmov	r4, r5, d0
 8017374:	4bca      	ldr	r3, [pc, #808]	; (80176a0 <__ieee754_rem_pio2+0x338>)
 8017376:	b08b      	sub	sp, #44	; 0x2c
 8017378:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801737c:	4598      	cmp	r8, r3
 801737e:	4682      	mov	sl, r0
 8017380:	9502      	str	r5, [sp, #8]
 8017382:	dc08      	bgt.n	8017396 <__ieee754_rem_pio2+0x2e>
 8017384:	2200      	movs	r2, #0
 8017386:	2300      	movs	r3, #0
 8017388:	ed80 0b00 	vstr	d0, [r0]
 801738c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8017390:	f04f 0b00 	mov.w	fp, #0
 8017394:	e028      	b.n	80173e8 <__ieee754_rem_pio2+0x80>
 8017396:	4bc3      	ldr	r3, [pc, #780]	; (80176a4 <__ieee754_rem_pio2+0x33c>)
 8017398:	4598      	cmp	r8, r3
 801739a:	dc78      	bgt.n	801748e <__ieee754_rem_pio2+0x126>
 801739c:	9b02      	ldr	r3, [sp, #8]
 801739e:	4ec2      	ldr	r6, [pc, #776]	; (80176a8 <__ieee754_rem_pio2+0x340>)
 80173a0:	2b00      	cmp	r3, #0
 80173a2:	ee10 0a10 	vmov	r0, s0
 80173a6:	a3b0      	add	r3, pc, #704	; (adr r3, 8017668 <__ieee754_rem_pio2+0x300>)
 80173a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173ac:	4629      	mov	r1, r5
 80173ae:	dd39      	ble.n	8017424 <__ieee754_rem_pio2+0xbc>
 80173b0:	f7e8 ff82 	bl	80002b8 <__aeabi_dsub>
 80173b4:	45b0      	cmp	r8, r6
 80173b6:	4604      	mov	r4, r0
 80173b8:	460d      	mov	r5, r1
 80173ba:	d01b      	beq.n	80173f4 <__ieee754_rem_pio2+0x8c>
 80173bc:	a3ac      	add	r3, pc, #688	; (adr r3, 8017670 <__ieee754_rem_pio2+0x308>)
 80173be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173c2:	f7e8 ff79 	bl	80002b8 <__aeabi_dsub>
 80173c6:	4602      	mov	r2, r0
 80173c8:	460b      	mov	r3, r1
 80173ca:	e9ca 2300 	strd	r2, r3, [sl]
 80173ce:	4620      	mov	r0, r4
 80173d0:	4629      	mov	r1, r5
 80173d2:	f7e8 ff71 	bl	80002b8 <__aeabi_dsub>
 80173d6:	a3a6      	add	r3, pc, #664	; (adr r3, 8017670 <__ieee754_rem_pio2+0x308>)
 80173d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173dc:	f7e8 ff6c 	bl	80002b8 <__aeabi_dsub>
 80173e0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80173e4:	f04f 0b01 	mov.w	fp, #1
 80173e8:	4658      	mov	r0, fp
 80173ea:	b00b      	add	sp, #44	; 0x2c
 80173ec:	ecbd 8b02 	vpop	{d8}
 80173f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80173f4:	a3a0      	add	r3, pc, #640	; (adr r3, 8017678 <__ieee754_rem_pio2+0x310>)
 80173f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173fa:	f7e8 ff5d 	bl	80002b8 <__aeabi_dsub>
 80173fe:	a3a0      	add	r3, pc, #640	; (adr r3, 8017680 <__ieee754_rem_pio2+0x318>)
 8017400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017404:	4604      	mov	r4, r0
 8017406:	460d      	mov	r5, r1
 8017408:	f7e8 ff56 	bl	80002b8 <__aeabi_dsub>
 801740c:	4602      	mov	r2, r0
 801740e:	460b      	mov	r3, r1
 8017410:	e9ca 2300 	strd	r2, r3, [sl]
 8017414:	4620      	mov	r0, r4
 8017416:	4629      	mov	r1, r5
 8017418:	f7e8 ff4e 	bl	80002b8 <__aeabi_dsub>
 801741c:	a398      	add	r3, pc, #608	; (adr r3, 8017680 <__ieee754_rem_pio2+0x318>)
 801741e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017422:	e7db      	b.n	80173dc <__ieee754_rem_pio2+0x74>
 8017424:	f7e8 ff4a 	bl	80002bc <__adddf3>
 8017428:	45b0      	cmp	r8, r6
 801742a:	4604      	mov	r4, r0
 801742c:	460d      	mov	r5, r1
 801742e:	d016      	beq.n	801745e <__ieee754_rem_pio2+0xf6>
 8017430:	a38f      	add	r3, pc, #572	; (adr r3, 8017670 <__ieee754_rem_pio2+0x308>)
 8017432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017436:	f7e8 ff41 	bl	80002bc <__adddf3>
 801743a:	4602      	mov	r2, r0
 801743c:	460b      	mov	r3, r1
 801743e:	e9ca 2300 	strd	r2, r3, [sl]
 8017442:	4620      	mov	r0, r4
 8017444:	4629      	mov	r1, r5
 8017446:	f7e8 ff37 	bl	80002b8 <__aeabi_dsub>
 801744a:	a389      	add	r3, pc, #548	; (adr r3, 8017670 <__ieee754_rem_pio2+0x308>)
 801744c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017450:	f7e8 ff34 	bl	80002bc <__adddf3>
 8017454:	f04f 3bff 	mov.w	fp, #4294967295
 8017458:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801745c:	e7c4      	b.n	80173e8 <__ieee754_rem_pio2+0x80>
 801745e:	a386      	add	r3, pc, #536	; (adr r3, 8017678 <__ieee754_rem_pio2+0x310>)
 8017460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017464:	f7e8 ff2a 	bl	80002bc <__adddf3>
 8017468:	a385      	add	r3, pc, #532	; (adr r3, 8017680 <__ieee754_rem_pio2+0x318>)
 801746a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801746e:	4604      	mov	r4, r0
 8017470:	460d      	mov	r5, r1
 8017472:	f7e8 ff23 	bl	80002bc <__adddf3>
 8017476:	4602      	mov	r2, r0
 8017478:	460b      	mov	r3, r1
 801747a:	e9ca 2300 	strd	r2, r3, [sl]
 801747e:	4620      	mov	r0, r4
 8017480:	4629      	mov	r1, r5
 8017482:	f7e8 ff19 	bl	80002b8 <__aeabi_dsub>
 8017486:	a37e      	add	r3, pc, #504	; (adr r3, 8017680 <__ieee754_rem_pio2+0x318>)
 8017488:	e9d3 2300 	ldrd	r2, r3, [r3]
 801748c:	e7e0      	b.n	8017450 <__ieee754_rem_pio2+0xe8>
 801748e:	4b87      	ldr	r3, [pc, #540]	; (80176ac <__ieee754_rem_pio2+0x344>)
 8017490:	4598      	cmp	r8, r3
 8017492:	f300 80d9 	bgt.w	8017648 <__ieee754_rem_pio2+0x2e0>
 8017496:	f000 fe49 	bl	801812c <fabs>
 801749a:	ec55 4b10 	vmov	r4, r5, d0
 801749e:	ee10 0a10 	vmov	r0, s0
 80174a2:	a379      	add	r3, pc, #484	; (adr r3, 8017688 <__ieee754_rem_pio2+0x320>)
 80174a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174a8:	4629      	mov	r1, r5
 80174aa:	f7e9 f8bd 	bl	8000628 <__aeabi_dmul>
 80174ae:	4b80      	ldr	r3, [pc, #512]	; (80176b0 <__ieee754_rem_pio2+0x348>)
 80174b0:	2200      	movs	r2, #0
 80174b2:	f7e8 ff03 	bl	80002bc <__adddf3>
 80174b6:	f7e9 fb67 	bl	8000b88 <__aeabi_d2iz>
 80174ba:	4683      	mov	fp, r0
 80174bc:	f7e9 f84a 	bl	8000554 <__aeabi_i2d>
 80174c0:	4602      	mov	r2, r0
 80174c2:	460b      	mov	r3, r1
 80174c4:	ec43 2b18 	vmov	d8, r2, r3
 80174c8:	a367      	add	r3, pc, #412	; (adr r3, 8017668 <__ieee754_rem_pio2+0x300>)
 80174ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174ce:	f7e9 f8ab 	bl	8000628 <__aeabi_dmul>
 80174d2:	4602      	mov	r2, r0
 80174d4:	460b      	mov	r3, r1
 80174d6:	4620      	mov	r0, r4
 80174d8:	4629      	mov	r1, r5
 80174da:	f7e8 feed 	bl	80002b8 <__aeabi_dsub>
 80174de:	a364      	add	r3, pc, #400	; (adr r3, 8017670 <__ieee754_rem_pio2+0x308>)
 80174e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174e4:	4606      	mov	r6, r0
 80174e6:	460f      	mov	r7, r1
 80174e8:	ec51 0b18 	vmov	r0, r1, d8
 80174ec:	f7e9 f89c 	bl	8000628 <__aeabi_dmul>
 80174f0:	f1bb 0f1f 	cmp.w	fp, #31
 80174f4:	4604      	mov	r4, r0
 80174f6:	460d      	mov	r5, r1
 80174f8:	dc0d      	bgt.n	8017516 <__ieee754_rem_pio2+0x1ae>
 80174fa:	4b6e      	ldr	r3, [pc, #440]	; (80176b4 <__ieee754_rem_pio2+0x34c>)
 80174fc:	f10b 32ff 	add.w	r2, fp, #4294967295
 8017500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017504:	4543      	cmp	r3, r8
 8017506:	d006      	beq.n	8017516 <__ieee754_rem_pio2+0x1ae>
 8017508:	4622      	mov	r2, r4
 801750a:	462b      	mov	r3, r5
 801750c:	4630      	mov	r0, r6
 801750e:	4639      	mov	r1, r7
 8017510:	f7e8 fed2 	bl	80002b8 <__aeabi_dsub>
 8017514:	e00f      	b.n	8017536 <__ieee754_rem_pio2+0x1ce>
 8017516:	462b      	mov	r3, r5
 8017518:	4622      	mov	r2, r4
 801751a:	4630      	mov	r0, r6
 801751c:	4639      	mov	r1, r7
 801751e:	f7e8 fecb 	bl	80002b8 <__aeabi_dsub>
 8017522:	ea4f 5328 	mov.w	r3, r8, asr #20
 8017526:	9303      	str	r3, [sp, #12]
 8017528:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801752c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8017530:	f1b8 0f10 	cmp.w	r8, #16
 8017534:	dc02      	bgt.n	801753c <__ieee754_rem_pio2+0x1d4>
 8017536:	e9ca 0100 	strd	r0, r1, [sl]
 801753a:	e039      	b.n	80175b0 <__ieee754_rem_pio2+0x248>
 801753c:	a34e      	add	r3, pc, #312	; (adr r3, 8017678 <__ieee754_rem_pio2+0x310>)
 801753e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017542:	ec51 0b18 	vmov	r0, r1, d8
 8017546:	f7e9 f86f 	bl	8000628 <__aeabi_dmul>
 801754a:	4604      	mov	r4, r0
 801754c:	460d      	mov	r5, r1
 801754e:	4602      	mov	r2, r0
 8017550:	460b      	mov	r3, r1
 8017552:	4630      	mov	r0, r6
 8017554:	4639      	mov	r1, r7
 8017556:	f7e8 feaf 	bl	80002b8 <__aeabi_dsub>
 801755a:	4602      	mov	r2, r0
 801755c:	460b      	mov	r3, r1
 801755e:	4680      	mov	r8, r0
 8017560:	4689      	mov	r9, r1
 8017562:	4630      	mov	r0, r6
 8017564:	4639      	mov	r1, r7
 8017566:	f7e8 fea7 	bl	80002b8 <__aeabi_dsub>
 801756a:	4622      	mov	r2, r4
 801756c:	462b      	mov	r3, r5
 801756e:	f7e8 fea3 	bl	80002b8 <__aeabi_dsub>
 8017572:	a343      	add	r3, pc, #268	; (adr r3, 8017680 <__ieee754_rem_pio2+0x318>)
 8017574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017578:	4604      	mov	r4, r0
 801757a:	460d      	mov	r5, r1
 801757c:	ec51 0b18 	vmov	r0, r1, d8
 8017580:	f7e9 f852 	bl	8000628 <__aeabi_dmul>
 8017584:	4622      	mov	r2, r4
 8017586:	462b      	mov	r3, r5
 8017588:	f7e8 fe96 	bl	80002b8 <__aeabi_dsub>
 801758c:	4602      	mov	r2, r0
 801758e:	460b      	mov	r3, r1
 8017590:	4604      	mov	r4, r0
 8017592:	460d      	mov	r5, r1
 8017594:	4640      	mov	r0, r8
 8017596:	4649      	mov	r1, r9
 8017598:	f7e8 fe8e 	bl	80002b8 <__aeabi_dsub>
 801759c:	9a03      	ldr	r2, [sp, #12]
 801759e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80175a2:	1ad3      	subs	r3, r2, r3
 80175a4:	2b31      	cmp	r3, #49	; 0x31
 80175a6:	dc24      	bgt.n	80175f2 <__ieee754_rem_pio2+0x28a>
 80175a8:	e9ca 0100 	strd	r0, r1, [sl]
 80175ac:	4646      	mov	r6, r8
 80175ae:	464f      	mov	r7, r9
 80175b0:	e9da 8900 	ldrd	r8, r9, [sl]
 80175b4:	4630      	mov	r0, r6
 80175b6:	4642      	mov	r2, r8
 80175b8:	464b      	mov	r3, r9
 80175ba:	4639      	mov	r1, r7
 80175bc:	f7e8 fe7c 	bl	80002b8 <__aeabi_dsub>
 80175c0:	462b      	mov	r3, r5
 80175c2:	4622      	mov	r2, r4
 80175c4:	f7e8 fe78 	bl	80002b8 <__aeabi_dsub>
 80175c8:	9b02      	ldr	r3, [sp, #8]
 80175ca:	2b00      	cmp	r3, #0
 80175cc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80175d0:	f6bf af0a 	bge.w	80173e8 <__ieee754_rem_pio2+0x80>
 80175d4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80175d8:	f8ca 3004 	str.w	r3, [sl, #4]
 80175dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80175e0:	f8ca 8000 	str.w	r8, [sl]
 80175e4:	f8ca 0008 	str.w	r0, [sl, #8]
 80175e8:	f8ca 300c 	str.w	r3, [sl, #12]
 80175ec:	f1cb 0b00 	rsb	fp, fp, #0
 80175f0:	e6fa      	b.n	80173e8 <__ieee754_rem_pio2+0x80>
 80175f2:	a327      	add	r3, pc, #156	; (adr r3, 8017690 <__ieee754_rem_pio2+0x328>)
 80175f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175f8:	ec51 0b18 	vmov	r0, r1, d8
 80175fc:	f7e9 f814 	bl	8000628 <__aeabi_dmul>
 8017600:	4604      	mov	r4, r0
 8017602:	460d      	mov	r5, r1
 8017604:	4602      	mov	r2, r0
 8017606:	460b      	mov	r3, r1
 8017608:	4640      	mov	r0, r8
 801760a:	4649      	mov	r1, r9
 801760c:	f7e8 fe54 	bl	80002b8 <__aeabi_dsub>
 8017610:	4602      	mov	r2, r0
 8017612:	460b      	mov	r3, r1
 8017614:	4606      	mov	r6, r0
 8017616:	460f      	mov	r7, r1
 8017618:	4640      	mov	r0, r8
 801761a:	4649      	mov	r1, r9
 801761c:	f7e8 fe4c 	bl	80002b8 <__aeabi_dsub>
 8017620:	4622      	mov	r2, r4
 8017622:	462b      	mov	r3, r5
 8017624:	f7e8 fe48 	bl	80002b8 <__aeabi_dsub>
 8017628:	a31b      	add	r3, pc, #108	; (adr r3, 8017698 <__ieee754_rem_pio2+0x330>)
 801762a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801762e:	4604      	mov	r4, r0
 8017630:	460d      	mov	r5, r1
 8017632:	ec51 0b18 	vmov	r0, r1, d8
 8017636:	f7e8 fff7 	bl	8000628 <__aeabi_dmul>
 801763a:	4622      	mov	r2, r4
 801763c:	462b      	mov	r3, r5
 801763e:	f7e8 fe3b 	bl	80002b8 <__aeabi_dsub>
 8017642:	4604      	mov	r4, r0
 8017644:	460d      	mov	r5, r1
 8017646:	e75f      	b.n	8017508 <__ieee754_rem_pio2+0x1a0>
 8017648:	4b1b      	ldr	r3, [pc, #108]	; (80176b8 <__ieee754_rem_pio2+0x350>)
 801764a:	4598      	cmp	r8, r3
 801764c:	dd36      	ble.n	80176bc <__ieee754_rem_pio2+0x354>
 801764e:	ee10 2a10 	vmov	r2, s0
 8017652:	462b      	mov	r3, r5
 8017654:	4620      	mov	r0, r4
 8017656:	4629      	mov	r1, r5
 8017658:	f7e8 fe2e 	bl	80002b8 <__aeabi_dsub>
 801765c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8017660:	e9ca 0100 	strd	r0, r1, [sl]
 8017664:	e694      	b.n	8017390 <__ieee754_rem_pio2+0x28>
 8017666:	bf00      	nop
 8017668:	54400000 	.word	0x54400000
 801766c:	3ff921fb 	.word	0x3ff921fb
 8017670:	1a626331 	.word	0x1a626331
 8017674:	3dd0b461 	.word	0x3dd0b461
 8017678:	1a600000 	.word	0x1a600000
 801767c:	3dd0b461 	.word	0x3dd0b461
 8017680:	2e037073 	.word	0x2e037073
 8017684:	3ba3198a 	.word	0x3ba3198a
 8017688:	6dc9c883 	.word	0x6dc9c883
 801768c:	3fe45f30 	.word	0x3fe45f30
 8017690:	2e000000 	.word	0x2e000000
 8017694:	3ba3198a 	.word	0x3ba3198a
 8017698:	252049c1 	.word	0x252049c1
 801769c:	397b839a 	.word	0x397b839a
 80176a0:	3fe921fb 	.word	0x3fe921fb
 80176a4:	4002d97b 	.word	0x4002d97b
 80176a8:	3ff921fb 	.word	0x3ff921fb
 80176ac:	413921fb 	.word	0x413921fb
 80176b0:	3fe00000 	.word	0x3fe00000
 80176b4:	08019024 	.word	0x08019024
 80176b8:	7fefffff 	.word	0x7fefffff
 80176bc:	ea4f 5428 	mov.w	r4, r8, asr #20
 80176c0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80176c4:	ee10 0a10 	vmov	r0, s0
 80176c8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80176cc:	ee10 6a10 	vmov	r6, s0
 80176d0:	460f      	mov	r7, r1
 80176d2:	f7e9 fa59 	bl	8000b88 <__aeabi_d2iz>
 80176d6:	f7e8 ff3d 	bl	8000554 <__aeabi_i2d>
 80176da:	4602      	mov	r2, r0
 80176dc:	460b      	mov	r3, r1
 80176de:	4630      	mov	r0, r6
 80176e0:	4639      	mov	r1, r7
 80176e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80176e6:	f7e8 fde7 	bl	80002b8 <__aeabi_dsub>
 80176ea:	4b23      	ldr	r3, [pc, #140]	; (8017778 <__ieee754_rem_pio2+0x410>)
 80176ec:	2200      	movs	r2, #0
 80176ee:	f7e8 ff9b 	bl	8000628 <__aeabi_dmul>
 80176f2:	460f      	mov	r7, r1
 80176f4:	4606      	mov	r6, r0
 80176f6:	f7e9 fa47 	bl	8000b88 <__aeabi_d2iz>
 80176fa:	f7e8 ff2b 	bl	8000554 <__aeabi_i2d>
 80176fe:	4602      	mov	r2, r0
 8017700:	460b      	mov	r3, r1
 8017702:	4630      	mov	r0, r6
 8017704:	4639      	mov	r1, r7
 8017706:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801770a:	f7e8 fdd5 	bl	80002b8 <__aeabi_dsub>
 801770e:	4b1a      	ldr	r3, [pc, #104]	; (8017778 <__ieee754_rem_pio2+0x410>)
 8017710:	2200      	movs	r2, #0
 8017712:	f7e8 ff89 	bl	8000628 <__aeabi_dmul>
 8017716:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801771a:	ad04      	add	r5, sp, #16
 801771c:	f04f 0803 	mov.w	r8, #3
 8017720:	46a9      	mov	r9, r5
 8017722:	2600      	movs	r6, #0
 8017724:	2700      	movs	r7, #0
 8017726:	4632      	mov	r2, r6
 8017728:	463b      	mov	r3, r7
 801772a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 801772e:	46c3      	mov	fp, r8
 8017730:	3d08      	subs	r5, #8
 8017732:	f108 38ff 	add.w	r8, r8, #4294967295
 8017736:	f7e9 f9df 	bl	8000af8 <__aeabi_dcmpeq>
 801773a:	2800      	cmp	r0, #0
 801773c:	d1f3      	bne.n	8017726 <__ieee754_rem_pio2+0x3be>
 801773e:	4b0f      	ldr	r3, [pc, #60]	; (801777c <__ieee754_rem_pio2+0x414>)
 8017740:	9301      	str	r3, [sp, #4]
 8017742:	2302      	movs	r3, #2
 8017744:	9300      	str	r3, [sp, #0]
 8017746:	4622      	mov	r2, r4
 8017748:	465b      	mov	r3, fp
 801774a:	4651      	mov	r1, sl
 801774c:	4648      	mov	r0, r9
 801774e:	f000 f8df 	bl	8017910 <__kernel_rem_pio2>
 8017752:	9b02      	ldr	r3, [sp, #8]
 8017754:	2b00      	cmp	r3, #0
 8017756:	4683      	mov	fp, r0
 8017758:	f6bf ae46 	bge.w	80173e8 <__ieee754_rem_pio2+0x80>
 801775c:	e9da 2100 	ldrd	r2, r1, [sl]
 8017760:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017764:	e9ca 2300 	strd	r2, r3, [sl]
 8017768:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 801776c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017770:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8017774:	e73a      	b.n	80175ec <__ieee754_rem_pio2+0x284>
 8017776:	bf00      	nop
 8017778:	41700000 	.word	0x41700000
 801777c:	080190a4 	.word	0x080190a4

08017780 <__kernel_cos>:
 8017780:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017784:	ec57 6b10 	vmov	r6, r7, d0
 8017788:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801778c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8017790:	ed8d 1b00 	vstr	d1, [sp]
 8017794:	da07      	bge.n	80177a6 <__kernel_cos+0x26>
 8017796:	ee10 0a10 	vmov	r0, s0
 801779a:	4639      	mov	r1, r7
 801779c:	f7e9 f9f4 	bl	8000b88 <__aeabi_d2iz>
 80177a0:	2800      	cmp	r0, #0
 80177a2:	f000 8088 	beq.w	80178b6 <__kernel_cos+0x136>
 80177a6:	4632      	mov	r2, r6
 80177a8:	463b      	mov	r3, r7
 80177aa:	4630      	mov	r0, r6
 80177ac:	4639      	mov	r1, r7
 80177ae:	f7e8 ff3b 	bl	8000628 <__aeabi_dmul>
 80177b2:	4b51      	ldr	r3, [pc, #324]	; (80178f8 <__kernel_cos+0x178>)
 80177b4:	2200      	movs	r2, #0
 80177b6:	4604      	mov	r4, r0
 80177b8:	460d      	mov	r5, r1
 80177ba:	f7e8 ff35 	bl	8000628 <__aeabi_dmul>
 80177be:	a340      	add	r3, pc, #256	; (adr r3, 80178c0 <__kernel_cos+0x140>)
 80177c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177c4:	4682      	mov	sl, r0
 80177c6:	468b      	mov	fp, r1
 80177c8:	4620      	mov	r0, r4
 80177ca:	4629      	mov	r1, r5
 80177cc:	f7e8 ff2c 	bl	8000628 <__aeabi_dmul>
 80177d0:	a33d      	add	r3, pc, #244	; (adr r3, 80178c8 <__kernel_cos+0x148>)
 80177d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177d6:	f7e8 fd71 	bl	80002bc <__adddf3>
 80177da:	4622      	mov	r2, r4
 80177dc:	462b      	mov	r3, r5
 80177de:	f7e8 ff23 	bl	8000628 <__aeabi_dmul>
 80177e2:	a33b      	add	r3, pc, #236	; (adr r3, 80178d0 <__kernel_cos+0x150>)
 80177e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177e8:	f7e8 fd66 	bl	80002b8 <__aeabi_dsub>
 80177ec:	4622      	mov	r2, r4
 80177ee:	462b      	mov	r3, r5
 80177f0:	f7e8 ff1a 	bl	8000628 <__aeabi_dmul>
 80177f4:	a338      	add	r3, pc, #224	; (adr r3, 80178d8 <__kernel_cos+0x158>)
 80177f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177fa:	f7e8 fd5f 	bl	80002bc <__adddf3>
 80177fe:	4622      	mov	r2, r4
 8017800:	462b      	mov	r3, r5
 8017802:	f7e8 ff11 	bl	8000628 <__aeabi_dmul>
 8017806:	a336      	add	r3, pc, #216	; (adr r3, 80178e0 <__kernel_cos+0x160>)
 8017808:	e9d3 2300 	ldrd	r2, r3, [r3]
 801780c:	f7e8 fd54 	bl	80002b8 <__aeabi_dsub>
 8017810:	4622      	mov	r2, r4
 8017812:	462b      	mov	r3, r5
 8017814:	f7e8 ff08 	bl	8000628 <__aeabi_dmul>
 8017818:	a333      	add	r3, pc, #204	; (adr r3, 80178e8 <__kernel_cos+0x168>)
 801781a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801781e:	f7e8 fd4d 	bl	80002bc <__adddf3>
 8017822:	4622      	mov	r2, r4
 8017824:	462b      	mov	r3, r5
 8017826:	f7e8 feff 	bl	8000628 <__aeabi_dmul>
 801782a:	4622      	mov	r2, r4
 801782c:	462b      	mov	r3, r5
 801782e:	f7e8 fefb 	bl	8000628 <__aeabi_dmul>
 8017832:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017836:	4604      	mov	r4, r0
 8017838:	460d      	mov	r5, r1
 801783a:	4630      	mov	r0, r6
 801783c:	4639      	mov	r1, r7
 801783e:	f7e8 fef3 	bl	8000628 <__aeabi_dmul>
 8017842:	460b      	mov	r3, r1
 8017844:	4602      	mov	r2, r0
 8017846:	4629      	mov	r1, r5
 8017848:	4620      	mov	r0, r4
 801784a:	f7e8 fd35 	bl	80002b8 <__aeabi_dsub>
 801784e:	4b2b      	ldr	r3, [pc, #172]	; (80178fc <__kernel_cos+0x17c>)
 8017850:	4598      	cmp	r8, r3
 8017852:	4606      	mov	r6, r0
 8017854:	460f      	mov	r7, r1
 8017856:	dc10      	bgt.n	801787a <__kernel_cos+0xfa>
 8017858:	4602      	mov	r2, r0
 801785a:	460b      	mov	r3, r1
 801785c:	4650      	mov	r0, sl
 801785e:	4659      	mov	r1, fp
 8017860:	f7e8 fd2a 	bl	80002b8 <__aeabi_dsub>
 8017864:	460b      	mov	r3, r1
 8017866:	4926      	ldr	r1, [pc, #152]	; (8017900 <__kernel_cos+0x180>)
 8017868:	4602      	mov	r2, r0
 801786a:	2000      	movs	r0, #0
 801786c:	f7e8 fd24 	bl	80002b8 <__aeabi_dsub>
 8017870:	ec41 0b10 	vmov	d0, r0, r1
 8017874:	b003      	add	sp, #12
 8017876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801787a:	4b22      	ldr	r3, [pc, #136]	; (8017904 <__kernel_cos+0x184>)
 801787c:	4920      	ldr	r1, [pc, #128]	; (8017900 <__kernel_cos+0x180>)
 801787e:	4598      	cmp	r8, r3
 8017880:	bfcc      	ite	gt
 8017882:	4d21      	ldrgt	r5, [pc, #132]	; (8017908 <__kernel_cos+0x188>)
 8017884:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8017888:	2400      	movs	r4, #0
 801788a:	4622      	mov	r2, r4
 801788c:	462b      	mov	r3, r5
 801788e:	2000      	movs	r0, #0
 8017890:	f7e8 fd12 	bl	80002b8 <__aeabi_dsub>
 8017894:	4622      	mov	r2, r4
 8017896:	4680      	mov	r8, r0
 8017898:	4689      	mov	r9, r1
 801789a:	462b      	mov	r3, r5
 801789c:	4650      	mov	r0, sl
 801789e:	4659      	mov	r1, fp
 80178a0:	f7e8 fd0a 	bl	80002b8 <__aeabi_dsub>
 80178a4:	4632      	mov	r2, r6
 80178a6:	463b      	mov	r3, r7
 80178a8:	f7e8 fd06 	bl	80002b8 <__aeabi_dsub>
 80178ac:	4602      	mov	r2, r0
 80178ae:	460b      	mov	r3, r1
 80178b0:	4640      	mov	r0, r8
 80178b2:	4649      	mov	r1, r9
 80178b4:	e7da      	b.n	801786c <__kernel_cos+0xec>
 80178b6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80178f0 <__kernel_cos+0x170>
 80178ba:	e7db      	b.n	8017874 <__kernel_cos+0xf4>
 80178bc:	f3af 8000 	nop.w
 80178c0:	be8838d4 	.word	0xbe8838d4
 80178c4:	bda8fae9 	.word	0xbda8fae9
 80178c8:	bdb4b1c4 	.word	0xbdb4b1c4
 80178cc:	3e21ee9e 	.word	0x3e21ee9e
 80178d0:	809c52ad 	.word	0x809c52ad
 80178d4:	3e927e4f 	.word	0x3e927e4f
 80178d8:	19cb1590 	.word	0x19cb1590
 80178dc:	3efa01a0 	.word	0x3efa01a0
 80178e0:	16c15177 	.word	0x16c15177
 80178e4:	3f56c16c 	.word	0x3f56c16c
 80178e8:	5555554c 	.word	0x5555554c
 80178ec:	3fa55555 	.word	0x3fa55555
 80178f0:	00000000 	.word	0x00000000
 80178f4:	3ff00000 	.word	0x3ff00000
 80178f8:	3fe00000 	.word	0x3fe00000
 80178fc:	3fd33332 	.word	0x3fd33332
 8017900:	3ff00000 	.word	0x3ff00000
 8017904:	3fe90000 	.word	0x3fe90000
 8017908:	3fd20000 	.word	0x3fd20000
 801790c:	00000000 	.word	0x00000000

08017910 <__kernel_rem_pio2>:
 8017910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017914:	ed2d 8b02 	vpush	{d8}
 8017918:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801791c:	f112 0f14 	cmn.w	r2, #20
 8017920:	9308      	str	r3, [sp, #32]
 8017922:	9101      	str	r1, [sp, #4]
 8017924:	4bc4      	ldr	r3, [pc, #784]	; (8017c38 <__kernel_rem_pio2+0x328>)
 8017926:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8017928:	900b      	str	r0, [sp, #44]	; 0x2c
 801792a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801792e:	9302      	str	r3, [sp, #8]
 8017930:	9b08      	ldr	r3, [sp, #32]
 8017932:	f103 33ff 	add.w	r3, r3, #4294967295
 8017936:	bfa8      	it	ge
 8017938:	1ed4      	subge	r4, r2, #3
 801793a:	9306      	str	r3, [sp, #24]
 801793c:	bfb2      	itee	lt
 801793e:	2400      	movlt	r4, #0
 8017940:	2318      	movge	r3, #24
 8017942:	fb94 f4f3 	sdivge	r4, r4, r3
 8017946:	f06f 0317 	mvn.w	r3, #23
 801794a:	fb04 3303 	mla	r3, r4, r3, r3
 801794e:	eb03 0a02 	add.w	sl, r3, r2
 8017952:	9b02      	ldr	r3, [sp, #8]
 8017954:	9a06      	ldr	r2, [sp, #24]
 8017956:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8017c28 <__kernel_rem_pio2+0x318>
 801795a:	eb03 0802 	add.w	r8, r3, r2
 801795e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8017960:	1aa7      	subs	r7, r4, r2
 8017962:	ae22      	add	r6, sp, #136	; 0x88
 8017964:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8017968:	2500      	movs	r5, #0
 801796a:	4545      	cmp	r5, r8
 801796c:	dd13      	ble.n	8017996 <__kernel_rem_pio2+0x86>
 801796e:	9b08      	ldr	r3, [sp, #32]
 8017970:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8017c28 <__kernel_rem_pio2+0x318>
 8017974:	aa22      	add	r2, sp, #136	; 0x88
 8017976:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801797a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801797e:	f04f 0800 	mov.w	r8, #0
 8017982:	9b02      	ldr	r3, [sp, #8]
 8017984:	4598      	cmp	r8, r3
 8017986:	dc2f      	bgt.n	80179e8 <__kernel_rem_pio2+0xd8>
 8017988:	ed8d 8b04 	vstr	d8, [sp, #16]
 801798c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8017990:	462f      	mov	r7, r5
 8017992:	2600      	movs	r6, #0
 8017994:	e01b      	b.n	80179ce <__kernel_rem_pio2+0xbe>
 8017996:	42ef      	cmn	r7, r5
 8017998:	d407      	bmi.n	80179aa <__kernel_rem_pio2+0x9a>
 801799a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801799e:	f7e8 fdd9 	bl	8000554 <__aeabi_i2d>
 80179a2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80179a6:	3501      	adds	r5, #1
 80179a8:	e7df      	b.n	801796a <__kernel_rem_pio2+0x5a>
 80179aa:	ec51 0b18 	vmov	r0, r1, d8
 80179ae:	e7f8      	b.n	80179a2 <__kernel_rem_pio2+0x92>
 80179b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80179b4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80179b8:	f7e8 fe36 	bl	8000628 <__aeabi_dmul>
 80179bc:	4602      	mov	r2, r0
 80179be:	460b      	mov	r3, r1
 80179c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80179c4:	f7e8 fc7a 	bl	80002bc <__adddf3>
 80179c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80179cc:	3601      	adds	r6, #1
 80179ce:	9b06      	ldr	r3, [sp, #24]
 80179d0:	429e      	cmp	r6, r3
 80179d2:	f1a7 0708 	sub.w	r7, r7, #8
 80179d6:	ddeb      	ble.n	80179b0 <__kernel_rem_pio2+0xa0>
 80179d8:	ed9d 7b04 	vldr	d7, [sp, #16]
 80179dc:	f108 0801 	add.w	r8, r8, #1
 80179e0:	ecab 7b02 	vstmia	fp!, {d7}
 80179e4:	3508      	adds	r5, #8
 80179e6:	e7cc      	b.n	8017982 <__kernel_rem_pio2+0x72>
 80179e8:	9b02      	ldr	r3, [sp, #8]
 80179ea:	aa0e      	add	r2, sp, #56	; 0x38
 80179ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80179f0:	930d      	str	r3, [sp, #52]	; 0x34
 80179f2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80179f4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80179f8:	9c02      	ldr	r4, [sp, #8]
 80179fa:	930c      	str	r3, [sp, #48]	; 0x30
 80179fc:	00e3      	lsls	r3, r4, #3
 80179fe:	930a      	str	r3, [sp, #40]	; 0x28
 8017a00:	ab9a      	add	r3, sp, #616	; 0x268
 8017a02:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8017a06:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8017a0a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8017a0e:	ab72      	add	r3, sp, #456	; 0x1c8
 8017a10:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8017a14:	46c3      	mov	fp, r8
 8017a16:	46a1      	mov	r9, r4
 8017a18:	f1b9 0f00 	cmp.w	r9, #0
 8017a1c:	f1a5 0508 	sub.w	r5, r5, #8
 8017a20:	dc77      	bgt.n	8017b12 <__kernel_rem_pio2+0x202>
 8017a22:	ec47 6b10 	vmov	d0, r6, r7
 8017a26:	4650      	mov	r0, sl
 8017a28:	f000 fc0a 	bl	8018240 <scalbn>
 8017a2c:	ec57 6b10 	vmov	r6, r7, d0
 8017a30:	2200      	movs	r2, #0
 8017a32:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8017a36:	ee10 0a10 	vmov	r0, s0
 8017a3a:	4639      	mov	r1, r7
 8017a3c:	f7e8 fdf4 	bl	8000628 <__aeabi_dmul>
 8017a40:	ec41 0b10 	vmov	d0, r0, r1
 8017a44:	f000 fb7c 	bl	8018140 <floor>
 8017a48:	4b7c      	ldr	r3, [pc, #496]	; (8017c3c <__kernel_rem_pio2+0x32c>)
 8017a4a:	ec51 0b10 	vmov	r0, r1, d0
 8017a4e:	2200      	movs	r2, #0
 8017a50:	f7e8 fdea 	bl	8000628 <__aeabi_dmul>
 8017a54:	4602      	mov	r2, r0
 8017a56:	460b      	mov	r3, r1
 8017a58:	4630      	mov	r0, r6
 8017a5a:	4639      	mov	r1, r7
 8017a5c:	f7e8 fc2c 	bl	80002b8 <__aeabi_dsub>
 8017a60:	460f      	mov	r7, r1
 8017a62:	4606      	mov	r6, r0
 8017a64:	f7e9 f890 	bl	8000b88 <__aeabi_d2iz>
 8017a68:	9004      	str	r0, [sp, #16]
 8017a6a:	f7e8 fd73 	bl	8000554 <__aeabi_i2d>
 8017a6e:	4602      	mov	r2, r0
 8017a70:	460b      	mov	r3, r1
 8017a72:	4630      	mov	r0, r6
 8017a74:	4639      	mov	r1, r7
 8017a76:	f7e8 fc1f 	bl	80002b8 <__aeabi_dsub>
 8017a7a:	f1ba 0f00 	cmp.w	sl, #0
 8017a7e:	4606      	mov	r6, r0
 8017a80:	460f      	mov	r7, r1
 8017a82:	dd6d      	ble.n	8017b60 <__kernel_rem_pio2+0x250>
 8017a84:	1e62      	subs	r2, r4, #1
 8017a86:	ab0e      	add	r3, sp, #56	; 0x38
 8017a88:	9d04      	ldr	r5, [sp, #16]
 8017a8a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8017a8e:	f1ca 0118 	rsb	r1, sl, #24
 8017a92:	fa40 f301 	asr.w	r3, r0, r1
 8017a96:	441d      	add	r5, r3
 8017a98:	408b      	lsls	r3, r1
 8017a9a:	1ac0      	subs	r0, r0, r3
 8017a9c:	ab0e      	add	r3, sp, #56	; 0x38
 8017a9e:	9504      	str	r5, [sp, #16]
 8017aa0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8017aa4:	f1ca 0317 	rsb	r3, sl, #23
 8017aa8:	fa40 fb03 	asr.w	fp, r0, r3
 8017aac:	f1bb 0f00 	cmp.w	fp, #0
 8017ab0:	dd65      	ble.n	8017b7e <__kernel_rem_pio2+0x26e>
 8017ab2:	9b04      	ldr	r3, [sp, #16]
 8017ab4:	2200      	movs	r2, #0
 8017ab6:	3301      	adds	r3, #1
 8017ab8:	9304      	str	r3, [sp, #16]
 8017aba:	4615      	mov	r5, r2
 8017abc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8017ac0:	4294      	cmp	r4, r2
 8017ac2:	f300 809c 	bgt.w	8017bfe <__kernel_rem_pio2+0x2ee>
 8017ac6:	f1ba 0f00 	cmp.w	sl, #0
 8017aca:	dd07      	ble.n	8017adc <__kernel_rem_pio2+0x1cc>
 8017acc:	f1ba 0f01 	cmp.w	sl, #1
 8017ad0:	f000 80c0 	beq.w	8017c54 <__kernel_rem_pio2+0x344>
 8017ad4:	f1ba 0f02 	cmp.w	sl, #2
 8017ad8:	f000 80c6 	beq.w	8017c68 <__kernel_rem_pio2+0x358>
 8017adc:	f1bb 0f02 	cmp.w	fp, #2
 8017ae0:	d14d      	bne.n	8017b7e <__kernel_rem_pio2+0x26e>
 8017ae2:	4632      	mov	r2, r6
 8017ae4:	463b      	mov	r3, r7
 8017ae6:	4956      	ldr	r1, [pc, #344]	; (8017c40 <__kernel_rem_pio2+0x330>)
 8017ae8:	2000      	movs	r0, #0
 8017aea:	f7e8 fbe5 	bl	80002b8 <__aeabi_dsub>
 8017aee:	4606      	mov	r6, r0
 8017af0:	460f      	mov	r7, r1
 8017af2:	2d00      	cmp	r5, #0
 8017af4:	d043      	beq.n	8017b7e <__kernel_rem_pio2+0x26e>
 8017af6:	4650      	mov	r0, sl
 8017af8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8017c30 <__kernel_rem_pio2+0x320>
 8017afc:	f000 fba0 	bl	8018240 <scalbn>
 8017b00:	4630      	mov	r0, r6
 8017b02:	4639      	mov	r1, r7
 8017b04:	ec53 2b10 	vmov	r2, r3, d0
 8017b08:	f7e8 fbd6 	bl	80002b8 <__aeabi_dsub>
 8017b0c:	4606      	mov	r6, r0
 8017b0e:	460f      	mov	r7, r1
 8017b10:	e035      	b.n	8017b7e <__kernel_rem_pio2+0x26e>
 8017b12:	4b4c      	ldr	r3, [pc, #304]	; (8017c44 <__kernel_rem_pio2+0x334>)
 8017b14:	2200      	movs	r2, #0
 8017b16:	4630      	mov	r0, r6
 8017b18:	4639      	mov	r1, r7
 8017b1a:	f7e8 fd85 	bl	8000628 <__aeabi_dmul>
 8017b1e:	f7e9 f833 	bl	8000b88 <__aeabi_d2iz>
 8017b22:	f7e8 fd17 	bl	8000554 <__aeabi_i2d>
 8017b26:	4602      	mov	r2, r0
 8017b28:	460b      	mov	r3, r1
 8017b2a:	ec43 2b18 	vmov	d8, r2, r3
 8017b2e:	4b46      	ldr	r3, [pc, #280]	; (8017c48 <__kernel_rem_pio2+0x338>)
 8017b30:	2200      	movs	r2, #0
 8017b32:	f7e8 fd79 	bl	8000628 <__aeabi_dmul>
 8017b36:	4602      	mov	r2, r0
 8017b38:	460b      	mov	r3, r1
 8017b3a:	4630      	mov	r0, r6
 8017b3c:	4639      	mov	r1, r7
 8017b3e:	f7e8 fbbb 	bl	80002b8 <__aeabi_dsub>
 8017b42:	f7e9 f821 	bl	8000b88 <__aeabi_d2iz>
 8017b46:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017b4a:	f84b 0b04 	str.w	r0, [fp], #4
 8017b4e:	ec51 0b18 	vmov	r0, r1, d8
 8017b52:	f7e8 fbb3 	bl	80002bc <__adddf3>
 8017b56:	f109 39ff 	add.w	r9, r9, #4294967295
 8017b5a:	4606      	mov	r6, r0
 8017b5c:	460f      	mov	r7, r1
 8017b5e:	e75b      	b.n	8017a18 <__kernel_rem_pio2+0x108>
 8017b60:	d106      	bne.n	8017b70 <__kernel_rem_pio2+0x260>
 8017b62:	1e63      	subs	r3, r4, #1
 8017b64:	aa0e      	add	r2, sp, #56	; 0x38
 8017b66:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8017b6a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8017b6e:	e79d      	b.n	8017aac <__kernel_rem_pio2+0x19c>
 8017b70:	4b36      	ldr	r3, [pc, #216]	; (8017c4c <__kernel_rem_pio2+0x33c>)
 8017b72:	2200      	movs	r2, #0
 8017b74:	f7e8 ffde 	bl	8000b34 <__aeabi_dcmpge>
 8017b78:	2800      	cmp	r0, #0
 8017b7a:	d13d      	bne.n	8017bf8 <__kernel_rem_pio2+0x2e8>
 8017b7c:	4683      	mov	fp, r0
 8017b7e:	2200      	movs	r2, #0
 8017b80:	2300      	movs	r3, #0
 8017b82:	4630      	mov	r0, r6
 8017b84:	4639      	mov	r1, r7
 8017b86:	f7e8 ffb7 	bl	8000af8 <__aeabi_dcmpeq>
 8017b8a:	2800      	cmp	r0, #0
 8017b8c:	f000 80c0 	beq.w	8017d10 <__kernel_rem_pio2+0x400>
 8017b90:	1e65      	subs	r5, r4, #1
 8017b92:	462b      	mov	r3, r5
 8017b94:	2200      	movs	r2, #0
 8017b96:	9902      	ldr	r1, [sp, #8]
 8017b98:	428b      	cmp	r3, r1
 8017b9a:	da6c      	bge.n	8017c76 <__kernel_rem_pio2+0x366>
 8017b9c:	2a00      	cmp	r2, #0
 8017b9e:	f000 8089 	beq.w	8017cb4 <__kernel_rem_pio2+0x3a4>
 8017ba2:	ab0e      	add	r3, sp, #56	; 0x38
 8017ba4:	f1aa 0a18 	sub.w	sl, sl, #24
 8017ba8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8017bac:	2b00      	cmp	r3, #0
 8017bae:	f000 80ad 	beq.w	8017d0c <__kernel_rem_pio2+0x3fc>
 8017bb2:	4650      	mov	r0, sl
 8017bb4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8017c30 <__kernel_rem_pio2+0x320>
 8017bb8:	f000 fb42 	bl	8018240 <scalbn>
 8017bbc:	ab9a      	add	r3, sp, #616	; 0x268
 8017bbe:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8017bc2:	ec57 6b10 	vmov	r6, r7, d0
 8017bc6:	00ec      	lsls	r4, r5, #3
 8017bc8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8017bcc:	46aa      	mov	sl, r5
 8017bce:	f1ba 0f00 	cmp.w	sl, #0
 8017bd2:	f280 80d6 	bge.w	8017d82 <__kernel_rem_pio2+0x472>
 8017bd6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8017c28 <__kernel_rem_pio2+0x318>
 8017bda:	462e      	mov	r6, r5
 8017bdc:	2e00      	cmp	r6, #0
 8017bde:	f2c0 8104 	blt.w	8017dea <__kernel_rem_pio2+0x4da>
 8017be2:	ab72      	add	r3, sp, #456	; 0x1c8
 8017be4:	ed8d 8b06 	vstr	d8, [sp, #24]
 8017be8:	f8df a064 	ldr.w	sl, [pc, #100]	; 8017c50 <__kernel_rem_pio2+0x340>
 8017bec:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8017bf0:	f04f 0800 	mov.w	r8, #0
 8017bf4:	1baf      	subs	r7, r5, r6
 8017bf6:	e0ea      	b.n	8017dce <__kernel_rem_pio2+0x4be>
 8017bf8:	f04f 0b02 	mov.w	fp, #2
 8017bfc:	e759      	b.n	8017ab2 <__kernel_rem_pio2+0x1a2>
 8017bfe:	f8d8 3000 	ldr.w	r3, [r8]
 8017c02:	b955      	cbnz	r5, 8017c1a <__kernel_rem_pio2+0x30a>
 8017c04:	b123      	cbz	r3, 8017c10 <__kernel_rem_pio2+0x300>
 8017c06:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8017c0a:	f8c8 3000 	str.w	r3, [r8]
 8017c0e:	2301      	movs	r3, #1
 8017c10:	3201      	adds	r2, #1
 8017c12:	f108 0804 	add.w	r8, r8, #4
 8017c16:	461d      	mov	r5, r3
 8017c18:	e752      	b.n	8017ac0 <__kernel_rem_pio2+0x1b0>
 8017c1a:	1acb      	subs	r3, r1, r3
 8017c1c:	f8c8 3000 	str.w	r3, [r8]
 8017c20:	462b      	mov	r3, r5
 8017c22:	e7f5      	b.n	8017c10 <__kernel_rem_pio2+0x300>
 8017c24:	f3af 8000 	nop.w
	...
 8017c34:	3ff00000 	.word	0x3ff00000
 8017c38:	080191f0 	.word	0x080191f0
 8017c3c:	40200000 	.word	0x40200000
 8017c40:	3ff00000 	.word	0x3ff00000
 8017c44:	3e700000 	.word	0x3e700000
 8017c48:	41700000 	.word	0x41700000
 8017c4c:	3fe00000 	.word	0x3fe00000
 8017c50:	080191b0 	.word	0x080191b0
 8017c54:	1e62      	subs	r2, r4, #1
 8017c56:	ab0e      	add	r3, sp, #56	; 0x38
 8017c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017c5c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8017c60:	a90e      	add	r1, sp, #56	; 0x38
 8017c62:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8017c66:	e739      	b.n	8017adc <__kernel_rem_pio2+0x1cc>
 8017c68:	1e62      	subs	r2, r4, #1
 8017c6a:	ab0e      	add	r3, sp, #56	; 0x38
 8017c6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017c70:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8017c74:	e7f4      	b.n	8017c60 <__kernel_rem_pio2+0x350>
 8017c76:	a90e      	add	r1, sp, #56	; 0x38
 8017c78:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8017c7c:	3b01      	subs	r3, #1
 8017c7e:	430a      	orrs	r2, r1
 8017c80:	e789      	b.n	8017b96 <__kernel_rem_pio2+0x286>
 8017c82:	3301      	adds	r3, #1
 8017c84:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8017c88:	2900      	cmp	r1, #0
 8017c8a:	d0fa      	beq.n	8017c82 <__kernel_rem_pio2+0x372>
 8017c8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017c8e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8017c92:	446a      	add	r2, sp
 8017c94:	3a98      	subs	r2, #152	; 0x98
 8017c96:	920a      	str	r2, [sp, #40]	; 0x28
 8017c98:	9a08      	ldr	r2, [sp, #32]
 8017c9a:	18e3      	adds	r3, r4, r3
 8017c9c:	18a5      	adds	r5, r4, r2
 8017c9e:	aa22      	add	r2, sp, #136	; 0x88
 8017ca0:	f104 0801 	add.w	r8, r4, #1
 8017ca4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8017ca8:	9304      	str	r3, [sp, #16]
 8017caa:	9b04      	ldr	r3, [sp, #16]
 8017cac:	4543      	cmp	r3, r8
 8017cae:	da04      	bge.n	8017cba <__kernel_rem_pio2+0x3aa>
 8017cb0:	461c      	mov	r4, r3
 8017cb2:	e6a3      	b.n	80179fc <__kernel_rem_pio2+0xec>
 8017cb4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017cb6:	2301      	movs	r3, #1
 8017cb8:	e7e4      	b.n	8017c84 <__kernel_rem_pio2+0x374>
 8017cba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017cbc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8017cc0:	f7e8 fc48 	bl	8000554 <__aeabi_i2d>
 8017cc4:	e8e5 0102 	strd	r0, r1, [r5], #8
 8017cc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017cca:	46ab      	mov	fp, r5
 8017ccc:	461c      	mov	r4, r3
 8017cce:	f04f 0900 	mov.w	r9, #0
 8017cd2:	2600      	movs	r6, #0
 8017cd4:	2700      	movs	r7, #0
 8017cd6:	9b06      	ldr	r3, [sp, #24]
 8017cd8:	4599      	cmp	r9, r3
 8017cda:	dd06      	ble.n	8017cea <__kernel_rem_pio2+0x3da>
 8017cdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017cde:	e8e3 6702 	strd	r6, r7, [r3], #8
 8017ce2:	f108 0801 	add.w	r8, r8, #1
 8017ce6:	930a      	str	r3, [sp, #40]	; 0x28
 8017ce8:	e7df      	b.n	8017caa <__kernel_rem_pio2+0x39a>
 8017cea:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8017cee:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8017cf2:	f7e8 fc99 	bl	8000628 <__aeabi_dmul>
 8017cf6:	4602      	mov	r2, r0
 8017cf8:	460b      	mov	r3, r1
 8017cfa:	4630      	mov	r0, r6
 8017cfc:	4639      	mov	r1, r7
 8017cfe:	f7e8 fadd 	bl	80002bc <__adddf3>
 8017d02:	f109 0901 	add.w	r9, r9, #1
 8017d06:	4606      	mov	r6, r0
 8017d08:	460f      	mov	r7, r1
 8017d0a:	e7e4      	b.n	8017cd6 <__kernel_rem_pio2+0x3c6>
 8017d0c:	3d01      	subs	r5, #1
 8017d0e:	e748      	b.n	8017ba2 <__kernel_rem_pio2+0x292>
 8017d10:	ec47 6b10 	vmov	d0, r6, r7
 8017d14:	f1ca 0000 	rsb	r0, sl, #0
 8017d18:	f000 fa92 	bl	8018240 <scalbn>
 8017d1c:	ec57 6b10 	vmov	r6, r7, d0
 8017d20:	4ba0      	ldr	r3, [pc, #640]	; (8017fa4 <__kernel_rem_pio2+0x694>)
 8017d22:	ee10 0a10 	vmov	r0, s0
 8017d26:	2200      	movs	r2, #0
 8017d28:	4639      	mov	r1, r7
 8017d2a:	f7e8 ff03 	bl	8000b34 <__aeabi_dcmpge>
 8017d2e:	b1f8      	cbz	r0, 8017d70 <__kernel_rem_pio2+0x460>
 8017d30:	4b9d      	ldr	r3, [pc, #628]	; (8017fa8 <__kernel_rem_pio2+0x698>)
 8017d32:	2200      	movs	r2, #0
 8017d34:	4630      	mov	r0, r6
 8017d36:	4639      	mov	r1, r7
 8017d38:	f7e8 fc76 	bl	8000628 <__aeabi_dmul>
 8017d3c:	f7e8 ff24 	bl	8000b88 <__aeabi_d2iz>
 8017d40:	4680      	mov	r8, r0
 8017d42:	f7e8 fc07 	bl	8000554 <__aeabi_i2d>
 8017d46:	4b97      	ldr	r3, [pc, #604]	; (8017fa4 <__kernel_rem_pio2+0x694>)
 8017d48:	2200      	movs	r2, #0
 8017d4a:	f7e8 fc6d 	bl	8000628 <__aeabi_dmul>
 8017d4e:	460b      	mov	r3, r1
 8017d50:	4602      	mov	r2, r0
 8017d52:	4639      	mov	r1, r7
 8017d54:	4630      	mov	r0, r6
 8017d56:	f7e8 faaf 	bl	80002b8 <__aeabi_dsub>
 8017d5a:	f7e8 ff15 	bl	8000b88 <__aeabi_d2iz>
 8017d5e:	1c65      	adds	r5, r4, #1
 8017d60:	ab0e      	add	r3, sp, #56	; 0x38
 8017d62:	f10a 0a18 	add.w	sl, sl, #24
 8017d66:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8017d6a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8017d6e:	e720      	b.n	8017bb2 <__kernel_rem_pio2+0x2a2>
 8017d70:	4630      	mov	r0, r6
 8017d72:	4639      	mov	r1, r7
 8017d74:	f7e8 ff08 	bl	8000b88 <__aeabi_d2iz>
 8017d78:	ab0e      	add	r3, sp, #56	; 0x38
 8017d7a:	4625      	mov	r5, r4
 8017d7c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8017d80:	e717      	b.n	8017bb2 <__kernel_rem_pio2+0x2a2>
 8017d82:	ab0e      	add	r3, sp, #56	; 0x38
 8017d84:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8017d88:	f7e8 fbe4 	bl	8000554 <__aeabi_i2d>
 8017d8c:	4632      	mov	r2, r6
 8017d8e:	463b      	mov	r3, r7
 8017d90:	f7e8 fc4a 	bl	8000628 <__aeabi_dmul>
 8017d94:	4b84      	ldr	r3, [pc, #528]	; (8017fa8 <__kernel_rem_pio2+0x698>)
 8017d96:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8017d9a:	2200      	movs	r2, #0
 8017d9c:	4630      	mov	r0, r6
 8017d9e:	4639      	mov	r1, r7
 8017da0:	f7e8 fc42 	bl	8000628 <__aeabi_dmul>
 8017da4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017da8:	4606      	mov	r6, r0
 8017daa:	460f      	mov	r7, r1
 8017dac:	e70f      	b.n	8017bce <__kernel_rem_pio2+0x2be>
 8017dae:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8017db2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8017db6:	f7e8 fc37 	bl	8000628 <__aeabi_dmul>
 8017dba:	4602      	mov	r2, r0
 8017dbc:	460b      	mov	r3, r1
 8017dbe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017dc2:	f7e8 fa7b 	bl	80002bc <__adddf3>
 8017dc6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8017dca:	f108 0801 	add.w	r8, r8, #1
 8017dce:	9b02      	ldr	r3, [sp, #8]
 8017dd0:	4598      	cmp	r8, r3
 8017dd2:	dc01      	bgt.n	8017dd8 <__kernel_rem_pio2+0x4c8>
 8017dd4:	45b8      	cmp	r8, r7
 8017dd6:	ddea      	ble.n	8017dae <__kernel_rem_pio2+0x49e>
 8017dd8:	ed9d 7b06 	vldr	d7, [sp, #24]
 8017ddc:	ab4a      	add	r3, sp, #296	; 0x128
 8017dde:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8017de2:	ed87 7b00 	vstr	d7, [r7]
 8017de6:	3e01      	subs	r6, #1
 8017de8:	e6f8      	b.n	8017bdc <__kernel_rem_pio2+0x2cc>
 8017dea:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8017dec:	2b02      	cmp	r3, #2
 8017dee:	dc0b      	bgt.n	8017e08 <__kernel_rem_pio2+0x4f8>
 8017df0:	2b00      	cmp	r3, #0
 8017df2:	dc35      	bgt.n	8017e60 <__kernel_rem_pio2+0x550>
 8017df4:	d059      	beq.n	8017eaa <__kernel_rem_pio2+0x59a>
 8017df6:	9b04      	ldr	r3, [sp, #16]
 8017df8:	f003 0007 	and.w	r0, r3, #7
 8017dfc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8017e00:	ecbd 8b02 	vpop	{d8}
 8017e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e08:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8017e0a:	2b03      	cmp	r3, #3
 8017e0c:	d1f3      	bne.n	8017df6 <__kernel_rem_pio2+0x4e6>
 8017e0e:	ab4a      	add	r3, sp, #296	; 0x128
 8017e10:	4423      	add	r3, r4
 8017e12:	9306      	str	r3, [sp, #24]
 8017e14:	461c      	mov	r4, r3
 8017e16:	469a      	mov	sl, r3
 8017e18:	9502      	str	r5, [sp, #8]
 8017e1a:	9b02      	ldr	r3, [sp, #8]
 8017e1c:	2b00      	cmp	r3, #0
 8017e1e:	f1aa 0a08 	sub.w	sl, sl, #8
 8017e22:	dc6b      	bgt.n	8017efc <__kernel_rem_pio2+0x5ec>
 8017e24:	46aa      	mov	sl, r5
 8017e26:	f1ba 0f01 	cmp.w	sl, #1
 8017e2a:	f1a4 0408 	sub.w	r4, r4, #8
 8017e2e:	f300 8085 	bgt.w	8017f3c <__kernel_rem_pio2+0x62c>
 8017e32:	9c06      	ldr	r4, [sp, #24]
 8017e34:	2000      	movs	r0, #0
 8017e36:	3408      	adds	r4, #8
 8017e38:	2100      	movs	r1, #0
 8017e3a:	2d01      	cmp	r5, #1
 8017e3c:	f300 809d 	bgt.w	8017f7a <__kernel_rem_pio2+0x66a>
 8017e40:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8017e44:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8017e48:	f1bb 0f00 	cmp.w	fp, #0
 8017e4c:	f040 809b 	bne.w	8017f86 <__kernel_rem_pio2+0x676>
 8017e50:	9b01      	ldr	r3, [sp, #4]
 8017e52:	e9c3 5600 	strd	r5, r6, [r3]
 8017e56:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8017e5a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8017e5e:	e7ca      	b.n	8017df6 <__kernel_rem_pio2+0x4e6>
 8017e60:	3408      	adds	r4, #8
 8017e62:	ab4a      	add	r3, sp, #296	; 0x128
 8017e64:	441c      	add	r4, r3
 8017e66:	462e      	mov	r6, r5
 8017e68:	2000      	movs	r0, #0
 8017e6a:	2100      	movs	r1, #0
 8017e6c:	2e00      	cmp	r6, #0
 8017e6e:	da36      	bge.n	8017ede <__kernel_rem_pio2+0x5ce>
 8017e70:	f1bb 0f00 	cmp.w	fp, #0
 8017e74:	d039      	beq.n	8017eea <__kernel_rem_pio2+0x5da>
 8017e76:	4602      	mov	r2, r0
 8017e78:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017e7c:	9c01      	ldr	r4, [sp, #4]
 8017e7e:	e9c4 2300 	strd	r2, r3, [r4]
 8017e82:	4602      	mov	r2, r0
 8017e84:	460b      	mov	r3, r1
 8017e86:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8017e8a:	f7e8 fa15 	bl	80002b8 <__aeabi_dsub>
 8017e8e:	ae4c      	add	r6, sp, #304	; 0x130
 8017e90:	2401      	movs	r4, #1
 8017e92:	42a5      	cmp	r5, r4
 8017e94:	da2c      	bge.n	8017ef0 <__kernel_rem_pio2+0x5e0>
 8017e96:	f1bb 0f00 	cmp.w	fp, #0
 8017e9a:	d002      	beq.n	8017ea2 <__kernel_rem_pio2+0x592>
 8017e9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017ea0:	4619      	mov	r1, r3
 8017ea2:	9b01      	ldr	r3, [sp, #4]
 8017ea4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8017ea8:	e7a5      	b.n	8017df6 <__kernel_rem_pio2+0x4e6>
 8017eaa:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8017eae:	eb0d 0403 	add.w	r4, sp, r3
 8017eb2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8017eb6:	2000      	movs	r0, #0
 8017eb8:	2100      	movs	r1, #0
 8017eba:	2d00      	cmp	r5, #0
 8017ebc:	da09      	bge.n	8017ed2 <__kernel_rem_pio2+0x5c2>
 8017ebe:	f1bb 0f00 	cmp.w	fp, #0
 8017ec2:	d002      	beq.n	8017eca <__kernel_rem_pio2+0x5ba>
 8017ec4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017ec8:	4619      	mov	r1, r3
 8017eca:	9b01      	ldr	r3, [sp, #4]
 8017ecc:	e9c3 0100 	strd	r0, r1, [r3]
 8017ed0:	e791      	b.n	8017df6 <__kernel_rem_pio2+0x4e6>
 8017ed2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8017ed6:	f7e8 f9f1 	bl	80002bc <__adddf3>
 8017eda:	3d01      	subs	r5, #1
 8017edc:	e7ed      	b.n	8017eba <__kernel_rem_pio2+0x5aa>
 8017ede:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8017ee2:	f7e8 f9eb 	bl	80002bc <__adddf3>
 8017ee6:	3e01      	subs	r6, #1
 8017ee8:	e7c0      	b.n	8017e6c <__kernel_rem_pio2+0x55c>
 8017eea:	4602      	mov	r2, r0
 8017eec:	460b      	mov	r3, r1
 8017eee:	e7c5      	b.n	8017e7c <__kernel_rem_pio2+0x56c>
 8017ef0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8017ef4:	f7e8 f9e2 	bl	80002bc <__adddf3>
 8017ef8:	3401      	adds	r4, #1
 8017efa:	e7ca      	b.n	8017e92 <__kernel_rem_pio2+0x582>
 8017efc:	e9da 8900 	ldrd	r8, r9, [sl]
 8017f00:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8017f04:	9b02      	ldr	r3, [sp, #8]
 8017f06:	3b01      	subs	r3, #1
 8017f08:	9302      	str	r3, [sp, #8]
 8017f0a:	4632      	mov	r2, r6
 8017f0c:	463b      	mov	r3, r7
 8017f0e:	4640      	mov	r0, r8
 8017f10:	4649      	mov	r1, r9
 8017f12:	f7e8 f9d3 	bl	80002bc <__adddf3>
 8017f16:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8017f1a:	4602      	mov	r2, r0
 8017f1c:	460b      	mov	r3, r1
 8017f1e:	4640      	mov	r0, r8
 8017f20:	4649      	mov	r1, r9
 8017f22:	f7e8 f9c9 	bl	80002b8 <__aeabi_dsub>
 8017f26:	4632      	mov	r2, r6
 8017f28:	463b      	mov	r3, r7
 8017f2a:	f7e8 f9c7 	bl	80002bc <__adddf3>
 8017f2e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8017f32:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8017f36:	ed8a 7b00 	vstr	d7, [sl]
 8017f3a:	e76e      	b.n	8017e1a <__kernel_rem_pio2+0x50a>
 8017f3c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8017f40:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8017f44:	4640      	mov	r0, r8
 8017f46:	4632      	mov	r2, r6
 8017f48:	463b      	mov	r3, r7
 8017f4a:	4649      	mov	r1, r9
 8017f4c:	f7e8 f9b6 	bl	80002bc <__adddf3>
 8017f50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017f54:	4602      	mov	r2, r0
 8017f56:	460b      	mov	r3, r1
 8017f58:	4640      	mov	r0, r8
 8017f5a:	4649      	mov	r1, r9
 8017f5c:	f7e8 f9ac 	bl	80002b8 <__aeabi_dsub>
 8017f60:	4632      	mov	r2, r6
 8017f62:	463b      	mov	r3, r7
 8017f64:	f7e8 f9aa 	bl	80002bc <__adddf3>
 8017f68:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017f6c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8017f70:	ed84 7b00 	vstr	d7, [r4]
 8017f74:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017f78:	e755      	b.n	8017e26 <__kernel_rem_pio2+0x516>
 8017f7a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8017f7e:	f7e8 f99d 	bl	80002bc <__adddf3>
 8017f82:	3d01      	subs	r5, #1
 8017f84:	e759      	b.n	8017e3a <__kernel_rem_pio2+0x52a>
 8017f86:	9b01      	ldr	r3, [sp, #4]
 8017f88:	9a01      	ldr	r2, [sp, #4]
 8017f8a:	601d      	str	r5, [r3, #0]
 8017f8c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8017f90:	605c      	str	r4, [r3, #4]
 8017f92:	609f      	str	r7, [r3, #8]
 8017f94:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8017f98:	60d3      	str	r3, [r2, #12]
 8017f9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017f9e:	6110      	str	r0, [r2, #16]
 8017fa0:	6153      	str	r3, [r2, #20]
 8017fa2:	e728      	b.n	8017df6 <__kernel_rem_pio2+0x4e6>
 8017fa4:	41700000 	.word	0x41700000
 8017fa8:	3e700000 	.word	0x3e700000
 8017fac:	00000000 	.word	0x00000000

08017fb0 <__kernel_sin>:
 8017fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017fb4:	ed2d 8b04 	vpush	{d8-d9}
 8017fb8:	eeb0 8a41 	vmov.f32	s16, s2
 8017fbc:	eef0 8a61 	vmov.f32	s17, s3
 8017fc0:	ec55 4b10 	vmov	r4, r5, d0
 8017fc4:	b083      	sub	sp, #12
 8017fc6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8017fca:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8017fce:	9001      	str	r0, [sp, #4]
 8017fd0:	da06      	bge.n	8017fe0 <__kernel_sin+0x30>
 8017fd2:	ee10 0a10 	vmov	r0, s0
 8017fd6:	4629      	mov	r1, r5
 8017fd8:	f7e8 fdd6 	bl	8000b88 <__aeabi_d2iz>
 8017fdc:	2800      	cmp	r0, #0
 8017fde:	d051      	beq.n	8018084 <__kernel_sin+0xd4>
 8017fe0:	4622      	mov	r2, r4
 8017fe2:	462b      	mov	r3, r5
 8017fe4:	4620      	mov	r0, r4
 8017fe6:	4629      	mov	r1, r5
 8017fe8:	f7e8 fb1e 	bl	8000628 <__aeabi_dmul>
 8017fec:	4682      	mov	sl, r0
 8017fee:	468b      	mov	fp, r1
 8017ff0:	4602      	mov	r2, r0
 8017ff2:	460b      	mov	r3, r1
 8017ff4:	4620      	mov	r0, r4
 8017ff6:	4629      	mov	r1, r5
 8017ff8:	f7e8 fb16 	bl	8000628 <__aeabi_dmul>
 8017ffc:	a341      	add	r3, pc, #260	; (adr r3, 8018104 <__kernel_sin+0x154>)
 8017ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018002:	4680      	mov	r8, r0
 8018004:	4689      	mov	r9, r1
 8018006:	4650      	mov	r0, sl
 8018008:	4659      	mov	r1, fp
 801800a:	f7e8 fb0d 	bl	8000628 <__aeabi_dmul>
 801800e:	a33f      	add	r3, pc, #252	; (adr r3, 801810c <__kernel_sin+0x15c>)
 8018010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018014:	f7e8 f950 	bl	80002b8 <__aeabi_dsub>
 8018018:	4652      	mov	r2, sl
 801801a:	465b      	mov	r3, fp
 801801c:	f7e8 fb04 	bl	8000628 <__aeabi_dmul>
 8018020:	a33c      	add	r3, pc, #240	; (adr r3, 8018114 <__kernel_sin+0x164>)
 8018022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018026:	f7e8 f949 	bl	80002bc <__adddf3>
 801802a:	4652      	mov	r2, sl
 801802c:	465b      	mov	r3, fp
 801802e:	f7e8 fafb 	bl	8000628 <__aeabi_dmul>
 8018032:	a33a      	add	r3, pc, #232	; (adr r3, 801811c <__kernel_sin+0x16c>)
 8018034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018038:	f7e8 f93e 	bl	80002b8 <__aeabi_dsub>
 801803c:	4652      	mov	r2, sl
 801803e:	465b      	mov	r3, fp
 8018040:	f7e8 faf2 	bl	8000628 <__aeabi_dmul>
 8018044:	a337      	add	r3, pc, #220	; (adr r3, 8018124 <__kernel_sin+0x174>)
 8018046:	e9d3 2300 	ldrd	r2, r3, [r3]
 801804a:	f7e8 f937 	bl	80002bc <__adddf3>
 801804e:	9b01      	ldr	r3, [sp, #4]
 8018050:	4606      	mov	r6, r0
 8018052:	460f      	mov	r7, r1
 8018054:	b9eb      	cbnz	r3, 8018092 <__kernel_sin+0xe2>
 8018056:	4602      	mov	r2, r0
 8018058:	460b      	mov	r3, r1
 801805a:	4650      	mov	r0, sl
 801805c:	4659      	mov	r1, fp
 801805e:	f7e8 fae3 	bl	8000628 <__aeabi_dmul>
 8018062:	a325      	add	r3, pc, #148	; (adr r3, 80180f8 <__kernel_sin+0x148>)
 8018064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018068:	f7e8 f926 	bl	80002b8 <__aeabi_dsub>
 801806c:	4642      	mov	r2, r8
 801806e:	464b      	mov	r3, r9
 8018070:	f7e8 fada 	bl	8000628 <__aeabi_dmul>
 8018074:	4602      	mov	r2, r0
 8018076:	460b      	mov	r3, r1
 8018078:	4620      	mov	r0, r4
 801807a:	4629      	mov	r1, r5
 801807c:	f7e8 f91e 	bl	80002bc <__adddf3>
 8018080:	4604      	mov	r4, r0
 8018082:	460d      	mov	r5, r1
 8018084:	ec45 4b10 	vmov	d0, r4, r5
 8018088:	b003      	add	sp, #12
 801808a:	ecbd 8b04 	vpop	{d8-d9}
 801808e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018092:	4b1b      	ldr	r3, [pc, #108]	; (8018100 <__kernel_sin+0x150>)
 8018094:	ec51 0b18 	vmov	r0, r1, d8
 8018098:	2200      	movs	r2, #0
 801809a:	f7e8 fac5 	bl	8000628 <__aeabi_dmul>
 801809e:	4632      	mov	r2, r6
 80180a0:	ec41 0b19 	vmov	d9, r0, r1
 80180a4:	463b      	mov	r3, r7
 80180a6:	4640      	mov	r0, r8
 80180a8:	4649      	mov	r1, r9
 80180aa:	f7e8 fabd 	bl	8000628 <__aeabi_dmul>
 80180ae:	4602      	mov	r2, r0
 80180b0:	460b      	mov	r3, r1
 80180b2:	ec51 0b19 	vmov	r0, r1, d9
 80180b6:	f7e8 f8ff 	bl	80002b8 <__aeabi_dsub>
 80180ba:	4652      	mov	r2, sl
 80180bc:	465b      	mov	r3, fp
 80180be:	f7e8 fab3 	bl	8000628 <__aeabi_dmul>
 80180c2:	ec53 2b18 	vmov	r2, r3, d8
 80180c6:	f7e8 f8f7 	bl	80002b8 <__aeabi_dsub>
 80180ca:	a30b      	add	r3, pc, #44	; (adr r3, 80180f8 <__kernel_sin+0x148>)
 80180cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180d0:	4606      	mov	r6, r0
 80180d2:	460f      	mov	r7, r1
 80180d4:	4640      	mov	r0, r8
 80180d6:	4649      	mov	r1, r9
 80180d8:	f7e8 faa6 	bl	8000628 <__aeabi_dmul>
 80180dc:	4602      	mov	r2, r0
 80180de:	460b      	mov	r3, r1
 80180e0:	4630      	mov	r0, r6
 80180e2:	4639      	mov	r1, r7
 80180e4:	f7e8 f8ea 	bl	80002bc <__adddf3>
 80180e8:	4602      	mov	r2, r0
 80180ea:	460b      	mov	r3, r1
 80180ec:	4620      	mov	r0, r4
 80180ee:	4629      	mov	r1, r5
 80180f0:	f7e8 f8e2 	bl	80002b8 <__aeabi_dsub>
 80180f4:	e7c4      	b.n	8018080 <__kernel_sin+0xd0>
 80180f6:	bf00      	nop
 80180f8:	55555549 	.word	0x55555549
 80180fc:	3fc55555 	.word	0x3fc55555
 8018100:	3fe00000 	.word	0x3fe00000
 8018104:	5acfd57c 	.word	0x5acfd57c
 8018108:	3de5d93a 	.word	0x3de5d93a
 801810c:	8a2b9ceb 	.word	0x8a2b9ceb
 8018110:	3e5ae5e6 	.word	0x3e5ae5e6
 8018114:	57b1fe7d 	.word	0x57b1fe7d
 8018118:	3ec71de3 	.word	0x3ec71de3
 801811c:	19c161d5 	.word	0x19c161d5
 8018120:	3f2a01a0 	.word	0x3f2a01a0
 8018124:	1110f8a6 	.word	0x1110f8a6
 8018128:	3f811111 	.word	0x3f811111

0801812c <fabs>:
 801812c:	ec51 0b10 	vmov	r0, r1, d0
 8018130:	ee10 2a10 	vmov	r2, s0
 8018134:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8018138:	ec43 2b10 	vmov	d0, r2, r3
 801813c:	4770      	bx	lr
	...

08018140 <floor>:
 8018140:	ec51 0b10 	vmov	r0, r1, d0
 8018144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018148:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801814c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8018150:	2e13      	cmp	r6, #19
 8018152:	ee10 5a10 	vmov	r5, s0
 8018156:	ee10 8a10 	vmov	r8, s0
 801815a:	460c      	mov	r4, r1
 801815c:	dc32      	bgt.n	80181c4 <floor+0x84>
 801815e:	2e00      	cmp	r6, #0
 8018160:	da14      	bge.n	801818c <floor+0x4c>
 8018162:	a333      	add	r3, pc, #204	; (adr r3, 8018230 <floor+0xf0>)
 8018164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018168:	f7e8 f8a8 	bl	80002bc <__adddf3>
 801816c:	2200      	movs	r2, #0
 801816e:	2300      	movs	r3, #0
 8018170:	f7e8 fcea 	bl	8000b48 <__aeabi_dcmpgt>
 8018174:	b138      	cbz	r0, 8018186 <floor+0x46>
 8018176:	2c00      	cmp	r4, #0
 8018178:	da57      	bge.n	801822a <floor+0xea>
 801817a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801817e:	431d      	orrs	r5, r3
 8018180:	d001      	beq.n	8018186 <floor+0x46>
 8018182:	4c2d      	ldr	r4, [pc, #180]	; (8018238 <floor+0xf8>)
 8018184:	2500      	movs	r5, #0
 8018186:	4621      	mov	r1, r4
 8018188:	4628      	mov	r0, r5
 801818a:	e025      	b.n	80181d8 <floor+0x98>
 801818c:	4f2b      	ldr	r7, [pc, #172]	; (801823c <floor+0xfc>)
 801818e:	4137      	asrs	r7, r6
 8018190:	ea01 0307 	and.w	r3, r1, r7
 8018194:	4303      	orrs	r3, r0
 8018196:	d01f      	beq.n	80181d8 <floor+0x98>
 8018198:	a325      	add	r3, pc, #148	; (adr r3, 8018230 <floor+0xf0>)
 801819a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801819e:	f7e8 f88d 	bl	80002bc <__adddf3>
 80181a2:	2200      	movs	r2, #0
 80181a4:	2300      	movs	r3, #0
 80181a6:	f7e8 fccf 	bl	8000b48 <__aeabi_dcmpgt>
 80181aa:	2800      	cmp	r0, #0
 80181ac:	d0eb      	beq.n	8018186 <floor+0x46>
 80181ae:	2c00      	cmp	r4, #0
 80181b0:	bfbe      	ittt	lt
 80181b2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80181b6:	fa43 f606 	asrlt.w	r6, r3, r6
 80181ba:	19a4      	addlt	r4, r4, r6
 80181bc:	ea24 0407 	bic.w	r4, r4, r7
 80181c0:	2500      	movs	r5, #0
 80181c2:	e7e0      	b.n	8018186 <floor+0x46>
 80181c4:	2e33      	cmp	r6, #51	; 0x33
 80181c6:	dd0b      	ble.n	80181e0 <floor+0xa0>
 80181c8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80181cc:	d104      	bne.n	80181d8 <floor+0x98>
 80181ce:	ee10 2a10 	vmov	r2, s0
 80181d2:	460b      	mov	r3, r1
 80181d4:	f7e8 f872 	bl	80002bc <__adddf3>
 80181d8:	ec41 0b10 	vmov	d0, r0, r1
 80181dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80181e0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80181e4:	f04f 33ff 	mov.w	r3, #4294967295
 80181e8:	fa23 f707 	lsr.w	r7, r3, r7
 80181ec:	4207      	tst	r7, r0
 80181ee:	d0f3      	beq.n	80181d8 <floor+0x98>
 80181f0:	a30f      	add	r3, pc, #60	; (adr r3, 8018230 <floor+0xf0>)
 80181f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80181f6:	f7e8 f861 	bl	80002bc <__adddf3>
 80181fa:	2200      	movs	r2, #0
 80181fc:	2300      	movs	r3, #0
 80181fe:	f7e8 fca3 	bl	8000b48 <__aeabi_dcmpgt>
 8018202:	2800      	cmp	r0, #0
 8018204:	d0bf      	beq.n	8018186 <floor+0x46>
 8018206:	2c00      	cmp	r4, #0
 8018208:	da02      	bge.n	8018210 <floor+0xd0>
 801820a:	2e14      	cmp	r6, #20
 801820c:	d103      	bne.n	8018216 <floor+0xd6>
 801820e:	3401      	adds	r4, #1
 8018210:	ea25 0507 	bic.w	r5, r5, r7
 8018214:	e7b7      	b.n	8018186 <floor+0x46>
 8018216:	2301      	movs	r3, #1
 8018218:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801821c:	fa03 f606 	lsl.w	r6, r3, r6
 8018220:	4435      	add	r5, r6
 8018222:	4545      	cmp	r5, r8
 8018224:	bf38      	it	cc
 8018226:	18e4      	addcc	r4, r4, r3
 8018228:	e7f2      	b.n	8018210 <floor+0xd0>
 801822a:	2500      	movs	r5, #0
 801822c:	462c      	mov	r4, r5
 801822e:	e7aa      	b.n	8018186 <floor+0x46>
 8018230:	8800759c 	.word	0x8800759c
 8018234:	7e37e43c 	.word	0x7e37e43c
 8018238:	bff00000 	.word	0xbff00000
 801823c:	000fffff 	.word	0x000fffff

08018240 <scalbn>:
 8018240:	b570      	push	{r4, r5, r6, lr}
 8018242:	ec55 4b10 	vmov	r4, r5, d0
 8018246:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801824a:	4606      	mov	r6, r0
 801824c:	462b      	mov	r3, r5
 801824e:	b99a      	cbnz	r2, 8018278 <scalbn+0x38>
 8018250:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8018254:	4323      	orrs	r3, r4
 8018256:	d036      	beq.n	80182c6 <scalbn+0x86>
 8018258:	4b39      	ldr	r3, [pc, #228]	; (8018340 <scalbn+0x100>)
 801825a:	4629      	mov	r1, r5
 801825c:	ee10 0a10 	vmov	r0, s0
 8018260:	2200      	movs	r2, #0
 8018262:	f7e8 f9e1 	bl	8000628 <__aeabi_dmul>
 8018266:	4b37      	ldr	r3, [pc, #220]	; (8018344 <scalbn+0x104>)
 8018268:	429e      	cmp	r6, r3
 801826a:	4604      	mov	r4, r0
 801826c:	460d      	mov	r5, r1
 801826e:	da10      	bge.n	8018292 <scalbn+0x52>
 8018270:	a32b      	add	r3, pc, #172	; (adr r3, 8018320 <scalbn+0xe0>)
 8018272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018276:	e03a      	b.n	80182ee <scalbn+0xae>
 8018278:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801827c:	428a      	cmp	r2, r1
 801827e:	d10c      	bne.n	801829a <scalbn+0x5a>
 8018280:	ee10 2a10 	vmov	r2, s0
 8018284:	4620      	mov	r0, r4
 8018286:	4629      	mov	r1, r5
 8018288:	f7e8 f818 	bl	80002bc <__adddf3>
 801828c:	4604      	mov	r4, r0
 801828e:	460d      	mov	r5, r1
 8018290:	e019      	b.n	80182c6 <scalbn+0x86>
 8018292:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8018296:	460b      	mov	r3, r1
 8018298:	3a36      	subs	r2, #54	; 0x36
 801829a:	4432      	add	r2, r6
 801829c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80182a0:	428a      	cmp	r2, r1
 80182a2:	dd08      	ble.n	80182b6 <scalbn+0x76>
 80182a4:	2d00      	cmp	r5, #0
 80182a6:	a120      	add	r1, pc, #128	; (adr r1, 8018328 <scalbn+0xe8>)
 80182a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80182ac:	da1c      	bge.n	80182e8 <scalbn+0xa8>
 80182ae:	a120      	add	r1, pc, #128	; (adr r1, 8018330 <scalbn+0xf0>)
 80182b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80182b4:	e018      	b.n	80182e8 <scalbn+0xa8>
 80182b6:	2a00      	cmp	r2, #0
 80182b8:	dd08      	ble.n	80182cc <scalbn+0x8c>
 80182ba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80182be:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80182c2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80182c6:	ec45 4b10 	vmov	d0, r4, r5
 80182ca:	bd70      	pop	{r4, r5, r6, pc}
 80182cc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80182d0:	da19      	bge.n	8018306 <scalbn+0xc6>
 80182d2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80182d6:	429e      	cmp	r6, r3
 80182d8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80182dc:	dd0a      	ble.n	80182f4 <scalbn+0xb4>
 80182de:	a112      	add	r1, pc, #72	; (adr r1, 8018328 <scalbn+0xe8>)
 80182e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80182e4:	2b00      	cmp	r3, #0
 80182e6:	d1e2      	bne.n	80182ae <scalbn+0x6e>
 80182e8:	a30f      	add	r3, pc, #60	; (adr r3, 8018328 <scalbn+0xe8>)
 80182ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182ee:	f7e8 f99b 	bl	8000628 <__aeabi_dmul>
 80182f2:	e7cb      	b.n	801828c <scalbn+0x4c>
 80182f4:	a10a      	add	r1, pc, #40	; (adr r1, 8018320 <scalbn+0xe0>)
 80182f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80182fa:	2b00      	cmp	r3, #0
 80182fc:	d0b8      	beq.n	8018270 <scalbn+0x30>
 80182fe:	a10e      	add	r1, pc, #56	; (adr r1, 8018338 <scalbn+0xf8>)
 8018300:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018304:	e7b4      	b.n	8018270 <scalbn+0x30>
 8018306:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801830a:	3236      	adds	r2, #54	; 0x36
 801830c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8018310:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8018314:	4620      	mov	r0, r4
 8018316:	4b0c      	ldr	r3, [pc, #48]	; (8018348 <scalbn+0x108>)
 8018318:	2200      	movs	r2, #0
 801831a:	e7e8      	b.n	80182ee <scalbn+0xae>
 801831c:	f3af 8000 	nop.w
 8018320:	c2f8f359 	.word	0xc2f8f359
 8018324:	01a56e1f 	.word	0x01a56e1f
 8018328:	8800759c 	.word	0x8800759c
 801832c:	7e37e43c 	.word	0x7e37e43c
 8018330:	8800759c 	.word	0x8800759c
 8018334:	fe37e43c 	.word	0xfe37e43c
 8018338:	c2f8f359 	.word	0xc2f8f359
 801833c:	81a56e1f 	.word	0x81a56e1f
 8018340:	43500000 	.word	0x43500000
 8018344:	ffff3cb0 	.word	0xffff3cb0
 8018348:	3c900000 	.word	0x3c900000

0801834c <_init>:
 801834c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801834e:	bf00      	nop
 8018350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018352:	bc08      	pop	{r3}
 8018354:	469e      	mov	lr, r3
 8018356:	4770      	bx	lr

08018358 <_fini>:
 8018358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801835a:	bf00      	nop
 801835c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801835e:	bc08      	pop	{r3}
 8018360:	469e      	mov	lr, r3
 8018362:	4770      	bx	lr
